// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 112 0 0
// SetAreaMapShowCustom ( area2 , 1 ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_INT 1
  13: PPUSH
  14: CALL 19 0 2
// end ;
  18: END
// function SetAreaMapShowCustom ( area , mode ) ; var i , tmp ; begin
  19: LD_INT 0
  21: PPUSH
  22: PPUSH
  23: PPUSH
// tmp := AreaToList ( area , 0 ) ;
  24: LD_ADDR_VAR 0 5
  28: PUSH
  29: LD_VAR 0 1
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: CALL_OW 517
  41: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
  42: LD_ADDR_VAR 0 4
  46: PUSH
  47: DOUBLE
  48: LD_INT 1
  50: DEC
  51: ST_TO_ADDR
  52: LD_VAR 0 5
  56: PUSH
  57: LD_INT 1
  59: ARRAY
  60: PUSH
  61: FOR_TO
  62: IFFALSE 105
// SetAreaMapShowHex ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , mode ) ;
  64: LD_VAR 0 5
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PUSH
  73: LD_VAR 0 4
  77: ARRAY
  78: PPUSH
  79: LD_VAR 0 5
  83: PUSH
  84: LD_INT 2
  86: ARRAY
  87: PUSH
  88: LD_VAR 0 4
  92: ARRAY
  93: PPUSH
  94: LD_VAR 0 2
  98: PPUSH
  99: CALL_OW 598
 103: GO 61
 105: POP
 106: POP
// end ;
 107: LD_VAR 0 3
 111: RET
// var t ; function Init ; begin
 112: LD_INT 0
 114: PPUSH
// t := 0 0$0 ;
 115: LD_ADDR_LOC 1
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// CreateResourcesXY ( mat_cans , 5 , 63 , 64 , false ) ;
 123: LD_INT 1
 125: PPUSH
 126: LD_INT 5
 128: PPUSH
 129: LD_INT 63
 131: PPUSH
 132: LD_INT 64
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL_OW 58
// wait ( 0 0$1 ) ;
 142: LD_INT 35
 144: PPUSH
 145: CALL_OW 67
// CreateResourcesXY ( mat_cans , 4 , 63 , 64 , false ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 4
 154: PPUSH
 155: LD_INT 63
 157: PPUSH
 158: LD_INT 64
 160: PPUSH
 161: LD_INT 0
 163: PPUSH
 164: CALL_OW 58
// end ;
 168: LD_VAR 0 1
 172: RET
// function GetAllLabKind ( side , kinds ) ; var i , j , tmp ; begin
 173: LD_INT 0
 175: PPUSH
 176: PPUSH
 177: PPUSH
 178: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
 179: LD_ADDR_VAR 0 6
 183: PUSH
 184: LD_INT 22
 186: PUSH
 187: LD_VAR 0 1
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 30
 201: PUSH
 202: LD_INT 7
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 30
 211: PUSH
 212: LD_INT 8
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: ST_TO_ADDR
// if not tmp or not kinds then
 233: LD_VAR 0 6
 237: NOT
 238: PUSH
 239: LD_VAR 0 2
 243: NOT
 244: OR
 245: IFFALSE 249
// exit ;
 247: GO 358
// result := 0 ;
 249: LD_ADDR_VAR 0 3
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// for i in tmp do
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 6
 266: PUSH
 267: FOR_IN
 268: IFFALSE 356
// for j := 1 to 2 do
 270: LD_ADDR_VAR 0 5
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 2
 282: PUSH
 283: FOR_TO
 284: IFFALSE 352
// if GetLabKind ( i , j ) in kinds then
 286: LD_VAR 0 4
 290: PPUSH
 291: LD_VAR 0 5
 295: PPUSH
 296: CALL_OW 268
 300: PUSH
 301: LD_VAR 0 2
 305: IN
 306: IFFALSE 350
// begin kinds := kinds diff GetLabKind ( i , j ) ;
 308: LD_ADDR_VAR 0 2
 312: PUSH
 313: LD_VAR 0 2
 317: PUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: LD_VAR 0 5
 327: PPUSH
 328: CALL_OW 268
 332: DIFF
 333: ST_TO_ADDR
// result := result + 1 ;
 334: LD_ADDR_VAR 0 3
 338: PUSH
 339: LD_VAR 0 3
 343: PUSH
 344: LD_INT 1
 346: PLUS
 347: ST_TO_ADDR
// continue ;
 348: GO 283
// end ;
 350: GO 283
 352: POP
 353: POP
 354: GO 267
 356: POP
 357: POP
// end ;
 358: LD_VAR 0 3
 362: RET
// on VehicleRecycled ( fac , veh , side , nat , x , y , dir , chassis , control , engine , weapon ) do begin display_strings := weapon ;
 363: LD_ADDR_OWVAR 47
 367: PUSH
 368: LD_VAR 0 11
 372: ST_TO_ADDR
// end ;
 373: PPOPN 11
 375: END
// export Omar ; every 0 0$1 do
 376: GO 378
 378: DISABLE
// begin uc_side := 1 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// uc_nation := 2 ;
 387: LD_ADDR_OWVAR 21
 391: PUSH
 392: LD_INT 2
 394: ST_TO_ADDR
// hc_class := class_desert_warior ;
 395: LD_ADDR_OWVAR 28
 399: PUSH
 400: LD_INT 11
 402: ST_TO_ADDR
// hc_sex := sex_male ;
 403: LD_ADDR_OWVAR 27
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// hc_name := Omar ;
 411: LD_ADDR_OWVAR 26
 415: PUSH
 416: LD_STRING Omar
 418: ST_TO_ADDR
// Omar := CreateHuman ;
 419: LD_ADDR_EXP 1
 423: PUSH
 424: CALL_OW 44
 428: ST_TO_ADDR
// SetTag ( Omar , 500 ) ;
 429: LD_EXP 1
 433: PPUSH
 434: LD_INT 500
 436: PPUSH
 437: CALL_OW 109
// PlaceUnitXY ( Omar , 27 , 27 , false ) ;
 441: LD_EXP 1
 445: PPUSH
 446: LD_INT 27
 448: PPUSH
 449: LD_INT 27
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL_OW 48
// end ;
 459: END
// every 0 0$1 do var i ;
 460: GO 462
 462: DISABLE
 463: LD_INT 0
 465: PPUSH
// begin for i := 1 to 3 do
 466: LD_ADDR_VAR 0 1
 470: PUSH
 471: DOUBLE
 472: LD_INT 1
 474: DEC
 475: ST_TO_ADDR
 476: LD_INT 3
 478: PUSH
 479: FOR_TO
 480: IFFALSE 511
// AddComAttackPlace ( ar1 , 59 + ( ( i - 1 ) * 2 ) , 74 ) ;
 482: LD_INT 67
 484: PPUSH
 485: LD_INT 59
 487: PUSH
 488: LD_VAR 0 1
 492: PUSH
 493: LD_INT 1
 495: MINUS
 496: PUSH
 497: LD_INT 2
 499: MUL
 500: PLUS
 501: PPUSH
 502: LD_INT 74
 504: PPUSH
 505: CALL_OW 176
 509: GO 479
 511: POP
 512: POP
// end ; end_of_file
 513: PPOPN 1
 515: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 516: LD_INT 0
 518: PPUSH
 519: PPUSH
// if exist_mode then
 520: LD_VAR 0 2
 524: IFFALSE 549
// unit := CreateCharacter ( prefix & ident ) else
 526: LD_ADDR_VAR 0 5
 530: PUSH
 531: LD_VAR 0 3
 535: PUSH
 536: LD_VAR 0 1
 540: STR
 541: PPUSH
 542: CALL_OW 34
 546: ST_TO_ADDR
 547: GO 564
// unit := NewCharacter ( ident ) ;
 549: LD_ADDR_VAR 0 5
 553: PUSH
 554: LD_VAR 0 1
 558: PPUSH
 559: CALL_OW 25
 563: ST_TO_ADDR
// result := unit ;
 564: LD_ADDR_VAR 0 4
 568: PUSH
 569: LD_VAR 0 5
 573: ST_TO_ADDR
// end ;
 574: LD_VAR 0 4
 578: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 579: LD_INT 0
 581: PPUSH
 582: PPUSH
// if not side or not nation then
 583: LD_VAR 0 1
 587: NOT
 588: PUSH
 589: LD_VAR 0 2
 593: NOT
 594: OR
 595: IFFALSE 599
// exit ;
 597: GO 1367
// case nation of nation_american :
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 1
 606: DOUBLE
 607: EQUAL
 608: IFTRUE 612
 610: GO 826
 612: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 35
 620: PUSH
 621: LD_INT 45
 623: PUSH
 624: LD_INT 46
 626: PUSH
 627: LD_INT 47
 629: PUSH
 630: LD_INT 82
 632: PUSH
 633: LD_INT 83
 635: PUSH
 636: LD_INT 84
 638: PUSH
 639: LD_INT 85
 641: PUSH
 642: LD_INT 86
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 6
 653: PUSH
 654: LD_INT 15
 656: PUSH
 657: LD_INT 16
 659: PUSH
 660: LD_INT 7
 662: PUSH
 663: LD_INT 12
 665: PUSH
 666: LD_INT 13
 668: PUSH
 669: LD_INT 10
 671: PUSH
 672: LD_INT 14
 674: PUSH
 675: LD_INT 20
 677: PUSH
 678: LD_INT 21
 680: PUSH
 681: LD_INT 22
 683: PUSH
 684: LD_INT 25
 686: PUSH
 687: LD_INT 32
 689: PUSH
 690: LD_INT 27
 692: PUSH
 693: LD_INT 36
 695: PUSH
 696: LD_INT 69
 698: PUSH
 699: LD_INT 39
 701: PUSH
 702: LD_INT 34
 704: PUSH
 705: LD_INT 40
 707: PUSH
 708: LD_INT 48
 710: PUSH
 711: LD_INT 49
 713: PUSH
 714: LD_INT 50
 716: PUSH
 717: LD_INT 51
 719: PUSH
 720: LD_INT 52
 722: PUSH
 723: LD_INT 53
 725: PUSH
 726: LD_INT 54
 728: PUSH
 729: LD_INT 55
 731: PUSH
 732: LD_INT 56
 734: PUSH
 735: LD_INT 57
 737: PUSH
 738: LD_INT 58
 740: PUSH
 741: LD_INT 59
 743: PUSH
 744: LD_INT 60
 746: PUSH
 747: LD_INT 61
 749: PUSH
 750: LD_INT 62
 752: PUSH
 753: LD_INT 80
 755: PUSH
 756: LD_INT 82
 758: PUSH
 759: LD_INT 83
 761: PUSH
 762: LD_INT 84
 764: PUSH
 765: LD_INT 85
 767: PUSH
 768: LD_INT 86
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
 824: GO 1291
 826: LD_INT 2
 828: DOUBLE
 829: EQUAL
 830: IFTRUE 834
 832: GO 1060
 834: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_INT 35
 842: PUSH
 843: LD_INT 45
 845: PUSH
 846: LD_INT 46
 848: PUSH
 849: LD_INT 47
 851: PUSH
 852: LD_INT 82
 854: PUSH
 855: LD_INT 83
 857: PUSH
 858: LD_INT 84
 860: PUSH
 861: LD_INT 85
 863: PUSH
 864: LD_INT 87
 866: PUSH
 867: LD_INT 70
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 11
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: LD_INT 4
 881: PUSH
 882: LD_INT 5
 884: PUSH
 885: LD_INT 6
 887: PUSH
 888: LD_INT 15
 890: PUSH
 891: LD_INT 18
 893: PUSH
 894: LD_INT 7
 896: PUSH
 897: LD_INT 17
 899: PUSH
 900: LD_INT 8
 902: PUSH
 903: LD_INT 20
 905: PUSH
 906: LD_INT 21
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 72
 914: PUSH
 915: LD_INT 26
 917: PUSH
 918: LD_INT 69
 920: PUSH
 921: LD_INT 39
 923: PUSH
 924: LD_INT 40
 926: PUSH
 927: LD_INT 41
 929: PUSH
 930: LD_INT 42
 932: PUSH
 933: LD_INT 43
 935: PUSH
 936: LD_INT 48
 938: PUSH
 939: LD_INT 49
 941: PUSH
 942: LD_INT 50
 944: PUSH
 945: LD_INT 51
 947: PUSH
 948: LD_INT 52
 950: PUSH
 951: LD_INT 53
 953: PUSH
 954: LD_INT 54
 956: PUSH
 957: LD_INT 55
 959: PUSH
 960: LD_INT 56
 962: PUSH
 963: LD_INT 60
 965: PUSH
 966: LD_INT 61
 968: PUSH
 969: LD_INT 62
 971: PUSH
 972: LD_INT 66
 974: PUSH
 975: LD_INT 67
 977: PUSH
 978: LD_INT 68
 980: PUSH
 981: LD_INT 81
 983: PUSH
 984: LD_INT 82
 986: PUSH
 987: LD_INT 83
 989: PUSH
 990: LD_INT 84
 992: PUSH
 993: LD_INT 85
 995: PUSH
 996: LD_INT 87
 998: PUSH
 999: LD_INT 88
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
1058: GO 1291
1060: LD_INT 3
1062: DOUBLE
1063: EQUAL
1064: IFTRUE 1068
1066: GO 1290
1068: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1069: LD_ADDR_VAR 0 4
1073: PUSH
1074: LD_INT 46
1076: PUSH
1077: LD_INT 47
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 2
1085: PUSH
1086: LD_INT 82
1088: PUSH
1089: LD_INT 83
1091: PUSH
1092: LD_INT 84
1094: PUSH
1095: LD_INT 85
1097: PUSH
1098: LD_INT 86
1100: PUSH
1101: LD_INT 11
1103: PUSH
1104: LD_INT 9
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: LD_INT 19
1112: PUSH
1113: LD_INT 21
1115: PUSH
1116: LD_INT 24
1118: PUSH
1119: LD_INT 22
1121: PUSH
1122: LD_INT 25
1124: PUSH
1125: LD_INT 28
1127: PUSH
1128: LD_INT 29
1130: PUSH
1131: LD_INT 30
1133: PUSH
1134: LD_INT 31
1136: PUSH
1137: LD_INT 37
1139: PUSH
1140: LD_INT 38
1142: PUSH
1143: LD_INT 32
1145: PUSH
1146: LD_INT 27
1148: PUSH
1149: LD_INT 33
1151: PUSH
1152: LD_INT 69
1154: PUSH
1155: LD_INT 39
1157: PUSH
1158: LD_INT 34
1160: PUSH
1161: LD_INT 40
1163: PUSH
1164: LD_INT 71
1166: PUSH
1167: LD_INT 23
1169: PUSH
1170: LD_INT 44
1172: PUSH
1173: LD_INT 48
1175: PUSH
1176: LD_INT 49
1178: PUSH
1179: LD_INT 50
1181: PUSH
1182: LD_INT 51
1184: PUSH
1185: LD_INT 52
1187: PUSH
1188: LD_INT 53
1190: PUSH
1191: LD_INT 54
1193: PUSH
1194: LD_INT 55
1196: PUSH
1197: LD_INT 56
1199: PUSH
1200: LD_INT 57
1202: PUSH
1203: LD_INT 58
1205: PUSH
1206: LD_INT 59
1208: PUSH
1209: LD_INT 63
1211: PUSH
1212: LD_INT 64
1214: PUSH
1215: LD_INT 65
1217: PUSH
1218: LD_INT 82
1220: PUSH
1221: LD_INT 83
1223: PUSH
1224: LD_INT 84
1226: PUSH
1227: LD_INT 85
1229: PUSH
1230: LD_INT 86
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: ST_TO_ADDR
1288: GO 1291
1290: POP
// if state > - 1 and state < 3 then
1291: LD_VAR 0 3
1295: PUSH
1296: LD_INT 1
1298: NEG
1299: GREATER
1300: PUSH
1301: LD_VAR 0 3
1305: PUSH
1306: LD_INT 3
1308: LESS
1309: AND
1310: IFFALSE 1367
// for i in result do
1312: LD_ADDR_VAR 0 5
1316: PUSH
1317: LD_VAR 0 4
1321: PUSH
1322: FOR_IN
1323: IFFALSE 1365
// if GetTech ( i , side ) <> state then
1325: LD_VAR 0 5
1329: PPUSH
1330: LD_VAR 0 1
1334: PPUSH
1335: CALL_OW 321
1339: PUSH
1340: LD_VAR 0 3
1344: NONEQUAL
1345: IFFALSE 1363
// result := result diff i ;
1347: LD_ADDR_VAR 0 4
1351: PUSH
1352: LD_VAR 0 4
1356: PUSH
1357: LD_VAR 0 5
1361: DIFF
1362: ST_TO_ADDR
1363: GO 1322
1365: POP
1366: POP
// end ;
1367: LD_VAR 0 4
1371: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1372: LD_INT 0
1374: PPUSH
1375: PPUSH
1376: PPUSH
// result := true ;
1377: LD_ADDR_VAR 0 3
1381: PUSH
1382: LD_INT 1
1384: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_VAR 0 2
1394: PPUSH
1395: CALL_OW 480
1399: ST_TO_ADDR
// if not tmp then
1400: LD_VAR 0 5
1404: NOT
1405: IFFALSE 1409
// exit ;
1407: GO 1458
// for i in tmp do
1409: LD_ADDR_VAR 0 4
1413: PUSH
1414: LD_VAR 0 5
1418: PUSH
1419: FOR_IN
1420: IFFALSE 1456
// if GetTech ( i , side ) <> state_researched then
1422: LD_VAR 0 4
1426: PPUSH
1427: LD_VAR 0 1
1431: PPUSH
1432: CALL_OW 321
1436: PUSH
1437: LD_INT 2
1439: NONEQUAL
1440: IFFALSE 1454
// begin result := false ;
1442: LD_ADDR_VAR 0 3
1446: PUSH
1447: LD_INT 0
1449: ST_TO_ADDR
// exit ;
1450: POP
1451: POP
1452: GO 1458
// end ;
1454: GO 1419
1456: POP
1457: POP
// end ;
1458: LD_VAR 0 3
1462: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1463: LD_INT 0
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
1469: PPUSH
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1478: LD_VAR 0 1
1482: NOT
1483: PUSH
1484: LD_VAR 0 1
1488: PPUSH
1489: CALL_OW 257
1493: PUSH
1494: LD_INT 9
1496: NONEQUAL
1497: OR
1498: IFFALSE 1502
// exit ;
1500: GO 2075
// side := GetSide ( unit ) ;
1502: LD_ADDR_VAR 0 9
1506: PUSH
1507: LD_VAR 0 1
1511: PPUSH
1512: CALL_OW 255
1516: ST_TO_ADDR
// tech_space := tech_spacanom ;
1517: LD_ADDR_VAR 0 12
1521: PUSH
1522: LD_INT 29
1524: ST_TO_ADDR
// tech_time := tech_taurad ;
1525: LD_ADDR_VAR 0 13
1529: PUSH
1530: LD_INT 28
1532: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1533: LD_ADDR_VAR 0 11
1537: PUSH
1538: LD_VAR 0 1
1542: PPUSH
1543: CALL_OW 310
1547: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1548: LD_VAR 0 11
1552: PPUSH
1553: CALL_OW 247
1557: PUSH
1558: LD_INT 2
1560: EQUAL
1561: IFFALSE 1565
// exit ;
1563: GO 2075
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1565: LD_ADDR_VAR 0 8
1569: PUSH
1570: LD_INT 81
1572: PUSH
1573: LD_VAR 0 9
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: LD_INT 21
1587: PUSH
1588: LD_INT 3
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PPUSH
1603: CALL_OW 69
1607: ST_TO_ADDR
// if not tmp then
1608: LD_VAR 0 8
1612: NOT
1613: IFFALSE 1617
// exit ;
1615: GO 2075
// if in_unit then
1617: LD_VAR 0 11
1621: IFFALSE 1645
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1623: LD_ADDR_VAR 0 10
1627: PUSH
1628: LD_VAR 0 8
1632: PPUSH
1633: LD_VAR 0 11
1637: PPUSH
1638: CALL_OW 74
1642: ST_TO_ADDR
1643: GO 1665
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1645: LD_ADDR_VAR 0 10
1649: PUSH
1650: LD_VAR 0 8
1654: PPUSH
1655: LD_VAR 0 1
1659: PPUSH
1660: CALL_OW 74
1664: ST_TO_ADDR
// if not enemy then
1665: LD_VAR 0 10
1669: NOT
1670: IFFALSE 1674
// exit ;
1672: GO 2075
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1674: LD_VAR 0 11
1678: PUSH
1679: LD_VAR 0 11
1683: PPUSH
1684: LD_VAR 0 10
1688: PPUSH
1689: CALL_OW 296
1693: PUSH
1694: LD_INT 13
1696: GREATER
1697: AND
1698: PUSH
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_VAR 0 10
1708: PPUSH
1709: CALL_OW 296
1713: PUSH
1714: LD_INT 12
1716: GREATER
1717: OR
1718: IFFALSE 1722
// exit ;
1720: GO 2075
// missile := [ 1 ] ;
1722: LD_ADDR_VAR 0 14
1726: PUSH
1727: LD_INT 1
1729: PUSH
1730: EMPTY
1731: LIST
1732: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1733: LD_VAR 0 9
1737: PPUSH
1738: LD_VAR 0 12
1742: PPUSH
1743: CALL_OW 325
1747: IFFALSE 1776
// missile := Replace ( missile , missile + 1 , 2 ) ;
1749: LD_ADDR_VAR 0 14
1753: PUSH
1754: LD_VAR 0 14
1758: PPUSH
1759: LD_VAR 0 14
1763: PUSH
1764: LD_INT 1
1766: PLUS
1767: PPUSH
1768: LD_INT 2
1770: PPUSH
1771: CALL_OW 1
1775: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1776: LD_VAR 0 9
1780: PPUSH
1781: LD_VAR 0 13
1785: PPUSH
1786: CALL_OW 325
1790: PUSH
1791: LD_VAR 0 10
1795: PPUSH
1796: CALL_OW 255
1800: PPUSH
1801: LD_VAR 0 13
1805: PPUSH
1806: CALL_OW 325
1810: NOT
1811: AND
1812: IFFALSE 1841
// missile := Replace ( missile , missile + 1 , 3 ) ;
1814: LD_ADDR_VAR 0 14
1818: PUSH
1819: LD_VAR 0 14
1823: PPUSH
1824: LD_VAR 0 14
1828: PUSH
1829: LD_INT 1
1831: PLUS
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 1
1840: ST_TO_ADDR
// if missile < 2 then
1841: LD_VAR 0 14
1845: PUSH
1846: LD_INT 2
1848: LESS
1849: IFFALSE 1853
// exit ;
1851: GO 2075
// x := GetX ( enemy ) ;
1853: LD_ADDR_VAR 0 4
1857: PUSH
1858: LD_VAR 0 10
1862: PPUSH
1863: CALL_OW 250
1867: ST_TO_ADDR
// y := GetY ( enemy ) ;
1868: LD_ADDR_VAR 0 5
1872: PUSH
1873: LD_VAR 0 10
1877: PPUSH
1878: CALL_OW 251
1882: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1883: LD_ADDR_VAR 0 6
1887: PUSH
1888: LD_VAR 0 4
1892: PUSH
1893: LD_INT 1
1895: NEG
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: CALL_OW 12
1904: PLUS
1905: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1906: LD_ADDR_VAR 0 7
1910: PUSH
1911: LD_VAR 0 5
1915: PUSH
1916: LD_INT 1
1918: NEG
1919: PPUSH
1920: LD_INT 1
1922: PPUSH
1923: CALL_OW 12
1927: PLUS
1928: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1929: LD_VAR 0 6
1933: PPUSH
1934: LD_VAR 0 7
1938: PPUSH
1939: CALL_OW 488
1943: NOT
1944: IFFALSE 1966
// begin _x := x ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_VAR 0 4
1955: ST_TO_ADDR
// _y := y ;
1956: LD_ADDR_VAR 0 7
1960: PUSH
1961: LD_VAR 0 5
1965: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1966: LD_ADDR_VAR 0 3
1970: PUSH
1971: LD_INT 1
1973: PPUSH
1974: LD_VAR 0 14
1978: PPUSH
1979: CALL_OW 12
1983: ST_TO_ADDR
// case i of 1 :
1984: LD_VAR 0 3
1988: PUSH
1989: LD_INT 1
1991: DOUBLE
1992: EQUAL
1993: IFTRUE 1997
1995: GO 2014
1997: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1998: LD_VAR 0 1
2002: PPUSH
2003: LD_VAR 0 10
2007: PPUSH
2008: CALL_OW 115
2012: GO 2075
2014: LD_INT 2
2016: DOUBLE
2017: EQUAL
2018: IFTRUE 2022
2020: GO 2044
2022: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2023: LD_VAR 0 1
2027: PPUSH
2028: LD_VAR 0 6
2032: PPUSH
2033: LD_VAR 0 7
2037: PPUSH
2038: CALL_OW 153
2042: GO 2075
2044: LD_INT 3
2046: DOUBLE
2047: EQUAL
2048: IFTRUE 2052
2050: GO 2074
2052: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2053: LD_VAR 0 1
2057: PPUSH
2058: LD_VAR 0 6
2062: PPUSH
2063: LD_VAR 0 7
2067: PPUSH
2068: CALL_OW 154
2072: GO 2075
2074: POP
// end ;
2075: LD_VAR 0 2
2079: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2080: LD_INT 0
2082: PPUSH
2083: PPUSH
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
// if not unit or not building then
2088: LD_VAR 0 1
2092: NOT
2093: PUSH
2094: LD_VAR 0 2
2098: NOT
2099: OR
2100: IFFALSE 2104
// exit ;
2102: GO 2262
// x := GetX ( building ) ;
2104: LD_ADDR_VAR 0 5
2108: PUSH
2109: LD_VAR 0 2
2113: PPUSH
2114: CALL_OW 250
2118: ST_TO_ADDR
// y := GetY ( building ) ;
2119: LD_ADDR_VAR 0 6
2123: PUSH
2124: LD_VAR 0 2
2128: PPUSH
2129: CALL_OW 251
2133: ST_TO_ADDR
// for i = 0 to 5 do
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: DOUBLE
2140: LD_INT 0
2142: DEC
2143: ST_TO_ADDR
2144: LD_INT 5
2146: PUSH
2147: FOR_TO
2148: IFFALSE 2260
// begin _x := ShiftX ( x , i , 3 ) ;
2150: LD_ADDR_VAR 0 7
2154: PUSH
2155: LD_VAR 0 5
2159: PPUSH
2160: LD_VAR 0 4
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: CALL_OW 272
2172: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2173: LD_ADDR_VAR 0 8
2177: PUSH
2178: LD_VAR 0 6
2182: PPUSH
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL_OW 273
2195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2196: LD_VAR 0 7
2200: PPUSH
2201: LD_VAR 0 8
2205: PPUSH
2206: CALL_OW 488
2210: NOT
2211: IFFALSE 2215
// continue ;
2213: GO 2147
// if HexInfo ( _x , _y ) = 0 then
2215: LD_VAR 0 7
2219: PPUSH
2220: LD_VAR 0 8
2224: PPUSH
2225: CALL_OW 428
2229: PUSH
2230: LD_INT 0
2232: EQUAL
2233: IFFALSE 2258
// begin ComMoveXY ( unit , _x , _y ) ;
2235: LD_VAR 0 1
2239: PPUSH
2240: LD_VAR 0 7
2244: PPUSH
2245: LD_VAR 0 8
2249: PPUSH
2250: CALL_OW 111
// exit ;
2254: POP
2255: POP
2256: GO 2262
// end ; end ;
2258: GO 2147
2260: POP
2261: POP
// end ;
2262: LD_VAR 0 3
2266: RET
// export function ScanBase ( side , base_area ) ; begin
2267: LD_INT 0
2269: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: LD_VAR 0 2
2279: PPUSH
2280: LD_INT 81
2282: PUSH
2283: LD_VAR 0 1
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PPUSH
2292: CALL_OW 70
2296: ST_TO_ADDR
// end ;
2297: LD_VAR 0 3
2301: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2302: LD_INT 0
2304: PPUSH
2305: PPUSH
2306: PPUSH
2307: PPUSH
// result := false ;
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_INT 0
2315: ST_TO_ADDR
// side := GetSide ( unit ) ;
2316: LD_ADDR_VAR 0 3
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 255
2330: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2331: LD_ADDR_VAR 0 4
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 248
2345: ST_TO_ADDR
// case nat of 1 :
2346: LD_VAR 0 4
2350: PUSH
2351: LD_INT 1
2353: DOUBLE
2354: EQUAL
2355: IFTRUE 2359
2357: GO 2370
2359: POP
// tech := tech_lassight ; 2 :
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 12
2367: ST_TO_ADDR
2368: GO 2409
2370: LD_INT 2
2372: DOUBLE
2373: EQUAL
2374: IFTRUE 2378
2376: GO 2389
2378: POP
// tech := tech_mortar ; 3 :
2379: LD_ADDR_VAR 0 5
2383: PUSH
2384: LD_INT 41
2386: ST_TO_ADDR
2387: GO 2409
2389: LD_INT 3
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2408
2397: POP
// tech := tech_bazooka ; end ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 44
2405: ST_TO_ADDR
2406: GO 2409
2408: POP
// if Researched ( side , tech ) then
2409: LD_VAR 0 3
2413: PPUSH
2414: LD_VAR 0 5
2418: PPUSH
2419: CALL_OW 325
2423: IFFALSE 2450
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2425: LD_ADDR_VAR 0 2
2429: PUSH
2430: LD_INT 5
2432: PUSH
2433: LD_INT 8
2435: PUSH
2436: LD_INT 9
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_VAR 0 4
2448: ARRAY
2449: ST_TO_ADDR
// end ;
2450: LD_VAR 0 2
2454: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2455: LD_INT 0
2457: PPUSH
2458: PPUSH
2459: PPUSH
// if not mines then
2460: LD_VAR 0 2
2464: NOT
2465: IFFALSE 2469
// exit ;
2467: GO 2613
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2469: LD_ADDR_VAR 0 5
2473: PUSH
2474: LD_INT 81
2476: PUSH
2477: LD_VAR 0 1
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 3
2488: PUSH
2489: LD_INT 21
2491: PUSH
2492: LD_INT 3
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PPUSH
2507: CALL_OW 69
2511: ST_TO_ADDR
// for i in mines do
2512: LD_ADDR_VAR 0 4
2516: PUSH
2517: LD_VAR 0 2
2521: PUSH
2522: FOR_IN
2523: IFFALSE 2611
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2525: LD_VAR 0 4
2529: PUSH
2530: LD_INT 1
2532: ARRAY
2533: PPUSH
2534: LD_VAR 0 4
2538: PUSH
2539: LD_INT 2
2541: ARRAY
2542: PPUSH
2543: CALL_OW 458
2547: NOT
2548: IFFALSE 2552
// continue ;
2550: GO 2522
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2552: LD_VAR 0 4
2556: PUSH
2557: LD_INT 1
2559: ARRAY
2560: PPUSH
2561: LD_VAR 0 4
2565: PUSH
2566: LD_INT 2
2568: ARRAY
2569: PPUSH
2570: CALL_OW 428
2574: PUSH
2575: LD_VAR 0 5
2579: IN
2580: IFFALSE 2609
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2582: LD_VAR 0 4
2586: PUSH
2587: LD_INT 1
2589: ARRAY
2590: PPUSH
2591: LD_VAR 0 4
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_VAR 0 1
2604: PPUSH
2605: CALL_OW 456
// end ;
2609: GO 2522
2611: POP
2612: POP
// end ;
2613: LD_VAR 0 3
2617: RET
// export function Count ( array ) ; begin
2618: LD_INT 0
2620: PPUSH
// result := array + 0 ;
2621: LD_ADDR_VAR 0 2
2625: PUSH
2626: LD_VAR 0 1
2630: PUSH
2631: LD_INT 0
2633: PLUS
2634: ST_TO_ADDR
// end ;
2635: LD_VAR 0 2
2639: RET
// export function IsEmpty ( building ) ; begin
2640: LD_INT 0
2642: PPUSH
// if not building then
2643: LD_VAR 0 1
2647: NOT
2648: IFFALSE 2652
// exit ;
2650: GO 2695
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2652: LD_ADDR_VAR 0 2
2656: PUSH
2657: LD_VAR 0 1
2661: PUSH
2662: LD_INT 22
2664: PUSH
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL_OW 255
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 58
2681: PUSH
2682: EMPTY
2683: LIST
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PPUSH
2689: CALL_OW 69
2693: IN
2694: ST_TO_ADDR
// end ;
2695: LD_VAR 0 2
2699: RET
// export function IsNotFull ( building ) ; var places ; begin
2700: LD_INT 0
2702: PPUSH
2703: PPUSH
// if not building then
2704: LD_VAR 0 1
2708: NOT
2709: IFFALSE 2713
// exit ;
2711: GO 2741
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2713: LD_ADDR_VAR 0 2
2717: PUSH
2718: LD_VAR 0 1
2722: PPUSH
2723: LD_INT 3
2725: PUSH
2726: LD_INT 62
2728: PUSH
2729: EMPTY
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 72
2740: ST_TO_ADDR
// end ;
2741: LD_VAR 0 2
2745: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2746: LD_INT 0
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
// tmp := [ ] ;
2752: LD_ADDR_VAR 0 3
2756: PUSH
2757: EMPTY
2758: ST_TO_ADDR
// list := [ ] ;
2759: LD_ADDR_VAR 0 5
2763: PUSH
2764: EMPTY
2765: ST_TO_ADDR
// for i = 16 to 25 do
2766: LD_ADDR_VAR 0 4
2770: PUSH
2771: DOUBLE
2772: LD_INT 16
2774: DEC
2775: ST_TO_ADDR
2776: LD_INT 25
2778: PUSH
2779: FOR_TO
2780: IFFALSE 2853
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2782: LD_ADDR_VAR 0 3
2786: PUSH
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 22
2794: PUSH
2795: LD_VAR 0 1
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 91
2811: PUSH
2812: LD_VAR 0 1
2816: PUSH
2817: LD_INT 6
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 30
2827: PUSH
2828: LD_VAR 0 4
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: ADD
2850: ST_TO_ADDR
2851: GO 2779
2853: POP
2854: POP
// for i = 1 to tmp do
2855: LD_ADDR_VAR 0 4
2859: PUSH
2860: DOUBLE
2861: LD_INT 1
2863: DEC
2864: ST_TO_ADDR
2865: LD_VAR 0 3
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2959
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2873: LD_ADDR_VAR 0 5
2877: PUSH
2878: LD_VAR 0 5
2882: PUSH
2883: LD_VAR 0 3
2887: PUSH
2888: LD_VAR 0 4
2892: ARRAY
2893: PPUSH
2894: CALL_OW 266
2898: PUSH
2899: LD_VAR 0 3
2903: PUSH
2904: LD_VAR 0 4
2908: ARRAY
2909: PPUSH
2910: CALL_OW 250
2914: PUSH
2915: LD_VAR 0 3
2919: PUSH
2920: LD_VAR 0 4
2924: ARRAY
2925: PPUSH
2926: CALL_OW 251
2930: PUSH
2931: LD_VAR 0 3
2935: PUSH
2936: LD_VAR 0 4
2940: ARRAY
2941: PPUSH
2942: CALL_OW 254
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: PUSH
2953: EMPTY
2954: LIST
2955: ADD
2956: ST_TO_ADDR
2957: GO 2870
2959: POP
2960: POP
// result := list ;
2961: LD_ADDR_VAR 0 2
2965: PUSH
2966: LD_VAR 0 5
2970: ST_TO_ADDR
// end ;
2971: LD_VAR 0 2
2975: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
2982: PPUSH
2983: PPUSH
2984: PPUSH
// if not factory then
2985: LD_VAR 0 1
2989: NOT
2990: IFFALSE 2994
// exit ;
2992: GO 3587
// if control = control_apeman then
2994: LD_VAR 0 4
2998: PUSH
2999: LD_INT 5
3001: EQUAL
3002: IFFALSE 3111
// begin tmp := UnitsInside ( factory ) ;
3004: LD_ADDR_VAR 0 8
3008: PUSH
3009: LD_VAR 0 1
3013: PPUSH
3014: CALL_OW 313
3018: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3019: LD_VAR 0 8
3023: PPUSH
3024: LD_INT 25
3026: PUSH
3027: LD_INT 12
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PPUSH
3034: CALL_OW 72
3038: NOT
3039: IFFALSE 3049
// control := control_manual ;
3041: LD_ADDR_VAR 0 4
3045: PUSH
3046: LD_INT 1
3048: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3049: LD_ADDR_VAR 0 8
3053: PUSH
3054: LD_VAR 0 1
3058: PPUSH
3059: CALL 2746 0 1
3063: ST_TO_ADDR
// if tmp then
3064: LD_VAR 0 8
3068: IFFALSE 3111
// begin for i in tmp do
3070: LD_ADDR_VAR 0 7
3074: PUSH
3075: LD_VAR 0 8
3079: PUSH
3080: FOR_IN
3081: IFFALSE 3109
// if i [ 1 ] = b_ext_radio then
3083: LD_VAR 0 7
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PUSH
3092: LD_INT 22
3094: EQUAL
3095: IFFALSE 3107
// begin control := control_remote ;
3097: LD_ADDR_VAR 0 4
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// break ;
3105: GO 3109
// end ;
3107: GO 3080
3109: POP
3110: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3111: LD_VAR 0 1
3115: PPUSH
3116: LD_VAR 0 2
3120: PPUSH
3121: LD_VAR 0 3
3125: PPUSH
3126: LD_VAR 0 4
3130: PPUSH
3131: LD_VAR 0 5
3135: PPUSH
3136: CALL_OW 448
3140: IFFALSE 3175
// begin result := [ chassis , engine , control , weapon ] ;
3142: LD_ADDR_VAR 0 6
3146: PUSH
3147: LD_VAR 0 2
3151: PUSH
3152: LD_VAR 0 3
3156: PUSH
3157: LD_VAR 0 4
3161: PUSH
3162: LD_VAR 0 5
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: ST_TO_ADDR
// exit ;
3173: GO 3587
// end ; _chassis := AvailableChassisList ( factory ) ;
3175: LD_ADDR_VAR 0 9
3179: PUSH
3180: LD_VAR 0 1
3184: PPUSH
3185: CALL_OW 475
3189: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3190: LD_ADDR_VAR 0 11
3194: PUSH
3195: LD_VAR 0 1
3199: PPUSH
3200: CALL_OW 476
3204: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3205: LD_ADDR_VAR 0 12
3209: PUSH
3210: LD_VAR 0 1
3214: PPUSH
3215: CALL_OW 477
3219: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3220: LD_ADDR_VAR 0 10
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 478
3234: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3235: LD_VAR 0 9
3239: NOT
3240: PUSH
3241: LD_VAR 0 11
3245: NOT
3246: OR
3247: PUSH
3248: LD_VAR 0 12
3252: NOT
3253: OR
3254: PUSH
3255: LD_VAR 0 10
3259: NOT
3260: OR
3261: IFFALSE 3296
// begin result := [ chassis , engine , control , weapon ] ;
3263: LD_ADDR_VAR 0 6
3267: PUSH
3268: LD_VAR 0 2
3272: PUSH
3273: LD_VAR 0 3
3277: PUSH
3278: LD_VAR 0 4
3282: PUSH
3283: LD_VAR 0 5
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: ST_TO_ADDR
// exit ;
3294: GO 3587
// end ; if not chassis in _chassis then
3296: LD_VAR 0 2
3300: PUSH
3301: LD_VAR 0 9
3305: IN
3306: NOT
3307: IFFALSE 3333
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: LD_VAR 0 9
3318: PUSH
3319: LD_INT 1
3321: PPUSH
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 12
3331: ARRAY
3332: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 3
3342: PPUSH
3343: CALL 3592 0 2
3347: NOT
3348: IFFALSE 3407
// repeat engine := _engine [ 1 ] ;
3350: LD_ADDR_VAR 0 3
3354: PUSH
3355: LD_VAR 0 11
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3364: LD_ADDR_VAR 0 11
3368: PUSH
3369: LD_VAR 0 11
3373: PPUSH
3374: LD_INT 1
3376: PPUSH
3377: CALL_OW 3
3381: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3382: LD_VAR 0 2
3386: PPUSH
3387: LD_VAR 0 3
3391: PPUSH
3392: CALL 3592 0 2
3396: PUSH
3397: LD_VAR 0 11
3401: PUSH
3402: EMPTY
3403: EQUAL
3404: OR
3405: IFFALSE 3350
// if not control in _control then
3407: LD_VAR 0 4
3411: PUSH
3412: LD_VAR 0 12
3416: IN
3417: NOT
3418: IFFALSE 3444
// control := _control [ rand ( 1 , _control ) ] ;
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_VAR 0 12
3429: PUSH
3430: LD_INT 1
3432: PPUSH
3433: LD_VAR 0 12
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_VAR 0 5
3453: PPUSH
3454: CALL 3812 0 2
3458: NOT
3459: IFFALSE 3518
// repeat weapon := _weapon [ 1 ] ;
3461: LD_ADDR_VAR 0 5
3465: PUSH
3466: LD_VAR 0 10
3470: PUSH
3471: LD_INT 1
3473: ARRAY
3474: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3475: LD_ADDR_VAR 0 10
3479: PUSH
3480: LD_VAR 0 10
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: CALL_OW 3
3492: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_VAR 0 5
3502: PPUSH
3503: CALL 3812 0 2
3507: PUSH
3508: LD_VAR 0 10
3512: PUSH
3513: EMPTY
3514: EQUAL
3515: OR
3516: IFFALSE 3461
// result := [ ] ;
3518: LD_ADDR_VAR 0 6
3522: PUSH
3523: EMPTY
3524: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_VAR 0 2
3534: PPUSH
3535: LD_VAR 0 3
3539: PPUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: CALL_OW 448
3554: IFFALSE 3587
// result := [ chassis , engine , control , weapon ] ;
3556: LD_ADDR_VAR 0 6
3560: PUSH
3561: LD_VAR 0 2
3565: PUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_VAR 0 4
3575: PUSH
3576: LD_VAR 0 5
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: ST_TO_ADDR
// end ;
3587: LD_VAR 0 6
3591: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3592: LD_INT 0
3594: PPUSH
// if not chassis or not engine then
3595: LD_VAR 0 1
3599: NOT
3600: PUSH
3601: LD_VAR 0 2
3605: NOT
3606: OR
3607: IFFALSE 3611
// exit ;
3609: GO 3807
// case engine of engine_solar :
3611: LD_VAR 0 2
3615: PUSH
3616: LD_INT 2
3618: DOUBLE
3619: EQUAL
3620: IFTRUE 3624
3622: GO 3662
3624: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: LD_INT 11
3632: PUSH
3633: LD_INT 12
3635: PUSH
3636: LD_INT 13
3638: PUSH
3639: LD_INT 14
3641: PUSH
3642: LD_INT 1
3644: PUSH
3645: LD_INT 2
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: ST_TO_ADDR
3660: GO 3791
3662: LD_INT 1
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3732
3670: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: LD_INT 11
3678: PUSH
3679: LD_INT 12
3681: PUSH
3682: LD_INT 13
3684: PUSH
3685: LD_INT 14
3687: PUSH
3688: LD_INT 1
3690: PUSH
3691: LD_INT 2
3693: PUSH
3694: LD_INT 3
3696: PUSH
3697: LD_INT 4
3699: PUSH
3700: LD_INT 5
3702: PUSH
3703: LD_INT 21
3705: PUSH
3706: LD_INT 23
3708: PUSH
3709: LD_INT 22
3711: PUSH
3712: LD_INT 24
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: ST_TO_ADDR
3730: GO 3791
3732: LD_INT 3
3734: DOUBLE
3735: EQUAL
3736: IFTRUE 3740
3738: GO 3790
3740: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3741: LD_ADDR_VAR 0 3
3745: PUSH
3746: LD_INT 13
3748: PUSH
3749: LD_INT 14
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: LD_INT 5
3763: PUSH
3764: LD_INT 21
3766: PUSH
3767: LD_INT 22
3769: PUSH
3770: LD_INT 23
3772: PUSH
3773: LD_INT 24
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: ST_TO_ADDR
3788: GO 3791
3790: POP
// result := ( chassis in result ) ;
3791: LD_ADDR_VAR 0 3
3795: PUSH
3796: LD_VAR 0 1
3800: PUSH
3801: LD_VAR 0 3
3805: IN
3806: ST_TO_ADDR
// end ;
3807: LD_VAR 0 3
3811: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3812: LD_INT 0
3814: PPUSH
// if not chassis or not weapon then
3815: LD_VAR 0 1
3819: NOT
3820: PUSH
3821: LD_VAR 0 2
3825: NOT
3826: OR
3827: IFFALSE 3831
// exit ;
3829: GO 4891
// case weapon of us_machine_gun :
3831: LD_VAR 0 2
3835: PUSH
3836: LD_INT 2
3838: DOUBLE
3839: EQUAL
3840: IFTRUE 3844
3842: GO 3874
3844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: LD_INT 1
3852: PUSH
3853: LD_INT 2
3855: PUSH
3856: LD_INT 3
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: ST_TO_ADDR
3872: GO 4875
3874: LD_INT 3
3876: DOUBLE
3877: EQUAL
3878: IFTRUE 3882
3880: GO 3912
3882: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3883: LD_ADDR_VAR 0 3
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: LD_INT 2
3893: PUSH
3894: LD_INT 3
3896: PUSH
3897: LD_INT 4
3899: PUSH
3900: LD_INT 5
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: ST_TO_ADDR
3910: GO 4875
3912: LD_INT 11
3914: DOUBLE
3915: EQUAL
3916: IFTRUE 3920
3918: GO 3950
3920: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3921: LD_ADDR_VAR 0 3
3925: PUSH
3926: LD_INT 1
3928: PUSH
3929: LD_INT 2
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 4
3937: PUSH
3938: LD_INT 5
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: ST_TO_ADDR
3948: GO 4875
3950: LD_INT 4
3952: DOUBLE
3953: EQUAL
3954: IFTRUE 3958
3956: GO 3984
3958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3959: LD_ADDR_VAR 0 3
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: LD_INT 3
3969: PUSH
3970: LD_INT 4
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: ST_TO_ADDR
3982: GO 4875
3984: LD_INT 5
3986: DOUBLE
3987: EQUAL
3988: IFTRUE 3992
3990: GO 4018
3992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: LD_INT 2
4000: PUSH
4001: LD_INT 3
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: ST_TO_ADDR
4016: GO 4875
4018: LD_INT 9
4020: DOUBLE
4021: EQUAL
4022: IFTRUE 4026
4024: GO 4052
4026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 5
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: ST_TO_ADDR
4050: GO 4875
4052: LD_INT 7
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4086
4060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 5
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: ST_TO_ADDR
4084: GO 4875
4086: LD_INT 12
4088: DOUBLE
4089: EQUAL
4090: IFTRUE 4094
4092: GO 4120
4094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4095: LD_ADDR_VAR 0 3
4099: PUSH
4100: LD_INT 2
4102: PUSH
4103: LD_INT 3
4105: PUSH
4106: LD_INT 4
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
4118: GO 4875
4120: LD_INT 13
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4154
4128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4129: LD_ADDR_VAR 0 3
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: LD_INT 3
4139: PUSH
4140: LD_INT 4
4142: PUSH
4143: LD_INT 5
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: ST_TO_ADDR
4152: GO 4875
4154: LD_INT 14
4156: DOUBLE
4157: EQUAL
4158: IFTRUE 4162
4160: GO 4180
4162: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4163: LD_ADDR_VAR 0 3
4167: PUSH
4168: LD_INT 4
4170: PUSH
4171: LD_INT 5
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: ST_TO_ADDR
4178: GO 4875
4180: LD_INT 6
4182: DOUBLE
4183: EQUAL
4184: IFTRUE 4188
4186: GO 4206
4188: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4189: LD_ADDR_VAR 0 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 5
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: ST_TO_ADDR
4204: GO 4875
4206: LD_INT 10
4208: DOUBLE
4209: EQUAL
4210: IFTRUE 4214
4212: GO 4232
4214: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4215: LD_ADDR_VAR 0 3
4219: PUSH
4220: LD_INT 4
4222: PUSH
4223: LD_INT 5
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: ST_TO_ADDR
4230: GO 4875
4232: LD_INT 22
4234: DOUBLE
4235: EQUAL
4236: IFTRUE 4240
4238: GO 4266
4240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4241: LD_ADDR_VAR 0 3
4245: PUSH
4246: LD_INT 11
4248: PUSH
4249: LD_INT 12
4251: PUSH
4252: LD_INT 13
4254: PUSH
4255: LD_INT 14
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: ST_TO_ADDR
4264: GO 4875
4266: LD_INT 23
4268: DOUBLE
4269: EQUAL
4270: IFTRUE 4274
4272: GO 4300
4274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4275: LD_ADDR_VAR 0 3
4279: PUSH
4280: LD_INT 11
4282: PUSH
4283: LD_INT 12
4285: PUSH
4286: LD_INT 13
4288: PUSH
4289: LD_INT 14
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: ST_TO_ADDR
4298: GO 4875
4300: LD_INT 24
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4334
4308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: LD_INT 12
4319: PUSH
4320: LD_INT 13
4322: PUSH
4323: LD_INT 14
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: ST_TO_ADDR
4332: GO 4875
4334: LD_INT 30
4336: DOUBLE
4337: EQUAL
4338: IFTRUE 4342
4340: GO 4368
4342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4343: LD_ADDR_VAR 0 3
4347: PUSH
4348: LD_INT 11
4350: PUSH
4351: LD_INT 12
4353: PUSH
4354: LD_INT 13
4356: PUSH
4357: LD_INT 14
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
4366: GO 4875
4368: LD_INT 25
4370: DOUBLE
4371: EQUAL
4372: IFTRUE 4376
4374: GO 4394
4376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4377: LD_ADDR_VAR 0 3
4381: PUSH
4382: LD_INT 13
4384: PUSH
4385: LD_INT 14
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: ST_TO_ADDR
4392: GO 4875
4394: LD_INT 27
4396: DOUBLE
4397: EQUAL
4398: IFTRUE 4402
4400: GO 4420
4402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4403: LD_ADDR_VAR 0 3
4407: PUSH
4408: LD_INT 13
4410: PUSH
4411: LD_INT 14
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: ST_TO_ADDR
4418: GO 4875
4420: LD_INT 92
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4454
4428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 12
4439: PUSH
4440: LD_INT 13
4442: PUSH
4443: LD_INT 14
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
4452: GO 4875
4454: LD_INT 28
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4480
4462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4463: LD_ADDR_VAR 0 3
4467: PUSH
4468: LD_INT 13
4470: PUSH
4471: LD_INT 14
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: ST_TO_ADDR
4478: GO 4875
4480: LD_INT 29
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4488
4486: GO 4506
4488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: LD_INT 13
4496: PUSH
4497: LD_INT 14
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: ST_TO_ADDR
4504: GO 4875
4506: LD_INT 31
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4532
4514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_INT 13
4522: PUSH
4523: LD_INT 14
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 4875
4532: LD_INT 26
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4558
4540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4541: LD_ADDR_VAR 0 3
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: ST_TO_ADDR
4556: GO 4875
4558: LD_INT 42
4560: DOUBLE
4561: EQUAL
4562: IFTRUE 4566
4564: GO 4592
4566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4567: LD_ADDR_VAR 0 3
4571: PUSH
4572: LD_INT 21
4574: PUSH
4575: LD_INT 22
4577: PUSH
4578: LD_INT 23
4580: PUSH
4581: LD_INT 24
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: ST_TO_ADDR
4590: GO 4875
4592: LD_INT 43
4594: DOUBLE
4595: EQUAL
4596: IFTRUE 4600
4598: GO 4626
4600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4601: LD_ADDR_VAR 0 3
4605: PUSH
4606: LD_INT 21
4608: PUSH
4609: LD_INT 22
4611: PUSH
4612: LD_INT 23
4614: PUSH
4615: LD_INT 24
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: ST_TO_ADDR
4624: GO 4875
4626: LD_INT 44
4628: DOUBLE
4629: EQUAL
4630: IFTRUE 4634
4632: GO 4660
4634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4635: LD_ADDR_VAR 0 3
4639: PUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 22
4645: PUSH
4646: LD_INT 23
4648: PUSH
4649: LD_INT 24
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: ST_TO_ADDR
4658: GO 4875
4660: LD_INT 45
4662: DOUBLE
4663: EQUAL
4664: IFTRUE 4668
4666: GO 4694
4668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4669: LD_ADDR_VAR 0 3
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 24
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: ST_TO_ADDR
4692: GO 4875
4694: LD_INT 49
4696: DOUBLE
4697: EQUAL
4698: IFTRUE 4702
4700: GO 4728
4702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: LD_INT 21
4710: PUSH
4711: LD_INT 22
4713: PUSH
4714: LD_INT 23
4716: PUSH
4717: LD_INT 24
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: ST_TO_ADDR
4726: GO 4875
4728: LD_INT 51
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4762
4736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4737: LD_ADDR_VAR 0 3
4741: PUSH
4742: LD_INT 21
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 23
4750: PUSH
4751: LD_INT 24
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: ST_TO_ADDR
4760: GO 4875
4762: LD_INT 52
4764: DOUBLE
4765: EQUAL
4766: IFTRUE 4770
4768: GO 4796
4770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4771: LD_ADDR_VAR 0 3
4775: PUSH
4776: LD_INT 21
4778: PUSH
4779: LD_INT 22
4781: PUSH
4782: LD_INT 23
4784: PUSH
4785: LD_INT 24
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: ST_TO_ADDR
4794: GO 4875
4796: LD_INT 53
4798: DOUBLE
4799: EQUAL
4800: IFTRUE 4804
4802: GO 4822
4804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: LD_INT 23
4812: PUSH
4813: LD_INT 24
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: ST_TO_ADDR
4820: GO 4875
4822: LD_INT 46
4824: DOUBLE
4825: EQUAL
4826: IFTRUE 4830
4828: GO 4848
4830: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: LD_INT 23
4838: PUSH
4839: LD_INT 24
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: ST_TO_ADDR
4846: GO 4875
4848: LD_INT 47
4850: DOUBLE
4851: EQUAL
4852: IFTRUE 4856
4854: GO 4874
4856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4857: LD_ADDR_VAR 0 3
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 24
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: ST_TO_ADDR
4872: GO 4875
4874: POP
// result := ( chassis in result ) ;
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_VAR 0 3
4889: IN
4890: ST_TO_ADDR
// end ;
4891: LD_VAR 0 3
4895: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4896: LD_INT 0
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
4902: PPUSH
4903: PPUSH
4904: PPUSH
// result := array ;
4905: LD_ADDR_VAR 0 5
4909: PUSH
4910: LD_VAR 0 1
4914: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4915: LD_VAR 0 1
4919: NOT
4920: PUSH
4921: LD_VAR 0 2
4925: NOT
4926: OR
4927: PUSH
4928: LD_VAR 0 3
4932: NOT
4933: OR
4934: PUSH
4935: LD_VAR 0 2
4939: PUSH
4940: LD_VAR 0 1
4944: GREATER
4945: OR
4946: PUSH
4947: LD_VAR 0 3
4951: PUSH
4952: LD_VAR 0 1
4956: GREATER
4957: OR
4958: IFFALSE 4962
// exit ;
4960: GO 5258
// if direction then
4962: LD_VAR 0 4
4966: IFFALSE 5030
// begin d := 1 ;
4968: LD_ADDR_VAR 0 9
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// if i_from > i_to then
4976: LD_VAR 0 2
4980: PUSH
4981: LD_VAR 0 3
4985: GREATER
4986: IFFALSE 5012
// length := ( array - i_from ) + i_to else
4988: LD_ADDR_VAR 0 11
4992: PUSH
4993: LD_VAR 0 1
4997: PUSH
4998: LD_VAR 0 2
5002: MINUS
5003: PUSH
5004: LD_VAR 0 3
5008: PLUS
5009: ST_TO_ADDR
5010: GO 5028
// length := i_to - i_from ;
5012: LD_ADDR_VAR 0 11
5016: PUSH
5017: LD_VAR 0 3
5021: PUSH
5022: LD_VAR 0 2
5026: MINUS
5027: ST_TO_ADDR
// end else
5028: GO 5091
// begin d := - 1 ;
5030: LD_ADDR_VAR 0 9
5034: PUSH
5035: LD_INT 1
5037: NEG
5038: ST_TO_ADDR
// if i_from > i_to then
5039: LD_VAR 0 2
5043: PUSH
5044: LD_VAR 0 3
5048: GREATER
5049: IFFALSE 5069
// length := i_from - i_to else
5051: LD_ADDR_VAR 0 11
5055: PUSH
5056: LD_VAR 0 2
5060: PUSH
5061: LD_VAR 0 3
5065: MINUS
5066: ST_TO_ADDR
5067: GO 5091
// length := ( array - i_to ) + i_from ;
5069: LD_ADDR_VAR 0 11
5073: PUSH
5074: LD_VAR 0 1
5078: PUSH
5079: LD_VAR 0 3
5083: MINUS
5084: PUSH
5085: LD_VAR 0 2
5089: PLUS
5090: ST_TO_ADDR
// end ; if not length then
5091: LD_VAR 0 11
5095: NOT
5096: IFFALSE 5100
// exit ;
5098: GO 5258
// tmp := array ;
5100: LD_ADDR_VAR 0 10
5104: PUSH
5105: LD_VAR 0 1
5109: ST_TO_ADDR
// for i = 1 to length do
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: DOUBLE
5116: LD_INT 1
5118: DEC
5119: ST_TO_ADDR
5120: LD_VAR 0 11
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5246
// begin for j = 1 to array do
5128: LD_ADDR_VAR 0 7
5132: PUSH
5133: DOUBLE
5134: LD_INT 1
5136: DEC
5137: ST_TO_ADDR
5138: LD_VAR 0 1
5142: PUSH
5143: FOR_TO
5144: IFFALSE 5232
// begin k := j + d ;
5146: LD_ADDR_VAR 0 8
5150: PUSH
5151: LD_VAR 0 7
5155: PUSH
5156: LD_VAR 0 9
5160: PLUS
5161: ST_TO_ADDR
// if k > array then
5162: LD_VAR 0 8
5166: PUSH
5167: LD_VAR 0 1
5171: GREATER
5172: IFFALSE 5182
// k := 1 ;
5174: LD_ADDR_VAR 0 8
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// if not k then
5182: LD_VAR 0 8
5186: NOT
5187: IFFALSE 5199
// k := array ;
5189: LD_ADDR_VAR 0 8
5193: PUSH
5194: LD_VAR 0 1
5198: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5199: LD_ADDR_VAR 0 10
5203: PUSH
5204: LD_VAR 0 10
5208: PPUSH
5209: LD_VAR 0 8
5213: PPUSH
5214: LD_VAR 0 1
5218: PUSH
5219: LD_VAR 0 7
5223: ARRAY
5224: PPUSH
5225: CALL_OW 1
5229: ST_TO_ADDR
// end ;
5230: GO 5143
5232: POP
5233: POP
// array := tmp ;
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: LD_VAR 0 10
5243: ST_TO_ADDR
// end ;
5244: GO 5125
5246: POP
5247: POP
// result := array ;
5248: LD_ADDR_VAR 0 5
5252: PUSH
5253: LD_VAR 0 1
5257: ST_TO_ADDR
// end ;
5258: LD_VAR 0 5
5262: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
// result := 0 ;
5267: LD_ADDR_VAR 0 3
5271: PUSH
5272: LD_INT 0
5274: ST_TO_ADDR
// if not array or not value in array then
5275: LD_VAR 0 1
5279: NOT
5280: PUSH
5281: LD_VAR 0 2
5285: PUSH
5286: LD_VAR 0 1
5290: IN
5291: NOT
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5351
// for i = 1 to array do
5297: LD_ADDR_VAR 0 4
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 1
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5349
// if value = array [ i ] then
5315: LD_VAR 0 2
5319: PUSH
5320: LD_VAR 0 1
5324: PUSH
5325: LD_VAR 0 4
5329: ARRAY
5330: EQUAL
5331: IFFALSE 5347
// begin result := i ;
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_VAR 0 4
5342: ST_TO_ADDR
// exit ;
5343: POP
5344: POP
5345: GO 5351
// end ;
5347: GO 5312
5349: POP
5350: POP
// end ;
5351: LD_VAR 0 3
5355: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5356: LD_INT 0
5358: PPUSH
// vc_chassis := chassis ;
5359: LD_ADDR_OWVAR 37
5363: PUSH
5364: LD_VAR 0 1
5368: ST_TO_ADDR
// vc_engine := engine ;
5369: LD_ADDR_OWVAR 39
5373: PUSH
5374: LD_VAR 0 2
5378: ST_TO_ADDR
// vc_control := control ;
5379: LD_ADDR_OWVAR 38
5383: PUSH
5384: LD_VAR 0 3
5388: ST_TO_ADDR
// vc_weapon := weapon ;
5389: LD_ADDR_OWVAR 40
5393: PUSH
5394: LD_VAR 0 4
5398: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5399: LD_ADDR_OWVAR 41
5403: PUSH
5404: LD_VAR 0 5
5408: ST_TO_ADDR
// end ;
5409: LD_VAR 0 6
5413: RET
// export function WantPlant ( unit ) ; var task ; begin
5414: LD_INT 0
5416: PPUSH
5417: PPUSH
// result := false ;
5418: LD_ADDR_VAR 0 2
5422: PUSH
5423: LD_INT 0
5425: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: LD_VAR 0 1
5435: PPUSH
5436: CALL_OW 437
5440: ST_TO_ADDR
// if task then
5441: LD_VAR 0 3
5445: IFFALSE 5473
// if task [ 1 ] [ 1 ] = p then
5447: LD_VAR 0 3
5451: PUSH
5452: LD_INT 1
5454: ARRAY
5455: PUSH
5456: LD_INT 1
5458: ARRAY
5459: PUSH
5460: LD_STRING p
5462: EQUAL
5463: IFFALSE 5473
// result := true ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// end ;
5473: LD_VAR 0 2
5477: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5478: LD_INT 0
5480: PPUSH
5481: PPUSH
5482: PPUSH
5483: PPUSH
// if pos < 1 then
5484: LD_VAR 0 2
5488: PUSH
5489: LD_INT 1
5491: LESS
5492: IFFALSE 5496
// exit ;
5494: GO 5799
// if pos = 1 then
5496: LD_VAR 0 2
5500: PUSH
5501: LD_INT 1
5503: EQUAL
5504: IFFALSE 5537
// result := Replace ( arr , pos [ 1 ] , value ) else
5506: LD_ADDR_VAR 0 4
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: LD_VAR 0 2
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: PPUSH
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL_OW 1
5534: ST_TO_ADDR
5535: GO 5799
// begin tmp := arr ;
5537: LD_ADDR_VAR 0 6
5541: PUSH
5542: LD_VAR 0 1
5546: ST_TO_ADDR
// s_arr := [ tmp ] ;
5547: LD_ADDR_VAR 0 7
5551: PUSH
5552: LD_VAR 0 6
5556: PUSH
5557: EMPTY
5558: LIST
5559: ST_TO_ADDR
// for i = 1 to pos - 1 do
5560: LD_ADDR_VAR 0 5
5564: PUSH
5565: DOUBLE
5566: LD_INT 1
5568: DEC
5569: ST_TO_ADDR
5570: LD_VAR 0 2
5574: PUSH
5575: LD_INT 1
5577: MINUS
5578: PUSH
5579: FOR_TO
5580: IFFALSE 5625
// begin tmp := tmp [ pos [ i ] ] ;
5582: LD_ADDR_VAR 0 6
5586: PUSH
5587: LD_VAR 0 6
5591: PUSH
5592: LD_VAR 0 2
5596: PUSH
5597: LD_VAR 0 5
5601: ARRAY
5602: ARRAY
5603: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5604: LD_ADDR_VAR 0 7
5608: PUSH
5609: LD_VAR 0 7
5613: PUSH
5614: LD_VAR 0 6
5618: PUSH
5619: EMPTY
5620: LIST
5621: ADD
5622: ST_TO_ADDR
// end ;
5623: GO 5579
5625: POP
5626: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5627: LD_ADDR_VAR 0 6
5631: PUSH
5632: LD_VAR 0 6
5636: PPUSH
5637: LD_VAR 0 2
5641: PUSH
5642: LD_VAR 0 2
5646: ARRAY
5647: PPUSH
5648: LD_VAR 0 3
5652: PPUSH
5653: CALL_OW 1
5657: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5658: LD_ADDR_VAR 0 7
5662: PUSH
5663: LD_VAR 0 7
5667: PPUSH
5668: LD_VAR 0 7
5672: PPUSH
5673: LD_VAR 0 6
5677: PPUSH
5678: CALL_OW 1
5682: ST_TO_ADDR
// for i = s_arr downto 2 do
5683: LD_ADDR_VAR 0 5
5687: PUSH
5688: DOUBLE
5689: LD_VAR 0 7
5693: INC
5694: ST_TO_ADDR
5695: LD_INT 2
5697: PUSH
5698: FOR_DOWNTO
5699: IFFALSE 5783
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5701: LD_ADDR_VAR 0 6
5705: PUSH
5706: LD_VAR 0 7
5710: PUSH
5711: LD_VAR 0 5
5715: PUSH
5716: LD_INT 1
5718: MINUS
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 2
5725: PUSH
5726: LD_VAR 0 5
5730: PUSH
5731: LD_INT 1
5733: MINUS
5734: ARRAY
5735: PPUSH
5736: LD_VAR 0 7
5740: PUSH
5741: LD_VAR 0 5
5745: ARRAY
5746: PPUSH
5747: CALL_OW 1
5751: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5752: LD_ADDR_VAR 0 7
5756: PUSH
5757: LD_VAR 0 7
5761: PPUSH
5762: LD_VAR 0 5
5766: PUSH
5767: LD_INT 1
5769: MINUS
5770: PPUSH
5771: LD_VAR 0 6
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// end ;
5781: GO 5698
5783: POP
5784: POP
// result := s_arr [ 1 ] ;
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: LD_VAR 0 7
5794: PUSH
5795: LD_INT 1
5797: ARRAY
5798: ST_TO_ADDR
// end ; end ;
5799: LD_VAR 0 4
5803: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5804: LD_INT 0
5806: PPUSH
5807: PPUSH
// if not list then
5808: LD_VAR 0 1
5812: NOT
5813: IFFALSE 5817
// exit ;
5815: GO 5908
// i := list [ pos1 ] ;
5817: LD_ADDR_VAR 0 5
5821: PUSH
5822: LD_VAR 0 1
5826: PUSH
5827: LD_VAR 0 2
5831: ARRAY
5832: ST_TO_ADDR
// if not i then
5833: LD_VAR 0 5
5837: NOT
5838: IFFALSE 5842
// exit ;
5840: GO 5908
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5842: LD_ADDR_VAR 0 1
5846: PUSH
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_VAR 0 1
5861: PUSH
5862: LD_VAR 0 3
5866: ARRAY
5867: PPUSH
5868: CALL_OW 1
5872: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5873: LD_ADDR_VAR 0 1
5877: PUSH
5878: LD_VAR 0 1
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: LD_VAR 0 5
5892: PPUSH
5893: CALL_OW 1
5897: ST_TO_ADDR
// result := list ;
5898: LD_ADDR_VAR 0 4
5902: PUSH
5903: LD_VAR 0 1
5907: ST_TO_ADDR
// end ;
5908: LD_VAR 0 4
5912: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5913: LD_INT 0
5915: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5916: LD_ADDR_VAR 0 5
5920: PUSH
5921: LD_VAR 0 1
5925: PPUSH
5926: CALL_OW 250
5930: PPUSH
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 251
5940: PPUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_VAR 0 3
5950: PPUSH
5951: LD_VAR 0 4
5955: PPUSH
5956: CALL 6334 0 5
5960: ST_TO_ADDR
// end ;
5961: LD_VAR 0 5
5965: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
5966: LD_INT 0
5968: PPUSH
5969: PPUSH
5970: PPUSH
5971: PPUSH
// if not list or not unit then
5972: LD_VAR 0 2
5976: NOT
5977: PUSH
5978: LD_VAR 0 1
5982: NOT
5983: OR
5984: IFFALSE 5988
// exit ;
5986: GO 6329
// result := [ ] ;
5988: LD_ADDR_VAR 0 5
5992: PUSH
5993: EMPTY
5994: ST_TO_ADDR
// for i in list do
5995: LD_ADDR_VAR 0 6
5999: PUSH
6000: LD_VAR 0 2
6004: PUSH
6005: FOR_IN
6006: IFFALSE 6224
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6008: LD_ADDR_VAR 0 8
6012: PUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: LD_VAR 0 6
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: LD_VAR 0 6
6031: PUSH
6032: LD_INT 2
6034: ARRAY
6035: PPUSH
6036: CALL_OW 297
6040: ST_TO_ADDR
// if not Count ( result ) then
6041: LD_VAR 0 5
6045: PPUSH
6046: CALL 2618 0 1
6050: NOT
6051: IFFALSE 6084
// begin result := Join ( result , [ i , tmp ] ) ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_VAR 0 5
6062: PPUSH
6063: LD_VAR 0 6
6067: PUSH
6068: LD_VAR 0 8
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL 38207 0 2
6081: ST_TO_ADDR
// continue ;
6082: GO 6005
// end ; if result [ result ] [ 2 ] <= tmp then
6084: LD_VAR 0 5
6088: PUSH
6089: LD_VAR 0 5
6093: ARRAY
6094: PUSH
6095: LD_INT 2
6097: ARRAY
6098: PUSH
6099: LD_VAR 0 8
6103: LESSEQUAL
6104: IFFALSE 6137
// result := Join ( result , [ i , tmp ] ) else
6106: LD_ADDR_VAR 0 5
6110: PUSH
6111: LD_VAR 0 5
6115: PPUSH
6116: LD_VAR 0 6
6120: PUSH
6121: LD_VAR 0 8
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL 38207 0 2
6134: ST_TO_ADDR
6135: GO 6222
// begin for j := 1 to Count ( result ) do
6137: LD_ADDR_VAR 0 7
6141: PUSH
6142: DOUBLE
6143: LD_INT 1
6145: DEC
6146: ST_TO_ADDR
6147: LD_VAR 0 5
6151: PPUSH
6152: CALL 2618 0 1
6156: PUSH
6157: FOR_TO
6158: IFFALSE 6220
// begin if tmp < result [ j ] [ 2 ] then
6160: LD_VAR 0 8
6164: PUSH
6165: LD_VAR 0 5
6169: PUSH
6170: LD_VAR 0 7
6174: ARRAY
6175: PUSH
6176: LD_INT 2
6178: ARRAY
6179: LESS
6180: IFFALSE 6218
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6182: LD_ADDR_VAR 0 5
6186: PUSH
6187: LD_VAR 0 5
6191: PPUSH
6192: LD_VAR 0 7
6196: PPUSH
6197: LD_VAR 0 6
6201: PUSH
6202: LD_VAR 0 8
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 2
6215: ST_TO_ADDR
// break ;
6216: GO 6220
// end ; end ;
6218: GO 6157
6220: POP
6221: POP
// end ; end ;
6222: GO 6005
6224: POP
6225: POP
// if result and not asc then
6226: LD_VAR 0 5
6230: PUSH
6231: LD_VAR 0 3
6235: NOT
6236: AND
6237: IFFALSE 6254
// result := ReverseArray ( result ) ;
6239: LD_ADDR_VAR 0 5
6243: PUSH
6244: LD_VAR 0 5
6248: PPUSH
6249: CALL 33494 0 1
6253: ST_TO_ADDR
// tmp := [ ] ;
6254: LD_ADDR_VAR 0 8
6258: PUSH
6259: EMPTY
6260: ST_TO_ADDR
// if mode then
6261: LD_VAR 0 4
6265: IFFALSE 6329
// begin for i := 1 to result do
6267: LD_ADDR_VAR 0 6
6271: PUSH
6272: DOUBLE
6273: LD_INT 1
6275: DEC
6276: ST_TO_ADDR
6277: LD_VAR 0 5
6281: PUSH
6282: FOR_TO
6283: IFFALSE 6317
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6285: LD_ADDR_VAR 0 8
6289: PUSH
6290: LD_VAR 0 8
6294: PPUSH
6295: LD_VAR 0 5
6299: PUSH
6300: LD_VAR 0 6
6304: ARRAY
6305: PUSH
6306: LD_INT 1
6308: ARRAY
6309: PPUSH
6310: CALL 38207 0 2
6314: ST_TO_ADDR
6315: GO 6282
6317: POP
6318: POP
// result := tmp ;
6319: LD_ADDR_VAR 0 5
6323: PUSH
6324: LD_VAR 0 8
6328: ST_TO_ADDR
// end ; end ;
6329: LD_VAR 0 5
6333: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
// if not list then
6340: LD_VAR 0 3
6344: NOT
6345: IFFALSE 6349
// exit ;
6347: GO 6737
// result := [ ] ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: EMPTY
6355: ST_TO_ADDR
// for i in list do
6356: LD_ADDR_VAR 0 7
6360: PUSH
6361: LD_VAR 0 3
6365: PUSH
6366: FOR_IN
6367: IFFALSE 6569
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6369: LD_ADDR_VAR 0 9
6373: PUSH
6374: LD_VAR 0 7
6378: PPUSH
6379: LD_VAR 0 1
6383: PPUSH
6384: LD_VAR 0 2
6388: PPUSH
6389: CALL_OW 297
6393: ST_TO_ADDR
// if not result then
6394: LD_VAR 0 6
6398: NOT
6399: IFFALSE 6425
// result := [ [ i , tmp ] ] else
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: LD_VAR 0 7
6410: PUSH
6411: LD_VAR 0 9
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: ST_TO_ADDR
6423: GO 6567
// begin if result [ result ] [ 2 ] < tmp then
6425: LD_VAR 0 6
6429: PUSH
6430: LD_VAR 0 6
6434: ARRAY
6435: PUSH
6436: LD_INT 2
6438: ARRAY
6439: PUSH
6440: LD_VAR 0 9
6444: LESS
6445: IFFALSE 6487
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6447: LD_ADDR_VAR 0 6
6451: PUSH
6452: LD_VAR 0 6
6456: PPUSH
6457: LD_VAR 0 6
6461: PUSH
6462: LD_INT 1
6464: PLUS
6465: PPUSH
6466: LD_VAR 0 7
6470: PUSH
6471: LD_VAR 0 9
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 2
6484: ST_TO_ADDR
6485: GO 6567
// for j = 1 to result do
6487: LD_ADDR_VAR 0 8
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_VAR 0 6
6501: PUSH
6502: FOR_TO
6503: IFFALSE 6565
// begin if tmp < result [ j ] [ 2 ] then
6505: LD_VAR 0 9
6509: PUSH
6510: LD_VAR 0 6
6514: PUSH
6515: LD_VAR 0 8
6519: ARRAY
6520: PUSH
6521: LD_INT 2
6523: ARRAY
6524: LESS
6525: IFFALSE 6563
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6527: LD_ADDR_VAR 0 6
6531: PUSH
6532: LD_VAR 0 6
6536: PPUSH
6537: LD_VAR 0 8
6541: PPUSH
6542: LD_VAR 0 7
6546: PUSH
6547: LD_VAR 0 9
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 2
6560: ST_TO_ADDR
// break ;
6561: GO 6565
// end ; end ;
6563: GO 6502
6565: POP
6566: POP
// end ; end ;
6567: GO 6366
6569: POP
6570: POP
// if result and not asc then
6571: LD_VAR 0 6
6575: PUSH
6576: LD_VAR 0 4
6580: NOT
6581: AND
6582: IFFALSE 6657
// begin tmp := result ;
6584: LD_ADDR_VAR 0 9
6588: PUSH
6589: LD_VAR 0 6
6593: ST_TO_ADDR
// for i = tmp downto 1 do
6594: LD_ADDR_VAR 0 7
6598: PUSH
6599: DOUBLE
6600: LD_VAR 0 9
6604: INC
6605: ST_TO_ADDR
6606: LD_INT 1
6608: PUSH
6609: FOR_DOWNTO
6610: IFFALSE 6655
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6612: LD_ADDR_VAR 0 6
6616: PUSH
6617: LD_VAR 0 6
6621: PPUSH
6622: LD_VAR 0 9
6626: PUSH
6627: LD_VAR 0 7
6631: MINUS
6632: PUSH
6633: LD_INT 1
6635: PLUS
6636: PPUSH
6637: LD_VAR 0 9
6641: PUSH
6642: LD_VAR 0 7
6646: ARRAY
6647: PPUSH
6648: CALL_OW 1
6652: ST_TO_ADDR
6653: GO 6609
6655: POP
6656: POP
// end ; tmp := [ ] ;
6657: LD_ADDR_VAR 0 9
6661: PUSH
6662: EMPTY
6663: ST_TO_ADDR
// if mode then
6664: LD_VAR 0 5
6668: IFFALSE 6737
// begin for i = 1 to result do
6670: LD_ADDR_VAR 0 7
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_VAR 0 6
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6725
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6688: LD_ADDR_VAR 0 9
6692: PUSH
6693: LD_VAR 0 9
6697: PPUSH
6698: LD_VAR 0 7
6702: PPUSH
6703: LD_VAR 0 6
6707: PUSH
6708: LD_VAR 0 7
6712: ARRAY
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 1
6722: ST_TO_ADDR
6723: GO 6685
6725: POP
6726: POP
// result := tmp ;
6727: LD_ADDR_VAR 0 6
6731: PUSH
6732: LD_VAR 0 9
6736: ST_TO_ADDR
// end ; end ;
6737: LD_VAR 0 6
6741: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6742: LD_INT 0
6744: PPUSH
6745: PPUSH
6746: PPUSH
6747: PPUSH
6748: PPUSH
6749: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6750: LD_ADDR_VAR 0 5
6754: PUSH
6755: LD_INT 0
6757: PUSH
6758: LD_INT 0
6760: PUSH
6761: LD_INT 0
6763: PUSH
6764: EMPTY
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: ST_TO_ADDR
// if not x or not y then
6772: LD_VAR 0 2
6776: NOT
6777: PUSH
6778: LD_VAR 0 3
6782: NOT
6783: OR
6784: IFFALSE 6788
// exit ;
6786: GO 8438
// if not range then
6788: LD_VAR 0 4
6792: NOT
6793: IFFALSE 6803
// range := 10 ;
6795: LD_ADDR_VAR 0 4
6799: PUSH
6800: LD_INT 10
6802: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6803: LD_ADDR_VAR 0 8
6807: PUSH
6808: LD_INT 81
6810: PUSH
6811: LD_VAR 0 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 92
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: LD_VAR 0 3
6832: PUSH
6833: LD_VAR 0 4
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 3
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: PPUSH
6866: CALL_OW 69
6870: ST_TO_ADDR
// if not tmp then
6871: LD_VAR 0 8
6875: NOT
6876: IFFALSE 6880
// exit ;
6878: GO 8438
// for i in tmp do
6880: LD_ADDR_VAR 0 6
6884: PUSH
6885: LD_VAR 0 8
6889: PUSH
6890: FOR_IN
6891: IFFALSE 8413
// begin points := [ 0 , 0 , 0 ] ;
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
// bpoints := 1 ;
6912: LD_ADDR_VAR 0 10
6916: PUSH
6917: LD_INT 1
6919: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6920: LD_VAR 0 6
6924: PPUSH
6925: CALL_OW 247
6929: PUSH
6930: LD_INT 1
6932: DOUBLE
6933: EQUAL
6934: IFTRUE 6938
6936: GO 7516
6938: POP
// begin if GetClass ( i ) = 1 then
6939: LD_VAR 0 6
6943: PPUSH
6944: CALL_OW 257
6948: PUSH
6949: LD_INT 1
6951: EQUAL
6952: IFFALSE 6973
// points := [ 10 , 5 , 3 ] ;
6954: LD_ADDR_VAR 0 9
6958: PUSH
6959: LD_INT 10
6961: PUSH
6962: LD_INT 5
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6973: LD_VAR 0 6
6977: PPUSH
6978: CALL_OW 257
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: LD_INT 3
6988: PUSH
6989: LD_INT 4
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: IN
6997: IFFALSE 7018
// points := [ 3 , 2 , 1 ] ;
6999: LD_ADDR_VAR 0 9
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7018: LD_VAR 0 6
7022: PPUSH
7023: CALL_OW 257
7027: PUSH
7028: LD_INT 5
7030: EQUAL
7031: IFFALSE 7052
// points := [ 130 , 5 , 2 ] ;
7033: LD_ADDR_VAR 0 9
7037: PUSH
7038: LD_INT 130
7040: PUSH
7041: LD_INT 5
7043: PUSH
7044: LD_INT 2
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7052: LD_VAR 0 6
7056: PPUSH
7057: CALL_OW 257
7061: PUSH
7062: LD_INT 8
7064: EQUAL
7065: IFFALSE 7086
// points := [ 35 , 35 , 30 ] ;
7067: LD_ADDR_VAR 0 9
7071: PUSH
7072: LD_INT 35
7074: PUSH
7075: LD_INT 35
7077: PUSH
7078: LD_INT 30
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7086: LD_VAR 0 6
7090: PPUSH
7091: CALL_OW 257
7095: PUSH
7096: LD_INT 9
7098: EQUAL
7099: IFFALSE 7120
// points := [ 20 , 55 , 40 ] ;
7101: LD_ADDR_VAR 0 9
7105: PUSH
7106: LD_INT 20
7108: PUSH
7109: LD_INT 55
7111: PUSH
7112: LD_INT 40
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7120: LD_VAR 0 6
7124: PPUSH
7125: CALL_OW 257
7129: PUSH
7130: LD_INT 12
7132: PUSH
7133: LD_INT 16
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: IN
7140: IFFALSE 7161
// points := [ 5 , 3 , 2 ] ;
7142: LD_ADDR_VAR 0 9
7146: PUSH
7147: LD_INT 5
7149: PUSH
7150: LD_INT 3
7152: PUSH
7153: LD_INT 2
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7161: LD_VAR 0 6
7165: PPUSH
7166: CALL_OW 257
7170: PUSH
7171: LD_INT 17
7173: EQUAL
7174: IFFALSE 7195
// points := [ 100 , 50 , 75 ] ;
7176: LD_ADDR_VAR 0 9
7180: PUSH
7181: LD_INT 100
7183: PUSH
7184: LD_INT 50
7186: PUSH
7187: LD_INT 75
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7195: LD_VAR 0 6
7199: PPUSH
7200: CALL_OW 257
7204: PUSH
7205: LD_INT 15
7207: EQUAL
7208: IFFALSE 7229
// points := [ 10 , 5 , 3 ] ;
7210: LD_ADDR_VAR 0 9
7214: PUSH
7215: LD_INT 10
7217: PUSH
7218: LD_INT 5
7220: PUSH
7221: LD_INT 3
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 257
7238: PUSH
7239: LD_INT 14
7241: EQUAL
7242: IFFALSE 7263
// points := [ 10 , 0 , 0 ] ;
7244: LD_ADDR_VAR 0 9
7248: PUSH
7249: LD_INT 10
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: LD_INT 0
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7263: LD_VAR 0 6
7267: PPUSH
7268: CALL_OW 257
7272: PUSH
7273: LD_INT 11
7275: EQUAL
7276: IFFALSE 7297
// points := [ 30 , 10 , 5 ] ;
7278: LD_ADDR_VAR 0 9
7282: PUSH
7283: LD_INT 30
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: LD_INT 5
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7297: LD_VAR 0 1
7301: PPUSH
7302: LD_INT 5
7304: PPUSH
7305: CALL_OW 321
7309: PUSH
7310: LD_INT 2
7312: EQUAL
7313: IFFALSE 7330
// bpoints := bpoints * 1.8 ;
7315: LD_ADDR_VAR 0 10
7319: PUSH
7320: LD_VAR 0 10
7324: PUSH
7325: LD_REAL  1.80000000000000E+0000
7328: MUL
7329: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7330: LD_VAR 0 6
7334: PPUSH
7335: CALL_OW 257
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: LD_INT 2
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: IN
7358: PUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_INT 51
7366: PPUSH
7367: CALL_OW 321
7371: PUSH
7372: LD_INT 2
7374: EQUAL
7375: AND
7376: IFFALSE 7393
// bpoints := bpoints * 1.2 ;
7378: LD_ADDR_VAR 0 10
7382: PUSH
7383: LD_VAR 0 10
7387: PUSH
7388: LD_REAL  1.20000000000000E+0000
7391: MUL
7392: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7393: LD_VAR 0 6
7397: PPUSH
7398: CALL_OW 257
7402: PUSH
7403: LD_INT 5
7405: PUSH
7406: LD_INT 7
7408: PUSH
7409: LD_INT 9
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: IN
7417: PUSH
7418: LD_VAR 0 1
7422: PPUSH
7423: LD_INT 52
7425: PPUSH
7426: CALL_OW 321
7430: PUSH
7431: LD_INT 2
7433: EQUAL
7434: AND
7435: IFFALSE 7452
// bpoints := bpoints * 1.5 ;
7437: LD_ADDR_VAR 0 10
7441: PUSH
7442: LD_VAR 0 10
7446: PUSH
7447: LD_REAL  1.50000000000000E+0000
7450: MUL
7451: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7452: LD_VAR 0 1
7456: PPUSH
7457: LD_INT 66
7459: PPUSH
7460: CALL_OW 321
7464: PUSH
7465: LD_INT 2
7467: EQUAL
7468: IFFALSE 7485
// bpoints := bpoints * 1.1 ;
7470: LD_ADDR_VAR 0 10
7474: PUSH
7475: LD_VAR 0 10
7479: PUSH
7480: LD_REAL  1.10000000000000E+0000
7483: MUL
7484: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7485: LD_ADDR_VAR 0 10
7489: PUSH
7490: LD_VAR 0 10
7494: PUSH
7495: LD_VAR 0 6
7499: PPUSH
7500: LD_INT 1
7502: PPUSH
7503: CALL_OW 259
7507: PUSH
7508: LD_REAL  1.15000000000000E+0000
7511: MUL
7512: MUL
7513: ST_TO_ADDR
// end ; unit_vehicle :
7514: GO 8342
7516: LD_INT 2
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 8330
7524: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7525: LD_VAR 0 6
7529: PPUSH
7530: CALL_OW 264
7534: PUSH
7535: LD_INT 2
7537: PUSH
7538: LD_INT 42
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: IN
7549: IFFALSE 7570
// points := [ 25 , 5 , 3 ] ;
7551: LD_ADDR_VAR 0 9
7555: PUSH
7556: LD_INT 25
7558: PUSH
7559: LD_INT 5
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL_OW 264
7579: PUSH
7580: LD_INT 4
7582: PUSH
7583: LD_INT 43
7585: PUSH
7586: LD_INT 25
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: IN
7594: IFFALSE 7615
// points := [ 40 , 15 , 5 ] ;
7596: LD_ADDR_VAR 0 9
7600: PUSH
7601: LD_INT 40
7603: PUSH
7604: LD_INT 15
7606: PUSH
7607: LD_INT 5
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7615: LD_VAR 0 6
7619: PPUSH
7620: CALL_OW 264
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: LD_INT 23
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: IN
7635: IFFALSE 7656
// points := [ 7 , 25 , 8 ] ;
7637: LD_ADDR_VAR 0 9
7641: PUSH
7642: LD_INT 7
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 8
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7656: LD_VAR 0 6
7660: PPUSH
7661: CALL_OW 264
7665: PUSH
7666: LD_INT 5
7668: PUSH
7669: LD_INT 27
7671: PUSH
7672: LD_INT 44
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: IN
7680: IFFALSE 7701
// points := [ 14 , 50 , 16 ] ;
7682: LD_ADDR_VAR 0 9
7686: PUSH
7687: LD_INT 14
7689: PUSH
7690: LD_INT 50
7692: PUSH
7693: LD_INT 16
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7701: LD_VAR 0 6
7705: PPUSH
7706: CALL_OW 264
7710: PUSH
7711: LD_INT 6
7713: PUSH
7714: LD_INT 46
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: IN
7721: IFFALSE 7742
// points := [ 32 , 120 , 70 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_INT 32
7730: PUSH
7731: LD_INT 120
7733: PUSH
7734: LD_INT 70
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7742: LD_VAR 0 6
7746: PPUSH
7747: CALL_OW 264
7751: PUSH
7752: LD_INT 7
7754: PUSH
7755: LD_INT 28
7757: PUSH
7758: LD_INT 45
7760: PUSH
7761: LD_INT 92
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: IN
7770: IFFALSE 7791
// points := [ 35 , 20 , 45 ] ;
7772: LD_ADDR_VAR 0 9
7776: PUSH
7777: LD_INT 35
7779: PUSH
7780: LD_INT 20
7782: PUSH
7783: LD_INT 45
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7791: LD_VAR 0 6
7795: PPUSH
7796: CALL_OW 264
7800: PUSH
7801: LD_INT 47
7803: PUSH
7804: EMPTY
7805: LIST
7806: IN
7807: IFFALSE 7828
// points := [ 67 , 45 , 75 ] ;
7809: LD_ADDR_VAR 0 9
7813: PUSH
7814: LD_INT 67
7816: PUSH
7817: LD_INT 45
7819: PUSH
7820: LD_INT 75
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7828: LD_VAR 0 6
7832: PPUSH
7833: CALL_OW 264
7837: PUSH
7838: LD_INT 26
7840: PUSH
7841: EMPTY
7842: LIST
7843: IN
7844: IFFALSE 7865
// points := [ 120 , 30 , 80 ] ;
7846: LD_ADDR_VAR 0 9
7850: PUSH
7851: LD_INT 120
7853: PUSH
7854: LD_INT 30
7856: PUSH
7857: LD_INT 80
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7865: LD_VAR 0 6
7869: PPUSH
7870: CALL_OW 264
7874: PUSH
7875: LD_INT 22
7877: PUSH
7878: EMPTY
7879: LIST
7880: IN
7881: IFFALSE 7902
// points := [ 40 , 1 , 1 ] ;
7883: LD_ADDR_VAR 0 9
7887: PUSH
7888: LD_INT 40
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7902: LD_VAR 0 6
7906: PPUSH
7907: CALL_OW 264
7911: PUSH
7912: LD_INT 29
7914: PUSH
7915: EMPTY
7916: LIST
7917: IN
7918: IFFALSE 7939
// points := [ 70 , 200 , 400 ] ;
7920: LD_ADDR_VAR 0 9
7924: PUSH
7925: LD_INT 70
7927: PUSH
7928: LD_INT 200
7930: PUSH
7931: LD_INT 400
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7939: LD_VAR 0 6
7943: PPUSH
7944: CALL_OW 264
7948: PUSH
7949: LD_INT 14
7951: PUSH
7952: LD_INT 53
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: IN
7959: IFFALSE 7980
// points := [ 40 , 10 , 20 ] ;
7961: LD_ADDR_VAR 0 9
7965: PUSH
7966: LD_INT 40
7968: PUSH
7969: LD_INT 10
7971: PUSH
7972: LD_INT 20
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7980: LD_VAR 0 6
7984: PPUSH
7985: CALL_OW 264
7989: PUSH
7990: LD_INT 9
7992: PUSH
7993: EMPTY
7994: LIST
7995: IN
7996: IFFALSE 8017
// points := [ 5 , 70 , 20 ] ;
7998: LD_ADDR_VAR 0 9
8002: PUSH
8003: LD_INT 5
8005: PUSH
8006: LD_INT 70
8008: PUSH
8009: LD_INT 20
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8017: LD_VAR 0 6
8021: PPUSH
8022: CALL_OW 264
8026: PUSH
8027: LD_INT 10
8029: PUSH
8030: EMPTY
8031: LIST
8032: IN
8033: IFFALSE 8054
// points := [ 35 , 110 , 70 ] ;
8035: LD_ADDR_VAR 0 9
8039: PUSH
8040: LD_INT 35
8042: PUSH
8043: LD_INT 110
8045: PUSH
8046: LD_INT 70
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8054: LD_VAR 0 6
8058: PPUSH
8059: CALL_OW 265
8063: PUSH
8064: LD_INT 25
8066: EQUAL
8067: IFFALSE 8088
// points := [ 80 , 65 , 100 ] ;
8069: LD_ADDR_VAR 0 9
8073: PUSH
8074: LD_INT 80
8076: PUSH
8077: LD_INT 65
8079: PUSH
8080: LD_INT 100
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8088: LD_VAR 0 6
8092: PPUSH
8093: CALL_OW 263
8097: PUSH
8098: LD_INT 1
8100: EQUAL
8101: IFFALSE 8136
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8103: LD_ADDR_VAR 0 10
8107: PUSH
8108: LD_VAR 0 10
8112: PUSH
8113: LD_VAR 0 6
8117: PPUSH
8118: CALL_OW 311
8122: PPUSH
8123: LD_INT 3
8125: PPUSH
8126: CALL_OW 259
8130: PUSH
8131: LD_INT 4
8133: MUL
8134: MUL
8135: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8136: LD_VAR 0 6
8140: PPUSH
8141: CALL_OW 263
8145: PUSH
8146: LD_INT 2
8148: EQUAL
8149: IFFALSE 8200
// begin j := IsControledBy ( i ) ;
8151: LD_ADDR_VAR 0 7
8155: PUSH
8156: LD_VAR 0 6
8160: PPUSH
8161: CALL_OW 312
8165: ST_TO_ADDR
// if j then
8166: LD_VAR 0 7
8170: IFFALSE 8200
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8172: LD_ADDR_VAR 0 10
8176: PUSH
8177: LD_VAR 0 10
8181: PUSH
8182: LD_VAR 0 7
8186: PPUSH
8187: LD_INT 3
8189: PPUSH
8190: CALL_OW 259
8194: PUSH
8195: LD_INT 3
8197: MUL
8198: MUL
8199: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8200: LD_VAR 0 6
8204: PPUSH
8205: CALL_OW 264
8209: PUSH
8210: LD_INT 5
8212: PUSH
8213: LD_INT 6
8215: PUSH
8216: LD_INT 46
8218: PUSH
8219: LD_INT 44
8221: PUSH
8222: LD_INT 47
8224: PUSH
8225: LD_INT 45
8227: PUSH
8228: LD_INT 28
8230: PUSH
8231: LD_INT 7
8233: PUSH
8234: LD_INT 27
8236: PUSH
8237: LD_INT 29
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: IN
8252: PUSH
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_INT 52
8260: PPUSH
8261: CALL_OW 321
8265: PUSH
8266: LD_INT 2
8268: EQUAL
8269: AND
8270: IFFALSE 8287
// bpoints := bpoints * 1.2 ;
8272: LD_ADDR_VAR 0 10
8276: PUSH
8277: LD_VAR 0 10
8281: PUSH
8282: LD_REAL  1.20000000000000E+0000
8285: MUL
8286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8287: LD_VAR 0 6
8291: PPUSH
8292: CALL_OW 264
8296: PUSH
8297: LD_INT 6
8299: PUSH
8300: LD_INT 46
8302: PUSH
8303: LD_INT 47
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: IN
8311: IFFALSE 8328
// bpoints := bpoints * 1.2 ;
8313: LD_ADDR_VAR 0 10
8317: PUSH
8318: LD_VAR 0 10
8322: PUSH
8323: LD_REAL  1.20000000000000E+0000
8326: MUL
8327: ST_TO_ADDR
// end ; unit_building :
8328: GO 8342
8330: LD_INT 3
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8341
8338: POP
// ; end ;
8339: GO 8342
8341: POP
// for j = 1 to 3 do
8342: LD_ADDR_VAR 0 7
8346: PUSH
8347: DOUBLE
8348: LD_INT 1
8350: DEC
8351: ST_TO_ADDR
8352: LD_INT 3
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8409
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8358: LD_ADDR_VAR 0 5
8362: PUSH
8363: LD_VAR 0 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: LD_VAR 0 5
8377: PUSH
8378: LD_VAR 0 7
8382: ARRAY
8383: PUSH
8384: LD_VAR 0 9
8388: PUSH
8389: LD_VAR 0 7
8393: ARRAY
8394: PUSH
8395: LD_VAR 0 10
8399: MUL
8400: PLUS
8401: PPUSH
8402: CALL_OW 1
8406: ST_TO_ADDR
8407: GO 8355
8409: POP
8410: POP
// end ;
8411: GO 6890
8413: POP
8414: POP
// result := Replace ( result , 4 , tmp ) ;
8415: LD_ADDR_VAR 0 5
8419: PUSH
8420: LD_VAR 0 5
8424: PPUSH
8425: LD_INT 4
8427: PPUSH
8428: LD_VAR 0 8
8432: PPUSH
8433: CALL_OW 1
8437: ST_TO_ADDR
// end ;
8438: LD_VAR 0 5
8442: RET
// export function DangerAtRange ( unit , range ) ; begin
8443: LD_INT 0
8445: PPUSH
// if not unit then
8446: LD_VAR 0 1
8450: NOT
8451: IFFALSE 8455
// exit ;
8453: GO 8500
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 255
8469: PPUSH
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 250
8479: PPUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 251
8489: PPUSH
8490: LD_VAR 0 2
8494: PPUSH
8495: CALL 6742 0 4
8499: ST_TO_ADDR
// end ;
8500: LD_VAR 0 3
8504: RET
// export function DangerInArea ( side , area ) ; begin
8505: LD_INT 0
8507: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8508: LD_ADDR_VAR 0 3
8512: PUSH
8513: LD_VAR 0 2
8517: PPUSH
8518: LD_INT 81
8520: PUSH
8521: LD_VAR 0 1
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 70
8534: ST_TO_ADDR
// end ;
8535: LD_VAR 0 3
8539: RET
// export function IsExtension ( b ) ; begin
8540: LD_INT 0
8542: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: LD_VAR 0 1
8552: PUSH
8553: LD_INT 23
8555: PUSH
8556: LD_INT 20
8558: PUSH
8559: LD_INT 22
8561: PUSH
8562: LD_INT 17
8564: PUSH
8565: LD_INT 24
8567: PUSH
8568: LD_INT 21
8570: PUSH
8571: LD_INT 19
8573: PUSH
8574: LD_INT 16
8576: PUSH
8577: LD_INT 25
8579: PUSH
8580: LD_INT 18
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: IN
8595: ST_TO_ADDR
// end ;
8596: LD_VAR 0 2
8600: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8601: LD_INT 0
8603: PPUSH
8604: PPUSH
8605: PPUSH
// result := [ ] ;
8606: LD_ADDR_VAR 0 4
8610: PUSH
8611: EMPTY
8612: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8613: LD_ADDR_VAR 0 5
8617: PUSH
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 21
8625: PUSH
8626: LD_INT 3
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 70
8637: ST_TO_ADDR
// if not tmp then
8638: LD_VAR 0 5
8642: NOT
8643: IFFALSE 8647
// exit ;
8645: GO 8711
// if checkLink then
8647: LD_VAR 0 3
8651: IFFALSE 8701
// begin for i in tmp do
8653: LD_ADDR_VAR 0 6
8657: PUSH
8658: LD_VAR 0 5
8662: PUSH
8663: FOR_IN
8664: IFFALSE 8699
// if GetBase ( i ) <> base then
8666: LD_VAR 0 6
8670: PPUSH
8671: CALL_OW 274
8675: PUSH
8676: LD_VAR 0 1
8680: NONEQUAL
8681: IFFALSE 8697
// ComLinkToBase ( base , i ) ;
8683: LD_VAR 0 1
8687: PPUSH
8688: LD_VAR 0 6
8692: PPUSH
8693: CALL_OW 169
8697: GO 8663
8699: POP
8700: POP
// end ; result := tmp ;
8701: LD_ADDR_VAR 0 4
8705: PUSH
8706: LD_VAR 0 5
8710: ST_TO_ADDR
// end ;
8711: LD_VAR 0 4
8715: RET
// export function ComComplete ( units , b ) ; var i ; begin
8716: LD_INT 0
8718: PPUSH
8719: PPUSH
// if not units then
8720: LD_VAR 0 1
8724: NOT
8725: IFFALSE 8729
// exit ;
8727: GO 8819
// for i in units do
8729: LD_ADDR_VAR 0 4
8733: PUSH
8734: LD_VAR 0 1
8738: PUSH
8739: FOR_IN
8740: IFFALSE 8817
// if BuildingStatus ( b ) = bs_build then
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 461
8751: PUSH
8752: LD_INT 1
8754: EQUAL
8755: IFFALSE 8815
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8757: LD_VAR 0 4
8761: PPUSH
8762: LD_STRING h
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 250
8774: PUSH
8775: LD_VAR 0 2
8779: PPUSH
8780: CALL_OW 251
8784: PUSH
8785: LD_VAR 0 2
8789: PUSH
8790: LD_INT 0
8792: PUSH
8793: LD_INT 0
8795: PUSH
8796: LD_INT 0
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: PPUSH
8811: CALL_OW 446
8815: GO 8739
8817: POP
8818: POP
// end ;
8819: LD_VAR 0 3
8823: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8824: LD_INT 0
8826: PPUSH
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8832: LD_VAR 0 1
8836: NOT
8837: PUSH
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 263
8847: PUSH
8848: LD_INT 2
8850: NONEQUAL
8851: OR
8852: IFFALSE 8856
// exit ;
8854: GO 9172
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8856: LD_ADDR_VAR 0 6
8860: PUSH
8861: LD_INT 22
8863: PUSH
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 2
8880: PUSH
8881: LD_INT 30
8883: PUSH
8884: LD_INT 36
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 34
8893: PUSH
8894: LD_INT 31
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PPUSH
8910: CALL_OW 69
8914: ST_TO_ADDR
// if not tmp then
8915: LD_VAR 0 6
8919: NOT
8920: IFFALSE 8924
// exit ;
8922: GO 9172
// result := [ ] ;
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: EMPTY
8930: ST_TO_ADDR
// for i in tmp do
8931: LD_ADDR_VAR 0 3
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: FOR_IN
8942: IFFALSE 9013
// begin t := UnitsInside ( i ) ;
8944: LD_ADDR_VAR 0 4
8948: PUSH
8949: LD_VAR 0 3
8953: PPUSH
8954: CALL_OW 313
8958: ST_TO_ADDR
// if t then
8959: LD_VAR 0 4
8963: IFFALSE 9011
// for j in t do
8965: LD_ADDR_VAR 0 7
8969: PUSH
8970: LD_VAR 0 4
8974: PUSH
8975: FOR_IN
8976: IFFALSE 9009
// result := Replace ( result , result + 1 , j ) ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_VAR 0 2
8992: PUSH
8993: LD_INT 1
8995: PLUS
8996: PPUSH
8997: LD_VAR 0 7
9001: PPUSH
9002: CALL_OW 1
9006: ST_TO_ADDR
9007: GO 8975
9009: POP
9010: POP
// end ;
9011: GO 8941
9013: POP
9014: POP
// if not result then
9015: LD_VAR 0 2
9019: NOT
9020: IFFALSE 9024
// exit ;
9022: GO 9172
// mech := result [ 1 ] ;
9024: LD_ADDR_VAR 0 5
9028: PUSH
9029: LD_VAR 0 2
9033: PUSH
9034: LD_INT 1
9036: ARRAY
9037: ST_TO_ADDR
// if result > 1 then
9038: LD_VAR 0 2
9042: PUSH
9043: LD_INT 1
9045: GREATER
9046: IFFALSE 9158
// begin for i = 2 to result do
9048: LD_ADDR_VAR 0 3
9052: PUSH
9053: DOUBLE
9054: LD_INT 2
9056: DEC
9057: ST_TO_ADDR
9058: LD_VAR 0 2
9062: PUSH
9063: FOR_TO
9064: IFFALSE 9156
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9066: LD_ADDR_VAR 0 4
9070: PUSH
9071: LD_VAR 0 2
9075: PUSH
9076: LD_VAR 0 3
9080: ARRAY
9081: PPUSH
9082: LD_INT 3
9084: PPUSH
9085: CALL_OW 259
9089: PUSH
9090: LD_VAR 0 2
9094: PUSH
9095: LD_VAR 0 3
9099: ARRAY
9100: PPUSH
9101: CALL_OW 432
9105: MINUS
9106: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9107: LD_VAR 0 4
9111: PUSH
9112: LD_VAR 0 5
9116: PPUSH
9117: LD_INT 3
9119: PPUSH
9120: CALL_OW 259
9124: PUSH
9125: LD_VAR 0 5
9129: PPUSH
9130: CALL_OW 432
9134: MINUS
9135: GREATEREQUAL
9136: IFFALSE 9154
// mech := result [ i ] ;
9138: LD_ADDR_VAR 0 5
9142: PUSH
9143: LD_VAR 0 2
9147: PUSH
9148: LD_VAR 0 3
9152: ARRAY
9153: ST_TO_ADDR
// end ;
9154: GO 9063
9156: POP
9157: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9158: LD_VAR 0 1
9162: PPUSH
9163: LD_VAR 0 5
9167: PPUSH
9168: CALL_OW 135
// end ;
9172: LD_VAR 0 2
9176: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9177: LD_INT 0
9179: PPUSH
9180: PPUSH
9181: PPUSH
9182: PPUSH
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
9191: PPUSH
// result := [ ] ;
9192: LD_ADDR_VAR 0 7
9196: PUSH
9197: EMPTY
9198: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9199: LD_VAR 0 1
9203: PPUSH
9204: CALL_OW 266
9208: PUSH
9209: LD_INT 0
9211: PUSH
9212: LD_INT 1
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: IN
9219: NOT
9220: IFFALSE 9224
// exit ;
9222: GO 10858
// if name then
9224: LD_VAR 0 3
9228: IFFALSE 9244
// SetBName ( base_dep , name ) ;
9230: LD_VAR 0 1
9234: PPUSH
9235: LD_VAR 0 3
9239: PPUSH
9240: CALL_OW 500
// base := GetBase ( base_dep ) ;
9244: LD_ADDR_VAR 0 15
9248: PUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 274
9258: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9259: LD_ADDR_VAR 0 16
9263: PUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 255
9273: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9274: LD_ADDR_VAR 0 17
9278: PUSH
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 248
9288: ST_TO_ADDR
// if sources then
9289: LD_VAR 0 5
9293: IFFALSE 9340
// for i = 1 to 3 do
9295: LD_ADDR_VAR 0 8
9299: PUSH
9300: DOUBLE
9301: LD_INT 1
9303: DEC
9304: ST_TO_ADDR
9305: LD_INT 3
9307: PUSH
9308: FOR_TO
9309: IFFALSE 9338
// AddResourceType ( base , i , sources [ i ] ) ;
9311: LD_VAR 0 15
9315: PPUSH
9316: LD_VAR 0 8
9320: PPUSH
9321: LD_VAR 0 5
9325: PUSH
9326: LD_VAR 0 8
9330: ARRAY
9331: PPUSH
9332: CALL_OW 276
9336: GO 9308
9338: POP
9339: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9340: LD_ADDR_VAR 0 18
9344: PUSH
9345: LD_VAR 0 15
9349: PPUSH
9350: LD_VAR 0 2
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: CALL 8601 0 3
9362: ST_TO_ADDR
// InitHc ;
9363: CALL_OW 19
// InitUc ;
9367: CALL_OW 18
// uc_side := side ;
9371: LD_ADDR_OWVAR 20
9375: PUSH
9376: LD_VAR 0 16
9380: ST_TO_ADDR
// uc_nation := nation ;
9381: LD_ADDR_OWVAR 21
9385: PUSH
9386: LD_VAR 0 17
9390: ST_TO_ADDR
// if buildings then
9391: LD_VAR 0 18
9395: IFFALSE 10717
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9397: LD_ADDR_VAR 0 19
9401: PUSH
9402: LD_VAR 0 18
9406: PPUSH
9407: LD_INT 2
9409: PUSH
9410: LD_INT 30
9412: PUSH
9413: LD_INT 29
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 30
9422: PUSH
9423: LD_INT 30
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 72
9439: ST_TO_ADDR
// if tmp then
9440: LD_VAR 0 19
9444: IFFALSE 9492
// for i in tmp do
9446: LD_ADDR_VAR 0 8
9450: PUSH
9451: LD_VAR 0 19
9455: PUSH
9456: FOR_IN
9457: IFFALSE 9490
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9459: LD_VAR 0 8
9463: PPUSH
9464: CALL_OW 250
9468: PPUSH
9469: LD_VAR 0 8
9473: PPUSH
9474: CALL_OW 251
9478: PPUSH
9479: LD_VAR 0 16
9483: PPUSH
9484: CALL_OW 441
9488: GO 9456
9490: POP
9491: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9492: LD_VAR 0 18
9496: PPUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 30
9502: PUSH
9503: LD_INT 32
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 30
9512: PUSH
9513: LD_INT 33
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: PPUSH
9525: CALL_OW 72
9529: IFFALSE 9617
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9531: LD_ADDR_VAR 0 8
9535: PUSH
9536: LD_VAR 0 18
9540: PPUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 30
9546: PUSH
9547: LD_INT 32
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 30
9556: PUSH
9557: LD_INT 33
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: PPUSH
9569: CALL_OW 72
9573: PUSH
9574: FOR_IN
9575: IFFALSE 9615
// begin if not GetBWeapon ( i ) then
9577: LD_VAR 0 8
9581: PPUSH
9582: CALL_OW 269
9586: NOT
9587: IFFALSE 9613
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9589: LD_VAR 0 8
9593: PPUSH
9594: LD_VAR 0 8
9598: PPUSH
9599: LD_VAR 0 2
9603: PPUSH
9604: CALL 10863 0 2
9608: PPUSH
9609: CALL_OW 431
// end ;
9613: GO 9574
9615: POP
9616: POP
// end ; for i = 1 to personel do
9617: LD_ADDR_VAR 0 8
9621: PUSH
9622: DOUBLE
9623: LD_INT 1
9625: DEC
9626: ST_TO_ADDR
9627: LD_VAR 0 6
9631: PUSH
9632: FOR_TO
9633: IFFALSE 10697
// begin if i > 4 then
9635: LD_VAR 0 8
9639: PUSH
9640: LD_INT 4
9642: GREATER
9643: IFFALSE 9647
// break ;
9645: GO 10697
// case i of 1 :
9647: LD_VAR 0 8
9651: PUSH
9652: LD_INT 1
9654: DOUBLE
9655: EQUAL
9656: IFTRUE 9660
9658: GO 9740
9660: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9661: LD_ADDR_VAR 0 12
9665: PUSH
9666: LD_VAR 0 18
9670: PPUSH
9671: LD_INT 22
9673: PUSH
9674: LD_VAR 0 16
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 58
9685: PUSH
9686: EMPTY
9687: LIST
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 30
9694: PUSH
9695: LD_INT 32
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 30
9704: PUSH
9705: LD_INT 4
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 5
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 72
9737: ST_TO_ADDR
9738: GO 9962
9740: LD_INT 2
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9810
9748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9749: LD_ADDR_VAR 0 12
9753: PUSH
9754: LD_VAR 0 18
9758: PPUSH
9759: LD_INT 22
9761: PUSH
9762: LD_VAR 0 16
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: LD_INT 30
9776: PUSH
9777: LD_INT 0
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 1
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PPUSH
9803: CALL_OW 72
9807: ST_TO_ADDR
9808: GO 9962
9810: LD_INT 3
9812: DOUBLE
9813: EQUAL
9814: IFTRUE 9818
9816: GO 9880
9818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9819: LD_ADDR_VAR 0 12
9823: PUSH
9824: LD_VAR 0 18
9828: PPUSH
9829: LD_INT 22
9831: PUSH
9832: LD_VAR 0 16
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 30
9846: PUSH
9847: LD_INT 2
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 30
9856: PUSH
9857: LD_INT 3
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 72
9877: ST_TO_ADDR
9878: GO 9962
9880: LD_INT 4
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 9961
9888: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9889: LD_ADDR_VAR 0 12
9893: PUSH
9894: LD_VAR 0 18
9898: PPUSH
9899: LD_INT 22
9901: PUSH
9902: LD_VAR 0 16
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 30
9916: PUSH
9917: LD_INT 6
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 30
9926: PUSH
9927: LD_INT 7
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 30
9936: PUSH
9937: LD_INT 8
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PPUSH
9954: CALL_OW 72
9958: ST_TO_ADDR
9959: GO 9962
9961: POP
// if i = 1 then
9962: LD_VAR 0 8
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: IFFALSE 10081
// begin tmp := [ ] ;
9972: LD_ADDR_VAR 0 19
9976: PUSH
9977: EMPTY
9978: ST_TO_ADDR
// for j in f do
9979: LD_ADDR_VAR 0 9
9983: PUSH
9984: LD_VAR 0 12
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10063
// if GetBType ( j ) = b_bunker then
9992: LD_VAR 0 9
9996: PPUSH
9997: CALL_OW 266
10001: PUSH
10002: LD_INT 32
10004: EQUAL
10005: IFFALSE 10032
// tmp := Insert ( tmp , 1 , j ) else
10007: LD_ADDR_VAR 0 19
10011: PUSH
10012: LD_VAR 0 19
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: LD_VAR 0 9
10024: PPUSH
10025: CALL_OW 2
10029: ST_TO_ADDR
10030: GO 10061
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10032: LD_ADDR_VAR 0 19
10036: PUSH
10037: LD_VAR 0 19
10041: PPUSH
10042: LD_VAR 0 19
10046: PUSH
10047: LD_INT 1
10049: PLUS
10050: PPUSH
10051: LD_VAR 0 9
10055: PPUSH
10056: CALL_OW 2
10060: ST_TO_ADDR
10061: GO 9989
10063: POP
10064: POP
// if tmp then
10065: LD_VAR 0 19
10069: IFFALSE 10081
// f := tmp ;
10071: LD_ADDR_VAR 0 12
10075: PUSH
10076: LD_VAR 0 19
10080: ST_TO_ADDR
// end ; x := personel [ i ] ;
10081: LD_ADDR_VAR 0 13
10085: PUSH
10086: LD_VAR 0 6
10090: PUSH
10091: LD_VAR 0 8
10095: ARRAY
10096: ST_TO_ADDR
// if x = - 1 then
10097: LD_VAR 0 13
10101: PUSH
10102: LD_INT 1
10104: NEG
10105: EQUAL
10106: IFFALSE 10315
// begin for j in f do
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_VAR 0 12
10117: PUSH
10118: FOR_IN
10119: IFFALSE 10311
// repeat InitHc ;
10121: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10125: LD_VAR 0 9
10129: PPUSH
10130: CALL_OW 266
10134: PUSH
10135: LD_INT 5
10137: EQUAL
10138: IFFALSE 10208
// begin if UnitsInside ( j ) < 3 then
10140: LD_VAR 0 9
10144: PPUSH
10145: CALL_OW 313
10149: PUSH
10150: LD_INT 3
10152: LESS
10153: IFFALSE 10189
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10155: LD_INT 0
10157: PPUSH
10158: LD_INT 5
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: LD_INT 9
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: PUSH
10172: LD_VAR 0 17
10176: ARRAY
10177: PPUSH
10178: LD_VAR 0 4
10182: PPUSH
10183: CALL_OW 380
10187: GO 10206
// PrepareHuman ( false , i , skill ) ;
10189: LD_INT 0
10191: PPUSH
10192: LD_VAR 0 8
10196: PPUSH
10197: LD_VAR 0 4
10201: PPUSH
10202: CALL_OW 380
// end else
10206: GO 10225
// PrepareHuman ( false , i , skill ) ;
10208: LD_INT 0
10210: PPUSH
10211: LD_VAR 0 8
10215: PPUSH
10216: LD_VAR 0 4
10220: PPUSH
10221: CALL_OW 380
// un := CreateHuman ;
10225: LD_ADDR_VAR 0 14
10229: PUSH
10230: CALL_OW 44
10234: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10235: LD_ADDR_VAR 0 7
10239: PUSH
10240: LD_VAR 0 7
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: LD_VAR 0 14
10252: PPUSH
10253: CALL_OW 2
10257: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10258: LD_VAR 0 14
10262: PPUSH
10263: LD_VAR 0 9
10267: PPUSH
10268: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10272: LD_VAR 0 9
10276: PPUSH
10277: CALL_OW 313
10281: PUSH
10282: LD_INT 6
10284: EQUAL
10285: PUSH
10286: LD_VAR 0 9
10290: PPUSH
10291: CALL_OW 266
10295: PUSH
10296: LD_INT 32
10298: PUSH
10299: LD_INT 31
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: IN
10306: OR
10307: IFFALSE 10121
10309: GO 10118
10311: POP
10312: POP
// end else
10313: GO 10695
// for j = 1 to x do
10315: LD_ADDR_VAR 0 9
10319: PUSH
10320: DOUBLE
10321: LD_INT 1
10323: DEC
10324: ST_TO_ADDR
10325: LD_VAR 0 13
10329: PUSH
10330: FOR_TO
10331: IFFALSE 10693
// begin InitHc ;
10333: CALL_OW 19
// if not f then
10337: LD_VAR 0 12
10341: NOT
10342: IFFALSE 10431
// begin PrepareHuman ( false , i , skill ) ;
10344: LD_INT 0
10346: PPUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 4
10356: PPUSH
10357: CALL_OW 380
// un := CreateHuman ;
10361: LD_ADDR_VAR 0 14
10365: PUSH
10366: CALL_OW 44
10370: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10371: LD_ADDR_VAR 0 7
10375: PUSH
10376: LD_VAR 0 7
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: LD_VAR 0 14
10388: PPUSH
10389: CALL_OW 2
10393: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10394: LD_VAR 0 14
10398: PPUSH
10399: LD_VAR 0 1
10403: PPUSH
10404: CALL_OW 250
10408: PPUSH
10409: LD_VAR 0 1
10413: PPUSH
10414: CALL_OW 251
10418: PPUSH
10419: LD_INT 10
10421: PPUSH
10422: LD_INT 0
10424: PPUSH
10425: CALL_OW 50
// continue ;
10429: GO 10330
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10431: LD_VAR 0 12
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PPUSH
10440: CALL_OW 313
10444: PUSH
10445: LD_VAR 0 12
10449: PUSH
10450: LD_INT 1
10452: ARRAY
10453: PPUSH
10454: CALL_OW 266
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: LD_INT 31
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: IN
10469: AND
10470: PUSH
10471: LD_VAR 0 12
10475: PUSH
10476: LD_INT 1
10478: ARRAY
10479: PPUSH
10480: CALL_OW 313
10484: PUSH
10485: LD_INT 6
10487: EQUAL
10488: OR
10489: IFFALSE 10509
// f := Delete ( f , 1 ) ;
10491: LD_ADDR_VAR 0 12
10495: PUSH
10496: LD_VAR 0 12
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 3
10508: ST_TO_ADDR
// if not f then
10509: LD_VAR 0 12
10513: NOT
10514: IFFALSE 10532
// begin x := x + 2 ;
10516: LD_ADDR_VAR 0 13
10520: PUSH
10521: LD_VAR 0 13
10525: PUSH
10526: LD_INT 2
10528: PLUS
10529: ST_TO_ADDR
// continue ;
10530: GO 10330
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10532: LD_VAR 0 12
10536: PUSH
10537: LD_INT 1
10539: ARRAY
10540: PPUSH
10541: CALL_OW 266
10545: PUSH
10546: LD_INT 5
10548: EQUAL
10549: IFFALSE 10623
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10551: LD_VAR 0 12
10555: PUSH
10556: LD_INT 1
10558: ARRAY
10559: PPUSH
10560: CALL_OW 313
10564: PUSH
10565: LD_INT 3
10567: LESS
10568: IFFALSE 10604
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10570: LD_INT 0
10572: PPUSH
10573: LD_INT 5
10575: PUSH
10576: LD_INT 8
10578: PUSH
10579: LD_INT 9
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: LD_VAR 0 17
10591: ARRAY
10592: PPUSH
10593: LD_VAR 0 4
10597: PPUSH
10598: CALL_OW 380
10602: GO 10621
// PrepareHuman ( false , i , skill ) ;
10604: LD_INT 0
10606: PPUSH
10607: LD_VAR 0 8
10611: PPUSH
10612: LD_VAR 0 4
10616: PPUSH
10617: CALL_OW 380
// end else
10621: GO 10640
// PrepareHuman ( false , i , skill ) ;
10623: LD_INT 0
10625: PPUSH
10626: LD_VAR 0 8
10630: PPUSH
10631: LD_VAR 0 4
10635: PPUSH
10636: CALL_OW 380
// un := CreateHuman ;
10640: LD_ADDR_VAR 0 14
10644: PUSH
10645: CALL_OW 44
10649: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10650: LD_ADDR_VAR 0 7
10654: PUSH
10655: LD_VAR 0 7
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: LD_VAR 0 14
10667: PPUSH
10668: CALL_OW 2
10672: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10673: LD_VAR 0 14
10677: PPUSH
10678: LD_VAR 0 12
10682: PUSH
10683: LD_INT 1
10685: ARRAY
10686: PPUSH
10687: CALL_OW 52
// end ;
10691: GO 10330
10693: POP
10694: POP
// end ;
10695: GO 9632
10697: POP
10698: POP
// result := result ^ buildings ;
10699: LD_ADDR_VAR 0 7
10703: PUSH
10704: LD_VAR 0 7
10708: PUSH
10709: LD_VAR 0 18
10713: ADD
10714: ST_TO_ADDR
// end else
10715: GO 10858
// begin for i = 1 to personel do
10717: LD_ADDR_VAR 0 8
10721: PUSH
10722: DOUBLE
10723: LD_INT 1
10725: DEC
10726: ST_TO_ADDR
10727: LD_VAR 0 6
10731: PUSH
10732: FOR_TO
10733: IFFALSE 10856
// begin if i > 4 then
10735: LD_VAR 0 8
10739: PUSH
10740: LD_INT 4
10742: GREATER
10743: IFFALSE 10747
// break ;
10745: GO 10856
// x := personel [ i ] ;
10747: LD_ADDR_VAR 0 13
10751: PUSH
10752: LD_VAR 0 6
10756: PUSH
10757: LD_VAR 0 8
10761: ARRAY
10762: ST_TO_ADDR
// if x = - 1 then
10763: LD_VAR 0 13
10767: PUSH
10768: LD_INT 1
10770: NEG
10771: EQUAL
10772: IFFALSE 10776
// continue ;
10774: GO 10732
// PrepareHuman ( false , i , skill ) ;
10776: LD_INT 0
10778: PPUSH
10779: LD_VAR 0 8
10783: PPUSH
10784: LD_VAR 0 4
10788: PPUSH
10789: CALL_OW 380
// un := CreateHuman ;
10793: LD_ADDR_VAR 0 14
10797: PUSH
10798: CALL_OW 44
10802: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10803: LD_VAR 0 14
10807: PPUSH
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL_OW 250
10817: PPUSH
10818: LD_VAR 0 1
10822: PPUSH
10823: CALL_OW 251
10827: PPUSH
10828: LD_INT 10
10830: PPUSH
10831: LD_INT 0
10833: PPUSH
10834: CALL_OW 50
// result := result ^ un ;
10838: LD_ADDR_VAR 0 7
10842: PUSH
10843: LD_VAR 0 7
10847: PUSH
10848: LD_VAR 0 14
10852: ADD
10853: ST_TO_ADDR
// end ;
10854: GO 10732
10856: POP
10857: POP
// end ; end ;
10858: LD_VAR 0 7
10862: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10863: LD_INT 0
10865: PPUSH
10866: PPUSH
10867: PPUSH
10868: PPUSH
10869: PPUSH
10870: PPUSH
10871: PPUSH
10872: PPUSH
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
10879: PPUSH
10880: PPUSH
// result := false ;
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: LD_INT 0
10888: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10889: LD_VAR 0 1
10893: NOT
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 266
10904: PUSH
10905: LD_INT 32
10907: PUSH
10908: LD_INT 33
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: IN
10915: NOT
10916: OR
10917: IFFALSE 10921
// exit ;
10919: GO 12030
// nat := GetNation ( tower ) ;
10921: LD_ADDR_VAR 0 12
10925: PUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 248
10935: ST_TO_ADDR
// side := GetSide ( tower ) ;
10936: LD_ADDR_VAR 0 16
10940: PUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: CALL_OW 255
10950: ST_TO_ADDR
// x := GetX ( tower ) ;
10951: LD_ADDR_VAR 0 10
10955: PUSH
10956: LD_VAR 0 1
10960: PPUSH
10961: CALL_OW 250
10965: ST_TO_ADDR
// y := GetY ( tower ) ;
10966: LD_ADDR_VAR 0 11
10970: PUSH
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL_OW 251
10980: ST_TO_ADDR
// if not x or not y then
10981: LD_VAR 0 10
10985: NOT
10986: PUSH
10987: LD_VAR 0 11
10991: NOT
10992: OR
10993: IFFALSE 10997
// exit ;
10995: GO 12030
// weapon := 0 ;
10997: LD_ADDR_VAR 0 18
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// fac_list := [ ] ;
11005: LD_ADDR_VAR 0 17
11009: PUSH
11010: EMPTY
11011: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11012: LD_ADDR_VAR 0 6
11016: PUSH
11017: LD_VAR 0 1
11021: PPUSH
11022: CALL_OW 274
11026: PPUSH
11027: LD_VAR 0 2
11031: PPUSH
11032: LD_INT 0
11034: PPUSH
11035: CALL 8601 0 3
11039: PPUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 3
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 72
11054: ST_TO_ADDR
// if not factories then
11055: LD_VAR 0 6
11059: NOT
11060: IFFALSE 11064
// exit ;
11062: GO 12030
// for i in factories do
11064: LD_ADDR_VAR 0 8
11068: PUSH
11069: LD_VAR 0 6
11073: PUSH
11074: FOR_IN
11075: IFFALSE 11100
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11077: LD_ADDR_VAR 0 17
11081: PUSH
11082: LD_VAR 0 17
11086: PUSH
11087: LD_VAR 0 8
11091: PPUSH
11092: CALL_OW 478
11096: UNION
11097: ST_TO_ADDR
11098: GO 11074
11100: POP
11101: POP
// if not fac_list then
11102: LD_VAR 0 17
11106: NOT
11107: IFFALSE 11111
// exit ;
11109: GO 12030
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_INT 4
11118: PUSH
11119: LD_INT 5
11121: PUSH
11122: LD_INT 9
11124: PUSH
11125: LD_INT 10
11127: PUSH
11128: LD_INT 6
11130: PUSH
11131: LD_INT 7
11133: PUSH
11134: LD_INT 11
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: PUSH
11146: LD_INT 27
11148: PUSH
11149: LD_INT 28
11151: PUSH
11152: LD_INT 26
11154: PUSH
11155: LD_INT 30
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 43
11166: PUSH
11167: LD_INT 44
11169: PUSH
11170: LD_INT 46
11172: PUSH
11173: LD_INT 45
11175: PUSH
11176: LD_INT 47
11178: PUSH
11179: LD_INT 49
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_VAR 0 12
11199: ARRAY
11200: ST_TO_ADDR
// list := list isect fac_list ;
11201: LD_ADDR_VAR 0 5
11205: PUSH
11206: LD_VAR 0 5
11210: PUSH
11211: LD_VAR 0 17
11215: ISECT
11216: ST_TO_ADDR
// if not list then
11217: LD_VAR 0 5
11221: NOT
11222: IFFALSE 11226
// exit ;
11224: GO 12030
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11226: LD_VAR 0 12
11230: PUSH
11231: LD_INT 3
11233: EQUAL
11234: PUSH
11235: LD_INT 49
11237: PUSH
11238: LD_VAR 0 5
11242: IN
11243: AND
11244: PUSH
11245: LD_INT 31
11247: PPUSH
11248: LD_VAR 0 16
11252: PPUSH
11253: CALL_OW 321
11257: PUSH
11258: LD_INT 2
11260: EQUAL
11261: AND
11262: IFFALSE 11322
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11264: LD_INT 22
11266: PUSH
11267: LD_VAR 0 16
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: LD_INT 35
11278: PUSH
11279: LD_INT 49
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 91
11288: PUSH
11289: LD_VAR 0 1
11293: PUSH
11294: LD_INT 10
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: LIST
11306: PPUSH
11307: CALL_OW 69
11311: NOT
11312: IFFALSE 11322
// weapon := ru_time_lapser ;
11314: LD_ADDR_VAR 0 18
11318: PUSH
11319: LD_INT 49
11321: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11322: LD_VAR 0 12
11326: PUSH
11327: LD_INT 1
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: IN
11337: PUSH
11338: LD_INT 11
11340: PUSH
11341: LD_VAR 0 5
11345: IN
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_VAR 0 5
11354: IN
11355: OR
11356: AND
11357: PUSH
11358: LD_INT 6
11360: PPUSH
11361: LD_VAR 0 16
11365: PPUSH
11366: CALL_OW 321
11370: PUSH
11371: LD_INT 2
11373: EQUAL
11374: AND
11375: IFFALSE 11540
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11377: LD_INT 22
11379: PUSH
11380: LD_VAR 0 16
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 35
11394: PUSH
11395: LD_INT 11
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 35
11404: PUSH
11405: LD_INT 30
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 91
11419: PUSH
11420: LD_VAR 0 1
11424: PUSH
11425: LD_INT 18
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: NOT
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_VAR 0 16
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 30
11471: PUSH
11472: LD_INT 33
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 91
11486: PUSH
11487: LD_VAR 0 1
11491: PUSH
11492: LD_INT 12
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PUSH
11513: LD_INT 2
11515: GREATER
11516: AND
11517: IFFALSE 11540
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11519: LD_ADDR_VAR 0 18
11523: PUSH
11524: LD_INT 11
11526: PUSH
11527: LD_INT 30
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_VAR 0 12
11538: ARRAY
11539: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11540: LD_VAR 0 18
11544: NOT
11545: PUSH
11546: LD_INT 40
11548: PPUSH
11549: LD_VAR 0 16
11553: PPUSH
11554: CALL_OW 321
11558: PUSH
11559: LD_INT 2
11561: EQUAL
11562: AND
11563: PUSH
11564: LD_INT 7
11566: PUSH
11567: LD_VAR 0 5
11571: IN
11572: PUSH
11573: LD_INT 28
11575: PUSH
11576: LD_VAR 0 5
11580: IN
11581: OR
11582: PUSH
11583: LD_INT 45
11585: PUSH
11586: LD_VAR 0 5
11590: IN
11591: OR
11592: AND
11593: IFFALSE 11847
// begin hex := GetHexInfo ( x , y ) ;
11595: LD_ADDR_VAR 0 4
11599: PUSH
11600: LD_VAR 0 10
11604: PPUSH
11605: LD_VAR 0 11
11609: PPUSH
11610: CALL_OW 546
11614: ST_TO_ADDR
// if hex [ 1 ] then
11615: LD_VAR 0 4
11619: PUSH
11620: LD_INT 1
11622: ARRAY
11623: IFFALSE 11627
// exit ;
11625: GO 12030
// height := hex [ 2 ] ;
11627: LD_ADDR_VAR 0 15
11631: PUSH
11632: LD_VAR 0 4
11636: PUSH
11637: LD_INT 2
11639: ARRAY
11640: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11641: LD_ADDR_VAR 0 14
11645: PUSH
11646: LD_INT 0
11648: PUSH
11649: LD_INT 2
11651: PUSH
11652: LD_INT 3
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: ST_TO_ADDR
// for i in tmp do
11664: LD_ADDR_VAR 0 8
11668: PUSH
11669: LD_VAR 0 14
11673: PUSH
11674: FOR_IN
11675: IFFALSE 11845
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11677: LD_ADDR_VAR 0 9
11681: PUSH
11682: LD_VAR 0 10
11686: PPUSH
11687: LD_VAR 0 8
11691: PPUSH
11692: LD_INT 5
11694: PPUSH
11695: CALL_OW 272
11699: PUSH
11700: LD_VAR 0 11
11704: PPUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: LD_INT 5
11712: PPUSH
11713: CALL_OW 273
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11722: LD_VAR 0 9
11726: PUSH
11727: LD_INT 1
11729: ARRAY
11730: PPUSH
11731: LD_VAR 0 9
11735: PUSH
11736: LD_INT 2
11738: ARRAY
11739: PPUSH
11740: CALL_OW 488
11744: IFFALSE 11843
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11746: LD_ADDR_VAR 0 4
11750: PUSH
11751: LD_VAR 0 9
11755: PUSH
11756: LD_INT 1
11758: ARRAY
11759: PPUSH
11760: LD_VAR 0 9
11764: PUSH
11765: LD_INT 2
11767: ARRAY
11768: PPUSH
11769: CALL_OW 546
11773: ST_TO_ADDR
// if hex [ 1 ] then
11774: LD_VAR 0 4
11778: PUSH
11779: LD_INT 1
11781: ARRAY
11782: IFFALSE 11786
// continue ;
11784: GO 11674
// h := hex [ 2 ] ;
11786: LD_ADDR_VAR 0 13
11790: PUSH
11791: LD_VAR 0 4
11795: PUSH
11796: LD_INT 2
11798: ARRAY
11799: ST_TO_ADDR
// if h + 7 < height then
11800: LD_VAR 0 13
11804: PUSH
11805: LD_INT 7
11807: PLUS
11808: PUSH
11809: LD_VAR 0 15
11813: LESS
11814: IFFALSE 11843
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11816: LD_ADDR_VAR 0 18
11820: PUSH
11821: LD_INT 7
11823: PUSH
11824: LD_INT 28
11826: PUSH
11827: LD_INT 45
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: PUSH
11835: LD_VAR 0 12
11839: ARRAY
11840: ST_TO_ADDR
// break ;
11841: GO 11845
// end ; end ; end ;
11843: GO 11674
11845: POP
11846: POP
// end ; if not weapon then
11847: LD_VAR 0 18
11851: NOT
11852: IFFALSE 11912
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11854: LD_ADDR_VAR 0 5
11858: PUSH
11859: LD_VAR 0 5
11863: PUSH
11864: LD_INT 11
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 49
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: DIFF
11878: ST_TO_ADDR
// if not list then
11879: LD_VAR 0 5
11883: NOT
11884: IFFALSE 11888
// exit ;
11886: GO 12030
// weapon := list [ rand ( 1 , list ) ] ;
11888: LD_ADDR_VAR 0 18
11892: PUSH
11893: LD_VAR 0 5
11897: PUSH
11898: LD_INT 1
11900: PPUSH
11901: LD_VAR 0 5
11905: PPUSH
11906: CALL_OW 12
11910: ARRAY
11911: ST_TO_ADDR
// end ; if weapon then
11912: LD_VAR 0 18
11916: IFFALSE 12030
// begin tmp := CostOfWeapon ( weapon ) ;
11918: LD_ADDR_VAR 0 14
11922: PUSH
11923: LD_VAR 0 18
11927: PPUSH
11928: CALL_OW 451
11932: ST_TO_ADDR
// j := GetBase ( tower ) ;
11933: LD_ADDR_VAR 0 9
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 274
11947: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11948: LD_VAR 0 9
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 275
11960: PUSH
11961: LD_VAR 0 14
11965: PUSH
11966: LD_INT 1
11968: ARRAY
11969: GREATEREQUAL
11970: PUSH
11971: LD_VAR 0 9
11975: PPUSH
11976: LD_INT 2
11978: PPUSH
11979: CALL_OW 275
11983: PUSH
11984: LD_VAR 0 14
11988: PUSH
11989: LD_INT 2
11991: ARRAY
11992: GREATEREQUAL
11993: AND
11994: PUSH
11995: LD_VAR 0 9
11999: PPUSH
12000: LD_INT 3
12002: PPUSH
12003: CALL_OW 275
12007: PUSH
12008: LD_VAR 0 14
12012: PUSH
12013: LD_INT 3
12015: ARRAY
12016: GREATEREQUAL
12017: AND
12018: IFFALSE 12030
// result := weapon ;
12020: LD_ADDR_VAR 0 3
12024: PUSH
12025: LD_VAR 0 18
12029: ST_TO_ADDR
// end ; end ;
12030: LD_VAR 0 3
12034: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12035: LD_INT 0
12037: PPUSH
12038: PPUSH
// result := true ;
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if array1 = array2 then
12047: LD_VAR 0 1
12051: PUSH
12052: LD_VAR 0 2
12056: EQUAL
12057: IFFALSE 12117
// begin for i = 1 to array1 do
12059: LD_ADDR_VAR 0 4
12063: PUSH
12064: DOUBLE
12065: LD_INT 1
12067: DEC
12068: ST_TO_ADDR
12069: LD_VAR 0 1
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12113
// if array1 [ i ] <> array2 [ i ] then
12077: LD_VAR 0 1
12081: PUSH
12082: LD_VAR 0 4
12086: ARRAY
12087: PUSH
12088: LD_VAR 0 2
12092: PUSH
12093: LD_VAR 0 4
12097: ARRAY
12098: NONEQUAL
12099: IFFALSE 12111
// begin result := false ;
12101: LD_ADDR_VAR 0 3
12105: PUSH
12106: LD_INT 0
12108: ST_TO_ADDR
// break ;
12109: GO 12113
// end ;
12111: GO 12074
12113: POP
12114: POP
// end else
12115: GO 12125
// result := false ;
12117: LD_ADDR_VAR 0 3
12121: PUSH
12122: LD_INT 0
12124: ST_TO_ADDR
// end ;
12125: LD_VAR 0 3
12129: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12130: LD_INT 0
12132: PPUSH
12133: PPUSH
// if not array1 or not array2 then
12134: LD_VAR 0 1
12138: NOT
12139: PUSH
12140: LD_VAR 0 2
12144: NOT
12145: OR
12146: IFFALSE 12150
// exit ;
12148: GO 12214
// result := true ;
12150: LD_ADDR_VAR 0 3
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// for i = 1 to array1 do
12158: LD_ADDR_VAR 0 4
12162: PUSH
12163: DOUBLE
12164: LD_INT 1
12166: DEC
12167: ST_TO_ADDR
12168: LD_VAR 0 1
12172: PUSH
12173: FOR_TO
12174: IFFALSE 12212
// if array1 [ i ] <> array2 [ i ] then
12176: LD_VAR 0 1
12180: PUSH
12181: LD_VAR 0 4
12185: ARRAY
12186: PUSH
12187: LD_VAR 0 2
12191: PUSH
12192: LD_VAR 0 4
12196: ARRAY
12197: NONEQUAL
12198: IFFALSE 12210
// begin result := false ;
12200: LD_ADDR_VAR 0 3
12204: PUSH
12205: LD_INT 0
12207: ST_TO_ADDR
// break ;
12208: GO 12212
// end ;
12210: GO 12173
12212: POP
12213: POP
// end ;
12214: LD_VAR 0 3
12218: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
// pom := GetBase ( fac ) ;
12224: LD_ADDR_VAR 0 5
12228: PUSH
12229: LD_VAR 0 1
12233: PPUSH
12234: CALL_OW 274
12238: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12239: LD_ADDR_VAR 0 4
12243: PUSH
12244: LD_VAR 0 2
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PPUSH
12253: LD_VAR 0 2
12257: PUSH
12258: LD_INT 2
12260: ARRAY
12261: PPUSH
12262: LD_VAR 0 2
12266: PUSH
12267: LD_INT 3
12269: ARRAY
12270: PPUSH
12271: LD_VAR 0 2
12275: PUSH
12276: LD_INT 4
12278: ARRAY
12279: PPUSH
12280: CALL_OW 449
12284: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12285: LD_ADDR_VAR 0 3
12289: PUSH
12290: LD_VAR 0 5
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 275
12302: PUSH
12303: LD_VAR 0 4
12307: PUSH
12308: LD_INT 1
12310: ARRAY
12311: GREATEREQUAL
12312: PUSH
12313: LD_VAR 0 5
12317: PPUSH
12318: LD_INT 2
12320: PPUSH
12321: CALL_OW 275
12325: PUSH
12326: LD_VAR 0 4
12330: PUSH
12331: LD_INT 2
12333: ARRAY
12334: GREATEREQUAL
12335: AND
12336: PUSH
12337: LD_VAR 0 5
12341: PPUSH
12342: LD_INT 3
12344: PPUSH
12345: CALL_OW 275
12349: PUSH
12350: LD_VAR 0 4
12354: PUSH
12355: LD_INT 3
12357: ARRAY
12358: GREATEREQUAL
12359: AND
12360: ST_TO_ADDR
// end ;
12361: LD_VAR 0 3
12365: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12366: LD_INT 0
12368: PPUSH
12369: PPUSH
12370: PPUSH
12371: PPUSH
// pom := GetBase ( building ) ;
12372: LD_ADDR_VAR 0 3
12376: PUSH
12377: LD_VAR 0 1
12381: PPUSH
12382: CALL_OW 274
12386: ST_TO_ADDR
// if not pom then
12387: LD_VAR 0 3
12391: NOT
12392: IFFALSE 12396
// exit ;
12394: GO 12566
// btype := GetBType ( building ) ;
12396: LD_ADDR_VAR 0 5
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 266
12410: ST_TO_ADDR
// if btype = b_armoury then
12411: LD_VAR 0 5
12415: PUSH
12416: LD_INT 4
12418: EQUAL
12419: IFFALSE 12429
// btype := b_barracks ;
12421: LD_ADDR_VAR 0 5
12425: PUSH
12426: LD_INT 5
12428: ST_TO_ADDR
// if btype = b_depot then
12429: LD_VAR 0 5
12433: PUSH
12434: LD_INT 0
12436: EQUAL
12437: IFFALSE 12447
// btype := b_warehouse ;
12439: LD_ADDR_VAR 0 5
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// if btype = b_workshop then
12447: LD_VAR 0 5
12451: PUSH
12452: LD_INT 2
12454: EQUAL
12455: IFFALSE 12465
// btype := b_factory ;
12457: LD_ADDR_VAR 0 5
12461: PUSH
12462: LD_INT 3
12464: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: LD_VAR 0 5
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 248
12484: PPUSH
12485: CALL_OW 450
12489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12490: LD_ADDR_VAR 0 2
12494: PUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 275
12507: PUSH
12508: LD_VAR 0 4
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: GREATEREQUAL
12517: PUSH
12518: LD_VAR 0 3
12522: PPUSH
12523: LD_INT 2
12525: PPUSH
12526: CALL_OW 275
12530: PUSH
12531: LD_VAR 0 4
12535: PUSH
12536: LD_INT 2
12538: ARRAY
12539: GREATEREQUAL
12540: AND
12541: PUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 3
12549: PPUSH
12550: CALL_OW 275
12554: PUSH
12555: LD_VAR 0 4
12559: PUSH
12560: LD_INT 3
12562: ARRAY
12563: GREATEREQUAL
12564: AND
12565: ST_TO_ADDR
// end ;
12566: LD_VAR 0 2
12570: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12571: LD_INT 0
12573: PPUSH
12574: PPUSH
12575: PPUSH
// pom := GetBase ( building ) ;
12576: LD_ADDR_VAR 0 4
12580: PUSH
12581: LD_VAR 0 1
12585: PPUSH
12586: CALL_OW 274
12590: ST_TO_ADDR
// if not pom then
12591: LD_VAR 0 4
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 12701
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12600: LD_ADDR_VAR 0 5
12604: PUSH
12605: LD_VAR 0 2
12609: PPUSH
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 248
12619: PPUSH
12620: CALL_OW 450
12624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12625: LD_ADDR_VAR 0 3
12629: PUSH
12630: LD_VAR 0 4
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 275
12642: PUSH
12643: LD_VAR 0 5
12647: PUSH
12648: LD_INT 1
12650: ARRAY
12651: GREATEREQUAL
12652: PUSH
12653: LD_VAR 0 4
12657: PPUSH
12658: LD_INT 2
12660: PPUSH
12661: CALL_OW 275
12665: PUSH
12666: LD_VAR 0 5
12670: PUSH
12671: LD_INT 2
12673: ARRAY
12674: GREATEREQUAL
12675: AND
12676: PUSH
12677: LD_VAR 0 4
12681: PPUSH
12682: LD_INT 3
12684: PPUSH
12685: CALL_OW 275
12689: PUSH
12690: LD_VAR 0 5
12694: PUSH
12695: LD_INT 3
12697: ARRAY
12698: GREATEREQUAL
12699: AND
12700: ST_TO_ADDR
// end ;
12701: LD_VAR 0 3
12705: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12706: LD_INT 0
12708: PPUSH
12709: PPUSH
12710: PPUSH
12711: PPUSH
12712: PPUSH
12713: PPUSH
12714: PPUSH
12715: PPUSH
12716: PPUSH
12717: PPUSH
12718: PPUSH
// result := false ;
12719: LD_ADDR_VAR 0 8
12723: PUSH
12724: LD_INT 0
12726: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12727: LD_VAR 0 5
12731: NOT
12732: PUSH
12733: LD_VAR 0 1
12737: NOT
12738: OR
12739: PUSH
12740: LD_VAR 0 2
12744: NOT
12745: OR
12746: PUSH
12747: LD_VAR 0 3
12751: NOT
12752: OR
12753: IFFALSE 12757
// exit ;
12755: GO 13571
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12757: LD_ADDR_VAR 0 14
12761: PUSH
12762: LD_VAR 0 1
12766: PPUSH
12767: LD_VAR 0 2
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_VAR 0 4
12781: PPUSH
12782: LD_VAR 0 5
12786: PUSH
12787: LD_INT 1
12789: ARRAY
12790: PPUSH
12791: CALL_OW 248
12795: PPUSH
12796: LD_INT 0
12798: PPUSH
12799: CALL 14824 0 6
12803: ST_TO_ADDR
// if not hexes then
12804: LD_VAR 0 14
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 13571
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12813: LD_ADDR_VAR 0 17
12817: PUSH
12818: LD_VAR 0 5
12822: PPUSH
12823: LD_INT 22
12825: PUSH
12826: LD_VAR 0 13
12830: PPUSH
12831: CALL_OW 255
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: LD_INT 30
12845: PUSH
12846: LD_INT 0
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 30
12855: PUSH
12856: LD_INT 1
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 72
12876: ST_TO_ADDR
// for i = 1 to hexes do
12877: LD_ADDR_VAR 0 9
12881: PUSH
12882: DOUBLE
12883: LD_INT 1
12885: DEC
12886: ST_TO_ADDR
12887: LD_VAR 0 14
12891: PUSH
12892: FOR_TO
12893: IFFALSE 13569
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12895: LD_ADDR_VAR 0 13
12899: PUSH
12900: LD_VAR 0 14
12904: PUSH
12905: LD_VAR 0 9
12909: ARRAY
12910: PUSH
12911: LD_INT 1
12913: ARRAY
12914: PPUSH
12915: LD_VAR 0 14
12919: PUSH
12920: LD_VAR 0 9
12924: ARRAY
12925: PUSH
12926: LD_INT 2
12928: ARRAY
12929: PPUSH
12930: CALL_OW 428
12934: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12935: LD_VAR 0 14
12939: PUSH
12940: LD_VAR 0 9
12944: ARRAY
12945: PUSH
12946: LD_INT 1
12948: ARRAY
12949: PPUSH
12950: LD_VAR 0 14
12954: PUSH
12955: LD_VAR 0 9
12959: ARRAY
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: CALL_OW 351
12969: PUSH
12970: LD_VAR 0 14
12974: PUSH
12975: LD_VAR 0 9
12979: ARRAY
12980: PUSH
12981: LD_INT 1
12983: ARRAY
12984: PPUSH
12985: LD_VAR 0 14
12989: PUSH
12990: LD_VAR 0 9
12994: ARRAY
12995: PUSH
12996: LD_INT 2
12998: ARRAY
12999: PPUSH
13000: CALL_OW 488
13004: NOT
13005: OR
13006: PUSH
13007: LD_VAR 0 13
13011: PPUSH
13012: CALL_OW 247
13016: PUSH
13017: LD_INT 3
13019: EQUAL
13020: OR
13021: IFFALSE 13027
// exit ;
13023: POP
13024: POP
13025: GO 13571
// if not tmp then
13027: LD_VAR 0 13
13031: NOT
13032: IFFALSE 13036
// continue ;
13034: GO 12892
// result := true ;
13036: LD_ADDR_VAR 0 8
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13044: LD_VAR 0 6
13048: PUSH
13049: LD_VAR 0 13
13053: PPUSH
13054: CALL_OW 247
13058: PUSH
13059: LD_INT 2
13061: EQUAL
13062: AND
13063: PUSH
13064: LD_VAR 0 13
13068: PPUSH
13069: CALL_OW 263
13073: PUSH
13074: LD_INT 1
13076: EQUAL
13077: AND
13078: IFFALSE 13242
// begin if IsDrivenBy ( tmp ) then
13080: LD_VAR 0 13
13084: PPUSH
13085: CALL_OW 311
13089: IFFALSE 13093
// continue ;
13091: GO 12892
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13093: LD_VAR 0 6
13097: PPUSH
13098: LD_INT 3
13100: PUSH
13101: LD_INT 60
13103: PUSH
13104: EMPTY
13105: LIST
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: LD_INT 55
13116: PUSH
13117: EMPTY
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PPUSH
13128: CALL_OW 72
13132: IFFALSE 13240
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13134: LD_ADDR_VAR 0 18
13138: PUSH
13139: LD_VAR 0 6
13143: PPUSH
13144: LD_INT 3
13146: PUSH
13147: LD_INT 60
13149: PUSH
13150: EMPTY
13151: LIST
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 55
13162: PUSH
13163: EMPTY
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 72
13178: PUSH
13179: LD_INT 1
13181: ARRAY
13182: ST_TO_ADDR
// if IsInUnit ( driver ) then
13183: LD_VAR 0 18
13187: PPUSH
13188: CALL_OW 310
13192: IFFALSE 13203
// ComExit ( driver ) ;
13194: LD_VAR 0 18
13198: PPUSH
13199: CALL 38605 0 1
// AddComEnterUnit ( driver , tmp ) ;
13203: LD_VAR 0 18
13207: PPUSH
13208: LD_VAR 0 13
13212: PPUSH
13213: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13217: LD_VAR 0 18
13221: PPUSH
13222: LD_VAR 0 7
13226: PPUSH
13227: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13231: LD_VAR 0 18
13235: PPUSH
13236: CALL_OW 181
// end ; continue ;
13240: GO 12892
// end ; if not cleaners or not tmp in cleaners then
13242: LD_VAR 0 6
13246: NOT
13247: PUSH
13248: LD_VAR 0 13
13252: PUSH
13253: LD_VAR 0 6
13257: IN
13258: NOT
13259: OR
13260: IFFALSE 13567
// begin if dep then
13262: LD_VAR 0 17
13266: IFFALSE 13402
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13268: LD_ADDR_VAR 0 16
13272: PUSH
13273: LD_VAR 0 17
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: CALL_OW 250
13286: PPUSH
13287: LD_VAR 0 17
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: CALL_OW 254
13300: PPUSH
13301: LD_INT 5
13303: PPUSH
13304: CALL_OW 272
13308: PUSH
13309: LD_VAR 0 17
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: PPUSH
13318: CALL_OW 251
13322: PPUSH
13323: LD_VAR 0 17
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 254
13336: PPUSH
13337: LD_INT 5
13339: PPUSH
13340: CALL_OW 273
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13349: LD_VAR 0 16
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: LD_VAR 0 16
13362: PUSH
13363: LD_INT 2
13365: ARRAY
13366: PPUSH
13367: CALL_OW 488
13371: IFFALSE 13402
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13373: LD_VAR 0 13
13377: PPUSH
13378: LD_VAR 0 16
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PPUSH
13387: LD_VAR 0 16
13391: PUSH
13392: LD_INT 2
13394: ARRAY
13395: PPUSH
13396: CALL_OW 111
// continue ;
13400: GO 12892
// end ; end ; r := GetDir ( tmp ) ;
13402: LD_ADDR_VAR 0 15
13406: PUSH
13407: LD_VAR 0 13
13411: PPUSH
13412: CALL_OW 254
13416: ST_TO_ADDR
// if r = 5 then
13417: LD_VAR 0 15
13421: PUSH
13422: LD_INT 5
13424: EQUAL
13425: IFFALSE 13435
// r := 0 ;
13427: LD_ADDR_VAR 0 15
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// for j = r to 5 do
13435: LD_ADDR_VAR 0 10
13439: PUSH
13440: DOUBLE
13441: LD_VAR 0 15
13445: DEC
13446: ST_TO_ADDR
13447: LD_INT 5
13449: PUSH
13450: FOR_TO
13451: IFFALSE 13565
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13453: LD_ADDR_VAR 0 11
13457: PUSH
13458: LD_VAR 0 13
13462: PPUSH
13463: CALL_OW 250
13467: PPUSH
13468: LD_VAR 0 10
13472: PPUSH
13473: LD_INT 2
13475: PPUSH
13476: CALL_OW 272
13480: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13481: LD_ADDR_VAR 0 12
13485: PUSH
13486: LD_VAR 0 13
13490: PPUSH
13491: CALL_OW 251
13495: PPUSH
13496: LD_VAR 0 10
13500: PPUSH
13501: LD_INT 2
13503: PPUSH
13504: CALL_OW 273
13508: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13509: LD_VAR 0 11
13513: PPUSH
13514: LD_VAR 0 12
13518: PPUSH
13519: CALL_OW 488
13523: PUSH
13524: LD_VAR 0 11
13528: PPUSH
13529: LD_VAR 0 12
13533: PPUSH
13534: CALL_OW 428
13538: NOT
13539: AND
13540: IFFALSE 13563
// begin ComMoveXY ( tmp , _x , _y ) ;
13542: LD_VAR 0 13
13546: PPUSH
13547: LD_VAR 0 11
13551: PPUSH
13552: LD_VAR 0 12
13556: PPUSH
13557: CALL_OW 111
// break ;
13561: GO 13565
// end ; end ;
13563: GO 13450
13565: POP
13566: POP
// end ; end ;
13567: GO 12892
13569: POP
13570: POP
// end ;
13571: LD_VAR 0 8
13575: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13576: LD_INT 0
13578: PPUSH
// result := true ;
13579: LD_ADDR_VAR 0 3
13583: PUSH
13584: LD_INT 1
13586: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13587: LD_VAR 0 2
13591: PUSH
13592: LD_INT 24
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13606
13598: LD_INT 33
13600: DOUBLE
13601: EQUAL
13602: IFTRUE 13606
13604: GO 13631
13606: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13607: LD_ADDR_VAR 0 3
13611: PUSH
13612: LD_INT 32
13614: PPUSH
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 321
13624: PUSH
13625: LD_INT 2
13627: EQUAL
13628: ST_TO_ADDR
13629: GO 13947
13631: LD_INT 20
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13664
13639: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 6
13647: PPUSH
13648: LD_VAR 0 1
13652: PPUSH
13653: CALL_OW 321
13657: PUSH
13658: LD_INT 2
13660: EQUAL
13661: ST_TO_ADDR
13662: GO 13947
13664: LD_INT 22
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13678
13670: LD_INT 36
13672: DOUBLE
13673: EQUAL
13674: IFTRUE 13678
13676: GO 13703
13678: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: LD_INT 15
13686: PPUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 321
13696: PUSH
13697: LD_INT 2
13699: EQUAL
13700: ST_TO_ADDR
13701: GO 13947
13703: LD_INT 30
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13736
13711: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13712: LD_ADDR_VAR 0 3
13716: PUSH
13717: LD_INT 20
13719: PPUSH
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 321
13729: PUSH
13730: LD_INT 2
13732: EQUAL
13733: ST_TO_ADDR
13734: GO 13947
13736: LD_INT 28
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13750
13742: LD_INT 21
13744: DOUBLE
13745: EQUAL
13746: IFTRUE 13750
13748: GO 13775
13750: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13751: LD_ADDR_VAR 0 3
13755: PUSH
13756: LD_INT 21
13758: PPUSH
13759: LD_VAR 0 1
13763: PPUSH
13764: CALL_OW 321
13768: PUSH
13769: LD_INT 2
13771: EQUAL
13772: ST_TO_ADDR
13773: GO 13947
13775: LD_INT 16
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13808
13783: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13784: LD_ADDR_VAR 0 3
13788: PUSH
13789: LD_INT 84
13791: PPUSH
13792: LD_VAR 0 1
13796: PPUSH
13797: CALL_OW 321
13801: PUSH
13802: LD_INT 2
13804: EQUAL
13805: ST_TO_ADDR
13806: GO 13947
13808: LD_INT 19
13810: DOUBLE
13811: EQUAL
13812: IFTRUE 13822
13814: LD_INT 23
13816: DOUBLE
13817: EQUAL
13818: IFTRUE 13822
13820: GO 13847
13822: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_INT 83
13830: PPUSH
13831: LD_VAR 0 1
13835: PPUSH
13836: CALL_OW 321
13840: PUSH
13841: LD_INT 2
13843: EQUAL
13844: ST_TO_ADDR
13845: GO 13947
13847: LD_INT 17
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13880
13855: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 39
13863: PPUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 321
13873: PUSH
13874: LD_INT 2
13876: EQUAL
13877: ST_TO_ADDR
13878: GO 13947
13880: LD_INT 18
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13913
13888: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13889: LD_ADDR_VAR 0 3
13893: PUSH
13894: LD_INT 40
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 321
13906: PUSH
13907: LD_INT 2
13909: EQUAL
13910: ST_TO_ADDR
13911: GO 13947
13913: LD_INT 27
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13946
13921: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13922: LD_ADDR_VAR 0 3
13926: PUSH
13927: LD_INT 35
13929: PPUSH
13930: LD_VAR 0 1
13934: PPUSH
13935: CALL_OW 321
13939: PUSH
13940: LD_INT 2
13942: EQUAL
13943: ST_TO_ADDR
13944: GO 13947
13946: POP
// end ;
13947: LD_VAR 0 3
13951: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13952: LD_INT 0
13954: PPUSH
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
// result := false ;
13965: LD_ADDR_VAR 0 6
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// if btype = b_depot then
13973: LD_VAR 0 2
13977: PUSH
13978: LD_INT 0
13980: EQUAL
13981: IFFALSE 13993
// begin result := true ;
13983: LD_ADDR_VAR 0 6
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// exit ;
13991: GO 14819
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13993: LD_VAR 0 1
13997: NOT
13998: PUSH
13999: LD_VAR 0 1
14003: PPUSH
14004: CALL_OW 266
14008: PUSH
14009: LD_INT 0
14011: PUSH
14012: LD_INT 1
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: IN
14019: NOT
14020: OR
14021: PUSH
14022: LD_VAR 0 2
14026: NOT
14027: OR
14028: PUSH
14029: LD_VAR 0 5
14033: PUSH
14034: LD_INT 0
14036: PUSH
14037: LD_INT 1
14039: PUSH
14040: LD_INT 2
14042: PUSH
14043: LD_INT 3
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: IN
14060: NOT
14061: OR
14062: PUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_VAR 0 4
14072: PPUSH
14073: CALL_OW 488
14077: NOT
14078: OR
14079: IFFALSE 14083
// exit ;
14081: GO 14819
// side := GetSide ( depot ) ;
14083: LD_ADDR_VAR 0 9
14087: PUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 255
14097: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14098: LD_VAR 0 9
14102: PPUSH
14103: LD_VAR 0 2
14107: PPUSH
14108: CALL 13576 0 2
14112: NOT
14113: IFFALSE 14117
// exit ;
14115: GO 14819
// pom := GetBase ( depot ) ;
14117: LD_ADDR_VAR 0 10
14121: PUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 274
14131: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14132: LD_ADDR_VAR 0 11
14136: PUSH
14137: LD_VAR 0 2
14141: PPUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 248
14151: PPUSH
14152: CALL_OW 450
14156: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14157: LD_VAR 0 10
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: CALL_OW 275
14169: PUSH
14170: LD_VAR 0 11
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: GREATEREQUAL
14179: PUSH
14180: LD_VAR 0 10
14184: PPUSH
14185: LD_INT 2
14187: PPUSH
14188: CALL_OW 275
14192: PUSH
14193: LD_VAR 0 11
14197: PUSH
14198: LD_INT 2
14200: ARRAY
14201: GREATEREQUAL
14202: AND
14203: PUSH
14204: LD_VAR 0 10
14208: PPUSH
14209: LD_INT 3
14211: PPUSH
14212: CALL_OW 275
14216: PUSH
14217: LD_VAR 0 11
14221: PUSH
14222: LD_INT 3
14224: ARRAY
14225: GREATEREQUAL
14226: AND
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14819
// if GetBType ( depot ) = b_depot then
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 266
14241: PUSH
14242: LD_INT 0
14244: EQUAL
14245: IFFALSE 14257
// dist := 28 else
14247: LD_ADDR_VAR 0 14
14251: PUSH
14252: LD_INT 28
14254: ST_TO_ADDR
14255: GO 14265
// dist := 36 ;
14257: LD_ADDR_VAR 0 14
14261: PUSH
14262: LD_INT 36
14264: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14265: LD_VAR 0 1
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_VAR 0 4
14279: PPUSH
14280: CALL_OW 297
14284: PUSH
14285: LD_VAR 0 14
14289: GREATER
14290: IFFALSE 14294
// exit ;
14292: GO 14819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14294: LD_ADDR_VAR 0 12
14298: PUSH
14299: LD_VAR 0 2
14303: PPUSH
14304: LD_VAR 0 3
14308: PPUSH
14309: LD_VAR 0 4
14313: PPUSH
14314: LD_VAR 0 5
14318: PPUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 248
14328: PPUSH
14329: LD_INT 0
14331: PPUSH
14332: CALL 14824 0 6
14336: ST_TO_ADDR
// if not hexes then
14337: LD_VAR 0 12
14341: NOT
14342: IFFALSE 14346
// exit ;
14344: GO 14819
// hex := GetHexInfo ( x , y ) ;
14346: LD_ADDR_VAR 0 15
14350: PUSH
14351: LD_VAR 0 3
14355: PPUSH
14356: LD_VAR 0 4
14360: PPUSH
14361: CALL_OW 546
14365: ST_TO_ADDR
// if hex [ 1 ] then
14366: LD_VAR 0 15
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: IFFALSE 14378
// exit ;
14376: GO 14819
// height := hex [ 2 ] ;
14378: LD_ADDR_VAR 0 13
14382: PUSH
14383: LD_VAR 0 15
14387: PUSH
14388: LD_INT 2
14390: ARRAY
14391: ST_TO_ADDR
// for i = 1 to hexes do
14392: LD_ADDR_VAR 0 7
14396: PUSH
14397: DOUBLE
14398: LD_INT 1
14400: DEC
14401: ST_TO_ADDR
14402: LD_VAR 0 12
14406: PUSH
14407: FOR_TO
14408: IFFALSE 14738
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14410: LD_VAR 0 12
14414: PUSH
14415: LD_VAR 0 7
14419: ARRAY
14420: PUSH
14421: LD_INT 1
14423: ARRAY
14424: PPUSH
14425: LD_VAR 0 12
14429: PUSH
14430: LD_VAR 0 7
14434: ARRAY
14435: PUSH
14436: LD_INT 2
14438: ARRAY
14439: PPUSH
14440: CALL_OW 488
14444: NOT
14445: PUSH
14446: LD_VAR 0 12
14450: PUSH
14451: LD_VAR 0 7
14455: ARRAY
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: LD_VAR 0 12
14465: PUSH
14466: LD_VAR 0 7
14470: ARRAY
14471: PUSH
14472: LD_INT 2
14474: ARRAY
14475: PPUSH
14476: CALL_OW 428
14480: PUSH
14481: LD_INT 0
14483: GREATER
14484: OR
14485: PUSH
14486: LD_VAR 0 12
14490: PUSH
14491: LD_VAR 0 7
14495: ARRAY
14496: PUSH
14497: LD_INT 1
14499: ARRAY
14500: PPUSH
14501: LD_VAR 0 12
14505: PUSH
14506: LD_VAR 0 7
14510: ARRAY
14511: PUSH
14512: LD_INT 2
14514: ARRAY
14515: PPUSH
14516: CALL_OW 351
14520: OR
14521: IFFALSE 14527
// exit ;
14523: POP
14524: POP
14525: GO 14819
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14527: LD_ADDR_VAR 0 8
14531: PUSH
14532: LD_VAR 0 12
14536: PUSH
14537: LD_VAR 0 7
14541: ARRAY
14542: PUSH
14543: LD_INT 1
14545: ARRAY
14546: PPUSH
14547: LD_VAR 0 12
14551: PUSH
14552: LD_VAR 0 7
14556: ARRAY
14557: PUSH
14558: LD_INT 2
14560: ARRAY
14561: PPUSH
14562: CALL_OW 546
14566: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14567: LD_VAR 0 8
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_VAR 0 8
14580: PUSH
14581: LD_INT 2
14583: ARRAY
14584: PUSH
14585: LD_VAR 0 13
14589: PUSH
14590: LD_INT 2
14592: PLUS
14593: GREATER
14594: OR
14595: PUSH
14596: LD_VAR 0 8
14600: PUSH
14601: LD_INT 2
14603: ARRAY
14604: PUSH
14605: LD_VAR 0 13
14609: PUSH
14610: LD_INT 2
14612: MINUS
14613: LESS
14614: OR
14615: PUSH
14616: LD_VAR 0 8
14620: PUSH
14621: LD_INT 3
14623: ARRAY
14624: PUSH
14625: LD_INT 0
14627: PUSH
14628: LD_INT 8
14630: PUSH
14631: LD_INT 9
14633: PUSH
14634: LD_INT 10
14636: PUSH
14637: LD_INT 11
14639: PUSH
14640: LD_INT 12
14642: PUSH
14643: LD_INT 13
14645: PUSH
14646: LD_INT 16
14648: PUSH
14649: LD_INT 17
14651: PUSH
14652: LD_INT 18
14654: PUSH
14655: LD_INT 19
14657: PUSH
14658: LD_INT 20
14660: PUSH
14661: LD_INT 21
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: IN
14679: NOT
14680: OR
14681: PUSH
14682: LD_VAR 0 8
14686: PUSH
14687: LD_INT 5
14689: ARRAY
14690: NOT
14691: OR
14692: PUSH
14693: LD_VAR 0 8
14697: PUSH
14698: LD_INT 6
14700: ARRAY
14701: PUSH
14702: LD_INT 1
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: LD_INT 7
14710: PUSH
14711: LD_INT 9
14713: PUSH
14714: LD_INT 10
14716: PUSH
14717: LD_INT 11
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: IN
14728: NOT
14729: OR
14730: IFFALSE 14736
// exit ;
14732: POP
14733: POP
14734: GO 14819
// end ;
14736: GO 14407
14738: POP
14739: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14740: LD_VAR 0 9
14744: PPUSH
14745: LD_VAR 0 3
14749: PPUSH
14750: LD_VAR 0 4
14754: PPUSH
14755: LD_INT 20
14757: PPUSH
14758: CALL 6742 0 4
14762: PUSH
14763: LD_INT 4
14765: ARRAY
14766: IFFALSE 14770
// exit ;
14768: GO 14819
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14770: LD_VAR 0 2
14774: PUSH
14775: LD_INT 29
14777: PUSH
14778: LD_INT 30
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: IN
14785: PUSH
14786: LD_VAR 0 3
14790: PPUSH
14791: LD_VAR 0 4
14795: PPUSH
14796: LD_VAR 0 9
14800: PPUSH
14801: CALL_OW 440
14805: NOT
14806: AND
14807: IFFALSE 14811
// exit ;
14809: GO 14819
// result := true ;
14811: LD_ADDR_VAR 0 6
14815: PUSH
14816: LD_INT 1
14818: ST_TO_ADDR
// end ;
14819: LD_VAR 0 6
14823: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14824: LD_INT 0
14826: PPUSH
14827: PPUSH
14828: PPUSH
14829: PPUSH
14830: PPUSH
14831: PPUSH
14832: PPUSH
14833: PPUSH
14834: PPUSH
14835: PPUSH
14836: PPUSH
14837: PPUSH
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
14842: PPUSH
14843: PPUSH
14844: PPUSH
14845: PPUSH
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
14866: PPUSH
14867: PPUSH
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
14873: PPUSH
14874: PPUSH
14875: PPUSH
14876: PPUSH
14877: PPUSH
14878: PPUSH
14879: PPUSH
14880: PPUSH
14881: PPUSH
14882: PPUSH
14883: PPUSH
// result = [ ] ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: EMPTY
14890: ST_TO_ADDR
// temp_list = [ ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: EMPTY
14897: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14898: LD_VAR 0 4
14902: PUSH
14903: LD_INT 0
14905: PUSH
14906: LD_INT 1
14908: PUSH
14909: LD_INT 2
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: LD_INT 4
14917: PUSH
14918: LD_INT 5
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: IN
14929: NOT
14930: PUSH
14931: LD_VAR 0 1
14935: PUSH
14936: LD_INT 0
14938: PUSH
14939: LD_INT 1
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: IN
14946: PUSH
14947: LD_VAR 0 5
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: LIST
14965: IN
14966: NOT
14967: AND
14968: OR
14969: IFFALSE 14973
// exit ;
14971: GO 33364
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14973: LD_VAR 0 1
14977: PUSH
14978: LD_INT 6
14980: PUSH
14981: LD_INT 7
14983: PUSH
14984: LD_INT 8
14986: PUSH
14987: LD_INT 13
14989: PUSH
14990: LD_INT 12
14992: PUSH
14993: LD_INT 15
14995: PUSH
14996: LD_INT 11
14998: PUSH
14999: LD_INT 14
15001: PUSH
15002: LD_INT 10
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: IN
15016: IFFALSE 15026
// btype = b_lab ;
15018: LD_ADDR_VAR 0 1
15022: PUSH
15023: LD_INT 6
15025: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15026: LD_VAR 0 6
15030: PUSH
15031: LD_INT 0
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: LD_INT 2
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: IN
15045: NOT
15046: PUSH
15047: LD_VAR 0 1
15051: PUSH
15052: LD_INT 0
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: LD_INT 6
15066: PUSH
15067: LD_INT 36
15069: PUSH
15070: LD_INT 4
15072: PUSH
15073: LD_INT 5
15075: PUSH
15076: LD_INT 31
15078: PUSH
15079: LD_INT 32
15081: PUSH
15082: LD_INT 33
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: IN
15098: NOT
15099: PUSH
15100: LD_VAR 0 6
15104: PUSH
15105: LD_INT 1
15107: EQUAL
15108: AND
15109: OR
15110: PUSH
15111: LD_VAR 0 1
15115: PUSH
15116: LD_INT 2
15118: PUSH
15119: LD_INT 3
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: IN
15126: NOT
15127: PUSH
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 2
15135: EQUAL
15136: AND
15137: OR
15138: IFFALSE 15148
// mode = 0 ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_INT 0
15147: ST_TO_ADDR
// case mode of 0 :
15148: LD_VAR 0 6
15152: PUSH
15153: LD_INT 0
15155: DOUBLE
15156: EQUAL
15157: IFTRUE 15161
15159: GO 26614
15161: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15162: LD_ADDR_VAR 0 11
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: LD_INT 0
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: LD_INT 1
15182: NEG
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 1
15190: PUSH
15191: LD_INT 0
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 1
15220: NEG
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 1
15231: NEG
15232: PUSH
15233: LD_INT 1
15235: NEG
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 1
15243: NEG
15244: PUSH
15245: LD_INT 2
15247: NEG
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 0
15255: PUSH
15256: LD_INT 2
15258: NEG
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 1
15269: NEG
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 0
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 1
15297: NEG
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 0
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 1
15328: NEG
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15355: LD_ADDR_VAR 0 12
15359: PUSH
15360: LD_INT 0
15362: PUSH
15363: LD_INT 0
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: LD_INT 1
15375: NEG
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 1
15383: PUSH
15384: LD_INT 0
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 1
15393: PUSH
15394: LD_INT 1
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 0
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 1
15413: NEG
15414: PUSH
15415: LD_INT 0
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: LD_INT 1
15424: NEG
15425: PUSH
15426: LD_INT 1
15428: NEG
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: LD_INT 1
15439: NEG
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 2
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 1
15467: NEG
15468: PUSH
15469: LD_INT 1
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 2
15478: NEG
15479: PUSH
15480: LD_INT 0
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 2
15489: NEG
15490: PUSH
15491: LD_INT 1
15493: NEG
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: NEG
15502: PUSH
15503: LD_INT 1
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 3
15512: NEG
15513: PUSH
15514: LD_INT 0
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 3
15523: NEG
15524: PUSH
15525: LD_INT 1
15527: NEG
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15551: LD_ADDR_VAR 0 13
15555: PUSH
15556: LD_INT 0
15558: PUSH
15559: LD_INT 0
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 0
15568: PUSH
15569: LD_INT 1
15571: NEG
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: LD_INT 0
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 0
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 1
15609: NEG
15610: PUSH
15611: LD_INT 0
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: LD_INT 1
15624: NEG
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 1
15632: NEG
15633: PUSH
15634: LD_INT 2
15636: NEG
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 2
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 2
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 2
15674: NEG
15675: PUSH
15676: LD_INT 1
15678: NEG
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 2
15686: NEG
15687: PUSH
15688: LD_INT 2
15690: NEG
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 2
15698: NEG
15699: PUSH
15700: LD_INT 3
15702: NEG
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 3
15710: NEG
15711: PUSH
15712: LD_INT 2
15714: NEG
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 3
15722: NEG
15723: PUSH
15724: LD_INT 3
15726: NEG
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15750: LD_ADDR_VAR 0 14
15754: PUSH
15755: LD_INT 0
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: LD_INT 1
15770: NEG
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 1
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 1
15808: NEG
15809: PUSH
15810: LD_INT 0
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 1
15819: NEG
15820: PUSH
15821: LD_INT 1
15823: NEG
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 1
15831: NEG
15832: PUSH
15833: LD_INT 2
15835: NEG
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 0
15843: PUSH
15844: LD_INT 2
15846: NEG
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 1
15854: PUSH
15855: LD_INT 1
15857: NEG
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: LD_INT 2
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 0
15875: PUSH
15876: LD_INT 2
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: LD_INT 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 1
15896: NEG
15897: PUSH
15898: LD_INT 3
15900: NEG
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 0
15908: PUSH
15909: LD_INT 3
15911: NEG
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: LD_INT 2
15922: NEG
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15946: LD_ADDR_VAR 0 15
15950: PUSH
15951: LD_INT 0
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: LD_INT 1
15966: NEG
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 1
15974: PUSH
15975: LD_INT 0
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 1
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 0
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 1
16004: NEG
16005: PUSH
16006: LD_INT 0
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 1
16015: NEG
16016: PUSH
16017: LD_INT 1
16019: NEG
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: LD_INT 1
16030: NEG
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 2
16038: PUSH
16039: LD_INT 0
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 2
16048: PUSH
16049: LD_INT 1
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 1
16058: NEG
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: NEG
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 2
16080: NEG
16081: PUSH
16082: LD_INT 1
16084: NEG
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: LD_INT 1
16095: NEG
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: LD_INT 0
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16139: LD_ADDR_VAR 0 16
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: LD_INT 0
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: NEG
16198: PUSH
16199: LD_INT 0
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: NEG
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: LD_INT 2
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 1
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: LD_INT 2
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: LD_INT 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 2
16262: NEG
16263: PUSH
16264: LD_INT 1
16266: NEG
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 2
16274: NEG
16275: PUSH
16276: LD_INT 2
16278: NEG
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 3
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16332: LD_ADDR_VAR 0 17
16336: PUSH
16337: LD_INT 0
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: LD_INT 1
16352: NEG
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: LD_INT 0
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 0
16380: PUSH
16381: LD_INT 1
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 1
16390: NEG
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 1
16401: NEG
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 1
16413: NEG
16414: PUSH
16415: LD_INT 2
16417: NEG
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: LD_INT 2
16428: NEG
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: LD_INT 1
16439: NEG
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 2
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: NEG
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 2
16508: NEG
16509: PUSH
16510: LD_INT 0
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: NEG
16520: PUSH
16521: LD_INT 1
16523: NEG
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 2
16531: NEG
16532: PUSH
16533: LD_INT 2
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16562: LD_ADDR_VAR 0 18
16566: PUSH
16567: LD_INT 0
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 0
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 1
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 0
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 1
16620: NEG
16621: PUSH
16622: LD_INT 0
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 1
16631: NEG
16632: PUSH
16633: LD_INT 1
16635: NEG
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: NEG
16644: PUSH
16645: LD_INT 2
16647: NEG
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 0
16655: PUSH
16656: LD_INT 2
16658: NEG
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 1
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 2
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 2
16738: NEG
16739: PUSH
16740: LD_INT 0
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 2
16749: NEG
16750: PUSH
16751: LD_INT 1
16753: NEG
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 2
16761: NEG
16762: PUSH
16763: LD_INT 2
16765: NEG
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16792: LD_ADDR_VAR 0 19
16796: PUSH
16797: LD_INT 0
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 0
16809: PUSH
16810: LD_INT 1
16812: NEG
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 1
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 0
16840: PUSH
16841: LD_INT 1
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: NEG
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 1
16873: NEG
16874: PUSH
16875: LD_INT 2
16877: NEG
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 0
16885: PUSH
16886: LD_INT 2
16888: NEG
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 1
16899: NEG
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: LD_INT 0
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: LD_INT 1
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: LD_INT 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: NEG
16958: PUSH
16959: LD_INT 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 2
16968: NEG
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: NEG
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: NEG
16992: PUSH
16993: LD_INT 2
16995: NEG
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17022: LD_ADDR_VAR 0 20
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 1
17042: NEG
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: LD_INT 0
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: NEG
17081: PUSH
17082: LD_INT 0
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 1
17091: NEG
17092: PUSH
17093: LD_INT 1
17095: NEG
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: NEG
17104: PUSH
17105: LD_INT 2
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: LD_INT 2
17118: NEG
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: LD_INT 0
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 1
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: NEG
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 2
17198: NEG
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 2
17209: NEG
17210: PUSH
17211: LD_INT 1
17213: NEG
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: NEG
17222: PUSH
17223: LD_INT 2
17225: NEG
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17252: LD_ADDR_VAR 0 21
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 1
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: NEG
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 1
17321: NEG
17322: PUSH
17323: LD_INT 1
17325: NEG
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 1
17333: NEG
17334: PUSH
17335: LD_INT 2
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 2
17348: NEG
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: LD_INT 1
17359: NEG
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: LD_INT 1
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 2
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 1
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: LD_INT 1
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 2
17428: NEG
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: NEG
17440: PUSH
17441: LD_INT 1
17443: NEG
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 2
17451: NEG
17452: PUSH
17453: LD_INT 2
17455: NEG
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17482: LD_ADDR_VAR 0 22
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: LD_INT 0
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 1
17551: NEG
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: LD_INT 2
17567: NEG
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: LD_INT 2
17578: NEG
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: NEG
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 2
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: LD_INT 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: NEG
17648: PUSH
17649: LD_INT 1
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: NEG
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: NEG
17670: PUSH
17671: LD_INT 1
17673: NEG
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: NEG
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17712: LD_ADDR_VAR 0 23
17716: PUSH
17717: LD_INT 0
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 1
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: PUSH
17741: LD_INT 0
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: NEG
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: NEG
17794: PUSH
17795: LD_INT 2
17797: NEG
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 2
17808: NEG
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 2
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 2
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 2
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 2
17915: NEG
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 2
17923: NEG
17924: PUSH
17925: LD_INT 3
17927: NEG
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 1
17935: NEG
17936: PUSH
17937: LD_INT 3
17939: NEG
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: LD_INT 2
17950: NEG
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 1
17961: NEG
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17992: LD_ADDR_VAR 0 24
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: LD_INT 1
18012: NEG
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: NEG
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: LD_INT 2
18077: NEG
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: LD_INT 2
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 1
18157: NEG
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 2
18168: NEG
18169: PUSH
18170: LD_INT 0
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: NEG
18180: PUSH
18181: LD_INT 1
18183: NEG
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 2
18191: NEG
18192: PUSH
18193: LD_INT 2
18195: NEG
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 3
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: LD_INT 2
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18268: LD_ADDR_VAR 0 25
18272: PUSH
18273: LD_INT 0
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 1
18326: NEG
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: LD_INT 2
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: NEG
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: LD_INT 2
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 3
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: LD_INT 3
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18542: LD_ADDR_VAR 0 26
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: LD_INT 1
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 1
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: NEG
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 2
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: LD_INT 2
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 1
18649: NEG
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: LD_INT 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: LD_INT 2
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: NEG
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: NEG
18719: PUSH
18720: LD_INT 0
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 2
18729: NEG
18730: PUSH
18731: LD_INT 1
18733: NEG
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: LD_INT 2
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: LD_INT 3
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18818: LD_ADDR_VAR 0 27
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 0
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: NEG
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: LD_INT 2
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: LD_INT 2
18914: NEG
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 1
18925: NEG
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: NEG
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 2
18994: NEG
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: NEG
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 1
19029: NEG
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 3
19051: NEG
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 3
19063: NEG
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19098: LD_ADDR_VAR 0 28
19102: PUSH
19103: LD_INT 0
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 1
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: LD_INT 0
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: NEG
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 2
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 0
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: NEG
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 3
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: LD_INT 3
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 3
19333: NEG
19334: PUSH
19335: LD_INT 1
19337: NEG
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 3
19345: NEG
19346: PUSH
19347: LD_INT 2
19349: NEG
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19380: LD_ADDR_VAR 0 29
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 0
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: NEG
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: LD_INT 2
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: NEG
19571: PUSH
19572: LD_INT 3
19574: NEG
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 2
19582: PUSH
19583: LD_INT 1
19585: NEG
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 1
19603: PUSH
19604: LD_INT 3
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 1
19613: NEG
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 3
19624: NEG
19625: PUSH
19626: LD_INT 2
19628: NEG
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19659: LD_ADDR_VAR 0 30
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: PUSH
19775: LD_INT 0
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 2
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 1
19814: NEG
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: NEG
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: LD_INT 1
19840: NEG
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 3
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 2
19863: NEG
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 3
19902: NEG
19903: PUSH
19904: LD_INT 1
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19937: LD_ADDR_VAR 0 31
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 1
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 1
20006: NEG
20007: PUSH
20008: LD_INT 1
20010: NEG
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: LD_INT 2
20022: NEG
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: LD_INT 1
20033: NEG
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 2
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: LD_INT 2
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: LD_INT 1
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 2
20102: NEG
20103: PUSH
20104: LD_INT 1
20106: NEG
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: LD_INT 2
20118: NEG
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: LD_INT 3
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 1
20141: NEG
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 3
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 2
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 3
20180: NEG
20181: PUSH
20182: LD_INT 2
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20215: LD_ADDR_VAR 0 32
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 0
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 1
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 1
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 1
20284: NEG
20285: PUSH
20286: LD_INT 1
20288: NEG
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: NEG
20297: PUSH
20298: LD_INT 2
20300: NEG
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 2
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: LD_INT 2
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: LD_INT 1
20396: NEG
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: NEG
20405: PUSH
20406: LD_INT 3
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: LD_INT 2
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 3
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: LD_INT 3
20458: NEG
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20493: LD_ADDR_VAR 0 33
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 1
20551: NEG
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 2
20607: PUSH
20608: LD_INT 1
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 2
20648: NEG
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: LD_INT 1
20663: NEG
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: LD_INT 2
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: LD_INT 3
20687: NEG
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: LD_INT 1
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 3
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 2
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 3
20737: NEG
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20772: LD_ADDR_VAR 0 34
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 2
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 1
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: NEG
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: LD_INT 3
20967: NEG
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 2
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 3
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: LD_INT 3
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 3
21017: NEG
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21052: LD_ADDR_VAR 0 35
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: LD_INT 0
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 0
21069: PUSH
21070: LD_INT 1
21072: NEG
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 2
21143: NEG
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21164: LD_ADDR_VAR 0 36
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 1
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21276: LD_ADDR_VAR 0 37
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: LD_INT 1
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 1
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21388: LD_ADDR_VAR 0 38
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: NEG
21480: PUSH
21481: LD_INT 1
21483: NEG
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21500: LD_ADDR_VAR 0 39
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 2
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: LD_INT 2
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21612: LD_ADDR_VAR 0 40
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: LD_INT 1
21632: NEG
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: NEG
21682: PUSH
21683: LD_INT 1
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: NEG
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21724: LD_ADDR_VAR 0 41
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 1
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 0
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 1
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 2
21890: NEG
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: LD_INT 2
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 3
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: LD_INT 1
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 3
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 3
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: LD_INT 3
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 3
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 3
21998: NEG
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 3
22009: NEG
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 3
22021: NEG
22022: PUSH
22023: LD_INT 2
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: NEG
22034: PUSH
22035: LD_INT 3
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22074: LD_ADDR_VAR 0 42
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 0
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 1
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 1
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: LD_INT 1
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: LD_INT 2
22159: NEG
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: LD_INT 2
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 1
22181: NEG
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: LD_INT 2
22256: NEG
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: LD_INT 3
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 3
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: PUSH
22300: LD_INT 2
22302: NEG
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 3
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 3
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: LD_INT 3
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 0
22350: PUSH
22351: LD_INT 3
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 3
22371: NEG
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 3
22383: NEG
22384: PUSH
22385: LD_INT 3
22387: NEG
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22424: LD_ADDR_VAR 0 43
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 0
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: LD_INT 1
22497: NEG
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 2
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 2
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: PUSH
22529: LD_INT 1
22531: NEG
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 1
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 2
22590: NEG
22591: PUSH
22592: LD_INT 0
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 2
22601: NEG
22602: PUSH
22603: LD_INT 1
22605: NEG
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 3
22617: NEG
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 3
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 2
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 3
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: NEG
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 3
22720: NEG
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 3
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22772: LD_ADDR_VAR 0 44
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 1
22792: NEG
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 0
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: LD_INT 3
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: LD_INT 1
22977: NEG
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 3
23015: PUSH
23016: LD_INT 3
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 3
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 3
23046: NEG
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 3
23069: NEG
23070: PUSH
23071: LD_INT 2
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 3
23081: NEG
23082: PUSH
23083: LD_INT 3
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23122: LD_ADDR_VAR 0 45
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 0
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 1
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: NEG
23301: PUSH
23302: LD_INT 2
23304: NEG
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 3
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: LD_INT 3
23328: NEG
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 3
23339: NEG
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: LD_INT 2
23350: NEG
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: PUSH
23369: LD_INT 3
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 3
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 3
23419: NEG
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 3
23431: NEG
23432: PUSH
23433: LD_INT 3
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23472: LD_ADDR_VAR 0 46
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: LD_INT 0
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: LD_INT 2
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 0
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 2
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 1
23627: NEG
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 3
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: LD_INT 3
23676: NEG
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 2
23687: NEG
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: LD_INT 1
23698: NEG
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 3
23706: PUSH
23707: LD_INT 0
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: LD_INT 3
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: NEG
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 3
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23820: LD_ADDR_VAR 0 47
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 0
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 2
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 2
23935: NEG
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23971: LD_ADDR_VAR 0 48
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24118: LD_ADDR_VAR 0 49
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 0
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 1
24176: NEG
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: NEG
24188: PUSH
24189: LD_INT 1
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 1
24202: NEG
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24262: LD_ADDR_VAR 0 50
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: LD_INT 1
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24406: LD_ADDR_VAR 0 51
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 1
24507: NEG
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: NEG
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24553: LD_ADDR_VAR 0 52
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 2
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24704: LD_ADDR_VAR 0 53
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 2
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 2
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: NEG
24892: PUSH
24893: LD_INT 1
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24934: LD_ADDR_VAR 0 54
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 1
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 0
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 2
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: LD_INT 2
25137: NEG
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25164: LD_ADDR_VAR 0 55
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 2
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 2
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 2
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: NEG
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25394: LD_ADDR_VAR 0 56
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 2
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: NEG
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25624: LD_ADDR_VAR 0 57
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: LD_INT 2
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 0
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25854: LD_ADDR_VAR 0 58
25858: PUSH
25859: LD_INT 0
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 1
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 2
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: NEG
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: LD_INT 2
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26084: LD_ADDR_VAR 0 59
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26172: LD_ADDR_VAR 0 60
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 1
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26260: LD_ADDR_VAR 0 61
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26348: LD_ADDR_VAR 0 62
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 1
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: NEG
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26436: LD_ADDR_VAR 0 63
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: NEG
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26524: LD_ADDR_VAR 0 64
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// end ; 1 :
26612: GO 32509
26614: LD_INT 1
26616: DOUBLE
26617: EQUAL
26618: IFTRUE 26622
26620: GO 29245
26622: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26623: LD_ADDR_VAR 0 11
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: LD_INT 3
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 3
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 2
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26667: LD_ADDR_VAR 0 12
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26708: LD_ADDR_VAR 0 13
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 3
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26748: LD_ADDR_VAR 0 14
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26789: LD_ADDR_VAR 0 15
26793: PUSH
26794: LD_INT 2
26796: NEG
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 3
26807: NEG
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 3
26818: NEG
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26833: LD_ADDR_VAR 0 16
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: LD_INT 3
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 3
26852: NEG
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 3
26864: NEG
26865: PUSH
26866: LD_INT 3
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26879: LD_ADDR_VAR 0 17
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: LD_INT 3
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 3
26901: NEG
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26923: LD_ADDR_VAR 0 18
26927: PUSH
26928: LD_INT 2
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26964: LD_ADDR_VAR 0 19
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 3
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27004: LD_ADDR_VAR 0 20
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 3
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27045: LD_ADDR_VAR 0 21
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 3
27063: NEG
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 3
27074: NEG
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27089: LD_ADDR_VAR 0 22
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: LD_INT 3
27100: NEG
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 3
27108: NEG
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 3
27120: NEG
27121: PUSH
27122: LD_INT 3
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27135: LD_ADDR_VAR 0 23
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 4
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 3
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27179: LD_ADDR_VAR 0 24
27183: PUSH
27184: LD_INT 3
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 3
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 4
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: LIST
27219: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27220: LD_ADDR_VAR 0 25
27224: PUSH
27225: LD_INT 3
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 4
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 3
27247: PUSH
27248: LD_INT 4
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27260: LD_ADDR_VAR 0 26
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: LD_INT 4
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 3
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27301: LD_ADDR_VAR 0 27
27305: PUSH
27306: LD_INT 3
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 4
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27345: LD_ADDR_VAR 0 28
27349: PUSH
27350: LD_INT 3
27352: NEG
27353: PUSH
27354: LD_INT 3
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 3
27364: NEG
27365: PUSH
27366: LD_INT 4
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 4
27376: NEG
27377: PUSH
27378: LD_INT 3
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27391: LD_ADDR_VAR 0 29
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 3
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 3
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 4
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 4
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: LD_INT 3
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: LD_INT 5
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: LD_INT 5
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 4
27492: NEG
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: LD_INT 6
27504: NEG
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 6
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 5
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27546: LD_ADDR_VAR 0 30
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 3
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 4
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 4
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 4
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 5
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 5
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 5
27646: PUSH
27647: LD_INT 1
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 6
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 6
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27689: LD_ADDR_VAR 0 31
27693: PUSH
27694: LD_INT 3
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: LD_INT 3
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 4
27726: PUSH
27727: LD_INT 3
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 4
27736: PUSH
27737: LD_INT 4
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 3
27746: PUSH
27747: LD_INT 4
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 5
27756: PUSH
27757: LD_INT 4
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: LD_INT 5
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 4
27776: PUSH
27777: LD_INT 5
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 6
27786: PUSH
27787: LD_INT 5
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 6
27796: PUSH
27797: LD_INT 6
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 5
27806: PUSH
27807: LD_INT 6
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27828: LD_ADDR_VAR 0 32
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 3
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 3
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 4
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 4
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 3
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 5
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 5
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 4
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 6
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 6
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 5
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27971: LD_ADDR_VAR 0 33
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 3
27989: NEG
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 3
28000: NEG
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 3
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 4
28023: NEG
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 4
28034: NEG
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 4
28046: NEG
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 5
28057: NEG
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 5
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 5
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 6
28091: NEG
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 6
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28126: LD_ADDR_VAR 0 34
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 3
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 3
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 3
28157: NEG
28158: PUSH
28159: LD_INT 3
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 3
28169: NEG
28170: PUSH
28171: LD_INT 4
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 4
28181: NEG
28182: PUSH
28183: LD_INT 3
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 4
28193: NEG
28194: PUSH
28195: LD_INT 4
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 4
28205: NEG
28206: PUSH
28207: LD_INT 5
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 5
28217: NEG
28218: PUSH
28219: LD_INT 4
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 5
28229: NEG
28230: PUSH
28231: LD_INT 5
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 5
28241: NEG
28242: PUSH
28243: LD_INT 6
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 6
28253: NEG
28254: PUSH
28255: LD_INT 5
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 6
28265: NEG
28266: PUSH
28267: LD_INT 6
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28289: LD_ADDR_VAR 0 41
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: LD_INT 3
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: LD_INT 2
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28333: LD_ADDR_VAR 0 42
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 2
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28374: LD_ADDR_VAR 0 43
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 3
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 3
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28414: LD_ADDR_VAR 0 44
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: LD_INT 3
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28455: LD_ADDR_VAR 0 45
28459: PUSH
28460: LD_INT 2
28462: NEG
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28499: LD_ADDR_VAR 0 46
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: LD_INT 3
28522: NEG
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 3
28530: NEG
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28545: LD_ADDR_VAR 0 47
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: LD_INT 3
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: LD_INT 3
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28578: LD_ADDR_VAR 0 48
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28609: LD_ADDR_VAR 0 49
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 3
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28638: LD_ADDR_VAR 0 50
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: LD_INT 3
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28667: LD_ADDR_VAR 0 51
28671: PUSH
28672: LD_INT 1
28674: NEG
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28698: LD_ADDR_VAR 0 52
28702: PUSH
28703: LD_INT 3
28705: NEG
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: NEG
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28731: LD_ADDR_VAR 0 53
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 3
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: LD_INT 3
28753: NEG
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28775: LD_ADDR_VAR 0 54
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 3
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28816: LD_ADDR_VAR 0 55
28820: PUSH
28821: LD_INT 3
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 3
28833: PUSH
28834: LD_INT 3
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28856: LD_ADDR_VAR 0 56
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28897: LD_ADDR_VAR 0 57
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28941: LD_ADDR_VAR 0 58
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: LD_INT 3
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 3
28960: NEG
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: NEG
28973: PUSH
28974: LD_INT 3
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28987: LD_ADDR_VAR 0 59
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: LD_INT 1
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29031: LD_ADDR_VAR 0 60
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29072: LD_ADDR_VAR 0 61
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29112: LD_ADDR_VAR 0 62
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 2
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: LD_INT 2
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29153: LD_ADDR_VAR 0 63
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29197: LD_ADDR_VAR 0 64
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// end ; 2 :
29243: GO 32509
29245: LD_INT 2
29247: DOUBLE
29248: EQUAL
29249: IFTRUE 29253
29251: GO 32508
29253: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29254: LD_ADDR_VAR 0 29
29258: PUSH
29259: LD_INT 4
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 4
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 5
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 5
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 3
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 3
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 5
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 3
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 3
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 4
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 4
29384: PUSH
29385: LD_INT 4
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: LD_INT 4
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: PUSH
29405: LD_INT 3
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 4
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: LD_INT 4
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 4
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 3
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: LD_INT 4
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: LD_INT 5
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: LD_INT 5
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: NEG
29495: PUSH
29496: LD_INT 4
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: LD_INT 3
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 3
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 2
29571: NEG
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 3
29582: NEG
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 4
29593: NEG
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 4
29604: NEG
29605: PUSH
29606: LD_INT 1
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 4
29616: NEG
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 2
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 4
29639: NEG
29640: PUSH
29641: LD_INT 4
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 4
29651: NEG
29652: PUSH
29653: LD_INT 5
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: LD_INT 4
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 3
29675: NEG
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 4
29687: NEG
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 5
29699: NEG
29700: PUSH
29701: LD_INT 4
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 5
29711: NEG
29712: PUSH
29713: LD_INT 5
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 3
29723: NEG
29724: PUSH
29725: LD_INT 5
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 5
29735: NEG
29736: PUSH
29737: LD_INT 3
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29792: LD_ADDR_VAR 0 30
29796: PUSH
29797: LD_INT 4
29799: PUSH
29800: LD_INT 4
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 4
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 5
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 5
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 4
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: LD_INT 4
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: LD_INT 3
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 5
29869: PUSH
29870: LD_INT 3
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: PUSH
29880: LD_INT 5
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 3
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: PUSH
29962: LD_INT 4
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: NEG
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 4
29982: NEG
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 4
29993: NEG
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 3
30005: NEG
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 3
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 4
30027: NEG
30028: PUSH
30029: LD_INT 1
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 5
30038: NEG
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 5
30049: NEG
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 5
30061: NEG
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 3
30073: NEG
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 3
30084: NEG
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: LD_INT 4
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: LD_INT 2
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 3
30132: NEG
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 4
30144: NEG
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 4
30156: NEG
30157: PUSH
30158: LD_INT 4
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 4
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 4
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: LD_INT 4
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 5
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 4
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 3
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: LD_INT 3
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 4
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 5
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: LD_INT 3
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: NEG
30283: PUSH
30284: LD_INT 5
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30339: LD_ADDR_VAR 0 31
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 4
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 4
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: LD_INT 5
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: LD_INT 5
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 3
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 3
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: NEG
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 4
30495: NEG
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 4
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 4
30541: NEG
30542: PUSH
30543: LD_INT 4
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 4
30553: NEG
30554: PUSH
30555: LD_INT 5
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: LD_INT 4
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: NEG
30578: PUSH
30579: LD_INT 3
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 4
30589: NEG
30590: PUSH
30591: LD_INT 3
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 5
30601: NEG
30602: PUSH
30603: LD_INT 4
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 5
30613: NEG
30614: PUSH
30615: LD_INT 5
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 3
30625: NEG
30626: PUSH
30627: LD_INT 5
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 5
30637: NEG
30638: PUSH
30639: LD_INT 3
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 3
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 4
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: LD_INT 3
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: LD_INT 4
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: LD_INT 4
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 4
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 5
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 5
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 4
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 5
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30889: LD_ADDR_VAR 0 32
30893: PUSH
30894: LD_INT 4
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 4
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: NEG
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 4
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 5
30952: NEG
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 5
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 5
30975: NEG
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 3
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 4
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 3
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 4
31058: NEG
31059: PUSH
31060: LD_INT 3
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 4
31070: NEG
31071: PUSH
31072: LD_INT 4
31074: NEG
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 4
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 4
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 4
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 5
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: LD_INT 4
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: LD_INT 3
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 4
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 5
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 3
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 5
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 3
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 4
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 4
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 2
31280: PUSH
31281: LD_INT 2
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 4
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 4
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 4
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 5
31321: PUSH
31322: LD_INT 4
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 5
31331: PUSH
31332: LD_INT 5
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 4
31341: PUSH
31342: LD_INT 5
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 3
31351: PUSH
31352: LD_INT 4
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 5
31371: PUSH
31372: LD_INT 3
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: PUSH
31382: LD_INT 5
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31436: LD_ADDR_VAR 0 33
31440: PUSH
31441: LD_INT 4
31443: NEG
31444: PUSH
31445: LD_INT 4
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 4
31455: NEG
31456: PUSH
31457: LD_INT 5
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: NEG
31468: PUSH
31469: LD_INT 4
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 3
31479: NEG
31480: PUSH
31481: LD_INT 3
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 5
31503: NEG
31504: PUSH
31505: LD_INT 4
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 5
31515: NEG
31516: PUSH
31517: LD_INT 5
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 3
31527: NEG
31528: PUSH
31529: LD_INT 5
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 5
31539: NEG
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: LD_INT 4
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 4
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 4
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 5
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 5
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 4
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 5
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 4
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 4
31776: PUSH
31777: LD_INT 4
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: LD_INT 4
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 4
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 4
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: LD_INT 4
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 5
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 5
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: LD_INT 4
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 5
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: NEG
31919: PUSH
31920: LD_INT 3
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31974: LD_ADDR_VAR 0 34
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 4
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 5
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 4
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 3
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 4
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 5
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 3
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 5
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 4
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: LD_INT 2
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 4
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: LD_INT 4
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 5
32196: PUSH
32197: LD_INT 4
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 4
32216: PUSH
32217: LD_INT 5
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: PUSH
32227: LD_INT 4
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: PUSH
32237: LD_INT 3
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 5
32246: PUSH
32247: LD_INT 3
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 3
32256: PUSH
32257: LD_INT 5
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: LD_INT 4
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 4
32359: NEG
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 4
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 5
32415: NEG
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: NEG
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 5
32438: NEG
32439: PUSH
32440: LD_INT 2
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// end ; end ;
32506: GO 32509
32508: POP
// case btype of b_depot , b_warehouse :
32509: LD_VAR 0 1
32513: PUSH
32514: LD_INT 0
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32528
32520: LD_INT 1
32522: DOUBLE
32523: EQUAL
32524: IFTRUE 32528
32526: GO 32729
32528: POP
// case nation of nation_american :
32529: LD_VAR 0 5
32533: PUSH
32534: LD_INT 1
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32598
32542: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32543: LD_ADDR_VAR 0 9
32547: PUSH
32548: LD_VAR 0 11
32552: PUSH
32553: LD_VAR 0 12
32557: PUSH
32558: LD_VAR 0 13
32562: PUSH
32563: LD_VAR 0 14
32567: PUSH
32568: LD_VAR 0 15
32572: PUSH
32573: LD_VAR 0 16
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: PUSH
32586: LD_VAR 0 4
32590: PUSH
32591: LD_INT 1
32593: PLUS
32594: ARRAY
32595: ST_TO_ADDR
32596: GO 32727
32598: LD_INT 2
32600: DOUBLE
32601: EQUAL
32602: IFTRUE 32606
32604: GO 32662
32606: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32607: LD_ADDR_VAR 0 9
32611: PUSH
32612: LD_VAR 0 17
32616: PUSH
32617: LD_VAR 0 18
32621: PUSH
32622: LD_VAR 0 19
32626: PUSH
32627: LD_VAR 0 20
32631: PUSH
32632: LD_VAR 0 21
32636: PUSH
32637: LD_VAR 0 22
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: PUSH
32650: LD_VAR 0 4
32654: PUSH
32655: LD_INT 1
32657: PLUS
32658: ARRAY
32659: ST_TO_ADDR
32660: GO 32727
32662: LD_INT 3
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32726
32670: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32671: LD_ADDR_VAR 0 9
32675: PUSH
32676: LD_VAR 0 23
32680: PUSH
32681: LD_VAR 0 24
32685: PUSH
32686: LD_VAR 0 25
32690: PUSH
32691: LD_VAR 0 26
32695: PUSH
32696: LD_VAR 0 27
32700: PUSH
32701: LD_VAR 0 28
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PUSH
32714: LD_VAR 0 4
32718: PUSH
32719: LD_INT 1
32721: PLUS
32722: ARRAY
32723: ST_TO_ADDR
32724: GO 32727
32726: POP
32727: GO 33282
32729: LD_INT 2
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32743
32735: LD_INT 3
32737: DOUBLE
32738: EQUAL
32739: IFTRUE 32743
32741: GO 32799
32743: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32744: LD_ADDR_VAR 0 9
32748: PUSH
32749: LD_VAR 0 29
32753: PUSH
32754: LD_VAR 0 30
32758: PUSH
32759: LD_VAR 0 31
32763: PUSH
32764: LD_VAR 0 32
32768: PUSH
32769: LD_VAR 0 33
32773: PUSH
32774: LD_VAR 0 34
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: PUSH
32787: LD_VAR 0 4
32791: PUSH
32792: LD_INT 1
32794: PLUS
32795: ARRAY
32796: ST_TO_ADDR
32797: GO 33282
32799: LD_INT 16
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32861
32805: LD_INT 17
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32861
32811: LD_INT 18
32813: DOUBLE
32814: EQUAL
32815: IFTRUE 32861
32817: LD_INT 19
32819: DOUBLE
32820: EQUAL
32821: IFTRUE 32861
32823: LD_INT 22
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32861
32829: LD_INT 20
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32861
32835: LD_INT 21
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32861
32841: LD_INT 23
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32861
32847: LD_INT 24
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32861
32853: LD_INT 25
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32917
32861: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_VAR 0 35
32871: PUSH
32872: LD_VAR 0 36
32876: PUSH
32877: LD_VAR 0 37
32881: PUSH
32882: LD_VAR 0 38
32886: PUSH
32887: LD_VAR 0 39
32891: PUSH
32892: LD_VAR 0 40
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: PUSH
32905: LD_VAR 0 4
32909: PUSH
32910: LD_INT 1
32912: PLUS
32913: ARRAY
32914: ST_TO_ADDR
32915: GO 33282
32917: LD_INT 6
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32973
32923: LD_INT 7
32925: DOUBLE
32926: EQUAL
32927: IFTRUE 32973
32929: LD_INT 8
32931: DOUBLE
32932: EQUAL
32933: IFTRUE 32973
32935: LD_INT 13
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32973
32941: LD_INT 12
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32973
32947: LD_INT 15
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32973
32953: LD_INT 11
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32973
32959: LD_INT 14
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32973
32965: LD_INT 10
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 33029
32973: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32974: LD_ADDR_VAR 0 9
32978: PUSH
32979: LD_VAR 0 41
32983: PUSH
32984: LD_VAR 0 42
32988: PUSH
32989: LD_VAR 0 43
32993: PUSH
32994: LD_VAR 0 44
32998: PUSH
32999: LD_VAR 0 45
33003: PUSH
33004: LD_VAR 0 46
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: PUSH
33017: LD_VAR 0 4
33021: PUSH
33022: LD_INT 1
33024: PLUS
33025: ARRAY
33026: ST_TO_ADDR
33027: GO 33282
33029: LD_INT 36
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33093
33037: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33038: LD_ADDR_VAR 0 9
33042: PUSH
33043: LD_VAR 0 47
33047: PUSH
33048: LD_VAR 0 48
33052: PUSH
33053: LD_VAR 0 49
33057: PUSH
33058: LD_VAR 0 50
33062: PUSH
33063: LD_VAR 0 51
33067: PUSH
33068: LD_VAR 0 52
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: PUSH
33081: LD_VAR 0 4
33085: PUSH
33086: LD_INT 1
33088: PLUS
33089: ARRAY
33090: ST_TO_ADDR
33091: GO 33282
33093: LD_INT 4
33095: DOUBLE
33096: EQUAL
33097: IFTRUE 33119
33099: LD_INT 5
33101: DOUBLE
33102: EQUAL
33103: IFTRUE 33119
33105: LD_INT 34
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33119
33111: LD_INT 37
33113: DOUBLE
33114: EQUAL
33115: IFTRUE 33119
33117: GO 33175
33119: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33120: LD_ADDR_VAR 0 9
33124: PUSH
33125: LD_VAR 0 53
33129: PUSH
33130: LD_VAR 0 54
33134: PUSH
33135: LD_VAR 0 55
33139: PUSH
33140: LD_VAR 0 56
33144: PUSH
33145: LD_VAR 0 57
33149: PUSH
33150: LD_VAR 0 58
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: PUSH
33163: LD_VAR 0 4
33167: PUSH
33168: LD_INT 1
33170: PLUS
33171: ARRAY
33172: ST_TO_ADDR
33173: GO 33282
33175: LD_INT 31
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33225
33181: LD_INT 32
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33225
33187: LD_INT 33
33189: DOUBLE
33190: EQUAL
33191: IFTRUE 33225
33193: LD_INT 27
33195: DOUBLE
33196: EQUAL
33197: IFTRUE 33225
33199: LD_INT 26
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33225
33205: LD_INT 28
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33225
33211: LD_INT 29
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33225
33217: LD_INT 30
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33281
33225: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33226: LD_ADDR_VAR 0 9
33230: PUSH
33231: LD_VAR 0 59
33235: PUSH
33236: LD_VAR 0 60
33240: PUSH
33241: LD_VAR 0 61
33245: PUSH
33246: LD_VAR 0 62
33250: PUSH
33251: LD_VAR 0 63
33255: PUSH
33256: LD_VAR 0 64
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: PUSH
33269: LD_VAR 0 4
33273: PUSH
33274: LD_INT 1
33276: PLUS
33277: ARRAY
33278: ST_TO_ADDR
33279: GO 33282
33281: POP
// temp_list2 = [ ] ;
33282: LD_ADDR_VAR 0 10
33286: PUSH
33287: EMPTY
33288: ST_TO_ADDR
// for i in temp_list do
33289: LD_ADDR_VAR 0 8
33293: PUSH
33294: LD_VAR 0 9
33298: PUSH
33299: FOR_IN
33300: IFFALSE 33352
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33302: LD_ADDR_VAR 0 10
33306: PUSH
33307: LD_VAR 0 10
33311: PUSH
33312: LD_VAR 0 8
33316: PUSH
33317: LD_INT 1
33319: ARRAY
33320: PUSH
33321: LD_VAR 0 2
33325: PLUS
33326: PUSH
33327: LD_VAR 0 8
33331: PUSH
33332: LD_INT 2
33334: ARRAY
33335: PUSH
33336: LD_VAR 0 3
33340: PLUS
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: ADD
33349: ST_TO_ADDR
33350: GO 33299
33352: POP
33353: POP
// result = temp_list2 ;
33354: LD_ADDR_VAR 0 7
33358: PUSH
33359: LD_VAR 0 10
33363: ST_TO_ADDR
// end ;
33364: LD_VAR 0 7
33368: RET
// export function EnemyInRange ( unit , dist ) ; begin
33369: LD_INT 0
33371: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33372: LD_ADDR_VAR 0 3
33376: PUSH
33377: LD_VAR 0 1
33381: PPUSH
33382: CALL_OW 255
33386: PPUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 250
33396: PPUSH
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 251
33406: PPUSH
33407: LD_VAR 0 2
33411: PPUSH
33412: CALL 6742 0 4
33416: PUSH
33417: LD_INT 4
33419: ARRAY
33420: ST_TO_ADDR
// end ;
33421: LD_VAR 0 3
33425: RET
// export function PlayerSeeMe ( unit ) ; begin
33426: LD_INT 0
33428: PPUSH
// result := See ( your_side , unit ) ;
33429: LD_ADDR_VAR 0 2
33433: PUSH
33434: LD_OWVAR 2
33438: PPUSH
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 292
33448: ST_TO_ADDR
// end ;
33449: LD_VAR 0 2
33453: RET
// export function ReverseDir ( unit ) ; begin
33454: LD_INT 0
33456: PPUSH
// if not unit then
33457: LD_VAR 0 1
33461: NOT
33462: IFFALSE 33466
// exit ;
33464: GO 33489
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33466: LD_ADDR_VAR 0 2
33470: PUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: CALL_OW 254
33480: PUSH
33481: LD_INT 3
33483: PLUS
33484: PUSH
33485: LD_INT 6
33487: MOD
33488: ST_TO_ADDR
// end ;
33489: LD_VAR 0 2
33493: RET
// export function ReverseArray ( array ) ; var i ; begin
33494: LD_INT 0
33496: PPUSH
33497: PPUSH
// if not array then
33498: LD_VAR 0 1
33502: NOT
33503: IFFALSE 33507
// exit ;
33505: GO 33562
// result := [ ] ;
33507: LD_ADDR_VAR 0 2
33511: PUSH
33512: EMPTY
33513: ST_TO_ADDR
// for i := array downto 1 do
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: DOUBLE
33520: LD_VAR 0 1
33524: INC
33525: ST_TO_ADDR
33526: LD_INT 1
33528: PUSH
33529: FOR_DOWNTO
33530: IFFALSE 33560
// result := Join ( result , array [ i ] ) ;
33532: LD_ADDR_VAR 0 2
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: LD_VAR 0 1
33546: PUSH
33547: LD_VAR 0 3
33551: ARRAY
33552: PPUSH
33553: CALL 38207 0 2
33557: ST_TO_ADDR
33558: GO 33529
33560: POP
33561: POP
// end ;
33562: LD_VAR 0 2
33566: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33567: LD_INT 0
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
33574: PPUSH
// if not unit or not hexes then
33575: LD_VAR 0 1
33579: NOT
33580: PUSH
33581: LD_VAR 0 2
33585: NOT
33586: OR
33587: IFFALSE 33591
// exit ;
33589: GO 33714
// dist := 9999 ;
33591: LD_ADDR_VAR 0 5
33595: PUSH
33596: LD_INT 9999
33598: ST_TO_ADDR
// for i = 1 to hexes do
33599: LD_ADDR_VAR 0 4
33603: PUSH
33604: DOUBLE
33605: LD_INT 1
33607: DEC
33608: ST_TO_ADDR
33609: LD_VAR 0 2
33613: PUSH
33614: FOR_TO
33615: IFFALSE 33702
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33617: LD_ADDR_VAR 0 6
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_VAR 0 4
33636: ARRAY
33637: PUSH
33638: LD_INT 1
33640: ARRAY
33641: PPUSH
33642: LD_VAR 0 2
33646: PUSH
33647: LD_VAR 0 4
33651: ARRAY
33652: PUSH
33653: LD_INT 2
33655: ARRAY
33656: PPUSH
33657: CALL_OW 297
33661: ST_TO_ADDR
// if tdist < dist then
33662: LD_VAR 0 6
33666: PUSH
33667: LD_VAR 0 5
33671: LESS
33672: IFFALSE 33700
// begin hex := hexes [ i ] ;
33674: LD_ADDR_VAR 0 8
33678: PUSH
33679: LD_VAR 0 2
33683: PUSH
33684: LD_VAR 0 4
33688: ARRAY
33689: ST_TO_ADDR
// dist := tdist ;
33690: LD_ADDR_VAR 0 5
33694: PUSH
33695: LD_VAR 0 6
33699: ST_TO_ADDR
// end ; end ;
33700: GO 33614
33702: POP
33703: POP
// result := hex ;
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_VAR 0 8
33713: ST_TO_ADDR
// end ;
33714: LD_VAR 0 3
33718: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33723: LD_VAR 0 1
33727: NOT
33728: PUSH
33729: LD_VAR 0 1
33733: PUSH
33734: LD_INT 21
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 23
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PPUSH
33758: CALL_OW 69
33762: IN
33763: NOT
33764: OR
33765: IFFALSE 33769
// exit ;
33767: GO 33816
// for i = 1 to 3 do
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: DOUBLE
33775: LD_INT 1
33777: DEC
33778: ST_TO_ADDR
33779: LD_INT 3
33781: PUSH
33782: FOR_TO
33783: IFFALSE 33814
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33785: LD_VAR 0 1
33789: PPUSH
33790: CALL_OW 250
33794: PPUSH
33795: LD_VAR 0 1
33799: PPUSH
33800: CALL_OW 251
33804: PPUSH
33805: LD_INT 1
33807: PPUSH
33808: CALL_OW 453
33812: GO 33782
33814: POP
33815: POP
// end ;
33816: LD_VAR 0 2
33820: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
// if not unit or not enemy_unit then
33829: LD_VAR 0 1
33833: NOT
33834: PUSH
33835: LD_VAR 0 2
33839: NOT
33840: OR
33841: IFFALSE 33845
// exit ;
33843: GO 34312
// if GetLives ( i ) < 250 then
33845: LD_VAR 0 4
33849: PPUSH
33850: CALL_OW 256
33854: PUSH
33855: LD_INT 250
33857: LESS
33858: IFFALSE 33871
// begin ComAutodestruct ( i ) ;
33860: LD_VAR 0 4
33864: PPUSH
33865: CALL 33719 0 1
// exit ;
33869: GO 34312
// end ; x := GetX ( enemy_unit ) ;
33871: LD_ADDR_VAR 0 7
33875: PUSH
33876: LD_VAR 0 2
33880: PPUSH
33881: CALL_OW 250
33885: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33886: LD_ADDR_VAR 0 8
33890: PUSH
33891: LD_VAR 0 2
33895: PPUSH
33896: CALL_OW 251
33900: ST_TO_ADDR
// if not x or not y then
33901: LD_VAR 0 7
33905: NOT
33906: PUSH
33907: LD_VAR 0 8
33911: NOT
33912: OR
33913: IFFALSE 33917
// exit ;
33915: GO 34312
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33917: LD_ADDR_VAR 0 6
33921: PUSH
33922: LD_VAR 0 7
33926: PPUSH
33927: LD_INT 0
33929: PPUSH
33930: LD_INT 4
33932: PPUSH
33933: CALL_OW 272
33937: PUSH
33938: LD_VAR 0 8
33942: PPUSH
33943: LD_INT 0
33945: PPUSH
33946: LD_INT 4
33948: PPUSH
33949: CALL_OW 273
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_VAR 0 7
33962: PPUSH
33963: LD_INT 1
33965: PPUSH
33966: LD_INT 4
33968: PPUSH
33969: CALL_OW 272
33973: PUSH
33974: LD_VAR 0 8
33978: PPUSH
33979: LD_INT 1
33981: PPUSH
33982: LD_INT 4
33984: PPUSH
33985: CALL_OW 273
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_VAR 0 7
33998: PPUSH
33999: LD_INT 2
34001: PPUSH
34002: LD_INT 4
34004: PPUSH
34005: CALL_OW 272
34009: PUSH
34010: LD_VAR 0 8
34014: PPUSH
34015: LD_INT 2
34017: PPUSH
34018: LD_INT 4
34020: PPUSH
34021: CALL_OW 273
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_VAR 0 7
34034: PPUSH
34035: LD_INT 3
34037: PPUSH
34038: LD_INT 4
34040: PPUSH
34041: CALL_OW 272
34045: PUSH
34046: LD_VAR 0 8
34050: PPUSH
34051: LD_INT 3
34053: PPUSH
34054: LD_INT 4
34056: PPUSH
34057: CALL_OW 273
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_VAR 0 7
34070: PPUSH
34071: LD_INT 4
34073: PPUSH
34074: LD_INT 4
34076: PPUSH
34077: CALL_OW 272
34081: PUSH
34082: LD_VAR 0 8
34086: PPUSH
34087: LD_INT 4
34089: PPUSH
34090: LD_INT 4
34092: PPUSH
34093: CALL_OW 273
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_VAR 0 7
34106: PPUSH
34107: LD_INT 5
34109: PPUSH
34110: LD_INT 4
34112: PPUSH
34113: CALL_OW 272
34117: PUSH
34118: LD_VAR 0 8
34122: PPUSH
34123: LD_INT 5
34125: PPUSH
34126: LD_INT 4
34128: PPUSH
34129: CALL_OW 273
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
// for i = tmp downto 1 do
34146: LD_ADDR_VAR 0 4
34150: PUSH
34151: DOUBLE
34152: LD_VAR 0 6
34156: INC
34157: ST_TO_ADDR
34158: LD_INT 1
34160: PUSH
34161: FOR_DOWNTO
34162: IFFALSE 34263
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34164: LD_VAR 0 6
34168: PUSH
34169: LD_VAR 0 4
34173: ARRAY
34174: PUSH
34175: LD_INT 1
34177: ARRAY
34178: PPUSH
34179: LD_VAR 0 6
34183: PUSH
34184: LD_VAR 0 4
34188: ARRAY
34189: PUSH
34190: LD_INT 2
34192: ARRAY
34193: PPUSH
34194: CALL_OW 488
34198: NOT
34199: PUSH
34200: LD_VAR 0 6
34204: PUSH
34205: LD_VAR 0 4
34209: ARRAY
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: PPUSH
34215: LD_VAR 0 6
34219: PUSH
34220: LD_VAR 0 4
34224: ARRAY
34225: PUSH
34226: LD_INT 2
34228: ARRAY
34229: PPUSH
34230: CALL_OW 428
34234: PUSH
34235: LD_INT 0
34237: NONEQUAL
34238: OR
34239: IFFALSE 34261
// tmp := Delete ( tmp , i ) ;
34241: LD_ADDR_VAR 0 6
34245: PUSH
34246: LD_VAR 0 6
34250: PPUSH
34251: LD_VAR 0 4
34255: PPUSH
34256: CALL_OW 3
34260: ST_TO_ADDR
34261: GO 34161
34263: POP
34264: POP
// j := GetClosestHex ( unit , tmp ) ;
34265: LD_ADDR_VAR 0 5
34269: PUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: LD_VAR 0 6
34279: PPUSH
34280: CALL 33567 0 2
34284: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34285: LD_VAR 0 1
34289: PPUSH
34290: LD_VAR 0 5
34294: PUSH
34295: LD_INT 1
34297: ARRAY
34298: PPUSH
34299: LD_VAR 0 5
34303: PUSH
34304: LD_INT 2
34306: ARRAY
34307: PPUSH
34308: CALL_OW 111
// end ;
34312: LD_VAR 0 3
34316: RET
// export function PrepareApemanSoldier ( ) ; begin
34317: LD_INT 0
34319: PPUSH
// uc_nation := 0 ;
34320: LD_ADDR_OWVAR 21
34324: PUSH
34325: LD_INT 0
34327: ST_TO_ADDR
// hc_sex := sex_male ;
34328: LD_ADDR_OWVAR 27
34332: PUSH
34333: LD_INT 1
34335: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34336: LD_ADDR_OWVAR 28
34340: PUSH
34341: LD_INT 15
34343: ST_TO_ADDR
// hc_gallery :=  ;
34344: LD_ADDR_OWVAR 33
34348: PUSH
34349: LD_STRING 
34351: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34352: LD_ADDR_OWVAR 31
34356: PUSH
34357: LD_INT 0
34359: PPUSH
34360: LD_INT 3
34362: PPUSH
34363: CALL_OW 12
34367: PUSH
34368: LD_INT 0
34370: PPUSH
34371: LD_INT 3
34373: PPUSH
34374: CALL_OW 12
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// end ;
34391: LD_VAR 0 1
34395: RET
// export function PrepareApemanEngineer ( ) ; begin
34396: LD_INT 0
34398: PPUSH
// uc_nation := 0 ;
34399: LD_ADDR_OWVAR 21
34403: PUSH
34404: LD_INT 0
34406: ST_TO_ADDR
// hc_sex := sex_male ;
34407: LD_ADDR_OWVAR 27
34411: PUSH
34412: LD_INT 1
34414: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34415: LD_ADDR_OWVAR 28
34419: PUSH
34420: LD_INT 16
34422: ST_TO_ADDR
// hc_gallery :=  ;
34423: LD_ADDR_OWVAR 33
34427: PUSH
34428: LD_STRING 
34430: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34431: LD_ADDR_OWVAR 31
34435: PUSH
34436: LD_INT 0
34438: PPUSH
34439: LD_INT 3
34441: PPUSH
34442: CALL_OW 12
34446: PUSH
34447: LD_INT 0
34449: PPUSH
34450: LD_INT 3
34452: PPUSH
34453: CALL_OW 12
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: ST_TO_ADDR
// end ;
34470: LD_VAR 0 1
34474: RET
// export function PrepareApeman ( agressivity ) ; begin
34475: LD_INT 0
34477: PPUSH
// uc_side := 0 ;
34478: LD_ADDR_OWVAR 20
34482: PUSH
34483: LD_INT 0
34485: ST_TO_ADDR
// uc_nation := 0 ;
34486: LD_ADDR_OWVAR 21
34490: PUSH
34491: LD_INT 0
34493: ST_TO_ADDR
// hc_sex := sex_male ;
34494: LD_ADDR_OWVAR 27
34498: PUSH
34499: LD_INT 1
34501: ST_TO_ADDR
// hc_class := class_apeman ;
34502: LD_ADDR_OWVAR 28
34506: PUSH
34507: LD_INT 12
34509: ST_TO_ADDR
// hc_gallery :=  ;
34510: LD_ADDR_OWVAR 33
34514: PUSH
34515: LD_STRING 
34517: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34518: LD_ADDR_OWVAR 35
34522: PUSH
34523: LD_VAR 0 1
34527: NEG
34528: PPUSH
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL_OW 12
34538: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34539: LD_ADDR_OWVAR 31
34543: PUSH
34544: LD_INT 0
34546: PPUSH
34547: LD_INT 3
34549: PPUSH
34550: CALL_OW 12
34554: PUSH
34555: LD_INT 0
34557: PPUSH
34558: LD_INT 3
34560: PPUSH
34561: CALL_OW 12
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// end ;
34578: LD_VAR 0 2
34582: RET
// export function PrepareTiger ( agressivity ) ; begin
34583: LD_INT 0
34585: PPUSH
// uc_side := 0 ;
34586: LD_ADDR_OWVAR 20
34590: PUSH
34591: LD_INT 0
34593: ST_TO_ADDR
// uc_nation := 0 ;
34594: LD_ADDR_OWVAR 21
34598: PUSH
34599: LD_INT 0
34601: ST_TO_ADDR
// hc_class := class_tiger ;
34602: LD_ADDR_OWVAR 28
34606: PUSH
34607: LD_INT 14
34609: ST_TO_ADDR
// hc_gallery :=  ;
34610: LD_ADDR_OWVAR 33
34614: PUSH
34615: LD_STRING 
34617: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34618: LD_ADDR_OWVAR 35
34622: PUSH
34623: LD_VAR 0 1
34627: NEG
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 12
34638: ST_TO_ADDR
// end ;
34639: LD_VAR 0 2
34643: RET
// export function PrepareEnchidna ( ) ; begin
34644: LD_INT 0
34646: PPUSH
// uc_side := 0 ;
34647: LD_ADDR_OWVAR 20
34651: PUSH
34652: LD_INT 0
34654: ST_TO_ADDR
// uc_nation := 0 ;
34655: LD_ADDR_OWVAR 21
34659: PUSH
34660: LD_INT 0
34662: ST_TO_ADDR
// hc_class := class_baggie ;
34663: LD_ADDR_OWVAR 28
34667: PUSH
34668: LD_INT 13
34670: ST_TO_ADDR
// hc_gallery :=  ;
34671: LD_ADDR_OWVAR 33
34675: PUSH
34676: LD_STRING 
34678: ST_TO_ADDR
// end ;
34679: LD_VAR 0 1
34683: RET
// export function PrepareFrog ( ) ; begin
34684: LD_INT 0
34686: PPUSH
// uc_side := 0 ;
34687: LD_ADDR_OWVAR 20
34691: PUSH
34692: LD_INT 0
34694: ST_TO_ADDR
// uc_nation := 0 ;
34695: LD_ADDR_OWVAR 21
34699: PUSH
34700: LD_INT 0
34702: ST_TO_ADDR
// hc_class := class_frog ;
34703: LD_ADDR_OWVAR 28
34707: PUSH
34708: LD_INT 19
34710: ST_TO_ADDR
// hc_gallery :=  ;
34711: LD_ADDR_OWVAR 33
34715: PUSH
34716: LD_STRING 
34718: ST_TO_ADDR
// end ;
34719: LD_VAR 0 1
34723: RET
// export function PrepareFish ( ) ; begin
34724: LD_INT 0
34726: PPUSH
// uc_side := 0 ;
34727: LD_ADDR_OWVAR 20
34731: PUSH
34732: LD_INT 0
34734: ST_TO_ADDR
// uc_nation := 0 ;
34735: LD_ADDR_OWVAR 21
34739: PUSH
34740: LD_INT 0
34742: ST_TO_ADDR
// hc_class := class_fish ;
34743: LD_ADDR_OWVAR 28
34747: PUSH
34748: LD_INT 20
34750: ST_TO_ADDR
// hc_gallery :=  ;
34751: LD_ADDR_OWVAR 33
34755: PUSH
34756: LD_STRING 
34758: ST_TO_ADDR
// end ;
34759: LD_VAR 0 1
34763: RET
// export function PrepareBird ( ) ; begin
34764: LD_INT 0
34766: PPUSH
// uc_side := 0 ;
34767: LD_ADDR_OWVAR 20
34771: PUSH
34772: LD_INT 0
34774: ST_TO_ADDR
// uc_nation := 0 ;
34775: LD_ADDR_OWVAR 21
34779: PUSH
34780: LD_INT 0
34782: ST_TO_ADDR
// hc_class := class_phororhacos ;
34783: LD_ADDR_OWVAR 28
34787: PUSH
34788: LD_INT 18
34790: ST_TO_ADDR
// hc_gallery :=  ;
34791: LD_ADDR_OWVAR 33
34795: PUSH
34796: LD_STRING 
34798: ST_TO_ADDR
// end ;
34799: LD_VAR 0 1
34803: RET
// export function PrepareHorse ( ) ; begin
34804: LD_INT 0
34806: PPUSH
// uc_side := 0 ;
34807: LD_ADDR_OWVAR 20
34811: PUSH
34812: LD_INT 0
34814: ST_TO_ADDR
// uc_nation := 0 ;
34815: LD_ADDR_OWVAR 21
34819: PUSH
34820: LD_INT 0
34822: ST_TO_ADDR
// hc_class := class_horse ;
34823: LD_ADDR_OWVAR 28
34827: PUSH
34828: LD_INT 21
34830: ST_TO_ADDR
// hc_gallery :=  ;
34831: LD_ADDR_OWVAR 33
34835: PUSH
34836: LD_STRING 
34838: ST_TO_ADDR
// end ;
34839: LD_VAR 0 1
34843: RET
// export function PrepareMastodont ( ) ; begin
34844: LD_INT 0
34846: PPUSH
// uc_side := 0 ;
34847: LD_ADDR_OWVAR 20
34851: PUSH
34852: LD_INT 0
34854: ST_TO_ADDR
// uc_nation := 0 ;
34855: LD_ADDR_OWVAR 21
34859: PUSH
34860: LD_INT 0
34862: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34863: LD_ADDR_OWVAR 37
34867: PUSH
34868: LD_INT 31
34870: ST_TO_ADDR
// vc_control := control_rider ;
34871: LD_ADDR_OWVAR 38
34875: PUSH
34876: LD_INT 4
34878: ST_TO_ADDR
// end ;
34879: LD_VAR 0 1
34883: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34884: LD_INT 0
34886: PPUSH
34887: PPUSH
34888: PPUSH
// uc_side = 0 ;
34889: LD_ADDR_OWVAR 20
34893: PUSH
34894: LD_INT 0
34896: ST_TO_ADDR
// uc_nation = 0 ;
34897: LD_ADDR_OWVAR 21
34901: PUSH
34902: LD_INT 0
34904: ST_TO_ADDR
// InitHc_All ( ) ;
34905: CALL_OW 584
// InitVc ;
34909: CALL_OW 20
// if mastodonts then
34913: LD_VAR 0 6
34917: IFFALSE 34984
// for i = 1 to mastodonts do
34919: LD_ADDR_VAR 0 11
34923: PUSH
34924: DOUBLE
34925: LD_INT 1
34927: DEC
34928: ST_TO_ADDR
34929: LD_VAR 0 6
34933: PUSH
34934: FOR_TO
34935: IFFALSE 34982
// begin vc_chassis := 31 ;
34937: LD_ADDR_OWVAR 37
34941: PUSH
34942: LD_INT 31
34944: ST_TO_ADDR
// vc_control := control_rider ;
34945: LD_ADDR_OWVAR 38
34949: PUSH
34950: LD_INT 4
34952: ST_TO_ADDR
// animal := CreateVehicle ;
34953: LD_ADDR_VAR 0 12
34957: PUSH
34958: CALL_OW 45
34962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34963: LD_VAR 0 12
34967: PPUSH
34968: LD_VAR 0 8
34972: PPUSH
34973: LD_INT 0
34975: PPUSH
34976: CALL 37112 0 3
// end ;
34980: GO 34934
34982: POP
34983: POP
// if horses then
34984: LD_VAR 0 5
34988: IFFALSE 35055
// for i = 1 to horses do
34990: LD_ADDR_VAR 0 11
34994: PUSH
34995: DOUBLE
34996: LD_INT 1
34998: DEC
34999: ST_TO_ADDR
35000: LD_VAR 0 5
35004: PUSH
35005: FOR_TO
35006: IFFALSE 35053
// begin hc_class := 21 ;
35008: LD_ADDR_OWVAR 28
35012: PUSH
35013: LD_INT 21
35015: ST_TO_ADDR
// hc_gallery :=  ;
35016: LD_ADDR_OWVAR 33
35020: PUSH
35021: LD_STRING 
35023: ST_TO_ADDR
// animal := CreateHuman ;
35024: LD_ADDR_VAR 0 12
35028: PUSH
35029: CALL_OW 44
35033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35034: LD_VAR 0 12
35038: PPUSH
35039: LD_VAR 0 8
35043: PPUSH
35044: LD_INT 0
35046: PPUSH
35047: CALL 37112 0 3
// end ;
35051: GO 35005
35053: POP
35054: POP
// if birds then
35055: LD_VAR 0 1
35059: IFFALSE 35126
// for i = 1 to birds do
35061: LD_ADDR_VAR 0 11
35065: PUSH
35066: DOUBLE
35067: LD_INT 1
35069: DEC
35070: ST_TO_ADDR
35071: LD_VAR 0 1
35075: PUSH
35076: FOR_TO
35077: IFFALSE 35124
// begin hc_class := 18 ;
35079: LD_ADDR_OWVAR 28
35083: PUSH
35084: LD_INT 18
35086: ST_TO_ADDR
// hc_gallery =  ;
35087: LD_ADDR_OWVAR 33
35091: PUSH
35092: LD_STRING 
35094: ST_TO_ADDR
// animal := CreateHuman ;
35095: LD_ADDR_VAR 0 12
35099: PUSH
35100: CALL_OW 44
35104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35105: LD_VAR 0 12
35109: PPUSH
35110: LD_VAR 0 8
35114: PPUSH
35115: LD_INT 0
35117: PPUSH
35118: CALL 37112 0 3
// end ;
35122: GO 35076
35124: POP
35125: POP
// if tigers then
35126: LD_VAR 0 2
35130: IFFALSE 35214
// for i = 1 to tigers do
35132: LD_ADDR_VAR 0 11
35136: PUSH
35137: DOUBLE
35138: LD_INT 1
35140: DEC
35141: ST_TO_ADDR
35142: LD_VAR 0 2
35146: PUSH
35147: FOR_TO
35148: IFFALSE 35212
// begin hc_class = class_tiger ;
35150: LD_ADDR_OWVAR 28
35154: PUSH
35155: LD_INT 14
35157: ST_TO_ADDR
// hc_gallery =  ;
35158: LD_ADDR_OWVAR 33
35162: PUSH
35163: LD_STRING 
35165: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35166: LD_ADDR_OWVAR 35
35170: PUSH
35171: LD_INT 7
35173: NEG
35174: PPUSH
35175: LD_INT 7
35177: PPUSH
35178: CALL_OW 12
35182: ST_TO_ADDR
// animal := CreateHuman ;
35183: LD_ADDR_VAR 0 12
35187: PUSH
35188: CALL_OW 44
35192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35193: LD_VAR 0 12
35197: PPUSH
35198: LD_VAR 0 8
35202: PPUSH
35203: LD_INT 0
35205: PPUSH
35206: CALL 37112 0 3
// end ;
35210: GO 35147
35212: POP
35213: POP
// if apemans then
35214: LD_VAR 0 3
35218: IFFALSE 35341
// for i = 1 to apemans do
35220: LD_ADDR_VAR 0 11
35224: PUSH
35225: DOUBLE
35226: LD_INT 1
35228: DEC
35229: ST_TO_ADDR
35230: LD_VAR 0 3
35234: PUSH
35235: FOR_TO
35236: IFFALSE 35339
// begin hc_class = class_apeman ;
35238: LD_ADDR_OWVAR 28
35242: PUSH
35243: LD_INT 12
35245: ST_TO_ADDR
// hc_gallery =  ;
35246: LD_ADDR_OWVAR 33
35250: PUSH
35251: LD_STRING 
35253: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35254: LD_ADDR_OWVAR 35
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PPUSH
35263: LD_INT 2
35265: PPUSH
35266: CALL_OW 12
35270: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35271: LD_ADDR_OWVAR 31
35275: PUSH
35276: LD_INT 1
35278: PPUSH
35279: LD_INT 3
35281: PPUSH
35282: CALL_OW 12
35286: PUSH
35287: LD_INT 1
35289: PPUSH
35290: LD_INT 3
35292: PPUSH
35293: CALL_OW 12
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
// animal := CreateHuman ;
35310: LD_ADDR_VAR 0 12
35314: PUSH
35315: CALL_OW 44
35319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35320: LD_VAR 0 12
35324: PPUSH
35325: LD_VAR 0 8
35329: PPUSH
35330: LD_INT 0
35332: PPUSH
35333: CALL 37112 0 3
// end ;
35337: GO 35235
35339: POP
35340: POP
// if enchidnas then
35341: LD_VAR 0 4
35345: IFFALSE 35412
// for i = 1 to enchidnas do
35347: LD_ADDR_VAR 0 11
35351: PUSH
35352: DOUBLE
35353: LD_INT 1
35355: DEC
35356: ST_TO_ADDR
35357: LD_VAR 0 4
35361: PUSH
35362: FOR_TO
35363: IFFALSE 35410
// begin hc_class = 13 ;
35365: LD_ADDR_OWVAR 28
35369: PUSH
35370: LD_INT 13
35372: ST_TO_ADDR
// hc_gallery =  ;
35373: LD_ADDR_OWVAR 33
35377: PUSH
35378: LD_STRING 
35380: ST_TO_ADDR
// animal := CreateHuman ;
35381: LD_ADDR_VAR 0 12
35385: PUSH
35386: CALL_OW 44
35390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35391: LD_VAR 0 12
35395: PPUSH
35396: LD_VAR 0 8
35400: PPUSH
35401: LD_INT 0
35403: PPUSH
35404: CALL 37112 0 3
// end ;
35408: GO 35362
35410: POP
35411: POP
// if fishes then
35412: LD_VAR 0 7
35416: IFFALSE 35483
// for i = 1 to fishes do
35418: LD_ADDR_VAR 0 11
35422: PUSH
35423: DOUBLE
35424: LD_INT 1
35426: DEC
35427: ST_TO_ADDR
35428: LD_VAR 0 7
35432: PUSH
35433: FOR_TO
35434: IFFALSE 35481
// begin hc_class = 20 ;
35436: LD_ADDR_OWVAR 28
35440: PUSH
35441: LD_INT 20
35443: ST_TO_ADDR
// hc_gallery =  ;
35444: LD_ADDR_OWVAR 33
35448: PUSH
35449: LD_STRING 
35451: ST_TO_ADDR
// animal := CreateHuman ;
35452: LD_ADDR_VAR 0 12
35456: PUSH
35457: CALL_OW 44
35461: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35462: LD_VAR 0 12
35466: PPUSH
35467: LD_VAR 0 9
35471: PPUSH
35472: LD_INT 0
35474: PPUSH
35475: CALL 37112 0 3
// end ;
35479: GO 35433
35481: POP
35482: POP
// end ;
35483: LD_VAR 0 10
35487: RET
// export function WantHeal ( sci , unit ) ; begin
35488: LD_INT 0
35490: PPUSH
// if GetTaskList ( sci ) > 0 then
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 437
35500: PUSH
35501: LD_INT 0
35503: GREATER
35504: IFFALSE 35574
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 437
35515: PUSH
35516: LD_INT 1
35518: ARRAY
35519: PUSH
35520: LD_INT 1
35522: ARRAY
35523: PUSH
35524: LD_STRING l
35526: EQUAL
35527: PUSH
35528: LD_VAR 0 1
35532: PPUSH
35533: CALL_OW 437
35537: PUSH
35538: LD_INT 1
35540: ARRAY
35541: PUSH
35542: LD_INT 4
35544: ARRAY
35545: PUSH
35546: LD_VAR 0 2
35550: EQUAL
35551: AND
35552: IFFALSE 35564
// result := true else
35554: LD_ADDR_VAR 0 3
35558: PUSH
35559: LD_INT 1
35561: ST_TO_ADDR
35562: GO 35572
// result := false ;
35564: LD_ADDR_VAR 0 3
35568: PUSH
35569: LD_INT 0
35571: ST_TO_ADDR
// end else
35572: GO 35582
// result := false ;
35574: LD_ADDR_VAR 0 3
35578: PUSH
35579: LD_INT 0
35581: ST_TO_ADDR
// end ;
35582: LD_VAR 0 3
35586: RET
// export function HealTarget ( sci ) ; begin
35587: LD_INT 0
35589: PPUSH
// if not sci then
35590: LD_VAR 0 1
35594: NOT
35595: IFFALSE 35599
// exit ;
35597: GO 35664
// result := 0 ;
35599: LD_ADDR_VAR 0 2
35603: PUSH
35604: LD_INT 0
35606: ST_TO_ADDR
// if GetTaskList ( sci ) then
35607: LD_VAR 0 1
35611: PPUSH
35612: CALL_OW 437
35616: IFFALSE 35664
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35618: LD_VAR 0 1
35622: PPUSH
35623: CALL_OW 437
35627: PUSH
35628: LD_INT 1
35630: ARRAY
35631: PUSH
35632: LD_INT 1
35634: ARRAY
35635: PUSH
35636: LD_STRING l
35638: EQUAL
35639: IFFALSE 35664
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35641: LD_ADDR_VAR 0 2
35645: PUSH
35646: LD_VAR 0 1
35650: PPUSH
35651: CALL_OW 437
35655: PUSH
35656: LD_INT 1
35658: ARRAY
35659: PUSH
35660: LD_INT 4
35662: ARRAY
35663: ST_TO_ADDR
// end ;
35664: LD_VAR 0 2
35668: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35669: LD_INT 0
35671: PPUSH
35672: PPUSH
35673: PPUSH
35674: PPUSH
// if not base_units then
35675: LD_VAR 0 1
35679: NOT
35680: IFFALSE 35684
// exit ;
35682: GO 35771
// result := false ;
35684: LD_ADDR_VAR 0 2
35688: PUSH
35689: LD_INT 0
35691: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35692: LD_ADDR_VAR 0 5
35696: PUSH
35697: LD_VAR 0 1
35701: PPUSH
35702: LD_INT 21
35704: PUSH
35705: LD_INT 3
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PPUSH
35712: CALL_OW 72
35716: ST_TO_ADDR
// if not tmp then
35717: LD_VAR 0 5
35721: NOT
35722: IFFALSE 35726
// exit ;
35724: GO 35771
// for i in tmp do
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: LD_VAR 0 5
35735: PUSH
35736: FOR_IN
35737: IFFALSE 35769
// begin result := EnemyInRange ( i , 22 ) ;
35739: LD_ADDR_VAR 0 2
35743: PUSH
35744: LD_VAR 0 3
35748: PPUSH
35749: LD_INT 22
35751: PPUSH
35752: CALL 33369 0 2
35756: ST_TO_ADDR
// if result then
35757: LD_VAR 0 2
35761: IFFALSE 35767
// exit ;
35763: POP
35764: POP
35765: GO 35771
// end ;
35767: GO 35736
35769: POP
35770: POP
// end ;
35771: LD_VAR 0 2
35775: RET
// export function FilterByTag ( units , tag ) ; begin
35776: LD_INT 0
35778: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35779: LD_ADDR_VAR 0 3
35783: PUSH
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_INT 120
35791: PUSH
35792: LD_VAR 0 2
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PPUSH
35801: CALL_OW 72
35805: ST_TO_ADDR
// end ;
35806: LD_VAR 0 3
35810: RET
// export function IsDriver ( un ) ; begin
35811: LD_INT 0
35813: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35814: LD_ADDR_VAR 0 2
35818: PUSH
35819: LD_VAR 0 1
35823: PUSH
35824: LD_INT 55
35826: PUSH
35827: EMPTY
35828: LIST
35829: PPUSH
35830: CALL_OW 69
35834: IN
35835: ST_TO_ADDR
// end ;
35836: LD_VAR 0 2
35840: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35841: LD_INT 0
35843: PPUSH
35844: PPUSH
// list := [ ] ;
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: EMPTY
35851: ST_TO_ADDR
// case d of 0 :
35852: LD_VAR 0 3
35856: PUSH
35857: LD_INT 0
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 35998
35865: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35866: LD_ADDR_VAR 0 5
35870: PUSH
35871: LD_VAR 0 1
35875: PUSH
35876: LD_INT 4
35878: MINUS
35879: PUSH
35880: LD_VAR 0 2
35884: PUSH
35885: LD_INT 4
35887: MINUS
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: PUSH
35897: LD_VAR 0 1
35901: PUSH
35902: LD_INT 3
35904: MINUS
35905: PUSH
35906: LD_VAR 0 2
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: LIST
35918: PUSH
35919: LD_VAR 0 1
35923: PUSH
35924: LD_INT 4
35926: PLUS
35927: PUSH
35928: LD_VAR 0 2
35932: PUSH
35933: LD_INT 4
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: PUSH
35941: LD_VAR 0 1
35945: PUSH
35946: LD_INT 3
35948: PLUS
35949: PUSH
35950: LD_VAR 0 2
35954: PUSH
35955: LD_INT 3
35957: PLUS
35958: PUSH
35959: LD_INT 5
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: PUSH
35967: LD_VAR 0 1
35971: PUSH
35972: LD_VAR 0 2
35976: PUSH
35977: LD_INT 4
35979: PLUS
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// end ; 1 :
35996: GO 36696
35998: LD_INT 1
36000: DOUBLE
36001: EQUAL
36002: IFTRUE 36006
36004: GO 36139
36006: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36007: LD_ADDR_VAR 0 5
36011: PUSH
36012: LD_VAR 0 1
36016: PUSH
36017: LD_VAR 0 2
36021: PUSH
36022: LD_INT 4
36024: MINUS
36025: PUSH
36026: LD_INT 3
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: LD_VAR 0 1
36038: PUSH
36039: LD_INT 3
36041: MINUS
36042: PUSH
36043: LD_VAR 0 2
36047: PUSH
36048: LD_INT 3
36050: MINUS
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: LD_VAR 0 1
36064: PUSH
36065: LD_INT 4
36067: MINUS
36068: PUSH
36069: LD_VAR 0 2
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: LIST
36081: PUSH
36082: LD_VAR 0 1
36086: PUSH
36087: LD_VAR 0 2
36091: PUSH
36092: LD_INT 3
36094: PLUS
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: PUSH
36104: LD_VAR 0 1
36108: PUSH
36109: LD_INT 4
36111: PLUS
36112: PUSH
36113: LD_VAR 0 2
36117: PUSH
36118: LD_INT 4
36120: PLUS
36121: PUSH
36122: LD_INT 5
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: ST_TO_ADDR
// end ; 2 :
36137: GO 36696
36139: LD_INT 2
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36276
36147: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36148: LD_ADDR_VAR 0 5
36152: PUSH
36153: LD_VAR 0 1
36157: PUSH
36158: LD_VAR 0 2
36162: PUSH
36163: LD_INT 3
36165: MINUS
36166: PUSH
36167: LD_INT 3
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: LD_VAR 0 1
36179: PUSH
36180: LD_INT 4
36182: PLUS
36183: PUSH
36184: LD_VAR 0 2
36188: PUSH
36189: LD_INT 4
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: LIST
36196: PUSH
36197: LD_VAR 0 1
36201: PUSH
36202: LD_VAR 0 2
36206: PUSH
36207: LD_INT 4
36209: PLUS
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: LD_VAR 0 1
36223: PUSH
36224: LD_INT 3
36226: MINUS
36227: PUSH
36228: LD_VAR 0 2
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: PUSH
36241: LD_VAR 0 1
36245: PUSH
36246: LD_INT 4
36248: MINUS
36249: PUSH
36250: LD_VAR 0 2
36254: PUSH
36255: LD_INT 4
36257: MINUS
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// end ; 3 :
36274: GO 36696
36276: LD_INT 3
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36284
36282: GO 36417
36284: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36285: LD_ADDR_VAR 0 5
36289: PUSH
36290: LD_VAR 0 1
36294: PUSH
36295: LD_INT 3
36297: PLUS
36298: PUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_INT 4
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: LD_VAR 0 1
36316: PUSH
36317: LD_INT 4
36319: PLUS
36320: PUSH
36321: LD_VAR 0 2
36325: PUSH
36326: LD_INT 4
36328: PLUS
36329: PUSH
36330: LD_INT 5
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: PUSH
36338: LD_VAR 0 1
36342: PUSH
36343: LD_INT 4
36345: MINUS
36346: PUSH
36347: LD_VAR 0 2
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: LD_VAR 0 1
36364: PUSH
36365: LD_VAR 0 2
36369: PUSH
36370: LD_INT 4
36372: MINUS
36373: PUSH
36374: LD_INT 3
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: PUSH
36382: LD_VAR 0 1
36386: PUSH
36387: LD_INT 3
36389: MINUS
36390: PUSH
36391: LD_VAR 0 2
36395: PUSH
36396: LD_INT 3
36398: MINUS
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// end ; 4 :
36415: GO 36696
36417: LD_INT 4
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36425
36423: GO 36558
36425: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36426: LD_ADDR_VAR 0 5
36430: PUSH
36431: LD_VAR 0 1
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_INT 4
36443: PLUS
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: PUSH
36453: LD_VAR 0 1
36457: PUSH
36458: LD_INT 3
36460: PLUS
36461: PUSH
36462: LD_VAR 0 2
36466: PUSH
36467: LD_INT 3
36469: PLUS
36470: PUSH
36471: LD_INT 5
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_INT 4
36486: PLUS
36487: PUSH
36488: LD_VAR 0 2
36492: PUSH
36493: LD_INT 4
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PUSH
36501: LD_VAR 0 1
36505: PUSH
36506: LD_VAR 0 2
36510: PUSH
36511: LD_INT 3
36513: MINUS
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: PUSH
36523: LD_VAR 0 1
36527: PUSH
36528: LD_INT 4
36530: MINUS
36531: PUSH
36532: LD_VAR 0 2
36536: PUSH
36537: LD_INT 4
36539: MINUS
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// end ; 5 :
36556: GO 36696
36558: LD_INT 5
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36695
36566: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36567: LD_ADDR_VAR 0 5
36571: PUSH
36572: LD_VAR 0 1
36576: PUSH
36577: LD_INT 4
36579: MINUS
36580: PUSH
36581: LD_VAR 0 2
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: PUSH
36594: LD_VAR 0 1
36598: PUSH
36599: LD_VAR 0 2
36603: PUSH
36604: LD_INT 4
36606: MINUS
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: PUSH
36616: LD_VAR 0 1
36620: PUSH
36621: LD_INT 4
36623: PLUS
36624: PUSH
36625: LD_VAR 0 2
36629: PUSH
36630: LD_INT 4
36632: PLUS
36633: PUSH
36634: LD_INT 5
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: PUSH
36642: LD_VAR 0 1
36646: PUSH
36647: LD_INT 3
36649: PLUS
36650: PUSH
36651: LD_VAR 0 2
36655: PUSH
36656: LD_INT 4
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: PUSH
36664: LD_VAR 0 1
36668: PUSH
36669: LD_VAR 0 2
36673: PUSH
36674: LD_INT 3
36676: PLUS
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// end ; end ;
36693: GO 36696
36695: POP
// result := list ;
36696: LD_ADDR_VAR 0 4
36700: PUSH
36701: LD_VAR 0 5
36705: ST_TO_ADDR
// end ;
36706: LD_VAR 0 4
36710: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
36715: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36716: LD_VAR 0 1
36720: NOT
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: LD_INT 4
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: IN
36745: NOT
36746: OR
36747: IFFALSE 36751
// exit ;
36749: GO 36834
// tmp := [ ] ;
36751: LD_ADDR_VAR 0 5
36755: PUSH
36756: EMPTY
36757: ST_TO_ADDR
// for i in units do
36758: LD_ADDR_VAR 0 4
36762: PUSH
36763: LD_VAR 0 1
36767: PUSH
36768: FOR_IN
36769: IFFALSE 36803
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36771: LD_ADDR_VAR 0 5
36775: PUSH
36776: LD_VAR 0 5
36780: PPUSH
36781: LD_VAR 0 4
36785: PPUSH
36786: LD_VAR 0 2
36790: PPUSH
36791: CALL_OW 259
36795: PPUSH
36796: CALL 38207 0 2
36800: ST_TO_ADDR
36801: GO 36768
36803: POP
36804: POP
// if not tmp then
36805: LD_VAR 0 5
36809: NOT
36810: IFFALSE 36814
// exit ;
36812: GO 36834
// result := SortListByListDesc ( units , tmp ) ;
36814: LD_ADDR_VAR 0 3
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: LD_VAR 0 5
36828: PPUSH
36829: CALL_OW 77
36833: ST_TO_ADDR
// end ;
36834: LD_VAR 0 3
36838: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36839: LD_INT 0
36841: PPUSH
36842: PPUSH
36843: PPUSH
// result := false ;
36844: LD_ADDR_VAR 0 3
36848: PUSH
36849: LD_INT 0
36851: ST_TO_ADDR
// if not building then
36852: LD_VAR 0 2
36856: NOT
36857: IFFALSE 36861
// exit ;
36859: GO 36999
// x := GetX ( building ) ;
36861: LD_ADDR_VAR 0 4
36865: PUSH
36866: LD_VAR 0 2
36870: PPUSH
36871: CALL_OW 250
36875: ST_TO_ADDR
// y := GetY ( building ) ;
36876: LD_ADDR_VAR 0 5
36880: PUSH
36881: LD_VAR 0 2
36885: PPUSH
36886: CALL_OW 251
36890: ST_TO_ADDR
// if not x or not y then
36891: LD_VAR 0 4
36895: NOT
36896: PUSH
36897: LD_VAR 0 5
36901: NOT
36902: OR
36903: IFFALSE 36907
// exit ;
36905: GO 36999
// if GetTaskList ( unit ) then
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL_OW 437
36916: IFFALSE 36999
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36918: LD_STRING e
36920: PUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 437
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: PUSH
36935: LD_INT 1
36937: ARRAY
36938: EQUAL
36939: PUSH
36940: LD_VAR 0 4
36944: PUSH
36945: LD_VAR 0 1
36949: PPUSH
36950: CALL_OW 437
36954: PUSH
36955: LD_INT 1
36957: ARRAY
36958: PUSH
36959: LD_INT 2
36961: ARRAY
36962: EQUAL
36963: AND
36964: PUSH
36965: LD_VAR 0 5
36969: PUSH
36970: LD_VAR 0 1
36974: PPUSH
36975: CALL_OW 437
36979: PUSH
36980: LD_INT 1
36982: ARRAY
36983: PUSH
36984: LD_INT 3
36986: ARRAY
36987: EQUAL
36988: AND
36989: IFFALSE 36999
// result := true end ;
36991: LD_ADDR_VAR 0 3
36995: PUSH
36996: LD_INT 1
36998: ST_TO_ADDR
// end ;
36999: LD_VAR 0 3
37003: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37004: LD_INT 0
37006: PPUSH
// result := false ;
37007: LD_ADDR_VAR 0 4
37011: PUSH
37012: LD_INT 0
37014: ST_TO_ADDR
// if GetTaskList ( unit ) then
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 437
37024: IFFALSE 37107
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37026: LD_STRING M
37028: PUSH
37029: LD_VAR 0 1
37033: PPUSH
37034: CALL_OW 437
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: EQUAL
37047: PUSH
37048: LD_VAR 0 2
37052: PUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 437
37062: PUSH
37063: LD_INT 1
37065: ARRAY
37066: PUSH
37067: LD_INT 2
37069: ARRAY
37070: EQUAL
37071: AND
37072: PUSH
37073: LD_VAR 0 3
37077: PUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: CALL_OW 437
37087: PUSH
37088: LD_INT 1
37090: ARRAY
37091: PUSH
37092: LD_INT 3
37094: ARRAY
37095: EQUAL
37096: AND
37097: IFFALSE 37107
// result := true ;
37099: LD_ADDR_VAR 0 4
37103: PUSH
37104: LD_INT 1
37106: ST_TO_ADDR
// end ; end ;
37107: LD_VAR 0 4
37111: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37112: LD_INT 0
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
// if not unit or not area then
37118: LD_VAR 0 1
37122: NOT
37123: PUSH
37124: LD_VAR 0 2
37128: NOT
37129: OR
37130: IFFALSE 37134
// exit ;
37132: GO 37310
// tmp := AreaToList ( area , i ) ;
37134: LD_ADDR_VAR 0 6
37138: PUSH
37139: LD_VAR 0 2
37143: PPUSH
37144: LD_VAR 0 5
37148: PPUSH
37149: CALL_OW 517
37153: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37154: LD_ADDR_VAR 0 5
37158: PUSH
37159: DOUBLE
37160: LD_INT 1
37162: DEC
37163: ST_TO_ADDR
37164: LD_VAR 0 6
37168: PUSH
37169: LD_INT 1
37171: ARRAY
37172: PUSH
37173: FOR_TO
37174: IFFALSE 37308
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37176: LD_ADDR_VAR 0 7
37180: PUSH
37181: LD_VAR 0 6
37185: PUSH
37186: LD_INT 1
37188: ARRAY
37189: PUSH
37190: LD_VAR 0 5
37194: ARRAY
37195: PUSH
37196: LD_VAR 0 6
37200: PUSH
37201: LD_INT 2
37203: ARRAY
37204: PUSH
37205: LD_VAR 0 5
37209: ARRAY
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37215: LD_INT 92
37217: PUSH
37218: LD_VAR 0 7
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: PUSH
37227: LD_VAR 0 7
37231: PUSH
37232: LD_INT 2
37234: ARRAY
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: PPUSH
37245: CALL_OW 69
37249: PUSH
37250: LD_INT 0
37252: EQUAL
37253: IFFALSE 37306
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37255: LD_VAR 0 1
37259: PPUSH
37260: LD_VAR 0 7
37264: PUSH
37265: LD_INT 1
37267: ARRAY
37268: PPUSH
37269: LD_VAR 0 7
37273: PUSH
37274: LD_INT 2
37276: ARRAY
37277: PPUSH
37278: LD_VAR 0 3
37282: PPUSH
37283: CALL_OW 48
// result := IsPlaced ( unit ) ;
37287: LD_ADDR_VAR 0 4
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 305
37301: ST_TO_ADDR
// exit ;
37302: POP
37303: POP
37304: GO 37310
// end ; end ;
37306: GO 37173
37308: POP
37309: POP
// end ;
37310: LD_VAR 0 4
37314: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37315: LD_INT 0
37317: PPUSH
37318: PPUSH
37319: PPUSH
// if not side or side > 8 then
37320: LD_VAR 0 1
37324: NOT
37325: PUSH
37326: LD_VAR 0 1
37330: PUSH
37331: LD_INT 8
37333: GREATER
37334: OR
37335: IFFALSE 37339
// exit ;
37337: GO 37526
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37339: LD_ADDR_VAR 0 4
37343: PUSH
37344: LD_INT 22
37346: PUSH
37347: LD_VAR 0 1
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 21
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PPUSH
37370: CALL_OW 69
37374: ST_TO_ADDR
// if not tmp then
37375: LD_VAR 0 4
37379: NOT
37380: IFFALSE 37384
// exit ;
37382: GO 37526
// enable_addtolog := true ;
37384: LD_ADDR_OWVAR 81
37388: PUSH
37389: LD_INT 1
37391: ST_TO_ADDR
// AddToLog ( [ ) ;
37392: LD_STRING [
37394: PPUSH
37395: CALL_OW 561
// for i in tmp do
37399: LD_ADDR_VAR 0 3
37403: PUSH
37404: LD_VAR 0 4
37408: PUSH
37409: FOR_IN
37410: IFFALSE 37517
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37412: LD_STRING [
37414: PUSH
37415: LD_VAR 0 3
37419: PPUSH
37420: CALL_OW 266
37424: STR
37425: PUSH
37426: LD_STRING , 
37428: STR
37429: PUSH
37430: LD_VAR 0 3
37434: PPUSH
37435: CALL_OW 250
37439: STR
37440: PUSH
37441: LD_STRING , 
37443: STR
37444: PUSH
37445: LD_VAR 0 3
37449: PPUSH
37450: CALL_OW 251
37454: STR
37455: PUSH
37456: LD_STRING , 
37458: STR
37459: PUSH
37460: LD_VAR 0 3
37464: PPUSH
37465: CALL_OW 254
37469: STR
37470: PUSH
37471: LD_STRING , 
37473: STR
37474: PUSH
37475: LD_VAR 0 3
37479: PPUSH
37480: LD_INT 1
37482: PPUSH
37483: CALL_OW 268
37487: STR
37488: PUSH
37489: LD_STRING , 
37491: STR
37492: PUSH
37493: LD_VAR 0 3
37497: PPUSH
37498: LD_INT 2
37500: PPUSH
37501: CALL_OW 268
37505: STR
37506: PUSH
37507: LD_STRING ],
37509: STR
37510: PPUSH
37511: CALL_OW 561
// end ;
37515: GO 37409
37517: POP
37518: POP
// AddToLog ( ]; ) ;
37519: LD_STRING ];
37521: PPUSH
37522: CALL_OW 561
// end ;
37526: LD_VAR 0 2
37530: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37531: LD_INT 0
37533: PPUSH
37534: PPUSH
37535: PPUSH
37536: PPUSH
37537: PPUSH
// if not area or not rate or not max then
37538: LD_VAR 0 1
37542: NOT
37543: PUSH
37544: LD_VAR 0 2
37548: NOT
37549: OR
37550: PUSH
37551: LD_VAR 0 4
37555: NOT
37556: OR
37557: IFFALSE 37561
// exit ;
37559: GO 37750
// while 1 do
37561: LD_INT 1
37563: IFFALSE 37750
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37565: LD_ADDR_VAR 0 9
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: LD_INT 1
37577: PPUSH
37578: CALL_OW 287
37582: PUSH
37583: LD_INT 10
37585: MUL
37586: ST_TO_ADDR
// r := rate / 10 ;
37587: LD_ADDR_VAR 0 7
37591: PUSH
37592: LD_VAR 0 2
37596: PUSH
37597: LD_INT 10
37599: DIVREAL
37600: ST_TO_ADDR
// time := 1 1$00 ;
37601: LD_ADDR_VAR 0 8
37605: PUSH
37606: LD_INT 2100
37608: ST_TO_ADDR
// if amount < min then
37609: LD_VAR 0 9
37613: PUSH
37614: LD_VAR 0 3
37618: LESS
37619: IFFALSE 37637
// r := r * 2 else
37621: LD_ADDR_VAR 0 7
37625: PUSH
37626: LD_VAR 0 7
37630: PUSH
37631: LD_INT 2
37633: MUL
37634: ST_TO_ADDR
37635: GO 37663
// if amount > max then
37637: LD_VAR 0 9
37641: PUSH
37642: LD_VAR 0 4
37646: GREATER
37647: IFFALSE 37663
// r := r / 2 ;
37649: LD_ADDR_VAR 0 7
37653: PUSH
37654: LD_VAR 0 7
37658: PUSH
37659: LD_INT 2
37661: DIVREAL
37662: ST_TO_ADDR
// time := time / r ;
37663: LD_ADDR_VAR 0 8
37667: PUSH
37668: LD_VAR 0 8
37672: PUSH
37673: LD_VAR 0 7
37677: DIVREAL
37678: ST_TO_ADDR
// if time < 0 then
37679: LD_VAR 0 8
37683: PUSH
37684: LD_INT 0
37686: LESS
37687: IFFALSE 37704
// time := time * - 1 ;
37689: LD_ADDR_VAR 0 8
37693: PUSH
37694: LD_VAR 0 8
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: MUL
37703: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37704: LD_VAR 0 8
37708: PUSH
37709: LD_INT 35
37711: PPUSH
37712: LD_INT 875
37714: PPUSH
37715: CALL_OW 12
37719: PLUS
37720: PPUSH
37721: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37725: LD_INT 1
37727: PPUSH
37728: LD_INT 5
37730: PPUSH
37731: CALL_OW 12
37735: PPUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: LD_INT 1
37743: PPUSH
37744: CALL_OW 55
// end ;
37748: GO 37561
// end ;
37750: LD_VAR 0 5
37754: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37755: LD_INT 0
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
37762: PPUSH
37763: PPUSH
37764: PPUSH
// if not turrets or not factories then
37765: LD_VAR 0 1
37769: NOT
37770: PUSH
37771: LD_VAR 0 2
37775: NOT
37776: OR
37777: IFFALSE 37781
// exit ;
37779: GO 38088
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37781: LD_ADDR_VAR 0 10
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: LD_INT 6
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: LD_INT 4
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 5
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 24
37823: PUSH
37824: LD_INT 25
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 23
37833: PUSH
37834: LD_INT 27
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 42
37847: PUSH
37848: LD_INT 43
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 44
37857: PUSH
37858: LD_INT 46
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 45
37867: PUSH
37868: LD_INT 47
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// result := [ ] ;
37885: LD_ADDR_VAR 0 3
37889: PUSH
37890: EMPTY
37891: ST_TO_ADDR
// for i in turrets do
37892: LD_ADDR_VAR 0 4
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: FOR_IN
37903: IFFALSE 38086
// begin nat := GetNation ( i ) ;
37905: LD_ADDR_VAR 0 7
37909: PUSH
37910: LD_VAR 0 4
37914: PPUSH
37915: CALL_OW 248
37919: ST_TO_ADDR
// weapon := 0 ;
37920: LD_ADDR_VAR 0 8
37924: PUSH
37925: LD_INT 0
37927: ST_TO_ADDR
// if not nat then
37928: LD_VAR 0 7
37932: NOT
37933: IFFALSE 37937
// continue ;
37935: GO 37902
// for j in list [ nat ] do
37937: LD_ADDR_VAR 0 5
37941: PUSH
37942: LD_VAR 0 10
37946: PUSH
37947: LD_VAR 0 7
37951: ARRAY
37952: PUSH
37953: FOR_IN
37954: IFFALSE 37995
// if GetBWeapon ( i ) = j [ 1 ] then
37956: LD_VAR 0 4
37960: PPUSH
37961: CALL_OW 269
37965: PUSH
37966: LD_VAR 0 5
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: EQUAL
37975: IFFALSE 37993
// begin weapon := j [ 2 ] ;
37977: LD_ADDR_VAR 0 8
37981: PUSH
37982: LD_VAR 0 5
37986: PUSH
37987: LD_INT 2
37989: ARRAY
37990: ST_TO_ADDR
// break ;
37991: GO 37995
// end ;
37993: GO 37953
37995: POP
37996: POP
// if not weapon then
37997: LD_VAR 0 8
38001: NOT
38002: IFFALSE 38006
// continue ;
38004: GO 37902
// for k in factories do
38006: LD_ADDR_VAR 0 6
38010: PUSH
38011: LD_VAR 0 2
38015: PUSH
38016: FOR_IN
38017: IFFALSE 38082
// begin weapons := AvailableWeaponList ( k ) ;
38019: LD_ADDR_VAR 0 9
38023: PUSH
38024: LD_VAR 0 6
38028: PPUSH
38029: CALL_OW 478
38033: ST_TO_ADDR
// if not weapons then
38034: LD_VAR 0 9
38038: NOT
38039: IFFALSE 38043
// continue ;
38041: GO 38016
// if weapon in weapons then
38043: LD_VAR 0 8
38047: PUSH
38048: LD_VAR 0 9
38052: IN
38053: IFFALSE 38080
// begin result := [ i , weapon ] ;
38055: LD_ADDR_VAR 0 3
38059: PUSH
38060: LD_VAR 0 4
38064: PUSH
38065: LD_VAR 0 8
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// exit ;
38074: POP
38075: POP
38076: POP
38077: POP
38078: GO 38088
// end ; end ;
38080: GO 38016
38082: POP
38083: POP
// end ;
38084: GO 37902
38086: POP
38087: POP
// end ;
38088: LD_VAR 0 3
38092: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38093: LD_INT 0
38095: PPUSH
// if not side or side > 8 then
38096: LD_VAR 0 3
38100: NOT
38101: PUSH
38102: LD_VAR 0 3
38106: PUSH
38107: LD_INT 8
38109: GREATER
38110: OR
38111: IFFALSE 38115
// exit ;
38113: GO 38174
// if not range then
38115: LD_VAR 0 4
38119: NOT
38120: IFFALSE 38131
// range := - 12 ;
38122: LD_ADDR_VAR 0 4
38126: PUSH
38127: LD_INT 12
38129: NEG
38130: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38131: LD_VAR 0 1
38135: PPUSH
38136: LD_VAR 0 2
38140: PPUSH
38141: LD_VAR 0 3
38145: PPUSH
38146: LD_VAR 0 4
38150: PPUSH
38151: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38155: LD_VAR 0 1
38159: PPUSH
38160: LD_VAR 0 2
38164: PPUSH
38165: LD_VAR 0 3
38169: PPUSH
38170: CALL_OW 331
// end ;
38174: LD_VAR 0 5
38178: RET
// export function Video ( mode ) ; begin
38179: LD_INT 0
38181: PPUSH
// ingame_video = mode ;
38182: LD_ADDR_OWVAR 52
38186: PUSH
38187: LD_VAR 0 1
38191: ST_TO_ADDR
// interface_hidden = mode ;
38192: LD_ADDR_OWVAR 54
38196: PUSH
38197: LD_VAR 0 1
38201: ST_TO_ADDR
// end ;
38202: LD_VAR 0 2
38206: RET
// export function Join ( array , element ) ; begin
38207: LD_INT 0
38209: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38210: LD_ADDR_VAR 0 3
38214: PUSH
38215: LD_VAR 0 1
38219: PPUSH
38220: LD_VAR 0 1
38224: PUSH
38225: LD_INT 1
38227: PLUS
38228: PPUSH
38229: LD_VAR 0 2
38233: PPUSH
38234: CALL_OW 1
38238: ST_TO_ADDR
// end ;
38239: LD_VAR 0 3
38243: RET
// export function JoinUnion ( array , element ) ; begin
38244: LD_INT 0
38246: PPUSH
// result := array union element ;
38247: LD_ADDR_VAR 0 3
38251: PUSH
38252: LD_VAR 0 1
38256: PUSH
38257: LD_VAR 0 2
38261: UNION
38262: ST_TO_ADDR
// end ;
38263: LD_VAR 0 3
38267: RET
// export function GetBehemoths ( side ) ; begin
38268: LD_INT 0
38270: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38271: LD_ADDR_VAR 0 2
38275: PUSH
38276: LD_INT 22
38278: PUSH
38279: LD_VAR 0 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 31
38290: PUSH
38291: LD_INT 25
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PPUSH
38302: CALL_OW 69
38306: ST_TO_ADDR
// end ;
38307: LD_VAR 0 2
38311: RET
// export function Shuffle ( array ) ; var i , index ; begin
38312: LD_INT 0
38314: PPUSH
38315: PPUSH
38316: PPUSH
// result := [ ] ;
38317: LD_ADDR_VAR 0 2
38321: PUSH
38322: EMPTY
38323: ST_TO_ADDR
// if not array then
38324: LD_VAR 0 1
38328: NOT
38329: IFFALSE 38333
// exit ;
38331: GO 38432
// Randomize ;
38333: CALL_OW 10
// for i = array downto 1 do
38337: LD_ADDR_VAR 0 3
38341: PUSH
38342: DOUBLE
38343: LD_VAR 0 1
38347: INC
38348: ST_TO_ADDR
38349: LD_INT 1
38351: PUSH
38352: FOR_DOWNTO
38353: IFFALSE 38430
// begin index := rand ( 1 , array ) ;
38355: LD_ADDR_VAR 0 4
38359: PUSH
38360: LD_INT 1
38362: PPUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL_OW 12
38372: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38373: LD_ADDR_VAR 0 2
38377: PUSH
38378: LD_VAR 0 2
38382: PPUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_INT 1
38390: PLUS
38391: PPUSH
38392: LD_VAR 0 1
38396: PUSH
38397: LD_VAR 0 4
38401: ARRAY
38402: PPUSH
38403: CALL_OW 2
38407: ST_TO_ADDR
// array := Delete ( array , index ) ;
38408: LD_ADDR_VAR 0 1
38412: PUSH
38413: LD_VAR 0 1
38417: PPUSH
38418: LD_VAR 0 4
38422: PPUSH
38423: CALL_OW 3
38427: ST_TO_ADDR
// end ;
38428: GO 38352
38430: POP
38431: POP
// end ;
38432: LD_VAR 0 2
38436: RET
// export function GetBaseMaterials ( base ) ; begin
38437: LD_INT 0
38439: PPUSH
// result := [ 0 , 0 , 0 ] ;
38440: LD_ADDR_VAR 0 2
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: LIST
38458: ST_TO_ADDR
// if not base then
38459: LD_VAR 0 1
38463: NOT
38464: IFFALSE 38468
// exit ;
38466: GO 38517
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38468: LD_ADDR_VAR 0 2
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: LD_INT 1
38480: PPUSH
38481: CALL_OW 275
38485: PUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: LD_INT 2
38493: PPUSH
38494: CALL_OW 275
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: LD_INT 3
38506: PPUSH
38507: CALL_OW 275
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// end ;
38517: LD_VAR 0 2
38521: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38522: LD_INT 0
38524: PPUSH
38525: PPUSH
// result := array ;
38526: LD_ADDR_VAR 0 3
38530: PUSH
38531: LD_VAR 0 1
38535: ST_TO_ADDR
// if size >= result then
38536: LD_VAR 0 2
38540: PUSH
38541: LD_VAR 0 3
38545: GREATEREQUAL
38546: IFFALSE 38550
// exit ;
38548: GO 38600
// if size then
38550: LD_VAR 0 2
38554: IFFALSE 38600
// for i := array downto size do
38556: LD_ADDR_VAR 0 4
38560: PUSH
38561: DOUBLE
38562: LD_VAR 0 1
38566: INC
38567: ST_TO_ADDR
38568: LD_VAR 0 2
38572: PUSH
38573: FOR_DOWNTO
38574: IFFALSE 38598
// result := Delete ( result , result ) ;
38576: LD_ADDR_VAR 0 3
38580: PUSH
38581: LD_VAR 0 3
38585: PPUSH
38586: LD_VAR 0 3
38590: PPUSH
38591: CALL_OW 3
38595: ST_TO_ADDR
38596: GO 38573
38598: POP
38599: POP
// end ;
38600: LD_VAR 0 3
38604: RET
// export function ComExit ( unit ) ; var tmp ; begin
38605: LD_INT 0
38607: PPUSH
38608: PPUSH
// if not IsInUnit ( unit ) then
38609: LD_VAR 0 1
38613: PPUSH
38614: CALL_OW 310
38618: NOT
38619: IFFALSE 38623
// exit ;
38621: GO 38683
// tmp := IsInUnit ( unit ) ;
38623: LD_ADDR_VAR 0 3
38627: PUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL_OW 310
38637: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38638: LD_VAR 0 3
38642: PPUSH
38643: CALL_OW 247
38647: PUSH
38648: LD_INT 2
38650: EQUAL
38651: IFFALSE 38664
// ComExitVehicle ( unit ) else
38653: LD_VAR 0 1
38657: PPUSH
38658: CALL_OW 121
38662: GO 38673
// ComExitBuilding ( unit ) ;
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 122
// result := tmp ;
38673: LD_ADDR_VAR 0 2
38677: PUSH
38678: LD_VAR 0 3
38682: ST_TO_ADDR
// end ;
38683: LD_VAR 0 2
38687: RET
// export function ComExitAll ( units ) ; var i ; begin
38688: LD_INT 0
38690: PPUSH
38691: PPUSH
// if not units then
38692: LD_VAR 0 1
38696: NOT
38697: IFFALSE 38701
// exit ;
38699: GO 38727
// for i in units do
38701: LD_ADDR_VAR 0 3
38705: PUSH
38706: LD_VAR 0 1
38710: PUSH
38711: FOR_IN
38712: IFFALSE 38725
// ComExit ( i ) ;
38714: LD_VAR 0 3
38718: PPUSH
38719: CALL 38605 0 1
38723: GO 38711
38725: POP
38726: POP
// end ;
38727: LD_VAR 0 2
38731: RET
// export function ResetHc ; begin
38732: LD_INT 0
38734: PPUSH
// InitHc ;
38735: CALL_OW 19
// hc_importance := 0 ;
38739: LD_ADDR_OWVAR 32
38743: PUSH
38744: LD_INT 0
38746: ST_TO_ADDR
// end ;
38747: LD_VAR 0 1
38751: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38752: LD_INT 0
38754: PPUSH
38755: PPUSH
38756: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38757: LD_ADDR_VAR 0 6
38761: PUSH
38762: LD_VAR 0 1
38766: PUSH
38767: LD_VAR 0 3
38771: PLUS
38772: PUSH
38773: LD_INT 2
38775: DIV
38776: ST_TO_ADDR
// if _x < 0 then
38777: LD_VAR 0 6
38781: PUSH
38782: LD_INT 0
38784: LESS
38785: IFFALSE 38802
// _x := _x * - 1 ;
38787: LD_ADDR_VAR 0 6
38791: PUSH
38792: LD_VAR 0 6
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: MUL
38801: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38802: LD_ADDR_VAR 0 7
38806: PUSH
38807: LD_VAR 0 2
38811: PUSH
38812: LD_VAR 0 4
38816: PLUS
38817: PUSH
38818: LD_INT 2
38820: DIV
38821: ST_TO_ADDR
// if _y < 0 then
38822: LD_VAR 0 7
38826: PUSH
38827: LD_INT 0
38829: LESS
38830: IFFALSE 38847
// _y := _y * - 1 ;
38832: LD_ADDR_VAR 0 7
38836: PUSH
38837: LD_VAR 0 7
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: MUL
38846: ST_TO_ADDR
// result := [ _x , _y ] ;
38847: LD_ADDR_VAR 0 5
38851: PUSH
38852: LD_VAR 0 6
38856: PUSH
38857: LD_VAR 0 7
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// end ;
38866: LD_VAR 0 5
38870: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38871: LD_INT 0
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
// task := GetTaskList ( unit ) ;
38877: LD_ADDR_VAR 0 7
38881: PUSH
38882: LD_VAR 0 1
38886: PPUSH
38887: CALL_OW 437
38891: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38892: LD_VAR 0 7
38896: NOT
38897: PUSH
38898: LD_VAR 0 1
38902: PPUSH
38903: LD_VAR 0 2
38907: PPUSH
38908: CALL_OW 308
38912: NOT
38913: AND
38914: IFFALSE 38918
// exit ;
38916: GO 39036
// if IsInArea ( unit , area ) then
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_VAR 0 2
38927: PPUSH
38928: CALL_OW 308
38932: IFFALSE 38950
// begin ComMoveToArea ( unit , goAway ) ;
38934: LD_VAR 0 1
38938: PPUSH
38939: LD_VAR 0 3
38943: PPUSH
38944: CALL_OW 113
// exit ;
38948: GO 39036
// end ; if task [ 1 ] [ 1 ] <> M then
38950: LD_VAR 0 7
38954: PUSH
38955: LD_INT 1
38957: ARRAY
38958: PUSH
38959: LD_INT 1
38961: ARRAY
38962: PUSH
38963: LD_STRING M
38965: NONEQUAL
38966: IFFALSE 38970
// exit ;
38968: GO 39036
// x := task [ 1 ] [ 2 ] ;
38970: LD_ADDR_VAR 0 5
38974: PUSH
38975: LD_VAR 0 7
38979: PUSH
38980: LD_INT 1
38982: ARRAY
38983: PUSH
38984: LD_INT 2
38986: ARRAY
38987: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38988: LD_ADDR_VAR 0 6
38992: PUSH
38993: LD_VAR 0 7
38997: PUSH
38998: LD_INT 1
39000: ARRAY
39001: PUSH
39002: LD_INT 3
39004: ARRAY
39005: ST_TO_ADDR
// if InArea ( x , y , area ) then
39006: LD_VAR 0 5
39010: PPUSH
39011: LD_VAR 0 6
39015: PPUSH
39016: LD_VAR 0 2
39020: PPUSH
39021: CALL_OW 309
39025: IFFALSE 39036
// ComStop ( unit ) ;
39027: LD_VAR 0 1
39031: PPUSH
39032: CALL_OW 141
// end ;
39036: LD_VAR 0 4
39040: RET
// export function Abs ( value ) ; begin
39041: LD_INT 0
39043: PPUSH
// result := value ;
39044: LD_ADDR_VAR 0 2
39048: PUSH
39049: LD_VAR 0 1
39053: ST_TO_ADDR
// if value < 0 then
39054: LD_VAR 0 1
39058: PUSH
39059: LD_INT 0
39061: LESS
39062: IFFALSE 39079
// result := value * - 1 ;
39064: LD_ADDR_VAR 0 2
39068: PUSH
39069: LD_VAR 0 1
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: MUL
39078: ST_TO_ADDR
// end ;
39079: LD_VAR 0 2
39083: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39084: LD_INT 0
39086: PPUSH
39087: PPUSH
39088: PPUSH
39089: PPUSH
39090: PPUSH
39091: PPUSH
39092: PPUSH
39093: PPUSH
// if not unit or not building then
39094: LD_VAR 0 1
39098: NOT
39099: PUSH
39100: LD_VAR 0 2
39104: NOT
39105: OR
39106: IFFALSE 39110
// exit ;
39108: GO 39336
// x := GetX ( building ) ;
39110: LD_ADDR_VAR 0 4
39114: PUSH
39115: LD_VAR 0 2
39119: PPUSH
39120: CALL_OW 250
39124: ST_TO_ADDR
// y := GetY ( building ) ;
39125: LD_ADDR_VAR 0 6
39129: PUSH
39130: LD_VAR 0 2
39134: PPUSH
39135: CALL_OW 251
39139: ST_TO_ADDR
// d := GetDir ( building ) ;
39140: LD_ADDR_VAR 0 8
39144: PUSH
39145: LD_VAR 0 2
39149: PPUSH
39150: CALL_OW 254
39154: ST_TO_ADDR
// r := 4 ;
39155: LD_ADDR_VAR 0 9
39159: PUSH
39160: LD_INT 4
39162: ST_TO_ADDR
// for i := 1 to 5 do
39163: LD_ADDR_VAR 0 10
39167: PUSH
39168: DOUBLE
39169: LD_INT 1
39171: DEC
39172: ST_TO_ADDR
39173: LD_INT 5
39175: PUSH
39176: FOR_TO
39177: IFFALSE 39334
// begin _x := ShiftX ( x , d , r + i ) ;
39179: LD_ADDR_VAR 0 5
39183: PUSH
39184: LD_VAR 0 4
39188: PPUSH
39189: LD_VAR 0 8
39193: PPUSH
39194: LD_VAR 0 9
39198: PUSH
39199: LD_VAR 0 10
39203: PLUS
39204: PPUSH
39205: CALL_OW 272
39209: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39210: LD_ADDR_VAR 0 7
39214: PUSH
39215: LD_VAR 0 6
39219: PPUSH
39220: LD_VAR 0 8
39224: PPUSH
39225: LD_VAR 0 9
39229: PUSH
39230: LD_VAR 0 10
39234: PLUS
39235: PPUSH
39236: CALL_OW 273
39240: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39241: LD_VAR 0 5
39245: PPUSH
39246: LD_VAR 0 7
39250: PPUSH
39251: CALL_OW 488
39255: PUSH
39256: LD_VAR 0 5
39260: PPUSH
39261: LD_VAR 0 7
39265: PPUSH
39266: CALL_OW 428
39270: PPUSH
39271: CALL_OW 247
39275: PUSH
39276: LD_INT 3
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: IN
39286: NOT
39287: AND
39288: IFFALSE 39332
// begin ComMoveXY ( unit , _x , _y ) ;
39290: LD_VAR 0 1
39294: PPUSH
39295: LD_VAR 0 5
39299: PPUSH
39300: LD_VAR 0 7
39304: PPUSH
39305: CALL_OW 111
// result := [ _x , _y ] ;
39309: LD_ADDR_VAR 0 3
39313: PUSH
39314: LD_VAR 0 5
39318: PUSH
39319: LD_VAR 0 7
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: ST_TO_ADDR
// exit ;
39328: POP
39329: POP
39330: GO 39336
// end ; end ;
39332: GO 39176
39334: POP
39335: POP
// end ;
39336: LD_VAR 0 3
39340: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39341: LD_INT 0
39343: PPUSH
39344: PPUSH
39345: PPUSH
// result := 0 ;
39346: LD_ADDR_VAR 0 3
39350: PUSH
39351: LD_INT 0
39353: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39354: LD_VAR 0 1
39358: PUSH
39359: LD_INT 0
39361: LESS
39362: PUSH
39363: LD_VAR 0 1
39367: PUSH
39368: LD_INT 8
39370: GREATER
39371: OR
39372: PUSH
39373: LD_VAR 0 2
39377: PUSH
39378: LD_INT 0
39380: LESS
39381: OR
39382: PUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 8
39390: GREATER
39391: OR
39392: IFFALSE 39396
// exit ;
39394: GO 39471
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39396: LD_ADDR_VAR 0 4
39400: PUSH
39401: LD_INT 22
39403: PUSH
39404: LD_VAR 0 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PPUSH
39413: CALL_OW 69
39417: PUSH
39418: FOR_IN
39419: IFFALSE 39469
// begin un := UnitShoot ( i ) ;
39421: LD_ADDR_VAR 0 5
39425: PUSH
39426: LD_VAR 0 4
39430: PPUSH
39431: CALL_OW 504
39435: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39436: LD_VAR 0 5
39440: PPUSH
39441: CALL_OW 255
39445: PUSH
39446: LD_VAR 0 1
39450: EQUAL
39451: IFFALSE 39467
// begin result := un ;
39453: LD_ADDR_VAR 0 3
39457: PUSH
39458: LD_VAR 0 5
39462: ST_TO_ADDR
// exit ;
39463: POP
39464: POP
39465: GO 39471
// end ; end ;
39467: GO 39418
39469: POP
39470: POP
// end ;
39471: LD_VAR 0 3
39475: RET
// export function GetCargoBay ( units ) ; begin
39476: LD_INT 0
39478: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39479: LD_ADDR_VAR 0 2
39483: PUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 34
39494: PUSH
39495: LD_INT 12
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 34
39504: PUSH
39505: LD_INT 51
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 34
39514: PUSH
39515: LD_INT 32
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 34
39524: PUSH
39525: LD_INT 89
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: PPUSH
39539: CALL_OW 72
39543: ST_TO_ADDR
// end ;
39544: LD_VAR 0 2
39548: RET
// export function Negate ( value ) ; begin
39549: LD_INT 0
39551: PPUSH
// result := not value ;
39552: LD_ADDR_VAR 0 2
39556: PUSH
39557: LD_VAR 0 1
39561: NOT
39562: ST_TO_ADDR
// end ;
39563: LD_VAR 0 2
39567: RET
// export function Inc ( value ) ; begin
39568: LD_INT 0
39570: PPUSH
// result := value + 1 ;
39571: LD_ADDR_VAR 0 2
39575: PUSH
39576: LD_VAR 0 1
39580: PUSH
39581: LD_INT 1
39583: PLUS
39584: ST_TO_ADDR
// end ;
39585: LD_VAR 0 2
39589: RET
// export function Dec ( value ) ; begin
39590: LD_INT 0
39592: PPUSH
// result := value - 1 ;
39593: LD_ADDR_VAR 0 2
39597: PUSH
39598: LD_VAR 0 1
39602: PUSH
39603: LD_INT 1
39605: MINUS
39606: ST_TO_ADDR
// end ;
39607: LD_VAR 0 2
39611: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39612: LD_INT 0
39614: PPUSH
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
39619: PPUSH
39620: PPUSH
39621: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39622: LD_VAR 0 1
39626: PPUSH
39627: LD_VAR 0 2
39631: PPUSH
39632: CALL_OW 488
39636: NOT
39637: PUSH
39638: LD_VAR 0 3
39642: PPUSH
39643: LD_VAR 0 4
39647: PPUSH
39648: CALL_OW 488
39652: NOT
39653: OR
39654: IFFALSE 39667
// begin result := - 1 ;
39656: LD_ADDR_VAR 0 5
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: ST_TO_ADDR
// exit ;
39665: GO 39902
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39667: LD_ADDR_VAR 0 12
39671: PUSH
39672: LD_VAR 0 1
39676: PPUSH
39677: LD_VAR 0 2
39681: PPUSH
39682: LD_VAR 0 3
39686: PPUSH
39687: LD_VAR 0 4
39691: PPUSH
39692: CALL 38752 0 4
39696: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39697: LD_ADDR_VAR 0 11
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: LD_VAR 0 2
39711: PPUSH
39712: LD_VAR 0 12
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: PPUSH
39721: LD_VAR 0 12
39725: PUSH
39726: LD_INT 2
39728: ARRAY
39729: PPUSH
39730: CALL_OW 298
39734: ST_TO_ADDR
// distance := 9999 ;
39735: LD_ADDR_VAR 0 10
39739: PUSH
39740: LD_INT 9999
39742: ST_TO_ADDR
// for i := 0 to 5 do
39743: LD_ADDR_VAR 0 6
39747: PUSH
39748: DOUBLE
39749: LD_INT 0
39751: DEC
39752: ST_TO_ADDR
39753: LD_INT 5
39755: PUSH
39756: FOR_TO
39757: IFFALSE 39900
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39759: LD_ADDR_VAR 0 7
39763: PUSH
39764: LD_VAR 0 1
39768: PPUSH
39769: LD_VAR 0 6
39773: PPUSH
39774: LD_VAR 0 11
39778: PPUSH
39779: CALL_OW 272
39783: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39784: LD_ADDR_VAR 0 8
39788: PUSH
39789: LD_VAR 0 2
39793: PPUSH
39794: LD_VAR 0 6
39798: PPUSH
39799: LD_VAR 0 11
39803: PPUSH
39804: CALL_OW 273
39808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39809: LD_VAR 0 7
39813: PPUSH
39814: LD_VAR 0 8
39818: PPUSH
39819: CALL_OW 488
39823: NOT
39824: IFFALSE 39828
// continue ;
39826: GO 39756
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39828: LD_ADDR_VAR 0 9
39832: PUSH
39833: LD_VAR 0 12
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: PPUSH
39842: LD_VAR 0 12
39846: PUSH
39847: LD_INT 2
39849: ARRAY
39850: PPUSH
39851: LD_VAR 0 7
39855: PPUSH
39856: LD_VAR 0 8
39860: PPUSH
39861: CALL_OW 298
39865: ST_TO_ADDR
// if tmp < distance then
39866: LD_VAR 0 9
39870: PUSH
39871: LD_VAR 0 10
39875: LESS
39876: IFFALSE 39898
// begin result := i ;
39878: LD_ADDR_VAR 0 5
39882: PUSH
39883: LD_VAR 0 6
39887: ST_TO_ADDR
// distance := tmp ;
39888: LD_ADDR_VAR 0 10
39892: PUSH
39893: LD_VAR 0 9
39897: ST_TO_ADDR
// end ; end ;
39898: GO 39756
39900: POP
39901: POP
// end ;
39902: LD_VAR 0 5
39906: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39907: LD_INT 0
39909: PPUSH
39910: PPUSH
// if not driver or not IsInUnit ( driver ) then
39911: LD_VAR 0 1
39915: NOT
39916: PUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 310
39926: NOT
39927: OR
39928: IFFALSE 39932
// exit ;
39930: GO 40022
// vehicle := IsInUnit ( driver ) ;
39932: LD_ADDR_VAR 0 3
39936: PUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 310
39946: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39947: LD_VAR 0 1
39951: PPUSH
39952: LD_STRING \
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: PUSH
39982: LD_STRING E
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_VAR 0 3
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PPUSH
40018: CALL_OW 446
// end ;
40022: LD_VAR 0 2
40026: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40027: LD_INT 0
40029: PPUSH
40030: PPUSH
// if not driver or not IsInUnit ( driver ) then
40031: LD_VAR 0 1
40035: NOT
40036: PUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 310
40046: NOT
40047: OR
40048: IFFALSE 40052
// exit ;
40050: GO 40142
// vehicle := IsInUnit ( driver ) ;
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_VAR 0 1
40061: PPUSH
40062: CALL_OW 310
40066: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_STRING \
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: PUSH
40102: LD_STRING E
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_VAR 0 3
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PPUSH
40138: CALL_OW 447
// end ;
40142: LD_VAR 0 2
40146: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40147: LD_INT 0
40149: PPUSH
40150: PPUSH
40151: PPUSH
// tmp := [ ] ;
40152: LD_ADDR_VAR 0 5
40156: PUSH
40157: EMPTY
40158: ST_TO_ADDR
// for i in units do
40159: LD_ADDR_VAR 0 4
40163: PUSH
40164: LD_VAR 0 1
40168: PUSH
40169: FOR_IN
40170: IFFALSE 40208
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_VAR 0 5
40181: PPUSH
40182: LD_VAR 0 5
40186: PUSH
40187: LD_INT 1
40189: PLUS
40190: PPUSH
40191: LD_VAR 0 4
40195: PPUSH
40196: CALL_OW 256
40200: PPUSH
40201: CALL_OW 2
40205: ST_TO_ADDR
40206: GO 40169
40208: POP
40209: POP
// if not tmp then
40210: LD_VAR 0 5
40214: NOT
40215: IFFALSE 40219
// exit ;
40217: GO 40267
// if asc then
40219: LD_VAR 0 2
40223: IFFALSE 40247
// result := SortListByListAsc ( units , tmp ) else
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_VAR 0 1
40234: PPUSH
40235: LD_VAR 0 5
40239: PPUSH
40240: CALL_OW 76
40244: ST_TO_ADDR
40245: GO 40267
// result := SortListByListDesc ( units , tmp ) ;
40247: LD_ADDR_VAR 0 3
40251: PUSH
40252: LD_VAR 0 1
40256: PPUSH
40257: LD_VAR 0 5
40261: PPUSH
40262: CALL_OW 77
40266: ST_TO_ADDR
// end ;
40267: LD_VAR 0 3
40271: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40272: LD_INT 0
40274: PPUSH
40275: PPUSH
// task := GetTaskList ( mech ) ;
40276: LD_ADDR_VAR 0 4
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: CALL_OW 437
40290: ST_TO_ADDR
// if not task then
40291: LD_VAR 0 4
40295: NOT
40296: IFFALSE 40300
// exit ;
40298: GO 40342
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40300: LD_ADDR_VAR 0 3
40304: PUSH
40305: LD_VAR 0 4
40309: PUSH
40310: LD_INT 1
40312: ARRAY
40313: PUSH
40314: LD_INT 1
40316: ARRAY
40317: PUSH
40318: LD_STRING r
40320: EQUAL
40321: PUSH
40322: LD_VAR 0 4
40326: PUSH
40327: LD_INT 1
40329: ARRAY
40330: PUSH
40331: LD_INT 4
40333: ARRAY
40334: PUSH
40335: LD_VAR 0 2
40339: EQUAL
40340: AND
40341: ST_TO_ADDR
// end ;
40342: LD_VAR 0 3
40346: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40347: LD_INT 0
40349: PPUSH
// SetDir ( unit , d ) ;
40350: LD_VAR 0 1
40354: PPUSH
40355: LD_VAR 0 4
40359: PPUSH
40360: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_VAR 0 3
40378: PPUSH
40379: LD_VAR 0 5
40383: PPUSH
40384: CALL_OW 48
// end ;
40388: LD_VAR 0 6
40392: RET
// export function ToNaturalNumber ( number ) ; begin
40393: LD_INT 0
40395: PPUSH
// result := number div 1 ;
40396: LD_ADDR_VAR 0 2
40400: PUSH
40401: LD_VAR 0 1
40405: PUSH
40406: LD_INT 1
40408: DIV
40409: ST_TO_ADDR
// if number < 0 then
40410: LD_VAR 0 1
40414: PUSH
40415: LD_INT 0
40417: LESS
40418: IFFALSE 40428
// result := 0 ;
40420: LD_ADDR_VAR 0 2
40424: PUSH
40425: LD_INT 0
40427: ST_TO_ADDR
// end ;
40428: LD_VAR 0 2
40432: RET
// export function SortByClass ( units , class ) ; var un ; begin
40433: LD_INT 0
40435: PPUSH
40436: PPUSH
// if not units or not class then
40437: LD_VAR 0 1
40441: NOT
40442: PUSH
40443: LD_VAR 0 2
40447: NOT
40448: OR
40449: IFFALSE 40453
// exit ;
40451: GO 40548
// result := [ ] ;
40453: LD_ADDR_VAR 0 3
40457: PUSH
40458: EMPTY
40459: ST_TO_ADDR
// for un in units do
40460: LD_ADDR_VAR 0 4
40464: PUSH
40465: LD_VAR 0 1
40469: PUSH
40470: FOR_IN
40471: IFFALSE 40546
// if GetClass ( un ) = class then
40473: LD_VAR 0 4
40477: PPUSH
40478: CALL_OW 257
40482: PUSH
40483: LD_VAR 0 2
40487: EQUAL
40488: IFFALSE 40515
// result := Insert ( result , 1 , un ) else
40490: LD_ADDR_VAR 0 3
40494: PUSH
40495: LD_VAR 0 3
40499: PPUSH
40500: LD_INT 1
40502: PPUSH
40503: LD_VAR 0 4
40507: PPUSH
40508: CALL_OW 2
40512: ST_TO_ADDR
40513: GO 40544
// result := Replace ( result , result + 1 , un ) ;
40515: LD_ADDR_VAR 0 3
40519: PUSH
40520: LD_VAR 0 3
40524: PPUSH
40525: LD_VAR 0 3
40529: PUSH
40530: LD_INT 1
40532: PLUS
40533: PPUSH
40534: LD_VAR 0 4
40538: PPUSH
40539: CALL_OW 1
40543: ST_TO_ADDR
40544: GO 40470
40546: POP
40547: POP
// end ;
40548: LD_VAR 0 3
40552: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
// result := [ ] ;
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: EMPTY
40568: ST_TO_ADDR
// if x - r < 0 then
40569: LD_VAR 0 1
40573: PUSH
40574: LD_VAR 0 3
40578: MINUS
40579: PUSH
40580: LD_INT 0
40582: LESS
40583: IFFALSE 40595
// min_x := 0 else
40585: LD_ADDR_VAR 0 8
40589: PUSH
40590: LD_INT 0
40592: ST_TO_ADDR
40593: GO 40611
// min_x := x - r ;
40595: LD_ADDR_VAR 0 8
40599: PUSH
40600: LD_VAR 0 1
40604: PUSH
40605: LD_VAR 0 3
40609: MINUS
40610: ST_TO_ADDR
// if y - r < 0 then
40611: LD_VAR 0 2
40615: PUSH
40616: LD_VAR 0 3
40620: MINUS
40621: PUSH
40622: LD_INT 0
40624: LESS
40625: IFFALSE 40637
// min_y := 0 else
40627: LD_ADDR_VAR 0 7
40631: PUSH
40632: LD_INT 0
40634: ST_TO_ADDR
40635: GO 40653
// min_y := y - r ;
40637: LD_ADDR_VAR 0 7
40641: PUSH
40642: LD_VAR 0 2
40646: PUSH
40647: LD_VAR 0 3
40651: MINUS
40652: ST_TO_ADDR
// max_x := x + r ;
40653: LD_ADDR_VAR 0 9
40657: PUSH
40658: LD_VAR 0 1
40662: PUSH
40663: LD_VAR 0 3
40667: PLUS
40668: ST_TO_ADDR
// max_y := y + r ;
40669: LD_ADDR_VAR 0 10
40673: PUSH
40674: LD_VAR 0 2
40678: PUSH
40679: LD_VAR 0 3
40683: PLUS
40684: ST_TO_ADDR
// for _x = min_x to max_x do
40685: LD_ADDR_VAR 0 5
40689: PUSH
40690: DOUBLE
40691: LD_VAR 0 8
40695: DEC
40696: ST_TO_ADDR
40697: LD_VAR 0 9
40701: PUSH
40702: FOR_TO
40703: IFFALSE 40804
// for _y = min_y to max_y do
40705: LD_ADDR_VAR 0 6
40709: PUSH
40710: DOUBLE
40711: LD_VAR 0 7
40715: DEC
40716: ST_TO_ADDR
40717: LD_VAR 0 10
40721: PUSH
40722: FOR_TO
40723: IFFALSE 40800
// begin if not ValidHex ( _x , _y ) then
40725: LD_VAR 0 5
40729: PPUSH
40730: LD_VAR 0 6
40734: PPUSH
40735: CALL_OW 488
40739: NOT
40740: IFFALSE 40744
// continue ;
40742: GO 40722
// if GetResourceTypeXY ( _x , _y ) then
40744: LD_VAR 0 5
40748: PPUSH
40749: LD_VAR 0 6
40753: PPUSH
40754: CALL_OW 283
40758: IFFALSE 40798
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40760: LD_ADDR_VAR 0 4
40764: PUSH
40765: LD_VAR 0 4
40769: PPUSH
40770: LD_VAR 0 4
40774: PUSH
40775: LD_INT 1
40777: PLUS
40778: PPUSH
40779: LD_VAR 0 5
40783: PUSH
40784: LD_VAR 0 6
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PPUSH
40793: CALL_OW 1
40797: ST_TO_ADDR
// end ;
40798: GO 40722
40800: POP
40801: POP
40802: GO 40702
40804: POP
40805: POP
// end ;
40806: LD_VAR 0 4
40810: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40811: LD_INT 0
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
// if not units then
40821: LD_VAR 0 1
40825: NOT
40826: IFFALSE 40830
// exit ;
40828: GO 41354
// result := UnitFilter ( units , [ f_ok ] ) ;
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: LD_VAR 0 1
40839: PPUSH
40840: LD_INT 50
40842: PUSH
40843: EMPTY
40844: LIST
40845: PPUSH
40846: CALL_OW 72
40850: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40851: LD_ADDR_VAR 0 8
40855: PUSH
40856: LD_VAR 0 1
40860: PUSH
40861: LD_INT 1
40863: ARRAY
40864: PPUSH
40865: CALL_OW 255
40869: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
40870: LD_ADDR_VAR 0 10
40874: PUSH
40875: LD_INT 29
40877: PUSH
40878: LD_INT 91
40880: PUSH
40881: LD_INT 49
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// if not result then
40889: LD_VAR 0 3
40893: NOT
40894: IFFALSE 40898
// exit ;
40896: GO 41354
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40898: LD_ADDR_VAR 0 5
40902: PUSH
40903: LD_INT 81
40905: PUSH
40906: LD_VAR 0 8
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PPUSH
40915: CALL_OW 69
40919: ST_TO_ADDR
// for i in result do
40920: LD_ADDR_VAR 0 4
40924: PUSH
40925: LD_VAR 0 3
40929: PUSH
40930: FOR_IN
40931: IFFALSE 41352
// begin tag := GetTag ( i ) + 1 ;
40933: LD_ADDR_VAR 0 9
40937: PUSH
40938: LD_VAR 0 4
40942: PPUSH
40943: CALL_OW 110
40947: PUSH
40948: LD_INT 1
40950: PLUS
40951: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40952: LD_ADDR_VAR 0 7
40956: PUSH
40957: LD_VAR 0 4
40961: PPUSH
40962: CALL_OW 250
40966: PPUSH
40967: LD_VAR 0 4
40971: PPUSH
40972: CALL_OW 251
40976: PPUSH
40977: LD_INT 6
40979: PPUSH
40980: CALL 40553 0 3
40984: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40985: LD_VAR 0 4
40989: PPUSH
40990: CALL_OW 247
40994: PUSH
40995: LD_INT 2
40997: EQUAL
40998: PUSH
40999: LD_VAR 0 7
41003: AND
41004: PUSH
41005: LD_VAR 0 4
41009: PPUSH
41010: CALL_OW 264
41014: PUSH
41015: LD_VAR 0 10
41019: IN
41020: NOT
41021: AND
41022: IFFALSE 41061
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41024: LD_VAR 0 4
41028: PPUSH
41029: LD_VAR 0 7
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: PUSH
41038: LD_INT 1
41040: ARRAY
41041: PPUSH
41042: LD_VAR 0 7
41046: PUSH
41047: LD_INT 1
41049: ARRAY
41050: PUSH
41051: LD_INT 2
41053: ARRAY
41054: PPUSH
41055: CALL_OW 116
41059: GO 41350
// if path > tag then
41061: LD_VAR 0 2
41065: PUSH
41066: LD_VAR 0 9
41070: GREATER
41071: IFFALSE 41279
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41073: LD_ADDR_VAR 0 6
41077: PUSH
41078: LD_VAR 0 5
41082: PPUSH
41083: LD_INT 91
41085: PUSH
41086: LD_VAR 0 4
41090: PUSH
41091: LD_INT 8
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: PPUSH
41099: CALL_OW 72
41103: ST_TO_ADDR
// if nearEnemy then
41104: LD_VAR 0 6
41108: IFFALSE 41177
// begin if GetWeapon ( i ) = ru_time_lapser then
41110: LD_VAR 0 4
41114: PPUSH
41115: CALL_OW 264
41119: PUSH
41120: LD_INT 49
41122: EQUAL
41123: IFFALSE 41151
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41125: LD_VAR 0 4
41129: PPUSH
41130: LD_VAR 0 6
41134: PPUSH
41135: LD_VAR 0 4
41139: PPUSH
41140: CALL_OW 74
41144: PPUSH
41145: CALL_OW 112
41149: GO 41175
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41151: LD_VAR 0 4
41155: PPUSH
41156: LD_VAR 0 6
41160: PPUSH
41161: LD_VAR 0 4
41165: PPUSH
41166: CALL_OW 74
41170: PPUSH
41171: CALL 42279 0 2
// end else
41175: GO 41277
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41177: LD_VAR 0 4
41181: PPUSH
41182: LD_VAR 0 2
41186: PUSH
41187: LD_VAR 0 9
41191: ARRAY
41192: PUSH
41193: LD_INT 1
41195: ARRAY
41196: PPUSH
41197: LD_VAR 0 2
41201: PUSH
41202: LD_VAR 0 9
41206: ARRAY
41207: PUSH
41208: LD_INT 2
41210: ARRAY
41211: PPUSH
41212: CALL_OW 297
41216: PUSH
41217: LD_INT 6
41219: GREATER
41220: IFFALSE 41263
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41222: LD_VAR 0 4
41226: PPUSH
41227: LD_VAR 0 2
41231: PUSH
41232: LD_VAR 0 9
41236: ARRAY
41237: PUSH
41238: LD_INT 1
41240: ARRAY
41241: PPUSH
41242: LD_VAR 0 2
41246: PUSH
41247: LD_VAR 0 9
41251: ARRAY
41252: PUSH
41253: LD_INT 2
41255: ARRAY
41256: PPUSH
41257: CALL_OW 114
41261: GO 41277
// SetTag ( i , tag ) ;
41263: LD_VAR 0 4
41267: PPUSH
41268: LD_VAR 0 9
41272: PPUSH
41273: CALL_OW 109
// end else
41277: GO 41350
// if enemy then
41279: LD_VAR 0 5
41283: IFFALSE 41350
// begin if GetWeapon ( i ) = ru_time_lapser then
41285: LD_VAR 0 4
41289: PPUSH
41290: CALL_OW 264
41294: PUSH
41295: LD_INT 49
41297: EQUAL
41298: IFFALSE 41326
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41300: LD_VAR 0 4
41304: PPUSH
41305: LD_VAR 0 5
41309: PPUSH
41310: LD_VAR 0 4
41314: PPUSH
41315: CALL_OW 74
41319: PPUSH
41320: CALL_OW 112
41324: GO 41350
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41326: LD_VAR 0 4
41330: PPUSH
41331: LD_VAR 0 5
41335: PPUSH
41336: LD_VAR 0 4
41340: PPUSH
41341: CALL_OW 74
41345: PPUSH
41346: CALL 42279 0 2
// end ; end ;
41350: GO 40930
41352: POP
41353: POP
// end ;
41354: LD_VAR 0 3
41358: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
41363: PPUSH
// if not unit or IsInUnit ( unit ) then
41364: LD_VAR 0 1
41368: NOT
41369: PUSH
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 310
41379: OR
41380: IFFALSE 41384
// exit ;
41382: GO 41475
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41384: LD_ADDR_VAR 0 4
41388: PUSH
41389: LD_VAR 0 1
41393: PPUSH
41394: CALL_OW 250
41398: PPUSH
41399: LD_VAR 0 2
41403: PPUSH
41404: LD_INT 1
41406: PPUSH
41407: CALL_OW 272
41411: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41412: LD_ADDR_VAR 0 5
41416: PUSH
41417: LD_VAR 0 1
41421: PPUSH
41422: CALL_OW 251
41426: PPUSH
41427: LD_VAR 0 2
41431: PPUSH
41432: LD_INT 1
41434: PPUSH
41435: CALL_OW 273
41439: ST_TO_ADDR
// if ValidHex ( x , y ) then
41440: LD_VAR 0 4
41444: PPUSH
41445: LD_VAR 0 5
41449: PPUSH
41450: CALL_OW 488
41454: IFFALSE 41475
// ComTurnXY ( unit , x , y ) ;
41456: LD_VAR 0 1
41460: PPUSH
41461: LD_VAR 0 4
41465: PPUSH
41466: LD_VAR 0 5
41470: PPUSH
41471: CALL_OW 118
// end ;
41475: LD_VAR 0 3
41479: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41480: LD_INT 0
41482: PPUSH
41483: PPUSH
// result := false ;
41484: LD_ADDR_VAR 0 3
41488: PUSH
41489: LD_INT 0
41491: ST_TO_ADDR
// if not units then
41492: LD_VAR 0 2
41496: NOT
41497: IFFALSE 41501
// exit ;
41499: GO 41546
// for i in units do
41501: LD_ADDR_VAR 0 4
41505: PUSH
41506: LD_VAR 0 2
41510: PUSH
41511: FOR_IN
41512: IFFALSE 41544
// if See ( side , i ) then
41514: LD_VAR 0 1
41518: PPUSH
41519: LD_VAR 0 4
41523: PPUSH
41524: CALL_OW 292
41528: IFFALSE 41542
// begin result := true ;
41530: LD_ADDR_VAR 0 3
41534: PUSH
41535: LD_INT 1
41537: ST_TO_ADDR
// exit ;
41538: POP
41539: POP
41540: GO 41546
// end ;
41542: GO 41511
41544: POP
41545: POP
// end ;
41546: LD_VAR 0 3
41550: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41551: LD_INT 0
41553: PPUSH
41554: PPUSH
41555: PPUSH
41556: PPUSH
// if not unit or not points then
41557: LD_VAR 0 1
41561: NOT
41562: PUSH
41563: LD_VAR 0 2
41567: NOT
41568: OR
41569: IFFALSE 41573
// exit ;
41571: GO 41663
// dist := 99999 ;
41573: LD_ADDR_VAR 0 5
41577: PUSH
41578: LD_INT 99999
41580: ST_TO_ADDR
// for i in points do
41581: LD_ADDR_VAR 0 4
41585: PUSH
41586: LD_VAR 0 2
41590: PUSH
41591: FOR_IN
41592: IFFALSE 41661
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41594: LD_ADDR_VAR 0 6
41598: PUSH
41599: LD_VAR 0 1
41603: PPUSH
41604: LD_VAR 0 4
41608: PUSH
41609: LD_INT 1
41611: ARRAY
41612: PPUSH
41613: LD_VAR 0 4
41617: PUSH
41618: LD_INT 2
41620: ARRAY
41621: PPUSH
41622: CALL_OW 297
41626: ST_TO_ADDR
// if tmpDist < dist then
41627: LD_VAR 0 6
41631: PUSH
41632: LD_VAR 0 5
41636: LESS
41637: IFFALSE 41659
// begin result := i ;
41639: LD_ADDR_VAR 0 3
41643: PUSH
41644: LD_VAR 0 4
41648: ST_TO_ADDR
// dist := tmpDist ;
41649: LD_ADDR_VAR 0 5
41653: PUSH
41654: LD_VAR 0 6
41658: ST_TO_ADDR
// end ; end ;
41659: GO 41591
41661: POP
41662: POP
// end ;
41663: LD_VAR 0 3
41667: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41668: LD_INT 0
41670: PPUSH
// uc_side := side ;
41671: LD_ADDR_OWVAR 20
41675: PUSH
41676: LD_VAR 0 1
41680: ST_TO_ADDR
// uc_nation := 3 ;
41681: LD_ADDR_OWVAR 21
41685: PUSH
41686: LD_INT 3
41688: ST_TO_ADDR
// vc_chassis := 25 ;
41689: LD_ADDR_OWVAR 37
41693: PUSH
41694: LD_INT 25
41696: ST_TO_ADDR
// vc_engine := engine_siberite ;
41697: LD_ADDR_OWVAR 39
41701: PUSH
41702: LD_INT 3
41704: ST_TO_ADDR
// vc_control := control_computer ;
41705: LD_ADDR_OWVAR 38
41709: PUSH
41710: LD_INT 3
41712: ST_TO_ADDR
// vc_weapon := 59 ;
41713: LD_ADDR_OWVAR 40
41717: PUSH
41718: LD_INT 59
41720: ST_TO_ADDR
// result := CreateVehicle ;
41721: LD_ADDR_VAR 0 5
41725: PUSH
41726: CALL_OW 45
41730: ST_TO_ADDR
// SetDir ( result , d ) ;
41731: LD_VAR 0 5
41735: PPUSH
41736: LD_VAR 0 4
41740: PPUSH
41741: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41745: LD_VAR 0 5
41749: PPUSH
41750: LD_VAR 0 2
41754: PPUSH
41755: LD_VAR 0 3
41759: PPUSH
41760: LD_INT 0
41762: PPUSH
41763: CALL_OW 48
// end ;
41767: LD_VAR 0 5
41771: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41772: LD_INT 0
41774: PPUSH
41775: PPUSH
41776: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41777: LD_ADDR_VAR 0 2
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41800: LD_VAR 0 1
41804: NOT
41805: PUSH
41806: LD_VAR 0 1
41810: PPUSH
41811: CALL_OW 264
41815: PUSH
41816: LD_INT 12
41818: PUSH
41819: LD_INT 51
41821: PUSH
41822: LD_INT 32
41824: PUSH
41825: LD_INT 89
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: IN
41834: NOT
41835: OR
41836: IFFALSE 41840
// exit ;
41838: GO 41938
// for i := 1 to 3 do
41840: LD_ADDR_VAR 0 3
41844: PUSH
41845: DOUBLE
41846: LD_INT 1
41848: DEC
41849: ST_TO_ADDR
41850: LD_INT 3
41852: PUSH
41853: FOR_TO
41854: IFFALSE 41936
// begin tmp := GetCargo ( cargo , i ) ;
41856: LD_ADDR_VAR 0 4
41860: PUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: LD_VAR 0 3
41870: PPUSH
41871: CALL_OW 289
41875: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
41876: LD_ADDR_VAR 0 2
41880: PUSH
41881: LD_VAR 0 2
41885: PPUSH
41886: LD_VAR 0 3
41890: PPUSH
41891: LD_VAR 0 4
41895: PPUSH
41896: CALL_OW 1
41900: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
41901: LD_ADDR_VAR 0 2
41905: PUSH
41906: LD_VAR 0 2
41910: PPUSH
41911: LD_INT 4
41913: PPUSH
41914: LD_VAR 0 2
41918: PUSH
41919: LD_INT 4
41921: ARRAY
41922: PUSH
41923: LD_VAR 0 4
41927: PLUS
41928: PPUSH
41929: CALL_OW 1
41933: ST_TO_ADDR
// end ;
41934: GO 41853
41936: POP
41937: POP
// end ;
41938: LD_VAR 0 2
41942: RET
// export function Length ( array ) ; begin
41943: LD_INT 0
41945: PPUSH
// result := array + 0 ;
41946: LD_ADDR_VAR 0 2
41950: PUSH
41951: LD_VAR 0 1
41955: PUSH
41956: LD_INT 0
41958: PLUS
41959: ST_TO_ADDR
// end ;
41960: LD_VAR 0 2
41964: RET
// export function PrepareArray ( array ) ; begin
41965: LD_INT 0
41967: PPUSH
// result := array diff 0 ;
41968: LD_ADDR_VAR 0 2
41972: PUSH
41973: LD_VAR 0 1
41977: PUSH
41978: LD_INT 0
41980: DIFF
41981: ST_TO_ADDR
// if not result [ 1 ] then
41982: LD_VAR 0 2
41986: PUSH
41987: LD_INT 1
41989: ARRAY
41990: NOT
41991: IFFALSE 42011
// result := Delete ( result , 1 ) ;
41993: LD_ADDR_VAR 0 2
41997: PUSH
41998: LD_VAR 0 2
42002: PPUSH
42003: LD_INT 1
42005: PPUSH
42006: CALL_OW 3
42010: ST_TO_ADDR
// end ;
42011: LD_VAR 0 2
42015: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42016: LD_INT 0
42018: PPUSH
42019: PPUSH
42020: PPUSH
42021: PPUSH
// sibRocketRange := 25 ;
42022: LD_ADDR_VAR 0 6
42026: PUSH
42027: LD_INT 25
42029: ST_TO_ADDR
// result := false ;
42030: LD_ADDR_VAR 0 4
42034: PUSH
42035: LD_INT 0
42037: ST_TO_ADDR
// for i := 0 to 5 do
42038: LD_ADDR_VAR 0 5
42042: PUSH
42043: DOUBLE
42044: LD_INT 0
42046: DEC
42047: ST_TO_ADDR
42048: LD_INT 5
42050: PUSH
42051: FOR_TO
42052: IFFALSE 42119
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 5
42063: PPUSH
42064: LD_VAR 0 6
42068: PPUSH
42069: CALL_OW 272
42073: PPUSH
42074: LD_VAR 0 2
42078: PPUSH
42079: LD_VAR 0 5
42083: PPUSH
42084: LD_VAR 0 6
42088: PPUSH
42089: CALL_OW 273
42093: PPUSH
42094: LD_VAR 0 3
42098: PPUSH
42099: CALL_OW 309
42103: IFFALSE 42117
// begin result := true ;
42105: LD_ADDR_VAR 0 4
42109: PUSH
42110: LD_INT 1
42112: ST_TO_ADDR
// exit ;
42113: POP
42114: POP
42115: GO 42121
// end ;
42117: GO 42051
42119: POP
42120: POP
// end ;
42121: LD_VAR 0 4
42125: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42126: LD_INT 0
42128: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42129: LD_VAR 0 1
42133: PPUSH
42134: LD_VAR 0 2
42138: PPUSH
42139: LD_INT 0
42141: PPUSH
42142: LD_INT 0
42144: PPUSH
42145: LD_INT 1
42147: PPUSH
42148: LD_INT 0
42150: PPUSH
42151: CALL_OW 587
// end ;
42155: LD_VAR 0 3
42159: RET
// export function CenterOnNow ( unit ) ; begin
42160: LD_INT 0
42162: PPUSH
// result := IsInUnit ( unit ) ;
42163: LD_ADDR_VAR 0 2
42167: PUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 310
42177: ST_TO_ADDR
// if not result then
42178: LD_VAR 0 2
42182: NOT
42183: IFFALSE 42195
// result := unit ;
42185: LD_ADDR_VAR 0 2
42189: PUSH
42190: LD_VAR 0 1
42194: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42195: LD_VAR 0 1
42199: PPUSH
42200: CALL_OW 87
// end ;
42204: LD_VAR 0 2
42208: RET
// export function ComMoveHex ( unit , hex ) ; begin
42209: LD_INT 0
42211: PPUSH
// if not hex then
42212: LD_VAR 0 2
42216: NOT
42217: IFFALSE 42221
// exit ;
42219: GO 42274
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42221: LD_VAR 0 2
42225: PUSH
42226: LD_INT 1
42228: ARRAY
42229: PPUSH
42230: LD_VAR 0 2
42234: PUSH
42235: LD_INT 2
42237: ARRAY
42238: PPUSH
42239: CALL_OW 428
42243: IFFALSE 42247
// exit ;
42245: GO 42274
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42247: LD_VAR 0 1
42251: PPUSH
42252: LD_VAR 0 2
42256: PUSH
42257: LD_INT 1
42259: ARRAY
42260: PPUSH
42261: LD_VAR 0 2
42265: PUSH
42266: LD_INT 2
42268: ARRAY
42269: PPUSH
42270: CALL_OW 111
// end ;
42274: LD_VAR 0 3
42278: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42279: LD_INT 0
42281: PPUSH
42282: PPUSH
42283: PPUSH
// if not unit or not enemy then
42284: LD_VAR 0 1
42288: NOT
42289: PUSH
42290: LD_VAR 0 2
42294: NOT
42295: OR
42296: IFFALSE 42300
// exit ;
42298: GO 42424
// x := GetX ( enemy ) ;
42300: LD_ADDR_VAR 0 4
42304: PUSH
42305: LD_VAR 0 2
42309: PPUSH
42310: CALL_OW 250
42314: ST_TO_ADDR
// y := GetY ( enemy ) ;
42315: LD_ADDR_VAR 0 5
42319: PUSH
42320: LD_VAR 0 2
42324: PPUSH
42325: CALL_OW 251
42329: ST_TO_ADDR
// if ValidHex ( x , y ) then
42330: LD_VAR 0 4
42334: PPUSH
42335: LD_VAR 0 5
42339: PPUSH
42340: CALL_OW 488
42344: IFFALSE 42424
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42346: LD_VAR 0 2
42350: PPUSH
42351: CALL_OW 247
42355: PUSH
42356: LD_INT 3
42358: PUSH
42359: LD_INT 2
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: IN
42366: PUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 255
42376: PPUSH
42377: LD_VAR 0 2
42381: PPUSH
42382: CALL_OW 292
42386: OR
42387: IFFALSE 42405
// ComAttackUnit ( unit , enemy ) else
42389: LD_VAR 0 1
42393: PPUSH
42394: LD_VAR 0 2
42398: PPUSH
42399: CALL_OW 115
42403: GO 42424
// ComAgressiveMove ( unit , x , y ) ;
42405: LD_VAR 0 1
42409: PPUSH
42410: LD_VAR 0 4
42414: PPUSH
42415: LD_VAR 0 5
42419: PPUSH
42420: CALL_OW 114
// end ;
42424: LD_VAR 0 3
42428: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42429: LD_INT 0
42431: PPUSH
42432: PPUSH
42433: PPUSH
// list := AreaToList ( area , 0 ) ;
42434: LD_ADDR_VAR 0 5
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: LD_INT 0
42446: PPUSH
42447: CALL_OW 517
42451: ST_TO_ADDR
// if not list then
42452: LD_VAR 0 5
42456: NOT
42457: IFFALSE 42461
// exit ;
42459: GO 42591
// if all then
42461: LD_VAR 0 2
42465: IFFALSE 42553
// begin for i := 1 to list [ 1 ] do
42467: LD_ADDR_VAR 0 4
42471: PUSH
42472: DOUBLE
42473: LD_INT 1
42475: DEC
42476: ST_TO_ADDR
42477: LD_VAR 0 5
42481: PUSH
42482: LD_INT 1
42484: ARRAY
42485: PUSH
42486: FOR_TO
42487: IFFALSE 42549
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42489: LD_ADDR_VAR 0 3
42493: PUSH
42494: LD_VAR 0 3
42498: PPUSH
42499: LD_VAR 0 3
42503: PUSH
42504: LD_INT 1
42506: PLUS
42507: PPUSH
42508: LD_VAR 0 5
42512: PUSH
42513: LD_INT 1
42515: ARRAY
42516: PUSH
42517: LD_VAR 0 4
42521: ARRAY
42522: PUSH
42523: LD_VAR 0 5
42527: PUSH
42528: LD_INT 2
42530: ARRAY
42531: PUSH
42532: LD_VAR 0 4
42536: ARRAY
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PPUSH
42542: CALL_OW 1
42546: ST_TO_ADDR
42547: GO 42486
42549: POP
42550: POP
// exit ;
42551: GO 42591
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42553: LD_ADDR_VAR 0 3
42557: PUSH
42558: LD_VAR 0 5
42562: PUSH
42563: LD_INT 1
42565: ARRAY
42566: PUSH
42567: LD_INT 1
42569: ARRAY
42570: PUSH
42571: LD_VAR 0 5
42575: PUSH
42576: LD_INT 2
42578: ARRAY
42579: PUSH
42580: LD_INT 1
42582: ARRAY
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: EMPTY
42589: LIST
42590: ST_TO_ADDR
// end ;
42591: LD_VAR 0 3
42595: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42596: LD_INT 0
42598: PPUSH
42599: PPUSH
// list := AreaToList ( area , 0 ) ;
42600: LD_ADDR_VAR 0 4
42604: PUSH
42605: LD_VAR 0 1
42609: PPUSH
42610: LD_INT 0
42612: PPUSH
42613: CALL_OW 517
42617: ST_TO_ADDR
// if not list then
42618: LD_VAR 0 4
42622: NOT
42623: IFFALSE 42627
// exit ;
42625: GO 42668
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_VAR 0 4
42636: PUSH
42637: LD_INT 1
42639: ARRAY
42640: PUSH
42641: LD_INT 1
42643: ARRAY
42644: PUSH
42645: LD_VAR 0 4
42649: PUSH
42650: LD_INT 2
42652: ARRAY
42653: PUSH
42654: LD_INT 1
42656: ARRAY
42657: PUSH
42658: LD_VAR 0 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
// end ;
42668: LD_VAR 0 3
42672: RET
// export function First ( array ) ; begin
42673: LD_INT 0
42675: PPUSH
// if not array then
42676: LD_VAR 0 1
42680: NOT
42681: IFFALSE 42685
// exit ;
42683: GO 42699
// result := array [ 1 ] ;
42685: LD_ADDR_VAR 0 2
42689: PUSH
42690: LD_VAR 0 1
42694: PUSH
42695: LD_INT 1
42697: ARRAY
42698: ST_TO_ADDR
// end ;
42699: LD_VAR 0 2
42703: RET
// export function Last ( array ) ; begin
42704: LD_INT 0
42706: PPUSH
// if not array then
42707: LD_VAR 0 1
42711: NOT
42712: IFFALSE 42716
// exit ;
42714: GO 42732
// result := array [ array ] ;
42716: LD_ADDR_VAR 0 2
42720: PUSH
42721: LD_VAR 0 1
42725: PUSH
42726: LD_VAR 0 1
42730: ARRAY
42731: ST_TO_ADDR
// end ;
42732: LD_VAR 0 2
42736: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
42737: LD_INT 0
42739: PPUSH
42740: PPUSH
// result := [ ] ;
42741: LD_ADDR_VAR 0 5
42745: PUSH
42746: EMPTY
42747: ST_TO_ADDR
// if not array then
42748: LD_VAR 0 1
42752: NOT
42753: IFFALSE 42757
// exit ;
42755: GO 42869
// for i := 1 to array do
42757: LD_ADDR_VAR 0 6
42761: PUSH
42762: DOUBLE
42763: LD_INT 1
42765: DEC
42766: ST_TO_ADDR
42767: LD_VAR 0 1
42771: PUSH
42772: FOR_TO
42773: IFFALSE 42867
// if array [ i ] [ index ] = value then
42775: LD_VAR 0 1
42779: PUSH
42780: LD_VAR 0 6
42784: ARRAY
42785: PUSH
42786: LD_VAR 0 2
42790: ARRAY
42791: PUSH
42792: LD_VAR 0 3
42796: EQUAL
42797: IFFALSE 42865
// begin if indexColumn then
42799: LD_VAR 0 4
42803: IFFALSE 42839
// result := Join ( result , array [ i ] [ indexColumn ] ) else
42805: LD_ADDR_VAR 0 5
42809: PUSH
42810: LD_VAR 0 5
42814: PPUSH
42815: LD_VAR 0 1
42819: PUSH
42820: LD_VAR 0 6
42824: ARRAY
42825: PUSH
42826: LD_VAR 0 4
42830: ARRAY
42831: PPUSH
42832: CALL 38207 0 2
42836: ST_TO_ADDR
42837: GO 42865
// result := Join ( result , array [ i ] ) ;
42839: LD_ADDR_VAR 0 5
42843: PUSH
42844: LD_VAR 0 5
42848: PPUSH
42849: LD_VAR 0 1
42853: PUSH
42854: LD_VAR 0 6
42858: ARRAY
42859: PPUSH
42860: CALL 38207 0 2
42864: ST_TO_ADDR
// end ;
42865: GO 42772
42867: POP
42868: POP
// end ;
42869: LD_VAR 0 5
42873: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42874: LD_INT 0
42876: PPUSH
42877: PPUSH
42878: PPUSH
// if btype = b_depot then
42879: LD_VAR 0 2
42883: PUSH
42884: LD_INT 0
42886: EQUAL
42887: IFFALSE 42899
// begin result := true ;
42889: LD_ADDR_VAR 0 3
42893: PUSH
42894: LD_INT 1
42896: ST_TO_ADDR
// exit ;
42897: GO 43015
// end ; pom := GetBase ( depot ) ;
42899: LD_ADDR_VAR 0 4
42903: PUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 274
42913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42914: LD_ADDR_VAR 0 5
42918: PUSH
42919: LD_VAR 0 2
42923: PPUSH
42924: LD_VAR 0 1
42928: PPUSH
42929: CALL_OW 248
42933: PPUSH
42934: CALL_OW 450
42938: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: LD_INT 1
42951: PPUSH
42952: CALL_OW 275
42956: PUSH
42957: LD_VAR 0 5
42961: PUSH
42962: LD_INT 1
42964: ARRAY
42965: GREATEREQUAL
42966: PUSH
42967: LD_VAR 0 4
42971: PPUSH
42972: LD_INT 2
42974: PPUSH
42975: CALL_OW 275
42979: PUSH
42980: LD_VAR 0 5
42984: PUSH
42985: LD_INT 2
42987: ARRAY
42988: GREATEREQUAL
42989: AND
42990: PUSH
42991: LD_VAR 0 4
42995: PPUSH
42996: LD_INT 3
42998: PPUSH
42999: CALL_OW 275
43003: PUSH
43004: LD_VAR 0 5
43008: PUSH
43009: LD_INT 3
43011: ARRAY
43012: GREATEREQUAL
43013: AND
43014: ST_TO_ADDR
// end ;
43015: LD_VAR 0 3
43019: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43020: LD_INT 0
43022: PPUSH
// if not vehicles or not parkingPoint then
43023: LD_VAR 0 1
43027: NOT
43028: PUSH
43029: LD_VAR 0 2
43033: NOT
43034: OR
43035: IFFALSE 43039
// exit ;
43037: GO 43137
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43039: LD_ADDR_VAR 0 1
43043: PUSH
43044: LD_VAR 0 1
43048: PPUSH
43049: LD_INT 50
43051: PUSH
43052: EMPTY
43053: LIST
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: LD_INT 92
43060: PUSH
43061: LD_VAR 0 2
43065: PUSH
43066: LD_INT 1
43068: ARRAY
43069: PUSH
43070: LD_VAR 0 2
43074: PUSH
43075: LD_INT 2
43077: ARRAY
43078: PUSH
43079: LD_INT 8
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PPUSH
43096: CALL_OW 72
43100: ST_TO_ADDR
// if not vehicles then
43101: LD_VAR 0 1
43105: NOT
43106: IFFALSE 43110
// exit ;
43108: GO 43137
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43110: LD_VAR 0 1
43114: PPUSH
43115: LD_VAR 0 2
43119: PUSH
43120: LD_INT 1
43122: ARRAY
43123: PPUSH
43124: LD_VAR 0 2
43128: PUSH
43129: LD_INT 2
43131: ARRAY
43132: PPUSH
43133: CALL_OW 111
// end ;
43137: LD_VAR 0 3
43141: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43142: LD_INT 0
43144: PPUSH
43145: PPUSH
43146: PPUSH
// if not side or not area then
43147: LD_VAR 0 1
43151: NOT
43152: PUSH
43153: LD_VAR 0 2
43157: NOT
43158: OR
43159: IFFALSE 43163
// exit ;
43161: GO 43282
// tmp := AreaToList ( area , 0 ) ;
43163: LD_ADDR_VAR 0 5
43167: PUSH
43168: LD_VAR 0 2
43172: PPUSH
43173: LD_INT 0
43175: PPUSH
43176: CALL_OW 517
43180: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43181: LD_ADDR_VAR 0 4
43185: PUSH
43186: DOUBLE
43187: LD_INT 1
43189: DEC
43190: ST_TO_ADDR
43191: LD_VAR 0 5
43195: PUSH
43196: LD_INT 1
43198: ARRAY
43199: PUSH
43200: FOR_TO
43201: IFFALSE 43280
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43203: LD_VAR 0 5
43207: PUSH
43208: LD_INT 1
43210: ARRAY
43211: PUSH
43212: LD_VAR 0 4
43216: ARRAY
43217: PPUSH
43218: LD_VAR 0 5
43222: PUSH
43223: LD_INT 2
43225: ARRAY
43226: PUSH
43227: LD_VAR 0 4
43231: ARRAY
43232: PPUSH
43233: CALL_OW 351
43237: IFFALSE 43278
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43239: LD_VAR 0 5
43243: PUSH
43244: LD_INT 1
43246: ARRAY
43247: PUSH
43248: LD_VAR 0 4
43252: ARRAY
43253: PPUSH
43254: LD_VAR 0 5
43258: PUSH
43259: LD_INT 2
43261: ARRAY
43262: PUSH
43263: LD_VAR 0 4
43267: ARRAY
43268: PPUSH
43269: LD_VAR 0 1
43273: PPUSH
43274: CALL_OW 244
// end ;
43278: GO 43200
43280: POP
43281: POP
// end ; end_of_file
43282: LD_VAR 0 3
43286: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
43287: LD_VAR 0 1
43291: PPUSH
43292: LD_VAR 0 2
43296: PPUSH
43297: LD_VAR 0 3
43301: PPUSH
43302: LD_VAR 0 4
43306: PPUSH
43307: LD_VAR 0 5
43311: PPUSH
43312: LD_VAR 0 6
43316: PPUSH
43317: CALL 48575 0 6
// end ;
43321: PPOPN 6
43323: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
43324: LD_INT 0
43326: PPUSH
// begin if not units then
43327: LD_VAR 0 1
43331: NOT
43332: IFFALSE 43336
// exit ;
43334: GO 43336
// end ;
43336: PPOPN 7
43338: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
43339: CALL 48462 0 0
// end ; end_of_file
43343: PPOPN 1
43345: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
43346: LD_VAR 0 1
43350: PUSH
43351: LD_INT 200
43353: DOUBLE
43354: GREATEREQUAL
43355: IFFALSE 43363
43357: LD_INT 299
43359: DOUBLE
43360: LESSEQUAL
43361: IFTRUE 43365
43363: GO 43397
43365: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
43366: LD_VAR 0 1
43370: PPUSH
43371: LD_VAR 0 2
43375: PPUSH
43376: LD_VAR 0 3
43380: PPUSH
43381: LD_VAR 0 4
43385: PPUSH
43386: LD_VAR 0 5
43390: PPUSH
43391: CALL 43885 0 5
43395: GO 43474
43397: LD_INT 300
43399: DOUBLE
43400: GREATEREQUAL
43401: IFFALSE 43409
43403: LD_INT 399
43405: DOUBLE
43406: LESSEQUAL
43407: IFTRUE 43411
43409: GO 43473
43411: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
43412: LD_VAR 0 1
43416: PPUSH
43417: LD_VAR 0 2
43421: PPUSH
43422: LD_VAR 0 3
43426: PPUSH
43427: LD_VAR 0 4
43431: PPUSH
43432: LD_VAR 0 5
43436: PPUSH
43437: LD_VAR 0 6
43441: PPUSH
43442: LD_VAR 0 7
43446: PPUSH
43447: LD_VAR 0 8
43451: PPUSH
43452: LD_VAR 0 9
43456: PPUSH
43457: LD_VAR 0 10
43461: PPUSH
43462: LD_VAR 0 11
43466: PPUSH
43467: CALL 60923 0 11
43471: GO 43474
43473: POP
// end ;
43474: PPOPN 11
43476: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
43477: LD_VAR 0 1
43481: PPUSH
43482: LD_VAR 0 2
43486: PPUSH
43487: LD_VAR 0 3
43491: PPUSH
43492: LD_VAR 0 4
43496: PPUSH
43497: LD_VAR 0 5
43501: PPUSH
43502: CALL 43621 0 5
// end ; end_of_file
43506: PPOPN 5
43508: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
43509: LD_INT 0
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 264
43524: PUSH
43525: LD_INT 91
43527: EQUAL
43528: IFFALSE 43600
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43530: LD_INT 68
43532: PPUSH
43533: LD_VAR 0 1
43537: PPUSH
43538: CALL_OW 255
43542: PPUSH
43543: CALL_OW 321
43547: PUSH
43548: LD_INT 2
43550: EQUAL
43551: IFFALSE 43563
// eff := 70 else
43553: LD_ADDR_VAR 0 4
43557: PUSH
43558: LD_INT 70
43560: ST_TO_ADDR
43561: GO 43571
// eff := 30 ;
43563: LD_ADDR_VAR 0 4
43567: PUSH
43568: LD_INT 30
43570: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43571: LD_VAR 0 1
43575: PPUSH
43576: CALL_OW 250
43580: PPUSH
43581: LD_VAR 0 1
43585: PPUSH
43586: CALL_OW 251
43590: PPUSH
43591: LD_VAR 0 4
43595: PPUSH
43596: CALL_OW 495
// end ; end ;
43600: LD_VAR 0 2
43604: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43605: LD_INT 0
43607: PPUSH
// end ;
43608: LD_VAR 0 4
43612: RET
// export function SOS_Command ( cmd ) ; begin
43613: LD_INT 0
43615: PPUSH
// end ;
43616: LD_VAR 0 2
43620: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43621: LD_INT 0
43623: PPUSH
// end ;
43624: LD_VAR 0 6
43628: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
43629: LD_INT 0
43631: PPUSH
43632: PPUSH
// if not vehicle or not factory then
43633: LD_VAR 0 1
43637: NOT
43638: PUSH
43639: LD_VAR 0 2
43643: NOT
43644: OR
43645: IFFALSE 43649
// exit ;
43647: GO 43880
// if factoryWaypoints >= factory then
43649: LD_EXP 71
43653: PUSH
43654: LD_VAR 0 2
43658: GREATEREQUAL
43659: IFFALSE 43880
// if factoryWaypoints [ factory ] then
43661: LD_EXP 71
43665: PUSH
43666: LD_VAR 0 2
43670: ARRAY
43671: IFFALSE 43880
// begin if GetControl ( vehicle ) = control_manual then
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 263
43682: PUSH
43683: LD_INT 1
43685: EQUAL
43686: IFFALSE 43767
// begin driver := IsDrivenBy ( vehicle ) ;
43688: LD_ADDR_VAR 0 4
43692: PUSH
43693: LD_VAR 0 1
43697: PPUSH
43698: CALL_OW 311
43702: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
43703: LD_VAR 0 4
43707: PPUSH
43708: LD_EXP 71
43712: PUSH
43713: LD_VAR 0 2
43717: ARRAY
43718: PUSH
43719: LD_INT 3
43721: ARRAY
43722: PPUSH
43723: LD_EXP 71
43727: PUSH
43728: LD_VAR 0 2
43732: ARRAY
43733: PUSH
43734: LD_INT 4
43736: ARRAY
43737: PPUSH
43738: CALL_OW 171
// AddComExitVehicle ( driver ) ;
43742: LD_VAR 0 4
43746: PPUSH
43747: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
43751: LD_VAR 0 4
43755: PPUSH
43756: LD_VAR 0 2
43760: PPUSH
43761: CALL_OW 180
// end else
43765: GO 43880
// if GetControl ( vehicle ) = control_remote then
43767: LD_VAR 0 1
43771: PPUSH
43772: CALL_OW 263
43776: PUSH
43777: LD_INT 2
43779: EQUAL
43780: IFFALSE 43841
// begin wait ( 0 0$2 ) ;
43782: LD_INT 70
43784: PPUSH
43785: CALL_OW 67
// if Connect ( vehicle ) then
43789: LD_VAR 0 1
43793: PPUSH
43794: CALL 8824 0 1
43798: IFFALSE 43839
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
43800: LD_VAR 0 1
43804: PPUSH
43805: LD_EXP 71
43809: PUSH
43810: LD_VAR 0 2
43814: ARRAY
43815: PUSH
43816: LD_INT 3
43818: ARRAY
43819: PPUSH
43820: LD_EXP 71
43824: PUSH
43825: LD_VAR 0 2
43829: ARRAY
43830: PUSH
43831: LD_INT 4
43833: ARRAY
43834: PPUSH
43835: CALL_OW 171
// end else
43839: GO 43880
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
43841: LD_VAR 0 1
43845: PPUSH
43846: LD_EXP 71
43850: PUSH
43851: LD_VAR 0 2
43855: ARRAY
43856: PUSH
43857: LD_INT 3
43859: ARRAY
43860: PPUSH
43861: LD_EXP 71
43865: PUSH
43866: LD_VAR 0 2
43870: ARRAY
43871: PUSH
43872: LD_INT 4
43874: ARRAY
43875: PPUSH
43876: CALL_OW 171
// end ; end ;
43880: LD_VAR 0 3
43884: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43885: LD_INT 0
43887: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43888: LD_VAR 0 1
43892: PUSH
43893: LD_INT 250
43895: EQUAL
43896: PUSH
43897: LD_VAR 0 2
43901: PPUSH
43902: CALL_OW 264
43906: PUSH
43907: LD_INT 81
43909: EQUAL
43910: AND
43911: IFFALSE 43932
// MinerPlaceMine ( unit , x , y ) ;
43913: LD_VAR 0 2
43917: PPUSH
43918: LD_VAR 0 4
43922: PPUSH
43923: LD_VAR 0 5
43927: PPUSH
43928: CALL 46922 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43932: LD_VAR 0 1
43936: PUSH
43937: LD_INT 251
43939: EQUAL
43940: PUSH
43941: LD_VAR 0 2
43945: PPUSH
43946: CALL_OW 264
43950: PUSH
43951: LD_INT 81
43953: EQUAL
43954: AND
43955: IFFALSE 43976
// MinerDetonateMine ( unit , x , y ) ;
43957: LD_VAR 0 2
43961: PPUSH
43962: LD_VAR 0 4
43966: PPUSH
43967: LD_VAR 0 5
43971: PPUSH
43972: CALL 47197 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43976: LD_VAR 0 1
43980: PUSH
43981: LD_INT 252
43983: EQUAL
43984: PUSH
43985: LD_VAR 0 2
43989: PPUSH
43990: CALL_OW 264
43994: PUSH
43995: LD_INT 81
43997: EQUAL
43998: AND
43999: IFFALSE 44020
// MinerCreateMinefield ( unit , x , y ) ;
44001: LD_VAR 0 2
44005: PPUSH
44006: LD_VAR 0 4
44010: PPUSH
44011: LD_VAR 0 5
44015: PPUSH
44016: CALL 47614 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
44020: LD_VAR 0 1
44024: PUSH
44025: LD_INT 253
44027: EQUAL
44028: PUSH
44029: LD_VAR 0 2
44033: PPUSH
44034: CALL_OW 257
44038: PUSH
44039: LD_INT 5
44041: EQUAL
44042: AND
44043: IFFALSE 44064
// ComBinocular ( unit , x , y ) ;
44045: LD_VAR 0 2
44049: PPUSH
44050: LD_VAR 0 4
44054: PPUSH
44055: LD_VAR 0 5
44059: PPUSH
44060: CALL 47983 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
44064: LD_VAR 0 1
44068: PUSH
44069: LD_INT 254
44071: EQUAL
44072: PUSH
44073: LD_VAR 0 2
44077: PPUSH
44078: CALL_OW 264
44082: PUSH
44083: LD_INT 99
44085: EQUAL
44086: AND
44087: PUSH
44088: LD_VAR 0 3
44092: PPUSH
44093: CALL_OW 263
44097: PUSH
44098: LD_INT 3
44100: EQUAL
44101: AND
44102: IFFALSE 44118
// HackDestroyVehicle ( unit , selectedUnit ) ;
44104: LD_VAR 0 2
44108: PPUSH
44109: LD_VAR 0 3
44113: PPUSH
44114: CALL 46286 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
44118: LD_VAR 0 1
44122: PUSH
44123: LD_INT 255
44125: EQUAL
44126: PUSH
44127: LD_VAR 0 2
44131: PPUSH
44132: CALL_OW 264
44136: PUSH
44137: LD_INT 14
44139: PUSH
44140: LD_INT 53
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: IN
44147: AND
44148: PUSH
44149: LD_VAR 0 4
44153: PPUSH
44154: LD_VAR 0 5
44158: PPUSH
44159: CALL_OW 488
44163: AND
44164: IFFALSE 44188
// CutTreeXYR ( unit , x , y , 12 ) ;
44166: LD_VAR 0 2
44170: PPUSH
44171: LD_VAR 0 4
44175: PPUSH
44176: LD_VAR 0 5
44180: PPUSH
44181: LD_INT 12
44183: PPUSH
44184: CALL 44283 0 4
// if cmd = 256 then
44188: LD_VAR 0 1
44192: PUSH
44193: LD_INT 256
44195: EQUAL
44196: IFFALSE 44217
// SetFactoryWaypoint ( unit , x , y ) ;
44198: LD_VAR 0 2
44202: PPUSH
44203: LD_VAR 0 4
44207: PPUSH
44208: LD_VAR 0 5
44212: PPUSH
44213: CALL 62911 0 3
// if cmd = 257 then
44217: LD_VAR 0 1
44221: PUSH
44222: LD_INT 257
44224: EQUAL
44225: IFFALSE 44246
// SetWarehouseGatheringPoint ( unit , x , y ) ;
44227: LD_VAR 0 2
44231: PPUSH
44232: LD_VAR 0 4
44236: PPUSH
44237: LD_VAR 0 5
44241: PPUSH
44242: CALL 63273 0 3
// if cmd = 258 then
44246: LD_VAR 0 1
44250: PUSH
44251: LD_INT 258
44253: EQUAL
44254: IFFALSE 44278
// BurnTreeXYR ( unit , x , y , 8 ) ;
44256: LD_VAR 0 2
44260: PPUSH
44261: LD_VAR 0 4
44265: PPUSH
44266: LD_VAR 0 5
44270: PPUSH
44271: LD_INT 8
44273: PPUSH
44274: CALL 44677 0 4
// end ;
44278: LD_VAR 0 6
44282: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
44291: PPUSH
44292: PPUSH
44293: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
44294: LD_VAR 0 1
44298: PPUSH
44299: CALL_OW 302
44303: NOT
44304: PUSH
44305: LD_VAR 0 2
44309: PPUSH
44310: LD_VAR 0 3
44314: PPUSH
44315: CALL_OW 488
44319: NOT
44320: OR
44321: PUSH
44322: LD_VAR 0 4
44326: NOT
44327: OR
44328: IFFALSE 44332
// exit ;
44330: GO 44672
// list := [ ] ;
44332: LD_ADDR_VAR 0 13
44336: PUSH
44337: EMPTY
44338: ST_TO_ADDR
// if x - r < 0 then
44339: LD_VAR 0 2
44343: PUSH
44344: LD_VAR 0 4
44348: MINUS
44349: PUSH
44350: LD_INT 0
44352: LESS
44353: IFFALSE 44365
// min_x := 0 else
44355: LD_ADDR_VAR 0 7
44359: PUSH
44360: LD_INT 0
44362: ST_TO_ADDR
44363: GO 44381
// min_x := x - r ;
44365: LD_ADDR_VAR 0 7
44369: PUSH
44370: LD_VAR 0 2
44374: PUSH
44375: LD_VAR 0 4
44379: MINUS
44380: ST_TO_ADDR
// if y - r < 0 then
44381: LD_VAR 0 3
44385: PUSH
44386: LD_VAR 0 4
44390: MINUS
44391: PUSH
44392: LD_INT 0
44394: LESS
44395: IFFALSE 44407
// min_y := 0 else
44397: LD_ADDR_VAR 0 8
44401: PUSH
44402: LD_INT 0
44404: ST_TO_ADDR
44405: GO 44423
// min_y := y - r ;
44407: LD_ADDR_VAR 0 8
44411: PUSH
44412: LD_VAR 0 3
44416: PUSH
44417: LD_VAR 0 4
44421: MINUS
44422: ST_TO_ADDR
// max_x := x + r ;
44423: LD_ADDR_VAR 0 9
44427: PUSH
44428: LD_VAR 0 2
44432: PUSH
44433: LD_VAR 0 4
44437: PLUS
44438: ST_TO_ADDR
// max_y := y + r ;
44439: LD_ADDR_VAR 0 10
44443: PUSH
44444: LD_VAR 0 3
44448: PUSH
44449: LD_VAR 0 4
44453: PLUS
44454: ST_TO_ADDR
// for _x = min_x to max_x do
44455: LD_ADDR_VAR 0 11
44459: PUSH
44460: DOUBLE
44461: LD_VAR 0 7
44465: DEC
44466: ST_TO_ADDR
44467: LD_VAR 0 9
44471: PUSH
44472: FOR_TO
44473: IFFALSE 44590
// for _y = min_y to max_y do
44475: LD_ADDR_VAR 0 12
44479: PUSH
44480: DOUBLE
44481: LD_VAR 0 8
44485: DEC
44486: ST_TO_ADDR
44487: LD_VAR 0 10
44491: PUSH
44492: FOR_TO
44493: IFFALSE 44586
// begin if not ValidHex ( _x , _y ) then
44495: LD_VAR 0 11
44499: PPUSH
44500: LD_VAR 0 12
44504: PPUSH
44505: CALL_OW 488
44509: NOT
44510: IFFALSE 44514
// continue ;
44512: GO 44492
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44514: LD_VAR 0 11
44518: PPUSH
44519: LD_VAR 0 12
44523: PPUSH
44524: CALL_OW 351
44528: PUSH
44529: LD_VAR 0 11
44533: PPUSH
44534: LD_VAR 0 12
44538: PPUSH
44539: CALL_OW 554
44543: AND
44544: IFFALSE 44584
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44546: LD_ADDR_VAR 0 13
44550: PUSH
44551: LD_VAR 0 13
44555: PPUSH
44556: LD_VAR 0 13
44560: PUSH
44561: LD_INT 1
44563: PLUS
44564: PPUSH
44565: LD_VAR 0 11
44569: PUSH
44570: LD_VAR 0 12
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PPUSH
44579: CALL_OW 2
44583: ST_TO_ADDR
// end ;
44584: GO 44492
44586: POP
44587: POP
44588: GO 44472
44590: POP
44591: POP
// if not list then
44592: LD_VAR 0 13
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 44672
// for i in list do
44601: LD_ADDR_VAR 0 6
44605: PUSH
44606: LD_VAR 0 13
44610: PUSH
44611: FOR_IN
44612: IFFALSE 44670
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
44614: LD_VAR 0 1
44618: PPUSH
44619: LD_STRING M
44621: PUSH
44622: LD_VAR 0 6
44626: PUSH
44627: LD_INT 1
44629: ARRAY
44630: PUSH
44631: LD_VAR 0 6
44635: PUSH
44636: LD_INT 2
44638: ARRAY
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: PUSH
44661: EMPTY
44662: LIST
44663: PPUSH
44664: CALL_OW 447
44668: GO 44611
44670: POP
44671: POP
// end ;
44672: LD_VAR 0 5
44676: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
44677: LD_INT 0
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
44689: LD_VAR 0 1
44693: PPUSH
44694: CALL_OW 302
44698: NOT
44699: PUSH
44700: LD_VAR 0 2
44704: PPUSH
44705: LD_VAR 0 3
44709: PPUSH
44710: CALL_OW 488
44714: NOT
44715: OR
44716: PUSH
44717: LD_VAR 0 4
44721: NOT
44722: OR
44723: IFFALSE 44727
// exit ;
44725: GO 45240
// list := [ ] ;
44727: LD_ADDR_VAR 0 13
44731: PUSH
44732: EMPTY
44733: ST_TO_ADDR
// if x - r < 0 then
44734: LD_VAR 0 2
44738: PUSH
44739: LD_VAR 0 4
44743: MINUS
44744: PUSH
44745: LD_INT 0
44747: LESS
44748: IFFALSE 44760
// min_x := 0 else
44750: LD_ADDR_VAR 0 7
44754: PUSH
44755: LD_INT 0
44757: ST_TO_ADDR
44758: GO 44776
// min_x := x - r ;
44760: LD_ADDR_VAR 0 7
44764: PUSH
44765: LD_VAR 0 2
44769: PUSH
44770: LD_VAR 0 4
44774: MINUS
44775: ST_TO_ADDR
// if y - r < 0 then
44776: LD_VAR 0 3
44780: PUSH
44781: LD_VAR 0 4
44785: MINUS
44786: PUSH
44787: LD_INT 0
44789: LESS
44790: IFFALSE 44802
// min_y := 0 else
44792: LD_ADDR_VAR 0 8
44796: PUSH
44797: LD_INT 0
44799: ST_TO_ADDR
44800: GO 44818
// min_y := y - r ;
44802: LD_ADDR_VAR 0 8
44806: PUSH
44807: LD_VAR 0 3
44811: PUSH
44812: LD_VAR 0 4
44816: MINUS
44817: ST_TO_ADDR
// max_x := x + r ;
44818: LD_ADDR_VAR 0 9
44822: PUSH
44823: LD_VAR 0 2
44827: PUSH
44828: LD_VAR 0 4
44832: PLUS
44833: ST_TO_ADDR
// max_y := y + r ;
44834: LD_ADDR_VAR 0 10
44838: PUSH
44839: LD_VAR 0 3
44843: PUSH
44844: LD_VAR 0 4
44848: PLUS
44849: ST_TO_ADDR
// for _x = min_x to max_x do
44850: LD_ADDR_VAR 0 11
44854: PUSH
44855: DOUBLE
44856: LD_VAR 0 7
44860: DEC
44861: ST_TO_ADDR
44862: LD_VAR 0 9
44866: PUSH
44867: FOR_TO
44868: IFFALSE 44985
// for _y = min_y to max_y do
44870: LD_ADDR_VAR 0 12
44874: PUSH
44875: DOUBLE
44876: LD_VAR 0 8
44880: DEC
44881: ST_TO_ADDR
44882: LD_VAR 0 10
44886: PUSH
44887: FOR_TO
44888: IFFALSE 44981
// begin if not ValidHex ( _x , _y ) then
44890: LD_VAR 0 11
44894: PPUSH
44895: LD_VAR 0 12
44899: PPUSH
44900: CALL_OW 488
44904: NOT
44905: IFFALSE 44909
// continue ;
44907: GO 44887
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
44909: LD_VAR 0 11
44913: PPUSH
44914: LD_VAR 0 12
44918: PPUSH
44919: CALL_OW 351
44923: PUSH
44924: LD_VAR 0 11
44928: PPUSH
44929: LD_VAR 0 12
44933: PPUSH
44934: CALL_OW 554
44938: AND
44939: IFFALSE 44979
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
44941: LD_ADDR_VAR 0 13
44945: PUSH
44946: LD_VAR 0 13
44950: PPUSH
44951: LD_VAR 0 13
44955: PUSH
44956: LD_INT 1
44958: PLUS
44959: PPUSH
44960: LD_VAR 0 11
44964: PUSH
44965: LD_VAR 0 12
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PPUSH
44974: CALL_OW 2
44978: ST_TO_ADDR
// end ;
44979: GO 44887
44981: POP
44982: POP
44983: GO 44867
44985: POP
44986: POP
// if not list then
44987: LD_VAR 0 13
44991: NOT
44992: IFFALSE 44996
// exit ;
44994: GO 45240
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
44996: LD_ADDR_VAR 0 13
45000: PUSH
45001: LD_VAR 0 1
45005: PPUSH
45006: LD_VAR 0 13
45010: PPUSH
45011: LD_INT 1
45013: PPUSH
45014: LD_INT 1
45016: PPUSH
45017: CALL 5966 0 4
45021: ST_TO_ADDR
// ComStop ( flame ) ;
45022: LD_VAR 0 1
45026: PPUSH
45027: CALL_OW 141
// for i in list do
45031: LD_ADDR_VAR 0 6
45035: PUSH
45036: LD_VAR 0 13
45040: PUSH
45041: FOR_IN
45042: IFFALSE 45073
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
45044: LD_VAR 0 1
45048: PPUSH
45049: LD_VAR 0 6
45053: PUSH
45054: LD_INT 1
45056: ARRAY
45057: PPUSH
45058: LD_VAR 0 6
45062: PUSH
45063: LD_INT 2
45065: ARRAY
45066: PPUSH
45067: CALL_OW 176
45071: GO 45041
45073: POP
45074: POP
// repeat wait ( 0 0$1 ) ;
45075: LD_INT 35
45077: PPUSH
45078: CALL_OW 67
// task := GetTaskList ( flame ) ;
45082: LD_ADDR_VAR 0 14
45086: PUSH
45087: LD_VAR 0 1
45091: PPUSH
45092: CALL_OW 437
45096: ST_TO_ADDR
// if not task then
45097: LD_VAR 0 14
45101: NOT
45102: IFFALSE 45106
// exit ;
45104: GO 45240
// if task [ 1 ] [ 1 ] <> | then
45106: LD_VAR 0 14
45110: PUSH
45111: LD_INT 1
45113: ARRAY
45114: PUSH
45115: LD_INT 1
45117: ARRAY
45118: PUSH
45119: LD_STRING |
45121: NONEQUAL
45122: IFFALSE 45126
// exit ;
45124: GO 45240
// _x := task [ 1 ] [ 2 ] ;
45126: LD_ADDR_VAR 0 11
45130: PUSH
45131: LD_VAR 0 14
45135: PUSH
45136: LD_INT 1
45138: ARRAY
45139: PUSH
45140: LD_INT 2
45142: ARRAY
45143: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
45144: LD_ADDR_VAR 0 12
45148: PUSH
45149: LD_VAR 0 14
45153: PUSH
45154: LD_INT 1
45156: ARRAY
45157: PUSH
45158: LD_INT 3
45160: ARRAY
45161: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
45162: LD_VAR 0 11
45166: PPUSH
45167: LD_VAR 0 12
45171: PPUSH
45172: CALL_OW 351
45176: NOT
45177: PUSH
45178: LD_VAR 0 11
45182: PPUSH
45183: LD_VAR 0 12
45187: PPUSH
45188: CALL_OW 554
45192: NOT
45193: OR
45194: IFFALSE 45228
// begin task := Delete ( task , 1 ) ;
45196: LD_ADDR_VAR 0 14
45200: PUSH
45201: LD_VAR 0 14
45205: PPUSH
45206: LD_INT 1
45208: PPUSH
45209: CALL_OW 3
45213: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
45214: LD_VAR 0 1
45218: PPUSH
45219: LD_VAR 0 14
45223: PPUSH
45224: CALL_OW 446
// end ; until not HasTask ( flame ) ;
45228: LD_VAR 0 1
45232: PPUSH
45233: CALL_OW 314
45237: NOT
45238: IFFALSE 45075
// end ;
45240: LD_VAR 0 5
45244: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45245: LD_EXP 2
45249: NOT
45250: IFFALSE 45300
45252: GO 45254
45254: DISABLE
// begin initHack := true ;
45255: LD_ADDR_EXP 2
45259: PUSH
45260: LD_INT 1
45262: ST_TO_ADDR
// hackTanks := [ ] ;
45263: LD_ADDR_EXP 3
45267: PUSH
45268: EMPTY
45269: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
45270: LD_ADDR_EXP 4
45274: PUSH
45275: EMPTY
45276: ST_TO_ADDR
// hackLimit := 3 ;
45277: LD_ADDR_EXP 5
45281: PUSH
45282: LD_INT 3
45284: ST_TO_ADDR
// hackDist := 12 ;
45285: LD_ADDR_EXP 6
45289: PUSH
45290: LD_INT 12
45292: ST_TO_ADDR
// hackCounter := [ ] ;
45293: LD_ADDR_EXP 7
45297: PUSH
45298: EMPTY
45299: ST_TO_ADDR
// end ;
45300: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
45301: LD_EXP 2
45305: PUSH
45306: LD_INT 34
45308: PUSH
45309: LD_INT 99
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PPUSH
45316: CALL_OW 69
45320: AND
45321: IFFALSE 45574
45323: GO 45325
45325: DISABLE
45326: LD_INT 0
45328: PPUSH
45329: PPUSH
// begin enable ;
45330: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
45331: LD_ADDR_VAR 0 1
45335: PUSH
45336: LD_INT 34
45338: PUSH
45339: LD_INT 99
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PPUSH
45346: CALL_OW 69
45350: PUSH
45351: FOR_IN
45352: IFFALSE 45572
// begin if not i in hackTanks then
45354: LD_VAR 0 1
45358: PUSH
45359: LD_EXP 3
45363: IN
45364: NOT
45365: IFFALSE 45448
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
45367: LD_ADDR_EXP 3
45371: PUSH
45372: LD_EXP 3
45376: PPUSH
45377: LD_EXP 3
45381: PUSH
45382: LD_INT 1
45384: PLUS
45385: PPUSH
45386: LD_VAR 0 1
45390: PPUSH
45391: CALL_OW 1
45395: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
45396: LD_ADDR_EXP 4
45400: PUSH
45401: LD_EXP 4
45405: PPUSH
45406: LD_EXP 4
45410: PUSH
45411: LD_INT 1
45413: PLUS
45414: PPUSH
45415: EMPTY
45416: PPUSH
45417: CALL_OW 1
45421: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
45422: LD_ADDR_EXP 7
45426: PUSH
45427: LD_EXP 7
45431: PPUSH
45432: LD_EXP 7
45436: PUSH
45437: LD_INT 1
45439: PLUS
45440: PPUSH
45441: EMPTY
45442: PPUSH
45443: CALL_OW 1
45447: ST_TO_ADDR
// end ; if not IsOk ( i ) then
45448: LD_VAR 0 1
45452: PPUSH
45453: CALL_OW 302
45457: NOT
45458: IFFALSE 45471
// begin HackUnlinkAll ( i ) ;
45460: LD_VAR 0 1
45464: PPUSH
45465: CALL 45577 0 1
// continue ;
45469: GO 45351
// end ; HackCheckCapturedStatus ( i ) ;
45471: LD_VAR 0 1
45475: PPUSH
45476: CALL 46020 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
45480: LD_ADDR_VAR 0 2
45484: PUSH
45485: LD_INT 81
45487: PUSH
45488: LD_VAR 0 1
45492: PPUSH
45493: CALL_OW 255
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 33
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 91
45514: PUSH
45515: LD_VAR 0 1
45519: PUSH
45520: LD_EXP 6
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 50
45532: PUSH
45533: EMPTY
45534: LIST
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: PPUSH
45542: CALL_OW 69
45546: ST_TO_ADDR
// if not tmp then
45547: LD_VAR 0 2
45551: NOT
45552: IFFALSE 45556
// continue ;
45554: GO 45351
// HackLink ( i , tmp ) ;
45556: LD_VAR 0 1
45560: PPUSH
45561: LD_VAR 0 2
45565: PPUSH
45566: CALL 45713 0 2
// end ;
45570: GO 45351
45572: POP
45573: POP
// end ;
45574: PPOPN 2
45576: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
45577: LD_INT 0
45579: PPUSH
45580: PPUSH
45581: PPUSH
// if not hack in hackTanks then
45582: LD_VAR 0 1
45586: PUSH
45587: LD_EXP 3
45591: IN
45592: NOT
45593: IFFALSE 45597
// exit ;
45595: GO 45708
// index := GetElementIndex ( hackTanks , hack ) ;
45597: LD_ADDR_VAR 0 4
45601: PUSH
45602: LD_EXP 3
45606: PPUSH
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL 5263 0 2
45616: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
45617: LD_EXP 4
45621: PUSH
45622: LD_VAR 0 4
45626: ARRAY
45627: IFFALSE 45708
// begin for i in hackTanksCaptured [ index ] do
45629: LD_ADDR_VAR 0 3
45633: PUSH
45634: LD_EXP 4
45638: PUSH
45639: LD_VAR 0 4
45643: ARRAY
45644: PUSH
45645: FOR_IN
45646: IFFALSE 45672
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
45648: LD_VAR 0 3
45652: PUSH
45653: LD_INT 1
45655: ARRAY
45656: PPUSH
45657: LD_VAR 0 3
45661: PUSH
45662: LD_INT 2
45664: ARRAY
45665: PPUSH
45666: CALL_OW 235
45670: GO 45645
45672: POP
45673: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
45674: LD_ADDR_EXP 4
45678: PUSH
45679: LD_EXP 4
45683: PPUSH
45684: LD_VAR 0 4
45688: PPUSH
45689: EMPTY
45690: PPUSH
45691: CALL_OW 1
45695: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
45696: LD_VAR 0 1
45700: PPUSH
45701: LD_INT 0
45703: PPUSH
45704: CALL_OW 505
// end ; end ;
45708: LD_VAR 0 2
45712: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
45713: LD_INT 0
45715: PPUSH
45716: PPUSH
45717: PPUSH
// if not hack in hackTanks or not vehicles then
45718: LD_VAR 0 1
45722: PUSH
45723: LD_EXP 3
45727: IN
45728: NOT
45729: PUSH
45730: LD_VAR 0 2
45734: NOT
45735: OR
45736: IFFALSE 45740
// exit ;
45738: GO 46015
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
45740: LD_ADDR_VAR 0 2
45744: PUSH
45745: LD_VAR 0 1
45749: PPUSH
45750: LD_VAR 0 2
45754: PPUSH
45755: LD_INT 1
45757: PPUSH
45758: LD_INT 1
45760: PPUSH
45761: CALL 5913 0 4
45765: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
45766: LD_ADDR_VAR 0 5
45770: PUSH
45771: LD_EXP 3
45775: PPUSH
45776: LD_VAR 0 1
45780: PPUSH
45781: CALL 5263 0 2
45785: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
45786: LD_EXP 4
45790: PUSH
45791: LD_VAR 0 5
45795: ARRAY
45796: PUSH
45797: LD_EXP 5
45801: LESS
45802: IFFALSE 45991
// begin for i := 1 to vehicles do
45804: LD_ADDR_VAR 0 4
45808: PUSH
45809: DOUBLE
45810: LD_INT 1
45812: DEC
45813: ST_TO_ADDR
45814: LD_VAR 0 2
45818: PUSH
45819: FOR_TO
45820: IFFALSE 45989
// begin if hackTanksCaptured [ index ] = hackLimit then
45822: LD_EXP 4
45826: PUSH
45827: LD_VAR 0 5
45831: ARRAY
45832: PUSH
45833: LD_EXP 5
45837: EQUAL
45838: IFFALSE 45842
// break ;
45840: GO 45989
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
45842: LD_ADDR_EXP 7
45846: PUSH
45847: LD_EXP 7
45851: PPUSH
45852: LD_VAR 0 5
45856: PPUSH
45857: LD_EXP 7
45861: PUSH
45862: LD_VAR 0 5
45866: ARRAY
45867: PUSH
45868: LD_INT 1
45870: PLUS
45871: PPUSH
45872: CALL_OW 1
45876: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
45877: LD_ADDR_EXP 4
45881: PUSH
45882: LD_EXP 4
45886: PPUSH
45887: LD_VAR 0 5
45891: PUSH
45892: LD_EXP 4
45896: PUSH
45897: LD_VAR 0 5
45901: ARRAY
45902: PUSH
45903: LD_INT 1
45905: PLUS
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PPUSH
45911: LD_VAR 0 2
45915: PUSH
45916: LD_VAR 0 4
45920: ARRAY
45921: PUSH
45922: LD_VAR 0 2
45926: PUSH
45927: LD_VAR 0 4
45931: ARRAY
45932: PPUSH
45933: CALL_OW 255
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PPUSH
45942: CALL 5478 0 3
45946: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
45947: LD_VAR 0 2
45951: PUSH
45952: LD_VAR 0 4
45956: ARRAY
45957: PPUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: CALL_OW 255
45967: PPUSH
45968: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
45972: LD_VAR 0 2
45976: PUSH
45977: LD_VAR 0 4
45981: ARRAY
45982: PPUSH
45983: CALL_OW 141
// end ;
45987: GO 45819
45989: POP
45990: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
45991: LD_VAR 0 1
45995: PPUSH
45996: LD_EXP 4
46000: PUSH
46001: LD_VAR 0 5
46005: ARRAY
46006: PUSH
46007: LD_INT 0
46009: PLUS
46010: PPUSH
46011: CALL_OW 505
// end ;
46015: LD_VAR 0 3
46019: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46020: LD_INT 0
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
// if not hack in hackTanks then
46026: LD_VAR 0 1
46030: PUSH
46031: LD_EXP 3
46035: IN
46036: NOT
46037: IFFALSE 46041
// exit ;
46039: GO 46281
// index := GetElementIndex ( hackTanks , hack ) ;
46041: LD_ADDR_VAR 0 4
46045: PUSH
46046: LD_EXP 3
46050: PPUSH
46051: LD_VAR 0 1
46055: PPUSH
46056: CALL 5263 0 2
46060: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46061: LD_ADDR_VAR 0 3
46065: PUSH
46066: DOUBLE
46067: LD_EXP 4
46071: PUSH
46072: LD_VAR 0 4
46076: ARRAY
46077: INC
46078: ST_TO_ADDR
46079: LD_INT 1
46081: PUSH
46082: FOR_DOWNTO
46083: IFFALSE 46255
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46085: LD_ADDR_VAR 0 5
46089: PUSH
46090: LD_EXP 4
46094: PUSH
46095: LD_VAR 0 4
46099: ARRAY
46100: PUSH
46101: LD_VAR 0 3
46105: ARRAY
46106: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46107: LD_VAR 0 5
46111: PUSH
46112: LD_INT 1
46114: ARRAY
46115: PPUSH
46116: CALL_OW 302
46120: NOT
46121: PUSH
46122: LD_VAR 0 5
46126: PUSH
46127: LD_INT 1
46129: ARRAY
46130: PPUSH
46131: CALL_OW 255
46135: PUSH
46136: LD_VAR 0 1
46140: PPUSH
46141: CALL_OW 255
46145: NONEQUAL
46146: OR
46147: IFFALSE 46253
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46149: LD_VAR 0 5
46153: PUSH
46154: LD_INT 1
46156: ARRAY
46157: PPUSH
46158: CALL_OW 305
46162: PUSH
46163: LD_VAR 0 5
46167: PUSH
46168: LD_INT 1
46170: ARRAY
46171: PPUSH
46172: CALL_OW 255
46176: PUSH
46177: LD_VAR 0 1
46181: PPUSH
46182: CALL_OW 255
46186: EQUAL
46187: AND
46188: IFFALSE 46212
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46190: LD_VAR 0 5
46194: PUSH
46195: LD_INT 1
46197: ARRAY
46198: PPUSH
46199: LD_VAR 0 5
46203: PUSH
46204: LD_INT 2
46206: ARRAY
46207: PPUSH
46208: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46212: LD_ADDR_EXP 4
46216: PUSH
46217: LD_EXP 4
46221: PPUSH
46222: LD_VAR 0 4
46226: PPUSH
46227: LD_EXP 4
46231: PUSH
46232: LD_VAR 0 4
46236: ARRAY
46237: PPUSH
46238: LD_VAR 0 3
46242: PPUSH
46243: CALL_OW 3
46247: PPUSH
46248: CALL_OW 1
46252: ST_TO_ADDR
// end ; end ;
46253: GO 46082
46255: POP
46256: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46257: LD_VAR 0 1
46261: PPUSH
46262: LD_EXP 4
46266: PUSH
46267: LD_VAR 0 4
46271: ARRAY
46272: PUSH
46273: LD_INT 0
46275: PLUS
46276: PPUSH
46277: CALL_OW 505
// end ;
46281: LD_VAR 0 2
46285: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
46286: LD_INT 0
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
// if not hack in hackTanks then
46292: LD_VAR 0 1
46296: PUSH
46297: LD_EXP 3
46301: IN
46302: NOT
46303: IFFALSE 46307
// exit ;
46305: GO 46392
// index := GetElementIndex ( hackTanks , hack ) ;
46307: LD_ADDR_VAR 0 5
46311: PUSH
46312: LD_EXP 3
46316: PPUSH
46317: LD_VAR 0 1
46321: PPUSH
46322: CALL 5263 0 2
46326: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
46327: LD_ADDR_VAR 0 4
46331: PUSH
46332: DOUBLE
46333: LD_INT 1
46335: DEC
46336: ST_TO_ADDR
46337: LD_EXP 4
46341: PUSH
46342: LD_VAR 0 5
46346: ARRAY
46347: PUSH
46348: FOR_TO
46349: IFFALSE 46390
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
46351: LD_EXP 4
46355: PUSH
46356: LD_VAR 0 5
46360: ARRAY
46361: PUSH
46362: LD_VAR 0 4
46366: ARRAY
46367: PUSH
46368: LD_INT 1
46370: ARRAY
46371: PUSH
46372: LD_VAR 0 2
46376: EQUAL
46377: IFFALSE 46388
// KillUnit ( vehicle ) ;
46379: LD_VAR 0 2
46383: PPUSH
46384: CALL_OW 66
46388: GO 46348
46390: POP
46391: POP
// end ;
46392: LD_VAR 0 3
46396: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
46397: LD_EXP 8
46401: NOT
46402: IFFALSE 46437
46404: GO 46406
46406: DISABLE
// begin initMiner := true ;
46407: LD_ADDR_EXP 8
46411: PUSH
46412: LD_INT 1
46414: ST_TO_ADDR
// minersList := [ ] ;
46415: LD_ADDR_EXP 9
46419: PUSH
46420: EMPTY
46421: ST_TO_ADDR
// minerMinesList := [ ] ;
46422: LD_ADDR_EXP 10
46426: PUSH
46427: EMPTY
46428: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
46429: LD_ADDR_EXP 11
46433: PUSH
46434: LD_INT 5
46436: ST_TO_ADDR
// end ;
46437: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
46438: LD_EXP 8
46442: PUSH
46443: LD_INT 34
46445: PUSH
46446: LD_INT 81
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PPUSH
46453: CALL_OW 69
46457: AND
46458: IFFALSE 46919
46460: GO 46462
46462: DISABLE
46463: LD_INT 0
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
// begin enable ;
46469: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
46470: LD_ADDR_VAR 0 1
46474: PUSH
46475: LD_INT 34
46477: PUSH
46478: LD_INT 81
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PPUSH
46485: CALL_OW 69
46489: PUSH
46490: FOR_IN
46491: IFFALSE 46563
// begin if not i in minersList then
46493: LD_VAR 0 1
46497: PUSH
46498: LD_EXP 9
46502: IN
46503: NOT
46504: IFFALSE 46561
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
46506: LD_ADDR_EXP 9
46510: PUSH
46511: LD_EXP 9
46515: PPUSH
46516: LD_EXP 9
46520: PUSH
46521: LD_INT 1
46523: PLUS
46524: PPUSH
46525: LD_VAR 0 1
46529: PPUSH
46530: CALL_OW 1
46534: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
46535: LD_ADDR_EXP 10
46539: PUSH
46540: LD_EXP 10
46544: PPUSH
46545: LD_EXP 10
46549: PUSH
46550: LD_INT 1
46552: PLUS
46553: PPUSH
46554: EMPTY
46555: PPUSH
46556: CALL_OW 1
46560: ST_TO_ADDR
// end end ;
46561: GO 46490
46563: POP
46564: POP
// for i := minerMinesList downto 1 do
46565: LD_ADDR_VAR 0 1
46569: PUSH
46570: DOUBLE
46571: LD_EXP 10
46575: INC
46576: ST_TO_ADDR
46577: LD_INT 1
46579: PUSH
46580: FOR_DOWNTO
46581: IFFALSE 46917
// begin if IsLive ( minersList [ i ] ) then
46583: LD_EXP 9
46587: PUSH
46588: LD_VAR 0 1
46592: ARRAY
46593: PPUSH
46594: CALL_OW 300
46598: IFFALSE 46626
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
46600: LD_EXP 9
46604: PUSH
46605: LD_VAR 0 1
46609: ARRAY
46610: PPUSH
46611: LD_EXP 10
46615: PUSH
46616: LD_VAR 0 1
46620: ARRAY
46621: PPUSH
46622: CALL_OW 505
// if not minerMinesList [ i ] then
46626: LD_EXP 10
46630: PUSH
46631: LD_VAR 0 1
46635: ARRAY
46636: NOT
46637: IFFALSE 46641
// continue ;
46639: GO 46580
// for j := minerMinesList [ i ] downto 1 do
46641: LD_ADDR_VAR 0 2
46645: PUSH
46646: DOUBLE
46647: LD_EXP 10
46651: PUSH
46652: LD_VAR 0 1
46656: ARRAY
46657: INC
46658: ST_TO_ADDR
46659: LD_INT 1
46661: PUSH
46662: FOR_DOWNTO
46663: IFFALSE 46913
// begin side := GetSide ( minersList [ i ] ) ;
46665: LD_ADDR_VAR 0 3
46669: PUSH
46670: LD_EXP 9
46674: PUSH
46675: LD_VAR 0 1
46679: ARRAY
46680: PPUSH
46681: CALL_OW 255
46685: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
46686: LD_ADDR_VAR 0 4
46690: PUSH
46691: LD_EXP 10
46695: PUSH
46696: LD_VAR 0 1
46700: ARRAY
46701: PUSH
46702: LD_VAR 0 2
46706: ARRAY
46707: PUSH
46708: LD_INT 1
46710: ARRAY
46711: PPUSH
46712: LD_EXP 10
46716: PUSH
46717: LD_VAR 0 1
46721: ARRAY
46722: PUSH
46723: LD_VAR 0 2
46727: ARRAY
46728: PUSH
46729: LD_INT 2
46731: ARRAY
46732: PPUSH
46733: CALL_OW 428
46737: ST_TO_ADDR
// if not tmp then
46738: LD_VAR 0 4
46742: NOT
46743: IFFALSE 46747
// continue ;
46745: GO 46662
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
46747: LD_VAR 0 4
46751: PUSH
46752: LD_INT 81
46754: PUSH
46755: LD_VAR 0 3
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PPUSH
46764: CALL_OW 69
46768: IN
46769: PUSH
46770: LD_EXP 10
46774: PUSH
46775: LD_VAR 0 1
46779: ARRAY
46780: PUSH
46781: LD_VAR 0 2
46785: ARRAY
46786: PUSH
46787: LD_INT 1
46789: ARRAY
46790: PPUSH
46791: LD_EXP 10
46795: PUSH
46796: LD_VAR 0 1
46800: ARRAY
46801: PUSH
46802: LD_VAR 0 2
46806: ARRAY
46807: PUSH
46808: LD_INT 2
46810: ARRAY
46811: PPUSH
46812: CALL_OW 458
46816: AND
46817: IFFALSE 46911
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
46819: LD_EXP 10
46823: PUSH
46824: LD_VAR 0 1
46828: ARRAY
46829: PUSH
46830: LD_VAR 0 2
46834: ARRAY
46835: PUSH
46836: LD_INT 1
46838: ARRAY
46839: PPUSH
46840: LD_EXP 10
46844: PUSH
46845: LD_VAR 0 1
46849: ARRAY
46850: PUSH
46851: LD_VAR 0 2
46855: ARRAY
46856: PUSH
46857: LD_INT 2
46859: ARRAY
46860: PPUSH
46861: LD_VAR 0 3
46865: PPUSH
46866: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
46870: LD_ADDR_EXP 10
46874: PUSH
46875: LD_EXP 10
46879: PPUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: LD_EXP 10
46889: PUSH
46890: LD_VAR 0 1
46894: ARRAY
46895: PPUSH
46896: LD_VAR 0 2
46900: PPUSH
46901: CALL_OW 3
46905: PPUSH
46906: CALL_OW 1
46910: ST_TO_ADDR
// end ; end ;
46911: GO 46662
46913: POP
46914: POP
// end ;
46915: GO 46580
46917: POP
46918: POP
// end ;
46919: PPOPN 4
46921: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
46922: LD_INT 0
46924: PPUSH
46925: PPUSH
// result := false ;
46926: LD_ADDR_VAR 0 4
46930: PUSH
46931: LD_INT 0
46933: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 264
46943: PUSH
46944: LD_INT 81
46946: EQUAL
46947: NOT
46948: IFFALSE 46952
// exit ;
46950: GO 47192
// index := GetElementIndex ( minersList , unit ) ;
46952: LD_ADDR_VAR 0 5
46956: PUSH
46957: LD_EXP 9
46961: PPUSH
46962: LD_VAR 0 1
46966: PPUSH
46967: CALL 5263 0 2
46971: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
46972: LD_EXP 10
46976: PUSH
46977: LD_VAR 0 5
46981: ARRAY
46982: PUSH
46983: LD_EXP 11
46987: GREATEREQUAL
46988: IFFALSE 46992
// exit ;
46990: GO 47192
// ComMoveXY ( unit , x , y ) ;
46992: LD_VAR 0 1
46996: PPUSH
46997: LD_VAR 0 2
47001: PPUSH
47002: LD_VAR 0 3
47006: PPUSH
47007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47011: LD_INT 35
47013: PPUSH
47014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47018: LD_VAR 0 1
47022: PPUSH
47023: LD_VAR 0 2
47027: PPUSH
47028: LD_VAR 0 3
47032: PPUSH
47033: CALL 37004 0 3
47037: NOT
47038: PUSH
47039: LD_VAR 0 1
47043: PPUSH
47044: CALL_OW 314
47048: AND
47049: IFFALSE 47053
// exit ;
47051: GO 47192
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47053: LD_VAR 0 2
47057: PPUSH
47058: LD_VAR 0 3
47062: PPUSH
47063: CALL_OW 428
47067: PUSH
47068: LD_VAR 0 1
47072: EQUAL
47073: PUSH
47074: LD_VAR 0 1
47078: PPUSH
47079: CALL_OW 314
47083: NOT
47084: AND
47085: IFFALSE 47011
// PlaySoundXY ( x , y , PlantMine ) ;
47087: LD_VAR 0 2
47091: PPUSH
47092: LD_VAR 0 3
47096: PPUSH
47097: LD_STRING PlantMine
47099: PPUSH
47100: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47104: LD_VAR 0 2
47108: PPUSH
47109: LD_VAR 0 3
47113: PPUSH
47114: LD_VAR 0 1
47118: PPUSH
47119: CALL_OW 255
47123: PPUSH
47124: LD_INT 0
47126: PPUSH
47127: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47131: LD_ADDR_EXP 10
47135: PUSH
47136: LD_EXP 10
47140: PPUSH
47141: LD_VAR 0 5
47145: PUSH
47146: LD_EXP 10
47150: PUSH
47151: LD_VAR 0 5
47155: ARRAY
47156: PUSH
47157: LD_INT 1
47159: PLUS
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PPUSH
47165: LD_VAR 0 2
47169: PUSH
47170: LD_VAR 0 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PPUSH
47179: CALL 5478 0 3
47183: ST_TO_ADDR
// result := true ;
47184: LD_ADDR_VAR 0 4
47188: PUSH
47189: LD_INT 1
47191: ST_TO_ADDR
// end ;
47192: LD_VAR 0 4
47196: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47197: LD_INT 0
47199: PPUSH
47200: PPUSH
47201: PPUSH
// if not unit in minersList then
47202: LD_VAR 0 1
47206: PUSH
47207: LD_EXP 9
47211: IN
47212: NOT
47213: IFFALSE 47217
// exit ;
47215: GO 47609
// index := GetElementIndex ( minersList , unit ) ;
47217: LD_ADDR_VAR 0 6
47221: PUSH
47222: LD_EXP 9
47226: PPUSH
47227: LD_VAR 0 1
47231: PPUSH
47232: CALL 5263 0 2
47236: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47237: LD_ADDR_VAR 0 5
47241: PUSH
47242: DOUBLE
47243: LD_EXP 10
47247: PUSH
47248: LD_VAR 0 6
47252: ARRAY
47253: INC
47254: ST_TO_ADDR
47255: LD_INT 1
47257: PUSH
47258: FOR_DOWNTO
47259: IFFALSE 47420
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
47261: LD_EXP 10
47265: PUSH
47266: LD_VAR 0 6
47270: ARRAY
47271: PUSH
47272: LD_VAR 0 5
47276: ARRAY
47277: PUSH
47278: LD_INT 1
47280: ARRAY
47281: PUSH
47282: LD_VAR 0 2
47286: EQUAL
47287: PUSH
47288: LD_EXP 10
47292: PUSH
47293: LD_VAR 0 6
47297: ARRAY
47298: PUSH
47299: LD_VAR 0 5
47303: ARRAY
47304: PUSH
47305: LD_INT 2
47307: ARRAY
47308: PUSH
47309: LD_VAR 0 3
47313: EQUAL
47314: AND
47315: IFFALSE 47418
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47317: LD_EXP 10
47321: PUSH
47322: LD_VAR 0 6
47326: ARRAY
47327: PUSH
47328: LD_VAR 0 5
47332: ARRAY
47333: PUSH
47334: LD_INT 1
47336: ARRAY
47337: PPUSH
47338: LD_EXP 10
47342: PUSH
47343: LD_VAR 0 6
47347: ARRAY
47348: PUSH
47349: LD_VAR 0 5
47353: ARRAY
47354: PUSH
47355: LD_INT 2
47357: ARRAY
47358: PPUSH
47359: LD_VAR 0 1
47363: PPUSH
47364: CALL_OW 255
47368: PPUSH
47369: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47373: LD_ADDR_EXP 10
47377: PUSH
47378: LD_EXP 10
47382: PPUSH
47383: LD_VAR 0 6
47387: PPUSH
47388: LD_EXP 10
47392: PUSH
47393: LD_VAR 0 6
47397: ARRAY
47398: PPUSH
47399: LD_VAR 0 5
47403: PPUSH
47404: CALL_OW 3
47408: PPUSH
47409: CALL_OW 1
47413: ST_TO_ADDR
// exit ;
47414: POP
47415: POP
47416: GO 47609
// end ; end ;
47418: GO 47258
47420: POP
47421: POP
// for i := minerMinesList [ index ] downto 1 do
47422: LD_ADDR_VAR 0 5
47426: PUSH
47427: DOUBLE
47428: LD_EXP 10
47432: PUSH
47433: LD_VAR 0 6
47437: ARRAY
47438: INC
47439: ST_TO_ADDR
47440: LD_INT 1
47442: PUSH
47443: FOR_DOWNTO
47444: IFFALSE 47607
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
47446: LD_EXP 10
47450: PUSH
47451: LD_VAR 0 6
47455: ARRAY
47456: PUSH
47457: LD_VAR 0 5
47461: ARRAY
47462: PUSH
47463: LD_INT 1
47465: ARRAY
47466: PPUSH
47467: LD_EXP 10
47471: PUSH
47472: LD_VAR 0 6
47476: ARRAY
47477: PUSH
47478: LD_VAR 0 5
47482: ARRAY
47483: PUSH
47484: LD_INT 2
47486: ARRAY
47487: PPUSH
47488: LD_VAR 0 2
47492: PPUSH
47493: LD_VAR 0 3
47497: PPUSH
47498: CALL_OW 298
47502: PUSH
47503: LD_INT 6
47505: LESS
47506: IFFALSE 47605
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
47508: LD_EXP 10
47512: PUSH
47513: LD_VAR 0 6
47517: ARRAY
47518: PUSH
47519: LD_VAR 0 5
47523: ARRAY
47524: PUSH
47525: LD_INT 1
47527: ARRAY
47528: PPUSH
47529: LD_EXP 10
47533: PUSH
47534: LD_VAR 0 6
47538: ARRAY
47539: PUSH
47540: LD_VAR 0 5
47544: ARRAY
47545: PUSH
47546: LD_INT 2
47548: ARRAY
47549: PPUSH
47550: LD_VAR 0 1
47554: PPUSH
47555: CALL_OW 255
47559: PPUSH
47560: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
47564: LD_ADDR_EXP 10
47568: PUSH
47569: LD_EXP 10
47573: PPUSH
47574: LD_VAR 0 6
47578: PPUSH
47579: LD_EXP 10
47583: PUSH
47584: LD_VAR 0 6
47588: ARRAY
47589: PPUSH
47590: LD_VAR 0 5
47594: PPUSH
47595: CALL_OW 3
47599: PPUSH
47600: CALL_OW 1
47604: ST_TO_ADDR
// end ; end ;
47605: GO 47443
47607: POP
47608: POP
// end ;
47609: LD_VAR 0 4
47613: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
47614: LD_INT 0
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
47624: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
47625: LD_VAR 0 1
47629: PPUSH
47630: CALL_OW 264
47634: PUSH
47635: LD_INT 81
47637: EQUAL
47638: NOT
47639: PUSH
47640: LD_VAR 0 1
47644: PUSH
47645: LD_EXP 9
47649: IN
47650: NOT
47651: OR
47652: IFFALSE 47656
// exit ;
47654: GO 47978
// index := GetElementIndex ( minersList , unit ) ;
47656: LD_ADDR_VAR 0 6
47660: PUSH
47661: LD_EXP 9
47665: PPUSH
47666: LD_VAR 0 1
47670: PPUSH
47671: CALL 5263 0 2
47675: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
47676: LD_ADDR_VAR 0 8
47680: PUSH
47681: LD_EXP 11
47685: PUSH
47686: LD_EXP 10
47690: PUSH
47691: LD_VAR 0 6
47695: ARRAY
47696: MINUS
47697: ST_TO_ADDR
// if not minesFreeAmount then
47698: LD_VAR 0 8
47702: NOT
47703: IFFALSE 47707
// exit ;
47705: GO 47978
// tmp := [ ] ;
47707: LD_ADDR_VAR 0 7
47711: PUSH
47712: EMPTY
47713: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: DOUBLE
47720: LD_INT 1
47722: DEC
47723: ST_TO_ADDR
47724: LD_VAR 0 8
47728: PUSH
47729: FOR_TO
47730: IFFALSE 47925
// begin _d := rand ( 0 , 5 ) ;
47732: LD_ADDR_VAR 0 11
47736: PUSH
47737: LD_INT 0
47739: PPUSH
47740: LD_INT 5
47742: PPUSH
47743: CALL_OW 12
47747: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
47748: LD_ADDR_VAR 0 12
47752: PUSH
47753: LD_INT 2
47755: PPUSH
47756: LD_INT 6
47758: PPUSH
47759: CALL_OW 12
47763: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
47764: LD_ADDR_VAR 0 9
47768: PUSH
47769: LD_VAR 0 2
47773: PPUSH
47774: LD_VAR 0 11
47778: PPUSH
47779: LD_VAR 0 12
47783: PPUSH
47784: CALL_OW 272
47788: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
47789: LD_ADDR_VAR 0 10
47793: PUSH
47794: LD_VAR 0 3
47798: PPUSH
47799: LD_VAR 0 11
47803: PPUSH
47804: LD_VAR 0 12
47808: PPUSH
47809: CALL_OW 273
47813: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
47814: LD_VAR 0 9
47818: PPUSH
47819: LD_VAR 0 10
47823: PPUSH
47824: CALL_OW 488
47828: PUSH
47829: LD_VAR 0 9
47833: PUSH
47834: LD_VAR 0 10
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_VAR 0 7
47847: IN
47848: NOT
47849: AND
47850: PUSH
47851: LD_VAR 0 9
47855: PPUSH
47856: LD_VAR 0 10
47860: PPUSH
47861: CALL_OW 458
47865: NOT
47866: AND
47867: IFFALSE 47909
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
47869: LD_ADDR_VAR 0 7
47873: PUSH
47874: LD_VAR 0 7
47878: PPUSH
47879: LD_VAR 0 7
47883: PUSH
47884: LD_INT 1
47886: PLUS
47887: PPUSH
47888: LD_VAR 0 9
47892: PUSH
47893: LD_VAR 0 10
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PPUSH
47902: CALL_OW 1
47906: ST_TO_ADDR
47907: GO 47923
// i := i - 1 ;
47909: LD_ADDR_VAR 0 5
47913: PUSH
47914: LD_VAR 0 5
47918: PUSH
47919: LD_INT 1
47921: MINUS
47922: ST_TO_ADDR
// end ;
47923: GO 47729
47925: POP
47926: POP
// for i in tmp do
47927: LD_ADDR_VAR 0 5
47931: PUSH
47932: LD_VAR 0 7
47936: PUSH
47937: FOR_IN
47938: IFFALSE 47976
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
47940: LD_VAR 0 1
47944: PPUSH
47945: LD_VAR 0 5
47949: PUSH
47950: LD_INT 1
47952: ARRAY
47953: PPUSH
47954: LD_VAR 0 5
47958: PUSH
47959: LD_INT 2
47961: ARRAY
47962: PPUSH
47963: CALL 46922 0 3
47967: NOT
47968: IFFALSE 47974
// exit ;
47970: POP
47971: POP
47972: GO 47978
47974: GO 47937
47976: POP
47977: POP
// end ;
47978: LD_VAR 0 4
47982: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
47983: LD_INT 0
47985: PPUSH
47986: PPUSH
47987: PPUSH
47988: PPUSH
47989: PPUSH
47990: PPUSH
47991: PPUSH
// if not GetClass ( unit ) = class_sniper then
47992: LD_VAR 0 1
47996: PPUSH
47997: CALL_OW 257
48001: PUSH
48002: LD_INT 5
48004: EQUAL
48005: NOT
48006: IFFALSE 48010
// exit ;
48008: GO 48398
// dist := 8 ;
48010: LD_ADDR_VAR 0 5
48014: PUSH
48015: LD_INT 8
48017: ST_TO_ADDR
// viewRange := 12 ;
48018: LD_ADDR_VAR 0 7
48022: PUSH
48023: LD_INT 12
48025: ST_TO_ADDR
// side := GetSide ( unit ) ;
48026: LD_ADDR_VAR 0 6
48030: PUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: CALL_OW 255
48040: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48041: LD_INT 61
48043: PPUSH
48044: LD_VAR 0 6
48048: PPUSH
48049: CALL_OW 321
48053: PUSH
48054: LD_INT 2
48056: EQUAL
48057: IFFALSE 48067
// viewRange := 16 ;
48059: LD_ADDR_VAR 0 7
48063: PUSH
48064: LD_INT 16
48066: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48067: LD_VAR 0 1
48071: PPUSH
48072: LD_VAR 0 2
48076: PPUSH
48077: LD_VAR 0 3
48081: PPUSH
48082: CALL_OW 297
48086: PUSH
48087: LD_VAR 0 5
48091: GREATER
48092: IFFALSE 48171
// begin ComMoveXY ( unit , x , y ) ;
48094: LD_VAR 0 1
48098: PPUSH
48099: LD_VAR 0 2
48103: PPUSH
48104: LD_VAR 0 3
48108: PPUSH
48109: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48113: LD_INT 35
48115: PPUSH
48116: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48120: LD_VAR 0 1
48124: PPUSH
48125: LD_VAR 0 2
48129: PPUSH
48130: LD_VAR 0 3
48134: PPUSH
48135: CALL 37004 0 3
48139: NOT
48140: IFFALSE 48144
// exit ;
48142: GO 48398
// until GetDistUnitXY ( unit , x , y ) < dist ;
48144: LD_VAR 0 1
48148: PPUSH
48149: LD_VAR 0 2
48153: PPUSH
48154: LD_VAR 0 3
48158: PPUSH
48159: CALL_OW 297
48163: PUSH
48164: LD_VAR 0 5
48168: LESS
48169: IFFALSE 48113
// end ; ComTurnXY ( unit , x , y ) ;
48171: LD_VAR 0 1
48175: PPUSH
48176: LD_VAR 0 2
48180: PPUSH
48181: LD_VAR 0 3
48185: PPUSH
48186: CALL_OW 118
// wait ( 5 ) ;
48190: LD_INT 5
48192: PPUSH
48193: CALL_OW 67
// _d := GetDir ( unit ) ;
48197: LD_ADDR_VAR 0 10
48201: PUSH
48202: LD_VAR 0 1
48206: PPUSH
48207: CALL_OW 254
48211: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48212: LD_ADDR_VAR 0 8
48216: PUSH
48217: LD_VAR 0 1
48221: PPUSH
48222: CALL_OW 250
48226: PPUSH
48227: LD_VAR 0 10
48231: PPUSH
48232: LD_VAR 0 5
48236: PPUSH
48237: CALL_OW 272
48241: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48242: LD_ADDR_VAR 0 9
48246: PUSH
48247: LD_VAR 0 1
48251: PPUSH
48252: CALL_OW 251
48256: PPUSH
48257: LD_VAR 0 10
48261: PPUSH
48262: LD_VAR 0 5
48266: PPUSH
48267: CALL_OW 273
48271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48272: LD_VAR 0 8
48276: PPUSH
48277: LD_VAR 0 9
48281: PPUSH
48282: CALL_OW 488
48286: NOT
48287: IFFALSE 48291
// exit ;
48289: GO 48398
// ComAnimCustom ( unit , 1 ) ;
48291: LD_VAR 0 1
48295: PPUSH
48296: LD_INT 1
48298: PPUSH
48299: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
48303: LD_VAR 0 8
48307: PPUSH
48308: LD_VAR 0 9
48312: PPUSH
48313: LD_VAR 0 6
48317: PPUSH
48318: LD_VAR 0 7
48322: PPUSH
48323: CALL_OW 330
// repeat wait ( 1 ) ;
48327: LD_INT 1
48329: PPUSH
48330: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
48334: LD_VAR 0 1
48338: PPUSH
48339: CALL_OW 316
48343: PUSH
48344: LD_VAR 0 1
48348: PPUSH
48349: CALL_OW 314
48353: OR
48354: PUSH
48355: LD_VAR 0 1
48359: PPUSH
48360: CALL_OW 302
48364: NOT
48365: OR
48366: PUSH
48367: LD_VAR 0 1
48371: PPUSH
48372: CALL_OW 301
48376: OR
48377: IFFALSE 48327
// RemoveSeeing ( _x , _y , side ) ;
48379: LD_VAR 0 8
48383: PPUSH
48384: LD_VAR 0 9
48388: PPUSH
48389: LD_VAR 0 6
48393: PPUSH
48394: CALL_OW 331
// end ; end_of_file
48398: LD_VAR 0 4
48402: RET
// export globalGameSaveCounter ; every 0 0$1 do
48403: GO 48405
48405: DISABLE
// begin enable ;
48406: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48407: LD_STRING updateTimer(
48409: PUSH
48410: LD_OWVAR 1
48414: STR
48415: PUSH
48416: LD_STRING );
48418: STR
48419: PPUSH
48420: CALL_OW 559
// end ;
48424: END
// every 0 0$1 do
48425: GO 48427
48427: DISABLE
// begin globalGameSaveCounter := 0 ;
48428: LD_ADDR_EXP 12
48432: PUSH
48433: LD_INT 0
48435: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48436: LD_STRING setGameSaveCounter(0)
48438: PPUSH
48439: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48443: LD_STRING initStreamRollete();
48445: PPUSH
48446: CALL_OW 559
// InitStreamMode ;
48450: CALL 49793 0 0
// DefineStreamItems ( false ) ;
48454: LD_INT 0
48456: PPUSH
48457: CALL 50257 0 1
// end ;
48461: END
// export function SOS_MapStart ( ) ; begin
48462: LD_INT 0
48464: PPUSH
// if streamModeActive then
48465: LD_EXP 13
48469: IFFALSE 48478
// DefineStreamItems ( true ) ;
48471: LD_INT 1
48473: PPUSH
48474: CALL 50257 0 1
// UpdateLuaVariables ( ) ;
48478: CALL 48495 0 0
// UpdateFactoryWaypoints ( ) ;
48482: CALL 63126 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48486: CALL 63383 0 0
// end ;
48490: LD_VAR 0 1
48494: RET
// function UpdateLuaVariables ( ) ; begin
48495: LD_INT 0
48497: PPUSH
// if globalGameSaveCounter then
48498: LD_EXP 12
48502: IFFALSE 48536
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48504: LD_ADDR_EXP 12
48508: PUSH
48509: LD_EXP 12
48513: PPUSH
48514: CALL 39568 0 1
48518: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48519: LD_STRING setGameSaveCounter(
48521: PUSH
48522: LD_EXP 12
48526: STR
48527: PUSH
48528: LD_STRING )
48530: STR
48531: PPUSH
48532: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48536: LD_STRING setGameDifficulty(
48538: PUSH
48539: LD_OWVAR 67
48543: STR
48544: PUSH
48545: LD_STRING )
48547: STR
48548: PPUSH
48549: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
48553: LD_STRING displayDifficulty(
48555: PUSH
48556: LD_OWVAR 67
48560: STR
48561: PUSH
48562: LD_STRING )
48564: STR
48565: PPUSH
48566: CALL_OW 559
// end ;
48570: LD_VAR 0 1
48574: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48575: LD_INT 0
48577: PPUSH
// if p2 = stream_mode then
48578: LD_VAR 0 2
48582: PUSH
48583: LD_INT 100
48585: EQUAL
48586: IFFALSE 49589
// begin if not StreamModeActive then
48588: LD_EXP 13
48592: NOT
48593: IFFALSE 48603
// StreamModeActive := true ;
48595: LD_ADDR_EXP 13
48599: PUSH
48600: LD_INT 1
48602: ST_TO_ADDR
// if p3 = 0 then
48603: LD_VAR 0 3
48607: PUSH
48608: LD_INT 0
48610: EQUAL
48611: IFFALSE 48617
// InitStreamMode ;
48613: CALL 49793 0 0
// if p3 = 1 then
48617: LD_VAR 0 3
48621: PUSH
48622: LD_INT 1
48624: EQUAL
48625: IFFALSE 48635
// sRocket := true ;
48627: LD_ADDR_EXP 18
48631: PUSH
48632: LD_INT 1
48634: ST_TO_ADDR
// if p3 = 2 then
48635: LD_VAR 0 3
48639: PUSH
48640: LD_INT 2
48642: EQUAL
48643: IFFALSE 48653
// sSpeed := true ;
48645: LD_ADDR_EXP 17
48649: PUSH
48650: LD_INT 1
48652: ST_TO_ADDR
// if p3 = 3 then
48653: LD_VAR 0 3
48657: PUSH
48658: LD_INT 3
48660: EQUAL
48661: IFFALSE 48671
// sEngine := true ;
48663: LD_ADDR_EXP 19
48667: PUSH
48668: LD_INT 1
48670: ST_TO_ADDR
// if p3 = 4 then
48671: LD_VAR 0 3
48675: PUSH
48676: LD_INT 4
48678: EQUAL
48679: IFFALSE 48689
// sSpec := true ;
48681: LD_ADDR_EXP 16
48685: PUSH
48686: LD_INT 1
48688: ST_TO_ADDR
// if p3 = 5 then
48689: LD_VAR 0 3
48693: PUSH
48694: LD_INT 5
48696: EQUAL
48697: IFFALSE 48707
// sLevel := true ;
48699: LD_ADDR_EXP 20
48703: PUSH
48704: LD_INT 1
48706: ST_TO_ADDR
// if p3 = 6 then
48707: LD_VAR 0 3
48711: PUSH
48712: LD_INT 6
48714: EQUAL
48715: IFFALSE 48725
// sArmoury := true ;
48717: LD_ADDR_EXP 21
48721: PUSH
48722: LD_INT 1
48724: ST_TO_ADDR
// if p3 = 7 then
48725: LD_VAR 0 3
48729: PUSH
48730: LD_INT 7
48732: EQUAL
48733: IFFALSE 48743
// sRadar := true ;
48735: LD_ADDR_EXP 22
48739: PUSH
48740: LD_INT 1
48742: ST_TO_ADDR
// if p3 = 8 then
48743: LD_VAR 0 3
48747: PUSH
48748: LD_INT 8
48750: EQUAL
48751: IFFALSE 48761
// sBunker := true ;
48753: LD_ADDR_EXP 23
48757: PUSH
48758: LD_INT 1
48760: ST_TO_ADDR
// if p3 = 9 then
48761: LD_VAR 0 3
48765: PUSH
48766: LD_INT 9
48768: EQUAL
48769: IFFALSE 48779
// sHack := true ;
48771: LD_ADDR_EXP 24
48775: PUSH
48776: LD_INT 1
48778: ST_TO_ADDR
// if p3 = 10 then
48779: LD_VAR 0 3
48783: PUSH
48784: LD_INT 10
48786: EQUAL
48787: IFFALSE 48797
// sFire := true ;
48789: LD_ADDR_EXP 25
48793: PUSH
48794: LD_INT 1
48796: ST_TO_ADDR
// if p3 = 11 then
48797: LD_VAR 0 3
48801: PUSH
48802: LD_INT 11
48804: EQUAL
48805: IFFALSE 48815
// sRefresh := true ;
48807: LD_ADDR_EXP 26
48811: PUSH
48812: LD_INT 1
48814: ST_TO_ADDR
// if p3 = 12 then
48815: LD_VAR 0 3
48819: PUSH
48820: LD_INT 12
48822: EQUAL
48823: IFFALSE 48833
// sExp := true ;
48825: LD_ADDR_EXP 27
48829: PUSH
48830: LD_INT 1
48832: ST_TO_ADDR
// if p3 = 13 then
48833: LD_VAR 0 3
48837: PUSH
48838: LD_INT 13
48840: EQUAL
48841: IFFALSE 48851
// sDepot := true ;
48843: LD_ADDR_EXP 28
48847: PUSH
48848: LD_INT 1
48850: ST_TO_ADDR
// if p3 = 14 then
48851: LD_VAR 0 3
48855: PUSH
48856: LD_INT 14
48858: EQUAL
48859: IFFALSE 48869
// sFlag := true ;
48861: LD_ADDR_EXP 29
48865: PUSH
48866: LD_INT 1
48868: ST_TO_ADDR
// if p3 = 15 then
48869: LD_VAR 0 3
48873: PUSH
48874: LD_INT 15
48876: EQUAL
48877: IFFALSE 48887
// sKamikadze := true ;
48879: LD_ADDR_EXP 37
48883: PUSH
48884: LD_INT 1
48886: ST_TO_ADDR
// if p3 = 16 then
48887: LD_VAR 0 3
48891: PUSH
48892: LD_INT 16
48894: EQUAL
48895: IFFALSE 48905
// sTroll := true ;
48897: LD_ADDR_EXP 38
48901: PUSH
48902: LD_INT 1
48904: ST_TO_ADDR
// if p3 = 17 then
48905: LD_VAR 0 3
48909: PUSH
48910: LD_INT 17
48912: EQUAL
48913: IFFALSE 48923
// sSlow := true ;
48915: LD_ADDR_EXP 39
48919: PUSH
48920: LD_INT 1
48922: ST_TO_ADDR
// if p3 = 18 then
48923: LD_VAR 0 3
48927: PUSH
48928: LD_INT 18
48930: EQUAL
48931: IFFALSE 48941
// sLack := true ;
48933: LD_ADDR_EXP 40
48937: PUSH
48938: LD_INT 1
48940: ST_TO_ADDR
// if p3 = 19 then
48941: LD_VAR 0 3
48945: PUSH
48946: LD_INT 19
48948: EQUAL
48949: IFFALSE 48959
// sTank := true ;
48951: LD_ADDR_EXP 42
48955: PUSH
48956: LD_INT 1
48958: ST_TO_ADDR
// if p3 = 20 then
48959: LD_VAR 0 3
48963: PUSH
48964: LD_INT 20
48966: EQUAL
48967: IFFALSE 48977
// sRemote := true ;
48969: LD_ADDR_EXP 43
48973: PUSH
48974: LD_INT 1
48976: ST_TO_ADDR
// if p3 = 21 then
48977: LD_VAR 0 3
48981: PUSH
48982: LD_INT 21
48984: EQUAL
48985: IFFALSE 48995
// sPowell := true ;
48987: LD_ADDR_EXP 44
48991: PUSH
48992: LD_INT 1
48994: ST_TO_ADDR
// if p3 = 22 then
48995: LD_VAR 0 3
48999: PUSH
49000: LD_INT 22
49002: EQUAL
49003: IFFALSE 49013
// sTeleport := true ;
49005: LD_ADDR_EXP 47
49009: PUSH
49010: LD_INT 1
49012: ST_TO_ADDR
// if p3 = 23 then
49013: LD_VAR 0 3
49017: PUSH
49018: LD_INT 23
49020: EQUAL
49021: IFFALSE 49031
// sOilTower := true ;
49023: LD_ADDR_EXP 49
49027: PUSH
49028: LD_INT 1
49030: ST_TO_ADDR
// if p3 = 24 then
49031: LD_VAR 0 3
49035: PUSH
49036: LD_INT 24
49038: EQUAL
49039: IFFALSE 49049
// sShovel := true ;
49041: LD_ADDR_EXP 50
49045: PUSH
49046: LD_INT 1
49048: ST_TO_ADDR
// if p3 = 25 then
49049: LD_VAR 0 3
49053: PUSH
49054: LD_INT 25
49056: EQUAL
49057: IFFALSE 49067
// sSheik := true ;
49059: LD_ADDR_EXP 51
49063: PUSH
49064: LD_INT 1
49066: ST_TO_ADDR
// if p3 = 26 then
49067: LD_VAR 0 3
49071: PUSH
49072: LD_INT 26
49074: EQUAL
49075: IFFALSE 49085
// sEarthquake := true ;
49077: LD_ADDR_EXP 53
49081: PUSH
49082: LD_INT 1
49084: ST_TO_ADDR
// if p3 = 27 then
49085: LD_VAR 0 3
49089: PUSH
49090: LD_INT 27
49092: EQUAL
49093: IFFALSE 49103
// sAI := true ;
49095: LD_ADDR_EXP 54
49099: PUSH
49100: LD_INT 1
49102: ST_TO_ADDR
// if p3 = 28 then
49103: LD_VAR 0 3
49107: PUSH
49108: LD_INT 28
49110: EQUAL
49111: IFFALSE 49121
// sCargo := true ;
49113: LD_ADDR_EXP 57
49117: PUSH
49118: LD_INT 1
49120: ST_TO_ADDR
// if p3 = 29 then
49121: LD_VAR 0 3
49125: PUSH
49126: LD_INT 29
49128: EQUAL
49129: IFFALSE 49139
// sDLaser := true ;
49131: LD_ADDR_EXP 58
49135: PUSH
49136: LD_INT 1
49138: ST_TO_ADDR
// if p3 = 30 then
49139: LD_VAR 0 3
49143: PUSH
49144: LD_INT 30
49146: EQUAL
49147: IFFALSE 49157
// sExchange := true ;
49149: LD_ADDR_EXP 59
49153: PUSH
49154: LD_INT 1
49156: ST_TO_ADDR
// if p3 = 31 then
49157: LD_VAR 0 3
49161: PUSH
49162: LD_INT 31
49164: EQUAL
49165: IFFALSE 49175
// sFac := true ;
49167: LD_ADDR_EXP 60
49171: PUSH
49172: LD_INT 1
49174: ST_TO_ADDR
// if p3 = 32 then
49175: LD_VAR 0 3
49179: PUSH
49180: LD_INT 32
49182: EQUAL
49183: IFFALSE 49193
// sPower := true ;
49185: LD_ADDR_EXP 61
49189: PUSH
49190: LD_INT 1
49192: ST_TO_ADDR
// if p3 = 33 then
49193: LD_VAR 0 3
49197: PUSH
49198: LD_INT 33
49200: EQUAL
49201: IFFALSE 49211
// sRandom := true ;
49203: LD_ADDR_EXP 62
49207: PUSH
49208: LD_INT 1
49210: ST_TO_ADDR
// if p3 = 34 then
49211: LD_VAR 0 3
49215: PUSH
49216: LD_INT 34
49218: EQUAL
49219: IFFALSE 49229
// sShield := true ;
49221: LD_ADDR_EXP 63
49225: PUSH
49226: LD_INT 1
49228: ST_TO_ADDR
// if p3 = 35 then
49229: LD_VAR 0 3
49233: PUSH
49234: LD_INT 35
49236: EQUAL
49237: IFFALSE 49247
// sTime := true ;
49239: LD_ADDR_EXP 64
49243: PUSH
49244: LD_INT 1
49246: ST_TO_ADDR
// if p3 = 36 then
49247: LD_VAR 0 3
49251: PUSH
49252: LD_INT 36
49254: EQUAL
49255: IFFALSE 49265
// sTools := true ;
49257: LD_ADDR_EXP 65
49261: PUSH
49262: LD_INT 1
49264: ST_TO_ADDR
// if p3 = 101 then
49265: LD_VAR 0 3
49269: PUSH
49270: LD_INT 101
49272: EQUAL
49273: IFFALSE 49283
// sSold := true ;
49275: LD_ADDR_EXP 30
49279: PUSH
49280: LD_INT 1
49282: ST_TO_ADDR
// if p3 = 102 then
49283: LD_VAR 0 3
49287: PUSH
49288: LD_INT 102
49290: EQUAL
49291: IFFALSE 49301
// sDiff := true ;
49293: LD_ADDR_EXP 31
49297: PUSH
49298: LD_INT 1
49300: ST_TO_ADDR
// if p3 = 103 then
49301: LD_VAR 0 3
49305: PUSH
49306: LD_INT 103
49308: EQUAL
49309: IFFALSE 49319
// sFog := true ;
49311: LD_ADDR_EXP 34
49315: PUSH
49316: LD_INT 1
49318: ST_TO_ADDR
// if p3 = 104 then
49319: LD_VAR 0 3
49323: PUSH
49324: LD_INT 104
49326: EQUAL
49327: IFFALSE 49337
// sReset := true ;
49329: LD_ADDR_EXP 35
49333: PUSH
49334: LD_INT 1
49336: ST_TO_ADDR
// if p3 = 105 then
49337: LD_VAR 0 3
49341: PUSH
49342: LD_INT 105
49344: EQUAL
49345: IFFALSE 49355
// sSun := true ;
49347: LD_ADDR_EXP 36
49351: PUSH
49352: LD_INT 1
49354: ST_TO_ADDR
// if p3 = 106 then
49355: LD_VAR 0 3
49359: PUSH
49360: LD_INT 106
49362: EQUAL
49363: IFFALSE 49373
// sTiger := true ;
49365: LD_ADDR_EXP 32
49369: PUSH
49370: LD_INT 1
49372: ST_TO_ADDR
// if p3 = 107 then
49373: LD_VAR 0 3
49377: PUSH
49378: LD_INT 107
49380: EQUAL
49381: IFFALSE 49391
// sBomb := true ;
49383: LD_ADDR_EXP 33
49387: PUSH
49388: LD_INT 1
49390: ST_TO_ADDR
// if p3 = 108 then
49391: LD_VAR 0 3
49395: PUSH
49396: LD_INT 108
49398: EQUAL
49399: IFFALSE 49409
// sWound := true ;
49401: LD_ADDR_EXP 41
49405: PUSH
49406: LD_INT 1
49408: ST_TO_ADDR
// if p3 = 109 then
49409: LD_VAR 0 3
49413: PUSH
49414: LD_INT 109
49416: EQUAL
49417: IFFALSE 49427
// sBetray := true ;
49419: LD_ADDR_EXP 45
49423: PUSH
49424: LD_INT 1
49426: ST_TO_ADDR
// if p3 = 110 then
49427: LD_VAR 0 3
49431: PUSH
49432: LD_INT 110
49434: EQUAL
49435: IFFALSE 49445
// sContamin := true ;
49437: LD_ADDR_EXP 46
49441: PUSH
49442: LD_INT 1
49444: ST_TO_ADDR
// if p3 = 111 then
49445: LD_VAR 0 3
49449: PUSH
49450: LD_INT 111
49452: EQUAL
49453: IFFALSE 49463
// sOil := true ;
49455: LD_ADDR_EXP 48
49459: PUSH
49460: LD_INT 1
49462: ST_TO_ADDR
// if p3 = 112 then
49463: LD_VAR 0 3
49467: PUSH
49468: LD_INT 112
49470: EQUAL
49471: IFFALSE 49481
// sStu := true ;
49473: LD_ADDR_EXP 52
49477: PUSH
49478: LD_INT 1
49480: ST_TO_ADDR
// if p3 = 113 then
49481: LD_VAR 0 3
49485: PUSH
49486: LD_INT 113
49488: EQUAL
49489: IFFALSE 49499
// sBazooka := true ;
49491: LD_ADDR_EXP 55
49495: PUSH
49496: LD_INT 1
49498: ST_TO_ADDR
// if p3 = 114 then
49499: LD_VAR 0 3
49503: PUSH
49504: LD_INT 114
49506: EQUAL
49507: IFFALSE 49517
// sMortar := true ;
49509: LD_ADDR_EXP 56
49513: PUSH
49514: LD_INT 1
49516: ST_TO_ADDR
// if p3 = 115 then
49517: LD_VAR 0 3
49521: PUSH
49522: LD_INT 115
49524: EQUAL
49525: IFFALSE 49535
// sRanger := true ;
49527: LD_ADDR_EXP 66
49531: PUSH
49532: LD_INT 1
49534: ST_TO_ADDR
// if p3 = 116 then
49535: LD_VAR 0 3
49539: PUSH
49540: LD_INT 116
49542: EQUAL
49543: IFFALSE 49553
// sComputer := true ;
49545: LD_ADDR_EXP 67
49549: PUSH
49550: LD_INT 1
49552: ST_TO_ADDR
// if p3 = 117 then
49553: LD_VAR 0 3
49557: PUSH
49558: LD_INT 117
49560: EQUAL
49561: IFFALSE 49571
// s30 := true ;
49563: LD_ADDR_EXP 68
49567: PUSH
49568: LD_INT 1
49570: ST_TO_ADDR
// if p3 = 118 then
49571: LD_VAR 0 3
49575: PUSH
49576: LD_INT 118
49578: EQUAL
49579: IFFALSE 49589
// s60 := true ;
49581: LD_ADDR_EXP 69
49585: PUSH
49586: LD_INT 1
49588: ST_TO_ADDR
// end ; if p2 = hack_mode then
49589: LD_VAR 0 2
49593: PUSH
49594: LD_INT 101
49596: EQUAL
49597: IFFALSE 49725
// begin case p3 of 1 :
49599: LD_VAR 0 3
49603: PUSH
49604: LD_INT 1
49606: DOUBLE
49607: EQUAL
49608: IFTRUE 49612
49610: GO 49619
49612: POP
// hHackUnlimitedResources ; 2 :
49613: CALL 61872 0 0
49617: GO 49725
49619: LD_INT 2
49621: DOUBLE
49622: EQUAL
49623: IFTRUE 49627
49625: GO 49634
49627: POP
// hHackSetLevel10 ; 3 :
49628: CALL 62005 0 0
49632: GO 49725
49634: LD_INT 3
49636: DOUBLE
49637: EQUAL
49638: IFTRUE 49642
49640: GO 49649
49642: POP
// hHackSetLevel10YourUnits ; 4 :
49643: CALL 62090 0 0
49647: GO 49725
49649: LD_INT 4
49651: DOUBLE
49652: EQUAL
49653: IFTRUE 49657
49655: GO 49664
49657: POP
// hHackInvincible ; 5 :
49658: CALL 62538 0 0
49662: GO 49725
49664: LD_INT 5
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49672
49670: GO 49679
49672: POP
// hHackInvisible ; 6 :
49673: CALL 62649 0 0
49677: GO 49725
49679: LD_INT 6
49681: DOUBLE
49682: EQUAL
49683: IFTRUE 49687
49685: GO 49694
49687: POP
// hHackChangeYourSide ; 7 :
49688: CALL 62706 0 0
49692: GO 49725
49694: LD_INT 7
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49702
49700: GO 49709
49702: POP
// hHackChangeUnitSide ; 8 :
49703: CALL 62748 0 0
49707: GO 49725
49709: LD_INT 8
49711: DOUBLE
49712: EQUAL
49713: IFTRUE 49717
49715: GO 49724
49717: POP
// hHackFog ; end ;
49718: CALL 62849 0 0
49722: GO 49725
49724: POP
// end ; if p2 = game_save_mode then
49725: LD_VAR 0 2
49729: PUSH
49730: LD_INT 102
49732: EQUAL
49733: IFFALSE 49788
// begin if p3 = 1 then
49735: LD_VAR 0 3
49739: PUSH
49740: LD_INT 1
49742: EQUAL
49743: IFFALSE 49755
// globalGameSaveCounter := p4 ;
49745: LD_ADDR_EXP 12
49749: PUSH
49750: LD_VAR 0 4
49754: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49755: LD_VAR 0 3
49759: PUSH
49760: LD_INT 2
49762: EQUAL
49763: PUSH
49764: LD_EXP 12
49768: AND
49769: IFFALSE 49788
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49771: LD_STRING setGameSaveCounter(
49773: PUSH
49774: LD_EXP 12
49778: STR
49779: PUSH
49780: LD_STRING )
49782: STR
49783: PPUSH
49784: CALL_OW 559
// end ; end ;
49788: LD_VAR 0 7
49792: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49793: LD_INT 0
49795: PPUSH
// streamModeActive := false ;
49796: LD_ADDR_EXP 13
49800: PUSH
49801: LD_INT 0
49803: ST_TO_ADDR
// normalCounter := 36 ;
49804: LD_ADDR_EXP 14
49808: PUSH
49809: LD_INT 36
49811: ST_TO_ADDR
// hardcoreCounter := 18 ;
49812: LD_ADDR_EXP 15
49816: PUSH
49817: LD_INT 18
49819: ST_TO_ADDR
// sRocket := false ;
49820: LD_ADDR_EXP 18
49824: PUSH
49825: LD_INT 0
49827: ST_TO_ADDR
// sSpeed := false ;
49828: LD_ADDR_EXP 17
49832: PUSH
49833: LD_INT 0
49835: ST_TO_ADDR
// sEngine := false ;
49836: LD_ADDR_EXP 19
49840: PUSH
49841: LD_INT 0
49843: ST_TO_ADDR
// sSpec := false ;
49844: LD_ADDR_EXP 16
49848: PUSH
49849: LD_INT 0
49851: ST_TO_ADDR
// sLevel := false ;
49852: LD_ADDR_EXP 20
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// sArmoury := false ;
49860: LD_ADDR_EXP 21
49864: PUSH
49865: LD_INT 0
49867: ST_TO_ADDR
// sRadar := false ;
49868: LD_ADDR_EXP 22
49872: PUSH
49873: LD_INT 0
49875: ST_TO_ADDR
// sBunker := false ;
49876: LD_ADDR_EXP 23
49880: PUSH
49881: LD_INT 0
49883: ST_TO_ADDR
// sHack := false ;
49884: LD_ADDR_EXP 24
49888: PUSH
49889: LD_INT 0
49891: ST_TO_ADDR
// sFire := false ;
49892: LD_ADDR_EXP 25
49896: PUSH
49897: LD_INT 0
49899: ST_TO_ADDR
// sRefresh := false ;
49900: LD_ADDR_EXP 26
49904: PUSH
49905: LD_INT 0
49907: ST_TO_ADDR
// sExp := false ;
49908: LD_ADDR_EXP 27
49912: PUSH
49913: LD_INT 0
49915: ST_TO_ADDR
// sDepot := false ;
49916: LD_ADDR_EXP 28
49920: PUSH
49921: LD_INT 0
49923: ST_TO_ADDR
// sFlag := false ;
49924: LD_ADDR_EXP 29
49928: PUSH
49929: LD_INT 0
49931: ST_TO_ADDR
// sKamikadze := false ;
49932: LD_ADDR_EXP 37
49936: PUSH
49937: LD_INT 0
49939: ST_TO_ADDR
// sTroll := false ;
49940: LD_ADDR_EXP 38
49944: PUSH
49945: LD_INT 0
49947: ST_TO_ADDR
// sSlow := false ;
49948: LD_ADDR_EXP 39
49952: PUSH
49953: LD_INT 0
49955: ST_TO_ADDR
// sLack := false ;
49956: LD_ADDR_EXP 40
49960: PUSH
49961: LD_INT 0
49963: ST_TO_ADDR
// sTank := false ;
49964: LD_ADDR_EXP 42
49968: PUSH
49969: LD_INT 0
49971: ST_TO_ADDR
// sRemote := false ;
49972: LD_ADDR_EXP 43
49976: PUSH
49977: LD_INT 0
49979: ST_TO_ADDR
// sPowell := false ;
49980: LD_ADDR_EXP 44
49984: PUSH
49985: LD_INT 0
49987: ST_TO_ADDR
// sTeleport := false ;
49988: LD_ADDR_EXP 47
49992: PUSH
49993: LD_INT 0
49995: ST_TO_ADDR
// sOilTower := false ;
49996: LD_ADDR_EXP 49
50000: PUSH
50001: LD_INT 0
50003: ST_TO_ADDR
// sShovel := false ;
50004: LD_ADDR_EXP 50
50008: PUSH
50009: LD_INT 0
50011: ST_TO_ADDR
// sSheik := false ;
50012: LD_ADDR_EXP 51
50016: PUSH
50017: LD_INT 0
50019: ST_TO_ADDR
// sEarthquake := false ;
50020: LD_ADDR_EXP 53
50024: PUSH
50025: LD_INT 0
50027: ST_TO_ADDR
// sAI := false ;
50028: LD_ADDR_EXP 54
50032: PUSH
50033: LD_INT 0
50035: ST_TO_ADDR
// sCargo := false ;
50036: LD_ADDR_EXP 57
50040: PUSH
50041: LD_INT 0
50043: ST_TO_ADDR
// sDLaser := false ;
50044: LD_ADDR_EXP 58
50048: PUSH
50049: LD_INT 0
50051: ST_TO_ADDR
// sExchange := false ;
50052: LD_ADDR_EXP 59
50056: PUSH
50057: LD_INT 0
50059: ST_TO_ADDR
// sFac := false ;
50060: LD_ADDR_EXP 60
50064: PUSH
50065: LD_INT 0
50067: ST_TO_ADDR
// sPower := false ;
50068: LD_ADDR_EXP 61
50072: PUSH
50073: LD_INT 0
50075: ST_TO_ADDR
// sRandom := false ;
50076: LD_ADDR_EXP 62
50080: PUSH
50081: LD_INT 0
50083: ST_TO_ADDR
// sShield := false ;
50084: LD_ADDR_EXP 63
50088: PUSH
50089: LD_INT 0
50091: ST_TO_ADDR
// sTime := false ;
50092: LD_ADDR_EXP 64
50096: PUSH
50097: LD_INT 0
50099: ST_TO_ADDR
// sTools := false ;
50100: LD_ADDR_EXP 65
50104: PUSH
50105: LD_INT 0
50107: ST_TO_ADDR
// sSold := false ;
50108: LD_ADDR_EXP 30
50112: PUSH
50113: LD_INT 0
50115: ST_TO_ADDR
// sDiff := false ;
50116: LD_ADDR_EXP 31
50120: PUSH
50121: LD_INT 0
50123: ST_TO_ADDR
// sFog := false ;
50124: LD_ADDR_EXP 34
50128: PUSH
50129: LD_INT 0
50131: ST_TO_ADDR
// sReset := false ;
50132: LD_ADDR_EXP 35
50136: PUSH
50137: LD_INT 0
50139: ST_TO_ADDR
// sSun := false ;
50140: LD_ADDR_EXP 36
50144: PUSH
50145: LD_INT 0
50147: ST_TO_ADDR
// sTiger := false ;
50148: LD_ADDR_EXP 32
50152: PUSH
50153: LD_INT 0
50155: ST_TO_ADDR
// sBomb := false ;
50156: LD_ADDR_EXP 33
50160: PUSH
50161: LD_INT 0
50163: ST_TO_ADDR
// sWound := false ;
50164: LD_ADDR_EXP 41
50168: PUSH
50169: LD_INT 0
50171: ST_TO_ADDR
// sBetray := false ;
50172: LD_ADDR_EXP 45
50176: PUSH
50177: LD_INT 0
50179: ST_TO_ADDR
// sContamin := false ;
50180: LD_ADDR_EXP 46
50184: PUSH
50185: LD_INT 0
50187: ST_TO_ADDR
// sOil := false ;
50188: LD_ADDR_EXP 48
50192: PUSH
50193: LD_INT 0
50195: ST_TO_ADDR
// sStu := false ;
50196: LD_ADDR_EXP 52
50200: PUSH
50201: LD_INT 0
50203: ST_TO_ADDR
// sBazooka := false ;
50204: LD_ADDR_EXP 55
50208: PUSH
50209: LD_INT 0
50211: ST_TO_ADDR
// sMortar := false ;
50212: LD_ADDR_EXP 56
50216: PUSH
50217: LD_INT 0
50219: ST_TO_ADDR
// sRanger := false ;
50220: LD_ADDR_EXP 66
50224: PUSH
50225: LD_INT 0
50227: ST_TO_ADDR
// sComputer := false ;
50228: LD_ADDR_EXP 67
50232: PUSH
50233: LD_INT 0
50235: ST_TO_ADDR
// s30 := false ;
50236: LD_ADDR_EXP 68
50240: PUSH
50241: LD_INT 0
50243: ST_TO_ADDR
// s60 := false ;
50244: LD_ADDR_EXP 69
50248: PUSH
50249: LD_INT 0
50251: ST_TO_ADDR
// end ;
50252: LD_VAR 0 1
50256: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50257: LD_INT 0
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
50265: PPUSH
// result := [ ] ;
50266: LD_ADDR_VAR 0 2
50270: PUSH
50271: EMPTY
50272: ST_TO_ADDR
// if campaign_id = 1 then
50273: LD_OWVAR 69
50277: PUSH
50278: LD_INT 1
50280: EQUAL
50281: IFFALSE 53447
// begin case mission_number of 1 :
50283: LD_OWVAR 70
50287: PUSH
50288: LD_INT 1
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50372
50296: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50297: LD_ADDR_VAR 0 2
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 11
50310: PUSH
50311: LD_INT 12
50313: PUSH
50314: LD_INT 15
50316: PUSH
50317: LD_INT 16
50319: PUSH
50320: LD_INT 22
50322: PUSH
50323: LD_INT 23
50325: PUSH
50326: LD_INT 26
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 101
50342: PUSH
50343: LD_INT 102
50345: PUSH
50346: LD_INT 106
50348: PUSH
50349: LD_INT 116
50351: PUSH
50352: LD_INT 117
50354: PUSH
50355: LD_INT 118
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: ST_TO_ADDR
50370: GO 53445
50372: LD_INT 2
50374: DOUBLE
50375: EQUAL
50376: IFTRUE 50380
50378: GO 50464
50380: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50381: LD_ADDR_VAR 0 2
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: LD_INT 4
50391: PUSH
50392: LD_INT 11
50394: PUSH
50395: LD_INT 12
50397: PUSH
50398: LD_INT 15
50400: PUSH
50401: LD_INT 16
50403: PUSH
50404: LD_INT 22
50406: PUSH
50407: LD_INT 23
50409: PUSH
50410: LD_INT 26
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 101
50426: PUSH
50427: LD_INT 102
50429: PUSH
50430: LD_INT 105
50432: PUSH
50433: LD_INT 106
50435: PUSH
50436: LD_INT 108
50438: PUSH
50439: LD_INT 116
50441: PUSH
50442: LD_INT 117
50444: PUSH
50445: LD_INT 118
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: ST_TO_ADDR
50462: GO 53445
50464: LD_INT 3
50466: DOUBLE
50467: EQUAL
50468: IFTRUE 50472
50470: GO 50560
50472: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50473: LD_ADDR_VAR 0 2
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: LD_INT 4
50483: PUSH
50484: LD_INT 5
50486: PUSH
50487: LD_INT 11
50489: PUSH
50490: LD_INT 12
50492: PUSH
50493: LD_INT 15
50495: PUSH
50496: LD_INT 16
50498: PUSH
50499: LD_INT 22
50501: PUSH
50502: LD_INT 26
50504: PUSH
50505: LD_INT 36
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 101
50522: PUSH
50523: LD_INT 102
50525: PUSH
50526: LD_INT 105
50528: PUSH
50529: LD_INT 106
50531: PUSH
50532: LD_INT 108
50534: PUSH
50535: LD_INT 116
50537: PUSH
50538: LD_INT 117
50540: PUSH
50541: LD_INT 118
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: ST_TO_ADDR
50558: GO 53445
50560: LD_INT 4
50562: DOUBLE
50563: EQUAL
50564: IFTRUE 50568
50566: GO 50664
50568: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50569: LD_ADDR_VAR 0 2
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 4
50579: PUSH
50580: LD_INT 5
50582: PUSH
50583: LD_INT 8
50585: PUSH
50586: LD_INT 11
50588: PUSH
50589: LD_INT 12
50591: PUSH
50592: LD_INT 15
50594: PUSH
50595: LD_INT 16
50597: PUSH
50598: LD_INT 22
50600: PUSH
50601: LD_INT 23
50603: PUSH
50604: LD_INT 26
50606: PUSH
50607: LD_INT 36
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 101
50626: PUSH
50627: LD_INT 102
50629: PUSH
50630: LD_INT 105
50632: PUSH
50633: LD_INT 106
50635: PUSH
50636: LD_INT 108
50638: PUSH
50639: LD_INT 116
50641: PUSH
50642: LD_INT 117
50644: PUSH
50645: LD_INT 118
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: ST_TO_ADDR
50662: GO 53445
50664: LD_INT 5
50666: DOUBLE
50667: EQUAL
50668: IFTRUE 50672
50670: GO 50784
50672: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50673: LD_ADDR_VAR 0 2
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: LD_INT 4
50683: PUSH
50684: LD_INT 5
50686: PUSH
50687: LD_INT 6
50689: PUSH
50690: LD_INT 8
50692: PUSH
50693: LD_INT 11
50695: PUSH
50696: LD_INT 12
50698: PUSH
50699: LD_INT 15
50701: PUSH
50702: LD_INT 16
50704: PUSH
50705: LD_INT 22
50707: PUSH
50708: LD_INT 23
50710: PUSH
50711: LD_INT 25
50713: PUSH
50714: LD_INT 26
50716: PUSH
50717: LD_INT 36
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 101
50738: PUSH
50739: LD_INT 102
50741: PUSH
50742: LD_INT 105
50744: PUSH
50745: LD_INT 106
50747: PUSH
50748: LD_INT 108
50750: PUSH
50751: LD_INT 109
50753: PUSH
50754: LD_INT 112
50756: PUSH
50757: LD_INT 116
50759: PUSH
50760: LD_INT 117
50762: PUSH
50763: LD_INT 118
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: ST_TO_ADDR
50782: GO 53445
50784: LD_INT 6
50786: DOUBLE
50787: EQUAL
50788: IFTRUE 50792
50790: GO 50924
50792: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50793: LD_ADDR_VAR 0 2
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: LD_INT 5
50806: PUSH
50807: LD_INT 6
50809: PUSH
50810: LD_INT 8
50812: PUSH
50813: LD_INT 11
50815: PUSH
50816: LD_INT 12
50818: PUSH
50819: LD_INT 15
50821: PUSH
50822: LD_INT 16
50824: PUSH
50825: LD_INT 20
50827: PUSH
50828: LD_INT 21
50830: PUSH
50831: LD_INT 22
50833: PUSH
50834: LD_INT 23
50836: PUSH
50837: LD_INT 25
50839: PUSH
50840: LD_INT 26
50842: PUSH
50843: LD_INT 30
50845: PUSH
50846: LD_INT 31
50848: PUSH
50849: LD_INT 32
50851: PUSH
50852: LD_INT 36
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 101
50878: PUSH
50879: LD_INT 102
50881: PUSH
50882: LD_INT 105
50884: PUSH
50885: LD_INT 106
50887: PUSH
50888: LD_INT 108
50890: PUSH
50891: LD_INT 109
50893: PUSH
50894: LD_INT 112
50896: PUSH
50897: LD_INT 116
50899: PUSH
50900: LD_INT 117
50902: PUSH
50903: LD_INT 118
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: ST_TO_ADDR
50922: GO 53445
50924: LD_INT 7
50926: DOUBLE
50927: EQUAL
50928: IFTRUE 50932
50930: GO 51044
50932: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50933: LD_ADDR_VAR 0 2
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: LD_INT 5
50946: PUSH
50947: LD_INT 7
50949: PUSH
50950: LD_INT 11
50952: PUSH
50953: LD_INT 12
50955: PUSH
50956: LD_INT 15
50958: PUSH
50959: LD_INT 16
50961: PUSH
50962: LD_INT 20
50964: PUSH
50965: LD_INT 21
50967: PUSH
50968: LD_INT 22
50970: PUSH
50971: LD_INT 23
50973: PUSH
50974: LD_INT 25
50976: PUSH
50977: LD_INT 26
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 101
50998: PUSH
50999: LD_INT 102
51001: PUSH
51002: LD_INT 103
51004: PUSH
51005: LD_INT 105
51007: PUSH
51008: LD_INT 106
51010: PUSH
51011: LD_INT 108
51013: PUSH
51014: LD_INT 112
51016: PUSH
51017: LD_INT 116
51019: PUSH
51020: LD_INT 117
51022: PUSH
51023: LD_INT 118
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: ST_TO_ADDR
51042: GO 53445
51044: LD_INT 8
51046: DOUBLE
51047: EQUAL
51048: IFTRUE 51052
51050: GO 51192
51052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51053: LD_ADDR_VAR 0 2
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 4
51063: PUSH
51064: LD_INT 5
51066: PUSH
51067: LD_INT 6
51069: PUSH
51070: LD_INT 7
51072: PUSH
51073: LD_INT 8
51075: PUSH
51076: LD_INT 11
51078: PUSH
51079: LD_INT 12
51081: PUSH
51082: LD_INT 15
51084: PUSH
51085: LD_INT 16
51087: PUSH
51088: LD_INT 20
51090: PUSH
51091: LD_INT 21
51093: PUSH
51094: LD_INT 22
51096: PUSH
51097: LD_INT 23
51099: PUSH
51100: LD_INT 25
51102: PUSH
51103: LD_INT 26
51105: PUSH
51106: LD_INT 30
51108: PUSH
51109: LD_INT 31
51111: PUSH
51112: LD_INT 32
51114: PUSH
51115: LD_INT 36
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 101
51142: PUSH
51143: LD_INT 102
51145: PUSH
51146: LD_INT 103
51148: PUSH
51149: LD_INT 105
51151: PUSH
51152: LD_INT 106
51154: PUSH
51155: LD_INT 108
51157: PUSH
51158: LD_INT 109
51160: PUSH
51161: LD_INT 112
51163: PUSH
51164: LD_INT 116
51166: PUSH
51167: LD_INT 117
51169: PUSH
51170: LD_INT 118
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: ST_TO_ADDR
51190: GO 53445
51192: LD_INT 9
51194: DOUBLE
51195: EQUAL
51196: IFTRUE 51200
51198: GO 51348
51200: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51201: LD_ADDR_VAR 0 2
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 4
51211: PUSH
51212: LD_INT 5
51214: PUSH
51215: LD_INT 6
51217: PUSH
51218: LD_INT 7
51220: PUSH
51221: LD_INT 8
51223: PUSH
51224: LD_INT 11
51226: PUSH
51227: LD_INT 12
51229: PUSH
51230: LD_INT 15
51232: PUSH
51233: LD_INT 16
51235: PUSH
51236: LD_INT 20
51238: PUSH
51239: LD_INT 21
51241: PUSH
51242: LD_INT 22
51244: PUSH
51245: LD_INT 23
51247: PUSH
51248: LD_INT 25
51250: PUSH
51251: LD_INT 26
51253: PUSH
51254: LD_INT 28
51256: PUSH
51257: LD_INT 30
51259: PUSH
51260: LD_INT 31
51262: PUSH
51263: LD_INT 32
51265: PUSH
51266: LD_INT 36
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 101
51294: PUSH
51295: LD_INT 102
51297: PUSH
51298: LD_INT 103
51300: PUSH
51301: LD_INT 105
51303: PUSH
51304: LD_INT 106
51306: PUSH
51307: LD_INT 108
51309: PUSH
51310: LD_INT 109
51312: PUSH
51313: LD_INT 112
51315: PUSH
51316: LD_INT 114
51318: PUSH
51319: LD_INT 116
51321: PUSH
51322: LD_INT 117
51324: PUSH
51325: LD_INT 118
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: ST_TO_ADDR
51346: GO 53445
51348: LD_INT 10
51350: DOUBLE
51351: EQUAL
51352: IFTRUE 51356
51354: GO 51552
51356: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51357: LD_ADDR_VAR 0 2
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 4
51367: PUSH
51368: LD_INT 5
51370: PUSH
51371: LD_INT 6
51373: PUSH
51374: LD_INT 7
51376: PUSH
51377: LD_INT 8
51379: PUSH
51380: LD_INT 9
51382: PUSH
51383: LD_INT 10
51385: PUSH
51386: LD_INT 11
51388: PUSH
51389: LD_INT 12
51391: PUSH
51392: LD_INT 13
51394: PUSH
51395: LD_INT 14
51397: PUSH
51398: LD_INT 15
51400: PUSH
51401: LD_INT 16
51403: PUSH
51404: LD_INT 17
51406: PUSH
51407: LD_INT 18
51409: PUSH
51410: LD_INT 19
51412: PUSH
51413: LD_INT 20
51415: PUSH
51416: LD_INT 21
51418: PUSH
51419: LD_INT 22
51421: PUSH
51422: LD_INT 23
51424: PUSH
51425: LD_INT 24
51427: PUSH
51428: LD_INT 25
51430: PUSH
51431: LD_INT 26
51433: PUSH
51434: LD_INT 28
51436: PUSH
51437: LD_INT 30
51439: PUSH
51440: LD_INT 31
51442: PUSH
51443: LD_INT 32
51445: PUSH
51446: LD_INT 36
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 101
51482: PUSH
51483: LD_INT 102
51485: PUSH
51486: LD_INT 103
51488: PUSH
51489: LD_INT 104
51491: PUSH
51492: LD_INT 105
51494: PUSH
51495: LD_INT 106
51497: PUSH
51498: LD_INT 107
51500: PUSH
51501: LD_INT 108
51503: PUSH
51504: LD_INT 109
51506: PUSH
51507: LD_INT 110
51509: PUSH
51510: LD_INT 111
51512: PUSH
51513: LD_INT 112
51515: PUSH
51516: LD_INT 114
51518: PUSH
51519: LD_INT 116
51521: PUSH
51522: LD_INT 117
51524: PUSH
51525: LD_INT 118
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: ST_TO_ADDR
51550: GO 53445
51552: LD_INT 11
51554: DOUBLE
51555: EQUAL
51556: IFTRUE 51560
51558: GO 51764
51560: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51561: LD_ADDR_VAR 0 2
51565: PUSH
51566: LD_INT 2
51568: PUSH
51569: LD_INT 3
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: LD_INT 5
51577: PUSH
51578: LD_INT 6
51580: PUSH
51581: LD_INT 7
51583: PUSH
51584: LD_INT 8
51586: PUSH
51587: LD_INT 9
51589: PUSH
51590: LD_INT 10
51592: PUSH
51593: LD_INT 11
51595: PUSH
51596: LD_INT 12
51598: PUSH
51599: LD_INT 13
51601: PUSH
51602: LD_INT 14
51604: PUSH
51605: LD_INT 15
51607: PUSH
51608: LD_INT 16
51610: PUSH
51611: LD_INT 17
51613: PUSH
51614: LD_INT 18
51616: PUSH
51617: LD_INT 19
51619: PUSH
51620: LD_INT 20
51622: PUSH
51623: LD_INT 21
51625: PUSH
51626: LD_INT 22
51628: PUSH
51629: LD_INT 23
51631: PUSH
51632: LD_INT 24
51634: PUSH
51635: LD_INT 25
51637: PUSH
51638: LD_INT 26
51640: PUSH
51641: LD_INT 28
51643: PUSH
51644: LD_INT 30
51646: PUSH
51647: LD_INT 31
51649: PUSH
51650: LD_INT 32
51652: PUSH
51653: LD_INT 34
51655: PUSH
51656: LD_INT 36
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 101
51694: PUSH
51695: LD_INT 102
51697: PUSH
51698: LD_INT 103
51700: PUSH
51701: LD_INT 104
51703: PUSH
51704: LD_INT 105
51706: PUSH
51707: LD_INT 106
51709: PUSH
51710: LD_INT 107
51712: PUSH
51713: LD_INT 108
51715: PUSH
51716: LD_INT 109
51718: PUSH
51719: LD_INT 110
51721: PUSH
51722: LD_INT 111
51724: PUSH
51725: LD_INT 112
51727: PUSH
51728: LD_INT 114
51730: PUSH
51731: LD_INT 116
51733: PUSH
51734: LD_INT 117
51736: PUSH
51737: LD_INT 118
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: ST_TO_ADDR
51762: GO 53445
51764: LD_INT 12
51766: DOUBLE
51767: EQUAL
51768: IFTRUE 51772
51770: GO 51992
51772: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51773: LD_ADDR_VAR 0 2
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 3
51786: PUSH
51787: LD_INT 4
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: LD_INT 6
51795: PUSH
51796: LD_INT 7
51798: PUSH
51799: LD_INT 8
51801: PUSH
51802: LD_INT 9
51804: PUSH
51805: LD_INT 10
51807: PUSH
51808: LD_INT 11
51810: PUSH
51811: LD_INT 12
51813: PUSH
51814: LD_INT 13
51816: PUSH
51817: LD_INT 14
51819: PUSH
51820: LD_INT 15
51822: PUSH
51823: LD_INT 16
51825: PUSH
51826: LD_INT 17
51828: PUSH
51829: LD_INT 18
51831: PUSH
51832: LD_INT 19
51834: PUSH
51835: LD_INT 20
51837: PUSH
51838: LD_INT 21
51840: PUSH
51841: LD_INT 22
51843: PUSH
51844: LD_INT 23
51846: PUSH
51847: LD_INT 24
51849: PUSH
51850: LD_INT 25
51852: PUSH
51853: LD_INT 26
51855: PUSH
51856: LD_INT 27
51858: PUSH
51859: LD_INT 28
51861: PUSH
51862: LD_INT 30
51864: PUSH
51865: LD_INT 31
51867: PUSH
51868: LD_INT 32
51870: PUSH
51871: LD_INT 33
51873: PUSH
51874: LD_INT 34
51876: PUSH
51877: LD_INT 36
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 101
51918: PUSH
51919: LD_INT 102
51921: PUSH
51922: LD_INT 103
51924: PUSH
51925: LD_INT 104
51927: PUSH
51928: LD_INT 105
51930: PUSH
51931: LD_INT 106
51933: PUSH
51934: LD_INT 107
51936: PUSH
51937: LD_INT 108
51939: PUSH
51940: LD_INT 109
51942: PUSH
51943: LD_INT 110
51945: PUSH
51946: LD_INT 111
51948: PUSH
51949: LD_INT 112
51951: PUSH
51952: LD_INT 113
51954: PUSH
51955: LD_INT 114
51957: PUSH
51958: LD_INT 116
51960: PUSH
51961: LD_INT 117
51963: PUSH
51964: LD_INT 118
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: ST_TO_ADDR
51990: GO 53445
51992: LD_INT 13
51994: DOUBLE
51995: EQUAL
51996: IFTRUE 52000
51998: GO 52208
52000: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52001: LD_ADDR_VAR 0 2
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 4
52017: PUSH
52018: LD_INT 5
52020: PUSH
52021: LD_INT 8
52023: PUSH
52024: LD_INT 9
52026: PUSH
52027: LD_INT 10
52029: PUSH
52030: LD_INT 11
52032: PUSH
52033: LD_INT 12
52035: PUSH
52036: LD_INT 14
52038: PUSH
52039: LD_INT 15
52041: PUSH
52042: LD_INT 16
52044: PUSH
52045: LD_INT 17
52047: PUSH
52048: LD_INT 18
52050: PUSH
52051: LD_INT 19
52053: PUSH
52054: LD_INT 20
52056: PUSH
52057: LD_INT 21
52059: PUSH
52060: LD_INT 22
52062: PUSH
52063: LD_INT 23
52065: PUSH
52066: LD_INT 24
52068: PUSH
52069: LD_INT 25
52071: PUSH
52072: LD_INT 26
52074: PUSH
52075: LD_INT 27
52077: PUSH
52078: LD_INT 28
52080: PUSH
52081: LD_INT 30
52083: PUSH
52084: LD_INT 31
52086: PUSH
52087: LD_INT 32
52089: PUSH
52090: LD_INT 33
52092: PUSH
52093: LD_INT 34
52095: PUSH
52096: LD_INT 36
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 101
52134: PUSH
52135: LD_INT 102
52137: PUSH
52138: LD_INT 103
52140: PUSH
52141: LD_INT 104
52143: PUSH
52144: LD_INT 105
52146: PUSH
52147: LD_INT 106
52149: PUSH
52150: LD_INT 107
52152: PUSH
52153: LD_INT 108
52155: PUSH
52156: LD_INT 109
52158: PUSH
52159: LD_INT 110
52161: PUSH
52162: LD_INT 111
52164: PUSH
52165: LD_INT 112
52167: PUSH
52168: LD_INT 113
52170: PUSH
52171: LD_INT 114
52173: PUSH
52174: LD_INT 116
52176: PUSH
52177: LD_INT 117
52179: PUSH
52180: LD_INT 118
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: ST_TO_ADDR
52206: GO 53445
52208: LD_INT 14
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52216
52214: GO 52440
52216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52217: LD_ADDR_VAR 0 2
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: LD_INT 4
52233: PUSH
52234: LD_INT 5
52236: PUSH
52237: LD_INT 6
52239: PUSH
52240: LD_INT 7
52242: PUSH
52243: LD_INT 8
52245: PUSH
52246: LD_INT 9
52248: PUSH
52249: LD_INT 10
52251: PUSH
52252: LD_INT 11
52254: PUSH
52255: LD_INT 12
52257: PUSH
52258: LD_INT 13
52260: PUSH
52261: LD_INT 14
52263: PUSH
52264: LD_INT 15
52266: PUSH
52267: LD_INT 16
52269: PUSH
52270: LD_INT 17
52272: PUSH
52273: LD_INT 18
52275: PUSH
52276: LD_INT 19
52278: PUSH
52279: LD_INT 20
52281: PUSH
52282: LD_INT 21
52284: PUSH
52285: LD_INT 22
52287: PUSH
52288: LD_INT 23
52290: PUSH
52291: LD_INT 24
52293: PUSH
52294: LD_INT 25
52296: PUSH
52297: LD_INT 26
52299: PUSH
52300: LD_INT 27
52302: PUSH
52303: LD_INT 28
52305: PUSH
52306: LD_INT 29
52308: PUSH
52309: LD_INT 30
52311: PUSH
52312: LD_INT 31
52314: PUSH
52315: LD_INT 32
52317: PUSH
52318: LD_INT 33
52320: PUSH
52321: LD_INT 34
52323: PUSH
52324: LD_INT 36
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 101
52366: PUSH
52367: LD_INT 102
52369: PUSH
52370: LD_INT 103
52372: PUSH
52373: LD_INT 104
52375: PUSH
52376: LD_INT 105
52378: PUSH
52379: LD_INT 106
52381: PUSH
52382: LD_INT 107
52384: PUSH
52385: LD_INT 108
52387: PUSH
52388: LD_INT 109
52390: PUSH
52391: LD_INT 110
52393: PUSH
52394: LD_INT 111
52396: PUSH
52397: LD_INT 112
52399: PUSH
52400: LD_INT 113
52402: PUSH
52403: LD_INT 114
52405: PUSH
52406: LD_INT 116
52408: PUSH
52409: LD_INT 117
52411: PUSH
52412: LD_INT 118
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: ST_TO_ADDR
52438: GO 53445
52440: LD_INT 15
52442: DOUBLE
52443: EQUAL
52444: IFTRUE 52448
52446: GO 52672
52448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52449: LD_ADDR_VAR 0 2
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 3
52462: PUSH
52463: LD_INT 4
52465: PUSH
52466: LD_INT 5
52468: PUSH
52469: LD_INT 6
52471: PUSH
52472: LD_INT 7
52474: PUSH
52475: LD_INT 8
52477: PUSH
52478: LD_INT 9
52480: PUSH
52481: LD_INT 10
52483: PUSH
52484: LD_INT 11
52486: PUSH
52487: LD_INT 12
52489: PUSH
52490: LD_INT 13
52492: PUSH
52493: LD_INT 14
52495: PUSH
52496: LD_INT 15
52498: PUSH
52499: LD_INT 16
52501: PUSH
52502: LD_INT 17
52504: PUSH
52505: LD_INT 18
52507: PUSH
52508: LD_INT 19
52510: PUSH
52511: LD_INT 20
52513: PUSH
52514: LD_INT 21
52516: PUSH
52517: LD_INT 22
52519: PUSH
52520: LD_INT 23
52522: PUSH
52523: LD_INT 24
52525: PUSH
52526: LD_INT 25
52528: PUSH
52529: LD_INT 26
52531: PUSH
52532: LD_INT 27
52534: PUSH
52535: LD_INT 28
52537: PUSH
52538: LD_INT 29
52540: PUSH
52541: LD_INT 30
52543: PUSH
52544: LD_INT 31
52546: PUSH
52547: LD_INT 32
52549: PUSH
52550: LD_INT 33
52552: PUSH
52553: LD_INT 34
52555: PUSH
52556: LD_INT 36
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 101
52598: PUSH
52599: LD_INT 102
52601: PUSH
52602: LD_INT 103
52604: PUSH
52605: LD_INT 104
52607: PUSH
52608: LD_INT 105
52610: PUSH
52611: LD_INT 106
52613: PUSH
52614: LD_INT 107
52616: PUSH
52617: LD_INT 108
52619: PUSH
52620: LD_INT 109
52622: PUSH
52623: LD_INT 110
52625: PUSH
52626: LD_INT 111
52628: PUSH
52629: LD_INT 112
52631: PUSH
52632: LD_INT 113
52634: PUSH
52635: LD_INT 114
52637: PUSH
52638: LD_INT 116
52640: PUSH
52641: LD_INT 117
52643: PUSH
52644: LD_INT 118
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: ST_TO_ADDR
52670: GO 53445
52672: LD_INT 16
52674: DOUBLE
52675: EQUAL
52676: IFTRUE 52680
52678: GO 52816
52680: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52681: LD_ADDR_VAR 0 2
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 4
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: LD_INT 7
52697: PUSH
52698: LD_INT 11
52700: PUSH
52701: LD_INT 12
52703: PUSH
52704: LD_INT 15
52706: PUSH
52707: LD_INT 16
52709: PUSH
52710: LD_INT 20
52712: PUSH
52713: LD_INT 21
52715: PUSH
52716: LD_INT 22
52718: PUSH
52719: LD_INT 23
52721: PUSH
52722: LD_INT 25
52724: PUSH
52725: LD_INT 26
52727: PUSH
52728: LD_INT 30
52730: PUSH
52731: LD_INT 31
52733: PUSH
52734: LD_INT 32
52736: PUSH
52737: LD_INT 33
52739: PUSH
52740: LD_INT 34
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 101
52766: PUSH
52767: LD_INT 102
52769: PUSH
52770: LD_INT 103
52772: PUSH
52773: LD_INT 106
52775: PUSH
52776: LD_INT 108
52778: PUSH
52779: LD_INT 112
52781: PUSH
52782: LD_INT 113
52784: PUSH
52785: LD_INT 114
52787: PUSH
52788: LD_INT 116
52790: PUSH
52791: LD_INT 117
52793: PUSH
52794: LD_INT 118
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: ST_TO_ADDR
52814: GO 53445
52816: LD_INT 17
52818: DOUBLE
52819: EQUAL
52820: IFTRUE 52824
52822: GO 53048
52824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 3
52838: PUSH
52839: LD_INT 4
52841: PUSH
52842: LD_INT 5
52844: PUSH
52845: LD_INT 6
52847: PUSH
52848: LD_INT 7
52850: PUSH
52851: LD_INT 8
52853: PUSH
52854: LD_INT 9
52856: PUSH
52857: LD_INT 10
52859: PUSH
52860: LD_INT 11
52862: PUSH
52863: LD_INT 12
52865: PUSH
52866: LD_INT 13
52868: PUSH
52869: LD_INT 14
52871: PUSH
52872: LD_INT 15
52874: PUSH
52875: LD_INT 16
52877: PUSH
52878: LD_INT 17
52880: PUSH
52881: LD_INT 18
52883: PUSH
52884: LD_INT 19
52886: PUSH
52887: LD_INT 20
52889: PUSH
52890: LD_INT 21
52892: PUSH
52893: LD_INT 22
52895: PUSH
52896: LD_INT 23
52898: PUSH
52899: LD_INT 24
52901: PUSH
52902: LD_INT 25
52904: PUSH
52905: LD_INT 26
52907: PUSH
52908: LD_INT 27
52910: PUSH
52911: LD_INT 28
52913: PUSH
52914: LD_INT 29
52916: PUSH
52917: LD_INT 30
52919: PUSH
52920: LD_INT 31
52922: PUSH
52923: LD_INT 32
52925: PUSH
52926: LD_INT 33
52928: PUSH
52929: LD_INT 34
52931: PUSH
52932: LD_INT 36
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 101
52974: PUSH
52975: LD_INT 102
52977: PUSH
52978: LD_INT 103
52980: PUSH
52981: LD_INT 104
52983: PUSH
52984: LD_INT 105
52986: PUSH
52987: LD_INT 106
52989: PUSH
52990: LD_INT 107
52992: PUSH
52993: LD_INT 108
52995: PUSH
52996: LD_INT 109
52998: PUSH
52999: LD_INT 110
53001: PUSH
53002: LD_INT 111
53004: PUSH
53005: LD_INT 112
53007: PUSH
53008: LD_INT 113
53010: PUSH
53011: LD_INT 114
53013: PUSH
53014: LD_INT 116
53016: PUSH
53017: LD_INT 117
53019: PUSH
53020: LD_INT 118
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: ST_TO_ADDR
53046: GO 53445
53048: LD_INT 18
53050: DOUBLE
53051: EQUAL
53052: IFTRUE 53056
53054: GO 53204
53056: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53057: LD_ADDR_VAR 0 2
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: LD_INT 5
53070: PUSH
53071: LD_INT 7
53073: PUSH
53074: LD_INT 11
53076: PUSH
53077: LD_INT 12
53079: PUSH
53080: LD_INT 15
53082: PUSH
53083: LD_INT 16
53085: PUSH
53086: LD_INT 20
53088: PUSH
53089: LD_INT 21
53091: PUSH
53092: LD_INT 22
53094: PUSH
53095: LD_INT 23
53097: PUSH
53098: LD_INT 25
53100: PUSH
53101: LD_INT 26
53103: PUSH
53104: LD_INT 30
53106: PUSH
53107: LD_INT 31
53109: PUSH
53110: LD_INT 32
53112: PUSH
53113: LD_INT 33
53115: PUSH
53116: LD_INT 34
53118: PUSH
53119: LD_INT 35
53121: PUSH
53122: LD_INT 36
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 101
53150: PUSH
53151: LD_INT 102
53153: PUSH
53154: LD_INT 103
53156: PUSH
53157: LD_INT 106
53159: PUSH
53160: LD_INT 108
53162: PUSH
53163: LD_INT 112
53165: PUSH
53166: LD_INT 113
53168: PUSH
53169: LD_INT 114
53171: PUSH
53172: LD_INT 115
53174: PUSH
53175: LD_INT 116
53177: PUSH
53178: LD_INT 117
53180: PUSH
53181: LD_INT 118
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: ST_TO_ADDR
53202: GO 53445
53204: LD_INT 19
53206: DOUBLE
53207: EQUAL
53208: IFTRUE 53212
53210: GO 53444
53212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53213: LD_ADDR_VAR 0 2
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: LD_INT 4
53229: PUSH
53230: LD_INT 5
53232: PUSH
53233: LD_INT 6
53235: PUSH
53236: LD_INT 7
53238: PUSH
53239: LD_INT 8
53241: PUSH
53242: LD_INT 9
53244: PUSH
53245: LD_INT 10
53247: PUSH
53248: LD_INT 11
53250: PUSH
53251: LD_INT 12
53253: PUSH
53254: LD_INT 13
53256: PUSH
53257: LD_INT 14
53259: PUSH
53260: LD_INT 15
53262: PUSH
53263: LD_INT 16
53265: PUSH
53266: LD_INT 17
53268: PUSH
53269: LD_INT 18
53271: PUSH
53272: LD_INT 19
53274: PUSH
53275: LD_INT 20
53277: PUSH
53278: LD_INT 21
53280: PUSH
53281: LD_INT 22
53283: PUSH
53284: LD_INT 23
53286: PUSH
53287: LD_INT 24
53289: PUSH
53290: LD_INT 25
53292: PUSH
53293: LD_INT 26
53295: PUSH
53296: LD_INT 27
53298: PUSH
53299: LD_INT 28
53301: PUSH
53302: LD_INT 29
53304: PUSH
53305: LD_INT 30
53307: PUSH
53308: LD_INT 31
53310: PUSH
53311: LD_INT 32
53313: PUSH
53314: LD_INT 33
53316: PUSH
53317: LD_INT 34
53319: PUSH
53320: LD_INT 35
53322: PUSH
53323: LD_INT 36
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 101
53366: PUSH
53367: LD_INT 102
53369: PUSH
53370: LD_INT 103
53372: PUSH
53373: LD_INT 104
53375: PUSH
53376: LD_INT 105
53378: PUSH
53379: LD_INT 106
53381: PUSH
53382: LD_INT 107
53384: PUSH
53385: LD_INT 108
53387: PUSH
53388: LD_INT 109
53390: PUSH
53391: LD_INT 110
53393: PUSH
53394: LD_INT 111
53396: PUSH
53397: LD_INT 112
53399: PUSH
53400: LD_INT 113
53402: PUSH
53403: LD_INT 114
53405: PUSH
53406: LD_INT 115
53408: PUSH
53409: LD_INT 116
53411: PUSH
53412: LD_INT 117
53414: PUSH
53415: LD_INT 118
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: ST_TO_ADDR
53442: GO 53445
53444: POP
// end else
53445: GO 53676
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53447: LD_ADDR_VAR 0 2
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: LD_INT 4
53463: PUSH
53464: LD_INT 5
53466: PUSH
53467: LD_INT 6
53469: PUSH
53470: LD_INT 7
53472: PUSH
53473: LD_INT 8
53475: PUSH
53476: LD_INT 9
53478: PUSH
53479: LD_INT 10
53481: PUSH
53482: LD_INT 11
53484: PUSH
53485: LD_INT 12
53487: PUSH
53488: LD_INT 13
53490: PUSH
53491: LD_INT 14
53493: PUSH
53494: LD_INT 15
53496: PUSH
53497: LD_INT 16
53499: PUSH
53500: LD_INT 17
53502: PUSH
53503: LD_INT 18
53505: PUSH
53506: LD_INT 19
53508: PUSH
53509: LD_INT 20
53511: PUSH
53512: LD_INT 21
53514: PUSH
53515: LD_INT 22
53517: PUSH
53518: LD_INT 23
53520: PUSH
53521: LD_INT 24
53523: PUSH
53524: LD_INT 25
53526: PUSH
53527: LD_INT 26
53529: PUSH
53530: LD_INT 27
53532: PUSH
53533: LD_INT 28
53535: PUSH
53536: LD_INT 29
53538: PUSH
53539: LD_INT 30
53541: PUSH
53542: LD_INT 31
53544: PUSH
53545: LD_INT 32
53547: PUSH
53548: LD_INT 33
53550: PUSH
53551: LD_INT 34
53553: PUSH
53554: LD_INT 35
53556: PUSH
53557: LD_INT 36
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 101
53600: PUSH
53601: LD_INT 102
53603: PUSH
53604: LD_INT 103
53606: PUSH
53607: LD_INT 104
53609: PUSH
53610: LD_INT 105
53612: PUSH
53613: LD_INT 106
53615: PUSH
53616: LD_INT 107
53618: PUSH
53619: LD_INT 108
53621: PUSH
53622: LD_INT 109
53624: PUSH
53625: LD_INT 110
53627: PUSH
53628: LD_INT 111
53630: PUSH
53631: LD_INT 112
53633: PUSH
53634: LD_INT 113
53636: PUSH
53637: LD_INT 114
53639: PUSH
53640: LD_INT 115
53642: PUSH
53643: LD_INT 116
53645: PUSH
53646: LD_INT 117
53648: PUSH
53649: LD_INT 118
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: ST_TO_ADDR
// if result then
53676: LD_VAR 0 2
53680: IFFALSE 54466
// begin normal :=  ;
53682: LD_ADDR_VAR 0 5
53686: PUSH
53687: LD_STRING 
53689: ST_TO_ADDR
// hardcore :=  ;
53690: LD_ADDR_VAR 0 6
53694: PUSH
53695: LD_STRING 
53697: ST_TO_ADDR
// active :=  ;
53698: LD_ADDR_VAR 0 7
53702: PUSH
53703: LD_STRING 
53705: ST_TO_ADDR
// for i = 1 to normalCounter do
53706: LD_ADDR_VAR 0 8
53710: PUSH
53711: DOUBLE
53712: LD_INT 1
53714: DEC
53715: ST_TO_ADDR
53716: LD_EXP 14
53720: PUSH
53721: FOR_TO
53722: IFFALSE 53823
// begin tmp := 0 ;
53724: LD_ADDR_VAR 0 3
53728: PUSH
53729: LD_STRING 0
53731: ST_TO_ADDR
// if result [ 1 ] then
53732: LD_VAR 0 2
53736: PUSH
53737: LD_INT 1
53739: ARRAY
53740: IFFALSE 53805
// if result [ 1 ] [ 1 ] = i then
53742: LD_VAR 0 2
53746: PUSH
53747: LD_INT 1
53749: ARRAY
53750: PUSH
53751: LD_INT 1
53753: ARRAY
53754: PUSH
53755: LD_VAR 0 8
53759: EQUAL
53760: IFFALSE 53805
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53762: LD_ADDR_VAR 0 2
53766: PUSH
53767: LD_VAR 0 2
53771: PPUSH
53772: LD_INT 1
53774: PPUSH
53775: LD_VAR 0 2
53779: PUSH
53780: LD_INT 1
53782: ARRAY
53783: PPUSH
53784: LD_INT 1
53786: PPUSH
53787: CALL_OW 3
53791: PPUSH
53792: CALL_OW 1
53796: ST_TO_ADDR
// tmp := 1 ;
53797: LD_ADDR_VAR 0 3
53801: PUSH
53802: LD_STRING 1
53804: ST_TO_ADDR
// end ; normal := normal & tmp ;
53805: LD_ADDR_VAR 0 5
53809: PUSH
53810: LD_VAR 0 5
53814: PUSH
53815: LD_VAR 0 3
53819: STR
53820: ST_TO_ADDR
// end ;
53821: GO 53721
53823: POP
53824: POP
// for i = 1 to hardcoreCounter do
53825: LD_ADDR_VAR 0 8
53829: PUSH
53830: DOUBLE
53831: LD_INT 1
53833: DEC
53834: ST_TO_ADDR
53835: LD_EXP 15
53839: PUSH
53840: FOR_TO
53841: IFFALSE 53946
// begin tmp := 0 ;
53843: LD_ADDR_VAR 0 3
53847: PUSH
53848: LD_STRING 0
53850: ST_TO_ADDR
// if result [ 2 ] then
53851: LD_VAR 0 2
53855: PUSH
53856: LD_INT 2
53858: ARRAY
53859: IFFALSE 53928
// if result [ 2 ] [ 1 ] = 100 + i then
53861: LD_VAR 0 2
53865: PUSH
53866: LD_INT 2
53868: ARRAY
53869: PUSH
53870: LD_INT 1
53872: ARRAY
53873: PUSH
53874: LD_INT 100
53876: PUSH
53877: LD_VAR 0 8
53881: PLUS
53882: EQUAL
53883: IFFALSE 53928
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53885: LD_ADDR_VAR 0 2
53889: PUSH
53890: LD_VAR 0 2
53894: PPUSH
53895: LD_INT 2
53897: PPUSH
53898: LD_VAR 0 2
53902: PUSH
53903: LD_INT 2
53905: ARRAY
53906: PPUSH
53907: LD_INT 1
53909: PPUSH
53910: CALL_OW 3
53914: PPUSH
53915: CALL_OW 1
53919: ST_TO_ADDR
// tmp := 1 ;
53920: LD_ADDR_VAR 0 3
53924: PUSH
53925: LD_STRING 1
53927: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53928: LD_ADDR_VAR 0 6
53932: PUSH
53933: LD_VAR 0 6
53937: PUSH
53938: LD_VAR 0 3
53942: STR
53943: ST_TO_ADDR
// end ;
53944: GO 53840
53946: POP
53947: POP
// if isGameLoad then
53948: LD_VAR 0 1
53952: IFFALSE 54427
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53954: LD_ADDR_VAR 0 4
53958: PUSH
53959: LD_EXP 18
53963: PUSH
53964: LD_EXP 17
53968: PUSH
53969: LD_EXP 19
53973: PUSH
53974: LD_EXP 16
53978: PUSH
53979: LD_EXP 20
53983: PUSH
53984: LD_EXP 21
53988: PUSH
53989: LD_EXP 22
53993: PUSH
53994: LD_EXP 23
53998: PUSH
53999: LD_EXP 24
54003: PUSH
54004: LD_EXP 25
54008: PUSH
54009: LD_EXP 26
54013: PUSH
54014: LD_EXP 27
54018: PUSH
54019: LD_EXP 28
54023: PUSH
54024: LD_EXP 29
54028: PUSH
54029: LD_EXP 37
54033: PUSH
54034: LD_EXP 38
54038: PUSH
54039: LD_EXP 39
54043: PUSH
54044: LD_EXP 40
54048: PUSH
54049: LD_EXP 42
54053: PUSH
54054: LD_EXP 43
54058: PUSH
54059: LD_EXP 44
54063: PUSH
54064: LD_EXP 47
54068: PUSH
54069: LD_EXP 49
54073: PUSH
54074: LD_EXP 50
54078: PUSH
54079: LD_EXP 51
54083: PUSH
54084: LD_EXP 53
54088: PUSH
54089: LD_EXP 54
54093: PUSH
54094: LD_EXP 57
54098: PUSH
54099: LD_EXP 58
54103: PUSH
54104: LD_EXP 59
54108: PUSH
54109: LD_EXP 60
54113: PUSH
54114: LD_EXP 61
54118: PUSH
54119: LD_EXP 62
54123: PUSH
54124: LD_EXP 63
54128: PUSH
54129: LD_EXP 64
54133: PUSH
54134: LD_EXP 65
54138: PUSH
54139: LD_EXP 30
54143: PUSH
54144: LD_EXP 31
54148: PUSH
54149: LD_EXP 34
54153: PUSH
54154: LD_EXP 35
54158: PUSH
54159: LD_EXP 36
54163: PUSH
54164: LD_EXP 32
54168: PUSH
54169: LD_EXP 33
54173: PUSH
54174: LD_EXP 41
54178: PUSH
54179: LD_EXP 45
54183: PUSH
54184: LD_EXP 46
54188: PUSH
54189: LD_EXP 48
54193: PUSH
54194: LD_EXP 52
54198: PUSH
54199: LD_EXP 55
54203: PUSH
54204: LD_EXP 56
54208: PUSH
54209: LD_EXP 66
54213: PUSH
54214: LD_EXP 67
54218: PUSH
54219: LD_EXP 68
54223: PUSH
54224: LD_EXP 69
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: ST_TO_ADDR
// tmp :=  ;
54285: LD_ADDR_VAR 0 3
54289: PUSH
54290: LD_STRING 
54292: ST_TO_ADDR
// for i = 1 to normalCounter do
54293: LD_ADDR_VAR 0 8
54297: PUSH
54298: DOUBLE
54299: LD_INT 1
54301: DEC
54302: ST_TO_ADDR
54303: LD_EXP 14
54307: PUSH
54308: FOR_TO
54309: IFFALSE 54345
// begin if flags [ i ] then
54311: LD_VAR 0 4
54315: PUSH
54316: LD_VAR 0 8
54320: ARRAY
54321: IFFALSE 54343
// tmp := tmp & i & ; ;
54323: LD_ADDR_VAR 0 3
54327: PUSH
54328: LD_VAR 0 3
54332: PUSH
54333: LD_VAR 0 8
54337: STR
54338: PUSH
54339: LD_STRING ;
54341: STR
54342: ST_TO_ADDR
// end ;
54343: GO 54308
54345: POP
54346: POP
// for i = 1 to hardcoreCounter do
54347: LD_ADDR_VAR 0 8
54351: PUSH
54352: DOUBLE
54353: LD_INT 1
54355: DEC
54356: ST_TO_ADDR
54357: LD_EXP 15
54361: PUSH
54362: FOR_TO
54363: IFFALSE 54409
// begin if flags [ normalCounter + i ] then
54365: LD_VAR 0 4
54369: PUSH
54370: LD_EXP 14
54374: PUSH
54375: LD_VAR 0 8
54379: PLUS
54380: ARRAY
54381: IFFALSE 54407
// tmp := tmp & ( 100 + i ) & ; ;
54383: LD_ADDR_VAR 0 3
54387: PUSH
54388: LD_VAR 0 3
54392: PUSH
54393: LD_INT 100
54395: PUSH
54396: LD_VAR 0 8
54400: PLUS
54401: STR
54402: PUSH
54403: LD_STRING ;
54405: STR
54406: ST_TO_ADDR
// end ;
54407: GO 54362
54409: POP
54410: POP
// if tmp then
54411: LD_VAR 0 3
54415: IFFALSE 54427
// active := tmp ;
54417: LD_ADDR_VAR 0 7
54421: PUSH
54422: LD_VAR 0 3
54426: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54427: LD_STRING getStreamItemsFromMission("
54429: PUSH
54430: LD_VAR 0 5
54434: STR
54435: PUSH
54436: LD_STRING ","
54438: STR
54439: PUSH
54440: LD_VAR 0 6
54444: STR
54445: PUSH
54446: LD_STRING ","
54448: STR
54449: PUSH
54450: LD_VAR 0 7
54454: STR
54455: PUSH
54456: LD_STRING ")
54458: STR
54459: PPUSH
54460: CALL_OW 559
// end else
54464: GO 54473
// ToLua ( getStreamItemsFromMission("","","") ) ;
54466: LD_STRING getStreamItemsFromMission("","","")
54468: PPUSH
54469: CALL_OW 559
// end ;
54473: LD_VAR 0 2
54477: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54478: LD_EXP 13
54482: PUSH
54483: LD_EXP 18
54487: AND
54488: IFFALSE 54612
54490: GO 54492
54492: DISABLE
54493: LD_INT 0
54495: PPUSH
54496: PPUSH
// begin enable ;
54497: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54498: LD_ADDR_VAR 0 2
54502: PUSH
54503: LD_INT 22
54505: PUSH
54506: LD_OWVAR 2
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: LD_INT 34
54520: PUSH
54521: LD_INT 7
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 34
54530: PUSH
54531: LD_INT 45
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 34
54540: PUSH
54541: LD_INT 28
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 34
54550: PUSH
54551: LD_INT 47
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PPUSH
54569: CALL_OW 69
54573: ST_TO_ADDR
// if not tmp then
54574: LD_VAR 0 2
54578: NOT
54579: IFFALSE 54583
// exit ;
54581: GO 54612
// for i in tmp do
54583: LD_ADDR_VAR 0 1
54587: PUSH
54588: LD_VAR 0 2
54592: PUSH
54593: FOR_IN
54594: IFFALSE 54610
// begin SetLives ( i , 0 ) ;
54596: LD_VAR 0 1
54600: PPUSH
54601: LD_INT 0
54603: PPUSH
54604: CALL_OW 234
// end ;
54608: GO 54593
54610: POP
54611: POP
// end ;
54612: PPOPN 2
54614: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54615: LD_EXP 13
54619: PUSH
54620: LD_EXP 19
54624: AND
54625: IFFALSE 54709
54627: GO 54629
54629: DISABLE
54630: LD_INT 0
54632: PPUSH
54633: PPUSH
// begin enable ;
54634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54635: LD_ADDR_VAR 0 2
54639: PUSH
54640: LD_INT 22
54642: PUSH
54643: LD_OWVAR 2
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 32
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PPUSH
54666: CALL_OW 69
54670: ST_TO_ADDR
// if not tmp then
54671: LD_VAR 0 2
54675: NOT
54676: IFFALSE 54680
// exit ;
54678: GO 54709
// for i in tmp do
54680: LD_ADDR_VAR 0 1
54684: PUSH
54685: LD_VAR 0 2
54689: PUSH
54690: FOR_IN
54691: IFFALSE 54707
// begin SetLives ( i , 0 ) ;
54693: LD_VAR 0 1
54697: PPUSH
54698: LD_INT 0
54700: PPUSH
54701: CALL_OW 234
// end ;
54705: GO 54690
54707: POP
54708: POP
// end ;
54709: PPOPN 2
54711: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54712: LD_EXP 13
54716: PUSH
54717: LD_EXP 16
54721: AND
54722: IFFALSE 54815
54724: GO 54726
54726: DISABLE
54727: LD_INT 0
54729: PPUSH
// begin enable ;
54730: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54731: LD_ADDR_VAR 0 1
54735: PUSH
54736: LD_INT 22
54738: PUSH
54739: LD_OWVAR 2
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 25
54753: PUSH
54754: LD_INT 5
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 25
54763: PUSH
54764: LD_INT 9
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 25
54773: PUSH
54774: LD_INT 8
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PPUSH
54791: CALL_OW 69
54795: PUSH
54796: FOR_IN
54797: IFFALSE 54813
// begin SetClass ( i , 1 ) ;
54799: LD_VAR 0 1
54803: PPUSH
54804: LD_INT 1
54806: PPUSH
54807: CALL_OW 336
// end ;
54811: GO 54796
54813: POP
54814: POP
// end ;
54815: PPOPN 1
54817: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54818: LD_EXP 13
54822: PUSH
54823: LD_EXP 17
54827: AND
54828: PUSH
54829: LD_OWVAR 65
54833: PUSH
54834: LD_INT 7
54836: LESS
54837: AND
54838: IFFALSE 54852
54840: GO 54842
54842: DISABLE
// begin enable ;
54843: ENABLE
// game_speed := 7 ;
54844: LD_ADDR_OWVAR 65
54848: PUSH
54849: LD_INT 7
54851: ST_TO_ADDR
// end ;
54852: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54853: LD_EXP 13
54857: PUSH
54858: LD_EXP 20
54862: AND
54863: IFFALSE 55065
54865: GO 54867
54867: DISABLE
54868: LD_INT 0
54870: PPUSH
54871: PPUSH
54872: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54873: LD_ADDR_VAR 0 3
54877: PUSH
54878: LD_INT 81
54880: PUSH
54881: LD_OWVAR 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 21
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PPUSH
54904: CALL_OW 69
54908: ST_TO_ADDR
// if not tmp then
54909: LD_VAR 0 3
54913: NOT
54914: IFFALSE 54918
// exit ;
54916: GO 55065
// if tmp > 5 then
54918: LD_VAR 0 3
54922: PUSH
54923: LD_INT 5
54925: GREATER
54926: IFFALSE 54938
// k := 5 else
54928: LD_ADDR_VAR 0 2
54932: PUSH
54933: LD_INT 5
54935: ST_TO_ADDR
54936: GO 54948
// k := tmp ;
54938: LD_ADDR_VAR 0 2
54942: PUSH
54943: LD_VAR 0 3
54947: ST_TO_ADDR
// for i := 1 to k do
54948: LD_ADDR_VAR 0 1
54952: PUSH
54953: DOUBLE
54954: LD_INT 1
54956: DEC
54957: ST_TO_ADDR
54958: LD_VAR 0 2
54962: PUSH
54963: FOR_TO
54964: IFFALSE 55063
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54966: LD_VAR 0 3
54970: PUSH
54971: LD_VAR 0 1
54975: ARRAY
54976: PPUSH
54977: LD_VAR 0 1
54981: PUSH
54982: LD_INT 4
54984: MOD
54985: PUSH
54986: LD_INT 1
54988: PLUS
54989: PPUSH
54990: CALL_OW 259
54994: PUSH
54995: LD_INT 10
54997: LESS
54998: IFFALSE 55061
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55000: LD_VAR 0 3
55004: PUSH
55005: LD_VAR 0 1
55009: ARRAY
55010: PPUSH
55011: LD_VAR 0 1
55015: PUSH
55016: LD_INT 4
55018: MOD
55019: PUSH
55020: LD_INT 1
55022: PLUS
55023: PPUSH
55024: LD_VAR 0 3
55028: PUSH
55029: LD_VAR 0 1
55033: ARRAY
55034: PPUSH
55035: LD_VAR 0 1
55039: PUSH
55040: LD_INT 4
55042: MOD
55043: PUSH
55044: LD_INT 1
55046: PLUS
55047: PPUSH
55048: CALL_OW 259
55052: PUSH
55053: LD_INT 1
55055: PLUS
55056: PPUSH
55057: CALL_OW 237
55061: GO 54963
55063: POP
55064: POP
// end ;
55065: PPOPN 3
55067: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55068: LD_EXP 13
55072: PUSH
55073: LD_EXP 21
55077: AND
55078: IFFALSE 55098
55080: GO 55082
55082: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55083: LD_INT 4
55085: PPUSH
55086: LD_OWVAR 2
55090: PPUSH
55091: LD_INT 0
55093: PPUSH
55094: CALL_OW 324
55098: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55099: LD_EXP 13
55103: PUSH
55104: LD_EXP 50
55108: AND
55109: IFFALSE 55129
55111: GO 55113
55113: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55114: LD_INT 19
55116: PPUSH
55117: LD_OWVAR 2
55121: PPUSH
55122: LD_INT 0
55124: PPUSH
55125: CALL_OW 324
55129: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55130: LD_EXP 13
55134: PUSH
55135: LD_EXP 22
55139: AND
55140: IFFALSE 55242
55142: GO 55144
55144: DISABLE
55145: LD_INT 0
55147: PPUSH
55148: PPUSH
// begin enable ;
55149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55150: LD_ADDR_VAR 0 2
55154: PUSH
55155: LD_INT 22
55157: PUSH
55158: LD_OWVAR 2
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 34
55172: PUSH
55173: LD_INT 11
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 34
55182: PUSH
55183: LD_INT 30
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PPUSH
55199: CALL_OW 69
55203: ST_TO_ADDR
// if not tmp then
55204: LD_VAR 0 2
55208: NOT
55209: IFFALSE 55213
// exit ;
55211: GO 55242
// for i in tmp do
55213: LD_ADDR_VAR 0 1
55217: PUSH
55218: LD_VAR 0 2
55222: PUSH
55223: FOR_IN
55224: IFFALSE 55240
// begin SetLives ( i , 0 ) ;
55226: LD_VAR 0 1
55230: PPUSH
55231: LD_INT 0
55233: PPUSH
55234: CALL_OW 234
// end ;
55238: GO 55223
55240: POP
55241: POP
// end ;
55242: PPOPN 2
55244: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55245: LD_EXP 13
55249: PUSH
55250: LD_EXP 23
55254: AND
55255: IFFALSE 55275
55257: GO 55259
55259: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55260: LD_INT 32
55262: PPUSH
55263: LD_OWVAR 2
55267: PPUSH
55268: LD_INT 0
55270: PPUSH
55271: CALL_OW 324
55275: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55276: LD_EXP 13
55280: PUSH
55281: LD_EXP 24
55285: AND
55286: IFFALSE 55467
55288: GO 55290
55290: DISABLE
55291: LD_INT 0
55293: PPUSH
55294: PPUSH
55295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55296: LD_ADDR_VAR 0 2
55300: PUSH
55301: LD_INT 22
55303: PUSH
55304: LD_OWVAR 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 33
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PPUSH
55327: CALL_OW 69
55331: ST_TO_ADDR
// if not tmp then
55332: LD_VAR 0 2
55336: NOT
55337: IFFALSE 55341
// exit ;
55339: GO 55467
// side := 0 ;
55341: LD_ADDR_VAR 0 3
55345: PUSH
55346: LD_INT 0
55348: ST_TO_ADDR
// for i := 1 to 8 do
55349: LD_ADDR_VAR 0 1
55353: PUSH
55354: DOUBLE
55355: LD_INT 1
55357: DEC
55358: ST_TO_ADDR
55359: LD_INT 8
55361: PUSH
55362: FOR_TO
55363: IFFALSE 55411
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55365: LD_OWVAR 2
55369: PUSH
55370: LD_VAR 0 1
55374: NONEQUAL
55375: PUSH
55376: LD_OWVAR 2
55380: PPUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: CALL_OW 81
55390: PUSH
55391: LD_INT 2
55393: EQUAL
55394: AND
55395: IFFALSE 55409
// begin side := i ;
55397: LD_ADDR_VAR 0 3
55401: PUSH
55402: LD_VAR 0 1
55406: ST_TO_ADDR
// break ;
55407: GO 55411
// end ;
55409: GO 55362
55411: POP
55412: POP
// if not side then
55413: LD_VAR 0 3
55417: NOT
55418: IFFALSE 55422
// exit ;
55420: GO 55467
// for i := 1 to tmp do
55422: LD_ADDR_VAR 0 1
55426: PUSH
55427: DOUBLE
55428: LD_INT 1
55430: DEC
55431: ST_TO_ADDR
55432: LD_VAR 0 2
55436: PUSH
55437: FOR_TO
55438: IFFALSE 55465
// if Prob ( 60 ) then
55440: LD_INT 60
55442: PPUSH
55443: CALL_OW 13
55447: IFFALSE 55463
// SetSide ( i , side ) ;
55449: LD_VAR 0 1
55453: PPUSH
55454: LD_VAR 0 3
55458: PPUSH
55459: CALL_OW 235
55463: GO 55437
55465: POP
55466: POP
// end ;
55467: PPOPN 3
55469: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55470: LD_EXP 13
55474: PUSH
55475: LD_EXP 26
55479: AND
55480: IFFALSE 55599
55482: GO 55484
55484: DISABLE
55485: LD_INT 0
55487: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55488: LD_ADDR_VAR 0 1
55492: PUSH
55493: LD_INT 22
55495: PUSH
55496: LD_OWVAR 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 21
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: LD_INT 23
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: LIST
55536: PPUSH
55537: CALL_OW 69
55541: PUSH
55542: FOR_IN
55543: IFFALSE 55597
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55545: LD_VAR 0 1
55549: PPUSH
55550: CALL_OW 257
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: LD_INT 3
55563: PUSH
55564: LD_INT 4
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: IN
55573: IFFALSE 55595
// SetClass ( un , rand ( 1 , 4 ) ) ;
55575: LD_VAR 0 1
55579: PPUSH
55580: LD_INT 1
55582: PPUSH
55583: LD_INT 4
55585: PPUSH
55586: CALL_OW 12
55590: PPUSH
55591: CALL_OW 336
55595: GO 55542
55597: POP
55598: POP
// end ;
55599: PPOPN 1
55601: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55602: LD_EXP 13
55606: PUSH
55607: LD_EXP 25
55611: AND
55612: IFFALSE 55691
55614: GO 55616
55616: DISABLE
55617: LD_INT 0
55619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55620: LD_ADDR_VAR 0 1
55624: PUSH
55625: LD_INT 22
55627: PUSH
55628: LD_OWVAR 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 21
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PPUSH
55651: CALL_OW 69
55655: ST_TO_ADDR
// if not tmp then
55656: LD_VAR 0 1
55660: NOT
55661: IFFALSE 55665
// exit ;
55663: GO 55691
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55665: LD_VAR 0 1
55669: PUSH
55670: LD_INT 1
55672: PPUSH
55673: LD_VAR 0 1
55677: PPUSH
55678: CALL_OW 12
55682: ARRAY
55683: PPUSH
55684: LD_INT 100
55686: PPUSH
55687: CALL_OW 234
// end ;
55691: PPOPN 1
55693: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55694: LD_EXP 13
55698: PUSH
55699: LD_EXP 27
55703: AND
55704: IFFALSE 55802
55706: GO 55708
55708: DISABLE
55709: LD_INT 0
55711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55712: LD_ADDR_VAR 0 1
55716: PUSH
55717: LD_INT 22
55719: PUSH
55720: LD_OWVAR 2
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 21
55731: PUSH
55732: LD_INT 1
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PPUSH
55743: CALL_OW 69
55747: ST_TO_ADDR
// if not tmp then
55748: LD_VAR 0 1
55752: NOT
55753: IFFALSE 55757
// exit ;
55755: GO 55802
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55757: LD_VAR 0 1
55761: PUSH
55762: LD_INT 1
55764: PPUSH
55765: LD_VAR 0 1
55769: PPUSH
55770: CALL_OW 12
55774: ARRAY
55775: PPUSH
55776: LD_INT 1
55778: PPUSH
55779: LD_INT 4
55781: PPUSH
55782: CALL_OW 12
55786: PPUSH
55787: LD_INT 3000
55789: PPUSH
55790: LD_INT 9000
55792: PPUSH
55793: CALL_OW 12
55797: PPUSH
55798: CALL_OW 492
// end ;
55802: PPOPN 1
55804: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55805: LD_EXP 13
55809: PUSH
55810: LD_EXP 28
55814: AND
55815: IFFALSE 55835
55817: GO 55819
55819: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55820: LD_INT 1
55822: PPUSH
55823: LD_OWVAR 2
55827: PPUSH
55828: LD_INT 0
55830: PPUSH
55831: CALL_OW 324
55835: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55836: LD_EXP 13
55840: PUSH
55841: LD_EXP 29
55845: AND
55846: IFFALSE 55929
55848: GO 55850
55850: DISABLE
55851: LD_INT 0
55853: PPUSH
55854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: LD_INT 22
55862: PUSH
55863: LD_OWVAR 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 21
55874: PUSH
55875: LD_INT 3
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PPUSH
55886: CALL_OW 69
55890: ST_TO_ADDR
// if not tmp then
55891: LD_VAR 0 2
55895: NOT
55896: IFFALSE 55900
// exit ;
55898: GO 55929
// for i in tmp do
55900: LD_ADDR_VAR 0 1
55904: PUSH
55905: LD_VAR 0 2
55909: PUSH
55910: FOR_IN
55911: IFFALSE 55927
// SetBLevel ( i , 10 ) ;
55913: LD_VAR 0 1
55917: PPUSH
55918: LD_INT 10
55920: PPUSH
55921: CALL_OW 241
55925: GO 55910
55927: POP
55928: POP
// end ;
55929: PPOPN 2
55931: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55932: LD_EXP 13
55936: PUSH
55937: LD_EXP 30
55941: AND
55942: IFFALSE 56053
55944: GO 55946
55946: DISABLE
55947: LD_INT 0
55949: PPUSH
55950: PPUSH
55951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55952: LD_ADDR_VAR 0 3
55956: PUSH
55957: LD_INT 22
55959: PUSH
55960: LD_OWVAR 2
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 25
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PPUSH
55983: CALL_OW 69
55987: ST_TO_ADDR
// if not tmp then
55988: LD_VAR 0 3
55992: NOT
55993: IFFALSE 55997
// exit ;
55995: GO 56053
// un := tmp [ rand ( 1 , tmp ) ] ;
55997: LD_ADDR_VAR 0 2
56001: PUSH
56002: LD_VAR 0 3
56006: PUSH
56007: LD_INT 1
56009: PPUSH
56010: LD_VAR 0 3
56014: PPUSH
56015: CALL_OW 12
56019: ARRAY
56020: ST_TO_ADDR
// if Crawls ( un ) then
56021: LD_VAR 0 2
56025: PPUSH
56026: CALL_OW 318
56030: IFFALSE 56041
// ComWalk ( un ) ;
56032: LD_VAR 0 2
56036: PPUSH
56037: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56041: LD_VAR 0 2
56045: PPUSH
56046: LD_INT 5
56048: PPUSH
56049: CALL_OW 336
// end ;
56053: PPOPN 3
56055: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56056: LD_EXP 13
56060: PUSH
56061: LD_EXP 31
56065: AND
56066: PUSH
56067: LD_OWVAR 67
56071: PUSH
56072: LD_INT 4
56074: LESS
56075: AND
56076: IFFALSE 56095
56078: GO 56080
56080: DISABLE
// begin Difficulty := Difficulty + 1 ;
56081: LD_ADDR_OWVAR 67
56085: PUSH
56086: LD_OWVAR 67
56090: PUSH
56091: LD_INT 1
56093: PLUS
56094: ST_TO_ADDR
// end ;
56095: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56096: LD_EXP 13
56100: PUSH
56101: LD_EXP 32
56105: AND
56106: IFFALSE 56209
56108: GO 56110
56110: DISABLE
56111: LD_INT 0
56113: PPUSH
// begin for i := 1 to 5 do
56114: LD_ADDR_VAR 0 1
56118: PUSH
56119: DOUBLE
56120: LD_INT 1
56122: DEC
56123: ST_TO_ADDR
56124: LD_INT 5
56126: PUSH
56127: FOR_TO
56128: IFFALSE 56207
// begin uc_nation := nation_nature ;
56130: LD_ADDR_OWVAR 21
56134: PUSH
56135: LD_INT 0
56137: ST_TO_ADDR
// uc_side := 0 ;
56138: LD_ADDR_OWVAR 20
56142: PUSH
56143: LD_INT 0
56145: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56146: LD_ADDR_OWVAR 29
56150: PUSH
56151: LD_INT 12
56153: PUSH
56154: LD_INT 12
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// hc_agressivity := 20 ;
56161: LD_ADDR_OWVAR 35
56165: PUSH
56166: LD_INT 20
56168: ST_TO_ADDR
// hc_class := class_tiger ;
56169: LD_ADDR_OWVAR 28
56173: PUSH
56174: LD_INT 14
56176: ST_TO_ADDR
// hc_gallery :=  ;
56177: LD_ADDR_OWVAR 33
56181: PUSH
56182: LD_STRING 
56184: ST_TO_ADDR
// hc_name :=  ;
56185: LD_ADDR_OWVAR 26
56189: PUSH
56190: LD_STRING 
56192: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56193: CALL_OW 44
56197: PPUSH
56198: LD_INT 0
56200: PPUSH
56201: CALL_OW 51
// end ;
56205: GO 56127
56207: POP
56208: POP
// end ;
56209: PPOPN 1
56211: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56212: LD_EXP 13
56216: PUSH
56217: LD_EXP 33
56221: AND
56222: IFFALSE 56231
56224: GO 56226
56226: DISABLE
// StreamSibBomb ;
56227: CALL 56232 0 0
56231: END
// export function StreamSibBomb ; var i , x , y ; begin
56232: LD_INT 0
56234: PPUSH
56235: PPUSH
56236: PPUSH
56237: PPUSH
// result := false ;
56238: LD_ADDR_VAR 0 1
56242: PUSH
56243: LD_INT 0
56245: ST_TO_ADDR
// for i := 1 to 16 do
56246: LD_ADDR_VAR 0 2
56250: PUSH
56251: DOUBLE
56252: LD_INT 1
56254: DEC
56255: ST_TO_ADDR
56256: LD_INT 16
56258: PUSH
56259: FOR_TO
56260: IFFALSE 56459
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56262: LD_ADDR_VAR 0 3
56266: PUSH
56267: LD_INT 10
56269: PUSH
56270: LD_INT 20
56272: PUSH
56273: LD_INT 30
56275: PUSH
56276: LD_INT 40
56278: PUSH
56279: LD_INT 50
56281: PUSH
56282: LD_INT 60
56284: PUSH
56285: LD_INT 70
56287: PUSH
56288: LD_INT 80
56290: PUSH
56291: LD_INT 90
56293: PUSH
56294: LD_INT 100
56296: PUSH
56297: LD_INT 110
56299: PUSH
56300: LD_INT 120
56302: PUSH
56303: LD_INT 130
56305: PUSH
56306: LD_INT 140
56308: PUSH
56309: LD_INT 150
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PPUSH
56332: LD_INT 15
56334: PPUSH
56335: CALL_OW 12
56339: ARRAY
56340: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56341: LD_ADDR_VAR 0 4
56345: PUSH
56346: LD_INT 10
56348: PUSH
56349: LD_INT 20
56351: PUSH
56352: LD_INT 30
56354: PUSH
56355: LD_INT 40
56357: PUSH
56358: LD_INT 50
56360: PUSH
56361: LD_INT 60
56363: PUSH
56364: LD_INT 70
56366: PUSH
56367: LD_INT 80
56369: PUSH
56370: LD_INT 90
56372: PUSH
56373: LD_INT 100
56375: PUSH
56376: LD_INT 110
56378: PUSH
56379: LD_INT 120
56381: PUSH
56382: LD_INT 130
56384: PUSH
56385: LD_INT 140
56387: PUSH
56388: LD_INT 150
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PPUSH
56411: LD_INT 15
56413: PPUSH
56414: CALL_OW 12
56418: ARRAY
56419: ST_TO_ADDR
// if ValidHex ( x , y ) then
56420: LD_VAR 0 3
56424: PPUSH
56425: LD_VAR 0 4
56429: PPUSH
56430: CALL_OW 488
56434: IFFALSE 56457
// begin result := [ x , y ] ;
56436: LD_ADDR_VAR 0 1
56440: PUSH
56441: LD_VAR 0 3
56445: PUSH
56446: LD_VAR 0 4
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: ST_TO_ADDR
// break ;
56455: GO 56459
// end ; end ;
56457: GO 56259
56459: POP
56460: POP
// if result then
56461: LD_VAR 0 1
56465: IFFALSE 56525
// begin ToLua ( playSibBomb() ) ;
56467: LD_STRING playSibBomb()
56469: PPUSH
56470: CALL_OW 559
// wait ( 0 0$14 ) ;
56474: LD_INT 490
56476: PPUSH
56477: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56481: LD_VAR 0 1
56485: PUSH
56486: LD_INT 1
56488: ARRAY
56489: PPUSH
56490: LD_VAR 0 1
56494: PUSH
56495: LD_INT 2
56497: ARRAY
56498: PPUSH
56499: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56503: LD_VAR 0 1
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PPUSH
56512: LD_VAR 0 1
56516: PUSH
56517: LD_INT 2
56519: ARRAY
56520: PPUSH
56521: CALL_OW 429
// end ; end ;
56525: LD_VAR 0 1
56529: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56530: LD_EXP 13
56534: PUSH
56535: LD_EXP 35
56539: AND
56540: IFFALSE 56552
56542: GO 56544
56544: DISABLE
// YouLost (  ) ;
56545: LD_STRING 
56547: PPUSH
56548: CALL_OW 104
56552: END
// every 0 0$1 trigger StreamModeActive and sFog do
56553: LD_EXP 13
56557: PUSH
56558: LD_EXP 34
56562: AND
56563: IFFALSE 56577
56565: GO 56567
56567: DISABLE
// FogOff ( your_side ) ;
56568: LD_OWVAR 2
56572: PPUSH
56573: CALL_OW 344
56577: END
// every 0 0$1 trigger StreamModeActive and sSun do
56578: LD_EXP 13
56582: PUSH
56583: LD_EXP 36
56587: AND
56588: IFFALSE 56616
56590: GO 56592
56592: DISABLE
// begin solar_recharge_percent := 0 ;
56593: LD_ADDR_OWVAR 79
56597: PUSH
56598: LD_INT 0
56600: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56601: LD_INT 10500
56603: PPUSH
56604: CALL_OW 67
// solar_recharge_percent := 100 ;
56608: LD_ADDR_OWVAR 79
56612: PUSH
56613: LD_INT 100
56615: ST_TO_ADDR
// end ;
56616: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56617: LD_EXP 13
56621: PUSH
56622: LD_EXP 37
56626: AND
56627: IFFALSE 56866
56629: GO 56631
56631: DISABLE
56632: LD_INT 0
56634: PPUSH
56635: PPUSH
56636: PPUSH
// begin tmp := [ ] ;
56637: LD_ADDR_VAR 0 3
56641: PUSH
56642: EMPTY
56643: ST_TO_ADDR
// for i := 1 to 6 do
56644: LD_ADDR_VAR 0 1
56648: PUSH
56649: DOUBLE
56650: LD_INT 1
56652: DEC
56653: ST_TO_ADDR
56654: LD_INT 6
56656: PUSH
56657: FOR_TO
56658: IFFALSE 56763
// begin uc_nation := nation_nature ;
56660: LD_ADDR_OWVAR 21
56664: PUSH
56665: LD_INT 0
56667: ST_TO_ADDR
// uc_side := 0 ;
56668: LD_ADDR_OWVAR 20
56672: PUSH
56673: LD_INT 0
56675: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56676: LD_ADDR_OWVAR 29
56680: PUSH
56681: LD_INT 12
56683: PUSH
56684: LD_INT 12
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// hc_agressivity := 20 ;
56691: LD_ADDR_OWVAR 35
56695: PUSH
56696: LD_INT 20
56698: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56699: LD_ADDR_OWVAR 28
56703: PUSH
56704: LD_INT 17
56706: ST_TO_ADDR
// hc_gallery :=  ;
56707: LD_ADDR_OWVAR 33
56711: PUSH
56712: LD_STRING 
56714: ST_TO_ADDR
// hc_name :=  ;
56715: LD_ADDR_OWVAR 26
56719: PUSH
56720: LD_STRING 
56722: ST_TO_ADDR
// un := CreateHuman ;
56723: LD_ADDR_VAR 0 2
56727: PUSH
56728: CALL_OW 44
56732: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56733: LD_VAR 0 2
56737: PPUSH
56738: LD_INT 1
56740: PPUSH
56741: CALL_OW 51
// tmp := tmp ^ un ;
56745: LD_ADDR_VAR 0 3
56749: PUSH
56750: LD_VAR 0 3
56754: PUSH
56755: LD_VAR 0 2
56759: ADD
56760: ST_TO_ADDR
// end ;
56761: GO 56657
56763: POP
56764: POP
// repeat wait ( 0 0$1 ) ;
56765: LD_INT 35
56767: PPUSH
56768: CALL_OW 67
// for un in tmp do
56772: LD_ADDR_VAR 0 2
56776: PUSH
56777: LD_VAR 0 3
56781: PUSH
56782: FOR_IN
56783: IFFALSE 56857
// begin if IsDead ( un ) then
56785: LD_VAR 0 2
56789: PPUSH
56790: CALL_OW 301
56794: IFFALSE 56814
// begin tmp := tmp diff un ;
56796: LD_ADDR_VAR 0 3
56800: PUSH
56801: LD_VAR 0 3
56805: PUSH
56806: LD_VAR 0 2
56810: DIFF
56811: ST_TO_ADDR
// continue ;
56812: GO 56782
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56814: LD_VAR 0 2
56818: PPUSH
56819: LD_INT 3
56821: PUSH
56822: LD_INT 22
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PPUSH
56836: CALL_OW 69
56840: PPUSH
56841: LD_VAR 0 2
56845: PPUSH
56846: CALL_OW 74
56850: PPUSH
56851: CALL_OW 115
// end ;
56855: GO 56782
56857: POP
56858: POP
// until not tmp ;
56859: LD_VAR 0 3
56863: NOT
56864: IFFALSE 56765
// end ;
56866: PPOPN 3
56868: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56869: LD_EXP 13
56873: PUSH
56874: LD_EXP 38
56878: AND
56879: IFFALSE 56933
56881: GO 56883
56883: DISABLE
// begin ToLua ( displayTroll(); ) ;
56884: LD_STRING displayTroll();
56886: PPUSH
56887: CALL_OW 559
// wait ( 3 3$00 ) ;
56891: LD_INT 6300
56893: PPUSH
56894: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56898: LD_STRING hideTroll();
56900: PPUSH
56901: CALL_OW 559
// wait ( 1 1$00 ) ;
56905: LD_INT 2100
56907: PPUSH
56908: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56912: LD_STRING displayTroll();
56914: PPUSH
56915: CALL_OW 559
// wait ( 1 1$00 ) ;
56919: LD_INT 2100
56921: PPUSH
56922: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56926: LD_STRING hideTroll();
56928: PPUSH
56929: CALL_OW 559
// end ;
56933: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56934: LD_EXP 13
56938: PUSH
56939: LD_EXP 39
56943: AND
56944: IFFALSE 57007
56946: GO 56948
56948: DISABLE
56949: LD_INT 0
56951: PPUSH
// begin p := 0 ;
56952: LD_ADDR_VAR 0 1
56956: PUSH
56957: LD_INT 0
56959: ST_TO_ADDR
// repeat game_speed := 1 ;
56960: LD_ADDR_OWVAR 65
56964: PUSH
56965: LD_INT 1
56967: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56968: LD_INT 35
56970: PPUSH
56971: CALL_OW 67
// p := p + 1 ;
56975: LD_ADDR_VAR 0 1
56979: PUSH
56980: LD_VAR 0 1
56984: PUSH
56985: LD_INT 1
56987: PLUS
56988: ST_TO_ADDR
// until p >= 60 ;
56989: LD_VAR 0 1
56993: PUSH
56994: LD_INT 60
56996: GREATEREQUAL
56997: IFFALSE 56960
// game_speed := 4 ;
56999: LD_ADDR_OWVAR 65
57003: PUSH
57004: LD_INT 4
57006: ST_TO_ADDR
// end ;
57007: PPOPN 1
57009: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57010: LD_EXP 13
57014: PUSH
57015: LD_EXP 40
57019: AND
57020: IFFALSE 57166
57022: GO 57024
57024: DISABLE
57025: LD_INT 0
57027: PPUSH
57028: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57029: LD_ADDR_VAR 0 1
57033: PUSH
57034: LD_INT 22
57036: PUSH
57037: LD_OWVAR 2
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 2
57048: PUSH
57049: LD_INT 30
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 30
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PPUSH
57078: CALL_OW 69
57082: ST_TO_ADDR
// if not depot then
57083: LD_VAR 0 1
57087: NOT
57088: IFFALSE 57092
// exit ;
57090: GO 57166
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57092: LD_ADDR_VAR 0 2
57096: PUSH
57097: LD_VAR 0 1
57101: PUSH
57102: LD_INT 1
57104: PPUSH
57105: LD_VAR 0 1
57109: PPUSH
57110: CALL_OW 12
57114: ARRAY
57115: PPUSH
57116: CALL_OW 274
57120: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57121: LD_VAR 0 2
57125: PPUSH
57126: LD_INT 1
57128: PPUSH
57129: LD_INT 0
57131: PPUSH
57132: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57136: LD_VAR 0 2
57140: PPUSH
57141: LD_INT 2
57143: PPUSH
57144: LD_INT 0
57146: PPUSH
57147: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57151: LD_VAR 0 2
57155: PPUSH
57156: LD_INT 3
57158: PPUSH
57159: LD_INT 0
57161: PPUSH
57162: CALL_OW 277
// end ;
57166: PPOPN 2
57168: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57169: LD_EXP 13
57173: PUSH
57174: LD_EXP 41
57178: AND
57179: IFFALSE 57276
57181: GO 57183
57183: DISABLE
57184: LD_INT 0
57186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57187: LD_ADDR_VAR 0 1
57191: PUSH
57192: LD_INT 22
57194: PUSH
57195: LD_OWVAR 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 21
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: LD_INT 23
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: LIST
57235: PPUSH
57236: CALL_OW 69
57240: ST_TO_ADDR
// if not tmp then
57241: LD_VAR 0 1
57245: NOT
57246: IFFALSE 57250
// exit ;
57248: GO 57276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57250: LD_VAR 0 1
57254: PUSH
57255: LD_INT 1
57257: PPUSH
57258: LD_VAR 0 1
57262: PPUSH
57263: CALL_OW 12
57267: ARRAY
57268: PPUSH
57269: LD_INT 200
57271: PPUSH
57272: CALL_OW 234
// end ;
57276: PPOPN 1
57278: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57279: LD_EXP 13
57283: PUSH
57284: LD_EXP 42
57288: AND
57289: IFFALSE 57368
57291: GO 57293
57293: DISABLE
57294: LD_INT 0
57296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57297: LD_ADDR_VAR 0 1
57301: PUSH
57302: LD_INT 22
57304: PUSH
57305: LD_OWVAR 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 21
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PPUSH
57328: CALL_OW 69
57332: ST_TO_ADDR
// if not tmp then
57333: LD_VAR 0 1
57337: NOT
57338: IFFALSE 57342
// exit ;
57340: GO 57368
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 1
57349: PPUSH
57350: LD_VAR 0 1
57354: PPUSH
57355: CALL_OW 12
57359: ARRAY
57360: PPUSH
57361: LD_INT 60
57363: PPUSH
57364: CALL_OW 234
// end ;
57368: PPOPN 1
57370: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57371: LD_EXP 13
57375: PUSH
57376: LD_EXP 43
57380: AND
57381: IFFALSE 57480
57383: GO 57385
57385: DISABLE
57386: LD_INT 0
57388: PPUSH
57389: PPUSH
// begin enable ;
57390: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57391: LD_ADDR_VAR 0 1
57395: PUSH
57396: LD_INT 22
57398: PUSH
57399: LD_OWVAR 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 61
57410: PUSH
57411: EMPTY
57412: LIST
57413: PUSH
57414: LD_INT 33
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: PPUSH
57429: CALL_OW 69
57433: ST_TO_ADDR
// if not tmp then
57434: LD_VAR 0 1
57438: NOT
57439: IFFALSE 57443
// exit ;
57441: GO 57480
// for i in tmp do
57443: LD_ADDR_VAR 0 2
57447: PUSH
57448: LD_VAR 0 1
57452: PUSH
57453: FOR_IN
57454: IFFALSE 57478
// if IsControledBy ( i ) then
57456: LD_VAR 0 2
57460: PPUSH
57461: CALL_OW 312
57465: IFFALSE 57476
// ComUnlink ( i ) ;
57467: LD_VAR 0 2
57471: PPUSH
57472: CALL_OW 136
57476: GO 57453
57478: POP
57479: POP
// end ;
57480: PPOPN 2
57482: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57483: LD_EXP 13
57487: PUSH
57488: LD_EXP 44
57492: AND
57493: IFFALSE 57633
57495: GO 57497
57497: DISABLE
57498: LD_INT 0
57500: PPUSH
57501: PPUSH
// begin ToLua ( displayPowell(); ) ;
57502: LD_STRING displayPowell();
57504: PPUSH
57505: CALL_OW 559
// uc_side := 0 ;
57509: LD_ADDR_OWVAR 20
57513: PUSH
57514: LD_INT 0
57516: ST_TO_ADDR
// uc_nation := 2 ;
57517: LD_ADDR_OWVAR 21
57521: PUSH
57522: LD_INT 2
57524: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57525: LD_ADDR_OWVAR 37
57529: PUSH
57530: LD_INT 14
57532: ST_TO_ADDR
// vc_engine := engine_siberite ;
57533: LD_ADDR_OWVAR 39
57537: PUSH
57538: LD_INT 3
57540: ST_TO_ADDR
// vc_control := control_apeman ;
57541: LD_ADDR_OWVAR 38
57545: PUSH
57546: LD_INT 5
57548: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57549: LD_ADDR_OWVAR 40
57553: PUSH
57554: LD_INT 29
57556: ST_TO_ADDR
// un := CreateVehicle ;
57557: LD_ADDR_VAR 0 2
57561: PUSH
57562: CALL_OW 45
57566: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57567: LD_VAR 0 2
57571: PPUSH
57572: LD_INT 1
57574: PPUSH
57575: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57579: LD_INT 35
57581: PPUSH
57582: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57586: LD_VAR 0 2
57590: PPUSH
57591: LD_INT 22
57593: PUSH
57594: LD_OWVAR 2
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PPUSH
57603: CALL_OW 69
57607: PPUSH
57608: LD_VAR 0 2
57612: PPUSH
57613: CALL_OW 74
57617: PPUSH
57618: CALL_OW 115
// until IsDead ( un ) ;
57622: LD_VAR 0 2
57626: PPUSH
57627: CALL_OW 301
57631: IFFALSE 57579
// end ;
57633: PPOPN 2
57635: END
// every 0 0$1 trigger StreamModeActive and sStu do
57636: LD_EXP 13
57640: PUSH
57641: LD_EXP 52
57645: AND
57646: IFFALSE 57662
57648: GO 57650
57650: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57651: LD_STRING displayStucuk();
57653: PPUSH
57654: CALL_OW 559
// ResetFog ;
57658: CALL_OW 335
// end ;
57662: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57663: LD_EXP 13
57667: PUSH
57668: LD_EXP 45
57672: AND
57673: IFFALSE 57814
57675: GO 57677
57677: DISABLE
57678: LD_INT 0
57680: PPUSH
57681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57682: LD_ADDR_VAR 0 2
57686: PUSH
57687: LD_INT 22
57689: PUSH
57690: LD_OWVAR 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 21
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PPUSH
57713: CALL_OW 69
57717: ST_TO_ADDR
// if not tmp then
57718: LD_VAR 0 2
57722: NOT
57723: IFFALSE 57727
// exit ;
57725: GO 57814
// un := tmp [ rand ( 1 , tmp ) ] ;
57727: LD_ADDR_VAR 0 1
57731: PUSH
57732: LD_VAR 0 2
57736: PUSH
57737: LD_INT 1
57739: PPUSH
57740: LD_VAR 0 2
57744: PPUSH
57745: CALL_OW 12
57749: ARRAY
57750: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57751: LD_VAR 0 1
57755: PPUSH
57756: LD_INT 0
57758: PPUSH
57759: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57763: LD_VAR 0 1
57767: PPUSH
57768: LD_OWVAR 3
57772: PUSH
57773: LD_VAR 0 1
57777: DIFF
57778: PPUSH
57779: LD_VAR 0 1
57783: PPUSH
57784: CALL_OW 74
57788: PPUSH
57789: CALL_OW 115
// wait ( 0 0$20 ) ;
57793: LD_INT 700
57795: PPUSH
57796: CALL_OW 67
// SetSide ( un , your_side ) ;
57800: LD_VAR 0 1
57804: PPUSH
57805: LD_OWVAR 2
57809: PPUSH
57810: CALL_OW 235
// end ;
57814: PPOPN 2
57816: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57817: LD_EXP 13
57821: PUSH
57822: LD_EXP 46
57826: AND
57827: IFFALSE 57933
57829: GO 57831
57831: DISABLE
57832: LD_INT 0
57834: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57835: LD_ADDR_VAR 0 1
57839: PUSH
57840: LD_INT 22
57842: PUSH
57843: LD_OWVAR 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 30
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 30
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PPUSH
57884: CALL_OW 69
57888: ST_TO_ADDR
// if not depot then
57889: LD_VAR 0 1
57893: NOT
57894: IFFALSE 57898
// exit ;
57896: GO 57933
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57898: LD_VAR 0 1
57902: PUSH
57903: LD_INT 1
57905: ARRAY
57906: PPUSH
57907: CALL_OW 250
57911: PPUSH
57912: LD_VAR 0 1
57916: PUSH
57917: LD_INT 1
57919: ARRAY
57920: PPUSH
57921: CALL_OW 251
57925: PPUSH
57926: LD_INT 70
57928: PPUSH
57929: CALL_OW 495
// end ;
57933: PPOPN 1
57935: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57936: LD_EXP 13
57940: PUSH
57941: LD_EXP 47
57945: AND
57946: IFFALSE 58157
57948: GO 57950
57950: DISABLE
57951: LD_INT 0
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57958: LD_ADDR_VAR 0 5
57962: PUSH
57963: LD_INT 22
57965: PUSH
57966: LD_OWVAR 2
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 21
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PPUSH
57989: CALL_OW 69
57993: ST_TO_ADDR
// if not tmp then
57994: LD_VAR 0 5
57998: NOT
57999: IFFALSE 58003
// exit ;
58001: GO 58157
// for i in tmp do
58003: LD_ADDR_VAR 0 1
58007: PUSH
58008: LD_VAR 0 5
58012: PUSH
58013: FOR_IN
58014: IFFALSE 58155
// begin d := rand ( 0 , 5 ) ;
58016: LD_ADDR_VAR 0 4
58020: PUSH
58021: LD_INT 0
58023: PPUSH
58024: LD_INT 5
58026: PPUSH
58027: CALL_OW 12
58031: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58032: LD_ADDR_VAR 0 2
58036: PUSH
58037: LD_VAR 0 1
58041: PPUSH
58042: CALL_OW 250
58046: PPUSH
58047: LD_VAR 0 4
58051: PPUSH
58052: LD_INT 3
58054: PPUSH
58055: LD_INT 12
58057: PPUSH
58058: CALL_OW 12
58062: PPUSH
58063: CALL_OW 272
58067: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58068: LD_ADDR_VAR 0 3
58072: PUSH
58073: LD_VAR 0 1
58077: PPUSH
58078: CALL_OW 251
58082: PPUSH
58083: LD_VAR 0 4
58087: PPUSH
58088: LD_INT 3
58090: PPUSH
58091: LD_INT 12
58093: PPUSH
58094: CALL_OW 12
58098: PPUSH
58099: CALL_OW 273
58103: ST_TO_ADDR
// if ValidHex ( x , y ) then
58104: LD_VAR 0 2
58108: PPUSH
58109: LD_VAR 0 3
58113: PPUSH
58114: CALL_OW 488
58118: IFFALSE 58153
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58120: LD_VAR 0 1
58124: PPUSH
58125: LD_VAR 0 2
58129: PPUSH
58130: LD_VAR 0 3
58134: PPUSH
58135: LD_INT 3
58137: PPUSH
58138: LD_INT 6
58140: PPUSH
58141: CALL_OW 12
58145: PPUSH
58146: LD_INT 1
58148: PPUSH
58149: CALL_OW 483
// end ;
58153: GO 58013
58155: POP
58156: POP
// end ;
58157: PPOPN 5
58159: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58160: LD_EXP 13
58164: PUSH
58165: LD_EXP 48
58169: AND
58170: IFFALSE 58264
58172: GO 58174
58174: DISABLE
58175: LD_INT 0
58177: PPUSH
58178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_INT 22
58186: PUSH
58187: LD_OWVAR 2
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 32
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 21
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: LIST
58220: PPUSH
58221: CALL_OW 69
58225: ST_TO_ADDR
// if not tmp then
58226: LD_VAR 0 2
58230: NOT
58231: IFFALSE 58235
// exit ;
58233: GO 58264
// for i in tmp do
58235: LD_ADDR_VAR 0 1
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: FOR_IN
58246: IFFALSE 58262
// SetFuel ( i , 0 ) ;
58248: LD_VAR 0 1
58252: PPUSH
58253: LD_INT 0
58255: PPUSH
58256: CALL_OW 240
58260: GO 58245
58262: POP
58263: POP
// end ;
58264: PPOPN 2
58266: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58267: LD_EXP 13
58271: PUSH
58272: LD_EXP 49
58276: AND
58277: IFFALSE 58343
58279: GO 58281
58281: DISABLE
58282: LD_INT 0
58284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58285: LD_ADDR_VAR 0 1
58289: PUSH
58290: LD_INT 22
58292: PUSH
58293: LD_OWVAR 2
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 30
58304: PUSH
58305: LD_INT 29
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PPUSH
58316: CALL_OW 69
58320: ST_TO_ADDR
// if not tmp then
58321: LD_VAR 0 1
58325: NOT
58326: IFFALSE 58330
// exit ;
58328: GO 58343
// DestroyUnit ( tmp [ 1 ] ) ;
58330: LD_VAR 0 1
58334: PUSH
58335: LD_INT 1
58337: ARRAY
58338: PPUSH
58339: CALL_OW 65
// end ;
58343: PPOPN 1
58345: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58346: LD_EXP 13
58350: PUSH
58351: LD_EXP 51
58355: AND
58356: IFFALSE 58485
58358: GO 58360
58360: DISABLE
58361: LD_INT 0
58363: PPUSH
// begin uc_side := 0 ;
58364: LD_ADDR_OWVAR 20
58368: PUSH
58369: LD_INT 0
58371: ST_TO_ADDR
// uc_nation := nation_arabian ;
58372: LD_ADDR_OWVAR 21
58376: PUSH
58377: LD_INT 2
58379: ST_TO_ADDR
// hc_gallery :=  ;
58380: LD_ADDR_OWVAR 33
58384: PUSH
58385: LD_STRING 
58387: ST_TO_ADDR
// hc_name :=  ;
58388: LD_ADDR_OWVAR 26
58392: PUSH
58393: LD_STRING 
58395: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58396: LD_INT 1
58398: PPUSH
58399: LD_INT 11
58401: PPUSH
58402: LD_INT 10
58404: PPUSH
58405: CALL_OW 380
// un := CreateHuman ;
58409: LD_ADDR_VAR 0 1
58413: PUSH
58414: CALL_OW 44
58418: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58419: LD_VAR 0 1
58423: PPUSH
58424: LD_INT 1
58426: PPUSH
58427: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58431: LD_INT 35
58433: PPUSH
58434: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58438: LD_VAR 0 1
58442: PPUSH
58443: LD_INT 22
58445: PUSH
58446: LD_OWVAR 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PPUSH
58455: CALL_OW 69
58459: PPUSH
58460: LD_VAR 0 1
58464: PPUSH
58465: CALL_OW 74
58469: PPUSH
58470: CALL_OW 115
// until IsDead ( un ) ;
58474: LD_VAR 0 1
58478: PPUSH
58479: CALL_OW 301
58483: IFFALSE 58431
// end ;
58485: PPOPN 1
58487: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58488: LD_EXP 13
58492: PUSH
58493: LD_EXP 53
58497: AND
58498: IFFALSE 58510
58500: GO 58502
58502: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58503: LD_STRING earthquake(getX(game), 0, 32)
58505: PPUSH
58506: CALL_OW 559
58510: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58511: LD_EXP 13
58515: PUSH
58516: LD_EXP 54
58520: AND
58521: IFFALSE 58612
58523: GO 58525
58525: DISABLE
58526: LD_INT 0
58528: PPUSH
// begin enable ;
58529: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58530: LD_ADDR_VAR 0 1
58534: PUSH
58535: LD_INT 22
58537: PUSH
58538: LD_OWVAR 2
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 21
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 33
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: LIST
58571: PPUSH
58572: CALL_OW 69
58576: ST_TO_ADDR
// if not tmp then
58577: LD_VAR 0 1
58581: NOT
58582: IFFALSE 58586
// exit ;
58584: GO 58612
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58586: LD_VAR 0 1
58590: PUSH
58591: LD_INT 1
58593: PPUSH
58594: LD_VAR 0 1
58598: PPUSH
58599: CALL_OW 12
58603: ARRAY
58604: PPUSH
58605: LD_INT 1
58607: PPUSH
58608: CALL_OW 234
// end ;
58612: PPOPN 1
58614: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58615: LD_EXP 13
58619: PUSH
58620: LD_EXP 55
58624: AND
58625: IFFALSE 58766
58627: GO 58629
58629: DISABLE
58630: LD_INT 0
58632: PPUSH
58633: PPUSH
58634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58635: LD_ADDR_VAR 0 3
58639: PUSH
58640: LD_INT 22
58642: PUSH
58643: LD_OWVAR 2
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 25
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PPUSH
58666: CALL_OW 69
58670: ST_TO_ADDR
// if not tmp then
58671: LD_VAR 0 3
58675: NOT
58676: IFFALSE 58680
// exit ;
58678: GO 58766
// un := tmp [ rand ( 1 , tmp ) ] ;
58680: LD_ADDR_VAR 0 2
58684: PUSH
58685: LD_VAR 0 3
58689: PUSH
58690: LD_INT 1
58692: PPUSH
58693: LD_VAR 0 3
58697: PPUSH
58698: CALL_OW 12
58702: ARRAY
58703: ST_TO_ADDR
// if Crawls ( un ) then
58704: LD_VAR 0 2
58708: PPUSH
58709: CALL_OW 318
58713: IFFALSE 58724
// ComWalk ( un ) ;
58715: LD_VAR 0 2
58719: PPUSH
58720: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58724: LD_VAR 0 2
58728: PPUSH
58729: LD_INT 9
58731: PPUSH
58732: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58736: LD_INT 28
58738: PPUSH
58739: LD_OWVAR 2
58743: PPUSH
58744: LD_INT 2
58746: PPUSH
58747: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58751: LD_INT 29
58753: PPUSH
58754: LD_OWVAR 2
58758: PPUSH
58759: LD_INT 2
58761: PPUSH
58762: CALL_OW 322
// end ;
58766: PPOPN 3
58768: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58769: LD_EXP 13
58773: PUSH
58774: LD_EXP 56
58778: AND
58779: IFFALSE 58890
58781: GO 58783
58783: DISABLE
58784: LD_INT 0
58786: PPUSH
58787: PPUSH
58788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58789: LD_ADDR_VAR 0 3
58793: PUSH
58794: LD_INT 22
58796: PUSH
58797: LD_OWVAR 2
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 25
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PPUSH
58820: CALL_OW 69
58824: ST_TO_ADDR
// if not tmp then
58825: LD_VAR 0 3
58829: NOT
58830: IFFALSE 58834
// exit ;
58832: GO 58890
// un := tmp [ rand ( 1 , tmp ) ] ;
58834: LD_ADDR_VAR 0 2
58838: PUSH
58839: LD_VAR 0 3
58843: PUSH
58844: LD_INT 1
58846: PPUSH
58847: LD_VAR 0 3
58851: PPUSH
58852: CALL_OW 12
58856: ARRAY
58857: ST_TO_ADDR
// if Crawls ( un ) then
58858: LD_VAR 0 2
58862: PPUSH
58863: CALL_OW 318
58867: IFFALSE 58878
// ComWalk ( un ) ;
58869: LD_VAR 0 2
58873: PPUSH
58874: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58878: LD_VAR 0 2
58882: PPUSH
58883: LD_INT 8
58885: PPUSH
58886: CALL_OW 336
// end ;
58890: PPOPN 3
58892: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58893: LD_EXP 13
58897: PUSH
58898: LD_EXP 57
58902: AND
58903: IFFALSE 59047
58905: GO 58907
58907: DISABLE
58908: LD_INT 0
58910: PPUSH
58911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58912: LD_ADDR_VAR 0 2
58916: PUSH
58917: LD_INT 22
58919: PUSH
58920: LD_OWVAR 2
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 21
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: PUSH
58942: LD_INT 34
58944: PUSH
58945: LD_INT 12
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 34
58954: PUSH
58955: LD_INT 51
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 34
58964: PUSH
58965: LD_INT 32
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: PPUSH
58983: CALL_OW 69
58987: ST_TO_ADDR
// if not tmp then
58988: LD_VAR 0 2
58992: NOT
58993: IFFALSE 58997
// exit ;
58995: GO 59047
// for i in tmp do
58997: LD_ADDR_VAR 0 1
59001: PUSH
59002: LD_VAR 0 2
59006: PUSH
59007: FOR_IN
59008: IFFALSE 59045
// if GetCargo ( i , mat_artifact ) = 0 then
59010: LD_VAR 0 1
59014: PPUSH
59015: LD_INT 4
59017: PPUSH
59018: CALL_OW 289
59022: PUSH
59023: LD_INT 0
59025: EQUAL
59026: IFFALSE 59043
// SetCargo ( i , mat_siberit , 100 ) ;
59028: LD_VAR 0 1
59032: PPUSH
59033: LD_INT 3
59035: PPUSH
59036: LD_INT 100
59038: PPUSH
59039: CALL_OW 290
59043: GO 59007
59045: POP
59046: POP
// end ;
59047: PPOPN 2
59049: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59050: LD_EXP 13
59054: PUSH
59055: LD_EXP 58
59059: AND
59060: IFFALSE 59243
59062: GO 59064
59064: DISABLE
59065: LD_INT 0
59067: PPUSH
59068: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59069: LD_ADDR_VAR 0 2
59073: PUSH
59074: LD_INT 22
59076: PUSH
59077: LD_OWVAR 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PPUSH
59086: CALL_OW 69
59090: ST_TO_ADDR
// if not tmp then
59091: LD_VAR 0 2
59095: NOT
59096: IFFALSE 59100
// exit ;
59098: GO 59243
// for i := 1 to 2 do
59100: LD_ADDR_VAR 0 1
59104: PUSH
59105: DOUBLE
59106: LD_INT 1
59108: DEC
59109: ST_TO_ADDR
59110: LD_INT 2
59112: PUSH
59113: FOR_TO
59114: IFFALSE 59241
// begin uc_side := your_side ;
59116: LD_ADDR_OWVAR 20
59120: PUSH
59121: LD_OWVAR 2
59125: ST_TO_ADDR
// uc_nation := nation_american ;
59126: LD_ADDR_OWVAR 21
59130: PUSH
59131: LD_INT 1
59133: ST_TO_ADDR
// vc_chassis := us_morphling ;
59134: LD_ADDR_OWVAR 37
59138: PUSH
59139: LD_INT 5
59141: ST_TO_ADDR
// vc_engine := engine_siberite ;
59142: LD_ADDR_OWVAR 39
59146: PUSH
59147: LD_INT 3
59149: ST_TO_ADDR
// vc_control := control_computer ;
59150: LD_ADDR_OWVAR 38
59154: PUSH
59155: LD_INT 3
59157: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59158: LD_ADDR_OWVAR 40
59162: PUSH
59163: LD_INT 10
59165: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59166: LD_VAR 0 2
59170: PUSH
59171: LD_INT 1
59173: ARRAY
59174: PPUSH
59175: CALL_OW 310
59179: NOT
59180: IFFALSE 59227
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59182: CALL_OW 45
59186: PPUSH
59187: LD_VAR 0 2
59191: PUSH
59192: LD_INT 1
59194: ARRAY
59195: PPUSH
59196: CALL_OW 250
59200: PPUSH
59201: LD_VAR 0 2
59205: PUSH
59206: LD_INT 1
59208: ARRAY
59209: PPUSH
59210: CALL_OW 251
59214: PPUSH
59215: LD_INT 12
59217: PPUSH
59218: LD_INT 1
59220: PPUSH
59221: CALL_OW 50
59225: GO 59239
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59227: CALL_OW 45
59231: PPUSH
59232: LD_INT 1
59234: PPUSH
59235: CALL_OW 51
// end ;
59239: GO 59113
59241: POP
59242: POP
// end ;
59243: PPOPN 2
59245: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59246: LD_EXP 13
59250: PUSH
59251: LD_EXP 59
59255: AND
59256: IFFALSE 59478
59258: GO 59260
59260: DISABLE
59261: LD_INT 0
59263: PPUSH
59264: PPUSH
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59269: LD_ADDR_VAR 0 6
59273: PUSH
59274: LD_INT 22
59276: PUSH
59277: LD_OWVAR 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 21
59288: PUSH
59289: LD_INT 1
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: LD_INT 23
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PPUSH
59318: CALL_OW 69
59322: ST_TO_ADDR
// if not tmp then
59323: LD_VAR 0 6
59327: NOT
59328: IFFALSE 59332
// exit ;
59330: GO 59478
// s1 := rand ( 1 , 4 ) ;
59332: LD_ADDR_VAR 0 2
59336: PUSH
59337: LD_INT 1
59339: PPUSH
59340: LD_INT 4
59342: PPUSH
59343: CALL_OW 12
59347: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59348: LD_ADDR_VAR 0 4
59352: PUSH
59353: LD_VAR 0 6
59357: PUSH
59358: LD_INT 1
59360: ARRAY
59361: PPUSH
59362: LD_VAR 0 2
59366: PPUSH
59367: CALL_OW 259
59371: ST_TO_ADDR
// if s1 = 1 then
59372: LD_VAR 0 2
59376: PUSH
59377: LD_INT 1
59379: EQUAL
59380: IFFALSE 59400
// s2 := rand ( 2 , 4 ) else
59382: LD_ADDR_VAR 0 3
59386: PUSH
59387: LD_INT 2
59389: PPUSH
59390: LD_INT 4
59392: PPUSH
59393: CALL_OW 12
59397: ST_TO_ADDR
59398: GO 59408
// s2 := 1 ;
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: LD_INT 1
59407: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59408: LD_ADDR_VAR 0 5
59412: PUSH
59413: LD_VAR 0 6
59417: PUSH
59418: LD_INT 1
59420: ARRAY
59421: PPUSH
59422: LD_VAR 0 3
59426: PPUSH
59427: CALL_OW 259
59431: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59432: LD_VAR 0 6
59436: PUSH
59437: LD_INT 1
59439: ARRAY
59440: PPUSH
59441: LD_VAR 0 2
59445: PPUSH
59446: LD_VAR 0 5
59450: PPUSH
59451: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59455: LD_VAR 0 6
59459: PUSH
59460: LD_INT 1
59462: ARRAY
59463: PPUSH
59464: LD_VAR 0 3
59468: PPUSH
59469: LD_VAR 0 4
59473: PPUSH
59474: CALL_OW 237
// end ;
59478: PPOPN 6
59480: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59481: LD_EXP 13
59485: PUSH
59486: LD_EXP 60
59490: AND
59491: IFFALSE 59570
59493: GO 59495
59495: DISABLE
59496: LD_INT 0
59498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59499: LD_ADDR_VAR 0 1
59503: PUSH
59504: LD_INT 22
59506: PUSH
59507: LD_OWVAR 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 30
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PPUSH
59530: CALL_OW 69
59534: ST_TO_ADDR
// if not tmp then
59535: LD_VAR 0 1
59539: NOT
59540: IFFALSE 59544
// exit ;
59542: GO 59570
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59544: LD_VAR 0 1
59548: PUSH
59549: LD_INT 1
59551: PPUSH
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL_OW 12
59561: ARRAY
59562: PPUSH
59563: LD_INT 1
59565: PPUSH
59566: CALL_OW 234
// end ;
59570: PPOPN 1
59572: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59573: LD_EXP 13
59577: PUSH
59578: LD_EXP 61
59582: AND
59583: IFFALSE 59695
59585: GO 59587
59587: DISABLE
59588: LD_INT 0
59590: PPUSH
59591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59592: LD_ADDR_VAR 0 2
59596: PUSH
59597: LD_INT 22
59599: PUSH
59600: LD_OWVAR 2
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 2
59611: PUSH
59612: LD_INT 30
59614: PUSH
59615: LD_INT 27
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 30
59624: PUSH
59625: LD_INT 26
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 30
59634: PUSH
59635: LD_INT 28
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PPUSH
59652: CALL_OW 69
59656: ST_TO_ADDR
// if not tmp then
59657: LD_VAR 0 2
59661: NOT
59662: IFFALSE 59666
// exit ;
59664: GO 59695
// for i in tmp do
59666: LD_ADDR_VAR 0 1
59670: PUSH
59671: LD_VAR 0 2
59675: PUSH
59676: FOR_IN
59677: IFFALSE 59693
// SetLives ( i , 1 ) ;
59679: LD_VAR 0 1
59683: PPUSH
59684: LD_INT 1
59686: PPUSH
59687: CALL_OW 234
59691: GO 59676
59693: POP
59694: POP
// end ;
59695: PPOPN 2
59697: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59698: LD_EXP 13
59702: PUSH
59703: LD_EXP 62
59707: AND
59708: IFFALSE 59995
59710: GO 59712
59712: DISABLE
59713: LD_INT 0
59715: PPUSH
59716: PPUSH
59717: PPUSH
// begin i := rand ( 1 , 7 ) ;
59718: LD_ADDR_VAR 0 1
59722: PUSH
59723: LD_INT 1
59725: PPUSH
59726: LD_INT 7
59728: PPUSH
59729: CALL_OW 12
59733: ST_TO_ADDR
// case i of 1 :
59734: LD_VAR 0 1
59738: PUSH
59739: LD_INT 1
59741: DOUBLE
59742: EQUAL
59743: IFTRUE 59747
59745: GO 59757
59747: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59748: LD_STRING earthquake(getX(game), 0, 32)
59750: PPUSH
59751: CALL_OW 559
59755: GO 59995
59757: LD_INT 2
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59765
59763: GO 59779
59765: POP
// begin ToLua ( displayStucuk(); ) ;
59766: LD_STRING displayStucuk();
59768: PPUSH
59769: CALL_OW 559
// ResetFog ;
59773: CALL_OW 335
// end ; 3 :
59777: GO 59995
59779: LD_INT 3
59781: DOUBLE
59782: EQUAL
59783: IFTRUE 59787
59785: GO 59891
59787: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59788: LD_ADDR_VAR 0 2
59792: PUSH
59793: LD_INT 22
59795: PUSH
59796: LD_OWVAR 2
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 25
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PPUSH
59819: CALL_OW 69
59823: ST_TO_ADDR
// if not tmp then
59824: LD_VAR 0 2
59828: NOT
59829: IFFALSE 59833
// exit ;
59831: GO 59995
// un := tmp [ rand ( 1 , tmp ) ] ;
59833: LD_ADDR_VAR 0 3
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_INT 1
59845: PPUSH
59846: LD_VAR 0 2
59850: PPUSH
59851: CALL_OW 12
59855: ARRAY
59856: ST_TO_ADDR
// if Crawls ( un ) then
59857: LD_VAR 0 3
59861: PPUSH
59862: CALL_OW 318
59866: IFFALSE 59877
// ComWalk ( un ) ;
59868: LD_VAR 0 3
59872: PPUSH
59873: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59877: LD_VAR 0 3
59881: PPUSH
59882: LD_INT 8
59884: PPUSH
59885: CALL_OW 336
// end ; 4 :
59889: GO 59995
59891: LD_INT 4
59893: DOUBLE
59894: EQUAL
59895: IFTRUE 59899
59897: GO 59973
59899: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59900: LD_ADDR_VAR 0 2
59904: PUSH
59905: LD_INT 22
59907: PUSH
59908: LD_OWVAR 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 30
59919: PUSH
59920: LD_INT 29
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PPUSH
59931: CALL_OW 69
59935: ST_TO_ADDR
// if not tmp then
59936: LD_VAR 0 2
59940: NOT
59941: IFFALSE 59945
// exit ;
59943: GO 59995
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59945: LD_VAR 0 2
59949: PUSH
59950: LD_INT 1
59952: ARRAY
59953: PPUSH
59954: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59958: LD_VAR 0 2
59962: PUSH
59963: LD_INT 1
59965: ARRAY
59966: PPUSH
59967: CALL_OW 65
// end ; 5 .. 7 :
59971: GO 59995
59973: LD_INT 5
59975: DOUBLE
59976: GREATEREQUAL
59977: IFFALSE 59985
59979: LD_INT 7
59981: DOUBLE
59982: LESSEQUAL
59983: IFTRUE 59987
59985: GO 59994
59987: POP
// StreamSibBomb ; end ;
59988: CALL 56232 0 0
59992: GO 59995
59994: POP
// end ;
59995: PPOPN 3
59997: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59998: LD_EXP 13
60002: PUSH
60003: LD_EXP 63
60007: AND
60008: IFFALSE 60164
60010: GO 60012
60012: DISABLE
60013: LD_INT 0
60015: PPUSH
60016: PPUSH
60017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60018: LD_ADDR_VAR 0 2
60022: PUSH
60023: LD_INT 81
60025: PUSH
60026: LD_OWVAR 2
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 21
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 21
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PPUSH
60067: CALL_OW 69
60071: ST_TO_ADDR
// if not tmp then
60072: LD_VAR 0 2
60076: NOT
60077: IFFALSE 60081
// exit ;
60079: GO 60164
// p := 0 ;
60081: LD_ADDR_VAR 0 3
60085: PUSH
60086: LD_INT 0
60088: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60089: LD_INT 35
60091: PPUSH
60092: CALL_OW 67
// p := p + 1 ;
60096: LD_ADDR_VAR 0 3
60100: PUSH
60101: LD_VAR 0 3
60105: PUSH
60106: LD_INT 1
60108: PLUS
60109: ST_TO_ADDR
// for i in tmp do
60110: LD_ADDR_VAR 0 1
60114: PUSH
60115: LD_VAR 0 2
60119: PUSH
60120: FOR_IN
60121: IFFALSE 60152
// if GetLives ( i ) < 1000 then
60123: LD_VAR 0 1
60127: PPUSH
60128: CALL_OW 256
60132: PUSH
60133: LD_INT 1000
60135: LESS
60136: IFFALSE 60150
// SetLives ( i , 1000 ) ;
60138: LD_VAR 0 1
60142: PPUSH
60143: LD_INT 1000
60145: PPUSH
60146: CALL_OW 234
60150: GO 60120
60152: POP
60153: POP
// until p > 20 ;
60154: LD_VAR 0 3
60158: PUSH
60159: LD_INT 20
60161: GREATER
60162: IFFALSE 60089
// end ;
60164: PPOPN 3
60166: END
// every 0 0$1 trigger StreamModeActive and sTime do
60167: LD_EXP 13
60171: PUSH
60172: LD_EXP 64
60176: AND
60177: IFFALSE 60212
60179: GO 60181
60181: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60182: LD_INT 28
60184: PPUSH
60185: LD_OWVAR 2
60189: PPUSH
60190: LD_INT 2
60192: PPUSH
60193: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60197: LD_INT 30
60199: PPUSH
60200: LD_OWVAR 2
60204: PPUSH
60205: LD_INT 2
60207: PPUSH
60208: CALL_OW 322
// end ;
60212: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60213: LD_EXP 13
60217: PUSH
60218: LD_EXP 65
60222: AND
60223: IFFALSE 60344
60225: GO 60227
60227: DISABLE
60228: LD_INT 0
60230: PPUSH
60231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60232: LD_ADDR_VAR 0 2
60236: PUSH
60237: LD_INT 22
60239: PUSH
60240: LD_OWVAR 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 21
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: LD_INT 23
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: PPUSH
60281: CALL_OW 69
60285: ST_TO_ADDR
// if not tmp then
60286: LD_VAR 0 2
60290: NOT
60291: IFFALSE 60295
// exit ;
60293: GO 60344
// for i in tmp do
60295: LD_ADDR_VAR 0 1
60299: PUSH
60300: LD_VAR 0 2
60304: PUSH
60305: FOR_IN
60306: IFFALSE 60342
// begin if Crawls ( i ) then
60308: LD_VAR 0 1
60312: PPUSH
60313: CALL_OW 318
60317: IFFALSE 60328
// ComWalk ( i ) ;
60319: LD_VAR 0 1
60323: PPUSH
60324: CALL_OW 138
// SetClass ( i , 2 ) ;
60328: LD_VAR 0 1
60332: PPUSH
60333: LD_INT 2
60335: PPUSH
60336: CALL_OW 336
// end ;
60340: GO 60305
60342: POP
60343: POP
// end ;
60344: PPOPN 2
60346: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60347: LD_EXP 13
60351: PUSH
60352: LD_EXP 66
60356: AND
60357: IFFALSE 60645
60359: GO 60361
60361: DISABLE
60362: LD_INT 0
60364: PPUSH
60365: PPUSH
60366: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60367: LD_OWVAR 2
60371: PPUSH
60372: LD_INT 9
60374: PPUSH
60375: LD_INT 1
60377: PPUSH
60378: LD_INT 1
60380: PPUSH
60381: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60385: LD_INT 9
60387: PPUSH
60388: LD_OWVAR 2
60392: PPUSH
60393: CALL_OW 343
// uc_side := 9 ;
60397: LD_ADDR_OWVAR 20
60401: PUSH
60402: LD_INT 9
60404: ST_TO_ADDR
// uc_nation := 2 ;
60405: LD_ADDR_OWVAR 21
60409: PUSH
60410: LD_INT 2
60412: ST_TO_ADDR
// hc_name := Dark Warrior ;
60413: LD_ADDR_OWVAR 26
60417: PUSH
60418: LD_STRING Dark Warrior
60420: ST_TO_ADDR
// hc_gallery :=  ;
60421: LD_ADDR_OWVAR 33
60425: PUSH
60426: LD_STRING 
60428: ST_TO_ADDR
// hc_noskilllimit := true ;
60429: LD_ADDR_OWVAR 76
60433: PUSH
60434: LD_INT 1
60436: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60437: LD_ADDR_OWVAR 31
60441: PUSH
60442: LD_INT 30
60444: PUSH
60445: LD_INT 30
60447: PUSH
60448: LD_INT 30
60450: PUSH
60451: LD_INT 30
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: ST_TO_ADDR
// un := CreateHuman ;
60460: LD_ADDR_VAR 0 3
60464: PUSH
60465: CALL_OW 44
60469: ST_TO_ADDR
// hc_noskilllimit := false ;
60470: LD_ADDR_OWVAR 76
60474: PUSH
60475: LD_INT 0
60477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60478: LD_VAR 0 3
60482: PPUSH
60483: LD_INT 1
60485: PPUSH
60486: CALL_OW 51
// ToLua ( playRanger() ) ;
60490: LD_STRING playRanger()
60492: PPUSH
60493: CALL_OW 559
// p := 0 ;
60497: LD_ADDR_VAR 0 2
60501: PUSH
60502: LD_INT 0
60504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60505: LD_INT 35
60507: PPUSH
60508: CALL_OW 67
// p := p + 1 ;
60512: LD_ADDR_VAR 0 2
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_INT 1
60524: PLUS
60525: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60526: LD_VAR 0 3
60530: PPUSH
60531: CALL_OW 256
60535: PUSH
60536: LD_INT 1000
60538: LESS
60539: IFFALSE 60553
// SetLives ( un , 1000 ) ;
60541: LD_VAR 0 3
60545: PPUSH
60546: LD_INT 1000
60548: PPUSH
60549: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60553: LD_VAR 0 3
60557: PPUSH
60558: LD_INT 81
60560: PUSH
60561: LD_OWVAR 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 91
60572: PUSH
60573: LD_VAR 0 3
60577: PUSH
60578: LD_INT 30
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: LIST
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PPUSH
60590: CALL_OW 69
60594: PPUSH
60595: LD_VAR 0 3
60599: PPUSH
60600: CALL_OW 74
60604: PPUSH
60605: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60609: LD_VAR 0 2
60613: PUSH
60614: LD_INT 80
60616: GREATER
60617: PUSH
60618: LD_VAR 0 3
60622: PPUSH
60623: CALL_OW 301
60627: OR
60628: IFFALSE 60505
// if un then
60630: LD_VAR 0 3
60634: IFFALSE 60645
// RemoveUnit ( un ) ;
60636: LD_VAR 0 3
60640: PPUSH
60641: CALL_OW 64
// end ;
60645: PPOPN 3
60647: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60648: LD_EXP 67
60652: IFFALSE 60768
60654: GO 60656
60656: DISABLE
60657: LD_INT 0
60659: PPUSH
60660: PPUSH
60661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60662: LD_ADDR_VAR 0 2
60666: PUSH
60667: LD_INT 81
60669: PUSH
60670: LD_OWVAR 2
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 21
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PPUSH
60693: CALL_OW 69
60697: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60698: LD_STRING playComputer()
60700: PPUSH
60701: CALL_OW 559
// if not tmp then
60705: LD_VAR 0 2
60709: NOT
60710: IFFALSE 60714
// exit ;
60712: GO 60768
// for i in tmp do
60714: LD_ADDR_VAR 0 1
60718: PUSH
60719: LD_VAR 0 2
60723: PUSH
60724: FOR_IN
60725: IFFALSE 60766
// for j := 1 to 4 do
60727: LD_ADDR_VAR 0 3
60731: PUSH
60732: DOUBLE
60733: LD_INT 1
60735: DEC
60736: ST_TO_ADDR
60737: LD_INT 4
60739: PUSH
60740: FOR_TO
60741: IFFALSE 60762
// SetSkill ( i , j , 10 ) ;
60743: LD_VAR 0 1
60747: PPUSH
60748: LD_VAR 0 3
60752: PPUSH
60753: LD_INT 10
60755: PPUSH
60756: CALL_OW 237
60760: GO 60740
60762: POP
60763: POP
60764: GO 60724
60766: POP
60767: POP
// end ;
60768: PPOPN 3
60770: END
// every 0 0$1 trigger s30 do var i , tmp ;
60771: LD_EXP 68
60775: IFFALSE 60844
60777: GO 60779
60779: DISABLE
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60784: LD_ADDR_VAR 0 2
60788: PUSH
60789: LD_INT 22
60791: PUSH
60792: LD_OWVAR 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PPUSH
60801: CALL_OW 69
60805: ST_TO_ADDR
// if not tmp then
60806: LD_VAR 0 2
60810: NOT
60811: IFFALSE 60815
// exit ;
60813: GO 60844
// for i in tmp do
60815: LD_ADDR_VAR 0 1
60819: PUSH
60820: LD_VAR 0 2
60824: PUSH
60825: FOR_IN
60826: IFFALSE 60842
// SetLives ( i , 300 ) ;
60828: LD_VAR 0 1
60832: PPUSH
60833: LD_INT 300
60835: PPUSH
60836: CALL_OW 234
60840: GO 60825
60842: POP
60843: POP
// end ;
60844: PPOPN 2
60846: END
// every 0 0$1 trigger s60 do var i , tmp ;
60847: LD_EXP 69
60851: IFFALSE 60920
60853: GO 60855
60855: DISABLE
60856: LD_INT 0
60858: PPUSH
60859: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60860: LD_ADDR_VAR 0 2
60864: PUSH
60865: LD_INT 22
60867: PUSH
60868: LD_OWVAR 2
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PPUSH
60877: CALL_OW 69
60881: ST_TO_ADDR
// if not tmp then
60882: LD_VAR 0 2
60886: NOT
60887: IFFALSE 60891
// exit ;
60889: GO 60920
// for i in tmp do
60891: LD_ADDR_VAR 0 1
60895: PUSH
60896: LD_VAR 0 2
60900: PUSH
60901: FOR_IN
60902: IFFALSE 60918
// SetLives ( i , 600 ) ;
60904: LD_VAR 0 1
60908: PPUSH
60909: LD_INT 600
60911: PPUSH
60912: CALL_OW 234
60916: GO 60901
60918: POP
60919: POP
// end ;
60920: PPOPN 2
60922: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60923: LD_INT 0
60925: PPUSH
// case cmd of 301 :
60926: LD_VAR 0 1
60930: PUSH
60931: LD_INT 301
60933: DOUBLE
60934: EQUAL
60935: IFTRUE 60939
60937: GO 60971
60939: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60940: LD_VAR 0 6
60944: PPUSH
60945: LD_VAR 0 7
60949: PPUSH
60950: LD_VAR 0 8
60954: PPUSH
60955: LD_VAR 0 4
60959: PPUSH
60960: LD_VAR 0 5
60964: PPUSH
60965: CALL 62180 0 5
60969: GO 61092
60971: LD_INT 302
60973: DOUBLE
60974: EQUAL
60975: IFTRUE 60979
60977: GO 61016
60979: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60980: LD_VAR 0 6
60984: PPUSH
60985: LD_VAR 0 7
60989: PPUSH
60990: LD_VAR 0 8
60994: PPUSH
60995: LD_VAR 0 9
60999: PPUSH
61000: LD_VAR 0 4
61004: PPUSH
61005: LD_VAR 0 5
61009: PPUSH
61010: CALL 62271 0 6
61014: GO 61092
61016: LD_INT 303
61018: DOUBLE
61019: EQUAL
61020: IFTRUE 61024
61022: GO 61061
61024: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61025: LD_VAR 0 6
61029: PPUSH
61030: LD_VAR 0 7
61034: PPUSH
61035: LD_VAR 0 8
61039: PPUSH
61040: LD_VAR 0 9
61044: PPUSH
61045: LD_VAR 0 4
61049: PPUSH
61050: LD_VAR 0 5
61054: PPUSH
61055: CALL 61097 0 6
61059: GO 61092
61061: LD_INT 304
61063: DOUBLE
61064: EQUAL
61065: IFTRUE 61069
61067: GO 61091
61069: POP
// hHackTeleport ( unit , x , y ) ; end ;
61070: LD_VAR 0 2
61074: PPUSH
61075: LD_VAR 0 4
61079: PPUSH
61080: LD_VAR 0 5
61084: PPUSH
61085: CALL 62864 0 3
61089: GO 61092
61091: POP
// end ;
61092: LD_VAR 0 12
61096: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61097: LD_INT 0
61099: PPUSH
61100: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61101: LD_VAR 0 1
61105: PUSH
61106: LD_INT 1
61108: LESS
61109: PUSH
61110: LD_VAR 0 1
61114: PUSH
61115: LD_INT 3
61117: GREATER
61118: OR
61119: PUSH
61120: LD_VAR 0 5
61124: PPUSH
61125: LD_VAR 0 6
61129: PPUSH
61130: CALL_OW 428
61134: OR
61135: IFFALSE 61139
// exit ;
61137: GO 61867
// uc_side := your_side ;
61139: LD_ADDR_OWVAR 20
61143: PUSH
61144: LD_OWVAR 2
61148: ST_TO_ADDR
// uc_nation := nation ;
61149: LD_ADDR_OWVAR 21
61153: PUSH
61154: LD_VAR 0 1
61158: ST_TO_ADDR
// bc_level = 1 ;
61159: LD_ADDR_OWVAR 43
61163: PUSH
61164: LD_INT 1
61166: ST_TO_ADDR
// case btype of 1 :
61167: LD_VAR 0 2
61171: PUSH
61172: LD_INT 1
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61180
61178: GO 61191
61180: POP
// bc_type := b_depot ; 2 :
61181: LD_ADDR_OWVAR 42
61185: PUSH
61186: LD_INT 0
61188: ST_TO_ADDR
61189: GO 61811
61191: LD_INT 2
61193: DOUBLE
61194: EQUAL
61195: IFTRUE 61199
61197: GO 61210
61199: POP
// bc_type := b_warehouse ; 3 :
61200: LD_ADDR_OWVAR 42
61204: PUSH
61205: LD_INT 1
61207: ST_TO_ADDR
61208: GO 61811
61210: LD_INT 3
61212: DOUBLE
61213: EQUAL
61214: IFTRUE 61218
61216: GO 61229
61218: POP
// bc_type := b_lab ; 4 .. 9 :
61219: LD_ADDR_OWVAR 42
61223: PUSH
61224: LD_INT 6
61226: ST_TO_ADDR
61227: GO 61811
61229: LD_INT 4
61231: DOUBLE
61232: GREATEREQUAL
61233: IFFALSE 61241
61235: LD_INT 9
61237: DOUBLE
61238: LESSEQUAL
61239: IFTRUE 61243
61241: GO 61303
61243: POP
// begin bc_type := b_lab_half ;
61244: LD_ADDR_OWVAR 42
61248: PUSH
61249: LD_INT 7
61251: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61252: LD_ADDR_OWVAR 44
61256: PUSH
61257: LD_INT 10
61259: PUSH
61260: LD_INT 11
61262: PUSH
61263: LD_INT 12
61265: PUSH
61266: LD_INT 15
61268: PUSH
61269: LD_INT 14
61271: PUSH
61272: LD_INT 13
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: PUSH
61283: LD_VAR 0 2
61287: PUSH
61288: LD_INT 3
61290: MINUS
61291: ARRAY
61292: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
61293: LD_ADDR_OWVAR 45
61297: PUSH
61298: LD_INT 9
61300: ST_TO_ADDR
// end ; 10 .. 13 :
61301: GO 61811
61303: LD_INT 10
61305: DOUBLE
61306: GREATEREQUAL
61307: IFFALSE 61315
61309: LD_INT 13
61311: DOUBLE
61312: LESSEQUAL
61313: IFTRUE 61317
61315: GO 61394
61317: POP
// begin bc_type := b_lab_full ;
61318: LD_ADDR_OWVAR 42
61322: PUSH
61323: LD_INT 8
61325: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61326: LD_ADDR_OWVAR 44
61330: PUSH
61331: LD_INT 10
61333: PUSH
61334: LD_INT 12
61336: PUSH
61337: LD_INT 14
61339: PUSH
61340: LD_INT 13
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: PUSH
61349: LD_VAR 0 2
61353: PUSH
61354: LD_INT 9
61356: MINUS
61357: ARRAY
61358: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61359: LD_ADDR_OWVAR 45
61363: PUSH
61364: LD_INT 11
61366: PUSH
61367: LD_INT 15
61369: PUSH
61370: LD_INT 12
61372: PUSH
61373: LD_INT 15
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: PUSH
61382: LD_VAR 0 2
61386: PUSH
61387: LD_INT 9
61389: MINUS
61390: ARRAY
61391: ST_TO_ADDR
// end ; 14 :
61392: GO 61811
61394: LD_INT 14
61396: DOUBLE
61397: EQUAL
61398: IFTRUE 61402
61400: GO 61413
61402: POP
// bc_type := b_workshop ; 15 :
61403: LD_ADDR_OWVAR 42
61407: PUSH
61408: LD_INT 2
61410: ST_TO_ADDR
61411: GO 61811
61413: LD_INT 15
61415: DOUBLE
61416: EQUAL
61417: IFTRUE 61421
61419: GO 61432
61421: POP
// bc_type := b_factory ; 16 :
61422: LD_ADDR_OWVAR 42
61426: PUSH
61427: LD_INT 3
61429: ST_TO_ADDR
61430: GO 61811
61432: LD_INT 16
61434: DOUBLE
61435: EQUAL
61436: IFTRUE 61440
61438: GO 61451
61440: POP
// bc_type := b_ext_gun ; 17 :
61441: LD_ADDR_OWVAR 42
61445: PUSH
61446: LD_INT 17
61448: ST_TO_ADDR
61449: GO 61811
61451: LD_INT 17
61453: DOUBLE
61454: EQUAL
61455: IFTRUE 61459
61457: GO 61487
61459: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61460: LD_ADDR_OWVAR 42
61464: PUSH
61465: LD_INT 19
61467: PUSH
61468: LD_INT 23
61470: PUSH
61471: LD_INT 19
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: PUSH
61479: LD_VAR 0 1
61483: ARRAY
61484: ST_TO_ADDR
61485: GO 61811
61487: LD_INT 18
61489: DOUBLE
61490: EQUAL
61491: IFTRUE 61495
61493: GO 61506
61495: POP
// bc_type := b_ext_radar ; 19 :
61496: LD_ADDR_OWVAR 42
61500: PUSH
61501: LD_INT 20
61503: ST_TO_ADDR
61504: GO 61811
61506: LD_INT 19
61508: DOUBLE
61509: EQUAL
61510: IFTRUE 61514
61512: GO 61525
61514: POP
// bc_type := b_ext_radio ; 20 :
61515: LD_ADDR_OWVAR 42
61519: PUSH
61520: LD_INT 22
61522: ST_TO_ADDR
61523: GO 61811
61525: LD_INT 20
61527: DOUBLE
61528: EQUAL
61529: IFTRUE 61533
61531: GO 61544
61533: POP
// bc_type := b_ext_siberium ; 21 :
61534: LD_ADDR_OWVAR 42
61538: PUSH
61539: LD_INT 21
61541: ST_TO_ADDR
61542: GO 61811
61544: LD_INT 21
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61552
61550: GO 61563
61552: POP
// bc_type := b_ext_computer ; 22 :
61553: LD_ADDR_OWVAR 42
61557: PUSH
61558: LD_INT 24
61560: ST_TO_ADDR
61561: GO 61811
61563: LD_INT 22
61565: DOUBLE
61566: EQUAL
61567: IFTRUE 61571
61569: GO 61582
61571: POP
// bc_type := b_ext_track ; 23 :
61572: LD_ADDR_OWVAR 42
61576: PUSH
61577: LD_INT 16
61579: ST_TO_ADDR
61580: GO 61811
61582: LD_INT 23
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61590
61588: GO 61601
61590: POP
// bc_type := b_ext_laser ; 24 :
61591: LD_ADDR_OWVAR 42
61595: PUSH
61596: LD_INT 25
61598: ST_TO_ADDR
61599: GO 61811
61601: LD_INT 24
61603: DOUBLE
61604: EQUAL
61605: IFTRUE 61609
61607: GO 61620
61609: POP
// bc_type := b_control_tower ; 25 :
61610: LD_ADDR_OWVAR 42
61614: PUSH
61615: LD_INT 36
61617: ST_TO_ADDR
61618: GO 61811
61620: LD_INT 25
61622: DOUBLE
61623: EQUAL
61624: IFTRUE 61628
61626: GO 61639
61628: POP
// bc_type := b_breastwork ; 26 :
61629: LD_ADDR_OWVAR 42
61633: PUSH
61634: LD_INT 31
61636: ST_TO_ADDR
61637: GO 61811
61639: LD_INT 26
61641: DOUBLE
61642: EQUAL
61643: IFTRUE 61647
61645: GO 61658
61647: POP
// bc_type := b_bunker ; 27 :
61648: LD_ADDR_OWVAR 42
61652: PUSH
61653: LD_INT 32
61655: ST_TO_ADDR
61656: GO 61811
61658: LD_INT 27
61660: DOUBLE
61661: EQUAL
61662: IFTRUE 61666
61664: GO 61677
61666: POP
// bc_type := b_turret ; 28 :
61667: LD_ADDR_OWVAR 42
61671: PUSH
61672: LD_INT 33
61674: ST_TO_ADDR
61675: GO 61811
61677: LD_INT 28
61679: DOUBLE
61680: EQUAL
61681: IFTRUE 61685
61683: GO 61696
61685: POP
// bc_type := b_armoury ; 29 :
61686: LD_ADDR_OWVAR 42
61690: PUSH
61691: LD_INT 4
61693: ST_TO_ADDR
61694: GO 61811
61696: LD_INT 29
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61704
61702: GO 61715
61704: POP
// bc_type := b_barracks ; 30 :
61705: LD_ADDR_OWVAR 42
61709: PUSH
61710: LD_INT 5
61712: ST_TO_ADDR
61713: GO 61811
61715: LD_INT 30
61717: DOUBLE
61718: EQUAL
61719: IFTRUE 61723
61721: GO 61734
61723: POP
// bc_type := b_solar_power ; 31 :
61724: LD_ADDR_OWVAR 42
61728: PUSH
61729: LD_INT 27
61731: ST_TO_ADDR
61732: GO 61811
61734: LD_INT 31
61736: DOUBLE
61737: EQUAL
61738: IFTRUE 61742
61740: GO 61753
61742: POP
// bc_type := b_oil_power ; 32 :
61743: LD_ADDR_OWVAR 42
61747: PUSH
61748: LD_INT 26
61750: ST_TO_ADDR
61751: GO 61811
61753: LD_INT 32
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61761
61759: GO 61772
61761: POP
// bc_type := b_siberite_power ; 33 :
61762: LD_ADDR_OWVAR 42
61766: PUSH
61767: LD_INT 28
61769: ST_TO_ADDR
61770: GO 61811
61772: LD_INT 33
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61780
61778: GO 61791
61780: POP
// bc_type := b_oil_mine ; 34 :
61781: LD_ADDR_OWVAR 42
61785: PUSH
61786: LD_INT 29
61788: ST_TO_ADDR
61789: GO 61811
61791: LD_INT 34
61793: DOUBLE
61794: EQUAL
61795: IFTRUE 61799
61797: GO 61810
61799: POP
// bc_type := b_siberite_mine ; end ;
61800: LD_ADDR_OWVAR 42
61804: PUSH
61805: LD_INT 30
61807: ST_TO_ADDR
61808: GO 61811
61810: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61811: LD_ADDR_VAR 0 8
61815: PUSH
61816: LD_VAR 0 5
61820: PPUSH
61821: LD_VAR 0 6
61825: PPUSH
61826: LD_VAR 0 3
61830: PPUSH
61831: CALL_OW 47
61835: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61836: LD_OWVAR 42
61840: PUSH
61841: LD_INT 32
61843: PUSH
61844: LD_INT 33
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: IN
61851: IFFALSE 61867
// PlaceWeaponTurret ( b , weapon ) ;
61853: LD_VAR 0 8
61857: PPUSH
61858: LD_VAR 0 4
61862: PPUSH
61863: CALL_OW 431
// end ;
61867: LD_VAR 0 7
61871: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61872: LD_INT 0
61874: PPUSH
61875: PPUSH
61876: PPUSH
61877: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61878: LD_ADDR_VAR 0 4
61882: PUSH
61883: LD_INT 22
61885: PUSH
61886: LD_OWVAR 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 30
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 30
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PPUSH
61927: CALL_OW 69
61931: ST_TO_ADDR
// if not tmp then
61932: LD_VAR 0 4
61936: NOT
61937: IFFALSE 61941
// exit ;
61939: GO 62000
// for i in tmp do
61941: LD_ADDR_VAR 0 2
61945: PUSH
61946: LD_VAR 0 4
61950: PUSH
61951: FOR_IN
61952: IFFALSE 61998
// for j = 1 to 3 do
61954: LD_ADDR_VAR 0 3
61958: PUSH
61959: DOUBLE
61960: LD_INT 1
61962: DEC
61963: ST_TO_ADDR
61964: LD_INT 3
61966: PUSH
61967: FOR_TO
61968: IFFALSE 61994
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61970: LD_VAR 0 2
61974: PPUSH
61975: CALL_OW 274
61979: PPUSH
61980: LD_VAR 0 3
61984: PPUSH
61985: LD_INT 99999
61987: PPUSH
61988: CALL_OW 277
61992: GO 61967
61994: POP
61995: POP
61996: GO 61951
61998: POP
61999: POP
// end ;
62000: LD_VAR 0 1
62004: RET
// export function hHackSetLevel10 ; var i , j ; begin
62005: LD_INT 0
62007: PPUSH
62008: PPUSH
62009: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62010: LD_ADDR_VAR 0 2
62014: PUSH
62015: LD_INT 21
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PPUSH
62025: CALL_OW 69
62029: PUSH
62030: FOR_IN
62031: IFFALSE 62083
// if IsSelected ( i ) then
62033: LD_VAR 0 2
62037: PPUSH
62038: CALL_OW 306
62042: IFFALSE 62081
// begin for j := 1 to 4 do
62044: LD_ADDR_VAR 0 3
62048: PUSH
62049: DOUBLE
62050: LD_INT 1
62052: DEC
62053: ST_TO_ADDR
62054: LD_INT 4
62056: PUSH
62057: FOR_TO
62058: IFFALSE 62079
// SetSkill ( i , j , 10 ) ;
62060: LD_VAR 0 2
62064: PPUSH
62065: LD_VAR 0 3
62069: PPUSH
62070: LD_INT 10
62072: PPUSH
62073: CALL_OW 237
62077: GO 62057
62079: POP
62080: POP
// end ;
62081: GO 62030
62083: POP
62084: POP
// end ;
62085: LD_VAR 0 1
62089: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62090: LD_INT 0
62092: PPUSH
62093: PPUSH
62094: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62095: LD_ADDR_VAR 0 2
62099: PUSH
62100: LD_INT 22
62102: PUSH
62103: LD_OWVAR 2
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 21
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PPUSH
62126: CALL_OW 69
62130: PUSH
62131: FOR_IN
62132: IFFALSE 62173
// begin for j := 1 to 4 do
62134: LD_ADDR_VAR 0 3
62138: PUSH
62139: DOUBLE
62140: LD_INT 1
62142: DEC
62143: ST_TO_ADDR
62144: LD_INT 4
62146: PUSH
62147: FOR_TO
62148: IFFALSE 62169
// SetSkill ( i , j , 10 ) ;
62150: LD_VAR 0 2
62154: PPUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_INT 10
62162: PPUSH
62163: CALL_OW 237
62167: GO 62147
62169: POP
62170: POP
// end ;
62171: GO 62131
62173: POP
62174: POP
// end ;
62175: LD_VAR 0 1
62179: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62180: LD_INT 0
62182: PPUSH
// uc_side := your_side ;
62183: LD_ADDR_OWVAR 20
62187: PUSH
62188: LD_OWVAR 2
62192: ST_TO_ADDR
// uc_nation := nation ;
62193: LD_ADDR_OWVAR 21
62197: PUSH
62198: LD_VAR 0 1
62202: ST_TO_ADDR
// InitHc ;
62203: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62207: LD_INT 0
62209: PPUSH
62210: LD_VAR 0 2
62214: PPUSH
62215: LD_VAR 0 3
62219: PPUSH
62220: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62224: LD_VAR 0 4
62228: PPUSH
62229: LD_VAR 0 5
62233: PPUSH
62234: CALL_OW 428
62238: PUSH
62239: LD_INT 0
62241: EQUAL
62242: IFFALSE 62266
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62244: CALL_OW 44
62248: PPUSH
62249: LD_VAR 0 4
62253: PPUSH
62254: LD_VAR 0 5
62258: PPUSH
62259: LD_INT 1
62261: PPUSH
62262: CALL_OW 48
// end ;
62266: LD_VAR 0 6
62270: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62271: LD_INT 0
62273: PPUSH
62274: PPUSH
// uc_side := your_side ;
62275: LD_ADDR_OWVAR 20
62279: PUSH
62280: LD_OWVAR 2
62284: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62285: LD_VAR 0 1
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: LD_INT 3
62298: PUSH
62299: LD_INT 4
62301: PUSH
62302: LD_INT 5
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: IN
62312: IFFALSE 62324
// uc_nation := nation_american else
62314: LD_ADDR_OWVAR 21
62318: PUSH
62319: LD_INT 1
62321: ST_TO_ADDR
62322: GO 62367
// if chassis in [ 11 , 12 , 13 , 14 ] then
62324: LD_VAR 0 1
62328: PUSH
62329: LD_INT 11
62331: PUSH
62332: LD_INT 12
62334: PUSH
62335: LD_INT 13
62337: PUSH
62338: LD_INT 14
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: IN
62347: IFFALSE 62359
// uc_nation := nation_arabian else
62349: LD_ADDR_OWVAR 21
62353: PUSH
62354: LD_INT 2
62356: ST_TO_ADDR
62357: GO 62367
// uc_nation := nation_russian ;
62359: LD_ADDR_OWVAR 21
62363: PUSH
62364: LD_INT 3
62366: ST_TO_ADDR
// vc_chassis := chassis ;
62367: LD_ADDR_OWVAR 37
62371: PUSH
62372: LD_VAR 0 1
62376: ST_TO_ADDR
// vc_engine := engine ;
62377: LD_ADDR_OWVAR 39
62381: PUSH
62382: LD_VAR 0 2
62386: ST_TO_ADDR
// vc_control := control ;
62387: LD_ADDR_OWVAR 38
62391: PUSH
62392: LD_VAR 0 3
62396: ST_TO_ADDR
// vc_weapon := weapon ;
62397: LD_ADDR_OWVAR 40
62401: PUSH
62402: LD_VAR 0 4
62406: ST_TO_ADDR
// un := CreateVehicle ;
62407: LD_ADDR_VAR 0 8
62411: PUSH
62412: CALL_OW 45
62416: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62417: LD_VAR 0 8
62421: PPUSH
62422: LD_INT 0
62424: PPUSH
62425: LD_INT 5
62427: PPUSH
62428: CALL_OW 12
62432: PPUSH
62433: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62437: LD_VAR 0 8
62441: PPUSH
62442: LD_VAR 0 5
62446: PPUSH
62447: LD_VAR 0 6
62451: PPUSH
62452: LD_INT 1
62454: PPUSH
62455: CALL_OW 48
// end ;
62459: LD_VAR 0 7
62463: RET
// export hInvincible ; every 1 do
62464: GO 62466
62466: DISABLE
// hInvincible := [ ] ;
62467: LD_ADDR_EXP 70
62471: PUSH
62472: EMPTY
62473: ST_TO_ADDR
62474: END
// every 10 do var i ;
62475: GO 62477
62477: DISABLE
62478: LD_INT 0
62480: PPUSH
// begin enable ;
62481: ENABLE
// if not hInvincible then
62482: LD_EXP 70
62486: NOT
62487: IFFALSE 62491
// exit ;
62489: GO 62535
// for i in hInvincible do
62491: LD_ADDR_VAR 0 1
62495: PUSH
62496: LD_EXP 70
62500: PUSH
62501: FOR_IN
62502: IFFALSE 62533
// if GetLives ( i ) < 1000 then
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL_OW 256
62513: PUSH
62514: LD_INT 1000
62516: LESS
62517: IFFALSE 62531
// SetLives ( i , 1000 ) ;
62519: LD_VAR 0 1
62523: PPUSH
62524: LD_INT 1000
62526: PPUSH
62527: CALL_OW 234
62531: GO 62501
62533: POP
62534: POP
// end ;
62535: PPOPN 1
62537: END
// export function hHackInvincible ; var i ; begin
62538: LD_INT 0
62540: PPUSH
62541: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62542: LD_ADDR_VAR 0 2
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: LD_INT 21
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 21
62562: PUSH
62563: LD_INT 2
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: LIST
62574: PPUSH
62575: CALL_OW 69
62579: PUSH
62580: FOR_IN
62581: IFFALSE 62642
// if IsSelected ( i ) then
62583: LD_VAR 0 2
62587: PPUSH
62588: CALL_OW 306
62592: IFFALSE 62640
// begin if i in hInvincible then
62594: LD_VAR 0 2
62598: PUSH
62599: LD_EXP 70
62603: IN
62604: IFFALSE 62624
// hInvincible := hInvincible diff i else
62606: LD_ADDR_EXP 70
62610: PUSH
62611: LD_EXP 70
62615: PUSH
62616: LD_VAR 0 2
62620: DIFF
62621: ST_TO_ADDR
62622: GO 62640
// hInvincible := hInvincible union i ;
62624: LD_ADDR_EXP 70
62628: PUSH
62629: LD_EXP 70
62633: PUSH
62634: LD_VAR 0 2
62638: UNION
62639: ST_TO_ADDR
// end ;
62640: GO 62580
62642: POP
62643: POP
// end ;
62644: LD_VAR 0 1
62648: RET
// export function hHackInvisible ; var i , j ; begin
62649: LD_INT 0
62651: PPUSH
62652: PPUSH
62653: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62654: LD_ADDR_VAR 0 2
62658: PUSH
62659: LD_INT 21
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PPUSH
62669: CALL_OW 69
62673: PUSH
62674: FOR_IN
62675: IFFALSE 62699
// if IsSelected ( i ) then
62677: LD_VAR 0 2
62681: PPUSH
62682: CALL_OW 306
62686: IFFALSE 62697
// ComForceInvisible ( i ) ;
62688: LD_VAR 0 2
62692: PPUSH
62693: CALL_OW 496
62697: GO 62674
62699: POP
62700: POP
// end ;
62701: LD_VAR 0 1
62705: RET
// export function hHackChangeYourSide ; begin
62706: LD_INT 0
62708: PPUSH
// if your_side = 8 then
62709: LD_OWVAR 2
62713: PUSH
62714: LD_INT 8
62716: EQUAL
62717: IFFALSE 62729
// your_side := 0 else
62719: LD_ADDR_OWVAR 2
62723: PUSH
62724: LD_INT 0
62726: ST_TO_ADDR
62727: GO 62743
// your_side := your_side + 1 ;
62729: LD_ADDR_OWVAR 2
62733: PUSH
62734: LD_OWVAR 2
62738: PUSH
62739: LD_INT 1
62741: PLUS
62742: ST_TO_ADDR
// end ;
62743: LD_VAR 0 1
62747: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
62752: PPUSH
// for i in all_units do
62753: LD_ADDR_VAR 0 2
62757: PUSH
62758: LD_OWVAR 3
62762: PUSH
62763: FOR_IN
62764: IFFALSE 62842
// if IsSelected ( i ) then
62766: LD_VAR 0 2
62770: PPUSH
62771: CALL_OW 306
62775: IFFALSE 62840
// begin j := GetSide ( i ) ;
62777: LD_ADDR_VAR 0 3
62781: PUSH
62782: LD_VAR 0 2
62786: PPUSH
62787: CALL_OW 255
62791: ST_TO_ADDR
// if j = 8 then
62792: LD_VAR 0 3
62796: PUSH
62797: LD_INT 8
62799: EQUAL
62800: IFFALSE 62812
// j := 0 else
62802: LD_ADDR_VAR 0 3
62806: PUSH
62807: LD_INT 0
62809: ST_TO_ADDR
62810: GO 62826
// j := j + 1 ;
62812: LD_ADDR_VAR 0 3
62816: PUSH
62817: LD_VAR 0 3
62821: PUSH
62822: LD_INT 1
62824: PLUS
62825: ST_TO_ADDR
// SetSide ( i , j ) ;
62826: LD_VAR 0 2
62830: PPUSH
62831: LD_VAR 0 3
62835: PPUSH
62836: CALL_OW 235
// end ;
62840: GO 62763
62842: POP
62843: POP
// end ;
62844: LD_VAR 0 1
62848: RET
// export function hHackFog ; begin
62849: LD_INT 0
62851: PPUSH
// FogOff ( true ) ;
62852: LD_INT 1
62854: PPUSH
62855: CALL_OW 344
// end ;
62859: LD_VAR 0 1
62863: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62864: LD_INT 0
62866: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62867: LD_VAR 0 1
62871: PPUSH
62872: LD_VAR 0 2
62876: PPUSH
62877: LD_VAR 0 3
62881: PPUSH
62882: LD_INT 1
62884: PPUSH
62885: LD_INT 1
62887: PPUSH
62888: CALL_OW 483
// CenterOnXY ( x , y ) ;
62892: LD_VAR 0 2
62896: PPUSH
62897: LD_VAR 0 3
62901: PPUSH
62902: CALL_OW 84
// end ;
62906: LD_VAR 0 4
62910: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62911: LD_INT 0
62913: PPUSH
62914: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62915: LD_VAR 0 1
62919: NOT
62920: PUSH
62921: LD_VAR 0 2
62925: PPUSH
62926: LD_VAR 0 3
62930: PPUSH
62931: CALL_OW 488
62935: NOT
62936: OR
62937: PUSH
62938: LD_VAR 0 1
62942: PPUSH
62943: CALL_OW 266
62947: PUSH
62948: LD_INT 3
62950: NONEQUAL
62951: PUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 247
62961: PUSH
62962: LD_INT 1
62964: EQUAL
62965: NOT
62966: AND
62967: OR
62968: IFFALSE 62972
// exit ;
62970: GO 63121
// if GetType ( factory ) = unit_human then
62972: LD_VAR 0 1
62976: PPUSH
62977: CALL_OW 247
62981: PUSH
62982: LD_INT 1
62984: EQUAL
62985: IFFALSE 63002
// factory := IsInUnit ( factory ) ;
62987: LD_ADDR_VAR 0 1
62991: PUSH
62992: LD_VAR 0 1
62996: PPUSH
62997: CALL_OW 310
63001: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63002: LD_VAR 0 1
63006: PPUSH
63007: CALL_OW 266
63011: PUSH
63012: LD_INT 3
63014: NONEQUAL
63015: IFFALSE 63019
// exit ;
63017: GO 63121
// if HexInfo ( x , y ) = factory then
63019: LD_VAR 0 2
63023: PPUSH
63024: LD_VAR 0 3
63028: PPUSH
63029: CALL_OW 428
63033: PUSH
63034: LD_VAR 0 1
63038: EQUAL
63039: IFFALSE 63066
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63041: LD_ADDR_EXP 71
63045: PUSH
63046: LD_EXP 71
63050: PPUSH
63051: LD_VAR 0 1
63055: PPUSH
63056: LD_INT 0
63058: PPUSH
63059: CALL_OW 1
63063: ST_TO_ADDR
63064: GO 63117
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63066: LD_ADDR_EXP 71
63070: PUSH
63071: LD_EXP 71
63075: PPUSH
63076: LD_VAR 0 1
63080: PPUSH
63081: LD_VAR 0 1
63085: PPUSH
63086: CALL_OW 255
63090: PUSH
63091: LD_VAR 0 1
63095: PUSH
63096: LD_VAR 0 2
63100: PUSH
63101: LD_VAR 0 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: PPUSH
63112: CALL_OW 1
63116: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63117: CALL 63126 0 0
// end ;
63121: LD_VAR 0 4
63125: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63126: LD_INT 0
63128: PPUSH
63129: PPUSH
63130: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63131: LD_STRING resetFactoryWaypoint();
63133: PPUSH
63134: CALL_OW 559
// if factoryWaypoints then
63138: LD_EXP 71
63142: IFFALSE 63268
// begin list := PrepareArray ( factoryWaypoints ) ;
63144: LD_ADDR_VAR 0 3
63148: PUSH
63149: LD_EXP 71
63153: PPUSH
63154: CALL 41965 0 1
63158: ST_TO_ADDR
// for i := 1 to list do
63159: LD_ADDR_VAR 0 2
63163: PUSH
63164: DOUBLE
63165: LD_INT 1
63167: DEC
63168: ST_TO_ADDR
63169: LD_VAR 0 3
63173: PUSH
63174: FOR_TO
63175: IFFALSE 63266
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63177: LD_STRING setFactoryWaypointXY(
63179: PUSH
63180: LD_VAR 0 3
63184: PUSH
63185: LD_VAR 0 2
63189: ARRAY
63190: PUSH
63191: LD_INT 1
63193: ARRAY
63194: STR
63195: PUSH
63196: LD_STRING ,
63198: STR
63199: PUSH
63200: LD_VAR 0 3
63204: PUSH
63205: LD_VAR 0 2
63209: ARRAY
63210: PUSH
63211: LD_INT 2
63213: ARRAY
63214: STR
63215: PUSH
63216: LD_STRING ,
63218: STR
63219: PUSH
63220: LD_VAR 0 3
63224: PUSH
63225: LD_VAR 0 2
63229: ARRAY
63230: PUSH
63231: LD_INT 3
63233: ARRAY
63234: STR
63235: PUSH
63236: LD_STRING ,
63238: STR
63239: PUSH
63240: LD_VAR 0 3
63244: PUSH
63245: LD_VAR 0 2
63249: ARRAY
63250: PUSH
63251: LD_INT 4
63253: ARRAY
63254: STR
63255: PUSH
63256: LD_STRING )
63258: STR
63259: PPUSH
63260: CALL_OW 559
63264: GO 63174
63266: POP
63267: POP
// end ; end ;
63268: LD_VAR 0 1
63272: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63273: LD_INT 0
63275: PPUSH
// if HexInfo ( x , y ) = warehouse then
63276: LD_VAR 0 2
63280: PPUSH
63281: LD_VAR 0 3
63285: PPUSH
63286: CALL_OW 428
63290: PUSH
63291: LD_VAR 0 1
63295: EQUAL
63296: IFFALSE 63323
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63298: LD_ADDR_EXP 72
63302: PUSH
63303: LD_EXP 72
63307: PPUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: LD_INT 0
63315: PPUSH
63316: CALL_OW 1
63320: ST_TO_ADDR
63321: GO 63374
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63323: LD_ADDR_EXP 72
63327: PUSH
63328: LD_EXP 72
63332: PPUSH
63333: LD_VAR 0 1
63337: PPUSH
63338: LD_VAR 0 1
63342: PPUSH
63343: CALL_OW 255
63347: PUSH
63348: LD_VAR 0 1
63352: PUSH
63353: LD_VAR 0 2
63357: PUSH
63358: LD_VAR 0 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: PPUSH
63369: CALL_OW 1
63373: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63374: CALL 63383 0 0
// end ;
63378: LD_VAR 0 4
63382: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
63387: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63388: LD_STRING resetWarehouseGatheringPoints();
63390: PPUSH
63391: CALL_OW 559
// if warehouseGatheringPoints then
63395: LD_EXP 72
63399: IFFALSE 63525
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63401: LD_ADDR_VAR 0 3
63405: PUSH
63406: LD_EXP 72
63410: PPUSH
63411: CALL 41965 0 1
63415: ST_TO_ADDR
// for i := 1 to list do
63416: LD_ADDR_VAR 0 2
63420: PUSH
63421: DOUBLE
63422: LD_INT 1
63424: DEC
63425: ST_TO_ADDR
63426: LD_VAR 0 3
63430: PUSH
63431: FOR_TO
63432: IFFALSE 63523
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63434: LD_STRING setWarehouseGatheringPointXY(
63436: PUSH
63437: LD_VAR 0 3
63441: PUSH
63442: LD_VAR 0 2
63446: ARRAY
63447: PUSH
63448: LD_INT 1
63450: ARRAY
63451: STR
63452: PUSH
63453: LD_STRING ,
63455: STR
63456: PUSH
63457: LD_VAR 0 3
63461: PUSH
63462: LD_VAR 0 2
63466: ARRAY
63467: PUSH
63468: LD_INT 2
63470: ARRAY
63471: STR
63472: PUSH
63473: LD_STRING ,
63475: STR
63476: PUSH
63477: LD_VAR 0 3
63481: PUSH
63482: LD_VAR 0 2
63486: ARRAY
63487: PUSH
63488: LD_INT 3
63490: ARRAY
63491: STR
63492: PUSH
63493: LD_STRING ,
63495: STR
63496: PUSH
63497: LD_VAR 0 3
63501: PUSH
63502: LD_VAR 0 2
63506: ARRAY
63507: PUSH
63508: LD_INT 4
63510: ARRAY
63511: STR
63512: PUSH
63513: LD_STRING )
63515: STR
63516: PPUSH
63517: CALL_OW 559
63521: GO 63431
63523: POP
63524: POP
// end ; end ;
63525: LD_VAR 0 1
63529: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63530: LD_EXP 72
63534: IFFALSE 64219
63536: GO 63538
63538: DISABLE
63539: LD_INT 0
63541: PPUSH
63542: PPUSH
63543: PPUSH
63544: PPUSH
63545: PPUSH
63546: PPUSH
63547: PPUSH
63548: PPUSH
63549: PPUSH
// begin enable ;
63550: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63551: LD_ADDR_VAR 0 3
63555: PUSH
63556: LD_EXP 72
63560: PPUSH
63561: CALL 41965 0 1
63565: ST_TO_ADDR
// if not list then
63566: LD_VAR 0 3
63570: NOT
63571: IFFALSE 63575
// exit ;
63573: GO 64219
// for i := 1 to list do
63575: LD_ADDR_VAR 0 1
63579: PUSH
63580: DOUBLE
63581: LD_INT 1
63583: DEC
63584: ST_TO_ADDR
63585: LD_VAR 0 3
63589: PUSH
63590: FOR_TO
63591: IFFALSE 64217
// begin depot := list [ i ] [ 2 ] ;
63593: LD_ADDR_VAR 0 8
63597: PUSH
63598: LD_VAR 0 3
63602: PUSH
63603: LD_VAR 0 1
63607: ARRAY
63608: PUSH
63609: LD_INT 2
63611: ARRAY
63612: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63613: LD_ADDR_VAR 0 5
63617: PUSH
63618: LD_VAR 0 3
63622: PUSH
63623: LD_VAR 0 1
63627: ARRAY
63628: PUSH
63629: LD_INT 1
63631: ARRAY
63632: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63633: LD_VAR 0 8
63637: PPUSH
63638: CALL_OW 301
63642: PUSH
63643: LD_VAR 0 5
63647: PUSH
63648: LD_VAR 0 8
63652: PPUSH
63653: CALL_OW 255
63657: NONEQUAL
63658: OR
63659: IFFALSE 63688
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63661: LD_ADDR_EXP 72
63665: PUSH
63666: LD_EXP 72
63670: PPUSH
63671: LD_VAR 0 8
63675: PPUSH
63676: LD_INT 0
63678: PPUSH
63679: CALL_OW 1
63683: ST_TO_ADDR
// exit ;
63684: POP
63685: POP
63686: GO 64219
// end ; x := list [ i ] [ 3 ] ;
63688: LD_ADDR_VAR 0 6
63692: PUSH
63693: LD_VAR 0 3
63697: PUSH
63698: LD_VAR 0 1
63702: ARRAY
63703: PUSH
63704: LD_INT 3
63706: ARRAY
63707: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63708: LD_ADDR_VAR 0 7
63712: PUSH
63713: LD_VAR 0 3
63717: PUSH
63718: LD_VAR 0 1
63722: ARRAY
63723: PUSH
63724: LD_INT 4
63726: ARRAY
63727: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63728: LD_ADDR_VAR 0 9
63732: PUSH
63733: LD_VAR 0 6
63737: PPUSH
63738: LD_VAR 0 7
63742: PPUSH
63743: LD_INT 16
63745: PPUSH
63746: CALL 40553 0 3
63750: ST_TO_ADDR
// if not cratesNearbyPoint then
63751: LD_VAR 0 9
63755: NOT
63756: IFFALSE 63762
// exit ;
63758: POP
63759: POP
63760: GO 64219
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63762: LD_ADDR_VAR 0 4
63766: PUSH
63767: LD_INT 22
63769: PUSH
63770: LD_VAR 0 5
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: LD_INT 60
63784: PUSH
63785: EMPTY
63786: LIST
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 91
63794: PUSH
63795: LD_VAR 0 8
63799: PUSH
63800: LD_INT 6
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: PUSH
63811: LD_INT 25
63813: PUSH
63814: LD_INT 2
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 25
63823: PUSH
63824: LD_INT 16
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: LIST
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: PPUSH
63842: CALL_OW 69
63846: PUSH
63847: LD_VAR 0 8
63851: PPUSH
63852: CALL_OW 313
63856: PPUSH
63857: LD_INT 3
63859: PUSH
63860: LD_INT 60
63862: PUSH
63863: EMPTY
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 25
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 25
63885: PUSH
63886: LD_INT 16
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PPUSH
63902: CALL_OW 72
63906: UNION
63907: ST_TO_ADDR
// if tmp then
63908: LD_VAR 0 4
63912: IFFALSE 63992
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63914: LD_ADDR_VAR 0 4
63918: PUSH
63919: LD_VAR 0 4
63923: PPUSH
63924: LD_INT 3
63926: PPUSH
63927: CALL 38522 0 2
63931: ST_TO_ADDR
// for j in tmp do
63932: LD_ADDR_VAR 0 2
63936: PUSH
63937: LD_VAR 0 4
63941: PUSH
63942: FOR_IN
63943: IFFALSE 63986
// begin if IsInUnit ( j ) then
63945: LD_VAR 0 2
63949: PPUSH
63950: CALL_OW 310
63954: IFFALSE 63965
// ComExit ( j ) ;
63956: LD_VAR 0 2
63960: PPUSH
63961: CALL 38605 0 1
// AddComCollect ( j , x , y ) ;
63965: LD_VAR 0 2
63969: PPUSH
63970: LD_VAR 0 6
63974: PPUSH
63975: LD_VAR 0 7
63979: PPUSH
63980: CALL_OW 177
// end ;
63984: GO 63942
63986: POP
63987: POP
// exit ;
63988: POP
63989: POP
63990: GO 64219
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63992: LD_ADDR_VAR 0 4
63996: PUSH
63997: LD_INT 22
63999: PUSH
64000: LD_VAR 0 5
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 91
64011: PUSH
64012: LD_VAR 0 8
64016: PUSH
64017: LD_INT 8
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: LD_INT 34
64030: PUSH
64031: LD_INT 12
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 34
64040: PUSH
64041: LD_INT 51
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 34
64050: PUSH
64051: LD_INT 32
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 34
64060: PUSH
64061: LD_INT 89
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: LIST
64079: PPUSH
64080: CALL_OW 69
64084: ST_TO_ADDR
// if tmp then
64085: LD_VAR 0 4
64089: IFFALSE 64215
// begin for j in tmp do
64091: LD_ADDR_VAR 0 2
64095: PUSH
64096: LD_VAR 0 4
64100: PUSH
64101: FOR_IN
64102: IFFALSE 64213
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64104: LD_VAR 0 2
64108: PPUSH
64109: CALL_OW 262
64113: PUSH
64114: LD_INT 3
64116: EQUAL
64117: PUSH
64118: LD_VAR 0 2
64122: PPUSH
64123: CALL_OW 261
64127: PUSH
64128: LD_INT 20
64130: GREATER
64131: OR
64132: PUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: CALL_OW 314
64142: NOT
64143: AND
64144: PUSH
64145: LD_VAR 0 2
64149: PPUSH
64150: CALL_OW 263
64154: PUSH
64155: LD_INT 1
64157: NONEQUAL
64158: PUSH
64159: LD_VAR 0 2
64163: PPUSH
64164: CALL_OW 311
64168: OR
64169: AND
64170: IFFALSE 64211
// begin ComCollect ( j , x , y ) ;
64172: LD_VAR 0 2
64176: PPUSH
64177: LD_VAR 0 6
64181: PPUSH
64182: LD_VAR 0 7
64186: PPUSH
64187: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64191: LD_VAR 0 2
64195: PPUSH
64196: LD_VAR 0 8
64200: PPUSH
64201: CALL_OW 172
// exit ;
64205: POP
64206: POP
64207: POP
64208: POP
64209: GO 64219
// end ;
64211: GO 64101
64213: POP
64214: POP
// end ; end ;
64215: GO 63590
64217: POP
64218: POP
// end ;
64219: PPOPN 9
64221: END
