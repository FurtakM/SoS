
Export Function Join(array, element);
begin
result := Replace(array, array + 1, element);

End;

Export Function ComComplete(units, b);
var i;
begin
if not units then
   exit;

for i in units do
    if BuildingStatus(b) = bs_build then
       SetTaskList(i, [['h', GetX(b), GetY(b), b, 0, 0, 0]]);
End;

Export Function DangerInArea(side, area);
begin
result := FilterUnitsInArea(area, [f_enemy, side]);
End;

// £¹czenie zdlanego sterowania

Export Function Connect(vehicle);
var i, t, mech, tmp, j;
begin
if not vehicle or GetControl(vehicle) <> control_remote then
   exit;

tmp := FilterAllUnits([[f_side, GetSide(vehicle)], [f_or, [f_btype, b_control_tower], [f_weapon, ar_control_tower]]]);

if not tmp then
   exit;

result := [];

for i in tmp do
    begin
    t := UnitsInside(i);

    if t then
       for j in t do
           result := Replace(result, result + 1, j);
    end;

if not result then
   exit;

mech := result[1];

if result > 1 then
   begin
   for i = 2 to result do
       begin
       t := GetSkill(result[i], 3) - UnitsLinked(result[i]);

       if t >= (GetSkill(mech, 3) - UnitsLinked(mech)) then
          mech := result[i];
       end;
   end;

ComLinkTo(vehicle, mech);
End;

Export Function PlaceHiddenCamerasInArea(side, area);
var i, tmp;
begin
if not side or not area then
   exit;

tmp := AreaToList(area, 0);

for i := 1 to tmp[1] do
    begin
    if IsEnvironment(tmp[1][i], tmp[2][i]) then
       HiddenCamera(tmp[1][i], tmp[2][i], side);
    end;
End;

Export Function Count(array);
begin
result := array + 0;
End;

Export function CanBeBuiltOnlyResources(depot, btype);
var pom, cost;
begin
if btype = b_depot then
   begin
   result := true;
   exit;
   end;

pom := GetBase(depot);
cost := CostOfBuilding(btype, GetNation(depot));

result := (
   GetResourceType(pom, mat_cans) >= cost[1] and
   GetResourceType(pom, mat_oil) >= cost[2] and
   GetResourceType(pom, mat_siberit) >= cost[3]
);
End;