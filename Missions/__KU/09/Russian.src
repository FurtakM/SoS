
//Export ruForces, ruForces2, ruCommander, ruCommander2, ruMech, ruMech2;
//Export ruTech, ruBaseArea, ruBaseArea2, ruBase, ruBase2, ruConstructList, ruConstructList2,
       ruCratesArea, ruCratesArea2, ruHealPoint, ruHealPoint2, ruBuildings, ruBuildings2, ruTransportDestroyed,
       ruTanks, ruTanks2, ruExtraTanks, ruParkingArea, ruParkingArea2, ruCratesSpawnArea, ruCratesSpawnArea2;

//Export function RussianBase(group, option);
//begin

        ruBuildings := [
            [b_depot, 104, 110, 5],
            [b_armoury, 98, 90, 3],
            [b_oil_mine, 103, 114, 2],
            [b_siberite_mine, 99, 114, 3],
            [b_siberite_power, 100, 112, 1],
            [b_workshop, 92, 101, 0],
            [b_oil_power, 97, 116, 5],
            [b_ext_gun, 96, 101, 4],
            [b_ext_rocket, 88, 97, 2],
            [b_oil_power, 106, 92, 2],
            [b_lab, 93, 110, 0],
            [b_ext_siberium, 89, 101, 1],
            [b_ext_track, 95, 104, 4],
            [b_ext_computer, 92, 105, 0],
            [b_turret, 88, 89, 2],
            [b_turret, 86, 90, 2],
            [b_turret, 85, 99, 2],
            [b_turret, 85, 107, 1],
            [b_turret, 105, 99, 1],
            [b_turret, 102, 92, 3],
            [b_turret, 105, 92, 2]
        ];

End;

Every 0$2  do
var i, tmp, undone, lab, eng, tag, tw, cr, sci, sol, hurtUnits, enemyInBase, empty, fac, emptyTowers, weapon;
begin
enable;

// research
if ruTech then
   begin
   lab := FilterAllUnits([[f_side, 3], [f_ok], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);

   if lab then
      begin
      if BuildingStatus(lab[1]) = bs_idle then
         begin
         for i in ruTech do
             if CanBeResearched(lab[1], i) then
                begin
                ComResearch(lab[1], i);
                break;
                end;
         end;
      end;
   end;

fac := FilterUnitsInArea(ruBaseArea, [[f_side, 3], [f_btype, b_factory], [f_ok]]);

if fac then
   begin
   if UnitFilter(ruMech, [[f_not, [f_hastask]], [f_not, [f_class, class_mechanic]]]) then
      begin
      for i in UnitFilter(ruMech, [[f_not, [f_hastask]], [f_not, [f_class, class_mechanic]]]) do
          begin
          SetTag(i, ruMech);

          if IsInUnit(i) and IsInUnit(i) <> fac[1] then
             ComExitBuilding(i);

          AddComEnterUnit(i, fac[1]);
          AddComChangeProfession(i, class_mechanic);
          end;
      end;

   if UnitFilter(ruMech, [[f_class, class_mechanic], [f_not, [f_inside]], [f_tag, ruMech], [f_ok]]) then
      begin
      for i in UnitFilter(ruMech, [[f_class, class_mechanic], [f_not, [f_inside]], [f_tag, ruMech], [f_ok]]) do
          ComEnterUnit(i, fac[1]);
      end;

   if BuildingStatus(fac[1]) = bs_idle then
      begin
      emptyTowers := FilterUnitsInArea(ruBaseArea, [[f_or, [f_btype, b_bunker], [f_btype, b_turret]], [f_bweapon, 0]]);

      if emptyTowers then
         begin
         weapon := ru_gun;

         if weapon then
            ComPlaceWeapon(emptyTowers[1], weapon);
         end;

      if ruConstructList then
         if CanBeConstructed(fac[1], ruConstructList[1][1], ruConstructList[1][2], ruConstructList[1][3], ruConstructList[1][4]) then
            ComConstruct(fac[1], ruConstructList[1][1], ruConstructList[1][2], ruConstructList[1][3], ruConstructList[1][4]);
      end;
   end;

// damaged buildings
tmp := FilterUnitsInArea(ruBaseArea, [[f_type, unit_building], [f_not, [f_constructed]], [f_not, [f_lives, 1000]]]);

// crates nearby base
cr := GetListOfCratesInArea(ruCratesArea);

// sci logic
sci := UnitFilter(ruForces, [[f_class, 4], [f_ok]]);
lab := FilterUnitsInArea(ruBaseArea, [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]);

if sci then
   begin
   hurtUnits := UnitFilter(ruForces, [[f_inarea, ruBaseArea], [f_not, [f_lives, 1000]]]);

   if hurtUnits then
      begin
      for i in sci do
          if IsInUnit(i) then
             ComExitBuilding(i)
          else
             ComHeal(i, hurtUnits[1]);
      end
   else if lab then
      begin
      for i in sci do
          if not IsInUnit(i) then
             ComEnterUnit(i, lab[1]);
      end;
   end;

// eng logic
eng := UnitFilter(ruForces, [f_class, 2]);

if eng then
   begin
   for i in eng do
       begin
       tag := GetTag(i);

       if GetLives(i) < 800 then
          begin
          SetTag(i, tHeal);
          ComMoveXY(i, ruHealPoint[1], ruHealPoint[2]);
          AddComHold(i);
          end;

       if tag = tHeal and GetLives(i) = 1000 then
          SetTag(i, 0);

       if not tag then
          begin
          undone := FilterUnitsInArea(ruBaseArea, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          if cr or tmp or Count(ruBuildings) then
             begin
             if IsInUnit(i) then
                ComExitBuilding(i);

             if tmp then
                SetTag(i, tRepair)
             else if cr then
                SetTag(i, tCrates)
             else
                SetTag(i, tBuild);
             end
          else
             if not IsInUnit(i) then
                ComEnterUnit(i, ruBase);
          end;

       if tag = tRepair then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not tmp then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) then
             ComRepairBuilding(i, tmp[1]);

          if not IsInArea(i, ruBaseArea) then
             ComMoveToArea(i, ruBaseArea);
          end;

       if tag = tBuild then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not Count(ruBuildings) then
             begin
             SetTag(i, 0);
             continue;
             end
          else if not CanBeBuiltOnlyResources(ruBase, ruBuildings[1][1]) then
             begin
             SetTag(i, 0);
             continue;
             end;

          undone := FilterUnitsInArea(ruBaseArea, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          ComBuild(i, ruBuildings[1][1], ruBuildings[1][2], ruBuildings[1][3], ruBuildings[1][4]);
          end;

       if tag = tCrates then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not cr then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) and not FilterAllUnits([[f_enemy, 3], [f_distxy, cr[1], cr[2], 12]]) then
             ComCollect(i, cr[1], cr[2]);
          end;
       end;
   end;

// defense logic
sol := UnitFilter(ruForces, [[f_or, [f_class, class_soldier], [f_class, class_bazooker]], [f_ok]]) union ruCommander;
enemyInBase := FilterUnitsInArea(ruBaseArea, [f_enemy, 3]);

if sol then
   begin
   if enemyInBase then
      begin
      for i in sol do
          begin
          tw := IsInUnit(i);

          if tw then
             begin
             if not tw in FilterAllUnits([[f_side, 3], [f_see, 1], [f_or, [f_btype, b_bunker], [f_btype, b_breastwork]]]) then
                ComExitBuilding(i);
             end
          else
             ComAttackUnit(i, NearestUnitToUnit(enemyInBase, i));
          end;
      end
   else
      begin
      empty := FilterUnitsInArea(ruBaseArea, [[f_not, [f_full]], [f_or, [f_btype, b_bunker], [f_btype, b_armoury], [f_btype, b_barracks], [f_btype, b_breastwork]]]);

      if empty then
         empty := ReverseArray(empty);

      for i in sol do
          begin
          tag := GetTag(i);

          if tag = tMech then
             continue;

          if GetLives(i) < 1000 and tag <> tHeal then
             begin
             SetTag(i, tHeal);
             ComMoveXY(i, ruHealPoint[1], ruHealPoint[2]);
             AddComHold(i);
             continue;
             end;

          if GetLives(i) = 1000 and tag = tHeal then
             begin
             SetTag(i, 0);
             continue;
             end;

          if HasTask(i) then
             continue;

          if not IsInUnit(i) and not tag and empty then
             begin
             ComEnterUnit(i, empty[1]);

             if GetBType(empty[1]) = b_barracks and Prob(50) then
                AddComChangeProfession(i, class_bazooker);

             empty := Delete(empty, 1);
             end;
          end;
      end;
   end;
End;

// ru script #2
Every 0$2 trigger ruScriptActive2 and Count(ruForces2) do
var i, tmp, undone, lab, eng, tag, tw, cr, sci, sol, hurtUnits, enemyInBase, empty, fac, emptyTowers, weapon;
begin
enable;

// research
if ruTech then
   begin
   lab := FilterAllUnits([[f_side, 3], [f_ok], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);

   if lab then
      begin
      if BuildingStatus(lab[1]) = bs_idle then
         begin
         for i in ruTech do
             if CanBeResearched(lab[1], i) then
                begin
                ComResearch(lab[1], i);
                break;
                end;
         end;
      end;
   end;

fac := FilterUnitsInArea(ruBaseArea2, [[f_side, 3], [f_btype, b_factory], [f_ok]]);

if fac then
   begin
   if UnitFilter(ruMech2, [[f_not, [f_hastask]], [f_not, [f_class, class_mechanic]]]) then
      begin
      for i in UnitFilter(ruMech2, [[f_not, [f_hastask]], [f_not, [f_class, class_mechanic]]]) do
          begin
          SetTag(i, tMech);

          if IsInUnit(i) and IsInUnit(i) <> fac[1] then
             ComExitBuilding(i);

          AddComEnterUnit(i, fac[1]);
          AddComChangeProfession(i, class_mechanic);
          end;
      end;

   if UnitFilter(ruMech2, [[f_class, class_mechanic], [f_not, [f_inside]], [f_tag, tMech], [f_ok]]) then
      begin
      for i in UnitFilter(ruMech2, [[f_class, class_mechanic], [f_not, [f_inside]], [f_tag, tMech], [f_ok]]) do
          ComEnterUnit(i, fac[1]);
      end;

   if BuildingStatus(fac[1]) = bs_idle then
      begin
      emptyTowers := FilterUnitsInArea(ruBaseArea2, [[f_or, [f_btype, b_bunker], [f_btype, b_turret]], [f_bweapon, 0]]);

      if emptyTowers then
         begin
         weapon := GetTurretWeapon(emptyTowers[1], ruBaseArea2);

         if weapon then
            ComPlaceWeapon(emptyTowers[1], weapon);
         end;

      if ruConstructList2 then
         if CanBeConstructed(fac[1], ruConstructList2[1][1], ruConstructList2[1][2], ruConstructList2[1][3], ruConstructList2[1][4]) then
            ComConstruct(fac[1], ruConstructList2[1][1], ruConstructList2[1][2], ruConstructList2[1][3], ruConstructList2[1][4]);
      end;
   end;

// damaged buildings
tmp := FilterUnitsInArea(ruBaseArea2, [[f_type, unit_building], [f_not, [f_constructed]], [f_not, [f_lives, 1000]]]);

// crates nearby base
cr := GetListOfCratesInArea(ruCratesArea2);

// sci logic
sci := UnitFilter(ruForces2, [[f_class, 4], [f_ok]]);
lab := FilterUnitsInArea(ruBaseArea2, [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]);

if sci then
   begin
   hurtUnits := UnitFilter(ruForces2, [[f_inarea, ruBaseArea2], [f_tag, tHeal]]);
   lab := FilterAllUnits([[f_side, 3], [f_ok], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);

   if hurtUnits then
      begin
      for i in sci do
          if IsInUnit(i) then
             ComExitBuilding(i)
          else
             ComHeal(i, hurtUnits[1]);
      end
   else if lab then
      begin
      for i in sci do
          if not IsInUnit(i) then
             ComEnterUnit(i, lab[1]);
      end;
   end;

// eng logic
eng := UnitFilter(ruForces2, [f_class, 2]);

if eng then
   begin
   for i in eng do
       begin
       tag := GetTag(i);

       if GetLives(i) < 800 and tag <> tHeal then
          begin
          SetTag(i, tHeal);
          ComMoveXY(i, ruHealPoint2[1], ruHealPoint2[2]);
          AddComHold(i);
          end;

       if tag = tHeal and GetLives(i) = 1000 then
          SetTag(i, 0);

       if not tag then
          begin
          undone := FilterUnitsInArea(ruBaseArea2, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          if cr or tmp or Count(ruBuildings2) then
             begin
             if IsInUnit(i) then
                ComExitBuilding(i);

             if tmp then
                SetTag(i, tRepair)
             else if cr then
                SetTag(i, tCrates)
             else
                SetTag(i, tBuild);
             end
          else
             if not IsInUnit(i) then
                ComEnterUnit(i, ruBase2);
          end;

       if tag = tRepair then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not tmp then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) then
             ComRepairBuilding(i, tmp[1]);

          if not IsInArea(i, ruBaseArea2) then
             ComMoveToArea(i, ruBaseArea2);
          end;

       if tag = tBuild then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not Count(ruBuildings2) then
             begin
             SetTag(i, 0);
             continue;
             end
          else if not CanBeBuiltOnlyResources(ruBase2, ruBuildings2[1][1]) then
             begin
             SetTag(i, 0);
             continue;
             end;

          undone := FilterUnitsInArea(ruBaseArea2, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          ComBuild(i, ruBuildings2[1][1], ruBuildings2[1][2], ruBuildings2[1][3], ruBuildings2[1][4]);
          end;

       if tag = tCrates then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not cr then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) and not FilterAllUnits([[f_enemy, 3], [f_distxy, cr[1], cr[2], 12]]) then
             ComCollect(i, cr[1], cr[2]);
          end;
       end;
   end;

// defense logic
sol := UnitFilter(ruForces2, [[f_or, [f_class, class_soldier], [f_class, class_bazooker]], [f_ok]]) union ruCommander2;
enemyInBase := FilterUnitsInArea(ruBaseArea2, [f_enemy, 3]);

if sol then
   begin
   if enemyInBase then
      begin
      for i in sol do
          begin
          tw := IsInUnit(i);

          if tw then
             begin
             if not tw in FilterAllUnits([[f_side, 3], [f_see, 1], [f_or, [f_btype, b_bunker], [f_btype, b_breastwork]]]) then
                ComExitBuilding(i);
             end
          else
             ComAttackUnit(i, NearestUnitToUnit(enemyInBase, i));
          end;
      end
   else
      begin
      empty := FilterUnitsInArea(ruBaseArea2, [[f_not, [f_full]], [f_or, [f_btype, b_bunker], [f_btype, b_armoury], [f_btype, b_barracks], [f_btype, b_breastwork]]]);

      if empty then
         empty := ReverseArray(empty);

      for i in sol do
          begin
          tag := GetTag(i);

          if tag = tMech then
             continue;

          if GetLives(i) < 1000 and tag <> tHeal then
             begin
             SetTag(i, tHeal);
             ComMoveXY(i, ruHealPoint2[1], ruHealPoint2[2]);
             AddComHold(i);
             continue;
             end;

          if GetLives(i) = 1000 and tag = tHeal then
             begin
             SetTag(i, 0);
             continue;
             end;

          if HasTask(i) then
             continue;

          if not IsInUnit(i) and not tag and empty then
             begin
             ComEnterUnit(i, empty[1]);

             if GetBType(empty[1]) = b_barracks and Prob(50) then
                AddComChangeProfession(i, class_bazooker);

             empty := Delete(empty, 1);
             end;
          end;
      end;
   end;
End;

// russian mobile warfare
Every 0$1 trigger ruTanks and ruActiveAttacks do
var i, mech, enemy;
begin
enable;

if not ruTanks then
   exit;

// tags:
// 0 - idle,
// 11 - go to parking, repair if needed
// 12 - attack

for i in ruTanks do
    begin
    if not IsOk(i) or GetSide(i) <> 3 then
       begin
       ruTanks := ruTanks diff i;
       continue;
       end;

    if not GetTag(i) or GetTag(i) = 0 then
       begin
       if GetEngine(i) = engine_combustion and GetFuel(i) < 50 and IsOk(ruBase) then
          begin
          ComMoveXY(i, GetX(ruBase), GetY(ruBase));

          repeat
           wait(0$1);
          until GetDistUnitXY(i, GetX(ruBase), GetY(ruBase)) < 6;

          SetFuel(i, 100);
          end
       else if not IsInArea(i, ruParkingArea) then
          ComMoveToArea(i, ruParkingArea)
       else
          SetTag(i, tParking);
       end;

    if GetTag(i) = tParking then
       begin
       if GetLives(i) < 650 then
          begin
          if not IsDrivenBy(i) then
             continue;

          mech := IsDrivenBy(i);

          ComExitVehicle(mech);
          AddComRepairVehicle(mech, i);

          repeat
           wait(0$1);
          until GetLives(i) = 1000;

          ComEnterUnit(mech, i);
          end
       else if IsDrivenBy(i) then
          SetTag(i, tAttack);
       end;

    if GetTag(i) = tAttack then
       begin
       enemy := FilterUnitsInArea(ruBaseArea, [f_enemy, 3]);

       if GetLives(i) < 650 then
          begin
          ComStop(i);
          SetTag(i, 0);
          continue;
          end;

       if enemy then
          begin
          if not HasTask(i) then
             ComAttackUnit(i, NearestUnitToUnit(enemy, i));
          end
       else
          AgressiveMove(i, [ [105,35] ]);
       end;
    end;
End;

Every 0$1 trigger ruTanks2 and ruActiveAttacks do
var i, mech, enemy;
begin
enable;

if not ruTanks2 then
   exit;

// tags:
// 0 - idle,
// 11 - go to parking, repair if needed
// 12 - attack

for i in ruTanks2 do
    begin
    if not IsOk(i) or GetSide(i) <> 3 then
       begin
       ruTanks := ruTanks diff i;
       continue;
       end;

    if not GetTag(i) or GetTag(i) = 0 then
       begin
       if GetEngine(i) = engine_combustion and GetFuel(i) < 50 and IsOk(ruBase2) then
          begin
          ComMoveXY(i, GetX(ruBase2), GetY(ruBase2));

          repeat
           wait(0$1);
          until GetDistUnitXY(i, GetX(ruBase2), GetY(ruBase2)) < 6;

          SetFuel(i, 100);
          end
       else if not IsInArea(i, ruParkingArea2) then
          ComMoveToArea(i, ruParkingArea2)
       else
          SetTag(i, tParking);
       end;

    if GetTag(i) = tParking then
       begin
       if GetLives(i) < 650 then
          begin
          if not IsDrivenBy(i) then
             continue;

          mech := IsDrivenBy(i);

          ComExitVehicle(mech);
          AddComRepairVehicle(mech, i);

          repeat
           wait(0$1);
          until GetLives(i) = 1000;

          ComEnterUnit(mech, i);
          end
       else if IsDrivenBy(i) then
          SetTag(i, tAttack);
       end;

    if GetTag(i) = tAttack then
       begin
       enemy := FilterUnitsInArea(ruBaseArea2, [f_enemy, 3]);

       if GetLives(i) < 650 then
          begin
          ComStop(i);
          SetTag(i, 0);
          continue;
          end;

       if enemy then
          begin
          if not HasTask(i) then
             ComAttackUnit(i, NearestUnitToUnit(enemy, i));
          end
       else
          AgressiveMove(i, [ [105,35] ]);
       end;
    end;
End;

Every 5$00 trigger Count(ruExtraTanks) do
begin
enable;
RaiseSailEvent(EExtraAttack);
End;

Export function RussianExtraAttack;
var i, tmp;
begin
tmp := UnitFilter(ruExtraTanks, [f_ok]);
ruExtraTanks := ruExtraTanks diff tmp;

ComAgressiveMove(tmp, 105, 35);

wait(0$5);

repeat
 wait(0$1);
 tmp := UnitFilter(tmp, [f_ok]);

 for i in tmp do
     AgressiveMove(i, [ [105,35] ]);
until not tmp;
End;

Export Function PrepareRussianAttack(strength);
var i, tmp, un, veh, skill, area, parking, dir, control;
begin
result := [];

skill := [4, 5, 6, 7][Difficulty];
area := arAttackSpawn2Area;
parking := ruGatPointArea;
dir := 5;

if FilterUnitsInArea(area, [f_or, [f_side, 0], [f_side, 6]]) then
   for i in FilterUnitsInArea(area, [f_or, [f_side, 0], [f_side, 6]]) do
       RemoveUnit(i);

if FilterUnitsInArea(area, [[f_not, [f_type, unit_human]], [f_side, 1]]) then
   for i in FilterUnitsInArea(area, [[f_not, [f_type, unit_human]], [f_side, 1]]) do
       KillUnit(i);

if FilterUnitsInArea(area, [[f_type, unit_human], [f_side, 1]]) then
   for i in FilterUnitsInArea(area, [[f_type, unit_human], [f_side, 1]]) do
       ComMoveXY(i, 92, 92);

repeat
 wait(0$1);
until not FilterUnitsInArea(area, [f_ok]);

InitHC_All();
InitVc;

// tanks
for i := 1 to [3, 4, 4, 5][Difficulty] + strength do
    begin
    uc_side := 6;
    uc_nation := nation_russian;

    control := [control_manual, control_computer, control_computer, control_computer][rand(1,4)];

    PrepareVehicle(
       [ru_medium_tracked, ru_heavy_tracked, ru_heavy_wheeled][i mod 3 + 1],
       [engine_siberite, engine_combustion][rand(1,2)],
       control,
       [ru_rocket_launcher, ru_heavy_gun, ru_gatling_gun][i mod 3 + 1],
       100
    );

    veh := CreateVehicle;
    SetDir(veh, dir);

    PlaceUnitArea(veh, area, false);

    if control = control_manual then
       begin
       uc_side := 6;
       uc_nation := nation_russian;

       PrepareMechanic(false, skill);
       un := CreateHuman;
       PlaceHumanInUnit(un, veh);
       end;

    repeat
     ComMoveToArea(veh, parking);
     wait(0$3);
    until not FilterUnitsInArea(area, [f_ok]);

    result := Join(result, veh);
    end;

// infantry
for i := 1 to [2, 2, 3, 4][Difficulty] do
    begin
    uc_side := 6;
    uc_nation := nation_russian;

    PrepareSoldier(false, skill);
    un := CreateHuman;

    if Prob([35, 60, 70, 80][Difficulty]) then
       SetClass(un, class_bazooker);

    SetDir(un, dir);

    PlaceUnitArea(un, area, false);
    ComMoveToArea(un, parking);

    wait(0$1);

    result := Join(result, un);
    end;
End;

Export function SendRussianAttack(wave);
var path, attackers, e, i, enemy;
begin
russianWaveAttack := Inc(russianWaveAttack);
path := [ [99,91], [78,50], [91,45] ];

attackers := PrepareRussianAttack(wave);

ComAgressiveMove(UnitFilter(attackers, [f_type, unit_human]), 108, 60);

DRussianNextAttack;

repeat
  wait(0$2);
  enemy := FilterAllUnits([f_enemy, 6]);
  attackers := UnitFilter(attackers, [f_ok]);

  for i in attackers do
      begin
      if not IsOk(i) then
         begin
         attackers := attackers diff i;
         continue;
         end;

      if GetType(i) = unit_vehicle then
         AgressiveMove(i, path)
      else
         begin
         if GetClass(i) = class_bazooker then
            begin
            if GetDistUnits(i, NearestUnitToUnit(enemy, i)) > 12 then
               ComAgressiveMoveToUnit(i, NearestUnitToUnit(enemy, i))
            else
               begin
               e := NearestUnitToUnit(enemy, i);

               case rand(1,3) of
                    1: ComAttackUnit(i, e);
                    2: begin
                       ComSpaceShift(i, GetX(e), GetY(e));

                       if GetType(e) <> unit_building and not dialogRussianSpaceAmmo then
                          begin
                          dialogRussianSpaceAmmo := true;

                          wait(0$6);

                          DRussianSpaceAmmo(e);
                          end;
                       end;
                    3: begin
                       ComTimeShift(i, GetX(e), GetY(e));

                       if not dialogRussianSpaceAmmo then
                          begin
                          dialogRussianSpaceAmmo := true;

                          wait(0$6);

                          DRussianSpaceAmmo(e);
                          end;
                       end;
                    end;
               end;
            end
         else
            ComAgressiveMoveToUnit(i, NearestUnitToUnit(enemy, i));
         end;
      end;
until not attackers;
End;

Every 6$30 trigger epsilon and firstAttack do
var i, un, tmp;
begin
InitHC_All();

for i := 1 to 3 do
    begin
    uc_side := 6;
    uc_nation := nation_russian;

    PrepareSoldier(false, 3);
    un := CreateHuman;
    SetDir(un, 2);
    PlaceUnitArea(un, ruNorthSpawnArea, false);

    ComAgressiveMove(un, 52, 16);
    end;
End;

Every 5$00 trigger IsOk(ruBase) and not ruTransportDestroyed do
var cargo;
begin
enable;

uc_side := 3;
uc_nation := nation_russian;

PrepareVehicle(ru_medium_tracked, engine_siberite, control_computer, ru_cargo_bay, 100);
cargo := CreateVehicle;
SetDir(cargo, 5);
PlaceUnitXY(cargo, 187, 117, false);
SetCargo(cargo, mat_cans, 100);

ComMoveUnit(cargo, ruBase);
AddComGive(cargo, ruBase);
AddComMoveXY(cargo, 187, 117);

wait(0$10);

repeat
 wait(0$1);

 if not HasTask(cargo) then
    ComMoveXY(cargo, 187, 117);
until IsDead(cargo) or IsAt(cargo, 187, 117);

if IsAt(cargo, 187, 117) then
   RemoveUnit(cargo);
End;
