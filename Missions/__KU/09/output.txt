// on OilExtracted ( building , side , base , amount ) do begin end ;
   0: PPOPN 4
   2: END
// every 0 0$1 do
   3: GO 5
   5: DISABLE
// begin HintSpec ( VehLimit , 2 ) ;
   6: LD_STRING VehLimit
   8: PPUSH
   9: LD_INT 2
  11: PPUSH
  12: CALL_OW 338
// PlaceMinesToArea ( minesAr , 23 , 10 , 2 , 0 ) ;
  16: LD_INT 4
  18: PPUSH
  19: LD_INT 23
  21: PPUSH
  22: LD_INT 10
  24: PPUSH
  25: LD_INT 2
  27: PPUSH
  28: LD_INT 0
  30: PPUSH
  31: CALL_OW 511
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
  35: END
// export globalGameSaveCounter ; every 0 0$1 do
  36: GO 38
  38: DISABLE
// begin enable ;
  39: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  40: LD_STRING updateTimer(
  42: PUSH
  43: LD_OWVAR 1
  47: STR
  48: PUSH
  49: LD_STRING );
  51: STR
  52: PPUSH
  53: CALL_OW 559
// end ;
  57: END
// every 0 0$1 do
  58: GO 60
  60: DISABLE
// begin globalGameSaveCounter := 0 ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
  69: LD_STRING setGameSaveCounter(0)
  71: PPUSH
  72: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
  76: LD_STRING initStreamRollete();
  78: PPUSH
  79: CALL_OW 559
// InitStreamMode ;
  83: CALL 1435 0 0
// DefineStreamItems ( false ) ;
  87: LD_INT 0
  89: PPUSH
  90: CALL 1899 0 1
// end ;
  94: END
// export function SOS_MapStart ( ) ; begin
  95: LD_INT 0
  97: PPUSH
// if streamModeActive then
  98: LD_EXP 2
 102: IFFALSE 111
// DefineStreamItems ( true ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL 1899 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
 111: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
 113: PPUSH
 114: CALL_OW 559
// UpdateLuaVariables ( ) ;
 118: CALL 135 0 0
// UpdateFactoryWaypoints ( ) ;
 122: CALL 15021 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 126: CALL 15273 0 0
// end ;
 130: LD_VAR 0 1
 134: RET
// function UpdateLuaVariables ( ) ; begin
 135: LD_INT 0
 137: PPUSH
// if globalGameSaveCounter then
 138: LD_EXP 1
 142: IFFALSE 176
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 144: LD_ADDR_EXP 1
 148: PUSH
 149: LD_EXP 1
 153: PPUSH
 154: CALL 55695 0 1
 158: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 159: LD_STRING setGameSaveCounter(
 161: PUSH
 162: LD_EXP 1
 166: STR
 167: PUSH
 168: LD_STRING )
 170: STR
 171: PPUSH
 172: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 176: LD_STRING setGameDifficulty(
 178: PUSH
 179: LD_OWVAR 67
 183: STR
 184: PUSH
 185: LD_STRING )
 187: STR
 188: PPUSH
 189: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 193: LD_STRING displayDifficulty(
 195: PUSH
 196: LD_OWVAR 67
 200: STR
 201: PUSH
 202: LD_STRING )
 204: STR
 205: PPUSH
 206: CALL_OW 559
// end ;
 210: LD_VAR 0 1
 214: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 215: LD_INT 0
 217: PPUSH
// if p2 = stream_mode then
 218: LD_VAR 0 2
 222: PUSH
 223: LD_INT 100
 225: EQUAL
 226: IFFALSE 1229
// begin if not StreamModeActive then
 228: LD_EXP 2
 232: NOT
 233: IFFALSE 243
// StreamModeActive := true ;
 235: LD_ADDR_EXP 2
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// if p3 = 0 then
 243: LD_VAR 0 3
 247: PUSH
 248: LD_INT 0
 250: EQUAL
 251: IFFALSE 257
// InitStreamMode ;
 253: CALL 1435 0 0
// if p3 = 1 then
 257: LD_VAR 0 3
 261: PUSH
 262: LD_INT 1
 264: EQUAL
 265: IFFALSE 275
// sRocket := true ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: LD_INT 1
 274: ST_TO_ADDR
// if p3 = 2 then
 275: LD_VAR 0 3
 279: PUSH
 280: LD_INT 2
 282: EQUAL
 283: IFFALSE 293
// sSpeed := true ;
 285: LD_ADDR_EXP 6
 289: PUSH
 290: LD_INT 1
 292: ST_TO_ADDR
// if p3 = 3 then
 293: LD_VAR 0 3
 297: PUSH
 298: LD_INT 3
 300: EQUAL
 301: IFFALSE 311
// sEngine := true ;
 303: LD_ADDR_EXP 8
 307: PUSH
 308: LD_INT 1
 310: ST_TO_ADDR
// if p3 = 4 then
 311: LD_VAR 0 3
 315: PUSH
 316: LD_INT 4
 318: EQUAL
 319: IFFALSE 329
// sSpec := true ;
 321: LD_ADDR_EXP 5
 325: PUSH
 326: LD_INT 1
 328: ST_TO_ADDR
// if p3 = 5 then
 329: LD_VAR 0 3
 333: PUSH
 334: LD_INT 5
 336: EQUAL
 337: IFFALSE 347
// sLevel := true ;
 339: LD_ADDR_EXP 9
 343: PUSH
 344: LD_INT 1
 346: ST_TO_ADDR
// if p3 = 6 then
 347: LD_VAR 0 3
 351: PUSH
 352: LD_INT 6
 354: EQUAL
 355: IFFALSE 365
// sArmoury := true ;
 357: LD_ADDR_EXP 10
 361: PUSH
 362: LD_INT 1
 364: ST_TO_ADDR
// if p3 = 7 then
 365: LD_VAR 0 3
 369: PUSH
 370: LD_INT 7
 372: EQUAL
 373: IFFALSE 383
// sRadar := true ;
 375: LD_ADDR_EXP 11
 379: PUSH
 380: LD_INT 1
 382: ST_TO_ADDR
// if p3 = 8 then
 383: LD_VAR 0 3
 387: PUSH
 388: LD_INT 8
 390: EQUAL
 391: IFFALSE 401
// sBunker := true ;
 393: LD_ADDR_EXP 12
 397: PUSH
 398: LD_INT 1
 400: ST_TO_ADDR
// if p3 = 9 then
 401: LD_VAR 0 3
 405: PUSH
 406: LD_INT 9
 408: EQUAL
 409: IFFALSE 419
// sHack := true ;
 411: LD_ADDR_EXP 13
 415: PUSH
 416: LD_INT 1
 418: ST_TO_ADDR
// if p3 = 10 then
 419: LD_VAR 0 3
 423: PUSH
 424: LD_INT 10
 426: EQUAL
 427: IFFALSE 437
// sFire := true ;
 429: LD_ADDR_EXP 14
 433: PUSH
 434: LD_INT 1
 436: ST_TO_ADDR
// if p3 = 11 then
 437: LD_VAR 0 3
 441: PUSH
 442: LD_INT 11
 444: EQUAL
 445: IFFALSE 455
// sRefresh := true ;
 447: LD_ADDR_EXP 15
 451: PUSH
 452: LD_INT 1
 454: ST_TO_ADDR
// if p3 = 12 then
 455: LD_VAR 0 3
 459: PUSH
 460: LD_INT 12
 462: EQUAL
 463: IFFALSE 473
// sExp := true ;
 465: LD_ADDR_EXP 16
 469: PUSH
 470: LD_INT 1
 472: ST_TO_ADDR
// if p3 = 13 then
 473: LD_VAR 0 3
 477: PUSH
 478: LD_INT 13
 480: EQUAL
 481: IFFALSE 491
// sDepot := true ;
 483: LD_ADDR_EXP 17
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// if p3 = 14 then
 491: LD_VAR 0 3
 495: PUSH
 496: LD_INT 14
 498: EQUAL
 499: IFFALSE 509
// sFlag := true ;
 501: LD_ADDR_EXP 18
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// if p3 = 15 then
 509: LD_VAR 0 3
 513: PUSH
 514: LD_INT 15
 516: EQUAL
 517: IFFALSE 527
// sKamikadze := true ;
 519: LD_ADDR_EXP 26
 523: PUSH
 524: LD_INT 1
 526: ST_TO_ADDR
// if p3 = 16 then
 527: LD_VAR 0 3
 531: PUSH
 532: LD_INT 16
 534: EQUAL
 535: IFFALSE 545
// sTroll := true ;
 537: LD_ADDR_EXP 27
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// if p3 = 17 then
 545: LD_VAR 0 3
 549: PUSH
 550: LD_INT 17
 552: EQUAL
 553: IFFALSE 563
// sSlow := true ;
 555: LD_ADDR_EXP 28
 559: PUSH
 560: LD_INT 1
 562: ST_TO_ADDR
// if p3 = 18 then
 563: LD_VAR 0 3
 567: PUSH
 568: LD_INT 18
 570: EQUAL
 571: IFFALSE 581
// sLack := true ;
 573: LD_ADDR_EXP 29
 577: PUSH
 578: LD_INT 1
 580: ST_TO_ADDR
// if p3 = 19 then
 581: LD_VAR 0 3
 585: PUSH
 586: LD_INT 19
 588: EQUAL
 589: IFFALSE 599
// sTank := true ;
 591: LD_ADDR_EXP 31
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// if p3 = 20 then
 599: LD_VAR 0 3
 603: PUSH
 604: LD_INT 20
 606: EQUAL
 607: IFFALSE 617
// sRemote := true ;
 609: LD_ADDR_EXP 32
 613: PUSH
 614: LD_INT 1
 616: ST_TO_ADDR
// if p3 = 21 then
 617: LD_VAR 0 3
 621: PUSH
 622: LD_INT 21
 624: EQUAL
 625: IFFALSE 635
// sPowell := true ;
 627: LD_ADDR_EXP 33
 631: PUSH
 632: LD_INT 1
 634: ST_TO_ADDR
// if p3 = 22 then
 635: LD_VAR 0 3
 639: PUSH
 640: LD_INT 22
 642: EQUAL
 643: IFFALSE 653
// sTeleport := true ;
 645: LD_ADDR_EXP 36
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// if p3 = 23 then
 653: LD_VAR 0 3
 657: PUSH
 658: LD_INT 23
 660: EQUAL
 661: IFFALSE 671
// sOilTower := true ;
 663: LD_ADDR_EXP 38
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// if p3 = 24 then
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 24
 678: EQUAL
 679: IFFALSE 689
// sShovel := true ;
 681: LD_ADDR_EXP 39
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// if p3 = 25 then
 689: LD_VAR 0 3
 693: PUSH
 694: LD_INT 25
 696: EQUAL
 697: IFFALSE 707
// sSheik := true ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_INT 1
 706: ST_TO_ADDR
// if p3 = 26 then
 707: LD_VAR 0 3
 711: PUSH
 712: LD_INT 26
 714: EQUAL
 715: IFFALSE 725
// sEarthquake := true ;
 717: LD_ADDR_EXP 42
 721: PUSH
 722: LD_INT 1
 724: ST_TO_ADDR
// if p3 = 27 then
 725: LD_VAR 0 3
 729: PUSH
 730: LD_INT 27
 732: EQUAL
 733: IFFALSE 743
// sAI := true ;
 735: LD_ADDR_EXP 43
 739: PUSH
 740: LD_INT 1
 742: ST_TO_ADDR
// if p3 = 28 then
 743: LD_VAR 0 3
 747: PUSH
 748: LD_INT 28
 750: EQUAL
 751: IFFALSE 761
// sCargo := true ;
 753: LD_ADDR_EXP 46
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// if p3 = 29 then
 761: LD_VAR 0 3
 765: PUSH
 766: LD_INT 29
 768: EQUAL
 769: IFFALSE 779
// sDLaser := true ;
 771: LD_ADDR_EXP 47
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// if p3 = 30 then
 779: LD_VAR 0 3
 783: PUSH
 784: LD_INT 30
 786: EQUAL
 787: IFFALSE 797
// sExchange := true ;
 789: LD_ADDR_EXP 48
 793: PUSH
 794: LD_INT 1
 796: ST_TO_ADDR
// if p3 = 31 then
 797: LD_VAR 0 3
 801: PUSH
 802: LD_INT 31
 804: EQUAL
 805: IFFALSE 815
// sFac := true ;
 807: LD_ADDR_EXP 49
 811: PUSH
 812: LD_INT 1
 814: ST_TO_ADDR
// if p3 = 32 then
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 32
 822: EQUAL
 823: IFFALSE 833
// sPower := true ;
 825: LD_ADDR_EXP 50
 829: PUSH
 830: LD_INT 1
 832: ST_TO_ADDR
// if p3 = 33 then
 833: LD_VAR 0 3
 837: PUSH
 838: LD_INT 33
 840: EQUAL
 841: IFFALSE 851
// sRandom := true ;
 843: LD_ADDR_EXP 51
 847: PUSH
 848: LD_INT 1
 850: ST_TO_ADDR
// if p3 = 34 then
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 34
 858: EQUAL
 859: IFFALSE 869
// sShield := true ;
 861: LD_ADDR_EXP 52
 865: PUSH
 866: LD_INT 1
 868: ST_TO_ADDR
// if p3 = 35 then
 869: LD_VAR 0 3
 873: PUSH
 874: LD_INT 35
 876: EQUAL
 877: IFFALSE 887
// sTime := true ;
 879: LD_ADDR_EXP 53
 883: PUSH
 884: LD_INT 1
 886: ST_TO_ADDR
// if p3 = 36 then
 887: LD_VAR 0 3
 891: PUSH
 892: LD_INT 36
 894: EQUAL
 895: IFFALSE 905
// sTools := true ;
 897: LD_ADDR_EXP 54
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
// if p3 = 101 then
 905: LD_VAR 0 3
 909: PUSH
 910: LD_INT 101
 912: EQUAL
 913: IFFALSE 923
// sSold := true ;
 915: LD_ADDR_EXP 19
 919: PUSH
 920: LD_INT 1
 922: ST_TO_ADDR
// if p3 = 102 then
 923: LD_VAR 0 3
 927: PUSH
 928: LD_INT 102
 930: EQUAL
 931: IFFALSE 941
// sDiff := true ;
 933: LD_ADDR_EXP 20
 937: PUSH
 938: LD_INT 1
 940: ST_TO_ADDR
// if p3 = 103 then
 941: LD_VAR 0 3
 945: PUSH
 946: LD_INT 103
 948: EQUAL
 949: IFFALSE 959
// sFog := true ;
 951: LD_ADDR_EXP 23
 955: PUSH
 956: LD_INT 1
 958: ST_TO_ADDR
// if p3 = 104 then
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 104
 966: EQUAL
 967: IFFALSE 977
// sReset := true ;
 969: LD_ADDR_EXP 24
 973: PUSH
 974: LD_INT 1
 976: ST_TO_ADDR
// if p3 = 105 then
 977: LD_VAR 0 3
 981: PUSH
 982: LD_INT 105
 984: EQUAL
 985: IFFALSE 995
// sSun := true ;
 987: LD_ADDR_EXP 25
 991: PUSH
 992: LD_INT 1
 994: ST_TO_ADDR
// if p3 = 106 then
 995: LD_VAR 0 3
 999: PUSH
1000: LD_INT 106
1002: EQUAL
1003: IFFALSE 1013
// sTiger := true ;
1005: LD_ADDR_EXP 21
1009: PUSH
1010: LD_INT 1
1012: ST_TO_ADDR
// if p3 = 107 then
1013: LD_VAR 0 3
1017: PUSH
1018: LD_INT 107
1020: EQUAL
1021: IFFALSE 1031
// sBomb := true ;
1023: LD_ADDR_EXP 22
1027: PUSH
1028: LD_INT 1
1030: ST_TO_ADDR
// if p3 = 108 then
1031: LD_VAR 0 3
1035: PUSH
1036: LD_INT 108
1038: EQUAL
1039: IFFALSE 1049
// sWound := true ;
1041: LD_ADDR_EXP 30
1045: PUSH
1046: LD_INT 1
1048: ST_TO_ADDR
// if p3 = 109 then
1049: LD_VAR 0 3
1053: PUSH
1054: LD_INT 109
1056: EQUAL
1057: IFFALSE 1067
// sBetray := true ;
1059: LD_ADDR_EXP 34
1063: PUSH
1064: LD_INT 1
1066: ST_TO_ADDR
// if p3 = 110 then
1067: LD_VAR 0 3
1071: PUSH
1072: LD_INT 110
1074: EQUAL
1075: IFFALSE 1085
// sContamin := true ;
1077: LD_ADDR_EXP 35
1081: PUSH
1082: LD_INT 1
1084: ST_TO_ADDR
// if p3 = 111 then
1085: LD_VAR 0 3
1089: PUSH
1090: LD_INT 111
1092: EQUAL
1093: IFFALSE 1103
// sOil := true ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_INT 1
1102: ST_TO_ADDR
// if p3 = 112 then
1103: LD_VAR 0 3
1107: PUSH
1108: LD_INT 112
1110: EQUAL
1111: IFFALSE 1121
// sStu := true ;
1113: LD_ADDR_EXP 41
1117: PUSH
1118: LD_INT 1
1120: ST_TO_ADDR
// if p3 = 113 then
1121: LD_VAR 0 3
1125: PUSH
1126: LD_INT 113
1128: EQUAL
1129: IFFALSE 1139
// sBazooka := true ;
1131: LD_ADDR_EXP 44
1135: PUSH
1136: LD_INT 1
1138: ST_TO_ADDR
// if p3 = 114 then
1139: LD_VAR 0 3
1143: PUSH
1144: LD_INT 114
1146: EQUAL
1147: IFFALSE 1157
// sMortar := true ;
1149: LD_ADDR_EXP 45
1153: PUSH
1154: LD_INT 1
1156: ST_TO_ADDR
// if p3 = 115 then
1157: LD_VAR 0 3
1161: PUSH
1162: LD_INT 115
1164: EQUAL
1165: IFFALSE 1175
// sRanger := true ;
1167: LD_ADDR_EXP 55
1171: PUSH
1172: LD_INT 1
1174: ST_TO_ADDR
// if p3 = 116 then
1175: LD_VAR 0 3
1179: PUSH
1180: LD_INT 116
1182: EQUAL
1183: IFFALSE 1193
// sComputer := true ;
1185: LD_ADDR_EXP 56
1189: PUSH
1190: LD_INT 1
1192: ST_TO_ADDR
// if p3 = 117 then
1193: LD_VAR 0 3
1197: PUSH
1198: LD_INT 117
1200: EQUAL
1201: IFFALSE 1211
// s30 := true ;
1203: LD_ADDR_EXP 57
1207: PUSH
1208: LD_INT 1
1210: ST_TO_ADDR
// if p3 = 118 then
1211: LD_VAR 0 3
1215: PUSH
1216: LD_INT 118
1218: EQUAL
1219: IFFALSE 1229
// s60 := true ;
1221: LD_ADDR_EXP 58
1225: PUSH
1226: LD_INT 1
1228: ST_TO_ADDR
// end ; if p2 = hack_mode then
1229: LD_VAR 0 2
1233: PUSH
1234: LD_INT 101
1236: EQUAL
1237: IFFALSE 1365
// begin case p3 of 1 :
1239: LD_VAR 0 3
1243: PUSH
1244: LD_INT 1
1246: DOUBLE
1247: EQUAL
1248: IFTRUE 1252
1250: GO 1259
1252: POP
// hHackUnlimitedResources ; 2 :
1253: CALL 13628 0 0
1257: GO 1365
1259: LD_INT 2
1261: DOUBLE
1262: EQUAL
1263: IFTRUE 1267
1265: GO 1274
1267: POP
// hHackSetLevel10 ; 3 :
1268: CALL 13761 0 0
1272: GO 1365
1274: LD_INT 3
1276: DOUBLE
1277: EQUAL
1278: IFTRUE 1282
1280: GO 1289
1282: POP
// hHackSetLevel10YourUnits ; 4 :
1283: CALL 13846 0 0
1287: GO 1365
1289: LD_INT 4
1291: DOUBLE
1292: EQUAL
1293: IFTRUE 1297
1295: GO 1304
1297: POP
// hHackInvincible ; 5 :
1298: CALL 14294 0 0
1302: GO 1365
1304: LD_INT 5
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1319
1312: POP
// hHackInvisible ; 6 :
1313: CALL 14405 0 0
1317: GO 1365
1319: LD_INT 6
1321: DOUBLE
1322: EQUAL
1323: IFTRUE 1327
1325: GO 1334
1327: POP
// hHackChangeYourSide ; 7 :
1328: CALL 14462 0 0
1332: GO 1365
1334: LD_INT 7
1336: DOUBLE
1337: EQUAL
1338: IFTRUE 1342
1340: GO 1349
1342: POP
// hHackChangeUnitSide ; 8 :
1343: CALL 14504 0 0
1347: GO 1365
1349: LD_INT 8
1351: DOUBLE
1352: EQUAL
1353: IFTRUE 1357
1355: GO 1364
1357: POP
// hHackFog ; end ;
1358: CALL 14605 0 0
1362: GO 1365
1364: POP
// end ; if p2 = game_save_mode then
1365: LD_VAR 0 2
1369: PUSH
1370: LD_INT 102
1372: EQUAL
1373: IFFALSE 1430
// begin if p3 = 1 then
1375: LD_VAR 0 3
1379: PUSH
1380: LD_INT 1
1382: EQUAL
1383: IFFALSE 1395
// globalGameSaveCounter := p4 ;
1385: LD_ADDR_EXP 1
1389: PUSH
1390: LD_VAR 0 4
1394: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1395: LD_VAR 0 3
1399: PUSH
1400: LD_INT 2
1402: EQUAL
1403: IFFALSE 1411
1405: PUSH
1406: LD_EXP 1
1410: AND
1411: IFFALSE 1430
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1413: LD_STRING setGameSaveCounter(
1415: PUSH
1416: LD_EXP 1
1420: STR
1421: PUSH
1422: LD_STRING )
1424: STR
1425: PPUSH
1426: CALL_OW 559
// end ; end ;
1430: LD_VAR 0 7
1434: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1435: LD_INT 0
1437: PPUSH
// streamModeActive := false ;
1438: LD_ADDR_EXP 2
1442: PUSH
1443: LD_INT 0
1445: ST_TO_ADDR
// normalCounter := 36 ;
1446: LD_ADDR_EXP 3
1450: PUSH
1451: LD_INT 36
1453: ST_TO_ADDR
// hardcoreCounter := 18 ;
1454: LD_ADDR_EXP 4
1458: PUSH
1459: LD_INT 18
1461: ST_TO_ADDR
// sRocket := false ;
1462: LD_ADDR_EXP 7
1466: PUSH
1467: LD_INT 0
1469: ST_TO_ADDR
// sSpeed := false ;
1470: LD_ADDR_EXP 6
1474: PUSH
1475: LD_INT 0
1477: ST_TO_ADDR
// sEngine := false ;
1478: LD_ADDR_EXP 8
1482: PUSH
1483: LD_INT 0
1485: ST_TO_ADDR
// sSpec := false ;
1486: LD_ADDR_EXP 5
1490: PUSH
1491: LD_INT 0
1493: ST_TO_ADDR
// sLevel := false ;
1494: LD_ADDR_EXP 9
1498: PUSH
1499: LD_INT 0
1501: ST_TO_ADDR
// sArmoury := false ;
1502: LD_ADDR_EXP 10
1506: PUSH
1507: LD_INT 0
1509: ST_TO_ADDR
// sRadar := false ;
1510: LD_ADDR_EXP 11
1514: PUSH
1515: LD_INT 0
1517: ST_TO_ADDR
// sBunker := false ;
1518: LD_ADDR_EXP 12
1522: PUSH
1523: LD_INT 0
1525: ST_TO_ADDR
// sHack := false ;
1526: LD_ADDR_EXP 13
1530: PUSH
1531: LD_INT 0
1533: ST_TO_ADDR
// sFire := false ;
1534: LD_ADDR_EXP 14
1538: PUSH
1539: LD_INT 0
1541: ST_TO_ADDR
// sRefresh := false ;
1542: LD_ADDR_EXP 15
1546: PUSH
1547: LD_INT 0
1549: ST_TO_ADDR
// sExp := false ;
1550: LD_ADDR_EXP 16
1554: PUSH
1555: LD_INT 0
1557: ST_TO_ADDR
// sDepot := false ;
1558: LD_ADDR_EXP 17
1562: PUSH
1563: LD_INT 0
1565: ST_TO_ADDR
// sFlag := false ;
1566: LD_ADDR_EXP 18
1570: PUSH
1571: LD_INT 0
1573: ST_TO_ADDR
// sKamikadze := false ;
1574: LD_ADDR_EXP 26
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// sTroll := false ;
1582: LD_ADDR_EXP 27
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// sSlow := false ;
1590: LD_ADDR_EXP 28
1594: PUSH
1595: LD_INT 0
1597: ST_TO_ADDR
// sLack := false ;
1598: LD_ADDR_EXP 29
1602: PUSH
1603: LD_INT 0
1605: ST_TO_ADDR
// sTank := false ;
1606: LD_ADDR_EXP 31
1610: PUSH
1611: LD_INT 0
1613: ST_TO_ADDR
// sRemote := false ;
1614: LD_ADDR_EXP 32
1618: PUSH
1619: LD_INT 0
1621: ST_TO_ADDR
// sPowell := false ;
1622: LD_ADDR_EXP 33
1626: PUSH
1627: LD_INT 0
1629: ST_TO_ADDR
// sTeleport := false ;
1630: LD_ADDR_EXP 36
1634: PUSH
1635: LD_INT 0
1637: ST_TO_ADDR
// sOilTower := false ;
1638: LD_ADDR_EXP 38
1642: PUSH
1643: LD_INT 0
1645: ST_TO_ADDR
// sShovel := false ;
1646: LD_ADDR_EXP 39
1650: PUSH
1651: LD_INT 0
1653: ST_TO_ADDR
// sSheik := false ;
1654: LD_ADDR_EXP 40
1658: PUSH
1659: LD_INT 0
1661: ST_TO_ADDR
// sEarthquake := false ;
1662: LD_ADDR_EXP 42
1666: PUSH
1667: LD_INT 0
1669: ST_TO_ADDR
// sAI := false ;
1670: LD_ADDR_EXP 43
1674: PUSH
1675: LD_INT 0
1677: ST_TO_ADDR
// sCargo := false ;
1678: LD_ADDR_EXP 46
1682: PUSH
1683: LD_INT 0
1685: ST_TO_ADDR
// sDLaser := false ;
1686: LD_ADDR_EXP 47
1690: PUSH
1691: LD_INT 0
1693: ST_TO_ADDR
// sExchange := false ;
1694: LD_ADDR_EXP 48
1698: PUSH
1699: LD_INT 0
1701: ST_TO_ADDR
// sFac := false ;
1702: LD_ADDR_EXP 49
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// sPower := false ;
1710: LD_ADDR_EXP 50
1714: PUSH
1715: LD_INT 0
1717: ST_TO_ADDR
// sRandom := false ;
1718: LD_ADDR_EXP 51
1722: PUSH
1723: LD_INT 0
1725: ST_TO_ADDR
// sShield := false ;
1726: LD_ADDR_EXP 52
1730: PUSH
1731: LD_INT 0
1733: ST_TO_ADDR
// sTime := false ;
1734: LD_ADDR_EXP 53
1738: PUSH
1739: LD_INT 0
1741: ST_TO_ADDR
// sTools := false ;
1742: LD_ADDR_EXP 54
1746: PUSH
1747: LD_INT 0
1749: ST_TO_ADDR
// sSold := false ;
1750: LD_ADDR_EXP 19
1754: PUSH
1755: LD_INT 0
1757: ST_TO_ADDR
// sDiff := false ;
1758: LD_ADDR_EXP 20
1762: PUSH
1763: LD_INT 0
1765: ST_TO_ADDR
// sFog := false ;
1766: LD_ADDR_EXP 23
1770: PUSH
1771: LD_INT 0
1773: ST_TO_ADDR
// sReset := false ;
1774: LD_ADDR_EXP 24
1778: PUSH
1779: LD_INT 0
1781: ST_TO_ADDR
// sSun := false ;
1782: LD_ADDR_EXP 25
1786: PUSH
1787: LD_INT 0
1789: ST_TO_ADDR
// sTiger := false ;
1790: LD_ADDR_EXP 21
1794: PUSH
1795: LD_INT 0
1797: ST_TO_ADDR
// sBomb := false ;
1798: LD_ADDR_EXP 22
1802: PUSH
1803: LD_INT 0
1805: ST_TO_ADDR
// sWound := false ;
1806: LD_ADDR_EXP 30
1810: PUSH
1811: LD_INT 0
1813: ST_TO_ADDR
// sBetray := false ;
1814: LD_ADDR_EXP 34
1818: PUSH
1819: LD_INT 0
1821: ST_TO_ADDR
// sContamin := false ;
1822: LD_ADDR_EXP 35
1826: PUSH
1827: LD_INT 0
1829: ST_TO_ADDR
// sOil := false ;
1830: LD_ADDR_EXP 37
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// sStu := false ;
1838: LD_ADDR_EXP 41
1842: PUSH
1843: LD_INT 0
1845: ST_TO_ADDR
// sBazooka := false ;
1846: LD_ADDR_EXP 44
1850: PUSH
1851: LD_INT 0
1853: ST_TO_ADDR
// sMortar := false ;
1854: LD_ADDR_EXP 45
1858: PUSH
1859: LD_INT 0
1861: ST_TO_ADDR
// sRanger := false ;
1862: LD_ADDR_EXP 55
1866: PUSH
1867: LD_INT 0
1869: ST_TO_ADDR
// sComputer := false ;
1870: LD_ADDR_EXP 56
1874: PUSH
1875: LD_INT 0
1877: ST_TO_ADDR
// s30 := false ;
1878: LD_ADDR_EXP 57
1882: PUSH
1883: LD_INT 0
1885: ST_TO_ADDR
// s60 := false ;
1886: LD_ADDR_EXP 58
1890: PUSH
1891: LD_INT 0
1893: ST_TO_ADDR
// end ;
1894: LD_VAR 0 1
1898: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1899: LD_INT 0
1901: PPUSH
1902: PPUSH
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
1907: PPUSH
// result := [ ] ;
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: EMPTY
1914: ST_TO_ADDR
// if campaign_id = 1 then
1915: LD_OWVAR 69
1919: PUSH
1920: LD_INT 1
1922: EQUAL
1923: IFFALSE 5089
// begin case mission_number of 1 :
1925: LD_OWVAR 70
1929: PUSH
1930: LD_INT 1
1932: DOUBLE
1933: EQUAL
1934: IFTRUE 1938
1936: GO 2014
1938: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1939: LD_ADDR_VAR 0 2
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: LD_INT 11
1952: PUSH
1953: LD_INT 12
1955: PUSH
1956: LD_INT 15
1958: PUSH
1959: LD_INT 16
1961: PUSH
1962: LD_INT 22
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: LD_INT 26
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 101
1984: PUSH
1985: LD_INT 102
1987: PUSH
1988: LD_INT 106
1990: PUSH
1991: LD_INT 116
1993: PUSH
1994: LD_INT 117
1996: PUSH
1997: LD_INT 118
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: ST_TO_ADDR
2012: GO 5087
2014: LD_INT 2
2016: DOUBLE
2017: EQUAL
2018: IFTRUE 2022
2020: GO 2106
2022: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2023: LD_ADDR_VAR 0 2
2027: PUSH
2028: LD_INT 2
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 11
2036: PUSH
2037: LD_INT 12
2039: PUSH
2040: LD_INT 15
2042: PUSH
2043: LD_INT 16
2045: PUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 23
2051: PUSH
2052: LD_INT 26
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 101
2068: PUSH
2069: LD_INT 102
2071: PUSH
2072: LD_INT 105
2074: PUSH
2075: LD_INT 106
2077: PUSH
2078: LD_INT 108
2080: PUSH
2081: LD_INT 116
2083: PUSH
2084: LD_INT 117
2086: PUSH
2087: LD_INT 118
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: ST_TO_ADDR
2104: GO 5087
2106: LD_INT 3
2108: DOUBLE
2109: EQUAL
2110: IFTRUE 2114
2112: GO 2202
2114: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2115: LD_ADDR_VAR 0 2
2119: PUSH
2120: LD_INT 2
2122: PUSH
2123: LD_INT 4
2125: PUSH
2126: LD_INT 5
2128: PUSH
2129: LD_INT 11
2131: PUSH
2132: LD_INT 12
2134: PUSH
2135: LD_INT 15
2137: PUSH
2138: LD_INT 16
2140: PUSH
2141: LD_INT 22
2143: PUSH
2144: LD_INT 26
2146: PUSH
2147: LD_INT 36
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 101
2164: PUSH
2165: LD_INT 102
2167: PUSH
2168: LD_INT 105
2170: PUSH
2171: LD_INT 106
2173: PUSH
2174: LD_INT 108
2176: PUSH
2177: LD_INT 116
2179: PUSH
2180: LD_INT 117
2182: PUSH
2183: LD_INT 118
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: ST_TO_ADDR
2200: GO 5087
2202: LD_INT 4
2204: DOUBLE
2205: EQUAL
2206: IFTRUE 2210
2208: GO 2306
2210: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2211: LD_ADDR_VAR 0 2
2215: PUSH
2216: LD_INT 2
2218: PUSH
2219: LD_INT 4
2221: PUSH
2222: LD_INT 5
2224: PUSH
2225: LD_INT 8
2227: PUSH
2228: LD_INT 11
2230: PUSH
2231: LD_INT 12
2233: PUSH
2234: LD_INT 15
2236: PUSH
2237: LD_INT 16
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 23
2245: PUSH
2246: LD_INT 26
2248: PUSH
2249: LD_INT 36
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 101
2268: PUSH
2269: LD_INT 102
2271: PUSH
2272: LD_INT 105
2274: PUSH
2275: LD_INT 106
2277: PUSH
2278: LD_INT 108
2280: PUSH
2281: LD_INT 116
2283: PUSH
2284: LD_INT 117
2286: PUSH
2287: LD_INT 118
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: ST_TO_ADDR
2304: GO 5087
2306: LD_INT 5
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2426
2314: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_INT 2
2322: PUSH
2323: LD_INT 4
2325: PUSH
2326: LD_INT 5
2328: PUSH
2329: LD_INT 6
2331: PUSH
2332: LD_INT 8
2334: PUSH
2335: LD_INT 11
2337: PUSH
2338: LD_INT 12
2340: PUSH
2341: LD_INT 15
2343: PUSH
2344: LD_INT 16
2346: PUSH
2347: LD_INT 22
2349: PUSH
2350: LD_INT 23
2352: PUSH
2353: LD_INT 25
2355: PUSH
2356: LD_INT 26
2358: PUSH
2359: LD_INT 36
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 101
2380: PUSH
2381: LD_INT 102
2383: PUSH
2384: LD_INT 105
2386: PUSH
2387: LD_INT 106
2389: PUSH
2390: LD_INT 108
2392: PUSH
2393: LD_INT 109
2395: PUSH
2396: LD_INT 112
2398: PUSH
2399: LD_INT 116
2401: PUSH
2402: LD_INT 117
2404: PUSH
2405: LD_INT 118
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: LIST
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: ST_TO_ADDR
2424: GO 5087
2426: LD_INT 6
2428: DOUBLE
2429: EQUAL
2430: IFTRUE 2434
2432: GO 2566
2434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2435: LD_ADDR_VAR 0 2
2439: PUSH
2440: LD_INT 2
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: LD_INT 5
2448: PUSH
2449: LD_INT 6
2451: PUSH
2452: LD_INT 8
2454: PUSH
2455: LD_INT 11
2457: PUSH
2458: LD_INT 12
2460: PUSH
2461: LD_INT 15
2463: PUSH
2464: LD_INT 16
2466: PUSH
2467: LD_INT 20
2469: PUSH
2470: LD_INT 21
2472: PUSH
2473: LD_INT 22
2475: PUSH
2476: LD_INT 23
2478: PUSH
2479: LD_INT 25
2481: PUSH
2482: LD_INT 26
2484: PUSH
2485: LD_INT 30
2487: PUSH
2488: LD_INT 31
2490: PUSH
2491: LD_INT 32
2493: PUSH
2494: LD_INT 36
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 101
2520: PUSH
2521: LD_INT 102
2523: PUSH
2524: LD_INT 105
2526: PUSH
2527: LD_INT 106
2529: PUSH
2530: LD_INT 108
2532: PUSH
2533: LD_INT 109
2535: PUSH
2536: LD_INT 112
2538: PUSH
2539: LD_INT 116
2541: PUSH
2542: LD_INT 117
2544: PUSH
2545: LD_INT 118
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: ST_TO_ADDR
2564: GO 5087
2566: LD_INT 7
2568: DOUBLE
2569: EQUAL
2570: IFTRUE 2574
2572: GO 2686
2574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2575: LD_ADDR_VAR 0 2
2579: PUSH
2580: LD_INT 2
2582: PUSH
2583: LD_INT 4
2585: PUSH
2586: LD_INT 5
2588: PUSH
2589: LD_INT 7
2591: PUSH
2592: LD_INT 11
2594: PUSH
2595: LD_INT 12
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: LD_INT 16
2603: PUSH
2604: LD_INT 20
2606: PUSH
2607: LD_INT 21
2609: PUSH
2610: LD_INT 22
2612: PUSH
2613: LD_INT 23
2615: PUSH
2616: LD_INT 25
2618: PUSH
2619: LD_INT 26
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 101
2640: PUSH
2641: LD_INT 102
2643: PUSH
2644: LD_INT 103
2646: PUSH
2647: LD_INT 105
2649: PUSH
2650: LD_INT 106
2652: PUSH
2653: LD_INT 108
2655: PUSH
2656: LD_INT 112
2658: PUSH
2659: LD_INT 116
2661: PUSH
2662: LD_INT 117
2664: PUSH
2665: LD_INT 118
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: ST_TO_ADDR
2684: GO 5087
2686: LD_INT 8
2688: DOUBLE
2689: EQUAL
2690: IFTRUE 2694
2692: GO 2834
2694: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 2
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: LD_INT 5
2708: PUSH
2709: LD_INT 6
2711: PUSH
2712: LD_INT 7
2714: PUSH
2715: LD_INT 8
2717: PUSH
2718: LD_INT 11
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: LD_INT 15
2726: PUSH
2727: LD_INT 16
2729: PUSH
2730: LD_INT 20
2732: PUSH
2733: LD_INT 21
2735: PUSH
2736: LD_INT 22
2738: PUSH
2739: LD_INT 23
2741: PUSH
2742: LD_INT 25
2744: PUSH
2745: LD_INT 26
2747: PUSH
2748: LD_INT 30
2750: PUSH
2751: LD_INT 31
2753: PUSH
2754: LD_INT 32
2756: PUSH
2757: LD_INT 36
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 101
2784: PUSH
2785: LD_INT 102
2787: PUSH
2788: LD_INT 103
2790: PUSH
2791: LD_INT 105
2793: PUSH
2794: LD_INT 106
2796: PUSH
2797: LD_INT 108
2799: PUSH
2800: LD_INT 109
2802: PUSH
2803: LD_INT 112
2805: PUSH
2806: LD_INT 116
2808: PUSH
2809: LD_INT 117
2811: PUSH
2812: LD_INT 118
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: ST_TO_ADDR
2832: GO 5087
2834: LD_INT 9
2836: DOUBLE
2837: EQUAL
2838: IFTRUE 2842
2840: GO 2990
2842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2843: LD_ADDR_VAR 0 2
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 6
2859: PUSH
2860: LD_INT 7
2862: PUSH
2863: LD_INT 8
2865: PUSH
2866: LD_INT 11
2868: PUSH
2869: LD_INT 12
2871: PUSH
2872: LD_INT 15
2874: PUSH
2875: LD_INT 16
2877: PUSH
2878: LD_INT 20
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 22
2886: PUSH
2887: LD_INT 23
2889: PUSH
2890: LD_INT 25
2892: PUSH
2893: LD_INT 26
2895: PUSH
2896: LD_INT 28
2898: PUSH
2899: LD_INT 30
2901: PUSH
2902: LD_INT 31
2904: PUSH
2905: LD_INT 32
2907: PUSH
2908: LD_INT 36
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 101
2936: PUSH
2937: LD_INT 102
2939: PUSH
2940: LD_INT 103
2942: PUSH
2943: LD_INT 105
2945: PUSH
2946: LD_INT 106
2948: PUSH
2949: LD_INT 108
2951: PUSH
2952: LD_INT 109
2954: PUSH
2955: LD_INT 112
2957: PUSH
2958: LD_INT 114
2960: PUSH
2961: LD_INT 116
2963: PUSH
2964: LD_INT 117
2966: PUSH
2967: LD_INT 118
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: ST_TO_ADDR
2988: GO 5087
2990: LD_INT 10
2992: DOUBLE
2993: EQUAL
2994: IFTRUE 2998
2996: GO 3194
2998: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2999: LD_ADDR_VAR 0 2
3003: PUSH
3004: LD_INT 2
3006: PUSH
3007: LD_INT 4
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: LD_INT 6
3015: PUSH
3016: LD_INT 7
3018: PUSH
3019: LD_INT 8
3021: PUSH
3022: LD_INT 9
3024: PUSH
3025: LD_INT 10
3027: PUSH
3028: LD_INT 11
3030: PUSH
3031: LD_INT 12
3033: PUSH
3034: LD_INT 13
3036: PUSH
3037: LD_INT 14
3039: PUSH
3040: LD_INT 15
3042: PUSH
3043: LD_INT 16
3045: PUSH
3046: LD_INT 17
3048: PUSH
3049: LD_INT 18
3051: PUSH
3052: LD_INT 19
3054: PUSH
3055: LD_INT 20
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 22
3063: PUSH
3064: LD_INT 23
3066: PUSH
3067: LD_INT 24
3069: PUSH
3070: LD_INT 25
3072: PUSH
3073: LD_INT 26
3075: PUSH
3076: LD_INT 28
3078: PUSH
3079: LD_INT 30
3081: PUSH
3082: LD_INT 31
3084: PUSH
3085: LD_INT 32
3087: PUSH
3088: LD_INT 36
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 101
3124: PUSH
3125: LD_INT 102
3127: PUSH
3128: LD_INT 103
3130: PUSH
3131: LD_INT 104
3133: PUSH
3134: LD_INT 105
3136: PUSH
3137: LD_INT 106
3139: PUSH
3140: LD_INT 107
3142: PUSH
3143: LD_INT 108
3145: PUSH
3146: LD_INT 109
3148: PUSH
3149: LD_INT 110
3151: PUSH
3152: LD_INT 111
3154: PUSH
3155: LD_INT 112
3157: PUSH
3158: LD_INT 114
3160: PUSH
3161: LD_INT 116
3163: PUSH
3164: LD_INT 117
3166: PUSH
3167: LD_INT 118
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: ST_TO_ADDR
3192: GO 5087
3194: LD_INT 11
3196: DOUBLE
3197: EQUAL
3198: IFTRUE 3202
3200: GO 3406
3202: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: LD_INT 3
3213: PUSH
3214: LD_INT 4
3216: PUSH
3217: LD_INT 5
3219: PUSH
3220: LD_INT 6
3222: PUSH
3223: LD_INT 7
3225: PUSH
3226: LD_INT 8
3228: PUSH
3229: LD_INT 9
3231: PUSH
3232: LD_INT 10
3234: PUSH
3235: LD_INT 11
3237: PUSH
3238: LD_INT 12
3240: PUSH
3241: LD_INT 13
3243: PUSH
3244: LD_INT 14
3246: PUSH
3247: LD_INT 15
3249: PUSH
3250: LD_INT 16
3252: PUSH
3253: LD_INT 17
3255: PUSH
3256: LD_INT 18
3258: PUSH
3259: LD_INT 19
3261: PUSH
3262: LD_INT 20
3264: PUSH
3265: LD_INT 21
3267: PUSH
3268: LD_INT 22
3270: PUSH
3271: LD_INT 23
3273: PUSH
3274: LD_INT 24
3276: PUSH
3277: LD_INT 25
3279: PUSH
3280: LD_INT 26
3282: PUSH
3283: LD_INT 28
3285: PUSH
3286: LD_INT 30
3288: PUSH
3289: LD_INT 31
3291: PUSH
3292: LD_INT 32
3294: PUSH
3295: LD_INT 34
3297: PUSH
3298: LD_INT 36
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 101
3336: PUSH
3337: LD_INT 102
3339: PUSH
3340: LD_INT 103
3342: PUSH
3343: LD_INT 104
3345: PUSH
3346: LD_INT 105
3348: PUSH
3349: LD_INT 106
3351: PUSH
3352: LD_INT 107
3354: PUSH
3355: LD_INT 108
3357: PUSH
3358: LD_INT 109
3360: PUSH
3361: LD_INT 110
3363: PUSH
3364: LD_INT 111
3366: PUSH
3367: LD_INT 112
3369: PUSH
3370: LD_INT 114
3372: PUSH
3373: LD_INT 116
3375: PUSH
3376: LD_INT 117
3378: PUSH
3379: LD_INT 118
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: ST_TO_ADDR
3404: GO 5087
3406: LD_INT 12
3408: DOUBLE
3409: EQUAL
3410: IFTRUE 3414
3412: GO 3634
3414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3415: LD_ADDR_VAR 0 2
3419: PUSH
3420: LD_INT 1
3422: PUSH
3423: LD_INT 2
3425: PUSH
3426: LD_INT 3
3428: PUSH
3429: LD_INT 4
3431: PUSH
3432: LD_INT 5
3434: PUSH
3435: LD_INT 6
3437: PUSH
3438: LD_INT 7
3440: PUSH
3441: LD_INT 8
3443: PUSH
3444: LD_INT 9
3446: PUSH
3447: LD_INT 10
3449: PUSH
3450: LD_INT 11
3452: PUSH
3453: LD_INT 12
3455: PUSH
3456: LD_INT 13
3458: PUSH
3459: LD_INT 14
3461: PUSH
3462: LD_INT 15
3464: PUSH
3465: LD_INT 16
3467: PUSH
3468: LD_INT 17
3470: PUSH
3471: LD_INT 18
3473: PUSH
3474: LD_INT 19
3476: PUSH
3477: LD_INT 20
3479: PUSH
3480: LD_INT 21
3482: PUSH
3483: LD_INT 22
3485: PUSH
3486: LD_INT 23
3488: PUSH
3489: LD_INT 24
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 26
3497: PUSH
3498: LD_INT 27
3500: PUSH
3501: LD_INT 28
3503: PUSH
3504: LD_INT 30
3506: PUSH
3507: LD_INT 31
3509: PUSH
3510: LD_INT 32
3512: PUSH
3513: LD_INT 33
3515: PUSH
3516: LD_INT 34
3518: PUSH
3519: LD_INT 36
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: PUSH
3558: LD_INT 101
3560: PUSH
3561: LD_INT 102
3563: PUSH
3564: LD_INT 103
3566: PUSH
3567: LD_INT 104
3569: PUSH
3570: LD_INT 105
3572: PUSH
3573: LD_INT 106
3575: PUSH
3576: LD_INT 107
3578: PUSH
3579: LD_INT 108
3581: PUSH
3582: LD_INT 109
3584: PUSH
3585: LD_INT 110
3587: PUSH
3588: LD_INT 111
3590: PUSH
3591: LD_INT 112
3593: PUSH
3594: LD_INT 113
3596: PUSH
3597: LD_INT 114
3599: PUSH
3600: LD_INT 116
3602: PUSH
3603: LD_INT 117
3605: PUSH
3606: LD_INT 118
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: ST_TO_ADDR
3632: GO 5087
3634: LD_INT 13
3636: DOUBLE
3637: EQUAL
3638: IFTRUE 3642
3640: GO 3850
3642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3643: LD_ADDR_VAR 0 2
3647: PUSH
3648: LD_INT 1
3650: PUSH
3651: LD_INT 2
3653: PUSH
3654: LD_INT 3
3656: PUSH
3657: LD_INT 4
3659: PUSH
3660: LD_INT 5
3662: PUSH
3663: LD_INT 8
3665: PUSH
3666: LD_INT 9
3668: PUSH
3669: LD_INT 10
3671: PUSH
3672: LD_INT 11
3674: PUSH
3675: LD_INT 12
3677: PUSH
3678: LD_INT 14
3680: PUSH
3681: LD_INT 15
3683: PUSH
3684: LD_INT 16
3686: PUSH
3687: LD_INT 17
3689: PUSH
3690: LD_INT 18
3692: PUSH
3693: LD_INT 19
3695: PUSH
3696: LD_INT 20
3698: PUSH
3699: LD_INT 21
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 23
3707: PUSH
3708: LD_INT 24
3710: PUSH
3711: LD_INT 25
3713: PUSH
3714: LD_INT 26
3716: PUSH
3717: LD_INT 27
3719: PUSH
3720: LD_INT 28
3722: PUSH
3723: LD_INT 30
3725: PUSH
3726: LD_INT 31
3728: PUSH
3729: LD_INT 32
3731: PUSH
3732: LD_INT 33
3734: PUSH
3735: LD_INT 34
3737: PUSH
3738: LD_INT 36
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 101
3776: PUSH
3777: LD_INT 102
3779: PUSH
3780: LD_INT 103
3782: PUSH
3783: LD_INT 104
3785: PUSH
3786: LD_INT 105
3788: PUSH
3789: LD_INT 106
3791: PUSH
3792: LD_INT 107
3794: PUSH
3795: LD_INT 108
3797: PUSH
3798: LD_INT 109
3800: PUSH
3801: LD_INT 110
3803: PUSH
3804: LD_INT 111
3806: PUSH
3807: LD_INT 112
3809: PUSH
3810: LD_INT 113
3812: PUSH
3813: LD_INT 114
3815: PUSH
3816: LD_INT 116
3818: PUSH
3819: LD_INT 117
3821: PUSH
3822: LD_INT 118
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: ST_TO_ADDR
3848: GO 5087
3850: LD_INT 14
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 4082
3858: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3859: LD_ADDR_VAR 0 2
3863: PUSH
3864: LD_INT 1
3866: PUSH
3867: LD_INT 2
3869: PUSH
3870: LD_INT 3
3872: PUSH
3873: LD_INT 4
3875: PUSH
3876: LD_INT 5
3878: PUSH
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 9
3890: PUSH
3891: LD_INT 10
3893: PUSH
3894: LD_INT 11
3896: PUSH
3897: LD_INT 12
3899: PUSH
3900: LD_INT 13
3902: PUSH
3903: LD_INT 14
3905: PUSH
3906: LD_INT 15
3908: PUSH
3909: LD_INT 16
3911: PUSH
3912: LD_INT 17
3914: PUSH
3915: LD_INT 18
3917: PUSH
3918: LD_INT 19
3920: PUSH
3921: LD_INT 20
3923: PUSH
3924: LD_INT 21
3926: PUSH
3927: LD_INT 22
3929: PUSH
3930: LD_INT 23
3932: PUSH
3933: LD_INT 24
3935: PUSH
3936: LD_INT 25
3938: PUSH
3939: LD_INT 26
3941: PUSH
3942: LD_INT 27
3944: PUSH
3945: LD_INT 28
3947: PUSH
3948: LD_INT 29
3950: PUSH
3951: LD_INT 30
3953: PUSH
3954: LD_INT 31
3956: PUSH
3957: LD_INT 32
3959: PUSH
3960: LD_INT 33
3962: PUSH
3963: LD_INT 34
3965: PUSH
3966: LD_INT 36
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 101
4008: PUSH
4009: LD_INT 102
4011: PUSH
4012: LD_INT 103
4014: PUSH
4015: LD_INT 104
4017: PUSH
4018: LD_INT 105
4020: PUSH
4021: LD_INT 106
4023: PUSH
4024: LD_INT 107
4026: PUSH
4027: LD_INT 108
4029: PUSH
4030: LD_INT 109
4032: PUSH
4033: LD_INT 110
4035: PUSH
4036: LD_INT 111
4038: PUSH
4039: LD_INT 112
4041: PUSH
4042: LD_INT 113
4044: PUSH
4045: LD_INT 114
4047: PUSH
4048: LD_INT 116
4050: PUSH
4051: LD_INT 117
4053: PUSH
4054: LD_INT 118
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: ST_TO_ADDR
4080: GO 5087
4082: LD_INT 15
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4314
4090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4091: LD_ADDR_VAR 0 2
4095: PUSH
4096: LD_INT 1
4098: PUSH
4099: LD_INT 2
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 4
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 6
4113: PUSH
4114: LD_INT 7
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 9
4122: PUSH
4123: LD_INT 10
4125: PUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 12
4131: PUSH
4132: LD_INT 13
4134: PUSH
4135: LD_INT 14
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: LD_INT 16
4143: PUSH
4144: LD_INT 17
4146: PUSH
4147: LD_INT 18
4149: PUSH
4150: LD_INT 19
4152: PUSH
4153: LD_INT 20
4155: PUSH
4156: LD_INT 21
4158: PUSH
4159: LD_INT 22
4161: PUSH
4162: LD_INT 23
4164: PUSH
4165: LD_INT 24
4167: PUSH
4168: LD_INT 25
4170: PUSH
4171: LD_INT 26
4173: PUSH
4174: LD_INT 27
4176: PUSH
4177: LD_INT 28
4179: PUSH
4180: LD_INT 29
4182: PUSH
4183: LD_INT 30
4185: PUSH
4186: LD_INT 31
4188: PUSH
4189: LD_INT 32
4191: PUSH
4192: LD_INT 33
4194: PUSH
4195: LD_INT 34
4197: PUSH
4198: LD_INT 36
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 101
4240: PUSH
4241: LD_INT 102
4243: PUSH
4244: LD_INT 103
4246: PUSH
4247: LD_INT 104
4249: PUSH
4250: LD_INT 105
4252: PUSH
4253: LD_INT 106
4255: PUSH
4256: LD_INT 107
4258: PUSH
4259: LD_INT 108
4261: PUSH
4262: LD_INT 109
4264: PUSH
4265: LD_INT 110
4267: PUSH
4268: LD_INT 111
4270: PUSH
4271: LD_INT 112
4273: PUSH
4274: LD_INT 113
4276: PUSH
4277: LD_INT 114
4279: PUSH
4280: LD_INT 116
4282: PUSH
4283: LD_INT 117
4285: PUSH
4286: LD_INT 118
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: ST_TO_ADDR
4312: GO 5087
4314: LD_INT 16
4316: DOUBLE
4317: EQUAL
4318: IFTRUE 4322
4320: GO 4458
4322: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4323: LD_ADDR_VAR 0 2
4327: PUSH
4328: LD_INT 2
4330: PUSH
4331: LD_INT 4
4333: PUSH
4334: LD_INT 5
4336: PUSH
4337: LD_INT 7
4339: PUSH
4340: LD_INT 11
4342: PUSH
4343: LD_INT 12
4345: PUSH
4346: LD_INT 15
4348: PUSH
4349: LD_INT 16
4351: PUSH
4352: LD_INT 20
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 22
4360: PUSH
4361: LD_INT 23
4363: PUSH
4364: LD_INT 25
4366: PUSH
4367: LD_INT 26
4369: PUSH
4370: LD_INT 30
4372: PUSH
4373: LD_INT 31
4375: PUSH
4376: LD_INT 32
4378: PUSH
4379: LD_INT 33
4381: PUSH
4382: LD_INT 34
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 101
4408: PUSH
4409: LD_INT 102
4411: PUSH
4412: LD_INT 103
4414: PUSH
4415: LD_INT 106
4417: PUSH
4418: LD_INT 108
4420: PUSH
4421: LD_INT 112
4423: PUSH
4424: LD_INT 113
4426: PUSH
4427: LD_INT 114
4429: PUSH
4430: LD_INT 116
4432: PUSH
4433: LD_INT 117
4435: PUSH
4436: LD_INT 118
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: ST_TO_ADDR
4456: GO 5087
4458: LD_INT 17
4460: DOUBLE
4461: EQUAL
4462: IFTRUE 4466
4464: GO 4690
4466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: LD_INT 1
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: LD_INT 3
4480: PUSH
4481: LD_INT 4
4483: PUSH
4484: LD_INT 5
4486: PUSH
4487: LD_INT 6
4489: PUSH
4490: LD_INT 7
4492: PUSH
4493: LD_INT 8
4495: PUSH
4496: LD_INT 9
4498: PUSH
4499: LD_INT 10
4501: PUSH
4502: LD_INT 11
4504: PUSH
4505: LD_INT 12
4507: PUSH
4508: LD_INT 13
4510: PUSH
4511: LD_INT 14
4513: PUSH
4514: LD_INT 15
4516: PUSH
4517: LD_INT 16
4519: PUSH
4520: LD_INT 17
4522: PUSH
4523: LD_INT 18
4525: PUSH
4526: LD_INT 19
4528: PUSH
4529: LD_INT 20
4531: PUSH
4532: LD_INT 21
4534: PUSH
4535: LD_INT 22
4537: PUSH
4538: LD_INT 23
4540: PUSH
4541: LD_INT 24
4543: PUSH
4544: LD_INT 25
4546: PUSH
4547: LD_INT 26
4549: PUSH
4550: LD_INT 27
4552: PUSH
4553: LD_INT 28
4555: PUSH
4556: LD_INT 29
4558: PUSH
4559: LD_INT 30
4561: PUSH
4562: LD_INT 31
4564: PUSH
4565: LD_INT 32
4567: PUSH
4568: LD_INT 33
4570: PUSH
4571: LD_INT 34
4573: PUSH
4574: LD_INT 36
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: PUSH
4614: LD_INT 101
4616: PUSH
4617: LD_INT 102
4619: PUSH
4620: LD_INT 103
4622: PUSH
4623: LD_INT 104
4625: PUSH
4626: LD_INT 105
4628: PUSH
4629: LD_INT 106
4631: PUSH
4632: LD_INT 107
4634: PUSH
4635: LD_INT 108
4637: PUSH
4638: LD_INT 109
4640: PUSH
4641: LD_INT 110
4643: PUSH
4644: LD_INT 111
4646: PUSH
4647: LD_INT 112
4649: PUSH
4650: LD_INT 113
4652: PUSH
4653: LD_INT 114
4655: PUSH
4656: LD_INT 116
4658: PUSH
4659: LD_INT 117
4661: PUSH
4662: LD_INT 118
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: ST_TO_ADDR
4688: GO 5087
4690: LD_INT 18
4692: DOUBLE
4693: EQUAL
4694: IFTRUE 4698
4696: GO 4846
4698: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4699: LD_ADDR_VAR 0 2
4703: PUSH
4704: LD_INT 2
4706: PUSH
4707: LD_INT 4
4709: PUSH
4710: LD_INT 5
4712: PUSH
4713: LD_INT 7
4715: PUSH
4716: LD_INT 11
4718: PUSH
4719: LD_INT 12
4721: PUSH
4722: LD_INT 15
4724: PUSH
4725: LD_INT 16
4727: PUSH
4728: LD_INT 20
4730: PUSH
4731: LD_INT 21
4733: PUSH
4734: LD_INT 22
4736: PUSH
4737: LD_INT 23
4739: PUSH
4740: LD_INT 25
4742: PUSH
4743: LD_INT 26
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 31
4751: PUSH
4752: LD_INT 32
4754: PUSH
4755: LD_INT 33
4757: PUSH
4758: LD_INT 34
4760: PUSH
4761: LD_INT 35
4763: PUSH
4764: LD_INT 36
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 101
4792: PUSH
4793: LD_INT 102
4795: PUSH
4796: LD_INT 103
4798: PUSH
4799: LD_INT 106
4801: PUSH
4802: LD_INT 108
4804: PUSH
4805: LD_INT 112
4807: PUSH
4808: LD_INT 113
4810: PUSH
4811: LD_INT 114
4813: PUSH
4814: LD_INT 115
4816: PUSH
4817: LD_INT 116
4819: PUSH
4820: LD_INT 117
4822: PUSH
4823: LD_INT 118
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: ST_TO_ADDR
4844: GO 5087
4846: LD_INT 19
4848: DOUBLE
4849: EQUAL
4850: IFTRUE 4854
4852: GO 5086
4854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: LD_INT 1
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: LD_INT 3
4868: PUSH
4869: LD_INT 4
4871: PUSH
4872: LD_INT 5
4874: PUSH
4875: LD_INT 6
4877: PUSH
4878: LD_INT 7
4880: PUSH
4881: LD_INT 8
4883: PUSH
4884: LD_INT 9
4886: PUSH
4887: LD_INT 10
4889: PUSH
4890: LD_INT 11
4892: PUSH
4893: LD_INT 12
4895: PUSH
4896: LD_INT 13
4898: PUSH
4899: LD_INT 14
4901: PUSH
4902: LD_INT 15
4904: PUSH
4905: LD_INT 16
4907: PUSH
4908: LD_INT 17
4910: PUSH
4911: LD_INT 18
4913: PUSH
4914: LD_INT 19
4916: PUSH
4917: LD_INT 20
4919: PUSH
4920: LD_INT 21
4922: PUSH
4923: LD_INT 22
4925: PUSH
4926: LD_INT 23
4928: PUSH
4929: LD_INT 24
4931: PUSH
4932: LD_INT 25
4934: PUSH
4935: LD_INT 26
4937: PUSH
4938: LD_INT 27
4940: PUSH
4941: LD_INT 28
4943: PUSH
4944: LD_INT 29
4946: PUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 31
4952: PUSH
4953: LD_INT 32
4955: PUSH
4956: LD_INT 33
4958: PUSH
4959: LD_INT 34
4961: PUSH
4962: LD_INT 35
4964: PUSH
4965: LD_INT 36
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: LD_INT 101
5008: PUSH
5009: LD_INT 102
5011: PUSH
5012: LD_INT 103
5014: PUSH
5015: LD_INT 104
5017: PUSH
5018: LD_INT 105
5020: PUSH
5021: LD_INT 106
5023: PUSH
5024: LD_INT 107
5026: PUSH
5027: LD_INT 108
5029: PUSH
5030: LD_INT 109
5032: PUSH
5033: LD_INT 110
5035: PUSH
5036: LD_INT 111
5038: PUSH
5039: LD_INT 112
5041: PUSH
5042: LD_INT 113
5044: PUSH
5045: LD_INT 114
5047: PUSH
5048: LD_INT 115
5050: PUSH
5051: LD_INT 116
5053: PUSH
5054: LD_INT 117
5056: PUSH
5057: LD_INT 118
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: ST_TO_ADDR
5084: GO 5087
5086: POP
// end else
5087: GO 5318
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5089: LD_ADDR_VAR 0 2
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: LD_INT 2
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 4
5105: PUSH
5106: LD_INT 5
5108: PUSH
5109: LD_INT 6
5111: PUSH
5112: LD_INT 7
5114: PUSH
5115: LD_INT 8
5117: PUSH
5118: LD_INT 9
5120: PUSH
5121: LD_INT 10
5123: PUSH
5124: LD_INT 11
5126: PUSH
5127: LD_INT 12
5129: PUSH
5130: LD_INT 13
5132: PUSH
5133: LD_INT 14
5135: PUSH
5136: LD_INT 15
5138: PUSH
5139: LD_INT 16
5141: PUSH
5142: LD_INT 17
5144: PUSH
5145: LD_INT 18
5147: PUSH
5148: LD_INT 19
5150: PUSH
5151: LD_INT 20
5153: PUSH
5154: LD_INT 21
5156: PUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 23
5162: PUSH
5163: LD_INT 24
5165: PUSH
5166: LD_INT 25
5168: PUSH
5169: LD_INT 26
5171: PUSH
5172: LD_INT 27
5174: PUSH
5175: LD_INT 28
5177: PUSH
5178: LD_INT 29
5180: PUSH
5181: LD_INT 30
5183: PUSH
5184: LD_INT 31
5186: PUSH
5187: LD_INT 32
5189: PUSH
5190: LD_INT 33
5192: PUSH
5193: LD_INT 34
5195: PUSH
5196: LD_INT 35
5198: PUSH
5199: LD_INT 36
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 101
5242: PUSH
5243: LD_INT 102
5245: PUSH
5246: LD_INT 103
5248: PUSH
5249: LD_INT 104
5251: PUSH
5252: LD_INT 105
5254: PUSH
5255: LD_INT 106
5257: PUSH
5258: LD_INT 107
5260: PUSH
5261: LD_INT 108
5263: PUSH
5264: LD_INT 109
5266: PUSH
5267: LD_INT 110
5269: PUSH
5270: LD_INT 111
5272: PUSH
5273: LD_INT 112
5275: PUSH
5276: LD_INT 113
5278: PUSH
5279: LD_INT 114
5281: PUSH
5282: LD_INT 115
5284: PUSH
5285: LD_INT 116
5287: PUSH
5288: LD_INT 117
5290: PUSH
5291: LD_INT 118
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: ST_TO_ADDR
// if result then
5318: LD_VAR 0 2
5322: IFFALSE 6108
// begin normal :=  ;
5324: LD_ADDR_VAR 0 5
5328: PUSH
5329: LD_STRING 
5331: ST_TO_ADDR
// hardcore :=  ;
5332: LD_ADDR_VAR 0 6
5336: PUSH
5337: LD_STRING 
5339: ST_TO_ADDR
// active :=  ;
5340: LD_ADDR_VAR 0 7
5344: PUSH
5345: LD_STRING 
5347: ST_TO_ADDR
// for i = 1 to normalCounter do
5348: LD_ADDR_VAR 0 8
5352: PUSH
5353: DOUBLE
5354: LD_INT 1
5356: DEC
5357: ST_TO_ADDR
5358: LD_EXP 3
5362: PUSH
5363: FOR_TO
5364: IFFALSE 5465
// begin tmp := 0 ;
5366: LD_ADDR_VAR 0 3
5370: PUSH
5371: LD_STRING 0
5373: ST_TO_ADDR
// if result [ 1 ] then
5374: LD_VAR 0 2
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: IFFALSE 5447
// if result [ 1 ] [ 1 ] = i then
5384: LD_VAR 0 2
5388: PUSH
5389: LD_INT 1
5391: ARRAY
5392: PUSH
5393: LD_INT 1
5395: ARRAY
5396: PUSH
5397: LD_VAR 0 8
5401: EQUAL
5402: IFFALSE 5447
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5404: LD_ADDR_VAR 0 2
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: LD_VAR 0 2
5421: PUSH
5422: LD_INT 1
5424: ARRAY
5425: PPUSH
5426: LD_INT 1
5428: PPUSH
5429: CALL_OW 3
5433: PPUSH
5434: CALL_OW 1
5438: ST_TO_ADDR
// tmp := 1 ;
5439: LD_ADDR_VAR 0 3
5443: PUSH
5444: LD_STRING 1
5446: ST_TO_ADDR
// end ; normal := normal & tmp ;
5447: LD_ADDR_VAR 0 5
5451: PUSH
5452: LD_VAR 0 5
5456: PUSH
5457: LD_VAR 0 3
5461: STR
5462: ST_TO_ADDR
// end ;
5463: GO 5363
5465: POP
5466: POP
// for i = 1 to hardcoreCounter do
5467: LD_ADDR_VAR 0 8
5471: PUSH
5472: DOUBLE
5473: LD_INT 1
5475: DEC
5476: ST_TO_ADDR
5477: LD_EXP 4
5481: PUSH
5482: FOR_TO
5483: IFFALSE 5588
// begin tmp := 0 ;
5485: LD_ADDR_VAR 0 3
5489: PUSH
5490: LD_STRING 0
5492: ST_TO_ADDR
// if result [ 2 ] then
5493: LD_VAR 0 2
5497: PUSH
5498: LD_INT 2
5500: ARRAY
5501: IFFALSE 5570
// if result [ 2 ] [ 1 ] = 100 + i then
5503: LD_VAR 0 2
5507: PUSH
5508: LD_INT 2
5510: ARRAY
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PUSH
5516: LD_INT 100
5518: PUSH
5519: LD_VAR 0 8
5523: PLUS
5524: EQUAL
5525: IFFALSE 5570
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5527: LD_ADDR_VAR 0 2
5531: PUSH
5532: LD_VAR 0 2
5536: PPUSH
5537: LD_INT 2
5539: PPUSH
5540: LD_VAR 0 2
5544: PUSH
5545: LD_INT 2
5547: ARRAY
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 3
5556: PPUSH
5557: CALL_OW 1
5561: ST_TO_ADDR
// tmp := 1 ;
5562: LD_ADDR_VAR 0 3
5566: PUSH
5567: LD_STRING 1
5569: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5570: LD_ADDR_VAR 0 6
5574: PUSH
5575: LD_VAR 0 6
5579: PUSH
5580: LD_VAR 0 3
5584: STR
5585: ST_TO_ADDR
// end ;
5586: GO 5482
5588: POP
5589: POP
// if isGameLoad then
5590: LD_VAR 0 1
5594: IFFALSE 6069
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5596: LD_ADDR_VAR 0 4
5600: PUSH
5601: LD_EXP 7
5605: PUSH
5606: LD_EXP 6
5610: PUSH
5611: LD_EXP 8
5615: PUSH
5616: LD_EXP 5
5620: PUSH
5621: LD_EXP 9
5625: PUSH
5626: LD_EXP 10
5630: PUSH
5631: LD_EXP 11
5635: PUSH
5636: LD_EXP 12
5640: PUSH
5641: LD_EXP 13
5645: PUSH
5646: LD_EXP 14
5650: PUSH
5651: LD_EXP 15
5655: PUSH
5656: LD_EXP 16
5660: PUSH
5661: LD_EXP 17
5665: PUSH
5666: LD_EXP 18
5670: PUSH
5671: LD_EXP 26
5675: PUSH
5676: LD_EXP 27
5680: PUSH
5681: LD_EXP 28
5685: PUSH
5686: LD_EXP 29
5690: PUSH
5691: LD_EXP 31
5695: PUSH
5696: LD_EXP 32
5700: PUSH
5701: LD_EXP 33
5705: PUSH
5706: LD_EXP 36
5710: PUSH
5711: LD_EXP 38
5715: PUSH
5716: LD_EXP 39
5720: PUSH
5721: LD_EXP 40
5725: PUSH
5726: LD_EXP 42
5730: PUSH
5731: LD_EXP 43
5735: PUSH
5736: LD_EXP 46
5740: PUSH
5741: LD_EXP 47
5745: PUSH
5746: LD_EXP 48
5750: PUSH
5751: LD_EXP 49
5755: PUSH
5756: LD_EXP 50
5760: PUSH
5761: LD_EXP 51
5765: PUSH
5766: LD_EXP 52
5770: PUSH
5771: LD_EXP 53
5775: PUSH
5776: LD_EXP 54
5780: PUSH
5781: LD_EXP 19
5785: PUSH
5786: LD_EXP 20
5790: PUSH
5791: LD_EXP 23
5795: PUSH
5796: LD_EXP 24
5800: PUSH
5801: LD_EXP 25
5805: PUSH
5806: LD_EXP 21
5810: PUSH
5811: LD_EXP 22
5815: PUSH
5816: LD_EXP 30
5820: PUSH
5821: LD_EXP 34
5825: PUSH
5826: LD_EXP 35
5830: PUSH
5831: LD_EXP 37
5835: PUSH
5836: LD_EXP 41
5840: PUSH
5841: LD_EXP 44
5845: PUSH
5846: LD_EXP 45
5850: PUSH
5851: LD_EXP 55
5855: PUSH
5856: LD_EXP 56
5860: PUSH
5861: LD_EXP 57
5865: PUSH
5866: LD_EXP 58
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: ST_TO_ADDR
// tmp :=  ;
5927: LD_ADDR_VAR 0 3
5931: PUSH
5932: LD_STRING 
5934: ST_TO_ADDR
// for i = 1 to normalCounter do
5935: LD_ADDR_VAR 0 8
5939: PUSH
5940: DOUBLE
5941: LD_INT 1
5943: DEC
5944: ST_TO_ADDR
5945: LD_EXP 3
5949: PUSH
5950: FOR_TO
5951: IFFALSE 5987
// begin if flags [ i ] then
5953: LD_VAR 0 4
5957: PUSH
5958: LD_VAR 0 8
5962: ARRAY
5963: IFFALSE 5985
// tmp := tmp & i & ; ;
5965: LD_ADDR_VAR 0 3
5969: PUSH
5970: LD_VAR 0 3
5974: PUSH
5975: LD_VAR 0 8
5979: STR
5980: PUSH
5981: LD_STRING ;
5983: STR
5984: ST_TO_ADDR
// end ;
5985: GO 5950
5987: POP
5988: POP
// for i = 1 to hardcoreCounter do
5989: LD_ADDR_VAR 0 8
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_EXP 4
6003: PUSH
6004: FOR_TO
6005: IFFALSE 6051
// begin if flags [ normalCounter + i ] then
6007: LD_VAR 0 4
6011: PUSH
6012: LD_EXP 3
6016: PUSH
6017: LD_VAR 0 8
6021: PLUS
6022: ARRAY
6023: IFFALSE 6049
// tmp := tmp & ( 100 + i ) & ; ;
6025: LD_ADDR_VAR 0 3
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_INT 100
6037: PUSH
6038: LD_VAR 0 8
6042: PLUS
6043: STR
6044: PUSH
6045: LD_STRING ;
6047: STR
6048: ST_TO_ADDR
// end ;
6049: GO 6004
6051: POP
6052: POP
// if tmp then
6053: LD_VAR 0 3
6057: IFFALSE 6069
// active := tmp ;
6059: LD_ADDR_VAR 0 7
6063: PUSH
6064: LD_VAR 0 3
6068: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6069: LD_STRING getStreamItemsFromMission("
6071: PUSH
6072: LD_VAR 0 5
6076: STR
6077: PUSH
6078: LD_STRING ","
6080: STR
6081: PUSH
6082: LD_VAR 0 6
6086: STR
6087: PUSH
6088: LD_STRING ","
6090: STR
6091: PUSH
6092: LD_VAR 0 7
6096: STR
6097: PUSH
6098: LD_STRING ")
6100: STR
6101: PPUSH
6102: CALL_OW 559
// end else
6106: GO 6115
// ToLua ( getStreamItemsFromMission("","","") ) ;
6108: LD_STRING getStreamItemsFromMission("","","")
6110: PPUSH
6111: CALL_OW 559
// end ;
6115: LD_VAR 0 2
6119: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6120: LD_EXP 2
6124: IFFALSE 6132
6126: PUSH
6127: LD_EXP 7
6131: AND
6132: IFFALSE 6256
6134: GO 6136
6136: DISABLE
6137: LD_INT 0
6139: PPUSH
6140: PPUSH
// begin enable ;
6141: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6142: LD_ADDR_VAR 0 2
6146: PUSH
6147: LD_INT 22
6149: PUSH
6150: LD_OWVAR 2
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 34
6164: PUSH
6165: LD_INT 7
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 34
6174: PUSH
6175: LD_INT 45
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 34
6184: PUSH
6185: LD_INT 28
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 34
6194: PUSH
6195: LD_INT 47
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 2
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6256
// for i in tmp do
6227: LD_ADDR_VAR 0 1
6231: PUSH
6232: LD_VAR 0 2
6236: PUSH
6237: FOR_IN
6238: IFFALSE 6254
// begin SetLives ( i , 0 ) ;
6240: LD_VAR 0 1
6244: PPUSH
6245: LD_INT 0
6247: PPUSH
6248: CALL_OW 234
// end ;
6252: GO 6237
6254: POP
6255: POP
// end ;
6256: PPOPN 2
6258: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6259: LD_EXP 2
6263: IFFALSE 6271
6265: PUSH
6266: LD_EXP 8
6270: AND
6271: IFFALSE 6355
6273: GO 6275
6275: DISABLE
6276: LD_INT 0
6278: PPUSH
6279: PPUSH
// begin enable ;
6280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6281: LD_ADDR_VAR 0 2
6285: PUSH
6286: LD_INT 22
6288: PUSH
6289: LD_OWVAR 2
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 32
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: ST_TO_ADDR
// if not tmp then
6317: LD_VAR 0 2
6321: NOT
6322: IFFALSE 6326
// exit ;
6324: GO 6355
// for i in tmp do
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_VAR 0 2
6335: PUSH
6336: FOR_IN
6337: IFFALSE 6353
// begin SetLives ( i , 0 ) ;
6339: LD_VAR 0 1
6343: PPUSH
6344: LD_INT 0
6346: PPUSH
6347: CALL_OW 234
// end ;
6351: GO 6336
6353: POP
6354: POP
// end ;
6355: PPOPN 2
6357: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6358: LD_EXP 2
6362: IFFALSE 6370
6364: PUSH
6365: LD_EXP 5
6369: AND
6370: IFFALSE 6463
6372: GO 6374
6374: DISABLE
6375: LD_INT 0
6377: PPUSH
// begin enable ;
6378: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: LD_INT 22
6386: PUSH
6387: LD_OWVAR 2
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 2
6398: PUSH
6399: LD_INT 25
6401: PUSH
6402: LD_INT 5
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 25
6411: PUSH
6412: LD_INT 9
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 25
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL_OW 69
6443: PUSH
6444: FOR_IN
6445: IFFALSE 6461
// begin SetClass ( i , 1 ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 1
6454: PPUSH
6455: CALL_OW 336
// end ;
6459: GO 6444
6461: POP
6462: POP
// end ;
6463: PPOPN 1
6465: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6466: LD_EXP 2
6470: IFFALSE 6478
6472: PUSH
6473: LD_EXP 6
6477: AND
6478: IFFALSE 6490
6480: PUSH
6481: LD_OWVAR 65
6485: PUSH
6486: LD_INT 7
6488: LESS
6489: AND
6490: IFFALSE 6504
6492: GO 6494
6494: DISABLE
// begin enable ;
6495: ENABLE
// game_speed := 7 ;
6496: LD_ADDR_OWVAR 65
6500: PUSH
6501: LD_INT 7
6503: ST_TO_ADDR
// end ;
6504: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6505: LD_EXP 2
6509: IFFALSE 6517
6511: PUSH
6512: LD_EXP 9
6516: AND
6517: IFFALSE 6719
6519: GO 6521
6521: DISABLE
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6527: LD_ADDR_VAR 0 3
6531: PUSH
6532: LD_INT 81
6534: PUSH
6535: LD_OWVAR 2
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 21
6546: PUSH
6547: LD_INT 1
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PPUSH
6558: CALL_OW 69
6562: ST_TO_ADDR
// if not tmp then
6563: LD_VAR 0 3
6567: NOT
6568: IFFALSE 6572
// exit ;
6570: GO 6719
// if tmp > 5 then
6572: LD_VAR 0 3
6576: PUSH
6577: LD_INT 5
6579: GREATER
6580: IFFALSE 6592
// k := 5 else
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: LD_INT 5
6589: ST_TO_ADDR
6590: GO 6602
// k := tmp ;
6592: LD_ADDR_VAR 0 2
6596: PUSH
6597: LD_VAR 0 3
6601: ST_TO_ADDR
// for i := 1 to k do
6602: LD_ADDR_VAR 0 1
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_VAR 0 2
6616: PUSH
6617: FOR_TO
6618: IFFALSE 6717
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6620: LD_VAR 0 3
6624: PUSH
6625: LD_VAR 0 1
6629: ARRAY
6630: PPUSH
6631: LD_VAR 0 1
6635: PUSH
6636: LD_INT 4
6638: MOD
6639: PUSH
6640: LD_INT 1
6642: PLUS
6643: PPUSH
6644: CALL_OW 259
6648: PUSH
6649: LD_INT 10
6651: LESS
6652: IFFALSE 6715
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6654: LD_VAR 0 3
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 1
6669: PUSH
6670: LD_INT 4
6672: MOD
6673: PUSH
6674: LD_INT 1
6676: PLUS
6677: PPUSH
6678: LD_VAR 0 3
6682: PUSH
6683: LD_VAR 0 1
6687: ARRAY
6688: PPUSH
6689: LD_VAR 0 1
6693: PUSH
6694: LD_INT 4
6696: MOD
6697: PUSH
6698: LD_INT 1
6700: PLUS
6701: PPUSH
6702: CALL_OW 259
6706: PUSH
6707: LD_INT 1
6709: PLUS
6710: PPUSH
6711: CALL_OW 237
6715: GO 6617
6717: POP
6718: POP
// end ;
6719: PPOPN 3
6721: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6722: LD_EXP 2
6726: IFFALSE 6734
6728: PUSH
6729: LD_EXP 10
6733: AND
6734: IFFALSE 6754
6736: GO 6738
6738: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6739: LD_INT 4
6741: PPUSH
6742: LD_OWVAR 2
6746: PPUSH
6747: LD_INT 0
6749: PPUSH
6750: CALL_OW 324
6754: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6755: LD_EXP 2
6759: IFFALSE 6767
6761: PUSH
6762: LD_EXP 39
6766: AND
6767: IFFALSE 6787
6769: GO 6771
6771: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6772: LD_INT 19
6774: PPUSH
6775: LD_OWVAR 2
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 324
6787: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6788: LD_EXP 2
6792: IFFALSE 6800
6794: PUSH
6795: LD_EXP 11
6799: AND
6800: IFFALSE 6902
6802: GO 6804
6804: DISABLE
6805: LD_INT 0
6807: PPUSH
6808: PPUSH
// begin enable ;
6809: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6810: LD_ADDR_VAR 0 2
6814: PUSH
6815: LD_INT 22
6817: PUSH
6818: LD_OWVAR 2
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 2
6829: PUSH
6830: LD_INT 34
6832: PUSH
6833: LD_INT 11
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 34
6842: PUSH
6843: LD_INT 30
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PPUSH
6859: CALL_OW 69
6863: ST_TO_ADDR
// if not tmp then
6864: LD_VAR 0 2
6868: NOT
6869: IFFALSE 6873
// exit ;
6871: GO 6902
// for i in tmp do
6873: LD_ADDR_VAR 0 1
6877: PUSH
6878: LD_VAR 0 2
6882: PUSH
6883: FOR_IN
6884: IFFALSE 6900
// begin SetLives ( i , 0 ) ;
6886: LD_VAR 0 1
6890: PPUSH
6891: LD_INT 0
6893: PPUSH
6894: CALL_OW 234
// end ;
6898: GO 6883
6900: POP
6901: POP
// end ;
6902: PPOPN 2
6904: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6905: LD_EXP 2
6909: IFFALSE 6917
6911: PUSH
6912: LD_EXP 12
6916: AND
6917: IFFALSE 6937
6919: GO 6921
6921: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6922: LD_INT 32
6924: PPUSH
6925: LD_OWVAR 2
6929: PPUSH
6930: LD_INT 0
6932: PPUSH
6933: CALL_OW 324
6937: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6938: LD_EXP 2
6942: IFFALSE 6950
6944: PUSH
6945: LD_EXP 13
6949: AND
6950: IFFALSE 7133
6952: GO 6954
6954: DISABLE
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6960: LD_ADDR_VAR 0 2
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_OWVAR 2
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 33
6979: PUSH
6980: LD_INT 3
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PPUSH
6991: CALL_OW 69
6995: ST_TO_ADDR
// if not tmp then
6996: LD_VAR 0 2
7000: NOT
7001: IFFALSE 7005
// exit ;
7003: GO 7133
// side := 0 ;
7005: LD_ADDR_VAR 0 3
7009: PUSH
7010: LD_INT 0
7012: ST_TO_ADDR
// for i := 1 to 8 do
7013: LD_ADDR_VAR 0 1
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_INT 8
7025: PUSH
7026: FOR_TO
7027: IFFALSE 7077
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7029: LD_OWVAR 2
7033: PUSH
7034: LD_VAR 0 1
7038: NONEQUAL
7039: IFFALSE 7061
7041: PUSH
7042: LD_OWVAR 2
7046: PPUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 81
7056: PUSH
7057: LD_INT 2
7059: EQUAL
7060: AND
7061: IFFALSE 7075
// begin side := i ;
7063: LD_ADDR_VAR 0 3
7067: PUSH
7068: LD_VAR 0 1
7072: ST_TO_ADDR
// break ;
7073: GO 7077
// end ;
7075: GO 7026
7077: POP
7078: POP
// if not side then
7079: LD_VAR 0 3
7083: NOT
7084: IFFALSE 7088
// exit ;
7086: GO 7133
// for i := 1 to tmp do
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: DOUBLE
7094: LD_INT 1
7096: DEC
7097: ST_TO_ADDR
7098: LD_VAR 0 2
7102: PUSH
7103: FOR_TO
7104: IFFALSE 7131
// if Prob ( 60 ) then
7106: LD_INT 60
7108: PPUSH
7109: CALL_OW 13
7113: IFFALSE 7129
// SetSide ( i , side ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_VAR 0 3
7124: PPUSH
7125: CALL_OW 235
7129: GO 7103
7131: POP
7132: POP
// end ;
7133: PPOPN 3
7135: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7136: LD_EXP 2
7140: IFFALSE 7148
7142: PUSH
7143: LD_EXP 15
7147: AND
7148: IFFALSE 7267
7150: GO 7152
7152: DISABLE
7153: LD_INT 0
7155: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7156: LD_ADDR_VAR 0 1
7160: PUSH
7161: LD_INT 22
7163: PUSH
7164: LD_OWVAR 2
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 21
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 23
7188: PUSH
7189: LD_INT 0
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PUSH
7210: FOR_IN
7211: IFFALSE 7265
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 257
7222: PUSH
7223: LD_INT 1
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: LD_INT 3
7231: PUSH
7232: LD_INT 4
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: IN
7241: IFFALSE 7263
// SetClass ( un , rand ( 1 , 4 ) ) ;
7243: LD_VAR 0 1
7247: PPUSH
7248: LD_INT 1
7250: PPUSH
7251: LD_INT 4
7253: PPUSH
7254: CALL_OW 12
7258: PPUSH
7259: CALL_OW 336
7263: GO 7210
7265: POP
7266: POP
// end ;
7267: PPOPN 1
7269: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7270: LD_EXP 2
7274: IFFALSE 7282
7276: PUSH
7277: LD_EXP 14
7281: AND
7282: IFFALSE 7361
7284: GO 7286
7286: DISABLE
7287: LD_INT 0
7289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7290: LD_ADDR_VAR 0 1
7294: PUSH
7295: LD_INT 22
7297: PUSH
7298: LD_OWVAR 2
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 21
7309: PUSH
7310: LD_INT 3
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 69
7325: ST_TO_ADDR
// if not tmp then
7326: LD_VAR 0 1
7330: NOT
7331: IFFALSE 7335
// exit ;
7333: GO 7361
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7335: LD_VAR 0 1
7339: PUSH
7340: LD_INT 1
7342: PPUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: CALL_OW 12
7352: ARRAY
7353: PPUSH
7354: LD_INT 100
7356: PPUSH
7357: CALL_OW 234
// end ;
7361: PPOPN 1
7363: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7364: LD_EXP 2
7368: IFFALSE 7376
7370: PUSH
7371: LD_EXP 16
7375: AND
7376: IFFALSE 7474
7378: GO 7380
7380: DISABLE
7381: LD_INT 0
7383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7384: LD_ADDR_VAR 0 1
7388: PUSH
7389: LD_INT 22
7391: PUSH
7392: LD_OWVAR 2
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 21
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 69
7419: ST_TO_ADDR
// if not tmp then
7420: LD_VAR 0 1
7424: NOT
7425: IFFALSE 7429
// exit ;
7427: GO 7474
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7429: LD_VAR 0 1
7433: PUSH
7434: LD_INT 1
7436: PPUSH
7437: LD_VAR 0 1
7441: PPUSH
7442: CALL_OW 12
7446: ARRAY
7447: PPUSH
7448: LD_INT 1
7450: PPUSH
7451: LD_INT 4
7453: PPUSH
7454: CALL_OW 12
7458: PPUSH
7459: LD_INT 3000
7461: PPUSH
7462: LD_INT 9000
7464: PPUSH
7465: CALL_OW 12
7469: PPUSH
7470: CALL_OW 492
// end ;
7474: PPOPN 1
7476: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7477: LD_EXP 2
7481: IFFALSE 7489
7483: PUSH
7484: LD_EXP 17
7488: AND
7489: IFFALSE 7509
7491: GO 7493
7493: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7494: LD_INT 1
7496: PPUSH
7497: LD_OWVAR 2
7501: PPUSH
7502: LD_INT 0
7504: PPUSH
7505: CALL_OW 324
7509: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7510: LD_EXP 2
7514: IFFALSE 7522
7516: PUSH
7517: LD_EXP 18
7521: AND
7522: IFFALSE 7605
7524: GO 7526
7526: DISABLE
7527: LD_INT 0
7529: PPUSH
7530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7531: LD_ADDR_VAR 0 2
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_OWVAR 2
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 21
7550: PUSH
7551: LD_INT 3
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: ST_TO_ADDR
// if not tmp then
7567: LD_VAR 0 2
7571: NOT
7572: IFFALSE 7576
// exit ;
7574: GO 7605
// for i in tmp do
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_VAR 0 2
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7603
// SetBLevel ( i , 10 ) ;
7589: LD_VAR 0 1
7593: PPUSH
7594: LD_INT 10
7596: PPUSH
7597: CALL_OW 241
7601: GO 7586
7603: POP
7604: POP
// end ;
7605: PPOPN 2
7607: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7608: LD_EXP 2
7612: IFFALSE 7620
7614: PUSH
7615: LD_EXP 19
7619: AND
7620: IFFALSE 7731
7622: GO 7624
7624: DISABLE
7625: LD_INT 0
7627: PPUSH
7628: PPUSH
7629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7630: LD_ADDR_VAR 0 3
7634: PUSH
7635: LD_INT 22
7637: PUSH
7638: LD_OWVAR 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 25
7649: PUSH
7650: LD_INT 1
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 69
7665: ST_TO_ADDR
// if not tmp then
7666: LD_VAR 0 3
7670: NOT
7671: IFFALSE 7675
// exit ;
7673: GO 7731
// un := tmp [ rand ( 1 , tmp ) ] ;
7675: LD_ADDR_VAR 0 2
7679: PUSH
7680: LD_VAR 0 3
7684: PUSH
7685: LD_INT 1
7687: PPUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: CALL_OW 12
7697: ARRAY
7698: ST_TO_ADDR
// if Crawls ( un ) then
7699: LD_VAR 0 2
7703: PPUSH
7704: CALL_OW 318
7708: IFFALSE 7719
// ComWalk ( un ) ;
7710: LD_VAR 0 2
7714: PPUSH
7715: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7719: LD_VAR 0 2
7723: PPUSH
7724: LD_INT 5
7726: PPUSH
7727: CALL_OW 336
// end ;
7731: PPOPN 3
7733: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7734: LD_EXP 2
7738: IFFALSE 7746
7740: PUSH
7741: LD_EXP 20
7745: AND
7746: IFFALSE 7758
7748: PUSH
7749: LD_OWVAR 67
7753: PUSH
7754: LD_INT 4
7756: LESS
7757: AND
7758: IFFALSE 7777
7760: GO 7762
7762: DISABLE
// begin Difficulty := Difficulty + 1 ;
7763: LD_ADDR_OWVAR 67
7767: PUSH
7768: LD_OWVAR 67
7772: PUSH
7773: LD_INT 1
7775: PLUS
7776: ST_TO_ADDR
// end ;
7777: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7778: LD_EXP 2
7782: IFFALSE 7790
7784: PUSH
7785: LD_EXP 21
7789: AND
7790: IFFALSE 7893
7792: GO 7794
7794: DISABLE
7795: LD_INT 0
7797: PPUSH
// begin for i := 1 to 5 do
7798: LD_ADDR_VAR 0 1
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_INT 5
7810: PUSH
7811: FOR_TO
7812: IFFALSE 7891
// begin uc_nation := nation_nature ;
7814: LD_ADDR_OWVAR 21
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// uc_side := 0 ;
7822: LD_ADDR_OWVAR 20
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7830: LD_ADDR_OWVAR 29
7834: PUSH
7835: LD_INT 12
7837: PUSH
7838: LD_INT 12
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: ST_TO_ADDR
// hc_agressivity := 20 ;
7845: LD_ADDR_OWVAR 35
7849: PUSH
7850: LD_INT 20
7852: ST_TO_ADDR
// hc_class := class_tiger ;
7853: LD_ADDR_OWVAR 28
7857: PUSH
7858: LD_INT 14
7860: ST_TO_ADDR
// hc_gallery :=  ;
7861: LD_ADDR_OWVAR 33
7865: PUSH
7866: LD_STRING 
7868: ST_TO_ADDR
// hc_name :=  ;
7869: LD_ADDR_OWVAR 26
7873: PUSH
7874: LD_STRING 
7876: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7877: CALL_OW 44
7881: PPUSH
7882: LD_INT 0
7884: PPUSH
7885: CALL_OW 51
// end ;
7889: GO 7811
7891: POP
7892: POP
// end ;
7893: PPOPN 1
7895: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7896: LD_EXP 2
7900: IFFALSE 7908
7902: PUSH
7903: LD_EXP 22
7907: AND
7908: IFFALSE 7917
7910: GO 7912
7912: DISABLE
// StreamSibBomb ;
7913: CALL 7918 0 0
7917: END
// export function StreamSibBomb ; var i , x , y ; begin
7918: LD_INT 0
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
// result := false ;
7924: LD_ADDR_VAR 0 1
7928: PUSH
7929: LD_INT 0
7931: ST_TO_ADDR
// for i := 1 to 16 do
7932: LD_ADDR_VAR 0 2
7936: PUSH
7937: DOUBLE
7938: LD_INT 1
7940: DEC
7941: ST_TO_ADDR
7942: LD_INT 16
7944: PUSH
7945: FOR_TO
7946: IFFALSE 8145
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7948: LD_ADDR_VAR 0 3
7952: PUSH
7953: LD_INT 10
7955: PUSH
7956: LD_INT 20
7958: PUSH
7959: LD_INT 30
7961: PUSH
7962: LD_INT 40
7964: PUSH
7965: LD_INT 50
7967: PUSH
7968: LD_INT 60
7970: PUSH
7971: LD_INT 70
7973: PUSH
7974: LD_INT 80
7976: PUSH
7977: LD_INT 90
7979: PUSH
7980: LD_INT 100
7982: PUSH
7983: LD_INT 110
7985: PUSH
7986: LD_INT 120
7988: PUSH
7989: LD_INT 130
7991: PUSH
7992: LD_INT 140
7994: PUSH
7995: LD_INT 150
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 1
8017: PPUSH
8018: LD_INT 15
8020: PPUSH
8021: CALL_OW 12
8025: ARRAY
8026: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8027: LD_ADDR_VAR 0 4
8031: PUSH
8032: LD_INT 10
8034: PUSH
8035: LD_INT 20
8037: PUSH
8038: LD_INT 30
8040: PUSH
8041: LD_INT 40
8043: PUSH
8044: LD_INT 50
8046: PUSH
8047: LD_INT 60
8049: PUSH
8050: LD_INT 70
8052: PUSH
8053: LD_INT 80
8055: PUSH
8056: LD_INT 90
8058: PUSH
8059: LD_INT 100
8061: PUSH
8062: LD_INT 110
8064: PUSH
8065: LD_INT 120
8067: PUSH
8068: LD_INT 130
8070: PUSH
8071: LD_INT 140
8073: PUSH
8074: LD_INT 150
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 1
8096: PPUSH
8097: LD_INT 15
8099: PPUSH
8100: CALL_OW 12
8104: ARRAY
8105: ST_TO_ADDR
// if ValidHex ( x , y ) then
8106: LD_VAR 0 3
8110: PPUSH
8111: LD_VAR 0 4
8115: PPUSH
8116: CALL_OW 488
8120: IFFALSE 8143
// begin result := [ x , y ] ;
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: LD_VAR 0 3
8131: PUSH
8132: LD_VAR 0 4
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: ST_TO_ADDR
// break ;
8141: GO 8145
// end ; end ;
8143: GO 7945
8145: POP
8146: POP
// if result then
8147: LD_VAR 0 1
8151: IFFALSE 8211
// begin ToLua ( playSibBomb() ) ;
8153: LD_STRING playSibBomb()
8155: PPUSH
8156: CALL_OW 559
// wait ( 0 0$14 ) ;
8160: LD_INT 490
8162: PPUSH
8163: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8167: LD_VAR 0 1
8171: PUSH
8172: LD_INT 1
8174: ARRAY
8175: PPUSH
8176: LD_VAR 0 1
8180: PUSH
8181: LD_INT 2
8183: ARRAY
8184: PPUSH
8185: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8189: LD_VAR 0 1
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_VAR 0 1
8202: PUSH
8203: LD_INT 2
8205: ARRAY
8206: PPUSH
8207: CALL_OW 429
// end ; end ;
8211: LD_VAR 0 1
8215: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8216: LD_EXP 2
8220: IFFALSE 8228
8222: PUSH
8223: LD_EXP 24
8227: AND
8228: IFFALSE 8240
8230: GO 8232
8232: DISABLE
// YouLost (  ) ;
8233: LD_STRING 
8235: PPUSH
8236: CALL_OW 104
8240: END
// every 0 0$1 trigger StreamModeActive and sFog do
8241: LD_EXP 2
8245: IFFALSE 8253
8247: PUSH
8248: LD_EXP 23
8252: AND
8253: IFFALSE 8267
8255: GO 8257
8257: DISABLE
// FogOff ( your_side ) ;
8258: LD_OWVAR 2
8262: PPUSH
8263: CALL_OW 344
8267: END
// every 0 0$1 trigger StreamModeActive and sSun do
8268: LD_EXP 2
8272: IFFALSE 8280
8274: PUSH
8275: LD_EXP 25
8279: AND
8280: IFFALSE 8308
8282: GO 8284
8284: DISABLE
// begin solar_recharge_percent := 0 ;
8285: LD_ADDR_OWVAR 79
8289: PUSH
8290: LD_INT 0
8292: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8293: LD_INT 10500
8295: PPUSH
8296: CALL_OW 67
// solar_recharge_percent := 100 ;
8300: LD_ADDR_OWVAR 79
8304: PUSH
8305: LD_INT 100
8307: ST_TO_ADDR
// end ;
8308: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8309: LD_EXP 2
8313: IFFALSE 8321
8315: PUSH
8316: LD_EXP 26
8320: AND
8321: IFFALSE 8560
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin tmp := [ ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: EMPTY
8337: ST_TO_ADDR
// for i := 1 to 6 do
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_INT 6
8350: PUSH
8351: FOR_TO
8352: IFFALSE 8457
// begin uc_nation := nation_nature ;
8354: LD_ADDR_OWVAR 21
8358: PUSH
8359: LD_INT 0
8361: ST_TO_ADDR
// uc_side := 0 ;
8362: LD_ADDR_OWVAR 20
8366: PUSH
8367: LD_INT 0
8369: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8370: LD_ADDR_OWVAR 29
8374: PUSH
8375: LD_INT 12
8377: PUSH
8378: LD_INT 12
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// hc_agressivity := 20 ;
8385: LD_ADDR_OWVAR 35
8389: PUSH
8390: LD_INT 20
8392: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8393: LD_ADDR_OWVAR 28
8397: PUSH
8398: LD_INT 17
8400: ST_TO_ADDR
// hc_gallery :=  ;
8401: LD_ADDR_OWVAR 33
8405: PUSH
8406: LD_STRING 
8408: ST_TO_ADDR
// hc_name :=  ;
8409: LD_ADDR_OWVAR 26
8413: PUSH
8414: LD_STRING 
8416: ST_TO_ADDR
// un := CreateHuman ;
8417: LD_ADDR_VAR 0 2
8421: PUSH
8422: CALL_OW 44
8426: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8427: LD_VAR 0 2
8431: PPUSH
8432: LD_INT 1
8434: PPUSH
8435: CALL_OW 51
// tmp := tmp ^ un ;
8439: LD_ADDR_VAR 0 3
8443: PUSH
8444: LD_VAR 0 3
8448: PUSH
8449: LD_VAR 0 2
8453: ADD
8454: ST_TO_ADDR
// end ;
8455: GO 8351
8457: POP
8458: POP
// repeat wait ( 0 0$1 ) ;
8459: LD_INT 35
8461: PPUSH
8462: CALL_OW 67
// for un in tmp do
8466: LD_ADDR_VAR 0 2
8470: PUSH
8471: LD_VAR 0 3
8475: PUSH
8476: FOR_IN
8477: IFFALSE 8551
// begin if IsDead ( un ) then
8479: LD_VAR 0 2
8483: PPUSH
8484: CALL_OW 301
8488: IFFALSE 8508
// begin tmp := tmp diff un ;
8490: LD_ADDR_VAR 0 3
8494: PUSH
8495: LD_VAR 0 3
8499: PUSH
8500: LD_VAR 0 2
8504: DIFF
8505: ST_TO_ADDR
// continue ;
8506: GO 8476
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8508: LD_VAR 0 2
8512: PPUSH
8513: LD_INT 3
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 0
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: PPUSH
8535: LD_VAR 0 2
8539: PPUSH
8540: CALL_OW 74
8544: PPUSH
8545: CALL_OW 115
// end ;
8549: GO 8476
8551: POP
8552: POP
// until not tmp ;
8553: LD_VAR 0 3
8557: NOT
8558: IFFALSE 8459
// end ;
8560: PPOPN 3
8562: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8563: LD_EXP 2
8567: IFFALSE 8575
8569: PUSH
8570: LD_EXP 27
8574: AND
8575: IFFALSE 8629
8577: GO 8579
8579: DISABLE
// begin ToLua ( displayTroll(); ) ;
8580: LD_STRING displayTroll();
8582: PPUSH
8583: CALL_OW 559
// wait ( 3 3$00 ) ;
8587: LD_INT 6300
8589: PPUSH
8590: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8594: LD_STRING hideTroll();
8596: PPUSH
8597: CALL_OW 559
// wait ( 1 1$00 ) ;
8601: LD_INT 2100
8603: PPUSH
8604: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8608: LD_STRING displayTroll();
8610: PPUSH
8611: CALL_OW 559
// wait ( 1 1$00 ) ;
8615: LD_INT 2100
8617: PPUSH
8618: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8622: LD_STRING hideTroll();
8624: PPUSH
8625: CALL_OW 559
// end ;
8629: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8630: LD_EXP 2
8634: IFFALSE 8642
8636: PUSH
8637: LD_EXP 28
8641: AND
8642: IFFALSE 8705
8644: GO 8646
8646: DISABLE
8647: LD_INT 0
8649: PPUSH
// begin p := 0 ;
8650: LD_ADDR_VAR 0 1
8654: PUSH
8655: LD_INT 0
8657: ST_TO_ADDR
// repeat game_speed := 1 ;
8658: LD_ADDR_OWVAR 65
8662: PUSH
8663: LD_INT 1
8665: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8666: LD_INT 35
8668: PPUSH
8669: CALL_OW 67
// p := p + 1 ;
8673: LD_ADDR_VAR 0 1
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PLUS
8686: ST_TO_ADDR
// until p >= 60 ;
8687: LD_VAR 0 1
8691: PUSH
8692: LD_INT 60
8694: GREATEREQUAL
8695: IFFALSE 8658
// game_speed := 4 ;
8697: LD_ADDR_OWVAR 65
8701: PUSH
8702: LD_INT 4
8704: ST_TO_ADDR
// end ;
8705: PPOPN 1
8707: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8708: LD_EXP 2
8712: IFFALSE 8720
8714: PUSH
8715: LD_EXP 29
8719: AND
8720: IFFALSE 8866
8722: GO 8724
8724: DISABLE
8725: LD_INT 0
8727: PPUSH
8728: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8729: LD_ADDR_VAR 0 1
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_OWVAR 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 2
8748: PUSH
8749: LD_INT 30
8751: PUSH
8752: LD_INT 0
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 30
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 69
8782: ST_TO_ADDR
// if not depot then
8783: LD_VAR 0 1
8787: NOT
8788: IFFALSE 8792
// exit ;
8790: GO 8866
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8792: LD_ADDR_VAR 0 2
8796: PUSH
8797: LD_VAR 0 1
8801: PUSH
8802: LD_INT 1
8804: PPUSH
8805: LD_VAR 0 1
8809: PPUSH
8810: CALL_OW 12
8814: ARRAY
8815: PPUSH
8816: CALL_OW 274
8820: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8821: LD_VAR 0 2
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: LD_INT 0
8831: PPUSH
8832: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8836: LD_VAR 0 2
8840: PPUSH
8841: LD_INT 2
8843: PPUSH
8844: LD_INT 0
8846: PPUSH
8847: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8851: LD_VAR 0 2
8855: PPUSH
8856: LD_INT 3
8858: PPUSH
8859: LD_INT 0
8861: PPUSH
8862: CALL_OW 277
// end ;
8866: PPOPN 2
8868: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8869: LD_EXP 2
8873: IFFALSE 8881
8875: PUSH
8876: LD_EXP 30
8880: AND
8881: IFFALSE 8978
8883: GO 8885
8885: DISABLE
8886: LD_INT 0
8888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8889: LD_ADDR_VAR 0 1
8893: PUSH
8894: LD_INT 22
8896: PUSH
8897: LD_OWVAR 2
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 21
8908: PUSH
8909: LD_INT 1
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: LD_INT 23
8921: PUSH
8922: LD_INT 0
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: PPUSH
8938: CALL_OW 69
8942: ST_TO_ADDR
// if not tmp then
8943: LD_VAR 0 1
8947: NOT
8948: IFFALSE 8952
// exit ;
8950: GO 8978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8952: LD_VAR 0 1
8956: PUSH
8957: LD_INT 1
8959: PPUSH
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL_OW 12
8969: ARRAY
8970: PPUSH
8971: LD_INT 200
8973: PPUSH
8974: CALL_OW 234
// end ;
8978: PPOPN 1
8980: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8981: LD_EXP 2
8985: IFFALSE 8993
8987: PUSH
8988: LD_EXP 31
8992: AND
8993: IFFALSE 9072
8995: GO 8997
8997: DISABLE
8998: LD_INT 0
9000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
9001: LD_ADDR_VAR 0 1
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_OWVAR 2
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 21
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 69
9036: ST_TO_ADDR
// if not tmp then
9037: LD_VAR 0 1
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9072
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9046: LD_VAR 0 1
9050: PUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 12
9063: ARRAY
9064: PPUSH
9065: LD_INT 60
9067: PPUSH
9068: CALL_OW 234
// end ;
9072: PPOPN 1
9074: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9075: LD_EXP 2
9079: IFFALSE 9087
9081: PUSH
9082: LD_EXP 32
9086: AND
9087: IFFALSE 9186
9089: GO 9091
9091: DISABLE
9092: LD_INT 0
9094: PPUSH
9095: PPUSH
// begin enable ;
9096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9097: LD_ADDR_VAR 0 1
9101: PUSH
9102: LD_INT 22
9104: PUSH
9105: LD_OWVAR 2
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 61
9116: PUSH
9117: EMPTY
9118: LIST
9119: PUSH
9120: LD_INT 33
9122: PUSH
9123: LD_INT 2
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: PPUSH
9135: CALL_OW 69
9139: ST_TO_ADDR
// if not tmp then
9140: LD_VAR 0 1
9144: NOT
9145: IFFALSE 9149
// exit ;
9147: GO 9186
// for i in tmp do
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: LD_VAR 0 1
9158: PUSH
9159: FOR_IN
9160: IFFALSE 9184
// if IsControledBy ( i ) then
9162: LD_VAR 0 2
9166: PPUSH
9167: CALL_OW 312
9171: IFFALSE 9182
// ComUnlink ( i ) ;
9173: LD_VAR 0 2
9177: PPUSH
9178: CALL_OW 136
9182: GO 9159
9184: POP
9185: POP
// end ;
9186: PPOPN 2
9188: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9189: LD_EXP 2
9193: IFFALSE 9201
9195: PUSH
9196: LD_EXP 33
9200: AND
9201: IFFALSE 9341
9203: GO 9205
9205: DISABLE
9206: LD_INT 0
9208: PPUSH
9209: PPUSH
// begin ToLua ( displayPowell(); ) ;
9210: LD_STRING displayPowell();
9212: PPUSH
9213: CALL_OW 559
// uc_side := 0 ;
9217: LD_ADDR_OWVAR 20
9221: PUSH
9222: LD_INT 0
9224: ST_TO_ADDR
// uc_nation := 2 ;
9225: LD_ADDR_OWVAR 21
9229: PUSH
9230: LD_INT 2
9232: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9233: LD_ADDR_OWVAR 37
9237: PUSH
9238: LD_INT 14
9240: ST_TO_ADDR
// vc_engine := engine_siberite ;
9241: LD_ADDR_OWVAR 39
9245: PUSH
9246: LD_INT 3
9248: ST_TO_ADDR
// vc_control := control_apeman ;
9249: LD_ADDR_OWVAR 38
9253: PUSH
9254: LD_INT 5
9256: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9257: LD_ADDR_OWVAR 40
9261: PUSH
9262: LD_INT 29
9264: ST_TO_ADDR
// un := CreateVehicle ;
9265: LD_ADDR_VAR 0 2
9269: PUSH
9270: CALL_OW 45
9274: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9275: LD_VAR 0 2
9279: PPUSH
9280: LD_INT 1
9282: PPUSH
9283: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9287: LD_INT 35
9289: PPUSH
9290: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9294: LD_VAR 0 2
9298: PPUSH
9299: LD_INT 22
9301: PUSH
9302: LD_OWVAR 2
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 69
9315: PPUSH
9316: LD_VAR 0 2
9320: PPUSH
9321: CALL_OW 74
9325: PPUSH
9326: CALL_OW 115
// until IsDead ( un ) ;
9330: LD_VAR 0 2
9334: PPUSH
9335: CALL_OW 301
9339: IFFALSE 9287
// end ;
9341: PPOPN 2
9343: END
// every 0 0$1 trigger StreamModeActive and sStu do
9344: LD_EXP 2
9348: IFFALSE 9356
9350: PUSH
9351: LD_EXP 41
9355: AND
9356: IFFALSE 9372
9358: GO 9360
9360: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9361: LD_STRING displayStucuk();
9363: PPUSH
9364: CALL_OW 559
// ResetFog ;
9368: CALL_OW 335
// end ;
9372: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9373: LD_EXP 2
9377: IFFALSE 9385
9379: PUSH
9380: LD_EXP 34
9384: AND
9385: IFFALSE 9526
9387: GO 9389
9389: DISABLE
9390: LD_INT 0
9392: PPUSH
9393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: LD_INT 22
9401: PUSH
9402: LD_OWVAR 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 21
9413: PUSH
9414: LD_INT 1
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 69
9429: ST_TO_ADDR
// if not tmp then
9430: LD_VAR 0 2
9434: NOT
9435: IFFALSE 9439
// exit ;
9437: GO 9526
// un := tmp [ rand ( 1 , tmp ) ] ;
9439: LD_ADDR_VAR 0 1
9443: PUSH
9444: LD_VAR 0 2
9448: PUSH
9449: LD_INT 1
9451: PPUSH
9452: LD_VAR 0 2
9456: PPUSH
9457: CALL_OW 12
9461: ARRAY
9462: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: LD_INT 0
9470: PPUSH
9471: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9475: LD_VAR 0 1
9479: PPUSH
9480: LD_OWVAR 3
9484: PUSH
9485: LD_VAR 0 1
9489: DIFF
9490: PPUSH
9491: LD_VAR 0 1
9495: PPUSH
9496: CALL_OW 74
9500: PPUSH
9501: CALL_OW 115
// wait ( 0 0$20 ) ;
9505: LD_INT 700
9507: PPUSH
9508: CALL_OW 67
// SetSide ( un , your_side ) ;
9512: LD_VAR 0 1
9516: PPUSH
9517: LD_OWVAR 2
9521: PPUSH
9522: CALL_OW 235
// end ;
9526: PPOPN 2
9528: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9529: LD_EXP 2
9533: IFFALSE 9541
9535: PUSH
9536: LD_EXP 35
9540: AND
9541: IFFALSE 9647
9543: GO 9545
9545: DISABLE
9546: LD_INT 0
9548: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: LD_INT 22
9556: PUSH
9557: LD_OWVAR 2
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 2
9568: PUSH
9569: LD_INT 30
9571: PUSH
9572: LD_INT 0
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 30
9581: PUSH
9582: LD_INT 1
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PPUSH
9598: CALL_OW 69
9602: ST_TO_ADDR
// if not depot then
9603: LD_VAR 0 1
9607: NOT
9608: IFFALSE 9612
// exit ;
9610: GO 9647
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9612: LD_VAR 0 1
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 250
9625: PPUSH
9626: LD_VAR 0 1
9630: PUSH
9631: LD_INT 1
9633: ARRAY
9634: PPUSH
9635: CALL_OW 251
9639: PPUSH
9640: LD_INT 70
9642: PPUSH
9643: CALL_OW 495
// end ;
9647: PPOPN 1
9649: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9650: LD_EXP 2
9654: IFFALSE 9662
9656: PUSH
9657: LD_EXP 36
9661: AND
9662: IFFALSE 9873
9664: GO 9666
9666: DISABLE
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9674: LD_ADDR_VAR 0 5
9678: PUSH
9679: LD_INT 22
9681: PUSH
9682: LD_OWVAR 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 1
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 69
9709: ST_TO_ADDR
// if not tmp then
9710: LD_VAR 0 5
9714: NOT
9715: IFFALSE 9719
// exit ;
9717: GO 9873
// for i in tmp do
9719: LD_ADDR_VAR 0 1
9723: PUSH
9724: LD_VAR 0 5
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9871
// begin d := rand ( 0 , 5 ) ;
9732: LD_ADDR_VAR 0 4
9736: PUSH
9737: LD_INT 0
9739: PPUSH
9740: LD_INT 5
9742: PPUSH
9743: CALL_OW 12
9747: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL_OW 250
9762: PPUSH
9763: LD_VAR 0 4
9767: PPUSH
9768: LD_INT 3
9770: PPUSH
9771: LD_INT 12
9773: PPUSH
9774: CALL_OW 12
9778: PPUSH
9779: CALL_OW 272
9783: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 251
9798: PPUSH
9799: LD_VAR 0 4
9803: PPUSH
9804: LD_INT 3
9806: PPUSH
9807: LD_INT 12
9809: PPUSH
9810: CALL_OW 12
9814: PPUSH
9815: CALL_OW 273
9819: ST_TO_ADDR
// if ValidHex ( x , y ) then
9820: LD_VAR 0 2
9824: PPUSH
9825: LD_VAR 0 3
9829: PPUSH
9830: CALL_OW 488
9834: IFFALSE 9869
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9836: LD_VAR 0 1
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 3
9853: PPUSH
9854: LD_INT 6
9856: PPUSH
9857: CALL_OW 12
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 483
// end ;
9869: GO 9729
9871: POP
9872: POP
// end ;
9873: PPOPN 5
9875: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9876: LD_EXP 2
9880: IFFALSE 9888
9882: PUSH
9883: LD_EXP 37
9887: AND
9888: IFFALSE 9982
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9897: LD_ADDR_VAR 0 2
9901: PUSH
9902: LD_INT 22
9904: PUSH
9905: LD_OWVAR 2
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 32
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 21
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: PPUSH
9939: CALL_OW 69
9943: ST_TO_ADDR
// if not tmp then
9944: LD_VAR 0 2
9948: NOT
9949: IFFALSE 9953
// exit ;
9951: GO 9982
// for i in tmp do
9953: LD_ADDR_VAR 0 1
9957: PUSH
9958: LD_VAR 0 2
9962: PUSH
9963: FOR_IN
9964: IFFALSE 9980
// SetFuel ( i , 0 ) ;
9966: LD_VAR 0 1
9970: PPUSH
9971: LD_INT 0
9973: PPUSH
9974: CALL_OW 240
9978: GO 9963
9980: POP
9981: POP
// end ;
9982: PPOPN 2
9984: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9985: LD_EXP 2
9989: IFFALSE 9997
9991: PUSH
9992: LD_EXP 38
9996: AND
9997: IFFALSE 10063
9999: GO 10001
10001: DISABLE
10002: LD_INT 0
10004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
10005: LD_ADDR_VAR 0 1
10009: PUSH
10010: LD_INT 22
10012: PUSH
10013: LD_OWVAR 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 30
10024: PUSH
10025: LD_INT 29
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 69
10040: ST_TO_ADDR
// if not tmp then
10041: LD_VAR 0 1
10045: NOT
10046: IFFALSE 10050
// exit ;
10048: GO 10063
// DestroyUnit ( tmp [ 1 ] ) ;
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 1
10057: ARRAY
10058: PPUSH
10059: CALL_OW 65
// end ;
10063: PPOPN 1
10065: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10066: LD_EXP 2
10070: IFFALSE 10078
10072: PUSH
10073: LD_EXP 40
10077: AND
10078: IFFALSE 10207
10080: GO 10082
10082: DISABLE
10083: LD_INT 0
10085: PPUSH
// begin uc_side := 0 ;
10086: LD_ADDR_OWVAR 20
10090: PUSH
10091: LD_INT 0
10093: ST_TO_ADDR
// uc_nation := nation_arabian ;
10094: LD_ADDR_OWVAR 21
10098: PUSH
10099: LD_INT 2
10101: ST_TO_ADDR
// hc_gallery :=  ;
10102: LD_ADDR_OWVAR 33
10106: PUSH
10107: LD_STRING 
10109: ST_TO_ADDR
// hc_name :=  ;
10110: LD_ADDR_OWVAR 26
10114: PUSH
10115: LD_STRING 
10117: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10118: LD_INT 1
10120: PPUSH
10121: LD_INT 11
10123: PPUSH
10124: LD_INT 10
10126: PPUSH
10127: CALL_OW 380
// un := CreateHuman ;
10131: LD_ADDR_VAR 0 1
10135: PUSH
10136: CALL_OW 44
10140: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10141: LD_VAR 0 1
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10153: LD_INT 35
10155: PPUSH
10156: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 22
10167: PUSH
10168: LD_OWVAR 2
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PPUSH
10177: CALL_OW 69
10181: PPUSH
10182: LD_VAR 0 1
10186: PPUSH
10187: CALL_OW 74
10191: PPUSH
10192: CALL_OW 115
// until IsDead ( un ) ;
10196: LD_VAR 0 1
10200: PPUSH
10201: CALL_OW 301
10205: IFFALSE 10153
// end ;
10207: PPOPN 1
10209: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10210: LD_EXP 2
10214: IFFALSE 10222
10216: PUSH
10217: LD_EXP 42
10221: AND
10222: IFFALSE 10234
10224: GO 10226
10226: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10227: LD_STRING earthquake(getX(game), 0, 32)
10229: PPUSH
10230: CALL_OW 559
10234: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10235: LD_EXP 2
10239: IFFALSE 10247
10241: PUSH
10242: LD_EXP 43
10246: AND
10247: IFFALSE 10338
10249: GO 10251
10251: DISABLE
10252: LD_INT 0
10254: PPUSH
// begin enable ;
10255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10256: LD_ADDR_VAR 0 1
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_OWVAR 2
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 21
10275: PUSH
10276: LD_INT 2
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 33
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: ST_TO_ADDR
// if not tmp then
10303: LD_VAR 0 1
10307: NOT
10308: IFFALSE 10312
// exit ;
10310: GO 10338
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10312: LD_VAR 0 1
10316: PUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_VAR 0 1
10324: PPUSH
10325: CALL_OW 12
10329: ARRAY
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 234
// end ;
10338: PPOPN 1
10340: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10341: LD_EXP 2
10345: IFFALSE 10353
10347: PUSH
10348: LD_EXP 44
10352: AND
10353: IFFALSE 10494
10355: GO 10357
10357: DISABLE
10358: LD_INT 0
10360: PPUSH
10361: PPUSH
10362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10363: LD_ADDR_VAR 0 3
10367: PUSH
10368: LD_INT 22
10370: PUSH
10371: LD_OWVAR 2
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 25
10382: PUSH
10383: LD_INT 1
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: ST_TO_ADDR
// if not tmp then
10399: LD_VAR 0 3
10403: NOT
10404: IFFALSE 10408
// exit ;
10406: GO 10494
// un := tmp [ rand ( 1 , tmp ) ] ;
10408: LD_ADDR_VAR 0 2
10412: PUSH
10413: LD_VAR 0 3
10417: PUSH
10418: LD_INT 1
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: CALL_OW 12
10430: ARRAY
10431: ST_TO_ADDR
// if Crawls ( un ) then
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 318
10441: IFFALSE 10452
// ComWalk ( un ) ;
10443: LD_VAR 0 2
10447: PPUSH
10448: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10452: LD_VAR 0 2
10456: PPUSH
10457: LD_INT 9
10459: PPUSH
10460: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10464: LD_INT 28
10466: PPUSH
10467: LD_OWVAR 2
10471: PPUSH
10472: LD_INT 2
10474: PPUSH
10475: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10479: LD_INT 29
10481: PPUSH
10482: LD_OWVAR 2
10486: PPUSH
10487: LD_INT 2
10489: PPUSH
10490: CALL_OW 322
// end ;
10494: PPOPN 3
10496: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10497: LD_EXP 2
10501: IFFALSE 10509
10503: PUSH
10504: LD_EXP 45
10508: AND
10509: IFFALSE 10620
10511: GO 10513
10513: DISABLE
10514: LD_INT 0
10516: PPUSH
10517: PPUSH
10518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10519: LD_ADDR_VAR 0 3
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_OWVAR 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 1
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: ST_TO_ADDR
// if not tmp then
10555: LD_VAR 0 3
10559: NOT
10560: IFFALSE 10564
// exit ;
10562: GO 10620
// un := tmp [ rand ( 1 , tmp ) ] ;
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_VAR 0 3
10573: PUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 3
10581: PPUSH
10582: CALL_OW 12
10586: ARRAY
10587: ST_TO_ADDR
// if Crawls ( un ) then
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 318
10597: IFFALSE 10608
// ComWalk ( un ) ;
10599: LD_VAR 0 2
10603: PPUSH
10604: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10608: LD_VAR 0 2
10612: PPUSH
10613: LD_INT 8
10615: PPUSH
10616: CALL_OW 336
// end ;
10620: PPOPN 3
10622: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10623: LD_EXP 2
10627: IFFALSE 10635
10629: PUSH
10630: LD_EXP 46
10634: AND
10635: IFFALSE 10779
10637: GO 10639
10639: DISABLE
10640: LD_INT 0
10642: PPUSH
10643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10644: LD_ADDR_VAR 0 2
10648: PUSH
10649: LD_INT 22
10651: PUSH
10652: LD_OWVAR 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 21
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 34
10676: PUSH
10677: LD_INT 12
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 34
10686: PUSH
10687: LD_INT 51
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 34
10696: PUSH
10697: LD_INT 32
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: PPUSH
10715: CALL_OW 69
10719: ST_TO_ADDR
// if not tmp then
10720: LD_VAR 0 2
10724: NOT
10725: IFFALSE 10729
// exit ;
10727: GO 10779
// for i in tmp do
10729: LD_ADDR_VAR 0 1
10733: PUSH
10734: LD_VAR 0 2
10738: PUSH
10739: FOR_IN
10740: IFFALSE 10777
// if GetCargo ( i , mat_artifact ) = 0 then
10742: LD_VAR 0 1
10746: PPUSH
10747: LD_INT 4
10749: PPUSH
10750: CALL_OW 289
10754: PUSH
10755: LD_INT 0
10757: EQUAL
10758: IFFALSE 10775
// SetCargo ( i , mat_siberit , 100 ) ;
10760: LD_VAR 0 1
10764: PPUSH
10765: LD_INT 3
10767: PPUSH
10768: LD_INT 100
10770: PPUSH
10771: CALL_OW 290
10775: GO 10739
10777: POP
10778: POP
// end ;
10779: PPOPN 2
10781: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10782: LD_EXP 2
10786: IFFALSE 10794
10788: PUSH
10789: LD_EXP 47
10793: AND
10794: IFFALSE 10977
10796: GO 10798
10798: DISABLE
10799: LD_INT 0
10801: PPUSH
10802: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_INT 22
10810: PUSH
10811: LD_OWVAR 2
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 69
10824: ST_TO_ADDR
// if not tmp then
10825: LD_VAR 0 2
10829: NOT
10830: IFFALSE 10834
// exit ;
10832: GO 10977
// for i := 1 to 2 do
10834: LD_ADDR_VAR 0 1
10838: PUSH
10839: DOUBLE
10840: LD_INT 1
10842: DEC
10843: ST_TO_ADDR
10844: LD_INT 2
10846: PUSH
10847: FOR_TO
10848: IFFALSE 10975
// begin uc_side := your_side ;
10850: LD_ADDR_OWVAR 20
10854: PUSH
10855: LD_OWVAR 2
10859: ST_TO_ADDR
// uc_nation := nation_american ;
10860: LD_ADDR_OWVAR 21
10864: PUSH
10865: LD_INT 1
10867: ST_TO_ADDR
// vc_chassis := us_morphling ;
10868: LD_ADDR_OWVAR 37
10872: PUSH
10873: LD_INT 5
10875: ST_TO_ADDR
// vc_engine := engine_siberite ;
10876: LD_ADDR_OWVAR 39
10880: PUSH
10881: LD_INT 3
10883: ST_TO_ADDR
// vc_control := control_computer ;
10884: LD_ADDR_OWVAR 38
10888: PUSH
10889: LD_INT 3
10891: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10892: LD_ADDR_OWVAR 40
10896: PUSH
10897: LD_INT 10
10899: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10900: LD_VAR 0 2
10904: PUSH
10905: LD_INT 1
10907: ARRAY
10908: PPUSH
10909: CALL_OW 310
10913: NOT
10914: IFFALSE 10961
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10916: CALL_OW 45
10920: PPUSH
10921: LD_VAR 0 2
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: PPUSH
10930: CALL_OW 250
10934: PPUSH
10935: LD_VAR 0 2
10939: PUSH
10940: LD_INT 1
10942: ARRAY
10943: PPUSH
10944: CALL_OW 251
10948: PPUSH
10949: LD_INT 12
10951: PPUSH
10952: LD_INT 1
10954: PPUSH
10955: CALL_OW 50
10959: GO 10973
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10961: CALL_OW 45
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: CALL_OW 51
// end ;
10973: GO 10847
10975: POP
10976: POP
// end ;
10977: PPOPN 2
10979: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10980: LD_EXP 2
10984: IFFALSE 10992
10986: PUSH
10987: LD_EXP 48
10991: AND
10992: IFFALSE 11214
10994: GO 10996
10996: DISABLE
10997: LD_INT 0
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11005: LD_ADDR_VAR 0 6
11009: PUSH
11010: LD_INT 22
11012: PUSH
11013: LD_OWVAR 2
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 21
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: LD_INT 23
11037: PUSH
11038: LD_INT 0
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: ST_TO_ADDR
// if not tmp then
11059: LD_VAR 0 6
11063: NOT
11064: IFFALSE 11068
// exit ;
11066: GO 11214
// s1 := rand ( 1 , 4 ) ;
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_INT 1
11075: PPUSH
11076: LD_INT 4
11078: PPUSH
11079: CALL_OW 12
11083: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11084: LD_ADDR_VAR 0 4
11088: PUSH
11089: LD_VAR 0 6
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_VAR 0 2
11102: PPUSH
11103: CALL_OW 259
11107: ST_TO_ADDR
// if s1 = 1 then
11108: LD_VAR 0 2
11112: PUSH
11113: LD_INT 1
11115: EQUAL
11116: IFFALSE 11136
// s2 := rand ( 2 , 4 ) else
11118: LD_ADDR_VAR 0 3
11122: PUSH
11123: LD_INT 2
11125: PPUSH
11126: LD_INT 4
11128: PPUSH
11129: CALL_OW 12
11133: ST_TO_ADDR
11134: GO 11144
// s2 := 1 ;
11136: LD_ADDR_VAR 0 3
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11144: LD_ADDR_VAR 0 5
11148: PUSH
11149: LD_VAR 0 6
11153: PUSH
11154: LD_INT 1
11156: ARRAY
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: CALL_OW 259
11167: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11168: LD_VAR 0 6
11172: PUSH
11173: LD_INT 1
11175: ARRAY
11176: PPUSH
11177: LD_VAR 0 2
11181: PPUSH
11182: LD_VAR 0 5
11186: PPUSH
11187: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11191: LD_VAR 0 6
11195: PUSH
11196: LD_INT 1
11198: ARRAY
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_VAR 0 4
11209: PPUSH
11210: CALL_OW 237
// end ;
11214: PPOPN 6
11216: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11217: LD_EXP 2
11221: IFFALSE 11229
11223: PUSH
11224: LD_EXP 49
11228: AND
11229: IFFALSE 11308
11231: GO 11233
11233: DISABLE
11234: LD_INT 0
11236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11237: LD_ADDR_VAR 0 1
11241: PUSH
11242: LD_INT 22
11244: PUSH
11245: LD_OWVAR 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 30
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: ST_TO_ADDR
// if not tmp then
11273: LD_VAR 0 1
11277: NOT
11278: IFFALSE 11282
// exit ;
11280: GO 11308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11282: LD_VAR 0 1
11286: PUSH
11287: LD_INT 1
11289: PPUSH
11290: LD_VAR 0 1
11294: PPUSH
11295: CALL_OW 12
11299: ARRAY
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 234
// end ;
11308: PPOPN 1
11310: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11311: LD_EXP 2
11315: IFFALSE 11323
11317: PUSH
11318: LD_EXP 50
11322: AND
11323: IFFALSE 11435
11325: GO 11327
11327: DISABLE
11328: LD_INT 0
11330: PPUSH
11331: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11332: LD_ADDR_VAR 0 2
11336: PUSH
11337: LD_INT 22
11339: PUSH
11340: LD_OWVAR 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: LD_INT 30
11354: PUSH
11355: LD_INT 27
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 26
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 30
11374: PUSH
11375: LD_INT 28
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PPUSH
11392: CALL_OW 69
11396: ST_TO_ADDR
// if not tmp then
11397: LD_VAR 0 2
11401: NOT
11402: IFFALSE 11406
// exit ;
11404: GO 11435
// for i in tmp do
11406: LD_ADDR_VAR 0 1
11410: PUSH
11411: LD_VAR 0 2
11415: PUSH
11416: FOR_IN
11417: IFFALSE 11433
// SetLives ( i , 1 ) ;
11419: LD_VAR 0 1
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 234
11431: GO 11416
11433: POP
11434: POP
// end ;
11435: PPOPN 2
11437: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11438: LD_EXP 2
11442: IFFALSE 11450
11444: PUSH
11445: LD_EXP 51
11449: AND
11450: IFFALSE 11737
11452: GO 11454
11454: DISABLE
11455: LD_INT 0
11457: PPUSH
11458: PPUSH
11459: PPUSH
// begin i := rand ( 1 , 7 ) ;
11460: LD_ADDR_VAR 0 1
11464: PUSH
11465: LD_INT 1
11467: PPUSH
11468: LD_INT 7
11470: PPUSH
11471: CALL_OW 12
11475: ST_TO_ADDR
// case i of 1 :
11476: LD_VAR 0 1
11480: PUSH
11481: LD_INT 1
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11499
11489: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11490: LD_STRING earthquake(getX(game), 0, 32)
11492: PPUSH
11493: CALL_OW 559
11497: GO 11737
11499: LD_INT 2
11501: DOUBLE
11502: EQUAL
11503: IFTRUE 11507
11505: GO 11521
11507: POP
// begin ToLua ( displayStucuk(); ) ;
11508: LD_STRING displayStucuk();
11510: PPUSH
11511: CALL_OW 559
// ResetFog ;
11515: CALL_OW 335
// end ; 3 :
11519: GO 11737
11521: LD_INT 3
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11633
11529: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11530: LD_ADDR_VAR 0 2
11534: PUSH
11535: LD_INT 22
11537: PUSH
11538: LD_OWVAR 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 1
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: ST_TO_ADDR
// if not tmp then
11566: LD_VAR 0 2
11570: NOT
11571: IFFALSE 11575
// exit ;
11573: GO 11737
// un := tmp [ rand ( 1 , tmp ) ] ;
11575: LD_ADDR_VAR 0 3
11579: PUSH
11580: LD_VAR 0 2
11584: PUSH
11585: LD_INT 1
11587: PPUSH
11588: LD_VAR 0 2
11592: PPUSH
11593: CALL_OW 12
11597: ARRAY
11598: ST_TO_ADDR
// if Crawls ( un ) then
11599: LD_VAR 0 3
11603: PPUSH
11604: CALL_OW 318
11608: IFFALSE 11619
// ComWalk ( un ) ;
11610: LD_VAR 0 3
11614: PPUSH
11615: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11619: LD_VAR 0 3
11623: PPUSH
11624: LD_INT 8
11626: PPUSH
11627: CALL_OW 336
// end ; 4 :
11631: GO 11737
11633: LD_INT 4
11635: DOUBLE
11636: EQUAL
11637: IFTRUE 11641
11639: GO 11715
11641: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11642: LD_ADDR_VAR 0 2
11646: PUSH
11647: LD_INT 22
11649: PUSH
11650: LD_OWVAR 2
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 30
11661: PUSH
11662: LD_INT 29
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PPUSH
11673: CALL_OW 69
11677: ST_TO_ADDR
// if not tmp then
11678: LD_VAR 0 2
11682: NOT
11683: IFFALSE 11687
// exit ;
11685: GO 11737
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11687: LD_VAR 0 2
11691: PUSH
11692: LD_INT 1
11694: ARRAY
11695: PPUSH
11696: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11700: LD_VAR 0 2
11704: PUSH
11705: LD_INT 1
11707: ARRAY
11708: PPUSH
11709: CALL_OW 65
// end ; 5 .. 7 :
11713: GO 11737
11715: LD_INT 5
11717: DOUBLE
11718: GREATEREQUAL
11719: IFFALSE 11727
11721: LD_INT 7
11723: DOUBLE
11724: LESSEQUAL
11725: IFTRUE 11729
11727: GO 11736
11729: POP
// StreamSibBomb ; end ;
11730: CALL 7918 0 0
11734: GO 11737
11736: POP
// end ;
11737: PPOPN 3
11739: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11740: LD_EXP 2
11744: IFFALSE 11752
11746: PUSH
11747: LD_EXP 52
11751: AND
11752: IFFALSE 11908
11754: GO 11756
11756: DISABLE
11757: LD_INT 0
11759: PPUSH
11760: PPUSH
11761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11762: LD_ADDR_VAR 0 2
11766: PUSH
11767: LD_INT 81
11769: PUSH
11770: LD_OWVAR 2
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: LD_INT 21
11784: PUSH
11785: LD_INT 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 21
11794: PUSH
11795: LD_INT 2
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: ST_TO_ADDR
// if not tmp then
11816: LD_VAR 0 2
11820: NOT
11821: IFFALSE 11825
// exit ;
11823: GO 11908
// p := 0 ;
11825: LD_ADDR_VAR 0 3
11829: PUSH
11830: LD_INT 0
11832: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11833: LD_INT 35
11835: PPUSH
11836: CALL_OW 67
// p := p + 1 ;
11840: LD_ADDR_VAR 0 3
11844: PUSH
11845: LD_VAR 0 3
11849: PUSH
11850: LD_INT 1
11852: PLUS
11853: ST_TO_ADDR
// for i in tmp do
11854: LD_ADDR_VAR 0 1
11858: PUSH
11859: LD_VAR 0 2
11863: PUSH
11864: FOR_IN
11865: IFFALSE 11896
// if GetLives ( i ) < 1000 then
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 256
11876: PUSH
11877: LD_INT 1000
11879: LESS
11880: IFFALSE 11894
// SetLives ( i , 1000 ) ;
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_INT 1000
11889: PPUSH
11890: CALL_OW 234
11894: GO 11864
11896: POP
11897: POP
// until p > 20 ;
11898: LD_VAR 0 3
11902: PUSH
11903: LD_INT 20
11905: GREATER
11906: IFFALSE 11833
// end ;
11908: PPOPN 3
11910: END
// every 0 0$1 trigger StreamModeActive and sTime do
11911: LD_EXP 2
11915: IFFALSE 11923
11917: PUSH
11918: LD_EXP 53
11922: AND
11923: IFFALSE 11958
11925: GO 11927
11927: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11928: LD_INT 28
11930: PPUSH
11931: LD_OWVAR 2
11935: PPUSH
11936: LD_INT 2
11938: PPUSH
11939: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11943: LD_INT 30
11945: PPUSH
11946: LD_OWVAR 2
11950: PPUSH
11951: LD_INT 2
11953: PPUSH
11954: CALL_OW 322
// end ;
11958: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11959: LD_EXP 2
11963: IFFALSE 11971
11965: PUSH
11966: LD_EXP 54
11970: AND
11971: IFFALSE 12092
11973: GO 11975
11975: DISABLE
11976: LD_INT 0
11978: PPUSH
11979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11980: LD_ADDR_VAR 0 2
11984: PUSH
11985: LD_INT 22
11987: PUSH
11988: LD_OWVAR 2
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 21
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 23
12012: PUSH
12013: LD_INT 0
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: ST_TO_ADDR
// if not tmp then
12034: LD_VAR 0 2
12038: NOT
12039: IFFALSE 12043
// exit ;
12041: GO 12092
// for i in tmp do
12043: LD_ADDR_VAR 0 1
12047: PUSH
12048: LD_VAR 0 2
12052: PUSH
12053: FOR_IN
12054: IFFALSE 12090
// begin if Crawls ( i ) then
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 318
12065: IFFALSE 12076
// ComWalk ( i ) ;
12067: LD_VAR 0 1
12071: PPUSH
12072: CALL_OW 138
// SetClass ( i , 2 ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: LD_INT 2
12083: PPUSH
12084: CALL_OW 336
// end ;
12088: GO 12053
12090: POP
12091: POP
// end ;
12092: PPOPN 2
12094: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12095: LD_EXP 2
12099: IFFALSE 12107
12101: PUSH
12102: LD_EXP 55
12106: AND
12107: IFFALSE 12397
12109: GO 12111
12111: DISABLE
12112: LD_INT 0
12114: PPUSH
12115: PPUSH
12116: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12117: LD_OWVAR 2
12121: PPUSH
12122: LD_INT 9
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12135: LD_INT 9
12137: PPUSH
12138: LD_OWVAR 2
12142: PPUSH
12143: CALL_OW 343
// uc_side := 9 ;
12147: LD_ADDR_OWVAR 20
12151: PUSH
12152: LD_INT 9
12154: ST_TO_ADDR
// uc_nation := 2 ;
12155: LD_ADDR_OWVAR 21
12159: PUSH
12160: LD_INT 2
12162: ST_TO_ADDR
// hc_name := Dark Warrior ;
12163: LD_ADDR_OWVAR 26
12167: PUSH
12168: LD_STRING Dark Warrior
12170: ST_TO_ADDR
// hc_gallery :=  ;
12171: LD_ADDR_OWVAR 33
12175: PUSH
12176: LD_STRING 
12178: ST_TO_ADDR
// hc_noskilllimit := true ;
12179: LD_ADDR_OWVAR 76
12183: PUSH
12184: LD_INT 1
12186: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12187: LD_ADDR_OWVAR 31
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_INT 30
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: ST_TO_ADDR
// un := CreateHuman ;
12210: LD_ADDR_VAR 0 3
12214: PUSH
12215: CALL_OW 44
12219: ST_TO_ADDR
// hc_noskilllimit := false ;
12220: LD_ADDR_OWVAR 76
12224: PUSH
12225: LD_INT 0
12227: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12228: LD_VAR 0 3
12232: PPUSH
12233: LD_INT 1
12235: PPUSH
12236: CALL_OW 51
// ToLua ( playRanger() ) ;
12240: LD_STRING playRanger()
12242: PPUSH
12243: CALL_OW 559
// p := 0 ;
12247: LD_ADDR_VAR 0 2
12251: PUSH
12252: LD_INT 0
12254: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12255: LD_INT 35
12257: PPUSH
12258: CALL_OW 67
// p := p + 1 ;
12262: LD_ADDR_VAR 0 2
12266: PUSH
12267: LD_VAR 0 2
12271: PUSH
12272: LD_INT 1
12274: PLUS
12275: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 256
12285: PUSH
12286: LD_INT 1000
12288: LESS
12289: IFFALSE 12303
// SetLives ( un , 1000 ) ;
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1000
12298: PPUSH
12299: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12303: LD_VAR 0 3
12307: PPUSH
12308: LD_INT 81
12310: PUSH
12311: LD_OWVAR 2
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 91
12322: PUSH
12323: LD_VAR 0 3
12327: PUSH
12328: LD_INT 30
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 69
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: CALL_OW 74
12354: PPUSH
12355: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12359: LD_VAR 0 2
12363: PUSH
12364: LD_INT 80
12366: GREATER
12367: IFTRUE 12380
12369: PUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: CALL_OW 301
12379: OR
12380: IFFALSE 12255
// if un then
12382: LD_VAR 0 3
12386: IFFALSE 12397
// RemoveUnit ( un ) ;
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 64
// end ;
12397: PPOPN 3
12399: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12400: LD_EXP 56
12404: IFFALSE 12520
12406: GO 12408
12408: DISABLE
12409: LD_INT 0
12411: PPUSH
12412: PPUSH
12413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12414: LD_ADDR_VAR 0 2
12418: PUSH
12419: LD_INT 81
12421: PUSH
12422: LD_OWVAR 2
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 21
12433: PUSH
12434: LD_INT 1
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PPUSH
12445: CALL_OW 69
12449: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12450: LD_STRING playComputer()
12452: PPUSH
12453: CALL_OW 559
// if not tmp then
12457: LD_VAR 0 2
12461: NOT
12462: IFFALSE 12466
// exit ;
12464: GO 12520
// for i in tmp do
12466: LD_ADDR_VAR 0 1
12470: PUSH
12471: LD_VAR 0 2
12475: PUSH
12476: FOR_IN
12477: IFFALSE 12518
// for j := 1 to 4 do
12479: LD_ADDR_VAR 0 3
12483: PUSH
12484: DOUBLE
12485: LD_INT 1
12487: DEC
12488: ST_TO_ADDR
12489: LD_INT 4
12491: PUSH
12492: FOR_TO
12493: IFFALSE 12514
// SetSkill ( i , j , 10 ) ;
12495: LD_VAR 0 1
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 10
12507: PPUSH
12508: CALL_OW 237
12512: GO 12492
12514: POP
12515: POP
12516: GO 12476
12518: POP
12519: POP
// end ;
12520: PPOPN 3
12522: END
// every 0 0$1 trigger s30 do var i , tmp ;
12523: LD_EXP 57
12527: IFFALSE 12596
12529: GO 12531
12531: DISABLE
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_OWVAR 2
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PPUSH
12553: CALL_OW 69
12557: ST_TO_ADDR
// if not tmp then
12558: LD_VAR 0 2
12562: NOT
12563: IFFALSE 12567
// exit ;
12565: GO 12596
// for i in tmp do
12567: LD_ADDR_VAR 0 1
12571: PUSH
12572: LD_VAR 0 2
12576: PUSH
12577: FOR_IN
12578: IFFALSE 12594
// SetLives ( i , 300 ) ;
12580: LD_VAR 0 1
12584: PPUSH
12585: LD_INT 300
12587: PPUSH
12588: CALL_OW 234
12592: GO 12577
12594: POP
12595: POP
// end ;
12596: PPOPN 2
12598: END
// every 0 0$1 trigger s60 do var i , tmp ;
12599: LD_EXP 58
12603: IFFALSE 12672
12605: GO 12607
12607: DISABLE
12608: LD_INT 0
12610: PPUSH
12611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12612: LD_ADDR_VAR 0 2
12616: PUSH
12617: LD_INT 22
12619: PUSH
12620: LD_OWVAR 2
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: ST_TO_ADDR
// if not tmp then
12634: LD_VAR 0 2
12638: NOT
12639: IFFALSE 12643
// exit ;
12641: GO 12672
// for i in tmp do
12643: LD_ADDR_VAR 0 1
12647: PUSH
12648: LD_VAR 0 2
12652: PUSH
12653: FOR_IN
12654: IFFALSE 12670
// SetLives ( i , 600 ) ;
12656: LD_VAR 0 1
12660: PPUSH
12661: LD_INT 600
12663: PPUSH
12664: CALL_OW 234
12668: GO 12653
12670: POP
12671: POP
// end ;
12672: PPOPN 2
12674: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12675: LD_INT 0
12677: PPUSH
// case cmd of 301 :
12678: LD_VAR 0 1
12682: PUSH
12683: LD_INT 301
12685: DOUBLE
12686: EQUAL
12687: IFTRUE 12691
12689: GO 12723
12691: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12692: LD_VAR 0 6
12696: PPUSH
12697: LD_VAR 0 7
12701: PPUSH
12702: LD_VAR 0 8
12706: PPUSH
12707: LD_VAR 0 4
12711: PPUSH
12712: LD_VAR 0 5
12716: PPUSH
12717: CALL 13936 0 5
12721: GO 12844
12723: LD_INT 302
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12768
12731: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12732: LD_VAR 0 6
12736: PPUSH
12737: LD_VAR 0 7
12741: PPUSH
12742: LD_VAR 0 8
12746: PPUSH
12747: LD_VAR 0 9
12751: PPUSH
12752: LD_VAR 0 4
12756: PPUSH
12757: LD_VAR 0 5
12761: PPUSH
12762: CALL 14027 0 6
12766: GO 12844
12768: LD_INT 303
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12813
12776: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12777: LD_VAR 0 6
12781: PPUSH
12782: LD_VAR 0 7
12786: PPUSH
12787: LD_VAR 0 8
12791: PPUSH
12792: LD_VAR 0 9
12796: PPUSH
12797: LD_VAR 0 4
12801: PPUSH
12802: LD_VAR 0 5
12806: PPUSH
12807: CALL 12849 0 6
12811: GO 12844
12813: LD_INT 304
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 12843
12821: POP
// hHackTeleport ( unit , x , y ) ; end ;
12822: LD_VAR 0 2
12826: PPUSH
12827: LD_VAR 0 4
12831: PPUSH
12832: LD_VAR 0 5
12836: PPUSH
12837: CALL 14620 0 3
12841: GO 12844
12843: POP
// end ;
12844: LD_VAR 0 12
12848: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12849: LD_INT 0
12851: PPUSH
12852: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12853: LD_VAR 0 1
12857: PUSH
12858: LD_INT 1
12860: LESS
12861: IFTRUE 12873
12863: PUSH
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 3
12871: GREATER
12872: OR
12873: IFTRUE 12891
12875: PUSH
12876: LD_VAR 0 5
12880: PPUSH
12881: LD_VAR 0 6
12885: PPUSH
12886: CALL_OW 428
12890: OR
12891: IFFALSE 12895
// exit ;
12893: GO 13623
// uc_side := your_side ;
12895: LD_ADDR_OWVAR 20
12899: PUSH
12900: LD_OWVAR 2
12904: ST_TO_ADDR
// uc_nation := nation ;
12905: LD_ADDR_OWVAR 21
12909: PUSH
12910: LD_VAR 0 1
12914: ST_TO_ADDR
// bc_level = 1 ;
12915: LD_ADDR_OWVAR 43
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// case btype of 1 :
12923: LD_VAR 0 2
12927: PUSH
12928: LD_INT 1
12930: DOUBLE
12931: EQUAL
12932: IFTRUE 12936
12934: GO 12947
12936: POP
// bc_type := b_depot ; 2 :
12937: LD_ADDR_OWVAR 42
12941: PUSH
12942: LD_INT 0
12944: ST_TO_ADDR
12945: GO 13567
12947: LD_INT 2
12949: DOUBLE
12950: EQUAL
12951: IFTRUE 12955
12953: GO 12966
12955: POP
// bc_type := b_warehouse ; 3 :
12956: LD_ADDR_OWVAR 42
12960: PUSH
12961: LD_INT 1
12963: ST_TO_ADDR
12964: GO 13567
12966: LD_INT 3
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12974
12972: GO 12985
12974: POP
// bc_type := b_lab ; 4 .. 9 :
12975: LD_ADDR_OWVAR 42
12979: PUSH
12980: LD_INT 6
12982: ST_TO_ADDR
12983: GO 13567
12985: LD_INT 4
12987: DOUBLE
12988: GREATEREQUAL
12989: IFFALSE 12997
12991: LD_INT 9
12993: DOUBLE
12994: LESSEQUAL
12995: IFTRUE 12999
12997: GO 13059
12999: POP
// begin bc_type := b_lab_half ;
13000: LD_ADDR_OWVAR 42
13004: PUSH
13005: LD_INT 7
13007: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13008: LD_ADDR_OWVAR 44
13012: PUSH
13013: LD_INT 10
13015: PUSH
13016: LD_INT 11
13018: PUSH
13019: LD_INT 12
13021: PUSH
13022: LD_INT 15
13024: PUSH
13025: LD_INT 14
13027: PUSH
13028: LD_INT 13
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: PUSH
13039: LD_VAR 0 2
13043: PUSH
13044: LD_INT 3
13046: MINUS
13047: ARRAY
13048: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13049: LD_ADDR_OWVAR 45
13053: PUSH
13054: LD_INT 9
13056: ST_TO_ADDR
// end ; 10 .. 13 :
13057: GO 13567
13059: LD_INT 10
13061: DOUBLE
13062: GREATEREQUAL
13063: IFFALSE 13071
13065: LD_INT 13
13067: DOUBLE
13068: LESSEQUAL
13069: IFTRUE 13073
13071: GO 13150
13073: POP
// begin bc_type := b_lab_full ;
13074: LD_ADDR_OWVAR 42
13078: PUSH
13079: LD_INT 8
13081: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13082: LD_ADDR_OWVAR 44
13086: PUSH
13087: LD_INT 10
13089: PUSH
13090: LD_INT 12
13092: PUSH
13093: LD_INT 14
13095: PUSH
13096: LD_INT 13
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: LD_VAR 0 2
13109: PUSH
13110: LD_INT 9
13112: MINUS
13113: ARRAY
13114: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13115: LD_ADDR_OWVAR 45
13119: PUSH
13120: LD_INT 11
13122: PUSH
13123: LD_INT 15
13125: PUSH
13126: LD_INT 12
13128: PUSH
13129: LD_INT 15
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: LD_VAR 0 2
13142: PUSH
13143: LD_INT 9
13145: MINUS
13146: ARRAY
13147: ST_TO_ADDR
// end ; 14 :
13148: GO 13567
13150: LD_INT 14
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13169
13158: POP
// bc_type := b_workshop ; 15 :
13159: LD_ADDR_OWVAR 42
13163: PUSH
13164: LD_INT 2
13166: ST_TO_ADDR
13167: GO 13567
13169: LD_INT 15
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13188
13177: POP
// bc_type := b_factory ; 16 :
13178: LD_ADDR_OWVAR 42
13182: PUSH
13183: LD_INT 3
13185: ST_TO_ADDR
13186: GO 13567
13188: LD_INT 16
13190: DOUBLE
13191: EQUAL
13192: IFTRUE 13196
13194: GO 13207
13196: POP
// bc_type := b_ext_gun ; 17 :
13197: LD_ADDR_OWVAR 42
13201: PUSH
13202: LD_INT 17
13204: ST_TO_ADDR
13205: GO 13567
13207: LD_INT 17
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13243
13215: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13216: LD_ADDR_OWVAR 42
13220: PUSH
13221: LD_INT 19
13223: PUSH
13224: LD_INT 23
13226: PUSH
13227: LD_INT 19
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: LD_VAR 0 1
13239: ARRAY
13240: ST_TO_ADDR
13241: GO 13567
13243: LD_INT 18
13245: DOUBLE
13246: EQUAL
13247: IFTRUE 13251
13249: GO 13262
13251: POP
// bc_type := b_ext_radar ; 19 :
13252: LD_ADDR_OWVAR 42
13256: PUSH
13257: LD_INT 20
13259: ST_TO_ADDR
13260: GO 13567
13262: LD_INT 19
13264: DOUBLE
13265: EQUAL
13266: IFTRUE 13270
13268: GO 13281
13270: POP
// bc_type := b_ext_radio ; 20 :
13271: LD_ADDR_OWVAR 42
13275: PUSH
13276: LD_INT 22
13278: ST_TO_ADDR
13279: GO 13567
13281: LD_INT 20
13283: DOUBLE
13284: EQUAL
13285: IFTRUE 13289
13287: GO 13300
13289: POP
// bc_type := b_ext_siberium ; 21 :
13290: LD_ADDR_OWVAR 42
13294: PUSH
13295: LD_INT 21
13297: ST_TO_ADDR
13298: GO 13567
13300: LD_INT 21
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13319
13308: POP
// bc_type := b_ext_computer ; 22 :
13309: LD_ADDR_OWVAR 42
13313: PUSH
13314: LD_INT 24
13316: ST_TO_ADDR
13317: GO 13567
13319: LD_INT 22
13321: DOUBLE
13322: EQUAL
13323: IFTRUE 13327
13325: GO 13338
13327: POP
// bc_type := b_ext_track ; 23 :
13328: LD_ADDR_OWVAR 42
13332: PUSH
13333: LD_INT 16
13335: ST_TO_ADDR
13336: GO 13567
13338: LD_INT 23
13340: DOUBLE
13341: EQUAL
13342: IFTRUE 13346
13344: GO 13357
13346: POP
// bc_type := b_ext_laser ; 24 :
13347: LD_ADDR_OWVAR 42
13351: PUSH
13352: LD_INT 25
13354: ST_TO_ADDR
13355: GO 13567
13357: LD_INT 24
13359: DOUBLE
13360: EQUAL
13361: IFTRUE 13365
13363: GO 13376
13365: POP
// bc_type := b_control_tower ; 25 :
13366: LD_ADDR_OWVAR 42
13370: PUSH
13371: LD_INT 36
13373: ST_TO_ADDR
13374: GO 13567
13376: LD_INT 25
13378: DOUBLE
13379: EQUAL
13380: IFTRUE 13384
13382: GO 13395
13384: POP
// bc_type := b_breastwork ; 26 :
13385: LD_ADDR_OWVAR 42
13389: PUSH
13390: LD_INT 31
13392: ST_TO_ADDR
13393: GO 13567
13395: LD_INT 26
13397: DOUBLE
13398: EQUAL
13399: IFTRUE 13403
13401: GO 13414
13403: POP
// bc_type := b_bunker ; 27 :
13404: LD_ADDR_OWVAR 42
13408: PUSH
13409: LD_INT 32
13411: ST_TO_ADDR
13412: GO 13567
13414: LD_INT 27
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13422
13420: GO 13433
13422: POP
// bc_type := b_turret ; 28 :
13423: LD_ADDR_OWVAR 42
13427: PUSH
13428: LD_INT 33
13430: ST_TO_ADDR
13431: GO 13567
13433: LD_INT 28
13435: DOUBLE
13436: EQUAL
13437: IFTRUE 13441
13439: GO 13452
13441: POP
// bc_type := b_armoury ; 29 :
13442: LD_ADDR_OWVAR 42
13446: PUSH
13447: LD_INT 4
13449: ST_TO_ADDR
13450: GO 13567
13452: LD_INT 29
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13471
13460: POP
// bc_type := b_barracks ; 30 :
13461: LD_ADDR_OWVAR 42
13465: PUSH
13466: LD_INT 5
13468: ST_TO_ADDR
13469: GO 13567
13471: LD_INT 30
13473: DOUBLE
13474: EQUAL
13475: IFTRUE 13479
13477: GO 13490
13479: POP
// bc_type := b_solar_power ; 31 :
13480: LD_ADDR_OWVAR 42
13484: PUSH
13485: LD_INT 27
13487: ST_TO_ADDR
13488: GO 13567
13490: LD_INT 31
13492: DOUBLE
13493: EQUAL
13494: IFTRUE 13498
13496: GO 13509
13498: POP
// bc_type := b_oil_power ; 32 :
13499: LD_ADDR_OWVAR 42
13503: PUSH
13504: LD_INT 26
13506: ST_TO_ADDR
13507: GO 13567
13509: LD_INT 32
13511: DOUBLE
13512: EQUAL
13513: IFTRUE 13517
13515: GO 13528
13517: POP
// bc_type := b_siberite_power ; 33 :
13518: LD_ADDR_OWVAR 42
13522: PUSH
13523: LD_INT 28
13525: ST_TO_ADDR
13526: GO 13567
13528: LD_INT 33
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13547
13536: POP
// bc_type := b_oil_mine ; 34 :
13537: LD_ADDR_OWVAR 42
13541: PUSH
13542: LD_INT 29
13544: ST_TO_ADDR
13545: GO 13567
13547: LD_INT 34
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13566
13555: POP
// bc_type := b_siberite_mine ; end ;
13556: LD_ADDR_OWVAR 42
13560: PUSH
13561: LD_INT 30
13563: ST_TO_ADDR
13564: GO 13567
13566: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13567: LD_ADDR_VAR 0 8
13571: PUSH
13572: LD_VAR 0 5
13576: PPUSH
13577: LD_VAR 0 6
13581: PPUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: CALL_OW 47
13591: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13592: LD_OWVAR 42
13596: PUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 33
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: IN
13607: IFFALSE 13623
// PlaceWeaponTurret ( b , weapon ) ;
13609: LD_VAR 0 8
13613: PPUSH
13614: LD_VAR 0 4
13618: PPUSH
13619: CALL_OW 431
// end ;
13623: LD_VAR 0 7
13627: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13628: LD_INT 0
13630: PPUSH
13631: PPUSH
13632: PPUSH
13633: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13634: LD_ADDR_VAR 0 4
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_OWVAR 2
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 30
13656: PUSH
13657: LD_INT 0
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 30
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 69
13687: ST_TO_ADDR
// if not tmp then
13688: LD_VAR 0 4
13692: NOT
13693: IFFALSE 13697
// exit ;
13695: GO 13756
// for i in tmp do
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: LD_VAR 0 4
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13754
// for j = 1 to 3 do
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: DOUBLE
13716: LD_INT 1
13718: DEC
13719: ST_TO_ADDR
13720: LD_INT 3
13722: PUSH
13723: FOR_TO
13724: IFFALSE 13750
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13726: LD_VAR 0 2
13730: PPUSH
13731: CALL_OW 274
13735: PPUSH
13736: LD_VAR 0 3
13740: PPUSH
13741: LD_INT 99999
13743: PPUSH
13744: CALL_OW 277
13748: GO 13723
13750: POP
13751: POP
13752: GO 13707
13754: POP
13755: POP
// end ;
13756: LD_VAR 0 1
13760: RET
// export function hHackSetLevel10 ; var i , j ; begin
13761: LD_INT 0
13763: PPUSH
13764: PPUSH
13765: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13766: LD_ADDR_VAR 0 2
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PPUSH
13781: CALL_OW 69
13785: PUSH
13786: FOR_IN
13787: IFFALSE 13839
// if IsSelected ( i ) then
13789: LD_VAR 0 2
13793: PPUSH
13794: CALL_OW 306
13798: IFFALSE 13837
// begin for j := 1 to 4 do
13800: LD_ADDR_VAR 0 3
13804: PUSH
13805: DOUBLE
13806: LD_INT 1
13808: DEC
13809: ST_TO_ADDR
13810: LD_INT 4
13812: PUSH
13813: FOR_TO
13814: IFFALSE 13835
// SetSkill ( i , j , 10 ) ;
13816: LD_VAR 0 2
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 10
13828: PPUSH
13829: CALL_OW 237
13833: GO 13813
13835: POP
13836: POP
// end ;
13837: GO 13786
13839: POP
13840: POP
// end ;
13841: LD_VAR 0 1
13845: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_OWVAR 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PPUSH
13882: CALL_OW 69
13886: PUSH
13887: FOR_IN
13888: IFFALSE 13929
// begin for j := 1 to 4 do
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_INT 4
13902: PUSH
13903: FOR_TO
13904: IFFALSE 13925
// SetSkill ( i , j , 10 ) ;
13906: LD_VAR 0 2
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 10
13918: PPUSH
13919: CALL_OW 237
13923: GO 13903
13925: POP
13926: POP
// end ;
13927: GO 13887
13929: POP
13930: POP
// end ;
13931: LD_VAR 0 1
13935: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13936: LD_INT 0
13938: PPUSH
// uc_side := your_side ;
13939: LD_ADDR_OWVAR 20
13943: PUSH
13944: LD_OWVAR 2
13948: ST_TO_ADDR
// uc_nation := nation ;
13949: LD_ADDR_OWVAR 21
13953: PUSH
13954: LD_VAR 0 1
13958: ST_TO_ADDR
// InitHc ;
13959: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13963: LD_INT 0
13965: PPUSH
13966: LD_VAR 0 2
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13980: LD_VAR 0 4
13984: PPUSH
13985: LD_VAR 0 5
13989: PPUSH
13990: CALL_OW 428
13994: PUSH
13995: LD_INT 0
13997: EQUAL
13998: IFFALSE 14022
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
14000: CALL_OW 44
14004: PPUSH
14005: LD_VAR 0 4
14009: PPUSH
14010: LD_VAR 0 5
14014: PPUSH
14015: LD_INT 1
14017: PPUSH
14018: CALL_OW 48
// end ;
14022: LD_VAR 0 6
14026: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14027: LD_INT 0
14029: PPUSH
14030: PPUSH
// uc_side := your_side ;
14031: LD_ADDR_OWVAR 20
14035: PUSH
14036: LD_OWVAR 2
14040: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14041: LD_VAR 0 1
14045: PUSH
14046: LD_INT 1
14048: PUSH
14049: LD_INT 2
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: LD_INT 4
14057: PUSH
14058: LD_INT 5
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: IN
14068: IFFALSE 14080
// uc_nation := nation_american else
14070: LD_ADDR_OWVAR 21
14074: PUSH
14075: LD_INT 1
14077: ST_TO_ADDR
14078: GO 14123
// if chassis in [ 11 , 12 , 13 , 14 ] then
14080: LD_VAR 0 1
14084: PUSH
14085: LD_INT 11
14087: PUSH
14088: LD_INT 12
14090: PUSH
14091: LD_INT 13
14093: PUSH
14094: LD_INT 14
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: IN
14103: IFFALSE 14115
// uc_nation := nation_arabian else
14105: LD_ADDR_OWVAR 21
14109: PUSH
14110: LD_INT 2
14112: ST_TO_ADDR
14113: GO 14123
// uc_nation := nation_russian ;
14115: LD_ADDR_OWVAR 21
14119: PUSH
14120: LD_INT 3
14122: ST_TO_ADDR
// vc_chassis := chassis ;
14123: LD_ADDR_OWVAR 37
14127: PUSH
14128: LD_VAR 0 1
14132: ST_TO_ADDR
// vc_engine := engine ;
14133: LD_ADDR_OWVAR 39
14137: PUSH
14138: LD_VAR 0 2
14142: ST_TO_ADDR
// vc_control := control ;
14143: LD_ADDR_OWVAR 38
14147: PUSH
14148: LD_VAR 0 3
14152: ST_TO_ADDR
// vc_weapon := weapon ;
14153: LD_ADDR_OWVAR 40
14157: PUSH
14158: LD_VAR 0 4
14162: ST_TO_ADDR
// un := CreateVehicle ;
14163: LD_ADDR_VAR 0 8
14167: PUSH
14168: CALL_OW 45
14172: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14173: LD_VAR 0 8
14177: PPUSH
14178: LD_INT 0
14180: PPUSH
14181: LD_INT 5
14183: PPUSH
14184: CALL_OW 12
14188: PPUSH
14189: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14193: LD_VAR 0 8
14197: PPUSH
14198: LD_VAR 0 5
14202: PPUSH
14203: LD_VAR 0 6
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 48
// end ;
14215: LD_VAR 0 7
14219: RET
// export hInvincible ; every 1 do
14220: GO 14222
14222: DISABLE
// hInvincible := [ ] ;
14223: LD_ADDR_EXP 59
14227: PUSH
14228: EMPTY
14229: ST_TO_ADDR
14230: END
// every 10 do var i ;
14231: GO 14233
14233: DISABLE
14234: LD_INT 0
14236: PPUSH
// begin enable ;
14237: ENABLE
// if not hInvincible then
14238: LD_EXP 59
14242: NOT
14243: IFFALSE 14247
// exit ;
14245: GO 14291
// for i in hInvincible do
14247: LD_ADDR_VAR 0 1
14251: PUSH
14252: LD_EXP 59
14256: PUSH
14257: FOR_IN
14258: IFFALSE 14289
// if GetLives ( i ) < 1000 then
14260: LD_VAR 0 1
14264: PPUSH
14265: CALL_OW 256
14269: PUSH
14270: LD_INT 1000
14272: LESS
14273: IFFALSE 14287
// SetLives ( i , 1000 ) ;
14275: LD_VAR 0 1
14279: PPUSH
14280: LD_INT 1000
14282: PPUSH
14283: CALL_OW 234
14287: GO 14257
14289: POP
14290: POP
// end ;
14291: PPOPN 1
14293: END
// export function hHackInvincible ; var i ; begin
14294: LD_INT 0
14296: PPUSH
14297: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: LD_INT 21
14308: PUSH
14309: LD_INT 1
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 2
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14398
// if IsSelected ( i ) then
14339: LD_VAR 0 2
14343: PPUSH
14344: CALL_OW 306
14348: IFFALSE 14396
// begin if i in hInvincible then
14350: LD_VAR 0 2
14354: PUSH
14355: LD_EXP 59
14359: IN
14360: IFFALSE 14380
// hInvincible := hInvincible diff i else
14362: LD_ADDR_EXP 59
14366: PUSH
14367: LD_EXP 59
14371: PUSH
14372: LD_VAR 0 2
14376: DIFF
14377: ST_TO_ADDR
14378: GO 14396
// hInvincible := hInvincible union i ;
14380: LD_ADDR_EXP 59
14384: PUSH
14385: LD_EXP 59
14389: PUSH
14390: LD_VAR 0 2
14394: UNION
14395: ST_TO_ADDR
// end ;
14396: GO 14336
14398: POP
14399: POP
// end ;
14400: LD_VAR 0 1
14404: RET
// export function hHackInvisible ; var i , j ; begin
14405: LD_INT 0
14407: PPUSH
14408: PPUSH
14409: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: LD_INT 21
14417: PUSH
14418: LD_INT 1
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: PUSH
14430: FOR_IN
14431: IFFALSE 14455
// if IsSelected ( i ) then
14433: LD_VAR 0 2
14437: PPUSH
14438: CALL_OW 306
14442: IFFALSE 14453
// ComForceInvisible ( i ) ;
14444: LD_VAR 0 2
14448: PPUSH
14449: CALL_OW 496
14453: GO 14430
14455: POP
14456: POP
// end ;
14457: LD_VAR 0 1
14461: RET
// export function hHackChangeYourSide ; begin
14462: LD_INT 0
14464: PPUSH
// if your_side = 8 then
14465: LD_OWVAR 2
14469: PUSH
14470: LD_INT 8
14472: EQUAL
14473: IFFALSE 14485
// your_side := 0 else
14475: LD_ADDR_OWVAR 2
14479: PUSH
14480: LD_INT 0
14482: ST_TO_ADDR
14483: GO 14499
// your_side := your_side + 1 ;
14485: LD_ADDR_OWVAR 2
14489: PUSH
14490: LD_OWVAR 2
14494: PUSH
14495: LD_INT 1
14497: PLUS
14498: ST_TO_ADDR
// end ;
14499: LD_VAR 0 1
14503: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14504: LD_INT 0
14506: PPUSH
14507: PPUSH
14508: PPUSH
// for i in all_units do
14509: LD_ADDR_VAR 0 2
14513: PUSH
14514: LD_OWVAR 3
14518: PUSH
14519: FOR_IN
14520: IFFALSE 14598
// if IsSelected ( i ) then
14522: LD_VAR 0 2
14526: PPUSH
14527: CALL_OW 306
14531: IFFALSE 14596
// begin j := GetSide ( i ) ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_VAR 0 2
14542: PPUSH
14543: CALL_OW 255
14547: ST_TO_ADDR
// if j = 8 then
14548: LD_VAR 0 3
14552: PUSH
14553: LD_INT 8
14555: EQUAL
14556: IFFALSE 14568
// j := 0 else
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_INT 0
14565: ST_TO_ADDR
14566: GO 14582
// j := j + 1 ;
14568: LD_ADDR_VAR 0 3
14572: PUSH
14573: LD_VAR 0 3
14577: PUSH
14578: LD_INT 1
14580: PLUS
14581: ST_TO_ADDR
// SetSide ( i , j ) ;
14582: LD_VAR 0 2
14586: PPUSH
14587: LD_VAR 0 3
14591: PPUSH
14592: CALL_OW 235
// end ;
14596: GO 14519
14598: POP
14599: POP
// end ;
14600: LD_VAR 0 1
14604: RET
// export function hHackFog ; begin
14605: LD_INT 0
14607: PPUSH
// FogOff ( true ) ;
14608: LD_INT 1
14610: PPUSH
14611: CALL_OW 344
// end ;
14615: LD_VAR 0 1
14619: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14620: LD_INT 0
14622: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14623: LD_VAR 0 1
14627: PPUSH
14628: LD_VAR 0 2
14632: PPUSH
14633: LD_VAR 0 3
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: CALL_OW 483
// CenterOnXY ( x , y ) ;
14648: LD_VAR 0 2
14652: PPUSH
14653: LD_VAR 0 3
14657: PPUSH
14658: CALL_OW 84
// end ;
14662: LD_VAR 0 4
14666: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14667: LD_INT 0
14669: PPUSH
14670: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14671: LD_VAR 0 1
14675: NOT
14676: IFTRUE 14695
14678: PUSH
14679: LD_VAR 0 2
14683: PPUSH
14684: LD_VAR 0 3
14688: PPUSH
14689: CALL_OW 488
14693: NOT
14694: OR
14695: IFTRUE 14730
14697: PUSH
14698: LD_VAR 0 1
14702: PPUSH
14703: CALL_OW 266
14707: PUSH
14708: LD_INT 3
14710: NONEQUAL
14711: IFFALSE 14729
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 247
14723: PUSH
14724: LD_INT 1
14726: EQUAL
14727: NOT
14728: AND
14729: OR
14730: IFFALSE 14734
// exit ;
14732: GO 15016
// if GetType ( factory ) = unit_human then
14734: LD_VAR 0 1
14738: PPUSH
14739: CALL_OW 247
14743: PUSH
14744: LD_INT 1
14746: EQUAL
14747: IFFALSE 14764
// factory := IsInUnit ( factory ) ;
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 310
14763: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14764: LD_VAR 0 1
14768: PPUSH
14769: CALL_OW 266
14773: PUSH
14774: LD_INT 3
14776: NONEQUAL
14777: IFFALSE 14781
// exit ;
14779: GO 15016
// for i := 1 to Count ( factoryWaypoints ) do
14781: LD_ADDR_VAR 0 5
14785: PUSH
14786: DOUBLE
14787: LD_INT 1
14789: DEC
14790: ST_TO_ADDR
14791: LD_EXP 60
14795: PPUSH
14796: CALL 18346 0 1
14800: PUSH
14801: FOR_TO
14802: IFFALSE 14964
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14804: LD_VAR 0 2
14808: PPUSH
14809: LD_VAR 0 3
14813: PPUSH
14814: CALL_OW 428
14818: PUSH
14819: LD_EXP 60
14823: PUSH
14824: LD_VAR 0 5
14828: ARRAY
14829: PUSH
14830: LD_INT 2
14832: ARRAY
14833: EQUAL
14834: IFFALSE 14866
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14836: LD_ADDR_EXP 60
14840: PUSH
14841: LD_EXP 60
14845: PPUSH
14846: LD_VAR 0 5
14850: PPUSH
14851: CALL_OW 3
14855: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14856: CALL 15021 0 0
// exit ;
14860: POP
14861: POP
14862: GO 15016
// end else
14864: GO 14962
// if factory = factoryWaypoints [ i ] [ 2 ] then
14866: LD_VAR 0 1
14870: PUSH
14871: LD_EXP 60
14875: PUSH
14876: LD_VAR 0 5
14880: ARRAY
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: EQUAL
14886: IFFALSE 14962
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14888: LD_ADDR_EXP 60
14892: PUSH
14893: LD_EXP 60
14897: PPUSH
14898: LD_VAR 0 5
14902: PPUSH
14903: CALL_OW 3
14907: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14908: LD_ADDR_EXP 60
14912: PUSH
14913: LD_EXP 60
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 255
14927: PUSH
14928: LD_VAR 0 1
14932: PUSH
14933: LD_VAR 0 2
14937: PUSH
14938: LD_VAR 0 3
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL 54322 0 2
14953: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14954: CALL 15021 0 0
// exit ;
14958: POP
14959: POP
14960: GO 15016
// end ; end ;
14962: GO 14801
14964: POP
14965: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14966: LD_ADDR_EXP 60
14970: PUSH
14971: LD_EXP 60
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 255
14985: PUSH
14986: LD_VAR 0 1
14990: PUSH
14991: LD_VAR 0 2
14995: PUSH
14996: LD_VAR 0 3
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: PPUSH
15007: CALL 54322 0 2
15011: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15012: CALL 15021 0 0
// end ;
15016: LD_VAR 0 4
15020: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
15025: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15026: LD_STRING resetFactoryWaypoint();
15028: PPUSH
15029: CALL_OW 559
// if factoryWaypoints then
15033: LD_EXP 60
15037: IFFALSE 15158
// begin list := factoryWaypoints ;
15039: LD_ADDR_VAR 0 3
15043: PUSH
15044: LD_EXP 60
15048: ST_TO_ADDR
// for i := 1 to list do
15049: LD_ADDR_VAR 0 2
15053: PUSH
15054: DOUBLE
15055: LD_INT 1
15057: DEC
15058: ST_TO_ADDR
15059: LD_VAR 0 3
15063: PUSH
15064: FOR_TO
15065: IFFALSE 15156
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15067: LD_STRING setFactoryWaypointXY(
15069: PUSH
15070: LD_VAR 0 3
15074: PUSH
15075: LD_VAR 0 2
15079: ARRAY
15080: PUSH
15081: LD_INT 1
15083: ARRAY
15084: STR
15085: PUSH
15086: LD_STRING ,
15088: STR
15089: PUSH
15090: LD_VAR 0 3
15094: PUSH
15095: LD_VAR 0 2
15099: ARRAY
15100: PUSH
15101: LD_INT 2
15103: ARRAY
15104: STR
15105: PUSH
15106: LD_STRING ,
15108: STR
15109: PUSH
15110: LD_VAR 0 3
15114: PUSH
15115: LD_VAR 0 2
15119: ARRAY
15120: PUSH
15121: LD_INT 3
15123: ARRAY
15124: STR
15125: PUSH
15126: LD_STRING ,
15128: STR
15129: PUSH
15130: LD_VAR 0 3
15134: PUSH
15135: LD_VAR 0 2
15139: ARRAY
15140: PUSH
15141: LD_INT 4
15143: ARRAY
15144: STR
15145: PUSH
15146: LD_STRING )
15148: STR
15149: PPUSH
15150: CALL_OW 559
15154: GO 15064
15156: POP
15157: POP
// end ; end ;
15158: LD_VAR 0 1
15162: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15163: LD_INT 0
15165: PPUSH
// if HexInfo ( x , y ) = warehouse then
15166: LD_VAR 0 2
15170: PPUSH
15171: LD_VAR 0 3
15175: PPUSH
15176: CALL_OW 428
15180: PUSH
15181: LD_VAR 0 1
15185: EQUAL
15186: IFFALSE 15213
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15188: LD_ADDR_EXP 62
15192: PUSH
15193: LD_EXP 62
15197: PPUSH
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_INT 0
15205: PPUSH
15206: CALL_OW 1
15210: ST_TO_ADDR
15211: GO 15264
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15213: LD_ADDR_EXP 62
15217: PUSH
15218: LD_EXP 62
15222: PPUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: LD_VAR 0 1
15232: PPUSH
15233: CALL_OW 255
15237: PUSH
15238: LD_VAR 0 1
15242: PUSH
15243: LD_VAR 0 2
15247: PUSH
15248: LD_VAR 0 3
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: PPUSH
15259: CALL_OW 1
15263: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15264: CALL 15273 0 0
// end ;
15268: LD_VAR 0 4
15272: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15273: LD_INT 0
15275: PPUSH
15276: PPUSH
15277: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15278: LD_STRING resetWarehouseGatheringPoints();
15280: PPUSH
15281: CALL_OW 559
// if warehouseGatheringPoints then
15285: LD_EXP 62
15289: IFFALSE 15415
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15291: LD_ADDR_VAR 0 3
15295: PUSH
15296: LD_EXP 62
15300: PPUSH
15301: CALL 58256 0 1
15305: ST_TO_ADDR
// for i := 1 to list do
15306: LD_ADDR_VAR 0 2
15310: PUSH
15311: DOUBLE
15312: LD_INT 1
15314: DEC
15315: ST_TO_ADDR
15316: LD_VAR 0 3
15320: PUSH
15321: FOR_TO
15322: IFFALSE 15413
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15324: LD_STRING setWarehouseGatheringPointXY(
15326: PUSH
15327: LD_VAR 0 3
15331: PUSH
15332: LD_VAR 0 2
15336: ARRAY
15337: PUSH
15338: LD_INT 1
15340: ARRAY
15341: STR
15342: PUSH
15343: LD_STRING ,
15345: STR
15346: PUSH
15347: LD_VAR 0 3
15351: PUSH
15352: LD_VAR 0 2
15356: ARRAY
15357: PUSH
15358: LD_INT 2
15360: ARRAY
15361: STR
15362: PUSH
15363: LD_STRING ,
15365: STR
15366: PUSH
15367: LD_VAR 0 3
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: PUSH
15378: LD_INT 3
15380: ARRAY
15381: STR
15382: PUSH
15383: LD_STRING ,
15385: STR
15386: PUSH
15387: LD_VAR 0 3
15391: PUSH
15392: LD_VAR 0 2
15396: ARRAY
15397: PUSH
15398: LD_INT 4
15400: ARRAY
15401: STR
15402: PUSH
15403: LD_STRING )
15405: STR
15406: PPUSH
15407: CALL_OW 559
15411: GO 15321
15413: POP
15414: POP
// end ; end ;
15415: LD_VAR 0 1
15419: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15420: LD_EXP 62
15424: IFFALSE 16119
15426: GO 15428
15428: DISABLE
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
// begin enable ;
15440: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_EXP 62
15450: PPUSH
15451: CALL 58256 0 1
15455: ST_TO_ADDR
// if not list then
15456: LD_VAR 0 3
15460: NOT
15461: IFFALSE 15465
// exit ;
15463: GO 16119
// for i := 1 to list do
15465: LD_ADDR_VAR 0 1
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_VAR 0 3
15479: PUSH
15480: FOR_TO
15481: IFFALSE 16117
// begin depot := list [ i ] [ 2 ] ;
15483: LD_ADDR_VAR 0 8
15487: PUSH
15488: LD_VAR 0 3
15492: PUSH
15493: LD_VAR 0 1
15497: ARRAY
15498: PUSH
15499: LD_INT 2
15501: ARRAY
15502: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15503: LD_ADDR_VAR 0 5
15507: PUSH
15508: LD_VAR 0 3
15512: PUSH
15513: LD_VAR 0 1
15517: ARRAY
15518: PUSH
15519: LD_INT 1
15521: ARRAY
15522: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15523: LD_VAR 0 8
15527: PPUSH
15528: CALL_OW 301
15532: IFTRUE 15551
15534: PUSH
15535: LD_VAR 0 5
15539: PUSH
15540: LD_VAR 0 8
15544: PPUSH
15545: CALL_OW 255
15549: NONEQUAL
15550: OR
15551: IFFALSE 15580
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15553: LD_ADDR_EXP 62
15557: PUSH
15558: LD_EXP 62
15562: PPUSH
15563: LD_VAR 0 8
15567: PPUSH
15568: LD_INT 0
15570: PPUSH
15571: CALL_OW 1
15575: ST_TO_ADDR
// exit ;
15576: POP
15577: POP
15578: GO 16119
// end ; x := list [ i ] [ 3 ] ;
15580: LD_ADDR_VAR 0 6
15584: PUSH
15585: LD_VAR 0 3
15589: PUSH
15590: LD_VAR 0 1
15594: ARRAY
15595: PUSH
15596: LD_INT 3
15598: ARRAY
15599: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15600: LD_ADDR_VAR 0 7
15604: PUSH
15605: LD_VAR 0 3
15609: PUSH
15610: LD_VAR 0 1
15614: ARRAY
15615: PUSH
15616: LD_INT 4
15618: ARRAY
15619: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15620: LD_ADDR_VAR 0 9
15624: PUSH
15625: LD_VAR 0 6
15629: PPUSH
15630: LD_VAR 0 7
15634: PPUSH
15635: LD_INT 16
15637: PPUSH
15638: CALL 56830 0 3
15642: ST_TO_ADDR
// if not cratesNearbyPoint then
15643: LD_VAR 0 9
15647: NOT
15648: IFFALSE 15654
// exit ;
15650: POP
15651: POP
15652: GO 16119
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15654: LD_ADDR_VAR 0 4
15658: PUSH
15659: LD_INT 22
15661: PUSH
15662: LD_VAR 0 5
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 3
15673: PUSH
15674: LD_INT 60
15676: PUSH
15677: EMPTY
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 91
15686: PUSH
15687: LD_VAR 0 8
15691: PUSH
15692: LD_INT 6
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: LD_INT 25
15705: PUSH
15706: LD_INT 2
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 25
15715: PUSH
15716: LD_INT 16
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 69
15738: PUSH
15739: LD_VAR 0 8
15743: PPUSH
15744: CALL_OW 313
15748: PPUSH
15749: LD_INT 3
15751: PUSH
15752: LD_INT 60
15754: PUSH
15755: EMPTY
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: LD_INT 25
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 25
15777: PUSH
15778: LD_INT 16
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 72
15798: UNION
15799: ST_TO_ADDR
// if tmp then
15800: LD_VAR 0 4
15804: IFFALSE 15884
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15806: LD_ADDR_VAR 0 4
15810: PUSH
15811: LD_VAR 0 4
15815: PPUSH
15816: LD_INT 3
15818: PPUSH
15819: CALL 54637 0 2
15823: ST_TO_ADDR
// for j in tmp do
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_VAR 0 4
15833: PUSH
15834: FOR_IN
15835: IFFALSE 15878
// begin if IsInUnit ( j ) then
15837: LD_VAR 0 2
15841: PPUSH
15842: CALL_OW 310
15846: IFFALSE 15857
// ComExit ( j ) ;
15848: LD_VAR 0 2
15852: PPUSH
15853: CALL 54720 0 1
// AddComCollect ( j , x , y ) ;
15857: LD_VAR 0 2
15861: PPUSH
15862: LD_VAR 0 6
15866: PPUSH
15867: LD_VAR 0 7
15871: PPUSH
15872: CALL_OW 177
// end ;
15876: GO 15834
15878: POP
15879: POP
// exit ;
15880: POP
15881: POP
15882: GO 16119
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15884: LD_ADDR_VAR 0 4
15888: PUSH
15889: LD_INT 22
15891: PUSH
15892: LD_VAR 0 5
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 91
15903: PUSH
15904: LD_VAR 0 8
15908: PUSH
15909: LD_INT 8
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 2
15919: PUSH
15920: LD_INT 34
15922: PUSH
15923: LD_INT 12
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 34
15932: PUSH
15933: LD_INT 51
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 34
15942: PUSH
15943: LD_INT 32
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 34
15952: PUSH
15953: LD_INT 89
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if tmp then
15977: LD_VAR 0 4
15981: IFFALSE 16115
// begin for j in tmp do
15983: LD_ADDR_VAR 0 2
15987: PUSH
15988: LD_VAR 0 4
15992: PUSH
15993: FOR_IN
15994: IFFALSE 16113
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15996: LD_VAR 0 2
16000: PPUSH
16001: CALL_OW 262
16005: PUSH
16006: LD_INT 3
16008: EQUAL
16009: IFTRUE 16026
16011: PUSH
16012: LD_VAR 0 2
16016: PPUSH
16017: CALL_OW 261
16021: PUSH
16022: LD_INT 20
16024: GREATER
16025: OR
16026: IFFALSE 16040
16028: PUSH
16029: LD_VAR 0 2
16033: PPUSH
16034: CALL_OW 314
16038: NOT
16039: AND
16040: IFFALSE 16070
16042: PUSH
16043: LD_VAR 0 2
16047: PPUSH
16048: CALL_OW 263
16052: PUSH
16053: LD_INT 1
16055: NONEQUAL
16056: IFTRUE 16069
16058: PUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: CALL_OW 311
16068: OR
16069: AND
16070: IFFALSE 16111
// begin ComCollect ( j , x , y ) ;
16072: LD_VAR 0 2
16076: PPUSH
16077: LD_VAR 0 6
16081: PPUSH
16082: LD_VAR 0 7
16086: PPUSH
16087: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 8
16100: PPUSH
16101: CALL_OW 172
// exit ;
16105: POP
16106: POP
16107: POP
16108: POP
16109: GO 16119
// end ;
16111: GO 15993
16113: POP
16114: POP
// end ; end ;
16115: GO 15480
16117: POP
16118: POP
// end ; end_of_file
16119: PPOPN 9
16121: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16122: LD_INT 0
16124: PPUSH
16125: PPUSH
// if exist_mode then
16126: LD_VAR 0 2
16130: IFFALSE 16176
// begin unit := CreateCharacter ( prefix & ident ) ;
16132: LD_ADDR_VAR 0 5
16136: PUSH
16137: LD_VAR 0 3
16141: PUSH
16142: LD_VAR 0 1
16146: STR
16147: PPUSH
16148: CALL_OW 34
16152: ST_TO_ADDR
// if unit then
16153: LD_VAR 0 5
16157: IFFALSE 16174
// DeleteCharacters ( prefix & ident ) ;
16159: LD_VAR 0 3
16163: PUSH
16164: LD_VAR 0 1
16168: STR
16169: PPUSH
16170: CALL_OW 40
// end else
16174: GO 16191
// unit := NewCharacter ( ident ) ;
16176: LD_ADDR_VAR 0 5
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 25
16190: ST_TO_ADDR
// result := unit ;
16191: LD_ADDR_VAR 0 4
16195: PUSH
16196: LD_VAR 0 5
16200: ST_TO_ADDR
// end ;
16201: LD_VAR 0 4
16205: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16206: LD_INT 0
16208: PPUSH
16209: PPUSH
// if exist_mode then
16210: LD_VAR 0 2
16214: IFFALSE 16239
// unit := CreateCharacter ( prefix & ident ) else
16216: LD_ADDR_VAR 0 5
16220: PUSH
16221: LD_VAR 0 3
16225: PUSH
16226: LD_VAR 0 1
16230: STR
16231: PPUSH
16232: CALL_OW 34
16236: ST_TO_ADDR
16237: GO 16254
// unit := NewCharacter ( ident ) ;
16239: LD_ADDR_VAR 0 5
16243: PUSH
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 25
16253: ST_TO_ADDR
// result := unit ;
16254: LD_ADDR_VAR 0 4
16258: PUSH
16259: LD_VAR 0 5
16263: ST_TO_ADDR
// end ;
16264: LD_VAR 0 4
16268: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
// if not side or not nation then
16273: LD_VAR 0 1
16277: NOT
16278: IFTRUE 16287
16280: PUSH
16281: LD_VAR 0 2
16285: NOT
16286: OR
16287: IFFALSE 16291
// exit ;
16289: GO 17085
// case nation of nation_american :
16291: LD_VAR 0 2
16295: PUSH
16296: LD_INT 1
16298: DOUBLE
16299: EQUAL
16300: IFTRUE 16304
16302: GO 16526
16304: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
16305: LD_ADDR_VAR 0 4
16309: PUSH
16310: LD_INT 35
16312: PUSH
16313: LD_INT 45
16315: PUSH
16316: LD_INT 46
16318: PUSH
16319: LD_INT 47
16321: PUSH
16322: LD_INT 82
16324: PUSH
16325: LD_INT 83
16327: PUSH
16328: LD_INT 84
16330: PUSH
16331: LD_INT 85
16333: PUSH
16334: LD_INT 86
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: LD_INT 6
16345: PUSH
16346: LD_INT 15
16348: PUSH
16349: LD_INT 16
16351: PUSH
16352: LD_INT 7
16354: PUSH
16355: LD_INT 12
16357: PUSH
16358: LD_INT 13
16360: PUSH
16361: LD_INT 10
16363: PUSH
16364: LD_INT 14
16366: PUSH
16367: LD_INT 20
16369: PUSH
16370: LD_INT 21
16372: PUSH
16373: LD_INT 22
16375: PUSH
16376: LD_INT 25
16378: PUSH
16379: LD_INT 32
16381: PUSH
16382: LD_INT 27
16384: PUSH
16385: LD_INT 36
16387: PUSH
16388: LD_INT 69
16390: PUSH
16391: LD_INT 39
16393: PUSH
16394: LD_INT 34
16396: PUSH
16397: LD_INT 40
16399: PUSH
16400: LD_INT 48
16402: PUSH
16403: LD_INT 49
16405: PUSH
16406: LD_INT 50
16408: PUSH
16409: LD_INT 51
16411: PUSH
16412: LD_INT 52
16414: PUSH
16415: LD_INT 53
16417: PUSH
16418: LD_INT 54
16420: PUSH
16421: LD_INT 55
16423: PUSH
16424: LD_INT 56
16426: PUSH
16427: LD_INT 57
16429: PUSH
16430: LD_INT 58
16432: PUSH
16433: LD_INT 59
16435: PUSH
16436: LD_INT 60
16438: PUSH
16439: LD_INT 61
16441: PUSH
16442: LD_INT 62
16444: PUSH
16445: LD_INT 80
16447: PUSH
16448: LD_INT 82
16450: PUSH
16451: LD_INT 83
16453: PUSH
16454: LD_INT 84
16456: PUSH
16457: LD_INT 85
16459: PUSH
16460: LD_INT 86
16462: PUSH
16463: LD_INT 90
16465: PUSH
16466: LD_INT 93
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: ST_TO_ADDR
16524: GO 17007
16526: LD_INT 2
16528: DOUBLE
16529: EQUAL
16530: IFTRUE 16534
16532: GO 16768
16534: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16535: LD_ADDR_VAR 0 4
16539: PUSH
16540: LD_INT 35
16542: PUSH
16543: LD_INT 45
16545: PUSH
16546: LD_INT 46
16548: PUSH
16549: LD_INT 47
16551: PUSH
16552: LD_INT 82
16554: PUSH
16555: LD_INT 83
16557: PUSH
16558: LD_INT 84
16560: PUSH
16561: LD_INT 85
16563: PUSH
16564: LD_INT 87
16566: PUSH
16567: LD_INT 70
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: LD_INT 11
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: LD_INT 4
16581: PUSH
16582: LD_INT 5
16584: PUSH
16585: LD_INT 6
16587: PUSH
16588: LD_INT 15
16590: PUSH
16591: LD_INT 18
16593: PUSH
16594: LD_INT 7
16596: PUSH
16597: LD_INT 17
16599: PUSH
16600: LD_INT 8
16602: PUSH
16603: LD_INT 20
16605: PUSH
16606: LD_INT 21
16608: PUSH
16609: LD_INT 22
16611: PUSH
16612: LD_INT 72
16614: PUSH
16615: LD_INT 26
16617: PUSH
16618: LD_INT 69
16620: PUSH
16621: LD_INT 39
16623: PUSH
16624: LD_INT 40
16626: PUSH
16627: LD_INT 41
16629: PUSH
16630: LD_INT 42
16632: PUSH
16633: LD_INT 43
16635: PUSH
16636: LD_INT 48
16638: PUSH
16639: LD_INT 49
16641: PUSH
16642: LD_INT 50
16644: PUSH
16645: LD_INT 51
16647: PUSH
16648: LD_INT 52
16650: PUSH
16651: LD_INT 53
16653: PUSH
16654: LD_INT 54
16656: PUSH
16657: LD_INT 55
16659: PUSH
16660: LD_INT 56
16662: PUSH
16663: LD_INT 60
16665: PUSH
16666: LD_INT 61
16668: PUSH
16669: LD_INT 62
16671: PUSH
16672: LD_INT 66
16674: PUSH
16675: LD_INT 67
16677: PUSH
16678: LD_INT 68
16680: PUSH
16681: LD_INT 81
16683: PUSH
16684: LD_INT 82
16686: PUSH
16687: LD_INT 83
16689: PUSH
16690: LD_INT 84
16692: PUSH
16693: LD_INT 85
16695: PUSH
16696: LD_INT 87
16698: PUSH
16699: LD_INT 88
16701: PUSH
16702: LD_INT 92
16704: PUSH
16705: LD_INT 94
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: ST_TO_ADDR
16766: GO 17007
16768: LD_INT 3
16770: DOUBLE
16771: EQUAL
16772: IFTRUE 16776
16774: GO 17006
16776: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16777: LD_ADDR_VAR 0 4
16781: PUSH
16782: LD_INT 46
16784: PUSH
16785: LD_INT 47
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: LD_INT 82
16796: PUSH
16797: LD_INT 83
16799: PUSH
16800: LD_INT 84
16802: PUSH
16803: LD_INT 85
16805: PUSH
16806: LD_INT 86
16808: PUSH
16809: LD_INT 11
16811: PUSH
16812: LD_INT 9
16814: PUSH
16815: LD_INT 20
16817: PUSH
16818: LD_INT 19
16820: PUSH
16821: LD_INT 21
16823: PUSH
16824: LD_INT 24
16826: PUSH
16827: LD_INT 22
16829: PUSH
16830: LD_INT 25
16832: PUSH
16833: LD_INT 28
16835: PUSH
16836: LD_INT 29
16838: PUSH
16839: LD_INT 30
16841: PUSH
16842: LD_INT 31
16844: PUSH
16845: LD_INT 37
16847: PUSH
16848: LD_INT 38
16850: PUSH
16851: LD_INT 32
16853: PUSH
16854: LD_INT 27
16856: PUSH
16857: LD_INT 33
16859: PUSH
16860: LD_INT 69
16862: PUSH
16863: LD_INT 39
16865: PUSH
16866: LD_INT 34
16868: PUSH
16869: LD_INT 40
16871: PUSH
16872: LD_INT 71
16874: PUSH
16875: LD_INT 23
16877: PUSH
16878: LD_INT 44
16880: PUSH
16881: LD_INT 48
16883: PUSH
16884: LD_INT 49
16886: PUSH
16887: LD_INT 50
16889: PUSH
16890: LD_INT 51
16892: PUSH
16893: LD_INT 52
16895: PUSH
16896: LD_INT 53
16898: PUSH
16899: LD_INT 54
16901: PUSH
16902: LD_INT 55
16904: PUSH
16905: LD_INT 56
16907: PUSH
16908: LD_INT 57
16910: PUSH
16911: LD_INT 58
16913: PUSH
16914: LD_INT 59
16916: PUSH
16917: LD_INT 63
16919: PUSH
16920: LD_INT 64
16922: PUSH
16923: LD_INT 65
16925: PUSH
16926: LD_INT 82
16928: PUSH
16929: LD_INT 83
16931: PUSH
16932: LD_INT 84
16934: PUSH
16935: LD_INT 85
16937: PUSH
16938: LD_INT 86
16940: PUSH
16941: LD_INT 89
16943: PUSH
16944: LD_INT 91
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: ST_TO_ADDR
17004: GO 17007
17006: POP
// if state > - 1 and state < 3 then
17007: LD_VAR 0 3
17011: PUSH
17012: LD_INT 1
17014: NEG
17015: GREATER
17016: IFFALSE 17028
17018: PUSH
17019: LD_VAR 0 3
17023: PUSH
17024: LD_INT 3
17026: LESS
17027: AND
17028: IFFALSE 17085
// for i in result do
17030: LD_ADDR_VAR 0 5
17034: PUSH
17035: LD_VAR 0 4
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17083
// if GetTech ( i , side ) <> state then
17043: LD_VAR 0 5
17047: PPUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: CALL_OW 321
17057: PUSH
17058: LD_VAR 0 3
17062: NONEQUAL
17063: IFFALSE 17081
// result := result diff i ;
17065: LD_ADDR_VAR 0 4
17069: PUSH
17070: LD_VAR 0 4
17074: PUSH
17075: LD_VAR 0 5
17079: DIFF
17080: ST_TO_ADDR
17081: GO 17040
17083: POP
17084: POP
// end ;
17085: LD_VAR 0 4
17089: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17090: LD_INT 0
17092: PPUSH
17093: PPUSH
17094: PPUSH
// result := true ;
17095: LD_ADDR_VAR 0 3
17099: PUSH
17100: LD_INT 1
17102: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17103: LD_ADDR_VAR 0 5
17107: PUSH
17108: LD_VAR 0 2
17112: PPUSH
17113: CALL_OW 480
17117: ST_TO_ADDR
// if not tmp then
17118: LD_VAR 0 5
17122: NOT
17123: IFFALSE 17127
// exit ;
17125: GO 17176
// for i in tmp do
17127: LD_ADDR_VAR 0 4
17131: PUSH
17132: LD_VAR 0 5
17136: PUSH
17137: FOR_IN
17138: IFFALSE 17174
// if GetTech ( i , side ) <> state_researched then
17140: LD_VAR 0 4
17144: PPUSH
17145: LD_VAR 0 1
17149: PPUSH
17150: CALL_OW 321
17154: PUSH
17155: LD_INT 2
17157: NONEQUAL
17158: IFFALSE 17172
// begin result := false ;
17160: LD_ADDR_VAR 0 3
17164: PUSH
17165: LD_INT 0
17167: ST_TO_ADDR
// exit ;
17168: POP
17169: POP
17170: GO 17176
// end ;
17172: GO 17137
17174: POP
17175: POP
// end ;
17176: LD_VAR 0 3
17180: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17181: LD_INT 0
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
17192: PPUSH
17193: PPUSH
17194: PPUSH
17195: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17196: LD_VAR 0 1
17200: NOT
17201: IFTRUE 17218
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 257
17213: PUSH
17214: LD_INT 9
17216: NONEQUAL
17217: OR
17218: IFFALSE 17222
// exit ;
17220: GO 17801
// side := GetSide ( unit ) ;
17222: LD_ADDR_VAR 0 9
17226: PUSH
17227: LD_VAR 0 1
17231: PPUSH
17232: CALL_OW 255
17236: ST_TO_ADDR
// tech_space := tech_spacanom ;
17237: LD_ADDR_VAR 0 12
17241: PUSH
17242: LD_INT 29
17244: ST_TO_ADDR
// tech_time := tech_taurad ;
17245: LD_ADDR_VAR 0 13
17249: PUSH
17250: LD_INT 28
17252: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17253: LD_ADDR_VAR 0 11
17257: PUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 310
17267: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17268: LD_VAR 0 11
17272: PPUSH
17273: CALL_OW 247
17277: PUSH
17278: LD_INT 2
17280: EQUAL
17281: IFFALSE 17285
// exit ;
17283: GO 17801
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17285: LD_ADDR_VAR 0 8
17289: PUSH
17290: LD_INT 81
17292: PUSH
17293: LD_VAR 0 9
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: LD_INT 21
17307: PUSH
17308: LD_INT 3
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: ST_TO_ADDR
// if not tmp then
17328: LD_VAR 0 8
17332: NOT
17333: IFFALSE 17337
// exit ;
17335: GO 17801
// if in_unit then
17337: LD_VAR 0 11
17341: IFFALSE 17365
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17343: LD_ADDR_VAR 0 10
17347: PUSH
17348: LD_VAR 0 8
17352: PPUSH
17353: LD_VAR 0 11
17357: PPUSH
17358: CALL_OW 74
17362: ST_TO_ADDR
17363: GO 17385
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17365: LD_ADDR_VAR 0 10
17369: PUSH
17370: LD_VAR 0 8
17374: PPUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 74
17384: ST_TO_ADDR
// if not enemy then
17385: LD_VAR 0 10
17389: NOT
17390: IFFALSE 17394
// exit ;
17392: GO 17801
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17394: LD_VAR 0 11
17398: IFFALSE 17420
17400: PUSH
17401: LD_VAR 0 11
17405: PPUSH
17406: LD_VAR 0 10
17410: PPUSH
17411: CALL_OW 296
17415: PUSH
17416: LD_INT 13
17418: GREATER
17419: AND
17420: IFTRUE 17442
17422: PUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: LD_VAR 0 10
17432: PPUSH
17433: CALL_OW 296
17437: PUSH
17438: LD_INT 12
17440: GREATER
17441: OR
17442: IFFALSE 17446
// exit ;
17444: GO 17801
// missile := [ 1 ] ;
17446: LD_ADDR_VAR 0 14
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: EMPTY
17455: LIST
17456: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17457: LD_VAR 0 9
17461: PPUSH
17462: LD_VAR 0 12
17466: PPUSH
17467: CALL_OW 325
17471: IFFALSE 17500
// missile := Replace ( missile , missile + 1 , 2 ) ;
17473: LD_ADDR_VAR 0 14
17477: PUSH
17478: LD_VAR 0 14
17482: PPUSH
17483: LD_VAR 0 14
17487: PUSH
17488: LD_INT 1
17490: PLUS
17491: PPUSH
17492: LD_INT 2
17494: PPUSH
17495: CALL_OW 1
17499: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17500: LD_VAR 0 9
17504: PPUSH
17505: LD_VAR 0 13
17509: PPUSH
17510: CALL_OW 325
17514: IFFALSE 17538
17516: PUSH
17517: LD_VAR 0 10
17521: PPUSH
17522: CALL_OW 255
17526: PPUSH
17527: LD_VAR 0 13
17531: PPUSH
17532: CALL_OW 325
17536: NOT
17537: AND
17538: IFFALSE 17567
// missile := Replace ( missile , missile + 1 , 3 ) ;
17540: LD_ADDR_VAR 0 14
17544: PUSH
17545: LD_VAR 0 14
17549: PPUSH
17550: LD_VAR 0 14
17554: PUSH
17555: LD_INT 1
17557: PLUS
17558: PPUSH
17559: LD_INT 3
17561: PPUSH
17562: CALL_OW 1
17566: ST_TO_ADDR
// if missile < 2 then
17567: LD_VAR 0 14
17571: PUSH
17572: LD_INT 2
17574: LESS
17575: IFFALSE 17579
// exit ;
17577: GO 17801
// x := GetX ( enemy ) ;
17579: LD_ADDR_VAR 0 4
17583: PUSH
17584: LD_VAR 0 10
17588: PPUSH
17589: CALL_OW 250
17593: ST_TO_ADDR
// y := GetY ( enemy ) ;
17594: LD_ADDR_VAR 0 5
17598: PUSH
17599: LD_VAR 0 10
17603: PPUSH
17604: CALL_OW 251
17608: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17609: LD_ADDR_VAR 0 6
17613: PUSH
17614: LD_VAR 0 4
17618: PUSH
17619: LD_INT 1
17621: NEG
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 12
17630: PLUS
17631: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17632: LD_ADDR_VAR 0 7
17636: PUSH
17637: LD_VAR 0 5
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 12
17653: PLUS
17654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17655: LD_VAR 0 6
17659: PPUSH
17660: LD_VAR 0 7
17664: PPUSH
17665: CALL_OW 488
17669: NOT
17670: IFFALSE 17692
// begin _x := x ;
17672: LD_ADDR_VAR 0 6
17676: PUSH
17677: LD_VAR 0 4
17681: ST_TO_ADDR
// _y := y ;
17682: LD_ADDR_VAR 0 7
17686: PUSH
17687: LD_VAR 0 5
17691: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17692: LD_ADDR_VAR 0 3
17696: PUSH
17697: LD_INT 1
17699: PPUSH
17700: LD_VAR 0 14
17704: PPUSH
17705: CALL_OW 12
17709: ST_TO_ADDR
// case i of 1 :
17710: LD_VAR 0 3
17714: PUSH
17715: LD_INT 1
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17740
17723: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17724: LD_VAR 0 1
17728: PPUSH
17729: LD_VAR 0 10
17733: PPUSH
17734: CALL_OW 115
17738: GO 17801
17740: LD_INT 2
17742: DOUBLE
17743: EQUAL
17744: IFTRUE 17748
17746: GO 17770
17748: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17749: LD_VAR 0 1
17753: PPUSH
17754: LD_VAR 0 6
17758: PPUSH
17759: LD_VAR 0 7
17763: PPUSH
17764: CALL_OW 153
17768: GO 17801
17770: LD_INT 3
17772: DOUBLE
17773: EQUAL
17774: IFTRUE 17778
17776: GO 17800
17778: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_VAR 0 6
17788: PPUSH
17789: LD_VAR 0 7
17793: PPUSH
17794: CALL_OW 154
17798: GO 17801
17800: POP
// end ;
17801: LD_VAR 0 2
17805: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17806: LD_INT 0
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
// if not unit or not building then
17814: LD_VAR 0 1
17818: NOT
17819: IFTRUE 17828
17821: PUSH
17822: LD_VAR 0 2
17826: NOT
17827: OR
17828: IFFALSE 17832
// exit ;
17830: GO 17990
// x := GetX ( building ) ;
17832: LD_ADDR_VAR 0 5
17836: PUSH
17837: LD_VAR 0 2
17841: PPUSH
17842: CALL_OW 250
17846: ST_TO_ADDR
// y := GetY ( building ) ;
17847: LD_ADDR_VAR 0 6
17851: PUSH
17852: LD_VAR 0 2
17856: PPUSH
17857: CALL_OW 251
17861: ST_TO_ADDR
// for i := 0 to 5 do
17862: LD_ADDR_VAR 0 4
17866: PUSH
17867: DOUBLE
17868: LD_INT 0
17870: DEC
17871: ST_TO_ADDR
17872: LD_INT 5
17874: PUSH
17875: FOR_TO
17876: IFFALSE 17988
// begin _x := ShiftX ( x , i , 3 ) ;
17878: LD_ADDR_VAR 0 7
17882: PUSH
17883: LD_VAR 0 5
17887: PPUSH
17888: LD_VAR 0 4
17892: PPUSH
17893: LD_INT 3
17895: PPUSH
17896: CALL_OW 272
17900: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17901: LD_ADDR_VAR 0 8
17905: PUSH
17906: LD_VAR 0 6
17910: PPUSH
17911: LD_VAR 0 4
17915: PPUSH
17916: LD_INT 3
17918: PPUSH
17919: CALL_OW 273
17923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17924: LD_VAR 0 7
17928: PPUSH
17929: LD_VAR 0 8
17933: PPUSH
17934: CALL_OW 488
17938: NOT
17939: IFFALSE 17943
// continue ;
17941: GO 17875
// if HexInfo ( _x , _y ) = 0 then
17943: LD_VAR 0 7
17947: PPUSH
17948: LD_VAR 0 8
17952: PPUSH
17953: CALL_OW 428
17957: PUSH
17958: LD_INT 0
17960: EQUAL
17961: IFFALSE 17986
// begin ComMoveXY ( unit , _x , _y ) ;
17963: LD_VAR 0 1
17967: PPUSH
17968: LD_VAR 0 7
17972: PPUSH
17973: LD_VAR 0 8
17977: PPUSH
17978: CALL_OW 111
// exit ;
17982: POP
17983: POP
17984: GO 17990
// end ; end ;
17986: GO 17875
17988: POP
17989: POP
// end ;
17990: LD_VAR 0 3
17994: RET
// export function ScanBase ( side , base_area ) ; begin
17995: LD_INT 0
17997: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17998: LD_ADDR_VAR 0 3
18002: PUSH
18003: LD_VAR 0 2
18007: PPUSH
18008: LD_INT 81
18010: PUSH
18011: LD_VAR 0 1
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 70
18024: ST_TO_ADDR
// end ;
18025: LD_VAR 0 3
18029: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
// result := false ;
18036: LD_ADDR_VAR 0 2
18040: PUSH
18041: LD_INT 0
18043: ST_TO_ADDR
// side := GetSide ( unit ) ;
18044: LD_ADDR_VAR 0 3
18048: PUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 255
18058: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18059: LD_ADDR_VAR 0 4
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 248
18073: ST_TO_ADDR
// case nat of 1 :
18074: LD_VAR 0 4
18078: PUSH
18079: LD_INT 1
18081: DOUBLE
18082: EQUAL
18083: IFTRUE 18087
18085: GO 18098
18087: POP
// tech := tech_lassight ; 2 :
18088: LD_ADDR_VAR 0 5
18092: PUSH
18093: LD_INT 12
18095: ST_TO_ADDR
18096: GO 18137
18098: LD_INT 2
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18117
18106: POP
// tech := tech_mortar ; 3 :
18107: LD_ADDR_VAR 0 5
18111: PUSH
18112: LD_INT 41
18114: ST_TO_ADDR
18115: GO 18137
18117: LD_INT 3
18119: DOUBLE
18120: EQUAL
18121: IFTRUE 18125
18123: GO 18136
18125: POP
// tech := tech_bazooka ; end ;
18126: LD_ADDR_VAR 0 5
18130: PUSH
18131: LD_INT 44
18133: ST_TO_ADDR
18134: GO 18137
18136: POP
// if Researched ( side , tech ) then
18137: LD_VAR 0 3
18141: PPUSH
18142: LD_VAR 0 5
18146: PPUSH
18147: CALL_OW 325
18151: IFFALSE 18178
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18153: LD_ADDR_VAR 0 2
18157: PUSH
18158: LD_INT 5
18160: PUSH
18161: LD_INT 8
18163: PUSH
18164: LD_INT 9
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: LIST
18171: PUSH
18172: LD_VAR 0 4
18176: ARRAY
18177: ST_TO_ADDR
// end ;
18178: LD_VAR 0 2
18182: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18183: LD_INT 0
18185: PPUSH
18186: PPUSH
18187: PPUSH
// if not mines then
18188: LD_VAR 0 2
18192: NOT
18193: IFFALSE 18197
// exit ;
18195: GO 18341
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18197: LD_ADDR_VAR 0 5
18201: PUSH
18202: LD_INT 81
18204: PUSH
18205: LD_VAR 0 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 3
18216: PUSH
18217: LD_INT 21
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PPUSH
18235: CALL_OW 69
18239: ST_TO_ADDR
// for i in mines do
18240: LD_ADDR_VAR 0 4
18244: PUSH
18245: LD_VAR 0 2
18249: PUSH
18250: FOR_IN
18251: IFFALSE 18339
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18253: LD_VAR 0 4
18257: PUSH
18258: LD_INT 1
18260: ARRAY
18261: PPUSH
18262: LD_VAR 0 4
18266: PUSH
18267: LD_INT 2
18269: ARRAY
18270: PPUSH
18271: CALL_OW 458
18275: NOT
18276: IFFALSE 18280
// continue ;
18278: GO 18250
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18280: LD_VAR 0 4
18284: PUSH
18285: LD_INT 1
18287: ARRAY
18288: PPUSH
18289: LD_VAR 0 4
18293: PUSH
18294: LD_INT 2
18296: ARRAY
18297: PPUSH
18298: CALL_OW 428
18302: PUSH
18303: LD_VAR 0 5
18307: IN
18308: IFFALSE 18337
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18310: LD_VAR 0 4
18314: PUSH
18315: LD_INT 1
18317: ARRAY
18318: PPUSH
18319: LD_VAR 0 4
18323: PUSH
18324: LD_INT 2
18326: ARRAY
18327: PPUSH
18328: LD_VAR 0 1
18332: PPUSH
18333: CALL_OW 456
// end ;
18337: GO 18250
18339: POP
18340: POP
// end ;
18341: LD_VAR 0 3
18345: RET
// export function Count ( array ) ; begin
18346: LD_INT 0
18348: PPUSH
// result := array + 0 ;
18349: LD_ADDR_VAR 0 2
18353: PUSH
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 0
18361: PLUS
18362: ST_TO_ADDR
// end ;
18363: LD_VAR 0 2
18367: RET
// export function IsEmpty ( building ) ; begin
18368: LD_INT 0
18370: PPUSH
// if not building then
18371: LD_VAR 0 1
18375: NOT
18376: IFFALSE 18380
// exit ;
18378: GO 18423
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18380: LD_ADDR_VAR 0 2
18384: PUSH
18385: LD_VAR 0 1
18389: PUSH
18390: LD_INT 22
18392: PUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 255
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 58
18409: PUSH
18410: EMPTY
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: IN
18422: ST_TO_ADDR
// end ;
18423: LD_VAR 0 2
18427: RET
// export function IsNotFull ( building ) ; var places ; begin
18428: LD_INT 0
18430: PPUSH
18431: PPUSH
// if not building then
18432: LD_VAR 0 1
18436: NOT
18437: IFFALSE 18441
// exit ;
18439: GO 18469
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18441: LD_ADDR_VAR 0 2
18445: PUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: LD_INT 3
18453: PUSH
18454: LD_INT 62
18456: PUSH
18457: EMPTY
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: CALL_OW 72
18468: ST_TO_ADDR
// end ;
18469: LD_VAR 0 2
18473: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
// tmp := [ ] ;
18480: LD_ADDR_VAR 0 3
18484: PUSH
18485: EMPTY
18486: ST_TO_ADDR
// list := [ ] ;
18487: LD_ADDR_VAR 0 5
18491: PUSH
18492: EMPTY
18493: ST_TO_ADDR
// for i = 16 to 25 do
18494: LD_ADDR_VAR 0 4
18498: PUSH
18499: DOUBLE
18500: LD_INT 16
18502: DEC
18503: ST_TO_ADDR
18504: LD_INT 25
18506: PUSH
18507: FOR_TO
18508: IFFALSE 18581
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18510: LD_ADDR_VAR 0 3
18514: PUSH
18515: LD_VAR 0 3
18519: PUSH
18520: LD_INT 22
18522: PUSH
18523: LD_VAR 0 1
18527: PPUSH
18528: CALL_OW 255
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 91
18539: PUSH
18540: LD_VAR 0 1
18544: PUSH
18545: LD_INT 6
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 30
18555: PUSH
18556: LD_VAR 0 4
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: PPUSH
18573: CALL_OW 69
18577: ADD
18578: ST_TO_ADDR
18579: GO 18507
18581: POP
18582: POP
// for i = 1 to tmp do
18583: LD_ADDR_VAR 0 4
18587: PUSH
18588: DOUBLE
18589: LD_INT 1
18591: DEC
18592: ST_TO_ADDR
18593: LD_VAR 0 3
18597: PUSH
18598: FOR_TO
18599: IFFALSE 18687
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18601: LD_ADDR_VAR 0 5
18605: PUSH
18606: LD_VAR 0 5
18610: PUSH
18611: LD_VAR 0 3
18615: PUSH
18616: LD_VAR 0 4
18620: ARRAY
18621: PPUSH
18622: CALL_OW 266
18626: PUSH
18627: LD_VAR 0 3
18631: PUSH
18632: LD_VAR 0 4
18636: ARRAY
18637: PPUSH
18638: CALL_OW 250
18642: PUSH
18643: LD_VAR 0 3
18647: PUSH
18648: LD_VAR 0 4
18652: ARRAY
18653: PPUSH
18654: CALL_OW 251
18658: PUSH
18659: LD_VAR 0 3
18663: PUSH
18664: LD_VAR 0 4
18668: ARRAY
18669: PPUSH
18670: CALL_OW 254
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: ADD
18684: ST_TO_ADDR
18685: GO 18598
18687: POP
18688: POP
// result := list ;
18689: LD_ADDR_VAR 0 2
18693: PUSH
18694: LD_VAR 0 5
18698: ST_TO_ADDR
// end ;
18699: LD_VAR 0 2
18703: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18704: LD_INT 0
18706: PPUSH
18707: PPUSH
18708: PPUSH
18709: PPUSH
18710: PPUSH
18711: PPUSH
18712: PPUSH
// if not factory then
18713: LD_VAR 0 1
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 19325
// if control = control_apeman then
18722: LD_VAR 0 4
18726: PUSH
18727: LD_INT 5
18729: EQUAL
18730: IFFALSE 18839
// begin tmp := UnitsInside ( factory ) ;
18732: LD_ADDR_VAR 0 8
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 313
18746: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18747: LD_VAR 0 8
18751: PPUSH
18752: LD_INT 25
18754: PUSH
18755: LD_INT 12
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 72
18766: NOT
18767: IFFALSE 18777
// control := control_manual ;
18769: LD_ADDR_VAR 0 4
18773: PUSH
18774: LD_INT 1
18776: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18777: LD_ADDR_VAR 0 8
18781: PUSH
18782: LD_VAR 0 1
18786: PPUSH
18787: CALL 18474 0 1
18791: ST_TO_ADDR
// if tmp then
18792: LD_VAR 0 8
18796: IFFALSE 18839
// begin for i in tmp do
18798: LD_ADDR_VAR 0 7
18802: PUSH
18803: LD_VAR 0 8
18807: PUSH
18808: FOR_IN
18809: IFFALSE 18837
// if i [ 1 ] = b_ext_radio then
18811: LD_VAR 0 7
18815: PUSH
18816: LD_INT 1
18818: ARRAY
18819: PUSH
18820: LD_INT 22
18822: EQUAL
18823: IFFALSE 18835
// begin control := control_remote ;
18825: LD_ADDR_VAR 0 4
18829: PUSH
18830: LD_INT 2
18832: ST_TO_ADDR
// break ;
18833: GO 18837
// end ;
18835: GO 18808
18837: POP
18838: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18839: LD_VAR 0 1
18843: PPUSH
18844: LD_VAR 0 2
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: LD_VAR 0 4
18858: PPUSH
18859: LD_VAR 0 5
18863: PPUSH
18864: CALL_OW 448
18868: IFFALSE 18903
// begin result := [ chassis , engine , control , weapon ] ;
18870: LD_ADDR_VAR 0 6
18874: PUSH
18875: LD_VAR 0 2
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 4
18889: PUSH
18890: LD_VAR 0 5
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
// exit ;
18901: GO 19325
// end ; _chassis := AvailableChassisList ( factory ) ;
18903: LD_ADDR_VAR 0 9
18907: PUSH
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL_OW 475
18917: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18918: LD_ADDR_VAR 0 11
18922: PUSH
18923: LD_VAR 0 1
18927: PPUSH
18928: CALL_OW 476
18932: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18933: LD_ADDR_VAR 0 12
18937: PUSH
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL_OW 477
18947: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18948: LD_ADDR_VAR 0 10
18952: PUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: CALL_OW 478
18962: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18963: LD_VAR 0 9
18967: NOT
18968: IFTRUE 18977
18970: PUSH
18971: LD_VAR 0 11
18975: NOT
18976: OR
18977: IFTRUE 18986
18979: PUSH
18980: LD_VAR 0 12
18984: NOT
18985: OR
18986: IFTRUE 18995
18988: PUSH
18989: LD_VAR 0 10
18993: NOT
18994: OR
18995: IFFALSE 19030
// begin result := [ chassis , engine , control , weapon ] ;
18997: LD_ADDR_VAR 0 6
19001: PUSH
19002: LD_VAR 0 2
19006: PUSH
19007: LD_VAR 0 3
19011: PUSH
19012: LD_VAR 0 4
19016: PUSH
19017: LD_VAR 0 5
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: ST_TO_ADDR
// exit ;
19028: GO 19325
// end ; if not chassis in _chassis then
19030: LD_VAR 0 2
19034: PUSH
19035: LD_VAR 0 9
19039: IN
19040: NOT
19041: IFFALSE 19067
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19043: LD_ADDR_VAR 0 2
19047: PUSH
19048: LD_VAR 0 9
19052: PUSH
19053: LD_INT 1
19055: PPUSH
19056: LD_VAR 0 9
19060: PPUSH
19061: CALL_OW 12
19065: ARRAY
19066: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19067: LD_VAR 0 2
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: CALL 19330 0 2
19081: NOT
19082: IFFALSE 19143
// repeat engine := _engine [ 1 ] ;
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: LD_VAR 0 11
19093: PUSH
19094: LD_INT 1
19096: ARRAY
19097: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19098: LD_ADDR_VAR 0 11
19102: PUSH
19103: LD_VAR 0 11
19107: PPUSH
19108: LD_INT 1
19110: PPUSH
19111: CALL_OW 3
19115: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19116: LD_VAR 0 2
19120: PPUSH
19121: LD_VAR 0 3
19125: PPUSH
19126: CALL 19330 0 2
19130: IFTRUE 19141
19132: PUSH
19133: LD_VAR 0 11
19137: PUSH
19138: EMPTY
19139: EQUAL
19140: OR
19141: IFFALSE 19084
// if not control in _control then
19143: LD_VAR 0 4
19147: PUSH
19148: LD_VAR 0 12
19152: IN
19153: NOT
19154: IFFALSE 19180
// control := _control [ rand ( 1 , _control ) ] ;
19156: LD_ADDR_VAR 0 4
19160: PUSH
19161: LD_VAR 0 12
19165: PUSH
19166: LD_INT 1
19168: PPUSH
19169: LD_VAR 0 12
19173: PPUSH
19174: CALL_OW 12
19178: ARRAY
19179: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19180: LD_VAR 0 2
19184: PPUSH
19185: LD_VAR 0 5
19189: PPUSH
19190: CALL 19552 0 2
19194: NOT
19195: IFFALSE 19256
// repeat weapon := _weapon [ 1 ] ;
19197: LD_ADDR_VAR 0 5
19201: PUSH
19202: LD_VAR 0 10
19206: PUSH
19207: LD_INT 1
19209: ARRAY
19210: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19211: LD_ADDR_VAR 0 10
19215: PUSH
19216: LD_VAR 0 10
19220: PPUSH
19221: LD_INT 1
19223: PPUSH
19224: CALL_OW 3
19228: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19229: LD_VAR 0 2
19233: PPUSH
19234: LD_VAR 0 5
19238: PPUSH
19239: CALL 19552 0 2
19243: IFTRUE 19254
19245: PUSH
19246: LD_VAR 0 10
19250: PUSH
19251: EMPTY
19252: EQUAL
19253: OR
19254: IFFALSE 19197
// result := [ ] ;
19256: LD_ADDR_VAR 0 6
19260: PUSH
19261: EMPTY
19262: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: LD_VAR 0 4
19282: PPUSH
19283: LD_VAR 0 5
19287: PPUSH
19288: CALL_OW 448
19292: IFFALSE 19325
// result := [ chassis , engine , control , weapon ] ;
19294: LD_ADDR_VAR 0 6
19298: PUSH
19299: LD_VAR 0 2
19303: PUSH
19304: LD_VAR 0 3
19308: PUSH
19309: LD_VAR 0 4
19313: PUSH
19314: LD_VAR 0 5
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: ST_TO_ADDR
// end ;
19325: LD_VAR 0 6
19329: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19330: LD_INT 0
19332: PPUSH
// if not chassis or not engine then
19333: LD_VAR 0 1
19337: NOT
19338: IFTRUE 19347
19340: PUSH
19341: LD_VAR 0 2
19345: NOT
19346: OR
19347: IFFALSE 19351
// exit ;
19349: GO 19547
// case engine of engine_solar :
19351: LD_VAR 0 2
19355: PUSH
19356: LD_INT 2
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19402
19364: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19365: LD_ADDR_VAR 0 3
19369: PUSH
19370: LD_INT 11
19372: PUSH
19373: LD_INT 12
19375: PUSH
19376: LD_INT 13
19378: PUSH
19379: LD_INT 14
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: ST_TO_ADDR
19400: GO 19531
19402: LD_INT 1
19404: DOUBLE
19405: EQUAL
19406: IFTRUE 19410
19408: GO 19472
19410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: LD_INT 11
19418: PUSH
19419: LD_INT 12
19421: PUSH
19422: LD_INT 13
19424: PUSH
19425: LD_INT 14
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: LD_INT 3
19436: PUSH
19437: LD_INT 4
19439: PUSH
19440: LD_INT 5
19442: PUSH
19443: LD_INT 21
19445: PUSH
19446: LD_INT 23
19448: PUSH
19449: LD_INT 22
19451: PUSH
19452: LD_INT 24
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: ST_TO_ADDR
19470: GO 19531
19472: LD_INT 3
19474: DOUBLE
19475: EQUAL
19476: IFTRUE 19480
19478: GO 19530
19480: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: LD_INT 13
19488: PUSH
19489: LD_INT 14
19491: PUSH
19492: LD_INT 2
19494: PUSH
19495: LD_INT 3
19497: PUSH
19498: LD_INT 4
19500: PUSH
19501: LD_INT 5
19503: PUSH
19504: LD_INT 21
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_INT 23
19512: PUSH
19513: LD_INT 24
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: ST_TO_ADDR
19528: GO 19531
19530: POP
// result := ( chassis in result ) ;
19531: LD_ADDR_VAR 0 3
19535: PUSH
19536: LD_VAR 0 1
19540: PUSH
19541: LD_VAR 0 3
19545: IN
19546: ST_TO_ADDR
// end ;
19547: LD_VAR 0 3
19551: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19552: LD_INT 0
19554: PPUSH
// if not chassis or not weapon then
19555: LD_VAR 0 1
19559: NOT
19560: IFTRUE 19569
19562: PUSH
19563: LD_VAR 0 2
19567: NOT
19568: OR
19569: IFFALSE 19573
// exit ;
19571: GO 20667
// case weapon of us_machine_gun :
19573: LD_VAR 0 2
19577: PUSH
19578: LD_INT 2
19580: DOUBLE
19581: EQUAL
19582: IFTRUE 19586
19584: GO 19616
19586: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19587: LD_ADDR_VAR 0 3
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 3
19600: PUSH
19601: LD_INT 4
19603: PUSH
19604: LD_INT 5
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: ST_TO_ADDR
19614: GO 20651
19616: LD_INT 3
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19654
19624: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19625: LD_ADDR_VAR 0 3
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: LD_INT 4
19641: PUSH
19642: LD_INT 5
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: ST_TO_ADDR
19652: GO 20651
19654: LD_INT 11
19656: DOUBLE
19657: EQUAL
19658: IFTRUE 19662
19660: GO 19692
19662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19663: LD_ADDR_VAR 0 3
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: LD_INT 2
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: LD_INT 4
19679: PUSH
19680: LD_INT 5
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: ST_TO_ADDR
19690: GO 20651
19692: LD_INT 4
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19726
19700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19701: LD_ADDR_VAR 0 3
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: LD_INT 4
19714: PUSH
19715: LD_INT 5
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: ST_TO_ADDR
19724: GO 20651
19726: LD_INT 5
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19760
19734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19735: LD_ADDR_VAR 0 3
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: LD_INT 4
19748: PUSH
19749: LD_INT 5
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: ST_TO_ADDR
19758: GO 20651
19760: LD_INT 9
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19794
19768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: LD_INT 3
19779: PUSH
19780: LD_INT 4
19782: PUSH
19783: LD_INT 5
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: ST_TO_ADDR
19792: GO 20651
19794: LD_INT 7
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19828
19802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: LD_INT 4
19816: PUSH
19817: LD_INT 5
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: ST_TO_ADDR
19826: GO 20651
19828: LD_INT 12
19830: DOUBLE
19831: EQUAL
19832: IFTRUE 19836
19834: GO 19862
19836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19837: LD_ADDR_VAR 0 3
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 3
19847: PUSH
19848: LD_INT 4
19850: PUSH
19851: LD_INT 5
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
19860: GO 20651
19862: LD_INT 13
19864: DOUBLE
19865: EQUAL
19866: IFTRUE 19870
19868: GO 19896
19870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: LD_INT 3
19881: PUSH
19882: LD_INT 4
19884: PUSH
19885: LD_INT 5
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
19894: GO 20651
19896: LD_INT 14
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 19922
19904: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19905: LD_ADDR_VAR 0 3
19909: PUSH
19910: LD_INT 4
19912: PUSH
19913: LD_INT 5
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: ST_TO_ADDR
19920: GO 20651
19922: LD_INT 6
19924: DOUBLE
19925: EQUAL
19926: IFTRUE 19930
19928: GO 19948
19930: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19931: LD_ADDR_VAR 0 3
19935: PUSH
19936: LD_INT 4
19938: PUSH
19939: LD_INT 5
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: ST_TO_ADDR
19946: GO 20651
19948: LD_INT 10
19950: DOUBLE
19951: EQUAL
19952: IFTRUE 19956
19954: GO 19974
19956: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_INT 4
19964: PUSH
19965: LD_INT 5
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: ST_TO_ADDR
19972: GO 20651
19974: LD_INT 22
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 20008
19982: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19983: LD_ADDR_VAR 0 3
19987: PUSH
19988: LD_INT 11
19990: PUSH
19991: LD_INT 12
19993: PUSH
19994: LD_INT 13
19996: PUSH
19997: LD_INT 14
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: ST_TO_ADDR
20006: GO 20651
20008: LD_INT 23
20010: DOUBLE
20011: EQUAL
20012: IFTRUE 20016
20014: GO 20042
20016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20017: LD_ADDR_VAR 0 3
20021: PUSH
20022: LD_INT 11
20024: PUSH
20025: LD_INT 12
20027: PUSH
20028: LD_INT 13
20030: PUSH
20031: LD_INT 14
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 20651
20042: LD_INT 24
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20076
20050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20051: LD_ADDR_VAR 0 3
20055: PUSH
20056: LD_INT 11
20058: PUSH
20059: LD_INT 12
20061: PUSH
20062: LD_INT 13
20064: PUSH
20065: LD_INT 14
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: ST_TO_ADDR
20074: GO 20651
20076: LD_INT 30
20078: DOUBLE
20079: EQUAL
20080: IFTRUE 20084
20082: GO 20110
20084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: LD_INT 11
20092: PUSH
20093: LD_INT 12
20095: PUSH
20096: LD_INT 13
20098: PUSH
20099: LD_INT 14
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: ST_TO_ADDR
20108: GO 20651
20110: LD_INT 25
20112: DOUBLE
20113: EQUAL
20114: IFTRUE 20118
20116: GO 20136
20118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20119: LD_ADDR_VAR 0 3
20123: PUSH
20124: LD_INT 13
20126: PUSH
20127: LD_INT 14
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: ST_TO_ADDR
20134: GO 20651
20136: LD_INT 27
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20162
20144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20145: LD_ADDR_VAR 0 3
20149: PUSH
20150: LD_INT 13
20152: PUSH
20153: LD_INT 14
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: ST_TO_ADDR
20160: GO 20651
20162: LD_INT 92
20164: DOUBLE
20165: EQUAL
20166: IFTRUE 20170
20168: GO 20196
20170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20171: LD_ADDR_VAR 0 3
20175: PUSH
20176: LD_INT 11
20178: PUSH
20179: LD_INT 12
20181: PUSH
20182: LD_INT 13
20184: PUSH
20185: LD_INT 14
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: ST_TO_ADDR
20194: GO 20651
20196: LD_INT 28
20198: DOUBLE
20199: EQUAL
20200: IFTRUE 20204
20202: GO 20222
20204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20205: LD_ADDR_VAR 0 3
20209: PUSH
20210: LD_INT 13
20212: PUSH
20213: LD_INT 14
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: ST_TO_ADDR
20220: GO 20651
20222: LD_INT 29
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20248
20230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20231: LD_ADDR_VAR 0 3
20235: PUSH
20236: LD_INT 13
20238: PUSH
20239: LD_INT 14
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: ST_TO_ADDR
20246: GO 20651
20248: LD_INT 31
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20274
20256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20257: LD_ADDR_VAR 0 3
20261: PUSH
20262: LD_INT 13
20264: PUSH
20265: LD_INT 14
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: ST_TO_ADDR
20272: GO 20651
20274: LD_INT 26
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20300
20282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20283: LD_ADDR_VAR 0 3
20287: PUSH
20288: LD_INT 13
20290: PUSH
20291: LD_INT 14
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: ST_TO_ADDR
20298: GO 20651
20300: LD_INT 42
20302: DOUBLE
20303: EQUAL
20304: IFTRUE 20308
20306: GO 20334
20308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20309: LD_ADDR_VAR 0 3
20313: PUSH
20314: LD_INT 21
20316: PUSH
20317: LD_INT 22
20319: PUSH
20320: LD_INT 23
20322: PUSH
20323: LD_INT 24
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: ST_TO_ADDR
20332: GO 20651
20334: LD_INT 43
20336: DOUBLE
20337: EQUAL
20338: IFTRUE 20342
20340: GO 20368
20342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20343: LD_ADDR_VAR 0 3
20347: PUSH
20348: LD_INT 21
20350: PUSH
20351: LD_INT 22
20353: PUSH
20354: LD_INT 23
20356: PUSH
20357: LD_INT 24
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: ST_TO_ADDR
20366: GO 20651
20368: LD_INT 44
20370: DOUBLE
20371: EQUAL
20372: IFTRUE 20376
20374: GO 20402
20376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_INT 21
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_INT 23
20390: PUSH
20391: LD_INT 24
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: ST_TO_ADDR
20400: GO 20651
20402: LD_INT 45
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20436
20410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_INT 21
20418: PUSH
20419: LD_INT 22
20421: PUSH
20422: LD_INT 23
20424: PUSH
20425: LD_INT 24
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: ST_TO_ADDR
20434: GO 20651
20436: LD_INT 49
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20470
20444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20445: LD_ADDR_VAR 0 3
20449: PUSH
20450: LD_INT 21
20452: PUSH
20453: LD_INT 22
20455: PUSH
20456: LD_INT 23
20458: PUSH
20459: LD_INT 24
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: ST_TO_ADDR
20468: GO 20651
20470: LD_INT 51
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20504
20478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20479: LD_ADDR_VAR 0 3
20483: PUSH
20484: LD_INT 21
20486: PUSH
20487: LD_INT 22
20489: PUSH
20490: LD_INT 23
20492: PUSH
20493: LD_INT 24
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: ST_TO_ADDR
20502: GO 20651
20504: LD_INT 52
20506: DOUBLE
20507: EQUAL
20508: IFTRUE 20512
20510: GO 20538
20512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20513: LD_ADDR_VAR 0 3
20517: PUSH
20518: LD_INT 21
20520: PUSH
20521: LD_INT 22
20523: PUSH
20524: LD_INT 23
20526: PUSH
20527: LD_INT 24
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: ST_TO_ADDR
20536: GO 20651
20538: LD_INT 53
20540: DOUBLE
20541: EQUAL
20542: IFTRUE 20546
20544: GO 20564
20546: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20547: LD_ADDR_VAR 0 3
20551: PUSH
20552: LD_INT 23
20554: PUSH
20555: LD_INT 24
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: ST_TO_ADDR
20562: GO 20651
20564: LD_INT 46
20566: DOUBLE
20567: EQUAL
20568: IFTRUE 20572
20570: GO 20590
20572: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20573: LD_ADDR_VAR 0 3
20577: PUSH
20578: LD_INT 23
20580: PUSH
20581: LD_INT 24
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: ST_TO_ADDR
20588: GO 20651
20590: LD_INT 47
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20616
20598: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_INT 23
20606: PUSH
20607: LD_INT 24
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: ST_TO_ADDR
20614: GO 20651
20616: LD_INT 98
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20650
20624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_INT 21
20632: PUSH
20633: LD_INT 22
20635: PUSH
20636: LD_INT 23
20638: PUSH
20639: LD_INT 24
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: ST_TO_ADDR
20648: GO 20651
20650: POP
// result := ( chassis in result ) ;
20651: LD_ADDR_VAR 0 3
20655: PUSH
20656: LD_VAR 0 1
20660: PUSH
20661: LD_VAR 0 3
20665: IN
20666: ST_TO_ADDR
// end ;
20667: LD_VAR 0 3
20671: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20672: LD_INT 0
20674: PPUSH
20675: PPUSH
20676: PPUSH
20677: PPUSH
20678: PPUSH
20679: PPUSH
20680: PPUSH
// result := array ;
20681: LD_ADDR_VAR 0 5
20685: PUSH
20686: LD_VAR 0 1
20690: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20691: LD_VAR 0 1
20695: NOT
20696: IFTRUE 20705
20698: PUSH
20699: LD_VAR 0 2
20703: NOT
20704: OR
20705: IFTRUE 20714
20707: PUSH
20708: LD_VAR 0 3
20712: NOT
20713: OR
20714: IFTRUE 20728
20716: PUSH
20717: LD_VAR 0 2
20721: PUSH
20722: LD_VAR 0 1
20726: GREATER
20727: OR
20728: IFTRUE 20742
20730: PUSH
20731: LD_VAR 0 3
20735: PUSH
20736: LD_VAR 0 1
20740: GREATER
20741: OR
20742: IFFALSE 20746
// exit ;
20744: GO 21042
// if direction then
20746: LD_VAR 0 4
20750: IFFALSE 20814
// begin d := 1 ;
20752: LD_ADDR_VAR 0 9
20756: PUSH
20757: LD_INT 1
20759: ST_TO_ADDR
// if i_from > i_to then
20760: LD_VAR 0 2
20764: PUSH
20765: LD_VAR 0 3
20769: GREATER
20770: IFFALSE 20796
// length := ( array - i_from ) + i_to else
20772: LD_ADDR_VAR 0 11
20776: PUSH
20777: LD_VAR 0 1
20781: PUSH
20782: LD_VAR 0 2
20786: MINUS
20787: PUSH
20788: LD_VAR 0 3
20792: PLUS
20793: ST_TO_ADDR
20794: GO 20812
// length := i_to - i_from ;
20796: LD_ADDR_VAR 0 11
20800: PUSH
20801: LD_VAR 0 3
20805: PUSH
20806: LD_VAR 0 2
20810: MINUS
20811: ST_TO_ADDR
// end else
20812: GO 20875
// begin d := - 1 ;
20814: LD_ADDR_VAR 0 9
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: ST_TO_ADDR
// if i_from > i_to then
20823: LD_VAR 0 2
20827: PUSH
20828: LD_VAR 0 3
20832: GREATER
20833: IFFALSE 20853
// length := i_from - i_to else
20835: LD_ADDR_VAR 0 11
20839: PUSH
20840: LD_VAR 0 2
20844: PUSH
20845: LD_VAR 0 3
20849: MINUS
20850: ST_TO_ADDR
20851: GO 20875
// length := ( array - i_to ) + i_from ;
20853: LD_ADDR_VAR 0 11
20857: PUSH
20858: LD_VAR 0 1
20862: PUSH
20863: LD_VAR 0 3
20867: MINUS
20868: PUSH
20869: LD_VAR 0 2
20873: PLUS
20874: ST_TO_ADDR
// end ; if not length then
20875: LD_VAR 0 11
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 21042
// tmp := array ;
20884: LD_ADDR_VAR 0 10
20888: PUSH
20889: LD_VAR 0 1
20893: ST_TO_ADDR
// for i = 1 to length do
20894: LD_ADDR_VAR 0 6
20898: PUSH
20899: DOUBLE
20900: LD_INT 1
20902: DEC
20903: ST_TO_ADDR
20904: LD_VAR 0 11
20908: PUSH
20909: FOR_TO
20910: IFFALSE 21030
// begin for j = 1 to array do
20912: LD_ADDR_VAR 0 7
20916: PUSH
20917: DOUBLE
20918: LD_INT 1
20920: DEC
20921: ST_TO_ADDR
20922: LD_VAR 0 1
20926: PUSH
20927: FOR_TO
20928: IFFALSE 21016
// begin k := j + d ;
20930: LD_ADDR_VAR 0 8
20934: PUSH
20935: LD_VAR 0 7
20939: PUSH
20940: LD_VAR 0 9
20944: PLUS
20945: ST_TO_ADDR
// if k > array then
20946: LD_VAR 0 8
20950: PUSH
20951: LD_VAR 0 1
20955: GREATER
20956: IFFALSE 20966
// k := 1 ;
20958: LD_ADDR_VAR 0 8
20962: PUSH
20963: LD_INT 1
20965: ST_TO_ADDR
// if not k then
20966: LD_VAR 0 8
20970: NOT
20971: IFFALSE 20983
// k := array ;
20973: LD_ADDR_VAR 0 8
20977: PUSH
20978: LD_VAR 0 1
20982: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20983: LD_ADDR_VAR 0 10
20987: PUSH
20988: LD_VAR 0 10
20992: PPUSH
20993: LD_VAR 0 8
20997: PPUSH
20998: LD_VAR 0 1
21002: PUSH
21003: LD_VAR 0 7
21007: ARRAY
21008: PPUSH
21009: CALL_OW 1
21013: ST_TO_ADDR
// end ;
21014: GO 20927
21016: POP
21017: POP
// array := tmp ;
21018: LD_ADDR_VAR 0 1
21022: PUSH
21023: LD_VAR 0 10
21027: ST_TO_ADDR
// end ;
21028: GO 20909
21030: POP
21031: POP
// result := array ;
21032: LD_ADDR_VAR 0 5
21036: PUSH
21037: LD_VAR 0 1
21041: ST_TO_ADDR
// end ;
21042: LD_VAR 0 5
21046: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21047: LD_INT 0
21049: PPUSH
21050: PPUSH
// result := 0 ;
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// if not array or not value in array then
21059: LD_VAR 0 1
21063: NOT
21064: IFTRUE 21079
21066: PUSH
21067: LD_VAR 0 2
21071: PUSH
21072: LD_VAR 0 1
21076: IN
21077: NOT
21078: OR
21079: IFFALSE 21083
// exit ;
21081: GO 21137
// for i = 1 to array do
21083: LD_ADDR_VAR 0 4
21087: PUSH
21088: DOUBLE
21089: LD_INT 1
21091: DEC
21092: ST_TO_ADDR
21093: LD_VAR 0 1
21097: PUSH
21098: FOR_TO
21099: IFFALSE 21135
// if value = array [ i ] then
21101: LD_VAR 0 2
21105: PUSH
21106: LD_VAR 0 1
21110: PUSH
21111: LD_VAR 0 4
21115: ARRAY
21116: EQUAL
21117: IFFALSE 21133
// begin result := i ;
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_VAR 0 4
21128: ST_TO_ADDR
// exit ;
21129: POP
21130: POP
21131: GO 21137
// end ;
21133: GO 21098
21135: POP
21136: POP
// end ;
21137: LD_VAR 0 3
21141: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21142: LD_INT 0
21144: PPUSH
// vc_chassis := chassis ;
21145: LD_ADDR_OWVAR 37
21149: PUSH
21150: LD_VAR 0 1
21154: ST_TO_ADDR
// vc_engine := engine ;
21155: LD_ADDR_OWVAR 39
21159: PUSH
21160: LD_VAR 0 2
21164: ST_TO_ADDR
// vc_control := control ;
21165: LD_ADDR_OWVAR 38
21169: PUSH
21170: LD_VAR 0 3
21174: ST_TO_ADDR
// vc_weapon := weapon ;
21175: LD_ADDR_OWVAR 40
21179: PUSH
21180: LD_VAR 0 4
21184: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21185: LD_ADDR_OWVAR 41
21189: PUSH
21190: LD_VAR 0 5
21194: ST_TO_ADDR
// end ;
21195: LD_VAR 0 6
21199: RET
// export function WantPlant ( unit ) ; var task ; begin
21200: LD_INT 0
21202: PPUSH
21203: PPUSH
// result := false ;
21204: LD_ADDR_VAR 0 2
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21212: LD_ADDR_VAR 0 3
21216: PUSH
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 437
21226: ST_TO_ADDR
// if task then
21227: LD_VAR 0 3
21231: IFFALSE 21259
// if task [ 1 ] [ 1 ] = p then
21233: LD_VAR 0 3
21237: PUSH
21238: LD_INT 1
21240: ARRAY
21241: PUSH
21242: LD_INT 1
21244: ARRAY
21245: PUSH
21246: LD_STRING p
21248: EQUAL
21249: IFFALSE 21259
// result := true ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// end ;
21259: LD_VAR 0 2
21263: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21264: LD_INT 0
21266: PPUSH
21267: PPUSH
21268: PPUSH
21269: PPUSH
// if pos < 1 then
21270: LD_VAR 0 2
21274: PUSH
21275: LD_INT 1
21277: LESS
21278: IFFALSE 21282
// exit ;
21280: GO 21585
// if pos = 1 then
21282: LD_VAR 0 2
21286: PUSH
21287: LD_INT 1
21289: EQUAL
21290: IFFALSE 21323
// result := Replace ( arr , pos [ 1 ] , value ) else
21292: LD_ADDR_VAR 0 4
21296: PUSH
21297: LD_VAR 0 1
21301: PPUSH
21302: LD_VAR 0 2
21306: PUSH
21307: LD_INT 1
21309: ARRAY
21310: PPUSH
21311: LD_VAR 0 3
21315: PPUSH
21316: CALL_OW 1
21320: ST_TO_ADDR
21321: GO 21585
// begin tmp := arr ;
21323: LD_ADDR_VAR 0 6
21327: PUSH
21328: LD_VAR 0 1
21332: ST_TO_ADDR
// s_arr := [ tmp ] ;
21333: LD_ADDR_VAR 0 7
21337: PUSH
21338: LD_VAR 0 6
21342: PUSH
21343: EMPTY
21344: LIST
21345: ST_TO_ADDR
// for i = 1 to pos - 1 do
21346: LD_ADDR_VAR 0 5
21350: PUSH
21351: DOUBLE
21352: LD_INT 1
21354: DEC
21355: ST_TO_ADDR
21356: LD_VAR 0 2
21360: PUSH
21361: LD_INT 1
21363: MINUS
21364: PUSH
21365: FOR_TO
21366: IFFALSE 21411
// begin tmp := tmp [ pos [ i ] ] ;
21368: LD_ADDR_VAR 0 6
21372: PUSH
21373: LD_VAR 0 6
21377: PUSH
21378: LD_VAR 0 2
21382: PUSH
21383: LD_VAR 0 5
21387: ARRAY
21388: ARRAY
21389: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21390: LD_ADDR_VAR 0 7
21394: PUSH
21395: LD_VAR 0 7
21399: PUSH
21400: LD_VAR 0 6
21404: PUSH
21405: EMPTY
21406: LIST
21407: ADD
21408: ST_TO_ADDR
// end ;
21409: GO 21365
21411: POP
21412: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21413: LD_ADDR_VAR 0 6
21417: PUSH
21418: LD_VAR 0 6
21422: PPUSH
21423: LD_VAR 0 2
21427: PUSH
21428: LD_VAR 0 2
21432: ARRAY
21433: PPUSH
21434: LD_VAR 0 3
21438: PPUSH
21439: CALL_OW 1
21443: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21444: LD_ADDR_VAR 0 7
21448: PUSH
21449: LD_VAR 0 7
21453: PPUSH
21454: LD_VAR 0 7
21458: PPUSH
21459: LD_VAR 0 6
21463: PPUSH
21464: CALL_OW 1
21468: ST_TO_ADDR
// for i = s_arr downto 2 do
21469: LD_ADDR_VAR 0 5
21473: PUSH
21474: DOUBLE
21475: LD_VAR 0 7
21479: INC
21480: ST_TO_ADDR
21481: LD_INT 2
21483: PUSH
21484: FOR_DOWNTO
21485: IFFALSE 21569
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21487: LD_ADDR_VAR 0 6
21491: PUSH
21492: LD_VAR 0 7
21496: PUSH
21497: LD_VAR 0 5
21501: PUSH
21502: LD_INT 1
21504: MINUS
21505: ARRAY
21506: PPUSH
21507: LD_VAR 0 2
21511: PUSH
21512: LD_VAR 0 5
21516: PUSH
21517: LD_INT 1
21519: MINUS
21520: ARRAY
21521: PPUSH
21522: LD_VAR 0 7
21526: PUSH
21527: LD_VAR 0 5
21531: ARRAY
21532: PPUSH
21533: CALL_OW 1
21537: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21538: LD_ADDR_VAR 0 7
21542: PUSH
21543: LD_VAR 0 7
21547: PPUSH
21548: LD_VAR 0 5
21552: PUSH
21553: LD_INT 1
21555: MINUS
21556: PPUSH
21557: LD_VAR 0 6
21561: PPUSH
21562: CALL_OW 1
21566: ST_TO_ADDR
// end ;
21567: GO 21484
21569: POP
21570: POP
// result := s_arr [ 1 ] ;
21571: LD_ADDR_VAR 0 4
21575: PUSH
21576: LD_VAR 0 7
21580: PUSH
21581: LD_INT 1
21583: ARRAY
21584: ST_TO_ADDR
// end ; end ;
21585: LD_VAR 0 4
21589: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
// if not list then
21594: LD_VAR 0 1
21598: NOT
21599: IFFALSE 21603
// exit ;
21601: GO 21694
// i := list [ pos1 ] ;
21603: LD_ADDR_VAR 0 5
21607: PUSH
21608: LD_VAR 0 1
21612: PUSH
21613: LD_VAR 0 2
21617: ARRAY
21618: ST_TO_ADDR
// if not i then
21619: LD_VAR 0 5
21623: NOT
21624: IFFALSE 21628
// exit ;
21626: GO 21694
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21628: LD_ADDR_VAR 0 1
21632: PUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: LD_VAR 0 2
21642: PPUSH
21643: LD_VAR 0 1
21647: PUSH
21648: LD_VAR 0 3
21652: ARRAY
21653: PPUSH
21654: CALL_OW 1
21658: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21659: LD_ADDR_VAR 0 1
21663: PUSH
21664: LD_VAR 0 1
21668: PPUSH
21669: LD_VAR 0 3
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 1
21683: ST_TO_ADDR
// result := list ;
21684: LD_ADDR_VAR 0 4
21688: PUSH
21689: LD_VAR 0 1
21693: ST_TO_ADDR
// end ;
21694: LD_VAR 0 4
21698: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21699: LD_INT 0
21701: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21702: LD_ADDR_VAR 0 5
21706: PUSH
21707: LD_VAR 0 1
21711: PPUSH
21712: CALL_OW 250
21716: PPUSH
21717: LD_VAR 0 1
21721: PPUSH
21722: CALL_OW 251
21726: PPUSH
21727: LD_VAR 0 2
21731: PPUSH
21732: LD_VAR 0 3
21736: PPUSH
21737: LD_VAR 0 4
21741: PPUSH
21742: CALL 22124 0 5
21746: ST_TO_ADDR
// end ;
21747: LD_VAR 0 5
21751: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21752: LD_INT 0
21754: PPUSH
21755: PPUSH
21756: PPUSH
21757: PPUSH
// if not list or not unit then
21758: LD_VAR 0 2
21762: NOT
21763: IFTRUE 21772
21765: PUSH
21766: LD_VAR 0 1
21770: NOT
21771: OR
21772: IFFALSE 21776
// exit ;
21774: GO 22119
// result := [ ] ;
21776: LD_ADDR_VAR 0 5
21780: PUSH
21781: EMPTY
21782: ST_TO_ADDR
// for i in list do
21783: LD_ADDR_VAR 0 6
21787: PUSH
21788: LD_VAR 0 2
21792: PUSH
21793: FOR_IN
21794: IFFALSE 22012
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21796: LD_ADDR_VAR 0 8
21800: PUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_VAR 0 6
21810: PUSH
21811: LD_INT 1
21813: ARRAY
21814: PPUSH
21815: LD_VAR 0 6
21819: PUSH
21820: LD_INT 2
21822: ARRAY
21823: PPUSH
21824: CALL_OW 297
21828: ST_TO_ADDR
// if not Count ( result ) then
21829: LD_VAR 0 5
21833: PPUSH
21834: CALL 18346 0 1
21838: NOT
21839: IFFALSE 21872
// begin result := Join ( result , [ i , tmp ] ) ;
21841: LD_ADDR_VAR 0 5
21845: PUSH
21846: LD_VAR 0 5
21850: PPUSH
21851: LD_VAR 0 6
21855: PUSH
21856: LD_VAR 0 8
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PPUSH
21865: CALL 54322 0 2
21869: ST_TO_ADDR
// continue ;
21870: GO 21793
// end ; if result [ result ] [ 2 ] <= tmp then
21872: LD_VAR 0 5
21876: PUSH
21877: LD_VAR 0 5
21881: ARRAY
21882: PUSH
21883: LD_INT 2
21885: ARRAY
21886: PUSH
21887: LD_VAR 0 8
21891: LESSEQUAL
21892: IFFALSE 21925
// result := Join ( result , [ i , tmp ] ) else
21894: LD_ADDR_VAR 0 5
21898: PUSH
21899: LD_VAR 0 5
21903: PPUSH
21904: LD_VAR 0 6
21908: PUSH
21909: LD_VAR 0 8
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PPUSH
21918: CALL 54322 0 2
21922: ST_TO_ADDR
21923: GO 22010
// begin for j := 1 to Count ( result ) do
21925: LD_ADDR_VAR 0 7
21929: PUSH
21930: DOUBLE
21931: LD_INT 1
21933: DEC
21934: ST_TO_ADDR
21935: LD_VAR 0 5
21939: PPUSH
21940: CALL 18346 0 1
21944: PUSH
21945: FOR_TO
21946: IFFALSE 22008
// begin if tmp < result [ j ] [ 2 ] then
21948: LD_VAR 0 8
21952: PUSH
21953: LD_VAR 0 5
21957: PUSH
21958: LD_VAR 0 7
21962: ARRAY
21963: PUSH
21964: LD_INT 2
21966: ARRAY
21967: LESS
21968: IFFALSE 22006
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21970: LD_ADDR_VAR 0 5
21974: PUSH
21975: LD_VAR 0 5
21979: PPUSH
21980: LD_VAR 0 7
21984: PPUSH
21985: LD_VAR 0 6
21989: PUSH
21990: LD_VAR 0 8
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 2
22003: ST_TO_ADDR
// break ;
22004: GO 22008
// end ; end ;
22006: GO 21945
22008: POP
22009: POP
// end ; end ;
22010: GO 21793
22012: POP
22013: POP
// if result and not asc then
22014: LD_VAR 0 5
22018: IFFALSE 22027
22020: PUSH
22021: LD_VAR 0 3
22025: NOT
22026: AND
22027: IFFALSE 22044
// result := ReverseArray ( result ) ;
22029: LD_ADDR_VAR 0 5
22033: PUSH
22034: LD_VAR 0 5
22038: PPUSH
22039: CALL 49402 0 1
22043: ST_TO_ADDR
// tmp := [ ] ;
22044: LD_ADDR_VAR 0 8
22048: PUSH
22049: EMPTY
22050: ST_TO_ADDR
// if mode then
22051: LD_VAR 0 4
22055: IFFALSE 22119
// begin for i := 1 to result do
22057: LD_ADDR_VAR 0 6
22061: PUSH
22062: DOUBLE
22063: LD_INT 1
22065: DEC
22066: ST_TO_ADDR
22067: LD_VAR 0 5
22071: PUSH
22072: FOR_TO
22073: IFFALSE 22107
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22075: LD_ADDR_VAR 0 8
22079: PUSH
22080: LD_VAR 0 8
22084: PPUSH
22085: LD_VAR 0 5
22089: PUSH
22090: LD_VAR 0 6
22094: ARRAY
22095: PUSH
22096: LD_INT 1
22098: ARRAY
22099: PPUSH
22100: CALL 54322 0 2
22104: ST_TO_ADDR
22105: GO 22072
22107: POP
22108: POP
// result := tmp ;
22109: LD_ADDR_VAR 0 5
22113: PUSH
22114: LD_VAR 0 8
22118: ST_TO_ADDR
// end ; end ;
22119: LD_VAR 0 5
22123: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22124: LD_INT 0
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
// if not list then
22130: LD_VAR 0 3
22134: NOT
22135: IFFALSE 22139
// exit ;
22137: GO 22529
// result := [ ] ;
22139: LD_ADDR_VAR 0 6
22143: PUSH
22144: EMPTY
22145: ST_TO_ADDR
// for i in list do
22146: LD_ADDR_VAR 0 7
22150: PUSH
22151: LD_VAR 0 3
22155: PUSH
22156: FOR_IN
22157: IFFALSE 22359
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22159: LD_ADDR_VAR 0 9
22163: PUSH
22164: LD_VAR 0 7
22168: PPUSH
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_VAR 0 2
22178: PPUSH
22179: CALL_OW 297
22183: ST_TO_ADDR
// if not result then
22184: LD_VAR 0 6
22188: NOT
22189: IFFALSE 22215
// result := [ [ i , tmp ] ] else
22191: LD_ADDR_VAR 0 6
22195: PUSH
22196: LD_VAR 0 7
22200: PUSH
22201: LD_VAR 0 9
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: EMPTY
22211: LIST
22212: ST_TO_ADDR
22213: GO 22357
// begin if result [ result ] [ 2 ] <= tmp then
22215: LD_VAR 0 6
22219: PUSH
22220: LD_VAR 0 6
22224: ARRAY
22225: PUSH
22226: LD_INT 2
22228: ARRAY
22229: PUSH
22230: LD_VAR 0 9
22234: LESSEQUAL
22235: IFFALSE 22277
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22237: LD_ADDR_VAR 0 6
22241: PUSH
22242: LD_VAR 0 6
22246: PPUSH
22247: LD_VAR 0 6
22251: PUSH
22252: LD_INT 1
22254: PLUS
22255: PPUSH
22256: LD_VAR 0 7
22260: PUSH
22261: LD_VAR 0 9
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PPUSH
22270: CALL_OW 2
22274: ST_TO_ADDR
22275: GO 22357
// for j := 1 to result do
22277: LD_ADDR_VAR 0 8
22281: PUSH
22282: DOUBLE
22283: LD_INT 1
22285: DEC
22286: ST_TO_ADDR
22287: LD_VAR 0 6
22291: PUSH
22292: FOR_TO
22293: IFFALSE 22355
// begin if tmp < result [ j ] [ 2 ] then
22295: LD_VAR 0 9
22299: PUSH
22300: LD_VAR 0 6
22304: PUSH
22305: LD_VAR 0 8
22309: ARRAY
22310: PUSH
22311: LD_INT 2
22313: ARRAY
22314: LESS
22315: IFFALSE 22353
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22317: LD_ADDR_VAR 0 6
22321: PUSH
22322: LD_VAR 0 6
22326: PPUSH
22327: LD_VAR 0 8
22331: PPUSH
22332: LD_VAR 0 7
22336: PUSH
22337: LD_VAR 0 9
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 2
22350: ST_TO_ADDR
// break ;
22351: GO 22355
// end ; end ;
22353: GO 22292
22355: POP
22356: POP
// end ; end ;
22357: GO 22156
22359: POP
22360: POP
// if result and not asc then
22361: LD_VAR 0 6
22365: IFFALSE 22374
22367: PUSH
22368: LD_VAR 0 4
22372: NOT
22373: AND
22374: IFFALSE 22449
// begin tmp := result ;
22376: LD_ADDR_VAR 0 9
22380: PUSH
22381: LD_VAR 0 6
22385: ST_TO_ADDR
// for i = tmp downto 1 do
22386: LD_ADDR_VAR 0 7
22390: PUSH
22391: DOUBLE
22392: LD_VAR 0 9
22396: INC
22397: ST_TO_ADDR
22398: LD_INT 1
22400: PUSH
22401: FOR_DOWNTO
22402: IFFALSE 22447
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22404: LD_ADDR_VAR 0 6
22408: PUSH
22409: LD_VAR 0 6
22413: PPUSH
22414: LD_VAR 0 9
22418: PUSH
22419: LD_VAR 0 7
22423: MINUS
22424: PUSH
22425: LD_INT 1
22427: PLUS
22428: PPUSH
22429: LD_VAR 0 9
22433: PUSH
22434: LD_VAR 0 7
22438: ARRAY
22439: PPUSH
22440: CALL_OW 1
22444: ST_TO_ADDR
22445: GO 22401
22447: POP
22448: POP
// end ; tmp := [ ] ;
22449: LD_ADDR_VAR 0 9
22453: PUSH
22454: EMPTY
22455: ST_TO_ADDR
// if mode then
22456: LD_VAR 0 5
22460: IFFALSE 22529
// begin for i = 1 to result do
22462: LD_ADDR_VAR 0 7
22466: PUSH
22467: DOUBLE
22468: LD_INT 1
22470: DEC
22471: ST_TO_ADDR
22472: LD_VAR 0 6
22476: PUSH
22477: FOR_TO
22478: IFFALSE 22517
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22480: LD_ADDR_VAR 0 9
22484: PUSH
22485: LD_VAR 0 9
22489: PPUSH
22490: LD_VAR 0 7
22494: PPUSH
22495: LD_VAR 0 6
22499: PUSH
22500: LD_VAR 0 7
22504: ARRAY
22505: PUSH
22506: LD_INT 1
22508: ARRAY
22509: PPUSH
22510: CALL_OW 1
22514: ST_TO_ADDR
22515: GO 22477
22517: POP
22518: POP
// result := tmp ;
22519: LD_ADDR_VAR 0 6
22523: PUSH
22524: LD_VAR 0 9
22528: ST_TO_ADDR
// end ; end ;
22529: LD_VAR 0 6
22533: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22534: LD_INT 0
22536: PPUSH
22537: PPUSH
22538: PPUSH
22539: PPUSH
22540: PPUSH
22541: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22542: LD_ADDR_VAR 0 5
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: ST_TO_ADDR
// if not x or not y then
22564: LD_VAR 0 2
22568: NOT
22569: IFTRUE 22578
22571: PUSH
22572: LD_VAR 0 3
22576: NOT
22577: OR
22578: IFFALSE 22582
// exit ;
22580: GO 24238
// if not range then
22582: LD_VAR 0 4
22586: NOT
22587: IFFALSE 22597
// range := 10 ;
22589: LD_ADDR_VAR 0 4
22593: PUSH
22594: LD_INT 10
22596: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22597: LD_ADDR_VAR 0 8
22601: PUSH
22602: LD_INT 81
22604: PUSH
22605: LD_VAR 0 1
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 92
22616: PUSH
22617: LD_VAR 0 2
22621: PUSH
22622: LD_VAR 0 3
22626: PUSH
22627: LD_VAR 0 4
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: PUSH
22641: LD_INT 21
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: PPUSH
22660: CALL_OW 69
22664: ST_TO_ADDR
// if not tmp then
22665: LD_VAR 0 8
22669: NOT
22670: IFFALSE 22674
// exit ;
22672: GO 24238
// for i in tmp do
22674: LD_ADDR_VAR 0 6
22678: PUSH
22679: LD_VAR 0 8
22683: PUSH
22684: FOR_IN
22685: IFFALSE 24213
// begin points := [ 0 , 0 , 0 ] ;
22687: LD_ADDR_VAR 0 9
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: ST_TO_ADDR
// bpoints := 1 ;
22706: LD_ADDR_VAR 0 10
22710: PUSH
22711: LD_INT 1
22713: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22714: LD_VAR 0 6
22718: PPUSH
22719: CALL_OW 247
22723: PUSH
22724: LD_INT 1
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 23314
22732: POP
// begin if GetClass ( i ) = 1 then
22733: LD_VAR 0 6
22737: PPUSH
22738: CALL_OW 257
22742: PUSH
22743: LD_INT 1
22745: EQUAL
22746: IFFALSE 22767
// points := [ 10 , 5 , 3 ] ;
22748: LD_ADDR_VAR 0 9
22752: PUSH
22753: LD_INT 10
22755: PUSH
22756: LD_INT 5
22758: PUSH
22759: LD_INT 3
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: LIST
22766: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22767: LD_VAR 0 6
22771: PPUSH
22772: CALL_OW 257
22776: PUSH
22777: LD_INT 2
22779: PUSH
22780: LD_INT 3
22782: PUSH
22783: LD_INT 4
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: IN
22791: IFFALSE 22812
// points := [ 3 , 2 , 1 ] ;
22793: LD_ADDR_VAR 0 9
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22812: LD_VAR 0 6
22816: PPUSH
22817: CALL_OW 257
22821: PUSH
22822: LD_INT 5
22824: EQUAL
22825: IFFALSE 22846
// points := [ 130 , 5 , 2 ] ;
22827: LD_ADDR_VAR 0 9
22831: PUSH
22832: LD_INT 130
22834: PUSH
22835: LD_INT 5
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22846: LD_VAR 0 6
22850: PPUSH
22851: CALL_OW 257
22855: PUSH
22856: LD_INT 8
22858: EQUAL
22859: IFFALSE 22880
// points := [ 35 , 35 , 30 ] ;
22861: LD_ADDR_VAR 0 9
22865: PUSH
22866: LD_INT 35
22868: PUSH
22869: LD_INT 35
22871: PUSH
22872: LD_INT 30
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22880: LD_VAR 0 6
22884: PPUSH
22885: CALL_OW 257
22889: PUSH
22890: LD_INT 9
22892: EQUAL
22893: IFFALSE 22914
// points := [ 20 , 55 , 40 ] ;
22895: LD_ADDR_VAR 0 9
22899: PUSH
22900: LD_INT 20
22902: PUSH
22903: LD_INT 55
22905: PUSH
22906: LD_INT 40
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22914: LD_VAR 0 6
22918: PPUSH
22919: CALL_OW 257
22923: PUSH
22924: LD_INT 12
22926: PUSH
22927: LD_INT 16
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: IN
22934: IFFALSE 22955
// points := [ 5 , 3 , 2 ] ;
22936: LD_ADDR_VAR 0 9
22940: PUSH
22941: LD_INT 5
22943: PUSH
22944: LD_INT 3
22946: PUSH
22947: LD_INT 2
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22955: LD_VAR 0 6
22959: PPUSH
22960: CALL_OW 257
22964: PUSH
22965: LD_INT 17
22967: EQUAL
22968: IFFALSE 22989
// points := [ 100 , 50 , 75 ] ;
22970: LD_ADDR_VAR 0 9
22974: PUSH
22975: LD_INT 100
22977: PUSH
22978: LD_INT 50
22980: PUSH
22981: LD_INT 75
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22989: LD_VAR 0 6
22993: PPUSH
22994: CALL_OW 257
22998: PUSH
22999: LD_INT 15
23001: EQUAL
23002: IFFALSE 23023
// points := [ 10 , 5 , 3 ] ;
23004: LD_ADDR_VAR 0 9
23008: PUSH
23009: LD_INT 10
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: LD_INT 3
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23023: LD_VAR 0 6
23027: PPUSH
23028: CALL_OW 257
23032: PUSH
23033: LD_INT 14
23035: EQUAL
23036: IFFALSE 23057
// points := [ 10 , 0 , 0 ] ;
23038: LD_ADDR_VAR 0 9
23042: PUSH
23043: LD_INT 10
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23057: LD_VAR 0 6
23061: PPUSH
23062: CALL_OW 257
23066: PUSH
23067: LD_INT 11
23069: EQUAL
23070: IFFALSE 23091
// points := [ 30 , 10 , 5 ] ;
23072: LD_ADDR_VAR 0 9
23076: PUSH
23077: LD_INT 30
23079: PUSH
23080: LD_INT 10
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 5
23098: PPUSH
23099: CALL_OW 321
23103: PUSH
23104: LD_INT 2
23106: EQUAL
23107: IFFALSE 23124
// bpoints := bpoints * 1.8 ;
23109: LD_ADDR_VAR 0 10
23113: PUSH
23114: LD_VAR 0 10
23118: PUSH
23119: LD_REAL  1.80000000000000E+0000
23122: MUL
23123: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23124: LD_VAR 0 6
23128: PPUSH
23129: CALL_OW 257
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 3
23142: PUSH
23143: LD_INT 4
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: IN
23152: IFFALSE 23172
23154: PUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: LD_INT 51
23162: PPUSH
23163: CALL_OW 321
23167: PUSH
23168: LD_INT 2
23170: EQUAL
23171: AND
23172: IFFALSE 23189
// bpoints := bpoints * 1.2 ;
23174: LD_ADDR_VAR 0 10
23178: PUSH
23179: LD_VAR 0 10
23183: PUSH
23184: LD_REAL  1.20000000000000E+0000
23187: MUL
23188: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23189: LD_VAR 0 6
23193: PPUSH
23194: CALL_OW 257
23198: PUSH
23199: LD_INT 5
23201: PUSH
23202: LD_INT 7
23204: PUSH
23205: LD_INT 9
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: IN
23213: IFFALSE 23233
23215: PUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: LD_INT 52
23223: PPUSH
23224: CALL_OW 321
23228: PUSH
23229: LD_INT 2
23231: EQUAL
23232: AND
23233: IFFALSE 23250
// bpoints := bpoints * 1.5 ;
23235: LD_ADDR_VAR 0 10
23239: PUSH
23240: LD_VAR 0 10
23244: PUSH
23245: LD_REAL  1.50000000000000E+0000
23248: MUL
23249: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23250: LD_VAR 0 1
23254: PPUSH
23255: LD_INT 66
23257: PPUSH
23258: CALL_OW 321
23262: PUSH
23263: LD_INT 2
23265: EQUAL
23266: IFFALSE 23283
// bpoints := bpoints * 1.1 ;
23268: LD_ADDR_VAR 0 10
23272: PUSH
23273: LD_VAR 0 10
23277: PUSH
23278: LD_REAL  1.10000000000000E+0000
23281: MUL
23282: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23283: LD_ADDR_VAR 0 10
23287: PUSH
23288: LD_VAR 0 10
23292: PUSH
23293: LD_VAR 0 6
23297: PPUSH
23298: LD_INT 1
23300: PPUSH
23301: CALL_OW 259
23305: PUSH
23306: LD_REAL  1.15000000000000E+0000
23309: MUL
23310: MUL
23311: ST_TO_ADDR
// end ; unit_vehicle :
23312: GO 24142
23314: LD_INT 2
23316: DOUBLE
23317: EQUAL
23318: IFTRUE 23322
23320: GO 24130
23322: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23323: LD_VAR 0 6
23327: PPUSH
23328: CALL_OW 264
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: LD_INT 42
23338: PUSH
23339: LD_INT 24
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: IN
23347: IFFALSE 23368
// points := [ 25 , 5 , 3 ] ;
23349: LD_ADDR_VAR 0 9
23353: PUSH
23354: LD_INT 25
23356: PUSH
23357: LD_INT 5
23359: PUSH
23360: LD_INT 3
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23368: LD_VAR 0 6
23372: PPUSH
23373: CALL_OW 264
23377: PUSH
23378: LD_INT 4
23380: PUSH
23381: LD_INT 43
23383: PUSH
23384: LD_INT 25
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: IN
23392: IFFALSE 23413
// points := [ 40 , 15 , 5 ] ;
23394: LD_ADDR_VAR 0 9
23398: PUSH
23399: LD_INT 40
23401: PUSH
23402: LD_INT 15
23404: PUSH
23405: LD_INT 5
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23413: LD_VAR 0 6
23417: PPUSH
23418: CALL_OW 264
23422: PUSH
23423: LD_INT 3
23425: PUSH
23426: LD_INT 23
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: IN
23433: IFFALSE 23454
// points := [ 7 , 25 , 8 ] ;
23435: LD_ADDR_VAR 0 9
23439: PUSH
23440: LD_INT 7
23442: PUSH
23443: LD_INT 25
23445: PUSH
23446: LD_INT 8
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23454: LD_VAR 0 6
23458: PPUSH
23459: CALL_OW 264
23463: PUSH
23464: LD_INT 5
23466: PUSH
23467: LD_INT 27
23469: PUSH
23470: LD_INT 44
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: LIST
23477: IN
23478: IFFALSE 23499
// points := [ 14 , 50 , 16 ] ;
23480: LD_ADDR_VAR 0 9
23484: PUSH
23485: LD_INT 14
23487: PUSH
23488: LD_INT 50
23490: PUSH
23491: LD_INT 16
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23499: LD_VAR 0 6
23503: PPUSH
23504: CALL_OW 264
23508: PUSH
23509: LD_INT 6
23511: PUSH
23512: LD_INT 46
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: IN
23519: IFFALSE 23540
// points := [ 32 , 120 , 70 ] ;
23521: LD_ADDR_VAR 0 9
23525: PUSH
23526: LD_INT 32
23528: PUSH
23529: LD_INT 120
23531: PUSH
23532: LD_INT 70
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23540: LD_VAR 0 6
23544: PPUSH
23545: CALL_OW 264
23549: PUSH
23550: LD_INT 7
23552: PUSH
23553: LD_INT 28
23555: PUSH
23556: LD_INT 45
23558: PUSH
23559: LD_INT 92
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: IN
23568: IFFALSE 23589
// points := [ 35 , 20 , 45 ] ;
23570: LD_ADDR_VAR 0 9
23574: PUSH
23575: LD_INT 35
23577: PUSH
23578: LD_INT 20
23580: PUSH
23581: LD_INT 45
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23589: LD_VAR 0 6
23593: PPUSH
23594: CALL_OW 264
23598: PUSH
23599: LD_INT 47
23601: PUSH
23602: EMPTY
23603: LIST
23604: IN
23605: IFFALSE 23626
// points := [ 67 , 45 , 75 ] ;
23607: LD_ADDR_VAR 0 9
23611: PUSH
23612: LD_INT 67
23614: PUSH
23615: LD_INT 45
23617: PUSH
23618: LD_INT 75
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: LIST
23625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23626: LD_VAR 0 6
23630: PPUSH
23631: CALL_OW 264
23635: PUSH
23636: LD_INT 26
23638: PUSH
23639: EMPTY
23640: LIST
23641: IN
23642: IFFALSE 23663
// points := [ 120 , 30 , 80 ] ;
23644: LD_ADDR_VAR 0 9
23648: PUSH
23649: LD_INT 120
23651: PUSH
23652: LD_INT 30
23654: PUSH
23655: LD_INT 80
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 264
23672: PUSH
23673: LD_INT 22
23675: PUSH
23676: EMPTY
23677: LIST
23678: IN
23679: IFFALSE 23700
// points := [ 40 , 1 , 1 ] ;
23681: LD_ADDR_VAR 0 9
23685: PUSH
23686: LD_INT 40
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23700: LD_VAR 0 6
23704: PPUSH
23705: CALL_OW 264
23709: PUSH
23710: LD_INT 29
23712: PUSH
23713: EMPTY
23714: LIST
23715: IN
23716: IFFALSE 23737
// points := [ 70 , 200 , 400 ] ;
23718: LD_ADDR_VAR 0 9
23722: PUSH
23723: LD_INT 70
23725: PUSH
23726: LD_INT 200
23728: PUSH
23729: LD_INT 400
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: LIST
23736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23737: LD_VAR 0 6
23741: PPUSH
23742: CALL_OW 264
23746: PUSH
23747: LD_INT 14
23749: PUSH
23750: LD_INT 53
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: IN
23757: IFFALSE 23778
// points := [ 40 , 10 , 20 ] ;
23759: LD_ADDR_VAR 0 9
23763: PUSH
23764: LD_INT 40
23766: PUSH
23767: LD_INT 10
23769: PUSH
23770: LD_INT 20
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: LIST
23777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23778: LD_VAR 0 6
23782: PPUSH
23783: CALL_OW 264
23787: PUSH
23788: LD_INT 9
23790: PUSH
23791: EMPTY
23792: LIST
23793: IN
23794: IFFALSE 23815
// points := [ 5 , 70 , 20 ] ;
23796: LD_ADDR_VAR 0 9
23800: PUSH
23801: LD_INT 5
23803: PUSH
23804: LD_INT 70
23806: PUSH
23807: LD_INT 20
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23815: LD_VAR 0 6
23819: PPUSH
23820: CALL_OW 264
23824: PUSH
23825: LD_INT 10
23827: PUSH
23828: EMPTY
23829: LIST
23830: IN
23831: IFFALSE 23852
// points := [ 35 , 110 , 70 ] ;
23833: LD_ADDR_VAR 0 9
23837: PUSH
23838: LD_INT 35
23840: PUSH
23841: LD_INT 110
23843: PUSH
23844: LD_INT 70
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23852: LD_VAR 0 6
23856: PPUSH
23857: CALL_OW 265
23861: PUSH
23862: LD_INT 25
23864: EQUAL
23865: IFFALSE 23886
// points := [ 80 , 65 , 100 ] ;
23867: LD_ADDR_VAR 0 9
23871: PUSH
23872: LD_INT 80
23874: PUSH
23875: LD_INT 65
23877: PUSH
23878: LD_INT 100
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23886: LD_VAR 0 6
23890: PPUSH
23891: CALL_OW 263
23895: PUSH
23896: LD_INT 1
23898: EQUAL
23899: IFFALSE 23934
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23901: LD_ADDR_VAR 0 10
23905: PUSH
23906: LD_VAR 0 10
23910: PUSH
23911: LD_VAR 0 6
23915: PPUSH
23916: CALL_OW 311
23920: PPUSH
23921: LD_INT 3
23923: PPUSH
23924: CALL_OW 259
23928: PUSH
23929: LD_INT 4
23931: MUL
23932: MUL
23933: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23934: LD_VAR 0 6
23938: PPUSH
23939: CALL_OW 263
23943: PUSH
23944: LD_INT 2
23946: EQUAL
23947: IFFALSE 23998
// begin j := IsControledBy ( i ) ;
23949: LD_ADDR_VAR 0 7
23953: PUSH
23954: LD_VAR 0 6
23958: PPUSH
23959: CALL_OW 312
23963: ST_TO_ADDR
// if j then
23964: LD_VAR 0 7
23968: IFFALSE 23998
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23970: LD_ADDR_VAR 0 10
23974: PUSH
23975: LD_VAR 0 10
23979: PUSH
23980: LD_VAR 0 7
23984: PPUSH
23985: LD_INT 3
23987: PPUSH
23988: CALL_OW 259
23992: PUSH
23993: LD_INT 3
23995: MUL
23996: MUL
23997: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23998: LD_VAR 0 6
24002: PPUSH
24003: CALL_OW 264
24007: PUSH
24008: LD_INT 5
24010: PUSH
24011: LD_INT 6
24013: PUSH
24014: LD_INT 46
24016: PUSH
24017: LD_INT 44
24019: PUSH
24020: LD_INT 47
24022: PUSH
24023: LD_INT 45
24025: PUSH
24026: LD_INT 28
24028: PUSH
24029: LD_INT 7
24031: PUSH
24032: LD_INT 27
24034: PUSH
24035: LD_INT 29
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: IN
24050: IFFALSE 24070
24052: PUSH
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_INT 52
24060: PPUSH
24061: CALL_OW 321
24065: PUSH
24066: LD_INT 2
24068: EQUAL
24069: AND
24070: IFFALSE 24087
// bpoints := bpoints * 1.2 ;
24072: LD_ADDR_VAR 0 10
24076: PUSH
24077: LD_VAR 0 10
24081: PUSH
24082: LD_REAL  1.20000000000000E+0000
24085: MUL
24086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24087: LD_VAR 0 6
24091: PPUSH
24092: CALL_OW 264
24096: PUSH
24097: LD_INT 6
24099: PUSH
24100: LD_INT 46
24102: PUSH
24103: LD_INT 47
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: LIST
24110: IN
24111: IFFALSE 24128
// bpoints := bpoints * 1.2 ;
24113: LD_ADDR_VAR 0 10
24117: PUSH
24118: LD_VAR 0 10
24122: PUSH
24123: LD_REAL  1.20000000000000E+0000
24126: MUL
24127: ST_TO_ADDR
// end ; unit_building :
24128: GO 24142
24130: LD_INT 3
24132: DOUBLE
24133: EQUAL
24134: IFTRUE 24138
24136: GO 24141
24138: POP
// ; end ;
24139: GO 24142
24141: POP
// for j = 1 to 3 do
24142: LD_ADDR_VAR 0 7
24146: PUSH
24147: DOUBLE
24148: LD_INT 1
24150: DEC
24151: ST_TO_ADDR
24152: LD_INT 3
24154: PUSH
24155: FOR_TO
24156: IFFALSE 24209
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24158: LD_ADDR_VAR 0 5
24162: PUSH
24163: LD_VAR 0 5
24167: PPUSH
24168: LD_VAR 0 7
24172: PPUSH
24173: LD_VAR 0 5
24177: PUSH
24178: LD_VAR 0 7
24182: ARRAY
24183: PUSH
24184: LD_VAR 0 9
24188: PUSH
24189: LD_VAR 0 7
24193: ARRAY
24194: PUSH
24195: LD_VAR 0 10
24199: MUL
24200: PLUS
24201: PPUSH
24202: CALL_OW 1
24206: ST_TO_ADDR
24207: GO 24155
24209: POP
24210: POP
// end ;
24211: GO 22684
24213: POP
24214: POP
// result := Replace ( result , 4 , tmp ) ;
24215: LD_ADDR_VAR 0 5
24219: PUSH
24220: LD_VAR 0 5
24224: PPUSH
24225: LD_INT 4
24227: PPUSH
24228: LD_VAR 0 8
24232: PPUSH
24233: CALL_OW 1
24237: ST_TO_ADDR
// end ;
24238: LD_VAR 0 5
24242: RET
// export function DangerAtRange ( unit , range ) ; begin
24243: LD_INT 0
24245: PPUSH
// if not unit then
24246: LD_VAR 0 1
24250: NOT
24251: IFFALSE 24255
// exit ;
24253: GO 24300
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 255
24269: PPUSH
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 250
24279: PPUSH
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 251
24289: PPUSH
24290: LD_VAR 0 2
24294: PPUSH
24295: CALL 22534 0 4
24299: ST_TO_ADDR
// end ;
24300: LD_VAR 0 3
24304: RET
// export function DangerInArea ( side , area ) ; begin
24305: LD_INT 0
24307: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24308: LD_ADDR_VAR 0 3
24312: PUSH
24313: LD_VAR 0 2
24317: PPUSH
24318: LD_INT 81
24320: PUSH
24321: LD_VAR 0 1
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PPUSH
24330: CALL_OW 70
24334: ST_TO_ADDR
// end ;
24335: LD_VAR 0 3
24339: RET
// export function IsExtension ( b ) ; begin
24340: LD_INT 0
24342: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24343: LD_ADDR_VAR 0 2
24347: PUSH
24348: LD_VAR 0 1
24352: PUSH
24353: LD_INT 23
24355: PUSH
24356: LD_INT 20
24358: PUSH
24359: LD_INT 22
24361: PUSH
24362: LD_INT 17
24364: PUSH
24365: LD_INT 24
24367: PUSH
24368: LD_INT 21
24370: PUSH
24371: LD_INT 19
24373: PUSH
24374: LD_INT 16
24376: PUSH
24377: LD_INT 25
24379: PUSH
24380: LD_INT 18
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: IN
24395: ST_TO_ADDR
// end ;
24396: LD_VAR 0 2
24400: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24401: LD_INT 0
24403: PPUSH
24404: PPUSH
24405: PPUSH
// result := [ ] ;
24406: LD_ADDR_VAR 0 4
24410: PUSH
24411: EMPTY
24412: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24413: LD_ADDR_VAR 0 5
24417: PUSH
24418: LD_VAR 0 2
24422: PPUSH
24423: LD_INT 21
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PPUSH
24433: CALL_OW 70
24437: ST_TO_ADDR
// if not tmp then
24438: LD_VAR 0 5
24442: NOT
24443: IFFALSE 24447
// exit ;
24445: GO 24511
// if checkLink then
24447: LD_VAR 0 3
24451: IFFALSE 24501
// begin for i in tmp do
24453: LD_ADDR_VAR 0 6
24457: PUSH
24458: LD_VAR 0 5
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24499
// if GetBase ( i ) <> base then
24466: LD_VAR 0 6
24470: PPUSH
24471: CALL_OW 274
24475: PUSH
24476: LD_VAR 0 1
24480: NONEQUAL
24481: IFFALSE 24497
// ComLinkToBase ( base , i ) ;
24483: LD_VAR 0 1
24487: PPUSH
24488: LD_VAR 0 6
24492: PPUSH
24493: CALL_OW 169
24497: GO 24463
24499: POP
24500: POP
// end ; result := tmp ;
24501: LD_ADDR_VAR 0 4
24505: PUSH
24506: LD_VAR 0 5
24510: ST_TO_ADDR
// end ;
24511: LD_VAR 0 4
24515: RET
// export function ComComplete ( units , b ) ; var i ; begin
24516: LD_INT 0
24518: PPUSH
24519: PPUSH
// if not units then
24520: LD_VAR 0 1
24524: NOT
24525: IFFALSE 24529
// exit ;
24527: GO 24619
// for i in units do
24529: LD_ADDR_VAR 0 4
24533: PUSH
24534: LD_VAR 0 1
24538: PUSH
24539: FOR_IN
24540: IFFALSE 24617
// if BuildingStatus ( b ) = bs_build then
24542: LD_VAR 0 2
24546: PPUSH
24547: CALL_OW 461
24551: PUSH
24552: LD_INT 1
24554: EQUAL
24555: IFFALSE 24615
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24557: LD_VAR 0 4
24561: PPUSH
24562: LD_STRING h
24564: PUSH
24565: LD_VAR 0 2
24569: PPUSH
24570: CALL_OW 250
24574: PUSH
24575: LD_VAR 0 2
24579: PPUSH
24580: CALL_OW 251
24584: PUSH
24585: LD_VAR 0 2
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: PUSH
24608: EMPTY
24609: LIST
24610: PPUSH
24611: CALL_OW 446
24615: GO 24539
24617: POP
24618: POP
// end ;
24619: LD_VAR 0 3
24623: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24624: LD_INT 0
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24632: LD_VAR 0 1
24636: NOT
24637: IFTRUE 24654
24639: PUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: CALL_OW 263
24649: PUSH
24650: LD_INT 2
24652: NONEQUAL
24653: OR
24654: IFFALSE 24658
// exit ;
24656: GO 24974
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24658: LD_ADDR_VAR 0 6
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 2
24682: PUSH
24683: LD_INT 30
24685: PUSH
24686: LD_INT 36
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 34
24695: PUSH
24696: LD_INT 31
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PPUSH
24712: CALL_OW 69
24716: ST_TO_ADDR
// if not tmp then
24717: LD_VAR 0 6
24721: NOT
24722: IFFALSE 24726
// exit ;
24724: GO 24974
// result := [ ] ;
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: EMPTY
24732: ST_TO_ADDR
// for i in tmp do
24733: LD_ADDR_VAR 0 3
24737: PUSH
24738: LD_VAR 0 6
24742: PUSH
24743: FOR_IN
24744: IFFALSE 24815
// begin t := UnitsInside ( i ) ;
24746: LD_ADDR_VAR 0 4
24750: PUSH
24751: LD_VAR 0 3
24755: PPUSH
24756: CALL_OW 313
24760: ST_TO_ADDR
// if t then
24761: LD_VAR 0 4
24765: IFFALSE 24813
// for j in t do
24767: LD_ADDR_VAR 0 7
24771: PUSH
24772: LD_VAR 0 4
24776: PUSH
24777: FOR_IN
24778: IFFALSE 24811
// result := Replace ( result , result + 1 , j ) ;
24780: LD_ADDR_VAR 0 2
24784: PUSH
24785: LD_VAR 0 2
24789: PPUSH
24790: LD_VAR 0 2
24794: PUSH
24795: LD_INT 1
24797: PLUS
24798: PPUSH
24799: LD_VAR 0 7
24803: PPUSH
24804: CALL_OW 1
24808: ST_TO_ADDR
24809: GO 24777
24811: POP
24812: POP
// end ;
24813: GO 24743
24815: POP
24816: POP
// if not result then
24817: LD_VAR 0 2
24821: NOT
24822: IFFALSE 24826
// exit ;
24824: GO 24974
// mech := result [ 1 ] ;
24826: LD_ADDR_VAR 0 5
24830: PUSH
24831: LD_VAR 0 2
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: ST_TO_ADDR
// if result > 1 then
24840: LD_VAR 0 2
24844: PUSH
24845: LD_INT 1
24847: GREATER
24848: IFFALSE 24960
// begin for i = 2 to result do
24850: LD_ADDR_VAR 0 3
24854: PUSH
24855: DOUBLE
24856: LD_INT 2
24858: DEC
24859: ST_TO_ADDR
24860: LD_VAR 0 2
24864: PUSH
24865: FOR_TO
24866: IFFALSE 24958
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24868: LD_ADDR_VAR 0 4
24872: PUSH
24873: LD_VAR 0 2
24877: PUSH
24878: LD_VAR 0 3
24882: ARRAY
24883: PPUSH
24884: LD_INT 3
24886: PPUSH
24887: CALL_OW 259
24891: PUSH
24892: LD_VAR 0 2
24896: PUSH
24897: LD_VAR 0 3
24901: ARRAY
24902: PPUSH
24903: CALL_OW 432
24907: MINUS
24908: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24909: LD_VAR 0 4
24913: PUSH
24914: LD_VAR 0 5
24918: PPUSH
24919: LD_INT 3
24921: PPUSH
24922: CALL_OW 259
24926: PUSH
24927: LD_VAR 0 5
24931: PPUSH
24932: CALL_OW 432
24936: MINUS
24937: GREATEREQUAL
24938: IFFALSE 24956
// mech := result [ i ] ;
24940: LD_ADDR_VAR 0 5
24944: PUSH
24945: LD_VAR 0 2
24949: PUSH
24950: LD_VAR 0 3
24954: ARRAY
24955: ST_TO_ADDR
// end ;
24956: GO 24865
24958: POP
24959: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24960: LD_VAR 0 1
24964: PPUSH
24965: LD_VAR 0 5
24969: PPUSH
24970: CALL_OW 135
// end ;
24974: LD_VAR 0 2
24978: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24979: LD_INT 0
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
24987: PPUSH
24988: PPUSH
24989: PPUSH
24990: PPUSH
24991: PPUSH
24992: PPUSH
24993: PPUSH
// result := [ ] ;
24994: LD_ADDR_VAR 0 7
24998: PUSH
24999: EMPTY
25000: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25001: LD_VAR 0 1
25005: PPUSH
25006: CALL_OW 266
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: IN
25021: NOT
25022: IFFALSE 25026
// exit ;
25024: GO 26666
// if name then
25026: LD_VAR 0 3
25030: IFFALSE 25046
// SetBName ( base_dep , name ) ;
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 3
25041: PPUSH
25042: CALL_OW 500
// base := GetBase ( base_dep ) ;
25046: LD_ADDR_VAR 0 15
25050: PUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL_OW 274
25060: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25061: LD_ADDR_VAR 0 16
25065: PUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 255
25075: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25076: LD_ADDR_VAR 0 17
25080: PUSH
25081: LD_VAR 0 1
25085: PPUSH
25086: CALL_OW 248
25090: ST_TO_ADDR
// if sources then
25091: LD_VAR 0 5
25095: IFFALSE 25142
// for i = 1 to 3 do
25097: LD_ADDR_VAR 0 8
25101: PUSH
25102: DOUBLE
25103: LD_INT 1
25105: DEC
25106: ST_TO_ADDR
25107: LD_INT 3
25109: PUSH
25110: FOR_TO
25111: IFFALSE 25140
// AddResourceType ( base , i , sources [ i ] ) ;
25113: LD_VAR 0 15
25117: PPUSH
25118: LD_VAR 0 8
25122: PPUSH
25123: LD_VAR 0 5
25127: PUSH
25128: LD_VAR 0 8
25132: ARRAY
25133: PPUSH
25134: CALL_OW 276
25138: GO 25110
25140: POP
25141: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25142: LD_ADDR_VAR 0 18
25146: PUSH
25147: LD_VAR 0 15
25151: PPUSH
25152: LD_VAR 0 2
25156: PPUSH
25157: LD_INT 1
25159: PPUSH
25160: CALL 24401 0 3
25164: ST_TO_ADDR
// InitHc ;
25165: CALL_OW 19
// InitUc ;
25169: CALL_OW 18
// uc_side := side ;
25173: LD_ADDR_OWVAR 20
25177: PUSH
25178: LD_VAR 0 16
25182: ST_TO_ADDR
// uc_nation := nation ;
25183: LD_ADDR_OWVAR 21
25187: PUSH
25188: LD_VAR 0 17
25192: ST_TO_ADDR
// if buildings then
25193: LD_VAR 0 18
25197: IFFALSE 26525
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25199: LD_ADDR_VAR 0 19
25203: PUSH
25204: LD_VAR 0 18
25208: PPUSH
25209: LD_INT 2
25211: PUSH
25212: LD_INT 30
25214: PUSH
25215: LD_INT 29
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 30
25224: PUSH
25225: LD_INT 30
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 72
25241: ST_TO_ADDR
// if tmp then
25242: LD_VAR 0 19
25246: IFFALSE 25294
// for i in tmp do
25248: LD_ADDR_VAR 0 8
25252: PUSH
25253: LD_VAR 0 19
25257: PUSH
25258: FOR_IN
25259: IFFALSE 25292
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25261: LD_VAR 0 8
25265: PPUSH
25266: CALL_OW 250
25270: PPUSH
25271: LD_VAR 0 8
25275: PPUSH
25276: CALL_OW 251
25280: PPUSH
25281: LD_VAR 0 16
25285: PPUSH
25286: CALL_OW 441
25290: GO 25258
25292: POP
25293: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25294: LD_VAR 0 18
25298: PPUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 30
25304: PUSH
25305: LD_INT 32
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 30
25314: PUSH
25315: LD_INT 33
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: LIST
25326: PPUSH
25327: CALL_OW 72
25331: IFFALSE 25419
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25333: LD_ADDR_VAR 0 8
25337: PUSH
25338: LD_VAR 0 18
25342: PPUSH
25343: LD_INT 2
25345: PUSH
25346: LD_INT 30
25348: PUSH
25349: LD_INT 32
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 30
25358: PUSH
25359: LD_INT 33
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: PPUSH
25371: CALL_OW 72
25375: PUSH
25376: FOR_IN
25377: IFFALSE 25417
// begin if not GetBWeapon ( i ) then
25379: LD_VAR 0 8
25383: PPUSH
25384: CALL_OW 269
25388: NOT
25389: IFFALSE 25415
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25391: LD_VAR 0 8
25395: PPUSH
25396: LD_VAR 0 8
25400: PPUSH
25401: LD_VAR 0 2
25405: PPUSH
25406: CALL 26671 0 2
25410: PPUSH
25411: CALL_OW 431
// end ;
25415: GO 25376
25417: POP
25418: POP
// end ; for i = 1 to personel do
25419: LD_ADDR_VAR 0 8
25423: PUSH
25424: DOUBLE
25425: LD_INT 1
25427: DEC
25428: ST_TO_ADDR
25429: LD_VAR 0 6
25433: PUSH
25434: FOR_TO
25435: IFFALSE 26505
// begin if i > 4 then
25437: LD_VAR 0 8
25441: PUSH
25442: LD_INT 4
25444: GREATER
25445: IFFALSE 25449
// break ;
25447: GO 26505
// case i of 1 :
25449: LD_VAR 0 8
25453: PUSH
25454: LD_INT 1
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25542
25462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25463: LD_ADDR_VAR 0 12
25467: PUSH
25468: LD_VAR 0 18
25472: PPUSH
25473: LD_INT 22
25475: PUSH
25476: LD_VAR 0 16
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 58
25487: PUSH
25488: EMPTY
25489: LIST
25490: PUSH
25491: LD_INT 2
25493: PUSH
25494: LD_INT 30
25496: PUSH
25497: LD_INT 32
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 30
25506: PUSH
25507: LD_INT 4
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 30
25516: PUSH
25517: LD_INT 5
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: PPUSH
25535: CALL_OW 72
25539: ST_TO_ADDR
25540: GO 25764
25542: LD_INT 2
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25612
25550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25551: LD_ADDR_VAR 0 12
25555: PUSH
25556: LD_VAR 0 18
25560: PPUSH
25561: LD_INT 22
25563: PUSH
25564: LD_VAR 0 16
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: PUSH
25576: LD_INT 30
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 30
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: LIST
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PPUSH
25605: CALL_OW 72
25609: ST_TO_ADDR
25610: GO 25764
25612: LD_INT 3
25614: DOUBLE
25615: EQUAL
25616: IFTRUE 25620
25618: GO 25682
25620: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25621: LD_ADDR_VAR 0 12
25625: PUSH
25626: LD_VAR 0 18
25630: PPUSH
25631: LD_INT 22
25633: PUSH
25634: LD_VAR 0 16
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: LD_INT 30
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 30
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: LIST
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PPUSH
25675: CALL_OW 72
25679: ST_TO_ADDR
25680: GO 25764
25682: LD_INT 4
25684: DOUBLE
25685: EQUAL
25686: IFTRUE 25690
25688: GO 25763
25690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25691: LD_ADDR_VAR 0 12
25695: PUSH
25696: LD_VAR 0 18
25700: PPUSH
25701: LD_INT 22
25703: PUSH
25704: LD_VAR 0 16
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 30
25718: PUSH
25719: LD_INT 6
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 30
25728: PUSH
25729: LD_INT 7
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 30
25738: PUSH
25739: LD_INT 8
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 72
25760: ST_TO_ADDR
25761: GO 25764
25763: POP
// if i = 1 then
25764: LD_VAR 0 8
25768: PUSH
25769: LD_INT 1
25771: EQUAL
25772: IFFALSE 25883
// begin tmp := [ ] ;
25774: LD_ADDR_VAR 0 19
25778: PUSH
25779: EMPTY
25780: ST_TO_ADDR
// for j in f do
25781: LD_ADDR_VAR 0 9
25785: PUSH
25786: LD_VAR 0 12
25790: PUSH
25791: FOR_IN
25792: IFFALSE 25865
// if GetBType ( j ) = b_bunker then
25794: LD_VAR 0 9
25798: PPUSH
25799: CALL_OW 266
25803: PUSH
25804: LD_INT 32
25806: EQUAL
25807: IFFALSE 25834
// tmp := Insert ( tmp , 1 , j ) else
25809: LD_ADDR_VAR 0 19
25813: PUSH
25814: LD_VAR 0 19
25818: PPUSH
25819: LD_INT 1
25821: PPUSH
25822: LD_VAR 0 9
25826: PPUSH
25827: CALL_OW 2
25831: ST_TO_ADDR
25832: GO 25863
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25834: LD_ADDR_VAR 0 19
25838: PUSH
25839: LD_VAR 0 19
25843: PPUSH
25844: LD_VAR 0 19
25848: PUSH
25849: LD_INT 1
25851: PLUS
25852: PPUSH
25853: LD_VAR 0 9
25857: PPUSH
25858: CALL_OW 2
25862: ST_TO_ADDR
25863: GO 25791
25865: POP
25866: POP
// if tmp then
25867: LD_VAR 0 19
25871: IFFALSE 25883
// f := tmp ;
25873: LD_ADDR_VAR 0 12
25877: PUSH
25878: LD_VAR 0 19
25882: ST_TO_ADDR
// end ; x := personel [ i ] ;
25883: LD_ADDR_VAR 0 13
25887: PUSH
25888: LD_VAR 0 6
25892: PUSH
25893: LD_VAR 0 8
25897: ARRAY
25898: ST_TO_ADDR
// if x = - 1 then
25899: LD_VAR 0 13
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: EQUAL
25908: IFFALSE 26119
// begin for j in f do
25910: LD_ADDR_VAR 0 9
25914: PUSH
25915: LD_VAR 0 12
25919: PUSH
25920: FOR_IN
25921: IFFALSE 26115
// repeat InitHc ;
25923: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25927: LD_VAR 0 9
25931: PPUSH
25932: CALL_OW 266
25936: PUSH
25937: LD_INT 5
25939: EQUAL
25940: IFFALSE 26010
// begin if UnitsInside ( j ) < 3 then
25942: LD_VAR 0 9
25946: PPUSH
25947: CALL_OW 313
25951: PUSH
25952: LD_INT 3
25954: LESS
25955: IFFALSE 25991
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25957: LD_INT 0
25959: PPUSH
25960: LD_INT 5
25962: PUSH
25963: LD_INT 8
25965: PUSH
25966: LD_INT 9
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: LIST
25973: PUSH
25974: LD_VAR 0 17
25978: ARRAY
25979: PPUSH
25980: LD_VAR 0 4
25984: PPUSH
25985: CALL_OW 380
25989: GO 26008
// PrepareHuman ( false , i , skill ) ;
25991: LD_INT 0
25993: PPUSH
25994: LD_VAR 0 8
25998: PPUSH
25999: LD_VAR 0 4
26003: PPUSH
26004: CALL_OW 380
// end else
26008: GO 26027
// PrepareHuman ( false , i , skill ) ;
26010: LD_INT 0
26012: PPUSH
26013: LD_VAR 0 8
26017: PPUSH
26018: LD_VAR 0 4
26022: PPUSH
26023: CALL_OW 380
// un := CreateHuman ;
26027: LD_ADDR_VAR 0 14
26031: PUSH
26032: CALL_OW 44
26036: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26037: LD_ADDR_VAR 0 7
26041: PUSH
26042: LD_VAR 0 7
26046: PPUSH
26047: LD_INT 1
26049: PPUSH
26050: LD_VAR 0 14
26054: PPUSH
26055: CALL_OW 2
26059: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26060: LD_VAR 0 14
26064: PPUSH
26065: LD_VAR 0 9
26069: PPUSH
26070: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26074: LD_VAR 0 9
26078: PPUSH
26079: CALL_OW 313
26083: PUSH
26084: LD_INT 6
26086: EQUAL
26087: IFTRUE 26111
26089: PUSH
26090: LD_VAR 0 9
26094: PPUSH
26095: CALL_OW 266
26099: PUSH
26100: LD_INT 32
26102: PUSH
26103: LD_INT 31
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: IN
26110: OR
26111: IFFALSE 25923
26113: GO 25920
26115: POP
26116: POP
// end else
26117: GO 26503
// for j = 1 to x do
26119: LD_ADDR_VAR 0 9
26123: PUSH
26124: DOUBLE
26125: LD_INT 1
26127: DEC
26128: ST_TO_ADDR
26129: LD_VAR 0 13
26133: PUSH
26134: FOR_TO
26135: IFFALSE 26501
// begin InitHc ;
26137: CALL_OW 19
// if not f then
26141: LD_VAR 0 12
26145: NOT
26146: IFFALSE 26235
// begin PrepareHuman ( false , i , skill ) ;
26148: LD_INT 0
26150: PPUSH
26151: LD_VAR 0 8
26155: PPUSH
26156: LD_VAR 0 4
26160: PPUSH
26161: CALL_OW 380
// un := CreateHuman ;
26165: LD_ADDR_VAR 0 14
26169: PUSH
26170: CALL_OW 44
26174: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26175: LD_ADDR_VAR 0 7
26179: PUSH
26180: LD_VAR 0 7
26184: PPUSH
26185: LD_INT 1
26187: PPUSH
26188: LD_VAR 0 14
26192: PPUSH
26193: CALL_OW 2
26197: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26198: LD_VAR 0 14
26202: PPUSH
26203: LD_VAR 0 1
26207: PPUSH
26208: CALL_OW 250
26212: PPUSH
26213: LD_VAR 0 1
26217: PPUSH
26218: CALL_OW 251
26222: PPUSH
26223: LD_INT 10
26225: PPUSH
26226: LD_INT 0
26228: PPUSH
26229: CALL_OW 50
// continue ;
26233: GO 26134
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26235: LD_VAR 0 12
26239: PUSH
26240: LD_INT 1
26242: ARRAY
26243: PPUSH
26244: CALL_OW 313
26248: IFFALSE 26276
26250: PUSH
26251: LD_VAR 0 12
26255: PUSH
26256: LD_INT 1
26258: ARRAY
26259: PPUSH
26260: CALL_OW 266
26264: PUSH
26265: LD_INT 32
26267: PUSH
26268: LD_INT 31
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: IN
26275: AND
26276: IFTRUE 26297
26278: PUSH
26279: LD_VAR 0 12
26283: PUSH
26284: LD_INT 1
26286: ARRAY
26287: PPUSH
26288: CALL_OW 313
26292: PUSH
26293: LD_INT 6
26295: EQUAL
26296: OR
26297: IFFALSE 26317
// f := Delete ( f , 1 ) ;
26299: LD_ADDR_VAR 0 12
26303: PUSH
26304: LD_VAR 0 12
26308: PPUSH
26309: LD_INT 1
26311: PPUSH
26312: CALL_OW 3
26316: ST_TO_ADDR
// if not f then
26317: LD_VAR 0 12
26321: NOT
26322: IFFALSE 26340
// begin x := x + 2 ;
26324: LD_ADDR_VAR 0 13
26328: PUSH
26329: LD_VAR 0 13
26333: PUSH
26334: LD_INT 2
26336: PLUS
26337: ST_TO_ADDR
// continue ;
26338: GO 26134
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26340: LD_VAR 0 12
26344: PUSH
26345: LD_INT 1
26347: ARRAY
26348: PPUSH
26349: CALL_OW 266
26353: PUSH
26354: LD_INT 5
26356: EQUAL
26357: IFFALSE 26431
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26359: LD_VAR 0 12
26363: PUSH
26364: LD_INT 1
26366: ARRAY
26367: PPUSH
26368: CALL_OW 313
26372: PUSH
26373: LD_INT 3
26375: LESS
26376: IFFALSE 26412
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26378: LD_INT 0
26380: PPUSH
26381: LD_INT 5
26383: PUSH
26384: LD_INT 8
26386: PUSH
26387: LD_INT 9
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: LIST
26394: PUSH
26395: LD_VAR 0 17
26399: ARRAY
26400: PPUSH
26401: LD_VAR 0 4
26405: PPUSH
26406: CALL_OW 380
26410: GO 26429
// PrepareHuman ( false , i , skill ) ;
26412: LD_INT 0
26414: PPUSH
26415: LD_VAR 0 8
26419: PPUSH
26420: LD_VAR 0 4
26424: PPUSH
26425: CALL_OW 380
// end else
26429: GO 26448
// PrepareHuman ( false , i , skill ) ;
26431: LD_INT 0
26433: PPUSH
26434: LD_VAR 0 8
26438: PPUSH
26439: LD_VAR 0 4
26443: PPUSH
26444: CALL_OW 380
// un := CreateHuman ;
26448: LD_ADDR_VAR 0 14
26452: PUSH
26453: CALL_OW 44
26457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26458: LD_ADDR_VAR 0 7
26462: PUSH
26463: LD_VAR 0 7
26467: PPUSH
26468: LD_INT 1
26470: PPUSH
26471: LD_VAR 0 14
26475: PPUSH
26476: CALL_OW 2
26480: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26481: LD_VAR 0 14
26485: PPUSH
26486: LD_VAR 0 12
26490: PUSH
26491: LD_INT 1
26493: ARRAY
26494: PPUSH
26495: CALL_OW 52
// end ;
26499: GO 26134
26501: POP
26502: POP
// end ;
26503: GO 25434
26505: POP
26506: POP
// result := result ^ buildings ;
26507: LD_ADDR_VAR 0 7
26511: PUSH
26512: LD_VAR 0 7
26516: PUSH
26517: LD_VAR 0 18
26521: ADD
26522: ST_TO_ADDR
// end else
26523: GO 26666
// begin for i = 1 to personel do
26525: LD_ADDR_VAR 0 8
26529: PUSH
26530: DOUBLE
26531: LD_INT 1
26533: DEC
26534: ST_TO_ADDR
26535: LD_VAR 0 6
26539: PUSH
26540: FOR_TO
26541: IFFALSE 26664
// begin if i > 4 then
26543: LD_VAR 0 8
26547: PUSH
26548: LD_INT 4
26550: GREATER
26551: IFFALSE 26555
// break ;
26553: GO 26664
// x := personel [ i ] ;
26555: LD_ADDR_VAR 0 13
26559: PUSH
26560: LD_VAR 0 6
26564: PUSH
26565: LD_VAR 0 8
26569: ARRAY
26570: ST_TO_ADDR
// if x = - 1 then
26571: LD_VAR 0 13
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: EQUAL
26580: IFFALSE 26584
// continue ;
26582: GO 26540
// PrepareHuman ( false , i , skill ) ;
26584: LD_INT 0
26586: PPUSH
26587: LD_VAR 0 8
26591: PPUSH
26592: LD_VAR 0 4
26596: PPUSH
26597: CALL_OW 380
// un := CreateHuman ;
26601: LD_ADDR_VAR 0 14
26605: PUSH
26606: CALL_OW 44
26610: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26611: LD_VAR 0 14
26615: PPUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 250
26625: PPUSH
26626: LD_VAR 0 1
26630: PPUSH
26631: CALL_OW 251
26635: PPUSH
26636: LD_INT 10
26638: PPUSH
26639: LD_INT 0
26641: PPUSH
26642: CALL_OW 50
// result := result ^ un ;
26646: LD_ADDR_VAR 0 7
26650: PUSH
26651: LD_VAR 0 7
26655: PUSH
26656: LD_VAR 0 14
26660: ADD
26661: ST_TO_ADDR
// end ;
26662: GO 26540
26664: POP
26665: POP
// end ; end ;
26666: LD_VAR 0 7
26670: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26671: LD_INT 0
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
// result := false ;
26689: LD_ADDR_VAR 0 3
26693: PUSH
26694: LD_INT 0
26696: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26697: LD_VAR 0 1
26701: NOT
26702: IFTRUE 26727
26704: PUSH
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 266
26714: PUSH
26715: LD_INT 32
26717: PUSH
26718: LD_INT 33
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: IN
26725: NOT
26726: OR
26727: IFFALSE 26731
// exit ;
26729: GO 27866
// nat := GetNation ( tower ) ;
26731: LD_ADDR_VAR 0 12
26735: PUSH
26736: LD_VAR 0 1
26740: PPUSH
26741: CALL_OW 248
26745: ST_TO_ADDR
// side := GetSide ( tower ) ;
26746: LD_ADDR_VAR 0 16
26750: PUSH
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL_OW 255
26760: ST_TO_ADDR
// x := GetX ( tower ) ;
26761: LD_ADDR_VAR 0 10
26765: PUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 250
26775: ST_TO_ADDR
// y := GetY ( tower ) ;
26776: LD_ADDR_VAR 0 11
26780: PUSH
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 251
26790: ST_TO_ADDR
// if not x or not y then
26791: LD_VAR 0 10
26795: NOT
26796: IFTRUE 26805
26798: PUSH
26799: LD_VAR 0 11
26803: NOT
26804: OR
26805: IFFALSE 26809
// exit ;
26807: GO 27866
// weapon := 0 ;
26809: LD_ADDR_VAR 0 18
26813: PUSH
26814: LD_INT 0
26816: ST_TO_ADDR
// fac_list := [ ] ;
26817: LD_ADDR_VAR 0 17
26821: PUSH
26822: EMPTY
26823: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26824: LD_ADDR_VAR 0 6
26828: PUSH
26829: LD_VAR 0 1
26833: PPUSH
26834: CALL_OW 274
26838: PPUSH
26839: LD_VAR 0 2
26843: PPUSH
26844: LD_INT 0
26846: PPUSH
26847: CALL 24401 0 3
26851: PPUSH
26852: LD_INT 30
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 72
26866: ST_TO_ADDR
// if not factories then
26867: LD_VAR 0 6
26871: NOT
26872: IFFALSE 26876
// exit ;
26874: GO 27866
// for i in factories do
26876: LD_ADDR_VAR 0 8
26880: PUSH
26881: LD_VAR 0 6
26885: PUSH
26886: FOR_IN
26887: IFFALSE 26912
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26889: LD_ADDR_VAR 0 17
26893: PUSH
26894: LD_VAR 0 17
26898: PUSH
26899: LD_VAR 0 8
26903: PPUSH
26904: CALL_OW 478
26908: UNION
26909: ST_TO_ADDR
26910: GO 26886
26912: POP
26913: POP
// if not fac_list then
26914: LD_VAR 0 17
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 27866
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26923: LD_ADDR_VAR 0 5
26927: PUSH
26928: LD_INT 4
26930: PUSH
26931: LD_INT 5
26933: PUSH
26934: LD_INT 9
26936: PUSH
26937: LD_INT 10
26939: PUSH
26940: LD_INT 6
26942: PUSH
26943: LD_INT 7
26945: PUSH
26946: LD_INT 11
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 27
26960: PUSH
26961: LD_INT 28
26963: PUSH
26964: LD_INT 26
26966: PUSH
26967: LD_INT 30
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 43
26978: PUSH
26979: LD_INT 44
26981: PUSH
26982: LD_INT 46
26984: PUSH
26985: LD_INT 45
26987: PUSH
26988: LD_INT 47
26990: PUSH
26991: LD_INT 49
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: PUSH
27007: LD_VAR 0 12
27011: ARRAY
27012: ST_TO_ADDR
// list := list isect fac_list ;
27013: LD_ADDR_VAR 0 5
27017: PUSH
27018: LD_VAR 0 5
27022: PUSH
27023: LD_VAR 0 17
27027: ISECT
27028: ST_TO_ADDR
// if not list then
27029: LD_VAR 0 5
27033: NOT
27034: IFFALSE 27038
// exit ;
27036: GO 27866
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27038: LD_VAR 0 12
27042: PUSH
27043: LD_INT 3
27045: EQUAL
27046: IFFALSE 27058
27048: PUSH
27049: LD_INT 49
27051: PUSH
27052: LD_VAR 0 5
27056: IN
27057: AND
27058: IFFALSE 27078
27060: PUSH
27061: LD_INT 31
27063: PPUSH
27064: LD_VAR 0 16
27068: PPUSH
27069: CALL_OW 321
27073: PUSH
27074: LD_INT 2
27076: EQUAL
27077: AND
27078: IFFALSE 27138
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27080: LD_INT 22
27082: PUSH
27083: LD_VAR 0 16
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 35
27094: PUSH
27095: LD_INT 49
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 91
27104: PUSH
27105: LD_VAR 0 1
27109: PUSH
27110: LD_INT 10
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: PPUSH
27123: CALL_OW 69
27127: NOT
27128: IFFALSE 27138
// weapon := ru_time_lapser ;
27130: LD_ADDR_VAR 0 18
27134: PUSH
27135: LD_INT 49
27137: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27138: LD_VAR 0 12
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: IN
27153: IFFALSE 27177
27155: PUSH
27156: LD_INT 11
27158: PUSH
27159: LD_VAR 0 5
27163: IN
27164: IFTRUE 27176
27166: PUSH
27167: LD_INT 30
27169: PUSH
27170: LD_VAR 0 5
27174: IN
27175: OR
27176: AND
27177: IFFALSE 27197
27179: PUSH
27180: LD_INT 6
27182: PPUSH
27183: LD_VAR 0 16
27187: PPUSH
27188: CALL_OW 321
27192: PUSH
27193: LD_INT 2
27195: EQUAL
27196: AND
27197: IFFALSE 27364
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27199: LD_INT 22
27201: PUSH
27202: LD_VAR 0 16
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 35
27216: PUSH
27217: LD_INT 11
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 35
27226: PUSH
27227: LD_INT 30
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 91
27241: PUSH
27242: LD_VAR 0 1
27246: PUSH
27247: LD_INT 18
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL_OW 69
27264: NOT
27265: IFFALSE 27341
27267: PUSH
27268: LD_INT 22
27270: PUSH
27271: LD_VAR 0 16
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 30
27285: PUSH
27286: LD_INT 32
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 30
27295: PUSH
27296: LD_INT 33
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 91
27310: PUSH
27311: LD_VAR 0 1
27315: PUSH
27316: LD_INT 12
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: PPUSH
27332: CALL_OW 69
27336: PUSH
27337: LD_INT 2
27339: GREATER
27340: AND
27341: IFFALSE 27364
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27343: LD_ADDR_VAR 0 18
27347: PUSH
27348: LD_INT 11
27350: PUSH
27351: LD_INT 30
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_VAR 0 12
27362: ARRAY
27363: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27364: LD_VAR 0 18
27368: NOT
27369: IFFALSE 27389
27371: PUSH
27372: LD_INT 40
27374: PPUSH
27375: LD_VAR 0 16
27379: PPUSH
27380: CALL_OW 321
27384: PUSH
27385: LD_INT 2
27387: EQUAL
27388: AND
27389: IFFALSE 27425
27391: PUSH
27392: LD_INT 7
27394: PUSH
27395: LD_VAR 0 5
27399: IN
27400: IFTRUE 27412
27402: PUSH
27403: LD_INT 28
27405: PUSH
27406: LD_VAR 0 5
27410: IN
27411: OR
27412: IFTRUE 27424
27414: PUSH
27415: LD_INT 45
27417: PUSH
27418: LD_VAR 0 5
27422: IN
27423: OR
27424: AND
27425: IFFALSE 27679
// begin hex := GetHexInfo ( x , y ) ;
27427: LD_ADDR_VAR 0 4
27431: PUSH
27432: LD_VAR 0 10
27436: PPUSH
27437: LD_VAR 0 11
27441: PPUSH
27442: CALL_OW 546
27446: ST_TO_ADDR
// if hex [ 1 ] then
27447: LD_VAR 0 4
27451: PUSH
27452: LD_INT 1
27454: ARRAY
27455: IFFALSE 27459
// exit ;
27457: GO 27866
// height := hex [ 2 ] ;
27459: LD_ADDR_VAR 0 15
27463: PUSH
27464: LD_VAR 0 4
27468: PUSH
27469: LD_INT 2
27471: ARRAY
27472: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27473: LD_ADDR_VAR 0 14
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 5
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// for i in tmp do
27496: LD_ADDR_VAR 0 8
27500: PUSH
27501: LD_VAR 0 14
27505: PUSH
27506: FOR_IN
27507: IFFALSE 27677
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27509: LD_ADDR_VAR 0 9
27513: PUSH
27514: LD_VAR 0 10
27518: PPUSH
27519: LD_VAR 0 8
27523: PPUSH
27524: LD_INT 5
27526: PPUSH
27527: CALL_OW 272
27531: PUSH
27532: LD_VAR 0 11
27536: PPUSH
27537: LD_VAR 0 8
27541: PPUSH
27542: LD_INT 5
27544: PPUSH
27545: CALL_OW 273
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27554: LD_VAR 0 9
27558: PUSH
27559: LD_INT 1
27561: ARRAY
27562: PPUSH
27563: LD_VAR 0 9
27567: PUSH
27568: LD_INT 2
27570: ARRAY
27571: PPUSH
27572: CALL_OW 488
27576: IFFALSE 27675
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27578: LD_ADDR_VAR 0 4
27582: PUSH
27583: LD_VAR 0 9
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PPUSH
27592: LD_VAR 0 9
27596: PUSH
27597: LD_INT 2
27599: ARRAY
27600: PPUSH
27601: CALL_OW 546
27605: ST_TO_ADDR
// if hex [ 1 ] then
27606: LD_VAR 0 4
27610: PUSH
27611: LD_INT 1
27613: ARRAY
27614: IFFALSE 27618
// continue ;
27616: GO 27506
// h := hex [ 2 ] ;
27618: LD_ADDR_VAR 0 13
27622: PUSH
27623: LD_VAR 0 4
27627: PUSH
27628: LD_INT 2
27630: ARRAY
27631: ST_TO_ADDR
// if h + 7 < height then
27632: LD_VAR 0 13
27636: PUSH
27637: LD_INT 7
27639: PLUS
27640: PUSH
27641: LD_VAR 0 15
27645: LESS
27646: IFFALSE 27675
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27648: LD_ADDR_VAR 0 18
27652: PUSH
27653: LD_INT 7
27655: PUSH
27656: LD_INT 28
27658: PUSH
27659: LD_INT 45
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: PUSH
27667: LD_VAR 0 12
27671: ARRAY
27672: ST_TO_ADDR
// break ;
27673: GO 27677
// end ; end ; end ;
27675: GO 27506
27677: POP
27678: POP
// end ; if not weapon then
27679: LD_VAR 0 18
27683: NOT
27684: IFFALSE 27744
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27686: LD_ADDR_VAR 0 5
27690: PUSH
27691: LD_VAR 0 5
27695: PUSH
27696: LD_INT 11
27698: PUSH
27699: LD_INT 30
27701: PUSH
27702: LD_INT 49
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: DIFF
27710: ST_TO_ADDR
// if not list then
27711: LD_VAR 0 5
27715: NOT
27716: IFFALSE 27720
// exit ;
27718: GO 27866
// weapon := list [ rand ( 1 , list ) ] ;
27720: LD_ADDR_VAR 0 18
27724: PUSH
27725: LD_VAR 0 5
27729: PUSH
27730: LD_INT 1
27732: PPUSH
27733: LD_VAR 0 5
27737: PPUSH
27738: CALL_OW 12
27742: ARRAY
27743: ST_TO_ADDR
// end ; if weapon then
27744: LD_VAR 0 18
27748: IFFALSE 27866
// begin tmp := CostOfWeapon ( weapon ) ;
27750: LD_ADDR_VAR 0 14
27754: PUSH
27755: LD_VAR 0 18
27759: PPUSH
27760: CALL_OW 451
27764: ST_TO_ADDR
// j := GetBase ( tower ) ;
27765: LD_ADDR_VAR 0 9
27769: PUSH
27770: LD_VAR 0 1
27774: PPUSH
27775: CALL_OW 274
27779: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27780: LD_VAR 0 9
27784: PPUSH
27785: LD_INT 1
27787: PPUSH
27788: CALL_OW 275
27792: PUSH
27793: LD_VAR 0 14
27797: PUSH
27798: LD_INT 1
27800: ARRAY
27801: GREATEREQUAL
27802: IFFALSE 27828
27804: PUSH
27805: LD_VAR 0 9
27809: PPUSH
27810: LD_INT 2
27812: PPUSH
27813: CALL_OW 275
27817: PUSH
27818: LD_VAR 0 14
27822: PUSH
27823: LD_INT 2
27825: ARRAY
27826: GREATEREQUAL
27827: AND
27828: IFFALSE 27854
27830: PUSH
27831: LD_VAR 0 9
27835: PPUSH
27836: LD_INT 3
27838: PPUSH
27839: CALL_OW 275
27843: PUSH
27844: LD_VAR 0 14
27848: PUSH
27849: LD_INT 3
27851: ARRAY
27852: GREATEREQUAL
27853: AND
27854: IFFALSE 27866
// result := weapon ;
27856: LD_ADDR_VAR 0 3
27860: PUSH
27861: LD_VAR 0 18
27865: ST_TO_ADDR
// end ; end ;
27866: LD_VAR 0 3
27870: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27871: LD_INT 0
27873: PPUSH
27874: PPUSH
// result := true ;
27875: LD_ADDR_VAR 0 3
27879: PUSH
27880: LD_INT 1
27882: ST_TO_ADDR
// if array1 = array2 then
27883: LD_VAR 0 1
27887: PUSH
27888: LD_VAR 0 2
27892: EQUAL
27893: IFFALSE 27953
// begin for i = 1 to array1 do
27895: LD_ADDR_VAR 0 4
27899: PUSH
27900: DOUBLE
27901: LD_INT 1
27903: DEC
27904: ST_TO_ADDR
27905: LD_VAR 0 1
27909: PUSH
27910: FOR_TO
27911: IFFALSE 27949
// if array1 [ i ] <> array2 [ i ] then
27913: LD_VAR 0 1
27917: PUSH
27918: LD_VAR 0 4
27922: ARRAY
27923: PUSH
27924: LD_VAR 0 2
27928: PUSH
27929: LD_VAR 0 4
27933: ARRAY
27934: NONEQUAL
27935: IFFALSE 27947
// begin result := false ;
27937: LD_ADDR_VAR 0 3
27941: PUSH
27942: LD_INT 0
27944: ST_TO_ADDR
// break ;
27945: GO 27949
// end ;
27947: GO 27910
27949: POP
27950: POP
// end else
27951: GO 27961
// result := false ;
27953: LD_ADDR_VAR 0 3
27957: PUSH
27958: LD_INT 0
27960: ST_TO_ADDR
// end ;
27961: LD_VAR 0 3
27965: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27966: LD_INT 0
27968: PPUSH
27969: PPUSH
// if not array1 or not array2 then
27970: LD_VAR 0 1
27974: NOT
27975: IFTRUE 27984
27977: PUSH
27978: LD_VAR 0 2
27982: NOT
27983: OR
27984: IFFALSE 27988
// exit ;
27986: GO 28052
// result := true ;
27988: LD_ADDR_VAR 0 3
27992: PUSH
27993: LD_INT 1
27995: ST_TO_ADDR
// for i = 1 to array1 do
27996: LD_ADDR_VAR 0 4
28000: PUSH
28001: DOUBLE
28002: LD_INT 1
28004: DEC
28005: ST_TO_ADDR
28006: LD_VAR 0 1
28010: PUSH
28011: FOR_TO
28012: IFFALSE 28050
// if array1 [ i ] <> array2 [ i ] then
28014: LD_VAR 0 1
28018: PUSH
28019: LD_VAR 0 4
28023: ARRAY
28024: PUSH
28025: LD_VAR 0 2
28029: PUSH
28030: LD_VAR 0 4
28034: ARRAY
28035: NONEQUAL
28036: IFFALSE 28048
// begin result := false ;
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_INT 0
28045: ST_TO_ADDR
// break ;
28046: GO 28050
// end ;
28048: GO 28011
28050: POP
28051: POP
// end ;
28052: LD_VAR 0 3
28056: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28057: LD_INT 0
28059: PPUSH
28060: PPUSH
28061: PPUSH
// pom := GetBase ( fac ) ;
28062: LD_ADDR_VAR 0 5
28066: PUSH
28067: LD_VAR 0 1
28071: PPUSH
28072: CALL_OW 274
28076: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28077: LD_ADDR_VAR 0 4
28081: PUSH
28082: LD_VAR 0 2
28086: PUSH
28087: LD_INT 1
28089: ARRAY
28090: PPUSH
28091: LD_VAR 0 2
28095: PUSH
28096: LD_INT 2
28098: ARRAY
28099: PPUSH
28100: LD_VAR 0 2
28104: PUSH
28105: LD_INT 3
28107: ARRAY
28108: PPUSH
28109: LD_VAR 0 2
28113: PUSH
28114: LD_INT 4
28116: ARRAY
28117: PPUSH
28118: CALL_OW 449
28122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_VAR 0 5
28132: PPUSH
28133: LD_INT 1
28135: PPUSH
28136: CALL_OW 275
28140: PUSH
28141: LD_VAR 0 4
28145: PUSH
28146: LD_INT 1
28148: ARRAY
28149: GREATEREQUAL
28150: IFFALSE 28176
28152: PUSH
28153: LD_VAR 0 5
28157: PPUSH
28158: LD_INT 2
28160: PPUSH
28161: CALL_OW 275
28165: PUSH
28166: LD_VAR 0 4
28170: PUSH
28171: LD_INT 2
28173: ARRAY
28174: GREATEREQUAL
28175: AND
28176: IFFALSE 28202
28178: PUSH
28179: LD_VAR 0 5
28183: PPUSH
28184: LD_INT 3
28186: PPUSH
28187: CALL_OW 275
28191: PUSH
28192: LD_VAR 0 4
28196: PUSH
28197: LD_INT 3
28199: ARRAY
28200: GREATEREQUAL
28201: AND
28202: ST_TO_ADDR
// end ;
28203: LD_VAR 0 3
28207: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28208: LD_INT 0
28210: PPUSH
28211: PPUSH
28212: PPUSH
28213: PPUSH
// pom := GetBase ( building ) ;
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_VAR 0 1
28223: PPUSH
28224: CALL_OW 274
28228: ST_TO_ADDR
// if not pom then
28229: LD_VAR 0 3
28233: NOT
28234: IFFALSE 28238
// exit ;
28236: GO 28412
// btype := GetBType ( building ) ;
28238: LD_ADDR_VAR 0 5
28242: PUSH
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 266
28252: ST_TO_ADDR
// if btype = b_armoury then
28253: LD_VAR 0 5
28257: PUSH
28258: LD_INT 4
28260: EQUAL
28261: IFFALSE 28271
// btype := b_barracks ;
28263: LD_ADDR_VAR 0 5
28267: PUSH
28268: LD_INT 5
28270: ST_TO_ADDR
// if btype = b_depot then
28271: LD_VAR 0 5
28275: PUSH
28276: LD_INT 0
28278: EQUAL
28279: IFFALSE 28289
// btype := b_warehouse ;
28281: LD_ADDR_VAR 0 5
28285: PUSH
28286: LD_INT 1
28288: ST_TO_ADDR
// if btype = b_workshop then
28289: LD_VAR 0 5
28293: PUSH
28294: LD_INT 2
28296: EQUAL
28297: IFFALSE 28307
// btype := b_factory ;
28299: LD_ADDR_VAR 0 5
28303: PUSH
28304: LD_INT 3
28306: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28307: LD_ADDR_VAR 0 4
28311: PUSH
28312: LD_VAR 0 5
28316: PPUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 248
28326: PPUSH
28327: CALL_OW 450
28331: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28332: LD_ADDR_VAR 0 2
28336: PUSH
28337: LD_VAR 0 3
28341: PPUSH
28342: LD_INT 1
28344: PPUSH
28345: CALL_OW 275
28349: PUSH
28350: LD_VAR 0 4
28354: PUSH
28355: LD_INT 1
28357: ARRAY
28358: GREATEREQUAL
28359: IFFALSE 28385
28361: PUSH
28362: LD_VAR 0 3
28366: PPUSH
28367: LD_INT 2
28369: PPUSH
28370: CALL_OW 275
28374: PUSH
28375: LD_VAR 0 4
28379: PUSH
28380: LD_INT 2
28382: ARRAY
28383: GREATEREQUAL
28384: AND
28385: IFFALSE 28411
28387: PUSH
28388: LD_VAR 0 3
28392: PPUSH
28393: LD_INT 3
28395: PPUSH
28396: CALL_OW 275
28400: PUSH
28401: LD_VAR 0 4
28405: PUSH
28406: LD_INT 3
28408: ARRAY
28409: GREATEREQUAL
28410: AND
28411: ST_TO_ADDR
// end ;
28412: LD_VAR 0 2
28416: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28417: LD_INT 0
28419: PPUSH
28420: PPUSH
28421: PPUSH
// pom := GetBase ( building ) ;
28422: LD_ADDR_VAR 0 4
28426: PUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 274
28436: ST_TO_ADDR
// if not pom then
28437: LD_VAR 0 4
28441: NOT
28442: IFFALSE 28446
// exit ;
28444: GO 28551
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28446: LD_ADDR_VAR 0 5
28450: PUSH
28451: LD_VAR 0 2
28455: PPUSH
28456: LD_VAR 0 1
28460: PPUSH
28461: CALL_OW 248
28465: PPUSH
28466: CALL_OW 450
28470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: LD_VAR 0 4
28480: PPUSH
28481: LD_INT 1
28483: PPUSH
28484: CALL_OW 275
28488: PUSH
28489: LD_VAR 0 5
28493: PUSH
28494: LD_INT 1
28496: ARRAY
28497: GREATEREQUAL
28498: IFFALSE 28524
28500: PUSH
28501: LD_VAR 0 4
28505: PPUSH
28506: LD_INT 2
28508: PPUSH
28509: CALL_OW 275
28513: PUSH
28514: LD_VAR 0 5
28518: PUSH
28519: LD_INT 2
28521: ARRAY
28522: GREATEREQUAL
28523: AND
28524: IFFALSE 28550
28526: PUSH
28527: LD_VAR 0 4
28531: PPUSH
28532: LD_INT 3
28534: PPUSH
28535: CALL_OW 275
28539: PUSH
28540: LD_VAR 0 5
28544: PUSH
28545: LD_INT 3
28547: ARRAY
28548: GREATEREQUAL
28549: AND
28550: ST_TO_ADDR
// end ;
28551: LD_VAR 0 3
28555: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28556: LD_INT 0
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
28565: PPUSH
28566: PPUSH
28567: PPUSH
28568: PPUSH
// result := false ;
28569: LD_ADDR_VAR 0 8
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28577: LD_VAR 0 5
28581: NOT
28582: IFTRUE 28591
28584: PUSH
28585: LD_VAR 0 1
28589: NOT
28590: OR
28591: IFTRUE 28600
28593: PUSH
28594: LD_VAR 0 2
28598: NOT
28599: OR
28600: IFTRUE 28609
28602: PUSH
28603: LD_VAR 0 3
28607: NOT
28608: OR
28609: IFFALSE 28613
// exit ;
28611: GO 29439
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28613: LD_ADDR_VAR 0 14
28617: PUSH
28618: LD_VAR 0 1
28622: PPUSH
28623: LD_VAR 0 2
28627: PPUSH
28628: LD_VAR 0 3
28632: PPUSH
28633: LD_VAR 0 4
28637: PPUSH
28638: LD_VAR 0 5
28642: PUSH
28643: LD_INT 1
28645: ARRAY
28646: PPUSH
28647: CALL_OW 248
28651: PPUSH
28652: LD_INT 0
28654: PPUSH
28655: CALL 30720 0 6
28659: ST_TO_ADDR
// if not hexes then
28660: LD_VAR 0 14
28664: NOT
28665: IFFALSE 28669
// exit ;
28667: GO 29439
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28669: LD_ADDR_VAR 0 17
28673: PUSH
28674: LD_VAR 0 5
28678: PPUSH
28679: LD_INT 22
28681: PUSH
28682: LD_VAR 0 13
28686: PPUSH
28687: CALL_OW 255
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 30
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 30
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PPUSH
28728: CALL_OW 72
28732: ST_TO_ADDR
// for i = 1 to hexes do
28733: LD_ADDR_VAR 0 9
28737: PUSH
28738: DOUBLE
28739: LD_INT 1
28741: DEC
28742: ST_TO_ADDR
28743: LD_VAR 0 14
28747: PUSH
28748: FOR_TO
28749: IFFALSE 29437
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28751: LD_ADDR_VAR 0 13
28755: PUSH
28756: LD_VAR 0 14
28760: PUSH
28761: LD_VAR 0 9
28765: ARRAY
28766: PUSH
28767: LD_INT 1
28769: ARRAY
28770: PPUSH
28771: LD_VAR 0 14
28775: PUSH
28776: LD_VAR 0 9
28780: ARRAY
28781: PUSH
28782: LD_INT 2
28784: ARRAY
28785: PPUSH
28786: CALL_OW 428
28790: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28791: LD_VAR 0 14
28795: PUSH
28796: LD_VAR 0 9
28800: ARRAY
28801: PUSH
28802: LD_INT 1
28804: ARRAY
28805: PPUSH
28806: LD_VAR 0 14
28810: PUSH
28811: LD_VAR 0 9
28815: ARRAY
28816: PUSH
28817: LD_INT 2
28819: ARRAY
28820: PPUSH
28821: CALL_OW 351
28825: IFTRUE 28864
28827: PUSH
28828: LD_VAR 0 14
28832: PUSH
28833: LD_VAR 0 9
28837: ARRAY
28838: PUSH
28839: LD_INT 1
28841: ARRAY
28842: PPUSH
28843: LD_VAR 0 14
28847: PUSH
28848: LD_VAR 0 9
28852: ARRAY
28853: PUSH
28854: LD_INT 2
28856: ARRAY
28857: PPUSH
28858: CALL_OW 488
28862: NOT
28863: OR
28864: IFTRUE 28881
28866: PUSH
28867: LD_VAR 0 13
28871: PPUSH
28872: CALL_OW 247
28876: PUSH
28877: LD_INT 3
28879: EQUAL
28880: OR
28881: IFFALSE 28887
// exit ;
28883: POP
28884: POP
28885: GO 29439
// if not tmp then
28887: LD_VAR 0 13
28891: NOT
28892: IFFALSE 28896
// continue ;
28894: GO 28748
// result := true ;
28896: LD_ADDR_VAR 0 8
28900: PUSH
28901: LD_INT 1
28903: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28904: LD_VAR 0 6
28908: IFFALSE 28925
28910: PUSH
28911: LD_VAR 0 13
28915: PPUSH
28916: CALL_OW 247
28920: PUSH
28921: LD_INT 2
28923: EQUAL
28924: AND
28925: IFFALSE 28942
28927: PUSH
28928: LD_VAR 0 13
28932: PPUSH
28933: CALL_OW 263
28937: PUSH
28938: LD_INT 1
28940: EQUAL
28941: AND
28942: IFFALSE 29106
// begin if IsDrivenBy ( tmp ) then
28944: LD_VAR 0 13
28948: PPUSH
28949: CALL_OW 311
28953: IFFALSE 28957
// continue ;
28955: GO 28748
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28957: LD_VAR 0 6
28961: PPUSH
28962: LD_INT 3
28964: PUSH
28965: LD_INT 60
28967: PUSH
28968: EMPTY
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 3
28977: PUSH
28978: LD_INT 55
28980: PUSH
28981: EMPTY
28982: LIST
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PPUSH
28992: CALL_OW 72
28996: IFFALSE 29104
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28998: LD_ADDR_VAR 0 18
29002: PUSH
29003: LD_VAR 0 6
29007: PPUSH
29008: LD_INT 3
29010: PUSH
29011: LD_INT 60
29013: PUSH
29014: EMPTY
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 3
29023: PUSH
29024: LD_INT 55
29026: PUSH
29027: EMPTY
29028: LIST
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 72
29042: PUSH
29043: LD_INT 1
29045: ARRAY
29046: ST_TO_ADDR
// if IsInUnit ( driver ) then
29047: LD_VAR 0 18
29051: PPUSH
29052: CALL_OW 310
29056: IFFALSE 29067
// ComExit ( driver ) ;
29058: LD_VAR 0 18
29062: PPUSH
29063: CALL 54720 0 1
// AddComEnterUnit ( driver , tmp ) ;
29067: LD_VAR 0 18
29071: PPUSH
29072: LD_VAR 0 13
29076: PPUSH
29077: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29081: LD_VAR 0 18
29085: PPUSH
29086: LD_VAR 0 7
29090: PPUSH
29091: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29095: LD_VAR 0 18
29099: PPUSH
29100: CALL_OW 181
// end ; continue ;
29104: GO 28748
// end ; if not cleaners or not tmp in cleaners then
29106: LD_VAR 0 6
29110: NOT
29111: IFTRUE 29126
29113: PUSH
29114: LD_VAR 0 13
29118: PUSH
29119: LD_VAR 0 6
29123: IN
29124: NOT
29125: OR
29126: IFFALSE 29435
// begin if dep then
29128: LD_VAR 0 17
29132: IFFALSE 29268
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29134: LD_ADDR_VAR 0 16
29138: PUSH
29139: LD_VAR 0 17
29143: PUSH
29144: LD_INT 1
29146: ARRAY
29147: PPUSH
29148: CALL_OW 250
29152: PPUSH
29153: LD_VAR 0 17
29157: PUSH
29158: LD_INT 1
29160: ARRAY
29161: PPUSH
29162: CALL_OW 254
29166: PPUSH
29167: LD_INT 5
29169: PPUSH
29170: CALL_OW 272
29174: PUSH
29175: LD_VAR 0 17
29179: PUSH
29180: LD_INT 1
29182: ARRAY
29183: PPUSH
29184: CALL_OW 251
29188: PPUSH
29189: LD_VAR 0 17
29193: PUSH
29194: LD_INT 1
29196: ARRAY
29197: PPUSH
29198: CALL_OW 254
29202: PPUSH
29203: LD_INT 5
29205: PPUSH
29206: CALL_OW 273
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29215: LD_VAR 0 16
29219: PUSH
29220: LD_INT 1
29222: ARRAY
29223: PPUSH
29224: LD_VAR 0 16
29228: PUSH
29229: LD_INT 2
29231: ARRAY
29232: PPUSH
29233: CALL_OW 488
29237: IFFALSE 29268
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29239: LD_VAR 0 13
29243: PPUSH
29244: LD_VAR 0 16
29248: PUSH
29249: LD_INT 1
29251: ARRAY
29252: PPUSH
29253: LD_VAR 0 16
29257: PUSH
29258: LD_INT 2
29260: ARRAY
29261: PPUSH
29262: CALL_OW 111
// continue ;
29266: GO 28748
// end ; end ; r := GetDir ( tmp ) ;
29268: LD_ADDR_VAR 0 15
29272: PUSH
29273: LD_VAR 0 13
29277: PPUSH
29278: CALL_OW 254
29282: ST_TO_ADDR
// if r = 5 then
29283: LD_VAR 0 15
29287: PUSH
29288: LD_INT 5
29290: EQUAL
29291: IFFALSE 29301
// r := 0 ;
29293: LD_ADDR_VAR 0 15
29297: PUSH
29298: LD_INT 0
29300: ST_TO_ADDR
// for j = r to 5 do
29301: LD_ADDR_VAR 0 10
29305: PUSH
29306: DOUBLE
29307: LD_VAR 0 15
29311: DEC
29312: ST_TO_ADDR
29313: LD_INT 5
29315: PUSH
29316: FOR_TO
29317: IFFALSE 29433
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29319: LD_ADDR_VAR 0 11
29323: PUSH
29324: LD_VAR 0 13
29328: PPUSH
29329: CALL_OW 250
29333: PPUSH
29334: LD_VAR 0 10
29338: PPUSH
29339: LD_INT 2
29341: PPUSH
29342: CALL_OW 272
29346: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29347: LD_ADDR_VAR 0 12
29351: PUSH
29352: LD_VAR 0 13
29356: PPUSH
29357: CALL_OW 251
29361: PPUSH
29362: LD_VAR 0 10
29366: PPUSH
29367: LD_INT 2
29369: PPUSH
29370: CALL_OW 273
29374: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29375: LD_VAR 0 11
29379: PPUSH
29380: LD_VAR 0 12
29384: PPUSH
29385: CALL_OW 488
29389: IFFALSE 29408
29391: PUSH
29392: LD_VAR 0 11
29396: PPUSH
29397: LD_VAR 0 12
29401: PPUSH
29402: CALL_OW 428
29406: NOT
29407: AND
29408: IFFALSE 29431
// begin ComMoveXY ( tmp , _x , _y ) ;
29410: LD_VAR 0 13
29414: PPUSH
29415: LD_VAR 0 11
29419: PPUSH
29420: LD_VAR 0 12
29424: PPUSH
29425: CALL_OW 111
// break ;
29429: GO 29433
// end ; end ;
29431: GO 29316
29433: POP
29434: POP
// end ; end ;
29435: GO 28748
29437: POP
29438: POP
// end ;
29439: LD_VAR 0 8
29443: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29444: LD_INT 0
29446: PPUSH
// result := true ;
29447: LD_ADDR_VAR 0 3
29451: PUSH
29452: LD_INT 1
29454: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29455: LD_VAR 0 2
29459: PUSH
29460: LD_INT 24
29462: DOUBLE
29463: EQUAL
29464: IFTRUE 29474
29466: LD_INT 33
29468: DOUBLE
29469: EQUAL
29470: IFTRUE 29474
29472: GO 29499
29474: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29475: LD_ADDR_VAR 0 3
29479: PUSH
29480: LD_INT 32
29482: PPUSH
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 321
29492: PUSH
29493: LD_INT 2
29495: EQUAL
29496: ST_TO_ADDR
29497: GO 29815
29499: LD_INT 20
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29532
29507: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 6
29515: PPUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: CALL_OW 321
29525: PUSH
29526: LD_INT 2
29528: EQUAL
29529: ST_TO_ADDR
29530: GO 29815
29532: LD_INT 22
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29546
29538: LD_INT 36
29540: DOUBLE
29541: EQUAL
29542: IFTRUE 29546
29544: GO 29571
29546: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29547: LD_ADDR_VAR 0 3
29551: PUSH
29552: LD_INT 15
29554: PPUSH
29555: LD_VAR 0 1
29559: PPUSH
29560: CALL_OW 321
29564: PUSH
29565: LD_INT 2
29567: EQUAL
29568: ST_TO_ADDR
29569: GO 29815
29571: LD_INT 30
29573: DOUBLE
29574: EQUAL
29575: IFTRUE 29579
29577: GO 29604
29579: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_INT 20
29587: PPUSH
29588: LD_VAR 0 1
29592: PPUSH
29593: CALL_OW 321
29597: PUSH
29598: LD_INT 2
29600: EQUAL
29601: ST_TO_ADDR
29602: GO 29815
29604: LD_INT 28
29606: DOUBLE
29607: EQUAL
29608: IFTRUE 29618
29610: LD_INT 21
29612: DOUBLE
29613: EQUAL
29614: IFTRUE 29618
29616: GO 29643
29618: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29619: LD_ADDR_VAR 0 3
29623: PUSH
29624: LD_INT 21
29626: PPUSH
29627: LD_VAR 0 1
29631: PPUSH
29632: CALL_OW 321
29636: PUSH
29637: LD_INT 2
29639: EQUAL
29640: ST_TO_ADDR
29641: GO 29815
29643: LD_INT 16
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29676
29651: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 84
29659: PPUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 321
29669: PUSH
29670: LD_INT 2
29672: EQUAL
29673: ST_TO_ADDR
29674: GO 29815
29676: LD_INT 19
29678: DOUBLE
29679: EQUAL
29680: IFTRUE 29690
29682: LD_INT 23
29684: DOUBLE
29685: EQUAL
29686: IFTRUE 29690
29688: GO 29715
29690: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29691: LD_ADDR_VAR 0 3
29695: PUSH
29696: LD_INT 83
29698: PPUSH
29699: LD_VAR 0 1
29703: PPUSH
29704: CALL_OW 321
29708: PUSH
29709: LD_INT 2
29711: EQUAL
29712: ST_TO_ADDR
29713: GO 29815
29715: LD_INT 17
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29748
29723: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_INT 39
29731: PPUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 321
29741: PUSH
29742: LD_INT 2
29744: EQUAL
29745: ST_TO_ADDR
29746: GO 29815
29748: LD_INT 18
29750: DOUBLE
29751: EQUAL
29752: IFTRUE 29756
29754: GO 29781
29756: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29757: LD_ADDR_VAR 0 3
29761: PUSH
29762: LD_INT 40
29764: PPUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 321
29774: PUSH
29775: LD_INT 2
29777: EQUAL
29778: ST_TO_ADDR
29779: GO 29815
29781: LD_INT 27
29783: DOUBLE
29784: EQUAL
29785: IFTRUE 29789
29787: GO 29814
29789: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_INT 35
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 321
29807: PUSH
29808: LD_INT 2
29810: EQUAL
29811: ST_TO_ADDR
29812: GO 29815
29814: POP
// end ;
29815: LD_VAR 0 3
29819: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29820: LD_INT 0
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
// result := false ;
29833: LD_ADDR_VAR 0 6
29837: PUSH
29838: LD_INT 0
29840: ST_TO_ADDR
// if btype = b_depot then
29841: LD_VAR 0 2
29845: PUSH
29846: LD_INT 0
29848: EQUAL
29849: IFFALSE 29861
// begin result := true ;
29851: LD_ADDR_VAR 0 6
29855: PUSH
29856: LD_INT 1
29858: ST_TO_ADDR
// exit ;
29859: GO 30715
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29861: LD_VAR 0 1
29865: NOT
29866: IFTRUE 29891
29868: PUSH
29869: LD_VAR 0 1
29873: PPUSH
29874: CALL_OW 266
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: IN
29889: NOT
29890: OR
29891: IFTRUE 29900
29893: PUSH
29894: LD_VAR 0 2
29898: NOT
29899: OR
29900: IFTRUE 29936
29902: PUSH
29903: LD_VAR 0 5
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 2
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: LD_INT 5
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: IN
29934: NOT
29935: OR
29936: IFTRUE 29955
29938: PUSH
29939: LD_VAR 0 3
29943: PPUSH
29944: LD_VAR 0 4
29948: PPUSH
29949: CALL_OW 488
29953: NOT
29954: OR
29955: IFFALSE 29959
// exit ;
29957: GO 30715
// side := GetSide ( depot ) ;
29959: LD_ADDR_VAR 0 9
29963: PUSH
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 255
29973: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29974: LD_VAR 0 9
29978: PPUSH
29979: LD_VAR 0 2
29983: PPUSH
29984: CALL 29444 0 2
29988: NOT
29989: IFFALSE 29993
// exit ;
29991: GO 30715
// pom := GetBase ( depot ) ;
29993: LD_ADDR_VAR 0 10
29997: PUSH
29998: LD_VAR 0 1
30002: PPUSH
30003: CALL_OW 274
30007: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30008: LD_ADDR_VAR 0 11
30012: PUSH
30013: LD_VAR 0 2
30017: PPUSH
30018: LD_VAR 0 1
30022: PPUSH
30023: CALL_OW 248
30027: PPUSH
30028: CALL_OW 450
30032: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30033: LD_VAR 0 10
30037: PPUSH
30038: LD_INT 1
30040: PPUSH
30041: CALL_OW 275
30045: PUSH
30046: LD_VAR 0 11
30050: PUSH
30051: LD_INT 1
30053: ARRAY
30054: GREATEREQUAL
30055: IFFALSE 30081
30057: PUSH
30058: LD_VAR 0 10
30062: PPUSH
30063: LD_INT 2
30065: PPUSH
30066: CALL_OW 275
30070: PUSH
30071: LD_VAR 0 11
30075: PUSH
30076: LD_INT 2
30078: ARRAY
30079: GREATEREQUAL
30080: AND
30081: IFFALSE 30107
30083: PUSH
30084: LD_VAR 0 10
30088: PPUSH
30089: LD_INT 3
30091: PPUSH
30092: CALL_OW 275
30096: PUSH
30097: LD_VAR 0 11
30101: PUSH
30102: LD_INT 3
30104: ARRAY
30105: GREATEREQUAL
30106: AND
30107: NOT
30108: IFFALSE 30112
// exit ;
30110: GO 30715
// if GetBType ( depot ) = b_depot then
30112: LD_VAR 0 1
30116: PPUSH
30117: CALL_OW 266
30121: PUSH
30122: LD_INT 0
30124: EQUAL
30125: IFFALSE 30137
// dist := 28 else
30127: LD_ADDR_VAR 0 14
30131: PUSH
30132: LD_INT 28
30134: ST_TO_ADDR
30135: GO 30145
// dist := 36 ;
30137: LD_ADDR_VAR 0 14
30141: PUSH
30142: LD_INT 36
30144: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30145: LD_VAR 0 1
30149: PPUSH
30150: LD_VAR 0 3
30154: PPUSH
30155: LD_VAR 0 4
30159: PPUSH
30160: CALL_OW 297
30164: PUSH
30165: LD_VAR 0 14
30169: GREATER
30170: IFFALSE 30174
// exit ;
30172: GO 30715
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30174: LD_ADDR_VAR 0 12
30178: PUSH
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: LD_VAR 0 4
30193: PPUSH
30194: LD_VAR 0 5
30198: PPUSH
30199: LD_VAR 0 1
30203: PPUSH
30204: CALL_OW 248
30208: PPUSH
30209: LD_INT 0
30211: PPUSH
30212: CALL 30720 0 6
30216: ST_TO_ADDR
// if not hexes then
30217: LD_VAR 0 12
30221: NOT
30222: IFFALSE 30226
// exit ;
30224: GO 30715
// hex := GetHexInfo ( x , y ) ;
30226: LD_ADDR_VAR 0 15
30230: PUSH
30231: LD_VAR 0 3
30235: PPUSH
30236: LD_VAR 0 4
30240: PPUSH
30241: CALL_OW 546
30245: ST_TO_ADDR
// if hex [ 1 ] then
30246: LD_VAR 0 15
30250: PUSH
30251: LD_INT 1
30253: ARRAY
30254: IFFALSE 30258
// exit ;
30256: GO 30715
// height := hex [ 2 ] ;
30258: LD_ADDR_VAR 0 13
30262: PUSH
30263: LD_VAR 0 15
30267: PUSH
30268: LD_INT 2
30270: ARRAY
30271: ST_TO_ADDR
// for i = 1 to hexes do
30272: LD_ADDR_VAR 0 7
30276: PUSH
30277: DOUBLE
30278: LD_INT 1
30280: DEC
30281: ST_TO_ADDR
30282: LD_VAR 0 12
30286: PUSH
30287: FOR_TO
30288: IFFALSE 30632
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30290: LD_VAR 0 12
30294: PUSH
30295: LD_VAR 0 7
30299: ARRAY
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 12
30309: PUSH
30310: LD_VAR 0 7
30314: ARRAY
30315: PUSH
30316: LD_INT 2
30318: ARRAY
30319: PPUSH
30320: CALL_OW 488
30324: NOT
30325: IFTRUE 30367
30327: PUSH
30328: LD_VAR 0 12
30332: PUSH
30333: LD_VAR 0 7
30337: ARRAY
30338: PUSH
30339: LD_INT 1
30341: ARRAY
30342: PPUSH
30343: LD_VAR 0 12
30347: PUSH
30348: LD_VAR 0 7
30352: ARRAY
30353: PUSH
30354: LD_INT 2
30356: ARRAY
30357: PPUSH
30358: CALL_OW 428
30362: PUSH
30363: LD_INT 0
30365: GREATER
30366: OR
30367: IFTRUE 30405
30369: PUSH
30370: LD_VAR 0 12
30374: PUSH
30375: LD_VAR 0 7
30379: ARRAY
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 12
30389: PUSH
30390: LD_VAR 0 7
30394: ARRAY
30395: PUSH
30396: LD_INT 2
30398: ARRAY
30399: PPUSH
30400: CALL_OW 351
30404: OR
30405: IFFALSE 30411
// exit ;
30407: POP
30408: POP
30409: GO 30715
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30411: LD_ADDR_VAR 0 8
30415: PUSH
30416: LD_VAR 0 12
30420: PUSH
30421: LD_VAR 0 7
30425: ARRAY
30426: PUSH
30427: LD_INT 1
30429: ARRAY
30430: PPUSH
30431: LD_VAR 0 12
30435: PUSH
30436: LD_VAR 0 7
30440: ARRAY
30441: PUSH
30442: LD_INT 2
30444: ARRAY
30445: PPUSH
30446: CALL_OW 546
30450: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30451: LD_VAR 0 8
30455: PUSH
30456: LD_INT 1
30458: ARRAY
30459: IFTRUE 30481
30461: PUSH
30462: LD_VAR 0 8
30466: PUSH
30467: LD_INT 2
30469: ARRAY
30470: PUSH
30471: LD_VAR 0 13
30475: PUSH
30476: LD_INT 2
30478: PLUS
30479: GREATER
30480: OR
30481: IFTRUE 30503
30483: PUSH
30484: LD_VAR 0 8
30488: PUSH
30489: LD_INT 2
30491: ARRAY
30492: PUSH
30493: LD_VAR 0 13
30497: PUSH
30498: LD_INT 2
30500: MINUS
30501: LESS
30502: OR
30503: IFTRUE 30571
30505: PUSH
30506: LD_VAR 0 8
30510: PUSH
30511: LD_INT 3
30513: ARRAY
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 8
30520: PUSH
30521: LD_INT 9
30523: PUSH
30524: LD_INT 10
30526: PUSH
30527: LD_INT 11
30529: PUSH
30530: LD_INT 12
30532: PUSH
30533: LD_INT 13
30535: PUSH
30536: LD_INT 16
30538: PUSH
30539: LD_INT 17
30541: PUSH
30542: LD_INT 18
30544: PUSH
30545: LD_INT 19
30547: PUSH
30548: LD_INT 20
30550: PUSH
30551: LD_INT 21
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: IN
30569: NOT
30570: OR
30571: IFTRUE 30584
30573: PUSH
30574: LD_VAR 0 8
30578: PUSH
30579: LD_INT 5
30581: ARRAY
30582: NOT
30583: OR
30584: IFTRUE 30624
30586: PUSH
30587: LD_VAR 0 8
30591: PUSH
30592: LD_INT 6
30594: ARRAY
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: LD_INT 7
30604: PUSH
30605: LD_INT 9
30607: PUSH
30608: LD_INT 10
30610: PUSH
30611: LD_INT 11
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: IN
30622: NOT
30623: OR
30624: IFFALSE 30630
// exit ;
30626: POP
30627: POP
30628: GO 30715
// end ;
30630: GO 30287
30632: POP
30633: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30634: LD_VAR 0 9
30638: PPUSH
30639: LD_VAR 0 3
30643: PPUSH
30644: LD_VAR 0 4
30648: PPUSH
30649: LD_INT 20
30651: PPUSH
30652: CALL 22534 0 4
30656: PUSH
30657: LD_INT 4
30659: ARRAY
30660: IFFALSE 30664
// exit ;
30662: GO 30715
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30664: LD_VAR 0 2
30668: PUSH
30669: LD_INT 29
30671: PUSH
30672: LD_INT 30
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: IN
30679: IFFALSE 30703
30681: PUSH
30682: LD_VAR 0 3
30686: PPUSH
30687: LD_VAR 0 4
30691: PPUSH
30692: LD_VAR 0 9
30696: PPUSH
30697: CALL_OW 440
30701: NOT
30702: AND
30703: IFFALSE 30707
// exit ;
30705: GO 30715
// result := true ;
30707: LD_ADDR_VAR 0 6
30711: PUSH
30712: LD_INT 1
30714: ST_TO_ADDR
// end ;
30715: LD_VAR 0 6
30719: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30720: LD_INT 0
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
30768: PPUSH
30769: PPUSH
30770: PPUSH
30771: PPUSH
30772: PPUSH
30773: PPUSH
30774: PPUSH
30775: PPUSH
30776: PPUSH
30777: PPUSH
30778: PPUSH
30779: PPUSH
// result = [ ] ;
30780: LD_ADDR_VAR 0 7
30784: PUSH
30785: EMPTY
30786: ST_TO_ADDR
// temp_list = [ ] ;
30787: LD_ADDR_VAR 0 9
30791: PUSH
30792: EMPTY
30793: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30794: LD_VAR 0 4
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: LD_INT 4
30813: PUSH
30814: LD_INT 5
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: IN
30825: NOT
30826: IFTRUE 30869
30828: PUSH
30829: LD_VAR 0 1
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: IN
30844: IFFALSE 30868
30846: PUSH
30847: LD_VAR 0 5
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 3
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: IN
30866: NOT
30867: AND
30868: OR
30869: IFFALSE 30873
// exit ;
30871: GO 49272
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30873: LD_VAR 0 1
30877: PUSH
30878: LD_INT 6
30880: PUSH
30881: LD_INT 7
30883: PUSH
30884: LD_INT 8
30886: PUSH
30887: LD_INT 13
30889: PUSH
30890: LD_INT 12
30892: PUSH
30893: LD_INT 15
30895: PUSH
30896: LD_INT 11
30898: PUSH
30899: LD_INT 14
30901: PUSH
30902: LD_INT 10
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: IN
30916: IFFALSE 30926
// btype = b_lab ;
30918: LD_ADDR_VAR 0 1
30922: PUSH
30923: LD_INT 6
30925: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30926: LD_VAR 0 6
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: IN
30945: NOT
30946: IFTRUE 31014
30948: PUSH
30949: LD_VAR 0 1
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 3
30965: PUSH
30966: LD_INT 6
30968: PUSH
30969: LD_INT 36
30971: PUSH
30972: LD_INT 4
30974: PUSH
30975: LD_INT 5
30977: PUSH
30978: LD_INT 31
30980: PUSH
30981: LD_INT 32
30983: PUSH
30984: LD_INT 33
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: IN
31000: NOT
31001: IFFALSE 31013
31003: PUSH
31004: LD_VAR 0 6
31008: PUSH
31009: LD_INT 1
31011: EQUAL
31012: AND
31013: OR
31014: IFTRUE 31046
31016: PUSH
31017: LD_VAR 0 1
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: LD_INT 3
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: IN
31032: NOT
31033: IFFALSE 31045
31035: PUSH
31036: LD_VAR 0 6
31040: PUSH
31041: LD_INT 2
31043: EQUAL
31044: AND
31045: OR
31046: IFFALSE 31056
// mode = 0 ;
31048: LD_ADDR_VAR 0 6
31052: PUSH
31053: LD_INT 0
31055: ST_TO_ADDR
// case mode of 0 :
31056: LD_VAR 0 6
31060: PUSH
31061: LD_INT 0
31063: DOUBLE
31064: EQUAL
31065: IFTRUE 31069
31067: GO 42522
31069: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31070: LD_ADDR_VAR 0 11
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 1
31128: NEG
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 1
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: LD_INT 2
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 1
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31263: LD_ADDR_VAR 0 12
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: NEG
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 2
31386: NEG
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31459: LD_ADDR_VAR 0 13
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 2
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 2
31594: NEG
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: LD_INT 3
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 3
31618: NEG
31619: PUSH
31620: LD_INT 2
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 3
31630: NEG
31631: PUSH
31632: LD_INT 3
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31658: LD_ADDR_VAR 0 14
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: NEG
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: LD_INT 2
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: LD_INT 3
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31854: LD_ADDR_VAR 0 15
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: NEG
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32047: LD_ADDR_VAR 0 16
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 3
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 3
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32240: LD_ADDR_VAR 0 17
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 1
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 2
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 2
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 2
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: LD_INT 2
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: LD_INT 2
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32470: LD_ADDR_VAR 0 18
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: LD_INT 1
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: LD_INT 2
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: LD_INT 1
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 2
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 2
32646: NEG
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: LD_INT 2
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32700: LD_ADDR_VAR 0 19
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 2
32887: NEG
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 2
32899: NEG
32900: PUSH
32901: LD_INT 2
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32930: LD_ADDR_VAR 0 20
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 1
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: NEG
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 2
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: LD_INT 2
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33160: LD_ADDR_VAR 0 21
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 0
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 1
33241: NEG
33242: PUSH
33243: LD_INT 2
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 2
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33390: LD_ADDR_VAR 0 22
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 2
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: LD_INT 2
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 2
33577: NEG
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: LD_INT 2
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33620: LD_ADDR_VAR 0 23
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 2
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: NEG
33832: PUSH
33833: LD_INT 3
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 3
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33900: LD_ADDR_VAR 0 24
33904: PUSH
33905: LD_INT 0
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: LD_INT 2
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 2
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 2
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 2
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 3
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 3
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34176: LD_ADDR_VAR 0 25
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 2
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 3
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 3
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34450: LD_ADDR_VAR 0 26
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 2
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: NEG
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: NEG
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: NEG
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 3
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 3
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34726: LD_ADDR_VAR 0 27
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: LD_INT 2
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 2
34913: NEG
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 3
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 3
34971: NEG
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35006: LD_ADDR_VAR 0 28
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: LD_INT 3
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 3
35253: NEG
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35288: LD_ADDR_VAR 0 29
35292: PUSH
35293: LD_INT 0
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: LD_INT 0
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 2
35454: NEG
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 2
35478: NEG
35479: PUSH
35480: LD_INT 3
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 3
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 3
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 3
35532: NEG
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35567: LD_ADDR_VAR 0 30
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 0
35660: PUSH
35661: LD_INT 2
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 2
35744: NEG
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 3
35810: NEG
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35845: LD_ADDR_VAR 0 31
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: LD_INT 2
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 3
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 3
36088: NEG
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36123: LD_ADDR_VAR 0 32
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 3
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 3
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: LD_INT 3
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 3
36366: NEG
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36401: LD_ADDR_VAR 0 33
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: LD_INT 2
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: NEG
36592: PUSH
36593: LD_INT 3
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: NEG
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36680: LD_ADDR_VAR 0 34
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: LD_INT 2
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 3
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 3
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36960: LD_ADDR_VAR 0 35
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37072: LD_ADDR_VAR 0 36
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37184: LD_ADDR_VAR 0 37
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37296: LD_ADDR_VAR 0 38
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37408: LD_ADDR_VAR 0 39
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 2
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37520: LD_ADDR_VAR 0 40
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37632: LD_ADDR_VAR 0 41
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: LD_INT 3
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 3
37906: NEG
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 3
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37982: LD_ADDR_VAR 0 42
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 2
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 2
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: LD_INT 3
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 3
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 3
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 3
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 3
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38332: LD_ADDR_VAR 0 43
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: NEG
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 3
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 3
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 3
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 3
38628: NEG
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38680: LD_ADDR_VAR 0 44
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: LD_INT 3
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 3
38954: NEG
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 3
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 3
38977: NEG
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 3
38989: NEG
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39030: LD_ADDR_VAR 0 45
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: NEG
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 3
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 3
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: LD_INT 3
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: LD_INT 3
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: LD_INT 3
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 3
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 3
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 3
39327: NEG
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: NEG
39340: PUSH
39341: LD_INT 3
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39380: LD_ADDR_VAR 0 46
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: NEG
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 1
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 2
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 3
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 3
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 3
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 3
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 3
39676: NEG
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 3
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39728: LD_ADDR_VAR 0 47
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39879: LD_ADDR_VAR 0 48
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40026: LD_ADDR_VAR 0 49
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40170: LD_ADDR_VAR 0 50
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40314: LD_ADDR_VAR 0 51
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40461: LD_ADDR_VAR 0 52
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40612: LD_ADDR_VAR 0 53
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40842: LD_ADDR_VAR 0 54
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41072: LD_ADDR_VAR 0 55
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: NEG
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41302: LD_ADDR_VAR 0 56
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 2
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 2
41478: NEG
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: NEG
41502: PUSH
41503: LD_INT 2
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41532: LD_ADDR_VAR 0 57
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 1
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 2
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41762: LD_ADDR_VAR 0 58
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: NEG
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41992: LD_ADDR_VAR 0 59
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42080: LD_ADDR_VAR 0 60
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42168: LD_ADDR_VAR 0 61
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 1
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42256: LD_ADDR_VAR 0 62
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42344: LD_ADDR_VAR 0 63
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42432: LD_ADDR_VAR 0 64
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// end ; 1 :
42520: GO 48417
42522: LD_INT 1
42524: DOUBLE
42525: EQUAL
42526: IFTRUE 42530
42528: GO 45153
42530: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42531: LD_ADDR_VAR 0 11
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 3
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: LD_INT 3
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42575: LD_ADDR_VAR 0 12
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42616: LD_ADDR_VAR 0 13
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: LD_INT 3
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42656: LD_ADDR_VAR 0 14
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42697: LD_ADDR_VAR 0 15
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42741: LD_ADDR_VAR 0 16
42745: PUSH
42746: LD_INT 2
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: NEG
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: NEG
42773: PUSH
42774: LD_INT 3
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42787: LD_ADDR_VAR 0 17
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 3
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 3
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 2
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42831: LD_ADDR_VAR 0 18
42835: PUSH
42836: LD_INT 2
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42872: LD_ADDR_VAR 0 19
42876: PUSH
42877: LD_INT 3
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 3
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42912: LD_ADDR_VAR 0 20
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 3
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 3
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42953: LD_ADDR_VAR 0 21
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 3
42971: NEG
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42997: LD_ADDR_VAR 0 22
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 3
43016: NEG
43017: PUSH
43018: LD_INT 2
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 3
43028: NEG
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43043: LD_ADDR_VAR 0 23
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 3
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: LD_INT 4
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 3
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43087: LD_ADDR_VAR 0 24
43091: PUSH
43092: LD_INT 3
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 4
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43128: LD_ADDR_VAR 0 25
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: LD_INT 3
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 4
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43168: LD_ADDR_VAR 0 26
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43209: LD_ADDR_VAR 0 27
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 3
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 4
43238: NEG
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43253: LD_ADDR_VAR 0 28
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 3
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 3
43272: NEG
43273: PUSH
43274: LD_INT 4
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 4
43284: NEG
43285: PUSH
43286: LD_INT 3
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43299: LD_ADDR_VAR 0 29
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 2
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 4
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 4
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 3
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 5
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 5
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 4
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: LD_INT 6
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 6
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 5
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43454: LD_ADDR_VAR 0 30
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 3
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 4
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 4
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 4
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 5
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 5
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 5
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 6
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 6
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43597: LD_ADDR_VAR 0 31
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: PUSH
43615: LD_INT 3
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 3
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 4
43634: PUSH
43635: LD_INT 3
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 4
43644: PUSH
43645: LD_INT 4
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 3
43654: PUSH
43655: LD_INT 4
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 5
43664: PUSH
43665: LD_INT 4
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 5
43674: PUSH
43675: LD_INT 5
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 4
43684: PUSH
43685: LD_INT 5
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 6
43694: PUSH
43695: LD_INT 5
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 6
43704: PUSH
43705: LD_INT 6
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 5
43714: PUSH
43715: LD_INT 6
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43736: LD_ADDR_VAR 0 32
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 3
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 0
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 4
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 4
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 3
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 5
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 5
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 4
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 6
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 6
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 5
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43879: LD_ADDR_VAR 0 33
43883: PUSH
43884: LD_INT 2
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 4
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 4
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 4
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 5
43965: NEG
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 5
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 5
43988: NEG
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 6
43999: NEG
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 6
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44034: LD_ADDR_VAR 0 34
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 3
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 3
44053: NEG
44054: PUSH
44055: LD_INT 2
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 3
44065: NEG
44066: PUSH
44067: LD_INT 3
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 3
44077: NEG
44078: PUSH
44079: LD_INT 4
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 4
44089: NEG
44090: PUSH
44091: LD_INT 3
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 4
44101: NEG
44102: PUSH
44103: LD_INT 4
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 4
44113: NEG
44114: PUSH
44115: LD_INT 5
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 5
44125: NEG
44126: PUSH
44127: LD_INT 4
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 5
44137: NEG
44138: PUSH
44139: LD_INT 5
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 5
44149: NEG
44150: PUSH
44151: LD_INT 6
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 6
44161: NEG
44162: PUSH
44163: LD_INT 5
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 6
44173: NEG
44174: PUSH
44175: LD_INT 6
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44197: LD_ADDR_VAR 0 41
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44241: LD_ADDR_VAR 0 42
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: LIST
44281: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44282: LD_ADDR_VAR 0 43
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44322: LD_ADDR_VAR 0 44
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44363: LD_ADDR_VAR 0 45
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 3
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44407: LD_ADDR_VAR 0 46
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 3
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 3
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44453: LD_ADDR_VAR 0 47
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 3
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44486: LD_ADDR_VAR 0 48
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44517: LD_ADDR_VAR 0 49
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44546: LD_ADDR_VAR 0 50
44550: PUSH
44551: LD_INT 2
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44575: LD_ADDR_VAR 0 51
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44606: LD_ADDR_VAR 0 52
44610: PUSH
44611: LD_INT 3
44613: NEG
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44639: LD_ADDR_VAR 0 53
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: LD_INT 3
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 3
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44683: LD_ADDR_VAR 0 54
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44724: LD_ADDR_VAR 0 55
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: LD_INT 2
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44764: LD_ADDR_VAR 0 56
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44805: LD_ADDR_VAR 0 57
44809: PUSH
44810: LD_INT 2
44812: NEG
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: NEG
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 3
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44849: LD_ADDR_VAR 0 58
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 3
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 3
44880: NEG
44881: PUSH
44882: LD_INT 3
44884: NEG
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44895: LD_ADDR_VAR 0 59
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44939: LD_ADDR_VAR 0 60
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44980: LD_ADDR_VAR 0 61
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45020: LD_ADDR_VAR 0 62
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45061: LD_ADDR_VAR 0 63
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45105: LD_ADDR_VAR 0 64
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: ST_TO_ADDR
// end ; 2 :
45151: GO 48417
45153: LD_INT 2
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45161
45159: GO 48416
45161: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45162: LD_ADDR_VAR 0 29
45166: PUSH
45167: LD_INT 4
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 4
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 5
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 5
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 4
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 5
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 4
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 4
45292: PUSH
45293: LD_INT 4
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: LD_INT 4
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: LD_INT 3
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 4
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 4
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 4
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 5
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 5
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 5
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 3
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 3
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 4
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 4
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 4
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 4
45547: NEG
45548: PUSH
45549: LD_INT 4
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 4
45559: NEG
45560: PUSH
45561: LD_INT 5
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: LD_INT 4
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 4
45595: NEG
45596: PUSH
45597: LD_INT 3
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 5
45607: NEG
45608: PUSH
45609: LD_INT 4
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 5
45619: NEG
45620: PUSH
45621: LD_INT 5
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: LD_INT 5
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 5
45643: NEG
45644: PUSH
45645: LD_INT 3
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45700: LD_ADDR_VAR 0 30
45704: PUSH
45705: LD_INT 4
45707: PUSH
45708: LD_INT 4
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 4
45717: PUSH
45718: LD_INT 3
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 5
45727: PUSH
45728: LD_INT 4
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 5
45737: PUSH
45738: LD_INT 5
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 4
45747: PUSH
45748: LD_INT 5
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: LD_INT 4
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: LD_INT 3
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 3
45787: PUSH
45788: LD_INT 5
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 3
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: LD_INT 4
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 3
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 4
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 4
45890: NEG
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 4
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 4
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 5
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 5
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: LD_INT 4
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 4
46052: NEG
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 4
46064: NEG
46065: PUSH
46066: LD_INT 4
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: NEG
46077: PUSH
46078: LD_INT 4
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 4
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 4
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 5
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 4
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: LD_INT 5
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 3
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 5
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46247: LD_ADDR_VAR 0 31
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 4
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 5
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 5
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 4
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 5
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 4
46403: NEG
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 4
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 4
46426: NEG
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 4
46449: NEG
46450: PUSH
46451: LD_INT 4
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 4
46461: NEG
46462: PUSH
46463: LD_INT 5
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: LD_INT 4
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 4
46497: NEG
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 5
46509: NEG
46510: PUSH
46511: LD_INT 4
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 5
46521: NEG
46522: PUSH
46523: LD_INT 5
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: NEG
46534: PUSH
46535: LD_INT 5
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 5
46545: NEG
46546: PUSH
46547: LD_INT 3
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 4
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 4
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 4
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 4
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 4
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 5
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 5
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 4
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 5
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46797: LD_ADDR_VAR 0 32
46801: PUSH
46802: LD_INT 4
46804: NEG
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 4
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 3
46827: NEG
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 4
46849: NEG
46850: PUSH
46851: LD_INT 1
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 5
46860: NEG
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 5
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 5
46883: NEG
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 3
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: LD_INT 4
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: LD_INT 3
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 4
46966: NEG
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 4
46978: NEG
46979: PUSH
46980: LD_INT 4
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 4
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 4
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 4
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 5
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 4
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 4
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 5
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 3
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 5
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 4
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 4
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 4
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 4
47209: PUSH
47210: LD_INT 4
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 4
47219: PUSH
47220: LD_INT 3
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 5
47229: PUSH
47230: LD_INT 4
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 5
47239: PUSH
47240: LD_INT 5
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: LD_INT 5
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 4
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: LD_INT 3
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 5
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 5
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47344: LD_ADDR_VAR 0 33
47348: PUSH
47349: LD_INT 4
47351: NEG
47352: PUSH
47353: LD_INT 4
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 4
47363: NEG
47364: PUSH
47365: LD_INT 5
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: LD_INT 4
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 4
47399: NEG
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 5
47411: NEG
47412: PUSH
47413: LD_INT 4
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 5
47423: NEG
47424: PUSH
47425: LD_INT 5
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: LD_INT 5
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 5
47447: NEG
47448: PUSH
47449: LD_INT 3
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 4
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: LD_INT 3
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 4
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 4
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 4
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 4
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 5
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 5
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 4
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 5
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 4
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 4
47684: PUSH
47685: LD_INT 4
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: LD_INT 4
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 3
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 4
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 4
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 4
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 4
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 5
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 5
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 4
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: LD_INT 5
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47882: LD_ADDR_VAR 0 34
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 4
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 5
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 4
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 3
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 5
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 3
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 5
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 3
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 4
48012: PUSH
48013: LD_INT 0
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 4
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 4
48074: PUSH
48075: LD_INT 2
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 4
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 4
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 5
48104: PUSH
48105: LD_INT 4
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 5
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: LD_INT 5
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: LD_INT 4
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 5
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 3
48164: PUSH
48165: LD_INT 5
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 4
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 4
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: LD_INT 4
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 4
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 4
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 4
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 5
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 5
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// end ; end ;
48414: GO 48417
48416: POP
// case btype of b_depot , b_warehouse :
48417: LD_VAR 0 1
48421: PUSH
48422: LD_INT 0
48424: DOUBLE
48425: EQUAL
48426: IFTRUE 48436
48428: LD_INT 1
48430: DOUBLE
48431: EQUAL
48432: IFTRUE 48436
48434: GO 48637
48436: POP
// case nation of nation_american :
48437: LD_VAR 0 5
48441: PUSH
48442: LD_INT 1
48444: DOUBLE
48445: EQUAL
48446: IFTRUE 48450
48448: GO 48506
48450: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48451: LD_ADDR_VAR 0 9
48455: PUSH
48456: LD_VAR 0 11
48460: PUSH
48461: LD_VAR 0 12
48465: PUSH
48466: LD_VAR 0 13
48470: PUSH
48471: LD_VAR 0 14
48475: PUSH
48476: LD_VAR 0 15
48480: PUSH
48481: LD_VAR 0 16
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: PUSH
48494: LD_VAR 0 4
48498: PUSH
48499: LD_INT 1
48501: PLUS
48502: ARRAY
48503: ST_TO_ADDR
48504: GO 48635
48506: LD_INT 2
48508: DOUBLE
48509: EQUAL
48510: IFTRUE 48514
48512: GO 48570
48514: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48515: LD_ADDR_VAR 0 9
48519: PUSH
48520: LD_VAR 0 17
48524: PUSH
48525: LD_VAR 0 18
48529: PUSH
48530: LD_VAR 0 19
48534: PUSH
48535: LD_VAR 0 20
48539: PUSH
48540: LD_VAR 0 21
48544: PUSH
48545: LD_VAR 0 22
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: PUSH
48558: LD_VAR 0 4
48562: PUSH
48563: LD_INT 1
48565: PLUS
48566: ARRAY
48567: ST_TO_ADDR
48568: GO 48635
48570: LD_INT 3
48572: DOUBLE
48573: EQUAL
48574: IFTRUE 48578
48576: GO 48634
48578: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48579: LD_ADDR_VAR 0 9
48583: PUSH
48584: LD_VAR 0 23
48588: PUSH
48589: LD_VAR 0 24
48593: PUSH
48594: LD_VAR 0 25
48598: PUSH
48599: LD_VAR 0 26
48603: PUSH
48604: LD_VAR 0 27
48608: PUSH
48609: LD_VAR 0 28
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: PUSH
48622: LD_VAR 0 4
48626: PUSH
48627: LD_INT 1
48629: PLUS
48630: ARRAY
48631: ST_TO_ADDR
48632: GO 48635
48634: POP
48635: GO 49190
48637: LD_INT 2
48639: DOUBLE
48640: EQUAL
48641: IFTRUE 48651
48643: LD_INT 3
48645: DOUBLE
48646: EQUAL
48647: IFTRUE 48651
48649: GO 48707
48651: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48652: LD_ADDR_VAR 0 9
48656: PUSH
48657: LD_VAR 0 29
48661: PUSH
48662: LD_VAR 0 30
48666: PUSH
48667: LD_VAR 0 31
48671: PUSH
48672: LD_VAR 0 32
48676: PUSH
48677: LD_VAR 0 33
48681: PUSH
48682: LD_VAR 0 34
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: PUSH
48695: LD_VAR 0 4
48699: PUSH
48700: LD_INT 1
48702: PLUS
48703: ARRAY
48704: ST_TO_ADDR
48705: GO 49190
48707: LD_INT 16
48709: DOUBLE
48710: EQUAL
48711: IFTRUE 48769
48713: LD_INT 17
48715: DOUBLE
48716: EQUAL
48717: IFTRUE 48769
48719: LD_INT 18
48721: DOUBLE
48722: EQUAL
48723: IFTRUE 48769
48725: LD_INT 19
48727: DOUBLE
48728: EQUAL
48729: IFTRUE 48769
48731: LD_INT 22
48733: DOUBLE
48734: EQUAL
48735: IFTRUE 48769
48737: LD_INT 20
48739: DOUBLE
48740: EQUAL
48741: IFTRUE 48769
48743: LD_INT 21
48745: DOUBLE
48746: EQUAL
48747: IFTRUE 48769
48749: LD_INT 23
48751: DOUBLE
48752: EQUAL
48753: IFTRUE 48769
48755: LD_INT 24
48757: DOUBLE
48758: EQUAL
48759: IFTRUE 48769
48761: LD_INT 25
48763: DOUBLE
48764: EQUAL
48765: IFTRUE 48769
48767: GO 48825
48769: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48770: LD_ADDR_VAR 0 9
48774: PUSH
48775: LD_VAR 0 35
48779: PUSH
48780: LD_VAR 0 36
48784: PUSH
48785: LD_VAR 0 37
48789: PUSH
48790: LD_VAR 0 38
48794: PUSH
48795: LD_VAR 0 39
48799: PUSH
48800: LD_VAR 0 40
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: PUSH
48813: LD_VAR 0 4
48817: PUSH
48818: LD_INT 1
48820: PLUS
48821: ARRAY
48822: ST_TO_ADDR
48823: GO 49190
48825: LD_INT 6
48827: DOUBLE
48828: EQUAL
48829: IFTRUE 48881
48831: LD_INT 7
48833: DOUBLE
48834: EQUAL
48835: IFTRUE 48881
48837: LD_INT 8
48839: DOUBLE
48840: EQUAL
48841: IFTRUE 48881
48843: LD_INT 13
48845: DOUBLE
48846: EQUAL
48847: IFTRUE 48881
48849: LD_INT 12
48851: DOUBLE
48852: EQUAL
48853: IFTRUE 48881
48855: LD_INT 15
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48881
48861: LD_INT 11
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48881
48867: LD_INT 14
48869: DOUBLE
48870: EQUAL
48871: IFTRUE 48881
48873: LD_INT 10
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48881
48879: GO 48937
48881: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48882: LD_ADDR_VAR 0 9
48886: PUSH
48887: LD_VAR 0 41
48891: PUSH
48892: LD_VAR 0 42
48896: PUSH
48897: LD_VAR 0 43
48901: PUSH
48902: LD_VAR 0 44
48906: PUSH
48907: LD_VAR 0 45
48911: PUSH
48912: LD_VAR 0 46
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: PUSH
48925: LD_VAR 0 4
48929: PUSH
48930: LD_INT 1
48932: PLUS
48933: ARRAY
48934: ST_TO_ADDR
48935: GO 49190
48937: LD_INT 36
48939: DOUBLE
48940: EQUAL
48941: IFTRUE 48945
48943: GO 49001
48945: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48946: LD_ADDR_VAR 0 9
48950: PUSH
48951: LD_VAR 0 47
48955: PUSH
48956: LD_VAR 0 48
48960: PUSH
48961: LD_VAR 0 49
48965: PUSH
48966: LD_VAR 0 50
48970: PUSH
48971: LD_VAR 0 51
48975: PUSH
48976: LD_VAR 0 52
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: PUSH
48989: LD_VAR 0 4
48993: PUSH
48994: LD_INT 1
48996: PLUS
48997: ARRAY
48998: ST_TO_ADDR
48999: GO 49190
49001: LD_INT 4
49003: DOUBLE
49004: EQUAL
49005: IFTRUE 49027
49007: LD_INT 5
49009: DOUBLE
49010: EQUAL
49011: IFTRUE 49027
49013: LD_INT 34
49015: DOUBLE
49016: EQUAL
49017: IFTRUE 49027
49019: LD_INT 37
49021: DOUBLE
49022: EQUAL
49023: IFTRUE 49027
49025: GO 49083
49027: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49028: LD_ADDR_VAR 0 9
49032: PUSH
49033: LD_VAR 0 53
49037: PUSH
49038: LD_VAR 0 54
49042: PUSH
49043: LD_VAR 0 55
49047: PUSH
49048: LD_VAR 0 56
49052: PUSH
49053: LD_VAR 0 57
49057: PUSH
49058: LD_VAR 0 58
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: PUSH
49071: LD_VAR 0 4
49075: PUSH
49076: LD_INT 1
49078: PLUS
49079: ARRAY
49080: ST_TO_ADDR
49081: GO 49190
49083: LD_INT 31
49085: DOUBLE
49086: EQUAL
49087: IFTRUE 49133
49089: LD_INT 32
49091: DOUBLE
49092: EQUAL
49093: IFTRUE 49133
49095: LD_INT 33
49097: DOUBLE
49098: EQUAL
49099: IFTRUE 49133
49101: LD_INT 27
49103: DOUBLE
49104: EQUAL
49105: IFTRUE 49133
49107: LD_INT 26
49109: DOUBLE
49110: EQUAL
49111: IFTRUE 49133
49113: LD_INT 28
49115: DOUBLE
49116: EQUAL
49117: IFTRUE 49133
49119: LD_INT 29
49121: DOUBLE
49122: EQUAL
49123: IFTRUE 49133
49125: LD_INT 30
49127: DOUBLE
49128: EQUAL
49129: IFTRUE 49133
49131: GO 49189
49133: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49134: LD_ADDR_VAR 0 9
49138: PUSH
49139: LD_VAR 0 59
49143: PUSH
49144: LD_VAR 0 60
49148: PUSH
49149: LD_VAR 0 61
49153: PUSH
49154: LD_VAR 0 62
49158: PUSH
49159: LD_VAR 0 63
49163: PUSH
49164: LD_VAR 0 64
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: PUSH
49177: LD_VAR 0 4
49181: PUSH
49182: LD_INT 1
49184: PLUS
49185: ARRAY
49186: ST_TO_ADDR
49187: GO 49190
49189: POP
// temp_list2 = [ ] ;
49190: LD_ADDR_VAR 0 10
49194: PUSH
49195: EMPTY
49196: ST_TO_ADDR
// for i in temp_list do
49197: LD_ADDR_VAR 0 8
49201: PUSH
49202: LD_VAR 0 9
49206: PUSH
49207: FOR_IN
49208: IFFALSE 49260
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49210: LD_ADDR_VAR 0 10
49214: PUSH
49215: LD_VAR 0 10
49219: PUSH
49220: LD_VAR 0 8
49224: PUSH
49225: LD_INT 1
49227: ARRAY
49228: PUSH
49229: LD_VAR 0 2
49233: PLUS
49234: PUSH
49235: LD_VAR 0 8
49239: PUSH
49240: LD_INT 2
49242: ARRAY
49243: PUSH
49244: LD_VAR 0 3
49248: PLUS
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: ADD
49257: ST_TO_ADDR
49258: GO 49207
49260: POP
49261: POP
// result = temp_list2 ;
49262: LD_ADDR_VAR 0 7
49266: PUSH
49267: LD_VAR 0 10
49271: ST_TO_ADDR
// end ;
49272: LD_VAR 0 7
49276: RET
// export function EnemyInRange ( unit , dist ) ; begin
49277: LD_INT 0
49279: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49280: LD_ADDR_VAR 0 3
49284: PUSH
49285: LD_VAR 0 1
49289: PPUSH
49290: CALL_OW 255
49294: PPUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 250
49304: PPUSH
49305: LD_VAR 0 1
49309: PPUSH
49310: CALL_OW 251
49314: PPUSH
49315: LD_VAR 0 2
49319: PPUSH
49320: CALL 22534 0 4
49324: PUSH
49325: LD_INT 4
49327: ARRAY
49328: ST_TO_ADDR
// end ;
49329: LD_VAR 0 3
49333: RET
// export function PlayerSeeMe ( unit ) ; begin
49334: LD_INT 0
49336: PPUSH
// result := See ( your_side , unit ) ;
49337: LD_ADDR_VAR 0 2
49341: PUSH
49342: LD_OWVAR 2
49346: PPUSH
49347: LD_VAR 0 1
49351: PPUSH
49352: CALL_OW 292
49356: ST_TO_ADDR
// end ;
49357: LD_VAR 0 2
49361: RET
// export function ReverseDir ( unit ) ; begin
49362: LD_INT 0
49364: PPUSH
// if not unit then
49365: LD_VAR 0 1
49369: NOT
49370: IFFALSE 49374
// exit ;
49372: GO 49397
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49374: LD_ADDR_VAR 0 2
49378: PUSH
49379: LD_VAR 0 1
49383: PPUSH
49384: CALL_OW 254
49388: PUSH
49389: LD_INT 3
49391: PLUS
49392: PUSH
49393: LD_INT 6
49395: MOD
49396: ST_TO_ADDR
// end ;
49397: LD_VAR 0 2
49401: RET
// export function ReverseArray ( array ) ; var i ; begin
49402: LD_INT 0
49404: PPUSH
49405: PPUSH
// if not array then
49406: LD_VAR 0 1
49410: NOT
49411: IFFALSE 49415
// exit ;
49413: GO 49470
// result := [ ] ;
49415: LD_ADDR_VAR 0 2
49419: PUSH
49420: EMPTY
49421: ST_TO_ADDR
// for i := array downto 1 do
49422: LD_ADDR_VAR 0 3
49426: PUSH
49427: DOUBLE
49428: LD_VAR 0 1
49432: INC
49433: ST_TO_ADDR
49434: LD_INT 1
49436: PUSH
49437: FOR_DOWNTO
49438: IFFALSE 49468
// result := Join ( result , array [ i ] ) ;
49440: LD_ADDR_VAR 0 2
49444: PUSH
49445: LD_VAR 0 2
49449: PPUSH
49450: LD_VAR 0 1
49454: PUSH
49455: LD_VAR 0 3
49459: ARRAY
49460: PPUSH
49461: CALL 54322 0 2
49465: ST_TO_ADDR
49466: GO 49437
49468: POP
49469: POP
// end ;
49470: LD_VAR 0 2
49474: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49475: LD_INT 0
49477: PPUSH
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
49482: PPUSH
// if not unit or not hexes then
49483: LD_VAR 0 1
49487: NOT
49488: IFTRUE 49497
49490: PUSH
49491: LD_VAR 0 2
49495: NOT
49496: OR
49497: IFFALSE 49501
// exit ;
49499: GO 49624
// dist := 9999 ;
49501: LD_ADDR_VAR 0 5
49505: PUSH
49506: LD_INT 9999
49508: ST_TO_ADDR
// for i = 1 to hexes do
49509: LD_ADDR_VAR 0 4
49513: PUSH
49514: DOUBLE
49515: LD_INT 1
49517: DEC
49518: ST_TO_ADDR
49519: LD_VAR 0 2
49523: PUSH
49524: FOR_TO
49525: IFFALSE 49612
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49527: LD_ADDR_VAR 0 6
49531: PUSH
49532: LD_VAR 0 1
49536: PPUSH
49537: LD_VAR 0 2
49541: PUSH
49542: LD_VAR 0 4
49546: ARRAY
49547: PUSH
49548: LD_INT 1
49550: ARRAY
49551: PPUSH
49552: LD_VAR 0 2
49556: PUSH
49557: LD_VAR 0 4
49561: ARRAY
49562: PUSH
49563: LD_INT 2
49565: ARRAY
49566: PPUSH
49567: CALL_OW 297
49571: ST_TO_ADDR
// if tdist < dist then
49572: LD_VAR 0 6
49576: PUSH
49577: LD_VAR 0 5
49581: LESS
49582: IFFALSE 49610
// begin hex := hexes [ i ] ;
49584: LD_ADDR_VAR 0 8
49588: PUSH
49589: LD_VAR 0 2
49593: PUSH
49594: LD_VAR 0 4
49598: ARRAY
49599: ST_TO_ADDR
// dist := tdist ;
49600: LD_ADDR_VAR 0 5
49604: PUSH
49605: LD_VAR 0 6
49609: ST_TO_ADDR
// end ; end ;
49610: GO 49524
49612: POP
49613: POP
// result := hex ;
49614: LD_ADDR_VAR 0 3
49618: PUSH
49619: LD_VAR 0 8
49623: ST_TO_ADDR
// end ;
49624: LD_VAR 0 3
49628: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49629: LD_INT 0
49631: PPUSH
49632: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49633: LD_VAR 0 1
49637: NOT
49638: IFTRUE 49677
49640: PUSH
49641: LD_VAR 0 1
49645: PUSH
49646: LD_INT 21
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 23
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PPUSH
49670: CALL_OW 69
49674: IN
49675: NOT
49676: OR
49677: IFFALSE 49681
// exit ;
49679: GO 49728
// for i = 1 to 3 do
49681: LD_ADDR_VAR 0 3
49685: PUSH
49686: DOUBLE
49687: LD_INT 1
49689: DEC
49690: ST_TO_ADDR
49691: LD_INT 3
49693: PUSH
49694: FOR_TO
49695: IFFALSE 49726
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49697: LD_VAR 0 1
49701: PPUSH
49702: CALL_OW 250
49706: PPUSH
49707: LD_VAR 0 1
49711: PPUSH
49712: CALL_OW 251
49716: PPUSH
49717: LD_INT 1
49719: PPUSH
49720: CALL_OW 453
49724: GO 49694
49726: POP
49727: POP
// end ;
49728: LD_VAR 0 2
49732: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49733: LD_INT 0
49735: PPUSH
49736: PPUSH
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
// if not unit or not enemy_unit then
49741: LD_VAR 0 1
49745: NOT
49746: IFTRUE 49755
49748: PUSH
49749: LD_VAR 0 2
49753: NOT
49754: OR
49755: IFFALSE 49759
// exit ;
49757: GO 50240
// if GetLives ( i ) < 250 then
49759: LD_VAR 0 4
49763: PPUSH
49764: CALL_OW 256
49768: PUSH
49769: LD_INT 250
49771: LESS
49772: IFFALSE 49785
// begin ComAutodestruct ( i ) ;
49774: LD_VAR 0 4
49778: PPUSH
49779: CALL 49629 0 1
// exit ;
49783: GO 50240
// end ; x := GetX ( enemy_unit ) ;
49785: LD_ADDR_VAR 0 7
49789: PUSH
49790: LD_VAR 0 2
49794: PPUSH
49795: CALL_OW 250
49799: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49800: LD_ADDR_VAR 0 8
49804: PUSH
49805: LD_VAR 0 2
49809: PPUSH
49810: CALL_OW 251
49814: ST_TO_ADDR
// if not x or not y then
49815: LD_VAR 0 7
49819: NOT
49820: IFTRUE 49829
49822: PUSH
49823: LD_VAR 0 8
49827: NOT
49828: OR
49829: IFFALSE 49833
// exit ;
49831: GO 50240
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49833: LD_ADDR_VAR 0 6
49837: PUSH
49838: LD_VAR 0 7
49842: PPUSH
49843: LD_INT 0
49845: PPUSH
49846: LD_INT 4
49848: PPUSH
49849: CALL_OW 272
49853: PUSH
49854: LD_VAR 0 8
49858: PPUSH
49859: LD_INT 0
49861: PPUSH
49862: LD_INT 4
49864: PPUSH
49865: CALL_OW 273
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_VAR 0 7
49878: PPUSH
49879: LD_INT 1
49881: PPUSH
49882: LD_INT 4
49884: PPUSH
49885: CALL_OW 272
49889: PUSH
49890: LD_VAR 0 8
49894: PPUSH
49895: LD_INT 1
49897: PPUSH
49898: LD_INT 4
49900: PPUSH
49901: CALL_OW 273
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_VAR 0 7
49914: PPUSH
49915: LD_INT 2
49917: PPUSH
49918: LD_INT 4
49920: PPUSH
49921: CALL_OW 272
49925: PUSH
49926: LD_VAR 0 8
49930: PPUSH
49931: LD_INT 2
49933: PPUSH
49934: LD_INT 4
49936: PPUSH
49937: CALL_OW 273
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_VAR 0 7
49950: PPUSH
49951: LD_INT 3
49953: PPUSH
49954: LD_INT 4
49956: PPUSH
49957: CALL_OW 272
49961: PUSH
49962: LD_VAR 0 8
49966: PPUSH
49967: LD_INT 3
49969: PPUSH
49970: LD_INT 4
49972: PPUSH
49973: CALL_OW 273
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_VAR 0 7
49986: PPUSH
49987: LD_INT 4
49989: PPUSH
49990: LD_INT 4
49992: PPUSH
49993: CALL_OW 272
49997: PUSH
49998: LD_VAR 0 8
50002: PPUSH
50003: LD_INT 4
50005: PPUSH
50006: LD_INT 4
50008: PPUSH
50009: CALL_OW 273
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_VAR 0 7
50022: PPUSH
50023: LD_INT 5
50025: PPUSH
50026: LD_INT 4
50028: PPUSH
50029: CALL_OW 272
50033: PUSH
50034: LD_VAR 0 8
50038: PPUSH
50039: LD_INT 5
50041: PPUSH
50042: LD_INT 4
50044: PPUSH
50045: CALL_OW 273
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: ST_TO_ADDR
// for i = tmp downto 1 do
50062: LD_ADDR_VAR 0 4
50066: PUSH
50067: DOUBLE
50068: LD_VAR 0 6
50072: INC
50073: ST_TO_ADDR
50074: LD_INT 1
50076: PUSH
50077: FOR_DOWNTO
50078: IFFALSE 50181
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50080: LD_VAR 0 6
50084: PUSH
50085: LD_VAR 0 4
50089: ARRAY
50090: PUSH
50091: LD_INT 1
50093: ARRAY
50094: PPUSH
50095: LD_VAR 0 6
50099: PUSH
50100: LD_VAR 0 4
50104: ARRAY
50105: PUSH
50106: LD_INT 2
50108: ARRAY
50109: PPUSH
50110: CALL_OW 488
50114: NOT
50115: IFTRUE 50157
50117: PUSH
50118: LD_VAR 0 6
50122: PUSH
50123: LD_VAR 0 4
50127: ARRAY
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: PPUSH
50133: LD_VAR 0 6
50137: PUSH
50138: LD_VAR 0 4
50142: ARRAY
50143: PUSH
50144: LD_INT 2
50146: ARRAY
50147: PPUSH
50148: CALL_OW 428
50152: PUSH
50153: LD_INT 0
50155: NONEQUAL
50156: OR
50157: IFFALSE 50179
// tmp := Delete ( tmp , i ) ;
50159: LD_ADDR_VAR 0 6
50163: PUSH
50164: LD_VAR 0 6
50168: PPUSH
50169: LD_VAR 0 4
50173: PPUSH
50174: CALL_OW 3
50178: ST_TO_ADDR
50179: GO 50077
50181: POP
50182: POP
// j := GetClosestHex ( unit , tmp ) ;
50183: LD_ADDR_VAR 0 5
50187: PUSH
50188: LD_VAR 0 1
50192: PPUSH
50193: LD_VAR 0 6
50197: PPUSH
50198: CALL 49475 0 2
50202: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50203: LD_VAR 0 1
50207: PPUSH
50208: LD_VAR 0 5
50212: PUSH
50213: LD_INT 1
50215: ARRAY
50216: PPUSH
50217: LD_VAR 0 5
50221: PUSH
50222: LD_INT 2
50224: ARRAY
50225: PPUSH
50226: CALL_OW 111
// result := j ;
50230: LD_ADDR_VAR 0 3
50234: PUSH
50235: LD_VAR 0 5
50239: ST_TO_ADDR
// end ;
50240: LD_VAR 0 3
50244: RET
// export function PrepareApemanSoldier ( ) ; begin
50245: LD_INT 0
50247: PPUSH
// uc_nation := 0 ;
50248: LD_ADDR_OWVAR 21
50252: PUSH
50253: LD_INT 0
50255: ST_TO_ADDR
// hc_sex := sex_male ;
50256: LD_ADDR_OWVAR 27
50260: PUSH
50261: LD_INT 1
50263: ST_TO_ADDR
// hc_name :=  ;
50264: LD_ADDR_OWVAR 26
50268: PUSH
50269: LD_STRING 
50271: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50272: LD_ADDR_OWVAR 28
50276: PUSH
50277: LD_INT 15
50279: ST_TO_ADDR
// hc_gallery :=  ;
50280: LD_ADDR_OWVAR 33
50284: PUSH
50285: LD_STRING 
50287: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50288: LD_ADDR_OWVAR 31
50292: PUSH
50293: LD_INT 0
50295: PPUSH
50296: LD_INT 3
50298: PPUSH
50299: CALL_OW 12
50303: PUSH
50304: LD_INT 0
50306: PPUSH
50307: LD_INT 3
50309: PPUSH
50310: CALL_OW 12
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: LD_INT 0
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50327: LD_ADDR_OWVAR 29
50331: PUSH
50332: LD_INT 10
50334: PUSH
50335: LD_INT 12
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: ST_TO_ADDR
// end ;
50342: LD_VAR 0 1
50346: RET
// export function PrepareApemanEngineer ( ) ; begin
50347: LD_INT 0
50349: PPUSH
// uc_nation := 0 ;
50350: LD_ADDR_OWVAR 21
50354: PUSH
50355: LD_INT 0
50357: ST_TO_ADDR
// hc_sex := sex_male ;
50358: LD_ADDR_OWVAR 27
50362: PUSH
50363: LD_INT 1
50365: ST_TO_ADDR
// hc_name :=  ;
50366: LD_ADDR_OWVAR 26
50370: PUSH
50371: LD_STRING 
50373: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50374: LD_ADDR_OWVAR 28
50378: PUSH
50379: LD_INT 16
50381: ST_TO_ADDR
// hc_gallery :=  ;
50382: LD_ADDR_OWVAR 33
50386: PUSH
50387: LD_STRING 
50389: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50390: LD_ADDR_OWVAR 31
50394: PUSH
50395: LD_INT 0
50397: PPUSH
50398: LD_INT 3
50400: PPUSH
50401: CALL_OW 12
50405: PUSH
50406: LD_INT 0
50408: PPUSH
50409: LD_INT 3
50411: PPUSH
50412: CALL_OW 12
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50429: LD_ADDR_OWVAR 29
50433: PUSH
50434: LD_INT 10
50436: PUSH
50437: LD_INT 12
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: ST_TO_ADDR
// end ;
50444: LD_VAR 0 1
50448: RET
// export function PrepareApeman ( agressivity ) ; begin
50449: LD_INT 0
50451: PPUSH
// uc_side := 0 ;
50452: LD_ADDR_OWVAR 20
50456: PUSH
50457: LD_INT 0
50459: ST_TO_ADDR
// uc_nation := 0 ;
50460: LD_ADDR_OWVAR 21
50464: PUSH
50465: LD_INT 0
50467: ST_TO_ADDR
// hc_sex := sex_male ;
50468: LD_ADDR_OWVAR 27
50472: PUSH
50473: LD_INT 1
50475: ST_TO_ADDR
// hc_class := class_apeman ;
50476: LD_ADDR_OWVAR 28
50480: PUSH
50481: LD_INT 12
50483: ST_TO_ADDR
// hc_gallery :=  ;
50484: LD_ADDR_OWVAR 33
50488: PUSH
50489: LD_STRING 
50491: ST_TO_ADDR
// hc_name :=  ;
50492: LD_ADDR_OWVAR 26
50496: PUSH
50497: LD_STRING 
50499: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50500: LD_ADDR_OWVAR 29
50504: PUSH
50505: LD_INT 10
50507: PUSH
50508: LD_INT 12
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: ST_TO_ADDR
// if agressivity = 0 then
50515: LD_VAR 0 1
50519: PUSH
50520: LD_INT 0
50522: EQUAL
50523: IFFALSE 50535
// hc_agressivity := 0 else
50525: LD_ADDR_OWVAR 35
50529: PUSH
50530: LD_INT 0
50532: ST_TO_ADDR
50533: GO 50556
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50535: LD_ADDR_OWVAR 35
50539: PUSH
50540: LD_VAR 0 1
50544: NEG
50545: PPUSH
50546: LD_VAR 0 1
50550: PPUSH
50551: CALL_OW 12
50555: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50556: LD_ADDR_OWVAR 31
50560: PUSH
50561: LD_INT 0
50563: PPUSH
50564: LD_INT 3
50566: PPUSH
50567: CALL_OW 12
50571: PUSH
50572: LD_INT 0
50574: PPUSH
50575: LD_INT 3
50577: PPUSH
50578: CALL_OW 12
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// end ;
50595: LD_VAR 0 2
50599: RET
// export function PrepareTiger ( agressivity ) ; begin
50600: LD_INT 0
50602: PPUSH
// uc_side := 0 ;
50603: LD_ADDR_OWVAR 20
50607: PUSH
50608: LD_INT 0
50610: ST_TO_ADDR
// uc_nation := 0 ;
50611: LD_ADDR_OWVAR 21
50615: PUSH
50616: LD_INT 0
50618: ST_TO_ADDR
// InitHc ;
50619: CALL_OW 19
// hc_class := class_tiger ;
50623: LD_ADDR_OWVAR 28
50627: PUSH
50628: LD_INT 14
50630: ST_TO_ADDR
// hc_gallery :=  ;
50631: LD_ADDR_OWVAR 33
50635: PUSH
50636: LD_STRING 
50638: ST_TO_ADDR
// hc_name :=  ;
50639: LD_ADDR_OWVAR 26
50643: PUSH
50644: LD_STRING 
50646: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50647: LD_ADDR_OWVAR 35
50651: PUSH
50652: LD_VAR 0 1
50656: NEG
50657: PPUSH
50658: LD_VAR 0 1
50662: PPUSH
50663: CALL_OW 12
50667: ST_TO_ADDR
// end ;
50668: LD_VAR 0 2
50672: RET
// export function PrepareEnchidna ( ) ; begin
50673: LD_INT 0
50675: PPUSH
// uc_side := 0 ;
50676: LD_ADDR_OWVAR 20
50680: PUSH
50681: LD_INT 0
50683: ST_TO_ADDR
// uc_nation := 0 ;
50684: LD_ADDR_OWVAR 21
50688: PUSH
50689: LD_INT 0
50691: ST_TO_ADDR
// InitHc ;
50692: CALL_OW 19
// hc_class := class_baggie ;
50696: LD_ADDR_OWVAR 28
50700: PUSH
50701: LD_INT 13
50703: ST_TO_ADDR
// hc_gallery :=  ;
50704: LD_ADDR_OWVAR 33
50708: PUSH
50709: LD_STRING 
50711: ST_TO_ADDR
// hc_name :=  ;
50712: LD_ADDR_OWVAR 26
50716: PUSH
50717: LD_STRING 
50719: ST_TO_ADDR
// end ;
50720: LD_VAR 0 1
50724: RET
// export function PrepareFrog ( ) ; begin
50725: LD_INT 0
50727: PPUSH
// uc_side := 0 ;
50728: LD_ADDR_OWVAR 20
50732: PUSH
50733: LD_INT 0
50735: ST_TO_ADDR
// uc_nation := 0 ;
50736: LD_ADDR_OWVAR 21
50740: PUSH
50741: LD_INT 0
50743: ST_TO_ADDR
// InitHc ;
50744: CALL_OW 19
// hc_class := class_frog ;
50748: LD_ADDR_OWVAR 28
50752: PUSH
50753: LD_INT 19
50755: ST_TO_ADDR
// hc_gallery :=  ;
50756: LD_ADDR_OWVAR 33
50760: PUSH
50761: LD_STRING 
50763: ST_TO_ADDR
// hc_name :=  ;
50764: LD_ADDR_OWVAR 26
50768: PUSH
50769: LD_STRING 
50771: ST_TO_ADDR
// end ;
50772: LD_VAR 0 1
50776: RET
// export function PrepareFish ( ) ; begin
50777: LD_INT 0
50779: PPUSH
// uc_side := 0 ;
50780: LD_ADDR_OWVAR 20
50784: PUSH
50785: LD_INT 0
50787: ST_TO_ADDR
// uc_nation := 0 ;
50788: LD_ADDR_OWVAR 21
50792: PUSH
50793: LD_INT 0
50795: ST_TO_ADDR
// InitHc ;
50796: CALL_OW 19
// hc_class := class_fish ;
50800: LD_ADDR_OWVAR 28
50804: PUSH
50805: LD_INT 20
50807: ST_TO_ADDR
// hc_gallery :=  ;
50808: LD_ADDR_OWVAR 33
50812: PUSH
50813: LD_STRING 
50815: ST_TO_ADDR
// hc_name :=  ;
50816: LD_ADDR_OWVAR 26
50820: PUSH
50821: LD_STRING 
50823: ST_TO_ADDR
// end ;
50824: LD_VAR 0 1
50828: RET
// export function PrepareBird ( ) ; begin
50829: LD_INT 0
50831: PPUSH
// uc_side := 0 ;
50832: LD_ADDR_OWVAR 20
50836: PUSH
50837: LD_INT 0
50839: ST_TO_ADDR
// uc_nation := 0 ;
50840: LD_ADDR_OWVAR 21
50844: PUSH
50845: LD_INT 0
50847: ST_TO_ADDR
// InitHc ;
50848: CALL_OW 19
// hc_class := class_phororhacos ;
50852: LD_ADDR_OWVAR 28
50856: PUSH
50857: LD_INT 18
50859: ST_TO_ADDR
// hc_gallery :=  ;
50860: LD_ADDR_OWVAR 33
50864: PUSH
50865: LD_STRING 
50867: ST_TO_ADDR
// hc_name :=  ;
50868: LD_ADDR_OWVAR 26
50872: PUSH
50873: LD_STRING 
50875: ST_TO_ADDR
// end ;
50876: LD_VAR 0 1
50880: RET
// export function PrepareHorse ( ) ; begin
50881: LD_INT 0
50883: PPUSH
// uc_side := 0 ;
50884: LD_ADDR_OWVAR 20
50888: PUSH
50889: LD_INT 0
50891: ST_TO_ADDR
// uc_nation := 0 ;
50892: LD_ADDR_OWVAR 21
50896: PUSH
50897: LD_INT 0
50899: ST_TO_ADDR
// InitHc ;
50900: CALL_OW 19
// hc_class := class_horse ;
50904: LD_ADDR_OWVAR 28
50908: PUSH
50909: LD_INT 21
50911: ST_TO_ADDR
// hc_gallery :=  ;
50912: LD_ADDR_OWVAR 33
50916: PUSH
50917: LD_STRING 
50919: ST_TO_ADDR
// hc_name :=  ;
50920: LD_ADDR_OWVAR 26
50924: PUSH
50925: LD_STRING 
50927: ST_TO_ADDR
// end ;
50928: LD_VAR 0 1
50932: RET
// export function PrepareMastodont ( ) ; begin
50933: LD_INT 0
50935: PPUSH
// uc_side := 0 ;
50936: LD_ADDR_OWVAR 20
50940: PUSH
50941: LD_INT 0
50943: ST_TO_ADDR
// uc_nation := 0 ;
50944: LD_ADDR_OWVAR 21
50948: PUSH
50949: LD_INT 0
50951: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50952: LD_ADDR_OWVAR 37
50956: PUSH
50957: LD_INT 31
50959: ST_TO_ADDR
// vc_control := control_rider ;
50960: LD_ADDR_OWVAR 38
50964: PUSH
50965: LD_INT 4
50967: ST_TO_ADDR
// end ;
50968: LD_VAR 0 1
50972: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50973: LD_INT 0
50975: PPUSH
50976: PPUSH
50977: PPUSH
// uc_side = 0 ;
50978: LD_ADDR_OWVAR 20
50982: PUSH
50983: LD_INT 0
50985: ST_TO_ADDR
// uc_nation = 0 ;
50986: LD_ADDR_OWVAR 21
50990: PUSH
50991: LD_INT 0
50993: ST_TO_ADDR
// InitHc_All ( ) ;
50994: CALL_OW 584
// InitVc ;
50998: CALL_OW 20
// if mastodonts then
51002: LD_VAR 0 6
51006: IFFALSE 51073
// for i = 1 to mastodonts do
51008: LD_ADDR_VAR 0 11
51012: PUSH
51013: DOUBLE
51014: LD_INT 1
51016: DEC
51017: ST_TO_ADDR
51018: LD_VAR 0 6
51022: PUSH
51023: FOR_TO
51024: IFFALSE 51071
// begin vc_chassis := 31 ;
51026: LD_ADDR_OWVAR 37
51030: PUSH
51031: LD_INT 31
51033: ST_TO_ADDR
// vc_control := control_rider ;
51034: LD_ADDR_OWVAR 38
51038: PUSH
51039: LD_INT 4
51041: ST_TO_ADDR
// animal := CreateVehicle ;
51042: LD_ADDR_VAR 0 12
51046: PUSH
51047: CALL_OW 45
51051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51052: LD_VAR 0 12
51056: PPUSH
51057: LD_VAR 0 8
51061: PPUSH
51062: LD_INT 0
51064: PPUSH
51065: CALL 53215 0 3
// end ;
51069: GO 51023
51071: POP
51072: POP
// if horses then
51073: LD_VAR 0 5
51077: IFFALSE 51144
// for i = 1 to horses do
51079: LD_ADDR_VAR 0 11
51083: PUSH
51084: DOUBLE
51085: LD_INT 1
51087: DEC
51088: ST_TO_ADDR
51089: LD_VAR 0 5
51093: PUSH
51094: FOR_TO
51095: IFFALSE 51142
// begin hc_class := 21 ;
51097: LD_ADDR_OWVAR 28
51101: PUSH
51102: LD_INT 21
51104: ST_TO_ADDR
// hc_gallery :=  ;
51105: LD_ADDR_OWVAR 33
51109: PUSH
51110: LD_STRING 
51112: ST_TO_ADDR
// animal := CreateHuman ;
51113: LD_ADDR_VAR 0 12
51117: PUSH
51118: CALL_OW 44
51122: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51123: LD_VAR 0 12
51127: PPUSH
51128: LD_VAR 0 8
51132: PPUSH
51133: LD_INT 0
51135: PPUSH
51136: CALL 53215 0 3
// end ;
51140: GO 51094
51142: POP
51143: POP
// if birds then
51144: LD_VAR 0 1
51148: IFFALSE 51215
// for i = 1 to birds do
51150: LD_ADDR_VAR 0 11
51154: PUSH
51155: DOUBLE
51156: LD_INT 1
51158: DEC
51159: ST_TO_ADDR
51160: LD_VAR 0 1
51164: PUSH
51165: FOR_TO
51166: IFFALSE 51213
// begin hc_class := 18 ;
51168: LD_ADDR_OWVAR 28
51172: PUSH
51173: LD_INT 18
51175: ST_TO_ADDR
// hc_gallery =  ;
51176: LD_ADDR_OWVAR 33
51180: PUSH
51181: LD_STRING 
51183: ST_TO_ADDR
// animal := CreateHuman ;
51184: LD_ADDR_VAR 0 12
51188: PUSH
51189: CALL_OW 44
51193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51194: LD_VAR 0 12
51198: PPUSH
51199: LD_VAR 0 8
51203: PPUSH
51204: LD_INT 0
51206: PPUSH
51207: CALL 53215 0 3
// end ;
51211: GO 51165
51213: POP
51214: POP
// if tigers then
51215: LD_VAR 0 2
51219: IFFALSE 51303
// for i = 1 to tigers do
51221: LD_ADDR_VAR 0 11
51225: PUSH
51226: DOUBLE
51227: LD_INT 1
51229: DEC
51230: ST_TO_ADDR
51231: LD_VAR 0 2
51235: PUSH
51236: FOR_TO
51237: IFFALSE 51301
// begin hc_class = class_tiger ;
51239: LD_ADDR_OWVAR 28
51243: PUSH
51244: LD_INT 14
51246: ST_TO_ADDR
// hc_gallery =  ;
51247: LD_ADDR_OWVAR 33
51251: PUSH
51252: LD_STRING 
51254: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51255: LD_ADDR_OWVAR 35
51259: PUSH
51260: LD_INT 7
51262: NEG
51263: PPUSH
51264: LD_INT 7
51266: PPUSH
51267: CALL_OW 12
51271: ST_TO_ADDR
// animal := CreateHuman ;
51272: LD_ADDR_VAR 0 12
51276: PUSH
51277: CALL_OW 44
51281: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51282: LD_VAR 0 12
51286: PPUSH
51287: LD_VAR 0 8
51291: PPUSH
51292: LD_INT 0
51294: PPUSH
51295: CALL 53215 0 3
// end ;
51299: GO 51236
51301: POP
51302: POP
// if apemans then
51303: LD_VAR 0 3
51307: IFFALSE 51430
// for i = 1 to apemans do
51309: LD_ADDR_VAR 0 11
51313: PUSH
51314: DOUBLE
51315: LD_INT 1
51317: DEC
51318: ST_TO_ADDR
51319: LD_VAR 0 3
51323: PUSH
51324: FOR_TO
51325: IFFALSE 51428
// begin hc_class = class_apeman ;
51327: LD_ADDR_OWVAR 28
51331: PUSH
51332: LD_INT 12
51334: ST_TO_ADDR
// hc_gallery =  ;
51335: LD_ADDR_OWVAR 33
51339: PUSH
51340: LD_STRING 
51342: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51343: LD_ADDR_OWVAR 35
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PPUSH
51352: LD_INT 2
51354: PPUSH
51355: CALL_OW 12
51359: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51360: LD_ADDR_OWVAR 31
51364: PUSH
51365: LD_INT 1
51367: PPUSH
51368: LD_INT 3
51370: PPUSH
51371: CALL_OW 12
51375: PUSH
51376: LD_INT 1
51378: PPUSH
51379: LD_INT 3
51381: PPUSH
51382: CALL_OW 12
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// animal := CreateHuman ;
51399: LD_ADDR_VAR 0 12
51403: PUSH
51404: CALL_OW 44
51408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51409: LD_VAR 0 12
51413: PPUSH
51414: LD_VAR 0 8
51418: PPUSH
51419: LD_INT 0
51421: PPUSH
51422: CALL 53215 0 3
// end ;
51426: GO 51324
51428: POP
51429: POP
// if enchidnas then
51430: LD_VAR 0 4
51434: IFFALSE 51501
// for i = 1 to enchidnas do
51436: LD_ADDR_VAR 0 11
51440: PUSH
51441: DOUBLE
51442: LD_INT 1
51444: DEC
51445: ST_TO_ADDR
51446: LD_VAR 0 4
51450: PUSH
51451: FOR_TO
51452: IFFALSE 51499
// begin hc_class = 13 ;
51454: LD_ADDR_OWVAR 28
51458: PUSH
51459: LD_INT 13
51461: ST_TO_ADDR
// hc_gallery =  ;
51462: LD_ADDR_OWVAR 33
51466: PUSH
51467: LD_STRING 
51469: ST_TO_ADDR
// animal := CreateHuman ;
51470: LD_ADDR_VAR 0 12
51474: PUSH
51475: CALL_OW 44
51479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51480: LD_VAR 0 12
51484: PPUSH
51485: LD_VAR 0 8
51489: PPUSH
51490: LD_INT 0
51492: PPUSH
51493: CALL 53215 0 3
// end ;
51497: GO 51451
51499: POP
51500: POP
// if fishes then
51501: LD_VAR 0 7
51505: IFFALSE 51572
// for i = 1 to fishes do
51507: LD_ADDR_VAR 0 11
51511: PUSH
51512: DOUBLE
51513: LD_INT 1
51515: DEC
51516: ST_TO_ADDR
51517: LD_VAR 0 7
51521: PUSH
51522: FOR_TO
51523: IFFALSE 51570
// begin hc_class = 20 ;
51525: LD_ADDR_OWVAR 28
51529: PUSH
51530: LD_INT 20
51532: ST_TO_ADDR
// hc_gallery =  ;
51533: LD_ADDR_OWVAR 33
51537: PUSH
51538: LD_STRING 
51540: ST_TO_ADDR
// animal := CreateHuman ;
51541: LD_ADDR_VAR 0 12
51545: PUSH
51546: CALL_OW 44
51550: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51551: LD_VAR 0 12
51555: PPUSH
51556: LD_VAR 0 9
51560: PPUSH
51561: LD_INT 0
51563: PPUSH
51564: CALL 53215 0 3
// end ;
51568: GO 51522
51570: POP
51571: POP
// end ;
51572: LD_VAR 0 10
51576: RET
// export function WantHeal ( sci , unit ) ; begin
51577: LD_INT 0
51579: PPUSH
// if GetTaskList ( sci ) > 0 then
51580: LD_VAR 0 1
51584: PPUSH
51585: CALL_OW 437
51589: PUSH
51590: LD_INT 0
51592: GREATER
51593: IFFALSE 51665
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51595: LD_VAR 0 1
51599: PPUSH
51600: CALL_OW 437
51604: PUSH
51605: LD_INT 1
51607: ARRAY
51608: PUSH
51609: LD_INT 1
51611: ARRAY
51612: PUSH
51613: LD_STRING l
51615: EQUAL
51616: IFFALSE 51643
51618: PUSH
51619: LD_VAR 0 1
51623: PPUSH
51624: CALL_OW 437
51628: PUSH
51629: LD_INT 1
51631: ARRAY
51632: PUSH
51633: LD_INT 4
51635: ARRAY
51636: PUSH
51637: LD_VAR 0 2
51641: EQUAL
51642: AND
51643: IFFALSE 51655
// result := true else
51645: LD_ADDR_VAR 0 3
51649: PUSH
51650: LD_INT 1
51652: ST_TO_ADDR
51653: GO 51663
// result := false ;
51655: LD_ADDR_VAR 0 3
51659: PUSH
51660: LD_INT 0
51662: ST_TO_ADDR
// end else
51663: GO 51673
// result := false ;
51665: LD_ADDR_VAR 0 3
51669: PUSH
51670: LD_INT 0
51672: ST_TO_ADDR
// end ;
51673: LD_VAR 0 3
51677: RET
// export function HealTarget ( sci ) ; begin
51678: LD_INT 0
51680: PPUSH
// if not sci then
51681: LD_VAR 0 1
51685: NOT
51686: IFFALSE 51690
// exit ;
51688: GO 51755
// result := 0 ;
51690: LD_ADDR_VAR 0 2
51694: PUSH
51695: LD_INT 0
51697: ST_TO_ADDR
// if GetTaskList ( sci ) then
51698: LD_VAR 0 1
51702: PPUSH
51703: CALL_OW 437
51707: IFFALSE 51755
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51709: LD_VAR 0 1
51713: PPUSH
51714: CALL_OW 437
51718: PUSH
51719: LD_INT 1
51721: ARRAY
51722: PUSH
51723: LD_INT 1
51725: ARRAY
51726: PUSH
51727: LD_STRING l
51729: EQUAL
51730: IFFALSE 51755
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51732: LD_ADDR_VAR 0 2
51736: PUSH
51737: LD_VAR 0 1
51741: PPUSH
51742: CALL_OW 437
51746: PUSH
51747: LD_INT 1
51749: ARRAY
51750: PUSH
51751: LD_INT 4
51753: ARRAY
51754: ST_TO_ADDR
// end ;
51755: LD_VAR 0 2
51759: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51760: LD_INT 0
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
// if not base_units then
51766: LD_VAR 0 1
51770: NOT
51771: IFFALSE 51775
// exit ;
51773: GO 51862
// result := false ;
51775: LD_ADDR_VAR 0 2
51779: PUSH
51780: LD_INT 0
51782: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51783: LD_ADDR_VAR 0 5
51787: PUSH
51788: LD_VAR 0 1
51792: PPUSH
51793: LD_INT 21
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PPUSH
51803: CALL_OW 72
51807: ST_TO_ADDR
// if not tmp then
51808: LD_VAR 0 5
51812: NOT
51813: IFFALSE 51817
// exit ;
51815: GO 51862
// for i in tmp do
51817: LD_ADDR_VAR 0 3
51821: PUSH
51822: LD_VAR 0 5
51826: PUSH
51827: FOR_IN
51828: IFFALSE 51860
// begin result := EnemyInRange ( i , 22 ) ;
51830: LD_ADDR_VAR 0 2
51834: PUSH
51835: LD_VAR 0 3
51839: PPUSH
51840: LD_INT 22
51842: PPUSH
51843: CALL 49277 0 2
51847: ST_TO_ADDR
// if result then
51848: LD_VAR 0 2
51852: IFFALSE 51858
// exit ;
51854: POP
51855: POP
51856: GO 51862
// end ;
51858: GO 51827
51860: POP
51861: POP
// end ;
51862: LD_VAR 0 2
51866: RET
// export function FilterByTag ( units , tag ) ; begin
51867: LD_INT 0
51869: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51870: LD_ADDR_VAR 0 3
51874: PUSH
51875: LD_VAR 0 1
51879: PPUSH
51880: LD_INT 120
51882: PUSH
51883: LD_VAR 0 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PPUSH
51892: CALL_OW 72
51896: ST_TO_ADDR
// end ;
51897: LD_VAR 0 3
51901: RET
// export function IsDriver ( un ) ; begin
51902: LD_INT 0
51904: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51905: LD_ADDR_VAR 0 2
51909: PUSH
51910: LD_VAR 0 1
51914: PUSH
51915: LD_INT 55
51917: PUSH
51918: EMPTY
51919: LIST
51920: PPUSH
51921: CALL_OW 69
51925: IN
51926: ST_TO_ADDR
// end ;
51927: LD_VAR 0 2
51931: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51932: LD_INT 0
51934: PPUSH
51935: PPUSH
// list := [ ] ;
51936: LD_ADDR_VAR 0 5
51940: PUSH
51941: EMPTY
51942: ST_TO_ADDR
// case d of 0 :
51943: LD_VAR 0 3
51947: PUSH
51948: LD_INT 0
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 52089
51956: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51957: LD_ADDR_VAR 0 5
51961: PUSH
51962: LD_VAR 0 1
51966: PUSH
51967: LD_INT 4
51969: MINUS
51970: PUSH
51971: LD_VAR 0 2
51975: PUSH
51976: LD_INT 4
51978: MINUS
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: PUSH
51988: LD_VAR 0 1
51992: PUSH
51993: LD_INT 3
51995: MINUS
51996: PUSH
51997: LD_VAR 0 2
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: LIST
52009: PUSH
52010: LD_VAR 0 1
52014: PUSH
52015: LD_INT 4
52017: PLUS
52018: PUSH
52019: LD_VAR 0 2
52023: PUSH
52024: LD_INT 4
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: PUSH
52032: LD_VAR 0 1
52036: PUSH
52037: LD_INT 3
52039: PLUS
52040: PUSH
52041: LD_VAR 0 2
52045: PUSH
52046: LD_INT 3
52048: PLUS
52049: PUSH
52050: LD_INT 5
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: LIST
52057: PUSH
52058: LD_VAR 0 1
52062: PUSH
52063: LD_VAR 0 2
52067: PUSH
52068: LD_INT 4
52070: PLUS
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// end ; 1 :
52087: GO 52787
52089: LD_INT 1
52091: DOUBLE
52092: EQUAL
52093: IFTRUE 52097
52095: GO 52230
52097: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52098: LD_ADDR_VAR 0 5
52102: PUSH
52103: LD_VAR 0 1
52107: PUSH
52108: LD_VAR 0 2
52112: PUSH
52113: LD_INT 4
52115: MINUS
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: PUSH
52125: LD_VAR 0 1
52129: PUSH
52130: LD_INT 3
52132: MINUS
52133: PUSH
52134: LD_VAR 0 2
52138: PUSH
52139: LD_INT 3
52141: MINUS
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: LIST
52150: PUSH
52151: LD_VAR 0 1
52155: PUSH
52156: LD_INT 4
52158: MINUS
52159: PUSH
52160: LD_VAR 0 2
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: PUSH
52173: LD_VAR 0 1
52177: PUSH
52178: LD_VAR 0 2
52182: PUSH
52183: LD_INT 3
52185: PLUS
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: PUSH
52195: LD_VAR 0 1
52199: PUSH
52200: LD_INT 4
52202: PLUS
52203: PUSH
52204: LD_VAR 0 2
52208: PUSH
52209: LD_INT 4
52211: PLUS
52212: PUSH
52213: LD_INT 5
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: ST_TO_ADDR
// end ; 2 :
52228: GO 52787
52230: LD_INT 2
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52238
52236: GO 52367
52238: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52239: LD_ADDR_VAR 0 5
52243: PUSH
52244: LD_VAR 0 1
52248: PUSH
52249: LD_VAR 0 2
52253: PUSH
52254: LD_INT 3
52256: MINUS
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: PUSH
52266: LD_VAR 0 1
52270: PUSH
52271: LD_INT 4
52273: PLUS
52274: PUSH
52275: LD_VAR 0 2
52279: PUSH
52280: LD_INT 4
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: PUSH
52288: LD_VAR 0 1
52292: PUSH
52293: LD_VAR 0 2
52297: PUSH
52298: LD_INT 4
52300: PLUS
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: PUSH
52310: LD_VAR 0 1
52314: PUSH
52315: LD_INT 3
52317: MINUS
52318: PUSH
52319: LD_VAR 0 2
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: PUSH
52332: LD_VAR 0 1
52336: PUSH
52337: LD_INT 4
52339: MINUS
52340: PUSH
52341: LD_VAR 0 2
52345: PUSH
52346: LD_INT 4
52348: MINUS
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// end ; 3 :
52365: GO 52787
52367: LD_INT 3
52369: DOUBLE
52370: EQUAL
52371: IFTRUE 52375
52373: GO 52508
52375: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52376: LD_ADDR_VAR 0 5
52380: PUSH
52381: LD_VAR 0 1
52385: PUSH
52386: LD_INT 3
52388: PLUS
52389: PUSH
52390: LD_VAR 0 2
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: PUSH
52403: LD_VAR 0 1
52407: PUSH
52408: LD_INT 4
52410: PLUS
52411: PUSH
52412: LD_VAR 0 2
52416: PUSH
52417: LD_INT 4
52419: PLUS
52420: PUSH
52421: LD_INT 5
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: PUSH
52429: LD_VAR 0 1
52433: PUSH
52434: LD_INT 4
52436: MINUS
52437: PUSH
52438: LD_VAR 0 2
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: PUSH
52451: LD_VAR 0 1
52455: PUSH
52456: LD_VAR 0 2
52460: PUSH
52461: LD_INT 4
52463: MINUS
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: PUSH
52473: LD_VAR 0 1
52477: PUSH
52478: LD_INT 3
52480: MINUS
52481: PUSH
52482: LD_VAR 0 2
52486: PUSH
52487: LD_INT 3
52489: MINUS
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: ST_TO_ADDR
// end ; 4 :
52506: GO 52787
52508: LD_INT 4
52510: DOUBLE
52511: EQUAL
52512: IFTRUE 52516
52514: GO 52649
52516: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52517: LD_ADDR_VAR 0 5
52521: PUSH
52522: LD_VAR 0 1
52526: PUSH
52527: LD_VAR 0 2
52531: PUSH
52532: LD_INT 4
52534: PLUS
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: PUSH
52544: LD_VAR 0 1
52548: PUSH
52549: LD_INT 3
52551: PLUS
52552: PUSH
52553: LD_VAR 0 2
52557: PUSH
52558: LD_INT 3
52560: PLUS
52561: PUSH
52562: LD_INT 5
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: PUSH
52570: LD_VAR 0 1
52574: PUSH
52575: LD_INT 4
52577: PLUS
52578: PUSH
52579: LD_VAR 0 2
52583: PUSH
52584: LD_INT 4
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: PUSH
52592: LD_VAR 0 1
52596: PUSH
52597: LD_VAR 0 2
52601: PUSH
52602: LD_INT 3
52604: MINUS
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: PUSH
52614: LD_VAR 0 1
52618: PUSH
52619: LD_INT 4
52621: MINUS
52622: PUSH
52623: LD_VAR 0 2
52627: PUSH
52628: LD_INT 4
52630: MINUS
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// end ; 5 :
52647: GO 52787
52649: LD_INT 5
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52657
52655: GO 52786
52657: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52658: LD_ADDR_VAR 0 5
52662: PUSH
52663: LD_VAR 0 1
52667: PUSH
52668: LD_INT 4
52670: MINUS
52671: PUSH
52672: LD_VAR 0 2
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: PUSH
52685: LD_VAR 0 1
52689: PUSH
52690: LD_VAR 0 2
52694: PUSH
52695: LD_INT 4
52697: MINUS
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: PUSH
52707: LD_VAR 0 1
52711: PUSH
52712: LD_INT 4
52714: PLUS
52715: PUSH
52716: LD_VAR 0 2
52720: PUSH
52721: LD_INT 4
52723: PLUS
52724: PUSH
52725: LD_INT 5
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: LIST
52732: PUSH
52733: LD_VAR 0 1
52737: PUSH
52738: LD_INT 3
52740: PLUS
52741: PUSH
52742: LD_VAR 0 2
52746: PUSH
52747: LD_INT 4
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: PUSH
52755: LD_VAR 0 1
52759: PUSH
52760: LD_VAR 0 2
52764: PUSH
52765: LD_INT 3
52767: PLUS
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// end ; end ;
52784: GO 52787
52786: POP
// result := list ;
52787: LD_ADDR_VAR 0 4
52791: PUSH
52792: LD_VAR 0 5
52796: ST_TO_ADDR
// end ;
52797: LD_VAR 0 4
52801: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52802: LD_INT 0
52804: PPUSH
52805: PPUSH
52806: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52807: LD_VAR 0 1
52811: NOT
52812: IFTRUE 52840
52814: PUSH
52815: LD_VAR 0 2
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 4
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: IN
52838: NOT
52839: OR
52840: IFFALSE 52844
// exit ;
52842: GO 52927
// tmp := [ ] ;
52844: LD_ADDR_VAR 0 5
52848: PUSH
52849: EMPTY
52850: ST_TO_ADDR
// for i in units do
52851: LD_ADDR_VAR 0 4
52855: PUSH
52856: LD_VAR 0 1
52860: PUSH
52861: FOR_IN
52862: IFFALSE 52896
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52864: LD_ADDR_VAR 0 5
52868: PUSH
52869: LD_VAR 0 5
52873: PPUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: LD_VAR 0 2
52883: PPUSH
52884: CALL_OW 259
52888: PPUSH
52889: CALL 54322 0 2
52893: ST_TO_ADDR
52894: GO 52861
52896: POP
52897: POP
// if not tmp then
52898: LD_VAR 0 5
52902: NOT
52903: IFFALSE 52907
// exit ;
52905: GO 52927
// result := SortListByListDesc ( units , tmp ) ;
52907: LD_ADDR_VAR 0 3
52911: PUSH
52912: LD_VAR 0 1
52916: PPUSH
52917: LD_VAR 0 5
52921: PPUSH
52922: CALL_OW 77
52926: ST_TO_ADDR
// end ;
52927: LD_VAR 0 3
52931: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52932: LD_INT 0
52934: PPUSH
52935: PPUSH
52936: PPUSH
// result := false ;
52937: LD_ADDR_VAR 0 3
52941: PUSH
52942: LD_INT 0
52944: ST_TO_ADDR
// if not building then
52945: LD_VAR 0 2
52949: NOT
52950: IFFALSE 52954
// exit ;
52952: GO 53098
// x := GetX ( building ) ;
52954: LD_ADDR_VAR 0 4
52958: PUSH
52959: LD_VAR 0 2
52963: PPUSH
52964: CALL_OW 250
52968: ST_TO_ADDR
// y := GetY ( building ) ;
52969: LD_ADDR_VAR 0 5
52973: PUSH
52974: LD_VAR 0 2
52978: PPUSH
52979: CALL_OW 251
52983: ST_TO_ADDR
// if not x or not y then
52984: LD_VAR 0 4
52988: NOT
52989: IFTRUE 52998
52991: PUSH
52992: LD_VAR 0 5
52996: NOT
52997: OR
52998: IFFALSE 53002
// exit ;
53000: GO 53098
// if GetTaskList ( unit ) then
53002: LD_VAR 0 1
53006: PPUSH
53007: CALL_OW 437
53011: IFFALSE 53098
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53013: LD_STRING e
53015: PUSH
53016: LD_VAR 0 1
53020: PPUSH
53021: CALL_OW 437
53025: PUSH
53026: LD_INT 1
53028: ARRAY
53029: PUSH
53030: LD_INT 1
53032: ARRAY
53033: EQUAL
53034: IFFALSE 53061
53036: PUSH
53037: LD_VAR 0 4
53041: PUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: CALL_OW 437
53051: PUSH
53052: LD_INT 1
53054: ARRAY
53055: PUSH
53056: LD_INT 2
53058: ARRAY
53059: EQUAL
53060: AND
53061: IFFALSE 53088
53063: PUSH
53064: LD_VAR 0 5
53068: PUSH
53069: LD_VAR 0 1
53073: PPUSH
53074: CALL_OW 437
53078: PUSH
53079: LD_INT 1
53081: ARRAY
53082: PUSH
53083: LD_INT 3
53085: ARRAY
53086: EQUAL
53087: AND
53088: IFFALSE 53098
// result := true end ;
53090: LD_ADDR_VAR 0 3
53094: PUSH
53095: LD_INT 1
53097: ST_TO_ADDR
// end ;
53098: LD_VAR 0 3
53102: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53103: LD_INT 0
53105: PPUSH
// result := false ;
53106: LD_ADDR_VAR 0 4
53110: PUSH
53111: LD_INT 0
53113: ST_TO_ADDR
// if GetTaskList ( unit ) then
53114: LD_VAR 0 1
53118: PPUSH
53119: CALL_OW 437
53123: IFFALSE 53210
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53125: LD_STRING M
53127: PUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: CALL_OW 437
53137: PUSH
53138: LD_INT 1
53140: ARRAY
53141: PUSH
53142: LD_INT 1
53144: ARRAY
53145: EQUAL
53146: IFFALSE 53173
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_VAR 0 1
53158: PPUSH
53159: CALL_OW 437
53163: PUSH
53164: LD_INT 1
53166: ARRAY
53167: PUSH
53168: LD_INT 2
53170: ARRAY
53171: EQUAL
53172: AND
53173: IFFALSE 53200
53175: PUSH
53176: LD_VAR 0 3
53180: PUSH
53181: LD_VAR 0 1
53185: PPUSH
53186: CALL_OW 437
53190: PUSH
53191: LD_INT 1
53193: ARRAY
53194: PUSH
53195: LD_INT 3
53197: ARRAY
53198: EQUAL
53199: AND
53200: IFFALSE 53210
// result := true ;
53202: LD_ADDR_VAR 0 4
53206: PUSH
53207: LD_INT 1
53209: ST_TO_ADDR
// end ; end ;
53210: LD_VAR 0 4
53214: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53215: LD_INT 0
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
// if not unit or not area then
53221: LD_VAR 0 1
53225: NOT
53226: IFTRUE 53235
53228: PUSH
53229: LD_VAR 0 2
53233: NOT
53234: OR
53235: IFFALSE 53239
// exit ;
53237: GO 53415
// tmp := AreaToList ( area , i ) ;
53239: LD_ADDR_VAR 0 6
53243: PUSH
53244: LD_VAR 0 2
53248: PPUSH
53249: LD_VAR 0 5
53253: PPUSH
53254: CALL_OW 517
53258: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53259: LD_ADDR_VAR 0 5
53263: PUSH
53264: DOUBLE
53265: LD_INT 1
53267: DEC
53268: ST_TO_ADDR
53269: LD_VAR 0 6
53273: PUSH
53274: LD_INT 1
53276: ARRAY
53277: PUSH
53278: FOR_TO
53279: IFFALSE 53413
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53281: LD_ADDR_VAR 0 7
53285: PUSH
53286: LD_VAR 0 6
53290: PUSH
53291: LD_INT 1
53293: ARRAY
53294: PUSH
53295: LD_VAR 0 5
53299: ARRAY
53300: PUSH
53301: LD_VAR 0 6
53305: PUSH
53306: LD_INT 2
53308: ARRAY
53309: PUSH
53310: LD_VAR 0 5
53314: ARRAY
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53320: LD_INT 92
53322: PUSH
53323: LD_VAR 0 7
53327: PUSH
53328: LD_INT 1
53330: ARRAY
53331: PUSH
53332: LD_VAR 0 7
53336: PUSH
53337: LD_INT 2
53339: ARRAY
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: PPUSH
53350: CALL_OW 69
53354: PUSH
53355: LD_INT 0
53357: EQUAL
53358: IFFALSE 53411
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53360: LD_VAR 0 1
53364: PPUSH
53365: LD_VAR 0 7
53369: PUSH
53370: LD_INT 1
53372: ARRAY
53373: PPUSH
53374: LD_VAR 0 7
53378: PUSH
53379: LD_INT 2
53381: ARRAY
53382: PPUSH
53383: LD_VAR 0 3
53387: PPUSH
53388: CALL_OW 48
// result := IsPlaced ( unit ) ;
53392: LD_ADDR_VAR 0 4
53396: PUSH
53397: LD_VAR 0 1
53401: PPUSH
53402: CALL_OW 305
53406: ST_TO_ADDR
// exit ;
53407: POP
53408: POP
53409: GO 53415
// end ; end ;
53411: GO 53278
53413: POP
53414: POP
// end ;
53415: LD_VAR 0 4
53419: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53420: LD_INT 0
53422: PPUSH
53423: PPUSH
53424: PPUSH
// if not side or side > 8 then
53425: LD_VAR 0 1
53429: NOT
53430: IFTRUE 53442
53432: PUSH
53433: LD_VAR 0 1
53437: PUSH
53438: LD_INT 8
53440: GREATER
53441: OR
53442: IFFALSE 53446
// exit ;
53444: GO 53633
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53446: LD_ADDR_VAR 0 4
53450: PUSH
53451: LD_INT 22
53453: PUSH
53454: LD_VAR 0 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 21
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PPUSH
53477: CALL_OW 69
53481: ST_TO_ADDR
// if not tmp then
53482: LD_VAR 0 4
53486: NOT
53487: IFFALSE 53491
// exit ;
53489: GO 53633
// enable_addtolog := true ;
53491: LD_ADDR_OWVAR 81
53495: PUSH
53496: LD_INT 1
53498: ST_TO_ADDR
// AddToLog ( [ ) ;
53499: LD_STRING [
53501: PPUSH
53502: CALL_OW 561
// for i in tmp do
53506: LD_ADDR_VAR 0 3
53510: PUSH
53511: LD_VAR 0 4
53515: PUSH
53516: FOR_IN
53517: IFFALSE 53624
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53519: LD_STRING [
53521: PUSH
53522: LD_VAR 0 3
53526: PPUSH
53527: CALL_OW 266
53531: STR
53532: PUSH
53533: LD_STRING , 
53535: STR
53536: PUSH
53537: LD_VAR 0 3
53541: PPUSH
53542: CALL_OW 250
53546: STR
53547: PUSH
53548: LD_STRING , 
53550: STR
53551: PUSH
53552: LD_VAR 0 3
53556: PPUSH
53557: CALL_OW 251
53561: STR
53562: PUSH
53563: LD_STRING , 
53565: STR
53566: PUSH
53567: LD_VAR 0 3
53571: PPUSH
53572: CALL_OW 254
53576: STR
53577: PUSH
53578: LD_STRING , 
53580: STR
53581: PUSH
53582: LD_VAR 0 3
53586: PPUSH
53587: LD_INT 1
53589: PPUSH
53590: CALL_OW 268
53594: STR
53595: PUSH
53596: LD_STRING , 
53598: STR
53599: PUSH
53600: LD_VAR 0 3
53604: PPUSH
53605: LD_INT 2
53607: PPUSH
53608: CALL_OW 268
53612: STR
53613: PUSH
53614: LD_STRING ],
53616: STR
53617: PPUSH
53618: CALL_OW 561
// end ;
53622: GO 53516
53624: POP
53625: POP
// AddToLog ( ]; ) ;
53626: LD_STRING ];
53628: PPUSH
53629: CALL_OW 561
// end ;
53633: LD_VAR 0 2
53637: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53638: LD_INT 0
53640: PPUSH
53641: PPUSH
53642: PPUSH
53643: PPUSH
53644: PPUSH
// if not area or not rate or not max then
53645: LD_VAR 0 1
53649: NOT
53650: IFTRUE 53659
53652: PUSH
53653: LD_VAR 0 2
53657: NOT
53658: OR
53659: IFTRUE 53668
53661: PUSH
53662: LD_VAR 0 4
53666: NOT
53667: OR
53668: IFFALSE 53672
// exit ;
53670: GO 53861
// while 1 do
53672: LD_INT 1
53674: IFFALSE 53861
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53676: LD_ADDR_VAR 0 9
53680: PUSH
53681: LD_VAR 0 1
53685: PPUSH
53686: LD_INT 1
53688: PPUSH
53689: CALL_OW 287
53693: PUSH
53694: LD_INT 10
53696: MUL
53697: ST_TO_ADDR
// r := rate / 10 ;
53698: LD_ADDR_VAR 0 7
53702: PUSH
53703: LD_VAR 0 2
53707: PUSH
53708: LD_INT 10
53710: DIVREAL
53711: ST_TO_ADDR
// time := 1 1$00 ;
53712: LD_ADDR_VAR 0 8
53716: PUSH
53717: LD_INT 2100
53719: ST_TO_ADDR
// if amount < min then
53720: LD_VAR 0 9
53724: PUSH
53725: LD_VAR 0 3
53729: LESS
53730: IFFALSE 53748
// r := r * 2 else
53732: LD_ADDR_VAR 0 7
53736: PUSH
53737: LD_VAR 0 7
53741: PUSH
53742: LD_INT 2
53744: MUL
53745: ST_TO_ADDR
53746: GO 53774
// if amount > max then
53748: LD_VAR 0 9
53752: PUSH
53753: LD_VAR 0 4
53757: GREATER
53758: IFFALSE 53774
// r := r / 2 ;
53760: LD_ADDR_VAR 0 7
53764: PUSH
53765: LD_VAR 0 7
53769: PUSH
53770: LD_INT 2
53772: DIVREAL
53773: ST_TO_ADDR
// time := time / r ;
53774: LD_ADDR_VAR 0 8
53778: PUSH
53779: LD_VAR 0 8
53783: PUSH
53784: LD_VAR 0 7
53788: DIVREAL
53789: ST_TO_ADDR
// if time < 0 then
53790: LD_VAR 0 8
53794: PUSH
53795: LD_INT 0
53797: LESS
53798: IFFALSE 53815
// time := time * - 1 ;
53800: LD_ADDR_VAR 0 8
53804: PUSH
53805: LD_VAR 0 8
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: MUL
53814: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53815: LD_VAR 0 8
53819: PUSH
53820: LD_INT 35
53822: PPUSH
53823: LD_INT 875
53825: PPUSH
53826: CALL_OW 12
53830: PLUS
53831: PPUSH
53832: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53836: LD_INT 1
53838: PPUSH
53839: LD_INT 5
53841: PPUSH
53842: CALL_OW 12
53846: PPUSH
53847: LD_VAR 0 1
53851: PPUSH
53852: LD_INT 1
53854: PPUSH
53855: CALL_OW 55
// end ;
53859: GO 53672
// end ;
53861: LD_VAR 0 5
53865: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53866: LD_INT 0
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
53872: PPUSH
53873: PPUSH
53874: PPUSH
53875: PPUSH
// if not turrets or not factories then
53876: LD_VAR 0 1
53880: NOT
53881: IFTRUE 53890
53883: PUSH
53884: LD_VAR 0 2
53888: NOT
53889: OR
53890: IFFALSE 53894
// exit ;
53892: GO 54201
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53894: LD_ADDR_VAR 0 10
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: LD_INT 6
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: PUSH
53922: LD_INT 5
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 24
53936: PUSH
53937: LD_INT 25
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 23
53946: PUSH
53947: LD_INT 27
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 42
53960: PUSH
53961: LD_INT 43
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 44
53970: PUSH
53971: LD_INT 46
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 45
53980: PUSH
53981: LD_INT 47
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: LIST
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: ST_TO_ADDR
// result := [ ] ;
53998: LD_ADDR_VAR 0 3
54002: PUSH
54003: EMPTY
54004: ST_TO_ADDR
// for i in turrets do
54005: LD_ADDR_VAR 0 4
54009: PUSH
54010: LD_VAR 0 1
54014: PUSH
54015: FOR_IN
54016: IFFALSE 54199
// begin nat := GetNation ( i ) ;
54018: LD_ADDR_VAR 0 7
54022: PUSH
54023: LD_VAR 0 4
54027: PPUSH
54028: CALL_OW 248
54032: ST_TO_ADDR
// weapon := 0 ;
54033: LD_ADDR_VAR 0 8
54037: PUSH
54038: LD_INT 0
54040: ST_TO_ADDR
// if not nat then
54041: LD_VAR 0 7
54045: NOT
54046: IFFALSE 54050
// continue ;
54048: GO 54015
// for j in list [ nat ] do
54050: LD_ADDR_VAR 0 5
54054: PUSH
54055: LD_VAR 0 10
54059: PUSH
54060: LD_VAR 0 7
54064: ARRAY
54065: PUSH
54066: FOR_IN
54067: IFFALSE 54108
// if GetBWeapon ( i ) = j [ 1 ] then
54069: LD_VAR 0 4
54073: PPUSH
54074: CALL_OW 269
54078: PUSH
54079: LD_VAR 0 5
54083: PUSH
54084: LD_INT 1
54086: ARRAY
54087: EQUAL
54088: IFFALSE 54106
// begin weapon := j [ 2 ] ;
54090: LD_ADDR_VAR 0 8
54094: PUSH
54095: LD_VAR 0 5
54099: PUSH
54100: LD_INT 2
54102: ARRAY
54103: ST_TO_ADDR
// break ;
54104: GO 54108
// end ;
54106: GO 54066
54108: POP
54109: POP
// if not weapon then
54110: LD_VAR 0 8
54114: NOT
54115: IFFALSE 54119
// continue ;
54117: GO 54015
// for k in factories do
54119: LD_ADDR_VAR 0 6
54123: PUSH
54124: LD_VAR 0 2
54128: PUSH
54129: FOR_IN
54130: IFFALSE 54195
// begin weapons := AvailableWeaponList ( k ) ;
54132: LD_ADDR_VAR 0 9
54136: PUSH
54137: LD_VAR 0 6
54141: PPUSH
54142: CALL_OW 478
54146: ST_TO_ADDR
// if not weapons then
54147: LD_VAR 0 9
54151: NOT
54152: IFFALSE 54156
// continue ;
54154: GO 54129
// if weapon in weapons then
54156: LD_VAR 0 8
54160: PUSH
54161: LD_VAR 0 9
54165: IN
54166: IFFALSE 54193
// begin result := [ i , weapon ] ;
54168: LD_ADDR_VAR 0 3
54172: PUSH
54173: LD_VAR 0 4
54177: PUSH
54178: LD_VAR 0 8
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// exit ;
54187: POP
54188: POP
54189: POP
54190: POP
54191: GO 54201
// end ; end ;
54193: GO 54129
54195: POP
54196: POP
// end ;
54197: GO 54015
54199: POP
54200: POP
// end ;
54201: LD_VAR 0 3
54205: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54206: LD_INT 0
54208: PPUSH
// if not side or side > 8 then
54209: LD_VAR 0 3
54213: NOT
54214: IFTRUE 54226
54216: PUSH
54217: LD_VAR 0 3
54221: PUSH
54222: LD_INT 8
54224: GREATER
54225: OR
54226: IFFALSE 54230
// exit ;
54228: GO 54289
// if not range then
54230: LD_VAR 0 4
54234: NOT
54235: IFFALSE 54246
// range := - 12 ;
54237: LD_ADDR_VAR 0 4
54241: PUSH
54242: LD_INT 12
54244: NEG
54245: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54246: LD_VAR 0 1
54250: PPUSH
54251: LD_VAR 0 2
54255: PPUSH
54256: LD_VAR 0 3
54260: PPUSH
54261: LD_VAR 0 4
54265: PPUSH
54266: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54270: LD_VAR 0 1
54274: PPUSH
54275: LD_VAR 0 2
54279: PPUSH
54280: LD_VAR 0 3
54284: PPUSH
54285: CALL_OW 331
// end ;
54289: LD_VAR 0 5
54293: RET
// export function Video ( mode ) ; begin
54294: LD_INT 0
54296: PPUSH
// ingame_video = mode ;
54297: LD_ADDR_OWVAR 52
54301: PUSH
54302: LD_VAR 0 1
54306: ST_TO_ADDR
// interface_hidden = mode ;
54307: LD_ADDR_OWVAR 54
54311: PUSH
54312: LD_VAR 0 1
54316: ST_TO_ADDR
// end ;
54317: LD_VAR 0 2
54321: RET
// export function Join ( array , element ) ; begin
54322: LD_INT 0
54324: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54325: LD_ADDR_VAR 0 3
54329: PUSH
54330: LD_VAR 0 1
54334: PPUSH
54335: LD_VAR 0 1
54339: PUSH
54340: LD_INT 1
54342: PLUS
54343: PPUSH
54344: LD_VAR 0 2
54348: PPUSH
54349: CALL_OW 1
54353: ST_TO_ADDR
// end ;
54354: LD_VAR 0 3
54358: RET
// export function JoinUnion ( array , element ) ; begin
54359: LD_INT 0
54361: PPUSH
// result := array union element ;
54362: LD_ADDR_VAR 0 3
54366: PUSH
54367: LD_VAR 0 1
54371: PUSH
54372: LD_VAR 0 2
54376: UNION
54377: ST_TO_ADDR
// end ;
54378: LD_VAR 0 3
54382: RET
// export function GetBehemoths ( side ) ; begin
54383: LD_INT 0
54385: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54386: LD_ADDR_VAR 0 2
54390: PUSH
54391: LD_INT 22
54393: PUSH
54394: LD_VAR 0 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 31
54405: PUSH
54406: LD_INT 25
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PPUSH
54417: CALL_OW 69
54421: ST_TO_ADDR
// end ;
54422: LD_VAR 0 2
54426: RET
// export function Shuffle ( array ) ; var i , index ; begin
54427: LD_INT 0
54429: PPUSH
54430: PPUSH
54431: PPUSH
// result := [ ] ;
54432: LD_ADDR_VAR 0 2
54436: PUSH
54437: EMPTY
54438: ST_TO_ADDR
// if not array then
54439: LD_VAR 0 1
54443: NOT
54444: IFFALSE 54448
// exit ;
54446: GO 54547
// Randomize ;
54448: CALL_OW 10
// for i = array downto 1 do
54452: LD_ADDR_VAR 0 3
54456: PUSH
54457: DOUBLE
54458: LD_VAR 0 1
54462: INC
54463: ST_TO_ADDR
54464: LD_INT 1
54466: PUSH
54467: FOR_DOWNTO
54468: IFFALSE 54545
// begin index := rand ( 1 , array ) ;
54470: LD_ADDR_VAR 0 4
54474: PUSH
54475: LD_INT 1
54477: PPUSH
54478: LD_VAR 0 1
54482: PPUSH
54483: CALL_OW 12
54487: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54488: LD_ADDR_VAR 0 2
54492: PUSH
54493: LD_VAR 0 2
54497: PPUSH
54498: LD_VAR 0 2
54502: PUSH
54503: LD_INT 1
54505: PLUS
54506: PPUSH
54507: LD_VAR 0 1
54511: PUSH
54512: LD_VAR 0 4
54516: ARRAY
54517: PPUSH
54518: CALL_OW 2
54522: ST_TO_ADDR
// array := Delete ( array , index ) ;
54523: LD_ADDR_VAR 0 1
54527: PUSH
54528: LD_VAR 0 1
54532: PPUSH
54533: LD_VAR 0 4
54537: PPUSH
54538: CALL_OW 3
54542: ST_TO_ADDR
// end ;
54543: GO 54467
54545: POP
54546: POP
// end ;
54547: LD_VAR 0 2
54551: RET
// export function GetBaseMaterials ( base ) ; begin
54552: LD_INT 0
54554: PPUSH
// result := [ 0 , 0 , 0 ] ;
54555: LD_ADDR_VAR 0 2
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: LIST
54573: ST_TO_ADDR
// if not base then
54574: LD_VAR 0 1
54578: NOT
54579: IFFALSE 54583
// exit ;
54581: GO 54632
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54583: LD_ADDR_VAR 0 2
54587: PUSH
54588: LD_VAR 0 1
54592: PPUSH
54593: LD_INT 1
54595: PPUSH
54596: CALL_OW 275
54600: PUSH
54601: LD_VAR 0 1
54605: PPUSH
54606: LD_INT 2
54608: PPUSH
54609: CALL_OW 275
54613: PUSH
54614: LD_VAR 0 1
54618: PPUSH
54619: LD_INT 3
54621: PPUSH
54622: CALL_OW 275
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// end ;
54632: LD_VAR 0 2
54636: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54637: LD_INT 0
54639: PPUSH
54640: PPUSH
// result := array ;
54641: LD_ADDR_VAR 0 3
54645: PUSH
54646: LD_VAR 0 1
54650: ST_TO_ADDR
// if size >= result then
54651: LD_VAR 0 2
54655: PUSH
54656: LD_VAR 0 3
54660: GREATEREQUAL
54661: IFFALSE 54665
// exit ;
54663: GO 54715
// if size then
54665: LD_VAR 0 2
54669: IFFALSE 54715
// for i := array downto size do
54671: LD_ADDR_VAR 0 4
54675: PUSH
54676: DOUBLE
54677: LD_VAR 0 1
54681: INC
54682: ST_TO_ADDR
54683: LD_VAR 0 2
54687: PUSH
54688: FOR_DOWNTO
54689: IFFALSE 54713
// result := Delete ( result , result ) ;
54691: LD_ADDR_VAR 0 3
54695: PUSH
54696: LD_VAR 0 3
54700: PPUSH
54701: LD_VAR 0 3
54705: PPUSH
54706: CALL_OW 3
54710: ST_TO_ADDR
54711: GO 54688
54713: POP
54714: POP
// end ;
54715: LD_VAR 0 3
54719: RET
// export function ComExit ( unit ) ; var tmp ; begin
54720: LD_INT 0
54722: PPUSH
54723: PPUSH
// if not IsInUnit ( unit ) then
54724: LD_VAR 0 1
54728: PPUSH
54729: CALL_OW 310
54733: NOT
54734: IFFALSE 54738
// exit ;
54736: GO 54798
// tmp := IsInUnit ( unit ) ;
54738: LD_ADDR_VAR 0 3
54742: PUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: CALL_OW 310
54752: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54753: LD_VAR 0 3
54757: PPUSH
54758: CALL_OW 247
54762: PUSH
54763: LD_INT 2
54765: EQUAL
54766: IFFALSE 54779
// ComExitVehicle ( unit ) else
54768: LD_VAR 0 1
54772: PPUSH
54773: CALL_OW 121
54777: GO 54788
// ComExitBuilding ( unit ) ;
54779: LD_VAR 0 1
54783: PPUSH
54784: CALL_OW 122
// result := tmp ;
54788: LD_ADDR_VAR 0 2
54792: PUSH
54793: LD_VAR 0 3
54797: ST_TO_ADDR
// end ;
54798: LD_VAR 0 2
54802: RET
// export function ComExitAll ( units ) ; var i ; begin
54803: LD_INT 0
54805: PPUSH
54806: PPUSH
// if not units then
54807: LD_VAR 0 1
54811: NOT
54812: IFFALSE 54816
// exit ;
54814: GO 54842
// for i in units do
54816: LD_ADDR_VAR 0 3
54820: PUSH
54821: LD_VAR 0 1
54825: PUSH
54826: FOR_IN
54827: IFFALSE 54840
// ComExit ( i ) ;
54829: LD_VAR 0 3
54833: PPUSH
54834: CALL 54720 0 1
54838: GO 54826
54840: POP
54841: POP
// end ;
54842: LD_VAR 0 2
54846: RET
// export function ResetHc ; begin
54847: LD_INT 0
54849: PPUSH
// InitHc ;
54850: CALL_OW 19
// hc_importance := 0 ;
54854: LD_ADDR_OWVAR 32
54858: PUSH
54859: LD_INT 0
54861: ST_TO_ADDR
// end ;
54862: LD_VAR 0 1
54866: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54867: LD_INT 0
54869: PPUSH
54870: PPUSH
54871: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54872: LD_ADDR_VAR 0 6
54876: PUSH
54877: LD_VAR 0 1
54881: PUSH
54882: LD_VAR 0 3
54886: PLUS
54887: PUSH
54888: LD_INT 2
54890: DIV
54891: ST_TO_ADDR
// if _x < 0 then
54892: LD_VAR 0 6
54896: PUSH
54897: LD_INT 0
54899: LESS
54900: IFFALSE 54917
// _x := _x * - 1 ;
54902: LD_ADDR_VAR 0 6
54906: PUSH
54907: LD_VAR 0 6
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: MUL
54916: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54917: LD_ADDR_VAR 0 7
54921: PUSH
54922: LD_VAR 0 2
54926: PUSH
54927: LD_VAR 0 4
54931: PLUS
54932: PUSH
54933: LD_INT 2
54935: DIV
54936: ST_TO_ADDR
// if _y < 0 then
54937: LD_VAR 0 7
54941: PUSH
54942: LD_INT 0
54944: LESS
54945: IFFALSE 54962
// _y := _y * - 1 ;
54947: LD_ADDR_VAR 0 7
54951: PUSH
54952: LD_VAR 0 7
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: MUL
54961: ST_TO_ADDR
// result := [ _x , _y ] ;
54962: LD_ADDR_VAR 0 5
54966: PUSH
54967: LD_VAR 0 6
54971: PUSH
54972: LD_VAR 0 7
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// end ;
54981: LD_VAR 0 5
54985: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54986: LD_INT 0
54988: PPUSH
54989: PPUSH
54990: PPUSH
54991: PPUSH
// task := GetTaskList ( unit ) ;
54992: LD_ADDR_VAR 0 7
54996: PUSH
54997: LD_VAR 0 1
55001: PPUSH
55002: CALL_OW 437
55006: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55007: LD_VAR 0 7
55011: NOT
55012: IFFALSE 55031
55014: PUSH
55015: LD_VAR 0 1
55019: PPUSH
55020: LD_VAR 0 2
55024: PPUSH
55025: CALL_OW 308
55029: NOT
55030: AND
55031: IFFALSE 55035
// exit ;
55033: GO 55153
// if IsInArea ( unit , area ) then
55035: LD_VAR 0 1
55039: PPUSH
55040: LD_VAR 0 2
55044: PPUSH
55045: CALL_OW 308
55049: IFFALSE 55067
// begin ComMoveToArea ( unit , goAway ) ;
55051: LD_VAR 0 1
55055: PPUSH
55056: LD_VAR 0 3
55060: PPUSH
55061: CALL_OW 113
// exit ;
55065: GO 55153
// end ; if task [ 1 ] [ 1 ] <> M then
55067: LD_VAR 0 7
55071: PUSH
55072: LD_INT 1
55074: ARRAY
55075: PUSH
55076: LD_INT 1
55078: ARRAY
55079: PUSH
55080: LD_STRING M
55082: NONEQUAL
55083: IFFALSE 55087
// exit ;
55085: GO 55153
// x := task [ 1 ] [ 2 ] ;
55087: LD_ADDR_VAR 0 5
55091: PUSH
55092: LD_VAR 0 7
55096: PUSH
55097: LD_INT 1
55099: ARRAY
55100: PUSH
55101: LD_INT 2
55103: ARRAY
55104: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55105: LD_ADDR_VAR 0 6
55109: PUSH
55110: LD_VAR 0 7
55114: PUSH
55115: LD_INT 1
55117: ARRAY
55118: PUSH
55119: LD_INT 3
55121: ARRAY
55122: ST_TO_ADDR
// if InArea ( x , y , area ) then
55123: LD_VAR 0 5
55127: PPUSH
55128: LD_VAR 0 6
55132: PPUSH
55133: LD_VAR 0 2
55137: PPUSH
55138: CALL_OW 309
55142: IFFALSE 55153
// ComStop ( unit ) ;
55144: LD_VAR 0 1
55148: PPUSH
55149: CALL_OW 141
// end ;
55153: LD_VAR 0 4
55157: RET
// export function Abs ( value ) ; begin
55158: LD_INT 0
55160: PPUSH
// result := value ;
55161: LD_ADDR_VAR 0 2
55165: PUSH
55166: LD_VAR 0 1
55170: ST_TO_ADDR
// if value < 0 then
55171: LD_VAR 0 1
55175: PUSH
55176: LD_INT 0
55178: LESS
55179: IFFALSE 55196
// result := value * - 1 ;
55181: LD_ADDR_VAR 0 2
55185: PUSH
55186: LD_VAR 0 1
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: MUL
55195: ST_TO_ADDR
// end ;
55196: LD_VAR 0 2
55200: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55201: LD_INT 0
55203: PPUSH
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
55208: PPUSH
55209: PPUSH
55210: PPUSH
// if not unit or not building then
55211: LD_VAR 0 1
55215: NOT
55216: IFTRUE 55225
55218: PUSH
55219: LD_VAR 0 2
55223: NOT
55224: OR
55225: IFFALSE 55229
// exit ;
55227: GO 55457
// x := GetX ( building ) ;
55229: LD_ADDR_VAR 0 4
55233: PUSH
55234: LD_VAR 0 2
55238: PPUSH
55239: CALL_OW 250
55243: ST_TO_ADDR
// y := GetY ( building ) ;
55244: LD_ADDR_VAR 0 6
55248: PUSH
55249: LD_VAR 0 2
55253: PPUSH
55254: CALL_OW 251
55258: ST_TO_ADDR
// d := GetDir ( building ) ;
55259: LD_ADDR_VAR 0 8
55263: PUSH
55264: LD_VAR 0 2
55268: PPUSH
55269: CALL_OW 254
55273: ST_TO_ADDR
// r := 4 ;
55274: LD_ADDR_VAR 0 9
55278: PUSH
55279: LD_INT 4
55281: ST_TO_ADDR
// for i := 1 to 5 do
55282: LD_ADDR_VAR 0 10
55286: PUSH
55287: DOUBLE
55288: LD_INT 1
55290: DEC
55291: ST_TO_ADDR
55292: LD_INT 5
55294: PUSH
55295: FOR_TO
55296: IFFALSE 55455
// begin _x := ShiftX ( x , d , r + i ) ;
55298: LD_ADDR_VAR 0 5
55302: PUSH
55303: LD_VAR 0 4
55307: PPUSH
55308: LD_VAR 0 8
55312: PPUSH
55313: LD_VAR 0 9
55317: PUSH
55318: LD_VAR 0 10
55322: PLUS
55323: PPUSH
55324: CALL_OW 272
55328: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55329: LD_ADDR_VAR 0 7
55333: PUSH
55334: LD_VAR 0 6
55338: PPUSH
55339: LD_VAR 0 8
55343: PPUSH
55344: LD_VAR 0 9
55348: PUSH
55349: LD_VAR 0 10
55353: PLUS
55354: PPUSH
55355: CALL_OW 273
55359: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55360: LD_VAR 0 5
55364: PPUSH
55365: LD_VAR 0 7
55369: PPUSH
55370: CALL_OW 488
55374: IFFALSE 55409
55376: PUSH
55377: LD_VAR 0 5
55381: PPUSH
55382: LD_VAR 0 7
55386: PPUSH
55387: CALL_OW 428
55391: PPUSH
55392: CALL_OW 247
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: IN
55407: NOT
55408: AND
55409: IFFALSE 55453
// begin ComMoveXY ( unit , _x , _y ) ;
55411: LD_VAR 0 1
55415: PPUSH
55416: LD_VAR 0 5
55420: PPUSH
55421: LD_VAR 0 7
55425: PPUSH
55426: CALL_OW 111
// result := [ _x , _y ] ;
55430: LD_ADDR_VAR 0 3
55434: PUSH
55435: LD_VAR 0 5
55439: PUSH
55440: LD_VAR 0 7
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: ST_TO_ADDR
// exit ;
55449: POP
55450: POP
55451: GO 55457
// end ; end ;
55453: GO 55295
55455: POP
55456: POP
// end ;
55457: LD_VAR 0 3
55461: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55462: LD_INT 0
55464: PPUSH
55465: PPUSH
55466: PPUSH
// result := 0 ;
55467: LD_ADDR_VAR 0 3
55471: PUSH
55472: LD_INT 0
55474: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55475: LD_VAR 0 1
55479: PUSH
55480: LD_INT 0
55482: LESS
55483: IFTRUE 55495
55485: PUSH
55486: LD_VAR 0 1
55490: PUSH
55491: LD_INT 8
55493: GREATER
55494: OR
55495: IFTRUE 55507
55497: PUSH
55498: LD_VAR 0 2
55502: PUSH
55503: LD_INT 0
55505: LESS
55506: OR
55507: IFTRUE 55519
55509: PUSH
55510: LD_VAR 0 2
55514: PUSH
55515: LD_INT 8
55517: GREATER
55518: OR
55519: IFFALSE 55523
// exit ;
55521: GO 55598
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55523: LD_ADDR_VAR 0 4
55527: PUSH
55528: LD_INT 22
55530: PUSH
55531: LD_VAR 0 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PPUSH
55540: CALL_OW 69
55544: PUSH
55545: FOR_IN
55546: IFFALSE 55596
// begin un := UnitShoot ( i ) ;
55548: LD_ADDR_VAR 0 5
55552: PUSH
55553: LD_VAR 0 4
55557: PPUSH
55558: CALL_OW 504
55562: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55563: LD_VAR 0 5
55567: PPUSH
55568: CALL_OW 255
55572: PUSH
55573: LD_VAR 0 1
55577: EQUAL
55578: IFFALSE 55594
// begin result := un ;
55580: LD_ADDR_VAR 0 3
55584: PUSH
55585: LD_VAR 0 5
55589: ST_TO_ADDR
// exit ;
55590: POP
55591: POP
55592: GO 55598
// end ; end ;
55594: GO 55545
55596: POP
55597: POP
// end ;
55598: LD_VAR 0 3
55602: RET
// export function GetCargoBay ( units ) ; begin
55603: LD_INT 0
55605: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55606: LD_ADDR_VAR 0 2
55610: PUSH
55611: LD_VAR 0 1
55615: PPUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 34
55621: PUSH
55622: LD_INT 12
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 34
55631: PUSH
55632: LD_INT 51
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 34
55641: PUSH
55642: LD_INT 32
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 34
55651: PUSH
55652: LD_INT 89
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: PPUSH
55666: CALL_OW 72
55670: ST_TO_ADDR
// end ;
55671: LD_VAR 0 2
55675: RET
// export function Negate ( value ) ; begin
55676: LD_INT 0
55678: PPUSH
// result := not value ;
55679: LD_ADDR_VAR 0 2
55683: PUSH
55684: LD_VAR 0 1
55688: NOT
55689: ST_TO_ADDR
// end ;
55690: LD_VAR 0 2
55694: RET
// export function Inc ( value ) ; begin
55695: LD_INT 0
55697: PPUSH
// result := value + 1 ;
55698: LD_ADDR_VAR 0 2
55702: PUSH
55703: LD_VAR 0 1
55707: PUSH
55708: LD_INT 1
55710: PLUS
55711: ST_TO_ADDR
// end ;
55712: LD_VAR 0 2
55716: RET
// export function Dec ( value ) ; begin
55717: LD_INT 0
55719: PPUSH
// result := value - 1 ;
55720: LD_ADDR_VAR 0 2
55724: PUSH
55725: LD_VAR 0 1
55729: PUSH
55730: LD_INT 1
55732: MINUS
55733: ST_TO_ADDR
// end ;
55734: LD_VAR 0 2
55738: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55739: LD_INT 0
55741: PPUSH
55742: PPUSH
55743: PPUSH
55744: PPUSH
55745: PPUSH
55746: PPUSH
55747: PPUSH
55748: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55749: LD_VAR 0 1
55753: PPUSH
55754: LD_VAR 0 2
55758: PPUSH
55759: CALL_OW 488
55763: NOT
55764: IFTRUE 55783
55766: PUSH
55767: LD_VAR 0 3
55771: PPUSH
55772: LD_VAR 0 4
55776: PPUSH
55777: CALL_OW 488
55781: NOT
55782: OR
55783: IFFALSE 55796
// begin result := - 1 ;
55785: LD_ADDR_VAR 0 5
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: ST_TO_ADDR
// exit ;
55794: GO 56031
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55796: LD_ADDR_VAR 0 12
55800: PUSH
55801: LD_VAR 0 1
55805: PPUSH
55806: LD_VAR 0 2
55810: PPUSH
55811: LD_VAR 0 3
55815: PPUSH
55816: LD_VAR 0 4
55820: PPUSH
55821: CALL 54867 0 4
55825: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55826: LD_ADDR_VAR 0 11
55830: PUSH
55831: LD_VAR 0 1
55835: PPUSH
55836: LD_VAR 0 2
55840: PPUSH
55841: LD_VAR 0 12
55845: PUSH
55846: LD_INT 1
55848: ARRAY
55849: PPUSH
55850: LD_VAR 0 12
55854: PUSH
55855: LD_INT 2
55857: ARRAY
55858: PPUSH
55859: CALL_OW 298
55863: ST_TO_ADDR
// distance := 9999 ;
55864: LD_ADDR_VAR 0 10
55868: PUSH
55869: LD_INT 9999
55871: ST_TO_ADDR
// for i := 0 to 5 do
55872: LD_ADDR_VAR 0 6
55876: PUSH
55877: DOUBLE
55878: LD_INT 0
55880: DEC
55881: ST_TO_ADDR
55882: LD_INT 5
55884: PUSH
55885: FOR_TO
55886: IFFALSE 56029
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55888: LD_ADDR_VAR 0 7
55892: PUSH
55893: LD_VAR 0 1
55897: PPUSH
55898: LD_VAR 0 6
55902: PPUSH
55903: LD_VAR 0 11
55907: PPUSH
55908: CALL_OW 272
55912: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55913: LD_ADDR_VAR 0 8
55917: PUSH
55918: LD_VAR 0 2
55922: PPUSH
55923: LD_VAR 0 6
55927: PPUSH
55928: LD_VAR 0 11
55932: PPUSH
55933: CALL_OW 273
55937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55938: LD_VAR 0 7
55942: PPUSH
55943: LD_VAR 0 8
55947: PPUSH
55948: CALL_OW 488
55952: NOT
55953: IFFALSE 55957
// continue ;
55955: GO 55885
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55957: LD_ADDR_VAR 0 9
55961: PUSH
55962: LD_VAR 0 12
55966: PUSH
55967: LD_INT 1
55969: ARRAY
55970: PPUSH
55971: LD_VAR 0 12
55975: PUSH
55976: LD_INT 2
55978: ARRAY
55979: PPUSH
55980: LD_VAR 0 7
55984: PPUSH
55985: LD_VAR 0 8
55989: PPUSH
55990: CALL_OW 298
55994: ST_TO_ADDR
// if tmp < distance then
55995: LD_VAR 0 9
55999: PUSH
56000: LD_VAR 0 10
56004: LESS
56005: IFFALSE 56027
// begin result := i ;
56007: LD_ADDR_VAR 0 5
56011: PUSH
56012: LD_VAR 0 6
56016: ST_TO_ADDR
// distance := tmp ;
56017: LD_ADDR_VAR 0 10
56021: PUSH
56022: LD_VAR 0 9
56026: ST_TO_ADDR
// end ; end ;
56027: GO 55885
56029: POP
56030: POP
// end ;
56031: LD_VAR 0 5
56035: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56036: LD_INT 0
56038: PPUSH
56039: PPUSH
// if not driver or not IsInUnit ( driver ) then
56040: LD_VAR 0 1
56044: NOT
56045: IFTRUE 56059
56047: PUSH
56048: LD_VAR 0 1
56052: PPUSH
56053: CALL_OW 310
56057: NOT
56058: OR
56059: IFFALSE 56063
// exit ;
56061: GO 56153
// vehicle := IsInUnit ( driver ) ;
56063: LD_ADDR_VAR 0 3
56067: PUSH
56068: LD_VAR 0 1
56072: PPUSH
56073: CALL_OW 310
56077: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56078: LD_VAR 0 1
56082: PPUSH
56083: LD_STRING \
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 0
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: PUSH
56113: LD_STRING E
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: LD_VAR 0 3
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PPUSH
56149: CALL_OW 446
// end ;
56153: LD_VAR 0 2
56157: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56158: LD_INT 0
56160: PPUSH
56161: PPUSH
// if not driver or not IsInUnit ( driver ) then
56162: LD_VAR 0 1
56166: NOT
56167: IFTRUE 56181
56169: PUSH
56170: LD_VAR 0 1
56174: PPUSH
56175: CALL_OW 310
56179: NOT
56180: OR
56181: IFFALSE 56185
// exit ;
56183: GO 56275
// vehicle := IsInUnit ( driver ) ;
56185: LD_ADDR_VAR 0 3
56189: PUSH
56190: LD_VAR 0 1
56194: PPUSH
56195: CALL_OW 310
56199: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56200: LD_VAR 0 1
56204: PPUSH
56205: LD_STRING \
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: PUSH
56235: LD_STRING E
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_VAR 0 3
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PPUSH
56271: CALL_OW 447
// end ;
56275: LD_VAR 0 2
56279: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56280: LD_INT 0
56282: PPUSH
56283: PPUSH
56284: PPUSH
// tmp := [ ] ;
56285: LD_ADDR_VAR 0 5
56289: PUSH
56290: EMPTY
56291: ST_TO_ADDR
// for i in units do
56292: LD_ADDR_VAR 0 4
56296: PUSH
56297: LD_VAR 0 1
56301: PUSH
56302: FOR_IN
56303: IFFALSE 56341
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56305: LD_ADDR_VAR 0 5
56309: PUSH
56310: LD_VAR 0 5
56314: PPUSH
56315: LD_VAR 0 5
56319: PUSH
56320: LD_INT 1
56322: PLUS
56323: PPUSH
56324: LD_VAR 0 4
56328: PPUSH
56329: CALL_OW 256
56333: PPUSH
56334: CALL_OW 2
56338: ST_TO_ADDR
56339: GO 56302
56341: POP
56342: POP
// if not tmp then
56343: LD_VAR 0 5
56347: NOT
56348: IFFALSE 56352
// exit ;
56350: GO 56400
// if asc then
56352: LD_VAR 0 2
56356: IFFALSE 56380
// result := SortListByListAsc ( units , tmp ) else
56358: LD_ADDR_VAR 0 3
56362: PUSH
56363: LD_VAR 0 1
56367: PPUSH
56368: LD_VAR 0 5
56372: PPUSH
56373: CALL_OW 76
56377: ST_TO_ADDR
56378: GO 56400
// result := SortListByListDesc ( units , tmp ) ;
56380: LD_ADDR_VAR 0 3
56384: PUSH
56385: LD_VAR 0 1
56389: PPUSH
56390: LD_VAR 0 5
56394: PPUSH
56395: CALL_OW 77
56399: ST_TO_ADDR
// end ;
56400: LD_VAR 0 3
56404: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56405: LD_INT 0
56407: PPUSH
56408: PPUSH
// task := GetTaskList ( mech ) ;
56409: LD_ADDR_VAR 0 4
56413: PUSH
56414: LD_VAR 0 1
56418: PPUSH
56419: CALL_OW 437
56423: ST_TO_ADDR
// if not task then
56424: LD_VAR 0 4
56428: NOT
56429: IFFALSE 56433
// exit ;
56431: GO 56477
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56433: LD_ADDR_VAR 0 3
56437: PUSH
56438: LD_VAR 0 4
56442: PUSH
56443: LD_INT 1
56445: ARRAY
56446: PUSH
56447: LD_INT 1
56449: ARRAY
56450: PUSH
56451: LD_STRING r
56453: EQUAL
56454: IFFALSE 56476
56456: PUSH
56457: LD_VAR 0 4
56461: PUSH
56462: LD_INT 1
56464: ARRAY
56465: PUSH
56466: LD_INT 4
56468: ARRAY
56469: PUSH
56470: LD_VAR 0 2
56474: EQUAL
56475: AND
56476: ST_TO_ADDR
// end ;
56477: LD_VAR 0 3
56481: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56482: LD_INT 0
56484: PPUSH
// SetDir ( unit , d ) ;
56485: LD_VAR 0 1
56489: PPUSH
56490: LD_VAR 0 4
56494: PPUSH
56495: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56499: LD_ADDR_VAR 0 6
56503: PUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_VAR 0 2
56513: PPUSH
56514: LD_VAR 0 3
56518: PPUSH
56519: LD_VAR 0 5
56523: PPUSH
56524: CALL_OW 48
56528: ST_TO_ADDR
// end ;
56529: LD_VAR 0 6
56533: RET
// export function ToNaturalNumber ( number ) ; begin
56534: LD_INT 0
56536: PPUSH
// result := number div 1 ;
56537: LD_ADDR_VAR 0 2
56541: PUSH
56542: LD_VAR 0 1
56546: PUSH
56547: LD_INT 1
56549: DIV
56550: ST_TO_ADDR
// if number < 0 then
56551: LD_VAR 0 1
56555: PUSH
56556: LD_INT 0
56558: LESS
56559: IFFALSE 56569
// result := 0 ;
56561: LD_ADDR_VAR 0 2
56565: PUSH
56566: LD_INT 0
56568: ST_TO_ADDR
// end ;
56569: LD_VAR 0 2
56573: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56574: LD_INT 0
56576: PPUSH
56577: PPUSH
56578: PPUSH
// if not buildings then
56579: LD_VAR 0 1
56583: NOT
56584: IFFALSE 56588
// exit ;
56586: GO 56703
// tmp := [ ] ;
56588: LD_ADDR_VAR 0 5
56592: PUSH
56593: EMPTY
56594: ST_TO_ADDR
// for b in buildings do
56595: LD_ADDR_VAR 0 4
56599: PUSH
56600: LD_VAR 0 1
56604: PUSH
56605: FOR_IN
56606: IFFALSE 56644
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56608: LD_ADDR_VAR 0 5
56612: PUSH
56613: LD_VAR 0 5
56617: PPUSH
56618: LD_VAR 0 5
56622: PUSH
56623: LD_INT 1
56625: PLUS
56626: PPUSH
56627: LD_VAR 0 4
56631: PPUSH
56632: CALL_OW 266
56636: PPUSH
56637: CALL_OW 1
56641: ST_TO_ADDR
56642: GO 56605
56644: POP
56645: POP
// if not tmp then
56646: LD_VAR 0 5
56650: NOT
56651: IFFALSE 56655
// exit ;
56653: GO 56703
// if asc then
56655: LD_VAR 0 2
56659: IFFALSE 56683
// result := SortListByListAsc ( buildings , tmp ) else
56661: LD_ADDR_VAR 0 3
56665: PUSH
56666: LD_VAR 0 1
56670: PPUSH
56671: LD_VAR 0 5
56675: PPUSH
56676: CALL_OW 76
56680: ST_TO_ADDR
56681: GO 56703
// result := SortListByListDesc ( buildings , tmp ) ;
56683: LD_ADDR_VAR 0 3
56687: PUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: LD_VAR 0 5
56697: PPUSH
56698: CALL_OW 77
56702: ST_TO_ADDR
// end ;
56703: LD_VAR 0 3
56707: RET
// export function SortByClass ( units , class ) ; var un ; begin
56708: LD_INT 0
56710: PPUSH
56711: PPUSH
// if not units or not class then
56712: LD_VAR 0 1
56716: NOT
56717: IFTRUE 56726
56719: PUSH
56720: LD_VAR 0 2
56724: NOT
56725: OR
56726: IFFALSE 56730
// exit ;
56728: GO 56825
// result := [ ] ;
56730: LD_ADDR_VAR 0 3
56734: PUSH
56735: EMPTY
56736: ST_TO_ADDR
// for un in units do
56737: LD_ADDR_VAR 0 4
56741: PUSH
56742: LD_VAR 0 1
56746: PUSH
56747: FOR_IN
56748: IFFALSE 56823
// if GetClass ( un ) = class then
56750: LD_VAR 0 4
56754: PPUSH
56755: CALL_OW 257
56759: PUSH
56760: LD_VAR 0 2
56764: EQUAL
56765: IFFALSE 56792
// result := Insert ( result , 1 , un ) else
56767: LD_ADDR_VAR 0 3
56771: PUSH
56772: LD_VAR 0 3
56776: PPUSH
56777: LD_INT 1
56779: PPUSH
56780: LD_VAR 0 4
56784: PPUSH
56785: CALL_OW 2
56789: ST_TO_ADDR
56790: GO 56821
// result := Replace ( result , result + 1 , un ) ;
56792: LD_ADDR_VAR 0 3
56796: PUSH
56797: LD_VAR 0 3
56801: PPUSH
56802: LD_VAR 0 3
56806: PUSH
56807: LD_INT 1
56809: PLUS
56810: PPUSH
56811: LD_VAR 0 4
56815: PPUSH
56816: CALL_OW 1
56820: ST_TO_ADDR
56821: GO 56747
56823: POP
56824: POP
// end ;
56825: LD_VAR 0 3
56829: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56830: LD_INT 0
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
// result := [ ] ;
56839: LD_ADDR_VAR 0 4
56843: PUSH
56844: EMPTY
56845: ST_TO_ADDR
// if x - r < 0 then
56846: LD_VAR 0 1
56850: PUSH
56851: LD_VAR 0 3
56855: MINUS
56856: PUSH
56857: LD_INT 0
56859: LESS
56860: IFFALSE 56872
// min_x := 0 else
56862: LD_ADDR_VAR 0 8
56866: PUSH
56867: LD_INT 0
56869: ST_TO_ADDR
56870: GO 56888
// min_x := x - r ;
56872: LD_ADDR_VAR 0 8
56876: PUSH
56877: LD_VAR 0 1
56881: PUSH
56882: LD_VAR 0 3
56886: MINUS
56887: ST_TO_ADDR
// if y - r < 0 then
56888: LD_VAR 0 2
56892: PUSH
56893: LD_VAR 0 3
56897: MINUS
56898: PUSH
56899: LD_INT 0
56901: LESS
56902: IFFALSE 56914
// min_y := 0 else
56904: LD_ADDR_VAR 0 7
56908: PUSH
56909: LD_INT 0
56911: ST_TO_ADDR
56912: GO 56930
// min_y := y - r ;
56914: LD_ADDR_VAR 0 7
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_VAR 0 3
56928: MINUS
56929: ST_TO_ADDR
// max_x := x + r ;
56930: LD_ADDR_VAR 0 9
56934: PUSH
56935: LD_VAR 0 1
56939: PUSH
56940: LD_VAR 0 3
56944: PLUS
56945: ST_TO_ADDR
// max_y := y + r ;
56946: LD_ADDR_VAR 0 10
56950: PUSH
56951: LD_VAR 0 2
56955: PUSH
56956: LD_VAR 0 3
56960: PLUS
56961: ST_TO_ADDR
// for _x = min_x to max_x do
56962: LD_ADDR_VAR 0 5
56966: PUSH
56967: DOUBLE
56968: LD_VAR 0 8
56972: DEC
56973: ST_TO_ADDR
56974: LD_VAR 0 9
56978: PUSH
56979: FOR_TO
56980: IFFALSE 57081
// for _y = min_y to max_y do
56982: LD_ADDR_VAR 0 6
56986: PUSH
56987: DOUBLE
56988: LD_VAR 0 7
56992: DEC
56993: ST_TO_ADDR
56994: LD_VAR 0 10
56998: PUSH
56999: FOR_TO
57000: IFFALSE 57077
// begin if not ValidHex ( _x , _y ) then
57002: LD_VAR 0 5
57006: PPUSH
57007: LD_VAR 0 6
57011: PPUSH
57012: CALL_OW 488
57016: NOT
57017: IFFALSE 57021
// continue ;
57019: GO 56999
// if GetResourceTypeXY ( _x , _y ) then
57021: LD_VAR 0 5
57025: PPUSH
57026: LD_VAR 0 6
57030: PPUSH
57031: CALL_OW 283
57035: IFFALSE 57075
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57037: LD_ADDR_VAR 0 4
57041: PUSH
57042: LD_VAR 0 4
57046: PPUSH
57047: LD_VAR 0 4
57051: PUSH
57052: LD_INT 1
57054: PLUS
57055: PPUSH
57056: LD_VAR 0 5
57060: PUSH
57061: LD_VAR 0 6
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PPUSH
57070: CALL_OW 1
57074: ST_TO_ADDR
// end ;
57075: GO 56999
57077: POP
57078: POP
57079: GO 56979
57081: POP
57082: POP
// end ;
57083: LD_VAR 0 4
57087: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57088: LD_INT 0
57090: PPUSH
57091: PPUSH
57092: PPUSH
57093: PPUSH
57094: PPUSH
57095: PPUSH
57096: PPUSH
57097: PPUSH
// if not units then
57098: LD_VAR 0 1
57102: NOT
57103: IFFALSE 57107
// exit ;
57105: GO 57639
// result := UnitFilter ( units , [ f_ok ] ) ;
57107: LD_ADDR_VAR 0 3
57111: PUSH
57112: LD_VAR 0 1
57116: PPUSH
57117: LD_INT 50
57119: PUSH
57120: EMPTY
57121: LIST
57122: PPUSH
57123: CALL_OW 72
57127: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57128: LD_ADDR_VAR 0 8
57132: PUSH
57133: LD_VAR 0 1
57137: PUSH
57138: LD_INT 1
57140: ARRAY
57141: PPUSH
57142: CALL_OW 255
57146: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57147: LD_ADDR_VAR 0 10
57151: PUSH
57152: LD_INT 29
57154: PUSH
57155: LD_INT 91
57157: PUSH
57158: LD_INT 49
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// if not result then
57166: LD_VAR 0 3
57170: NOT
57171: IFFALSE 57175
// exit ;
57173: GO 57639
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57175: LD_ADDR_VAR 0 5
57179: PUSH
57180: LD_INT 81
57182: PUSH
57183: LD_VAR 0 8
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PPUSH
57192: CALL_OW 69
57196: ST_TO_ADDR
// for i in result do
57197: LD_ADDR_VAR 0 4
57201: PUSH
57202: LD_VAR 0 3
57206: PUSH
57207: FOR_IN
57208: IFFALSE 57637
// begin tag := GetTag ( i ) + 1 ;
57210: LD_ADDR_VAR 0 9
57214: PUSH
57215: LD_VAR 0 4
57219: PPUSH
57220: CALL_OW 110
57224: PUSH
57225: LD_INT 1
57227: PLUS
57228: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57229: LD_ADDR_VAR 0 7
57233: PUSH
57234: LD_VAR 0 4
57238: PPUSH
57239: CALL_OW 250
57243: PPUSH
57244: LD_VAR 0 4
57248: PPUSH
57249: CALL_OW 251
57253: PPUSH
57254: LD_INT 4
57256: PPUSH
57257: CALL 56830 0 3
57261: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57262: LD_VAR 0 4
57266: PPUSH
57267: CALL_OW 247
57271: PUSH
57272: LD_INT 2
57274: EQUAL
57275: IFFALSE 57287
57277: PUSH
57278: LD_VAR 0 7
57282: PUSH
57283: LD_INT 2
57285: GREATER
57286: AND
57287: IFFALSE 57307
57289: PUSH
57290: LD_VAR 0 4
57294: PPUSH
57295: CALL_OW 264
57299: PUSH
57300: LD_VAR 0 10
57304: IN
57305: NOT
57306: AND
57307: IFFALSE 57346
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57309: LD_VAR 0 4
57313: PPUSH
57314: LD_VAR 0 7
57318: PUSH
57319: LD_INT 1
57321: ARRAY
57322: PUSH
57323: LD_INT 1
57325: ARRAY
57326: PPUSH
57327: LD_VAR 0 7
57331: PUSH
57332: LD_INT 1
57334: ARRAY
57335: PUSH
57336: LD_INT 2
57338: ARRAY
57339: PPUSH
57340: CALL_OW 116
57344: GO 57635
// if path > tag then
57346: LD_VAR 0 2
57350: PUSH
57351: LD_VAR 0 9
57355: GREATER
57356: IFFALSE 57564
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57358: LD_ADDR_VAR 0 6
57362: PUSH
57363: LD_VAR 0 5
57367: PPUSH
57368: LD_INT 91
57370: PUSH
57371: LD_VAR 0 4
57375: PUSH
57376: LD_INT 8
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: LIST
57383: PPUSH
57384: CALL_OW 72
57388: ST_TO_ADDR
// if nearEnemy then
57389: LD_VAR 0 6
57393: IFFALSE 57462
// begin if GetWeapon ( i ) = ru_time_lapser then
57395: LD_VAR 0 4
57399: PPUSH
57400: CALL_OW 264
57404: PUSH
57405: LD_INT 49
57407: EQUAL
57408: IFFALSE 57436
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57410: LD_VAR 0 4
57414: PPUSH
57415: LD_VAR 0 6
57419: PPUSH
57420: LD_VAR 0 4
57424: PPUSH
57425: CALL_OW 74
57429: PPUSH
57430: CALL_OW 112
57434: GO 57460
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57436: LD_VAR 0 4
57440: PPUSH
57441: LD_VAR 0 6
57445: PPUSH
57446: LD_VAR 0 4
57450: PPUSH
57451: CALL_OW 74
57455: PPUSH
57456: CALL 58720 0 2
// end else
57460: GO 57562
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57462: LD_VAR 0 4
57466: PPUSH
57467: LD_VAR 0 2
57471: PUSH
57472: LD_VAR 0 9
57476: ARRAY
57477: PUSH
57478: LD_INT 1
57480: ARRAY
57481: PPUSH
57482: LD_VAR 0 2
57486: PUSH
57487: LD_VAR 0 9
57491: ARRAY
57492: PUSH
57493: LD_INT 2
57495: ARRAY
57496: PPUSH
57497: CALL_OW 297
57501: PUSH
57502: LD_INT 6
57504: GREATER
57505: IFFALSE 57548
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57507: LD_VAR 0 4
57511: PPUSH
57512: LD_VAR 0 2
57516: PUSH
57517: LD_VAR 0 9
57521: ARRAY
57522: PUSH
57523: LD_INT 1
57525: ARRAY
57526: PPUSH
57527: LD_VAR 0 2
57531: PUSH
57532: LD_VAR 0 9
57536: ARRAY
57537: PUSH
57538: LD_INT 2
57540: ARRAY
57541: PPUSH
57542: CALL_OW 114
57546: GO 57562
// SetTag ( i , tag ) ;
57548: LD_VAR 0 4
57552: PPUSH
57553: LD_VAR 0 9
57557: PPUSH
57558: CALL_OW 109
// end else
57562: GO 57635
// if enemy then
57564: LD_VAR 0 5
57568: IFFALSE 57635
// begin if GetWeapon ( i ) = ru_time_lapser then
57570: LD_VAR 0 4
57574: PPUSH
57575: CALL_OW 264
57579: PUSH
57580: LD_INT 49
57582: EQUAL
57583: IFFALSE 57611
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57585: LD_VAR 0 4
57589: PPUSH
57590: LD_VAR 0 5
57594: PPUSH
57595: LD_VAR 0 4
57599: PPUSH
57600: CALL_OW 74
57604: PPUSH
57605: CALL_OW 112
57609: GO 57635
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57611: LD_VAR 0 4
57615: PPUSH
57616: LD_VAR 0 5
57620: PPUSH
57621: LD_VAR 0 4
57625: PPUSH
57626: CALL_OW 74
57630: PPUSH
57631: CALL 58720 0 2
// end ; end ;
57635: GO 57207
57637: POP
57638: POP
// end ;
57639: LD_VAR 0 3
57643: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57644: LD_INT 0
57646: PPUSH
57647: PPUSH
57648: PPUSH
// if not unit or IsInUnit ( unit ) then
57649: LD_VAR 0 1
57653: NOT
57654: IFTRUE 57667
57656: PUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: CALL_OW 310
57666: OR
57667: IFFALSE 57671
// exit ;
57669: GO 57762
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57671: LD_ADDR_VAR 0 4
57675: PUSH
57676: LD_VAR 0 1
57680: PPUSH
57681: CALL_OW 250
57685: PPUSH
57686: LD_VAR 0 2
57690: PPUSH
57691: LD_INT 1
57693: PPUSH
57694: CALL_OW 272
57698: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57699: LD_ADDR_VAR 0 5
57703: PUSH
57704: LD_VAR 0 1
57708: PPUSH
57709: CALL_OW 251
57713: PPUSH
57714: LD_VAR 0 2
57718: PPUSH
57719: LD_INT 1
57721: PPUSH
57722: CALL_OW 273
57726: ST_TO_ADDR
// if ValidHex ( x , y ) then
57727: LD_VAR 0 4
57731: PPUSH
57732: LD_VAR 0 5
57736: PPUSH
57737: CALL_OW 488
57741: IFFALSE 57762
// ComTurnXY ( unit , x , y ) ;
57743: LD_VAR 0 1
57747: PPUSH
57748: LD_VAR 0 4
57752: PPUSH
57753: LD_VAR 0 5
57757: PPUSH
57758: CALL_OW 118
// end ;
57762: LD_VAR 0 3
57766: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57767: LD_INT 0
57769: PPUSH
57770: PPUSH
// result := false ;
57771: LD_ADDR_VAR 0 3
57775: PUSH
57776: LD_INT 0
57778: ST_TO_ADDR
// if not units then
57779: LD_VAR 0 2
57783: NOT
57784: IFFALSE 57788
// exit ;
57786: GO 57833
// for i in units do
57788: LD_ADDR_VAR 0 4
57792: PUSH
57793: LD_VAR 0 2
57797: PUSH
57798: FOR_IN
57799: IFFALSE 57831
// if See ( side , i ) then
57801: LD_VAR 0 1
57805: PPUSH
57806: LD_VAR 0 4
57810: PPUSH
57811: CALL_OW 292
57815: IFFALSE 57829
// begin result := true ;
57817: LD_ADDR_VAR 0 3
57821: PUSH
57822: LD_INT 1
57824: ST_TO_ADDR
// exit ;
57825: POP
57826: POP
57827: GO 57833
// end ;
57829: GO 57798
57831: POP
57832: POP
// end ;
57833: LD_VAR 0 3
57837: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
// if not unit or not points then
57844: LD_VAR 0 1
57848: NOT
57849: IFTRUE 57858
57851: PUSH
57852: LD_VAR 0 2
57856: NOT
57857: OR
57858: IFFALSE 57862
// exit ;
57860: GO 57952
// dist := 99999 ;
57862: LD_ADDR_VAR 0 5
57866: PUSH
57867: LD_INT 99999
57869: ST_TO_ADDR
// for i in points do
57870: LD_ADDR_VAR 0 4
57874: PUSH
57875: LD_VAR 0 2
57879: PUSH
57880: FOR_IN
57881: IFFALSE 57950
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57883: LD_ADDR_VAR 0 6
57887: PUSH
57888: LD_VAR 0 1
57892: PPUSH
57893: LD_VAR 0 4
57897: PUSH
57898: LD_INT 1
57900: ARRAY
57901: PPUSH
57902: LD_VAR 0 4
57906: PUSH
57907: LD_INT 2
57909: ARRAY
57910: PPUSH
57911: CALL_OW 297
57915: ST_TO_ADDR
// if tmpDist < dist then
57916: LD_VAR 0 6
57920: PUSH
57921: LD_VAR 0 5
57925: LESS
57926: IFFALSE 57948
// begin result := i ;
57928: LD_ADDR_VAR 0 3
57932: PUSH
57933: LD_VAR 0 4
57937: ST_TO_ADDR
// dist := tmpDist ;
57938: LD_ADDR_VAR 0 5
57942: PUSH
57943: LD_VAR 0 6
57947: ST_TO_ADDR
// end ; end ;
57948: GO 57880
57950: POP
57951: POP
// end ;
57952: LD_VAR 0 3
57956: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57957: LD_INT 0
57959: PPUSH
// uc_side := side ;
57960: LD_ADDR_OWVAR 20
57964: PUSH
57965: LD_VAR 0 1
57969: ST_TO_ADDR
// uc_nation := 3 ;
57970: LD_ADDR_OWVAR 21
57974: PUSH
57975: LD_INT 3
57977: ST_TO_ADDR
// vc_chassis := 25 ;
57978: LD_ADDR_OWVAR 37
57982: PUSH
57983: LD_INT 25
57985: ST_TO_ADDR
// vc_engine := engine_siberite ;
57986: LD_ADDR_OWVAR 39
57990: PUSH
57991: LD_INT 3
57993: ST_TO_ADDR
// vc_control := control_computer ;
57994: LD_ADDR_OWVAR 38
57998: PUSH
57999: LD_INT 3
58001: ST_TO_ADDR
// vc_weapon := 59 ;
58002: LD_ADDR_OWVAR 40
58006: PUSH
58007: LD_INT 59
58009: ST_TO_ADDR
// result := CreateVehicle ;
58010: LD_ADDR_VAR 0 5
58014: PUSH
58015: CALL_OW 45
58019: ST_TO_ADDR
// SetDir ( result , d ) ;
58020: LD_VAR 0 5
58024: PPUSH
58025: LD_VAR 0 4
58029: PPUSH
58030: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58034: LD_VAR 0 5
58038: PPUSH
58039: LD_VAR 0 2
58043: PPUSH
58044: LD_VAR 0 3
58048: PPUSH
58049: LD_INT 0
58051: PPUSH
58052: CALL_OW 48
// end ;
58056: LD_VAR 0 5
58060: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58061: LD_INT 0
58063: PPUSH
58064: PPUSH
58065: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58066: LD_ADDR_VAR 0 2
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58089: LD_VAR 0 1
58093: NOT
58094: IFTRUE 58127
58096: PUSH
58097: LD_VAR 0 1
58101: PPUSH
58102: CALL_OW 264
58106: PUSH
58107: LD_INT 12
58109: PUSH
58110: LD_INT 51
58112: PUSH
58113: LD_INT 32
58115: PUSH
58116: LD_INT 89
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: IN
58125: NOT
58126: OR
58127: IFFALSE 58131
// exit ;
58129: GO 58229
// for i := 1 to 3 do
58131: LD_ADDR_VAR 0 3
58135: PUSH
58136: DOUBLE
58137: LD_INT 1
58139: DEC
58140: ST_TO_ADDR
58141: LD_INT 3
58143: PUSH
58144: FOR_TO
58145: IFFALSE 58227
// begin tmp := GetCargo ( cargo , i ) ;
58147: LD_ADDR_VAR 0 4
58151: PUSH
58152: LD_VAR 0 1
58156: PPUSH
58157: LD_VAR 0 3
58161: PPUSH
58162: CALL_OW 289
58166: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58167: LD_ADDR_VAR 0 2
58171: PUSH
58172: LD_VAR 0 2
58176: PPUSH
58177: LD_VAR 0 3
58181: PPUSH
58182: LD_VAR 0 4
58186: PPUSH
58187: CALL_OW 1
58191: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58192: LD_ADDR_VAR 0 2
58196: PUSH
58197: LD_VAR 0 2
58201: PPUSH
58202: LD_INT 4
58204: PPUSH
58205: LD_VAR 0 2
58209: PUSH
58210: LD_INT 4
58212: ARRAY
58213: PUSH
58214: LD_VAR 0 4
58218: PLUS
58219: PPUSH
58220: CALL_OW 1
58224: ST_TO_ADDR
// end ;
58225: GO 58144
58227: POP
58228: POP
// end ;
58229: LD_VAR 0 2
58233: RET
// export function Length ( array ) ; begin
58234: LD_INT 0
58236: PPUSH
// result := array + 0 ;
58237: LD_ADDR_VAR 0 2
58241: PUSH
58242: LD_VAR 0 1
58246: PUSH
58247: LD_INT 0
58249: PLUS
58250: ST_TO_ADDR
// end ;
58251: LD_VAR 0 2
58255: RET
// export function PrepareArray ( array ) ; begin
58256: LD_INT 0
58258: PPUSH
// result := array diff 0 ;
58259: LD_ADDR_VAR 0 2
58263: PUSH
58264: LD_VAR 0 1
58268: PUSH
58269: LD_INT 0
58271: DIFF
58272: ST_TO_ADDR
// if not result [ 1 ] then
58273: LD_VAR 0 2
58277: PUSH
58278: LD_INT 1
58280: ARRAY
58281: NOT
58282: IFFALSE 58302
// result := Delete ( result , 1 ) ;
58284: LD_ADDR_VAR 0 2
58288: PUSH
58289: LD_VAR 0 2
58293: PPUSH
58294: LD_INT 1
58296: PPUSH
58297: CALL_OW 3
58301: ST_TO_ADDR
// end ;
58302: LD_VAR 0 2
58306: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58307: LD_INT 0
58309: PPUSH
58310: PPUSH
58311: PPUSH
58312: PPUSH
// sibRocketRange := 25 ;
58313: LD_ADDR_VAR 0 6
58317: PUSH
58318: LD_INT 25
58320: ST_TO_ADDR
// result := false ;
58321: LD_ADDR_VAR 0 4
58325: PUSH
58326: LD_INT 0
58328: ST_TO_ADDR
// for i := 0 to 5 do
58329: LD_ADDR_VAR 0 5
58333: PUSH
58334: DOUBLE
58335: LD_INT 0
58337: DEC
58338: ST_TO_ADDR
58339: LD_INT 5
58341: PUSH
58342: FOR_TO
58343: IFFALSE 58410
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58345: LD_VAR 0 1
58349: PPUSH
58350: LD_VAR 0 5
58354: PPUSH
58355: LD_VAR 0 6
58359: PPUSH
58360: CALL_OW 272
58364: PPUSH
58365: LD_VAR 0 2
58369: PPUSH
58370: LD_VAR 0 5
58374: PPUSH
58375: LD_VAR 0 6
58379: PPUSH
58380: CALL_OW 273
58384: PPUSH
58385: LD_VAR 0 3
58389: PPUSH
58390: CALL_OW 309
58394: IFFALSE 58408
// begin result := true ;
58396: LD_ADDR_VAR 0 4
58400: PUSH
58401: LD_INT 1
58403: ST_TO_ADDR
// exit ;
58404: POP
58405: POP
58406: GO 58412
// end ;
58408: GO 58342
58410: POP
58411: POP
// end ;
58412: LD_VAR 0 4
58416: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58417: LD_INT 0
58419: PPUSH
58420: PPUSH
58421: PPUSH
// if btype = b_depot then
58422: LD_VAR 0 2
58426: PUSH
58427: LD_INT 0
58429: EQUAL
58430: IFFALSE 58442
// begin result := true ;
58432: LD_ADDR_VAR 0 3
58436: PUSH
58437: LD_INT 1
58439: ST_TO_ADDR
// exit ;
58440: GO 58562
// end ; pom := GetBase ( depot ) ;
58442: LD_ADDR_VAR 0 4
58446: PUSH
58447: LD_VAR 0 1
58451: PPUSH
58452: CALL_OW 274
58456: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58457: LD_ADDR_VAR 0 5
58461: PUSH
58462: LD_VAR 0 2
58466: PPUSH
58467: LD_VAR 0 1
58471: PPUSH
58472: CALL_OW 248
58476: PPUSH
58477: CALL_OW 450
58481: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58482: LD_ADDR_VAR 0 3
58486: PUSH
58487: LD_VAR 0 4
58491: PPUSH
58492: LD_INT 1
58494: PPUSH
58495: CALL_OW 275
58499: PUSH
58500: LD_VAR 0 5
58504: PUSH
58505: LD_INT 1
58507: ARRAY
58508: GREATEREQUAL
58509: IFFALSE 58535
58511: PUSH
58512: LD_VAR 0 4
58516: PPUSH
58517: LD_INT 2
58519: PPUSH
58520: CALL_OW 275
58524: PUSH
58525: LD_VAR 0 5
58529: PUSH
58530: LD_INT 2
58532: ARRAY
58533: GREATEREQUAL
58534: AND
58535: IFFALSE 58561
58537: PUSH
58538: LD_VAR 0 4
58542: PPUSH
58543: LD_INT 3
58545: PPUSH
58546: CALL_OW 275
58550: PUSH
58551: LD_VAR 0 5
58555: PUSH
58556: LD_INT 3
58558: ARRAY
58559: GREATEREQUAL
58560: AND
58561: ST_TO_ADDR
// end ;
58562: LD_VAR 0 3
58566: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58567: LD_INT 0
58569: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58570: LD_VAR 0 1
58574: PPUSH
58575: LD_VAR 0 2
58579: PPUSH
58580: LD_INT 0
58582: PPUSH
58583: LD_INT 0
58585: PPUSH
58586: LD_INT 1
58588: PPUSH
58589: LD_INT 0
58591: PPUSH
58592: CALL_OW 587
// end ;
58596: LD_VAR 0 3
58600: RET
// export function CenterOnNow ( unit ) ; begin
58601: LD_INT 0
58603: PPUSH
// result := IsInUnit ( unit ) ;
58604: LD_ADDR_VAR 0 2
58608: PUSH
58609: LD_VAR 0 1
58613: PPUSH
58614: CALL_OW 310
58618: ST_TO_ADDR
// if not result then
58619: LD_VAR 0 2
58623: NOT
58624: IFFALSE 58636
// result := unit ;
58626: LD_ADDR_VAR 0 2
58630: PUSH
58631: LD_VAR 0 1
58635: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58636: LD_VAR 0 1
58640: PPUSH
58641: CALL_OW 87
// end ;
58645: LD_VAR 0 2
58649: RET
// export function ComMoveHex ( unit , hex ) ; begin
58650: LD_INT 0
58652: PPUSH
// if not hex then
58653: LD_VAR 0 2
58657: NOT
58658: IFFALSE 58662
// exit ;
58660: GO 58715
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58662: LD_VAR 0 2
58666: PUSH
58667: LD_INT 1
58669: ARRAY
58670: PPUSH
58671: LD_VAR 0 2
58675: PUSH
58676: LD_INT 2
58678: ARRAY
58679: PPUSH
58680: CALL_OW 428
58684: IFFALSE 58688
// exit ;
58686: GO 58715
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58688: LD_VAR 0 1
58692: PPUSH
58693: LD_VAR 0 2
58697: PUSH
58698: LD_INT 1
58700: ARRAY
58701: PPUSH
58702: LD_VAR 0 2
58706: PUSH
58707: LD_INT 2
58709: ARRAY
58710: PPUSH
58711: CALL_OW 111
// end ;
58715: LD_VAR 0 3
58719: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58720: LD_INT 0
58722: PPUSH
58723: PPUSH
58724: PPUSH
// if not unit or not enemy then
58725: LD_VAR 0 1
58729: NOT
58730: IFTRUE 58739
58732: PUSH
58733: LD_VAR 0 2
58737: NOT
58738: OR
58739: IFFALSE 58743
// exit ;
58741: GO 58869
// x := GetX ( enemy ) ;
58743: LD_ADDR_VAR 0 4
58747: PUSH
58748: LD_VAR 0 2
58752: PPUSH
58753: CALL_OW 250
58757: ST_TO_ADDR
// y := GetY ( enemy ) ;
58758: LD_ADDR_VAR 0 5
58762: PUSH
58763: LD_VAR 0 2
58767: PPUSH
58768: CALL_OW 251
58772: ST_TO_ADDR
// if ValidHex ( x , y ) then
58773: LD_VAR 0 4
58777: PPUSH
58778: LD_VAR 0 5
58782: PPUSH
58783: CALL_OW 488
58787: IFFALSE 58869
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58789: LD_VAR 0 2
58793: PPUSH
58794: CALL_OW 247
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: IN
58809: IFTRUE 58832
58811: PUSH
58812: LD_VAR 0 1
58816: PPUSH
58817: CALL_OW 255
58821: PPUSH
58822: LD_VAR 0 2
58826: PPUSH
58827: CALL_OW 292
58831: OR
58832: IFFALSE 58850
// ComAttackUnit ( unit , enemy ) else
58834: LD_VAR 0 1
58838: PPUSH
58839: LD_VAR 0 2
58843: PPUSH
58844: CALL_OW 115
58848: GO 58869
// ComAgressiveMove ( unit , x , y ) ;
58850: LD_VAR 0 1
58854: PPUSH
58855: LD_VAR 0 4
58859: PPUSH
58860: LD_VAR 0 5
58864: PPUSH
58865: CALL_OW 114
// end ;
58869: LD_VAR 0 3
58873: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
58878: PPUSH
// list := AreaToList ( area , 0 ) ;
58879: LD_ADDR_VAR 0 5
58883: PUSH
58884: LD_VAR 0 1
58888: PPUSH
58889: LD_INT 0
58891: PPUSH
58892: CALL_OW 517
58896: ST_TO_ADDR
// if not list then
58897: LD_VAR 0 5
58901: NOT
58902: IFFALSE 58906
// exit ;
58904: GO 59036
// if all then
58906: LD_VAR 0 2
58910: IFFALSE 58998
// begin for i := 1 to list [ 1 ] do
58912: LD_ADDR_VAR 0 4
58916: PUSH
58917: DOUBLE
58918: LD_INT 1
58920: DEC
58921: ST_TO_ADDR
58922: LD_VAR 0 5
58926: PUSH
58927: LD_INT 1
58929: ARRAY
58930: PUSH
58931: FOR_TO
58932: IFFALSE 58994
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58934: LD_ADDR_VAR 0 3
58938: PUSH
58939: LD_VAR 0 3
58943: PPUSH
58944: LD_VAR 0 3
58948: PUSH
58949: LD_INT 1
58951: PLUS
58952: PPUSH
58953: LD_VAR 0 5
58957: PUSH
58958: LD_INT 1
58960: ARRAY
58961: PUSH
58962: LD_VAR 0 4
58966: ARRAY
58967: PUSH
58968: LD_VAR 0 5
58972: PUSH
58973: LD_INT 2
58975: ARRAY
58976: PUSH
58977: LD_VAR 0 4
58981: ARRAY
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PPUSH
58987: CALL_OW 1
58991: ST_TO_ADDR
58992: GO 58931
58994: POP
58995: POP
// exit ;
58996: GO 59036
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58998: LD_ADDR_VAR 0 3
59002: PUSH
59003: LD_VAR 0 5
59007: PUSH
59008: LD_INT 1
59010: ARRAY
59011: PUSH
59012: LD_INT 1
59014: ARRAY
59015: PUSH
59016: LD_VAR 0 5
59020: PUSH
59021: LD_INT 2
59023: ARRAY
59024: PUSH
59025: LD_INT 1
59027: ARRAY
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: ST_TO_ADDR
// end ;
59036: LD_VAR 0 3
59040: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59041: LD_INT 0
59043: PPUSH
59044: PPUSH
// list := AreaToList ( area , 0 ) ;
59045: LD_ADDR_VAR 0 4
59049: PUSH
59050: LD_VAR 0 1
59054: PPUSH
59055: LD_INT 0
59057: PPUSH
59058: CALL_OW 517
59062: ST_TO_ADDR
// if not list then
59063: LD_VAR 0 4
59067: NOT
59068: IFFALSE 59072
// exit ;
59070: GO 59113
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59072: LD_ADDR_VAR 0 3
59076: PUSH
59077: LD_VAR 0 4
59081: PUSH
59082: LD_INT 1
59084: ARRAY
59085: PUSH
59086: LD_INT 1
59088: ARRAY
59089: PUSH
59090: LD_VAR 0 4
59094: PUSH
59095: LD_INT 2
59097: ARRAY
59098: PUSH
59099: LD_INT 1
59101: ARRAY
59102: PUSH
59103: LD_VAR 0 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// end ;
59113: LD_VAR 0 3
59117: RET
// export function First ( array ) ; begin
59118: LD_INT 0
59120: PPUSH
// if not array then
59121: LD_VAR 0 1
59125: NOT
59126: IFFALSE 59130
// exit ;
59128: GO 59144
// result := array [ 1 ] ;
59130: LD_ADDR_VAR 0 2
59134: PUSH
59135: LD_VAR 0 1
59139: PUSH
59140: LD_INT 1
59142: ARRAY
59143: ST_TO_ADDR
// end ;
59144: LD_VAR 0 2
59148: RET
// export function Last ( array ) ; begin
59149: LD_INT 0
59151: PPUSH
// if not array then
59152: LD_VAR 0 1
59156: NOT
59157: IFFALSE 59161
// exit ;
59159: GO 59177
// result := array [ array ] ;
59161: LD_ADDR_VAR 0 2
59165: PUSH
59166: LD_VAR 0 1
59170: PUSH
59171: LD_VAR 0 1
59175: ARRAY
59176: ST_TO_ADDR
// end ;
59177: LD_VAR 0 2
59181: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59182: LD_INT 0
59184: PPUSH
59185: PPUSH
// result := [ ] ;
59186: LD_ADDR_VAR 0 5
59190: PUSH
59191: EMPTY
59192: ST_TO_ADDR
// if not array then
59193: LD_VAR 0 1
59197: NOT
59198: IFFALSE 59202
// exit ;
59200: GO 59314
// for i := 1 to array do
59202: LD_ADDR_VAR 0 6
59206: PUSH
59207: DOUBLE
59208: LD_INT 1
59210: DEC
59211: ST_TO_ADDR
59212: LD_VAR 0 1
59216: PUSH
59217: FOR_TO
59218: IFFALSE 59312
// if array [ i ] [ index ] = value then
59220: LD_VAR 0 1
59224: PUSH
59225: LD_VAR 0 6
59229: ARRAY
59230: PUSH
59231: LD_VAR 0 2
59235: ARRAY
59236: PUSH
59237: LD_VAR 0 3
59241: EQUAL
59242: IFFALSE 59310
// begin if indexColumn then
59244: LD_VAR 0 4
59248: IFFALSE 59284
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59250: LD_ADDR_VAR 0 5
59254: PUSH
59255: LD_VAR 0 5
59259: PPUSH
59260: LD_VAR 0 1
59264: PUSH
59265: LD_VAR 0 6
59269: ARRAY
59270: PUSH
59271: LD_VAR 0 4
59275: ARRAY
59276: PPUSH
59277: CALL 54322 0 2
59281: ST_TO_ADDR
59282: GO 59310
// result := Join ( result , array [ i ] ) ;
59284: LD_ADDR_VAR 0 5
59288: PUSH
59289: LD_VAR 0 5
59293: PPUSH
59294: LD_VAR 0 1
59298: PUSH
59299: LD_VAR 0 6
59303: ARRAY
59304: PPUSH
59305: CALL 54322 0 2
59309: ST_TO_ADDR
// end ;
59310: GO 59217
59312: POP
59313: POP
// end ;
59314: LD_VAR 0 5
59318: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59319: LD_INT 0
59321: PPUSH
// if not vehicles or not parkingPoint then
59322: LD_VAR 0 1
59326: NOT
59327: IFTRUE 59336
59329: PUSH
59330: LD_VAR 0 2
59334: NOT
59335: OR
59336: IFFALSE 59340
// exit ;
59338: GO 59438
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59340: LD_ADDR_VAR 0 1
59344: PUSH
59345: LD_VAR 0 1
59349: PPUSH
59350: LD_INT 50
59352: PUSH
59353: EMPTY
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: LD_INT 92
59361: PUSH
59362: LD_VAR 0 2
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PUSH
59371: LD_VAR 0 2
59375: PUSH
59376: LD_INT 2
59378: ARRAY
59379: PUSH
59380: LD_INT 8
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PPUSH
59397: CALL_OW 72
59401: ST_TO_ADDR
// if not vehicles then
59402: LD_VAR 0 1
59406: NOT
59407: IFFALSE 59411
// exit ;
59409: GO 59438
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_VAR 0 2
59420: PUSH
59421: LD_INT 1
59423: ARRAY
59424: PPUSH
59425: LD_VAR 0 2
59429: PUSH
59430: LD_INT 2
59432: ARRAY
59433: PPUSH
59434: CALL_OW 111
// end ;
59438: LD_VAR 0 3
59442: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59443: LD_INT 0
59445: PPUSH
59446: PPUSH
59447: PPUSH
// if not side or not area then
59448: LD_VAR 0 1
59452: NOT
59453: IFTRUE 59462
59455: PUSH
59456: LD_VAR 0 2
59460: NOT
59461: OR
59462: IFFALSE 59466
// exit ;
59464: GO 59585
// tmp := AreaToList ( area , 0 ) ;
59466: LD_ADDR_VAR 0 5
59470: PUSH
59471: LD_VAR 0 2
59475: PPUSH
59476: LD_INT 0
59478: PPUSH
59479: CALL_OW 517
59483: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59484: LD_ADDR_VAR 0 4
59488: PUSH
59489: DOUBLE
59490: LD_INT 1
59492: DEC
59493: ST_TO_ADDR
59494: LD_VAR 0 5
59498: PUSH
59499: LD_INT 1
59501: ARRAY
59502: PUSH
59503: FOR_TO
59504: IFFALSE 59583
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59506: LD_VAR 0 5
59510: PUSH
59511: LD_INT 1
59513: ARRAY
59514: PUSH
59515: LD_VAR 0 4
59519: ARRAY
59520: PPUSH
59521: LD_VAR 0 5
59525: PUSH
59526: LD_INT 2
59528: ARRAY
59529: PUSH
59530: LD_VAR 0 4
59534: ARRAY
59535: PPUSH
59536: CALL_OW 351
59540: IFFALSE 59581
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59542: LD_VAR 0 5
59546: PUSH
59547: LD_INT 1
59549: ARRAY
59550: PUSH
59551: LD_VAR 0 4
59555: ARRAY
59556: PPUSH
59557: LD_VAR 0 5
59561: PUSH
59562: LD_INT 2
59564: ARRAY
59565: PUSH
59566: LD_VAR 0 4
59570: ARRAY
59571: PPUSH
59572: LD_VAR 0 1
59576: PPUSH
59577: CALL_OW 244
// end ;
59581: GO 59503
59583: POP
59584: POP
// end ;
59585: LD_VAR 0 3
59589: RET
// export function UniqueArray ( array ) ; var i ; begin
59590: LD_INT 0
59592: PPUSH
59593: PPUSH
// result := [ ] ;
59594: LD_ADDR_VAR 0 2
59598: PUSH
59599: EMPTY
59600: ST_TO_ADDR
// if not array then
59601: LD_VAR 0 1
59605: NOT
59606: IFFALSE 59610
// exit ;
59608: GO 59671
// for i := 1 to array do
59610: LD_ADDR_VAR 0 3
59614: PUSH
59615: DOUBLE
59616: LD_INT 1
59618: DEC
59619: ST_TO_ADDR
59620: LD_VAR 0 1
59624: PUSH
59625: FOR_TO
59626: IFFALSE 59669
// if not array [ i ] in result then
59628: LD_VAR 0 1
59632: PUSH
59633: LD_VAR 0 3
59637: ARRAY
59638: PUSH
59639: LD_VAR 0 2
59643: IN
59644: NOT
59645: IFFALSE 59667
// result := Join ( result , i ) ;
59647: LD_ADDR_VAR 0 2
59651: PUSH
59652: LD_VAR 0 2
59656: PPUSH
59657: LD_VAR 0 3
59661: PPUSH
59662: CALL 54322 0 2
59666: ST_TO_ADDR
59667: GO 59625
59669: POP
59670: POP
// end ; end_of_file
59671: LD_VAR 0 2
59675: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59676: LD_VAR 0 1
59680: PPUSH
59681: LD_VAR 0 2
59685: PPUSH
59686: LD_VAR 0 3
59690: PPUSH
59691: LD_VAR 0 4
59695: PPUSH
59696: LD_VAR 0 5
59700: PPUSH
59701: LD_VAR 0 6
59705: PPUSH
59706: CALL 215 0 6
// end ;
59710: PPOPN 6
59712: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
59713: LD_INT 0
59715: PPUSH
// begin if not units then
59716: LD_VAR 0 1
59720: NOT
59721: IFFALSE 59725
// exit ;
59723: GO 59759
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
59725: LD_VAR 0 1
59729: PPUSH
59730: LD_VAR 0 2
59734: PPUSH
59735: LD_VAR 0 3
59739: PPUSH
59740: LD_VAR 0 4
59744: PPUSH
59745: LD_VAR 0 5
59749: PPUSH
59750: LD_VAR 0 6
59754: PPUSH
59755: CALL 66216 0 6
// end ;
59759: PPOPN 7
59761: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59762: CALL 95 0 0
// end ; end_of_file
59766: PPOPN 1
59768: END
// export function SOS_UnitDestroyed ( un ) ; begin
59769: LD_INT 0
59771: PPUSH
// ComRadiation ( un ) ;
59772: LD_VAR 0 1
59776: PPUSH
59777: CALL 60939 0 1
// end ;
59781: LD_VAR 0 2
59785: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59786: LD_INT 0
59788: PPUSH
// ComRadiation ( un ) ;
59789: LD_VAR 0 1
59793: PPUSH
59794: CALL 60939 0 1
// end ;
59798: LD_VAR 0 2
59802: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59803: LD_INT 0
59805: PPUSH
// end ;
59806: LD_VAR 0 4
59810: RET
// export function SOS_Command ( cmd ) ; begin
59811: LD_INT 0
59813: PPUSH
// end ;
59814: LD_VAR 0 2
59818: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59819: LD_INT 0
59821: PPUSH
// end ;
59822: LD_VAR 0 6
59826: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59827: LD_INT 0
59829: PPUSH
59830: PPUSH
59831: PPUSH
59832: PPUSH
59833: PPUSH
// if not vehicle or not factory then
59834: LD_VAR 0 1
59838: NOT
59839: IFTRUE 59848
59841: PUSH
59842: LD_VAR 0 2
59846: NOT
59847: OR
59848: IFFALSE 59852
// exit ;
59850: GO 60514
// weapon := GetWeapon ( vehicle ) ;
59852: LD_ADDR_VAR 0 7
59856: PUSH
59857: LD_VAR 0 1
59861: PPUSH
59862: CALL_OW 264
59866: ST_TO_ADDR
// if weapon = ar_miner then
59867: LD_VAR 0 7
59871: PUSH
59872: LD_INT 81
59874: EQUAL
59875: IFFALSE 59932
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59877: LD_ADDR_EXP 71
59881: PUSH
59882: LD_EXP 71
59886: PPUSH
59887: LD_EXP 71
59891: PUSH
59892: LD_INT 1
59894: PLUS
59895: PPUSH
59896: LD_VAR 0 1
59900: PPUSH
59901: CALL_OW 1
59905: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59906: LD_ADDR_EXP 72
59910: PUSH
59911: LD_EXP 72
59915: PPUSH
59916: LD_EXP 72
59920: PUSH
59921: LD_INT 1
59923: PLUS
59924: PPUSH
59925: EMPTY
59926: PPUSH
59927: CALL_OW 1
59931: ST_TO_ADDR
// end ; if not factoryWaypoints then
59932: LD_EXP 60
59936: NOT
59937: IFFALSE 59941
// exit ;
59939: GO 60514
// for i := 1 to Count ( factoryWaypoints ) do
59941: LD_ADDR_VAR 0 4
59945: PUSH
59946: DOUBLE
59947: LD_INT 1
59949: DEC
59950: ST_TO_ADDR
59951: LD_EXP 60
59955: PPUSH
59956: CALL 18346 0 1
59960: PUSH
59961: FOR_TO
59962: IFFALSE 60512
// if factoryWaypoints [ i ] [ 2 ] = factory then
59964: LD_EXP 60
59968: PUSH
59969: LD_VAR 0 4
59973: ARRAY
59974: PUSH
59975: LD_INT 2
59977: ARRAY
59978: PUSH
59979: LD_VAR 0 2
59983: EQUAL
59984: IFFALSE 60510
// begin if GetControl ( vehicle ) = control_manual then
59986: LD_VAR 0 1
59990: PPUSH
59991: CALL_OW 263
59995: PUSH
59996: LD_INT 1
59998: EQUAL
59999: IFFALSE 60363
// begin driver := IsDrivenBy ( vehicle ) ;
60001: LD_ADDR_VAR 0 5
60005: PUSH
60006: LD_VAR 0 1
60010: PPUSH
60011: CALL_OW 311
60015: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60016: LD_VAR 0 5
60020: PUSH
60021: LD_EXP 61
60025: IN
60026: IFTRUE 60040
60028: PUSH
60029: LD_VAR 0 1
60033: PUSH
60034: LD_EXP 61
60038: IN
60039: OR
60040: IFFALSE 60046
// exit ;
60042: POP
60043: POP
60044: GO 60514
// if not HasTask ( driver ) then
60046: LD_VAR 0 5
60050: PPUSH
60051: CALL_OW 314
60055: NOT
60056: IFFALSE 60361
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60058: LD_ADDR_EXP 61
60062: PUSH
60063: LD_EXP 61
60067: PPUSH
60068: LD_VAR 0 5
60072: PPUSH
60073: CALL 54322 0 2
60077: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60078: LD_ADDR_EXP 61
60082: PUSH
60083: LD_EXP 61
60087: PPUSH
60088: LD_VAR 0 1
60092: PPUSH
60093: CALL 54322 0 2
60097: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60098: LD_ADDR_VAR 0 6
60102: PUSH
60103: LD_EXP 60
60107: PUSH
60108: LD_VAR 0 4
60112: ARRAY
60113: PUSH
60114: LD_INT 3
60116: ARRAY
60117: PPUSH
60118: LD_EXP 60
60122: PUSH
60123: LD_VAR 0 4
60127: ARRAY
60128: PUSH
60129: LD_INT 4
60131: ARRAY
60132: PPUSH
60133: CALL_OW 428
60137: ST_TO_ADDR
// if hex then
60138: LD_VAR 0 6
60142: IFFALSE 60160
// ComMoveUnit ( driver , hex ) else
60144: LD_VAR 0 5
60148: PPUSH
60149: LD_VAR 0 6
60153: PPUSH
60154: CALL_OW 112
60158: GO 60244
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60160: LD_VAR 0 1
60164: PPUSH
60165: LD_EXP 60
60169: PUSH
60170: LD_VAR 0 4
60174: ARRAY
60175: PUSH
60176: LD_INT 3
60178: ARRAY
60179: PPUSH
60180: LD_EXP 60
60184: PUSH
60185: LD_VAR 0 4
60189: ARRAY
60190: PUSH
60191: LD_INT 4
60193: ARRAY
60194: PPUSH
60195: CALL_OW 297
60199: PUSH
60200: LD_INT 0
60202: GREATER
60203: IFFALSE 60244
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60205: LD_VAR 0 5
60209: PPUSH
60210: LD_EXP 60
60214: PUSH
60215: LD_VAR 0 4
60219: ARRAY
60220: PUSH
60221: LD_INT 3
60223: ARRAY
60224: PPUSH
60225: LD_EXP 60
60229: PUSH
60230: LD_VAR 0 4
60234: ARRAY
60235: PUSH
60236: LD_INT 4
60238: ARRAY
60239: PPUSH
60240: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60244: LD_VAR 0 5
60248: PPUSH
60249: CALL_OW 181
// if Multiplayer then
60253: LD_OWVAR 4
60257: IFFALSE 60306
// begin repeat wait ( 10 ) ;
60259: LD_INT 10
60261: PPUSH
60262: CALL_OW 67
// until not IsInUnit ( driver ) ;
60266: LD_VAR 0 5
60270: PPUSH
60271: CALL_OW 310
60275: NOT
60276: IFFALSE 60259
// if not HasTask ( driver ) then
60278: LD_VAR 0 5
60282: PPUSH
60283: CALL_OW 314
60287: NOT
60288: IFFALSE 60304
// ComEnterUnit ( driver , factory ) ;
60290: LD_VAR 0 5
60294: PPUSH
60295: LD_VAR 0 2
60299: PPUSH
60300: CALL_OW 120
// end else
60304: GO 60320
// AddComEnterUnit ( driver , factory ) ;
60306: LD_VAR 0 5
60310: PPUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: CALL_OW 180
// wait ( 0 0$1 ) ;
60320: LD_INT 35
60322: PPUSH
60323: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60327: LD_ADDR_EXP 61
60331: PUSH
60332: LD_EXP 61
60336: PUSH
60337: LD_VAR 0 5
60341: DIFF
60342: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60343: LD_ADDR_EXP 61
60347: PUSH
60348: LD_EXP 61
60352: PUSH
60353: LD_VAR 0 1
60357: DIFF
60358: ST_TO_ADDR
// break ;
60359: GO 60512
// end ; end else
60361: GO 60510
// if GetControl ( vehicle ) = control_remote then
60363: LD_VAR 0 1
60367: PPUSH
60368: CALL_OW 263
60372: PUSH
60373: LD_INT 2
60375: EQUAL
60376: IFFALSE 60462
// begin wait ( 0 0$2 ) ;
60378: LD_INT 70
60380: PPUSH
60381: CALL_OW 67
// repeat wait ( 10 ) ;
60385: LD_INT 10
60387: PPUSH
60388: CALL_OW 67
// Connect ( vehicle ) ;
60392: LD_VAR 0 1
60396: PPUSH
60397: CALL 24624 0 1
// until IsControledBy ( vehicle ) ;
60401: LD_VAR 0 1
60405: PPUSH
60406: CALL_OW 312
60410: IFFALSE 60385
// wait ( 10 ) ;
60412: LD_INT 10
60414: PPUSH
60415: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60419: LD_VAR 0 1
60423: PPUSH
60424: LD_EXP 60
60428: PUSH
60429: LD_VAR 0 4
60433: ARRAY
60434: PUSH
60435: LD_INT 3
60437: ARRAY
60438: PPUSH
60439: LD_EXP 60
60443: PUSH
60444: LD_VAR 0 4
60448: ARRAY
60449: PUSH
60450: LD_INT 4
60452: ARRAY
60453: PPUSH
60454: CALL_OW 111
// break ;
60458: GO 60512
// end else
60460: GO 60510
// begin wait ( 0 0$3 ) ;
60462: LD_INT 105
60464: PPUSH
60465: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60469: LD_VAR 0 1
60473: PPUSH
60474: LD_EXP 60
60478: PUSH
60479: LD_VAR 0 4
60483: ARRAY
60484: PUSH
60485: LD_INT 3
60487: ARRAY
60488: PPUSH
60489: LD_EXP 60
60493: PUSH
60494: LD_VAR 0 4
60498: ARRAY
60499: PUSH
60500: LD_INT 4
60502: ARRAY
60503: PPUSH
60504: CALL_OW 111
// break ;
60508: GO 60512
// end ; end ;
60510: GO 59961
60512: POP
60513: POP
// end ;
60514: LD_VAR 0 3
60518: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60519: LD_INT 0
60521: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60522: LD_VAR 0 1
60526: PUSH
60527: LD_INT 250
60529: EQUAL
60530: IFFALSE 60547
60532: PUSH
60533: LD_VAR 0 2
60537: PPUSH
60538: CALL_OW 264
60542: PUSH
60543: LD_INT 81
60545: EQUAL
60546: AND
60547: IFFALSE 60568
// MinerPlaceMine ( unit , x , y ) ;
60549: LD_VAR 0 2
60553: PPUSH
60554: LD_VAR 0 4
60558: PPUSH
60559: LD_VAR 0 5
60563: PPUSH
60564: CALL 63914 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60568: LD_VAR 0 1
60572: PUSH
60573: LD_INT 251
60575: EQUAL
60576: IFFALSE 60593
60578: PUSH
60579: LD_VAR 0 2
60583: PPUSH
60584: CALL_OW 264
60588: PUSH
60589: LD_INT 81
60591: EQUAL
60592: AND
60593: IFFALSE 60614
// MinerDetonateMine ( unit , x , y ) ;
60595: LD_VAR 0 2
60599: PPUSH
60600: LD_VAR 0 4
60604: PPUSH
60605: LD_VAR 0 5
60609: PPUSH
60610: CALL 64321 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60614: LD_VAR 0 1
60618: PUSH
60619: LD_INT 252
60621: EQUAL
60622: IFFALSE 60639
60624: PUSH
60625: LD_VAR 0 2
60629: PPUSH
60630: CALL_OW 264
60634: PUSH
60635: LD_INT 81
60637: EQUAL
60638: AND
60639: IFFALSE 60660
// MinerCreateMinefield ( unit , x , y ) ;
60641: LD_VAR 0 2
60645: PPUSH
60646: LD_VAR 0 4
60650: PPUSH
60651: LD_VAR 0 5
60655: PPUSH
60656: CALL 64553 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60660: LD_VAR 0 1
60664: PUSH
60665: LD_INT 253
60667: EQUAL
60668: IFFALSE 60685
60670: PUSH
60671: LD_VAR 0 2
60675: PPUSH
60676: CALL_OW 257
60680: PUSH
60681: LD_INT 5
60683: EQUAL
60684: AND
60685: IFFALSE 60706
// ComBinocular ( unit , x , y ) ;
60687: LD_VAR 0 2
60691: PPUSH
60692: LD_VAR 0 4
60696: PPUSH
60697: LD_VAR 0 5
60701: PPUSH
60702: CALL 64928 0 3
// if selectedUnit then
60706: LD_VAR 0 3
60710: IFFALSE 60770
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60712: LD_VAR 0 1
60716: PUSH
60717: LD_INT 254
60719: EQUAL
60720: IFFALSE 60737
60722: PUSH
60723: LD_VAR 0 2
60727: PPUSH
60728: CALL_OW 264
60732: PUSH
60733: LD_INT 99
60735: EQUAL
60736: AND
60737: IFFALSE 60754
60739: PUSH
60740: LD_VAR 0 3
60744: PPUSH
60745: CALL_OW 263
60749: PUSH
60750: LD_INT 3
60752: EQUAL
60753: AND
60754: IFFALSE 60770
// HackDestroyVehicle ( unit , selectedUnit ) ;
60756: LD_VAR 0 2
60760: PPUSH
60761: LD_VAR 0 3
60765: PPUSH
60766: CALL 63104 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60770: LD_VAR 0 1
60774: PUSH
60775: LD_INT 255
60777: EQUAL
60778: IFFALSE 60802
60780: PUSH
60781: LD_VAR 0 2
60785: PPUSH
60786: CALL_OW 264
60790: PUSH
60791: LD_INT 14
60793: PUSH
60794: LD_INT 53
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: IN
60801: AND
60802: IFFALSE 60820
60804: PUSH
60805: LD_VAR 0 4
60809: PPUSH
60810: LD_VAR 0 5
60814: PPUSH
60815: CALL_OW 488
60819: AND
60820: IFFALSE 60844
// CutTreeXYR ( unit , x , y , 12 ) ;
60822: LD_VAR 0 2
60826: PPUSH
60827: LD_VAR 0 4
60831: PPUSH
60832: LD_VAR 0 5
60836: PPUSH
60837: LD_INT 12
60839: PPUSH
60840: CALL 61035 0 4
// if cmd = 256 then
60844: LD_VAR 0 1
60848: PUSH
60849: LD_INT 256
60851: EQUAL
60852: IFFALSE 60873
// SetFactoryWaypoint ( unit , x , y ) ;
60854: LD_VAR 0 2
60858: PPUSH
60859: LD_VAR 0 4
60863: PPUSH
60864: LD_VAR 0 5
60868: PPUSH
60869: CALL 14667 0 3
// if cmd = 257 then
60873: LD_VAR 0 1
60877: PUSH
60878: LD_INT 257
60880: EQUAL
60881: IFFALSE 60902
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60883: LD_VAR 0 2
60887: PPUSH
60888: LD_VAR 0 4
60892: PPUSH
60893: LD_VAR 0 5
60897: PPUSH
60898: CALL 15163 0 3
// if cmd = 258 then
60902: LD_VAR 0 1
60906: PUSH
60907: LD_INT 258
60909: EQUAL
60910: IFFALSE 60934
// BurnTreeXYR ( unit , x , y , 8 ) ;
60912: LD_VAR 0 2
60916: PPUSH
60917: LD_VAR 0 4
60921: PPUSH
60922: LD_VAR 0 5
60926: PPUSH
60927: LD_INT 8
60929: PPUSH
60930: CALL 61457 0 4
// end ;
60934: LD_VAR 0 6
60938: RET
// export function ComRadiation ( un ) ; var eff ; begin
60939: LD_INT 0
60941: PPUSH
60942: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60943: LD_VAR 0 1
60947: PPUSH
60948: CALL_OW 264
60952: PUSH
60953: LD_INT 91
60955: NONEQUAL
60956: IFFALSE 60960
// exit ;
60958: GO 61030
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60960: LD_INT 68
60962: PPUSH
60963: LD_VAR 0 1
60967: PPUSH
60968: CALL_OW 255
60972: PPUSH
60973: CALL_OW 321
60977: PUSH
60978: LD_INT 2
60980: EQUAL
60981: IFFALSE 60993
// eff := 50 else
60983: LD_ADDR_VAR 0 3
60987: PUSH
60988: LD_INT 50
60990: ST_TO_ADDR
60991: GO 61001
// eff := 25 ;
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_INT 25
61000: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61001: LD_VAR 0 1
61005: PPUSH
61006: CALL_OW 250
61010: PPUSH
61011: LD_VAR 0 1
61015: PPUSH
61016: CALL_OW 251
61020: PPUSH
61021: LD_VAR 0 3
61025: PPUSH
61026: CALL_OW 495
// end ;
61030: LD_VAR 0 2
61034: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61035: LD_INT 0
61037: PPUSH
61038: PPUSH
61039: PPUSH
61040: PPUSH
61041: PPUSH
61042: PPUSH
61043: PPUSH
61044: PPUSH
61045: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61046: LD_VAR 0 1
61050: PPUSH
61051: CALL_OW 302
61055: NOT
61056: IFTRUE 61075
61058: PUSH
61059: LD_VAR 0 2
61063: PPUSH
61064: LD_VAR 0 3
61068: PPUSH
61069: CALL_OW 488
61073: NOT
61074: OR
61075: IFTRUE 61084
61077: PUSH
61078: LD_VAR 0 4
61082: NOT
61083: OR
61084: IFFALSE 61088
// exit ;
61086: GO 61452
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
61088: LD_VAR 0 1
61092: PPUSH
61093: CALL_OW 437
61097: PPUSH
61098: CALL 18346 0 1
61102: PUSH
61103: LD_INT 10
61105: GREATER
61106: IFFALSE 61110
// exit ;
61108: GO 61452
// list := [ ] ;
61110: LD_ADDR_VAR 0 13
61114: PUSH
61115: EMPTY
61116: ST_TO_ADDR
// if x - r < 0 then
61117: LD_VAR 0 2
61121: PUSH
61122: LD_VAR 0 4
61126: MINUS
61127: PUSH
61128: LD_INT 0
61130: LESS
61131: IFFALSE 61143
// min_x := 0 else
61133: LD_ADDR_VAR 0 7
61137: PUSH
61138: LD_INT 0
61140: ST_TO_ADDR
61141: GO 61159
// min_x := x - r ;
61143: LD_ADDR_VAR 0 7
61147: PUSH
61148: LD_VAR 0 2
61152: PUSH
61153: LD_VAR 0 4
61157: MINUS
61158: ST_TO_ADDR
// if y - r < 0 then
61159: LD_VAR 0 3
61163: PUSH
61164: LD_VAR 0 4
61168: MINUS
61169: PUSH
61170: LD_INT 0
61172: LESS
61173: IFFALSE 61185
// min_y := 0 else
61175: LD_ADDR_VAR 0 8
61179: PUSH
61180: LD_INT 0
61182: ST_TO_ADDR
61183: GO 61201
// min_y := y - r ;
61185: LD_ADDR_VAR 0 8
61189: PUSH
61190: LD_VAR 0 3
61194: PUSH
61195: LD_VAR 0 4
61199: MINUS
61200: ST_TO_ADDR
// max_x := x + r ;
61201: LD_ADDR_VAR 0 9
61205: PUSH
61206: LD_VAR 0 2
61210: PUSH
61211: LD_VAR 0 4
61215: PLUS
61216: ST_TO_ADDR
// max_y := y + r ;
61217: LD_ADDR_VAR 0 10
61221: PUSH
61222: LD_VAR 0 3
61226: PUSH
61227: LD_VAR 0 4
61231: PLUS
61232: ST_TO_ADDR
// for _x = min_x to max_x do
61233: LD_ADDR_VAR 0 11
61237: PUSH
61238: DOUBLE
61239: LD_VAR 0 7
61243: DEC
61244: ST_TO_ADDR
61245: LD_VAR 0 9
61249: PUSH
61250: FOR_TO
61251: IFFALSE 61370
// for _y = min_y to max_y do
61253: LD_ADDR_VAR 0 12
61257: PUSH
61258: DOUBLE
61259: LD_VAR 0 8
61263: DEC
61264: ST_TO_ADDR
61265: LD_VAR 0 10
61269: PUSH
61270: FOR_TO
61271: IFFALSE 61366
// begin if not ValidHex ( _x , _y ) then
61273: LD_VAR 0 11
61277: PPUSH
61278: LD_VAR 0 12
61282: PPUSH
61283: CALL_OW 488
61287: NOT
61288: IFFALSE 61292
// continue ;
61290: GO 61270
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61292: LD_VAR 0 11
61296: PPUSH
61297: LD_VAR 0 12
61301: PPUSH
61302: CALL_OW 351
61306: IFFALSE 61324
61308: PUSH
61309: LD_VAR 0 11
61313: PPUSH
61314: LD_VAR 0 12
61318: PPUSH
61319: CALL_OW 554
61323: AND
61324: IFFALSE 61364
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61326: LD_ADDR_VAR 0 13
61330: PUSH
61331: LD_VAR 0 13
61335: PPUSH
61336: LD_VAR 0 13
61340: PUSH
61341: LD_INT 1
61343: PLUS
61344: PPUSH
61345: LD_VAR 0 11
61349: PUSH
61350: LD_VAR 0 12
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PPUSH
61359: CALL_OW 2
61363: ST_TO_ADDR
// end ;
61364: GO 61270
61366: POP
61367: POP
61368: GO 61250
61370: POP
61371: POP
// if not list then
61372: LD_VAR 0 13
61376: NOT
61377: IFFALSE 61381
// exit ;
61379: GO 61452
// for i in list do
61381: LD_ADDR_VAR 0 6
61385: PUSH
61386: LD_VAR 0 13
61390: PUSH
61391: FOR_IN
61392: IFFALSE 61450
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61394: LD_VAR 0 1
61398: PPUSH
61399: LD_STRING M
61401: PUSH
61402: LD_VAR 0 6
61406: PUSH
61407: LD_INT 1
61409: ARRAY
61410: PUSH
61411: LD_VAR 0 6
61415: PUSH
61416: LD_INT 2
61418: ARRAY
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: PPUSH
61444: CALL_OW 447
61448: GO 61391
61450: POP
61451: POP
// end ;
61452: LD_VAR 0 5
61456: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61457: LD_INT 0
61459: PPUSH
61460: PPUSH
61461: PPUSH
61462: PPUSH
61463: PPUSH
61464: PPUSH
61465: PPUSH
61466: PPUSH
61467: PPUSH
61468: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61469: LD_VAR 0 1
61473: PPUSH
61474: CALL_OW 302
61478: NOT
61479: IFTRUE 61498
61481: PUSH
61482: LD_VAR 0 2
61486: PPUSH
61487: LD_VAR 0 3
61491: PPUSH
61492: CALL_OW 488
61496: NOT
61497: OR
61498: IFTRUE 61507
61500: PUSH
61501: LD_VAR 0 4
61505: NOT
61506: OR
61507: IFFALSE 61511
// exit ;
61509: GO 62050
// if Count ( GetTaskList ( flame ) ) > 10 then
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 437
61520: PPUSH
61521: CALL 18346 0 1
61525: PUSH
61526: LD_INT 10
61528: GREATER
61529: IFFALSE 61533
// exit ;
61531: GO 62050
// list := [ ] ;
61533: LD_ADDR_VAR 0 13
61537: PUSH
61538: EMPTY
61539: ST_TO_ADDR
// if x - r < 0 then
61540: LD_VAR 0 2
61544: PUSH
61545: LD_VAR 0 4
61549: MINUS
61550: PUSH
61551: LD_INT 0
61553: LESS
61554: IFFALSE 61566
// min_x := 0 else
61556: LD_ADDR_VAR 0 7
61560: PUSH
61561: LD_INT 0
61563: ST_TO_ADDR
61564: GO 61582
// min_x := x - r ;
61566: LD_ADDR_VAR 0 7
61570: PUSH
61571: LD_VAR 0 2
61575: PUSH
61576: LD_VAR 0 4
61580: MINUS
61581: ST_TO_ADDR
// if y - r < 0 then
61582: LD_VAR 0 3
61586: PUSH
61587: LD_VAR 0 4
61591: MINUS
61592: PUSH
61593: LD_INT 0
61595: LESS
61596: IFFALSE 61608
// min_y := 0 else
61598: LD_ADDR_VAR 0 8
61602: PUSH
61603: LD_INT 0
61605: ST_TO_ADDR
61606: GO 61624
// min_y := y - r ;
61608: LD_ADDR_VAR 0 8
61612: PUSH
61613: LD_VAR 0 3
61617: PUSH
61618: LD_VAR 0 4
61622: MINUS
61623: ST_TO_ADDR
// max_x := x + r ;
61624: LD_ADDR_VAR 0 9
61628: PUSH
61629: LD_VAR 0 2
61633: PUSH
61634: LD_VAR 0 4
61638: PLUS
61639: ST_TO_ADDR
// max_y := y + r ;
61640: LD_ADDR_VAR 0 10
61644: PUSH
61645: LD_VAR 0 3
61649: PUSH
61650: LD_VAR 0 4
61654: PLUS
61655: ST_TO_ADDR
// for _x = min_x to max_x do
61656: LD_ADDR_VAR 0 11
61660: PUSH
61661: DOUBLE
61662: LD_VAR 0 7
61666: DEC
61667: ST_TO_ADDR
61668: LD_VAR 0 9
61672: PUSH
61673: FOR_TO
61674: IFFALSE 61793
// for _y = min_y to max_y do
61676: LD_ADDR_VAR 0 12
61680: PUSH
61681: DOUBLE
61682: LD_VAR 0 8
61686: DEC
61687: ST_TO_ADDR
61688: LD_VAR 0 10
61692: PUSH
61693: FOR_TO
61694: IFFALSE 61789
// begin if not ValidHex ( _x , _y ) then
61696: LD_VAR 0 11
61700: PPUSH
61701: LD_VAR 0 12
61705: PPUSH
61706: CALL_OW 488
61710: NOT
61711: IFFALSE 61715
// continue ;
61713: GO 61693
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61715: LD_VAR 0 11
61719: PPUSH
61720: LD_VAR 0 12
61724: PPUSH
61725: CALL_OW 351
61729: IFFALSE 61747
61731: PUSH
61732: LD_VAR 0 11
61736: PPUSH
61737: LD_VAR 0 12
61741: PPUSH
61742: CALL_OW 554
61746: AND
61747: IFFALSE 61787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61749: LD_ADDR_VAR 0 13
61753: PUSH
61754: LD_VAR 0 13
61758: PPUSH
61759: LD_VAR 0 13
61763: PUSH
61764: LD_INT 1
61766: PLUS
61767: PPUSH
61768: LD_VAR 0 11
61772: PUSH
61773: LD_VAR 0 12
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PPUSH
61782: CALL_OW 2
61786: ST_TO_ADDR
// end ;
61787: GO 61693
61789: POP
61790: POP
61791: GO 61673
61793: POP
61794: POP
// if not list then
61795: LD_VAR 0 13
61799: NOT
61800: IFFALSE 61804
// exit ;
61802: GO 62050
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61804: LD_ADDR_VAR 0 13
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: LD_VAR 0 13
61818: PPUSH
61819: LD_INT 1
61821: PPUSH
61822: LD_INT 1
61824: PPUSH
61825: CALL 21752 0 4
61829: ST_TO_ADDR
// ComStop ( flame ) ;
61830: LD_VAR 0 1
61834: PPUSH
61835: CALL_OW 141
// for i in list do
61839: LD_ADDR_VAR 0 6
61843: PUSH
61844: LD_VAR 0 13
61848: PUSH
61849: FOR_IN
61850: IFFALSE 61881
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61852: LD_VAR 0 1
61856: PPUSH
61857: LD_VAR 0 6
61861: PUSH
61862: LD_INT 1
61864: ARRAY
61865: PPUSH
61866: LD_VAR 0 6
61870: PUSH
61871: LD_INT 2
61873: ARRAY
61874: PPUSH
61875: CALL_OW 176
61879: GO 61849
61881: POP
61882: POP
// repeat wait ( 0 0$1 ) ;
61883: LD_INT 35
61885: PPUSH
61886: CALL_OW 67
// task := GetTaskList ( flame ) ;
61890: LD_ADDR_VAR 0 14
61894: PUSH
61895: LD_VAR 0 1
61899: PPUSH
61900: CALL_OW 437
61904: ST_TO_ADDR
// if not task then
61905: LD_VAR 0 14
61909: NOT
61910: IFFALSE 61914
// exit ;
61912: GO 62050
// if task [ 1 ] [ 1 ] <> | then
61914: LD_VAR 0 14
61918: PUSH
61919: LD_INT 1
61921: ARRAY
61922: PUSH
61923: LD_INT 1
61925: ARRAY
61926: PUSH
61927: LD_STRING |
61929: NONEQUAL
61930: IFFALSE 61934
// exit ;
61932: GO 62050
// _x := task [ 1 ] [ 2 ] ;
61934: LD_ADDR_VAR 0 11
61938: PUSH
61939: LD_VAR 0 14
61943: PUSH
61944: LD_INT 1
61946: ARRAY
61947: PUSH
61948: LD_INT 2
61950: ARRAY
61951: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61952: LD_ADDR_VAR 0 12
61956: PUSH
61957: LD_VAR 0 14
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PUSH
61966: LD_INT 3
61968: ARRAY
61969: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61970: LD_VAR 0 11
61974: PPUSH
61975: LD_VAR 0 12
61979: PPUSH
61980: CALL_OW 351
61984: NOT
61985: IFTRUE 62004
61987: PUSH
61988: LD_VAR 0 11
61992: PPUSH
61993: LD_VAR 0 12
61997: PPUSH
61998: CALL_OW 554
62002: NOT
62003: OR
62004: IFFALSE 62038
// begin task := Delete ( task , 1 ) ;
62006: LD_ADDR_VAR 0 14
62010: PUSH
62011: LD_VAR 0 14
62015: PPUSH
62016: LD_INT 1
62018: PPUSH
62019: CALL_OW 3
62023: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62024: LD_VAR 0 1
62028: PPUSH
62029: LD_VAR 0 14
62033: PPUSH
62034: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62038: LD_VAR 0 1
62042: PPUSH
62043: CALL_OW 314
62047: NOT
62048: IFFALSE 61883
// end ;
62050: LD_VAR 0 5
62054: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62055: LD_EXP 64
62059: NOT
62060: IFFALSE 62110
62062: GO 62064
62064: DISABLE
// begin initHack := true ;
62065: LD_ADDR_EXP 64
62069: PUSH
62070: LD_INT 1
62072: ST_TO_ADDR
// hackTanks := [ ] ;
62073: LD_ADDR_EXP 65
62077: PUSH
62078: EMPTY
62079: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62080: LD_ADDR_EXP 66
62084: PUSH
62085: EMPTY
62086: ST_TO_ADDR
// hackLimit := 3 ;
62087: LD_ADDR_EXP 67
62091: PUSH
62092: LD_INT 3
62094: ST_TO_ADDR
// hackDist := 12 ;
62095: LD_ADDR_EXP 68
62099: PUSH
62100: LD_INT 12
62102: ST_TO_ADDR
// hackCounter := [ ] ;
62103: LD_ADDR_EXP 69
62107: PUSH
62108: EMPTY
62109: ST_TO_ADDR
// end ;
62110: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62111: LD_EXP 64
62115: IFFALSE 62133
62117: PUSH
62118: LD_INT 34
62120: PUSH
62121: LD_INT 99
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PPUSH
62128: CALL_OW 69
62132: AND
62133: IFFALSE 62386
62135: GO 62137
62137: DISABLE
62138: LD_INT 0
62140: PPUSH
62141: PPUSH
// begin enable ;
62142: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62143: LD_ADDR_VAR 0 1
62147: PUSH
62148: LD_INT 34
62150: PUSH
62151: LD_INT 99
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PPUSH
62158: CALL_OW 69
62162: PUSH
62163: FOR_IN
62164: IFFALSE 62384
// begin if not i in hackTanks then
62166: LD_VAR 0 1
62170: PUSH
62171: LD_EXP 65
62175: IN
62176: NOT
62177: IFFALSE 62260
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62179: LD_ADDR_EXP 65
62183: PUSH
62184: LD_EXP 65
62188: PPUSH
62189: LD_EXP 65
62193: PUSH
62194: LD_INT 1
62196: PLUS
62197: PPUSH
62198: LD_VAR 0 1
62202: PPUSH
62203: CALL_OW 1
62207: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62208: LD_ADDR_EXP 66
62212: PUSH
62213: LD_EXP 66
62217: PPUSH
62218: LD_EXP 66
62222: PUSH
62223: LD_INT 1
62225: PLUS
62226: PPUSH
62227: EMPTY
62228: PPUSH
62229: CALL_OW 1
62233: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62234: LD_ADDR_EXP 69
62238: PUSH
62239: LD_EXP 69
62243: PPUSH
62244: LD_EXP 69
62248: PUSH
62249: LD_INT 1
62251: PLUS
62252: PPUSH
62253: EMPTY
62254: PPUSH
62255: CALL_OW 1
62259: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62260: LD_VAR 0 1
62264: PPUSH
62265: CALL_OW 302
62269: NOT
62270: IFFALSE 62283
// begin HackUnlinkAll ( i ) ;
62272: LD_VAR 0 1
62276: PPUSH
62277: CALL 62389 0 1
// continue ;
62281: GO 62163
// end ; HackCheckCapturedStatus ( i ) ;
62283: LD_VAR 0 1
62287: PPUSH
62288: CALL 62834 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62292: LD_ADDR_VAR 0 2
62296: PUSH
62297: LD_INT 81
62299: PUSH
62300: LD_VAR 0 1
62304: PPUSH
62305: CALL_OW 255
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 33
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 91
62326: PUSH
62327: LD_VAR 0 1
62331: PUSH
62332: LD_EXP 68
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 50
62344: PUSH
62345: EMPTY
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: PPUSH
62354: CALL_OW 69
62358: ST_TO_ADDR
// if not tmp then
62359: LD_VAR 0 2
62363: NOT
62364: IFFALSE 62368
// continue ;
62366: GO 62163
// HackLink ( i , tmp ) ;
62368: LD_VAR 0 1
62372: PPUSH
62373: LD_VAR 0 2
62377: PPUSH
62378: CALL 62525 0 2
// end ;
62382: GO 62163
62384: POP
62385: POP
// end ;
62386: PPOPN 2
62388: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62389: LD_INT 0
62391: PPUSH
62392: PPUSH
62393: PPUSH
// if not hack in hackTanks then
62394: LD_VAR 0 1
62398: PUSH
62399: LD_EXP 65
62403: IN
62404: NOT
62405: IFFALSE 62409
// exit ;
62407: GO 62520
// index := GetElementIndex ( hackTanks , hack ) ;
62409: LD_ADDR_VAR 0 4
62413: PUSH
62414: LD_EXP 65
62418: PPUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: CALL 21047 0 2
62428: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62429: LD_EXP 66
62433: PUSH
62434: LD_VAR 0 4
62438: ARRAY
62439: IFFALSE 62520
// begin for i in hackTanksCaptured [ index ] do
62441: LD_ADDR_VAR 0 3
62445: PUSH
62446: LD_EXP 66
62450: PUSH
62451: LD_VAR 0 4
62455: ARRAY
62456: PUSH
62457: FOR_IN
62458: IFFALSE 62484
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62460: LD_VAR 0 3
62464: PUSH
62465: LD_INT 1
62467: ARRAY
62468: PPUSH
62469: LD_VAR 0 3
62473: PUSH
62474: LD_INT 2
62476: ARRAY
62477: PPUSH
62478: CALL_OW 235
62482: GO 62457
62484: POP
62485: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62486: LD_ADDR_EXP 66
62490: PUSH
62491: LD_EXP 66
62495: PPUSH
62496: LD_VAR 0 4
62500: PPUSH
62501: EMPTY
62502: PPUSH
62503: CALL_OW 1
62507: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62508: LD_VAR 0 1
62512: PPUSH
62513: LD_INT 0
62515: PPUSH
62516: CALL_OW 505
// end ; end ;
62520: LD_VAR 0 2
62524: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62525: LD_INT 0
62527: PPUSH
62528: PPUSH
62529: PPUSH
// if not hack in hackTanks or not vehicles then
62530: LD_VAR 0 1
62534: PUSH
62535: LD_EXP 65
62539: IN
62540: NOT
62541: IFTRUE 62550
62543: PUSH
62544: LD_VAR 0 2
62548: NOT
62549: OR
62550: IFFALSE 62554
// exit ;
62552: GO 62829
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_VAR 0 1
62563: PPUSH
62564: LD_VAR 0 2
62568: PPUSH
62569: LD_INT 1
62571: PPUSH
62572: LD_INT 1
62574: PPUSH
62575: CALL 21699 0 4
62579: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62580: LD_ADDR_VAR 0 5
62584: PUSH
62585: LD_EXP 65
62589: PPUSH
62590: LD_VAR 0 1
62594: PPUSH
62595: CALL 21047 0 2
62599: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62600: LD_EXP 66
62604: PUSH
62605: LD_VAR 0 5
62609: ARRAY
62610: PUSH
62611: LD_EXP 67
62615: LESS
62616: IFFALSE 62805
// begin for i := 1 to vehicles do
62618: LD_ADDR_VAR 0 4
62622: PUSH
62623: DOUBLE
62624: LD_INT 1
62626: DEC
62627: ST_TO_ADDR
62628: LD_VAR 0 2
62632: PUSH
62633: FOR_TO
62634: IFFALSE 62803
// begin if hackTanksCaptured [ index ] = hackLimit then
62636: LD_EXP 66
62640: PUSH
62641: LD_VAR 0 5
62645: ARRAY
62646: PUSH
62647: LD_EXP 67
62651: EQUAL
62652: IFFALSE 62656
// break ;
62654: GO 62803
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62656: LD_ADDR_EXP 69
62660: PUSH
62661: LD_EXP 69
62665: PPUSH
62666: LD_VAR 0 5
62670: PPUSH
62671: LD_EXP 69
62675: PUSH
62676: LD_VAR 0 5
62680: ARRAY
62681: PUSH
62682: LD_INT 1
62684: PLUS
62685: PPUSH
62686: CALL_OW 1
62690: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62691: LD_ADDR_EXP 66
62695: PUSH
62696: LD_EXP 66
62700: PPUSH
62701: LD_VAR 0 5
62705: PUSH
62706: LD_EXP 66
62710: PUSH
62711: LD_VAR 0 5
62715: ARRAY
62716: PUSH
62717: LD_INT 1
62719: PLUS
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PPUSH
62725: LD_VAR 0 2
62729: PUSH
62730: LD_VAR 0 4
62734: ARRAY
62735: PUSH
62736: LD_VAR 0 2
62740: PUSH
62741: LD_VAR 0 4
62745: ARRAY
62746: PPUSH
62747: CALL_OW 255
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PPUSH
62756: CALL 21264 0 3
62760: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62761: LD_VAR 0 2
62765: PUSH
62766: LD_VAR 0 4
62770: ARRAY
62771: PPUSH
62772: LD_VAR 0 1
62776: PPUSH
62777: CALL_OW 255
62781: PPUSH
62782: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62786: LD_VAR 0 2
62790: PUSH
62791: LD_VAR 0 4
62795: ARRAY
62796: PPUSH
62797: CALL_OW 141
// end ;
62801: GO 62633
62803: POP
62804: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62805: LD_VAR 0 1
62809: PPUSH
62810: LD_EXP 66
62814: PUSH
62815: LD_VAR 0 5
62819: ARRAY
62820: PUSH
62821: LD_INT 0
62823: PLUS
62824: PPUSH
62825: CALL_OW 505
// end ;
62829: LD_VAR 0 3
62833: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62834: LD_INT 0
62836: PPUSH
62837: PPUSH
62838: PPUSH
62839: PPUSH
// if not hack in hackTanks then
62840: LD_VAR 0 1
62844: PUSH
62845: LD_EXP 65
62849: IN
62850: NOT
62851: IFFALSE 62855
// exit ;
62853: GO 63099
// index := GetElementIndex ( hackTanks , hack ) ;
62855: LD_ADDR_VAR 0 4
62859: PUSH
62860: LD_EXP 65
62864: PPUSH
62865: LD_VAR 0 1
62869: PPUSH
62870: CALL 21047 0 2
62874: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62875: LD_ADDR_VAR 0 3
62879: PUSH
62880: DOUBLE
62881: LD_EXP 66
62885: PUSH
62886: LD_VAR 0 4
62890: ARRAY
62891: INC
62892: ST_TO_ADDR
62893: LD_INT 1
62895: PUSH
62896: FOR_DOWNTO
62897: IFFALSE 63073
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62899: LD_ADDR_VAR 0 5
62903: PUSH
62904: LD_EXP 66
62908: PUSH
62909: LD_VAR 0 4
62913: ARRAY
62914: PUSH
62915: LD_VAR 0 3
62919: ARRAY
62920: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62921: LD_VAR 0 5
62925: PUSH
62926: LD_INT 1
62928: ARRAY
62929: PPUSH
62930: CALL_OW 302
62934: NOT
62935: IFTRUE 62963
62937: PUSH
62938: LD_VAR 0 5
62942: PUSH
62943: LD_INT 1
62945: ARRAY
62946: PPUSH
62947: CALL_OW 255
62951: PUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 255
62961: NONEQUAL
62962: OR
62963: IFFALSE 63071
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62965: LD_VAR 0 5
62969: PUSH
62970: LD_INT 1
62972: ARRAY
62973: PPUSH
62974: CALL_OW 305
62978: IFFALSE 63006
62980: PUSH
62981: LD_VAR 0 5
62985: PUSH
62986: LD_INT 1
62988: ARRAY
62989: PPUSH
62990: CALL_OW 255
62994: PUSH
62995: LD_VAR 0 1
62999: PPUSH
63000: CALL_OW 255
63004: EQUAL
63005: AND
63006: IFFALSE 63030
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63008: LD_VAR 0 5
63012: PUSH
63013: LD_INT 1
63015: ARRAY
63016: PPUSH
63017: LD_VAR 0 5
63021: PUSH
63022: LD_INT 2
63024: ARRAY
63025: PPUSH
63026: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63030: LD_ADDR_EXP 66
63034: PUSH
63035: LD_EXP 66
63039: PPUSH
63040: LD_VAR 0 4
63044: PPUSH
63045: LD_EXP 66
63049: PUSH
63050: LD_VAR 0 4
63054: ARRAY
63055: PPUSH
63056: LD_VAR 0 3
63060: PPUSH
63061: CALL_OW 3
63065: PPUSH
63066: CALL_OW 1
63070: ST_TO_ADDR
// end ; end ;
63071: GO 62896
63073: POP
63074: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63075: LD_VAR 0 1
63079: PPUSH
63080: LD_EXP 66
63084: PUSH
63085: LD_VAR 0 4
63089: ARRAY
63090: PUSH
63091: LD_INT 0
63093: PLUS
63094: PPUSH
63095: CALL_OW 505
// end ;
63099: LD_VAR 0 2
63103: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63104: LD_INT 0
63106: PPUSH
63107: PPUSH
63108: PPUSH
63109: PPUSH
// if not hack in hackTanks then
63110: LD_VAR 0 1
63114: PUSH
63115: LD_EXP 65
63119: IN
63120: NOT
63121: IFFALSE 63125
// exit ;
63123: GO 63210
// index := GetElementIndex ( hackTanks , hack ) ;
63125: LD_ADDR_VAR 0 5
63129: PUSH
63130: LD_EXP 65
63134: PPUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL 21047 0 2
63144: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63145: LD_ADDR_VAR 0 4
63149: PUSH
63150: DOUBLE
63151: LD_INT 1
63153: DEC
63154: ST_TO_ADDR
63155: LD_EXP 66
63159: PUSH
63160: LD_VAR 0 5
63164: ARRAY
63165: PUSH
63166: FOR_TO
63167: IFFALSE 63208
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63169: LD_EXP 66
63173: PUSH
63174: LD_VAR 0 5
63178: ARRAY
63179: PUSH
63180: LD_VAR 0 4
63184: ARRAY
63185: PUSH
63186: LD_INT 1
63188: ARRAY
63189: PUSH
63190: LD_VAR 0 2
63194: EQUAL
63195: IFFALSE 63206
// KillUnit ( vehicle ) ;
63197: LD_VAR 0 2
63201: PPUSH
63202: CALL_OW 66
63206: GO 63166
63208: POP
63209: POP
// end ;
63210: LD_VAR 0 3
63214: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
63215: LD_EXP 70
63219: NOT
63220: IFFALSE 63353
63222: GO 63224
63224: DISABLE
63225: LD_INT 0
63227: PPUSH
// begin initMiner := true ;
63228: LD_ADDR_EXP 70
63232: PUSH
63233: LD_INT 1
63235: ST_TO_ADDR
// minersList := [ ] ;
63236: LD_ADDR_EXP 71
63240: PUSH
63241: EMPTY
63242: ST_TO_ADDR
// minerMinesList := [ ] ;
63243: LD_ADDR_EXP 72
63247: PUSH
63248: EMPTY
63249: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
63250: LD_ADDR_EXP 73
63254: PUSH
63255: LD_INT 10
63257: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63258: LD_ADDR_VAR 0 1
63262: PUSH
63263: LD_INT 34
63265: PUSH
63266: LD_INT 81
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PPUSH
63273: CALL_OW 69
63277: PUSH
63278: FOR_IN
63279: IFFALSE 63351
// begin if not i in minersList then
63281: LD_VAR 0 1
63285: PUSH
63286: LD_EXP 71
63290: IN
63291: NOT
63292: IFFALSE 63349
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63294: LD_ADDR_EXP 71
63298: PUSH
63299: LD_EXP 71
63303: PPUSH
63304: LD_EXP 71
63308: PUSH
63309: LD_INT 1
63311: PLUS
63312: PPUSH
63313: LD_VAR 0 1
63317: PPUSH
63318: CALL_OW 1
63322: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63323: LD_ADDR_EXP 72
63327: PUSH
63328: LD_EXP 72
63332: PPUSH
63333: LD_EXP 72
63337: PUSH
63338: LD_INT 1
63340: PLUS
63341: PPUSH
63342: EMPTY
63343: PPUSH
63344: CALL_OW 1
63348: ST_TO_ADDR
// end end ;
63349: GO 63278
63351: POP
63352: POP
// end ;
63353: PPOPN 1
63355: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
63356: LD_EXP 70
63360: IFFALSE 63391
63362: PUSH
63363: LD_EXP 72
63367: PPUSH
63368: CALL 18346 0 1
63372: IFTRUE 63390
63374: PUSH
63375: LD_INT 34
63377: PUSH
63378: LD_INT 81
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PPUSH
63385: CALL_OW 69
63389: OR
63390: AND
63391: IFFALSE 63911
63393: GO 63395
63395: DISABLE
63396: LD_INT 0
63398: PPUSH
63399: PPUSH
63400: PPUSH
63401: PPUSH
// begin enable ;
63402: ENABLE
// for i := minerMinesList downto 1 do
63403: LD_ADDR_VAR 0 1
63407: PUSH
63408: DOUBLE
63409: LD_EXP 72
63413: INC
63414: ST_TO_ADDR
63415: LD_INT 1
63417: PUSH
63418: FOR_DOWNTO
63419: IFFALSE 63909
// begin side := GetSide ( minersList [ i ] ) ;
63421: LD_ADDR_VAR 0 3
63425: PUSH
63426: LD_EXP 71
63430: PUSH
63431: LD_VAR 0 1
63435: ARRAY
63436: PPUSH
63437: CALL_OW 255
63441: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
63442: LD_EXP 71
63446: PUSH
63447: LD_VAR 0 1
63451: ARRAY
63452: PPUSH
63453: CALL_OW 300
63457: IFFALSE 63478
63459: PUSH
63460: LD_VAR 0 3
63464: PUSH
63465: LD_OWVAR 2
63469: PUSH
63470: LD_INT 9
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: IN
63477: AND
63478: IFFALSE 63511
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
63480: LD_EXP 71
63484: PUSH
63485: LD_VAR 0 1
63489: ARRAY
63490: PPUSH
63491: LD_EXP 72
63495: PUSH
63496: LD_VAR 0 1
63500: ARRAY
63501: PPUSH
63502: CALL 18346 0 1
63506: PPUSH
63507: CALL_OW 505
// if not minerMinesList [ i ] then
63511: LD_EXP 72
63515: PUSH
63516: LD_VAR 0 1
63520: ARRAY
63521: NOT
63522: IFFALSE 63526
// continue ;
63524: GO 63418
// for j := minerMinesList [ i ] downto 1 do
63526: LD_ADDR_VAR 0 2
63530: PUSH
63531: DOUBLE
63532: LD_EXP 72
63536: PUSH
63537: LD_VAR 0 1
63541: ARRAY
63542: INC
63543: ST_TO_ADDR
63544: LD_INT 1
63546: PUSH
63547: FOR_DOWNTO
63548: IFFALSE 63905
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63550: LD_EXP 71
63554: PUSH
63555: LD_VAR 0 1
63559: ARRAY
63560: PPUSH
63561: CALL_OW 301
63565: IFTRUE 63585
63567: PUSH
63568: LD_EXP 71
63572: PUSH
63573: LD_VAR 0 1
63577: ARRAY
63578: PPUSH
63579: CALL_OW 305
63583: NOT
63584: OR
63585: IFFALSE 63676
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63587: LD_EXP 72
63591: PUSH
63592: LD_VAR 0 1
63596: ARRAY
63597: PUSH
63598: LD_VAR 0 2
63602: ARRAY
63603: PUSH
63604: LD_INT 1
63606: ARRAY
63607: PPUSH
63608: LD_EXP 72
63612: PUSH
63613: LD_VAR 0 1
63617: ARRAY
63618: PUSH
63619: LD_VAR 0 2
63623: ARRAY
63624: PUSH
63625: LD_INT 2
63627: ARRAY
63628: PPUSH
63629: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63633: LD_ADDR_EXP 72
63637: PUSH
63638: LD_EXP 72
63642: PPUSH
63643: LD_VAR 0 1
63647: PPUSH
63648: LD_EXP 72
63652: PUSH
63653: LD_VAR 0 1
63657: ARRAY
63658: PPUSH
63659: LD_VAR 0 2
63663: PPUSH
63664: CALL_OW 3
63668: PPUSH
63669: CALL_OW 1
63673: ST_TO_ADDR
// continue ;
63674: GO 63547
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63676: LD_ADDR_VAR 0 4
63680: PUSH
63681: LD_EXP 72
63685: PUSH
63686: LD_VAR 0 1
63690: ARRAY
63691: PUSH
63692: LD_VAR 0 2
63696: ARRAY
63697: PUSH
63698: LD_INT 1
63700: ARRAY
63701: PPUSH
63702: LD_EXP 72
63706: PUSH
63707: LD_VAR 0 1
63711: ARRAY
63712: PUSH
63713: LD_VAR 0 2
63717: ARRAY
63718: PUSH
63719: LD_INT 2
63721: ARRAY
63722: PPUSH
63723: CALL_OW 428
63727: ST_TO_ADDR
// if not tmp then
63728: LD_VAR 0 4
63732: NOT
63733: IFFALSE 63737
// continue ;
63735: GO 63547
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63737: LD_VAR 0 4
63741: PUSH
63742: LD_INT 81
63744: PUSH
63745: LD_VAR 0 3
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PPUSH
63754: CALL_OW 69
63758: IN
63759: IFFALSE 63809
63761: PUSH
63762: LD_EXP 72
63766: PUSH
63767: LD_VAR 0 1
63771: ARRAY
63772: PUSH
63773: LD_VAR 0 2
63777: ARRAY
63778: PUSH
63779: LD_INT 1
63781: ARRAY
63782: PPUSH
63783: LD_EXP 72
63787: PUSH
63788: LD_VAR 0 1
63792: ARRAY
63793: PUSH
63794: LD_VAR 0 2
63798: ARRAY
63799: PUSH
63800: LD_INT 2
63802: ARRAY
63803: PPUSH
63804: CALL_OW 458
63808: AND
63809: IFFALSE 63903
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63811: LD_EXP 72
63815: PUSH
63816: LD_VAR 0 1
63820: ARRAY
63821: PUSH
63822: LD_VAR 0 2
63826: ARRAY
63827: PUSH
63828: LD_INT 1
63830: ARRAY
63831: PPUSH
63832: LD_EXP 72
63836: PUSH
63837: LD_VAR 0 1
63841: ARRAY
63842: PUSH
63843: LD_VAR 0 2
63847: ARRAY
63848: PUSH
63849: LD_INT 2
63851: ARRAY
63852: PPUSH
63853: LD_VAR 0 3
63857: PPUSH
63858: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63862: LD_ADDR_EXP 72
63866: PUSH
63867: LD_EXP 72
63871: PPUSH
63872: LD_VAR 0 1
63876: PPUSH
63877: LD_EXP 72
63881: PUSH
63882: LD_VAR 0 1
63886: ARRAY
63887: PPUSH
63888: LD_VAR 0 2
63892: PPUSH
63893: CALL_OW 3
63897: PPUSH
63898: CALL_OW 1
63902: ST_TO_ADDR
// end ; end ;
63903: GO 63547
63905: POP
63906: POP
// end ;
63907: GO 63418
63909: POP
63910: POP
// end ;
63911: PPOPN 4
63913: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63914: LD_INT 0
63916: PPUSH
63917: PPUSH
63918: PPUSH
63919: PPUSH
// result := false ;
63920: LD_ADDR_VAR 0 4
63924: PUSH
63925: LD_INT 0
63927: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63928: LD_VAR 0 1
63932: PPUSH
63933: CALL_OW 264
63937: PUSH
63938: LD_INT 81
63940: EQUAL
63941: NOT
63942: IFFALSE 63946
// exit ;
63944: GO 64316
// side := GetSide ( unit ) ;
63946: LD_ADDR_VAR 0 6
63950: PUSH
63951: LD_VAR 0 1
63955: PPUSH
63956: CALL_OW 255
63960: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63961: LD_ADDR_VAR 0 5
63965: PUSH
63966: LD_EXP 71
63970: PPUSH
63971: LD_VAR 0 1
63975: PPUSH
63976: CALL 21047 0 2
63980: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63981: LD_EXP 72
63985: PUSH
63986: LD_VAR 0 5
63990: ARRAY
63991: PUSH
63992: LD_EXP 73
63996: GREATEREQUAL
63997: IFFALSE 64001
// exit ;
63999: GO 64316
// ComMoveXY ( unit , x , y ) ;
64001: LD_VAR 0 1
64005: PPUSH
64006: LD_VAR 0 2
64010: PPUSH
64011: LD_VAR 0 3
64015: PPUSH
64016: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64020: LD_INT 35
64022: PPUSH
64023: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64027: LD_VAR 0 1
64031: PPUSH
64032: LD_VAR 0 2
64036: PPUSH
64037: LD_VAR 0 3
64041: PPUSH
64042: CALL 53103 0 3
64046: NOT
64047: IFFALSE 64060
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 314
64059: AND
64060: IFFALSE 64064
// exit ;
64062: GO 64316
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64064: LD_VAR 0 2
64068: PPUSH
64069: LD_VAR 0 3
64073: PPUSH
64074: CALL_OW 428
64078: PUSH
64079: LD_VAR 0 1
64083: EQUAL
64084: IFFALSE 64098
64086: PUSH
64087: LD_VAR 0 1
64091: PPUSH
64092: CALL_OW 314
64096: NOT
64097: AND
64098: IFFALSE 64020
// if MineAtPos ( x , y ) then
64100: LD_VAR 0 2
64104: PPUSH
64105: LD_VAR 0 3
64109: PPUSH
64110: CALL_OW 458
64114: IFFALSE 64118
// exit ;
64116: GO 64316
// if your_side = side then
64118: LD_OWVAR 2
64122: PUSH
64123: LD_VAR 0 6
64127: EQUAL
64128: IFFALSE 64147
// PlaySoundXY ( x , y , PlantMine ) ;
64130: LD_VAR 0 2
64134: PPUSH
64135: LD_VAR 0 3
64139: PPUSH
64140: LD_STRING PlantMine
64142: PPUSH
64143: CALL_OW 366
// repeat wait ( 1 ) ;
64147: LD_INT 1
64149: PPUSH
64150: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
64154: LD_VAR 0 2
64158: PPUSH
64159: LD_VAR 0 3
64163: PPUSH
64164: LD_VAR 0 6
64168: PPUSH
64169: LD_INT 0
64171: PPUSH
64172: CALL_OW 454
64176: IFFALSE 64147
// if MineAtPos ( x , y ) then
64178: LD_VAR 0 2
64182: PPUSH
64183: LD_VAR 0 3
64187: PPUSH
64188: CALL_OW 458
64192: IFFALSE 64308
// begin for i in minerMinesList [ index ] do
64194: LD_ADDR_VAR 0 7
64198: PUSH
64199: LD_EXP 72
64203: PUSH
64204: LD_VAR 0 5
64208: ARRAY
64209: PUSH
64210: FOR_IN
64211: IFFALSE 64253
// if i [ 1 ] = x and i [ 2 ] = y then
64213: LD_VAR 0 7
64217: PUSH
64218: LD_INT 1
64220: ARRAY
64221: PUSH
64222: LD_VAR 0 2
64226: EQUAL
64227: IFFALSE 64245
64229: PUSH
64230: LD_VAR 0 7
64234: PUSH
64235: LD_INT 2
64237: ARRAY
64238: PUSH
64239: LD_VAR 0 3
64243: EQUAL
64244: AND
64245: IFFALSE 64251
// exit ;
64247: POP
64248: POP
64249: GO 64316
64251: GO 64210
64253: POP
64254: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64255: LD_ADDR_EXP 72
64259: PUSH
64260: LD_EXP 72
64264: PPUSH
64265: LD_VAR 0 5
64269: PUSH
64270: LD_EXP 72
64274: PUSH
64275: LD_VAR 0 5
64279: ARRAY
64280: PUSH
64281: LD_INT 1
64283: PLUS
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PPUSH
64289: LD_VAR 0 2
64293: PUSH
64294: LD_VAR 0 3
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PPUSH
64303: CALL 21264 0 3
64307: ST_TO_ADDR
// end ; result := true ;
64308: LD_ADDR_VAR 0 4
64312: PUSH
64313: LD_INT 1
64315: ST_TO_ADDR
// end ;
64316: LD_VAR 0 4
64320: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64321: LD_INT 0
64323: PPUSH
64324: PPUSH
64325: PPUSH
// if not unit in minersList then
64326: LD_VAR 0 1
64330: PUSH
64331: LD_EXP 71
64335: IN
64336: NOT
64337: IFFALSE 64341
// exit ;
64339: GO 64548
// index := GetElementIndex ( minersList , unit ) ;
64341: LD_ADDR_VAR 0 6
64345: PUSH
64346: LD_EXP 71
64350: PPUSH
64351: LD_VAR 0 1
64355: PPUSH
64356: CALL 21047 0 2
64360: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64361: LD_ADDR_VAR 0 5
64365: PUSH
64366: DOUBLE
64367: LD_EXP 72
64371: PUSH
64372: LD_VAR 0 6
64376: ARRAY
64377: INC
64378: ST_TO_ADDR
64379: LD_INT 1
64381: PUSH
64382: FOR_DOWNTO
64383: IFFALSE 64546
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64385: LD_EXP 72
64389: PUSH
64390: LD_VAR 0 6
64394: ARRAY
64395: PUSH
64396: LD_VAR 0 5
64400: ARRAY
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PPUSH
64406: LD_EXP 72
64410: PUSH
64411: LD_VAR 0 6
64415: ARRAY
64416: PUSH
64417: LD_VAR 0 5
64421: ARRAY
64422: PUSH
64423: LD_INT 2
64425: ARRAY
64426: PPUSH
64427: LD_VAR 0 2
64431: PPUSH
64432: LD_VAR 0 3
64436: PPUSH
64437: CALL_OW 298
64441: PUSH
64442: LD_INT 6
64444: LESS
64445: IFFALSE 64544
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64447: LD_EXP 72
64451: PUSH
64452: LD_VAR 0 6
64456: ARRAY
64457: PUSH
64458: LD_VAR 0 5
64462: ARRAY
64463: PUSH
64464: LD_INT 1
64466: ARRAY
64467: PPUSH
64468: LD_EXP 72
64472: PUSH
64473: LD_VAR 0 6
64477: ARRAY
64478: PUSH
64479: LD_VAR 0 5
64483: ARRAY
64484: PUSH
64485: LD_INT 2
64487: ARRAY
64488: PPUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: CALL_OW 255
64498: PPUSH
64499: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64503: LD_ADDR_EXP 72
64507: PUSH
64508: LD_EXP 72
64512: PPUSH
64513: LD_VAR 0 6
64517: PPUSH
64518: LD_EXP 72
64522: PUSH
64523: LD_VAR 0 6
64527: ARRAY
64528: PPUSH
64529: LD_VAR 0 5
64533: PPUSH
64534: CALL_OW 3
64538: PPUSH
64539: CALL_OW 1
64543: ST_TO_ADDR
// end ; end ;
64544: GO 64382
64546: POP
64547: POP
// end ;
64548: LD_VAR 0 4
64552: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64553: LD_INT 0
64555: PPUSH
64556: PPUSH
64557: PPUSH
64558: PPUSH
64559: PPUSH
64560: PPUSH
64561: PPUSH
64562: PPUSH
64563: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 264
64573: PUSH
64574: LD_INT 81
64576: EQUAL
64577: NOT
64578: IFTRUE 64593
64580: PUSH
64581: LD_VAR 0 1
64585: PUSH
64586: LD_EXP 71
64590: IN
64591: NOT
64592: OR
64593: IFFALSE 64597
// exit ;
64595: GO 64923
// index := GetElementIndex ( minersList , unit ) ;
64597: LD_ADDR_VAR 0 6
64601: PUSH
64602: LD_EXP 71
64606: PPUSH
64607: LD_VAR 0 1
64611: PPUSH
64612: CALL 21047 0 2
64616: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64617: LD_ADDR_VAR 0 8
64621: PUSH
64622: LD_EXP 73
64626: PUSH
64627: LD_EXP 72
64631: PUSH
64632: LD_VAR 0 6
64636: ARRAY
64637: MINUS
64638: ST_TO_ADDR
// if not minesFreeAmount then
64639: LD_VAR 0 8
64643: NOT
64644: IFFALSE 64648
// exit ;
64646: GO 64923
// tmp := [ ] ;
64648: LD_ADDR_VAR 0 7
64652: PUSH
64653: EMPTY
64654: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64655: LD_ADDR_VAR 0 5
64659: PUSH
64660: DOUBLE
64661: LD_INT 1
64663: DEC
64664: ST_TO_ADDR
64665: LD_VAR 0 8
64669: PUSH
64670: FOR_TO
64671: IFFALSE 64870
// begin _d := rand ( 0 , 5 ) ;
64673: LD_ADDR_VAR 0 11
64677: PUSH
64678: LD_INT 0
64680: PPUSH
64681: LD_INT 5
64683: PPUSH
64684: CALL_OW 12
64688: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64689: LD_ADDR_VAR 0 12
64693: PUSH
64694: LD_INT 2
64696: PPUSH
64697: LD_INT 6
64699: PPUSH
64700: CALL_OW 12
64704: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64705: LD_ADDR_VAR 0 9
64709: PUSH
64710: LD_VAR 0 2
64714: PPUSH
64715: LD_VAR 0 11
64719: PPUSH
64720: LD_VAR 0 12
64724: PPUSH
64725: CALL_OW 272
64729: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64730: LD_ADDR_VAR 0 10
64734: PUSH
64735: LD_VAR 0 3
64739: PPUSH
64740: LD_VAR 0 11
64744: PPUSH
64745: LD_VAR 0 12
64749: PPUSH
64750: CALL_OW 273
64754: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64755: LD_VAR 0 9
64759: PPUSH
64760: LD_VAR 0 10
64764: PPUSH
64765: CALL_OW 488
64769: IFFALSE 64793
64771: PUSH
64772: LD_VAR 0 9
64776: PUSH
64777: LD_VAR 0 10
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_VAR 0 7
64790: IN
64791: NOT
64792: AND
64793: IFFALSE 64812
64795: PUSH
64796: LD_VAR 0 9
64800: PPUSH
64801: LD_VAR 0 10
64805: PPUSH
64806: CALL_OW 458
64810: NOT
64811: AND
64812: IFFALSE 64854
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64814: LD_ADDR_VAR 0 7
64818: PUSH
64819: LD_VAR 0 7
64823: PPUSH
64824: LD_VAR 0 7
64828: PUSH
64829: LD_INT 1
64831: PLUS
64832: PPUSH
64833: LD_VAR 0 9
64837: PUSH
64838: LD_VAR 0 10
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PPUSH
64847: CALL_OW 1
64851: ST_TO_ADDR
64852: GO 64868
// i := i - 1 ;
64854: LD_ADDR_VAR 0 5
64858: PUSH
64859: LD_VAR 0 5
64863: PUSH
64864: LD_INT 1
64866: MINUS
64867: ST_TO_ADDR
// end ;
64868: GO 64670
64870: POP
64871: POP
// for i in tmp do
64872: LD_ADDR_VAR 0 5
64876: PUSH
64877: LD_VAR 0 7
64881: PUSH
64882: FOR_IN
64883: IFFALSE 64921
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64885: LD_VAR 0 1
64889: PPUSH
64890: LD_VAR 0 5
64894: PUSH
64895: LD_INT 1
64897: ARRAY
64898: PPUSH
64899: LD_VAR 0 5
64903: PUSH
64904: LD_INT 2
64906: ARRAY
64907: PPUSH
64908: CALL 63914 0 3
64912: NOT
64913: IFFALSE 64919
// exit ;
64915: POP
64916: POP
64917: GO 64923
64919: GO 64882
64921: POP
64922: POP
// end ;
64923: LD_VAR 0 4
64927: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64928: LD_INT 0
64930: PPUSH
64931: PPUSH
64932: PPUSH
64933: PPUSH
64934: PPUSH
64935: PPUSH
64936: PPUSH
64937: PPUSH
64938: PPUSH
// if GetClass ( unit ) <> class_sniper then
64939: LD_VAR 0 1
64943: PPUSH
64944: CALL_OW 257
64948: PUSH
64949: LD_INT 5
64951: NONEQUAL
64952: IFFALSE 64956
// exit ;
64954: GO 65426
// dist := 8 ;
64956: LD_ADDR_VAR 0 5
64960: PUSH
64961: LD_INT 8
64963: ST_TO_ADDR
// viewRange := 12 ;
64964: LD_ADDR_VAR 0 8
64968: PUSH
64969: LD_INT 12
64971: ST_TO_ADDR
// side := GetSide ( unit ) ;
64972: LD_ADDR_VAR 0 6
64976: PUSH
64977: LD_VAR 0 1
64981: PPUSH
64982: CALL_OW 255
64986: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64987: LD_INT 61
64989: PPUSH
64990: LD_VAR 0 6
64994: PPUSH
64995: CALL_OW 321
64999: PUSH
65000: LD_INT 2
65002: EQUAL
65003: IFFALSE 65013
// viewRange := 16 ;
65005: LD_ADDR_VAR 0 8
65009: PUSH
65010: LD_INT 16
65012: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65013: LD_VAR 0 1
65017: PPUSH
65018: LD_VAR 0 2
65022: PPUSH
65023: LD_VAR 0 3
65027: PPUSH
65028: CALL_OW 297
65032: PUSH
65033: LD_VAR 0 5
65037: GREATER
65038: IFFALSE 65117
// begin ComMoveXY ( unit , x , y ) ;
65040: LD_VAR 0 1
65044: PPUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: LD_VAR 0 3
65054: PPUSH
65055: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65059: LD_INT 35
65061: PPUSH
65062: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65066: LD_VAR 0 1
65070: PPUSH
65071: LD_VAR 0 2
65075: PPUSH
65076: LD_VAR 0 3
65080: PPUSH
65081: CALL 53103 0 3
65085: NOT
65086: IFFALSE 65090
// exit ;
65088: GO 65426
// until GetDistUnitXY ( unit , x , y ) < dist ;
65090: LD_VAR 0 1
65094: PPUSH
65095: LD_VAR 0 2
65099: PPUSH
65100: LD_VAR 0 3
65104: PPUSH
65105: CALL_OW 297
65109: PUSH
65110: LD_VAR 0 5
65114: LESS
65115: IFFALSE 65059
// end ; ComTurnXY ( unit , x , y ) ;
65117: LD_VAR 0 1
65121: PPUSH
65122: LD_VAR 0 2
65126: PPUSH
65127: LD_VAR 0 3
65131: PPUSH
65132: CALL_OW 118
// repeat if Multiplayer then
65136: LD_OWVAR 4
65140: IFFALSE 65151
// wait ( 35 ) else
65142: LD_INT 35
65144: PPUSH
65145: CALL_OW 67
65149: GO 65158
// wait ( 5 ) ;
65151: LD_INT 5
65153: PPUSH
65154: CALL_OW 67
// _d := GetDir ( unit ) ;
65158: LD_ADDR_VAR 0 11
65162: PUSH
65163: LD_VAR 0 1
65167: PPUSH
65168: CALL_OW 254
65172: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65173: LD_ADDR_VAR 0 7
65177: PUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: CALL_OW 250
65187: PPUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 251
65197: PPUSH
65198: LD_VAR 0 2
65202: PPUSH
65203: LD_VAR 0 3
65207: PPUSH
65208: CALL 55739 0 4
65212: ST_TO_ADDR
// until dir = _d ;
65213: LD_VAR 0 7
65217: PUSH
65218: LD_VAR 0 11
65222: EQUAL
65223: IFFALSE 65136
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65225: LD_ADDR_VAR 0 9
65229: PUSH
65230: LD_VAR 0 1
65234: PPUSH
65235: CALL_OW 250
65239: PPUSH
65240: LD_VAR 0 7
65244: PPUSH
65245: LD_VAR 0 5
65249: PPUSH
65250: CALL_OW 272
65254: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65255: LD_ADDR_VAR 0 10
65259: PUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 251
65269: PPUSH
65270: LD_VAR 0 7
65274: PPUSH
65275: LD_VAR 0 5
65279: PPUSH
65280: CALL_OW 273
65284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65285: LD_VAR 0 9
65289: PPUSH
65290: LD_VAR 0 10
65294: PPUSH
65295: CALL_OW 488
65299: NOT
65300: IFFALSE 65304
// exit ;
65302: GO 65426
// ComAnimCustom ( unit , 1 ) ;
65304: LD_VAR 0 1
65308: PPUSH
65309: LD_INT 1
65311: PPUSH
65312: CALL_OW 592
// p := 0 ;
65316: LD_ADDR_VAR 0 12
65320: PUSH
65321: LD_INT 0
65323: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65324: LD_VAR 0 9
65328: PPUSH
65329: LD_VAR 0 10
65333: PPUSH
65334: LD_VAR 0 6
65338: PPUSH
65339: LD_VAR 0 8
65343: PPUSH
65344: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65348: LD_INT 35
65350: PPUSH
65351: CALL_OW 67
// p := Inc ( p ) ;
65355: LD_ADDR_VAR 0 12
65359: PUSH
65360: LD_VAR 0 12
65364: PPUSH
65365: CALL 55695 0 1
65369: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65370: LD_VAR 0 12
65374: PUSH
65375: LD_INT 3
65377: EQUAL
65378: IFTRUE 65392
65380: PUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: CALL_OW 302
65390: NOT
65391: OR
65392: IFTRUE 65405
65394: PUSH
65395: LD_VAR 0 1
65399: PPUSH
65400: CALL_OW 301
65404: OR
65405: IFFALSE 65348
// RemoveSeeing ( _x , _y , side ) ;
65407: LD_VAR 0 9
65411: PPUSH
65412: LD_VAR 0 10
65416: PPUSH
65417: LD_VAR 0 6
65421: PPUSH
65422: CALL_OW 331
// end ;
65426: LD_VAR 0 4
65430: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
65431: LD_INT 0
65433: PPUSH
65434: PPUSH
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
// if not unit then
65444: LD_VAR 0 1
65448: NOT
65449: IFFALSE 65453
// exit ;
65451: GO 65724
// side := GetSide ( unit ) ;
65453: LD_ADDR_VAR 0 3
65457: PUSH
65458: LD_VAR 0 1
65462: PPUSH
65463: CALL_OW 255
65467: ST_TO_ADDR
// x := GetX ( unit ) ;
65468: LD_ADDR_VAR 0 5
65472: PUSH
65473: LD_VAR 0 1
65477: PPUSH
65478: CALL_OW 250
65482: ST_TO_ADDR
// y := GetY ( unit ) ;
65483: LD_ADDR_VAR 0 6
65487: PUSH
65488: LD_VAR 0 1
65492: PPUSH
65493: CALL_OW 251
65497: ST_TO_ADDR
// r := 8 ;
65498: LD_ADDR_VAR 0 4
65502: PUSH
65503: LD_INT 8
65505: ST_TO_ADDR
// if x - r < 0 then
65506: LD_VAR 0 5
65510: PUSH
65511: LD_VAR 0 4
65515: MINUS
65516: PUSH
65517: LD_INT 0
65519: LESS
65520: IFFALSE 65532
// min_x := 0 else
65522: LD_ADDR_VAR 0 7
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
65530: GO 65548
// min_x := x - r ;
65532: LD_ADDR_VAR 0 7
65536: PUSH
65537: LD_VAR 0 5
65541: PUSH
65542: LD_VAR 0 4
65546: MINUS
65547: ST_TO_ADDR
// if y - r < 0 then
65548: LD_VAR 0 6
65552: PUSH
65553: LD_VAR 0 4
65557: MINUS
65558: PUSH
65559: LD_INT 0
65561: LESS
65562: IFFALSE 65574
// min_y := 0 else
65564: LD_ADDR_VAR 0 8
65568: PUSH
65569: LD_INT 0
65571: ST_TO_ADDR
65572: GO 65590
// min_y := y - r ;
65574: LD_ADDR_VAR 0 8
65578: PUSH
65579: LD_VAR 0 6
65583: PUSH
65584: LD_VAR 0 4
65588: MINUS
65589: ST_TO_ADDR
// max_x := x + r ;
65590: LD_ADDR_VAR 0 9
65594: PUSH
65595: LD_VAR 0 5
65599: PUSH
65600: LD_VAR 0 4
65604: PLUS
65605: ST_TO_ADDR
// max_y := y + r ;
65606: LD_ADDR_VAR 0 10
65610: PUSH
65611: LD_VAR 0 6
65615: PUSH
65616: LD_VAR 0 4
65620: PLUS
65621: ST_TO_ADDR
// for _x = min_x to max_x do
65622: LD_ADDR_VAR 0 11
65626: PUSH
65627: DOUBLE
65628: LD_VAR 0 7
65632: DEC
65633: ST_TO_ADDR
65634: LD_VAR 0 9
65638: PUSH
65639: FOR_TO
65640: IFFALSE 65722
// for _y = min_y to max_y do
65642: LD_ADDR_VAR 0 12
65646: PUSH
65647: DOUBLE
65648: LD_VAR 0 8
65652: DEC
65653: ST_TO_ADDR
65654: LD_VAR 0 10
65658: PUSH
65659: FOR_TO
65660: IFFALSE 65718
// begin if not ValidHex ( _x , _y ) then
65662: LD_VAR 0 11
65666: PPUSH
65667: LD_VAR 0 12
65671: PPUSH
65672: CALL_OW 488
65676: NOT
65677: IFFALSE 65681
// continue ;
65679: GO 65659
// if MineAtPos ( _x , _y ) then
65681: LD_VAR 0 11
65685: PPUSH
65686: LD_VAR 0 12
65690: PPUSH
65691: CALL_OW 458
65695: IFFALSE 65716
// ViewMineAtPos ( _x , _y , side ) ;
65697: LD_VAR 0 11
65701: PPUSH
65702: LD_VAR 0 12
65706: PPUSH
65707: LD_VAR 0 3
65711: PPUSH
65712: CALL_OW 457
// end ;
65716: GO 65659
65718: POP
65719: POP
65720: GO 65639
65722: POP
65723: POP
// end ;
65724: LD_VAR 0 2
65728: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
65729: LD_INT 0
65731: PPUSH
65732: PPUSH
65733: PPUSH
65734: PPUSH
65735: PPUSH
65736: PPUSH
65737: PPUSH
// if not units then
65738: LD_VAR 0 1
65742: NOT
65743: IFFALSE 65747
// exit ;
65745: GO 66211
// scaners := [ ] ;
65747: LD_ADDR_VAR 0 6
65751: PUSH
65752: EMPTY
65753: ST_TO_ADDR
// for i in units do
65754: LD_ADDR_VAR 0 3
65758: PUSH
65759: LD_VAR 0 1
65763: PUSH
65764: FOR_IN
65765: IFFALSE 65922
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65767: LD_VAR 0 3
65771: PPUSH
65772: CALL_OW 264
65776: PUSH
65777: LD_INT 11
65779: NONEQUAL
65780: IFTRUE 65794
65782: PUSH
65783: LD_VAR 0 3
65787: PPUSH
65788: CALL_OW 302
65792: NOT
65793: OR
65794: IFTRUE 65811
65796: PUSH
65797: LD_VAR 0 3
65801: PPUSH
65802: CALL_OW 110
65806: PUSH
65807: LD_INT 502
65809: EQUAL
65810: OR
65811: IFFALSE 65815
// continue ;
65813: GO 65764
// ComStop ( i ) ;
65815: LD_VAR 0 3
65819: PPUSH
65820: CALL_OW 141
// x := GetX ( i ) ;
65824: LD_ADDR_VAR 0 4
65828: PUSH
65829: LD_VAR 0 3
65833: PPUSH
65834: CALL_OW 250
65838: ST_TO_ADDR
// y := GetY ( i ) ;
65839: LD_ADDR_VAR 0 5
65843: PUSH
65844: LD_VAR 0 3
65848: PPUSH
65849: CALL_OW 251
65853: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65854: LD_VAR 0 3
65858: PPUSH
65859: CALL_OW 255
65863: PUSH
65864: LD_OWVAR 2
65868: EQUAL
65869: IFFALSE 65888
// PlaySoundXY ( x , y , mineDetector ) ;
65871: LD_VAR 0 4
65875: PPUSH
65876: LD_VAR 0 5
65880: PPUSH
65881: LD_STRING mineDetector
65883: PPUSH
65884: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65888: LD_ADDR_VAR 0 6
65892: PUSH
65893: LD_VAR 0 6
65897: PPUSH
65898: LD_VAR 0 3
65902: PPUSH
65903: CALL 54322 0 2
65907: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65908: LD_VAR 0 3
65912: PPUSH
65913: LD_INT 502
65915: PPUSH
65916: CALL_OW 109
// end ;
65920: GO 65764
65922: POP
65923: POP
// if not scaners then
65924: LD_VAR 0 6
65928: NOT
65929: IFFALSE 65933
// exit ;
65931: GO 66211
// wait ( 3 ) ;
65933: LD_INT 3
65935: PPUSH
65936: CALL_OW 67
// timer := 6 ;
65940: LD_ADDR_VAR 0 7
65944: PUSH
65945: LD_INT 6
65947: ST_TO_ADDR
// repeat for i in scaners do
65948: LD_ADDR_VAR 0 3
65952: PUSH
65953: LD_VAR 0 6
65957: PUSH
65958: FOR_IN
65959: IFFALSE 66109
// begin side := GetSide ( i ) ;
65961: LD_ADDR_VAR 0 8
65965: PUSH
65966: LD_VAR 0 3
65970: PPUSH
65971: CALL_OW 255
65975: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65976: LD_VAR 0 3
65980: PPUSH
65981: CALL_OW 302
65985: NOT
65986: IFTRUE 65999
65988: PUSH
65989: LD_VAR 0 3
65993: PPUSH
65994: CALL_OW 314
65998: OR
65999: IFTRUE 66030
66001: PUSH
66002: LD_VAR 0 3
66006: PPUSH
66007: CALL_OW 263
66011: PUSH
66012: LD_INT 1
66014: EQUAL
66015: IFFALSE 66029
66017: PUSH
66018: LD_VAR 0 3
66022: PPUSH
66023: CALL_OW 311
66027: NOT
66028: AND
66029: OR
66030: IFFALSE 66074
// begin SetUnitDisplayNumber ( i , 0 ) ;
66032: LD_VAR 0 3
66036: PPUSH
66037: LD_INT 0
66039: PPUSH
66040: CALL_OW 505
// SetTag ( i , 0 ) ;
66044: LD_VAR 0 3
66048: PPUSH
66049: LD_INT 0
66051: PPUSH
66052: CALL_OW 109
// scaners := scaners diff i ;
66056: LD_ADDR_VAR 0 6
66060: PUSH
66061: LD_VAR 0 6
66065: PUSH
66066: LD_VAR 0 3
66070: DIFF
66071: ST_TO_ADDR
// continue ;
66072: GO 65958
// end ; if side in [ your_side , 9 ] then
66074: LD_VAR 0 8
66078: PUSH
66079: LD_OWVAR 2
66083: PUSH
66084: LD_INT 9
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: IN
66091: IFFALSE 66107
// SetUnitDisplayNumber ( i , timer ) ;
66093: LD_VAR 0 3
66097: PPUSH
66098: LD_VAR 0 7
66102: PPUSH
66103: CALL_OW 505
// end ;
66107: GO 65958
66109: POP
66110: POP
// if not scaners then
66111: LD_VAR 0 6
66115: NOT
66116: IFFALSE 66120
// exit ;
66118: GO 66211
// timer := Dec ( timer ) ;
66120: LD_ADDR_VAR 0 7
66124: PUSH
66125: LD_VAR 0 7
66129: PPUSH
66130: CALL 55717 0 1
66134: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66135: LD_INT 35
66137: PPUSH
66138: CALL_OW 67
// until timer = 0 ;
66142: LD_VAR 0 7
66146: PUSH
66147: LD_INT 0
66149: EQUAL
66150: IFFALSE 65948
// if not scaners then
66152: LD_VAR 0 6
66156: NOT
66157: IFFALSE 66161
// exit ;
66159: GO 66211
// for i in scaners do
66161: LD_ADDR_VAR 0 3
66165: PUSH
66166: LD_VAR 0 6
66170: PUSH
66171: FOR_IN
66172: IFFALSE 66209
// begin SetUnitDisplayNumber ( i , 0 ) ;
66174: LD_VAR 0 3
66178: PPUSH
66179: LD_INT 0
66181: PPUSH
66182: CALL_OW 505
// SetTag ( i , 0 ) ;
66186: LD_VAR 0 3
66190: PPUSH
66191: LD_INT 0
66193: PPUSH
66194: CALL_OW 109
// RevealDetectorMine ( i ) ;
66198: LD_VAR 0 3
66202: PPUSH
66203: CALL 65431 0 1
// end ;
66207: GO 66171
66209: POP
66210: POP
// end ;
66211: LD_VAR 0 2
66215: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
66216: LD_INT 0
66218: PPUSH
// if p1 = mine_detector_mode then
66219: LD_VAR 0 2
66223: PUSH
66224: LD_INT 103
66226: EQUAL
66227: IFFALSE 66238
// DetectMine ( units ) ;
66229: LD_VAR 0 1
66233: PPUSH
66234: CALL 65729 0 1
// end ; end_of_file
66238: LD_VAR 0 7
66242: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66243: LD_VAR 0 1
66247: PUSH
66248: LD_INT 200
66250: DOUBLE
66251: GREATEREQUAL
66252: IFFALSE 66260
66254: LD_INT 299
66256: DOUBLE
66257: LESSEQUAL
66258: IFTRUE 66262
66260: GO 66294
66262: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66263: LD_VAR 0 1
66267: PPUSH
66268: LD_VAR 0 2
66272: PPUSH
66273: LD_VAR 0 3
66277: PPUSH
66278: LD_VAR 0 4
66282: PPUSH
66283: LD_VAR 0 5
66287: PPUSH
66288: CALL 60519 0 5
66292: GO 66371
66294: LD_INT 300
66296: DOUBLE
66297: GREATEREQUAL
66298: IFFALSE 66306
66300: LD_INT 399
66302: DOUBLE
66303: LESSEQUAL
66304: IFTRUE 66308
66306: GO 66370
66308: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 2
66318: PPUSH
66319: LD_VAR 0 3
66323: PPUSH
66324: LD_VAR 0 4
66328: PPUSH
66329: LD_VAR 0 5
66333: PPUSH
66334: LD_VAR 0 6
66338: PPUSH
66339: LD_VAR 0 7
66343: PPUSH
66344: LD_VAR 0 8
66348: PPUSH
66349: LD_VAR 0 9
66353: PPUSH
66354: LD_VAR 0 10
66358: PPUSH
66359: LD_VAR 0 11
66363: PPUSH
66364: CALL 12675 0 11
66368: GO 66371
66370: POP
// end ;
66371: PPOPN 11
66373: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66374: LD_VAR 0 1
66378: PPUSH
66379: LD_VAR 0 2
66383: PPUSH
66384: LD_VAR 0 3
66388: PPUSH
66389: LD_VAR 0 4
66393: PPUSH
66394: LD_VAR 0 5
66398: PPUSH
66399: CALL 59819 0 5
// end ;
66403: PPOPN 5
66405: END
