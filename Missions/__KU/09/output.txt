// on OilExtracted ( building , side , base , amount ) do begin end ;
   0: PPOPN 4
   2: END
// every 0 0$1 do
   3: GO 5
   5: DISABLE
// begin HintSpec ( VehLimit , 2 ) ;
   6: LD_STRING VehLimit
   8: PPUSH
   9: LD_INT 2
  11: PPUSH
  12: CALL_OW 338
// PlaceMinesToArea ( minesAr , 23 , 10 , 2 , 0 ) ;
  16: LD_INT 4
  18: PPUSH
  19: LD_INT 23
  21: PPUSH
  22: LD_INT 10
  24: PPUSH
  25: LD_INT 2
  27: PPUSH
  28: LD_INT 0
  30: PPUSH
  31: CALL_OW 511
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
  35: END
// export globalGameSaveCounter ; every 0 0$1 do
  36: GO 38
  38: DISABLE
// begin enable ;
  39: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
  40: LD_STRING updateTimer(
  42: PUSH
  43: LD_OWVAR 1
  47: STR
  48: PUSH
  49: LD_STRING );
  51: STR
  52: PPUSH
  53: CALL_OW 559
// end ;
  57: END
// every 0 0$1 do
  58: GO 60
  60: DISABLE
// begin globalGameSaveCounter := 0 ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
  69: LD_STRING setGameSaveCounter(0)
  71: PPUSH
  72: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
  76: LD_STRING initStreamRollete();
  78: PPUSH
  79: CALL_OW 559
// InitStreamMode ;
  83: CALL 1428 0 0
// DefineStreamItems ( false ) ;
  87: LD_INT 0
  89: PPUSH
  90: CALL 1892 0 1
// end ;
  94: END
// export function SOS_MapStart ( ) ; begin
  95: LD_INT 0
  97: PPUSH
// if streamModeActive then
  98: LD_EXP 2
 102: IFFALSE 111
// DefineStreamItems ( true ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL 1892 0 1
// UpdateLuaVariables ( ) ;
 111: CALL 128 0 0
// UpdateFactoryWaypoints ( ) ;
 115: CALL 15014 0 0
// UpdateWarehouseGatheringPoints ( ) ;
 119: CALL 15266 0 0
// end ;
 123: LD_VAR 0 1
 127: RET
// function UpdateLuaVariables ( ) ; begin
 128: LD_INT 0
 130: PPUSH
// if globalGameSaveCounter then
 131: LD_EXP 1
 135: IFFALSE 169
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
 137: LD_ADDR_EXP 1
 141: PUSH
 142: LD_EXP 1
 146: PPUSH
 147: CALL 55678 0 1
 151: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
 152: LD_STRING setGameSaveCounter(
 154: PUSH
 155: LD_EXP 1
 159: STR
 160: PUSH
 161: LD_STRING )
 163: STR
 164: PPUSH
 165: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
 169: LD_STRING setGameDifficulty(
 171: PUSH
 172: LD_OWVAR 67
 176: STR
 177: PUSH
 178: LD_STRING )
 180: STR
 181: PPUSH
 182: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
 186: LD_STRING displayDifficulty(
 188: PUSH
 189: LD_OWVAR 67
 193: STR
 194: PUSH
 195: LD_STRING )
 197: STR
 198: PPUSH
 199: CALL_OW 559
// end ;
 203: LD_VAR 0 1
 207: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
 208: LD_INT 0
 210: PPUSH
// if p2 = stream_mode then
 211: LD_VAR 0 2
 215: PUSH
 216: LD_INT 100
 218: EQUAL
 219: IFFALSE 1222
// begin if not StreamModeActive then
 221: LD_EXP 2
 225: NOT
 226: IFFALSE 236
// StreamModeActive := true ;
 228: LD_ADDR_EXP 2
 232: PUSH
 233: LD_INT 1
 235: ST_TO_ADDR
// if p3 = 0 then
 236: LD_VAR 0 3
 240: PUSH
 241: LD_INT 0
 243: EQUAL
 244: IFFALSE 250
// InitStreamMode ;
 246: CALL 1428 0 0
// if p3 = 1 then
 250: LD_VAR 0 3
 254: PUSH
 255: LD_INT 1
 257: EQUAL
 258: IFFALSE 268
// sRocket := true ;
 260: LD_ADDR_EXP 7
 264: PUSH
 265: LD_INT 1
 267: ST_TO_ADDR
// if p3 = 2 then
 268: LD_VAR 0 3
 272: PUSH
 273: LD_INT 2
 275: EQUAL
 276: IFFALSE 286
// sSpeed := true ;
 278: LD_ADDR_EXP 6
 282: PUSH
 283: LD_INT 1
 285: ST_TO_ADDR
// if p3 = 3 then
 286: LD_VAR 0 3
 290: PUSH
 291: LD_INT 3
 293: EQUAL
 294: IFFALSE 304
// sEngine := true ;
 296: LD_ADDR_EXP 8
 300: PUSH
 301: LD_INT 1
 303: ST_TO_ADDR
// if p3 = 4 then
 304: LD_VAR 0 3
 308: PUSH
 309: LD_INT 4
 311: EQUAL
 312: IFFALSE 322
// sSpec := true ;
 314: LD_ADDR_EXP 5
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// if p3 = 5 then
 322: LD_VAR 0 3
 326: PUSH
 327: LD_INT 5
 329: EQUAL
 330: IFFALSE 340
// sLevel := true ;
 332: LD_ADDR_EXP 9
 336: PUSH
 337: LD_INT 1
 339: ST_TO_ADDR
// if p3 = 6 then
 340: LD_VAR 0 3
 344: PUSH
 345: LD_INT 6
 347: EQUAL
 348: IFFALSE 358
// sArmoury := true ;
 350: LD_ADDR_EXP 10
 354: PUSH
 355: LD_INT 1
 357: ST_TO_ADDR
// if p3 = 7 then
 358: LD_VAR 0 3
 362: PUSH
 363: LD_INT 7
 365: EQUAL
 366: IFFALSE 376
// sRadar := true ;
 368: LD_ADDR_EXP 11
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// if p3 = 8 then
 376: LD_VAR 0 3
 380: PUSH
 381: LD_INT 8
 383: EQUAL
 384: IFFALSE 394
// sBunker := true ;
 386: LD_ADDR_EXP 12
 390: PUSH
 391: LD_INT 1
 393: ST_TO_ADDR
// if p3 = 9 then
 394: LD_VAR 0 3
 398: PUSH
 399: LD_INT 9
 401: EQUAL
 402: IFFALSE 412
// sHack := true ;
 404: LD_ADDR_EXP 13
 408: PUSH
 409: LD_INT 1
 411: ST_TO_ADDR
// if p3 = 10 then
 412: LD_VAR 0 3
 416: PUSH
 417: LD_INT 10
 419: EQUAL
 420: IFFALSE 430
// sFire := true ;
 422: LD_ADDR_EXP 14
 426: PUSH
 427: LD_INT 1
 429: ST_TO_ADDR
// if p3 = 11 then
 430: LD_VAR 0 3
 434: PUSH
 435: LD_INT 11
 437: EQUAL
 438: IFFALSE 448
// sRefresh := true ;
 440: LD_ADDR_EXP 15
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// if p3 = 12 then
 448: LD_VAR 0 3
 452: PUSH
 453: LD_INT 12
 455: EQUAL
 456: IFFALSE 466
// sExp := true ;
 458: LD_ADDR_EXP 16
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// if p3 = 13 then
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 13
 473: EQUAL
 474: IFFALSE 484
// sDepot := true ;
 476: LD_ADDR_EXP 17
 480: PUSH
 481: LD_INT 1
 483: ST_TO_ADDR
// if p3 = 14 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_INT 14
 491: EQUAL
 492: IFFALSE 502
// sFlag := true ;
 494: LD_ADDR_EXP 18
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// if p3 = 15 then
 502: LD_VAR 0 3
 506: PUSH
 507: LD_INT 15
 509: EQUAL
 510: IFFALSE 520
// sKamikadze := true ;
 512: LD_ADDR_EXP 26
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// if p3 = 16 then
 520: LD_VAR 0 3
 524: PUSH
 525: LD_INT 16
 527: EQUAL
 528: IFFALSE 538
// sTroll := true ;
 530: LD_ADDR_EXP 27
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// if p3 = 17 then
 538: LD_VAR 0 3
 542: PUSH
 543: LD_INT 17
 545: EQUAL
 546: IFFALSE 556
// sSlow := true ;
 548: LD_ADDR_EXP 28
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// if p3 = 18 then
 556: LD_VAR 0 3
 560: PUSH
 561: LD_INT 18
 563: EQUAL
 564: IFFALSE 574
// sLack := true ;
 566: LD_ADDR_EXP 29
 570: PUSH
 571: LD_INT 1
 573: ST_TO_ADDR
// if p3 = 19 then
 574: LD_VAR 0 3
 578: PUSH
 579: LD_INT 19
 581: EQUAL
 582: IFFALSE 592
// sTank := true ;
 584: LD_ADDR_EXP 31
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// if p3 = 20 then
 592: LD_VAR 0 3
 596: PUSH
 597: LD_INT 20
 599: EQUAL
 600: IFFALSE 610
// sRemote := true ;
 602: LD_ADDR_EXP 32
 606: PUSH
 607: LD_INT 1
 609: ST_TO_ADDR
// if p3 = 21 then
 610: LD_VAR 0 3
 614: PUSH
 615: LD_INT 21
 617: EQUAL
 618: IFFALSE 628
// sPowell := true ;
 620: LD_ADDR_EXP 33
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// if p3 = 22 then
 628: LD_VAR 0 3
 632: PUSH
 633: LD_INT 22
 635: EQUAL
 636: IFFALSE 646
// sTeleport := true ;
 638: LD_ADDR_EXP 36
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// if p3 = 23 then
 646: LD_VAR 0 3
 650: PUSH
 651: LD_INT 23
 653: EQUAL
 654: IFFALSE 664
// sOilTower := true ;
 656: LD_ADDR_EXP 38
 660: PUSH
 661: LD_INT 1
 663: ST_TO_ADDR
// if p3 = 24 then
 664: LD_VAR 0 3
 668: PUSH
 669: LD_INT 24
 671: EQUAL
 672: IFFALSE 682
// sShovel := true ;
 674: LD_ADDR_EXP 39
 678: PUSH
 679: LD_INT 1
 681: ST_TO_ADDR
// if p3 = 25 then
 682: LD_VAR 0 3
 686: PUSH
 687: LD_INT 25
 689: EQUAL
 690: IFFALSE 700
// sSheik := true ;
 692: LD_ADDR_EXP 40
 696: PUSH
 697: LD_INT 1
 699: ST_TO_ADDR
// if p3 = 26 then
 700: LD_VAR 0 3
 704: PUSH
 705: LD_INT 26
 707: EQUAL
 708: IFFALSE 718
// sEarthquake := true ;
 710: LD_ADDR_EXP 42
 714: PUSH
 715: LD_INT 1
 717: ST_TO_ADDR
// if p3 = 27 then
 718: LD_VAR 0 3
 722: PUSH
 723: LD_INT 27
 725: EQUAL
 726: IFFALSE 736
// sAI := true ;
 728: LD_ADDR_EXP 43
 732: PUSH
 733: LD_INT 1
 735: ST_TO_ADDR
// if p3 = 28 then
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 28
 743: EQUAL
 744: IFFALSE 754
// sCargo := true ;
 746: LD_ADDR_EXP 46
 750: PUSH
 751: LD_INT 1
 753: ST_TO_ADDR
// if p3 = 29 then
 754: LD_VAR 0 3
 758: PUSH
 759: LD_INT 29
 761: EQUAL
 762: IFFALSE 772
// sDLaser := true ;
 764: LD_ADDR_EXP 47
 768: PUSH
 769: LD_INT 1
 771: ST_TO_ADDR
// if p3 = 30 then
 772: LD_VAR 0 3
 776: PUSH
 777: LD_INT 30
 779: EQUAL
 780: IFFALSE 790
// sExchange := true ;
 782: LD_ADDR_EXP 48
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// if p3 = 31 then
 790: LD_VAR 0 3
 794: PUSH
 795: LD_INT 31
 797: EQUAL
 798: IFFALSE 808
// sFac := true ;
 800: LD_ADDR_EXP 49
 804: PUSH
 805: LD_INT 1
 807: ST_TO_ADDR
// if p3 = 32 then
 808: LD_VAR 0 3
 812: PUSH
 813: LD_INT 32
 815: EQUAL
 816: IFFALSE 826
// sPower := true ;
 818: LD_ADDR_EXP 50
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// if p3 = 33 then
 826: LD_VAR 0 3
 830: PUSH
 831: LD_INT 33
 833: EQUAL
 834: IFFALSE 844
// sRandom := true ;
 836: LD_ADDR_EXP 51
 840: PUSH
 841: LD_INT 1
 843: ST_TO_ADDR
// if p3 = 34 then
 844: LD_VAR 0 3
 848: PUSH
 849: LD_INT 34
 851: EQUAL
 852: IFFALSE 862
// sShield := true ;
 854: LD_ADDR_EXP 52
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// if p3 = 35 then
 862: LD_VAR 0 3
 866: PUSH
 867: LD_INT 35
 869: EQUAL
 870: IFFALSE 880
// sTime := true ;
 872: LD_ADDR_EXP 53
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// if p3 = 36 then
 880: LD_VAR 0 3
 884: PUSH
 885: LD_INT 36
 887: EQUAL
 888: IFFALSE 898
// sTools := true ;
 890: LD_ADDR_EXP 54
 894: PUSH
 895: LD_INT 1
 897: ST_TO_ADDR
// if p3 = 101 then
 898: LD_VAR 0 3
 902: PUSH
 903: LD_INT 101
 905: EQUAL
 906: IFFALSE 916
// sSold := true ;
 908: LD_ADDR_EXP 19
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// if p3 = 102 then
 916: LD_VAR 0 3
 920: PUSH
 921: LD_INT 102
 923: EQUAL
 924: IFFALSE 934
// sDiff := true ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_INT 1
 933: ST_TO_ADDR
// if p3 = 103 then
 934: LD_VAR 0 3
 938: PUSH
 939: LD_INT 103
 941: EQUAL
 942: IFFALSE 952
// sFog := true ;
 944: LD_ADDR_EXP 23
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// if p3 = 104 then
 952: LD_VAR 0 3
 956: PUSH
 957: LD_INT 104
 959: EQUAL
 960: IFFALSE 970
// sReset := true ;
 962: LD_ADDR_EXP 24
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// if p3 = 105 then
 970: LD_VAR 0 3
 974: PUSH
 975: LD_INT 105
 977: EQUAL
 978: IFFALSE 988
// sSun := true ;
 980: LD_ADDR_EXP 25
 984: PUSH
 985: LD_INT 1
 987: ST_TO_ADDR
// if p3 = 106 then
 988: LD_VAR 0 3
 992: PUSH
 993: LD_INT 106
 995: EQUAL
 996: IFFALSE 1006
// sTiger := true ;
 998: LD_ADDR_EXP 21
1002: PUSH
1003: LD_INT 1
1005: ST_TO_ADDR
// if p3 = 107 then
1006: LD_VAR 0 3
1010: PUSH
1011: LD_INT 107
1013: EQUAL
1014: IFFALSE 1024
// sBomb := true ;
1016: LD_ADDR_EXP 22
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// if p3 = 108 then
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 108
1031: EQUAL
1032: IFFALSE 1042
// sWound := true ;
1034: LD_ADDR_EXP 30
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// if p3 = 109 then
1042: LD_VAR 0 3
1046: PUSH
1047: LD_INT 109
1049: EQUAL
1050: IFFALSE 1060
// sBetray := true ;
1052: LD_ADDR_EXP 34
1056: PUSH
1057: LD_INT 1
1059: ST_TO_ADDR
// if p3 = 110 then
1060: LD_VAR 0 3
1064: PUSH
1065: LD_INT 110
1067: EQUAL
1068: IFFALSE 1078
// sContamin := true ;
1070: LD_ADDR_EXP 35
1074: PUSH
1075: LD_INT 1
1077: ST_TO_ADDR
// if p3 = 111 then
1078: LD_VAR 0 3
1082: PUSH
1083: LD_INT 111
1085: EQUAL
1086: IFFALSE 1096
// sOil := true ;
1088: LD_ADDR_EXP 37
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// if p3 = 112 then
1096: LD_VAR 0 3
1100: PUSH
1101: LD_INT 112
1103: EQUAL
1104: IFFALSE 1114
// sStu := true ;
1106: LD_ADDR_EXP 41
1110: PUSH
1111: LD_INT 1
1113: ST_TO_ADDR
// if p3 = 113 then
1114: LD_VAR 0 3
1118: PUSH
1119: LD_INT 113
1121: EQUAL
1122: IFFALSE 1132
// sBazooka := true ;
1124: LD_ADDR_EXP 44
1128: PUSH
1129: LD_INT 1
1131: ST_TO_ADDR
// if p3 = 114 then
1132: LD_VAR 0 3
1136: PUSH
1137: LD_INT 114
1139: EQUAL
1140: IFFALSE 1150
// sMortar := true ;
1142: LD_ADDR_EXP 45
1146: PUSH
1147: LD_INT 1
1149: ST_TO_ADDR
// if p3 = 115 then
1150: LD_VAR 0 3
1154: PUSH
1155: LD_INT 115
1157: EQUAL
1158: IFFALSE 1168
// sRanger := true ;
1160: LD_ADDR_EXP 55
1164: PUSH
1165: LD_INT 1
1167: ST_TO_ADDR
// if p3 = 116 then
1168: LD_VAR 0 3
1172: PUSH
1173: LD_INT 116
1175: EQUAL
1176: IFFALSE 1186
// sComputer := true ;
1178: LD_ADDR_EXP 56
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// if p3 = 117 then
1186: LD_VAR 0 3
1190: PUSH
1191: LD_INT 117
1193: EQUAL
1194: IFFALSE 1204
// s30 := true ;
1196: LD_ADDR_EXP 57
1200: PUSH
1201: LD_INT 1
1203: ST_TO_ADDR
// if p3 = 118 then
1204: LD_VAR 0 3
1208: PUSH
1209: LD_INT 118
1211: EQUAL
1212: IFFALSE 1222
// s60 := true ;
1214: LD_ADDR_EXP 58
1218: PUSH
1219: LD_INT 1
1221: ST_TO_ADDR
// end ; if p2 = hack_mode then
1222: LD_VAR 0 2
1226: PUSH
1227: LD_INT 101
1229: EQUAL
1230: IFFALSE 1358
// begin case p3 of 1 :
1232: LD_VAR 0 3
1236: PUSH
1237: LD_INT 1
1239: DOUBLE
1240: EQUAL
1241: IFTRUE 1245
1243: GO 1252
1245: POP
// hHackUnlimitedResources ; 2 :
1246: CALL 13621 0 0
1250: GO 1358
1252: LD_INT 2
1254: DOUBLE
1255: EQUAL
1256: IFTRUE 1260
1258: GO 1267
1260: POP
// hHackSetLevel10 ; 3 :
1261: CALL 13754 0 0
1265: GO 1358
1267: LD_INT 3
1269: DOUBLE
1270: EQUAL
1271: IFTRUE 1275
1273: GO 1282
1275: POP
// hHackSetLevel10YourUnits ; 4 :
1276: CALL 13839 0 0
1280: GO 1358
1282: LD_INT 4
1284: DOUBLE
1285: EQUAL
1286: IFTRUE 1290
1288: GO 1297
1290: POP
// hHackInvincible ; 5 :
1291: CALL 14287 0 0
1295: GO 1358
1297: LD_INT 5
1299: DOUBLE
1300: EQUAL
1301: IFTRUE 1305
1303: GO 1312
1305: POP
// hHackInvisible ; 6 :
1306: CALL 14398 0 0
1310: GO 1358
1312: LD_INT 6
1314: DOUBLE
1315: EQUAL
1316: IFTRUE 1320
1318: GO 1327
1320: POP
// hHackChangeYourSide ; 7 :
1321: CALL 14455 0 0
1325: GO 1358
1327: LD_INT 7
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1342
1335: POP
// hHackChangeUnitSide ; 8 :
1336: CALL 14497 0 0
1340: GO 1358
1342: LD_INT 8
1344: DOUBLE
1345: EQUAL
1346: IFTRUE 1350
1348: GO 1357
1350: POP
// hHackFog ; end ;
1351: CALL 14598 0 0
1355: GO 1358
1357: POP
// end ; if p2 = game_save_mode then
1358: LD_VAR 0 2
1362: PUSH
1363: LD_INT 102
1365: EQUAL
1366: IFFALSE 1423
// begin if p3 = 1 then
1368: LD_VAR 0 3
1372: PUSH
1373: LD_INT 1
1375: EQUAL
1376: IFFALSE 1388
// globalGameSaveCounter := p4 ;
1378: LD_ADDR_EXP 1
1382: PUSH
1383: LD_VAR 0 4
1387: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
1388: LD_VAR 0 3
1392: PUSH
1393: LD_INT 2
1395: EQUAL
1396: IFFALSE 1404
1398: PUSH
1399: LD_EXP 1
1403: AND
1404: IFFALSE 1423
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1406: LD_STRING setGameSaveCounter(
1408: PUSH
1409: LD_EXP 1
1413: STR
1414: PUSH
1415: LD_STRING )
1417: STR
1418: PPUSH
1419: CALL_OW 559
// end ; end ;
1423: LD_VAR 0 7
1427: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
1428: LD_INT 0
1430: PPUSH
// streamModeActive := false ;
1431: LD_ADDR_EXP 2
1435: PUSH
1436: LD_INT 0
1438: ST_TO_ADDR
// normalCounter := 36 ;
1439: LD_ADDR_EXP 3
1443: PUSH
1444: LD_INT 36
1446: ST_TO_ADDR
// hardcoreCounter := 18 ;
1447: LD_ADDR_EXP 4
1451: PUSH
1452: LD_INT 18
1454: ST_TO_ADDR
// sRocket := false ;
1455: LD_ADDR_EXP 7
1459: PUSH
1460: LD_INT 0
1462: ST_TO_ADDR
// sSpeed := false ;
1463: LD_ADDR_EXP 6
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
// sEngine := false ;
1471: LD_ADDR_EXP 8
1475: PUSH
1476: LD_INT 0
1478: ST_TO_ADDR
// sSpec := false ;
1479: LD_ADDR_EXP 5
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// sLevel := false ;
1487: LD_ADDR_EXP 9
1491: PUSH
1492: LD_INT 0
1494: ST_TO_ADDR
// sArmoury := false ;
1495: LD_ADDR_EXP 10
1499: PUSH
1500: LD_INT 0
1502: ST_TO_ADDR
// sRadar := false ;
1503: LD_ADDR_EXP 11
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// sBunker := false ;
1511: LD_ADDR_EXP 12
1515: PUSH
1516: LD_INT 0
1518: ST_TO_ADDR
// sHack := false ;
1519: LD_ADDR_EXP 13
1523: PUSH
1524: LD_INT 0
1526: ST_TO_ADDR
// sFire := false ;
1527: LD_ADDR_EXP 14
1531: PUSH
1532: LD_INT 0
1534: ST_TO_ADDR
// sRefresh := false ;
1535: LD_ADDR_EXP 15
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// sExp := false ;
1543: LD_ADDR_EXP 16
1547: PUSH
1548: LD_INT 0
1550: ST_TO_ADDR
// sDepot := false ;
1551: LD_ADDR_EXP 17
1555: PUSH
1556: LD_INT 0
1558: ST_TO_ADDR
// sFlag := false ;
1559: LD_ADDR_EXP 18
1563: PUSH
1564: LD_INT 0
1566: ST_TO_ADDR
// sKamikadze := false ;
1567: LD_ADDR_EXP 26
1571: PUSH
1572: LD_INT 0
1574: ST_TO_ADDR
// sTroll := false ;
1575: LD_ADDR_EXP 27
1579: PUSH
1580: LD_INT 0
1582: ST_TO_ADDR
// sSlow := false ;
1583: LD_ADDR_EXP 28
1587: PUSH
1588: LD_INT 0
1590: ST_TO_ADDR
// sLack := false ;
1591: LD_ADDR_EXP 29
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// sTank := false ;
1599: LD_ADDR_EXP 31
1603: PUSH
1604: LD_INT 0
1606: ST_TO_ADDR
// sRemote := false ;
1607: LD_ADDR_EXP 32
1611: PUSH
1612: LD_INT 0
1614: ST_TO_ADDR
// sPowell := false ;
1615: LD_ADDR_EXP 33
1619: PUSH
1620: LD_INT 0
1622: ST_TO_ADDR
// sTeleport := false ;
1623: LD_ADDR_EXP 36
1627: PUSH
1628: LD_INT 0
1630: ST_TO_ADDR
// sOilTower := false ;
1631: LD_ADDR_EXP 38
1635: PUSH
1636: LD_INT 0
1638: ST_TO_ADDR
// sShovel := false ;
1639: LD_ADDR_EXP 39
1643: PUSH
1644: LD_INT 0
1646: ST_TO_ADDR
// sSheik := false ;
1647: LD_ADDR_EXP 40
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// sEarthquake := false ;
1655: LD_ADDR_EXP 42
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// sAI := false ;
1663: LD_ADDR_EXP 43
1667: PUSH
1668: LD_INT 0
1670: ST_TO_ADDR
// sCargo := false ;
1671: LD_ADDR_EXP 46
1675: PUSH
1676: LD_INT 0
1678: ST_TO_ADDR
// sDLaser := false ;
1679: LD_ADDR_EXP 47
1683: PUSH
1684: LD_INT 0
1686: ST_TO_ADDR
// sExchange := false ;
1687: LD_ADDR_EXP 48
1691: PUSH
1692: LD_INT 0
1694: ST_TO_ADDR
// sFac := false ;
1695: LD_ADDR_EXP 49
1699: PUSH
1700: LD_INT 0
1702: ST_TO_ADDR
// sPower := false ;
1703: LD_ADDR_EXP 50
1707: PUSH
1708: LD_INT 0
1710: ST_TO_ADDR
// sRandom := false ;
1711: LD_ADDR_EXP 51
1715: PUSH
1716: LD_INT 0
1718: ST_TO_ADDR
// sShield := false ;
1719: LD_ADDR_EXP 52
1723: PUSH
1724: LD_INT 0
1726: ST_TO_ADDR
// sTime := false ;
1727: LD_ADDR_EXP 53
1731: PUSH
1732: LD_INT 0
1734: ST_TO_ADDR
// sTools := false ;
1735: LD_ADDR_EXP 54
1739: PUSH
1740: LD_INT 0
1742: ST_TO_ADDR
// sSold := false ;
1743: LD_ADDR_EXP 19
1747: PUSH
1748: LD_INT 0
1750: ST_TO_ADDR
// sDiff := false ;
1751: LD_ADDR_EXP 20
1755: PUSH
1756: LD_INT 0
1758: ST_TO_ADDR
// sFog := false ;
1759: LD_ADDR_EXP 23
1763: PUSH
1764: LD_INT 0
1766: ST_TO_ADDR
// sReset := false ;
1767: LD_ADDR_EXP 24
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// sSun := false ;
1775: LD_ADDR_EXP 25
1779: PUSH
1780: LD_INT 0
1782: ST_TO_ADDR
// sTiger := false ;
1783: LD_ADDR_EXP 21
1787: PUSH
1788: LD_INT 0
1790: ST_TO_ADDR
// sBomb := false ;
1791: LD_ADDR_EXP 22
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// sWound := false ;
1799: LD_ADDR_EXP 30
1803: PUSH
1804: LD_INT 0
1806: ST_TO_ADDR
// sBetray := false ;
1807: LD_ADDR_EXP 34
1811: PUSH
1812: LD_INT 0
1814: ST_TO_ADDR
// sContamin := false ;
1815: LD_ADDR_EXP 35
1819: PUSH
1820: LD_INT 0
1822: ST_TO_ADDR
// sOil := false ;
1823: LD_ADDR_EXP 37
1827: PUSH
1828: LD_INT 0
1830: ST_TO_ADDR
// sStu := false ;
1831: LD_ADDR_EXP 41
1835: PUSH
1836: LD_INT 0
1838: ST_TO_ADDR
// sBazooka := false ;
1839: LD_ADDR_EXP 44
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
// sMortar := false ;
1847: LD_ADDR_EXP 45
1851: PUSH
1852: LD_INT 0
1854: ST_TO_ADDR
// sRanger := false ;
1855: LD_ADDR_EXP 55
1859: PUSH
1860: LD_INT 0
1862: ST_TO_ADDR
// sComputer := false ;
1863: LD_ADDR_EXP 56
1867: PUSH
1868: LD_INT 0
1870: ST_TO_ADDR
// s30 := false ;
1871: LD_ADDR_EXP 57
1875: PUSH
1876: LD_INT 0
1878: ST_TO_ADDR
// s60 := false ;
1879: LD_ADDR_EXP 58
1883: PUSH
1884: LD_INT 0
1886: ST_TO_ADDR
// end ;
1887: LD_VAR 0 1
1891: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
1897: PPUSH
1898: PPUSH
1899: PPUSH
1900: PPUSH
// result := [ ] ;
1901: LD_ADDR_VAR 0 2
1905: PUSH
1906: EMPTY
1907: ST_TO_ADDR
// if campaign_id = 1 then
1908: LD_OWVAR 69
1912: PUSH
1913: LD_INT 1
1915: EQUAL
1916: IFFALSE 5082
// begin case mission_number of 1 :
1918: LD_OWVAR 70
1922: PUSH
1923: LD_INT 1
1925: DOUBLE
1926: EQUAL
1927: IFTRUE 1931
1929: GO 2007
1931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
1932: LD_ADDR_VAR 0 2
1936: PUSH
1937: LD_INT 2
1939: PUSH
1940: LD_INT 4
1942: PUSH
1943: LD_INT 11
1945: PUSH
1946: LD_INT 12
1948: PUSH
1949: LD_INT 15
1951: PUSH
1952: LD_INT 16
1954: PUSH
1955: LD_INT 22
1957: PUSH
1958: LD_INT 23
1960: PUSH
1961: LD_INT 26
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 101
1977: PUSH
1978: LD_INT 102
1980: PUSH
1981: LD_INT 106
1983: PUSH
1984: LD_INT 116
1986: PUSH
1987: LD_INT 117
1989: PUSH
1990: LD_INT 118
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: ST_TO_ADDR
2005: GO 5080
2007: LD_INT 2
2009: DOUBLE
2010: EQUAL
2011: IFTRUE 2015
2013: GO 2099
2015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: LD_INT 11
2029: PUSH
2030: LD_INT 12
2032: PUSH
2033: LD_INT 15
2035: PUSH
2036: LD_INT 16
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 23
2044: PUSH
2045: LD_INT 26
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 101
2061: PUSH
2062: LD_INT 102
2064: PUSH
2065: LD_INT 105
2067: PUSH
2068: LD_INT 106
2070: PUSH
2071: LD_INT 108
2073: PUSH
2074: LD_INT 116
2076: PUSH
2077: LD_INT 117
2079: PUSH
2080: LD_INT 118
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
2097: GO 5080
2099: LD_INT 3
2101: DOUBLE
2102: EQUAL
2103: IFTRUE 2107
2105: GO 2195
2107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
2108: LD_ADDR_VAR 0 2
2112: PUSH
2113: LD_INT 2
2115: PUSH
2116: LD_INT 4
2118: PUSH
2119: LD_INT 5
2121: PUSH
2122: LD_INT 11
2124: PUSH
2125: LD_INT 12
2127: PUSH
2128: LD_INT 15
2130: PUSH
2131: LD_INT 16
2133: PUSH
2134: LD_INT 22
2136: PUSH
2137: LD_INT 26
2139: PUSH
2140: LD_INT 36
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 101
2157: PUSH
2158: LD_INT 102
2160: PUSH
2161: LD_INT 105
2163: PUSH
2164: LD_INT 106
2166: PUSH
2167: LD_INT 108
2169: PUSH
2170: LD_INT 116
2172: PUSH
2173: LD_INT 117
2175: PUSH
2176: LD_INT 118
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: LIST
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: ST_TO_ADDR
2193: GO 5080
2195: LD_INT 4
2197: DOUBLE
2198: EQUAL
2199: IFTRUE 2203
2201: GO 2299
2203: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_INT 2
2211: PUSH
2212: LD_INT 4
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: LD_INT 8
2220: PUSH
2221: LD_INT 11
2223: PUSH
2224: LD_INT 12
2226: PUSH
2227: LD_INT 15
2229: PUSH
2230: LD_INT 16
2232: PUSH
2233: LD_INT 22
2235: PUSH
2236: LD_INT 23
2238: PUSH
2239: LD_INT 26
2241: PUSH
2242: LD_INT 36
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 101
2261: PUSH
2262: LD_INT 102
2264: PUSH
2265: LD_INT 105
2267: PUSH
2268: LD_INT 106
2270: PUSH
2271: LD_INT 108
2273: PUSH
2274: LD_INT 116
2276: PUSH
2277: LD_INT 117
2279: PUSH
2280: LD_INT 118
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: ST_TO_ADDR
2297: GO 5080
2299: LD_INT 5
2301: DOUBLE
2302: EQUAL
2303: IFTRUE 2307
2305: GO 2419
2307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_INT 2
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: LD_INT 5
2321: PUSH
2322: LD_INT 6
2324: PUSH
2325: LD_INT 8
2327: PUSH
2328: LD_INT 11
2330: PUSH
2331: LD_INT 12
2333: PUSH
2334: LD_INT 15
2336: PUSH
2337: LD_INT 16
2339: PUSH
2340: LD_INT 22
2342: PUSH
2343: LD_INT 23
2345: PUSH
2346: LD_INT 25
2348: PUSH
2349: LD_INT 26
2351: PUSH
2352: LD_INT 36
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 101
2373: PUSH
2374: LD_INT 102
2376: PUSH
2377: LD_INT 105
2379: PUSH
2380: LD_INT 106
2382: PUSH
2383: LD_INT 108
2385: PUSH
2386: LD_INT 109
2388: PUSH
2389: LD_INT 112
2391: PUSH
2392: LD_INT 116
2394: PUSH
2395: LD_INT 117
2397: PUSH
2398: LD_INT 118
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: LIST
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: ST_TO_ADDR
2417: GO 5080
2419: LD_INT 6
2421: DOUBLE
2422: EQUAL
2423: IFTRUE 2427
2425: GO 2559
2427: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: LD_INT 2
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 6
2444: PUSH
2445: LD_INT 8
2447: PUSH
2448: LD_INT 11
2450: PUSH
2451: LD_INT 12
2453: PUSH
2454: LD_INT 15
2456: PUSH
2457: LD_INT 16
2459: PUSH
2460: LD_INT 20
2462: PUSH
2463: LD_INT 21
2465: PUSH
2466: LD_INT 22
2468: PUSH
2469: LD_INT 23
2471: PUSH
2472: LD_INT 25
2474: PUSH
2475: LD_INT 26
2477: PUSH
2478: LD_INT 30
2480: PUSH
2481: LD_INT 31
2483: PUSH
2484: LD_INT 32
2486: PUSH
2487: LD_INT 36
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 101
2513: PUSH
2514: LD_INT 102
2516: PUSH
2517: LD_INT 105
2519: PUSH
2520: LD_INT 106
2522: PUSH
2523: LD_INT 108
2525: PUSH
2526: LD_INT 109
2528: PUSH
2529: LD_INT 112
2531: PUSH
2532: LD_INT 116
2534: PUSH
2535: LD_INT 117
2537: PUSH
2538: LD_INT 118
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: ST_TO_ADDR
2557: GO 5080
2559: LD_INT 7
2561: DOUBLE
2562: EQUAL
2563: IFTRUE 2567
2565: GO 2679
2567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
2568: LD_ADDR_VAR 0 2
2572: PUSH
2573: LD_INT 2
2575: PUSH
2576: LD_INT 4
2578: PUSH
2579: LD_INT 5
2581: PUSH
2582: LD_INT 7
2584: PUSH
2585: LD_INT 11
2587: PUSH
2588: LD_INT 12
2590: PUSH
2591: LD_INT 15
2593: PUSH
2594: LD_INT 16
2596: PUSH
2597: LD_INT 20
2599: PUSH
2600: LD_INT 21
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 23
2608: PUSH
2609: LD_INT 25
2611: PUSH
2612: LD_INT 26
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 101
2633: PUSH
2634: LD_INT 102
2636: PUSH
2637: LD_INT 103
2639: PUSH
2640: LD_INT 105
2642: PUSH
2643: LD_INT 106
2645: PUSH
2646: LD_INT 108
2648: PUSH
2649: LD_INT 112
2651: PUSH
2652: LD_INT 116
2654: PUSH
2655: LD_INT 117
2657: PUSH
2658: LD_INT 118
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: ST_TO_ADDR
2677: GO 5080
2679: LD_INT 8
2681: DOUBLE
2682: EQUAL
2683: IFTRUE 2687
2685: GO 2827
2687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
2688: LD_ADDR_VAR 0 2
2692: PUSH
2693: LD_INT 2
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: LD_INT 6
2704: PUSH
2705: LD_INT 7
2707: PUSH
2708: LD_INT 8
2710: PUSH
2711: LD_INT 11
2713: PUSH
2714: LD_INT 12
2716: PUSH
2717: LD_INT 15
2719: PUSH
2720: LD_INT 16
2722: PUSH
2723: LD_INT 20
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 22
2731: PUSH
2732: LD_INT 23
2734: PUSH
2735: LD_INT 25
2737: PUSH
2738: LD_INT 26
2740: PUSH
2741: LD_INT 30
2743: PUSH
2744: LD_INT 31
2746: PUSH
2747: LD_INT 32
2749: PUSH
2750: LD_INT 36
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 101
2777: PUSH
2778: LD_INT 102
2780: PUSH
2781: LD_INT 103
2783: PUSH
2784: LD_INT 105
2786: PUSH
2787: LD_INT 106
2789: PUSH
2790: LD_INT 108
2792: PUSH
2793: LD_INT 109
2795: PUSH
2796: LD_INT 112
2798: PUSH
2799: LD_INT 116
2801: PUSH
2802: LD_INT 117
2804: PUSH
2805: LD_INT 118
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: ST_TO_ADDR
2825: GO 5080
2827: LD_INT 9
2829: DOUBLE
2830: EQUAL
2831: IFTRUE 2835
2833: GO 2983
2835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
2836: LD_ADDR_VAR 0 2
2840: PUSH
2841: LD_INT 2
2843: PUSH
2844: LD_INT 4
2846: PUSH
2847: LD_INT 5
2849: PUSH
2850: LD_INT 6
2852: PUSH
2853: LD_INT 7
2855: PUSH
2856: LD_INT 8
2858: PUSH
2859: LD_INT 11
2861: PUSH
2862: LD_INT 12
2864: PUSH
2865: LD_INT 15
2867: PUSH
2868: LD_INT 16
2870: PUSH
2871: LD_INT 20
2873: PUSH
2874: LD_INT 21
2876: PUSH
2877: LD_INT 22
2879: PUSH
2880: LD_INT 23
2882: PUSH
2883: LD_INT 25
2885: PUSH
2886: LD_INT 26
2888: PUSH
2889: LD_INT 28
2891: PUSH
2892: LD_INT 30
2894: PUSH
2895: LD_INT 31
2897: PUSH
2898: LD_INT 32
2900: PUSH
2901: LD_INT 36
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 101
2929: PUSH
2930: LD_INT 102
2932: PUSH
2933: LD_INT 103
2935: PUSH
2936: LD_INT 105
2938: PUSH
2939: LD_INT 106
2941: PUSH
2942: LD_INT 108
2944: PUSH
2945: LD_INT 109
2947: PUSH
2948: LD_INT 112
2950: PUSH
2951: LD_INT 114
2953: PUSH
2954: LD_INT 116
2956: PUSH
2957: LD_INT 117
2959: PUSH
2960: LD_INT 118
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: ST_TO_ADDR
2981: GO 5080
2983: LD_INT 10
2985: DOUBLE
2986: EQUAL
2987: IFTRUE 2991
2989: GO 3187
2991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: LD_INT 4
3002: PUSH
3003: LD_INT 5
3005: PUSH
3006: LD_INT 6
3008: PUSH
3009: LD_INT 7
3011: PUSH
3012: LD_INT 8
3014: PUSH
3015: LD_INT 9
3017: PUSH
3018: LD_INT 10
3020: PUSH
3021: LD_INT 11
3023: PUSH
3024: LD_INT 12
3026: PUSH
3027: LD_INT 13
3029: PUSH
3030: LD_INT 14
3032: PUSH
3033: LD_INT 15
3035: PUSH
3036: LD_INT 16
3038: PUSH
3039: LD_INT 17
3041: PUSH
3042: LD_INT 18
3044: PUSH
3045: LD_INT 19
3047: PUSH
3048: LD_INT 20
3050: PUSH
3051: LD_INT 21
3053: PUSH
3054: LD_INT 22
3056: PUSH
3057: LD_INT 23
3059: PUSH
3060: LD_INT 24
3062: PUSH
3063: LD_INT 25
3065: PUSH
3066: LD_INT 26
3068: PUSH
3069: LD_INT 28
3071: PUSH
3072: LD_INT 30
3074: PUSH
3075: LD_INT 31
3077: PUSH
3078: LD_INT 32
3080: PUSH
3081: LD_INT 36
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: LIST
3114: PUSH
3115: LD_INT 101
3117: PUSH
3118: LD_INT 102
3120: PUSH
3121: LD_INT 103
3123: PUSH
3124: LD_INT 104
3126: PUSH
3127: LD_INT 105
3129: PUSH
3130: LD_INT 106
3132: PUSH
3133: LD_INT 107
3135: PUSH
3136: LD_INT 108
3138: PUSH
3139: LD_INT 109
3141: PUSH
3142: LD_INT 110
3144: PUSH
3145: LD_INT 111
3147: PUSH
3148: LD_INT 112
3150: PUSH
3151: LD_INT 114
3153: PUSH
3154: LD_INT 116
3156: PUSH
3157: LD_INT 117
3159: PUSH
3160: LD_INT 118
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: ST_TO_ADDR
3185: GO 5080
3187: LD_INT 11
3189: DOUBLE
3190: EQUAL
3191: IFTRUE 3195
3193: GO 3399
3195: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
3196: LD_ADDR_VAR 0 2
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 5
3212: PUSH
3213: LD_INT 6
3215: PUSH
3216: LD_INT 7
3218: PUSH
3219: LD_INT 8
3221: PUSH
3222: LD_INT 9
3224: PUSH
3225: LD_INT 10
3227: PUSH
3228: LD_INT 11
3230: PUSH
3231: LD_INT 12
3233: PUSH
3234: LD_INT 13
3236: PUSH
3237: LD_INT 14
3239: PUSH
3240: LD_INT 15
3242: PUSH
3243: LD_INT 16
3245: PUSH
3246: LD_INT 17
3248: PUSH
3249: LD_INT 18
3251: PUSH
3252: LD_INT 19
3254: PUSH
3255: LD_INT 20
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 22
3263: PUSH
3264: LD_INT 23
3266: PUSH
3267: LD_INT 24
3269: PUSH
3270: LD_INT 25
3272: PUSH
3273: LD_INT 26
3275: PUSH
3276: LD_INT 28
3278: PUSH
3279: LD_INT 30
3281: PUSH
3282: LD_INT 31
3284: PUSH
3285: LD_INT 32
3287: PUSH
3288: LD_INT 34
3290: PUSH
3291: LD_INT 36
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 101
3329: PUSH
3330: LD_INT 102
3332: PUSH
3333: LD_INT 103
3335: PUSH
3336: LD_INT 104
3338: PUSH
3339: LD_INT 105
3341: PUSH
3342: LD_INT 106
3344: PUSH
3345: LD_INT 107
3347: PUSH
3348: LD_INT 108
3350: PUSH
3351: LD_INT 109
3353: PUSH
3354: LD_INT 110
3356: PUSH
3357: LD_INT 111
3359: PUSH
3360: LD_INT 112
3362: PUSH
3363: LD_INT 114
3365: PUSH
3366: LD_INT 116
3368: PUSH
3369: LD_INT 117
3371: PUSH
3372: LD_INT 118
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: ST_TO_ADDR
3397: GO 5080
3399: LD_INT 12
3401: DOUBLE
3402: EQUAL
3403: IFTRUE 3407
3405: GO 3627
3407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: LD_INT 1
3415: PUSH
3416: LD_INT 2
3418: PUSH
3419: LD_INT 3
3421: PUSH
3422: LD_INT 4
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: LD_INT 6
3430: PUSH
3431: LD_INT 7
3433: PUSH
3434: LD_INT 8
3436: PUSH
3437: LD_INT 9
3439: PUSH
3440: LD_INT 10
3442: PUSH
3443: LD_INT 11
3445: PUSH
3446: LD_INT 12
3448: PUSH
3449: LD_INT 13
3451: PUSH
3452: LD_INT 14
3454: PUSH
3455: LD_INT 15
3457: PUSH
3458: LD_INT 16
3460: PUSH
3461: LD_INT 17
3463: PUSH
3464: LD_INT 18
3466: PUSH
3467: LD_INT 19
3469: PUSH
3470: LD_INT 20
3472: PUSH
3473: LD_INT 21
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 23
3481: PUSH
3482: LD_INT 24
3484: PUSH
3485: LD_INT 25
3487: PUSH
3488: LD_INT 26
3490: PUSH
3491: LD_INT 27
3493: PUSH
3494: LD_INT 28
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 31
3502: PUSH
3503: LD_INT 32
3505: PUSH
3506: LD_INT 33
3508: PUSH
3509: LD_INT 34
3511: PUSH
3512: LD_INT 36
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 101
3553: PUSH
3554: LD_INT 102
3556: PUSH
3557: LD_INT 103
3559: PUSH
3560: LD_INT 104
3562: PUSH
3563: LD_INT 105
3565: PUSH
3566: LD_INT 106
3568: PUSH
3569: LD_INT 107
3571: PUSH
3572: LD_INT 108
3574: PUSH
3575: LD_INT 109
3577: PUSH
3578: LD_INT 110
3580: PUSH
3581: LD_INT 111
3583: PUSH
3584: LD_INT 112
3586: PUSH
3587: LD_INT 113
3589: PUSH
3590: LD_INT 114
3592: PUSH
3593: LD_INT 116
3595: PUSH
3596: LD_INT 117
3598: PUSH
3599: LD_INT 118
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: ST_TO_ADDR
3625: GO 5080
3627: LD_INT 13
3629: DOUBLE
3630: EQUAL
3631: IFTRUE 3635
3633: GO 3843
3635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: LD_INT 1
3643: PUSH
3644: LD_INT 2
3646: PUSH
3647: LD_INT 3
3649: PUSH
3650: LD_INT 4
3652: PUSH
3653: LD_INT 5
3655: PUSH
3656: LD_INT 8
3658: PUSH
3659: LD_INT 9
3661: PUSH
3662: LD_INT 10
3664: PUSH
3665: LD_INT 11
3667: PUSH
3668: LD_INT 12
3670: PUSH
3671: LD_INT 14
3673: PUSH
3674: LD_INT 15
3676: PUSH
3677: LD_INT 16
3679: PUSH
3680: LD_INT 17
3682: PUSH
3683: LD_INT 18
3685: PUSH
3686: LD_INT 19
3688: PUSH
3689: LD_INT 20
3691: PUSH
3692: LD_INT 21
3694: PUSH
3695: LD_INT 22
3697: PUSH
3698: LD_INT 23
3700: PUSH
3701: LD_INT 24
3703: PUSH
3704: LD_INT 25
3706: PUSH
3707: LD_INT 26
3709: PUSH
3710: LD_INT 27
3712: PUSH
3713: LD_INT 28
3715: PUSH
3716: LD_INT 30
3718: PUSH
3719: LD_INT 31
3721: PUSH
3722: LD_INT 32
3724: PUSH
3725: LD_INT 33
3727: PUSH
3728: LD_INT 34
3730: PUSH
3731: LD_INT 36
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 101
3769: PUSH
3770: LD_INT 102
3772: PUSH
3773: LD_INT 103
3775: PUSH
3776: LD_INT 104
3778: PUSH
3779: LD_INT 105
3781: PUSH
3782: LD_INT 106
3784: PUSH
3785: LD_INT 107
3787: PUSH
3788: LD_INT 108
3790: PUSH
3791: LD_INT 109
3793: PUSH
3794: LD_INT 110
3796: PUSH
3797: LD_INT 111
3799: PUSH
3800: LD_INT 112
3802: PUSH
3803: LD_INT 113
3805: PUSH
3806: LD_INT 114
3808: PUSH
3809: LD_INT 116
3811: PUSH
3812: LD_INT 117
3814: PUSH
3815: LD_INT 118
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: ST_TO_ADDR
3841: GO 5080
3843: LD_INT 14
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 4075
3851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
3852: LD_ADDR_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 3
3865: PUSH
3866: LD_INT 4
3868: PUSH
3869: LD_INT 5
3871: PUSH
3872: LD_INT 6
3874: PUSH
3875: LD_INT 7
3877: PUSH
3878: LD_INT 8
3880: PUSH
3881: LD_INT 9
3883: PUSH
3884: LD_INT 10
3886: PUSH
3887: LD_INT 11
3889: PUSH
3890: LD_INT 12
3892: PUSH
3893: LD_INT 13
3895: PUSH
3896: LD_INT 14
3898: PUSH
3899: LD_INT 15
3901: PUSH
3902: LD_INT 16
3904: PUSH
3905: LD_INT 17
3907: PUSH
3908: LD_INT 18
3910: PUSH
3911: LD_INT 19
3913: PUSH
3914: LD_INT 20
3916: PUSH
3917: LD_INT 21
3919: PUSH
3920: LD_INT 22
3922: PUSH
3923: LD_INT 23
3925: PUSH
3926: LD_INT 24
3928: PUSH
3929: LD_INT 25
3931: PUSH
3932: LD_INT 26
3934: PUSH
3935: LD_INT 27
3937: PUSH
3938: LD_INT 28
3940: PUSH
3941: LD_INT 29
3943: PUSH
3944: LD_INT 30
3946: PUSH
3947: LD_INT 31
3949: PUSH
3950: LD_INT 32
3952: PUSH
3953: LD_INT 33
3955: PUSH
3956: LD_INT 34
3958: PUSH
3959: LD_INT 36
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 101
4001: PUSH
4002: LD_INT 102
4004: PUSH
4005: LD_INT 103
4007: PUSH
4008: LD_INT 104
4010: PUSH
4011: LD_INT 105
4013: PUSH
4014: LD_INT 106
4016: PUSH
4017: LD_INT 107
4019: PUSH
4020: LD_INT 108
4022: PUSH
4023: LD_INT 109
4025: PUSH
4026: LD_INT 110
4028: PUSH
4029: LD_INT 111
4031: PUSH
4032: LD_INT 112
4034: PUSH
4035: LD_INT 113
4037: PUSH
4038: LD_INT 114
4040: PUSH
4041: LD_INT 116
4043: PUSH
4044: LD_INT 117
4046: PUSH
4047: LD_INT 118
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: ST_TO_ADDR
4073: GO 5080
4075: LD_INT 15
4077: DOUBLE
4078: EQUAL
4079: IFTRUE 4083
4081: GO 4307
4083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
4084: LD_ADDR_VAR 0 2
4088: PUSH
4089: LD_INT 1
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 4
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: LD_INT 6
4106: PUSH
4107: LD_INT 7
4109: PUSH
4110: LD_INT 8
4112: PUSH
4113: LD_INT 9
4115: PUSH
4116: LD_INT 10
4118: PUSH
4119: LD_INT 11
4121: PUSH
4122: LD_INT 12
4124: PUSH
4125: LD_INT 13
4127: PUSH
4128: LD_INT 14
4130: PUSH
4131: LD_INT 15
4133: PUSH
4134: LD_INT 16
4136: PUSH
4137: LD_INT 17
4139: PUSH
4140: LD_INT 18
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 20
4148: PUSH
4149: LD_INT 21
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 23
4157: PUSH
4158: LD_INT 24
4160: PUSH
4161: LD_INT 25
4163: PUSH
4164: LD_INT 26
4166: PUSH
4167: LD_INT 27
4169: PUSH
4170: LD_INT 28
4172: PUSH
4173: LD_INT 29
4175: PUSH
4176: LD_INT 30
4178: PUSH
4179: LD_INT 31
4181: PUSH
4182: LD_INT 32
4184: PUSH
4185: LD_INT 33
4187: PUSH
4188: LD_INT 34
4190: PUSH
4191: LD_INT 36
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 101
4233: PUSH
4234: LD_INT 102
4236: PUSH
4237: LD_INT 103
4239: PUSH
4240: LD_INT 104
4242: PUSH
4243: LD_INT 105
4245: PUSH
4246: LD_INT 106
4248: PUSH
4249: LD_INT 107
4251: PUSH
4252: LD_INT 108
4254: PUSH
4255: LD_INT 109
4257: PUSH
4258: LD_INT 110
4260: PUSH
4261: LD_INT 111
4263: PUSH
4264: LD_INT 112
4266: PUSH
4267: LD_INT 113
4269: PUSH
4270: LD_INT 114
4272: PUSH
4273: LD_INT 116
4275: PUSH
4276: LD_INT 117
4278: PUSH
4279: LD_INT 118
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: ST_TO_ADDR
4305: GO 5080
4307: LD_INT 16
4309: DOUBLE
4310: EQUAL
4311: IFTRUE 4315
4313: GO 4451
4315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
4316: LD_ADDR_VAR 0 2
4320: PUSH
4321: LD_INT 2
4323: PUSH
4324: LD_INT 4
4326: PUSH
4327: LD_INT 5
4329: PUSH
4330: LD_INT 7
4332: PUSH
4333: LD_INT 11
4335: PUSH
4336: LD_INT 12
4338: PUSH
4339: LD_INT 15
4341: PUSH
4342: LD_INT 16
4344: PUSH
4345: LD_INT 20
4347: PUSH
4348: LD_INT 21
4350: PUSH
4351: LD_INT 22
4353: PUSH
4354: LD_INT 23
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 26
4362: PUSH
4363: LD_INT 30
4365: PUSH
4366: LD_INT 31
4368: PUSH
4369: LD_INT 32
4371: PUSH
4372: LD_INT 33
4374: PUSH
4375: LD_INT 34
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 101
4401: PUSH
4402: LD_INT 102
4404: PUSH
4405: LD_INT 103
4407: PUSH
4408: LD_INT 106
4410: PUSH
4411: LD_INT 108
4413: PUSH
4414: LD_INT 112
4416: PUSH
4417: LD_INT 113
4419: PUSH
4420: LD_INT 114
4422: PUSH
4423: LD_INT 116
4425: PUSH
4426: LD_INT 117
4428: PUSH
4429: LD_INT 118
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: ST_TO_ADDR
4449: GO 5080
4451: LD_INT 17
4453: DOUBLE
4454: EQUAL
4455: IFTRUE 4459
4457: GO 4683
4459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_INT 1
4467: PUSH
4468: LD_INT 2
4470: PUSH
4471: LD_INT 3
4473: PUSH
4474: LD_INT 4
4476: PUSH
4477: LD_INT 5
4479: PUSH
4480: LD_INT 6
4482: PUSH
4483: LD_INT 7
4485: PUSH
4486: LD_INT 8
4488: PUSH
4489: LD_INT 9
4491: PUSH
4492: LD_INT 10
4494: PUSH
4495: LD_INT 11
4497: PUSH
4498: LD_INT 12
4500: PUSH
4501: LD_INT 13
4503: PUSH
4504: LD_INT 14
4506: PUSH
4507: LD_INT 15
4509: PUSH
4510: LD_INT 16
4512: PUSH
4513: LD_INT 17
4515: PUSH
4516: LD_INT 18
4518: PUSH
4519: LD_INT 19
4521: PUSH
4522: LD_INT 20
4524: PUSH
4525: LD_INT 21
4527: PUSH
4528: LD_INT 22
4530: PUSH
4531: LD_INT 23
4533: PUSH
4534: LD_INT 24
4536: PUSH
4537: LD_INT 25
4539: PUSH
4540: LD_INT 26
4542: PUSH
4543: LD_INT 27
4545: PUSH
4546: LD_INT 28
4548: PUSH
4549: LD_INT 29
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 31
4557: PUSH
4558: LD_INT 32
4560: PUSH
4561: LD_INT 33
4563: PUSH
4564: LD_INT 34
4566: PUSH
4567: LD_INT 36
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 101
4609: PUSH
4610: LD_INT 102
4612: PUSH
4613: LD_INT 103
4615: PUSH
4616: LD_INT 104
4618: PUSH
4619: LD_INT 105
4621: PUSH
4622: LD_INT 106
4624: PUSH
4625: LD_INT 107
4627: PUSH
4628: LD_INT 108
4630: PUSH
4631: LD_INT 109
4633: PUSH
4634: LD_INT 110
4636: PUSH
4637: LD_INT 111
4639: PUSH
4640: LD_INT 112
4642: PUSH
4643: LD_INT 113
4645: PUSH
4646: LD_INT 114
4648: PUSH
4649: LD_INT 116
4651: PUSH
4652: LD_INT 117
4654: PUSH
4655: LD_INT 118
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: ST_TO_ADDR
4681: GO 5080
4683: LD_INT 18
4685: DOUBLE
4686: EQUAL
4687: IFTRUE 4691
4689: GO 4839
4691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: LD_INT 2
4699: PUSH
4700: LD_INT 4
4702: PUSH
4703: LD_INT 5
4705: PUSH
4706: LD_INT 7
4708: PUSH
4709: LD_INT 11
4711: PUSH
4712: LD_INT 12
4714: PUSH
4715: LD_INT 15
4717: PUSH
4718: LD_INT 16
4720: PUSH
4721: LD_INT 20
4723: PUSH
4724: LD_INT 21
4726: PUSH
4727: LD_INT 22
4729: PUSH
4730: LD_INT 23
4732: PUSH
4733: LD_INT 25
4735: PUSH
4736: LD_INT 26
4738: PUSH
4739: LD_INT 30
4741: PUSH
4742: LD_INT 31
4744: PUSH
4745: LD_INT 32
4747: PUSH
4748: LD_INT 33
4750: PUSH
4751: LD_INT 34
4753: PUSH
4754: LD_INT 35
4756: PUSH
4757: LD_INT 36
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 101
4785: PUSH
4786: LD_INT 102
4788: PUSH
4789: LD_INT 103
4791: PUSH
4792: LD_INT 106
4794: PUSH
4795: LD_INT 108
4797: PUSH
4798: LD_INT 112
4800: PUSH
4801: LD_INT 113
4803: PUSH
4804: LD_INT 114
4806: PUSH
4807: LD_INT 115
4809: PUSH
4810: LD_INT 116
4812: PUSH
4813: LD_INT 117
4815: PUSH
4816: LD_INT 118
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 5080
4839: LD_INT 19
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 5079
4847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: LD_INT 4
4864: PUSH
4865: LD_INT 5
4867: PUSH
4868: LD_INT 6
4870: PUSH
4871: LD_INT 7
4873: PUSH
4874: LD_INT 8
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: LD_INT 10
4882: PUSH
4883: LD_INT 11
4885: PUSH
4886: LD_INT 12
4888: PUSH
4889: LD_INT 13
4891: PUSH
4892: LD_INT 14
4894: PUSH
4895: LD_INT 15
4897: PUSH
4898: LD_INT 16
4900: PUSH
4901: LD_INT 17
4903: PUSH
4904: LD_INT 18
4906: PUSH
4907: LD_INT 19
4909: PUSH
4910: LD_INT 20
4912: PUSH
4913: LD_INT 21
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_INT 23
4921: PUSH
4922: LD_INT 24
4924: PUSH
4925: LD_INT 25
4927: PUSH
4928: LD_INT 26
4930: PUSH
4931: LD_INT 27
4933: PUSH
4934: LD_INT 28
4936: PUSH
4937: LD_INT 29
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 31
4945: PUSH
4946: LD_INT 32
4948: PUSH
4949: LD_INT 33
4951: PUSH
4952: LD_INT 34
4954: PUSH
4955: LD_INT 35
4957: PUSH
4958: LD_INT 36
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: PUSH
4999: LD_INT 101
5001: PUSH
5002: LD_INT 102
5004: PUSH
5005: LD_INT 103
5007: PUSH
5008: LD_INT 104
5010: PUSH
5011: LD_INT 105
5013: PUSH
5014: LD_INT 106
5016: PUSH
5017: LD_INT 107
5019: PUSH
5020: LD_INT 108
5022: PUSH
5023: LD_INT 109
5025: PUSH
5026: LD_INT 110
5028: PUSH
5029: LD_INT 111
5031: PUSH
5032: LD_INT 112
5034: PUSH
5035: LD_INT 113
5037: PUSH
5038: LD_INT 114
5040: PUSH
5041: LD_INT 115
5043: PUSH
5044: LD_INT 116
5046: PUSH
5047: LD_INT 117
5049: PUSH
5050: LD_INT 118
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: ST_TO_ADDR
5077: GO 5080
5079: POP
// end else
5080: GO 5311
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
5082: LD_ADDR_VAR 0 2
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: LD_INT 2
5092: PUSH
5093: LD_INT 3
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: LD_INT 5
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: LD_INT 7
5107: PUSH
5108: LD_INT 8
5110: PUSH
5111: LD_INT 9
5113: PUSH
5114: LD_INT 10
5116: PUSH
5117: LD_INT 11
5119: PUSH
5120: LD_INT 12
5122: PUSH
5123: LD_INT 13
5125: PUSH
5126: LD_INT 14
5128: PUSH
5129: LD_INT 15
5131: PUSH
5132: LD_INT 16
5134: PUSH
5135: LD_INT 17
5137: PUSH
5138: LD_INT 18
5140: PUSH
5141: LD_INT 19
5143: PUSH
5144: LD_INT 20
5146: PUSH
5147: LD_INT 21
5149: PUSH
5150: LD_INT 22
5152: PUSH
5153: LD_INT 23
5155: PUSH
5156: LD_INT 24
5158: PUSH
5159: LD_INT 25
5161: PUSH
5162: LD_INT 26
5164: PUSH
5165: LD_INT 27
5167: PUSH
5168: LD_INT 28
5170: PUSH
5171: LD_INT 29
5173: PUSH
5174: LD_INT 30
5176: PUSH
5177: LD_INT 31
5179: PUSH
5180: LD_INT 32
5182: PUSH
5183: LD_INT 33
5185: PUSH
5186: LD_INT 34
5188: PUSH
5189: LD_INT 35
5191: PUSH
5192: LD_INT 36
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 101
5235: PUSH
5236: LD_INT 102
5238: PUSH
5239: LD_INT 103
5241: PUSH
5242: LD_INT 104
5244: PUSH
5245: LD_INT 105
5247: PUSH
5248: LD_INT 106
5250: PUSH
5251: LD_INT 107
5253: PUSH
5254: LD_INT 108
5256: PUSH
5257: LD_INT 109
5259: PUSH
5260: LD_INT 110
5262: PUSH
5263: LD_INT 111
5265: PUSH
5266: LD_INT 112
5268: PUSH
5269: LD_INT 113
5271: PUSH
5272: LD_INT 114
5274: PUSH
5275: LD_INT 115
5277: PUSH
5278: LD_INT 116
5280: PUSH
5281: LD_INT 117
5283: PUSH
5284: LD_INT 118
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: ST_TO_ADDR
// if result then
5311: LD_VAR 0 2
5315: IFFALSE 6101
// begin normal :=  ;
5317: LD_ADDR_VAR 0 5
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// hardcore :=  ;
5325: LD_ADDR_VAR 0 6
5329: PUSH
5330: LD_STRING 
5332: ST_TO_ADDR
// active :=  ;
5333: LD_ADDR_VAR 0 7
5337: PUSH
5338: LD_STRING 
5340: ST_TO_ADDR
// for i = 1 to normalCounter do
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: DOUBLE
5347: LD_INT 1
5349: DEC
5350: ST_TO_ADDR
5351: LD_EXP 3
5355: PUSH
5356: FOR_TO
5357: IFFALSE 5458
// begin tmp := 0 ;
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_STRING 0
5366: ST_TO_ADDR
// if result [ 1 ] then
5367: LD_VAR 0 2
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: IFFALSE 5440
// if result [ 1 ] [ 1 ] = i then
5377: LD_VAR 0 2
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PUSH
5386: LD_INT 1
5388: ARRAY
5389: PUSH
5390: LD_VAR 0 8
5394: EQUAL
5395: IFFALSE 5440
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
5397: LD_ADDR_VAR 0 2
5401: PUSH
5402: LD_VAR 0 2
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_VAR 0 2
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: CALL_OW 3
5426: PPUSH
5427: CALL_OW 1
5431: ST_TO_ADDR
// tmp := 1 ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: LD_STRING 1
5439: ST_TO_ADDR
// end ; normal := normal & tmp ;
5440: LD_ADDR_VAR 0 5
5444: PUSH
5445: LD_VAR 0 5
5449: PUSH
5450: LD_VAR 0 3
5454: STR
5455: ST_TO_ADDR
// end ;
5456: GO 5356
5458: POP
5459: POP
// for i = 1 to hardcoreCounter do
5460: LD_ADDR_VAR 0 8
5464: PUSH
5465: DOUBLE
5466: LD_INT 1
5468: DEC
5469: ST_TO_ADDR
5470: LD_EXP 4
5474: PUSH
5475: FOR_TO
5476: IFFALSE 5581
// begin tmp := 0 ;
5478: LD_ADDR_VAR 0 3
5482: PUSH
5483: LD_STRING 0
5485: ST_TO_ADDR
// if result [ 2 ] then
5486: LD_VAR 0 2
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: IFFALSE 5563
// if result [ 2 ] [ 1 ] = 100 + i then
5496: LD_VAR 0 2
5500: PUSH
5501: LD_INT 2
5503: ARRAY
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PUSH
5509: LD_INT 100
5511: PUSH
5512: LD_VAR 0 8
5516: PLUS
5517: EQUAL
5518: IFFALSE 5563
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
5520: LD_ADDR_VAR 0 2
5524: PUSH
5525: LD_VAR 0 2
5529: PPUSH
5530: LD_INT 2
5532: PPUSH
5533: LD_VAR 0 2
5537: PUSH
5538: LD_INT 2
5540: ARRAY
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: CALL_OW 3
5549: PPUSH
5550: CALL_OW 1
5554: ST_TO_ADDR
// tmp := 1 ;
5555: LD_ADDR_VAR 0 3
5559: PUSH
5560: LD_STRING 1
5562: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
5563: LD_ADDR_VAR 0 6
5567: PUSH
5568: LD_VAR 0 6
5572: PUSH
5573: LD_VAR 0 3
5577: STR
5578: ST_TO_ADDR
// end ;
5579: GO 5475
5581: POP
5582: POP
// if isGameLoad then
5583: LD_VAR 0 1
5587: IFFALSE 6062
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
5589: LD_ADDR_VAR 0 4
5593: PUSH
5594: LD_EXP 7
5598: PUSH
5599: LD_EXP 6
5603: PUSH
5604: LD_EXP 8
5608: PUSH
5609: LD_EXP 5
5613: PUSH
5614: LD_EXP 9
5618: PUSH
5619: LD_EXP 10
5623: PUSH
5624: LD_EXP 11
5628: PUSH
5629: LD_EXP 12
5633: PUSH
5634: LD_EXP 13
5638: PUSH
5639: LD_EXP 14
5643: PUSH
5644: LD_EXP 15
5648: PUSH
5649: LD_EXP 16
5653: PUSH
5654: LD_EXP 17
5658: PUSH
5659: LD_EXP 18
5663: PUSH
5664: LD_EXP 26
5668: PUSH
5669: LD_EXP 27
5673: PUSH
5674: LD_EXP 28
5678: PUSH
5679: LD_EXP 29
5683: PUSH
5684: LD_EXP 31
5688: PUSH
5689: LD_EXP 32
5693: PUSH
5694: LD_EXP 33
5698: PUSH
5699: LD_EXP 36
5703: PUSH
5704: LD_EXP 38
5708: PUSH
5709: LD_EXP 39
5713: PUSH
5714: LD_EXP 40
5718: PUSH
5719: LD_EXP 42
5723: PUSH
5724: LD_EXP 43
5728: PUSH
5729: LD_EXP 46
5733: PUSH
5734: LD_EXP 47
5738: PUSH
5739: LD_EXP 48
5743: PUSH
5744: LD_EXP 49
5748: PUSH
5749: LD_EXP 50
5753: PUSH
5754: LD_EXP 51
5758: PUSH
5759: LD_EXP 52
5763: PUSH
5764: LD_EXP 53
5768: PUSH
5769: LD_EXP 54
5773: PUSH
5774: LD_EXP 19
5778: PUSH
5779: LD_EXP 20
5783: PUSH
5784: LD_EXP 23
5788: PUSH
5789: LD_EXP 24
5793: PUSH
5794: LD_EXP 25
5798: PUSH
5799: LD_EXP 21
5803: PUSH
5804: LD_EXP 22
5808: PUSH
5809: LD_EXP 30
5813: PUSH
5814: LD_EXP 34
5818: PUSH
5819: LD_EXP 35
5823: PUSH
5824: LD_EXP 37
5828: PUSH
5829: LD_EXP 41
5833: PUSH
5834: LD_EXP 44
5838: PUSH
5839: LD_EXP 45
5843: PUSH
5844: LD_EXP 55
5848: PUSH
5849: LD_EXP 56
5853: PUSH
5854: LD_EXP 57
5858: PUSH
5859: LD_EXP 58
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: ST_TO_ADDR
// tmp :=  ;
5920: LD_ADDR_VAR 0 3
5924: PUSH
5925: LD_STRING 
5927: ST_TO_ADDR
// for i = 1 to normalCounter do
5928: LD_ADDR_VAR 0 8
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_EXP 3
5942: PUSH
5943: FOR_TO
5944: IFFALSE 5980
// begin if flags [ i ] then
5946: LD_VAR 0 4
5950: PUSH
5951: LD_VAR 0 8
5955: ARRAY
5956: IFFALSE 5978
// tmp := tmp & i & ; ;
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_VAR 0 3
5967: PUSH
5968: LD_VAR 0 8
5972: STR
5973: PUSH
5974: LD_STRING ;
5976: STR
5977: ST_TO_ADDR
// end ;
5978: GO 5943
5980: POP
5981: POP
// for i = 1 to hardcoreCounter do
5982: LD_ADDR_VAR 0 8
5986: PUSH
5987: DOUBLE
5988: LD_INT 1
5990: DEC
5991: ST_TO_ADDR
5992: LD_EXP 4
5996: PUSH
5997: FOR_TO
5998: IFFALSE 6044
// begin if flags [ normalCounter + i ] then
6000: LD_VAR 0 4
6004: PUSH
6005: LD_EXP 3
6009: PUSH
6010: LD_VAR 0 8
6014: PLUS
6015: ARRAY
6016: IFFALSE 6042
// tmp := tmp & ( 100 + i ) & ; ;
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: LD_VAR 0 3
6027: PUSH
6028: LD_INT 100
6030: PUSH
6031: LD_VAR 0 8
6035: PLUS
6036: STR
6037: PUSH
6038: LD_STRING ;
6040: STR
6041: ST_TO_ADDR
// end ;
6042: GO 5997
6044: POP
6045: POP
// if tmp then
6046: LD_VAR 0 3
6050: IFFALSE 6062
// active := tmp ;
6052: LD_ADDR_VAR 0 7
6056: PUSH
6057: LD_VAR 0 3
6061: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
6062: LD_STRING getStreamItemsFromMission("
6064: PUSH
6065: LD_VAR 0 5
6069: STR
6070: PUSH
6071: LD_STRING ","
6073: STR
6074: PUSH
6075: LD_VAR 0 6
6079: STR
6080: PUSH
6081: LD_STRING ","
6083: STR
6084: PUSH
6085: LD_VAR 0 7
6089: STR
6090: PUSH
6091: LD_STRING ")
6093: STR
6094: PPUSH
6095: CALL_OW 559
// end else
6099: GO 6108
// ToLua ( getStreamItemsFromMission("","","") ) ;
6101: LD_STRING getStreamItemsFromMission("","","")
6103: PPUSH
6104: CALL_OW 559
// end ;
6108: LD_VAR 0 2
6112: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
6113: LD_EXP 2
6117: IFFALSE 6125
6119: PUSH
6120: LD_EXP 7
6124: AND
6125: IFFALSE 6249
6127: GO 6129
6129: DISABLE
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
// begin enable ;
6134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
6135: LD_ADDR_VAR 0 2
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_OWVAR 2
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 34
6157: PUSH
6158: LD_INT 7
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 34
6167: PUSH
6168: LD_INT 45
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 34
6177: PUSH
6178: LD_INT 28
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 34
6187: PUSH
6188: LD_INT 47
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PPUSH
6206: CALL_OW 69
6210: ST_TO_ADDR
// if not tmp then
6211: LD_VAR 0 2
6215: NOT
6216: IFFALSE 6220
// exit ;
6218: GO 6249
// for i in tmp do
6220: LD_ADDR_VAR 0 1
6224: PUSH
6225: LD_VAR 0 2
6229: PUSH
6230: FOR_IN
6231: IFFALSE 6247
// begin SetLives ( i , 0 ) ;
6233: LD_VAR 0 1
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL_OW 234
// end ;
6245: GO 6230
6247: POP
6248: POP
// end ;
6249: PPOPN 2
6251: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
6252: LD_EXP 2
6256: IFFALSE 6264
6258: PUSH
6259: LD_EXP 8
6263: AND
6264: IFFALSE 6348
6266: GO 6268
6268: DISABLE
6269: LD_INT 0
6271: PPUSH
6272: PPUSH
// begin enable ;
6273: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
6274: LD_ADDR_VAR 0 2
6278: PUSH
6279: LD_INT 22
6281: PUSH
6282: LD_OWVAR 2
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 32
6293: PUSH
6294: LD_INT 3
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PPUSH
6305: CALL_OW 69
6309: ST_TO_ADDR
// if not tmp then
6310: LD_VAR 0 2
6314: NOT
6315: IFFALSE 6319
// exit ;
6317: GO 6348
// for i in tmp do
6319: LD_ADDR_VAR 0 1
6323: PUSH
6324: LD_VAR 0 2
6328: PUSH
6329: FOR_IN
6330: IFFALSE 6346
// begin SetLives ( i , 0 ) ;
6332: LD_VAR 0 1
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 234
// end ;
6344: GO 6329
6346: POP
6347: POP
// end ;
6348: PPOPN 2
6350: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
6351: LD_EXP 2
6355: IFFALSE 6363
6357: PUSH
6358: LD_EXP 5
6362: AND
6363: IFFALSE 6456
6365: GO 6367
6367: DISABLE
6368: LD_INT 0
6370: PPUSH
// begin enable ;
6371: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
6372: LD_ADDR_VAR 0 1
6376: PUSH
6377: LD_INT 22
6379: PUSH
6380: LD_OWVAR 2
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: LD_INT 25
6394: PUSH
6395: LD_INT 5
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 25
6404: PUSH
6405: LD_INT 9
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 25
6414: PUSH
6415: LD_INT 8
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL_OW 69
6436: PUSH
6437: FOR_IN
6438: IFFALSE 6454
// begin SetClass ( i , 1 ) ;
6440: LD_VAR 0 1
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 336
// end ;
6452: GO 6437
6454: POP
6455: POP
// end ;
6456: PPOPN 1
6458: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
6459: LD_EXP 2
6463: IFFALSE 6471
6465: PUSH
6466: LD_EXP 6
6470: AND
6471: IFFALSE 6483
6473: PUSH
6474: LD_OWVAR 65
6478: PUSH
6479: LD_INT 7
6481: LESS
6482: AND
6483: IFFALSE 6497
6485: GO 6487
6487: DISABLE
// begin enable ;
6488: ENABLE
// game_speed := 7 ;
6489: LD_ADDR_OWVAR 65
6493: PUSH
6494: LD_INT 7
6496: ST_TO_ADDR
// end ;
6497: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
6498: LD_EXP 2
6502: IFFALSE 6510
6504: PUSH
6505: LD_EXP 9
6509: AND
6510: IFFALSE 6712
6512: GO 6514
6514: DISABLE
6515: LD_INT 0
6517: PPUSH
6518: PPUSH
6519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
6520: LD_ADDR_VAR 0 3
6524: PUSH
6525: LD_INT 81
6527: PUSH
6528: LD_OWVAR 2
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 21
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PPUSH
6551: CALL_OW 69
6555: ST_TO_ADDR
// if not tmp then
6556: LD_VAR 0 3
6560: NOT
6561: IFFALSE 6565
// exit ;
6563: GO 6712
// if tmp > 5 then
6565: LD_VAR 0 3
6569: PUSH
6570: LD_INT 5
6572: GREATER
6573: IFFALSE 6585
// k := 5 else
6575: LD_ADDR_VAR 0 2
6579: PUSH
6580: LD_INT 5
6582: ST_TO_ADDR
6583: GO 6595
// k := tmp ;
6585: LD_ADDR_VAR 0 2
6589: PUSH
6590: LD_VAR 0 3
6594: ST_TO_ADDR
// for i := 1 to k do
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 2
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6710
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
6613: LD_VAR 0 3
6617: PUSH
6618: LD_VAR 0 1
6622: ARRAY
6623: PPUSH
6624: LD_VAR 0 1
6628: PUSH
6629: LD_INT 4
6631: MOD
6632: PUSH
6633: LD_INT 1
6635: PLUS
6636: PPUSH
6637: CALL_OW 259
6641: PUSH
6642: LD_INT 10
6644: LESS
6645: IFFALSE 6708
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
6647: LD_VAR 0 3
6651: PUSH
6652: LD_VAR 0 1
6656: ARRAY
6657: PPUSH
6658: LD_VAR 0 1
6662: PUSH
6663: LD_INT 4
6665: MOD
6666: PUSH
6667: LD_INT 1
6669: PLUS
6670: PPUSH
6671: LD_VAR 0 3
6675: PUSH
6676: LD_VAR 0 1
6680: ARRAY
6681: PPUSH
6682: LD_VAR 0 1
6686: PUSH
6687: LD_INT 4
6689: MOD
6690: PUSH
6691: LD_INT 1
6693: PLUS
6694: PPUSH
6695: CALL_OW 259
6699: PUSH
6700: LD_INT 1
6702: PLUS
6703: PPUSH
6704: CALL_OW 237
6708: GO 6610
6710: POP
6711: POP
// end ;
6712: PPOPN 3
6714: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
6715: LD_EXP 2
6719: IFFALSE 6727
6721: PUSH
6722: LD_EXP 10
6726: AND
6727: IFFALSE 6747
6729: GO 6731
6731: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
6732: LD_INT 4
6734: PPUSH
6735: LD_OWVAR 2
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 324
6747: END
// every 0 0$1 trigger StreamModeActive and sShovel do
6748: LD_EXP 2
6752: IFFALSE 6760
6754: PUSH
6755: LD_EXP 39
6759: AND
6760: IFFALSE 6780
6762: GO 6764
6764: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
6765: LD_INT 19
6767: PPUSH
6768: LD_OWVAR 2
6772: PPUSH
6773: LD_INT 0
6775: PPUSH
6776: CALL_OW 324
6780: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
6781: LD_EXP 2
6785: IFFALSE 6793
6787: PUSH
6788: LD_EXP 11
6792: AND
6793: IFFALSE 6895
6795: GO 6797
6797: DISABLE
6798: LD_INT 0
6800: PPUSH
6801: PPUSH
// begin enable ;
6802: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
6803: LD_ADDR_VAR 0 2
6807: PUSH
6808: LD_INT 22
6810: PUSH
6811: LD_OWVAR 2
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 2
6822: PUSH
6823: LD_INT 34
6825: PUSH
6826: LD_INT 11
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 34
6835: PUSH
6836: LD_INT 30
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: PPUSH
6852: CALL_OW 69
6856: ST_TO_ADDR
// if not tmp then
6857: LD_VAR 0 2
6861: NOT
6862: IFFALSE 6866
// exit ;
6864: GO 6895
// for i in tmp do
6866: LD_ADDR_VAR 0 1
6870: PUSH
6871: LD_VAR 0 2
6875: PUSH
6876: FOR_IN
6877: IFFALSE 6893
// begin SetLives ( i , 0 ) ;
6879: LD_VAR 0 1
6883: PPUSH
6884: LD_INT 0
6886: PPUSH
6887: CALL_OW 234
// end ;
6891: GO 6876
6893: POP
6894: POP
// end ;
6895: PPOPN 2
6897: END
// every 0 0$1 trigger StreamModeActive and sBunker do
6898: LD_EXP 2
6902: IFFALSE 6910
6904: PUSH
6905: LD_EXP 12
6909: AND
6910: IFFALSE 6930
6912: GO 6914
6914: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
6915: LD_INT 32
6917: PPUSH
6918: LD_OWVAR 2
6922: PPUSH
6923: LD_INT 0
6925: PPUSH
6926: CALL_OW 324
6930: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
6931: LD_EXP 2
6935: IFFALSE 6943
6937: PUSH
6938: LD_EXP 13
6942: AND
6943: IFFALSE 7126
6945: GO 6947
6947: DISABLE
6948: LD_INT 0
6950: PPUSH
6951: PPUSH
6952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
6953: LD_ADDR_VAR 0 2
6957: PUSH
6958: LD_INT 22
6960: PUSH
6961: LD_OWVAR 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 33
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL_OW 69
6988: ST_TO_ADDR
// if not tmp then
6989: LD_VAR 0 2
6993: NOT
6994: IFFALSE 6998
// exit ;
6996: GO 7126
// side := 0 ;
6998: LD_ADDR_VAR 0 3
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// for i := 1 to 8 do
7006: LD_ADDR_VAR 0 1
7010: PUSH
7011: DOUBLE
7012: LD_INT 1
7014: DEC
7015: ST_TO_ADDR
7016: LD_INT 8
7018: PUSH
7019: FOR_TO
7020: IFFALSE 7070
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
7022: LD_OWVAR 2
7026: PUSH
7027: LD_VAR 0 1
7031: NONEQUAL
7032: IFFALSE 7054
7034: PUSH
7035: LD_OWVAR 2
7039: PPUSH
7040: LD_VAR 0 1
7044: PPUSH
7045: CALL_OW 81
7049: PUSH
7050: LD_INT 2
7052: EQUAL
7053: AND
7054: IFFALSE 7068
// begin side := i ;
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_VAR 0 1
7065: ST_TO_ADDR
// break ;
7066: GO 7070
// end ;
7068: GO 7019
7070: POP
7071: POP
// if not side then
7072: LD_VAR 0 3
7076: NOT
7077: IFFALSE 7081
// exit ;
7079: GO 7126
// for i := 1 to tmp do
7081: LD_ADDR_VAR 0 1
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 2
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7124
// if Prob ( 60 ) then
7099: LD_INT 60
7101: PPUSH
7102: CALL_OW 13
7106: IFFALSE 7122
// SetSide ( i , side ) ;
7108: LD_VAR 0 1
7112: PPUSH
7113: LD_VAR 0 3
7117: PPUSH
7118: CALL_OW 235
7122: GO 7096
7124: POP
7125: POP
// end ;
7126: PPOPN 3
7128: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
7129: LD_EXP 2
7133: IFFALSE 7141
7135: PUSH
7136: LD_EXP 15
7140: AND
7141: IFFALSE 7260
7143: GO 7145
7145: DISABLE
7146: LD_INT 0
7148: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
7149: LD_ADDR_VAR 0 1
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_OWVAR 2
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 21
7168: PUSH
7169: LD_INT 1
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 23
7181: PUSH
7182: LD_INT 0
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 69
7202: PUSH
7203: FOR_IN
7204: IFFALSE 7258
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 257
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: LD_INT 4
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: IN
7234: IFFALSE 7256
// SetClass ( un , rand ( 1 , 4 ) ) ;
7236: LD_VAR 0 1
7240: PPUSH
7241: LD_INT 1
7243: PPUSH
7244: LD_INT 4
7246: PPUSH
7247: CALL_OW 12
7251: PPUSH
7252: CALL_OW 336
7256: GO 7203
7258: POP
7259: POP
// end ;
7260: PPOPN 1
7262: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
7263: LD_EXP 2
7267: IFFALSE 7275
7269: PUSH
7270: LD_EXP 14
7274: AND
7275: IFFALSE 7354
7277: GO 7279
7279: DISABLE
7280: LD_INT 0
7282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7283: LD_ADDR_VAR 0 1
7287: PUSH
7288: LD_INT 22
7290: PUSH
7291: LD_OWVAR 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 21
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: ST_TO_ADDR
// if not tmp then
7319: LD_VAR 0 1
7323: NOT
7324: IFFALSE 7328
// exit ;
7326: GO 7354
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
7328: LD_VAR 0 1
7332: PUSH
7333: LD_INT 1
7335: PPUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 12
7345: ARRAY
7346: PPUSH
7347: LD_INT 100
7349: PPUSH
7350: CALL_OW 234
// end ;
7354: PPOPN 1
7356: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
7357: LD_EXP 2
7361: IFFALSE 7369
7363: PUSH
7364: LD_EXP 16
7368: AND
7369: IFFALSE 7467
7371: GO 7373
7373: DISABLE
7374: LD_INT 0
7376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
7377: LD_ADDR_VAR 0 1
7381: PUSH
7382: LD_INT 22
7384: PUSH
7385: LD_OWVAR 2
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 21
7396: PUSH
7397: LD_INT 1
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PPUSH
7408: CALL_OW 69
7412: ST_TO_ADDR
// if not tmp then
7413: LD_VAR 0 1
7417: NOT
7418: IFFALSE 7422
// exit ;
7420: GO 7467
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
7422: LD_VAR 0 1
7426: PUSH
7427: LD_INT 1
7429: PPUSH
7430: LD_VAR 0 1
7434: PPUSH
7435: CALL_OW 12
7439: ARRAY
7440: PPUSH
7441: LD_INT 1
7443: PPUSH
7444: LD_INT 4
7446: PPUSH
7447: CALL_OW 12
7451: PPUSH
7452: LD_INT 3000
7454: PPUSH
7455: LD_INT 9000
7457: PPUSH
7458: CALL_OW 12
7462: PPUSH
7463: CALL_OW 492
// end ;
7467: PPOPN 1
7469: END
// every 0 0$1 trigger StreamModeActive and sDepot do
7470: LD_EXP 2
7474: IFFALSE 7482
7476: PUSH
7477: LD_EXP 17
7481: AND
7482: IFFALSE 7502
7484: GO 7486
7486: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
7487: LD_INT 1
7489: PPUSH
7490: LD_OWVAR 2
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL_OW 324
7502: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
7503: LD_EXP 2
7507: IFFALSE 7515
7509: PUSH
7510: LD_EXP 18
7514: AND
7515: IFFALSE 7598
7517: GO 7519
7519: DISABLE
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
7524: LD_ADDR_VAR 0 2
7528: PUSH
7529: LD_INT 22
7531: PUSH
7532: LD_OWVAR 2
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 21
7543: PUSH
7544: LD_INT 3
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL_OW 69
7559: ST_TO_ADDR
// if not tmp then
7560: LD_VAR 0 2
7564: NOT
7565: IFFALSE 7569
// exit ;
7567: GO 7598
// for i in tmp do
7569: LD_ADDR_VAR 0 1
7573: PUSH
7574: LD_VAR 0 2
7578: PUSH
7579: FOR_IN
7580: IFFALSE 7596
// SetBLevel ( i , 10 ) ;
7582: LD_VAR 0 1
7586: PPUSH
7587: LD_INT 10
7589: PPUSH
7590: CALL_OW 241
7594: GO 7579
7596: POP
7597: POP
// end ;
7598: PPOPN 2
7600: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
7601: LD_EXP 2
7605: IFFALSE 7613
7607: PUSH
7608: LD_EXP 19
7612: AND
7613: IFFALSE 7724
7615: GO 7617
7617: DISABLE
7618: LD_INT 0
7620: PPUSH
7621: PPUSH
7622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
7623: LD_ADDR_VAR 0 3
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_OWVAR 2
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 25
7642: PUSH
7643: LD_INT 1
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// if not tmp then
7659: LD_VAR 0 3
7663: NOT
7664: IFFALSE 7668
// exit ;
7666: GO 7724
// un := tmp [ rand ( 1 , tmp ) ] ;
7668: LD_ADDR_VAR 0 2
7672: PUSH
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 1
7680: PPUSH
7681: LD_VAR 0 3
7685: PPUSH
7686: CALL_OW 12
7690: ARRAY
7691: ST_TO_ADDR
// if Crawls ( un ) then
7692: LD_VAR 0 2
7696: PPUSH
7697: CALL_OW 318
7701: IFFALSE 7712
// ComWalk ( un ) ;
7703: LD_VAR 0 2
7707: PPUSH
7708: CALL_OW 138
// SetClass ( un , class_sniper ) ;
7712: LD_VAR 0 2
7716: PPUSH
7717: LD_INT 5
7719: PPUSH
7720: CALL_OW 336
// end ;
7724: PPOPN 3
7726: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
7727: LD_EXP 2
7731: IFFALSE 7739
7733: PUSH
7734: LD_EXP 20
7738: AND
7739: IFFALSE 7751
7741: PUSH
7742: LD_OWVAR 67
7746: PUSH
7747: LD_INT 4
7749: LESS
7750: AND
7751: IFFALSE 7770
7753: GO 7755
7755: DISABLE
// begin Difficulty := Difficulty + 1 ;
7756: LD_ADDR_OWVAR 67
7760: PUSH
7761: LD_OWVAR 67
7765: PUSH
7766: LD_INT 1
7768: PLUS
7769: ST_TO_ADDR
// end ;
7770: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
7771: LD_EXP 2
7775: IFFALSE 7783
7777: PUSH
7778: LD_EXP 21
7782: AND
7783: IFFALSE 7886
7785: GO 7787
7787: DISABLE
7788: LD_INT 0
7790: PPUSH
// begin for i := 1 to 5 do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_INT 5
7803: PUSH
7804: FOR_TO
7805: IFFALSE 7884
// begin uc_nation := nation_nature ;
7807: LD_ADDR_OWVAR 21
7811: PUSH
7812: LD_INT 0
7814: ST_TO_ADDR
// uc_side := 0 ;
7815: LD_ADDR_OWVAR 20
7819: PUSH
7820: LD_INT 0
7822: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7823: LD_ADDR_OWVAR 29
7827: PUSH
7828: LD_INT 12
7830: PUSH
7831: LD_INT 12
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: ST_TO_ADDR
// hc_agressivity := 20 ;
7838: LD_ADDR_OWVAR 35
7842: PUSH
7843: LD_INT 20
7845: ST_TO_ADDR
// hc_class := class_tiger ;
7846: LD_ADDR_OWVAR 28
7850: PUSH
7851: LD_INT 14
7853: ST_TO_ADDR
// hc_gallery :=  ;
7854: LD_ADDR_OWVAR 33
7858: PUSH
7859: LD_STRING 
7861: ST_TO_ADDR
// hc_name :=  ;
7862: LD_ADDR_OWVAR 26
7866: PUSH
7867: LD_STRING 
7869: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
7870: CALL_OW 44
7874: PPUSH
7875: LD_INT 0
7877: PPUSH
7878: CALL_OW 51
// end ;
7882: GO 7804
7884: POP
7885: POP
// end ;
7886: PPOPN 1
7888: END
// every 0 0$1 trigger StreamModeActive and sBomb do
7889: LD_EXP 2
7893: IFFALSE 7901
7895: PUSH
7896: LD_EXP 22
7900: AND
7901: IFFALSE 7910
7903: GO 7905
7905: DISABLE
// StreamSibBomb ;
7906: CALL 7911 0 0
7910: END
// export function StreamSibBomb ; var i , x , y ; begin
7911: LD_INT 0
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
// result := false ;
7917: LD_ADDR_VAR 0 1
7921: PUSH
7922: LD_INT 0
7924: ST_TO_ADDR
// for i := 1 to 16 do
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: DOUBLE
7931: LD_INT 1
7933: DEC
7934: ST_TO_ADDR
7935: LD_INT 16
7937: PUSH
7938: FOR_TO
7939: IFFALSE 8138
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
7941: LD_ADDR_VAR 0 3
7945: PUSH
7946: LD_INT 10
7948: PUSH
7949: LD_INT 20
7951: PUSH
7952: LD_INT 30
7954: PUSH
7955: LD_INT 40
7957: PUSH
7958: LD_INT 50
7960: PUSH
7961: LD_INT 60
7963: PUSH
7964: LD_INT 70
7966: PUSH
7967: LD_INT 80
7969: PUSH
7970: LD_INT 90
7972: PUSH
7973: LD_INT 100
7975: PUSH
7976: LD_INT 110
7978: PUSH
7979: LD_INT 120
7981: PUSH
7982: LD_INT 130
7984: PUSH
7985: LD_INT 140
7987: PUSH
7988: LD_INT 150
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_INT 15
8013: PPUSH
8014: CALL_OW 12
8018: ARRAY
8019: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: LD_INT 10
8027: PUSH
8028: LD_INT 20
8030: PUSH
8031: LD_INT 30
8033: PUSH
8034: LD_INT 40
8036: PUSH
8037: LD_INT 50
8039: PUSH
8040: LD_INT 60
8042: PUSH
8043: LD_INT 70
8045: PUSH
8046: LD_INT 80
8048: PUSH
8049: LD_INT 90
8051: PUSH
8052: LD_INT 100
8054: PUSH
8055: LD_INT 110
8057: PUSH
8058: LD_INT 120
8060: PUSH
8061: LD_INT 130
8063: PUSH
8064: LD_INT 140
8066: PUSH
8067: LD_INT 150
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 1
8089: PPUSH
8090: LD_INT 15
8092: PPUSH
8093: CALL_OW 12
8097: ARRAY
8098: ST_TO_ADDR
// if ValidHex ( x , y ) then
8099: LD_VAR 0 3
8103: PPUSH
8104: LD_VAR 0 4
8108: PPUSH
8109: CALL_OW 488
8113: IFFALSE 8136
// begin result := [ x , y ] ;
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 3
8124: PUSH
8125: LD_VAR 0 4
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
// break ;
8134: GO 8138
// end ; end ;
8136: GO 7938
8138: POP
8139: POP
// if result then
8140: LD_VAR 0 1
8144: IFFALSE 8204
// begin ToLua ( playSibBomb() ) ;
8146: LD_STRING playSibBomb()
8148: PPUSH
8149: CALL_OW 559
// wait ( 0 0$14 ) ;
8153: LD_INT 490
8155: PPUSH
8156: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
8160: LD_VAR 0 1
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: LD_VAR 0 1
8173: PUSH
8174: LD_INT 2
8176: ARRAY
8177: PPUSH
8178: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
8182: LD_VAR 0 1
8186: PUSH
8187: LD_INT 1
8189: ARRAY
8190: PPUSH
8191: LD_VAR 0 1
8195: PUSH
8196: LD_INT 2
8198: ARRAY
8199: PPUSH
8200: CALL_OW 429
// end ; end ;
8204: LD_VAR 0 1
8208: RET
// every 0 0$1 trigger StreamModeActive and sReset do
8209: LD_EXP 2
8213: IFFALSE 8221
8215: PUSH
8216: LD_EXP 24
8220: AND
8221: IFFALSE 8233
8223: GO 8225
8225: DISABLE
// YouLost (  ) ;
8226: LD_STRING 
8228: PPUSH
8229: CALL_OW 104
8233: END
// every 0 0$1 trigger StreamModeActive and sFog do
8234: LD_EXP 2
8238: IFFALSE 8246
8240: PUSH
8241: LD_EXP 23
8245: AND
8246: IFFALSE 8260
8248: GO 8250
8250: DISABLE
// FogOff ( your_side ) ;
8251: LD_OWVAR 2
8255: PPUSH
8256: CALL_OW 344
8260: END
// every 0 0$1 trigger StreamModeActive and sSun do
8261: LD_EXP 2
8265: IFFALSE 8273
8267: PUSH
8268: LD_EXP 25
8272: AND
8273: IFFALSE 8301
8275: GO 8277
8277: DISABLE
// begin solar_recharge_percent := 0 ;
8278: LD_ADDR_OWVAR 79
8282: PUSH
8283: LD_INT 0
8285: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8286: LD_INT 10500
8288: PPUSH
8289: CALL_OW 67
// solar_recharge_percent := 100 ;
8293: LD_ADDR_OWVAR 79
8297: PUSH
8298: LD_INT 100
8300: ST_TO_ADDR
// end ;
8301: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
8302: LD_EXP 2
8306: IFFALSE 8314
8308: PUSH
8309: LD_EXP 26
8313: AND
8314: IFFALSE 8553
8316: GO 8318
8318: DISABLE
8319: LD_INT 0
8321: PPUSH
8322: PPUSH
8323: PPUSH
// begin tmp := [ ] ;
8324: LD_ADDR_VAR 0 3
8328: PUSH
8329: EMPTY
8330: ST_TO_ADDR
// for i := 1 to 6 do
8331: LD_ADDR_VAR 0 1
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_INT 6
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8450
// begin uc_nation := nation_nature ;
8347: LD_ADDR_OWVAR 21
8351: PUSH
8352: LD_INT 0
8354: ST_TO_ADDR
// uc_side := 0 ;
8355: LD_ADDR_OWVAR 20
8359: PUSH
8360: LD_INT 0
8362: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
8363: LD_ADDR_OWVAR 29
8367: PUSH
8368: LD_INT 12
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: ST_TO_ADDR
// hc_agressivity := 20 ;
8378: LD_ADDR_OWVAR 35
8382: PUSH
8383: LD_INT 20
8385: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
8386: LD_ADDR_OWVAR 28
8390: PUSH
8391: LD_INT 17
8393: ST_TO_ADDR
// hc_gallery :=  ;
8394: LD_ADDR_OWVAR 33
8398: PUSH
8399: LD_STRING 
8401: ST_TO_ADDR
// hc_name :=  ;
8402: LD_ADDR_OWVAR 26
8406: PUSH
8407: LD_STRING 
8409: ST_TO_ADDR
// un := CreateHuman ;
8410: LD_ADDR_VAR 0 2
8414: PUSH
8415: CALL_OW 44
8419: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
8420: LD_VAR 0 2
8424: PPUSH
8425: LD_INT 1
8427: PPUSH
8428: CALL_OW 51
// tmp := tmp ^ un ;
8432: LD_ADDR_VAR 0 3
8436: PUSH
8437: LD_VAR 0 3
8441: PUSH
8442: LD_VAR 0 2
8446: ADD
8447: ST_TO_ADDR
// end ;
8448: GO 8344
8450: POP
8451: POP
// repeat wait ( 0 0$1 ) ;
8452: LD_INT 35
8454: PPUSH
8455: CALL_OW 67
// for un in tmp do
8459: LD_ADDR_VAR 0 2
8463: PUSH
8464: LD_VAR 0 3
8468: PUSH
8469: FOR_IN
8470: IFFALSE 8544
// begin if IsDead ( un ) then
8472: LD_VAR 0 2
8476: PPUSH
8477: CALL_OW 301
8481: IFFALSE 8501
// begin tmp := tmp diff un ;
8483: LD_ADDR_VAR 0 3
8487: PUSH
8488: LD_VAR 0 3
8492: PUSH
8493: LD_VAR 0 2
8497: DIFF
8498: ST_TO_ADDR
// continue ;
8499: GO 8469
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
8501: LD_VAR 0 2
8505: PPUSH
8506: LD_INT 3
8508: PUSH
8509: LD_INT 22
8511: PUSH
8512: LD_INT 0
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 69
8527: PPUSH
8528: LD_VAR 0 2
8532: PPUSH
8533: CALL_OW 74
8537: PPUSH
8538: CALL_OW 115
// end ;
8542: GO 8469
8544: POP
8545: POP
// until not tmp ;
8546: LD_VAR 0 3
8550: NOT
8551: IFFALSE 8452
// end ;
8553: PPOPN 3
8555: END
// every 0 0$1 trigger StreamModeActive and sTroll do
8556: LD_EXP 2
8560: IFFALSE 8568
8562: PUSH
8563: LD_EXP 27
8567: AND
8568: IFFALSE 8622
8570: GO 8572
8572: DISABLE
// begin ToLua ( displayTroll(); ) ;
8573: LD_STRING displayTroll();
8575: PPUSH
8576: CALL_OW 559
// wait ( 3 3$00 ) ;
8580: LD_INT 6300
8582: PPUSH
8583: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8587: LD_STRING hideTroll();
8589: PPUSH
8590: CALL_OW 559
// wait ( 1 1$00 ) ;
8594: LD_INT 2100
8596: PPUSH
8597: CALL_OW 67
// ToLua ( displayTroll(); ) ;
8601: LD_STRING displayTroll();
8603: PPUSH
8604: CALL_OW 559
// wait ( 1 1$00 ) ;
8608: LD_INT 2100
8610: PPUSH
8611: CALL_OW 67
// ToLua ( hideTroll(); ) ;
8615: LD_STRING hideTroll();
8617: PPUSH
8618: CALL_OW 559
// end ;
8622: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
8623: LD_EXP 2
8627: IFFALSE 8635
8629: PUSH
8630: LD_EXP 28
8634: AND
8635: IFFALSE 8698
8637: GO 8639
8639: DISABLE
8640: LD_INT 0
8642: PPUSH
// begin p := 0 ;
8643: LD_ADDR_VAR 0 1
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// repeat game_speed := 1 ;
8651: LD_ADDR_OWVAR 65
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8659: LD_INT 35
8661: PPUSH
8662: CALL_OW 67
// p := p + 1 ;
8666: LD_ADDR_VAR 0 1
8670: PUSH
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: PLUS
8679: ST_TO_ADDR
// until p >= 60 ;
8680: LD_VAR 0 1
8684: PUSH
8685: LD_INT 60
8687: GREATEREQUAL
8688: IFFALSE 8651
// game_speed := 4 ;
8690: LD_ADDR_OWVAR 65
8694: PUSH
8695: LD_INT 4
8697: ST_TO_ADDR
// end ;
8698: PPOPN 1
8700: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
8701: LD_EXP 2
8705: IFFALSE 8713
8707: PUSH
8708: LD_EXP 29
8712: AND
8713: IFFALSE 8859
8715: GO 8717
8717: DISABLE
8718: LD_INT 0
8720: PPUSH
8721: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_INT 22
8729: PUSH
8730: LD_OWVAR 2
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: LD_INT 30
8744: PUSH
8745: LD_INT 0
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 30
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 69
8775: ST_TO_ADDR
// if not depot then
8776: LD_VAR 0 1
8780: NOT
8781: IFFALSE 8785
// exit ;
8783: GO 8859
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
8785: LD_ADDR_VAR 0 2
8789: PUSH
8790: LD_VAR 0 1
8794: PUSH
8795: LD_INT 1
8797: PPUSH
8798: LD_VAR 0 1
8802: PPUSH
8803: CALL_OW 12
8807: ARRAY
8808: PPUSH
8809: CALL_OW 274
8813: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
8814: LD_VAR 0 2
8818: PPUSH
8819: LD_INT 1
8821: PPUSH
8822: LD_INT 0
8824: PPUSH
8825: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
8829: LD_VAR 0 2
8833: PPUSH
8834: LD_INT 2
8836: PPUSH
8837: LD_INT 0
8839: PPUSH
8840: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
8844: LD_VAR 0 2
8848: PPUSH
8849: LD_INT 3
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL_OW 277
// end ;
8859: PPOPN 2
8861: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
8862: LD_EXP 2
8866: IFFALSE 8874
8868: PUSH
8869: LD_EXP 30
8873: AND
8874: IFFALSE 8971
8876: GO 8878
8878: DISABLE
8879: LD_INT 0
8881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
8882: LD_ADDR_VAR 0 1
8886: PUSH
8887: LD_INT 22
8889: PUSH
8890: LD_OWVAR 2
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 21
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: LD_INT 23
8914: PUSH
8915: LD_INT 0
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: ST_TO_ADDR
// if not tmp then
8936: LD_VAR 0 1
8940: NOT
8941: IFFALSE 8945
// exit ;
8943: GO 8971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
8945: LD_VAR 0 1
8949: PUSH
8950: LD_INT 1
8952: PPUSH
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 12
8962: ARRAY
8963: PPUSH
8964: LD_INT 200
8966: PPUSH
8967: CALL_OW 234
// end ;
8971: PPOPN 1
8973: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
8974: LD_EXP 2
8978: IFFALSE 8986
8980: PUSH
8981: LD_EXP 31
8985: AND
8986: IFFALSE 9065
8988: GO 8990
8990: DISABLE
8991: LD_INT 0
8993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
8994: LD_ADDR_VAR 0 1
8998: PUSH
8999: LD_INT 22
9001: PUSH
9002: LD_OWVAR 2
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 21
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 69
9029: ST_TO_ADDR
// if not tmp then
9030: LD_VAR 0 1
9034: NOT
9035: IFFALSE 9039
// exit ;
9037: GO 9065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
9039: LD_VAR 0 1
9043: PUSH
9044: LD_INT 1
9046: PPUSH
9047: LD_VAR 0 1
9051: PPUSH
9052: CALL_OW 12
9056: ARRAY
9057: PPUSH
9058: LD_INT 60
9060: PPUSH
9061: CALL_OW 234
// end ;
9065: PPOPN 1
9067: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
9068: LD_EXP 2
9072: IFFALSE 9080
9074: PUSH
9075: LD_EXP 32
9079: AND
9080: IFFALSE 9179
9082: GO 9084
9084: DISABLE
9085: LD_INT 0
9087: PPUSH
9088: PPUSH
// begin enable ;
9089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
9090: LD_ADDR_VAR 0 1
9094: PUSH
9095: LD_INT 22
9097: PUSH
9098: LD_OWVAR 2
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 61
9109: PUSH
9110: EMPTY
9111: LIST
9112: PUSH
9113: LD_INT 33
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 69
9132: ST_TO_ADDR
// if not tmp then
9133: LD_VAR 0 1
9137: NOT
9138: IFFALSE 9142
// exit ;
9140: GO 9179
// for i in tmp do
9142: LD_ADDR_VAR 0 2
9146: PUSH
9147: LD_VAR 0 1
9151: PUSH
9152: FOR_IN
9153: IFFALSE 9177
// if IsControledBy ( i ) then
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 312
9164: IFFALSE 9175
// ComUnlink ( i ) ;
9166: LD_VAR 0 2
9170: PPUSH
9171: CALL_OW 136
9175: GO 9152
9177: POP
9178: POP
// end ;
9179: PPOPN 2
9181: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
9182: LD_EXP 2
9186: IFFALSE 9194
9188: PUSH
9189: LD_EXP 33
9193: AND
9194: IFFALSE 9334
9196: GO 9198
9198: DISABLE
9199: LD_INT 0
9201: PPUSH
9202: PPUSH
// begin ToLua ( displayPowell(); ) ;
9203: LD_STRING displayPowell();
9205: PPUSH
9206: CALL_OW 559
// uc_side := 0 ;
9210: LD_ADDR_OWVAR 20
9214: PUSH
9215: LD_INT 0
9217: ST_TO_ADDR
// uc_nation := 2 ;
9218: LD_ADDR_OWVAR 21
9222: PUSH
9223: LD_INT 2
9225: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
9226: LD_ADDR_OWVAR 37
9230: PUSH
9231: LD_INT 14
9233: ST_TO_ADDR
// vc_engine := engine_siberite ;
9234: LD_ADDR_OWVAR 39
9238: PUSH
9239: LD_INT 3
9241: ST_TO_ADDR
// vc_control := control_apeman ;
9242: LD_ADDR_OWVAR 38
9246: PUSH
9247: LD_INT 5
9249: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
9250: LD_ADDR_OWVAR 40
9254: PUSH
9255: LD_INT 29
9257: ST_TO_ADDR
// un := CreateVehicle ;
9258: LD_ADDR_VAR 0 2
9262: PUSH
9263: CALL_OW 45
9267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
9280: LD_INT 35
9282: PPUSH
9283: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
9287: LD_VAR 0 2
9291: PPUSH
9292: LD_INT 22
9294: PUSH
9295: LD_OWVAR 2
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PPUSH
9304: CALL_OW 69
9308: PPUSH
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 74
9318: PPUSH
9319: CALL_OW 115
// until IsDead ( un ) ;
9323: LD_VAR 0 2
9327: PPUSH
9328: CALL_OW 301
9332: IFFALSE 9280
// end ;
9334: PPOPN 2
9336: END
// every 0 0$1 trigger StreamModeActive and sStu do
9337: LD_EXP 2
9341: IFFALSE 9349
9343: PUSH
9344: LD_EXP 41
9348: AND
9349: IFFALSE 9365
9351: GO 9353
9353: DISABLE
// begin ToLua ( displayStucuk(); ) ;
9354: LD_STRING displayStucuk();
9356: PPUSH
9357: CALL_OW 559
// ResetFog ;
9361: CALL_OW 335
// end ;
9365: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
9366: LD_EXP 2
9370: IFFALSE 9378
9372: PUSH
9373: LD_EXP 34
9377: AND
9378: IFFALSE 9519
9380: GO 9382
9382: DISABLE
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_OWVAR 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 21
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 69
9422: ST_TO_ADDR
// if not tmp then
9423: LD_VAR 0 2
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9519
// un := tmp [ rand ( 1 , tmp ) ] ;
9432: LD_ADDR_VAR 0 1
9436: PUSH
9437: LD_VAR 0 2
9441: PUSH
9442: LD_INT 1
9444: PPUSH
9445: LD_VAR 0 2
9449: PPUSH
9450: CALL_OW 12
9454: ARRAY
9455: ST_TO_ADDR
// SetSide ( un , 0 ) ;
9456: LD_VAR 0 1
9460: PPUSH
9461: LD_INT 0
9463: PPUSH
9464: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
9468: LD_VAR 0 1
9472: PPUSH
9473: LD_OWVAR 3
9477: PUSH
9478: LD_VAR 0 1
9482: DIFF
9483: PPUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 74
9493: PPUSH
9494: CALL_OW 115
// wait ( 0 0$20 ) ;
9498: LD_INT 700
9500: PPUSH
9501: CALL_OW 67
// SetSide ( un , your_side ) ;
9505: LD_VAR 0 1
9509: PPUSH
9510: LD_OWVAR 2
9514: PPUSH
9515: CALL_OW 235
// end ;
9519: PPOPN 2
9521: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
9522: LD_EXP 2
9526: IFFALSE 9534
9528: PUSH
9529: LD_EXP 35
9533: AND
9534: IFFALSE 9640
9536: GO 9538
9538: DISABLE
9539: LD_INT 0
9541: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9542: LD_ADDR_VAR 0 1
9546: PUSH
9547: LD_INT 22
9549: PUSH
9550: LD_OWVAR 2
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 2
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 0
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 30
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: ST_TO_ADDR
// if not depot then
9596: LD_VAR 0 1
9600: NOT
9601: IFFALSE 9605
// exit ;
9603: GO 9640
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
9605: LD_VAR 0 1
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PPUSH
9614: CALL_OW 250
9618: PPUSH
9619: LD_VAR 0 1
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: CALL_OW 251
9632: PPUSH
9633: LD_INT 70
9635: PPUSH
9636: CALL_OW 495
// end ;
9640: PPOPN 1
9642: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
9643: LD_EXP 2
9647: IFFALSE 9655
9649: PUSH
9650: LD_EXP 36
9654: AND
9655: IFFALSE 9866
9657: GO 9659
9659: DISABLE
9660: LD_INT 0
9662: PPUSH
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9667: LD_ADDR_VAR 0 5
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_OWVAR 2
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PPUSH
9698: CALL_OW 69
9702: ST_TO_ADDR
// if not tmp then
9703: LD_VAR 0 5
9707: NOT
9708: IFFALSE 9712
// exit ;
9710: GO 9866
// for i in tmp do
9712: LD_ADDR_VAR 0 1
9716: PUSH
9717: LD_VAR 0 5
9721: PUSH
9722: FOR_IN
9723: IFFALSE 9864
// begin d := rand ( 0 , 5 ) ;
9725: LD_ADDR_VAR 0 4
9729: PUSH
9730: LD_INT 0
9732: PPUSH
9733: LD_INT 5
9735: PPUSH
9736: CALL_OW 12
9740: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
9741: LD_ADDR_VAR 0 2
9745: PUSH
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 250
9755: PPUSH
9756: LD_VAR 0 4
9760: PPUSH
9761: LD_INT 3
9763: PPUSH
9764: LD_INT 12
9766: PPUSH
9767: CALL_OW 12
9771: PPUSH
9772: CALL_OW 272
9776: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
9777: LD_ADDR_VAR 0 3
9781: PUSH
9782: LD_VAR 0 1
9786: PPUSH
9787: CALL_OW 251
9791: PPUSH
9792: LD_VAR 0 4
9796: PPUSH
9797: LD_INT 3
9799: PPUSH
9800: LD_INT 12
9802: PPUSH
9803: CALL_OW 12
9807: PPUSH
9808: CALL_OW 273
9812: ST_TO_ADDR
// if ValidHex ( x , y ) then
9813: LD_VAR 0 2
9817: PPUSH
9818: LD_VAR 0 3
9822: PPUSH
9823: CALL_OW 488
9827: IFFALSE 9862
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
9829: LD_VAR 0 1
9833: PPUSH
9834: LD_VAR 0 2
9838: PPUSH
9839: LD_VAR 0 3
9843: PPUSH
9844: LD_INT 3
9846: PPUSH
9847: LD_INT 6
9849: PPUSH
9850: CALL_OW 12
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 483
// end ;
9862: GO 9722
9864: POP
9865: POP
// end ;
9866: PPOPN 5
9868: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
9869: LD_EXP 2
9873: IFFALSE 9881
9875: PUSH
9876: LD_EXP 37
9880: AND
9881: IFFALSE 9975
9883: GO 9885
9885: DISABLE
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
9890: LD_ADDR_VAR 0 2
9894: PUSH
9895: LD_INT 22
9897: PUSH
9898: LD_OWVAR 2
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 32
9909: PUSH
9910: LD_INT 1
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 21
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 69
9936: ST_TO_ADDR
// if not tmp then
9937: LD_VAR 0 2
9941: NOT
9942: IFFALSE 9946
// exit ;
9944: GO 9975
// for i in tmp do
9946: LD_ADDR_VAR 0 1
9950: PUSH
9951: LD_VAR 0 2
9955: PUSH
9956: FOR_IN
9957: IFFALSE 9973
// SetFuel ( i , 0 ) ;
9959: LD_VAR 0 1
9963: PPUSH
9964: LD_INT 0
9966: PPUSH
9967: CALL_OW 240
9971: GO 9956
9973: POP
9974: POP
// end ;
9975: PPOPN 2
9977: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
9978: LD_EXP 2
9982: IFFALSE 9990
9984: PUSH
9985: LD_EXP 38
9989: AND
9990: IFFALSE 10056
9992: GO 9994
9994: DISABLE
9995: LD_INT 0
9997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
9998: LD_ADDR_VAR 0 1
10002: PUSH
10003: LD_INT 22
10005: PUSH
10006: LD_OWVAR 2
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 30
10017: PUSH
10018: LD_INT 29
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 69
10033: ST_TO_ADDR
// if not tmp then
10034: LD_VAR 0 1
10038: NOT
10039: IFFALSE 10043
// exit ;
10041: GO 10056
// DestroyUnit ( tmp [ 1 ] ) ;
10043: LD_VAR 0 1
10047: PUSH
10048: LD_INT 1
10050: ARRAY
10051: PPUSH
10052: CALL_OW 65
// end ;
10056: PPOPN 1
10058: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
10059: LD_EXP 2
10063: IFFALSE 10071
10065: PUSH
10066: LD_EXP 40
10070: AND
10071: IFFALSE 10200
10073: GO 10075
10075: DISABLE
10076: LD_INT 0
10078: PPUSH
// begin uc_side := 0 ;
10079: LD_ADDR_OWVAR 20
10083: PUSH
10084: LD_INT 0
10086: ST_TO_ADDR
// uc_nation := nation_arabian ;
10087: LD_ADDR_OWVAR 21
10091: PUSH
10092: LD_INT 2
10094: ST_TO_ADDR
// hc_gallery :=  ;
10095: LD_ADDR_OWVAR 33
10099: PUSH
10100: LD_STRING 
10102: ST_TO_ADDR
// hc_name :=  ;
10103: LD_ADDR_OWVAR 26
10107: PUSH
10108: LD_STRING 
10110: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
10111: LD_INT 1
10113: PPUSH
10114: LD_INT 11
10116: PPUSH
10117: LD_INT 10
10119: PPUSH
10120: CALL_OW 380
// un := CreateHuman ;
10124: LD_ADDR_VAR 0 1
10128: PUSH
10129: CALL_OW 44
10133: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10134: LD_VAR 0 1
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10146: LD_INT 35
10148: PPUSH
10149: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10153: LD_VAR 0 1
10157: PPUSH
10158: LD_INT 22
10160: PUSH
10161: LD_OWVAR 2
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PPUSH
10170: CALL_OW 69
10174: PPUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 74
10184: PPUSH
10185: CALL_OW 115
// until IsDead ( un ) ;
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 301
10198: IFFALSE 10146
// end ;
10200: PPOPN 1
10202: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
10203: LD_EXP 2
10207: IFFALSE 10215
10209: PUSH
10210: LD_EXP 42
10214: AND
10215: IFFALSE 10227
10217: GO 10219
10219: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
10220: LD_STRING earthquake(getX(game), 0, 32)
10222: PPUSH
10223: CALL_OW 559
10227: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
10228: LD_EXP 2
10232: IFFALSE 10240
10234: PUSH
10235: LD_EXP 43
10239: AND
10240: IFFALSE 10331
10242: GO 10244
10244: DISABLE
10245: LD_INT 0
10247: PPUSH
// begin enable ;
10248: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_OWVAR 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 21
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 33
10278: PUSH
10279: LD_INT 3
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: ST_TO_ADDR
// if not tmp then
10296: LD_VAR 0 1
10300: NOT
10301: IFFALSE 10305
// exit ;
10303: GO 10331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
10305: LD_VAR 0 1
10309: PUSH
10310: LD_INT 1
10312: PPUSH
10313: LD_VAR 0 1
10317: PPUSH
10318: CALL_OW 12
10322: ARRAY
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 234
// end ;
10331: PPOPN 1
10333: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
10334: LD_EXP 2
10338: IFFALSE 10346
10340: PUSH
10341: LD_EXP 44
10345: AND
10346: IFFALSE 10487
10348: GO 10350
10350: DISABLE
10351: LD_INT 0
10353: PPUSH
10354: PPUSH
10355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10356: LD_ADDR_VAR 0 3
10360: PUSH
10361: LD_INT 22
10363: PUSH
10364: LD_OWVAR 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: ST_TO_ADDR
// if not tmp then
10392: LD_VAR 0 3
10396: NOT
10397: IFFALSE 10401
// exit ;
10399: GO 10487
// un := tmp [ rand ( 1 , tmp ) ] ;
10401: LD_ADDR_VAR 0 2
10405: PUSH
10406: LD_VAR 0 3
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 3
10418: PPUSH
10419: CALL_OW 12
10423: ARRAY
10424: ST_TO_ADDR
// if Crawls ( un ) then
10425: LD_VAR 0 2
10429: PPUSH
10430: CALL_OW 318
10434: IFFALSE 10445
// ComWalk ( un ) ;
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
10445: LD_VAR 0 2
10449: PPUSH
10450: LD_INT 9
10452: PPUSH
10453: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
10457: LD_INT 28
10459: PPUSH
10460: LD_OWVAR 2
10464: PPUSH
10465: LD_INT 2
10467: PPUSH
10468: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
10472: LD_INT 29
10474: PPUSH
10475: LD_OWVAR 2
10479: PPUSH
10480: LD_INT 2
10482: PPUSH
10483: CALL_OW 322
// end ;
10487: PPOPN 3
10489: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
10490: LD_EXP 2
10494: IFFALSE 10502
10496: PUSH
10497: LD_EXP 45
10501: AND
10502: IFFALSE 10613
10504: GO 10506
10506: DISABLE
10507: LD_INT 0
10509: PPUSH
10510: PPUSH
10511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10512: LD_ADDR_VAR 0 3
10516: PUSH
10517: LD_INT 22
10519: PUSH
10520: LD_OWVAR 2
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 25
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: ST_TO_ADDR
// if not tmp then
10548: LD_VAR 0 3
10552: NOT
10553: IFFALSE 10557
// exit ;
10555: GO 10613
// un := tmp [ rand ( 1 , tmp ) ] ;
10557: LD_ADDR_VAR 0 2
10561: PUSH
10562: LD_VAR 0 3
10566: PUSH
10567: LD_INT 1
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: CALL_OW 12
10579: ARRAY
10580: ST_TO_ADDR
// if Crawls ( un ) then
10581: LD_VAR 0 2
10585: PPUSH
10586: CALL_OW 318
10590: IFFALSE 10601
// ComWalk ( un ) ;
10592: LD_VAR 0 2
10596: PPUSH
10597: CALL_OW 138
// SetClass ( un , class_mortar ) ;
10601: LD_VAR 0 2
10605: PPUSH
10606: LD_INT 8
10608: PPUSH
10609: CALL_OW 336
// end ;
10613: PPOPN 3
10615: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
10616: LD_EXP 2
10620: IFFALSE 10628
10622: PUSH
10623: LD_EXP 46
10627: AND
10628: IFFALSE 10772
10630: GO 10632
10632: DISABLE
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_INT 22
10644: PUSH
10645: LD_OWVAR 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 21
10656: PUSH
10657: LD_INT 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_INT 34
10669: PUSH
10670: LD_INT 12
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 34
10679: PUSH
10680: LD_INT 51
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 34
10689: PUSH
10690: LD_INT 32
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: PPUSH
10708: CALL_OW 69
10712: ST_TO_ADDR
// if not tmp then
10713: LD_VAR 0 2
10717: NOT
10718: IFFALSE 10722
// exit ;
10720: GO 10772
// for i in tmp do
10722: LD_ADDR_VAR 0 1
10726: PUSH
10727: LD_VAR 0 2
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10770
// if GetCargo ( i , mat_artifact ) = 0 then
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_INT 4
10742: PPUSH
10743: CALL_OW 289
10747: PUSH
10748: LD_INT 0
10750: EQUAL
10751: IFFALSE 10768
// SetCargo ( i , mat_siberit , 100 ) ;
10753: LD_VAR 0 1
10757: PPUSH
10758: LD_INT 3
10760: PPUSH
10761: LD_INT 100
10763: PPUSH
10764: CALL_OW 290
10768: GO 10732
10770: POP
10771: POP
// end ;
10772: PPOPN 2
10774: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
10775: LD_EXP 2
10779: IFFALSE 10787
10781: PUSH
10782: LD_EXP 47
10786: AND
10787: IFFALSE 10970
10789: GO 10791
10791: DISABLE
10792: LD_INT 0
10794: PPUSH
10795: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
10796: LD_ADDR_VAR 0 2
10800: PUSH
10801: LD_INT 22
10803: PUSH
10804: LD_OWVAR 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 69
10817: ST_TO_ADDR
// if not tmp then
10818: LD_VAR 0 2
10822: NOT
10823: IFFALSE 10827
// exit ;
10825: GO 10970
// for i := 1 to 2 do
10827: LD_ADDR_VAR 0 1
10831: PUSH
10832: DOUBLE
10833: LD_INT 1
10835: DEC
10836: ST_TO_ADDR
10837: LD_INT 2
10839: PUSH
10840: FOR_TO
10841: IFFALSE 10968
// begin uc_side := your_side ;
10843: LD_ADDR_OWVAR 20
10847: PUSH
10848: LD_OWVAR 2
10852: ST_TO_ADDR
// uc_nation := nation_american ;
10853: LD_ADDR_OWVAR 21
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// vc_chassis := us_morphling ;
10861: LD_ADDR_OWVAR 37
10865: PUSH
10866: LD_INT 5
10868: ST_TO_ADDR
// vc_engine := engine_siberite ;
10869: LD_ADDR_OWVAR 39
10873: PUSH
10874: LD_INT 3
10876: ST_TO_ADDR
// vc_control := control_computer ;
10877: LD_ADDR_OWVAR 38
10881: PUSH
10882: LD_INT 3
10884: ST_TO_ADDR
// vc_weapon := us_double_laser ;
10885: LD_ADDR_OWVAR 40
10889: PUSH
10890: LD_INT 10
10892: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
10893: LD_VAR 0 2
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: PPUSH
10902: CALL_OW 310
10906: NOT
10907: IFFALSE 10954
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
10909: CALL_OW 45
10913: PPUSH
10914: LD_VAR 0 2
10918: PUSH
10919: LD_INT 1
10921: ARRAY
10922: PPUSH
10923: CALL_OW 250
10927: PPUSH
10928: LD_VAR 0 2
10932: PUSH
10933: LD_INT 1
10935: ARRAY
10936: PPUSH
10937: CALL_OW 251
10941: PPUSH
10942: LD_INT 12
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 50
10952: GO 10966
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
10954: CALL_OW 45
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 51
// end ;
10966: GO 10840
10968: POP
10969: POP
// end ;
10970: PPOPN 2
10972: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
10973: LD_EXP 2
10977: IFFALSE 10985
10979: PUSH
10980: LD_EXP 48
10984: AND
10985: IFFALSE 11207
10987: GO 10989
10989: DISABLE
10990: LD_INT 0
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
10996: PPUSH
10997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10998: LD_ADDR_VAR 0 6
11002: PUSH
11003: LD_INT 22
11005: PUSH
11006: LD_OWVAR 2
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 21
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 3
11027: PUSH
11028: LD_INT 23
11030: PUSH
11031: LD_INT 0
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: ST_TO_ADDR
// if not tmp then
11052: LD_VAR 0 6
11056: NOT
11057: IFFALSE 11061
// exit ;
11059: GO 11207
// s1 := rand ( 1 , 4 ) ;
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: LD_INT 1
11068: PPUSH
11069: LD_INT 4
11071: PPUSH
11072: CALL_OW 12
11076: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
11077: LD_ADDR_VAR 0 4
11081: PUSH
11082: LD_VAR 0 6
11086: PUSH
11087: LD_INT 1
11089: ARRAY
11090: PPUSH
11091: LD_VAR 0 2
11095: PPUSH
11096: CALL_OW 259
11100: ST_TO_ADDR
// if s1 = 1 then
11101: LD_VAR 0 2
11105: PUSH
11106: LD_INT 1
11108: EQUAL
11109: IFFALSE 11129
// s2 := rand ( 2 , 4 ) else
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 2
11118: PPUSH
11119: LD_INT 4
11121: PPUSH
11122: CALL_OW 12
11126: ST_TO_ADDR
11127: GO 11137
// s2 := 1 ;
11129: LD_ADDR_VAR 0 3
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
11137: LD_ADDR_VAR 0 5
11141: PUSH
11142: LD_VAR 0 6
11146: PUSH
11147: LD_INT 1
11149: ARRAY
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: CALL_OW 259
11160: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
11161: LD_VAR 0 6
11165: PUSH
11166: LD_INT 1
11168: ARRAY
11169: PPUSH
11170: LD_VAR 0 2
11174: PPUSH
11175: LD_VAR 0 5
11179: PPUSH
11180: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
11184: LD_VAR 0 6
11188: PUSH
11189: LD_INT 1
11191: ARRAY
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_VAR 0 4
11202: PPUSH
11203: CALL_OW 237
// end ;
11207: PPOPN 6
11209: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
11210: LD_EXP 2
11214: IFFALSE 11222
11216: PUSH
11217: LD_EXP 49
11221: AND
11222: IFFALSE 11301
11224: GO 11226
11226: DISABLE
11227: LD_INT 0
11229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
11230: LD_ADDR_VAR 0 1
11234: PUSH
11235: LD_INT 22
11237: PUSH
11238: LD_OWVAR 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 30
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: ST_TO_ADDR
// if not tmp then
11266: LD_VAR 0 1
11270: NOT
11271: IFFALSE 11275
// exit ;
11273: GO 11301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11275: LD_VAR 0 1
11279: PUSH
11280: LD_INT 1
11282: PPUSH
11283: LD_VAR 0 1
11287: PPUSH
11288: CALL_OW 12
11292: ARRAY
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 234
// end ;
11301: PPOPN 1
11303: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
11304: LD_EXP 2
11308: IFFALSE 11316
11310: PUSH
11311: LD_EXP 50
11315: AND
11316: IFFALSE 11428
11318: GO 11320
11320: DISABLE
11321: LD_INT 0
11323: PPUSH
11324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
11325: LD_ADDR_VAR 0 2
11329: PUSH
11330: LD_INT 22
11332: PUSH
11333: LD_OWVAR 2
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: LD_INT 30
11347: PUSH
11348: LD_INT 27
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 30
11357: PUSH
11358: LD_INT 26
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 30
11367: PUSH
11368: LD_INT 28
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 69
11389: ST_TO_ADDR
// if not tmp then
11390: LD_VAR 0 2
11394: NOT
11395: IFFALSE 11399
// exit ;
11397: GO 11428
// for i in tmp do
11399: LD_ADDR_VAR 0 1
11403: PUSH
11404: LD_VAR 0 2
11408: PUSH
11409: FOR_IN
11410: IFFALSE 11426
// SetLives ( i , 1 ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 234
11424: GO 11409
11426: POP
11427: POP
// end ;
11428: PPOPN 2
11430: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
11431: LD_EXP 2
11435: IFFALSE 11443
11437: PUSH
11438: LD_EXP 51
11442: AND
11443: IFFALSE 11730
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
11452: PPUSH
// begin i := rand ( 1 , 7 ) ;
11453: LD_ADDR_VAR 0 1
11457: PUSH
11458: LD_INT 1
11460: PPUSH
11461: LD_INT 7
11463: PPUSH
11464: CALL_OW 12
11468: ST_TO_ADDR
// case i of 1 :
11469: LD_VAR 0 1
11473: PUSH
11474: LD_INT 1
11476: DOUBLE
11477: EQUAL
11478: IFTRUE 11482
11480: GO 11492
11482: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
11483: LD_STRING earthquake(getX(game), 0, 32)
11485: PPUSH
11486: CALL_OW 559
11490: GO 11730
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11514
11500: POP
// begin ToLua ( displayStucuk(); ) ;
11501: LD_STRING displayStucuk();
11503: PPUSH
11504: CALL_OW 559
// ResetFog ;
11508: CALL_OW 335
// end ; 3 :
11512: GO 11730
11514: LD_INT 3
11516: DOUBLE
11517: EQUAL
11518: IFTRUE 11522
11520: GO 11626
11522: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_OWVAR 2
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 25
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: ST_TO_ADDR
// if not tmp then
11559: LD_VAR 0 2
11563: NOT
11564: IFFALSE 11568
// exit ;
11566: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11568: LD_ADDR_VAR 0 3
11572: PUSH
11573: LD_VAR 0 2
11577: PUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: CALL_OW 12
11590: ARRAY
11591: ST_TO_ADDR
// if Crawls ( un ) then
11592: LD_VAR 0 3
11596: PPUSH
11597: CALL_OW 318
11601: IFFALSE 11612
// ComWalk ( un ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 8
11619: PPUSH
11620: CALL_OW 336
// end ; 4 :
11624: GO 11730
11626: LD_INT 4
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11708
11634: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_OWVAR 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: LD_INT 29
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: ST_TO_ADDR
// if not tmp then
11671: LD_VAR 0 2
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 11730
// CenterNowOnUnits ( tmp [ 1 ] ) ;
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
11693: LD_VAR 0 2
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: CALL_OW 65
// end ; 5 .. 7 :
11706: GO 11730
11708: LD_INT 5
11710: DOUBLE
11711: GREATEREQUAL
11712: IFFALSE 11720
11714: LD_INT 7
11716: DOUBLE
11717: LESSEQUAL
11718: IFTRUE 11722
11720: GO 11729
11722: POP
// StreamSibBomb ; end ;
11723: CALL 7911 0 0
11727: GO 11730
11729: POP
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
11733: LD_EXP 2
11737: IFFALSE 11745
11739: PUSH
11740: LD_EXP 52
11744: AND
11745: IFFALSE 11901
11747: GO 11749
11749: DISABLE
11750: LD_INT 0
11752: PPUSH
11753: PPUSH
11754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
11755: LD_ADDR_VAR 0 2
11759: PUSH
11760: LD_INT 81
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 1
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 21
11787: PUSH
11788: LD_INT 2
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: ST_TO_ADDR
// if not tmp then
11809: LD_VAR 0 2
11813: NOT
11814: IFFALSE 11818
// exit ;
11816: GO 11901
// p := 0 ;
11818: LD_ADDR_VAR 0 3
11822: PUSH
11823: LD_INT 0
11825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11826: LD_INT 35
11828: PPUSH
11829: CALL_OW 67
// p := p + 1 ;
11833: LD_ADDR_VAR 0 3
11837: PUSH
11838: LD_VAR 0 3
11842: PUSH
11843: LD_INT 1
11845: PLUS
11846: ST_TO_ADDR
// for i in tmp do
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_VAR 0 2
11856: PUSH
11857: FOR_IN
11858: IFFALSE 11889
// if GetLives ( i ) < 1000 then
11860: LD_VAR 0 1
11864: PPUSH
11865: CALL_OW 256
11869: PUSH
11870: LD_INT 1000
11872: LESS
11873: IFFALSE 11887
// SetLives ( i , 1000 ) ;
11875: LD_VAR 0 1
11879: PPUSH
11880: LD_INT 1000
11882: PPUSH
11883: CALL_OW 234
11887: GO 11857
11889: POP
11890: POP
// until p > 20 ;
11891: LD_VAR 0 3
11895: PUSH
11896: LD_INT 20
11898: GREATER
11899: IFFALSE 11826
// end ;
11901: PPOPN 3
11903: END
// every 0 0$1 trigger StreamModeActive and sTime do
11904: LD_EXP 2
11908: IFFALSE 11916
11910: PUSH
11911: LD_EXP 53
11915: AND
11916: IFFALSE 11951
11918: GO 11920
11920: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
11921: LD_INT 28
11923: PPUSH
11924: LD_OWVAR 2
11928: PPUSH
11929: LD_INT 2
11931: PPUSH
11932: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
11936: LD_INT 30
11938: PPUSH
11939: LD_OWVAR 2
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: CALL_OW 322
// end ;
11951: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
11952: LD_EXP 2
11956: IFFALSE 11964
11958: PUSH
11959: LD_EXP 54
11963: AND
11964: IFFALSE 12085
11966: GO 11968
11968: DISABLE
11969: LD_INT 0
11971: PPUSH
11972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11973: LD_ADDR_VAR 0 2
11977: PUSH
11978: LD_INT 22
11980: PUSH
11981: LD_OWVAR 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 21
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 3
12002: PUSH
12003: LD_INT 23
12005: PUSH
12006: LD_INT 0
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: PPUSH
12022: CALL_OW 69
12026: ST_TO_ADDR
// if not tmp then
12027: LD_VAR 0 2
12031: NOT
12032: IFFALSE 12036
// exit ;
12034: GO 12085
// for i in tmp do
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_VAR 0 2
12045: PUSH
12046: FOR_IN
12047: IFFALSE 12083
// begin if Crawls ( i ) then
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 318
12058: IFFALSE 12069
// ComWalk ( i ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: CALL_OW 138
// SetClass ( i , 2 ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: LD_INT 2
12076: PPUSH
12077: CALL_OW 336
// end ;
12081: GO 12046
12083: POP
12084: POP
// end ;
12085: PPOPN 2
12087: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
12088: LD_EXP 2
12092: IFFALSE 12100
12094: PUSH
12095: LD_EXP 55
12099: AND
12100: IFFALSE 12390
12102: GO 12104
12104: DISABLE
12105: LD_INT 0
12107: PPUSH
12108: PPUSH
12109: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
12110: LD_OWVAR 2
12114: PPUSH
12115: LD_INT 9
12117: PPUSH
12118: LD_INT 1
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
12128: LD_INT 9
12130: PPUSH
12131: LD_OWVAR 2
12135: PPUSH
12136: CALL_OW 343
// uc_side := 9 ;
12140: LD_ADDR_OWVAR 20
12144: PUSH
12145: LD_INT 9
12147: ST_TO_ADDR
// uc_nation := 2 ;
12148: LD_ADDR_OWVAR 21
12152: PUSH
12153: LD_INT 2
12155: ST_TO_ADDR
// hc_name := Dark Warrior ;
12156: LD_ADDR_OWVAR 26
12160: PUSH
12161: LD_STRING Dark Warrior
12163: ST_TO_ADDR
// hc_gallery :=  ;
12164: LD_ADDR_OWVAR 33
12168: PUSH
12169: LD_STRING 
12171: ST_TO_ADDR
// hc_noskilllimit := true ;
12172: LD_ADDR_OWVAR 76
12176: PUSH
12177: LD_INT 1
12179: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
12180: LD_ADDR_OWVAR 31
12184: PUSH
12185: LD_INT 30
12187: PUSH
12188: LD_INT 30
12190: PUSH
12191: LD_INT 30
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
// un := CreateHuman ;
12203: LD_ADDR_VAR 0 3
12207: PUSH
12208: CALL_OW 44
12212: ST_TO_ADDR
// hc_noskilllimit := false ;
12213: LD_ADDR_OWVAR 76
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12221: LD_VAR 0 3
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL_OW 51
// ToLua ( playRanger() ) ;
12233: LD_STRING playRanger()
12235: PPUSH
12236: CALL_OW 559
// p := 0 ;
12240: LD_ADDR_VAR 0 2
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12248: LD_INT 35
12250: PPUSH
12251: CALL_OW 67
// p := p + 1 ;
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_VAR 0 2
12264: PUSH
12265: LD_INT 1
12267: PLUS
12268: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
12269: LD_VAR 0 3
12273: PPUSH
12274: CALL_OW 256
12278: PUSH
12279: LD_INT 1000
12281: LESS
12282: IFFALSE 12296
// SetLives ( un , 1000 ) ;
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1000
12291: PPUSH
12292: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
12296: LD_VAR 0 3
12300: PPUSH
12301: LD_INT 81
12303: PUSH
12304: LD_OWVAR 2
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 91
12315: PUSH
12316: LD_VAR 0 3
12320: PUSH
12321: LD_INT 30
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: PPUSH
12338: LD_VAR 0 3
12342: PPUSH
12343: CALL_OW 74
12347: PPUSH
12348: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
12352: LD_VAR 0 2
12356: PUSH
12357: LD_INT 80
12359: GREATER
12360: IFTRUE 12373
12362: PUSH
12363: LD_VAR 0 3
12367: PPUSH
12368: CALL_OW 301
12372: OR
12373: IFFALSE 12248
// if un then
12375: LD_VAR 0 3
12379: IFFALSE 12390
// RemoveUnit ( un ) ;
12381: LD_VAR 0 3
12385: PPUSH
12386: CALL_OW 64
// end ;
12390: PPOPN 3
12392: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
12393: LD_EXP 56
12397: IFFALSE 12513
12399: GO 12401
12401: DISABLE
12402: LD_INT 0
12404: PPUSH
12405: PPUSH
12406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_INT 81
12414: PUSH
12415: LD_OWVAR 2
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 21
12426: PUSH
12427: LD_INT 1
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 69
12442: ST_TO_ADDR
// ToLua ( playComputer() ) ;
12443: LD_STRING playComputer()
12445: PPUSH
12446: CALL_OW 559
// if not tmp then
12450: LD_VAR 0 2
12454: NOT
12455: IFFALSE 12459
// exit ;
12457: GO 12513
// for i in tmp do
12459: LD_ADDR_VAR 0 1
12463: PUSH
12464: LD_VAR 0 2
12468: PUSH
12469: FOR_IN
12470: IFFALSE 12511
// for j := 1 to 4 do
12472: LD_ADDR_VAR 0 3
12476: PUSH
12477: DOUBLE
12478: LD_INT 1
12480: DEC
12481: ST_TO_ADDR
12482: LD_INT 4
12484: PUSH
12485: FOR_TO
12486: IFFALSE 12507
// SetSkill ( i , j , 10 ) ;
12488: LD_VAR 0 1
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 10
12500: PPUSH
12501: CALL_OW 237
12505: GO 12485
12507: POP
12508: POP
12509: GO 12469
12511: POP
12512: POP
// end ;
12513: PPOPN 3
12515: END
// every 0 0$1 trigger s30 do var i , tmp ;
12516: LD_EXP 57
12520: IFFALSE 12589
12522: GO 12524
12524: DISABLE
12525: LD_INT 0
12527: PPUSH
12528: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_OWVAR 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: ST_TO_ADDR
// if not tmp then
12551: LD_VAR 0 2
12555: NOT
12556: IFFALSE 12560
// exit ;
12558: GO 12589
// for i in tmp do
12560: LD_ADDR_VAR 0 1
12564: PUSH
12565: LD_VAR 0 2
12569: PUSH
12570: FOR_IN
12571: IFFALSE 12587
// SetLives ( i , 300 ) ;
12573: LD_VAR 0 1
12577: PPUSH
12578: LD_INT 300
12580: PPUSH
12581: CALL_OW 234
12585: GO 12570
12587: POP
12588: POP
// end ;
12589: PPOPN 2
12591: END
// every 0 0$1 trigger s60 do var i , tmp ;
12592: LD_EXP 58
12596: IFFALSE 12665
12598: GO 12600
12600: DISABLE
12601: LD_INT 0
12603: PPUSH
12604: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12605: LD_ADDR_VAR 0 2
12609: PUSH
12610: LD_INT 22
12612: PUSH
12613: LD_OWVAR 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: ST_TO_ADDR
// if not tmp then
12627: LD_VAR 0 2
12631: NOT
12632: IFFALSE 12636
// exit ;
12634: GO 12665
// for i in tmp do
12636: LD_ADDR_VAR 0 1
12640: PUSH
12641: LD_VAR 0 2
12645: PUSH
12646: FOR_IN
12647: IFFALSE 12663
// SetLives ( i , 600 ) ;
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_INT 600
12656: PPUSH
12657: CALL_OW 234
12661: GO 12646
12663: POP
12664: POP
// end ;
12665: PPOPN 2
12667: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12668: LD_INT 0
12670: PPUSH
// case cmd of 301 :
12671: LD_VAR 0 1
12675: PUSH
12676: LD_INT 301
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12716
12684: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
12685: LD_VAR 0 6
12689: PPUSH
12690: LD_VAR 0 7
12694: PPUSH
12695: LD_VAR 0 8
12699: PPUSH
12700: LD_VAR 0 4
12704: PPUSH
12705: LD_VAR 0 5
12709: PPUSH
12710: CALL 13929 0 5
12714: GO 12837
12716: LD_INT 302
12718: DOUBLE
12719: EQUAL
12720: IFTRUE 12724
12722: GO 12761
12724: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
12725: LD_VAR 0 6
12729: PPUSH
12730: LD_VAR 0 7
12734: PPUSH
12735: LD_VAR 0 8
12739: PPUSH
12740: LD_VAR 0 9
12744: PPUSH
12745: LD_VAR 0 4
12749: PPUSH
12750: LD_VAR 0 5
12754: PPUSH
12755: CALL 14020 0 6
12759: GO 12837
12761: LD_INT 303
12763: DOUBLE
12764: EQUAL
12765: IFTRUE 12769
12767: GO 12806
12769: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
12770: LD_VAR 0 6
12774: PPUSH
12775: LD_VAR 0 7
12779: PPUSH
12780: LD_VAR 0 8
12784: PPUSH
12785: LD_VAR 0 9
12789: PPUSH
12790: LD_VAR 0 4
12794: PPUSH
12795: LD_VAR 0 5
12799: PPUSH
12800: CALL 12842 0 6
12804: GO 12837
12806: LD_INT 304
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12836
12814: POP
// hHackTeleport ( unit , x , y ) ; end ;
12815: LD_VAR 0 2
12819: PPUSH
12820: LD_VAR 0 4
12824: PPUSH
12825: LD_VAR 0 5
12829: PPUSH
12830: CALL 14613 0 3
12834: GO 12837
12836: POP
// end ;
12837: LD_VAR 0 12
12841: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
12842: LD_INT 0
12844: PPUSH
12845: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
12846: LD_VAR 0 1
12850: PUSH
12851: LD_INT 1
12853: LESS
12854: IFTRUE 12866
12856: PUSH
12857: LD_VAR 0 1
12861: PUSH
12862: LD_INT 3
12864: GREATER
12865: OR
12866: IFTRUE 12884
12868: PUSH
12869: LD_VAR 0 5
12873: PPUSH
12874: LD_VAR 0 6
12878: PPUSH
12879: CALL_OW 428
12883: OR
12884: IFFALSE 12888
// exit ;
12886: GO 13616
// uc_side := your_side ;
12888: LD_ADDR_OWVAR 20
12892: PUSH
12893: LD_OWVAR 2
12897: ST_TO_ADDR
// uc_nation := nation ;
12898: LD_ADDR_OWVAR 21
12902: PUSH
12903: LD_VAR 0 1
12907: ST_TO_ADDR
// bc_level = 1 ;
12908: LD_ADDR_OWVAR 43
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// case btype of 1 :
12916: LD_VAR 0 2
12920: PUSH
12921: LD_INT 1
12923: DOUBLE
12924: EQUAL
12925: IFTRUE 12929
12927: GO 12940
12929: POP
// bc_type := b_depot ; 2 :
12930: LD_ADDR_OWVAR 42
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
12938: GO 13560
12940: LD_INT 2
12942: DOUBLE
12943: EQUAL
12944: IFTRUE 12948
12946: GO 12959
12948: POP
// bc_type := b_warehouse ; 3 :
12949: LD_ADDR_OWVAR 42
12953: PUSH
12954: LD_INT 1
12956: ST_TO_ADDR
12957: GO 13560
12959: LD_INT 3
12961: DOUBLE
12962: EQUAL
12963: IFTRUE 12967
12965: GO 12978
12967: POP
// bc_type := b_lab ; 4 .. 9 :
12968: LD_ADDR_OWVAR 42
12972: PUSH
12973: LD_INT 6
12975: ST_TO_ADDR
12976: GO 13560
12978: LD_INT 4
12980: DOUBLE
12981: GREATEREQUAL
12982: IFFALSE 12990
12984: LD_INT 9
12986: DOUBLE
12987: LESSEQUAL
12988: IFTRUE 12992
12990: GO 13052
12992: POP
// begin bc_type := b_lab_half ;
12993: LD_ADDR_OWVAR 42
12997: PUSH
12998: LD_INT 7
13000: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
13001: LD_ADDR_OWVAR 44
13005: PUSH
13006: LD_INT 10
13008: PUSH
13009: LD_INT 11
13011: PUSH
13012: LD_INT 12
13014: PUSH
13015: LD_INT 15
13017: PUSH
13018: LD_INT 14
13020: PUSH
13021: LD_INT 13
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_INT 3
13039: MINUS
13040: ARRAY
13041: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13042: LD_ADDR_OWVAR 45
13046: PUSH
13047: LD_INT 9
13049: ST_TO_ADDR
// end ; 10 .. 13 :
13050: GO 13560
13052: LD_INT 10
13054: DOUBLE
13055: GREATEREQUAL
13056: IFFALSE 13064
13058: LD_INT 13
13060: DOUBLE
13061: LESSEQUAL
13062: IFTRUE 13066
13064: GO 13143
13066: POP
// begin bc_type := b_lab_full ;
13067: LD_ADDR_OWVAR 42
13071: PUSH
13072: LD_INT 8
13074: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
13075: LD_ADDR_OWVAR 44
13079: PUSH
13080: LD_INT 10
13082: PUSH
13083: LD_INT 12
13085: PUSH
13086: LD_INT 14
13088: PUSH
13089: LD_INT 13
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: LD_VAR 0 2
13102: PUSH
13103: LD_INT 9
13105: MINUS
13106: ARRAY
13107: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
13108: LD_ADDR_OWVAR 45
13112: PUSH
13113: LD_INT 11
13115: PUSH
13116: LD_INT 15
13118: PUSH
13119: LD_INT 12
13121: PUSH
13122: LD_INT 15
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: LD_VAR 0 2
13135: PUSH
13136: LD_INT 9
13138: MINUS
13139: ARRAY
13140: ST_TO_ADDR
// end ; 14 :
13141: GO 13560
13143: LD_INT 14
13145: DOUBLE
13146: EQUAL
13147: IFTRUE 13151
13149: GO 13162
13151: POP
// bc_type := b_workshop ; 15 :
13152: LD_ADDR_OWVAR 42
13156: PUSH
13157: LD_INT 2
13159: ST_TO_ADDR
13160: GO 13560
13162: LD_INT 15
13164: DOUBLE
13165: EQUAL
13166: IFTRUE 13170
13168: GO 13181
13170: POP
// bc_type := b_factory ; 16 :
13171: LD_ADDR_OWVAR 42
13175: PUSH
13176: LD_INT 3
13178: ST_TO_ADDR
13179: GO 13560
13181: LD_INT 16
13183: DOUBLE
13184: EQUAL
13185: IFTRUE 13189
13187: GO 13200
13189: POP
// bc_type := b_ext_gun ; 17 :
13190: LD_ADDR_OWVAR 42
13194: PUSH
13195: LD_INT 17
13197: ST_TO_ADDR
13198: GO 13560
13200: LD_INT 17
13202: DOUBLE
13203: EQUAL
13204: IFTRUE 13208
13206: GO 13236
13208: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
13209: LD_ADDR_OWVAR 42
13213: PUSH
13214: LD_INT 19
13216: PUSH
13217: LD_INT 23
13219: PUSH
13220: LD_INT 19
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PUSH
13228: LD_VAR 0 1
13232: ARRAY
13233: ST_TO_ADDR
13234: GO 13560
13236: LD_INT 18
13238: DOUBLE
13239: EQUAL
13240: IFTRUE 13244
13242: GO 13255
13244: POP
// bc_type := b_ext_radar ; 19 :
13245: LD_ADDR_OWVAR 42
13249: PUSH
13250: LD_INT 20
13252: ST_TO_ADDR
13253: GO 13560
13255: LD_INT 19
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13274
13263: POP
// bc_type := b_ext_radio ; 20 :
13264: LD_ADDR_OWVAR 42
13268: PUSH
13269: LD_INT 22
13271: ST_TO_ADDR
13272: GO 13560
13274: LD_INT 20
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13293
13282: POP
// bc_type := b_ext_siberium ; 21 :
13283: LD_ADDR_OWVAR 42
13287: PUSH
13288: LD_INT 21
13290: ST_TO_ADDR
13291: GO 13560
13293: LD_INT 21
13295: DOUBLE
13296: EQUAL
13297: IFTRUE 13301
13299: GO 13312
13301: POP
// bc_type := b_ext_computer ; 22 :
13302: LD_ADDR_OWVAR 42
13306: PUSH
13307: LD_INT 24
13309: ST_TO_ADDR
13310: GO 13560
13312: LD_INT 22
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13320
13318: GO 13331
13320: POP
// bc_type := b_ext_track ; 23 :
13321: LD_ADDR_OWVAR 42
13325: PUSH
13326: LD_INT 16
13328: ST_TO_ADDR
13329: GO 13560
13331: LD_INT 23
13333: DOUBLE
13334: EQUAL
13335: IFTRUE 13339
13337: GO 13350
13339: POP
// bc_type := b_ext_laser ; 24 :
13340: LD_ADDR_OWVAR 42
13344: PUSH
13345: LD_INT 25
13347: ST_TO_ADDR
13348: GO 13560
13350: LD_INT 24
13352: DOUBLE
13353: EQUAL
13354: IFTRUE 13358
13356: GO 13369
13358: POP
// bc_type := b_control_tower ; 25 :
13359: LD_ADDR_OWVAR 42
13363: PUSH
13364: LD_INT 36
13366: ST_TO_ADDR
13367: GO 13560
13369: LD_INT 25
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13388
13377: POP
// bc_type := b_breastwork ; 26 :
13378: LD_ADDR_OWVAR 42
13382: PUSH
13383: LD_INT 31
13385: ST_TO_ADDR
13386: GO 13560
13388: LD_INT 26
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13407
13396: POP
// bc_type := b_bunker ; 27 :
13397: LD_ADDR_OWVAR 42
13401: PUSH
13402: LD_INT 32
13404: ST_TO_ADDR
13405: GO 13560
13407: LD_INT 27
13409: DOUBLE
13410: EQUAL
13411: IFTRUE 13415
13413: GO 13426
13415: POP
// bc_type := b_turret ; 28 :
13416: LD_ADDR_OWVAR 42
13420: PUSH
13421: LD_INT 33
13423: ST_TO_ADDR
13424: GO 13560
13426: LD_INT 28
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13445
13434: POP
// bc_type := b_armoury ; 29 :
13435: LD_ADDR_OWVAR 42
13439: PUSH
13440: LD_INT 4
13442: ST_TO_ADDR
13443: GO 13560
13445: LD_INT 29
13447: DOUBLE
13448: EQUAL
13449: IFTRUE 13453
13451: GO 13464
13453: POP
// bc_type := b_barracks ; 30 :
13454: LD_ADDR_OWVAR 42
13458: PUSH
13459: LD_INT 5
13461: ST_TO_ADDR
13462: GO 13560
13464: LD_INT 30
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13483
13472: POP
// bc_type := b_solar_power ; 31 :
13473: LD_ADDR_OWVAR 42
13477: PUSH
13478: LD_INT 27
13480: ST_TO_ADDR
13481: GO 13560
13483: LD_INT 31
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13502
13491: POP
// bc_type := b_oil_power ; 32 :
13492: LD_ADDR_OWVAR 42
13496: PUSH
13497: LD_INT 26
13499: ST_TO_ADDR
13500: GO 13560
13502: LD_INT 32
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13521
13510: POP
// bc_type := b_siberite_power ; 33 :
13511: LD_ADDR_OWVAR 42
13515: PUSH
13516: LD_INT 28
13518: ST_TO_ADDR
13519: GO 13560
13521: LD_INT 33
13523: DOUBLE
13524: EQUAL
13525: IFTRUE 13529
13527: GO 13540
13529: POP
// bc_type := b_oil_mine ; 34 :
13530: LD_ADDR_OWVAR 42
13534: PUSH
13535: LD_INT 29
13537: ST_TO_ADDR
13538: GO 13560
13540: LD_INT 34
13542: DOUBLE
13543: EQUAL
13544: IFTRUE 13548
13546: GO 13559
13548: POP
// bc_type := b_siberite_mine ; end ;
13549: LD_ADDR_OWVAR 42
13553: PUSH
13554: LD_INT 30
13556: ST_TO_ADDR
13557: GO 13560
13559: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
13560: LD_ADDR_VAR 0 8
13564: PUSH
13565: LD_VAR 0 5
13569: PPUSH
13570: LD_VAR 0 6
13574: PPUSH
13575: LD_VAR 0 3
13579: PPUSH
13580: CALL_OW 47
13584: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
13585: LD_OWVAR 42
13589: PUSH
13590: LD_INT 32
13592: PUSH
13593: LD_INT 33
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: IN
13600: IFFALSE 13616
// PlaceWeaponTurret ( b , weapon ) ;
13602: LD_VAR 0 8
13606: PPUSH
13607: LD_VAR 0 4
13611: PPUSH
13612: CALL_OW 431
// end ;
13616: LD_VAR 0 7
13620: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
13621: LD_INT 0
13623: PPUSH
13624: PPUSH
13625: PPUSH
13626: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13627: LD_ADDR_VAR 0 4
13631: PUSH
13632: LD_INT 22
13634: PUSH
13635: LD_OWVAR 2
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 2
13646: PUSH
13647: LD_INT 30
13649: PUSH
13650: LD_INT 0
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 30
13659: PUSH
13660: LD_INT 1
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 69
13680: ST_TO_ADDR
// if not tmp then
13681: LD_VAR 0 4
13685: NOT
13686: IFFALSE 13690
// exit ;
13688: GO 13749
// for i in tmp do
13690: LD_ADDR_VAR 0 2
13694: PUSH
13695: LD_VAR 0 4
13699: PUSH
13700: FOR_IN
13701: IFFALSE 13747
// for j = 1 to 3 do
13703: LD_ADDR_VAR 0 3
13707: PUSH
13708: DOUBLE
13709: LD_INT 1
13711: DEC
13712: ST_TO_ADDR
13713: LD_INT 3
13715: PUSH
13716: FOR_TO
13717: IFFALSE 13743
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13719: LD_VAR 0 2
13723: PPUSH
13724: CALL_OW 274
13728: PPUSH
13729: LD_VAR 0 3
13733: PPUSH
13734: LD_INT 99999
13736: PPUSH
13737: CALL_OW 277
13741: GO 13716
13743: POP
13744: POP
13745: GO 13700
13747: POP
13748: POP
// end ;
13749: LD_VAR 0 1
13753: RET
// export function hHackSetLevel10 ; var i , j ; begin
13754: LD_INT 0
13756: PPUSH
13757: PPUSH
13758: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13759: LD_ADDR_VAR 0 2
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PPUSH
13774: CALL_OW 69
13778: PUSH
13779: FOR_IN
13780: IFFALSE 13832
// if IsSelected ( i ) then
13782: LD_VAR 0 2
13786: PPUSH
13787: CALL_OW 306
13791: IFFALSE 13830
// begin for j := 1 to 4 do
13793: LD_ADDR_VAR 0 3
13797: PUSH
13798: DOUBLE
13799: LD_INT 1
13801: DEC
13802: ST_TO_ADDR
13803: LD_INT 4
13805: PUSH
13806: FOR_TO
13807: IFFALSE 13828
// SetSkill ( i , j , 10 ) ;
13809: LD_VAR 0 2
13813: PPUSH
13814: LD_VAR 0 3
13818: PPUSH
13819: LD_INT 10
13821: PPUSH
13822: CALL_OW 237
13826: GO 13806
13828: POP
13829: POP
// end ;
13830: GO 13779
13832: POP
13833: POP
// end ;
13834: LD_VAR 0 1
13838: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
13839: LD_INT 0
13841: PPUSH
13842: PPUSH
13843: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13844: LD_ADDR_VAR 0 2
13848: PUSH
13849: LD_INT 22
13851: PUSH
13852: LD_OWVAR 2
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 21
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: PUSH
13880: FOR_IN
13881: IFFALSE 13922
// begin for j := 1 to 4 do
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_INT 4
13895: PUSH
13896: FOR_TO
13897: IFFALSE 13918
// SetSkill ( i , j , 10 ) ;
13899: LD_VAR 0 2
13903: PPUSH
13904: LD_VAR 0 3
13908: PPUSH
13909: LD_INT 10
13911: PPUSH
13912: CALL_OW 237
13916: GO 13896
13918: POP
13919: POP
// end ;
13920: GO 13880
13922: POP
13923: POP
// end ;
13924: LD_VAR 0 1
13928: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
13929: LD_INT 0
13931: PPUSH
// uc_side := your_side ;
13932: LD_ADDR_OWVAR 20
13936: PUSH
13937: LD_OWVAR 2
13941: ST_TO_ADDR
// uc_nation := nation ;
13942: LD_ADDR_OWVAR 21
13946: PUSH
13947: LD_VAR 0 1
13951: ST_TO_ADDR
// InitHc ;
13952: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13956: LD_INT 0
13958: PPUSH
13959: LD_VAR 0 2
13963: PPUSH
13964: LD_VAR 0 3
13968: PPUSH
13969: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
13973: LD_VAR 0 4
13977: PPUSH
13978: LD_VAR 0 5
13982: PPUSH
13983: CALL_OW 428
13987: PUSH
13988: LD_INT 0
13990: EQUAL
13991: IFFALSE 14015
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
13993: CALL_OW 44
13997: PPUSH
13998: LD_VAR 0 4
14002: PPUSH
14003: LD_VAR 0 5
14007: PPUSH
14008: LD_INT 1
14010: PPUSH
14011: CALL_OW 48
// end ;
14015: LD_VAR 0 6
14019: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
14020: LD_INT 0
14022: PPUSH
14023: PPUSH
// uc_side := your_side ;
14024: LD_ADDR_OWVAR 20
14028: PUSH
14029: LD_OWVAR 2
14033: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 1
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: LD_INT 4
14050: PUSH
14051: LD_INT 5
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: IN
14061: IFFALSE 14073
// uc_nation := nation_american else
14063: LD_ADDR_OWVAR 21
14067: PUSH
14068: LD_INT 1
14070: ST_TO_ADDR
14071: GO 14116
// if chassis in [ 11 , 12 , 13 , 14 ] then
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 11
14080: PUSH
14081: LD_INT 12
14083: PUSH
14084: LD_INT 13
14086: PUSH
14087: LD_INT 14
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: IN
14096: IFFALSE 14108
// uc_nation := nation_arabian else
14098: LD_ADDR_OWVAR 21
14102: PUSH
14103: LD_INT 2
14105: ST_TO_ADDR
14106: GO 14116
// uc_nation := nation_russian ;
14108: LD_ADDR_OWVAR 21
14112: PUSH
14113: LD_INT 3
14115: ST_TO_ADDR
// vc_chassis := chassis ;
14116: LD_ADDR_OWVAR 37
14120: PUSH
14121: LD_VAR 0 1
14125: ST_TO_ADDR
// vc_engine := engine ;
14126: LD_ADDR_OWVAR 39
14130: PUSH
14131: LD_VAR 0 2
14135: ST_TO_ADDR
// vc_control := control ;
14136: LD_ADDR_OWVAR 38
14140: PUSH
14141: LD_VAR 0 3
14145: ST_TO_ADDR
// vc_weapon := weapon ;
14146: LD_ADDR_OWVAR 40
14150: PUSH
14151: LD_VAR 0 4
14155: ST_TO_ADDR
// un := CreateVehicle ;
14156: LD_ADDR_VAR 0 8
14160: PUSH
14161: CALL_OW 45
14165: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
14166: LD_VAR 0 8
14170: PPUSH
14171: LD_INT 0
14173: PPUSH
14174: LD_INT 5
14176: PPUSH
14177: CALL_OW 12
14181: PPUSH
14182: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
14186: LD_VAR 0 8
14190: PPUSH
14191: LD_VAR 0 5
14195: PPUSH
14196: LD_VAR 0 6
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 48
// end ;
14208: LD_VAR 0 7
14212: RET
// export hInvincible ; every 1 do
14213: GO 14215
14215: DISABLE
// hInvincible := [ ] ;
14216: LD_ADDR_EXP 59
14220: PUSH
14221: EMPTY
14222: ST_TO_ADDR
14223: END
// every 10 do var i ;
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
// begin enable ;
14230: ENABLE
// if not hInvincible then
14231: LD_EXP 59
14235: NOT
14236: IFFALSE 14240
// exit ;
14238: GO 14284
// for i in hInvincible do
14240: LD_ADDR_VAR 0 1
14244: PUSH
14245: LD_EXP 59
14249: PUSH
14250: FOR_IN
14251: IFFALSE 14282
// if GetLives ( i ) < 1000 then
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 256
14262: PUSH
14263: LD_INT 1000
14265: LESS
14266: IFFALSE 14280
// SetLives ( i , 1000 ) ;
14268: LD_VAR 0 1
14272: PPUSH
14273: LD_INT 1000
14275: PPUSH
14276: CALL_OW 234
14280: GO 14250
14282: POP
14283: POP
// end ;
14284: PPOPN 1
14286: END
// export function hHackInvincible ; var i ; begin
14287: LD_INT 0
14289: PPUSH
14290: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: LD_INT 21
14301: PUSH
14302: LD_INT 1
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: PUSH
14329: FOR_IN
14330: IFFALSE 14391
// if IsSelected ( i ) then
14332: LD_VAR 0 2
14336: PPUSH
14337: CALL_OW 306
14341: IFFALSE 14389
// begin if i in hInvincible then
14343: LD_VAR 0 2
14347: PUSH
14348: LD_EXP 59
14352: IN
14353: IFFALSE 14373
// hInvincible := hInvincible diff i else
14355: LD_ADDR_EXP 59
14359: PUSH
14360: LD_EXP 59
14364: PUSH
14365: LD_VAR 0 2
14369: DIFF
14370: ST_TO_ADDR
14371: GO 14389
// hInvincible := hInvincible union i ;
14373: LD_ADDR_EXP 59
14377: PUSH
14378: LD_EXP 59
14382: PUSH
14383: LD_VAR 0 2
14387: UNION
14388: ST_TO_ADDR
// end ;
14389: GO 14329
14391: POP
14392: POP
// end ;
14393: LD_VAR 0 1
14397: RET
// export function hHackInvisible ; var i , j ; begin
14398: LD_INT 0
14400: PPUSH
14401: PPUSH
14402: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 21
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PPUSH
14418: CALL_OW 69
14422: PUSH
14423: FOR_IN
14424: IFFALSE 14448
// if IsSelected ( i ) then
14426: LD_VAR 0 2
14430: PPUSH
14431: CALL_OW 306
14435: IFFALSE 14446
// ComForceInvisible ( i ) ;
14437: LD_VAR 0 2
14441: PPUSH
14442: CALL_OW 496
14446: GO 14423
14448: POP
14449: POP
// end ;
14450: LD_VAR 0 1
14454: RET
// export function hHackChangeYourSide ; begin
14455: LD_INT 0
14457: PPUSH
// if your_side = 8 then
14458: LD_OWVAR 2
14462: PUSH
14463: LD_INT 8
14465: EQUAL
14466: IFFALSE 14478
// your_side := 0 else
14468: LD_ADDR_OWVAR 2
14472: PUSH
14473: LD_INT 0
14475: ST_TO_ADDR
14476: GO 14492
// your_side := your_side + 1 ;
14478: LD_ADDR_OWVAR 2
14482: PUSH
14483: LD_OWVAR 2
14487: PUSH
14488: LD_INT 1
14490: PLUS
14491: ST_TO_ADDR
// end ;
14492: LD_VAR 0 1
14496: RET
// export function hHackChangeUnitSide ; var i , j ; begin
14497: LD_INT 0
14499: PPUSH
14500: PPUSH
14501: PPUSH
// for i in all_units do
14502: LD_ADDR_VAR 0 2
14506: PUSH
14507: LD_OWVAR 3
14511: PUSH
14512: FOR_IN
14513: IFFALSE 14591
// if IsSelected ( i ) then
14515: LD_VAR 0 2
14519: PPUSH
14520: CALL_OW 306
14524: IFFALSE 14589
// begin j := GetSide ( i ) ;
14526: LD_ADDR_VAR 0 3
14530: PUSH
14531: LD_VAR 0 2
14535: PPUSH
14536: CALL_OW 255
14540: ST_TO_ADDR
// if j = 8 then
14541: LD_VAR 0 3
14545: PUSH
14546: LD_INT 8
14548: EQUAL
14549: IFFALSE 14561
// j := 0 else
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: LD_INT 0
14558: ST_TO_ADDR
14559: GO 14575
// j := j + 1 ;
14561: LD_ADDR_VAR 0 3
14565: PUSH
14566: LD_VAR 0 3
14570: PUSH
14571: LD_INT 1
14573: PLUS
14574: ST_TO_ADDR
// SetSide ( i , j ) ;
14575: LD_VAR 0 2
14579: PPUSH
14580: LD_VAR 0 3
14584: PPUSH
14585: CALL_OW 235
// end ;
14589: GO 14512
14591: POP
14592: POP
// end ;
14593: LD_VAR 0 1
14597: RET
// export function hHackFog ; begin
14598: LD_INT 0
14600: PPUSH
// FogOff ( true ) ;
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 344
// end ;
14608: LD_VAR 0 1
14612: RET
// export function hHackTeleport ( unit , x , y ) ; begin
14613: LD_INT 0
14615: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
14616: LD_VAR 0 1
14620: PPUSH
14621: LD_VAR 0 2
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: LD_INT 1
14636: PPUSH
14637: CALL_OW 483
// CenterOnXY ( x , y ) ;
14641: LD_VAR 0 2
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: CALL_OW 84
// end ;
14655: LD_VAR 0 4
14659: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
14664: LD_VAR 0 1
14668: NOT
14669: IFTRUE 14688
14671: PUSH
14672: LD_VAR 0 2
14676: PPUSH
14677: LD_VAR 0 3
14681: PPUSH
14682: CALL_OW 488
14686: NOT
14687: OR
14688: IFTRUE 14723
14690: PUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: CALL_OW 266
14700: PUSH
14701: LD_INT 3
14703: NONEQUAL
14704: IFFALSE 14722
14706: PUSH
14707: LD_VAR 0 1
14711: PPUSH
14712: CALL_OW 247
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: NOT
14721: AND
14722: OR
14723: IFFALSE 14727
// exit ;
14725: GO 15009
// if GetType ( factory ) = unit_human then
14727: LD_VAR 0 1
14731: PPUSH
14732: CALL_OW 247
14736: PUSH
14737: LD_INT 1
14739: EQUAL
14740: IFFALSE 14757
// factory := IsInUnit ( factory ) ;
14742: LD_ADDR_VAR 0 1
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 310
14756: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 266
14766: PUSH
14767: LD_INT 3
14769: NONEQUAL
14770: IFFALSE 14774
// exit ;
14772: GO 15009
// for i := 1 to Count ( factoryWaypoints ) do
14774: LD_ADDR_VAR 0 5
14778: PUSH
14779: DOUBLE
14780: LD_INT 1
14782: DEC
14783: ST_TO_ADDR
14784: LD_EXP 60
14788: PPUSH
14789: CALL 18339 0 1
14793: PUSH
14794: FOR_TO
14795: IFFALSE 14957
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
14797: LD_VAR 0 2
14801: PPUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: CALL_OW 428
14811: PUSH
14812: LD_EXP 60
14816: PUSH
14817: LD_VAR 0 5
14821: ARRAY
14822: PUSH
14823: LD_INT 2
14825: ARRAY
14826: EQUAL
14827: IFFALSE 14859
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14829: LD_ADDR_EXP 60
14833: PUSH
14834: LD_EXP 60
14838: PPUSH
14839: LD_VAR 0 5
14843: PPUSH
14844: CALL_OW 3
14848: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14849: CALL 15014 0 0
// exit ;
14853: POP
14854: POP
14855: GO 15009
// end else
14857: GO 14955
// if factory = factoryWaypoints [ i ] [ 2 ] then
14859: LD_VAR 0 1
14863: PUSH
14864: LD_EXP 60
14868: PUSH
14869: LD_VAR 0 5
14873: ARRAY
14874: PUSH
14875: LD_INT 2
14877: ARRAY
14878: EQUAL
14879: IFFALSE 14955
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
14881: LD_ADDR_EXP 60
14885: PUSH
14886: LD_EXP 60
14890: PPUSH
14891: LD_VAR 0 5
14895: PPUSH
14896: CALL_OW 3
14900: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14901: LD_ADDR_EXP 60
14905: PUSH
14906: LD_EXP 60
14910: PPUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 255
14920: PUSH
14921: LD_VAR 0 1
14925: PUSH
14926: LD_VAR 0 2
14930: PUSH
14931: LD_VAR 0 3
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: PPUSH
14942: CALL 54305 0 2
14946: ST_TO_ADDR
// UpdateFactoryWaypoints ;
14947: CALL 15014 0 0
// exit ;
14951: POP
14952: POP
14953: GO 15009
// end ; end ;
14955: GO 14794
14957: POP
14958: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
14959: LD_ADDR_EXP 60
14963: PUSH
14964: LD_EXP 60
14968: PPUSH
14969: LD_VAR 0 1
14973: PPUSH
14974: CALL_OW 255
14978: PUSH
14979: LD_VAR 0 1
14983: PUSH
14984: LD_VAR 0 2
14988: PUSH
14989: LD_VAR 0 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL 54305 0 2
15004: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15005: CALL 15014 0 0
// end ;
15009: LD_VAR 0 4
15013: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15014: LD_INT 0
15016: PPUSH
15017: PPUSH
15018: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15019: LD_STRING resetFactoryWaypoint();
15021: PPUSH
15022: CALL_OW 559
// if factoryWaypoints then
15026: LD_EXP 60
15030: IFFALSE 15151
// begin list := factoryWaypoints ;
15032: LD_ADDR_VAR 0 3
15036: PUSH
15037: LD_EXP 60
15041: ST_TO_ADDR
// for i := 1 to list do
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: DOUBLE
15048: LD_INT 1
15050: DEC
15051: ST_TO_ADDR
15052: LD_VAR 0 3
15056: PUSH
15057: FOR_TO
15058: IFFALSE 15149
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15060: LD_STRING setFactoryWaypointXY(
15062: PUSH
15063: LD_VAR 0 3
15067: PUSH
15068: LD_VAR 0 2
15072: ARRAY
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: STR
15078: PUSH
15079: LD_STRING ,
15081: STR
15082: PUSH
15083: LD_VAR 0 3
15087: PUSH
15088: LD_VAR 0 2
15092: ARRAY
15093: PUSH
15094: LD_INT 2
15096: ARRAY
15097: STR
15098: PUSH
15099: LD_STRING ,
15101: STR
15102: PUSH
15103: LD_VAR 0 3
15107: PUSH
15108: LD_VAR 0 2
15112: ARRAY
15113: PUSH
15114: LD_INT 3
15116: ARRAY
15117: STR
15118: PUSH
15119: LD_STRING ,
15121: STR
15122: PUSH
15123: LD_VAR 0 3
15127: PUSH
15128: LD_VAR 0 2
15132: ARRAY
15133: PUSH
15134: LD_INT 4
15136: ARRAY
15137: STR
15138: PUSH
15139: LD_STRING )
15141: STR
15142: PPUSH
15143: CALL_OW 559
15147: GO 15057
15149: POP
15150: POP
// end ; end ;
15151: LD_VAR 0 1
15155: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
15156: LD_INT 0
15158: PPUSH
// if HexInfo ( x , y ) = warehouse then
15159: LD_VAR 0 2
15163: PPUSH
15164: LD_VAR 0 3
15168: PPUSH
15169: CALL_OW 428
15173: PUSH
15174: LD_VAR 0 1
15178: EQUAL
15179: IFFALSE 15206
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
15181: LD_ADDR_EXP 62
15185: PUSH
15186: LD_EXP 62
15190: PPUSH
15191: LD_VAR 0 1
15195: PPUSH
15196: LD_INT 0
15198: PPUSH
15199: CALL_OW 1
15203: ST_TO_ADDR
15204: GO 15257
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
15206: LD_ADDR_EXP 62
15210: PUSH
15211: LD_EXP 62
15215: PPUSH
15216: LD_VAR 0 1
15220: PPUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 255
15230: PUSH
15231: LD_VAR 0 1
15235: PUSH
15236: LD_VAR 0 2
15240: PUSH
15241: LD_VAR 0 3
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: PPUSH
15252: CALL_OW 1
15256: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
15257: CALL 15266 0 0
// end ;
15261: LD_VAR 0 4
15265: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
15266: LD_INT 0
15268: PPUSH
15269: PPUSH
15270: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
15271: LD_STRING resetWarehouseGatheringPoints();
15273: PPUSH
15274: CALL_OW 559
// if warehouseGatheringPoints then
15278: LD_EXP 62
15282: IFFALSE 15408
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
15284: LD_ADDR_VAR 0 3
15288: PUSH
15289: LD_EXP 62
15293: PPUSH
15294: CALL 58239 0 1
15298: ST_TO_ADDR
// for i := 1 to list do
15299: LD_ADDR_VAR 0 2
15303: PUSH
15304: DOUBLE
15305: LD_INT 1
15307: DEC
15308: ST_TO_ADDR
15309: LD_VAR 0 3
15313: PUSH
15314: FOR_TO
15315: IFFALSE 15406
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15317: LD_STRING setWarehouseGatheringPointXY(
15319: PUSH
15320: LD_VAR 0 3
15324: PUSH
15325: LD_VAR 0 2
15329: ARRAY
15330: PUSH
15331: LD_INT 1
15333: ARRAY
15334: STR
15335: PUSH
15336: LD_STRING ,
15338: STR
15339: PUSH
15340: LD_VAR 0 3
15344: PUSH
15345: LD_VAR 0 2
15349: ARRAY
15350: PUSH
15351: LD_INT 2
15353: ARRAY
15354: STR
15355: PUSH
15356: LD_STRING ,
15358: STR
15359: PUSH
15360: LD_VAR 0 3
15364: PUSH
15365: LD_VAR 0 2
15369: ARRAY
15370: PUSH
15371: LD_INT 3
15373: ARRAY
15374: STR
15375: PUSH
15376: LD_STRING ,
15378: STR
15379: PUSH
15380: LD_VAR 0 3
15384: PUSH
15385: LD_VAR 0 2
15389: ARRAY
15390: PUSH
15391: LD_INT 4
15393: ARRAY
15394: STR
15395: PUSH
15396: LD_STRING )
15398: STR
15399: PPUSH
15400: CALL_OW 559
15404: GO 15314
15406: POP
15407: POP
// end ; end ;
15408: LD_VAR 0 1
15412: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
15413: LD_EXP 62
15417: IFFALSE 16112
15419: GO 15421
15421: DISABLE
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
// begin enable ;
15433: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: LD_EXP 62
15443: PPUSH
15444: CALL 58239 0 1
15448: ST_TO_ADDR
// if not list then
15449: LD_VAR 0 3
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 16112
// for i := 1 to list do
15458: LD_ADDR_VAR 0 1
15462: PUSH
15463: DOUBLE
15464: LD_INT 1
15466: DEC
15467: ST_TO_ADDR
15468: LD_VAR 0 3
15472: PUSH
15473: FOR_TO
15474: IFFALSE 16110
// begin depot := list [ i ] [ 2 ] ;
15476: LD_ADDR_VAR 0 8
15480: PUSH
15481: LD_VAR 0 3
15485: PUSH
15486: LD_VAR 0 1
15490: ARRAY
15491: PUSH
15492: LD_INT 2
15494: ARRAY
15495: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
15496: LD_ADDR_VAR 0 5
15500: PUSH
15501: LD_VAR 0 3
15505: PUSH
15506: LD_VAR 0 1
15510: ARRAY
15511: PUSH
15512: LD_INT 1
15514: ARRAY
15515: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
15516: LD_VAR 0 8
15520: PPUSH
15521: CALL_OW 301
15525: IFTRUE 15544
15527: PUSH
15528: LD_VAR 0 5
15532: PUSH
15533: LD_VAR 0 8
15537: PPUSH
15538: CALL_OW 255
15542: NONEQUAL
15543: OR
15544: IFFALSE 15573
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
15546: LD_ADDR_EXP 62
15550: PUSH
15551: LD_EXP 62
15555: PPUSH
15556: LD_VAR 0 8
15560: PPUSH
15561: LD_INT 0
15563: PPUSH
15564: CALL_OW 1
15568: ST_TO_ADDR
// exit ;
15569: POP
15570: POP
15571: GO 16112
// end ; x := list [ i ] [ 3 ] ;
15573: LD_ADDR_VAR 0 6
15577: PUSH
15578: LD_VAR 0 3
15582: PUSH
15583: LD_VAR 0 1
15587: ARRAY
15588: PUSH
15589: LD_INT 3
15591: ARRAY
15592: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
15593: LD_ADDR_VAR 0 7
15597: PUSH
15598: LD_VAR 0 3
15602: PUSH
15603: LD_VAR 0 1
15607: ARRAY
15608: PUSH
15609: LD_INT 4
15611: ARRAY
15612: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
15613: LD_ADDR_VAR 0 9
15617: PUSH
15618: LD_VAR 0 6
15622: PPUSH
15623: LD_VAR 0 7
15627: PPUSH
15628: LD_INT 16
15630: PPUSH
15631: CALL 56813 0 3
15635: ST_TO_ADDR
// if not cratesNearbyPoint then
15636: LD_VAR 0 9
15640: NOT
15641: IFFALSE 15647
// exit ;
15643: POP
15644: POP
15645: GO 16112
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
15647: LD_ADDR_VAR 0 4
15651: PUSH
15652: LD_INT 22
15654: PUSH
15655: LD_VAR 0 5
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 3
15666: PUSH
15667: LD_INT 60
15669: PUSH
15670: EMPTY
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 91
15679: PUSH
15680: LD_VAR 0 8
15684: PUSH
15685: LD_INT 6
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 2
15695: PUSH
15696: LD_INT 25
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 25
15708: PUSH
15709: LD_INT 16
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: PPUSH
15727: CALL_OW 69
15731: PUSH
15732: LD_VAR 0 8
15736: PPUSH
15737: CALL_OW 313
15741: PPUSH
15742: LD_INT 3
15744: PUSH
15745: LD_INT 60
15747: PUSH
15748: EMPTY
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 2
15757: PUSH
15758: LD_INT 25
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: LD_INT 16
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 72
15791: UNION
15792: ST_TO_ADDR
// if tmp then
15793: LD_VAR 0 4
15797: IFFALSE 15877
// begin tmp := ShrinkArray ( tmp , 3 ) ;
15799: LD_ADDR_VAR 0 4
15803: PUSH
15804: LD_VAR 0 4
15808: PPUSH
15809: LD_INT 3
15811: PPUSH
15812: CALL 54620 0 2
15816: ST_TO_ADDR
// for j in tmp do
15817: LD_ADDR_VAR 0 2
15821: PUSH
15822: LD_VAR 0 4
15826: PUSH
15827: FOR_IN
15828: IFFALSE 15871
// begin if IsInUnit ( j ) then
15830: LD_VAR 0 2
15834: PPUSH
15835: CALL_OW 310
15839: IFFALSE 15850
// ComExit ( j ) ;
15841: LD_VAR 0 2
15845: PPUSH
15846: CALL 54703 0 1
// AddComCollect ( j , x , y ) ;
15850: LD_VAR 0 2
15854: PPUSH
15855: LD_VAR 0 6
15859: PPUSH
15860: LD_VAR 0 7
15864: PPUSH
15865: CALL_OW 177
// end ;
15869: GO 15827
15871: POP
15872: POP
// exit ;
15873: POP
15874: POP
15875: GO 16112
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
15877: LD_ADDR_VAR 0 4
15881: PUSH
15882: LD_INT 22
15884: PUSH
15885: LD_VAR 0 5
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 91
15896: PUSH
15897: LD_VAR 0 8
15901: PUSH
15902: LD_INT 8
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 2
15912: PUSH
15913: LD_INT 34
15915: PUSH
15916: LD_INT 12
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 34
15925: PUSH
15926: LD_INT 51
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 34
15935: PUSH
15936: LD_INT 32
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 34
15945: PUSH
15946: LD_INT 89
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: PPUSH
15965: CALL_OW 69
15969: ST_TO_ADDR
// if tmp then
15970: LD_VAR 0 4
15974: IFFALSE 16108
// begin for j in tmp do
15976: LD_ADDR_VAR 0 2
15980: PUSH
15981: LD_VAR 0 4
15985: PUSH
15986: FOR_IN
15987: IFFALSE 16106
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
15989: LD_VAR 0 2
15993: PPUSH
15994: CALL_OW 262
15998: PUSH
15999: LD_INT 3
16001: EQUAL
16002: IFTRUE 16019
16004: PUSH
16005: LD_VAR 0 2
16009: PPUSH
16010: CALL_OW 261
16014: PUSH
16015: LD_INT 20
16017: GREATER
16018: OR
16019: IFFALSE 16033
16021: PUSH
16022: LD_VAR 0 2
16026: PPUSH
16027: CALL_OW 314
16031: NOT
16032: AND
16033: IFFALSE 16063
16035: PUSH
16036: LD_VAR 0 2
16040: PPUSH
16041: CALL_OW 263
16045: PUSH
16046: LD_INT 1
16048: NONEQUAL
16049: IFTRUE 16062
16051: PUSH
16052: LD_VAR 0 2
16056: PPUSH
16057: CALL_OW 311
16061: OR
16062: AND
16063: IFFALSE 16104
// begin ComCollect ( j , x , y ) ;
16065: LD_VAR 0 2
16069: PPUSH
16070: LD_VAR 0 6
16074: PPUSH
16075: LD_VAR 0 7
16079: PPUSH
16080: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 8
16093: PPUSH
16094: CALL_OW 172
// exit ;
16098: POP
16099: POP
16100: POP
16101: POP
16102: GO 16112
// end ;
16104: GO 15986
16106: POP
16107: POP
// end ; end ;
16108: GO 15473
16110: POP
16111: POP
// end ; end_of_file
16112: PPOPN 9
16114: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16115: LD_INT 0
16117: PPUSH
16118: PPUSH
// if exist_mode then
16119: LD_VAR 0 2
16123: IFFALSE 16169
// begin unit := CreateCharacter ( prefix & ident ) ;
16125: LD_ADDR_VAR 0 5
16129: PUSH
16130: LD_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: STR
16140: PPUSH
16141: CALL_OW 34
16145: ST_TO_ADDR
// if unit then
16146: LD_VAR 0 5
16150: IFFALSE 16167
// DeleteCharacters ( prefix & ident ) ;
16152: LD_VAR 0 3
16156: PUSH
16157: LD_VAR 0 1
16161: STR
16162: PPUSH
16163: CALL_OW 40
// end else
16167: GO 16184
// unit := NewCharacter ( ident ) ;
16169: LD_ADDR_VAR 0 5
16173: PUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 25
16183: ST_TO_ADDR
// result := unit ;
16184: LD_ADDR_VAR 0 4
16188: PUSH
16189: LD_VAR 0 5
16193: ST_TO_ADDR
// end ;
16194: LD_VAR 0 4
16198: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16199: LD_INT 0
16201: PPUSH
16202: PPUSH
// if exist_mode then
16203: LD_VAR 0 2
16207: IFFALSE 16232
// unit := CreateCharacter ( prefix & ident ) else
16209: LD_ADDR_VAR 0 5
16213: PUSH
16214: LD_VAR 0 3
16218: PUSH
16219: LD_VAR 0 1
16223: STR
16224: PPUSH
16225: CALL_OW 34
16229: ST_TO_ADDR
16230: GO 16247
// unit := NewCharacter ( ident ) ;
16232: LD_ADDR_VAR 0 5
16236: PUSH
16237: LD_VAR 0 1
16241: PPUSH
16242: CALL_OW 25
16246: ST_TO_ADDR
// result := unit ;
16247: LD_ADDR_VAR 0 4
16251: PUSH
16252: LD_VAR 0 5
16256: ST_TO_ADDR
// end ;
16257: LD_VAR 0 4
16261: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16262: LD_INT 0
16264: PPUSH
16265: PPUSH
// if not side or not nation then
16266: LD_VAR 0 1
16270: NOT
16271: IFTRUE 16280
16273: PUSH
16274: LD_VAR 0 2
16278: NOT
16279: OR
16280: IFFALSE 16284
// exit ;
16282: GO 17078
// case nation of nation_american :
16284: LD_VAR 0 2
16288: PUSH
16289: LD_INT 1
16291: DOUBLE
16292: EQUAL
16293: IFTRUE 16297
16295: GO 16519
16297: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
16298: LD_ADDR_VAR 0 4
16302: PUSH
16303: LD_INT 35
16305: PUSH
16306: LD_INT 45
16308: PUSH
16309: LD_INT 46
16311: PUSH
16312: LD_INT 47
16314: PUSH
16315: LD_INT 82
16317: PUSH
16318: LD_INT 83
16320: PUSH
16321: LD_INT 84
16323: PUSH
16324: LD_INT 85
16326: PUSH
16327: LD_INT 86
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 2
16335: PUSH
16336: LD_INT 6
16338: PUSH
16339: LD_INT 15
16341: PUSH
16342: LD_INT 16
16344: PUSH
16345: LD_INT 7
16347: PUSH
16348: LD_INT 12
16350: PUSH
16351: LD_INT 13
16353: PUSH
16354: LD_INT 10
16356: PUSH
16357: LD_INT 14
16359: PUSH
16360: LD_INT 20
16362: PUSH
16363: LD_INT 21
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 25
16371: PUSH
16372: LD_INT 32
16374: PUSH
16375: LD_INT 27
16377: PUSH
16378: LD_INT 36
16380: PUSH
16381: LD_INT 69
16383: PUSH
16384: LD_INT 39
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 40
16392: PUSH
16393: LD_INT 48
16395: PUSH
16396: LD_INT 49
16398: PUSH
16399: LD_INT 50
16401: PUSH
16402: LD_INT 51
16404: PUSH
16405: LD_INT 52
16407: PUSH
16408: LD_INT 53
16410: PUSH
16411: LD_INT 54
16413: PUSH
16414: LD_INT 55
16416: PUSH
16417: LD_INT 56
16419: PUSH
16420: LD_INT 57
16422: PUSH
16423: LD_INT 58
16425: PUSH
16426: LD_INT 59
16428: PUSH
16429: LD_INT 60
16431: PUSH
16432: LD_INT 61
16434: PUSH
16435: LD_INT 62
16437: PUSH
16438: LD_INT 80
16440: PUSH
16441: LD_INT 82
16443: PUSH
16444: LD_INT 83
16446: PUSH
16447: LD_INT 84
16449: PUSH
16450: LD_INT 85
16452: PUSH
16453: LD_INT 86
16455: PUSH
16456: LD_INT 90
16458: PUSH
16459: LD_INT 93
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: ST_TO_ADDR
16517: GO 17000
16519: LD_INT 2
16521: DOUBLE
16522: EQUAL
16523: IFTRUE 16527
16525: GO 16761
16527: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16528: LD_ADDR_VAR 0 4
16532: PUSH
16533: LD_INT 35
16535: PUSH
16536: LD_INT 45
16538: PUSH
16539: LD_INT 46
16541: PUSH
16542: LD_INT 47
16544: PUSH
16545: LD_INT 82
16547: PUSH
16548: LD_INT 83
16550: PUSH
16551: LD_INT 84
16553: PUSH
16554: LD_INT 85
16556: PUSH
16557: LD_INT 87
16559: PUSH
16560: LD_INT 70
16562: PUSH
16563: LD_INT 1
16565: PUSH
16566: LD_INT 11
16568: PUSH
16569: LD_INT 3
16571: PUSH
16572: LD_INT 4
16574: PUSH
16575: LD_INT 5
16577: PUSH
16578: LD_INT 6
16580: PUSH
16581: LD_INT 15
16583: PUSH
16584: LD_INT 18
16586: PUSH
16587: LD_INT 7
16589: PUSH
16590: LD_INT 17
16592: PUSH
16593: LD_INT 8
16595: PUSH
16596: LD_INT 20
16598: PUSH
16599: LD_INT 21
16601: PUSH
16602: LD_INT 22
16604: PUSH
16605: LD_INT 72
16607: PUSH
16608: LD_INT 26
16610: PUSH
16611: LD_INT 69
16613: PUSH
16614: LD_INT 39
16616: PUSH
16617: LD_INT 40
16619: PUSH
16620: LD_INT 41
16622: PUSH
16623: LD_INT 42
16625: PUSH
16626: LD_INT 43
16628: PUSH
16629: LD_INT 48
16631: PUSH
16632: LD_INT 49
16634: PUSH
16635: LD_INT 50
16637: PUSH
16638: LD_INT 51
16640: PUSH
16641: LD_INT 52
16643: PUSH
16644: LD_INT 53
16646: PUSH
16647: LD_INT 54
16649: PUSH
16650: LD_INT 55
16652: PUSH
16653: LD_INT 56
16655: PUSH
16656: LD_INT 60
16658: PUSH
16659: LD_INT 61
16661: PUSH
16662: LD_INT 62
16664: PUSH
16665: LD_INT 66
16667: PUSH
16668: LD_INT 67
16670: PUSH
16671: LD_INT 68
16673: PUSH
16674: LD_INT 81
16676: PUSH
16677: LD_INT 82
16679: PUSH
16680: LD_INT 83
16682: PUSH
16683: LD_INT 84
16685: PUSH
16686: LD_INT 85
16688: PUSH
16689: LD_INT 87
16691: PUSH
16692: LD_INT 88
16694: PUSH
16695: LD_INT 92
16697: PUSH
16698: LD_INT 94
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: ST_TO_ADDR
16759: GO 17000
16761: LD_INT 3
16763: DOUBLE
16764: EQUAL
16765: IFTRUE 16769
16767: GO 16999
16769: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16770: LD_ADDR_VAR 0 4
16774: PUSH
16775: LD_INT 46
16777: PUSH
16778: LD_INT 47
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: LD_INT 82
16789: PUSH
16790: LD_INT 83
16792: PUSH
16793: LD_INT 84
16795: PUSH
16796: LD_INT 85
16798: PUSH
16799: LD_INT 86
16801: PUSH
16802: LD_INT 11
16804: PUSH
16805: LD_INT 9
16807: PUSH
16808: LD_INT 20
16810: PUSH
16811: LD_INT 19
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 24
16819: PUSH
16820: LD_INT 22
16822: PUSH
16823: LD_INT 25
16825: PUSH
16826: LD_INT 28
16828: PUSH
16829: LD_INT 29
16831: PUSH
16832: LD_INT 30
16834: PUSH
16835: LD_INT 31
16837: PUSH
16838: LD_INT 37
16840: PUSH
16841: LD_INT 38
16843: PUSH
16844: LD_INT 32
16846: PUSH
16847: LD_INT 27
16849: PUSH
16850: LD_INT 33
16852: PUSH
16853: LD_INT 69
16855: PUSH
16856: LD_INT 39
16858: PUSH
16859: LD_INT 34
16861: PUSH
16862: LD_INT 40
16864: PUSH
16865: LD_INT 71
16867: PUSH
16868: LD_INT 23
16870: PUSH
16871: LD_INT 44
16873: PUSH
16874: LD_INT 48
16876: PUSH
16877: LD_INT 49
16879: PUSH
16880: LD_INT 50
16882: PUSH
16883: LD_INT 51
16885: PUSH
16886: LD_INT 52
16888: PUSH
16889: LD_INT 53
16891: PUSH
16892: LD_INT 54
16894: PUSH
16895: LD_INT 55
16897: PUSH
16898: LD_INT 56
16900: PUSH
16901: LD_INT 57
16903: PUSH
16904: LD_INT 58
16906: PUSH
16907: LD_INT 59
16909: PUSH
16910: LD_INT 63
16912: PUSH
16913: LD_INT 64
16915: PUSH
16916: LD_INT 65
16918: PUSH
16919: LD_INT 82
16921: PUSH
16922: LD_INT 83
16924: PUSH
16925: LD_INT 84
16927: PUSH
16928: LD_INT 85
16930: PUSH
16931: LD_INT 86
16933: PUSH
16934: LD_INT 89
16936: PUSH
16937: LD_INT 91
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: ST_TO_ADDR
16997: GO 17000
16999: POP
// if state > - 1 and state < 3 then
17000: LD_VAR 0 3
17004: PUSH
17005: LD_INT 1
17007: NEG
17008: GREATER
17009: IFFALSE 17021
17011: PUSH
17012: LD_VAR 0 3
17016: PUSH
17017: LD_INT 3
17019: LESS
17020: AND
17021: IFFALSE 17078
// for i in result do
17023: LD_ADDR_VAR 0 5
17027: PUSH
17028: LD_VAR 0 4
17032: PUSH
17033: FOR_IN
17034: IFFALSE 17076
// if GetTech ( i , side ) <> state then
17036: LD_VAR 0 5
17040: PPUSH
17041: LD_VAR 0 1
17045: PPUSH
17046: CALL_OW 321
17050: PUSH
17051: LD_VAR 0 3
17055: NONEQUAL
17056: IFFALSE 17074
// result := result diff i ;
17058: LD_ADDR_VAR 0 4
17062: PUSH
17063: LD_VAR 0 4
17067: PUSH
17068: LD_VAR 0 5
17072: DIFF
17073: ST_TO_ADDR
17074: GO 17033
17076: POP
17077: POP
// end ;
17078: LD_VAR 0 4
17082: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
17087: PPUSH
// result := true ;
17088: LD_ADDR_VAR 0 3
17092: PUSH
17093: LD_INT 1
17095: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17096: LD_ADDR_VAR 0 5
17100: PUSH
17101: LD_VAR 0 2
17105: PPUSH
17106: CALL_OW 480
17110: ST_TO_ADDR
// if not tmp then
17111: LD_VAR 0 5
17115: NOT
17116: IFFALSE 17120
// exit ;
17118: GO 17169
// for i in tmp do
17120: LD_ADDR_VAR 0 4
17124: PUSH
17125: LD_VAR 0 5
17129: PUSH
17130: FOR_IN
17131: IFFALSE 17167
// if GetTech ( i , side ) <> state_researched then
17133: LD_VAR 0 4
17137: PPUSH
17138: LD_VAR 0 1
17142: PPUSH
17143: CALL_OW 321
17147: PUSH
17148: LD_INT 2
17150: NONEQUAL
17151: IFFALSE 17165
// begin result := false ;
17153: LD_ADDR_VAR 0 3
17157: PUSH
17158: LD_INT 0
17160: ST_TO_ADDR
// exit ;
17161: POP
17162: POP
17163: GO 17169
// end ;
17165: GO 17130
17167: POP
17168: POP
// end ;
17169: LD_VAR 0 3
17173: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17174: LD_INT 0
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
17181: PPUSH
17182: PPUSH
17183: PPUSH
17184: PPUSH
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17189: LD_VAR 0 1
17193: NOT
17194: IFTRUE 17211
17196: PUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 257
17206: PUSH
17207: LD_INT 9
17209: NONEQUAL
17210: OR
17211: IFFALSE 17215
// exit ;
17213: GO 17794
// side := GetSide ( unit ) ;
17215: LD_ADDR_VAR 0 9
17219: PUSH
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 255
17229: ST_TO_ADDR
// tech_space := tech_spacanom ;
17230: LD_ADDR_VAR 0 12
17234: PUSH
17235: LD_INT 29
17237: ST_TO_ADDR
// tech_time := tech_taurad ;
17238: LD_ADDR_VAR 0 13
17242: PUSH
17243: LD_INT 28
17245: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17246: LD_ADDR_VAR 0 11
17250: PUSH
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL_OW 310
17260: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17261: LD_VAR 0 11
17265: PPUSH
17266: CALL_OW 247
17270: PUSH
17271: LD_INT 2
17273: EQUAL
17274: IFFALSE 17278
// exit ;
17276: GO 17794
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17278: LD_ADDR_VAR 0 8
17282: PUSH
17283: LD_INT 81
17285: PUSH
17286: LD_VAR 0 9
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 3
17297: PUSH
17298: LD_INT 21
17300: PUSH
17301: LD_INT 3
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PPUSH
17316: CALL_OW 69
17320: ST_TO_ADDR
// if not tmp then
17321: LD_VAR 0 8
17325: NOT
17326: IFFALSE 17330
// exit ;
17328: GO 17794
// if in_unit then
17330: LD_VAR 0 11
17334: IFFALSE 17358
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17336: LD_ADDR_VAR 0 10
17340: PUSH
17341: LD_VAR 0 8
17345: PPUSH
17346: LD_VAR 0 11
17350: PPUSH
17351: CALL_OW 74
17355: ST_TO_ADDR
17356: GO 17378
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17358: LD_ADDR_VAR 0 10
17362: PUSH
17363: LD_VAR 0 8
17367: PPUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 74
17377: ST_TO_ADDR
// if not enemy then
17378: LD_VAR 0 10
17382: NOT
17383: IFFALSE 17387
// exit ;
17385: GO 17794
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17387: LD_VAR 0 11
17391: IFFALSE 17413
17393: PUSH
17394: LD_VAR 0 11
17398: PPUSH
17399: LD_VAR 0 10
17403: PPUSH
17404: CALL_OW 296
17408: PUSH
17409: LD_INT 13
17411: GREATER
17412: AND
17413: IFTRUE 17435
17415: PUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: LD_VAR 0 10
17425: PPUSH
17426: CALL_OW 296
17430: PUSH
17431: LD_INT 12
17433: GREATER
17434: OR
17435: IFFALSE 17439
// exit ;
17437: GO 17794
// missile := [ 1 ] ;
17439: LD_ADDR_VAR 0 14
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17450: LD_VAR 0 9
17454: PPUSH
17455: LD_VAR 0 12
17459: PPUSH
17460: CALL_OW 325
17464: IFFALSE 17493
// missile := Replace ( missile , missile + 1 , 2 ) ;
17466: LD_ADDR_VAR 0 14
17470: PUSH
17471: LD_VAR 0 14
17475: PPUSH
17476: LD_VAR 0 14
17480: PUSH
17481: LD_INT 1
17483: PLUS
17484: PPUSH
17485: LD_INT 2
17487: PPUSH
17488: CALL_OW 1
17492: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17493: LD_VAR 0 9
17497: PPUSH
17498: LD_VAR 0 13
17502: PPUSH
17503: CALL_OW 325
17507: IFFALSE 17531
17509: PUSH
17510: LD_VAR 0 10
17514: PPUSH
17515: CALL_OW 255
17519: PPUSH
17520: LD_VAR 0 13
17524: PPUSH
17525: CALL_OW 325
17529: NOT
17530: AND
17531: IFFALSE 17560
// missile := Replace ( missile , missile + 1 , 3 ) ;
17533: LD_ADDR_VAR 0 14
17537: PUSH
17538: LD_VAR 0 14
17542: PPUSH
17543: LD_VAR 0 14
17547: PUSH
17548: LD_INT 1
17550: PLUS
17551: PPUSH
17552: LD_INT 3
17554: PPUSH
17555: CALL_OW 1
17559: ST_TO_ADDR
// if missile < 2 then
17560: LD_VAR 0 14
17564: PUSH
17565: LD_INT 2
17567: LESS
17568: IFFALSE 17572
// exit ;
17570: GO 17794
// x := GetX ( enemy ) ;
17572: LD_ADDR_VAR 0 4
17576: PUSH
17577: LD_VAR 0 10
17581: PPUSH
17582: CALL_OW 250
17586: ST_TO_ADDR
// y := GetY ( enemy ) ;
17587: LD_ADDR_VAR 0 5
17591: PUSH
17592: LD_VAR 0 10
17596: PPUSH
17597: CALL_OW 251
17601: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17602: LD_ADDR_VAR 0 6
17606: PUSH
17607: LD_VAR 0 4
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 12
17623: PLUS
17624: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17625: LD_ADDR_VAR 0 7
17629: PUSH
17630: LD_VAR 0 5
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: CALL_OW 12
17646: PLUS
17647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17648: LD_VAR 0 6
17652: PPUSH
17653: LD_VAR 0 7
17657: PPUSH
17658: CALL_OW 488
17662: NOT
17663: IFFALSE 17685
// begin _x := x ;
17665: LD_ADDR_VAR 0 6
17669: PUSH
17670: LD_VAR 0 4
17674: ST_TO_ADDR
// _y := y ;
17675: LD_ADDR_VAR 0 7
17679: PUSH
17680: LD_VAR 0 5
17684: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17685: LD_ADDR_VAR 0 3
17689: PUSH
17690: LD_INT 1
17692: PPUSH
17693: LD_VAR 0 14
17697: PPUSH
17698: CALL_OW 12
17702: ST_TO_ADDR
// case i of 1 :
17703: LD_VAR 0 3
17707: PUSH
17708: LD_INT 1
17710: DOUBLE
17711: EQUAL
17712: IFTRUE 17716
17714: GO 17733
17716: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17717: LD_VAR 0 1
17721: PPUSH
17722: LD_VAR 0 10
17726: PPUSH
17727: CALL_OW 115
17731: GO 17794
17733: LD_INT 2
17735: DOUBLE
17736: EQUAL
17737: IFTRUE 17741
17739: GO 17763
17741: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17742: LD_VAR 0 1
17746: PPUSH
17747: LD_VAR 0 6
17751: PPUSH
17752: LD_VAR 0 7
17756: PPUSH
17757: CALL_OW 153
17761: GO 17794
17763: LD_INT 3
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 17793
17771: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_VAR 0 6
17781: PPUSH
17782: LD_VAR 0 7
17786: PPUSH
17787: CALL_OW 154
17791: GO 17794
17793: POP
// end ;
17794: LD_VAR 0 2
17798: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17799: LD_INT 0
17801: PPUSH
17802: PPUSH
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
// if not unit or not building then
17807: LD_VAR 0 1
17811: NOT
17812: IFTRUE 17821
17814: PUSH
17815: LD_VAR 0 2
17819: NOT
17820: OR
17821: IFFALSE 17825
// exit ;
17823: GO 17983
// x := GetX ( building ) ;
17825: LD_ADDR_VAR 0 5
17829: PUSH
17830: LD_VAR 0 2
17834: PPUSH
17835: CALL_OW 250
17839: ST_TO_ADDR
// y := GetY ( building ) ;
17840: LD_ADDR_VAR 0 6
17844: PUSH
17845: LD_VAR 0 2
17849: PPUSH
17850: CALL_OW 251
17854: ST_TO_ADDR
// for i := 0 to 5 do
17855: LD_ADDR_VAR 0 4
17859: PUSH
17860: DOUBLE
17861: LD_INT 0
17863: DEC
17864: ST_TO_ADDR
17865: LD_INT 5
17867: PUSH
17868: FOR_TO
17869: IFFALSE 17981
// begin _x := ShiftX ( x , i , 3 ) ;
17871: LD_ADDR_VAR 0 7
17875: PUSH
17876: LD_VAR 0 5
17880: PPUSH
17881: LD_VAR 0 4
17885: PPUSH
17886: LD_INT 3
17888: PPUSH
17889: CALL_OW 272
17893: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17894: LD_ADDR_VAR 0 8
17898: PUSH
17899: LD_VAR 0 6
17903: PPUSH
17904: LD_VAR 0 4
17908: PPUSH
17909: LD_INT 3
17911: PPUSH
17912: CALL_OW 273
17916: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17917: LD_VAR 0 7
17921: PPUSH
17922: LD_VAR 0 8
17926: PPUSH
17927: CALL_OW 488
17931: NOT
17932: IFFALSE 17936
// continue ;
17934: GO 17868
// if HexInfo ( _x , _y ) = 0 then
17936: LD_VAR 0 7
17940: PPUSH
17941: LD_VAR 0 8
17945: PPUSH
17946: CALL_OW 428
17950: PUSH
17951: LD_INT 0
17953: EQUAL
17954: IFFALSE 17979
// begin ComMoveXY ( unit , _x , _y ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_VAR 0 7
17965: PPUSH
17966: LD_VAR 0 8
17970: PPUSH
17971: CALL_OW 111
// exit ;
17975: POP
17976: POP
17977: GO 17983
// end ; end ;
17979: GO 17868
17981: POP
17982: POP
// end ;
17983: LD_VAR 0 3
17987: RET
// export function ScanBase ( side , base_area ) ; begin
17988: LD_INT 0
17990: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17991: LD_ADDR_VAR 0 3
17995: PUSH
17996: LD_VAR 0 2
18000: PPUSH
18001: LD_INT 81
18003: PUSH
18004: LD_VAR 0 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 70
18017: ST_TO_ADDR
// end ;
18018: LD_VAR 0 3
18022: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18023: LD_INT 0
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
// result := false ;
18029: LD_ADDR_VAR 0 2
18033: PUSH
18034: LD_INT 0
18036: ST_TO_ADDR
// side := GetSide ( unit ) ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_VAR 0 1
18046: PPUSH
18047: CALL_OW 255
18051: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18052: LD_ADDR_VAR 0 4
18056: PUSH
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 248
18066: ST_TO_ADDR
// case nat of 1 :
18067: LD_VAR 0 4
18071: PUSH
18072: LD_INT 1
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18091
18080: POP
// tech := tech_lassight ; 2 :
18081: LD_ADDR_VAR 0 5
18085: PUSH
18086: LD_INT 12
18088: ST_TO_ADDR
18089: GO 18130
18091: LD_INT 2
18093: DOUBLE
18094: EQUAL
18095: IFTRUE 18099
18097: GO 18110
18099: POP
// tech := tech_mortar ; 3 :
18100: LD_ADDR_VAR 0 5
18104: PUSH
18105: LD_INT 41
18107: ST_TO_ADDR
18108: GO 18130
18110: LD_INT 3
18112: DOUBLE
18113: EQUAL
18114: IFTRUE 18118
18116: GO 18129
18118: POP
// tech := tech_bazooka ; end ;
18119: LD_ADDR_VAR 0 5
18123: PUSH
18124: LD_INT 44
18126: ST_TO_ADDR
18127: GO 18130
18129: POP
// if Researched ( side , tech ) then
18130: LD_VAR 0 3
18134: PPUSH
18135: LD_VAR 0 5
18139: PPUSH
18140: CALL_OW 325
18144: IFFALSE 18171
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18146: LD_ADDR_VAR 0 2
18150: PUSH
18151: LD_INT 5
18153: PUSH
18154: LD_INT 8
18156: PUSH
18157: LD_INT 9
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: PUSH
18165: LD_VAR 0 4
18169: ARRAY
18170: ST_TO_ADDR
// end ;
18171: LD_VAR 0 2
18175: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18176: LD_INT 0
18178: PPUSH
18179: PPUSH
18180: PPUSH
// if not mines then
18181: LD_VAR 0 2
18185: NOT
18186: IFFALSE 18190
// exit ;
18188: GO 18334
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18190: LD_ADDR_VAR 0 5
18194: PUSH
18195: LD_INT 81
18197: PUSH
18198: LD_VAR 0 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: LD_INT 21
18212: PUSH
18213: LD_INT 3
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PPUSH
18228: CALL_OW 69
18232: ST_TO_ADDR
// for i in mines do
18233: LD_ADDR_VAR 0 4
18237: PUSH
18238: LD_VAR 0 2
18242: PUSH
18243: FOR_IN
18244: IFFALSE 18332
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18246: LD_VAR 0 4
18250: PUSH
18251: LD_INT 1
18253: ARRAY
18254: PPUSH
18255: LD_VAR 0 4
18259: PUSH
18260: LD_INT 2
18262: ARRAY
18263: PPUSH
18264: CALL_OW 458
18268: NOT
18269: IFFALSE 18273
// continue ;
18271: GO 18243
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18273: LD_VAR 0 4
18277: PUSH
18278: LD_INT 1
18280: ARRAY
18281: PPUSH
18282: LD_VAR 0 4
18286: PUSH
18287: LD_INT 2
18289: ARRAY
18290: PPUSH
18291: CALL_OW 428
18295: PUSH
18296: LD_VAR 0 5
18300: IN
18301: IFFALSE 18330
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18303: LD_VAR 0 4
18307: PUSH
18308: LD_INT 1
18310: ARRAY
18311: PPUSH
18312: LD_VAR 0 4
18316: PUSH
18317: LD_INT 2
18319: ARRAY
18320: PPUSH
18321: LD_VAR 0 1
18325: PPUSH
18326: CALL_OW 456
// end ;
18330: GO 18243
18332: POP
18333: POP
// end ;
18334: LD_VAR 0 3
18338: RET
// export function Count ( array ) ; begin
18339: LD_INT 0
18341: PPUSH
// result := array + 0 ;
18342: LD_ADDR_VAR 0 2
18346: PUSH
18347: LD_VAR 0 1
18351: PUSH
18352: LD_INT 0
18354: PLUS
18355: ST_TO_ADDR
// end ;
18356: LD_VAR 0 2
18360: RET
// export function IsEmpty ( building ) ; begin
18361: LD_INT 0
18363: PPUSH
// if not building then
18364: LD_VAR 0 1
18368: NOT
18369: IFFALSE 18373
// exit ;
18371: GO 18416
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18373: LD_ADDR_VAR 0 2
18377: PUSH
18378: LD_VAR 0 1
18382: PUSH
18383: LD_INT 22
18385: PUSH
18386: LD_VAR 0 1
18390: PPUSH
18391: CALL_OW 255
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 58
18402: PUSH
18403: EMPTY
18404: LIST
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PPUSH
18410: CALL_OW 69
18414: IN
18415: ST_TO_ADDR
// end ;
18416: LD_VAR 0 2
18420: RET
// export function IsNotFull ( building ) ; var places ; begin
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
// if not building then
18425: LD_VAR 0 1
18429: NOT
18430: IFFALSE 18434
// exit ;
18432: GO 18462
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18434: LD_ADDR_VAR 0 2
18438: PUSH
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_INT 3
18446: PUSH
18447: LD_INT 62
18449: PUSH
18450: EMPTY
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 72
18461: ST_TO_ADDR
// end ;
18462: LD_VAR 0 2
18466: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18467: LD_INT 0
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
// tmp := [ ] ;
18473: LD_ADDR_VAR 0 3
18477: PUSH
18478: EMPTY
18479: ST_TO_ADDR
// list := [ ] ;
18480: LD_ADDR_VAR 0 5
18484: PUSH
18485: EMPTY
18486: ST_TO_ADDR
// for i = 16 to 25 do
18487: LD_ADDR_VAR 0 4
18491: PUSH
18492: DOUBLE
18493: LD_INT 16
18495: DEC
18496: ST_TO_ADDR
18497: LD_INT 25
18499: PUSH
18500: FOR_TO
18501: IFFALSE 18574
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18503: LD_ADDR_VAR 0 3
18507: PUSH
18508: LD_VAR 0 3
18512: PUSH
18513: LD_INT 22
18515: PUSH
18516: LD_VAR 0 1
18520: PPUSH
18521: CALL_OW 255
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 91
18532: PUSH
18533: LD_VAR 0 1
18537: PUSH
18538: LD_INT 6
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 30
18548: PUSH
18549: LD_VAR 0 4
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: ADD
18571: ST_TO_ADDR
18572: GO 18500
18574: POP
18575: POP
// for i = 1 to tmp do
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: DOUBLE
18582: LD_INT 1
18584: DEC
18585: ST_TO_ADDR
18586: LD_VAR 0 3
18590: PUSH
18591: FOR_TO
18592: IFFALSE 18680
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18594: LD_ADDR_VAR 0 5
18598: PUSH
18599: LD_VAR 0 5
18603: PUSH
18604: LD_VAR 0 3
18608: PUSH
18609: LD_VAR 0 4
18613: ARRAY
18614: PPUSH
18615: CALL_OW 266
18619: PUSH
18620: LD_VAR 0 3
18624: PUSH
18625: LD_VAR 0 4
18629: ARRAY
18630: PPUSH
18631: CALL_OW 250
18635: PUSH
18636: LD_VAR 0 3
18640: PUSH
18641: LD_VAR 0 4
18645: ARRAY
18646: PPUSH
18647: CALL_OW 251
18651: PUSH
18652: LD_VAR 0 3
18656: PUSH
18657: LD_VAR 0 4
18661: ARRAY
18662: PPUSH
18663: CALL_OW 254
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: ADD
18677: ST_TO_ADDR
18678: GO 18591
18680: POP
18681: POP
// result := list ;
18682: LD_ADDR_VAR 0 2
18686: PUSH
18687: LD_VAR 0 5
18691: ST_TO_ADDR
// end ;
18692: LD_VAR 0 2
18696: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18697: LD_INT 0
18699: PPUSH
18700: PPUSH
18701: PPUSH
18702: PPUSH
18703: PPUSH
18704: PPUSH
18705: PPUSH
// if not factory then
18706: LD_VAR 0 1
18710: NOT
18711: IFFALSE 18715
// exit ;
18713: GO 19318
// if control = control_apeman then
18715: LD_VAR 0 4
18719: PUSH
18720: LD_INT 5
18722: EQUAL
18723: IFFALSE 18832
// begin tmp := UnitsInside ( factory ) ;
18725: LD_ADDR_VAR 0 8
18729: PUSH
18730: LD_VAR 0 1
18734: PPUSH
18735: CALL_OW 313
18739: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18740: LD_VAR 0 8
18744: PPUSH
18745: LD_INT 25
18747: PUSH
18748: LD_INT 12
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PPUSH
18755: CALL_OW 72
18759: NOT
18760: IFFALSE 18770
// control := control_manual ;
18762: LD_ADDR_VAR 0 4
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18770: LD_ADDR_VAR 0 8
18774: PUSH
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL 18467 0 1
18784: ST_TO_ADDR
// if tmp then
18785: LD_VAR 0 8
18789: IFFALSE 18832
// begin for i in tmp do
18791: LD_ADDR_VAR 0 7
18795: PUSH
18796: LD_VAR 0 8
18800: PUSH
18801: FOR_IN
18802: IFFALSE 18830
// if i [ 1 ] = b_ext_radio then
18804: LD_VAR 0 7
18808: PUSH
18809: LD_INT 1
18811: ARRAY
18812: PUSH
18813: LD_INT 22
18815: EQUAL
18816: IFFALSE 18828
// begin control := control_remote ;
18818: LD_ADDR_VAR 0 4
18822: PUSH
18823: LD_INT 2
18825: ST_TO_ADDR
// break ;
18826: GO 18830
// end ;
18828: GO 18801
18830: POP
18831: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18832: LD_VAR 0 1
18836: PPUSH
18837: LD_VAR 0 2
18841: PPUSH
18842: LD_VAR 0 3
18846: PPUSH
18847: LD_VAR 0 4
18851: PPUSH
18852: LD_VAR 0 5
18856: PPUSH
18857: CALL_OW 448
18861: IFFALSE 18896
// begin result := [ chassis , engine , control , weapon ] ;
18863: LD_ADDR_VAR 0 6
18867: PUSH
18868: LD_VAR 0 2
18872: PUSH
18873: LD_VAR 0 3
18877: PUSH
18878: LD_VAR 0 4
18882: PUSH
18883: LD_VAR 0 5
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: ST_TO_ADDR
// exit ;
18894: GO 19318
// end ; _chassis := AvailableChassisList ( factory ) ;
18896: LD_ADDR_VAR 0 9
18900: PUSH
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 475
18910: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18911: LD_ADDR_VAR 0 11
18915: PUSH
18916: LD_VAR 0 1
18920: PPUSH
18921: CALL_OW 476
18925: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18926: LD_ADDR_VAR 0 12
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 477
18940: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18941: LD_ADDR_VAR 0 10
18945: PUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 478
18955: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18956: LD_VAR 0 9
18960: NOT
18961: IFTRUE 18970
18963: PUSH
18964: LD_VAR 0 11
18968: NOT
18969: OR
18970: IFTRUE 18979
18972: PUSH
18973: LD_VAR 0 12
18977: NOT
18978: OR
18979: IFTRUE 18988
18981: PUSH
18982: LD_VAR 0 10
18986: NOT
18987: OR
18988: IFFALSE 19023
// begin result := [ chassis , engine , control , weapon ] ;
18990: LD_ADDR_VAR 0 6
18994: PUSH
18995: LD_VAR 0 2
18999: PUSH
19000: LD_VAR 0 3
19004: PUSH
19005: LD_VAR 0 4
19009: PUSH
19010: LD_VAR 0 5
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: ST_TO_ADDR
// exit ;
19021: GO 19318
// end ; if not chassis in _chassis then
19023: LD_VAR 0 2
19027: PUSH
19028: LD_VAR 0 9
19032: IN
19033: NOT
19034: IFFALSE 19060
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: LD_VAR 0 9
19045: PUSH
19046: LD_INT 1
19048: PPUSH
19049: LD_VAR 0 9
19053: PPUSH
19054: CALL_OW 12
19058: ARRAY
19059: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: CALL 19323 0 2
19074: NOT
19075: IFFALSE 19136
// repeat engine := _engine [ 1 ] ;
19077: LD_ADDR_VAR 0 3
19081: PUSH
19082: LD_VAR 0 11
19086: PUSH
19087: LD_INT 1
19089: ARRAY
19090: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19091: LD_ADDR_VAR 0 11
19095: PUSH
19096: LD_VAR 0 11
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: CALL_OW 3
19108: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19109: LD_VAR 0 2
19113: PPUSH
19114: LD_VAR 0 3
19118: PPUSH
19119: CALL 19323 0 2
19123: IFTRUE 19134
19125: PUSH
19126: LD_VAR 0 11
19130: PUSH
19131: EMPTY
19132: EQUAL
19133: OR
19134: IFFALSE 19077
// if not control in _control then
19136: LD_VAR 0 4
19140: PUSH
19141: LD_VAR 0 12
19145: IN
19146: NOT
19147: IFFALSE 19173
// control := _control [ rand ( 1 , _control ) ] ;
19149: LD_ADDR_VAR 0 4
19153: PUSH
19154: LD_VAR 0 12
19158: PUSH
19159: LD_INT 1
19161: PPUSH
19162: LD_VAR 0 12
19166: PPUSH
19167: CALL_OW 12
19171: ARRAY
19172: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19173: LD_VAR 0 2
19177: PPUSH
19178: LD_VAR 0 5
19182: PPUSH
19183: CALL 19545 0 2
19187: NOT
19188: IFFALSE 19249
// repeat weapon := _weapon [ 1 ] ;
19190: LD_ADDR_VAR 0 5
19194: PUSH
19195: LD_VAR 0 10
19199: PUSH
19200: LD_INT 1
19202: ARRAY
19203: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19204: LD_ADDR_VAR 0 10
19208: PUSH
19209: LD_VAR 0 10
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 3
19221: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19222: LD_VAR 0 2
19226: PPUSH
19227: LD_VAR 0 5
19231: PPUSH
19232: CALL 19545 0 2
19236: IFTRUE 19247
19238: PUSH
19239: LD_VAR 0 10
19243: PUSH
19244: EMPTY
19245: EQUAL
19246: OR
19247: IFFALSE 19190
// result := [ ] ;
19249: LD_ADDR_VAR 0 6
19253: PUSH
19254: EMPTY
19255: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19256: LD_VAR 0 1
19260: PPUSH
19261: LD_VAR 0 2
19265: PPUSH
19266: LD_VAR 0 3
19270: PPUSH
19271: LD_VAR 0 4
19275: PPUSH
19276: LD_VAR 0 5
19280: PPUSH
19281: CALL_OW 448
19285: IFFALSE 19318
// result := [ chassis , engine , control , weapon ] ;
19287: LD_ADDR_VAR 0 6
19291: PUSH
19292: LD_VAR 0 2
19296: PUSH
19297: LD_VAR 0 3
19301: PUSH
19302: LD_VAR 0 4
19306: PUSH
19307: LD_VAR 0 5
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: ST_TO_ADDR
// end ;
19318: LD_VAR 0 6
19322: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19323: LD_INT 0
19325: PPUSH
// if not chassis or not engine then
19326: LD_VAR 0 1
19330: NOT
19331: IFTRUE 19340
19333: PUSH
19334: LD_VAR 0 2
19338: NOT
19339: OR
19340: IFFALSE 19344
// exit ;
19342: GO 19540
// case engine of engine_solar :
19344: LD_VAR 0 2
19348: PUSH
19349: LD_INT 2
19351: DOUBLE
19352: EQUAL
19353: IFTRUE 19357
19355: GO 19395
19357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19358: LD_ADDR_VAR 0 3
19362: PUSH
19363: LD_INT 11
19365: PUSH
19366: LD_INT 12
19368: PUSH
19369: LD_INT 13
19371: PUSH
19372: LD_INT 14
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 3
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: ST_TO_ADDR
19393: GO 19524
19395: LD_INT 1
19397: DOUBLE
19398: EQUAL
19399: IFTRUE 19403
19401: GO 19465
19403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: LD_INT 11
19411: PUSH
19412: LD_INT 12
19414: PUSH
19415: LD_INT 13
19417: PUSH
19418: LD_INT 14
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 3
19429: PUSH
19430: LD_INT 4
19432: PUSH
19433: LD_INT 5
19435: PUSH
19436: LD_INT 21
19438: PUSH
19439: LD_INT 23
19441: PUSH
19442: LD_INT 22
19444: PUSH
19445: LD_INT 24
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: ST_TO_ADDR
19463: GO 19524
19465: LD_INT 3
19467: DOUBLE
19468: EQUAL
19469: IFTRUE 19473
19471: GO 19523
19473: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_INT 13
19481: PUSH
19482: LD_INT 14
19484: PUSH
19485: LD_INT 2
19487: PUSH
19488: LD_INT 3
19490: PUSH
19491: LD_INT 4
19493: PUSH
19494: LD_INT 5
19496: PUSH
19497: LD_INT 21
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_INT 23
19505: PUSH
19506: LD_INT 24
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: ST_TO_ADDR
19521: GO 19524
19523: POP
// result := ( chassis in result ) ;
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: LD_VAR 0 1
19533: PUSH
19534: LD_VAR 0 3
19538: IN
19539: ST_TO_ADDR
// end ;
19540: LD_VAR 0 3
19544: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19545: LD_INT 0
19547: PPUSH
// if not chassis or not weapon then
19548: LD_VAR 0 1
19552: NOT
19553: IFTRUE 19562
19555: PUSH
19556: LD_VAR 0 2
19560: NOT
19561: OR
19562: IFFALSE 19566
// exit ;
19564: GO 20660
// case weapon of us_machine_gun :
19566: LD_VAR 0 2
19570: PUSH
19571: LD_INT 2
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19609
19579: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19580: LD_ADDR_VAR 0 3
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: LD_INT 3
19593: PUSH
19594: LD_INT 4
19596: PUSH
19597: LD_INT 5
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: ST_TO_ADDR
19607: GO 20644
19609: LD_INT 3
19611: DOUBLE
19612: EQUAL
19613: IFTRUE 19617
19615: GO 19647
19617: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: LD_INT 4
19634: PUSH
19635: LD_INT 5
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: ST_TO_ADDR
19645: GO 20644
19647: LD_INT 11
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19685
19655: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19656: LD_ADDR_VAR 0 3
19660: PUSH
19661: LD_INT 1
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: LD_INT 4
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: ST_TO_ADDR
19683: GO 20644
19685: LD_INT 4
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19719
19693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: LD_INT 2
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: LD_INT 4
19707: PUSH
19708: LD_INT 5
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: ST_TO_ADDR
19717: GO 20644
19719: LD_INT 5
19721: DOUBLE
19722: EQUAL
19723: IFTRUE 19727
19725: GO 19753
19727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19728: LD_ADDR_VAR 0 3
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: LD_INT 3
19738: PUSH
19739: LD_INT 4
19741: PUSH
19742: LD_INT 5
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: ST_TO_ADDR
19751: GO 20644
19753: LD_INT 9
19755: DOUBLE
19756: EQUAL
19757: IFTRUE 19761
19759: GO 19787
19761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19762: LD_ADDR_VAR 0 3
19766: PUSH
19767: LD_INT 2
19769: PUSH
19770: LD_INT 3
19772: PUSH
19773: LD_INT 4
19775: PUSH
19776: LD_INT 5
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: ST_TO_ADDR
19785: GO 20644
19787: LD_INT 7
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 19821
19795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19796: LD_ADDR_VAR 0 3
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 3
19806: PUSH
19807: LD_INT 4
19809: PUSH
19810: LD_INT 5
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: ST_TO_ADDR
19819: GO 20644
19821: LD_INT 12
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19855
19829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19830: LD_ADDR_VAR 0 3
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: LD_INT 3
19840: PUSH
19841: LD_INT 4
19843: PUSH
19844: LD_INT 5
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: ST_TO_ADDR
19853: GO 20644
19855: LD_INT 13
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19889
19863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: LD_INT 3
19874: PUSH
19875: LD_INT 4
19877: PUSH
19878: LD_INT 5
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: ST_TO_ADDR
19887: GO 20644
19889: LD_INT 14
19891: DOUBLE
19892: EQUAL
19893: IFTRUE 19897
19895: GO 19915
19897: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19898: LD_ADDR_VAR 0 3
19902: PUSH
19903: LD_INT 4
19905: PUSH
19906: LD_INT 5
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: ST_TO_ADDR
19913: GO 20644
19915: LD_INT 6
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19941
19923: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: LD_INT 4
19931: PUSH
19932: LD_INT 5
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: ST_TO_ADDR
19939: GO 20644
19941: LD_INT 10
19943: DOUBLE
19944: EQUAL
19945: IFTRUE 19949
19947: GO 19967
19949: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19950: LD_ADDR_VAR 0 3
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: ST_TO_ADDR
19965: GO 20644
19967: LD_INT 22
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 20001
19975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19976: LD_ADDR_VAR 0 3
19980: PUSH
19981: LD_INT 11
19983: PUSH
19984: LD_INT 12
19986: PUSH
19987: LD_INT 13
19989: PUSH
19990: LD_INT 14
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: ST_TO_ADDR
19999: GO 20644
20001: LD_INT 23
20003: DOUBLE
20004: EQUAL
20005: IFTRUE 20009
20007: GO 20035
20009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_INT 11
20017: PUSH
20018: LD_INT 12
20020: PUSH
20021: LD_INT 13
20023: PUSH
20024: LD_INT 14
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: ST_TO_ADDR
20033: GO 20644
20035: LD_INT 24
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20069
20043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: LD_INT 11
20051: PUSH
20052: LD_INT 12
20054: PUSH
20055: LD_INT 13
20057: PUSH
20058: LD_INT 14
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: ST_TO_ADDR
20067: GO 20644
20069: LD_INT 30
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20103
20077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20078: LD_ADDR_VAR 0 3
20082: PUSH
20083: LD_INT 11
20085: PUSH
20086: LD_INT 12
20088: PUSH
20089: LD_INT 13
20091: PUSH
20092: LD_INT 14
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: ST_TO_ADDR
20101: GO 20644
20103: LD_INT 25
20105: DOUBLE
20106: EQUAL
20107: IFTRUE 20111
20109: GO 20129
20111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20112: LD_ADDR_VAR 0 3
20116: PUSH
20117: LD_INT 13
20119: PUSH
20120: LD_INT 14
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: ST_TO_ADDR
20127: GO 20644
20129: LD_INT 27
20131: DOUBLE
20132: EQUAL
20133: IFTRUE 20137
20135: GO 20155
20137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20138: LD_ADDR_VAR 0 3
20142: PUSH
20143: LD_INT 13
20145: PUSH
20146: LD_INT 14
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: ST_TO_ADDR
20153: GO 20644
20155: LD_INT 92
20157: DOUBLE
20158: EQUAL
20159: IFTRUE 20163
20161: GO 20189
20163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20164: LD_ADDR_VAR 0 3
20168: PUSH
20169: LD_INT 11
20171: PUSH
20172: LD_INT 12
20174: PUSH
20175: LD_INT 13
20177: PUSH
20178: LD_INT 14
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: ST_TO_ADDR
20187: GO 20644
20189: LD_INT 28
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20215
20197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20198: LD_ADDR_VAR 0 3
20202: PUSH
20203: LD_INT 13
20205: PUSH
20206: LD_INT 14
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: ST_TO_ADDR
20213: GO 20644
20215: LD_INT 29
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20241
20223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_INT 13
20231: PUSH
20232: LD_INT 14
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: ST_TO_ADDR
20239: GO 20644
20241: LD_INT 31
20243: DOUBLE
20244: EQUAL
20245: IFTRUE 20249
20247: GO 20267
20249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20250: LD_ADDR_VAR 0 3
20254: PUSH
20255: LD_INT 13
20257: PUSH
20258: LD_INT 14
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: ST_TO_ADDR
20265: GO 20644
20267: LD_INT 26
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20293
20275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_INT 13
20283: PUSH
20284: LD_INT 14
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: ST_TO_ADDR
20291: GO 20644
20293: LD_INT 42
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20327
20301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20302: LD_ADDR_VAR 0 3
20306: PUSH
20307: LD_INT 21
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_INT 23
20315: PUSH
20316: LD_INT 24
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: ST_TO_ADDR
20325: GO 20644
20327: LD_INT 43
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20361
20335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20336: LD_ADDR_VAR 0 3
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 22
20346: PUSH
20347: LD_INT 23
20349: PUSH
20350: LD_INT 24
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: ST_TO_ADDR
20359: GO 20644
20361: LD_INT 44
20363: DOUBLE
20364: EQUAL
20365: IFTRUE 20369
20367: GO 20395
20369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_INT 21
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_INT 23
20383: PUSH
20384: LD_INT 24
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: ST_TO_ADDR
20393: GO 20644
20395: LD_INT 45
20397: DOUBLE
20398: EQUAL
20399: IFTRUE 20403
20401: GO 20429
20403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_INT 21
20411: PUSH
20412: LD_INT 22
20414: PUSH
20415: LD_INT 23
20417: PUSH
20418: LD_INT 24
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: ST_TO_ADDR
20427: GO 20644
20429: LD_INT 49
20431: DOUBLE
20432: EQUAL
20433: IFTRUE 20437
20435: GO 20463
20437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20438: LD_ADDR_VAR 0 3
20442: PUSH
20443: LD_INT 21
20445: PUSH
20446: LD_INT 22
20448: PUSH
20449: LD_INT 23
20451: PUSH
20452: LD_INT 24
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: ST_TO_ADDR
20461: GO 20644
20463: LD_INT 51
20465: DOUBLE
20466: EQUAL
20467: IFTRUE 20471
20469: GO 20497
20471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20472: LD_ADDR_VAR 0 3
20476: PUSH
20477: LD_INT 21
20479: PUSH
20480: LD_INT 22
20482: PUSH
20483: LD_INT 23
20485: PUSH
20486: LD_INT 24
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: ST_TO_ADDR
20495: GO 20644
20497: LD_INT 52
20499: DOUBLE
20500: EQUAL
20501: IFTRUE 20505
20503: GO 20531
20505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_INT 21
20513: PUSH
20514: LD_INT 22
20516: PUSH
20517: LD_INT 23
20519: PUSH
20520: LD_INT 24
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: ST_TO_ADDR
20529: GO 20644
20531: LD_INT 53
20533: DOUBLE
20534: EQUAL
20535: IFTRUE 20539
20537: GO 20557
20539: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20540: LD_ADDR_VAR 0 3
20544: PUSH
20545: LD_INT 23
20547: PUSH
20548: LD_INT 24
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: ST_TO_ADDR
20555: GO 20644
20557: LD_INT 46
20559: DOUBLE
20560: EQUAL
20561: IFTRUE 20565
20563: GO 20583
20565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20566: LD_ADDR_VAR 0 3
20570: PUSH
20571: LD_INT 23
20573: PUSH
20574: LD_INT 24
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: ST_TO_ADDR
20581: GO 20644
20583: LD_INT 47
20585: DOUBLE
20586: EQUAL
20587: IFTRUE 20591
20589: GO 20609
20591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_INT 23
20599: PUSH
20600: LD_INT 24
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: ST_TO_ADDR
20607: GO 20644
20609: LD_INT 98
20611: DOUBLE
20612: EQUAL
20613: IFTRUE 20617
20615: GO 20643
20617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20618: LD_ADDR_VAR 0 3
20622: PUSH
20623: LD_INT 21
20625: PUSH
20626: LD_INT 22
20628: PUSH
20629: LD_INT 23
20631: PUSH
20632: LD_INT 24
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: ST_TO_ADDR
20641: GO 20644
20643: POP
// result := ( chassis in result ) ;
20644: LD_ADDR_VAR 0 3
20648: PUSH
20649: LD_VAR 0 1
20653: PUSH
20654: LD_VAR 0 3
20658: IN
20659: ST_TO_ADDR
// end ;
20660: LD_VAR 0 3
20664: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20665: LD_INT 0
20667: PPUSH
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
// result := array ;
20674: LD_ADDR_VAR 0 5
20678: PUSH
20679: LD_VAR 0 1
20683: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20684: LD_VAR 0 1
20688: NOT
20689: IFTRUE 20698
20691: PUSH
20692: LD_VAR 0 2
20696: NOT
20697: OR
20698: IFTRUE 20707
20700: PUSH
20701: LD_VAR 0 3
20705: NOT
20706: OR
20707: IFTRUE 20721
20709: PUSH
20710: LD_VAR 0 2
20714: PUSH
20715: LD_VAR 0 1
20719: GREATER
20720: OR
20721: IFTRUE 20735
20723: PUSH
20724: LD_VAR 0 3
20728: PUSH
20729: LD_VAR 0 1
20733: GREATER
20734: OR
20735: IFFALSE 20739
// exit ;
20737: GO 21035
// if direction then
20739: LD_VAR 0 4
20743: IFFALSE 20807
// begin d := 1 ;
20745: LD_ADDR_VAR 0 9
20749: PUSH
20750: LD_INT 1
20752: ST_TO_ADDR
// if i_from > i_to then
20753: LD_VAR 0 2
20757: PUSH
20758: LD_VAR 0 3
20762: GREATER
20763: IFFALSE 20789
// length := ( array - i_from ) + i_to else
20765: LD_ADDR_VAR 0 11
20769: PUSH
20770: LD_VAR 0 1
20774: PUSH
20775: LD_VAR 0 2
20779: MINUS
20780: PUSH
20781: LD_VAR 0 3
20785: PLUS
20786: ST_TO_ADDR
20787: GO 20805
// length := i_to - i_from ;
20789: LD_ADDR_VAR 0 11
20793: PUSH
20794: LD_VAR 0 3
20798: PUSH
20799: LD_VAR 0 2
20803: MINUS
20804: ST_TO_ADDR
// end else
20805: GO 20868
// begin d := - 1 ;
20807: LD_ADDR_VAR 0 9
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: ST_TO_ADDR
// if i_from > i_to then
20816: LD_VAR 0 2
20820: PUSH
20821: LD_VAR 0 3
20825: GREATER
20826: IFFALSE 20846
// length := i_from - i_to else
20828: LD_ADDR_VAR 0 11
20832: PUSH
20833: LD_VAR 0 2
20837: PUSH
20838: LD_VAR 0 3
20842: MINUS
20843: ST_TO_ADDR
20844: GO 20868
// length := ( array - i_to ) + i_from ;
20846: LD_ADDR_VAR 0 11
20850: PUSH
20851: LD_VAR 0 1
20855: PUSH
20856: LD_VAR 0 3
20860: MINUS
20861: PUSH
20862: LD_VAR 0 2
20866: PLUS
20867: ST_TO_ADDR
// end ; if not length then
20868: LD_VAR 0 11
20872: NOT
20873: IFFALSE 20877
// exit ;
20875: GO 21035
// tmp := array ;
20877: LD_ADDR_VAR 0 10
20881: PUSH
20882: LD_VAR 0 1
20886: ST_TO_ADDR
// for i = 1 to length do
20887: LD_ADDR_VAR 0 6
20891: PUSH
20892: DOUBLE
20893: LD_INT 1
20895: DEC
20896: ST_TO_ADDR
20897: LD_VAR 0 11
20901: PUSH
20902: FOR_TO
20903: IFFALSE 21023
// begin for j = 1 to array do
20905: LD_ADDR_VAR 0 7
20909: PUSH
20910: DOUBLE
20911: LD_INT 1
20913: DEC
20914: ST_TO_ADDR
20915: LD_VAR 0 1
20919: PUSH
20920: FOR_TO
20921: IFFALSE 21009
// begin k := j + d ;
20923: LD_ADDR_VAR 0 8
20927: PUSH
20928: LD_VAR 0 7
20932: PUSH
20933: LD_VAR 0 9
20937: PLUS
20938: ST_TO_ADDR
// if k > array then
20939: LD_VAR 0 8
20943: PUSH
20944: LD_VAR 0 1
20948: GREATER
20949: IFFALSE 20959
// k := 1 ;
20951: LD_ADDR_VAR 0 8
20955: PUSH
20956: LD_INT 1
20958: ST_TO_ADDR
// if not k then
20959: LD_VAR 0 8
20963: NOT
20964: IFFALSE 20976
// k := array ;
20966: LD_ADDR_VAR 0 8
20970: PUSH
20971: LD_VAR 0 1
20975: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20976: LD_ADDR_VAR 0 10
20980: PUSH
20981: LD_VAR 0 10
20985: PPUSH
20986: LD_VAR 0 8
20990: PPUSH
20991: LD_VAR 0 1
20995: PUSH
20996: LD_VAR 0 7
21000: ARRAY
21001: PPUSH
21002: CALL_OW 1
21006: ST_TO_ADDR
// end ;
21007: GO 20920
21009: POP
21010: POP
// array := tmp ;
21011: LD_ADDR_VAR 0 1
21015: PUSH
21016: LD_VAR 0 10
21020: ST_TO_ADDR
// end ;
21021: GO 20902
21023: POP
21024: POP
// result := array ;
21025: LD_ADDR_VAR 0 5
21029: PUSH
21030: LD_VAR 0 1
21034: ST_TO_ADDR
// end ;
21035: LD_VAR 0 5
21039: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21040: LD_INT 0
21042: PPUSH
21043: PPUSH
// result := 0 ;
21044: LD_ADDR_VAR 0 3
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// if not array or not value in array then
21052: LD_VAR 0 1
21056: NOT
21057: IFTRUE 21072
21059: PUSH
21060: LD_VAR 0 2
21064: PUSH
21065: LD_VAR 0 1
21069: IN
21070: NOT
21071: OR
21072: IFFALSE 21076
// exit ;
21074: GO 21130
// for i = 1 to array do
21076: LD_ADDR_VAR 0 4
21080: PUSH
21081: DOUBLE
21082: LD_INT 1
21084: DEC
21085: ST_TO_ADDR
21086: LD_VAR 0 1
21090: PUSH
21091: FOR_TO
21092: IFFALSE 21128
// if value = array [ i ] then
21094: LD_VAR 0 2
21098: PUSH
21099: LD_VAR 0 1
21103: PUSH
21104: LD_VAR 0 4
21108: ARRAY
21109: EQUAL
21110: IFFALSE 21126
// begin result := i ;
21112: LD_ADDR_VAR 0 3
21116: PUSH
21117: LD_VAR 0 4
21121: ST_TO_ADDR
// exit ;
21122: POP
21123: POP
21124: GO 21130
// end ;
21126: GO 21091
21128: POP
21129: POP
// end ;
21130: LD_VAR 0 3
21134: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21135: LD_INT 0
21137: PPUSH
// vc_chassis := chassis ;
21138: LD_ADDR_OWVAR 37
21142: PUSH
21143: LD_VAR 0 1
21147: ST_TO_ADDR
// vc_engine := engine ;
21148: LD_ADDR_OWVAR 39
21152: PUSH
21153: LD_VAR 0 2
21157: ST_TO_ADDR
// vc_control := control ;
21158: LD_ADDR_OWVAR 38
21162: PUSH
21163: LD_VAR 0 3
21167: ST_TO_ADDR
// vc_weapon := weapon ;
21168: LD_ADDR_OWVAR 40
21172: PUSH
21173: LD_VAR 0 4
21177: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21178: LD_ADDR_OWVAR 41
21182: PUSH
21183: LD_VAR 0 5
21187: ST_TO_ADDR
// end ;
21188: LD_VAR 0 6
21192: RET
// export function WantPlant ( unit ) ; var task ; begin
21193: LD_INT 0
21195: PPUSH
21196: PPUSH
// result := false ;
21197: LD_ADDR_VAR 0 2
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21205: LD_ADDR_VAR 0 3
21209: PUSH
21210: LD_VAR 0 1
21214: PPUSH
21215: CALL_OW 437
21219: ST_TO_ADDR
// if task then
21220: LD_VAR 0 3
21224: IFFALSE 21252
// if task [ 1 ] [ 1 ] = p then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 1
21233: ARRAY
21234: PUSH
21235: LD_INT 1
21237: ARRAY
21238: PUSH
21239: LD_STRING p
21241: EQUAL
21242: IFFALSE 21252
// result := true ;
21244: LD_ADDR_VAR 0 2
21248: PUSH
21249: LD_INT 1
21251: ST_TO_ADDR
// end ;
21252: LD_VAR 0 2
21256: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21257: LD_INT 0
21259: PPUSH
21260: PPUSH
21261: PPUSH
21262: PPUSH
// if pos < 1 then
21263: LD_VAR 0 2
21267: PUSH
21268: LD_INT 1
21270: LESS
21271: IFFALSE 21275
// exit ;
21273: GO 21578
// if pos = 1 then
21275: LD_VAR 0 2
21279: PUSH
21280: LD_INT 1
21282: EQUAL
21283: IFFALSE 21316
// result := Replace ( arr , pos [ 1 ] , value ) else
21285: LD_ADDR_VAR 0 4
21289: PUSH
21290: LD_VAR 0 1
21294: PPUSH
21295: LD_VAR 0 2
21299: PUSH
21300: LD_INT 1
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 3
21308: PPUSH
21309: CALL_OW 1
21313: ST_TO_ADDR
21314: GO 21578
// begin tmp := arr ;
21316: LD_ADDR_VAR 0 6
21320: PUSH
21321: LD_VAR 0 1
21325: ST_TO_ADDR
// s_arr := [ tmp ] ;
21326: LD_ADDR_VAR 0 7
21330: PUSH
21331: LD_VAR 0 6
21335: PUSH
21336: EMPTY
21337: LIST
21338: ST_TO_ADDR
// for i = 1 to pos - 1 do
21339: LD_ADDR_VAR 0 5
21343: PUSH
21344: DOUBLE
21345: LD_INT 1
21347: DEC
21348: ST_TO_ADDR
21349: LD_VAR 0 2
21353: PUSH
21354: LD_INT 1
21356: MINUS
21357: PUSH
21358: FOR_TO
21359: IFFALSE 21404
// begin tmp := tmp [ pos [ i ] ] ;
21361: LD_ADDR_VAR 0 6
21365: PUSH
21366: LD_VAR 0 6
21370: PUSH
21371: LD_VAR 0 2
21375: PUSH
21376: LD_VAR 0 5
21380: ARRAY
21381: ARRAY
21382: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21383: LD_ADDR_VAR 0 7
21387: PUSH
21388: LD_VAR 0 7
21392: PUSH
21393: LD_VAR 0 6
21397: PUSH
21398: EMPTY
21399: LIST
21400: ADD
21401: ST_TO_ADDR
// end ;
21402: GO 21358
21404: POP
21405: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21406: LD_ADDR_VAR 0 6
21410: PUSH
21411: LD_VAR 0 6
21415: PPUSH
21416: LD_VAR 0 2
21420: PUSH
21421: LD_VAR 0 2
21425: ARRAY
21426: PPUSH
21427: LD_VAR 0 3
21431: PPUSH
21432: CALL_OW 1
21436: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21437: LD_ADDR_VAR 0 7
21441: PUSH
21442: LD_VAR 0 7
21446: PPUSH
21447: LD_VAR 0 7
21451: PPUSH
21452: LD_VAR 0 6
21456: PPUSH
21457: CALL_OW 1
21461: ST_TO_ADDR
// for i = s_arr downto 2 do
21462: LD_ADDR_VAR 0 5
21466: PUSH
21467: DOUBLE
21468: LD_VAR 0 7
21472: INC
21473: ST_TO_ADDR
21474: LD_INT 2
21476: PUSH
21477: FOR_DOWNTO
21478: IFFALSE 21562
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21480: LD_ADDR_VAR 0 6
21484: PUSH
21485: LD_VAR 0 7
21489: PUSH
21490: LD_VAR 0 5
21494: PUSH
21495: LD_INT 1
21497: MINUS
21498: ARRAY
21499: PPUSH
21500: LD_VAR 0 2
21504: PUSH
21505: LD_VAR 0 5
21509: PUSH
21510: LD_INT 1
21512: MINUS
21513: ARRAY
21514: PPUSH
21515: LD_VAR 0 7
21519: PUSH
21520: LD_VAR 0 5
21524: ARRAY
21525: PPUSH
21526: CALL_OW 1
21530: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21531: LD_ADDR_VAR 0 7
21535: PUSH
21536: LD_VAR 0 7
21540: PPUSH
21541: LD_VAR 0 5
21545: PUSH
21546: LD_INT 1
21548: MINUS
21549: PPUSH
21550: LD_VAR 0 6
21554: PPUSH
21555: CALL_OW 1
21559: ST_TO_ADDR
// end ;
21560: GO 21477
21562: POP
21563: POP
// result := s_arr [ 1 ] ;
21564: LD_ADDR_VAR 0 4
21568: PUSH
21569: LD_VAR 0 7
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: ST_TO_ADDR
// end ; end ;
21578: LD_VAR 0 4
21582: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// if not list then
21587: LD_VAR 0 1
21591: NOT
21592: IFFALSE 21596
// exit ;
21594: GO 21687
// i := list [ pos1 ] ;
21596: LD_ADDR_VAR 0 5
21600: PUSH
21601: LD_VAR 0 1
21605: PUSH
21606: LD_VAR 0 2
21610: ARRAY
21611: ST_TO_ADDR
// if not i then
21612: LD_VAR 0 5
21616: NOT
21617: IFFALSE 21621
// exit ;
21619: GO 21687
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21621: LD_ADDR_VAR 0 1
21625: PUSH
21626: LD_VAR 0 1
21630: PPUSH
21631: LD_VAR 0 2
21635: PPUSH
21636: LD_VAR 0 1
21640: PUSH
21641: LD_VAR 0 3
21645: ARRAY
21646: PPUSH
21647: CALL_OW 1
21651: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21652: LD_ADDR_VAR 0 1
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: LD_VAR 0 3
21666: PPUSH
21667: LD_VAR 0 5
21671: PPUSH
21672: CALL_OW 1
21676: ST_TO_ADDR
// result := list ;
21677: LD_ADDR_VAR 0 4
21681: PUSH
21682: LD_VAR 0 1
21686: ST_TO_ADDR
// end ;
21687: LD_VAR 0 4
21691: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21692: LD_INT 0
21694: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21695: LD_ADDR_VAR 0 5
21699: PUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: CALL_OW 250
21709: PPUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 251
21719: PPUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: LD_VAR 0 4
21734: PPUSH
21735: CALL 22117 0 5
21739: ST_TO_ADDR
// end ;
21740: LD_VAR 0 5
21744: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21745: LD_INT 0
21747: PPUSH
21748: PPUSH
21749: PPUSH
21750: PPUSH
// if not list or not unit then
21751: LD_VAR 0 2
21755: NOT
21756: IFTRUE 21765
21758: PUSH
21759: LD_VAR 0 1
21763: NOT
21764: OR
21765: IFFALSE 21769
// exit ;
21767: GO 22112
// result := [ ] ;
21769: LD_ADDR_VAR 0 5
21773: PUSH
21774: EMPTY
21775: ST_TO_ADDR
// for i in list do
21776: LD_ADDR_VAR 0 6
21780: PUSH
21781: LD_VAR 0 2
21785: PUSH
21786: FOR_IN
21787: IFFALSE 22005
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21789: LD_ADDR_VAR 0 8
21793: PUSH
21794: LD_VAR 0 1
21798: PPUSH
21799: LD_VAR 0 6
21803: PUSH
21804: LD_INT 1
21806: ARRAY
21807: PPUSH
21808: LD_VAR 0 6
21812: PUSH
21813: LD_INT 2
21815: ARRAY
21816: PPUSH
21817: CALL_OW 297
21821: ST_TO_ADDR
// if not Count ( result ) then
21822: LD_VAR 0 5
21826: PPUSH
21827: CALL 18339 0 1
21831: NOT
21832: IFFALSE 21865
// begin result := Join ( result , [ i , tmp ] ) ;
21834: LD_ADDR_VAR 0 5
21838: PUSH
21839: LD_VAR 0 5
21843: PPUSH
21844: LD_VAR 0 6
21848: PUSH
21849: LD_VAR 0 8
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PPUSH
21858: CALL 54305 0 2
21862: ST_TO_ADDR
// continue ;
21863: GO 21786
// end ; if result [ result ] [ 2 ] <= tmp then
21865: LD_VAR 0 5
21869: PUSH
21870: LD_VAR 0 5
21874: ARRAY
21875: PUSH
21876: LD_INT 2
21878: ARRAY
21879: PUSH
21880: LD_VAR 0 8
21884: LESSEQUAL
21885: IFFALSE 21918
// result := Join ( result , [ i , tmp ] ) else
21887: LD_ADDR_VAR 0 5
21891: PUSH
21892: LD_VAR 0 5
21896: PPUSH
21897: LD_VAR 0 6
21901: PUSH
21902: LD_VAR 0 8
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PPUSH
21911: CALL 54305 0 2
21915: ST_TO_ADDR
21916: GO 22003
// begin for j := 1 to Count ( result ) do
21918: LD_ADDR_VAR 0 7
21922: PUSH
21923: DOUBLE
21924: LD_INT 1
21926: DEC
21927: ST_TO_ADDR
21928: LD_VAR 0 5
21932: PPUSH
21933: CALL 18339 0 1
21937: PUSH
21938: FOR_TO
21939: IFFALSE 22001
// begin if tmp < result [ j ] [ 2 ] then
21941: LD_VAR 0 8
21945: PUSH
21946: LD_VAR 0 5
21950: PUSH
21951: LD_VAR 0 7
21955: ARRAY
21956: PUSH
21957: LD_INT 2
21959: ARRAY
21960: LESS
21961: IFFALSE 21999
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21963: LD_ADDR_VAR 0 5
21967: PUSH
21968: LD_VAR 0 5
21972: PPUSH
21973: LD_VAR 0 7
21977: PPUSH
21978: LD_VAR 0 6
21982: PUSH
21983: LD_VAR 0 8
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PPUSH
21992: CALL_OW 2
21996: ST_TO_ADDR
// break ;
21997: GO 22001
// end ; end ;
21999: GO 21938
22001: POP
22002: POP
// end ; end ;
22003: GO 21786
22005: POP
22006: POP
// if result and not asc then
22007: LD_VAR 0 5
22011: IFFALSE 22020
22013: PUSH
22014: LD_VAR 0 3
22018: NOT
22019: AND
22020: IFFALSE 22037
// result := ReverseArray ( result ) ;
22022: LD_ADDR_VAR 0 5
22026: PUSH
22027: LD_VAR 0 5
22031: PPUSH
22032: CALL 49395 0 1
22036: ST_TO_ADDR
// tmp := [ ] ;
22037: LD_ADDR_VAR 0 8
22041: PUSH
22042: EMPTY
22043: ST_TO_ADDR
// if mode then
22044: LD_VAR 0 4
22048: IFFALSE 22112
// begin for i := 1 to result do
22050: LD_ADDR_VAR 0 6
22054: PUSH
22055: DOUBLE
22056: LD_INT 1
22058: DEC
22059: ST_TO_ADDR
22060: LD_VAR 0 5
22064: PUSH
22065: FOR_TO
22066: IFFALSE 22100
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22068: LD_ADDR_VAR 0 8
22072: PUSH
22073: LD_VAR 0 8
22077: PPUSH
22078: LD_VAR 0 5
22082: PUSH
22083: LD_VAR 0 6
22087: ARRAY
22088: PUSH
22089: LD_INT 1
22091: ARRAY
22092: PPUSH
22093: CALL 54305 0 2
22097: ST_TO_ADDR
22098: GO 22065
22100: POP
22101: POP
// result := tmp ;
22102: LD_ADDR_VAR 0 5
22106: PUSH
22107: LD_VAR 0 8
22111: ST_TO_ADDR
// end ; end ;
22112: LD_VAR 0 5
22116: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22117: LD_INT 0
22119: PPUSH
22120: PPUSH
22121: PPUSH
22122: PPUSH
// if not list then
22123: LD_VAR 0 3
22127: NOT
22128: IFFALSE 22132
// exit ;
22130: GO 22522
// result := [ ] ;
22132: LD_ADDR_VAR 0 6
22136: PUSH
22137: EMPTY
22138: ST_TO_ADDR
// for i in list do
22139: LD_ADDR_VAR 0 7
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: FOR_IN
22150: IFFALSE 22352
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22152: LD_ADDR_VAR 0 9
22156: PUSH
22157: LD_VAR 0 7
22161: PPUSH
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_VAR 0 2
22171: PPUSH
22172: CALL_OW 297
22176: ST_TO_ADDR
// if not result then
22177: LD_VAR 0 6
22181: NOT
22182: IFFALSE 22208
// result := [ [ i , tmp ] ] else
22184: LD_ADDR_VAR 0 6
22188: PUSH
22189: LD_VAR 0 7
22193: PUSH
22194: LD_VAR 0 9
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: ST_TO_ADDR
22206: GO 22350
// begin if result [ result ] [ 2 ] <= tmp then
22208: LD_VAR 0 6
22212: PUSH
22213: LD_VAR 0 6
22217: ARRAY
22218: PUSH
22219: LD_INT 2
22221: ARRAY
22222: PUSH
22223: LD_VAR 0 9
22227: LESSEQUAL
22228: IFFALSE 22270
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22230: LD_ADDR_VAR 0 6
22234: PUSH
22235: LD_VAR 0 6
22239: PPUSH
22240: LD_VAR 0 6
22244: PUSH
22245: LD_INT 1
22247: PLUS
22248: PPUSH
22249: LD_VAR 0 7
22253: PUSH
22254: LD_VAR 0 9
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 2
22267: ST_TO_ADDR
22268: GO 22350
// for j := 1 to result do
22270: LD_ADDR_VAR 0 8
22274: PUSH
22275: DOUBLE
22276: LD_INT 1
22278: DEC
22279: ST_TO_ADDR
22280: LD_VAR 0 6
22284: PUSH
22285: FOR_TO
22286: IFFALSE 22348
// begin if tmp < result [ j ] [ 2 ] then
22288: LD_VAR 0 9
22292: PUSH
22293: LD_VAR 0 6
22297: PUSH
22298: LD_VAR 0 8
22302: ARRAY
22303: PUSH
22304: LD_INT 2
22306: ARRAY
22307: LESS
22308: IFFALSE 22346
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22310: LD_ADDR_VAR 0 6
22314: PUSH
22315: LD_VAR 0 6
22319: PPUSH
22320: LD_VAR 0 8
22324: PPUSH
22325: LD_VAR 0 7
22329: PUSH
22330: LD_VAR 0 9
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 2
22343: ST_TO_ADDR
// break ;
22344: GO 22348
// end ; end ;
22346: GO 22285
22348: POP
22349: POP
// end ; end ;
22350: GO 22149
22352: POP
22353: POP
// if result and not asc then
22354: LD_VAR 0 6
22358: IFFALSE 22367
22360: PUSH
22361: LD_VAR 0 4
22365: NOT
22366: AND
22367: IFFALSE 22442
// begin tmp := result ;
22369: LD_ADDR_VAR 0 9
22373: PUSH
22374: LD_VAR 0 6
22378: ST_TO_ADDR
// for i = tmp downto 1 do
22379: LD_ADDR_VAR 0 7
22383: PUSH
22384: DOUBLE
22385: LD_VAR 0 9
22389: INC
22390: ST_TO_ADDR
22391: LD_INT 1
22393: PUSH
22394: FOR_DOWNTO
22395: IFFALSE 22440
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22397: LD_ADDR_VAR 0 6
22401: PUSH
22402: LD_VAR 0 6
22406: PPUSH
22407: LD_VAR 0 9
22411: PUSH
22412: LD_VAR 0 7
22416: MINUS
22417: PUSH
22418: LD_INT 1
22420: PLUS
22421: PPUSH
22422: LD_VAR 0 9
22426: PUSH
22427: LD_VAR 0 7
22431: ARRAY
22432: PPUSH
22433: CALL_OW 1
22437: ST_TO_ADDR
22438: GO 22394
22440: POP
22441: POP
// end ; tmp := [ ] ;
22442: LD_ADDR_VAR 0 9
22446: PUSH
22447: EMPTY
22448: ST_TO_ADDR
// if mode then
22449: LD_VAR 0 5
22453: IFFALSE 22522
// begin for i = 1 to result do
22455: LD_ADDR_VAR 0 7
22459: PUSH
22460: DOUBLE
22461: LD_INT 1
22463: DEC
22464: ST_TO_ADDR
22465: LD_VAR 0 6
22469: PUSH
22470: FOR_TO
22471: IFFALSE 22510
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22473: LD_ADDR_VAR 0 9
22477: PUSH
22478: LD_VAR 0 9
22482: PPUSH
22483: LD_VAR 0 7
22487: PPUSH
22488: LD_VAR 0 6
22492: PUSH
22493: LD_VAR 0 7
22497: ARRAY
22498: PUSH
22499: LD_INT 1
22501: ARRAY
22502: PPUSH
22503: CALL_OW 1
22507: ST_TO_ADDR
22508: GO 22470
22510: POP
22511: POP
// result := tmp ;
22512: LD_ADDR_VAR 0 6
22516: PUSH
22517: LD_VAR 0 9
22521: ST_TO_ADDR
// end ; end ;
22522: LD_VAR 0 6
22526: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22527: LD_INT 0
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22535: LD_ADDR_VAR 0 5
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: ST_TO_ADDR
// if not x or not y then
22557: LD_VAR 0 2
22561: NOT
22562: IFTRUE 22571
22564: PUSH
22565: LD_VAR 0 3
22569: NOT
22570: OR
22571: IFFALSE 22575
// exit ;
22573: GO 24231
// if not range then
22575: LD_VAR 0 4
22579: NOT
22580: IFFALSE 22590
// range := 10 ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_INT 10
22589: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22590: LD_ADDR_VAR 0 8
22594: PUSH
22595: LD_INT 81
22597: PUSH
22598: LD_VAR 0 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 92
22609: PUSH
22610: LD_VAR 0 2
22614: PUSH
22615: LD_VAR 0 3
22619: PUSH
22620: LD_VAR 0 4
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: LD_INT 21
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 69
22657: ST_TO_ADDR
// if not tmp then
22658: LD_VAR 0 8
22662: NOT
22663: IFFALSE 22667
// exit ;
22665: GO 24231
// for i in tmp do
22667: LD_ADDR_VAR 0 6
22671: PUSH
22672: LD_VAR 0 8
22676: PUSH
22677: FOR_IN
22678: IFFALSE 24206
// begin points := [ 0 , 0 , 0 ] ;
22680: LD_ADDR_VAR 0 9
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: ST_TO_ADDR
// bpoints := 1 ;
22699: LD_ADDR_VAR 0 10
22703: PUSH
22704: LD_INT 1
22706: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22707: LD_VAR 0 6
22711: PPUSH
22712: CALL_OW 247
22716: PUSH
22717: LD_INT 1
22719: DOUBLE
22720: EQUAL
22721: IFTRUE 22725
22723: GO 23307
22725: POP
// begin if GetClass ( i ) = 1 then
22726: LD_VAR 0 6
22730: PPUSH
22731: CALL_OW 257
22735: PUSH
22736: LD_INT 1
22738: EQUAL
22739: IFFALSE 22760
// points := [ 10 , 5 , 3 ] ;
22741: LD_ADDR_VAR 0 9
22745: PUSH
22746: LD_INT 10
22748: PUSH
22749: LD_INT 5
22751: PUSH
22752: LD_INT 3
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22760: LD_VAR 0 6
22764: PPUSH
22765: CALL_OW 257
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 4
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: IN
22784: IFFALSE 22805
// points := [ 3 , 2 , 1 ] ;
22786: LD_ADDR_VAR 0 9
22790: PUSH
22791: LD_INT 3
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22805: LD_VAR 0 6
22809: PPUSH
22810: CALL_OW 257
22814: PUSH
22815: LD_INT 5
22817: EQUAL
22818: IFFALSE 22839
// points := [ 130 , 5 , 2 ] ;
22820: LD_ADDR_VAR 0 9
22824: PUSH
22825: LD_INT 130
22827: PUSH
22828: LD_INT 5
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22839: LD_VAR 0 6
22843: PPUSH
22844: CALL_OW 257
22848: PUSH
22849: LD_INT 8
22851: EQUAL
22852: IFFALSE 22873
// points := [ 35 , 35 , 30 ] ;
22854: LD_ADDR_VAR 0 9
22858: PUSH
22859: LD_INT 35
22861: PUSH
22862: LD_INT 35
22864: PUSH
22865: LD_INT 30
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22873: LD_VAR 0 6
22877: PPUSH
22878: CALL_OW 257
22882: PUSH
22883: LD_INT 9
22885: EQUAL
22886: IFFALSE 22907
// points := [ 20 , 55 , 40 ] ;
22888: LD_ADDR_VAR 0 9
22892: PUSH
22893: LD_INT 20
22895: PUSH
22896: LD_INT 55
22898: PUSH
22899: LD_INT 40
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22907: LD_VAR 0 6
22911: PPUSH
22912: CALL_OW 257
22916: PUSH
22917: LD_INT 12
22919: PUSH
22920: LD_INT 16
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: IN
22927: IFFALSE 22948
// points := [ 5 , 3 , 2 ] ;
22929: LD_ADDR_VAR 0 9
22933: PUSH
22934: LD_INT 5
22936: PUSH
22937: LD_INT 3
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22948: LD_VAR 0 6
22952: PPUSH
22953: CALL_OW 257
22957: PUSH
22958: LD_INT 17
22960: EQUAL
22961: IFFALSE 22982
// points := [ 100 , 50 , 75 ] ;
22963: LD_ADDR_VAR 0 9
22967: PUSH
22968: LD_INT 100
22970: PUSH
22971: LD_INT 50
22973: PUSH
22974: LD_INT 75
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22982: LD_VAR 0 6
22986: PPUSH
22987: CALL_OW 257
22991: PUSH
22992: LD_INT 15
22994: EQUAL
22995: IFFALSE 23016
// points := [ 10 , 5 , 3 ] ;
22997: LD_ADDR_VAR 0 9
23001: PUSH
23002: LD_INT 10
23004: PUSH
23005: LD_INT 5
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23016: LD_VAR 0 6
23020: PPUSH
23021: CALL_OW 257
23025: PUSH
23026: LD_INT 14
23028: EQUAL
23029: IFFALSE 23050
// points := [ 10 , 0 , 0 ] ;
23031: LD_ADDR_VAR 0 9
23035: PUSH
23036: LD_INT 10
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23050: LD_VAR 0 6
23054: PPUSH
23055: CALL_OW 257
23059: PUSH
23060: LD_INT 11
23062: EQUAL
23063: IFFALSE 23084
// points := [ 30 , 10 , 5 ] ;
23065: LD_ADDR_VAR 0 9
23069: PUSH
23070: LD_INT 30
23072: PUSH
23073: LD_INT 10
23075: PUSH
23076: LD_INT 5
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23084: LD_VAR 0 1
23088: PPUSH
23089: LD_INT 5
23091: PPUSH
23092: CALL_OW 321
23096: PUSH
23097: LD_INT 2
23099: EQUAL
23100: IFFALSE 23117
// bpoints := bpoints * 1.8 ;
23102: LD_ADDR_VAR 0 10
23106: PUSH
23107: LD_VAR 0 10
23111: PUSH
23112: LD_REAL  1.80000000000000E+0000
23115: MUL
23116: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23117: LD_VAR 0 6
23121: PPUSH
23122: CALL_OW 257
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: LD_INT 4
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: IN
23145: IFFALSE 23165
23147: PUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: LD_INT 51
23155: PPUSH
23156: CALL_OW 321
23160: PUSH
23161: LD_INT 2
23163: EQUAL
23164: AND
23165: IFFALSE 23182
// bpoints := bpoints * 1.2 ;
23167: LD_ADDR_VAR 0 10
23171: PUSH
23172: LD_VAR 0 10
23176: PUSH
23177: LD_REAL  1.20000000000000E+0000
23180: MUL
23181: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23182: LD_VAR 0 6
23186: PPUSH
23187: CALL_OW 257
23191: PUSH
23192: LD_INT 5
23194: PUSH
23195: LD_INT 7
23197: PUSH
23198: LD_INT 9
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: IN
23206: IFFALSE 23226
23208: PUSH
23209: LD_VAR 0 1
23213: PPUSH
23214: LD_INT 52
23216: PPUSH
23217: CALL_OW 321
23221: PUSH
23222: LD_INT 2
23224: EQUAL
23225: AND
23226: IFFALSE 23243
// bpoints := bpoints * 1.5 ;
23228: LD_ADDR_VAR 0 10
23232: PUSH
23233: LD_VAR 0 10
23237: PUSH
23238: LD_REAL  1.50000000000000E+0000
23241: MUL
23242: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23243: LD_VAR 0 1
23247: PPUSH
23248: LD_INT 66
23250: PPUSH
23251: CALL_OW 321
23255: PUSH
23256: LD_INT 2
23258: EQUAL
23259: IFFALSE 23276
// bpoints := bpoints * 1.1 ;
23261: LD_ADDR_VAR 0 10
23265: PUSH
23266: LD_VAR 0 10
23270: PUSH
23271: LD_REAL  1.10000000000000E+0000
23274: MUL
23275: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23276: LD_ADDR_VAR 0 10
23280: PUSH
23281: LD_VAR 0 10
23285: PUSH
23286: LD_VAR 0 6
23290: PPUSH
23291: LD_INT 1
23293: PPUSH
23294: CALL_OW 259
23298: PUSH
23299: LD_REAL  1.15000000000000E+0000
23302: MUL
23303: MUL
23304: ST_TO_ADDR
// end ; unit_vehicle :
23305: GO 24135
23307: LD_INT 2
23309: DOUBLE
23310: EQUAL
23311: IFTRUE 23315
23313: GO 24123
23315: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23316: LD_VAR 0 6
23320: PPUSH
23321: CALL_OW 264
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 42
23331: PUSH
23332: LD_INT 24
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: IN
23340: IFFALSE 23361
// points := [ 25 , 5 , 3 ] ;
23342: LD_ADDR_VAR 0 9
23346: PUSH
23347: LD_INT 25
23349: PUSH
23350: LD_INT 5
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23361: LD_VAR 0 6
23365: PPUSH
23366: CALL_OW 264
23370: PUSH
23371: LD_INT 4
23373: PUSH
23374: LD_INT 43
23376: PUSH
23377: LD_INT 25
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: IN
23385: IFFALSE 23406
// points := [ 40 , 15 , 5 ] ;
23387: LD_ADDR_VAR 0 9
23391: PUSH
23392: LD_INT 40
23394: PUSH
23395: LD_INT 15
23397: PUSH
23398: LD_INT 5
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23406: LD_VAR 0 6
23410: PPUSH
23411: CALL_OW 264
23415: PUSH
23416: LD_INT 3
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: IN
23426: IFFALSE 23447
// points := [ 7 , 25 , 8 ] ;
23428: LD_ADDR_VAR 0 9
23432: PUSH
23433: LD_INT 7
23435: PUSH
23436: LD_INT 25
23438: PUSH
23439: LD_INT 8
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23447: LD_VAR 0 6
23451: PPUSH
23452: CALL_OW 264
23456: PUSH
23457: LD_INT 5
23459: PUSH
23460: LD_INT 27
23462: PUSH
23463: LD_INT 44
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: IN
23471: IFFALSE 23492
// points := [ 14 , 50 , 16 ] ;
23473: LD_ADDR_VAR 0 9
23477: PUSH
23478: LD_INT 14
23480: PUSH
23481: LD_INT 50
23483: PUSH
23484: LD_INT 16
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: LIST
23491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23492: LD_VAR 0 6
23496: PPUSH
23497: CALL_OW 264
23501: PUSH
23502: LD_INT 6
23504: PUSH
23505: LD_INT 46
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: IN
23512: IFFALSE 23533
// points := [ 32 , 120 , 70 ] ;
23514: LD_ADDR_VAR 0 9
23518: PUSH
23519: LD_INT 32
23521: PUSH
23522: LD_INT 120
23524: PUSH
23525: LD_INT 70
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23533: LD_VAR 0 6
23537: PPUSH
23538: CALL_OW 264
23542: PUSH
23543: LD_INT 7
23545: PUSH
23546: LD_INT 28
23548: PUSH
23549: LD_INT 45
23551: PUSH
23552: LD_INT 92
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: IN
23561: IFFALSE 23582
// points := [ 35 , 20 , 45 ] ;
23563: LD_ADDR_VAR 0 9
23567: PUSH
23568: LD_INT 35
23570: PUSH
23571: LD_INT 20
23573: PUSH
23574: LD_INT 45
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23582: LD_VAR 0 6
23586: PPUSH
23587: CALL_OW 264
23591: PUSH
23592: LD_INT 47
23594: PUSH
23595: EMPTY
23596: LIST
23597: IN
23598: IFFALSE 23619
// points := [ 67 , 45 , 75 ] ;
23600: LD_ADDR_VAR 0 9
23604: PUSH
23605: LD_INT 67
23607: PUSH
23608: LD_INT 45
23610: PUSH
23611: LD_INT 75
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23619: LD_VAR 0 6
23623: PPUSH
23624: CALL_OW 264
23628: PUSH
23629: LD_INT 26
23631: PUSH
23632: EMPTY
23633: LIST
23634: IN
23635: IFFALSE 23656
// points := [ 120 , 30 , 80 ] ;
23637: LD_ADDR_VAR 0 9
23641: PUSH
23642: LD_INT 120
23644: PUSH
23645: LD_INT 30
23647: PUSH
23648: LD_INT 80
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23656: LD_VAR 0 6
23660: PPUSH
23661: CALL_OW 264
23665: PUSH
23666: LD_INT 22
23668: PUSH
23669: EMPTY
23670: LIST
23671: IN
23672: IFFALSE 23693
// points := [ 40 , 1 , 1 ] ;
23674: LD_ADDR_VAR 0 9
23678: PUSH
23679: LD_INT 40
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23693: LD_VAR 0 6
23697: PPUSH
23698: CALL_OW 264
23702: PUSH
23703: LD_INT 29
23705: PUSH
23706: EMPTY
23707: LIST
23708: IN
23709: IFFALSE 23730
// points := [ 70 , 200 , 400 ] ;
23711: LD_ADDR_VAR 0 9
23715: PUSH
23716: LD_INT 70
23718: PUSH
23719: LD_INT 200
23721: PUSH
23722: LD_INT 400
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: LIST
23729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23730: LD_VAR 0 6
23734: PPUSH
23735: CALL_OW 264
23739: PUSH
23740: LD_INT 14
23742: PUSH
23743: LD_INT 53
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: IN
23750: IFFALSE 23771
// points := [ 40 , 10 , 20 ] ;
23752: LD_ADDR_VAR 0 9
23756: PUSH
23757: LD_INT 40
23759: PUSH
23760: LD_INT 10
23762: PUSH
23763: LD_INT 20
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23771: LD_VAR 0 6
23775: PPUSH
23776: CALL_OW 264
23780: PUSH
23781: LD_INT 9
23783: PUSH
23784: EMPTY
23785: LIST
23786: IN
23787: IFFALSE 23808
// points := [ 5 , 70 , 20 ] ;
23789: LD_ADDR_VAR 0 9
23793: PUSH
23794: LD_INT 5
23796: PUSH
23797: LD_INT 70
23799: PUSH
23800: LD_INT 20
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23808: LD_VAR 0 6
23812: PPUSH
23813: CALL_OW 264
23817: PUSH
23818: LD_INT 10
23820: PUSH
23821: EMPTY
23822: LIST
23823: IN
23824: IFFALSE 23845
// points := [ 35 , 110 , 70 ] ;
23826: LD_ADDR_VAR 0 9
23830: PUSH
23831: LD_INT 35
23833: PUSH
23834: LD_INT 110
23836: PUSH
23837: LD_INT 70
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23845: LD_VAR 0 6
23849: PPUSH
23850: CALL_OW 265
23854: PUSH
23855: LD_INT 25
23857: EQUAL
23858: IFFALSE 23879
// points := [ 80 , 65 , 100 ] ;
23860: LD_ADDR_VAR 0 9
23864: PUSH
23865: LD_INT 80
23867: PUSH
23868: LD_INT 65
23870: PUSH
23871: LD_INT 100
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23879: LD_VAR 0 6
23883: PPUSH
23884: CALL_OW 263
23888: PUSH
23889: LD_INT 1
23891: EQUAL
23892: IFFALSE 23927
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23894: LD_ADDR_VAR 0 10
23898: PUSH
23899: LD_VAR 0 10
23903: PUSH
23904: LD_VAR 0 6
23908: PPUSH
23909: CALL_OW 311
23913: PPUSH
23914: LD_INT 3
23916: PPUSH
23917: CALL_OW 259
23921: PUSH
23922: LD_INT 4
23924: MUL
23925: MUL
23926: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23927: LD_VAR 0 6
23931: PPUSH
23932: CALL_OW 263
23936: PUSH
23937: LD_INT 2
23939: EQUAL
23940: IFFALSE 23991
// begin j := IsControledBy ( i ) ;
23942: LD_ADDR_VAR 0 7
23946: PUSH
23947: LD_VAR 0 6
23951: PPUSH
23952: CALL_OW 312
23956: ST_TO_ADDR
// if j then
23957: LD_VAR 0 7
23961: IFFALSE 23991
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23963: LD_ADDR_VAR 0 10
23967: PUSH
23968: LD_VAR 0 10
23972: PUSH
23973: LD_VAR 0 7
23977: PPUSH
23978: LD_INT 3
23980: PPUSH
23981: CALL_OW 259
23985: PUSH
23986: LD_INT 3
23988: MUL
23989: MUL
23990: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23991: LD_VAR 0 6
23995: PPUSH
23996: CALL_OW 264
24000: PUSH
24001: LD_INT 5
24003: PUSH
24004: LD_INT 6
24006: PUSH
24007: LD_INT 46
24009: PUSH
24010: LD_INT 44
24012: PUSH
24013: LD_INT 47
24015: PUSH
24016: LD_INT 45
24018: PUSH
24019: LD_INT 28
24021: PUSH
24022: LD_INT 7
24024: PUSH
24025: LD_INT 27
24027: PUSH
24028: LD_INT 29
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: IN
24043: IFFALSE 24063
24045: PUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: LD_INT 52
24053: PPUSH
24054: CALL_OW 321
24058: PUSH
24059: LD_INT 2
24061: EQUAL
24062: AND
24063: IFFALSE 24080
// bpoints := bpoints * 1.2 ;
24065: LD_ADDR_VAR 0 10
24069: PUSH
24070: LD_VAR 0 10
24074: PUSH
24075: LD_REAL  1.20000000000000E+0000
24078: MUL
24079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24080: LD_VAR 0 6
24084: PPUSH
24085: CALL_OW 264
24089: PUSH
24090: LD_INT 6
24092: PUSH
24093: LD_INT 46
24095: PUSH
24096: LD_INT 47
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: IN
24104: IFFALSE 24121
// bpoints := bpoints * 1.2 ;
24106: LD_ADDR_VAR 0 10
24110: PUSH
24111: LD_VAR 0 10
24115: PUSH
24116: LD_REAL  1.20000000000000E+0000
24119: MUL
24120: ST_TO_ADDR
// end ; unit_building :
24121: GO 24135
24123: LD_INT 3
24125: DOUBLE
24126: EQUAL
24127: IFTRUE 24131
24129: GO 24134
24131: POP
// ; end ;
24132: GO 24135
24134: POP
// for j = 1 to 3 do
24135: LD_ADDR_VAR 0 7
24139: PUSH
24140: DOUBLE
24141: LD_INT 1
24143: DEC
24144: ST_TO_ADDR
24145: LD_INT 3
24147: PUSH
24148: FOR_TO
24149: IFFALSE 24202
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24151: LD_ADDR_VAR 0 5
24155: PUSH
24156: LD_VAR 0 5
24160: PPUSH
24161: LD_VAR 0 7
24165: PPUSH
24166: LD_VAR 0 5
24170: PUSH
24171: LD_VAR 0 7
24175: ARRAY
24176: PUSH
24177: LD_VAR 0 9
24181: PUSH
24182: LD_VAR 0 7
24186: ARRAY
24187: PUSH
24188: LD_VAR 0 10
24192: MUL
24193: PLUS
24194: PPUSH
24195: CALL_OW 1
24199: ST_TO_ADDR
24200: GO 24148
24202: POP
24203: POP
// end ;
24204: GO 22677
24206: POP
24207: POP
// result := Replace ( result , 4 , tmp ) ;
24208: LD_ADDR_VAR 0 5
24212: PUSH
24213: LD_VAR 0 5
24217: PPUSH
24218: LD_INT 4
24220: PPUSH
24221: LD_VAR 0 8
24225: PPUSH
24226: CALL_OW 1
24230: ST_TO_ADDR
// end ;
24231: LD_VAR 0 5
24235: RET
// export function DangerAtRange ( unit , range ) ; begin
24236: LD_INT 0
24238: PPUSH
// if not unit then
24239: LD_VAR 0 1
24243: NOT
24244: IFFALSE 24248
// exit ;
24246: GO 24293
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24248: LD_ADDR_VAR 0 3
24252: PUSH
24253: LD_VAR 0 1
24257: PPUSH
24258: CALL_OW 255
24262: PPUSH
24263: LD_VAR 0 1
24267: PPUSH
24268: CALL_OW 250
24272: PPUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 251
24282: PPUSH
24283: LD_VAR 0 2
24287: PPUSH
24288: CALL 22527 0 4
24292: ST_TO_ADDR
// end ;
24293: LD_VAR 0 3
24297: RET
// export function DangerInArea ( side , area ) ; begin
24298: LD_INT 0
24300: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24301: LD_ADDR_VAR 0 3
24305: PUSH
24306: LD_VAR 0 2
24310: PPUSH
24311: LD_INT 81
24313: PUSH
24314: LD_VAR 0 1
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PPUSH
24323: CALL_OW 70
24327: ST_TO_ADDR
// end ;
24328: LD_VAR 0 3
24332: RET
// export function IsExtension ( b ) ; begin
24333: LD_INT 0
24335: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24336: LD_ADDR_VAR 0 2
24340: PUSH
24341: LD_VAR 0 1
24345: PUSH
24346: LD_INT 23
24348: PUSH
24349: LD_INT 20
24351: PUSH
24352: LD_INT 22
24354: PUSH
24355: LD_INT 17
24357: PUSH
24358: LD_INT 24
24360: PUSH
24361: LD_INT 21
24363: PUSH
24364: LD_INT 19
24366: PUSH
24367: LD_INT 16
24369: PUSH
24370: LD_INT 25
24372: PUSH
24373: LD_INT 18
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: IN
24388: ST_TO_ADDR
// end ;
24389: LD_VAR 0 2
24393: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24394: LD_INT 0
24396: PPUSH
24397: PPUSH
24398: PPUSH
// result := [ ] ;
24399: LD_ADDR_VAR 0 4
24403: PUSH
24404: EMPTY
24405: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24406: LD_ADDR_VAR 0 5
24410: PUSH
24411: LD_VAR 0 2
24415: PPUSH
24416: LD_INT 21
24418: PUSH
24419: LD_INT 3
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PPUSH
24426: CALL_OW 70
24430: ST_TO_ADDR
// if not tmp then
24431: LD_VAR 0 5
24435: NOT
24436: IFFALSE 24440
// exit ;
24438: GO 24504
// if checkLink then
24440: LD_VAR 0 3
24444: IFFALSE 24494
// begin for i in tmp do
24446: LD_ADDR_VAR 0 6
24450: PUSH
24451: LD_VAR 0 5
24455: PUSH
24456: FOR_IN
24457: IFFALSE 24492
// if GetBase ( i ) <> base then
24459: LD_VAR 0 6
24463: PPUSH
24464: CALL_OW 274
24468: PUSH
24469: LD_VAR 0 1
24473: NONEQUAL
24474: IFFALSE 24490
// ComLinkToBase ( base , i ) ;
24476: LD_VAR 0 1
24480: PPUSH
24481: LD_VAR 0 6
24485: PPUSH
24486: CALL_OW 169
24490: GO 24456
24492: POP
24493: POP
// end ; result := tmp ;
24494: LD_ADDR_VAR 0 4
24498: PUSH
24499: LD_VAR 0 5
24503: ST_TO_ADDR
// end ;
24504: LD_VAR 0 4
24508: RET
// export function ComComplete ( units , b ) ; var i ; begin
24509: LD_INT 0
24511: PPUSH
24512: PPUSH
// if not units then
24513: LD_VAR 0 1
24517: NOT
24518: IFFALSE 24522
// exit ;
24520: GO 24612
// for i in units do
24522: LD_ADDR_VAR 0 4
24526: PUSH
24527: LD_VAR 0 1
24531: PUSH
24532: FOR_IN
24533: IFFALSE 24610
// if BuildingStatus ( b ) = bs_build then
24535: LD_VAR 0 2
24539: PPUSH
24540: CALL_OW 461
24544: PUSH
24545: LD_INT 1
24547: EQUAL
24548: IFFALSE 24608
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24550: LD_VAR 0 4
24554: PPUSH
24555: LD_STRING h
24557: PUSH
24558: LD_VAR 0 2
24562: PPUSH
24563: CALL_OW 250
24567: PUSH
24568: LD_VAR 0 2
24572: PPUSH
24573: CALL_OW 251
24577: PUSH
24578: LD_VAR 0 2
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: LD_INT 0
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: PUSH
24601: EMPTY
24602: LIST
24603: PPUSH
24604: CALL_OW 446
24608: GO 24532
24610: POP
24611: POP
// end ;
24612: LD_VAR 0 3
24616: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24617: LD_INT 0
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24625: LD_VAR 0 1
24629: NOT
24630: IFTRUE 24647
24632: PUSH
24633: LD_VAR 0 1
24637: PPUSH
24638: CALL_OW 263
24642: PUSH
24643: LD_INT 2
24645: NONEQUAL
24646: OR
24647: IFFALSE 24651
// exit ;
24649: GO 24967
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24651: LD_ADDR_VAR 0 6
24655: PUSH
24656: LD_INT 22
24658: PUSH
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL_OW 255
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 30
24678: PUSH
24679: LD_INT 36
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 34
24688: PUSH
24689: LD_INT 31
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ST_TO_ADDR
// if not tmp then
24710: LD_VAR 0 6
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24967
// result := [ ] ;
24719: LD_ADDR_VAR 0 2
24723: PUSH
24724: EMPTY
24725: ST_TO_ADDR
// for i in tmp do
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_VAR 0 6
24735: PUSH
24736: FOR_IN
24737: IFFALSE 24808
// begin t := UnitsInside ( i ) ;
24739: LD_ADDR_VAR 0 4
24743: PUSH
24744: LD_VAR 0 3
24748: PPUSH
24749: CALL_OW 313
24753: ST_TO_ADDR
// if t then
24754: LD_VAR 0 4
24758: IFFALSE 24806
// for j in t do
24760: LD_ADDR_VAR 0 7
24764: PUSH
24765: LD_VAR 0 4
24769: PUSH
24770: FOR_IN
24771: IFFALSE 24804
// result := Replace ( result , result + 1 , j ) ;
24773: LD_ADDR_VAR 0 2
24777: PUSH
24778: LD_VAR 0 2
24782: PPUSH
24783: LD_VAR 0 2
24787: PUSH
24788: LD_INT 1
24790: PLUS
24791: PPUSH
24792: LD_VAR 0 7
24796: PPUSH
24797: CALL_OW 1
24801: ST_TO_ADDR
24802: GO 24770
24804: POP
24805: POP
// end ;
24806: GO 24736
24808: POP
24809: POP
// if not result then
24810: LD_VAR 0 2
24814: NOT
24815: IFFALSE 24819
// exit ;
24817: GO 24967
// mech := result [ 1 ] ;
24819: LD_ADDR_VAR 0 5
24823: PUSH
24824: LD_VAR 0 2
24828: PUSH
24829: LD_INT 1
24831: ARRAY
24832: ST_TO_ADDR
// if result > 1 then
24833: LD_VAR 0 2
24837: PUSH
24838: LD_INT 1
24840: GREATER
24841: IFFALSE 24953
// begin for i = 2 to result do
24843: LD_ADDR_VAR 0 3
24847: PUSH
24848: DOUBLE
24849: LD_INT 2
24851: DEC
24852: ST_TO_ADDR
24853: LD_VAR 0 2
24857: PUSH
24858: FOR_TO
24859: IFFALSE 24951
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24861: LD_ADDR_VAR 0 4
24865: PUSH
24866: LD_VAR 0 2
24870: PUSH
24871: LD_VAR 0 3
24875: ARRAY
24876: PPUSH
24877: LD_INT 3
24879: PPUSH
24880: CALL_OW 259
24884: PUSH
24885: LD_VAR 0 2
24889: PUSH
24890: LD_VAR 0 3
24894: ARRAY
24895: PPUSH
24896: CALL_OW 432
24900: MINUS
24901: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24902: LD_VAR 0 4
24906: PUSH
24907: LD_VAR 0 5
24911: PPUSH
24912: LD_INT 3
24914: PPUSH
24915: CALL_OW 259
24919: PUSH
24920: LD_VAR 0 5
24924: PPUSH
24925: CALL_OW 432
24929: MINUS
24930: GREATEREQUAL
24931: IFFALSE 24949
// mech := result [ i ] ;
24933: LD_ADDR_VAR 0 5
24937: PUSH
24938: LD_VAR 0 2
24942: PUSH
24943: LD_VAR 0 3
24947: ARRAY
24948: ST_TO_ADDR
// end ;
24949: GO 24858
24951: POP
24952: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24953: LD_VAR 0 1
24957: PPUSH
24958: LD_VAR 0 5
24962: PPUSH
24963: CALL_OW 135
// end ;
24967: LD_VAR 0 2
24971: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24972: LD_INT 0
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
// result := [ ] ;
24987: LD_ADDR_VAR 0 7
24991: PUSH
24992: EMPTY
24993: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 266
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: IN
25014: NOT
25015: IFFALSE 25019
// exit ;
25017: GO 26659
// if name then
25019: LD_VAR 0 3
25023: IFFALSE 25039
// SetBName ( base_dep , name ) ;
25025: LD_VAR 0 1
25029: PPUSH
25030: LD_VAR 0 3
25034: PPUSH
25035: CALL_OW 500
// base := GetBase ( base_dep ) ;
25039: LD_ADDR_VAR 0 15
25043: PUSH
25044: LD_VAR 0 1
25048: PPUSH
25049: CALL_OW 274
25053: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25054: LD_ADDR_VAR 0 16
25058: PUSH
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 255
25068: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25069: LD_ADDR_VAR 0 17
25073: PUSH
25074: LD_VAR 0 1
25078: PPUSH
25079: CALL_OW 248
25083: ST_TO_ADDR
// if sources then
25084: LD_VAR 0 5
25088: IFFALSE 25135
// for i = 1 to 3 do
25090: LD_ADDR_VAR 0 8
25094: PUSH
25095: DOUBLE
25096: LD_INT 1
25098: DEC
25099: ST_TO_ADDR
25100: LD_INT 3
25102: PUSH
25103: FOR_TO
25104: IFFALSE 25133
// AddResourceType ( base , i , sources [ i ] ) ;
25106: LD_VAR 0 15
25110: PPUSH
25111: LD_VAR 0 8
25115: PPUSH
25116: LD_VAR 0 5
25120: PUSH
25121: LD_VAR 0 8
25125: ARRAY
25126: PPUSH
25127: CALL_OW 276
25131: GO 25103
25133: POP
25134: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25135: LD_ADDR_VAR 0 18
25139: PUSH
25140: LD_VAR 0 15
25144: PPUSH
25145: LD_VAR 0 2
25149: PPUSH
25150: LD_INT 1
25152: PPUSH
25153: CALL 24394 0 3
25157: ST_TO_ADDR
// InitHc ;
25158: CALL_OW 19
// InitUc ;
25162: CALL_OW 18
// uc_side := side ;
25166: LD_ADDR_OWVAR 20
25170: PUSH
25171: LD_VAR 0 16
25175: ST_TO_ADDR
// uc_nation := nation ;
25176: LD_ADDR_OWVAR 21
25180: PUSH
25181: LD_VAR 0 17
25185: ST_TO_ADDR
// if buildings then
25186: LD_VAR 0 18
25190: IFFALSE 26518
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25192: LD_ADDR_VAR 0 19
25196: PUSH
25197: LD_VAR 0 18
25201: PPUSH
25202: LD_INT 2
25204: PUSH
25205: LD_INT 30
25207: PUSH
25208: LD_INT 29
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 30
25217: PUSH
25218: LD_INT 30
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 72
25234: ST_TO_ADDR
// if tmp then
25235: LD_VAR 0 19
25239: IFFALSE 25287
// for i in tmp do
25241: LD_ADDR_VAR 0 8
25245: PUSH
25246: LD_VAR 0 19
25250: PUSH
25251: FOR_IN
25252: IFFALSE 25285
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25254: LD_VAR 0 8
25258: PPUSH
25259: CALL_OW 250
25263: PPUSH
25264: LD_VAR 0 8
25268: PPUSH
25269: CALL_OW 251
25273: PPUSH
25274: LD_VAR 0 16
25278: PPUSH
25279: CALL_OW 441
25283: GO 25251
25285: POP
25286: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25287: LD_VAR 0 18
25291: PPUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 30
25297: PUSH
25298: LD_INT 32
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 30
25307: PUSH
25308: LD_INT 33
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: PPUSH
25320: CALL_OW 72
25324: IFFALSE 25412
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25326: LD_ADDR_VAR 0 8
25330: PUSH
25331: LD_VAR 0 18
25335: PPUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 30
25341: PUSH
25342: LD_INT 32
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 30
25351: PUSH
25352: LD_INT 33
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: PPUSH
25364: CALL_OW 72
25368: PUSH
25369: FOR_IN
25370: IFFALSE 25410
// begin if not GetBWeapon ( i ) then
25372: LD_VAR 0 8
25376: PPUSH
25377: CALL_OW 269
25381: NOT
25382: IFFALSE 25408
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25384: LD_VAR 0 8
25388: PPUSH
25389: LD_VAR 0 8
25393: PPUSH
25394: LD_VAR 0 2
25398: PPUSH
25399: CALL 26664 0 2
25403: PPUSH
25404: CALL_OW 431
// end ;
25408: GO 25369
25410: POP
25411: POP
// end ; for i = 1 to personel do
25412: LD_ADDR_VAR 0 8
25416: PUSH
25417: DOUBLE
25418: LD_INT 1
25420: DEC
25421: ST_TO_ADDR
25422: LD_VAR 0 6
25426: PUSH
25427: FOR_TO
25428: IFFALSE 26498
// begin if i > 4 then
25430: LD_VAR 0 8
25434: PUSH
25435: LD_INT 4
25437: GREATER
25438: IFFALSE 25442
// break ;
25440: GO 26498
// case i of 1 :
25442: LD_VAR 0 8
25446: PUSH
25447: LD_INT 1
25449: DOUBLE
25450: EQUAL
25451: IFTRUE 25455
25453: GO 25535
25455: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25456: LD_ADDR_VAR 0 12
25460: PUSH
25461: LD_VAR 0 18
25465: PPUSH
25466: LD_INT 22
25468: PUSH
25469: LD_VAR 0 16
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 58
25480: PUSH
25481: EMPTY
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 30
25489: PUSH
25490: LD_INT 32
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 30
25499: PUSH
25500: LD_INT 4
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 30
25509: PUSH
25510: LD_INT 5
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: PPUSH
25528: CALL_OW 72
25532: ST_TO_ADDR
25533: GO 25757
25535: LD_INT 2
25537: DOUBLE
25538: EQUAL
25539: IFTRUE 25543
25541: GO 25605
25543: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25544: LD_ADDR_VAR 0 12
25548: PUSH
25549: LD_VAR 0 18
25553: PPUSH
25554: LD_INT 22
25556: PUSH
25557: LD_VAR 0 16
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 30
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 30
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 72
25602: ST_TO_ADDR
25603: GO 25757
25605: LD_INT 3
25607: DOUBLE
25608: EQUAL
25609: IFTRUE 25613
25611: GO 25675
25613: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25614: LD_ADDR_VAR 0 12
25618: PUSH
25619: LD_VAR 0 18
25623: PPUSH
25624: LD_INT 22
25626: PUSH
25627: LD_VAR 0 16
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: LD_INT 30
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 30
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 72
25672: ST_TO_ADDR
25673: GO 25757
25675: LD_INT 4
25677: DOUBLE
25678: EQUAL
25679: IFTRUE 25683
25681: GO 25756
25683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25684: LD_ADDR_VAR 0 12
25688: PUSH
25689: LD_VAR 0 18
25693: PPUSH
25694: LD_INT 22
25696: PUSH
25697: LD_VAR 0 16
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 30
25711: PUSH
25712: LD_INT 6
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 30
25721: PUSH
25722: LD_INT 7
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 30
25731: PUSH
25732: LD_INT 8
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PPUSH
25749: CALL_OW 72
25753: ST_TO_ADDR
25754: GO 25757
25756: POP
// if i = 1 then
25757: LD_VAR 0 8
25761: PUSH
25762: LD_INT 1
25764: EQUAL
25765: IFFALSE 25876
// begin tmp := [ ] ;
25767: LD_ADDR_VAR 0 19
25771: PUSH
25772: EMPTY
25773: ST_TO_ADDR
// for j in f do
25774: LD_ADDR_VAR 0 9
25778: PUSH
25779: LD_VAR 0 12
25783: PUSH
25784: FOR_IN
25785: IFFALSE 25858
// if GetBType ( j ) = b_bunker then
25787: LD_VAR 0 9
25791: PPUSH
25792: CALL_OW 266
25796: PUSH
25797: LD_INT 32
25799: EQUAL
25800: IFFALSE 25827
// tmp := Insert ( tmp , 1 , j ) else
25802: LD_ADDR_VAR 0 19
25806: PUSH
25807: LD_VAR 0 19
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: LD_VAR 0 9
25819: PPUSH
25820: CALL_OW 2
25824: ST_TO_ADDR
25825: GO 25856
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25827: LD_ADDR_VAR 0 19
25831: PUSH
25832: LD_VAR 0 19
25836: PPUSH
25837: LD_VAR 0 19
25841: PUSH
25842: LD_INT 1
25844: PLUS
25845: PPUSH
25846: LD_VAR 0 9
25850: PPUSH
25851: CALL_OW 2
25855: ST_TO_ADDR
25856: GO 25784
25858: POP
25859: POP
// if tmp then
25860: LD_VAR 0 19
25864: IFFALSE 25876
// f := tmp ;
25866: LD_ADDR_VAR 0 12
25870: PUSH
25871: LD_VAR 0 19
25875: ST_TO_ADDR
// end ; x := personel [ i ] ;
25876: LD_ADDR_VAR 0 13
25880: PUSH
25881: LD_VAR 0 6
25885: PUSH
25886: LD_VAR 0 8
25890: ARRAY
25891: ST_TO_ADDR
// if x = - 1 then
25892: LD_VAR 0 13
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: EQUAL
25901: IFFALSE 26112
// begin for j in f do
25903: LD_ADDR_VAR 0 9
25907: PUSH
25908: LD_VAR 0 12
25912: PUSH
25913: FOR_IN
25914: IFFALSE 26108
// repeat InitHc ;
25916: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25920: LD_VAR 0 9
25924: PPUSH
25925: CALL_OW 266
25929: PUSH
25930: LD_INT 5
25932: EQUAL
25933: IFFALSE 26003
// begin if UnitsInside ( j ) < 3 then
25935: LD_VAR 0 9
25939: PPUSH
25940: CALL_OW 313
25944: PUSH
25945: LD_INT 3
25947: LESS
25948: IFFALSE 25984
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25950: LD_INT 0
25952: PPUSH
25953: LD_INT 5
25955: PUSH
25956: LD_INT 8
25958: PUSH
25959: LD_INT 9
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: PUSH
25967: LD_VAR 0 17
25971: ARRAY
25972: PPUSH
25973: LD_VAR 0 4
25977: PPUSH
25978: CALL_OW 380
25982: GO 26001
// PrepareHuman ( false , i , skill ) ;
25984: LD_INT 0
25986: PPUSH
25987: LD_VAR 0 8
25991: PPUSH
25992: LD_VAR 0 4
25996: PPUSH
25997: CALL_OW 380
// end else
26001: GO 26020
// PrepareHuman ( false , i , skill ) ;
26003: LD_INT 0
26005: PPUSH
26006: LD_VAR 0 8
26010: PPUSH
26011: LD_VAR 0 4
26015: PPUSH
26016: CALL_OW 380
// un := CreateHuman ;
26020: LD_ADDR_VAR 0 14
26024: PUSH
26025: CALL_OW 44
26029: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26030: LD_ADDR_VAR 0 7
26034: PUSH
26035: LD_VAR 0 7
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: LD_VAR 0 14
26047: PPUSH
26048: CALL_OW 2
26052: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26053: LD_VAR 0 14
26057: PPUSH
26058: LD_VAR 0 9
26062: PPUSH
26063: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26067: LD_VAR 0 9
26071: PPUSH
26072: CALL_OW 313
26076: PUSH
26077: LD_INT 6
26079: EQUAL
26080: IFTRUE 26104
26082: PUSH
26083: LD_VAR 0 9
26087: PPUSH
26088: CALL_OW 266
26092: PUSH
26093: LD_INT 32
26095: PUSH
26096: LD_INT 31
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: IN
26103: OR
26104: IFFALSE 25916
26106: GO 25913
26108: POP
26109: POP
// end else
26110: GO 26496
// for j = 1 to x do
26112: LD_ADDR_VAR 0 9
26116: PUSH
26117: DOUBLE
26118: LD_INT 1
26120: DEC
26121: ST_TO_ADDR
26122: LD_VAR 0 13
26126: PUSH
26127: FOR_TO
26128: IFFALSE 26494
// begin InitHc ;
26130: CALL_OW 19
// if not f then
26134: LD_VAR 0 12
26138: NOT
26139: IFFALSE 26228
// begin PrepareHuman ( false , i , skill ) ;
26141: LD_INT 0
26143: PPUSH
26144: LD_VAR 0 8
26148: PPUSH
26149: LD_VAR 0 4
26153: PPUSH
26154: CALL_OW 380
// un := CreateHuman ;
26158: LD_ADDR_VAR 0 14
26162: PUSH
26163: CALL_OW 44
26167: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26168: LD_ADDR_VAR 0 7
26172: PUSH
26173: LD_VAR 0 7
26177: PPUSH
26178: LD_INT 1
26180: PPUSH
26181: LD_VAR 0 14
26185: PPUSH
26186: CALL_OW 2
26190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26191: LD_VAR 0 14
26195: PPUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: CALL_OW 250
26205: PPUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 251
26215: PPUSH
26216: LD_INT 10
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL_OW 50
// continue ;
26226: GO 26127
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26228: LD_VAR 0 12
26232: PUSH
26233: LD_INT 1
26235: ARRAY
26236: PPUSH
26237: CALL_OW 313
26241: IFFALSE 26269
26243: PUSH
26244: LD_VAR 0 12
26248: PUSH
26249: LD_INT 1
26251: ARRAY
26252: PPUSH
26253: CALL_OW 266
26257: PUSH
26258: LD_INT 32
26260: PUSH
26261: LD_INT 31
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: IN
26268: AND
26269: IFTRUE 26290
26271: PUSH
26272: LD_VAR 0 12
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: CALL_OW 313
26285: PUSH
26286: LD_INT 6
26288: EQUAL
26289: OR
26290: IFFALSE 26310
// f := Delete ( f , 1 ) ;
26292: LD_ADDR_VAR 0 12
26296: PUSH
26297: LD_VAR 0 12
26301: PPUSH
26302: LD_INT 1
26304: PPUSH
26305: CALL_OW 3
26309: ST_TO_ADDR
// if not f then
26310: LD_VAR 0 12
26314: NOT
26315: IFFALSE 26333
// begin x := x + 2 ;
26317: LD_ADDR_VAR 0 13
26321: PUSH
26322: LD_VAR 0 13
26326: PUSH
26327: LD_INT 2
26329: PLUS
26330: ST_TO_ADDR
// continue ;
26331: GO 26127
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26333: LD_VAR 0 12
26337: PUSH
26338: LD_INT 1
26340: ARRAY
26341: PPUSH
26342: CALL_OW 266
26346: PUSH
26347: LD_INT 5
26349: EQUAL
26350: IFFALSE 26424
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26352: LD_VAR 0 12
26356: PUSH
26357: LD_INT 1
26359: ARRAY
26360: PPUSH
26361: CALL_OW 313
26365: PUSH
26366: LD_INT 3
26368: LESS
26369: IFFALSE 26405
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26371: LD_INT 0
26373: PPUSH
26374: LD_INT 5
26376: PUSH
26377: LD_INT 8
26379: PUSH
26380: LD_INT 9
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: PUSH
26388: LD_VAR 0 17
26392: ARRAY
26393: PPUSH
26394: LD_VAR 0 4
26398: PPUSH
26399: CALL_OW 380
26403: GO 26422
// PrepareHuman ( false , i , skill ) ;
26405: LD_INT 0
26407: PPUSH
26408: LD_VAR 0 8
26412: PPUSH
26413: LD_VAR 0 4
26417: PPUSH
26418: CALL_OW 380
// end else
26422: GO 26441
// PrepareHuman ( false , i , skill ) ;
26424: LD_INT 0
26426: PPUSH
26427: LD_VAR 0 8
26431: PPUSH
26432: LD_VAR 0 4
26436: PPUSH
26437: CALL_OW 380
// un := CreateHuman ;
26441: LD_ADDR_VAR 0 14
26445: PUSH
26446: CALL_OW 44
26450: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26451: LD_ADDR_VAR 0 7
26455: PUSH
26456: LD_VAR 0 7
26460: PPUSH
26461: LD_INT 1
26463: PPUSH
26464: LD_VAR 0 14
26468: PPUSH
26469: CALL_OW 2
26473: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26474: LD_VAR 0 14
26478: PPUSH
26479: LD_VAR 0 12
26483: PUSH
26484: LD_INT 1
26486: ARRAY
26487: PPUSH
26488: CALL_OW 52
// end ;
26492: GO 26127
26494: POP
26495: POP
// end ;
26496: GO 25427
26498: POP
26499: POP
// result := result ^ buildings ;
26500: LD_ADDR_VAR 0 7
26504: PUSH
26505: LD_VAR 0 7
26509: PUSH
26510: LD_VAR 0 18
26514: ADD
26515: ST_TO_ADDR
// end else
26516: GO 26659
// begin for i = 1 to personel do
26518: LD_ADDR_VAR 0 8
26522: PUSH
26523: DOUBLE
26524: LD_INT 1
26526: DEC
26527: ST_TO_ADDR
26528: LD_VAR 0 6
26532: PUSH
26533: FOR_TO
26534: IFFALSE 26657
// begin if i > 4 then
26536: LD_VAR 0 8
26540: PUSH
26541: LD_INT 4
26543: GREATER
26544: IFFALSE 26548
// break ;
26546: GO 26657
// x := personel [ i ] ;
26548: LD_ADDR_VAR 0 13
26552: PUSH
26553: LD_VAR 0 6
26557: PUSH
26558: LD_VAR 0 8
26562: ARRAY
26563: ST_TO_ADDR
// if x = - 1 then
26564: LD_VAR 0 13
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: EQUAL
26573: IFFALSE 26577
// continue ;
26575: GO 26533
// PrepareHuman ( false , i , skill ) ;
26577: LD_INT 0
26579: PPUSH
26580: LD_VAR 0 8
26584: PPUSH
26585: LD_VAR 0 4
26589: PPUSH
26590: CALL_OW 380
// un := CreateHuman ;
26594: LD_ADDR_VAR 0 14
26598: PUSH
26599: CALL_OW 44
26603: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26604: LD_VAR 0 14
26608: PPUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 250
26618: PPUSH
26619: LD_VAR 0 1
26623: PPUSH
26624: CALL_OW 251
26628: PPUSH
26629: LD_INT 10
26631: PPUSH
26632: LD_INT 0
26634: PPUSH
26635: CALL_OW 50
// result := result ^ un ;
26639: LD_ADDR_VAR 0 7
26643: PUSH
26644: LD_VAR 0 7
26648: PUSH
26649: LD_VAR 0 14
26653: ADD
26654: ST_TO_ADDR
// end ;
26655: GO 26533
26657: POP
26658: POP
// end ; end ;
26659: LD_VAR 0 7
26663: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26664: LD_INT 0
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
// result := false ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_INT 0
26689: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26690: LD_VAR 0 1
26694: NOT
26695: IFTRUE 26720
26697: PUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 266
26707: PUSH
26708: LD_INT 32
26710: PUSH
26711: LD_INT 33
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: IN
26718: NOT
26719: OR
26720: IFFALSE 26724
// exit ;
26722: GO 27859
// nat := GetNation ( tower ) ;
26724: LD_ADDR_VAR 0 12
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 248
26738: ST_TO_ADDR
// side := GetSide ( tower ) ;
26739: LD_ADDR_VAR 0 16
26743: PUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: CALL_OW 255
26753: ST_TO_ADDR
// x := GetX ( tower ) ;
26754: LD_ADDR_VAR 0 10
26758: PUSH
26759: LD_VAR 0 1
26763: PPUSH
26764: CALL_OW 250
26768: ST_TO_ADDR
// y := GetY ( tower ) ;
26769: LD_ADDR_VAR 0 11
26773: PUSH
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 251
26783: ST_TO_ADDR
// if not x or not y then
26784: LD_VAR 0 10
26788: NOT
26789: IFTRUE 26798
26791: PUSH
26792: LD_VAR 0 11
26796: NOT
26797: OR
26798: IFFALSE 26802
// exit ;
26800: GO 27859
// weapon := 0 ;
26802: LD_ADDR_VAR 0 18
26806: PUSH
26807: LD_INT 0
26809: ST_TO_ADDR
// fac_list := [ ] ;
26810: LD_ADDR_VAR 0 17
26814: PUSH
26815: EMPTY
26816: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26817: LD_ADDR_VAR 0 6
26821: PUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 274
26831: PPUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_INT 0
26839: PPUSH
26840: CALL 24394 0 3
26844: PPUSH
26845: LD_INT 30
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 72
26859: ST_TO_ADDR
// if not factories then
26860: LD_VAR 0 6
26864: NOT
26865: IFFALSE 26869
// exit ;
26867: GO 27859
// for i in factories do
26869: LD_ADDR_VAR 0 8
26873: PUSH
26874: LD_VAR 0 6
26878: PUSH
26879: FOR_IN
26880: IFFALSE 26905
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26882: LD_ADDR_VAR 0 17
26886: PUSH
26887: LD_VAR 0 17
26891: PUSH
26892: LD_VAR 0 8
26896: PPUSH
26897: CALL_OW 478
26901: UNION
26902: ST_TO_ADDR
26903: GO 26879
26905: POP
26906: POP
// if not fac_list then
26907: LD_VAR 0 17
26911: NOT
26912: IFFALSE 26916
// exit ;
26914: GO 27859
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26916: LD_ADDR_VAR 0 5
26920: PUSH
26921: LD_INT 4
26923: PUSH
26924: LD_INT 5
26926: PUSH
26927: LD_INT 9
26929: PUSH
26930: LD_INT 10
26932: PUSH
26933: LD_INT 6
26935: PUSH
26936: LD_INT 7
26938: PUSH
26939: LD_INT 11
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 27
26953: PUSH
26954: LD_INT 28
26956: PUSH
26957: LD_INT 26
26959: PUSH
26960: LD_INT 30
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 43
26971: PUSH
26972: LD_INT 44
26974: PUSH
26975: LD_INT 46
26977: PUSH
26978: LD_INT 45
26980: PUSH
26981: LD_INT 47
26983: PUSH
26984: LD_INT 49
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: LIST
26999: PUSH
27000: LD_VAR 0 12
27004: ARRAY
27005: ST_TO_ADDR
// list := list isect fac_list ;
27006: LD_ADDR_VAR 0 5
27010: PUSH
27011: LD_VAR 0 5
27015: PUSH
27016: LD_VAR 0 17
27020: ISECT
27021: ST_TO_ADDR
// if not list then
27022: LD_VAR 0 5
27026: NOT
27027: IFFALSE 27031
// exit ;
27029: GO 27859
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27031: LD_VAR 0 12
27035: PUSH
27036: LD_INT 3
27038: EQUAL
27039: IFFALSE 27051
27041: PUSH
27042: LD_INT 49
27044: PUSH
27045: LD_VAR 0 5
27049: IN
27050: AND
27051: IFFALSE 27071
27053: PUSH
27054: LD_INT 31
27056: PPUSH
27057: LD_VAR 0 16
27061: PPUSH
27062: CALL_OW 321
27066: PUSH
27067: LD_INT 2
27069: EQUAL
27070: AND
27071: IFFALSE 27131
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27073: LD_INT 22
27075: PUSH
27076: LD_VAR 0 16
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 35
27087: PUSH
27088: LD_INT 49
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 91
27097: PUSH
27098: LD_VAR 0 1
27102: PUSH
27103: LD_INT 10
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: LIST
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: PPUSH
27116: CALL_OW 69
27120: NOT
27121: IFFALSE 27131
// weapon := ru_time_lapser ;
27123: LD_ADDR_VAR 0 18
27127: PUSH
27128: LD_INT 49
27130: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27131: LD_VAR 0 12
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: IN
27146: IFFALSE 27170
27148: PUSH
27149: LD_INT 11
27151: PUSH
27152: LD_VAR 0 5
27156: IN
27157: IFTRUE 27169
27159: PUSH
27160: LD_INT 30
27162: PUSH
27163: LD_VAR 0 5
27167: IN
27168: OR
27169: AND
27170: IFFALSE 27190
27172: PUSH
27173: LD_INT 6
27175: PPUSH
27176: LD_VAR 0 16
27180: PPUSH
27181: CALL_OW 321
27185: PUSH
27186: LD_INT 2
27188: EQUAL
27189: AND
27190: IFFALSE 27357
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27192: LD_INT 22
27194: PUSH
27195: LD_VAR 0 16
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: LD_INT 35
27209: PUSH
27210: LD_INT 11
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 35
27219: PUSH
27220: LD_INT 30
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 91
27234: PUSH
27235: LD_VAR 0 1
27239: PUSH
27240: LD_INT 18
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: LIST
27252: PPUSH
27253: CALL_OW 69
27257: NOT
27258: IFFALSE 27334
27260: PUSH
27261: LD_INT 22
27263: PUSH
27264: LD_VAR 0 16
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 30
27278: PUSH
27279: LD_INT 32
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 30
27288: PUSH
27289: LD_INT 33
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 91
27303: PUSH
27304: LD_VAR 0 1
27308: PUSH
27309: LD_INT 12
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: PPUSH
27325: CALL_OW 69
27329: PUSH
27330: LD_INT 2
27332: GREATER
27333: AND
27334: IFFALSE 27357
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27336: LD_ADDR_VAR 0 18
27340: PUSH
27341: LD_INT 11
27343: PUSH
27344: LD_INT 30
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_VAR 0 12
27355: ARRAY
27356: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27357: LD_VAR 0 18
27361: NOT
27362: IFFALSE 27382
27364: PUSH
27365: LD_INT 40
27367: PPUSH
27368: LD_VAR 0 16
27372: PPUSH
27373: CALL_OW 321
27377: PUSH
27378: LD_INT 2
27380: EQUAL
27381: AND
27382: IFFALSE 27418
27384: PUSH
27385: LD_INT 7
27387: PUSH
27388: LD_VAR 0 5
27392: IN
27393: IFTRUE 27405
27395: PUSH
27396: LD_INT 28
27398: PUSH
27399: LD_VAR 0 5
27403: IN
27404: OR
27405: IFTRUE 27417
27407: PUSH
27408: LD_INT 45
27410: PUSH
27411: LD_VAR 0 5
27415: IN
27416: OR
27417: AND
27418: IFFALSE 27672
// begin hex := GetHexInfo ( x , y ) ;
27420: LD_ADDR_VAR 0 4
27424: PUSH
27425: LD_VAR 0 10
27429: PPUSH
27430: LD_VAR 0 11
27434: PPUSH
27435: CALL_OW 546
27439: ST_TO_ADDR
// if hex [ 1 ] then
27440: LD_VAR 0 4
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: IFFALSE 27452
// exit ;
27450: GO 27859
// height := hex [ 2 ] ;
27452: LD_ADDR_VAR 0 15
27456: PUSH
27457: LD_VAR 0 4
27461: PUSH
27462: LD_INT 2
27464: ARRAY
27465: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27466: LD_ADDR_VAR 0 14
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: LD_INT 5
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: ST_TO_ADDR
// for i in tmp do
27489: LD_ADDR_VAR 0 8
27493: PUSH
27494: LD_VAR 0 14
27498: PUSH
27499: FOR_IN
27500: IFFALSE 27670
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27502: LD_ADDR_VAR 0 9
27506: PUSH
27507: LD_VAR 0 10
27511: PPUSH
27512: LD_VAR 0 8
27516: PPUSH
27517: LD_INT 5
27519: PPUSH
27520: CALL_OW 272
27524: PUSH
27525: LD_VAR 0 11
27529: PPUSH
27530: LD_VAR 0 8
27534: PPUSH
27535: LD_INT 5
27537: PPUSH
27538: CALL_OW 273
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27547: LD_VAR 0 9
27551: PUSH
27552: LD_INT 1
27554: ARRAY
27555: PPUSH
27556: LD_VAR 0 9
27560: PUSH
27561: LD_INT 2
27563: ARRAY
27564: PPUSH
27565: CALL_OW 488
27569: IFFALSE 27668
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27571: LD_ADDR_VAR 0 4
27575: PUSH
27576: LD_VAR 0 9
27580: PUSH
27581: LD_INT 1
27583: ARRAY
27584: PPUSH
27585: LD_VAR 0 9
27589: PUSH
27590: LD_INT 2
27592: ARRAY
27593: PPUSH
27594: CALL_OW 546
27598: ST_TO_ADDR
// if hex [ 1 ] then
27599: LD_VAR 0 4
27603: PUSH
27604: LD_INT 1
27606: ARRAY
27607: IFFALSE 27611
// continue ;
27609: GO 27499
// h := hex [ 2 ] ;
27611: LD_ADDR_VAR 0 13
27615: PUSH
27616: LD_VAR 0 4
27620: PUSH
27621: LD_INT 2
27623: ARRAY
27624: ST_TO_ADDR
// if h + 7 < height then
27625: LD_VAR 0 13
27629: PUSH
27630: LD_INT 7
27632: PLUS
27633: PUSH
27634: LD_VAR 0 15
27638: LESS
27639: IFFALSE 27668
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27641: LD_ADDR_VAR 0 18
27645: PUSH
27646: LD_INT 7
27648: PUSH
27649: LD_INT 28
27651: PUSH
27652: LD_INT 45
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: PUSH
27660: LD_VAR 0 12
27664: ARRAY
27665: ST_TO_ADDR
// break ;
27666: GO 27670
// end ; end ; end ;
27668: GO 27499
27670: POP
27671: POP
// end ; if not weapon then
27672: LD_VAR 0 18
27676: NOT
27677: IFFALSE 27737
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27679: LD_ADDR_VAR 0 5
27683: PUSH
27684: LD_VAR 0 5
27688: PUSH
27689: LD_INT 11
27691: PUSH
27692: LD_INT 30
27694: PUSH
27695: LD_INT 49
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: DIFF
27703: ST_TO_ADDR
// if not list then
27704: LD_VAR 0 5
27708: NOT
27709: IFFALSE 27713
// exit ;
27711: GO 27859
// weapon := list [ rand ( 1 , list ) ] ;
27713: LD_ADDR_VAR 0 18
27717: PUSH
27718: LD_VAR 0 5
27722: PUSH
27723: LD_INT 1
27725: PPUSH
27726: LD_VAR 0 5
27730: PPUSH
27731: CALL_OW 12
27735: ARRAY
27736: ST_TO_ADDR
// end ; if weapon then
27737: LD_VAR 0 18
27741: IFFALSE 27859
// begin tmp := CostOfWeapon ( weapon ) ;
27743: LD_ADDR_VAR 0 14
27747: PUSH
27748: LD_VAR 0 18
27752: PPUSH
27753: CALL_OW 451
27757: ST_TO_ADDR
// j := GetBase ( tower ) ;
27758: LD_ADDR_VAR 0 9
27762: PUSH
27763: LD_VAR 0 1
27767: PPUSH
27768: CALL_OW 274
27772: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27773: LD_VAR 0 9
27777: PPUSH
27778: LD_INT 1
27780: PPUSH
27781: CALL_OW 275
27785: PUSH
27786: LD_VAR 0 14
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: GREATEREQUAL
27795: IFFALSE 27821
27797: PUSH
27798: LD_VAR 0 9
27802: PPUSH
27803: LD_INT 2
27805: PPUSH
27806: CALL_OW 275
27810: PUSH
27811: LD_VAR 0 14
27815: PUSH
27816: LD_INT 2
27818: ARRAY
27819: GREATEREQUAL
27820: AND
27821: IFFALSE 27847
27823: PUSH
27824: LD_VAR 0 9
27828: PPUSH
27829: LD_INT 3
27831: PPUSH
27832: CALL_OW 275
27836: PUSH
27837: LD_VAR 0 14
27841: PUSH
27842: LD_INT 3
27844: ARRAY
27845: GREATEREQUAL
27846: AND
27847: IFFALSE 27859
// result := weapon ;
27849: LD_ADDR_VAR 0 3
27853: PUSH
27854: LD_VAR 0 18
27858: ST_TO_ADDR
// end ; end ;
27859: LD_VAR 0 3
27863: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27864: LD_INT 0
27866: PPUSH
27867: PPUSH
// result := true ;
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// if array1 = array2 then
27876: LD_VAR 0 1
27880: PUSH
27881: LD_VAR 0 2
27885: EQUAL
27886: IFFALSE 27946
// begin for i = 1 to array1 do
27888: LD_ADDR_VAR 0 4
27892: PUSH
27893: DOUBLE
27894: LD_INT 1
27896: DEC
27897: ST_TO_ADDR
27898: LD_VAR 0 1
27902: PUSH
27903: FOR_TO
27904: IFFALSE 27942
// if array1 [ i ] <> array2 [ i ] then
27906: LD_VAR 0 1
27910: PUSH
27911: LD_VAR 0 4
27915: ARRAY
27916: PUSH
27917: LD_VAR 0 2
27921: PUSH
27922: LD_VAR 0 4
27926: ARRAY
27927: NONEQUAL
27928: IFFALSE 27940
// begin result := false ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: LD_INT 0
27937: ST_TO_ADDR
// break ;
27938: GO 27942
// end ;
27940: GO 27903
27942: POP
27943: POP
// end else
27944: GO 27954
// result := false ;
27946: LD_ADDR_VAR 0 3
27950: PUSH
27951: LD_INT 0
27953: ST_TO_ADDR
// end ;
27954: LD_VAR 0 3
27958: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
// if not array1 or not array2 then
27963: LD_VAR 0 1
27967: NOT
27968: IFTRUE 27977
27970: PUSH
27971: LD_VAR 0 2
27975: NOT
27976: OR
27977: IFFALSE 27981
// exit ;
27979: GO 28045
// result := true ;
27981: LD_ADDR_VAR 0 3
27985: PUSH
27986: LD_INT 1
27988: ST_TO_ADDR
// for i = 1 to array1 do
27989: LD_ADDR_VAR 0 4
27993: PUSH
27994: DOUBLE
27995: LD_INT 1
27997: DEC
27998: ST_TO_ADDR
27999: LD_VAR 0 1
28003: PUSH
28004: FOR_TO
28005: IFFALSE 28043
// if array1 [ i ] <> array2 [ i ] then
28007: LD_VAR 0 1
28011: PUSH
28012: LD_VAR 0 4
28016: ARRAY
28017: PUSH
28018: LD_VAR 0 2
28022: PUSH
28023: LD_VAR 0 4
28027: ARRAY
28028: NONEQUAL
28029: IFFALSE 28041
// begin result := false ;
28031: LD_ADDR_VAR 0 3
28035: PUSH
28036: LD_INT 0
28038: ST_TO_ADDR
// break ;
28039: GO 28043
// end ;
28041: GO 28004
28043: POP
28044: POP
// end ;
28045: LD_VAR 0 3
28049: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28050: LD_INT 0
28052: PPUSH
28053: PPUSH
28054: PPUSH
// pom := GetBase ( fac ) ;
28055: LD_ADDR_VAR 0 5
28059: PUSH
28060: LD_VAR 0 1
28064: PPUSH
28065: CALL_OW 274
28069: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28070: LD_ADDR_VAR 0 4
28074: PUSH
28075: LD_VAR 0 2
28079: PUSH
28080: LD_INT 1
28082: ARRAY
28083: PPUSH
28084: LD_VAR 0 2
28088: PUSH
28089: LD_INT 2
28091: ARRAY
28092: PPUSH
28093: LD_VAR 0 2
28097: PUSH
28098: LD_INT 3
28100: ARRAY
28101: PPUSH
28102: LD_VAR 0 2
28106: PUSH
28107: LD_INT 4
28109: ARRAY
28110: PPUSH
28111: CALL_OW 449
28115: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28116: LD_ADDR_VAR 0 3
28120: PUSH
28121: LD_VAR 0 5
28125: PPUSH
28126: LD_INT 1
28128: PPUSH
28129: CALL_OW 275
28133: PUSH
28134: LD_VAR 0 4
28138: PUSH
28139: LD_INT 1
28141: ARRAY
28142: GREATEREQUAL
28143: IFFALSE 28169
28145: PUSH
28146: LD_VAR 0 5
28150: PPUSH
28151: LD_INT 2
28153: PPUSH
28154: CALL_OW 275
28158: PUSH
28159: LD_VAR 0 4
28163: PUSH
28164: LD_INT 2
28166: ARRAY
28167: GREATEREQUAL
28168: AND
28169: IFFALSE 28195
28171: PUSH
28172: LD_VAR 0 5
28176: PPUSH
28177: LD_INT 3
28179: PPUSH
28180: CALL_OW 275
28184: PUSH
28185: LD_VAR 0 4
28189: PUSH
28190: LD_INT 3
28192: ARRAY
28193: GREATEREQUAL
28194: AND
28195: ST_TO_ADDR
// end ;
28196: LD_VAR 0 3
28200: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28201: LD_INT 0
28203: PPUSH
28204: PPUSH
28205: PPUSH
28206: PPUSH
// pom := GetBase ( building ) ;
28207: LD_ADDR_VAR 0 3
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 274
28221: ST_TO_ADDR
// if not pom then
28222: LD_VAR 0 3
28226: NOT
28227: IFFALSE 28231
// exit ;
28229: GO 28405
// btype := GetBType ( building ) ;
28231: LD_ADDR_VAR 0 5
28235: PUSH
28236: LD_VAR 0 1
28240: PPUSH
28241: CALL_OW 266
28245: ST_TO_ADDR
// if btype = b_armoury then
28246: LD_VAR 0 5
28250: PUSH
28251: LD_INT 4
28253: EQUAL
28254: IFFALSE 28264
// btype := b_barracks ;
28256: LD_ADDR_VAR 0 5
28260: PUSH
28261: LD_INT 5
28263: ST_TO_ADDR
// if btype = b_depot then
28264: LD_VAR 0 5
28268: PUSH
28269: LD_INT 0
28271: EQUAL
28272: IFFALSE 28282
// btype := b_warehouse ;
28274: LD_ADDR_VAR 0 5
28278: PUSH
28279: LD_INT 1
28281: ST_TO_ADDR
// if btype = b_workshop then
28282: LD_VAR 0 5
28286: PUSH
28287: LD_INT 2
28289: EQUAL
28290: IFFALSE 28300
// btype := b_factory ;
28292: LD_ADDR_VAR 0 5
28296: PUSH
28297: LD_INT 3
28299: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28300: LD_ADDR_VAR 0 4
28304: PUSH
28305: LD_VAR 0 5
28309: PPUSH
28310: LD_VAR 0 1
28314: PPUSH
28315: CALL_OW 248
28319: PPUSH
28320: CALL_OW 450
28324: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28325: LD_ADDR_VAR 0 2
28329: PUSH
28330: LD_VAR 0 3
28334: PPUSH
28335: LD_INT 1
28337: PPUSH
28338: CALL_OW 275
28342: PUSH
28343: LD_VAR 0 4
28347: PUSH
28348: LD_INT 1
28350: ARRAY
28351: GREATEREQUAL
28352: IFFALSE 28378
28354: PUSH
28355: LD_VAR 0 3
28359: PPUSH
28360: LD_INT 2
28362: PPUSH
28363: CALL_OW 275
28367: PUSH
28368: LD_VAR 0 4
28372: PUSH
28373: LD_INT 2
28375: ARRAY
28376: GREATEREQUAL
28377: AND
28378: IFFALSE 28404
28380: PUSH
28381: LD_VAR 0 3
28385: PPUSH
28386: LD_INT 3
28388: PPUSH
28389: CALL_OW 275
28393: PUSH
28394: LD_VAR 0 4
28398: PUSH
28399: LD_INT 3
28401: ARRAY
28402: GREATEREQUAL
28403: AND
28404: ST_TO_ADDR
// end ;
28405: LD_VAR 0 2
28409: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28410: LD_INT 0
28412: PPUSH
28413: PPUSH
28414: PPUSH
// pom := GetBase ( building ) ;
28415: LD_ADDR_VAR 0 4
28419: PUSH
28420: LD_VAR 0 1
28424: PPUSH
28425: CALL_OW 274
28429: ST_TO_ADDR
// if not pom then
28430: LD_VAR 0 4
28434: NOT
28435: IFFALSE 28439
// exit ;
28437: GO 28544
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28439: LD_ADDR_VAR 0 5
28443: PUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 248
28458: PPUSH
28459: CALL_OW 450
28463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_VAR 0 4
28473: PPUSH
28474: LD_INT 1
28476: PPUSH
28477: CALL_OW 275
28481: PUSH
28482: LD_VAR 0 5
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: GREATEREQUAL
28491: IFFALSE 28517
28493: PUSH
28494: LD_VAR 0 4
28498: PPUSH
28499: LD_INT 2
28501: PPUSH
28502: CALL_OW 275
28506: PUSH
28507: LD_VAR 0 5
28511: PUSH
28512: LD_INT 2
28514: ARRAY
28515: GREATEREQUAL
28516: AND
28517: IFFALSE 28543
28519: PUSH
28520: LD_VAR 0 4
28524: PPUSH
28525: LD_INT 3
28527: PPUSH
28528: CALL_OW 275
28532: PUSH
28533: LD_VAR 0 5
28537: PUSH
28538: LD_INT 3
28540: ARRAY
28541: GREATEREQUAL
28542: AND
28543: ST_TO_ADDR
// end ;
28544: LD_VAR 0 3
28548: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28549: LD_INT 0
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
28560: PPUSH
28561: PPUSH
// result := false ;
28562: LD_ADDR_VAR 0 8
28566: PUSH
28567: LD_INT 0
28569: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28570: LD_VAR 0 5
28574: NOT
28575: IFTRUE 28584
28577: PUSH
28578: LD_VAR 0 1
28582: NOT
28583: OR
28584: IFTRUE 28593
28586: PUSH
28587: LD_VAR 0 2
28591: NOT
28592: OR
28593: IFTRUE 28602
28595: PUSH
28596: LD_VAR 0 3
28600: NOT
28601: OR
28602: IFFALSE 28606
// exit ;
28604: GO 29432
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28606: LD_ADDR_VAR 0 14
28610: PUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_VAR 0 2
28620: PPUSH
28621: LD_VAR 0 3
28625: PPUSH
28626: LD_VAR 0 4
28630: PPUSH
28631: LD_VAR 0 5
28635: PUSH
28636: LD_INT 1
28638: ARRAY
28639: PPUSH
28640: CALL_OW 248
28644: PPUSH
28645: LD_INT 0
28647: PPUSH
28648: CALL 30713 0 6
28652: ST_TO_ADDR
// if not hexes then
28653: LD_VAR 0 14
28657: NOT
28658: IFFALSE 28662
// exit ;
28660: GO 29432
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28662: LD_ADDR_VAR 0 17
28666: PUSH
28667: LD_VAR 0 5
28671: PPUSH
28672: LD_INT 22
28674: PUSH
28675: LD_VAR 0 13
28679: PPUSH
28680: CALL_OW 255
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 30
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 30
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PPUSH
28721: CALL_OW 72
28725: ST_TO_ADDR
// for i = 1 to hexes do
28726: LD_ADDR_VAR 0 9
28730: PUSH
28731: DOUBLE
28732: LD_INT 1
28734: DEC
28735: ST_TO_ADDR
28736: LD_VAR 0 14
28740: PUSH
28741: FOR_TO
28742: IFFALSE 29430
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28744: LD_ADDR_VAR 0 13
28748: PUSH
28749: LD_VAR 0 14
28753: PUSH
28754: LD_VAR 0 9
28758: ARRAY
28759: PUSH
28760: LD_INT 1
28762: ARRAY
28763: PPUSH
28764: LD_VAR 0 14
28768: PUSH
28769: LD_VAR 0 9
28773: ARRAY
28774: PUSH
28775: LD_INT 2
28777: ARRAY
28778: PPUSH
28779: CALL_OW 428
28783: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28784: LD_VAR 0 14
28788: PUSH
28789: LD_VAR 0 9
28793: ARRAY
28794: PUSH
28795: LD_INT 1
28797: ARRAY
28798: PPUSH
28799: LD_VAR 0 14
28803: PUSH
28804: LD_VAR 0 9
28808: ARRAY
28809: PUSH
28810: LD_INT 2
28812: ARRAY
28813: PPUSH
28814: CALL_OW 351
28818: IFTRUE 28857
28820: PUSH
28821: LD_VAR 0 14
28825: PUSH
28826: LD_VAR 0 9
28830: ARRAY
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: PPUSH
28836: LD_VAR 0 14
28840: PUSH
28841: LD_VAR 0 9
28845: ARRAY
28846: PUSH
28847: LD_INT 2
28849: ARRAY
28850: PPUSH
28851: CALL_OW 488
28855: NOT
28856: OR
28857: IFTRUE 28874
28859: PUSH
28860: LD_VAR 0 13
28864: PPUSH
28865: CALL_OW 247
28869: PUSH
28870: LD_INT 3
28872: EQUAL
28873: OR
28874: IFFALSE 28880
// exit ;
28876: POP
28877: POP
28878: GO 29432
// if not tmp then
28880: LD_VAR 0 13
28884: NOT
28885: IFFALSE 28889
// continue ;
28887: GO 28741
// result := true ;
28889: LD_ADDR_VAR 0 8
28893: PUSH
28894: LD_INT 1
28896: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28897: LD_VAR 0 6
28901: IFFALSE 28918
28903: PUSH
28904: LD_VAR 0 13
28908: PPUSH
28909: CALL_OW 247
28913: PUSH
28914: LD_INT 2
28916: EQUAL
28917: AND
28918: IFFALSE 28935
28920: PUSH
28921: LD_VAR 0 13
28925: PPUSH
28926: CALL_OW 263
28930: PUSH
28931: LD_INT 1
28933: EQUAL
28934: AND
28935: IFFALSE 29099
// begin if IsDrivenBy ( tmp ) then
28937: LD_VAR 0 13
28941: PPUSH
28942: CALL_OW 311
28946: IFFALSE 28950
// continue ;
28948: GO 28741
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28950: LD_VAR 0 6
28954: PPUSH
28955: LD_INT 3
28957: PUSH
28958: LD_INT 60
28960: PUSH
28961: EMPTY
28962: LIST
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 3
28970: PUSH
28971: LD_INT 55
28973: PUSH
28974: EMPTY
28975: LIST
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PPUSH
28985: CALL_OW 72
28989: IFFALSE 29097
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28991: LD_ADDR_VAR 0 18
28995: PUSH
28996: LD_VAR 0 6
29000: PPUSH
29001: LD_INT 3
29003: PUSH
29004: LD_INT 60
29006: PUSH
29007: EMPTY
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: LD_INT 55
29019: PUSH
29020: EMPTY
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PPUSH
29031: CALL_OW 72
29035: PUSH
29036: LD_INT 1
29038: ARRAY
29039: ST_TO_ADDR
// if IsInUnit ( driver ) then
29040: LD_VAR 0 18
29044: PPUSH
29045: CALL_OW 310
29049: IFFALSE 29060
// ComExit ( driver ) ;
29051: LD_VAR 0 18
29055: PPUSH
29056: CALL 54703 0 1
// AddComEnterUnit ( driver , tmp ) ;
29060: LD_VAR 0 18
29064: PPUSH
29065: LD_VAR 0 13
29069: PPUSH
29070: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29074: LD_VAR 0 18
29078: PPUSH
29079: LD_VAR 0 7
29083: PPUSH
29084: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29088: LD_VAR 0 18
29092: PPUSH
29093: CALL_OW 181
// end ; continue ;
29097: GO 28741
// end ; if not cleaners or not tmp in cleaners then
29099: LD_VAR 0 6
29103: NOT
29104: IFTRUE 29119
29106: PUSH
29107: LD_VAR 0 13
29111: PUSH
29112: LD_VAR 0 6
29116: IN
29117: NOT
29118: OR
29119: IFFALSE 29428
// begin if dep then
29121: LD_VAR 0 17
29125: IFFALSE 29261
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29127: LD_ADDR_VAR 0 16
29131: PUSH
29132: LD_VAR 0 17
29136: PUSH
29137: LD_INT 1
29139: ARRAY
29140: PPUSH
29141: CALL_OW 250
29145: PPUSH
29146: LD_VAR 0 17
29150: PUSH
29151: LD_INT 1
29153: ARRAY
29154: PPUSH
29155: CALL_OW 254
29159: PPUSH
29160: LD_INT 5
29162: PPUSH
29163: CALL_OW 272
29167: PUSH
29168: LD_VAR 0 17
29172: PUSH
29173: LD_INT 1
29175: ARRAY
29176: PPUSH
29177: CALL_OW 251
29181: PPUSH
29182: LD_VAR 0 17
29186: PUSH
29187: LD_INT 1
29189: ARRAY
29190: PPUSH
29191: CALL_OW 254
29195: PPUSH
29196: LD_INT 5
29198: PPUSH
29199: CALL_OW 273
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29208: LD_VAR 0 16
29212: PUSH
29213: LD_INT 1
29215: ARRAY
29216: PPUSH
29217: LD_VAR 0 16
29221: PUSH
29222: LD_INT 2
29224: ARRAY
29225: PPUSH
29226: CALL_OW 488
29230: IFFALSE 29261
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29232: LD_VAR 0 13
29236: PPUSH
29237: LD_VAR 0 16
29241: PUSH
29242: LD_INT 1
29244: ARRAY
29245: PPUSH
29246: LD_VAR 0 16
29250: PUSH
29251: LD_INT 2
29253: ARRAY
29254: PPUSH
29255: CALL_OW 111
// continue ;
29259: GO 28741
// end ; end ; r := GetDir ( tmp ) ;
29261: LD_ADDR_VAR 0 15
29265: PUSH
29266: LD_VAR 0 13
29270: PPUSH
29271: CALL_OW 254
29275: ST_TO_ADDR
// if r = 5 then
29276: LD_VAR 0 15
29280: PUSH
29281: LD_INT 5
29283: EQUAL
29284: IFFALSE 29294
// r := 0 ;
29286: LD_ADDR_VAR 0 15
29290: PUSH
29291: LD_INT 0
29293: ST_TO_ADDR
// for j = r to 5 do
29294: LD_ADDR_VAR 0 10
29298: PUSH
29299: DOUBLE
29300: LD_VAR 0 15
29304: DEC
29305: ST_TO_ADDR
29306: LD_INT 5
29308: PUSH
29309: FOR_TO
29310: IFFALSE 29426
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29312: LD_ADDR_VAR 0 11
29316: PUSH
29317: LD_VAR 0 13
29321: PPUSH
29322: CALL_OW 250
29326: PPUSH
29327: LD_VAR 0 10
29331: PPUSH
29332: LD_INT 2
29334: PPUSH
29335: CALL_OW 272
29339: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29340: LD_ADDR_VAR 0 12
29344: PUSH
29345: LD_VAR 0 13
29349: PPUSH
29350: CALL_OW 251
29354: PPUSH
29355: LD_VAR 0 10
29359: PPUSH
29360: LD_INT 2
29362: PPUSH
29363: CALL_OW 273
29367: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29368: LD_VAR 0 11
29372: PPUSH
29373: LD_VAR 0 12
29377: PPUSH
29378: CALL_OW 488
29382: IFFALSE 29401
29384: PUSH
29385: LD_VAR 0 11
29389: PPUSH
29390: LD_VAR 0 12
29394: PPUSH
29395: CALL_OW 428
29399: NOT
29400: AND
29401: IFFALSE 29424
// begin ComMoveXY ( tmp , _x , _y ) ;
29403: LD_VAR 0 13
29407: PPUSH
29408: LD_VAR 0 11
29412: PPUSH
29413: LD_VAR 0 12
29417: PPUSH
29418: CALL_OW 111
// break ;
29422: GO 29426
// end ; end ;
29424: GO 29309
29426: POP
29427: POP
// end ; end ;
29428: GO 28741
29430: POP
29431: POP
// end ;
29432: LD_VAR 0 8
29436: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29437: LD_INT 0
29439: PPUSH
// result := true ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 1
29447: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29448: LD_VAR 0 2
29452: PUSH
29453: LD_INT 24
29455: DOUBLE
29456: EQUAL
29457: IFTRUE 29467
29459: LD_INT 33
29461: DOUBLE
29462: EQUAL
29463: IFTRUE 29467
29465: GO 29492
29467: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29468: LD_ADDR_VAR 0 3
29472: PUSH
29473: LD_INT 32
29475: PPUSH
29476: LD_VAR 0 1
29480: PPUSH
29481: CALL_OW 321
29485: PUSH
29486: LD_INT 2
29488: EQUAL
29489: ST_TO_ADDR
29490: GO 29808
29492: LD_INT 20
29494: DOUBLE
29495: EQUAL
29496: IFTRUE 29500
29498: GO 29525
29500: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29501: LD_ADDR_VAR 0 3
29505: PUSH
29506: LD_INT 6
29508: PPUSH
29509: LD_VAR 0 1
29513: PPUSH
29514: CALL_OW 321
29518: PUSH
29519: LD_INT 2
29521: EQUAL
29522: ST_TO_ADDR
29523: GO 29808
29525: LD_INT 22
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29539
29531: LD_INT 36
29533: DOUBLE
29534: EQUAL
29535: IFTRUE 29539
29537: GO 29564
29539: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29540: LD_ADDR_VAR 0 3
29544: PUSH
29545: LD_INT 15
29547: PPUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 321
29557: PUSH
29558: LD_INT 2
29560: EQUAL
29561: ST_TO_ADDR
29562: GO 29808
29564: LD_INT 30
29566: DOUBLE
29567: EQUAL
29568: IFTRUE 29572
29570: GO 29597
29572: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29573: LD_ADDR_VAR 0 3
29577: PUSH
29578: LD_INT 20
29580: PPUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 321
29590: PUSH
29591: LD_INT 2
29593: EQUAL
29594: ST_TO_ADDR
29595: GO 29808
29597: LD_INT 28
29599: DOUBLE
29600: EQUAL
29601: IFTRUE 29611
29603: LD_INT 21
29605: DOUBLE
29606: EQUAL
29607: IFTRUE 29611
29609: GO 29636
29611: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29612: LD_ADDR_VAR 0 3
29616: PUSH
29617: LD_INT 21
29619: PPUSH
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL_OW 321
29629: PUSH
29630: LD_INT 2
29632: EQUAL
29633: ST_TO_ADDR
29634: GO 29808
29636: LD_INT 16
29638: DOUBLE
29639: EQUAL
29640: IFTRUE 29644
29642: GO 29669
29644: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29645: LD_ADDR_VAR 0 3
29649: PUSH
29650: LD_INT 84
29652: PPUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 321
29662: PUSH
29663: LD_INT 2
29665: EQUAL
29666: ST_TO_ADDR
29667: GO 29808
29669: LD_INT 19
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29683
29675: LD_INT 23
29677: DOUBLE
29678: EQUAL
29679: IFTRUE 29683
29681: GO 29708
29683: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29684: LD_ADDR_VAR 0 3
29688: PUSH
29689: LD_INT 83
29691: PPUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 321
29701: PUSH
29702: LD_INT 2
29704: EQUAL
29705: ST_TO_ADDR
29706: GO 29808
29708: LD_INT 17
29710: DOUBLE
29711: EQUAL
29712: IFTRUE 29716
29714: GO 29741
29716: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: LD_INT 39
29724: PPUSH
29725: LD_VAR 0 1
29729: PPUSH
29730: CALL_OW 321
29734: PUSH
29735: LD_INT 2
29737: EQUAL
29738: ST_TO_ADDR
29739: GO 29808
29741: LD_INT 18
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29774
29749: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 40
29757: PPUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 321
29767: PUSH
29768: LD_INT 2
29770: EQUAL
29771: ST_TO_ADDR
29772: GO 29808
29774: LD_INT 27
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29807
29782: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: LD_INT 35
29790: PPUSH
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 321
29800: PUSH
29801: LD_INT 2
29803: EQUAL
29804: ST_TO_ADDR
29805: GO 29808
29807: POP
// end ;
29808: LD_VAR 0 3
29812: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29813: LD_INT 0
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
// result := false ;
29826: LD_ADDR_VAR 0 6
29830: PUSH
29831: LD_INT 0
29833: ST_TO_ADDR
// if btype = b_depot then
29834: LD_VAR 0 2
29838: PUSH
29839: LD_INT 0
29841: EQUAL
29842: IFFALSE 29854
// begin result := true ;
29844: LD_ADDR_VAR 0 6
29848: PUSH
29849: LD_INT 1
29851: ST_TO_ADDR
// exit ;
29852: GO 30708
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29854: LD_VAR 0 1
29858: NOT
29859: IFTRUE 29884
29861: PUSH
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 266
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: IN
29882: NOT
29883: OR
29884: IFTRUE 29893
29886: PUSH
29887: LD_VAR 0 2
29891: NOT
29892: OR
29893: IFTRUE 29929
29895: PUSH
29896: LD_VAR 0 5
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: LD_INT 3
29912: PUSH
29913: LD_INT 4
29915: PUSH
29916: LD_INT 5
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: IN
29927: NOT
29928: OR
29929: IFTRUE 29948
29931: PUSH
29932: LD_VAR 0 3
29936: PPUSH
29937: LD_VAR 0 4
29941: PPUSH
29942: CALL_OW 488
29946: NOT
29947: OR
29948: IFFALSE 29952
// exit ;
29950: GO 30708
// side := GetSide ( depot ) ;
29952: LD_ADDR_VAR 0 9
29956: PUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 255
29966: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29967: LD_VAR 0 9
29971: PPUSH
29972: LD_VAR 0 2
29976: PPUSH
29977: CALL 29437 0 2
29981: NOT
29982: IFFALSE 29986
// exit ;
29984: GO 30708
// pom := GetBase ( depot ) ;
29986: LD_ADDR_VAR 0 10
29990: PUSH
29991: LD_VAR 0 1
29995: PPUSH
29996: CALL_OW 274
30000: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30001: LD_ADDR_VAR 0 11
30005: PUSH
30006: LD_VAR 0 2
30010: PPUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL_OW 248
30020: PPUSH
30021: CALL_OW 450
30025: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30026: LD_VAR 0 10
30030: PPUSH
30031: LD_INT 1
30033: PPUSH
30034: CALL_OW 275
30038: PUSH
30039: LD_VAR 0 11
30043: PUSH
30044: LD_INT 1
30046: ARRAY
30047: GREATEREQUAL
30048: IFFALSE 30074
30050: PUSH
30051: LD_VAR 0 10
30055: PPUSH
30056: LD_INT 2
30058: PPUSH
30059: CALL_OW 275
30063: PUSH
30064: LD_VAR 0 11
30068: PUSH
30069: LD_INT 2
30071: ARRAY
30072: GREATEREQUAL
30073: AND
30074: IFFALSE 30100
30076: PUSH
30077: LD_VAR 0 10
30081: PPUSH
30082: LD_INT 3
30084: PPUSH
30085: CALL_OW 275
30089: PUSH
30090: LD_VAR 0 11
30094: PUSH
30095: LD_INT 3
30097: ARRAY
30098: GREATEREQUAL
30099: AND
30100: NOT
30101: IFFALSE 30105
// exit ;
30103: GO 30708
// if GetBType ( depot ) = b_depot then
30105: LD_VAR 0 1
30109: PPUSH
30110: CALL_OW 266
30114: PUSH
30115: LD_INT 0
30117: EQUAL
30118: IFFALSE 30130
// dist := 28 else
30120: LD_ADDR_VAR 0 14
30124: PUSH
30125: LD_INT 28
30127: ST_TO_ADDR
30128: GO 30138
// dist := 36 ;
30130: LD_ADDR_VAR 0 14
30134: PUSH
30135: LD_INT 36
30137: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_VAR 0 3
30147: PPUSH
30148: LD_VAR 0 4
30152: PPUSH
30153: CALL_OW 297
30157: PUSH
30158: LD_VAR 0 14
30162: GREATER
30163: IFFALSE 30167
// exit ;
30165: GO 30708
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30167: LD_ADDR_VAR 0 12
30171: PUSH
30172: LD_VAR 0 2
30176: PPUSH
30177: LD_VAR 0 3
30181: PPUSH
30182: LD_VAR 0 4
30186: PPUSH
30187: LD_VAR 0 5
30191: PPUSH
30192: LD_VAR 0 1
30196: PPUSH
30197: CALL_OW 248
30201: PPUSH
30202: LD_INT 0
30204: PPUSH
30205: CALL 30713 0 6
30209: ST_TO_ADDR
// if not hexes then
30210: LD_VAR 0 12
30214: NOT
30215: IFFALSE 30219
// exit ;
30217: GO 30708
// hex := GetHexInfo ( x , y ) ;
30219: LD_ADDR_VAR 0 15
30223: PUSH
30224: LD_VAR 0 3
30228: PPUSH
30229: LD_VAR 0 4
30233: PPUSH
30234: CALL_OW 546
30238: ST_TO_ADDR
// if hex [ 1 ] then
30239: LD_VAR 0 15
30243: PUSH
30244: LD_INT 1
30246: ARRAY
30247: IFFALSE 30251
// exit ;
30249: GO 30708
// height := hex [ 2 ] ;
30251: LD_ADDR_VAR 0 13
30255: PUSH
30256: LD_VAR 0 15
30260: PUSH
30261: LD_INT 2
30263: ARRAY
30264: ST_TO_ADDR
// for i = 1 to hexes do
30265: LD_ADDR_VAR 0 7
30269: PUSH
30270: DOUBLE
30271: LD_INT 1
30273: DEC
30274: ST_TO_ADDR
30275: LD_VAR 0 12
30279: PUSH
30280: FOR_TO
30281: IFFALSE 30625
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30283: LD_VAR 0 12
30287: PUSH
30288: LD_VAR 0 7
30292: ARRAY
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PPUSH
30298: LD_VAR 0 12
30302: PUSH
30303: LD_VAR 0 7
30307: ARRAY
30308: PUSH
30309: LD_INT 2
30311: ARRAY
30312: PPUSH
30313: CALL_OW 488
30317: NOT
30318: IFTRUE 30360
30320: PUSH
30321: LD_VAR 0 12
30325: PUSH
30326: LD_VAR 0 7
30330: ARRAY
30331: PUSH
30332: LD_INT 1
30334: ARRAY
30335: PPUSH
30336: LD_VAR 0 12
30340: PUSH
30341: LD_VAR 0 7
30345: ARRAY
30346: PUSH
30347: LD_INT 2
30349: ARRAY
30350: PPUSH
30351: CALL_OW 428
30355: PUSH
30356: LD_INT 0
30358: GREATER
30359: OR
30360: IFTRUE 30398
30362: PUSH
30363: LD_VAR 0 12
30367: PUSH
30368: LD_VAR 0 7
30372: ARRAY
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: PPUSH
30378: LD_VAR 0 12
30382: PUSH
30383: LD_VAR 0 7
30387: ARRAY
30388: PUSH
30389: LD_INT 2
30391: ARRAY
30392: PPUSH
30393: CALL_OW 351
30397: OR
30398: IFFALSE 30404
// exit ;
30400: POP
30401: POP
30402: GO 30708
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30404: LD_ADDR_VAR 0 8
30408: PUSH
30409: LD_VAR 0 12
30413: PUSH
30414: LD_VAR 0 7
30418: ARRAY
30419: PUSH
30420: LD_INT 1
30422: ARRAY
30423: PPUSH
30424: LD_VAR 0 12
30428: PUSH
30429: LD_VAR 0 7
30433: ARRAY
30434: PUSH
30435: LD_INT 2
30437: ARRAY
30438: PPUSH
30439: CALL_OW 546
30443: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30444: LD_VAR 0 8
30448: PUSH
30449: LD_INT 1
30451: ARRAY
30452: IFTRUE 30474
30454: PUSH
30455: LD_VAR 0 8
30459: PUSH
30460: LD_INT 2
30462: ARRAY
30463: PUSH
30464: LD_VAR 0 13
30468: PUSH
30469: LD_INT 2
30471: PLUS
30472: GREATER
30473: OR
30474: IFTRUE 30496
30476: PUSH
30477: LD_VAR 0 8
30481: PUSH
30482: LD_INT 2
30484: ARRAY
30485: PUSH
30486: LD_VAR 0 13
30490: PUSH
30491: LD_INT 2
30493: MINUS
30494: LESS
30495: OR
30496: IFTRUE 30564
30498: PUSH
30499: LD_VAR 0 8
30503: PUSH
30504: LD_INT 3
30506: ARRAY
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 8
30513: PUSH
30514: LD_INT 9
30516: PUSH
30517: LD_INT 10
30519: PUSH
30520: LD_INT 11
30522: PUSH
30523: LD_INT 12
30525: PUSH
30526: LD_INT 13
30528: PUSH
30529: LD_INT 16
30531: PUSH
30532: LD_INT 17
30534: PUSH
30535: LD_INT 18
30537: PUSH
30538: LD_INT 19
30540: PUSH
30541: LD_INT 20
30543: PUSH
30544: LD_INT 21
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: IN
30562: NOT
30563: OR
30564: IFTRUE 30577
30566: PUSH
30567: LD_VAR 0 8
30571: PUSH
30572: LD_INT 5
30574: ARRAY
30575: NOT
30576: OR
30577: IFTRUE 30617
30579: PUSH
30580: LD_VAR 0 8
30584: PUSH
30585: LD_INT 6
30587: ARRAY
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 7
30597: PUSH
30598: LD_INT 9
30600: PUSH
30601: LD_INT 10
30603: PUSH
30604: LD_INT 11
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: IN
30615: NOT
30616: OR
30617: IFFALSE 30623
// exit ;
30619: POP
30620: POP
30621: GO 30708
// end ;
30623: GO 30280
30625: POP
30626: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30627: LD_VAR 0 9
30631: PPUSH
30632: LD_VAR 0 3
30636: PPUSH
30637: LD_VAR 0 4
30641: PPUSH
30642: LD_INT 20
30644: PPUSH
30645: CALL 22527 0 4
30649: PUSH
30650: LD_INT 4
30652: ARRAY
30653: IFFALSE 30657
// exit ;
30655: GO 30708
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30657: LD_VAR 0 2
30661: PUSH
30662: LD_INT 29
30664: PUSH
30665: LD_INT 30
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: IN
30672: IFFALSE 30696
30674: PUSH
30675: LD_VAR 0 3
30679: PPUSH
30680: LD_VAR 0 4
30684: PPUSH
30685: LD_VAR 0 9
30689: PPUSH
30690: CALL_OW 440
30694: NOT
30695: AND
30696: IFFALSE 30700
// exit ;
30698: GO 30708
// result := true ;
30700: LD_ADDR_VAR 0 6
30704: PUSH
30705: LD_INT 1
30707: ST_TO_ADDR
// end ;
30708: LD_VAR 0 6
30712: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30713: LD_INT 0
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
30757: PPUSH
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
30768: PPUSH
30769: PPUSH
30770: PPUSH
30771: PPUSH
30772: PPUSH
// result = [ ] ;
30773: LD_ADDR_VAR 0 7
30777: PUSH
30778: EMPTY
30779: ST_TO_ADDR
// temp_list = [ ] ;
30780: LD_ADDR_VAR 0 9
30784: PUSH
30785: EMPTY
30786: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30787: LD_VAR 0 4
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: LD_INT 4
30806: PUSH
30807: LD_INT 5
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: IN
30818: NOT
30819: IFTRUE 30862
30821: PUSH
30822: LD_VAR 0 1
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: IN
30837: IFFALSE 30861
30839: PUSH
30840: LD_VAR 0 5
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: IN
30859: NOT
30860: AND
30861: OR
30862: IFFALSE 30866
// exit ;
30864: GO 49265
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30866: LD_VAR 0 1
30870: PUSH
30871: LD_INT 6
30873: PUSH
30874: LD_INT 7
30876: PUSH
30877: LD_INT 8
30879: PUSH
30880: LD_INT 13
30882: PUSH
30883: LD_INT 12
30885: PUSH
30886: LD_INT 15
30888: PUSH
30889: LD_INT 11
30891: PUSH
30892: LD_INT 14
30894: PUSH
30895: LD_INT 10
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: IN
30909: IFFALSE 30919
// btype = b_lab ;
30911: LD_ADDR_VAR 0 1
30915: PUSH
30916: LD_INT 6
30918: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30919: LD_VAR 0 6
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: IN
30938: NOT
30939: IFTRUE 31007
30941: PUSH
30942: LD_VAR 0 1
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 3
30958: PUSH
30959: LD_INT 6
30961: PUSH
30962: LD_INT 36
30964: PUSH
30965: LD_INT 4
30967: PUSH
30968: LD_INT 5
30970: PUSH
30971: LD_INT 31
30973: PUSH
30974: LD_INT 32
30976: PUSH
30977: LD_INT 33
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: IN
30993: NOT
30994: IFFALSE 31006
30996: PUSH
30997: LD_VAR 0 6
31001: PUSH
31002: LD_INT 1
31004: EQUAL
31005: AND
31006: OR
31007: IFTRUE 31039
31009: PUSH
31010: LD_VAR 0 1
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: IN
31025: NOT
31026: IFFALSE 31038
31028: PUSH
31029: LD_VAR 0 6
31033: PUSH
31034: LD_INT 2
31036: EQUAL
31037: AND
31038: OR
31039: IFFALSE 31049
// mode = 0 ;
31041: LD_ADDR_VAR 0 6
31045: PUSH
31046: LD_INT 0
31048: ST_TO_ADDR
// case mode of 0 :
31049: LD_VAR 0 6
31053: PUSH
31054: LD_INT 0
31056: DOUBLE
31057: EQUAL
31058: IFTRUE 31062
31060: GO 42515
31062: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31063: LD_ADDR_VAR 0 11
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31256: LD_ADDR_VAR 0 12
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: NEG
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 2
31402: NEG
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 3
31413: NEG
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 3
31424: NEG
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31452: LD_ADDR_VAR 0 13
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 2
31599: NEG
31600: PUSH
31601: LD_INT 3
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 3
31623: NEG
31624: PUSH
31625: LD_INT 3
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31651: LD_ADDR_VAR 0 14
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: LD_INT 2
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 3
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 3
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31847: LD_ADDR_VAR 0 15
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 3
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 3
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32040: LD_ADDR_VAR 0 16
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: LD_INT 0
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: LD_INT 2
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 2
32207: PUSH
32208: LD_INT 3
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32233: LD_ADDR_VAR 0 17
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 2
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 2
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32463: LD_ADDR_VAR 0 18
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 2
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 2
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 2
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32693: LD_ADDR_VAR 0 19
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 1
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32923: LD_ADDR_VAR 0 20
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: NEG
32993: PUSH
32994: LD_INT 1
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: LD_INT 2
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33153: LD_ADDR_VAR 0 21
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 2
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 2
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: NEG
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33383: LD_ADDR_VAR 0 22
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 1
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 2
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33613: LD_ADDR_VAR 0 23
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: LD_INT 2
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: LD_INT 3
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33893: LD_ADDR_VAR 0 24
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 3
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34169: LD_ADDR_VAR 0 25
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 2
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 2
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 2
34356: NEG
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: NEG
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 3
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34443: LD_ADDR_VAR 0 26
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: LD_INT 2
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 2
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34719: LD_ADDR_VAR 0 27
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: LD_INT 2
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: NEG
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 3
34964: NEG
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34999: LD_ADDR_VAR 0 28
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 2
35198: NEG
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: LD_INT 3
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: LD_INT 3
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 3
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35281: LD_ADDR_VAR 0 29
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 2
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 2
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 2
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 3
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 3
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: LD_INT 3
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 3
35525: NEG
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35560: LD_ADDR_VAR 0 30
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 2
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 2
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 2
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: LD_INT 3
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: LD_INT 2
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 3
35803: NEG
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35838: LD_ADDR_VAR 0 31
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 1
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: NEG
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: LD_INT 2
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: LD_INT 3
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 3
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 3
36081: NEG
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36116: LD_ADDR_VAR 0 32
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 2
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: LD_INT 2
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 3
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: LD_INT 2
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: NEG
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 3
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36394: LD_ADDR_VAR 0 33
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 1
36538: NEG
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: LD_INT 3
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 3
36607: PUSH
36608: LD_INT 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 3
36638: NEG
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36673: LD_ADDR_VAR 0 34
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 2
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: LD_INT 2
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 3
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 3
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 3
36918: NEG
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36953: LD_ADDR_VAR 0 35
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37065: LD_ADDR_VAR 0 36
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37177: LD_ADDR_VAR 0 37
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37289: LD_ADDR_VAR 0 38
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37401: LD_ADDR_VAR 0 39
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: NEG
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37513: LD_ADDR_VAR 0 40
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37625: LD_ADDR_VAR 0 41
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 3
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 3
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 3
37934: NEG
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37975: LD_ADDR_VAR 0 42
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 2
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: LD_INT 2
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 2
38165: NEG
38166: PUSH
38167: LD_INT 3
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: LD_INT 3
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 3
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: LD_INT 3
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: LD_INT 3
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 3
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: LD_INT 3
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38325: LD_ADDR_VAR 0 43
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 3
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 3
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38673: LD_ADDR_VAR 0 44
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 3
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 3
38916: PUSH
38917: LD_INT 3
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 3
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 3
38947: NEG
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 3
38970: NEG
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39023: LD_ADDR_VAR 0 45
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: LD_INT 2
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 2
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: LD_INT 2
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: LD_INT 3
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: NEG
39226: PUSH
39227: LD_INT 3
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 3
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 3
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: LD_INT 3
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 3
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 3
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 3
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: LD_INT 3
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39373: LD_ADDR_VAR 0 46
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 2
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 3
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 3
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 3
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 3
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: NEG
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39721: LD_ADDR_VAR 0 47
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 2
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39872: LD_ADDR_VAR 0 48
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40019: LD_ADDR_VAR 0 49
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40163: LD_ADDR_VAR 0 50
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40307: LD_ADDR_VAR 0 51
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: NEG
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40454: LD_ADDR_VAR 0 52
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40605: LD_ADDR_VAR 0 53
40609: PUSH
40610: LD_INT 0
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 2
40804: NEG
40805: PUSH
40806: LD_INT 2
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40835: LD_ADDR_VAR 0 54
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41065: LD_ADDR_VAR 0 55
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41295: LD_ADDR_VAR 0 56
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41525: LD_ADDR_VAR 0 57
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: LD_INT 2
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41755: LD_ADDR_VAR 0 58
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41985: LD_ADDR_VAR 0 59
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42073: LD_ADDR_VAR 0 60
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42161: LD_ADDR_VAR 0 61
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42249: LD_ADDR_VAR 0 62
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42337: LD_ADDR_VAR 0 63
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42425: LD_ADDR_VAR 0 64
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
// end ; 1 :
42513: GO 48410
42515: LD_INT 1
42517: DOUBLE
42518: EQUAL
42519: IFTRUE 42523
42521: GO 45146
42523: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42524: LD_ADDR_VAR 0 11
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 3
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: LD_INT 3
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42568: LD_ADDR_VAR 0 12
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: LIST
42608: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42609: LD_ADDR_VAR 0 13
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: LD_INT 3
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42649: LD_ADDR_VAR 0 14
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42690: LD_ADDR_VAR 0 15
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42734: LD_ADDR_VAR 0 16
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: LD_INT 3
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42780: LD_ADDR_VAR 0 17
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42824: LD_ADDR_VAR 0 18
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42865: LD_ADDR_VAR 0 19
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42905: LD_ADDR_VAR 0 20
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42946: LD_ADDR_VAR 0 21
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 3
42964: NEG
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: NEG
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42990: LD_ADDR_VAR 0 22
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: LD_INT 3
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 3
43009: NEG
43010: PUSH
43011: LD_INT 2
43013: NEG
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: NEG
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43036: LD_ADDR_VAR 0 23
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 4
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43080: LD_ADDR_VAR 0 24
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 4
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43121: LD_ADDR_VAR 0 25
43125: PUSH
43126: LD_INT 3
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 4
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: LD_INT 4
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43161: LD_ADDR_VAR 0 26
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 3
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 4
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43202: LD_ADDR_VAR 0 27
43206: PUSH
43207: LD_INT 3
43209: NEG
43210: PUSH
43211: LD_INT 0
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 4
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43246: LD_ADDR_VAR 0 28
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: LD_INT 3
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: NEG
43266: PUSH
43267: LD_INT 4
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 4
43277: NEG
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43292: LD_ADDR_VAR 0 29
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 3
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: LD_INT 4
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 4
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 5
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 5
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 4
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: LD_INT 6
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 6
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: LD_INT 5
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43447: LD_ADDR_VAR 0 30
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 3
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 4
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 5
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 5
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 5
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 6
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 6
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43590: LD_ADDR_VAR 0 31
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 3
43607: PUSH
43608: LD_INT 3
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 2
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 4
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 4
43637: PUSH
43638: LD_INT 4
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 3
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 5
43657: PUSH
43658: LD_INT 4
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 5
43667: PUSH
43668: LD_INT 5
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 4
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 6
43687: PUSH
43688: LD_INT 5
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 6
43697: PUSH
43698: LD_INT 6
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 5
43707: PUSH
43708: LD_INT 6
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43729: LD_ADDR_VAR 0 32
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: LD_INT 3
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 4
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 4
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: LD_INT 5
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 4
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 6
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 6
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 5
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43872: LD_ADDR_VAR 0 33
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 3
43901: NEG
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 4
43924: NEG
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 4
43935: NEG
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 4
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 5
43958: NEG
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 5
43969: NEG
43970: PUSH
43971: LD_INT 1
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 5
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 6
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 6
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44027: LD_ADDR_VAR 0 34
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 3
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 3
44046: NEG
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 3
44058: NEG
44059: PUSH
44060: LD_INT 3
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: LD_INT 4
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 4
44082: NEG
44083: PUSH
44084: LD_INT 3
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 4
44094: NEG
44095: PUSH
44096: LD_INT 4
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 4
44106: NEG
44107: PUSH
44108: LD_INT 5
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 5
44118: NEG
44119: PUSH
44120: LD_INT 4
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 5
44130: NEG
44131: PUSH
44132: LD_INT 5
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 5
44142: NEG
44143: PUSH
44144: LD_INT 6
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 6
44154: NEG
44155: PUSH
44156: LD_INT 5
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 6
44166: NEG
44167: PUSH
44168: LD_INT 6
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44190: LD_ADDR_VAR 0 41
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44234: LD_ADDR_VAR 0 42
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: LIST
44274: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44275: LD_ADDR_VAR 0 43
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44315: LD_ADDR_VAR 0 44
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44356: LD_ADDR_VAR 0 45
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: NEG
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44400: LD_ADDR_VAR 0 46
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: LD_INT 3
44423: NEG
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 3
44431: NEG
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44446: LD_ADDR_VAR 0 47
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44479: LD_ADDR_VAR 0 48
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 2
44489: NEG
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44510: LD_ADDR_VAR 0 49
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 3
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44539: LD_ADDR_VAR 0 50
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44568: LD_ADDR_VAR 0 51
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: NEG
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44599: LD_ADDR_VAR 0 52
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44632: LD_ADDR_VAR 0 53
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 3
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44676: LD_ADDR_VAR 0 54
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44717: LD_ADDR_VAR 0 55
44721: PUSH
44722: LD_INT 3
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: LD_INT 3
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: LD_INT 3
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44757: LD_ADDR_VAR 0 56
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: LD_INT 3
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44798: LD_ADDR_VAR 0 57
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 3
44816: NEG
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: NEG
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44842: LD_ADDR_VAR 0 58
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 3
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 3
44861: NEG
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 3
44873: NEG
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44888: LD_ADDR_VAR 0 59
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 2
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44932: LD_ADDR_VAR 0 60
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44973: LD_ADDR_VAR 0 61
44977: PUSH
44978: LD_INT 2
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45013: LD_ADDR_VAR 0 62
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 0
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45054: LD_ADDR_VAR 0 63
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45098: LD_ADDR_VAR 0 64
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// end ; 2 :
45144: GO 48410
45146: LD_INT 2
45148: DOUBLE
45149: EQUAL
45150: IFTRUE 45154
45152: GO 48409
45154: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45155: LD_ADDR_VAR 0 29
45159: PUSH
45160: LD_INT 4
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 4
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 5
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 5
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 4
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 3
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 5
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 4
45275: PUSH
45276: LD_INT 3
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 4
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: LD_INT 4
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 4
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 4
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 4
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 4
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 5
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 5
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 4
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: LD_INT 5
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: NEG
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 3
45483: NEG
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 4
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 4
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 4
45517: NEG
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 4
45540: NEG
45541: PUSH
45542: LD_INT 4
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 4
45552: NEG
45553: PUSH
45554: LD_INT 5
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: LD_INT 4
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: NEG
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 4
45588: NEG
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 5
45600: NEG
45601: PUSH
45602: LD_INT 4
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 5
45612: NEG
45613: PUSH
45614: LD_INT 5
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 3
45624: NEG
45625: PUSH
45626: LD_INT 5
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 5
45636: NEG
45637: PUSH
45638: LD_INT 3
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45693: LD_ADDR_VAR 0 30
45697: PUSH
45698: LD_INT 4
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 4
45710: PUSH
45711: LD_INT 3
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 5
45720: PUSH
45721: LD_INT 4
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 5
45730: PUSH
45731: LD_INT 5
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 4
45740: PUSH
45741: LD_INT 5
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: PUSH
45751: LD_INT 4
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 3
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 5
45770: PUSH
45771: LD_INT 3
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: LD_INT 5
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 4
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 4
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 4
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: NEG
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 4
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 5
45939: NEG
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 5
45950: NEG
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 5
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: NEG
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 4
46045: NEG
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 4
46057: NEG
46058: PUSH
46059: LD_INT 4
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 4
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 4
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 0
46093: PUSH
46094: LD_INT 4
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 5
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 4
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: LD_INT 3
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 4
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 5
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 5
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46240: LD_ADDR_VAR 0 31
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 4
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: LD_INT 4
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 5
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 4
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 5
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: NEG
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: NEG
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 3
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 4
46396: NEG
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 4
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 4
46442: NEG
46443: PUSH
46444: LD_INT 4
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 4
46454: NEG
46455: PUSH
46456: LD_INT 5
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: LD_INT 4
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 3
46478: NEG
46479: PUSH
46480: LD_INT 3
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 4
46490: NEG
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 5
46502: NEG
46503: PUSH
46504: LD_INT 4
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 5
46514: NEG
46515: PUSH
46516: LD_INT 5
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: LD_INT 5
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 5
46538: NEG
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 4
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 3
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: LD_INT 4
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 4
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 4
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 4
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 5
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 5
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 4
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 3
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 5
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46790: LD_ADDR_VAR 0 32
46794: PUSH
46795: LD_INT 4
46797: NEG
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 4
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 3
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 4
46842: NEG
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 5
46853: NEG
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 5
46864: NEG
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 5
46876: NEG
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 3
46888: NEG
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: LD_INT 3
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 3
46911: NEG
46912: PUSH
46913: LD_INT 4
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: NEG
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 4
46959: NEG
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 4
46971: NEG
46972: PUSH
46973: LD_INT 4
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 4
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: NEG
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 4
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 5
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 4
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 4
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 5
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: LD_INT 3
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 5
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 3
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 4
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 4
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 4
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 4
47202: PUSH
47203: LD_INT 4
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 4
47212: PUSH
47213: LD_INT 3
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 5
47222: PUSH
47223: LD_INT 4
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 5
47232: PUSH
47233: LD_INT 5
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 4
47242: PUSH
47243: LD_INT 5
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: LD_INT 4
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: LD_INT 3
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 5
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: LD_INT 5
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47337: LD_ADDR_VAR 0 33
47341: PUSH
47342: LD_INT 4
47344: NEG
47345: PUSH
47346: LD_INT 4
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: NEG
47357: PUSH
47358: LD_INT 5
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 3
47368: NEG
47369: PUSH
47370: LD_INT 4
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 4
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 5
47404: NEG
47405: PUSH
47406: LD_INT 4
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 5
47416: NEG
47417: PUSH
47418: LD_INT 5
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 3
47428: NEG
47429: PUSH
47430: LD_INT 5
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 5
47440: NEG
47441: PUSH
47442: LD_INT 3
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 4
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 4
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: LD_INT 4
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 4
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 5
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 5
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 4
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: LD_INT 2
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 5
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 4
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 4
47677: PUSH
47678: LD_INT 4
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 3
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 2
47697: PUSH
47698: LD_INT 3
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 4
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 4
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 5
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 4
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 5
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 3
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47875: LD_ADDR_VAR 0 34
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 4
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 5
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 4
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 3
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 5
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 5
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 4
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 4
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 4
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 4
48077: PUSH
48078: LD_INT 4
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 4
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: LD_INT 4
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 5
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 4
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 5
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: PUSH
48158: LD_INT 5
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: LD_INT 4
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 4
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 4
48260: NEG
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 4
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 4
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 5
48316: NEG
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 5
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 5
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 3
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// end ; end ;
48407: GO 48410
48409: POP
// case btype of b_depot , b_warehouse :
48410: LD_VAR 0 1
48414: PUSH
48415: LD_INT 0
48417: DOUBLE
48418: EQUAL
48419: IFTRUE 48429
48421: LD_INT 1
48423: DOUBLE
48424: EQUAL
48425: IFTRUE 48429
48427: GO 48630
48429: POP
// case nation of nation_american :
48430: LD_VAR 0 5
48434: PUSH
48435: LD_INT 1
48437: DOUBLE
48438: EQUAL
48439: IFTRUE 48443
48441: GO 48499
48443: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48444: LD_ADDR_VAR 0 9
48448: PUSH
48449: LD_VAR 0 11
48453: PUSH
48454: LD_VAR 0 12
48458: PUSH
48459: LD_VAR 0 13
48463: PUSH
48464: LD_VAR 0 14
48468: PUSH
48469: LD_VAR 0 15
48473: PUSH
48474: LD_VAR 0 16
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: PUSH
48487: LD_VAR 0 4
48491: PUSH
48492: LD_INT 1
48494: PLUS
48495: ARRAY
48496: ST_TO_ADDR
48497: GO 48628
48499: LD_INT 2
48501: DOUBLE
48502: EQUAL
48503: IFTRUE 48507
48505: GO 48563
48507: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48508: LD_ADDR_VAR 0 9
48512: PUSH
48513: LD_VAR 0 17
48517: PUSH
48518: LD_VAR 0 18
48522: PUSH
48523: LD_VAR 0 19
48527: PUSH
48528: LD_VAR 0 20
48532: PUSH
48533: LD_VAR 0 21
48537: PUSH
48538: LD_VAR 0 22
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: LD_VAR 0 4
48555: PUSH
48556: LD_INT 1
48558: PLUS
48559: ARRAY
48560: ST_TO_ADDR
48561: GO 48628
48563: LD_INT 3
48565: DOUBLE
48566: EQUAL
48567: IFTRUE 48571
48569: GO 48627
48571: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48572: LD_ADDR_VAR 0 9
48576: PUSH
48577: LD_VAR 0 23
48581: PUSH
48582: LD_VAR 0 24
48586: PUSH
48587: LD_VAR 0 25
48591: PUSH
48592: LD_VAR 0 26
48596: PUSH
48597: LD_VAR 0 27
48601: PUSH
48602: LD_VAR 0 28
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: PUSH
48615: LD_VAR 0 4
48619: PUSH
48620: LD_INT 1
48622: PLUS
48623: ARRAY
48624: ST_TO_ADDR
48625: GO 48628
48627: POP
48628: GO 49183
48630: LD_INT 2
48632: DOUBLE
48633: EQUAL
48634: IFTRUE 48644
48636: LD_INT 3
48638: DOUBLE
48639: EQUAL
48640: IFTRUE 48644
48642: GO 48700
48644: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48645: LD_ADDR_VAR 0 9
48649: PUSH
48650: LD_VAR 0 29
48654: PUSH
48655: LD_VAR 0 30
48659: PUSH
48660: LD_VAR 0 31
48664: PUSH
48665: LD_VAR 0 32
48669: PUSH
48670: LD_VAR 0 33
48674: PUSH
48675: LD_VAR 0 34
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: PUSH
48688: LD_VAR 0 4
48692: PUSH
48693: LD_INT 1
48695: PLUS
48696: ARRAY
48697: ST_TO_ADDR
48698: GO 49183
48700: LD_INT 16
48702: DOUBLE
48703: EQUAL
48704: IFTRUE 48762
48706: LD_INT 17
48708: DOUBLE
48709: EQUAL
48710: IFTRUE 48762
48712: LD_INT 18
48714: DOUBLE
48715: EQUAL
48716: IFTRUE 48762
48718: LD_INT 19
48720: DOUBLE
48721: EQUAL
48722: IFTRUE 48762
48724: LD_INT 22
48726: DOUBLE
48727: EQUAL
48728: IFTRUE 48762
48730: LD_INT 20
48732: DOUBLE
48733: EQUAL
48734: IFTRUE 48762
48736: LD_INT 21
48738: DOUBLE
48739: EQUAL
48740: IFTRUE 48762
48742: LD_INT 23
48744: DOUBLE
48745: EQUAL
48746: IFTRUE 48762
48748: LD_INT 24
48750: DOUBLE
48751: EQUAL
48752: IFTRUE 48762
48754: LD_INT 25
48756: DOUBLE
48757: EQUAL
48758: IFTRUE 48762
48760: GO 48818
48762: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48763: LD_ADDR_VAR 0 9
48767: PUSH
48768: LD_VAR 0 35
48772: PUSH
48773: LD_VAR 0 36
48777: PUSH
48778: LD_VAR 0 37
48782: PUSH
48783: LD_VAR 0 38
48787: PUSH
48788: LD_VAR 0 39
48792: PUSH
48793: LD_VAR 0 40
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: PUSH
48806: LD_VAR 0 4
48810: PUSH
48811: LD_INT 1
48813: PLUS
48814: ARRAY
48815: ST_TO_ADDR
48816: GO 49183
48818: LD_INT 6
48820: DOUBLE
48821: EQUAL
48822: IFTRUE 48874
48824: LD_INT 7
48826: DOUBLE
48827: EQUAL
48828: IFTRUE 48874
48830: LD_INT 8
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48874
48836: LD_INT 13
48838: DOUBLE
48839: EQUAL
48840: IFTRUE 48874
48842: LD_INT 12
48844: DOUBLE
48845: EQUAL
48846: IFTRUE 48874
48848: LD_INT 15
48850: DOUBLE
48851: EQUAL
48852: IFTRUE 48874
48854: LD_INT 11
48856: DOUBLE
48857: EQUAL
48858: IFTRUE 48874
48860: LD_INT 14
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48874
48866: LD_INT 10
48868: DOUBLE
48869: EQUAL
48870: IFTRUE 48874
48872: GO 48930
48874: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48875: LD_ADDR_VAR 0 9
48879: PUSH
48880: LD_VAR 0 41
48884: PUSH
48885: LD_VAR 0 42
48889: PUSH
48890: LD_VAR 0 43
48894: PUSH
48895: LD_VAR 0 44
48899: PUSH
48900: LD_VAR 0 45
48904: PUSH
48905: LD_VAR 0 46
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: PUSH
48918: LD_VAR 0 4
48922: PUSH
48923: LD_INT 1
48925: PLUS
48926: ARRAY
48927: ST_TO_ADDR
48928: GO 49183
48930: LD_INT 36
48932: DOUBLE
48933: EQUAL
48934: IFTRUE 48938
48936: GO 48994
48938: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48939: LD_ADDR_VAR 0 9
48943: PUSH
48944: LD_VAR 0 47
48948: PUSH
48949: LD_VAR 0 48
48953: PUSH
48954: LD_VAR 0 49
48958: PUSH
48959: LD_VAR 0 50
48963: PUSH
48964: LD_VAR 0 51
48968: PUSH
48969: LD_VAR 0 52
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: PUSH
48982: LD_VAR 0 4
48986: PUSH
48987: LD_INT 1
48989: PLUS
48990: ARRAY
48991: ST_TO_ADDR
48992: GO 49183
48994: LD_INT 4
48996: DOUBLE
48997: EQUAL
48998: IFTRUE 49020
49000: LD_INT 5
49002: DOUBLE
49003: EQUAL
49004: IFTRUE 49020
49006: LD_INT 34
49008: DOUBLE
49009: EQUAL
49010: IFTRUE 49020
49012: LD_INT 37
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49020
49018: GO 49076
49020: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49021: LD_ADDR_VAR 0 9
49025: PUSH
49026: LD_VAR 0 53
49030: PUSH
49031: LD_VAR 0 54
49035: PUSH
49036: LD_VAR 0 55
49040: PUSH
49041: LD_VAR 0 56
49045: PUSH
49046: LD_VAR 0 57
49050: PUSH
49051: LD_VAR 0 58
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: PUSH
49064: LD_VAR 0 4
49068: PUSH
49069: LD_INT 1
49071: PLUS
49072: ARRAY
49073: ST_TO_ADDR
49074: GO 49183
49076: LD_INT 31
49078: DOUBLE
49079: EQUAL
49080: IFTRUE 49126
49082: LD_INT 32
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49126
49088: LD_INT 33
49090: DOUBLE
49091: EQUAL
49092: IFTRUE 49126
49094: LD_INT 27
49096: DOUBLE
49097: EQUAL
49098: IFTRUE 49126
49100: LD_INT 26
49102: DOUBLE
49103: EQUAL
49104: IFTRUE 49126
49106: LD_INT 28
49108: DOUBLE
49109: EQUAL
49110: IFTRUE 49126
49112: LD_INT 29
49114: DOUBLE
49115: EQUAL
49116: IFTRUE 49126
49118: LD_INT 30
49120: DOUBLE
49121: EQUAL
49122: IFTRUE 49126
49124: GO 49182
49126: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49127: LD_ADDR_VAR 0 9
49131: PUSH
49132: LD_VAR 0 59
49136: PUSH
49137: LD_VAR 0 60
49141: PUSH
49142: LD_VAR 0 61
49146: PUSH
49147: LD_VAR 0 62
49151: PUSH
49152: LD_VAR 0 63
49156: PUSH
49157: LD_VAR 0 64
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: PUSH
49170: LD_VAR 0 4
49174: PUSH
49175: LD_INT 1
49177: PLUS
49178: ARRAY
49179: ST_TO_ADDR
49180: GO 49183
49182: POP
// temp_list2 = [ ] ;
49183: LD_ADDR_VAR 0 10
49187: PUSH
49188: EMPTY
49189: ST_TO_ADDR
// for i in temp_list do
49190: LD_ADDR_VAR 0 8
49194: PUSH
49195: LD_VAR 0 9
49199: PUSH
49200: FOR_IN
49201: IFFALSE 49253
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49203: LD_ADDR_VAR 0 10
49207: PUSH
49208: LD_VAR 0 10
49212: PUSH
49213: LD_VAR 0 8
49217: PUSH
49218: LD_INT 1
49220: ARRAY
49221: PUSH
49222: LD_VAR 0 2
49226: PLUS
49227: PUSH
49228: LD_VAR 0 8
49232: PUSH
49233: LD_INT 2
49235: ARRAY
49236: PUSH
49237: LD_VAR 0 3
49241: PLUS
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: ADD
49250: ST_TO_ADDR
49251: GO 49200
49253: POP
49254: POP
// result = temp_list2 ;
49255: LD_ADDR_VAR 0 7
49259: PUSH
49260: LD_VAR 0 10
49264: ST_TO_ADDR
// end ;
49265: LD_VAR 0 7
49269: RET
// export function EnemyInRange ( unit , dist ) ; begin
49270: LD_INT 0
49272: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49273: LD_ADDR_VAR 0 3
49277: PUSH
49278: LD_VAR 0 1
49282: PPUSH
49283: CALL_OW 255
49287: PPUSH
49288: LD_VAR 0 1
49292: PPUSH
49293: CALL_OW 250
49297: PPUSH
49298: LD_VAR 0 1
49302: PPUSH
49303: CALL_OW 251
49307: PPUSH
49308: LD_VAR 0 2
49312: PPUSH
49313: CALL 22527 0 4
49317: PUSH
49318: LD_INT 4
49320: ARRAY
49321: ST_TO_ADDR
// end ;
49322: LD_VAR 0 3
49326: RET
// export function PlayerSeeMe ( unit ) ; begin
49327: LD_INT 0
49329: PPUSH
// result := See ( your_side , unit ) ;
49330: LD_ADDR_VAR 0 2
49334: PUSH
49335: LD_OWVAR 2
49339: PPUSH
49340: LD_VAR 0 1
49344: PPUSH
49345: CALL_OW 292
49349: ST_TO_ADDR
// end ;
49350: LD_VAR 0 2
49354: RET
// export function ReverseDir ( unit ) ; begin
49355: LD_INT 0
49357: PPUSH
// if not unit then
49358: LD_VAR 0 1
49362: NOT
49363: IFFALSE 49367
// exit ;
49365: GO 49390
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49367: LD_ADDR_VAR 0 2
49371: PUSH
49372: LD_VAR 0 1
49376: PPUSH
49377: CALL_OW 254
49381: PUSH
49382: LD_INT 3
49384: PLUS
49385: PUSH
49386: LD_INT 6
49388: MOD
49389: ST_TO_ADDR
// end ;
49390: LD_VAR 0 2
49394: RET
// export function ReverseArray ( array ) ; var i ; begin
49395: LD_INT 0
49397: PPUSH
49398: PPUSH
// if not array then
49399: LD_VAR 0 1
49403: NOT
49404: IFFALSE 49408
// exit ;
49406: GO 49463
// result := [ ] ;
49408: LD_ADDR_VAR 0 2
49412: PUSH
49413: EMPTY
49414: ST_TO_ADDR
// for i := array downto 1 do
49415: LD_ADDR_VAR 0 3
49419: PUSH
49420: DOUBLE
49421: LD_VAR 0 1
49425: INC
49426: ST_TO_ADDR
49427: LD_INT 1
49429: PUSH
49430: FOR_DOWNTO
49431: IFFALSE 49461
// result := Join ( result , array [ i ] ) ;
49433: LD_ADDR_VAR 0 2
49437: PUSH
49438: LD_VAR 0 2
49442: PPUSH
49443: LD_VAR 0 1
49447: PUSH
49448: LD_VAR 0 3
49452: ARRAY
49453: PPUSH
49454: CALL 54305 0 2
49458: ST_TO_ADDR
49459: GO 49430
49461: POP
49462: POP
// end ;
49463: LD_VAR 0 2
49467: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49468: LD_INT 0
49470: PPUSH
49471: PPUSH
49472: PPUSH
49473: PPUSH
49474: PPUSH
49475: PPUSH
// if not unit or not hexes then
49476: LD_VAR 0 1
49480: NOT
49481: IFTRUE 49490
49483: PUSH
49484: LD_VAR 0 2
49488: NOT
49489: OR
49490: IFFALSE 49494
// exit ;
49492: GO 49617
// dist := 9999 ;
49494: LD_ADDR_VAR 0 5
49498: PUSH
49499: LD_INT 9999
49501: ST_TO_ADDR
// for i = 1 to hexes do
49502: LD_ADDR_VAR 0 4
49506: PUSH
49507: DOUBLE
49508: LD_INT 1
49510: DEC
49511: ST_TO_ADDR
49512: LD_VAR 0 2
49516: PUSH
49517: FOR_TO
49518: IFFALSE 49605
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49520: LD_ADDR_VAR 0 6
49524: PUSH
49525: LD_VAR 0 1
49529: PPUSH
49530: LD_VAR 0 2
49534: PUSH
49535: LD_VAR 0 4
49539: ARRAY
49540: PUSH
49541: LD_INT 1
49543: ARRAY
49544: PPUSH
49545: LD_VAR 0 2
49549: PUSH
49550: LD_VAR 0 4
49554: ARRAY
49555: PUSH
49556: LD_INT 2
49558: ARRAY
49559: PPUSH
49560: CALL_OW 297
49564: ST_TO_ADDR
// if tdist < dist then
49565: LD_VAR 0 6
49569: PUSH
49570: LD_VAR 0 5
49574: LESS
49575: IFFALSE 49603
// begin hex := hexes [ i ] ;
49577: LD_ADDR_VAR 0 8
49581: PUSH
49582: LD_VAR 0 2
49586: PUSH
49587: LD_VAR 0 4
49591: ARRAY
49592: ST_TO_ADDR
// dist := tdist ;
49593: LD_ADDR_VAR 0 5
49597: PUSH
49598: LD_VAR 0 6
49602: ST_TO_ADDR
// end ; end ;
49603: GO 49517
49605: POP
49606: POP
// result := hex ;
49607: LD_ADDR_VAR 0 3
49611: PUSH
49612: LD_VAR 0 8
49616: ST_TO_ADDR
// end ;
49617: LD_VAR 0 3
49621: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49622: LD_INT 0
49624: PPUSH
49625: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49626: LD_VAR 0 1
49630: NOT
49631: IFTRUE 49670
49633: PUSH
49634: LD_VAR 0 1
49638: PUSH
49639: LD_INT 21
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 23
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 69
49667: IN
49668: NOT
49669: OR
49670: IFFALSE 49674
// exit ;
49672: GO 49721
// for i = 1 to 3 do
49674: LD_ADDR_VAR 0 3
49678: PUSH
49679: DOUBLE
49680: LD_INT 1
49682: DEC
49683: ST_TO_ADDR
49684: LD_INT 3
49686: PUSH
49687: FOR_TO
49688: IFFALSE 49719
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 250
49699: PPUSH
49700: LD_VAR 0 1
49704: PPUSH
49705: CALL_OW 251
49709: PPUSH
49710: LD_INT 1
49712: PPUSH
49713: CALL_OW 453
49717: GO 49687
49719: POP
49720: POP
// end ;
49721: LD_VAR 0 2
49725: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49726: LD_INT 0
49728: PPUSH
49729: PPUSH
49730: PPUSH
49731: PPUSH
49732: PPUSH
49733: PPUSH
// if not unit or not enemy_unit then
49734: LD_VAR 0 1
49738: NOT
49739: IFTRUE 49748
49741: PUSH
49742: LD_VAR 0 2
49746: NOT
49747: OR
49748: IFFALSE 49752
// exit ;
49750: GO 50223
// if GetLives ( i ) < 250 then
49752: LD_VAR 0 4
49756: PPUSH
49757: CALL_OW 256
49761: PUSH
49762: LD_INT 250
49764: LESS
49765: IFFALSE 49778
// begin ComAutodestruct ( i ) ;
49767: LD_VAR 0 4
49771: PPUSH
49772: CALL 49622 0 1
// exit ;
49776: GO 50223
// end ; x := GetX ( enemy_unit ) ;
49778: LD_ADDR_VAR 0 7
49782: PUSH
49783: LD_VAR 0 2
49787: PPUSH
49788: CALL_OW 250
49792: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49793: LD_ADDR_VAR 0 8
49797: PUSH
49798: LD_VAR 0 2
49802: PPUSH
49803: CALL_OW 251
49807: ST_TO_ADDR
// if not x or not y then
49808: LD_VAR 0 7
49812: NOT
49813: IFTRUE 49822
49815: PUSH
49816: LD_VAR 0 8
49820: NOT
49821: OR
49822: IFFALSE 49826
// exit ;
49824: GO 50223
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49826: LD_ADDR_VAR 0 6
49830: PUSH
49831: LD_VAR 0 7
49835: PPUSH
49836: LD_INT 0
49838: PPUSH
49839: LD_INT 4
49841: PPUSH
49842: CALL_OW 272
49846: PUSH
49847: LD_VAR 0 8
49851: PPUSH
49852: LD_INT 0
49854: PPUSH
49855: LD_INT 4
49857: PPUSH
49858: CALL_OW 273
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_VAR 0 7
49871: PPUSH
49872: LD_INT 1
49874: PPUSH
49875: LD_INT 4
49877: PPUSH
49878: CALL_OW 272
49882: PUSH
49883: LD_VAR 0 8
49887: PPUSH
49888: LD_INT 1
49890: PPUSH
49891: LD_INT 4
49893: PPUSH
49894: CALL_OW 273
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_VAR 0 7
49907: PPUSH
49908: LD_INT 2
49910: PPUSH
49911: LD_INT 4
49913: PPUSH
49914: CALL_OW 272
49918: PUSH
49919: LD_VAR 0 8
49923: PPUSH
49924: LD_INT 2
49926: PPUSH
49927: LD_INT 4
49929: PPUSH
49930: CALL_OW 273
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_VAR 0 7
49943: PPUSH
49944: LD_INT 3
49946: PPUSH
49947: LD_INT 4
49949: PPUSH
49950: CALL_OW 272
49954: PUSH
49955: LD_VAR 0 8
49959: PPUSH
49960: LD_INT 3
49962: PPUSH
49963: LD_INT 4
49965: PPUSH
49966: CALL_OW 273
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_VAR 0 7
49979: PPUSH
49980: LD_INT 4
49982: PPUSH
49983: LD_INT 4
49985: PPUSH
49986: CALL_OW 272
49990: PUSH
49991: LD_VAR 0 8
49995: PPUSH
49996: LD_INT 4
49998: PPUSH
49999: LD_INT 4
50001: PPUSH
50002: CALL_OW 273
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_VAR 0 7
50015: PPUSH
50016: LD_INT 5
50018: PPUSH
50019: LD_INT 4
50021: PPUSH
50022: CALL_OW 272
50026: PUSH
50027: LD_VAR 0 8
50031: PPUSH
50032: LD_INT 5
50034: PPUSH
50035: LD_INT 4
50037: PPUSH
50038: CALL_OW 273
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// for i = tmp downto 1 do
50055: LD_ADDR_VAR 0 4
50059: PUSH
50060: DOUBLE
50061: LD_VAR 0 6
50065: INC
50066: ST_TO_ADDR
50067: LD_INT 1
50069: PUSH
50070: FOR_DOWNTO
50071: IFFALSE 50174
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50073: LD_VAR 0 6
50077: PUSH
50078: LD_VAR 0 4
50082: ARRAY
50083: PUSH
50084: LD_INT 1
50086: ARRAY
50087: PPUSH
50088: LD_VAR 0 6
50092: PUSH
50093: LD_VAR 0 4
50097: ARRAY
50098: PUSH
50099: LD_INT 2
50101: ARRAY
50102: PPUSH
50103: CALL_OW 488
50107: NOT
50108: IFTRUE 50150
50110: PUSH
50111: LD_VAR 0 6
50115: PUSH
50116: LD_VAR 0 4
50120: ARRAY
50121: PUSH
50122: LD_INT 1
50124: ARRAY
50125: PPUSH
50126: LD_VAR 0 6
50130: PUSH
50131: LD_VAR 0 4
50135: ARRAY
50136: PUSH
50137: LD_INT 2
50139: ARRAY
50140: PPUSH
50141: CALL_OW 428
50145: PUSH
50146: LD_INT 0
50148: NONEQUAL
50149: OR
50150: IFFALSE 50172
// tmp := Delete ( tmp , i ) ;
50152: LD_ADDR_VAR 0 6
50156: PUSH
50157: LD_VAR 0 6
50161: PPUSH
50162: LD_VAR 0 4
50166: PPUSH
50167: CALL_OW 3
50171: ST_TO_ADDR
50172: GO 50070
50174: POP
50175: POP
// j := GetClosestHex ( unit , tmp ) ;
50176: LD_ADDR_VAR 0 5
50180: PUSH
50181: LD_VAR 0 1
50185: PPUSH
50186: LD_VAR 0 6
50190: PPUSH
50191: CALL 49468 0 2
50195: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50196: LD_VAR 0 1
50200: PPUSH
50201: LD_VAR 0 5
50205: PUSH
50206: LD_INT 1
50208: ARRAY
50209: PPUSH
50210: LD_VAR 0 5
50214: PUSH
50215: LD_INT 2
50217: ARRAY
50218: PPUSH
50219: CALL_OW 111
// end ;
50223: LD_VAR 0 3
50227: RET
// export function PrepareApemanSoldier ( ) ; begin
50228: LD_INT 0
50230: PPUSH
// uc_nation := 0 ;
50231: LD_ADDR_OWVAR 21
50235: PUSH
50236: LD_INT 0
50238: ST_TO_ADDR
// hc_sex := sex_male ;
50239: LD_ADDR_OWVAR 27
50243: PUSH
50244: LD_INT 1
50246: ST_TO_ADDR
// hc_name :=  ;
50247: LD_ADDR_OWVAR 26
50251: PUSH
50252: LD_STRING 
50254: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50255: LD_ADDR_OWVAR 28
50259: PUSH
50260: LD_INT 15
50262: ST_TO_ADDR
// hc_gallery :=  ;
50263: LD_ADDR_OWVAR 33
50267: PUSH
50268: LD_STRING 
50270: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50271: LD_ADDR_OWVAR 31
50275: PUSH
50276: LD_INT 0
50278: PPUSH
50279: LD_INT 3
50281: PPUSH
50282: CALL_OW 12
50286: PUSH
50287: LD_INT 0
50289: PPUSH
50290: LD_INT 3
50292: PPUSH
50293: CALL_OW 12
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50310: LD_ADDR_OWVAR 29
50314: PUSH
50315: LD_INT 12
50317: PUSH
50318: LD_INT 12
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: ST_TO_ADDR
// end ;
50325: LD_VAR 0 1
50329: RET
// export function PrepareApemanEngineer ( ) ; begin
50330: LD_INT 0
50332: PPUSH
// uc_nation := 0 ;
50333: LD_ADDR_OWVAR 21
50337: PUSH
50338: LD_INT 0
50340: ST_TO_ADDR
// hc_sex := sex_male ;
50341: LD_ADDR_OWVAR 27
50345: PUSH
50346: LD_INT 1
50348: ST_TO_ADDR
// hc_name :=  ;
50349: LD_ADDR_OWVAR 26
50353: PUSH
50354: LD_STRING 
50356: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50357: LD_ADDR_OWVAR 28
50361: PUSH
50362: LD_INT 16
50364: ST_TO_ADDR
// hc_gallery :=  ;
50365: LD_ADDR_OWVAR 33
50369: PUSH
50370: LD_STRING 
50372: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50373: LD_ADDR_OWVAR 31
50377: PUSH
50378: LD_INT 0
50380: PPUSH
50381: LD_INT 3
50383: PPUSH
50384: CALL_OW 12
50388: PUSH
50389: LD_INT 0
50391: PPUSH
50392: LD_INT 3
50394: PPUSH
50395: CALL_OW 12
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50412: LD_ADDR_OWVAR 29
50416: PUSH
50417: LD_INT 12
50419: PUSH
50420: LD_INT 12
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: ST_TO_ADDR
// end ;
50427: LD_VAR 0 1
50431: RET
// export function PrepareApeman ( agressivity ) ; begin
50432: LD_INT 0
50434: PPUSH
// uc_side := 0 ;
50435: LD_ADDR_OWVAR 20
50439: PUSH
50440: LD_INT 0
50442: ST_TO_ADDR
// uc_nation := 0 ;
50443: LD_ADDR_OWVAR 21
50447: PUSH
50448: LD_INT 0
50450: ST_TO_ADDR
// hc_sex := sex_male ;
50451: LD_ADDR_OWVAR 27
50455: PUSH
50456: LD_INT 1
50458: ST_TO_ADDR
// hc_class := class_apeman ;
50459: LD_ADDR_OWVAR 28
50463: PUSH
50464: LD_INT 12
50466: ST_TO_ADDR
// hc_gallery :=  ;
50467: LD_ADDR_OWVAR 33
50471: PUSH
50472: LD_STRING 
50474: ST_TO_ADDR
// hc_name :=  ;
50475: LD_ADDR_OWVAR 26
50479: PUSH
50480: LD_STRING 
50482: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50483: LD_ADDR_OWVAR 29
50487: PUSH
50488: LD_INT 12
50490: PUSH
50491: LD_INT 12
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: ST_TO_ADDR
// if agressivity = 0 then
50498: LD_VAR 0 1
50502: PUSH
50503: LD_INT 0
50505: EQUAL
50506: IFFALSE 50518
// hc_agressivity := 0 else
50508: LD_ADDR_OWVAR 35
50512: PUSH
50513: LD_INT 0
50515: ST_TO_ADDR
50516: GO 50539
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50518: LD_ADDR_OWVAR 35
50522: PUSH
50523: LD_VAR 0 1
50527: NEG
50528: PPUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: CALL_OW 12
50538: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50539: LD_ADDR_OWVAR 31
50543: PUSH
50544: LD_INT 0
50546: PPUSH
50547: LD_INT 3
50549: PPUSH
50550: CALL_OW 12
50554: PUSH
50555: LD_INT 0
50557: PPUSH
50558: LD_INT 3
50560: PPUSH
50561: CALL_OW 12
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// end ;
50578: LD_VAR 0 2
50582: RET
// export function PrepareTiger ( agressivity ) ; begin
50583: LD_INT 0
50585: PPUSH
// uc_side := 0 ;
50586: LD_ADDR_OWVAR 20
50590: PUSH
50591: LD_INT 0
50593: ST_TO_ADDR
// uc_nation := 0 ;
50594: LD_ADDR_OWVAR 21
50598: PUSH
50599: LD_INT 0
50601: ST_TO_ADDR
// InitHc ;
50602: CALL_OW 19
// hc_class := class_tiger ;
50606: LD_ADDR_OWVAR 28
50610: PUSH
50611: LD_INT 14
50613: ST_TO_ADDR
// hc_gallery :=  ;
50614: LD_ADDR_OWVAR 33
50618: PUSH
50619: LD_STRING 
50621: ST_TO_ADDR
// hc_name :=  ;
50622: LD_ADDR_OWVAR 26
50626: PUSH
50627: LD_STRING 
50629: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50630: LD_ADDR_OWVAR 35
50634: PUSH
50635: LD_VAR 0 1
50639: NEG
50640: PPUSH
50641: LD_VAR 0 1
50645: PPUSH
50646: CALL_OW 12
50650: ST_TO_ADDR
// end ;
50651: LD_VAR 0 2
50655: RET
// export function PrepareEnchidna ( ) ; begin
50656: LD_INT 0
50658: PPUSH
// uc_side := 0 ;
50659: LD_ADDR_OWVAR 20
50663: PUSH
50664: LD_INT 0
50666: ST_TO_ADDR
// uc_nation := 0 ;
50667: LD_ADDR_OWVAR 21
50671: PUSH
50672: LD_INT 0
50674: ST_TO_ADDR
// InitHc ;
50675: CALL_OW 19
// hc_class := class_baggie ;
50679: LD_ADDR_OWVAR 28
50683: PUSH
50684: LD_INT 13
50686: ST_TO_ADDR
// hc_gallery :=  ;
50687: LD_ADDR_OWVAR 33
50691: PUSH
50692: LD_STRING 
50694: ST_TO_ADDR
// hc_name :=  ;
50695: LD_ADDR_OWVAR 26
50699: PUSH
50700: LD_STRING 
50702: ST_TO_ADDR
// end ;
50703: LD_VAR 0 1
50707: RET
// export function PrepareFrog ( ) ; begin
50708: LD_INT 0
50710: PPUSH
// uc_side := 0 ;
50711: LD_ADDR_OWVAR 20
50715: PUSH
50716: LD_INT 0
50718: ST_TO_ADDR
// uc_nation := 0 ;
50719: LD_ADDR_OWVAR 21
50723: PUSH
50724: LD_INT 0
50726: ST_TO_ADDR
// InitHc ;
50727: CALL_OW 19
// hc_class := class_frog ;
50731: LD_ADDR_OWVAR 28
50735: PUSH
50736: LD_INT 19
50738: ST_TO_ADDR
// hc_gallery :=  ;
50739: LD_ADDR_OWVAR 33
50743: PUSH
50744: LD_STRING 
50746: ST_TO_ADDR
// hc_name :=  ;
50747: LD_ADDR_OWVAR 26
50751: PUSH
50752: LD_STRING 
50754: ST_TO_ADDR
// end ;
50755: LD_VAR 0 1
50759: RET
// export function PrepareFish ( ) ; begin
50760: LD_INT 0
50762: PPUSH
// uc_side := 0 ;
50763: LD_ADDR_OWVAR 20
50767: PUSH
50768: LD_INT 0
50770: ST_TO_ADDR
// uc_nation := 0 ;
50771: LD_ADDR_OWVAR 21
50775: PUSH
50776: LD_INT 0
50778: ST_TO_ADDR
// InitHc ;
50779: CALL_OW 19
// hc_class := class_fish ;
50783: LD_ADDR_OWVAR 28
50787: PUSH
50788: LD_INT 20
50790: ST_TO_ADDR
// hc_gallery :=  ;
50791: LD_ADDR_OWVAR 33
50795: PUSH
50796: LD_STRING 
50798: ST_TO_ADDR
// hc_name :=  ;
50799: LD_ADDR_OWVAR 26
50803: PUSH
50804: LD_STRING 
50806: ST_TO_ADDR
// end ;
50807: LD_VAR 0 1
50811: RET
// export function PrepareBird ( ) ; begin
50812: LD_INT 0
50814: PPUSH
// uc_side := 0 ;
50815: LD_ADDR_OWVAR 20
50819: PUSH
50820: LD_INT 0
50822: ST_TO_ADDR
// uc_nation := 0 ;
50823: LD_ADDR_OWVAR 21
50827: PUSH
50828: LD_INT 0
50830: ST_TO_ADDR
// InitHc ;
50831: CALL_OW 19
// hc_class := class_phororhacos ;
50835: LD_ADDR_OWVAR 28
50839: PUSH
50840: LD_INT 18
50842: ST_TO_ADDR
// hc_gallery :=  ;
50843: LD_ADDR_OWVAR 33
50847: PUSH
50848: LD_STRING 
50850: ST_TO_ADDR
// hc_name :=  ;
50851: LD_ADDR_OWVAR 26
50855: PUSH
50856: LD_STRING 
50858: ST_TO_ADDR
// end ;
50859: LD_VAR 0 1
50863: RET
// export function PrepareHorse ( ) ; begin
50864: LD_INT 0
50866: PPUSH
// uc_side := 0 ;
50867: LD_ADDR_OWVAR 20
50871: PUSH
50872: LD_INT 0
50874: ST_TO_ADDR
// uc_nation := 0 ;
50875: LD_ADDR_OWVAR 21
50879: PUSH
50880: LD_INT 0
50882: ST_TO_ADDR
// InitHc ;
50883: CALL_OW 19
// hc_class := class_horse ;
50887: LD_ADDR_OWVAR 28
50891: PUSH
50892: LD_INT 21
50894: ST_TO_ADDR
// hc_gallery :=  ;
50895: LD_ADDR_OWVAR 33
50899: PUSH
50900: LD_STRING 
50902: ST_TO_ADDR
// hc_name :=  ;
50903: LD_ADDR_OWVAR 26
50907: PUSH
50908: LD_STRING 
50910: ST_TO_ADDR
// end ;
50911: LD_VAR 0 1
50915: RET
// export function PrepareMastodont ( ) ; begin
50916: LD_INT 0
50918: PPUSH
// uc_side := 0 ;
50919: LD_ADDR_OWVAR 20
50923: PUSH
50924: LD_INT 0
50926: ST_TO_ADDR
// uc_nation := 0 ;
50927: LD_ADDR_OWVAR 21
50931: PUSH
50932: LD_INT 0
50934: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50935: LD_ADDR_OWVAR 37
50939: PUSH
50940: LD_INT 31
50942: ST_TO_ADDR
// vc_control := control_rider ;
50943: LD_ADDR_OWVAR 38
50947: PUSH
50948: LD_INT 4
50950: ST_TO_ADDR
// end ;
50951: LD_VAR 0 1
50955: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50956: LD_INT 0
50958: PPUSH
50959: PPUSH
50960: PPUSH
// uc_side = 0 ;
50961: LD_ADDR_OWVAR 20
50965: PUSH
50966: LD_INT 0
50968: ST_TO_ADDR
// uc_nation = 0 ;
50969: LD_ADDR_OWVAR 21
50973: PUSH
50974: LD_INT 0
50976: ST_TO_ADDR
// InitHc_All ( ) ;
50977: CALL_OW 584
// InitVc ;
50981: CALL_OW 20
// if mastodonts then
50985: LD_VAR 0 6
50989: IFFALSE 51056
// for i = 1 to mastodonts do
50991: LD_ADDR_VAR 0 11
50995: PUSH
50996: DOUBLE
50997: LD_INT 1
50999: DEC
51000: ST_TO_ADDR
51001: LD_VAR 0 6
51005: PUSH
51006: FOR_TO
51007: IFFALSE 51054
// begin vc_chassis := 31 ;
51009: LD_ADDR_OWVAR 37
51013: PUSH
51014: LD_INT 31
51016: ST_TO_ADDR
// vc_control := control_rider ;
51017: LD_ADDR_OWVAR 38
51021: PUSH
51022: LD_INT 4
51024: ST_TO_ADDR
// animal := CreateVehicle ;
51025: LD_ADDR_VAR 0 12
51029: PUSH
51030: CALL_OW 45
51034: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51035: LD_VAR 0 12
51039: PPUSH
51040: LD_VAR 0 8
51044: PPUSH
51045: LD_INT 0
51047: PPUSH
51048: CALL 53198 0 3
// end ;
51052: GO 51006
51054: POP
51055: POP
// if horses then
51056: LD_VAR 0 5
51060: IFFALSE 51127
// for i = 1 to horses do
51062: LD_ADDR_VAR 0 11
51066: PUSH
51067: DOUBLE
51068: LD_INT 1
51070: DEC
51071: ST_TO_ADDR
51072: LD_VAR 0 5
51076: PUSH
51077: FOR_TO
51078: IFFALSE 51125
// begin hc_class := 21 ;
51080: LD_ADDR_OWVAR 28
51084: PUSH
51085: LD_INT 21
51087: ST_TO_ADDR
// hc_gallery :=  ;
51088: LD_ADDR_OWVAR 33
51092: PUSH
51093: LD_STRING 
51095: ST_TO_ADDR
// animal := CreateHuman ;
51096: LD_ADDR_VAR 0 12
51100: PUSH
51101: CALL_OW 44
51105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51106: LD_VAR 0 12
51110: PPUSH
51111: LD_VAR 0 8
51115: PPUSH
51116: LD_INT 0
51118: PPUSH
51119: CALL 53198 0 3
// end ;
51123: GO 51077
51125: POP
51126: POP
// if birds then
51127: LD_VAR 0 1
51131: IFFALSE 51198
// for i = 1 to birds do
51133: LD_ADDR_VAR 0 11
51137: PUSH
51138: DOUBLE
51139: LD_INT 1
51141: DEC
51142: ST_TO_ADDR
51143: LD_VAR 0 1
51147: PUSH
51148: FOR_TO
51149: IFFALSE 51196
// begin hc_class := 18 ;
51151: LD_ADDR_OWVAR 28
51155: PUSH
51156: LD_INT 18
51158: ST_TO_ADDR
// hc_gallery =  ;
51159: LD_ADDR_OWVAR 33
51163: PUSH
51164: LD_STRING 
51166: ST_TO_ADDR
// animal := CreateHuman ;
51167: LD_ADDR_VAR 0 12
51171: PUSH
51172: CALL_OW 44
51176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51177: LD_VAR 0 12
51181: PPUSH
51182: LD_VAR 0 8
51186: PPUSH
51187: LD_INT 0
51189: PPUSH
51190: CALL 53198 0 3
// end ;
51194: GO 51148
51196: POP
51197: POP
// if tigers then
51198: LD_VAR 0 2
51202: IFFALSE 51286
// for i = 1 to tigers do
51204: LD_ADDR_VAR 0 11
51208: PUSH
51209: DOUBLE
51210: LD_INT 1
51212: DEC
51213: ST_TO_ADDR
51214: LD_VAR 0 2
51218: PUSH
51219: FOR_TO
51220: IFFALSE 51284
// begin hc_class = class_tiger ;
51222: LD_ADDR_OWVAR 28
51226: PUSH
51227: LD_INT 14
51229: ST_TO_ADDR
// hc_gallery =  ;
51230: LD_ADDR_OWVAR 33
51234: PUSH
51235: LD_STRING 
51237: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51238: LD_ADDR_OWVAR 35
51242: PUSH
51243: LD_INT 7
51245: NEG
51246: PPUSH
51247: LD_INT 7
51249: PPUSH
51250: CALL_OW 12
51254: ST_TO_ADDR
// animal := CreateHuman ;
51255: LD_ADDR_VAR 0 12
51259: PUSH
51260: CALL_OW 44
51264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51265: LD_VAR 0 12
51269: PPUSH
51270: LD_VAR 0 8
51274: PPUSH
51275: LD_INT 0
51277: PPUSH
51278: CALL 53198 0 3
// end ;
51282: GO 51219
51284: POP
51285: POP
// if apemans then
51286: LD_VAR 0 3
51290: IFFALSE 51413
// for i = 1 to apemans do
51292: LD_ADDR_VAR 0 11
51296: PUSH
51297: DOUBLE
51298: LD_INT 1
51300: DEC
51301: ST_TO_ADDR
51302: LD_VAR 0 3
51306: PUSH
51307: FOR_TO
51308: IFFALSE 51411
// begin hc_class = class_apeman ;
51310: LD_ADDR_OWVAR 28
51314: PUSH
51315: LD_INT 12
51317: ST_TO_ADDR
// hc_gallery =  ;
51318: LD_ADDR_OWVAR 33
51322: PUSH
51323: LD_STRING 
51325: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51326: LD_ADDR_OWVAR 35
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PPUSH
51335: LD_INT 2
51337: PPUSH
51338: CALL_OW 12
51342: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51343: LD_ADDR_OWVAR 31
51347: PUSH
51348: LD_INT 1
51350: PPUSH
51351: LD_INT 3
51353: PPUSH
51354: CALL_OW 12
51358: PUSH
51359: LD_INT 1
51361: PPUSH
51362: LD_INT 3
51364: PPUSH
51365: CALL_OW 12
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// animal := CreateHuman ;
51382: LD_ADDR_VAR 0 12
51386: PUSH
51387: CALL_OW 44
51391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51392: LD_VAR 0 12
51396: PPUSH
51397: LD_VAR 0 8
51401: PPUSH
51402: LD_INT 0
51404: PPUSH
51405: CALL 53198 0 3
// end ;
51409: GO 51307
51411: POP
51412: POP
// if enchidnas then
51413: LD_VAR 0 4
51417: IFFALSE 51484
// for i = 1 to enchidnas do
51419: LD_ADDR_VAR 0 11
51423: PUSH
51424: DOUBLE
51425: LD_INT 1
51427: DEC
51428: ST_TO_ADDR
51429: LD_VAR 0 4
51433: PUSH
51434: FOR_TO
51435: IFFALSE 51482
// begin hc_class = 13 ;
51437: LD_ADDR_OWVAR 28
51441: PUSH
51442: LD_INT 13
51444: ST_TO_ADDR
// hc_gallery =  ;
51445: LD_ADDR_OWVAR 33
51449: PUSH
51450: LD_STRING 
51452: ST_TO_ADDR
// animal := CreateHuman ;
51453: LD_ADDR_VAR 0 12
51457: PUSH
51458: CALL_OW 44
51462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51463: LD_VAR 0 12
51467: PPUSH
51468: LD_VAR 0 8
51472: PPUSH
51473: LD_INT 0
51475: PPUSH
51476: CALL 53198 0 3
// end ;
51480: GO 51434
51482: POP
51483: POP
// if fishes then
51484: LD_VAR 0 7
51488: IFFALSE 51555
// for i = 1 to fishes do
51490: LD_ADDR_VAR 0 11
51494: PUSH
51495: DOUBLE
51496: LD_INT 1
51498: DEC
51499: ST_TO_ADDR
51500: LD_VAR 0 7
51504: PUSH
51505: FOR_TO
51506: IFFALSE 51553
// begin hc_class = 20 ;
51508: LD_ADDR_OWVAR 28
51512: PUSH
51513: LD_INT 20
51515: ST_TO_ADDR
// hc_gallery =  ;
51516: LD_ADDR_OWVAR 33
51520: PUSH
51521: LD_STRING 
51523: ST_TO_ADDR
// animal := CreateHuman ;
51524: LD_ADDR_VAR 0 12
51528: PUSH
51529: CALL_OW 44
51533: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51534: LD_VAR 0 12
51538: PPUSH
51539: LD_VAR 0 9
51543: PPUSH
51544: LD_INT 0
51546: PPUSH
51547: CALL 53198 0 3
// end ;
51551: GO 51505
51553: POP
51554: POP
// end ;
51555: LD_VAR 0 10
51559: RET
// export function WantHeal ( sci , unit ) ; begin
51560: LD_INT 0
51562: PPUSH
// if GetTaskList ( sci ) > 0 then
51563: LD_VAR 0 1
51567: PPUSH
51568: CALL_OW 437
51572: PUSH
51573: LD_INT 0
51575: GREATER
51576: IFFALSE 51648
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 437
51587: PUSH
51588: LD_INT 1
51590: ARRAY
51591: PUSH
51592: LD_INT 1
51594: ARRAY
51595: PUSH
51596: LD_STRING l
51598: EQUAL
51599: IFFALSE 51626
51601: PUSH
51602: LD_VAR 0 1
51606: PPUSH
51607: CALL_OW 437
51611: PUSH
51612: LD_INT 1
51614: ARRAY
51615: PUSH
51616: LD_INT 4
51618: ARRAY
51619: PUSH
51620: LD_VAR 0 2
51624: EQUAL
51625: AND
51626: IFFALSE 51638
// result := true else
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_INT 1
51635: ST_TO_ADDR
51636: GO 51646
// result := false ;
51638: LD_ADDR_VAR 0 3
51642: PUSH
51643: LD_INT 0
51645: ST_TO_ADDR
// end else
51646: GO 51656
// result := false ;
51648: LD_ADDR_VAR 0 3
51652: PUSH
51653: LD_INT 0
51655: ST_TO_ADDR
// end ;
51656: LD_VAR 0 3
51660: RET
// export function HealTarget ( sci ) ; begin
51661: LD_INT 0
51663: PPUSH
// if not sci then
51664: LD_VAR 0 1
51668: NOT
51669: IFFALSE 51673
// exit ;
51671: GO 51738
// result := 0 ;
51673: LD_ADDR_VAR 0 2
51677: PUSH
51678: LD_INT 0
51680: ST_TO_ADDR
// if GetTaskList ( sci ) then
51681: LD_VAR 0 1
51685: PPUSH
51686: CALL_OW 437
51690: IFFALSE 51738
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51692: LD_VAR 0 1
51696: PPUSH
51697: CALL_OW 437
51701: PUSH
51702: LD_INT 1
51704: ARRAY
51705: PUSH
51706: LD_INT 1
51708: ARRAY
51709: PUSH
51710: LD_STRING l
51712: EQUAL
51713: IFFALSE 51738
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51715: LD_ADDR_VAR 0 2
51719: PUSH
51720: LD_VAR 0 1
51724: PPUSH
51725: CALL_OW 437
51729: PUSH
51730: LD_INT 1
51732: ARRAY
51733: PUSH
51734: LD_INT 4
51736: ARRAY
51737: ST_TO_ADDR
// end ;
51738: LD_VAR 0 2
51742: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51743: LD_INT 0
51745: PPUSH
51746: PPUSH
51747: PPUSH
51748: PPUSH
// if not base_units then
51749: LD_VAR 0 1
51753: NOT
51754: IFFALSE 51758
// exit ;
51756: GO 51845
// result := false ;
51758: LD_ADDR_VAR 0 2
51762: PUSH
51763: LD_INT 0
51765: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51766: LD_ADDR_VAR 0 5
51770: PUSH
51771: LD_VAR 0 1
51775: PPUSH
51776: LD_INT 21
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PPUSH
51786: CALL_OW 72
51790: ST_TO_ADDR
// if not tmp then
51791: LD_VAR 0 5
51795: NOT
51796: IFFALSE 51800
// exit ;
51798: GO 51845
// for i in tmp do
51800: LD_ADDR_VAR 0 3
51804: PUSH
51805: LD_VAR 0 5
51809: PUSH
51810: FOR_IN
51811: IFFALSE 51843
// begin result := EnemyInRange ( i , 22 ) ;
51813: LD_ADDR_VAR 0 2
51817: PUSH
51818: LD_VAR 0 3
51822: PPUSH
51823: LD_INT 22
51825: PPUSH
51826: CALL 49270 0 2
51830: ST_TO_ADDR
// if result then
51831: LD_VAR 0 2
51835: IFFALSE 51841
// exit ;
51837: POP
51838: POP
51839: GO 51845
// end ;
51841: GO 51810
51843: POP
51844: POP
// end ;
51845: LD_VAR 0 2
51849: RET
// export function FilterByTag ( units , tag ) ; begin
51850: LD_INT 0
51852: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51853: LD_ADDR_VAR 0 3
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: LD_INT 120
51865: PUSH
51866: LD_VAR 0 2
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PPUSH
51875: CALL_OW 72
51879: ST_TO_ADDR
// end ;
51880: LD_VAR 0 3
51884: RET
// export function IsDriver ( un ) ; begin
51885: LD_INT 0
51887: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51888: LD_ADDR_VAR 0 2
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: LD_INT 55
51900: PUSH
51901: EMPTY
51902: LIST
51903: PPUSH
51904: CALL_OW 69
51908: IN
51909: ST_TO_ADDR
// end ;
51910: LD_VAR 0 2
51914: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51915: LD_INT 0
51917: PPUSH
51918: PPUSH
// list := [ ] ;
51919: LD_ADDR_VAR 0 5
51923: PUSH
51924: EMPTY
51925: ST_TO_ADDR
// case d of 0 :
51926: LD_VAR 0 3
51930: PUSH
51931: LD_INT 0
51933: DOUBLE
51934: EQUAL
51935: IFTRUE 51939
51937: GO 52072
51939: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51940: LD_ADDR_VAR 0 5
51944: PUSH
51945: LD_VAR 0 1
51949: PUSH
51950: LD_INT 4
51952: MINUS
51953: PUSH
51954: LD_VAR 0 2
51958: PUSH
51959: LD_INT 4
51961: MINUS
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: PUSH
51971: LD_VAR 0 1
51975: PUSH
51976: LD_INT 3
51978: MINUS
51979: PUSH
51980: LD_VAR 0 2
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: PUSH
51993: LD_VAR 0 1
51997: PUSH
51998: LD_INT 4
52000: PLUS
52001: PUSH
52002: LD_VAR 0 2
52006: PUSH
52007: LD_INT 4
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: LIST
52014: PUSH
52015: LD_VAR 0 1
52019: PUSH
52020: LD_INT 3
52022: PLUS
52023: PUSH
52024: LD_VAR 0 2
52028: PUSH
52029: LD_INT 3
52031: PLUS
52032: PUSH
52033: LD_INT 5
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: PUSH
52041: LD_VAR 0 1
52045: PUSH
52046: LD_VAR 0 2
52050: PUSH
52051: LD_INT 4
52053: PLUS
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// end ; 1 :
52070: GO 52770
52072: LD_INT 1
52074: DOUBLE
52075: EQUAL
52076: IFTRUE 52080
52078: GO 52213
52080: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52081: LD_ADDR_VAR 0 5
52085: PUSH
52086: LD_VAR 0 1
52090: PUSH
52091: LD_VAR 0 2
52095: PUSH
52096: LD_INT 4
52098: MINUS
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: PUSH
52108: LD_VAR 0 1
52112: PUSH
52113: LD_INT 3
52115: MINUS
52116: PUSH
52117: LD_VAR 0 2
52121: PUSH
52122: LD_INT 3
52124: MINUS
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_VAR 0 1
52138: PUSH
52139: LD_INT 4
52141: MINUS
52142: PUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: LIST
52155: PUSH
52156: LD_VAR 0 1
52160: PUSH
52161: LD_VAR 0 2
52165: PUSH
52166: LD_INT 3
52168: PLUS
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: PUSH
52178: LD_VAR 0 1
52182: PUSH
52183: LD_INT 4
52185: PLUS
52186: PUSH
52187: LD_VAR 0 2
52191: PUSH
52192: LD_INT 4
52194: PLUS
52195: PUSH
52196: LD_INT 5
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: ST_TO_ADDR
// end ; 2 :
52211: GO 52770
52213: LD_INT 2
52215: DOUBLE
52216: EQUAL
52217: IFTRUE 52221
52219: GO 52350
52221: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52222: LD_ADDR_VAR 0 5
52226: PUSH
52227: LD_VAR 0 1
52231: PUSH
52232: LD_VAR 0 2
52236: PUSH
52237: LD_INT 3
52239: MINUS
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: PUSH
52249: LD_VAR 0 1
52253: PUSH
52254: LD_INT 4
52256: PLUS
52257: PUSH
52258: LD_VAR 0 2
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: PUSH
52271: LD_VAR 0 1
52275: PUSH
52276: LD_VAR 0 2
52280: PUSH
52281: LD_INT 4
52283: PLUS
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: PUSH
52293: LD_VAR 0 1
52297: PUSH
52298: LD_INT 3
52300: MINUS
52301: PUSH
52302: LD_VAR 0 2
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: PUSH
52315: LD_VAR 0 1
52319: PUSH
52320: LD_INT 4
52322: MINUS
52323: PUSH
52324: LD_VAR 0 2
52328: PUSH
52329: LD_INT 4
52331: MINUS
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// end ; 3 :
52348: GO 52770
52350: LD_INT 3
52352: DOUBLE
52353: EQUAL
52354: IFTRUE 52358
52356: GO 52491
52358: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52359: LD_ADDR_VAR 0 5
52363: PUSH
52364: LD_VAR 0 1
52368: PUSH
52369: LD_INT 3
52371: PLUS
52372: PUSH
52373: LD_VAR 0 2
52377: PUSH
52378: LD_INT 4
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: LIST
52385: PUSH
52386: LD_VAR 0 1
52390: PUSH
52391: LD_INT 4
52393: PLUS
52394: PUSH
52395: LD_VAR 0 2
52399: PUSH
52400: LD_INT 4
52402: PLUS
52403: PUSH
52404: LD_INT 5
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: PUSH
52412: LD_VAR 0 1
52416: PUSH
52417: LD_INT 4
52419: MINUS
52420: PUSH
52421: LD_VAR 0 2
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: LD_VAR 0 1
52438: PUSH
52439: LD_VAR 0 2
52443: PUSH
52444: LD_INT 4
52446: MINUS
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: PUSH
52456: LD_VAR 0 1
52460: PUSH
52461: LD_INT 3
52463: MINUS
52464: PUSH
52465: LD_VAR 0 2
52469: PUSH
52470: LD_INT 3
52472: MINUS
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: LIST
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// end ; 4 :
52489: GO 52770
52491: LD_INT 4
52493: DOUBLE
52494: EQUAL
52495: IFTRUE 52499
52497: GO 52632
52499: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52500: LD_ADDR_VAR 0 5
52504: PUSH
52505: LD_VAR 0 1
52509: PUSH
52510: LD_VAR 0 2
52514: PUSH
52515: LD_INT 4
52517: PLUS
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: LIST
52526: PUSH
52527: LD_VAR 0 1
52531: PUSH
52532: LD_INT 3
52534: PLUS
52535: PUSH
52536: LD_VAR 0 2
52540: PUSH
52541: LD_INT 3
52543: PLUS
52544: PUSH
52545: LD_INT 5
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: LIST
52552: PUSH
52553: LD_VAR 0 1
52557: PUSH
52558: LD_INT 4
52560: PLUS
52561: PUSH
52562: LD_VAR 0 2
52566: PUSH
52567: LD_INT 4
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: PUSH
52575: LD_VAR 0 1
52579: PUSH
52580: LD_VAR 0 2
52584: PUSH
52585: LD_INT 3
52587: MINUS
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: PUSH
52597: LD_VAR 0 1
52601: PUSH
52602: LD_INT 4
52604: MINUS
52605: PUSH
52606: LD_VAR 0 2
52610: PUSH
52611: LD_INT 4
52613: MINUS
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: ST_TO_ADDR
// end ; 5 :
52630: GO 52770
52632: LD_INT 5
52634: DOUBLE
52635: EQUAL
52636: IFTRUE 52640
52638: GO 52769
52640: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52641: LD_ADDR_VAR 0 5
52645: PUSH
52646: LD_VAR 0 1
52650: PUSH
52651: LD_INT 4
52653: MINUS
52654: PUSH
52655: LD_VAR 0 2
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: PUSH
52668: LD_VAR 0 1
52672: PUSH
52673: LD_VAR 0 2
52677: PUSH
52678: LD_INT 4
52680: MINUS
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: LIST
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_INT 4
52697: PLUS
52698: PUSH
52699: LD_VAR 0 2
52703: PUSH
52704: LD_INT 4
52706: PLUS
52707: PUSH
52708: LD_INT 5
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: LIST
52715: PUSH
52716: LD_VAR 0 1
52720: PUSH
52721: LD_INT 3
52723: PLUS
52724: PUSH
52725: LD_VAR 0 2
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: PUSH
52738: LD_VAR 0 1
52742: PUSH
52743: LD_VAR 0 2
52747: PUSH
52748: LD_INT 3
52750: PLUS
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// end ; end ;
52767: GO 52770
52769: POP
// result := list ;
52770: LD_ADDR_VAR 0 4
52774: PUSH
52775: LD_VAR 0 5
52779: ST_TO_ADDR
// end ;
52780: LD_VAR 0 4
52784: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52785: LD_INT 0
52787: PPUSH
52788: PPUSH
52789: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52790: LD_VAR 0 1
52794: NOT
52795: IFTRUE 52823
52797: PUSH
52798: LD_VAR 0 2
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: LD_INT 4
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: IN
52821: NOT
52822: OR
52823: IFFALSE 52827
// exit ;
52825: GO 52910
// tmp := [ ] ;
52827: LD_ADDR_VAR 0 5
52831: PUSH
52832: EMPTY
52833: ST_TO_ADDR
// for i in units do
52834: LD_ADDR_VAR 0 4
52838: PUSH
52839: LD_VAR 0 1
52843: PUSH
52844: FOR_IN
52845: IFFALSE 52879
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52847: LD_ADDR_VAR 0 5
52851: PUSH
52852: LD_VAR 0 5
52856: PPUSH
52857: LD_VAR 0 4
52861: PPUSH
52862: LD_VAR 0 2
52866: PPUSH
52867: CALL_OW 259
52871: PPUSH
52872: CALL 54305 0 2
52876: ST_TO_ADDR
52877: GO 52844
52879: POP
52880: POP
// if not tmp then
52881: LD_VAR 0 5
52885: NOT
52886: IFFALSE 52890
// exit ;
52888: GO 52910
// result := SortListByListDesc ( units , tmp ) ;
52890: LD_ADDR_VAR 0 3
52894: PUSH
52895: LD_VAR 0 1
52899: PPUSH
52900: LD_VAR 0 5
52904: PPUSH
52905: CALL_OW 77
52909: ST_TO_ADDR
// end ;
52910: LD_VAR 0 3
52914: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52915: LD_INT 0
52917: PPUSH
52918: PPUSH
52919: PPUSH
// result := false ;
52920: LD_ADDR_VAR 0 3
52924: PUSH
52925: LD_INT 0
52927: ST_TO_ADDR
// if not building then
52928: LD_VAR 0 2
52932: NOT
52933: IFFALSE 52937
// exit ;
52935: GO 53081
// x := GetX ( building ) ;
52937: LD_ADDR_VAR 0 4
52941: PUSH
52942: LD_VAR 0 2
52946: PPUSH
52947: CALL_OW 250
52951: ST_TO_ADDR
// y := GetY ( building ) ;
52952: LD_ADDR_VAR 0 5
52956: PUSH
52957: LD_VAR 0 2
52961: PPUSH
52962: CALL_OW 251
52966: ST_TO_ADDR
// if not x or not y then
52967: LD_VAR 0 4
52971: NOT
52972: IFTRUE 52981
52974: PUSH
52975: LD_VAR 0 5
52979: NOT
52980: OR
52981: IFFALSE 52985
// exit ;
52983: GO 53081
// if GetTaskList ( unit ) then
52985: LD_VAR 0 1
52989: PPUSH
52990: CALL_OW 437
52994: IFFALSE 53081
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52996: LD_STRING e
52998: PUSH
52999: LD_VAR 0 1
53003: PPUSH
53004: CALL_OW 437
53008: PUSH
53009: LD_INT 1
53011: ARRAY
53012: PUSH
53013: LD_INT 1
53015: ARRAY
53016: EQUAL
53017: IFFALSE 53044
53019: PUSH
53020: LD_VAR 0 4
53024: PUSH
53025: LD_VAR 0 1
53029: PPUSH
53030: CALL_OW 437
53034: PUSH
53035: LD_INT 1
53037: ARRAY
53038: PUSH
53039: LD_INT 2
53041: ARRAY
53042: EQUAL
53043: AND
53044: IFFALSE 53071
53046: PUSH
53047: LD_VAR 0 5
53051: PUSH
53052: LD_VAR 0 1
53056: PPUSH
53057: CALL_OW 437
53061: PUSH
53062: LD_INT 1
53064: ARRAY
53065: PUSH
53066: LD_INT 3
53068: ARRAY
53069: EQUAL
53070: AND
53071: IFFALSE 53081
// result := true end ;
53073: LD_ADDR_VAR 0 3
53077: PUSH
53078: LD_INT 1
53080: ST_TO_ADDR
// end ;
53081: LD_VAR 0 3
53085: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53086: LD_INT 0
53088: PPUSH
// result := false ;
53089: LD_ADDR_VAR 0 4
53093: PUSH
53094: LD_INT 0
53096: ST_TO_ADDR
// if GetTaskList ( unit ) then
53097: LD_VAR 0 1
53101: PPUSH
53102: CALL_OW 437
53106: IFFALSE 53193
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53108: LD_STRING M
53110: PUSH
53111: LD_VAR 0 1
53115: PPUSH
53116: CALL_OW 437
53120: PUSH
53121: LD_INT 1
53123: ARRAY
53124: PUSH
53125: LD_INT 1
53127: ARRAY
53128: EQUAL
53129: IFFALSE 53156
53131: PUSH
53132: LD_VAR 0 2
53136: PUSH
53137: LD_VAR 0 1
53141: PPUSH
53142: CALL_OW 437
53146: PUSH
53147: LD_INT 1
53149: ARRAY
53150: PUSH
53151: LD_INT 2
53153: ARRAY
53154: EQUAL
53155: AND
53156: IFFALSE 53183
53158: PUSH
53159: LD_VAR 0 3
53163: PUSH
53164: LD_VAR 0 1
53168: PPUSH
53169: CALL_OW 437
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: PUSH
53178: LD_INT 3
53180: ARRAY
53181: EQUAL
53182: AND
53183: IFFALSE 53193
// result := true ;
53185: LD_ADDR_VAR 0 4
53189: PUSH
53190: LD_INT 1
53192: ST_TO_ADDR
// end ; end ;
53193: LD_VAR 0 4
53197: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53198: LD_INT 0
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
// if not unit or not area then
53204: LD_VAR 0 1
53208: NOT
53209: IFTRUE 53218
53211: PUSH
53212: LD_VAR 0 2
53216: NOT
53217: OR
53218: IFFALSE 53222
// exit ;
53220: GO 53398
// tmp := AreaToList ( area , i ) ;
53222: LD_ADDR_VAR 0 6
53226: PUSH
53227: LD_VAR 0 2
53231: PPUSH
53232: LD_VAR 0 5
53236: PPUSH
53237: CALL_OW 517
53241: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53242: LD_ADDR_VAR 0 5
53246: PUSH
53247: DOUBLE
53248: LD_INT 1
53250: DEC
53251: ST_TO_ADDR
53252: LD_VAR 0 6
53256: PUSH
53257: LD_INT 1
53259: ARRAY
53260: PUSH
53261: FOR_TO
53262: IFFALSE 53396
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53264: LD_ADDR_VAR 0 7
53268: PUSH
53269: LD_VAR 0 6
53273: PUSH
53274: LD_INT 1
53276: ARRAY
53277: PUSH
53278: LD_VAR 0 5
53282: ARRAY
53283: PUSH
53284: LD_VAR 0 6
53288: PUSH
53289: LD_INT 2
53291: ARRAY
53292: PUSH
53293: LD_VAR 0 5
53297: ARRAY
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53303: LD_INT 92
53305: PUSH
53306: LD_VAR 0 7
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PUSH
53315: LD_VAR 0 7
53319: PUSH
53320: LD_INT 2
53322: ARRAY
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: PPUSH
53333: CALL_OW 69
53337: PUSH
53338: LD_INT 0
53340: EQUAL
53341: IFFALSE 53394
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_VAR 0 7
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PPUSH
53357: LD_VAR 0 7
53361: PUSH
53362: LD_INT 2
53364: ARRAY
53365: PPUSH
53366: LD_VAR 0 3
53370: PPUSH
53371: CALL_OW 48
// result := IsPlaced ( unit ) ;
53375: LD_ADDR_VAR 0 4
53379: PUSH
53380: LD_VAR 0 1
53384: PPUSH
53385: CALL_OW 305
53389: ST_TO_ADDR
// exit ;
53390: POP
53391: POP
53392: GO 53398
// end ; end ;
53394: GO 53261
53396: POP
53397: POP
// end ;
53398: LD_VAR 0 4
53402: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53403: LD_INT 0
53405: PPUSH
53406: PPUSH
53407: PPUSH
// if not side or side > 8 then
53408: LD_VAR 0 1
53412: NOT
53413: IFTRUE 53425
53415: PUSH
53416: LD_VAR 0 1
53420: PUSH
53421: LD_INT 8
53423: GREATER
53424: OR
53425: IFFALSE 53429
// exit ;
53427: GO 53616
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53429: LD_ADDR_VAR 0 4
53433: PUSH
53434: LD_INT 22
53436: PUSH
53437: LD_VAR 0 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 21
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PPUSH
53460: CALL_OW 69
53464: ST_TO_ADDR
// if not tmp then
53465: LD_VAR 0 4
53469: NOT
53470: IFFALSE 53474
// exit ;
53472: GO 53616
// enable_addtolog := true ;
53474: LD_ADDR_OWVAR 81
53478: PUSH
53479: LD_INT 1
53481: ST_TO_ADDR
// AddToLog ( [ ) ;
53482: LD_STRING [
53484: PPUSH
53485: CALL_OW 561
// for i in tmp do
53489: LD_ADDR_VAR 0 3
53493: PUSH
53494: LD_VAR 0 4
53498: PUSH
53499: FOR_IN
53500: IFFALSE 53607
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53502: LD_STRING [
53504: PUSH
53505: LD_VAR 0 3
53509: PPUSH
53510: CALL_OW 266
53514: STR
53515: PUSH
53516: LD_STRING , 
53518: STR
53519: PUSH
53520: LD_VAR 0 3
53524: PPUSH
53525: CALL_OW 250
53529: STR
53530: PUSH
53531: LD_STRING , 
53533: STR
53534: PUSH
53535: LD_VAR 0 3
53539: PPUSH
53540: CALL_OW 251
53544: STR
53545: PUSH
53546: LD_STRING , 
53548: STR
53549: PUSH
53550: LD_VAR 0 3
53554: PPUSH
53555: CALL_OW 254
53559: STR
53560: PUSH
53561: LD_STRING , 
53563: STR
53564: PUSH
53565: LD_VAR 0 3
53569: PPUSH
53570: LD_INT 1
53572: PPUSH
53573: CALL_OW 268
53577: STR
53578: PUSH
53579: LD_STRING , 
53581: STR
53582: PUSH
53583: LD_VAR 0 3
53587: PPUSH
53588: LD_INT 2
53590: PPUSH
53591: CALL_OW 268
53595: STR
53596: PUSH
53597: LD_STRING ],
53599: STR
53600: PPUSH
53601: CALL_OW 561
// end ;
53605: GO 53499
53607: POP
53608: POP
// AddToLog ( ]; ) ;
53609: LD_STRING ];
53611: PPUSH
53612: CALL_OW 561
// end ;
53616: LD_VAR 0 2
53620: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53621: LD_INT 0
53623: PPUSH
53624: PPUSH
53625: PPUSH
53626: PPUSH
53627: PPUSH
// if not area or not rate or not max then
53628: LD_VAR 0 1
53632: NOT
53633: IFTRUE 53642
53635: PUSH
53636: LD_VAR 0 2
53640: NOT
53641: OR
53642: IFTRUE 53651
53644: PUSH
53645: LD_VAR 0 4
53649: NOT
53650: OR
53651: IFFALSE 53655
// exit ;
53653: GO 53844
// while 1 do
53655: LD_INT 1
53657: IFFALSE 53844
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53659: LD_ADDR_VAR 0 9
53663: PUSH
53664: LD_VAR 0 1
53668: PPUSH
53669: LD_INT 1
53671: PPUSH
53672: CALL_OW 287
53676: PUSH
53677: LD_INT 10
53679: MUL
53680: ST_TO_ADDR
// r := rate / 10 ;
53681: LD_ADDR_VAR 0 7
53685: PUSH
53686: LD_VAR 0 2
53690: PUSH
53691: LD_INT 10
53693: DIVREAL
53694: ST_TO_ADDR
// time := 1 1$00 ;
53695: LD_ADDR_VAR 0 8
53699: PUSH
53700: LD_INT 2100
53702: ST_TO_ADDR
// if amount < min then
53703: LD_VAR 0 9
53707: PUSH
53708: LD_VAR 0 3
53712: LESS
53713: IFFALSE 53731
// r := r * 2 else
53715: LD_ADDR_VAR 0 7
53719: PUSH
53720: LD_VAR 0 7
53724: PUSH
53725: LD_INT 2
53727: MUL
53728: ST_TO_ADDR
53729: GO 53757
// if amount > max then
53731: LD_VAR 0 9
53735: PUSH
53736: LD_VAR 0 4
53740: GREATER
53741: IFFALSE 53757
// r := r / 2 ;
53743: LD_ADDR_VAR 0 7
53747: PUSH
53748: LD_VAR 0 7
53752: PUSH
53753: LD_INT 2
53755: DIVREAL
53756: ST_TO_ADDR
// time := time / r ;
53757: LD_ADDR_VAR 0 8
53761: PUSH
53762: LD_VAR 0 8
53766: PUSH
53767: LD_VAR 0 7
53771: DIVREAL
53772: ST_TO_ADDR
// if time < 0 then
53773: LD_VAR 0 8
53777: PUSH
53778: LD_INT 0
53780: LESS
53781: IFFALSE 53798
// time := time * - 1 ;
53783: LD_ADDR_VAR 0 8
53787: PUSH
53788: LD_VAR 0 8
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: MUL
53797: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53798: LD_VAR 0 8
53802: PUSH
53803: LD_INT 35
53805: PPUSH
53806: LD_INT 875
53808: PPUSH
53809: CALL_OW 12
53813: PLUS
53814: PPUSH
53815: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53819: LD_INT 1
53821: PPUSH
53822: LD_INT 5
53824: PPUSH
53825: CALL_OW 12
53829: PPUSH
53830: LD_VAR 0 1
53834: PPUSH
53835: LD_INT 1
53837: PPUSH
53838: CALL_OW 55
// end ;
53842: GO 53655
// end ;
53844: LD_VAR 0 5
53848: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53849: LD_INT 0
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
// if not turrets or not factories then
53859: LD_VAR 0 1
53863: NOT
53864: IFTRUE 53873
53866: PUSH
53867: LD_VAR 0 2
53871: NOT
53872: OR
53873: IFFALSE 53877
// exit ;
53875: GO 54184
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53877: LD_ADDR_VAR 0 10
53881: PUSH
53882: LD_INT 5
53884: PUSH
53885: LD_INT 6
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: LD_INT 5
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 24
53919: PUSH
53920: LD_INT 25
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 23
53929: PUSH
53930: LD_INT 27
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 42
53943: PUSH
53944: LD_INT 43
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 44
53953: PUSH
53954: LD_INT 46
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 45
53963: PUSH
53964: LD_INT 47
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: LIST
53980: ST_TO_ADDR
// result := [ ] ;
53981: LD_ADDR_VAR 0 3
53985: PUSH
53986: EMPTY
53987: ST_TO_ADDR
// for i in turrets do
53988: LD_ADDR_VAR 0 4
53992: PUSH
53993: LD_VAR 0 1
53997: PUSH
53998: FOR_IN
53999: IFFALSE 54182
// begin nat := GetNation ( i ) ;
54001: LD_ADDR_VAR 0 7
54005: PUSH
54006: LD_VAR 0 4
54010: PPUSH
54011: CALL_OW 248
54015: ST_TO_ADDR
// weapon := 0 ;
54016: LD_ADDR_VAR 0 8
54020: PUSH
54021: LD_INT 0
54023: ST_TO_ADDR
// if not nat then
54024: LD_VAR 0 7
54028: NOT
54029: IFFALSE 54033
// continue ;
54031: GO 53998
// for j in list [ nat ] do
54033: LD_ADDR_VAR 0 5
54037: PUSH
54038: LD_VAR 0 10
54042: PUSH
54043: LD_VAR 0 7
54047: ARRAY
54048: PUSH
54049: FOR_IN
54050: IFFALSE 54091
// if GetBWeapon ( i ) = j [ 1 ] then
54052: LD_VAR 0 4
54056: PPUSH
54057: CALL_OW 269
54061: PUSH
54062: LD_VAR 0 5
54066: PUSH
54067: LD_INT 1
54069: ARRAY
54070: EQUAL
54071: IFFALSE 54089
// begin weapon := j [ 2 ] ;
54073: LD_ADDR_VAR 0 8
54077: PUSH
54078: LD_VAR 0 5
54082: PUSH
54083: LD_INT 2
54085: ARRAY
54086: ST_TO_ADDR
// break ;
54087: GO 54091
// end ;
54089: GO 54049
54091: POP
54092: POP
// if not weapon then
54093: LD_VAR 0 8
54097: NOT
54098: IFFALSE 54102
// continue ;
54100: GO 53998
// for k in factories do
54102: LD_ADDR_VAR 0 6
54106: PUSH
54107: LD_VAR 0 2
54111: PUSH
54112: FOR_IN
54113: IFFALSE 54178
// begin weapons := AvailableWeaponList ( k ) ;
54115: LD_ADDR_VAR 0 9
54119: PUSH
54120: LD_VAR 0 6
54124: PPUSH
54125: CALL_OW 478
54129: ST_TO_ADDR
// if not weapons then
54130: LD_VAR 0 9
54134: NOT
54135: IFFALSE 54139
// continue ;
54137: GO 54112
// if weapon in weapons then
54139: LD_VAR 0 8
54143: PUSH
54144: LD_VAR 0 9
54148: IN
54149: IFFALSE 54176
// begin result := [ i , weapon ] ;
54151: LD_ADDR_VAR 0 3
54155: PUSH
54156: LD_VAR 0 4
54160: PUSH
54161: LD_VAR 0 8
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: ST_TO_ADDR
// exit ;
54170: POP
54171: POP
54172: POP
54173: POP
54174: GO 54184
// end ; end ;
54176: GO 54112
54178: POP
54179: POP
// end ;
54180: GO 53998
54182: POP
54183: POP
// end ;
54184: LD_VAR 0 3
54188: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54189: LD_INT 0
54191: PPUSH
// if not side or side > 8 then
54192: LD_VAR 0 3
54196: NOT
54197: IFTRUE 54209
54199: PUSH
54200: LD_VAR 0 3
54204: PUSH
54205: LD_INT 8
54207: GREATER
54208: OR
54209: IFFALSE 54213
// exit ;
54211: GO 54272
// if not range then
54213: LD_VAR 0 4
54217: NOT
54218: IFFALSE 54229
// range := - 12 ;
54220: LD_ADDR_VAR 0 4
54224: PUSH
54225: LD_INT 12
54227: NEG
54228: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54229: LD_VAR 0 1
54233: PPUSH
54234: LD_VAR 0 2
54238: PPUSH
54239: LD_VAR 0 3
54243: PPUSH
54244: LD_VAR 0 4
54248: PPUSH
54249: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54253: LD_VAR 0 1
54257: PPUSH
54258: LD_VAR 0 2
54262: PPUSH
54263: LD_VAR 0 3
54267: PPUSH
54268: CALL_OW 331
// end ;
54272: LD_VAR 0 5
54276: RET
// export function Video ( mode ) ; begin
54277: LD_INT 0
54279: PPUSH
// ingame_video = mode ;
54280: LD_ADDR_OWVAR 52
54284: PUSH
54285: LD_VAR 0 1
54289: ST_TO_ADDR
// interface_hidden = mode ;
54290: LD_ADDR_OWVAR 54
54294: PUSH
54295: LD_VAR 0 1
54299: ST_TO_ADDR
// end ;
54300: LD_VAR 0 2
54304: RET
// export function Join ( array , element ) ; begin
54305: LD_INT 0
54307: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: LD_VAR 0 1
54317: PPUSH
54318: LD_VAR 0 1
54322: PUSH
54323: LD_INT 1
54325: PLUS
54326: PPUSH
54327: LD_VAR 0 2
54331: PPUSH
54332: CALL_OW 1
54336: ST_TO_ADDR
// end ;
54337: LD_VAR 0 3
54341: RET
// export function JoinUnion ( array , element ) ; begin
54342: LD_INT 0
54344: PPUSH
// result := array union element ;
54345: LD_ADDR_VAR 0 3
54349: PUSH
54350: LD_VAR 0 1
54354: PUSH
54355: LD_VAR 0 2
54359: UNION
54360: ST_TO_ADDR
// end ;
54361: LD_VAR 0 3
54365: RET
// export function GetBehemoths ( side ) ; begin
54366: LD_INT 0
54368: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54369: LD_ADDR_VAR 0 2
54373: PUSH
54374: LD_INT 22
54376: PUSH
54377: LD_VAR 0 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 31
54388: PUSH
54389: LD_INT 25
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PPUSH
54400: CALL_OW 69
54404: ST_TO_ADDR
// end ;
54405: LD_VAR 0 2
54409: RET
// export function Shuffle ( array ) ; var i , index ; begin
54410: LD_INT 0
54412: PPUSH
54413: PPUSH
54414: PPUSH
// result := [ ] ;
54415: LD_ADDR_VAR 0 2
54419: PUSH
54420: EMPTY
54421: ST_TO_ADDR
// if not array then
54422: LD_VAR 0 1
54426: NOT
54427: IFFALSE 54431
// exit ;
54429: GO 54530
// Randomize ;
54431: CALL_OW 10
// for i = array downto 1 do
54435: LD_ADDR_VAR 0 3
54439: PUSH
54440: DOUBLE
54441: LD_VAR 0 1
54445: INC
54446: ST_TO_ADDR
54447: LD_INT 1
54449: PUSH
54450: FOR_DOWNTO
54451: IFFALSE 54528
// begin index := rand ( 1 , array ) ;
54453: LD_ADDR_VAR 0 4
54457: PUSH
54458: LD_INT 1
54460: PPUSH
54461: LD_VAR 0 1
54465: PPUSH
54466: CALL_OW 12
54470: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54471: LD_ADDR_VAR 0 2
54475: PUSH
54476: LD_VAR 0 2
54480: PPUSH
54481: LD_VAR 0 2
54485: PUSH
54486: LD_INT 1
54488: PLUS
54489: PPUSH
54490: LD_VAR 0 1
54494: PUSH
54495: LD_VAR 0 4
54499: ARRAY
54500: PPUSH
54501: CALL_OW 2
54505: ST_TO_ADDR
// array := Delete ( array , index ) ;
54506: LD_ADDR_VAR 0 1
54510: PUSH
54511: LD_VAR 0 1
54515: PPUSH
54516: LD_VAR 0 4
54520: PPUSH
54521: CALL_OW 3
54525: ST_TO_ADDR
// end ;
54526: GO 54450
54528: POP
54529: POP
// end ;
54530: LD_VAR 0 2
54534: RET
// export function GetBaseMaterials ( base ) ; begin
54535: LD_INT 0
54537: PPUSH
// result := [ 0 , 0 , 0 ] ;
54538: LD_ADDR_VAR 0 2
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// if not base then
54557: LD_VAR 0 1
54561: NOT
54562: IFFALSE 54566
// exit ;
54564: GO 54615
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54566: LD_ADDR_VAR 0 2
54570: PUSH
54571: LD_VAR 0 1
54575: PPUSH
54576: LD_INT 1
54578: PPUSH
54579: CALL_OW 275
54583: PUSH
54584: LD_VAR 0 1
54588: PPUSH
54589: LD_INT 2
54591: PPUSH
54592: CALL_OW 275
54596: PUSH
54597: LD_VAR 0 1
54601: PPUSH
54602: LD_INT 3
54604: PPUSH
54605: CALL_OW 275
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// end ;
54615: LD_VAR 0 2
54619: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54620: LD_INT 0
54622: PPUSH
54623: PPUSH
// result := array ;
54624: LD_ADDR_VAR 0 3
54628: PUSH
54629: LD_VAR 0 1
54633: ST_TO_ADDR
// if size >= result then
54634: LD_VAR 0 2
54638: PUSH
54639: LD_VAR 0 3
54643: GREATEREQUAL
54644: IFFALSE 54648
// exit ;
54646: GO 54698
// if size then
54648: LD_VAR 0 2
54652: IFFALSE 54698
// for i := array downto size do
54654: LD_ADDR_VAR 0 4
54658: PUSH
54659: DOUBLE
54660: LD_VAR 0 1
54664: INC
54665: ST_TO_ADDR
54666: LD_VAR 0 2
54670: PUSH
54671: FOR_DOWNTO
54672: IFFALSE 54696
// result := Delete ( result , result ) ;
54674: LD_ADDR_VAR 0 3
54678: PUSH
54679: LD_VAR 0 3
54683: PPUSH
54684: LD_VAR 0 3
54688: PPUSH
54689: CALL_OW 3
54693: ST_TO_ADDR
54694: GO 54671
54696: POP
54697: POP
// end ;
54698: LD_VAR 0 3
54702: RET
// export function ComExit ( unit ) ; var tmp ; begin
54703: LD_INT 0
54705: PPUSH
54706: PPUSH
// if not IsInUnit ( unit ) then
54707: LD_VAR 0 1
54711: PPUSH
54712: CALL_OW 310
54716: NOT
54717: IFFALSE 54721
// exit ;
54719: GO 54781
// tmp := IsInUnit ( unit ) ;
54721: LD_ADDR_VAR 0 3
54725: PUSH
54726: LD_VAR 0 1
54730: PPUSH
54731: CALL_OW 310
54735: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54736: LD_VAR 0 3
54740: PPUSH
54741: CALL_OW 247
54745: PUSH
54746: LD_INT 2
54748: EQUAL
54749: IFFALSE 54762
// ComExitVehicle ( unit ) else
54751: LD_VAR 0 1
54755: PPUSH
54756: CALL_OW 121
54760: GO 54771
// ComExitBuilding ( unit ) ;
54762: LD_VAR 0 1
54766: PPUSH
54767: CALL_OW 122
// result := tmp ;
54771: LD_ADDR_VAR 0 2
54775: PUSH
54776: LD_VAR 0 3
54780: ST_TO_ADDR
// end ;
54781: LD_VAR 0 2
54785: RET
// export function ComExitAll ( units ) ; var i ; begin
54786: LD_INT 0
54788: PPUSH
54789: PPUSH
// if not units then
54790: LD_VAR 0 1
54794: NOT
54795: IFFALSE 54799
// exit ;
54797: GO 54825
// for i in units do
54799: LD_ADDR_VAR 0 3
54803: PUSH
54804: LD_VAR 0 1
54808: PUSH
54809: FOR_IN
54810: IFFALSE 54823
// ComExit ( i ) ;
54812: LD_VAR 0 3
54816: PPUSH
54817: CALL 54703 0 1
54821: GO 54809
54823: POP
54824: POP
// end ;
54825: LD_VAR 0 2
54829: RET
// export function ResetHc ; begin
54830: LD_INT 0
54832: PPUSH
// InitHc ;
54833: CALL_OW 19
// hc_importance := 0 ;
54837: LD_ADDR_OWVAR 32
54841: PUSH
54842: LD_INT 0
54844: ST_TO_ADDR
// end ;
54845: LD_VAR 0 1
54849: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54850: LD_INT 0
54852: PPUSH
54853: PPUSH
54854: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54855: LD_ADDR_VAR 0 6
54859: PUSH
54860: LD_VAR 0 1
54864: PUSH
54865: LD_VAR 0 3
54869: PLUS
54870: PUSH
54871: LD_INT 2
54873: DIV
54874: ST_TO_ADDR
// if _x < 0 then
54875: LD_VAR 0 6
54879: PUSH
54880: LD_INT 0
54882: LESS
54883: IFFALSE 54900
// _x := _x * - 1 ;
54885: LD_ADDR_VAR 0 6
54889: PUSH
54890: LD_VAR 0 6
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: MUL
54899: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54900: LD_ADDR_VAR 0 7
54904: PUSH
54905: LD_VAR 0 2
54909: PUSH
54910: LD_VAR 0 4
54914: PLUS
54915: PUSH
54916: LD_INT 2
54918: DIV
54919: ST_TO_ADDR
// if _y < 0 then
54920: LD_VAR 0 7
54924: PUSH
54925: LD_INT 0
54927: LESS
54928: IFFALSE 54945
// _y := _y * - 1 ;
54930: LD_ADDR_VAR 0 7
54934: PUSH
54935: LD_VAR 0 7
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: MUL
54944: ST_TO_ADDR
// result := [ _x , _y ] ;
54945: LD_ADDR_VAR 0 5
54949: PUSH
54950: LD_VAR 0 6
54954: PUSH
54955: LD_VAR 0 7
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: ST_TO_ADDR
// end ;
54964: LD_VAR 0 5
54968: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54969: LD_INT 0
54971: PPUSH
54972: PPUSH
54973: PPUSH
54974: PPUSH
// task := GetTaskList ( unit ) ;
54975: LD_ADDR_VAR 0 7
54979: PUSH
54980: LD_VAR 0 1
54984: PPUSH
54985: CALL_OW 437
54989: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54990: LD_VAR 0 7
54994: NOT
54995: IFFALSE 55014
54997: PUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: LD_VAR 0 2
55007: PPUSH
55008: CALL_OW 308
55012: NOT
55013: AND
55014: IFFALSE 55018
// exit ;
55016: GO 55136
// if IsInArea ( unit , area ) then
55018: LD_VAR 0 1
55022: PPUSH
55023: LD_VAR 0 2
55027: PPUSH
55028: CALL_OW 308
55032: IFFALSE 55050
// begin ComMoveToArea ( unit , goAway ) ;
55034: LD_VAR 0 1
55038: PPUSH
55039: LD_VAR 0 3
55043: PPUSH
55044: CALL_OW 113
// exit ;
55048: GO 55136
// end ; if task [ 1 ] [ 1 ] <> M then
55050: LD_VAR 0 7
55054: PUSH
55055: LD_INT 1
55057: ARRAY
55058: PUSH
55059: LD_INT 1
55061: ARRAY
55062: PUSH
55063: LD_STRING M
55065: NONEQUAL
55066: IFFALSE 55070
// exit ;
55068: GO 55136
// x := task [ 1 ] [ 2 ] ;
55070: LD_ADDR_VAR 0 5
55074: PUSH
55075: LD_VAR 0 7
55079: PUSH
55080: LD_INT 1
55082: ARRAY
55083: PUSH
55084: LD_INT 2
55086: ARRAY
55087: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55088: LD_ADDR_VAR 0 6
55092: PUSH
55093: LD_VAR 0 7
55097: PUSH
55098: LD_INT 1
55100: ARRAY
55101: PUSH
55102: LD_INT 3
55104: ARRAY
55105: ST_TO_ADDR
// if InArea ( x , y , area ) then
55106: LD_VAR 0 5
55110: PPUSH
55111: LD_VAR 0 6
55115: PPUSH
55116: LD_VAR 0 2
55120: PPUSH
55121: CALL_OW 309
55125: IFFALSE 55136
// ComStop ( unit ) ;
55127: LD_VAR 0 1
55131: PPUSH
55132: CALL_OW 141
// end ;
55136: LD_VAR 0 4
55140: RET
// export function Abs ( value ) ; begin
55141: LD_INT 0
55143: PPUSH
// result := value ;
55144: LD_ADDR_VAR 0 2
55148: PUSH
55149: LD_VAR 0 1
55153: ST_TO_ADDR
// if value < 0 then
55154: LD_VAR 0 1
55158: PUSH
55159: LD_INT 0
55161: LESS
55162: IFFALSE 55179
// result := value * - 1 ;
55164: LD_ADDR_VAR 0 2
55168: PUSH
55169: LD_VAR 0 1
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: MUL
55178: ST_TO_ADDR
// end ;
55179: LD_VAR 0 2
55183: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55184: LD_INT 0
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
55192: PPUSH
55193: PPUSH
// if not unit or not building then
55194: LD_VAR 0 1
55198: NOT
55199: IFTRUE 55208
55201: PUSH
55202: LD_VAR 0 2
55206: NOT
55207: OR
55208: IFFALSE 55212
// exit ;
55210: GO 55440
// x := GetX ( building ) ;
55212: LD_ADDR_VAR 0 4
55216: PUSH
55217: LD_VAR 0 2
55221: PPUSH
55222: CALL_OW 250
55226: ST_TO_ADDR
// y := GetY ( building ) ;
55227: LD_ADDR_VAR 0 6
55231: PUSH
55232: LD_VAR 0 2
55236: PPUSH
55237: CALL_OW 251
55241: ST_TO_ADDR
// d := GetDir ( building ) ;
55242: LD_ADDR_VAR 0 8
55246: PUSH
55247: LD_VAR 0 2
55251: PPUSH
55252: CALL_OW 254
55256: ST_TO_ADDR
// r := 4 ;
55257: LD_ADDR_VAR 0 9
55261: PUSH
55262: LD_INT 4
55264: ST_TO_ADDR
// for i := 1 to 5 do
55265: LD_ADDR_VAR 0 10
55269: PUSH
55270: DOUBLE
55271: LD_INT 1
55273: DEC
55274: ST_TO_ADDR
55275: LD_INT 5
55277: PUSH
55278: FOR_TO
55279: IFFALSE 55438
// begin _x := ShiftX ( x , d , r + i ) ;
55281: LD_ADDR_VAR 0 5
55285: PUSH
55286: LD_VAR 0 4
55290: PPUSH
55291: LD_VAR 0 8
55295: PPUSH
55296: LD_VAR 0 9
55300: PUSH
55301: LD_VAR 0 10
55305: PLUS
55306: PPUSH
55307: CALL_OW 272
55311: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55312: LD_ADDR_VAR 0 7
55316: PUSH
55317: LD_VAR 0 6
55321: PPUSH
55322: LD_VAR 0 8
55326: PPUSH
55327: LD_VAR 0 9
55331: PUSH
55332: LD_VAR 0 10
55336: PLUS
55337: PPUSH
55338: CALL_OW 273
55342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55343: LD_VAR 0 5
55347: PPUSH
55348: LD_VAR 0 7
55352: PPUSH
55353: CALL_OW 488
55357: IFFALSE 55392
55359: PUSH
55360: LD_VAR 0 5
55364: PPUSH
55365: LD_VAR 0 7
55369: PPUSH
55370: CALL_OW 428
55374: PPUSH
55375: CALL_OW 247
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: IN
55390: NOT
55391: AND
55392: IFFALSE 55436
// begin ComMoveXY ( unit , _x , _y ) ;
55394: LD_VAR 0 1
55398: PPUSH
55399: LD_VAR 0 5
55403: PPUSH
55404: LD_VAR 0 7
55408: PPUSH
55409: CALL_OW 111
// result := [ _x , _y ] ;
55413: LD_ADDR_VAR 0 3
55417: PUSH
55418: LD_VAR 0 5
55422: PUSH
55423: LD_VAR 0 7
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// exit ;
55432: POP
55433: POP
55434: GO 55440
// end ; end ;
55436: GO 55278
55438: POP
55439: POP
// end ;
55440: LD_VAR 0 3
55444: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55445: LD_INT 0
55447: PPUSH
55448: PPUSH
55449: PPUSH
// result := 0 ;
55450: LD_ADDR_VAR 0 3
55454: PUSH
55455: LD_INT 0
55457: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55458: LD_VAR 0 1
55462: PUSH
55463: LD_INT 0
55465: LESS
55466: IFTRUE 55478
55468: PUSH
55469: LD_VAR 0 1
55473: PUSH
55474: LD_INT 8
55476: GREATER
55477: OR
55478: IFTRUE 55490
55480: PUSH
55481: LD_VAR 0 2
55485: PUSH
55486: LD_INT 0
55488: LESS
55489: OR
55490: IFTRUE 55502
55492: PUSH
55493: LD_VAR 0 2
55497: PUSH
55498: LD_INT 8
55500: GREATER
55501: OR
55502: IFFALSE 55506
// exit ;
55504: GO 55581
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55506: LD_ADDR_VAR 0 4
55510: PUSH
55511: LD_INT 22
55513: PUSH
55514: LD_VAR 0 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PPUSH
55523: CALL_OW 69
55527: PUSH
55528: FOR_IN
55529: IFFALSE 55579
// begin un := UnitShoot ( i ) ;
55531: LD_ADDR_VAR 0 5
55535: PUSH
55536: LD_VAR 0 4
55540: PPUSH
55541: CALL_OW 504
55545: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55546: LD_VAR 0 5
55550: PPUSH
55551: CALL_OW 255
55555: PUSH
55556: LD_VAR 0 1
55560: EQUAL
55561: IFFALSE 55577
// begin result := un ;
55563: LD_ADDR_VAR 0 3
55567: PUSH
55568: LD_VAR 0 5
55572: ST_TO_ADDR
// exit ;
55573: POP
55574: POP
55575: GO 55581
// end ; end ;
55577: GO 55528
55579: POP
55580: POP
// end ;
55581: LD_VAR 0 3
55585: RET
// export function GetCargoBay ( units ) ; begin
55586: LD_INT 0
55588: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55589: LD_ADDR_VAR 0 2
55593: PUSH
55594: LD_VAR 0 1
55598: PPUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 34
55604: PUSH
55605: LD_INT 12
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 34
55614: PUSH
55615: LD_INT 51
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 34
55624: PUSH
55625: LD_INT 32
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 34
55634: PUSH
55635: LD_INT 89
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: PPUSH
55649: CALL_OW 72
55653: ST_TO_ADDR
// end ;
55654: LD_VAR 0 2
55658: RET
// export function Negate ( value ) ; begin
55659: LD_INT 0
55661: PPUSH
// result := not value ;
55662: LD_ADDR_VAR 0 2
55666: PUSH
55667: LD_VAR 0 1
55671: NOT
55672: ST_TO_ADDR
// end ;
55673: LD_VAR 0 2
55677: RET
// export function Inc ( value ) ; begin
55678: LD_INT 0
55680: PPUSH
// result := value + 1 ;
55681: LD_ADDR_VAR 0 2
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: LD_INT 1
55693: PLUS
55694: ST_TO_ADDR
// end ;
55695: LD_VAR 0 2
55699: RET
// export function Dec ( value ) ; begin
55700: LD_INT 0
55702: PPUSH
// result := value - 1 ;
55703: LD_ADDR_VAR 0 2
55707: PUSH
55708: LD_VAR 0 1
55712: PUSH
55713: LD_INT 1
55715: MINUS
55716: ST_TO_ADDR
// end ;
55717: LD_VAR 0 2
55721: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55722: LD_INT 0
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55732: LD_VAR 0 1
55736: PPUSH
55737: LD_VAR 0 2
55741: PPUSH
55742: CALL_OW 488
55746: NOT
55747: IFTRUE 55766
55749: PUSH
55750: LD_VAR 0 3
55754: PPUSH
55755: LD_VAR 0 4
55759: PPUSH
55760: CALL_OW 488
55764: NOT
55765: OR
55766: IFFALSE 55779
// begin result := - 1 ;
55768: LD_ADDR_VAR 0 5
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: ST_TO_ADDR
// exit ;
55777: GO 56014
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55779: LD_ADDR_VAR 0 12
55783: PUSH
55784: LD_VAR 0 1
55788: PPUSH
55789: LD_VAR 0 2
55793: PPUSH
55794: LD_VAR 0 3
55798: PPUSH
55799: LD_VAR 0 4
55803: PPUSH
55804: CALL 54850 0 4
55808: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55809: LD_ADDR_VAR 0 11
55813: PUSH
55814: LD_VAR 0 1
55818: PPUSH
55819: LD_VAR 0 2
55823: PPUSH
55824: LD_VAR 0 12
55828: PUSH
55829: LD_INT 1
55831: ARRAY
55832: PPUSH
55833: LD_VAR 0 12
55837: PUSH
55838: LD_INT 2
55840: ARRAY
55841: PPUSH
55842: CALL_OW 298
55846: ST_TO_ADDR
// distance := 9999 ;
55847: LD_ADDR_VAR 0 10
55851: PUSH
55852: LD_INT 9999
55854: ST_TO_ADDR
// for i := 0 to 5 do
55855: LD_ADDR_VAR 0 6
55859: PUSH
55860: DOUBLE
55861: LD_INT 0
55863: DEC
55864: ST_TO_ADDR
55865: LD_INT 5
55867: PUSH
55868: FOR_TO
55869: IFFALSE 56012
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55871: LD_ADDR_VAR 0 7
55875: PUSH
55876: LD_VAR 0 1
55880: PPUSH
55881: LD_VAR 0 6
55885: PPUSH
55886: LD_VAR 0 11
55890: PPUSH
55891: CALL_OW 272
55895: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55896: LD_ADDR_VAR 0 8
55900: PUSH
55901: LD_VAR 0 2
55905: PPUSH
55906: LD_VAR 0 6
55910: PPUSH
55911: LD_VAR 0 11
55915: PPUSH
55916: CALL_OW 273
55920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55921: LD_VAR 0 7
55925: PPUSH
55926: LD_VAR 0 8
55930: PPUSH
55931: CALL_OW 488
55935: NOT
55936: IFFALSE 55940
// continue ;
55938: GO 55868
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55940: LD_ADDR_VAR 0 9
55944: PUSH
55945: LD_VAR 0 12
55949: PUSH
55950: LD_INT 1
55952: ARRAY
55953: PPUSH
55954: LD_VAR 0 12
55958: PUSH
55959: LD_INT 2
55961: ARRAY
55962: PPUSH
55963: LD_VAR 0 7
55967: PPUSH
55968: LD_VAR 0 8
55972: PPUSH
55973: CALL_OW 298
55977: ST_TO_ADDR
// if tmp < distance then
55978: LD_VAR 0 9
55982: PUSH
55983: LD_VAR 0 10
55987: LESS
55988: IFFALSE 56010
// begin result := i ;
55990: LD_ADDR_VAR 0 5
55994: PUSH
55995: LD_VAR 0 6
55999: ST_TO_ADDR
// distance := tmp ;
56000: LD_ADDR_VAR 0 10
56004: PUSH
56005: LD_VAR 0 9
56009: ST_TO_ADDR
// end ; end ;
56010: GO 55868
56012: POP
56013: POP
// end ;
56014: LD_VAR 0 5
56018: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56019: LD_INT 0
56021: PPUSH
56022: PPUSH
// if not driver or not IsInUnit ( driver ) then
56023: LD_VAR 0 1
56027: NOT
56028: IFTRUE 56042
56030: PUSH
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 310
56040: NOT
56041: OR
56042: IFFALSE 56046
// exit ;
56044: GO 56136
// vehicle := IsInUnit ( driver ) ;
56046: LD_ADDR_VAR 0 3
56050: PUSH
56051: LD_VAR 0 1
56055: PPUSH
56056: CALL_OW 310
56060: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56061: LD_VAR 0 1
56065: PPUSH
56066: LD_STRING \
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 0
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: PUSH
56096: LD_STRING E
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_VAR 0 3
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PPUSH
56132: CALL_OW 446
// end ;
56136: LD_VAR 0 2
56140: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56141: LD_INT 0
56143: PPUSH
56144: PPUSH
// if not driver or not IsInUnit ( driver ) then
56145: LD_VAR 0 1
56149: NOT
56150: IFTRUE 56164
56152: PUSH
56153: LD_VAR 0 1
56157: PPUSH
56158: CALL_OW 310
56162: NOT
56163: OR
56164: IFFALSE 56168
// exit ;
56166: GO 56258
// vehicle := IsInUnit ( driver ) ;
56168: LD_ADDR_VAR 0 3
56172: PUSH
56173: LD_VAR 0 1
56177: PPUSH
56178: CALL_OW 310
56182: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56183: LD_VAR 0 1
56187: PPUSH
56188: LD_STRING \
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: PUSH
56218: LD_STRING E
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_VAR 0 3
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PPUSH
56254: CALL_OW 447
// end ;
56258: LD_VAR 0 2
56262: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
56267: PPUSH
// tmp := [ ] ;
56268: LD_ADDR_VAR 0 5
56272: PUSH
56273: EMPTY
56274: ST_TO_ADDR
// for i in units do
56275: LD_ADDR_VAR 0 4
56279: PUSH
56280: LD_VAR 0 1
56284: PUSH
56285: FOR_IN
56286: IFFALSE 56324
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56288: LD_ADDR_VAR 0 5
56292: PUSH
56293: LD_VAR 0 5
56297: PPUSH
56298: LD_VAR 0 5
56302: PUSH
56303: LD_INT 1
56305: PLUS
56306: PPUSH
56307: LD_VAR 0 4
56311: PPUSH
56312: CALL_OW 256
56316: PPUSH
56317: CALL_OW 2
56321: ST_TO_ADDR
56322: GO 56285
56324: POP
56325: POP
// if not tmp then
56326: LD_VAR 0 5
56330: NOT
56331: IFFALSE 56335
// exit ;
56333: GO 56383
// if asc then
56335: LD_VAR 0 2
56339: IFFALSE 56363
// result := SortListByListAsc ( units , tmp ) else
56341: LD_ADDR_VAR 0 3
56345: PUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: LD_VAR 0 5
56355: PPUSH
56356: CALL_OW 76
56360: ST_TO_ADDR
56361: GO 56383
// result := SortListByListDesc ( units , tmp ) ;
56363: LD_ADDR_VAR 0 3
56367: PUSH
56368: LD_VAR 0 1
56372: PPUSH
56373: LD_VAR 0 5
56377: PPUSH
56378: CALL_OW 77
56382: ST_TO_ADDR
// end ;
56383: LD_VAR 0 3
56387: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56388: LD_INT 0
56390: PPUSH
56391: PPUSH
// task := GetTaskList ( mech ) ;
56392: LD_ADDR_VAR 0 4
56396: PUSH
56397: LD_VAR 0 1
56401: PPUSH
56402: CALL_OW 437
56406: ST_TO_ADDR
// if not task then
56407: LD_VAR 0 4
56411: NOT
56412: IFFALSE 56416
// exit ;
56414: GO 56460
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56416: LD_ADDR_VAR 0 3
56420: PUSH
56421: LD_VAR 0 4
56425: PUSH
56426: LD_INT 1
56428: ARRAY
56429: PUSH
56430: LD_INT 1
56432: ARRAY
56433: PUSH
56434: LD_STRING r
56436: EQUAL
56437: IFFALSE 56459
56439: PUSH
56440: LD_VAR 0 4
56444: PUSH
56445: LD_INT 1
56447: ARRAY
56448: PUSH
56449: LD_INT 4
56451: ARRAY
56452: PUSH
56453: LD_VAR 0 2
56457: EQUAL
56458: AND
56459: ST_TO_ADDR
// end ;
56460: LD_VAR 0 3
56464: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56465: LD_INT 0
56467: PPUSH
// SetDir ( unit , d ) ;
56468: LD_VAR 0 1
56472: PPUSH
56473: LD_VAR 0 4
56477: PPUSH
56478: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56482: LD_ADDR_VAR 0 6
56486: PUSH
56487: LD_VAR 0 1
56491: PPUSH
56492: LD_VAR 0 2
56496: PPUSH
56497: LD_VAR 0 3
56501: PPUSH
56502: LD_VAR 0 5
56506: PPUSH
56507: CALL_OW 48
56511: ST_TO_ADDR
// end ;
56512: LD_VAR 0 6
56516: RET
// export function ToNaturalNumber ( number ) ; begin
56517: LD_INT 0
56519: PPUSH
// result := number div 1 ;
56520: LD_ADDR_VAR 0 2
56524: PUSH
56525: LD_VAR 0 1
56529: PUSH
56530: LD_INT 1
56532: DIV
56533: ST_TO_ADDR
// if number < 0 then
56534: LD_VAR 0 1
56538: PUSH
56539: LD_INT 0
56541: LESS
56542: IFFALSE 56552
// result := 0 ;
56544: LD_ADDR_VAR 0 2
56548: PUSH
56549: LD_INT 0
56551: ST_TO_ADDR
// end ;
56552: LD_VAR 0 2
56556: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56557: LD_INT 0
56559: PPUSH
56560: PPUSH
56561: PPUSH
// if not buildings then
56562: LD_VAR 0 1
56566: NOT
56567: IFFALSE 56571
// exit ;
56569: GO 56686
// tmp := [ ] ;
56571: LD_ADDR_VAR 0 5
56575: PUSH
56576: EMPTY
56577: ST_TO_ADDR
// for b in buildings do
56578: LD_ADDR_VAR 0 4
56582: PUSH
56583: LD_VAR 0 1
56587: PUSH
56588: FOR_IN
56589: IFFALSE 56627
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56591: LD_ADDR_VAR 0 5
56595: PUSH
56596: LD_VAR 0 5
56600: PPUSH
56601: LD_VAR 0 5
56605: PUSH
56606: LD_INT 1
56608: PLUS
56609: PPUSH
56610: LD_VAR 0 4
56614: PPUSH
56615: CALL_OW 266
56619: PPUSH
56620: CALL_OW 1
56624: ST_TO_ADDR
56625: GO 56588
56627: POP
56628: POP
// if not tmp then
56629: LD_VAR 0 5
56633: NOT
56634: IFFALSE 56638
// exit ;
56636: GO 56686
// if asc then
56638: LD_VAR 0 2
56642: IFFALSE 56666
// result := SortListByListAsc ( buildings , tmp ) else
56644: LD_ADDR_VAR 0 3
56648: PUSH
56649: LD_VAR 0 1
56653: PPUSH
56654: LD_VAR 0 5
56658: PPUSH
56659: CALL_OW 76
56663: ST_TO_ADDR
56664: GO 56686
// result := SortListByListDesc ( buildings , tmp ) ;
56666: LD_ADDR_VAR 0 3
56670: PUSH
56671: LD_VAR 0 1
56675: PPUSH
56676: LD_VAR 0 5
56680: PPUSH
56681: CALL_OW 77
56685: ST_TO_ADDR
// end ;
56686: LD_VAR 0 3
56690: RET
// export function SortByClass ( units , class ) ; var un ; begin
56691: LD_INT 0
56693: PPUSH
56694: PPUSH
// if not units or not class then
56695: LD_VAR 0 1
56699: NOT
56700: IFTRUE 56709
56702: PUSH
56703: LD_VAR 0 2
56707: NOT
56708: OR
56709: IFFALSE 56713
// exit ;
56711: GO 56808
// result := [ ] ;
56713: LD_ADDR_VAR 0 3
56717: PUSH
56718: EMPTY
56719: ST_TO_ADDR
// for un in units do
56720: LD_ADDR_VAR 0 4
56724: PUSH
56725: LD_VAR 0 1
56729: PUSH
56730: FOR_IN
56731: IFFALSE 56806
// if GetClass ( un ) = class then
56733: LD_VAR 0 4
56737: PPUSH
56738: CALL_OW 257
56742: PUSH
56743: LD_VAR 0 2
56747: EQUAL
56748: IFFALSE 56775
// result := Insert ( result , 1 , un ) else
56750: LD_ADDR_VAR 0 3
56754: PUSH
56755: LD_VAR 0 3
56759: PPUSH
56760: LD_INT 1
56762: PPUSH
56763: LD_VAR 0 4
56767: PPUSH
56768: CALL_OW 2
56772: ST_TO_ADDR
56773: GO 56804
// result := Replace ( result , result + 1 , un ) ;
56775: LD_ADDR_VAR 0 3
56779: PUSH
56780: LD_VAR 0 3
56784: PPUSH
56785: LD_VAR 0 3
56789: PUSH
56790: LD_INT 1
56792: PLUS
56793: PPUSH
56794: LD_VAR 0 4
56798: PPUSH
56799: CALL_OW 1
56803: ST_TO_ADDR
56804: GO 56730
56806: POP
56807: POP
// end ;
56808: LD_VAR 0 3
56812: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56813: LD_INT 0
56815: PPUSH
56816: PPUSH
56817: PPUSH
56818: PPUSH
56819: PPUSH
56820: PPUSH
56821: PPUSH
// result := [ ] ;
56822: LD_ADDR_VAR 0 4
56826: PUSH
56827: EMPTY
56828: ST_TO_ADDR
// if x - r < 0 then
56829: LD_VAR 0 1
56833: PUSH
56834: LD_VAR 0 3
56838: MINUS
56839: PUSH
56840: LD_INT 0
56842: LESS
56843: IFFALSE 56855
// min_x := 0 else
56845: LD_ADDR_VAR 0 8
56849: PUSH
56850: LD_INT 0
56852: ST_TO_ADDR
56853: GO 56871
// min_x := x - r ;
56855: LD_ADDR_VAR 0 8
56859: PUSH
56860: LD_VAR 0 1
56864: PUSH
56865: LD_VAR 0 3
56869: MINUS
56870: ST_TO_ADDR
// if y - r < 0 then
56871: LD_VAR 0 2
56875: PUSH
56876: LD_VAR 0 3
56880: MINUS
56881: PUSH
56882: LD_INT 0
56884: LESS
56885: IFFALSE 56897
// min_y := 0 else
56887: LD_ADDR_VAR 0 7
56891: PUSH
56892: LD_INT 0
56894: ST_TO_ADDR
56895: GO 56913
// min_y := y - r ;
56897: LD_ADDR_VAR 0 7
56901: PUSH
56902: LD_VAR 0 2
56906: PUSH
56907: LD_VAR 0 3
56911: MINUS
56912: ST_TO_ADDR
// max_x := x + r ;
56913: LD_ADDR_VAR 0 9
56917: PUSH
56918: LD_VAR 0 1
56922: PUSH
56923: LD_VAR 0 3
56927: PLUS
56928: ST_TO_ADDR
// max_y := y + r ;
56929: LD_ADDR_VAR 0 10
56933: PUSH
56934: LD_VAR 0 2
56938: PUSH
56939: LD_VAR 0 3
56943: PLUS
56944: ST_TO_ADDR
// for _x = min_x to max_x do
56945: LD_ADDR_VAR 0 5
56949: PUSH
56950: DOUBLE
56951: LD_VAR 0 8
56955: DEC
56956: ST_TO_ADDR
56957: LD_VAR 0 9
56961: PUSH
56962: FOR_TO
56963: IFFALSE 57064
// for _y = min_y to max_y do
56965: LD_ADDR_VAR 0 6
56969: PUSH
56970: DOUBLE
56971: LD_VAR 0 7
56975: DEC
56976: ST_TO_ADDR
56977: LD_VAR 0 10
56981: PUSH
56982: FOR_TO
56983: IFFALSE 57060
// begin if not ValidHex ( _x , _y ) then
56985: LD_VAR 0 5
56989: PPUSH
56990: LD_VAR 0 6
56994: PPUSH
56995: CALL_OW 488
56999: NOT
57000: IFFALSE 57004
// continue ;
57002: GO 56982
// if GetResourceTypeXY ( _x , _y ) then
57004: LD_VAR 0 5
57008: PPUSH
57009: LD_VAR 0 6
57013: PPUSH
57014: CALL_OW 283
57018: IFFALSE 57058
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57020: LD_ADDR_VAR 0 4
57024: PUSH
57025: LD_VAR 0 4
57029: PPUSH
57030: LD_VAR 0 4
57034: PUSH
57035: LD_INT 1
57037: PLUS
57038: PPUSH
57039: LD_VAR 0 5
57043: PUSH
57044: LD_VAR 0 6
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PPUSH
57053: CALL_OW 1
57057: ST_TO_ADDR
// end ;
57058: GO 56982
57060: POP
57061: POP
57062: GO 56962
57064: POP
57065: POP
// end ;
57066: LD_VAR 0 4
57070: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57071: LD_INT 0
57073: PPUSH
57074: PPUSH
57075: PPUSH
57076: PPUSH
57077: PPUSH
57078: PPUSH
57079: PPUSH
57080: PPUSH
// if not units then
57081: LD_VAR 0 1
57085: NOT
57086: IFFALSE 57090
// exit ;
57088: GO 57622
// result := UnitFilter ( units , [ f_ok ] ) ;
57090: LD_ADDR_VAR 0 3
57094: PUSH
57095: LD_VAR 0 1
57099: PPUSH
57100: LD_INT 50
57102: PUSH
57103: EMPTY
57104: LIST
57105: PPUSH
57106: CALL_OW 72
57110: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57111: LD_ADDR_VAR 0 8
57115: PUSH
57116: LD_VAR 0 1
57120: PUSH
57121: LD_INT 1
57123: ARRAY
57124: PPUSH
57125: CALL_OW 255
57129: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57130: LD_ADDR_VAR 0 10
57134: PUSH
57135: LD_INT 29
57137: PUSH
57138: LD_INT 91
57140: PUSH
57141: LD_INT 49
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: ST_TO_ADDR
// if not result then
57149: LD_VAR 0 3
57153: NOT
57154: IFFALSE 57158
// exit ;
57156: GO 57622
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57158: LD_ADDR_VAR 0 5
57162: PUSH
57163: LD_INT 81
57165: PUSH
57166: LD_VAR 0 8
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PPUSH
57175: CALL_OW 69
57179: ST_TO_ADDR
// for i in result do
57180: LD_ADDR_VAR 0 4
57184: PUSH
57185: LD_VAR 0 3
57189: PUSH
57190: FOR_IN
57191: IFFALSE 57620
// begin tag := GetTag ( i ) + 1 ;
57193: LD_ADDR_VAR 0 9
57197: PUSH
57198: LD_VAR 0 4
57202: PPUSH
57203: CALL_OW 110
57207: PUSH
57208: LD_INT 1
57210: PLUS
57211: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57212: LD_ADDR_VAR 0 7
57216: PUSH
57217: LD_VAR 0 4
57221: PPUSH
57222: CALL_OW 250
57226: PPUSH
57227: LD_VAR 0 4
57231: PPUSH
57232: CALL_OW 251
57236: PPUSH
57237: LD_INT 4
57239: PPUSH
57240: CALL 56813 0 3
57244: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57245: LD_VAR 0 4
57249: PPUSH
57250: CALL_OW 247
57254: PUSH
57255: LD_INT 2
57257: EQUAL
57258: IFFALSE 57270
57260: PUSH
57261: LD_VAR 0 7
57265: PUSH
57266: LD_INT 2
57268: GREATER
57269: AND
57270: IFFALSE 57290
57272: PUSH
57273: LD_VAR 0 4
57277: PPUSH
57278: CALL_OW 264
57282: PUSH
57283: LD_VAR 0 10
57287: IN
57288: NOT
57289: AND
57290: IFFALSE 57329
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57292: LD_VAR 0 4
57296: PPUSH
57297: LD_VAR 0 7
57301: PUSH
57302: LD_INT 1
57304: ARRAY
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PPUSH
57310: LD_VAR 0 7
57314: PUSH
57315: LD_INT 1
57317: ARRAY
57318: PUSH
57319: LD_INT 2
57321: ARRAY
57322: PPUSH
57323: CALL_OW 116
57327: GO 57618
// if path > tag then
57329: LD_VAR 0 2
57333: PUSH
57334: LD_VAR 0 9
57338: GREATER
57339: IFFALSE 57547
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57341: LD_ADDR_VAR 0 6
57345: PUSH
57346: LD_VAR 0 5
57350: PPUSH
57351: LD_INT 91
57353: PUSH
57354: LD_VAR 0 4
57358: PUSH
57359: LD_INT 8
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: PPUSH
57367: CALL_OW 72
57371: ST_TO_ADDR
// if nearEnemy then
57372: LD_VAR 0 6
57376: IFFALSE 57445
// begin if GetWeapon ( i ) = ru_time_lapser then
57378: LD_VAR 0 4
57382: PPUSH
57383: CALL_OW 264
57387: PUSH
57388: LD_INT 49
57390: EQUAL
57391: IFFALSE 57419
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57393: LD_VAR 0 4
57397: PPUSH
57398: LD_VAR 0 6
57402: PPUSH
57403: LD_VAR 0 4
57407: PPUSH
57408: CALL_OW 74
57412: PPUSH
57413: CALL_OW 112
57417: GO 57443
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57419: LD_VAR 0 4
57423: PPUSH
57424: LD_VAR 0 6
57428: PPUSH
57429: LD_VAR 0 4
57433: PPUSH
57434: CALL_OW 74
57438: PPUSH
57439: CALL 58703 0 2
// end else
57443: GO 57545
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57445: LD_VAR 0 4
57449: PPUSH
57450: LD_VAR 0 2
57454: PUSH
57455: LD_VAR 0 9
57459: ARRAY
57460: PUSH
57461: LD_INT 1
57463: ARRAY
57464: PPUSH
57465: LD_VAR 0 2
57469: PUSH
57470: LD_VAR 0 9
57474: ARRAY
57475: PUSH
57476: LD_INT 2
57478: ARRAY
57479: PPUSH
57480: CALL_OW 297
57484: PUSH
57485: LD_INT 6
57487: GREATER
57488: IFFALSE 57531
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57490: LD_VAR 0 4
57494: PPUSH
57495: LD_VAR 0 2
57499: PUSH
57500: LD_VAR 0 9
57504: ARRAY
57505: PUSH
57506: LD_INT 1
57508: ARRAY
57509: PPUSH
57510: LD_VAR 0 2
57514: PUSH
57515: LD_VAR 0 9
57519: ARRAY
57520: PUSH
57521: LD_INT 2
57523: ARRAY
57524: PPUSH
57525: CALL_OW 114
57529: GO 57545
// SetTag ( i , tag ) ;
57531: LD_VAR 0 4
57535: PPUSH
57536: LD_VAR 0 9
57540: PPUSH
57541: CALL_OW 109
// end else
57545: GO 57618
// if enemy then
57547: LD_VAR 0 5
57551: IFFALSE 57618
// begin if GetWeapon ( i ) = ru_time_lapser then
57553: LD_VAR 0 4
57557: PPUSH
57558: CALL_OW 264
57562: PUSH
57563: LD_INT 49
57565: EQUAL
57566: IFFALSE 57594
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57568: LD_VAR 0 4
57572: PPUSH
57573: LD_VAR 0 5
57577: PPUSH
57578: LD_VAR 0 4
57582: PPUSH
57583: CALL_OW 74
57587: PPUSH
57588: CALL_OW 112
57592: GO 57618
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57594: LD_VAR 0 4
57598: PPUSH
57599: LD_VAR 0 5
57603: PPUSH
57604: LD_VAR 0 4
57608: PPUSH
57609: CALL_OW 74
57613: PPUSH
57614: CALL 58703 0 2
// end ; end ;
57618: GO 57190
57620: POP
57621: POP
// end ;
57622: LD_VAR 0 3
57626: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57627: LD_INT 0
57629: PPUSH
57630: PPUSH
57631: PPUSH
// if not unit or IsInUnit ( unit ) then
57632: LD_VAR 0 1
57636: NOT
57637: IFTRUE 57650
57639: PUSH
57640: LD_VAR 0 1
57644: PPUSH
57645: CALL_OW 310
57649: OR
57650: IFFALSE 57654
// exit ;
57652: GO 57745
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57654: LD_ADDR_VAR 0 4
57658: PUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: CALL_OW 250
57668: PPUSH
57669: LD_VAR 0 2
57673: PPUSH
57674: LD_INT 1
57676: PPUSH
57677: CALL_OW 272
57681: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57682: LD_ADDR_VAR 0 5
57686: PUSH
57687: LD_VAR 0 1
57691: PPUSH
57692: CALL_OW 251
57696: PPUSH
57697: LD_VAR 0 2
57701: PPUSH
57702: LD_INT 1
57704: PPUSH
57705: CALL_OW 273
57709: ST_TO_ADDR
// if ValidHex ( x , y ) then
57710: LD_VAR 0 4
57714: PPUSH
57715: LD_VAR 0 5
57719: PPUSH
57720: CALL_OW 488
57724: IFFALSE 57745
// ComTurnXY ( unit , x , y ) ;
57726: LD_VAR 0 1
57730: PPUSH
57731: LD_VAR 0 4
57735: PPUSH
57736: LD_VAR 0 5
57740: PPUSH
57741: CALL_OW 118
// end ;
57745: LD_VAR 0 3
57749: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57750: LD_INT 0
57752: PPUSH
57753: PPUSH
// result := false ;
57754: LD_ADDR_VAR 0 3
57758: PUSH
57759: LD_INT 0
57761: ST_TO_ADDR
// if not units then
57762: LD_VAR 0 2
57766: NOT
57767: IFFALSE 57771
// exit ;
57769: GO 57816
// for i in units do
57771: LD_ADDR_VAR 0 4
57775: PUSH
57776: LD_VAR 0 2
57780: PUSH
57781: FOR_IN
57782: IFFALSE 57814
// if See ( side , i ) then
57784: LD_VAR 0 1
57788: PPUSH
57789: LD_VAR 0 4
57793: PPUSH
57794: CALL_OW 292
57798: IFFALSE 57812
// begin result := true ;
57800: LD_ADDR_VAR 0 3
57804: PUSH
57805: LD_INT 1
57807: ST_TO_ADDR
// exit ;
57808: POP
57809: POP
57810: GO 57816
// end ;
57812: GO 57781
57814: POP
57815: POP
// end ;
57816: LD_VAR 0 3
57820: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57821: LD_INT 0
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
// if not unit or not points then
57827: LD_VAR 0 1
57831: NOT
57832: IFTRUE 57841
57834: PUSH
57835: LD_VAR 0 2
57839: NOT
57840: OR
57841: IFFALSE 57845
// exit ;
57843: GO 57935
// dist := 99999 ;
57845: LD_ADDR_VAR 0 5
57849: PUSH
57850: LD_INT 99999
57852: ST_TO_ADDR
// for i in points do
57853: LD_ADDR_VAR 0 4
57857: PUSH
57858: LD_VAR 0 2
57862: PUSH
57863: FOR_IN
57864: IFFALSE 57933
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57866: LD_ADDR_VAR 0 6
57870: PUSH
57871: LD_VAR 0 1
57875: PPUSH
57876: LD_VAR 0 4
57880: PUSH
57881: LD_INT 1
57883: ARRAY
57884: PPUSH
57885: LD_VAR 0 4
57889: PUSH
57890: LD_INT 2
57892: ARRAY
57893: PPUSH
57894: CALL_OW 297
57898: ST_TO_ADDR
// if tmpDist < dist then
57899: LD_VAR 0 6
57903: PUSH
57904: LD_VAR 0 5
57908: LESS
57909: IFFALSE 57931
// begin result := i ;
57911: LD_ADDR_VAR 0 3
57915: PUSH
57916: LD_VAR 0 4
57920: ST_TO_ADDR
// dist := tmpDist ;
57921: LD_ADDR_VAR 0 5
57925: PUSH
57926: LD_VAR 0 6
57930: ST_TO_ADDR
// end ; end ;
57931: GO 57863
57933: POP
57934: POP
// end ;
57935: LD_VAR 0 3
57939: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57940: LD_INT 0
57942: PPUSH
// uc_side := side ;
57943: LD_ADDR_OWVAR 20
57947: PUSH
57948: LD_VAR 0 1
57952: ST_TO_ADDR
// uc_nation := 3 ;
57953: LD_ADDR_OWVAR 21
57957: PUSH
57958: LD_INT 3
57960: ST_TO_ADDR
// vc_chassis := 25 ;
57961: LD_ADDR_OWVAR 37
57965: PUSH
57966: LD_INT 25
57968: ST_TO_ADDR
// vc_engine := engine_siberite ;
57969: LD_ADDR_OWVAR 39
57973: PUSH
57974: LD_INT 3
57976: ST_TO_ADDR
// vc_control := control_computer ;
57977: LD_ADDR_OWVAR 38
57981: PUSH
57982: LD_INT 3
57984: ST_TO_ADDR
// vc_weapon := 59 ;
57985: LD_ADDR_OWVAR 40
57989: PUSH
57990: LD_INT 59
57992: ST_TO_ADDR
// result := CreateVehicle ;
57993: LD_ADDR_VAR 0 5
57997: PUSH
57998: CALL_OW 45
58002: ST_TO_ADDR
// SetDir ( result , d ) ;
58003: LD_VAR 0 5
58007: PPUSH
58008: LD_VAR 0 4
58012: PPUSH
58013: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58017: LD_VAR 0 5
58021: PPUSH
58022: LD_VAR 0 2
58026: PPUSH
58027: LD_VAR 0 3
58031: PPUSH
58032: LD_INT 0
58034: PPUSH
58035: CALL_OW 48
// end ;
58039: LD_VAR 0 5
58043: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58044: LD_INT 0
58046: PPUSH
58047: PPUSH
58048: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58049: LD_ADDR_VAR 0 2
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58072: LD_VAR 0 1
58076: NOT
58077: IFTRUE 58110
58079: PUSH
58080: LD_VAR 0 1
58084: PPUSH
58085: CALL_OW 264
58089: PUSH
58090: LD_INT 12
58092: PUSH
58093: LD_INT 51
58095: PUSH
58096: LD_INT 32
58098: PUSH
58099: LD_INT 89
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: IN
58108: NOT
58109: OR
58110: IFFALSE 58114
// exit ;
58112: GO 58212
// for i := 1 to 3 do
58114: LD_ADDR_VAR 0 3
58118: PUSH
58119: DOUBLE
58120: LD_INT 1
58122: DEC
58123: ST_TO_ADDR
58124: LD_INT 3
58126: PUSH
58127: FOR_TO
58128: IFFALSE 58210
// begin tmp := GetCargo ( cargo , i ) ;
58130: LD_ADDR_VAR 0 4
58134: PUSH
58135: LD_VAR 0 1
58139: PPUSH
58140: LD_VAR 0 3
58144: PPUSH
58145: CALL_OW 289
58149: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58150: LD_ADDR_VAR 0 2
58154: PUSH
58155: LD_VAR 0 2
58159: PPUSH
58160: LD_VAR 0 3
58164: PPUSH
58165: LD_VAR 0 4
58169: PPUSH
58170: CALL_OW 1
58174: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58175: LD_ADDR_VAR 0 2
58179: PUSH
58180: LD_VAR 0 2
58184: PPUSH
58185: LD_INT 4
58187: PPUSH
58188: LD_VAR 0 2
58192: PUSH
58193: LD_INT 4
58195: ARRAY
58196: PUSH
58197: LD_VAR 0 4
58201: PLUS
58202: PPUSH
58203: CALL_OW 1
58207: ST_TO_ADDR
// end ;
58208: GO 58127
58210: POP
58211: POP
// end ;
58212: LD_VAR 0 2
58216: RET
// export function Length ( array ) ; begin
58217: LD_INT 0
58219: PPUSH
// result := array + 0 ;
58220: LD_ADDR_VAR 0 2
58224: PUSH
58225: LD_VAR 0 1
58229: PUSH
58230: LD_INT 0
58232: PLUS
58233: ST_TO_ADDR
// end ;
58234: LD_VAR 0 2
58238: RET
// export function PrepareArray ( array ) ; begin
58239: LD_INT 0
58241: PPUSH
// result := array diff 0 ;
58242: LD_ADDR_VAR 0 2
58246: PUSH
58247: LD_VAR 0 1
58251: PUSH
58252: LD_INT 0
58254: DIFF
58255: ST_TO_ADDR
// if not result [ 1 ] then
58256: LD_VAR 0 2
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: NOT
58265: IFFALSE 58285
// result := Delete ( result , 1 ) ;
58267: LD_ADDR_VAR 0 2
58271: PUSH
58272: LD_VAR 0 2
58276: PPUSH
58277: LD_INT 1
58279: PPUSH
58280: CALL_OW 3
58284: ST_TO_ADDR
// end ;
58285: LD_VAR 0 2
58289: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58290: LD_INT 0
58292: PPUSH
58293: PPUSH
58294: PPUSH
58295: PPUSH
// sibRocketRange := 25 ;
58296: LD_ADDR_VAR 0 6
58300: PUSH
58301: LD_INT 25
58303: ST_TO_ADDR
// result := false ;
58304: LD_ADDR_VAR 0 4
58308: PUSH
58309: LD_INT 0
58311: ST_TO_ADDR
// for i := 0 to 5 do
58312: LD_ADDR_VAR 0 5
58316: PUSH
58317: DOUBLE
58318: LD_INT 0
58320: DEC
58321: ST_TO_ADDR
58322: LD_INT 5
58324: PUSH
58325: FOR_TO
58326: IFFALSE 58393
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58328: LD_VAR 0 1
58332: PPUSH
58333: LD_VAR 0 5
58337: PPUSH
58338: LD_VAR 0 6
58342: PPUSH
58343: CALL_OW 272
58347: PPUSH
58348: LD_VAR 0 2
58352: PPUSH
58353: LD_VAR 0 5
58357: PPUSH
58358: LD_VAR 0 6
58362: PPUSH
58363: CALL_OW 273
58367: PPUSH
58368: LD_VAR 0 3
58372: PPUSH
58373: CALL_OW 309
58377: IFFALSE 58391
// begin result := true ;
58379: LD_ADDR_VAR 0 4
58383: PUSH
58384: LD_INT 1
58386: ST_TO_ADDR
// exit ;
58387: POP
58388: POP
58389: GO 58395
// end ;
58391: GO 58325
58393: POP
58394: POP
// end ;
58395: LD_VAR 0 4
58399: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58400: LD_INT 0
58402: PPUSH
58403: PPUSH
58404: PPUSH
// if btype = b_depot then
58405: LD_VAR 0 2
58409: PUSH
58410: LD_INT 0
58412: EQUAL
58413: IFFALSE 58425
// begin result := true ;
58415: LD_ADDR_VAR 0 3
58419: PUSH
58420: LD_INT 1
58422: ST_TO_ADDR
// exit ;
58423: GO 58545
// end ; pom := GetBase ( depot ) ;
58425: LD_ADDR_VAR 0 4
58429: PUSH
58430: LD_VAR 0 1
58434: PPUSH
58435: CALL_OW 274
58439: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58440: LD_ADDR_VAR 0 5
58444: PUSH
58445: LD_VAR 0 2
58449: PPUSH
58450: LD_VAR 0 1
58454: PPUSH
58455: CALL_OW 248
58459: PPUSH
58460: CALL_OW 450
58464: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_VAR 0 4
58474: PPUSH
58475: LD_INT 1
58477: PPUSH
58478: CALL_OW 275
58482: PUSH
58483: LD_VAR 0 5
58487: PUSH
58488: LD_INT 1
58490: ARRAY
58491: GREATEREQUAL
58492: IFFALSE 58518
58494: PUSH
58495: LD_VAR 0 4
58499: PPUSH
58500: LD_INT 2
58502: PPUSH
58503: CALL_OW 275
58507: PUSH
58508: LD_VAR 0 5
58512: PUSH
58513: LD_INT 2
58515: ARRAY
58516: GREATEREQUAL
58517: AND
58518: IFFALSE 58544
58520: PUSH
58521: LD_VAR 0 4
58525: PPUSH
58526: LD_INT 3
58528: PPUSH
58529: CALL_OW 275
58533: PUSH
58534: LD_VAR 0 5
58538: PUSH
58539: LD_INT 3
58541: ARRAY
58542: GREATEREQUAL
58543: AND
58544: ST_TO_ADDR
// end ;
58545: LD_VAR 0 3
58549: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58550: LD_INT 0
58552: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58553: LD_VAR 0 1
58557: PPUSH
58558: LD_VAR 0 2
58562: PPUSH
58563: LD_INT 0
58565: PPUSH
58566: LD_INT 0
58568: PPUSH
58569: LD_INT 1
58571: PPUSH
58572: LD_INT 0
58574: PPUSH
58575: CALL_OW 587
// end ;
58579: LD_VAR 0 3
58583: RET
// export function CenterOnNow ( unit ) ; begin
58584: LD_INT 0
58586: PPUSH
// result := IsInUnit ( unit ) ;
58587: LD_ADDR_VAR 0 2
58591: PUSH
58592: LD_VAR 0 1
58596: PPUSH
58597: CALL_OW 310
58601: ST_TO_ADDR
// if not result then
58602: LD_VAR 0 2
58606: NOT
58607: IFFALSE 58619
// result := unit ;
58609: LD_ADDR_VAR 0 2
58613: PUSH
58614: LD_VAR 0 1
58618: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58619: LD_VAR 0 1
58623: PPUSH
58624: CALL_OW 87
// end ;
58628: LD_VAR 0 2
58632: RET
// export function ComMoveHex ( unit , hex ) ; begin
58633: LD_INT 0
58635: PPUSH
// if not hex then
58636: LD_VAR 0 2
58640: NOT
58641: IFFALSE 58645
// exit ;
58643: GO 58698
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58645: LD_VAR 0 2
58649: PUSH
58650: LD_INT 1
58652: ARRAY
58653: PPUSH
58654: LD_VAR 0 2
58658: PUSH
58659: LD_INT 2
58661: ARRAY
58662: PPUSH
58663: CALL_OW 428
58667: IFFALSE 58671
// exit ;
58669: GO 58698
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58671: LD_VAR 0 1
58675: PPUSH
58676: LD_VAR 0 2
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PPUSH
58685: LD_VAR 0 2
58689: PUSH
58690: LD_INT 2
58692: ARRAY
58693: PPUSH
58694: CALL_OW 111
// end ;
58698: LD_VAR 0 3
58702: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58703: LD_INT 0
58705: PPUSH
58706: PPUSH
58707: PPUSH
// if not unit or not enemy then
58708: LD_VAR 0 1
58712: NOT
58713: IFTRUE 58722
58715: PUSH
58716: LD_VAR 0 2
58720: NOT
58721: OR
58722: IFFALSE 58726
// exit ;
58724: GO 58852
// x := GetX ( enemy ) ;
58726: LD_ADDR_VAR 0 4
58730: PUSH
58731: LD_VAR 0 2
58735: PPUSH
58736: CALL_OW 250
58740: ST_TO_ADDR
// y := GetY ( enemy ) ;
58741: LD_ADDR_VAR 0 5
58745: PUSH
58746: LD_VAR 0 2
58750: PPUSH
58751: CALL_OW 251
58755: ST_TO_ADDR
// if ValidHex ( x , y ) then
58756: LD_VAR 0 4
58760: PPUSH
58761: LD_VAR 0 5
58765: PPUSH
58766: CALL_OW 488
58770: IFFALSE 58852
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58772: LD_VAR 0 2
58776: PPUSH
58777: CALL_OW 247
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: IN
58792: IFTRUE 58815
58794: PUSH
58795: LD_VAR 0 1
58799: PPUSH
58800: CALL_OW 255
58804: PPUSH
58805: LD_VAR 0 2
58809: PPUSH
58810: CALL_OW 292
58814: OR
58815: IFFALSE 58833
// ComAttackUnit ( unit , enemy ) else
58817: LD_VAR 0 1
58821: PPUSH
58822: LD_VAR 0 2
58826: PPUSH
58827: CALL_OW 115
58831: GO 58852
// ComAgressiveMove ( unit , x , y ) ;
58833: LD_VAR 0 1
58837: PPUSH
58838: LD_VAR 0 4
58842: PPUSH
58843: LD_VAR 0 5
58847: PPUSH
58848: CALL_OW 114
// end ;
58852: LD_VAR 0 3
58856: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58857: LD_INT 0
58859: PPUSH
58860: PPUSH
58861: PPUSH
// list := AreaToList ( area , 0 ) ;
58862: LD_ADDR_VAR 0 5
58866: PUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: LD_INT 0
58874: PPUSH
58875: CALL_OW 517
58879: ST_TO_ADDR
// if not list then
58880: LD_VAR 0 5
58884: NOT
58885: IFFALSE 58889
// exit ;
58887: GO 59019
// if all then
58889: LD_VAR 0 2
58893: IFFALSE 58981
// begin for i := 1 to list [ 1 ] do
58895: LD_ADDR_VAR 0 4
58899: PUSH
58900: DOUBLE
58901: LD_INT 1
58903: DEC
58904: ST_TO_ADDR
58905: LD_VAR 0 5
58909: PUSH
58910: LD_INT 1
58912: ARRAY
58913: PUSH
58914: FOR_TO
58915: IFFALSE 58977
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58917: LD_ADDR_VAR 0 3
58921: PUSH
58922: LD_VAR 0 3
58926: PPUSH
58927: LD_VAR 0 3
58931: PUSH
58932: LD_INT 1
58934: PLUS
58935: PPUSH
58936: LD_VAR 0 5
58940: PUSH
58941: LD_INT 1
58943: ARRAY
58944: PUSH
58945: LD_VAR 0 4
58949: ARRAY
58950: PUSH
58951: LD_VAR 0 5
58955: PUSH
58956: LD_INT 2
58958: ARRAY
58959: PUSH
58960: LD_VAR 0 4
58964: ARRAY
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PPUSH
58970: CALL_OW 1
58974: ST_TO_ADDR
58975: GO 58914
58977: POP
58978: POP
// exit ;
58979: GO 59019
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58981: LD_ADDR_VAR 0 3
58985: PUSH
58986: LD_VAR 0 5
58990: PUSH
58991: LD_INT 1
58993: ARRAY
58994: PUSH
58995: LD_INT 1
58997: ARRAY
58998: PUSH
58999: LD_VAR 0 5
59003: PUSH
59004: LD_INT 2
59006: ARRAY
59007: PUSH
59008: LD_INT 1
59010: ARRAY
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: EMPTY
59017: LIST
59018: ST_TO_ADDR
// end ;
59019: LD_VAR 0 3
59023: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59024: LD_INT 0
59026: PPUSH
59027: PPUSH
// list := AreaToList ( area , 0 ) ;
59028: LD_ADDR_VAR 0 4
59032: PUSH
59033: LD_VAR 0 1
59037: PPUSH
59038: LD_INT 0
59040: PPUSH
59041: CALL_OW 517
59045: ST_TO_ADDR
// if not list then
59046: LD_VAR 0 4
59050: NOT
59051: IFFALSE 59055
// exit ;
59053: GO 59096
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59055: LD_ADDR_VAR 0 3
59059: PUSH
59060: LD_VAR 0 4
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: PUSH
59073: LD_VAR 0 4
59077: PUSH
59078: LD_INT 2
59080: ARRAY
59081: PUSH
59082: LD_INT 1
59084: ARRAY
59085: PUSH
59086: LD_VAR 0 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: ST_TO_ADDR
// end ;
59096: LD_VAR 0 3
59100: RET
// export function First ( array ) ; begin
59101: LD_INT 0
59103: PPUSH
// if not array then
59104: LD_VAR 0 1
59108: NOT
59109: IFFALSE 59113
// exit ;
59111: GO 59127
// result := array [ 1 ] ;
59113: LD_ADDR_VAR 0 2
59117: PUSH
59118: LD_VAR 0 1
59122: PUSH
59123: LD_INT 1
59125: ARRAY
59126: ST_TO_ADDR
// end ;
59127: LD_VAR 0 2
59131: RET
// export function Last ( array ) ; begin
59132: LD_INT 0
59134: PPUSH
// if not array then
59135: LD_VAR 0 1
59139: NOT
59140: IFFALSE 59144
// exit ;
59142: GO 59160
// result := array [ array ] ;
59144: LD_ADDR_VAR 0 2
59148: PUSH
59149: LD_VAR 0 1
59153: PUSH
59154: LD_VAR 0 1
59158: ARRAY
59159: ST_TO_ADDR
// end ;
59160: LD_VAR 0 2
59164: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59165: LD_INT 0
59167: PPUSH
59168: PPUSH
// result := [ ] ;
59169: LD_ADDR_VAR 0 5
59173: PUSH
59174: EMPTY
59175: ST_TO_ADDR
// if not array then
59176: LD_VAR 0 1
59180: NOT
59181: IFFALSE 59185
// exit ;
59183: GO 59297
// for i := 1 to array do
59185: LD_ADDR_VAR 0 6
59189: PUSH
59190: DOUBLE
59191: LD_INT 1
59193: DEC
59194: ST_TO_ADDR
59195: LD_VAR 0 1
59199: PUSH
59200: FOR_TO
59201: IFFALSE 59295
// if array [ i ] [ index ] = value then
59203: LD_VAR 0 1
59207: PUSH
59208: LD_VAR 0 6
59212: ARRAY
59213: PUSH
59214: LD_VAR 0 2
59218: ARRAY
59219: PUSH
59220: LD_VAR 0 3
59224: EQUAL
59225: IFFALSE 59293
// begin if indexColumn then
59227: LD_VAR 0 4
59231: IFFALSE 59267
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59233: LD_ADDR_VAR 0 5
59237: PUSH
59238: LD_VAR 0 5
59242: PPUSH
59243: LD_VAR 0 1
59247: PUSH
59248: LD_VAR 0 6
59252: ARRAY
59253: PUSH
59254: LD_VAR 0 4
59258: ARRAY
59259: PPUSH
59260: CALL 54305 0 2
59264: ST_TO_ADDR
59265: GO 59293
// result := Join ( result , array [ i ] ) ;
59267: LD_ADDR_VAR 0 5
59271: PUSH
59272: LD_VAR 0 5
59276: PPUSH
59277: LD_VAR 0 1
59281: PUSH
59282: LD_VAR 0 6
59286: ARRAY
59287: PPUSH
59288: CALL 54305 0 2
59292: ST_TO_ADDR
// end ;
59293: GO 59200
59295: POP
59296: POP
// end ;
59297: LD_VAR 0 5
59301: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59302: LD_INT 0
59304: PPUSH
// if not vehicles or not parkingPoint then
59305: LD_VAR 0 1
59309: NOT
59310: IFTRUE 59319
59312: PUSH
59313: LD_VAR 0 2
59317: NOT
59318: OR
59319: IFFALSE 59323
// exit ;
59321: GO 59421
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59323: LD_ADDR_VAR 0 1
59327: PUSH
59328: LD_VAR 0 1
59332: PPUSH
59333: LD_INT 50
59335: PUSH
59336: EMPTY
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 92
59344: PUSH
59345: LD_VAR 0 2
59349: PUSH
59350: LD_INT 1
59352: ARRAY
59353: PUSH
59354: LD_VAR 0 2
59358: PUSH
59359: LD_INT 2
59361: ARRAY
59362: PUSH
59363: LD_INT 8
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PPUSH
59380: CALL_OW 72
59384: ST_TO_ADDR
// if not vehicles then
59385: LD_VAR 0 1
59389: NOT
59390: IFFALSE 59394
// exit ;
59392: GO 59421
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59394: LD_VAR 0 1
59398: PPUSH
59399: LD_VAR 0 2
59403: PUSH
59404: LD_INT 1
59406: ARRAY
59407: PPUSH
59408: LD_VAR 0 2
59412: PUSH
59413: LD_INT 2
59415: ARRAY
59416: PPUSH
59417: CALL_OW 111
// end ;
59421: LD_VAR 0 3
59425: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59426: LD_INT 0
59428: PPUSH
59429: PPUSH
59430: PPUSH
// if not side or not area then
59431: LD_VAR 0 1
59435: NOT
59436: IFTRUE 59445
59438: PUSH
59439: LD_VAR 0 2
59443: NOT
59444: OR
59445: IFFALSE 59449
// exit ;
59447: GO 59568
// tmp := AreaToList ( area , 0 ) ;
59449: LD_ADDR_VAR 0 5
59453: PUSH
59454: LD_VAR 0 2
59458: PPUSH
59459: LD_INT 0
59461: PPUSH
59462: CALL_OW 517
59466: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59467: LD_ADDR_VAR 0 4
59471: PUSH
59472: DOUBLE
59473: LD_INT 1
59475: DEC
59476: ST_TO_ADDR
59477: LD_VAR 0 5
59481: PUSH
59482: LD_INT 1
59484: ARRAY
59485: PUSH
59486: FOR_TO
59487: IFFALSE 59566
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59489: LD_VAR 0 5
59493: PUSH
59494: LD_INT 1
59496: ARRAY
59497: PUSH
59498: LD_VAR 0 4
59502: ARRAY
59503: PPUSH
59504: LD_VAR 0 5
59508: PUSH
59509: LD_INT 2
59511: ARRAY
59512: PUSH
59513: LD_VAR 0 4
59517: ARRAY
59518: PPUSH
59519: CALL_OW 351
59523: IFFALSE 59564
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59525: LD_VAR 0 5
59529: PUSH
59530: LD_INT 1
59532: ARRAY
59533: PUSH
59534: LD_VAR 0 4
59538: ARRAY
59539: PPUSH
59540: LD_VAR 0 5
59544: PUSH
59545: LD_INT 2
59547: ARRAY
59548: PUSH
59549: LD_VAR 0 4
59553: ARRAY
59554: PPUSH
59555: LD_VAR 0 1
59559: PPUSH
59560: CALL_OW 244
// end ;
59564: GO 59486
59566: POP
59567: POP
// end ;
59568: LD_VAR 0 3
59572: RET
// export function UniqueArray ( array ) ; var i ; begin
59573: LD_INT 0
59575: PPUSH
59576: PPUSH
// result := [ ] ;
59577: LD_ADDR_VAR 0 2
59581: PUSH
59582: EMPTY
59583: ST_TO_ADDR
// if not array then
59584: LD_VAR 0 1
59588: NOT
59589: IFFALSE 59593
// exit ;
59591: GO 59654
// for i := 1 to array do
59593: LD_ADDR_VAR 0 3
59597: PUSH
59598: DOUBLE
59599: LD_INT 1
59601: DEC
59602: ST_TO_ADDR
59603: LD_VAR 0 1
59607: PUSH
59608: FOR_TO
59609: IFFALSE 59652
// if not array [ i ] in result then
59611: LD_VAR 0 1
59615: PUSH
59616: LD_VAR 0 3
59620: ARRAY
59621: PUSH
59622: LD_VAR 0 2
59626: IN
59627: NOT
59628: IFFALSE 59650
// result := Join ( result , i ) ;
59630: LD_ADDR_VAR 0 2
59634: PUSH
59635: LD_VAR 0 2
59639: PPUSH
59640: LD_VAR 0 3
59644: PPUSH
59645: CALL 54305 0 2
59649: ST_TO_ADDR
59650: GO 59608
59652: POP
59653: POP
// end ; end_of_file
59654: LD_VAR 0 2
59658: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
59659: LD_VAR 0 1
59663: PPUSH
59664: LD_VAR 0 2
59668: PPUSH
59669: LD_VAR 0 3
59673: PPUSH
59674: LD_VAR 0 4
59678: PPUSH
59679: LD_VAR 0 5
59683: PPUSH
59684: LD_VAR 0 6
59688: PPUSH
59689: CALL 208 0 6
// end ;
59693: PPOPN 6
59695: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
59696: LD_INT 0
59698: PPUSH
// begin if not units then
59699: LD_VAR 0 1
59703: NOT
59704: IFFALSE 59708
// exit ;
59706: GO 59742
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
59708: LD_VAR 0 1
59712: PPUSH
59713: LD_VAR 0 2
59717: PPUSH
59718: LD_VAR 0 3
59722: PPUSH
59723: LD_VAR 0 4
59727: PPUSH
59728: LD_VAR 0 5
59732: PPUSH
59733: LD_VAR 0 6
59737: PPUSH
59738: CALL 66099 0 6
// end ;
59742: PPOPN 7
59744: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59745: CALL 95 0 0
// end ; end_of_file
59749: PPOPN 1
59751: END
// export function SOS_UnitDestroyed ( un ) ; begin
59752: LD_INT 0
59754: PPUSH
// ComRadiation ( un ) ;
59755: LD_VAR 0 1
59759: PPUSH
59760: CALL 60922 0 1
// end ;
59764: LD_VAR 0 2
59768: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59769: LD_INT 0
59771: PPUSH
// ComRadiation ( un ) ;
59772: LD_VAR 0 1
59776: PPUSH
59777: CALL 60922 0 1
// end ;
59781: LD_VAR 0 2
59785: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59786: LD_INT 0
59788: PPUSH
// end ;
59789: LD_VAR 0 4
59793: RET
// export function SOS_Command ( cmd ) ; begin
59794: LD_INT 0
59796: PPUSH
// end ;
59797: LD_VAR 0 2
59801: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59802: LD_INT 0
59804: PPUSH
// end ;
59805: LD_VAR 0 6
59809: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59810: LD_INT 0
59812: PPUSH
59813: PPUSH
59814: PPUSH
59815: PPUSH
59816: PPUSH
// if not vehicle or not factory then
59817: LD_VAR 0 1
59821: NOT
59822: IFTRUE 59831
59824: PUSH
59825: LD_VAR 0 2
59829: NOT
59830: OR
59831: IFFALSE 59835
// exit ;
59833: GO 60497
// weapon := GetWeapon ( vehicle ) ;
59835: LD_ADDR_VAR 0 7
59839: PUSH
59840: LD_VAR 0 1
59844: PPUSH
59845: CALL_OW 264
59849: ST_TO_ADDR
// if weapon = ar_miner then
59850: LD_VAR 0 7
59854: PUSH
59855: LD_INT 81
59857: EQUAL
59858: IFFALSE 59915
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59860: LD_ADDR_EXP 71
59864: PUSH
59865: LD_EXP 71
59869: PPUSH
59870: LD_EXP 71
59874: PUSH
59875: LD_INT 1
59877: PLUS
59878: PPUSH
59879: LD_VAR 0 1
59883: PPUSH
59884: CALL_OW 1
59888: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59889: LD_ADDR_EXP 72
59893: PUSH
59894: LD_EXP 72
59898: PPUSH
59899: LD_EXP 72
59903: PUSH
59904: LD_INT 1
59906: PLUS
59907: PPUSH
59908: EMPTY
59909: PPUSH
59910: CALL_OW 1
59914: ST_TO_ADDR
// end ; if not factoryWaypoints then
59915: LD_EXP 60
59919: NOT
59920: IFFALSE 59924
// exit ;
59922: GO 60497
// for i := 1 to Count ( factoryWaypoints ) do
59924: LD_ADDR_VAR 0 4
59928: PUSH
59929: DOUBLE
59930: LD_INT 1
59932: DEC
59933: ST_TO_ADDR
59934: LD_EXP 60
59938: PPUSH
59939: CALL 18339 0 1
59943: PUSH
59944: FOR_TO
59945: IFFALSE 60495
// if factoryWaypoints [ i ] [ 2 ] = factory then
59947: LD_EXP 60
59951: PUSH
59952: LD_VAR 0 4
59956: ARRAY
59957: PUSH
59958: LD_INT 2
59960: ARRAY
59961: PUSH
59962: LD_VAR 0 2
59966: EQUAL
59967: IFFALSE 60493
// begin if GetControl ( vehicle ) = control_manual then
59969: LD_VAR 0 1
59973: PPUSH
59974: CALL_OW 263
59978: PUSH
59979: LD_INT 1
59981: EQUAL
59982: IFFALSE 60346
// begin driver := IsDrivenBy ( vehicle ) ;
59984: LD_ADDR_VAR 0 5
59988: PUSH
59989: LD_VAR 0 1
59993: PPUSH
59994: CALL_OW 311
59998: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59999: LD_VAR 0 5
60003: PUSH
60004: LD_EXP 61
60008: IN
60009: IFTRUE 60023
60011: PUSH
60012: LD_VAR 0 1
60016: PUSH
60017: LD_EXP 61
60021: IN
60022: OR
60023: IFFALSE 60029
// exit ;
60025: POP
60026: POP
60027: GO 60497
// if not HasTask ( driver ) then
60029: LD_VAR 0 5
60033: PPUSH
60034: CALL_OW 314
60038: NOT
60039: IFFALSE 60344
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60041: LD_ADDR_EXP 61
60045: PUSH
60046: LD_EXP 61
60050: PPUSH
60051: LD_VAR 0 5
60055: PPUSH
60056: CALL 54305 0 2
60060: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60061: LD_ADDR_EXP 61
60065: PUSH
60066: LD_EXP 61
60070: PPUSH
60071: LD_VAR 0 1
60075: PPUSH
60076: CALL 54305 0 2
60080: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60081: LD_ADDR_VAR 0 6
60085: PUSH
60086: LD_EXP 60
60090: PUSH
60091: LD_VAR 0 4
60095: ARRAY
60096: PUSH
60097: LD_INT 3
60099: ARRAY
60100: PPUSH
60101: LD_EXP 60
60105: PUSH
60106: LD_VAR 0 4
60110: ARRAY
60111: PUSH
60112: LD_INT 4
60114: ARRAY
60115: PPUSH
60116: CALL_OW 428
60120: ST_TO_ADDR
// if hex then
60121: LD_VAR 0 6
60125: IFFALSE 60143
// ComMoveUnit ( driver , hex ) else
60127: LD_VAR 0 5
60131: PPUSH
60132: LD_VAR 0 6
60136: PPUSH
60137: CALL_OW 112
60141: GO 60227
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60143: LD_VAR 0 1
60147: PPUSH
60148: LD_EXP 60
60152: PUSH
60153: LD_VAR 0 4
60157: ARRAY
60158: PUSH
60159: LD_INT 3
60161: ARRAY
60162: PPUSH
60163: LD_EXP 60
60167: PUSH
60168: LD_VAR 0 4
60172: ARRAY
60173: PUSH
60174: LD_INT 4
60176: ARRAY
60177: PPUSH
60178: CALL_OW 297
60182: PUSH
60183: LD_INT 0
60185: GREATER
60186: IFFALSE 60227
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60188: LD_VAR 0 5
60192: PPUSH
60193: LD_EXP 60
60197: PUSH
60198: LD_VAR 0 4
60202: ARRAY
60203: PUSH
60204: LD_INT 3
60206: ARRAY
60207: PPUSH
60208: LD_EXP 60
60212: PUSH
60213: LD_VAR 0 4
60217: ARRAY
60218: PUSH
60219: LD_INT 4
60221: ARRAY
60222: PPUSH
60223: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60227: LD_VAR 0 5
60231: PPUSH
60232: CALL_OW 181
// if Multiplayer then
60236: LD_OWVAR 4
60240: IFFALSE 60289
// begin repeat wait ( 10 ) ;
60242: LD_INT 10
60244: PPUSH
60245: CALL_OW 67
// until not IsInUnit ( driver ) ;
60249: LD_VAR 0 5
60253: PPUSH
60254: CALL_OW 310
60258: NOT
60259: IFFALSE 60242
// if not HasTask ( driver ) then
60261: LD_VAR 0 5
60265: PPUSH
60266: CALL_OW 314
60270: NOT
60271: IFFALSE 60287
// ComEnterUnit ( driver , factory ) ;
60273: LD_VAR 0 5
60277: PPUSH
60278: LD_VAR 0 2
60282: PPUSH
60283: CALL_OW 120
// end else
60287: GO 60303
// AddComEnterUnit ( driver , factory ) ;
60289: LD_VAR 0 5
60293: PPUSH
60294: LD_VAR 0 2
60298: PPUSH
60299: CALL_OW 180
// wait ( 0 0$1 ) ;
60303: LD_INT 35
60305: PPUSH
60306: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60310: LD_ADDR_EXP 61
60314: PUSH
60315: LD_EXP 61
60319: PUSH
60320: LD_VAR 0 5
60324: DIFF
60325: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60326: LD_ADDR_EXP 61
60330: PUSH
60331: LD_EXP 61
60335: PUSH
60336: LD_VAR 0 1
60340: DIFF
60341: ST_TO_ADDR
// break ;
60342: GO 60495
// end ; end else
60344: GO 60493
// if GetControl ( vehicle ) = control_remote then
60346: LD_VAR 0 1
60350: PPUSH
60351: CALL_OW 263
60355: PUSH
60356: LD_INT 2
60358: EQUAL
60359: IFFALSE 60445
// begin wait ( 0 0$2 ) ;
60361: LD_INT 70
60363: PPUSH
60364: CALL_OW 67
// repeat wait ( 10 ) ;
60368: LD_INT 10
60370: PPUSH
60371: CALL_OW 67
// Connect ( vehicle ) ;
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL 24617 0 1
// until IsControledBy ( vehicle ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: CALL_OW 312
60393: IFFALSE 60368
// wait ( 10 ) ;
60395: LD_INT 10
60397: PPUSH
60398: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60402: LD_VAR 0 1
60406: PPUSH
60407: LD_EXP 60
60411: PUSH
60412: LD_VAR 0 4
60416: ARRAY
60417: PUSH
60418: LD_INT 3
60420: ARRAY
60421: PPUSH
60422: LD_EXP 60
60426: PUSH
60427: LD_VAR 0 4
60431: ARRAY
60432: PUSH
60433: LD_INT 4
60435: ARRAY
60436: PPUSH
60437: CALL_OW 111
// break ;
60441: GO 60495
// end else
60443: GO 60493
// begin wait ( 0 0$3 ) ;
60445: LD_INT 105
60447: PPUSH
60448: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60452: LD_VAR 0 1
60456: PPUSH
60457: LD_EXP 60
60461: PUSH
60462: LD_VAR 0 4
60466: ARRAY
60467: PUSH
60468: LD_INT 3
60470: ARRAY
60471: PPUSH
60472: LD_EXP 60
60476: PUSH
60477: LD_VAR 0 4
60481: ARRAY
60482: PUSH
60483: LD_INT 4
60485: ARRAY
60486: PPUSH
60487: CALL_OW 111
// break ;
60491: GO 60495
// end ; end ;
60493: GO 59944
60495: POP
60496: POP
// end ;
60497: LD_VAR 0 3
60501: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60502: LD_INT 0
60504: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60505: LD_VAR 0 1
60509: PUSH
60510: LD_INT 250
60512: EQUAL
60513: IFFALSE 60530
60515: PUSH
60516: LD_VAR 0 2
60520: PPUSH
60521: CALL_OW 264
60525: PUSH
60526: LD_INT 81
60528: EQUAL
60529: AND
60530: IFFALSE 60551
// MinerPlaceMine ( unit , x , y ) ;
60532: LD_VAR 0 2
60536: PPUSH
60537: LD_VAR 0 4
60541: PPUSH
60542: LD_VAR 0 5
60546: PPUSH
60547: CALL 63832 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60551: LD_VAR 0 1
60555: PUSH
60556: LD_INT 251
60558: EQUAL
60559: IFFALSE 60576
60561: PUSH
60562: LD_VAR 0 2
60566: PPUSH
60567: CALL_OW 264
60571: PUSH
60572: LD_INT 81
60574: EQUAL
60575: AND
60576: IFFALSE 60597
// MinerDetonateMine ( unit , x , y ) ;
60578: LD_VAR 0 2
60582: PPUSH
60583: LD_VAR 0 4
60587: PPUSH
60588: LD_VAR 0 5
60592: PPUSH
60593: CALL 64239 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60597: LD_VAR 0 1
60601: PUSH
60602: LD_INT 252
60604: EQUAL
60605: IFFALSE 60622
60607: PUSH
60608: LD_VAR 0 2
60612: PPUSH
60613: CALL_OW 264
60617: PUSH
60618: LD_INT 81
60620: EQUAL
60621: AND
60622: IFFALSE 60643
// MinerCreateMinefield ( unit , x , y ) ;
60624: LD_VAR 0 2
60628: PPUSH
60629: LD_VAR 0 4
60633: PPUSH
60634: LD_VAR 0 5
60638: PPUSH
60639: CALL 64471 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60643: LD_VAR 0 1
60647: PUSH
60648: LD_INT 253
60650: EQUAL
60651: IFFALSE 60668
60653: PUSH
60654: LD_VAR 0 2
60658: PPUSH
60659: CALL_OW 257
60663: PUSH
60664: LD_INT 5
60666: EQUAL
60667: AND
60668: IFFALSE 60689
// ComBinocular ( unit , x , y ) ;
60670: LD_VAR 0 2
60674: PPUSH
60675: LD_VAR 0 4
60679: PPUSH
60680: LD_VAR 0 5
60684: PPUSH
60685: CALL 64846 0 3
// if selectedUnit then
60689: LD_VAR 0 3
60693: IFFALSE 60753
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60695: LD_VAR 0 1
60699: PUSH
60700: LD_INT 254
60702: EQUAL
60703: IFFALSE 60720
60705: PUSH
60706: LD_VAR 0 2
60710: PPUSH
60711: CALL_OW 264
60715: PUSH
60716: LD_INT 99
60718: EQUAL
60719: AND
60720: IFFALSE 60737
60722: PUSH
60723: LD_VAR 0 3
60727: PPUSH
60728: CALL_OW 263
60732: PUSH
60733: LD_INT 3
60735: EQUAL
60736: AND
60737: IFFALSE 60753
// HackDestroyVehicle ( unit , selectedUnit ) ;
60739: LD_VAR 0 2
60743: PPUSH
60744: LD_VAR 0 3
60748: PPUSH
60749: CALL 63043 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60753: LD_VAR 0 1
60757: PUSH
60758: LD_INT 255
60760: EQUAL
60761: IFFALSE 60785
60763: PUSH
60764: LD_VAR 0 2
60768: PPUSH
60769: CALL_OW 264
60773: PUSH
60774: LD_INT 14
60776: PUSH
60777: LD_INT 53
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: IN
60784: AND
60785: IFFALSE 60803
60787: PUSH
60788: LD_VAR 0 4
60792: PPUSH
60793: LD_VAR 0 5
60797: PPUSH
60798: CALL_OW 488
60802: AND
60803: IFFALSE 60827
// CutTreeXYR ( unit , x , y , 12 ) ;
60805: LD_VAR 0 2
60809: PPUSH
60810: LD_VAR 0 4
60814: PPUSH
60815: LD_VAR 0 5
60819: PPUSH
60820: LD_INT 12
60822: PPUSH
60823: CALL 61018 0 4
// if cmd = 256 then
60827: LD_VAR 0 1
60831: PUSH
60832: LD_INT 256
60834: EQUAL
60835: IFFALSE 60856
// SetFactoryWaypoint ( unit , x , y ) ;
60837: LD_VAR 0 2
60841: PPUSH
60842: LD_VAR 0 4
60846: PPUSH
60847: LD_VAR 0 5
60851: PPUSH
60852: CALL 14660 0 3
// if cmd = 257 then
60856: LD_VAR 0 1
60860: PUSH
60861: LD_INT 257
60863: EQUAL
60864: IFFALSE 60885
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60866: LD_VAR 0 2
60870: PPUSH
60871: LD_VAR 0 4
60875: PPUSH
60876: LD_VAR 0 5
60880: PPUSH
60881: CALL 15156 0 3
// if cmd = 258 then
60885: LD_VAR 0 1
60889: PUSH
60890: LD_INT 258
60892: EQUAL
60893: IFFALSE 60917
// BurnTreeXYR ( unit , x , y , 8 ) ;
60895: LD_VAR 0 2
60899: PPUSH
60900: LD_VAR 0 4
60904: PPUSH
60905: LD_VAR 0 5
60909: PPUSH
60910: LD_INT 8
60912: PPUSH
60913: CALL 61418 0 4
// end ;
60917: LD_VAR 0 6
60921: RET
// export function ComRadiation ( un ) ; var eff ; begin
60922: LD_INT 0
60924: PPUSH
60925: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60926: LD_VAR 0 1
60930: PPUSH
60931: CALL_OW 264
60935: PUSH
60936: LD_INT 91
60938: NONEQUAL
60939: IFFALSE 60943
// exit ;
60941: GO 61013
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60943: LD_INT 68
60945: PPUSH
60946: LD_VAR 0 1
60950: PPUSH
60951: CALL_OW 255
60955: PPUSH
60956: CALL_OW 321
60960: PUSH
60961: LD_INT 2
60963: EQUAL
60964: IFFALSE 60976
// eff := 50 else
60966: LD_ADDR_VAR 0 3
60970: PUSH
60971: LD_INT 50
60973: ST_TO_ADDR
60974: GO 60984
// eff := 25 ;
60976: LD_ADDR_VAR 0 3
60980: PUSH
60981: LD_INT 25
60983: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60984: LD_VAR 0 1
60988: PPUSH
60989: CALL_OW 250
60993: PPUSH
60994: LD_VAR 0 1
60998: PPUSH
60999: CALL_OW 251
61003: PPUSH
61004: LD_VAR 0 3
61008: PPUSH
61009: CALL_OW 495
// end ;
61013: LD_VAR 0 2
61017: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61018: LD_INT 0
61020: PPUSH
61021: PPUSH
61022: PPUSH
61023: PPUSH
61024: PPUSH
61025: PPUSH
61026: PPUSH
61027: PPUSH
61028: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61029: LD_VAR 0 1
61033: PPUSH
61034: CALL_OW 302
61038: NOT
61039: IFTRUE 61058
61041: PUSH
61042: LD_VAR 0 2
61046: PPUSH
61047: LD_VAR 0 3
61051: PPUSH
61052: CALL_OW 488
61056: NOT
61057: OR
61058: IFTRUE 61067
61060: PUSH
61061: LD_VAR 0 4
61065: NOT
61066: OR
61067: IFFALSE 61071
// exit ;
61069: GO 61413
// list := [ ] ;
61071: LD_ADDR_VAR 0 13
61075: PUSH
61076: EMPTY
61077: ST_TO_ADDR
// if x - r < 0 then
61078: LD_VAR 0 2
61082: PUSH
61083: LD_VAR 0 4
61087: MINUS
61088: PUSH
61089: LD_INT 0
61091: LESS
61092: IFFALSE 61104
// min_x := 0 else
61094: LD_ADDR_VAR 0 7
61098: PUSH
61099: LD_INT 0
61101: ST_TO_ADDR
61102: GO 61120
// min_x := x - r ;
61104: LD_ADDR_VAR 0 7
61108: PUSH
61109: LD_VAR 0 2
61113: PUSH
61114: LD_VAR 0 4
61118: MINUS
61119: ST_TO_ADDR
// if y - r < 0 then
61120: LD_VAR 0 3
61124: PUSH
61125: LD_VAR 0 4
61129: MINUS
61130: PUSH
61131: LD_INT 0
61133: LESS
61134: IFFALSE 61146
// min_y := 0 else
61136: LD_ADDR_VAR 0 8
61140: PUSH
61141: LD_INT 0
61143: ST_TO_ADDR
61144: GO 61162
// min_y := y - r ;
61146: LD_ADDR_VAR 0 8
61150: PUSH
61151: LD_VAR 0 3
61155: PUSH
61156: LD_VAR 0 4
61160: MINUS
61161: ST_TO_ADDR
// max_x := x + r ;
61162: LD_ADDR_VAR 0 9
61166: PUSH
61167: LD_VAR 0 2
61171: PUSH
61172: LD_VAR 0 4
61176: PLUS
61177: ST_TO_ADDR
// max_y := y + r ;
61178: LD_ADDR_VAR 0 10
61182: PUSH
61183: LD_VAR 0 3
61187: PUSH
61188: LD_VAR 0 4
61192: PLUS
61193: ST_TO_ADDR
// for _x = min_x to max_x do
61194: LD_ADDR_VAR 0 11
61198: PUSH
61199: DOUBLE
61200: LD_VAR 0 7
61204: DEC
61205: ST_TO_ADDR
61206: LD_VAR 0 9
61210: PUSH
61211: FOR_TO
61212: IFFALSE 61331
// for _y = min_y to max_y do
61214: LD_ADDR_VAR 0 12
61218: PUSH
61219: DOUBLE
61220: LD_VAR 0 8
61224: DEC
61225: ST_TO_ADDR
61226: LD_VAR 0 10
61230: PUSH
61231: FOR_TO
61232: IFFALSE 61327
// begin if not ValidHex ( _x , _y ) then
61234: LD_VAR 0 11
61238: PPUSH
61239: LD_VAR 0 12
61243: PPUSH
61244: CALL_OW 488
61248: NOT
61249: IFFALSE 61253
// continue ;
61251: GO 61231
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61253: LD_VAR 0 11
61257: PPUSH
61258: LD_VAR 0 12
61262: PPUSH
61263: CALL_OW 351
61267: IFFALSE 61285
61269: PUSH
61270: LD_VAR 0 11
61274: PPUSH
61275: LD_VAR 0 12
61279: PPUSH
61280: CALL_OW 554
61284: AND
61285: IFFALSE 61325
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61287: LD_ADDR_VAR 0 13
61291: PUSH
61292: LD_VAR 0 13
61296: PPUSH
61297: LD_VAR 0 13
61301: PUSH
61302: LD_INT 1
61304: PLUS
61305: PPUSH
61306: LD_VAR 0 11
61310: PUSH
61311: LD_VAR 0 12
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PPUSH
61320: CALL_OW 2
61324: ST_TO_ADDR
// end ;
61325: GO 61231
61327: POP
61328: POP
61329: GO 61211
61331: POP
61332: POP
// if not list then
61333: LD_VAR 0 13
61337: NOT
61338: IFFALSE 61342
// exit ;
61340: GO 61413
// for i in list do
61342: LD_ADDR_VAR 0 6
61346: PUSH
61347: LD_VAR 0 13
61351: PUSH
61352: FOR_IN
61353: IFFALSE 61411
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61355: LD_VAR 0 1
61359: PPUSH
61360: LD_STRING M
61362: PUSH
61363: LD_VAR 0 6
61367: PUSH
61368: LD_INT 1
61370: ARRAY
61371: PUSH
61372: LD_VAR 0 6
61376: PUSH
61377: LD_INT 2
61379: ARRAY
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: PUSH
61402: EMPTY
61403: LIST
61404: PPUSH
61405: CALL_OW 447
61409: GO 61352
61411: POP
61412: POP
// end ;
61413: LD_VAR 0 5
61417: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61418: LD_INT 0
61420: PPUSH
61421: PPUSH
61422: PPUSH
61423: PPUSH
61424: PPUSH
61425: PPUSH
61426: PPUSH
61427: PPUSH
61428: PPUSH
61429: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61430: LD_VAR 0 1
61434: PPUSH
61435: CALL_OW 302
61439: NOT
61440: IFTRUE 61459
61442: PUSH
61443: LD_VAR 0 2
61447: PPUSH
61448: LD_VAR 0 3
61452: PPUSH
61453: CALL_OW 488
61457: NOT
61458: OR
61459: IFTRUE 61468
61461: PUSH
61462: LD_VAR 0 4
61466: NOT
61467: OR
61468: IFFALSE 61472
// exit ;
61470: GO 61989
// list := [ ] ;
61472: LD_ADDR_VAR 0 13
61476: PUSH
61477: EMPTY
61478: ST_TO_ADDR
// if x - r < 0 then
61479: LD_VAR 0 2
61483: PUSH
61484: LD_VAR 0 4
61488: MINUS
61489: PUSH
61490: LD_INT 0
61492: LESS
61493: IFFALSE 61505
// min_x := 0 else
61495: LD_ADDR_VAR 0 7
61499: PUSH
61500: LD_INT 0
61502: ST_TO_ADDR
61503: GO 61521
// min_x := x - r ;
61505: LD_ADDR_VAR 0 7
61509: PUSH
61510: LD_VAR 0 2
61514: PUSH
61515: LD_VAR 0 4
61519: MINUS
61520: ST_TO_ADDR
// if y - r < 0 then
61521: LD_VAR 0 3
61525: PUSH
61526: LD_VAR 0 4
61530: MINUS
61531: PUSH
61532: LD_INT 0
61534: LESS
61535: IFFALSE 61547
// min_y := 0 else
61537: LD_ADDR_VAR 0 8
61541: PUSH
61542: LD_INT 0
61544: ST_TO_ADDR
61545: GO 61563
// min_y := y - r ;
61547: LD_ADDR_VAR 0 8
61551: PUSH
61552: LD_VAR 0 3
61556: PUSH
61557: LD_VAR 0 4
61561: MINUS
61562: ST_TO_ADDR
// max_x := x + r ;
61563: LD_ADDR_VAR 0 9
61567: PUSH
61568: LD_VAR 0 2
61572: PUSH
61573: LD_VAR 0 4
61577: PLUS
61578: ST_TO_ADDR
// max_y := y + r ;
61579: LD_ADDR_VAR 0 10
61583: PUSH
61584: LD_VAR 0 3
61588: PUSH
61589: LD_VAR 0 4
61593: PLUS
61594: ST_TO_ADDR
// for _x = min_x to max_x do
61595: LD_ADDR_VAR 0 11
61599: PUSH
61600: DOUBLE
61601: LD_VAR 0 7
61605: DEC
61606: ST_TO_ADDR
61607: LD_VAR 0 9
61611: PUSH
61612: FOR_TO
61613: IFFALSE 61732
// for _y = min_y to max_y do
61615: LD_ADDR_VAR 0 12
61619: PUSH
61620: DOUBLE
61621: LD_VAR 0 8
61625: DEC
61626: ST_TO_ADDR
61627: LD_VAR 0 10
61631: PUSH
61632: FOR_TO
61633: IFFALSE 61728
// begin if not ValidHex ( _x , _y ) then
61635: LD_VAR 0 11
61639: PPUSH
61640: LD_VAR 0 12
61644: PPUSH
61645: CALL_OW 488
61649: NOT
61650: IFFALSE 61654
// continue ;
61652: GO 61632
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61654: LD_VAR 0 11
61658: PPUSH
61659: LD_VAR 0 12
61663: PPUSH
61664: CALL_OW 351
61668: IFFALSE 61686
61670: PUSH
61671: LD_VAR 0 11
61675: PPUSH
61676: LD_VAR 0 12
61680: PPUSH
61681: CALL_OW 554
61685: AND
61686: IFFALSE 61726
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61688: LD_ADDR_VAR 0 13
61692: PUSH
61693: LD_VAR 0 13
61697: PPUSH
61698: LD_VAR 0 13
61702: PUSH
61703: LD_INT 1
61705: PLUS
61706: PPUSH
61707: LD_VAR 0 11
61711: PUSH
61712: LD_VAR 0 12
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PPUSH
61721: CALL_OW 2
61725: ST_TO_ADDR
// end ;
61726: GO 61632
61728: POP
61729: POP
61730: GO 61612
61732: POP
61733: POP
// if not list then
61734: LD_VAR 0 13
61738: NOT
61739: IFFALSE 61743
// exit ;
61741: GO 61989
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61743: LD_ADDR_VAR 0 13
61747: PUSH
61748: LD_VAR 0 1
61752: PPUSH
61753: LD_VAR 0 13
61757: PPUSH
61758: LD_INT 1
61760: PPUSH
61761: LD_INT 1
61763: PPUSH
61764: CALL 21745 0 4
61768: ST_TO_ADDR
// ComStop ( flame ) ;
61769: LD_VAR 0 1
61773: PPUSH
61774: CALL_OW 141
// for i in list do
61778: LD_ADDR_VAR 0 6
61782: PUSH
61783: LD_VAR 0 13
61787: PUSH
61788: FOR_IN
61789: IFFALSE 61820
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61791: LD_VAR 0 1
61795: PPUSH
61796: LD_VAR 0 6
61800: PUSH
61801: LD_INT 1
61803: ARRAY
61804: PPUSH
61805: LD_VAR 0 6
61809: PUSH
61810: LD_INT 2
61812: ARRAY
61813: PPUSH
61814: CALL_OW 176
61818: GO 61788
61820: POP
61821: POP
// repeat wait ( 0 0$1 ) ;
61822: LD_INT 35
61824: PPUSH
61825: CALL_OW 67
// task := GetTaskList ( flame ) ;
61829: LD_ADDR_VAR 0 14
61833: PUSH
61834: LD_VAR 0 1
61838: PPUSH
61839: CALL_OW 437
61843: ST_TO_ADDR
// if not task then
61844: LD_VAR 0 14
61848: NOT
61849: IFFALSE 61853
// exit ;
61851: GO 61989
// if task [ 1 ] [ 1 ] <> | then
61853: LD_VAR 0 14
61857: PUSH
61858: LD_INT 1
61860: ARRAY
61861: PUSH
61862: LD_INT 1
61864: ARRAY
61865: PUSH
61866: LD_STRING |
61868: NONEQUAL
61869: IFFALSE 61873
// exit ;
61871: GO 61989
// _x := task [ 1 ] [ 2 ] ;
61873: LD_ADDR_VAR 0 11
61877: PUSH
61878: LD_VAR 0 14
61882: PUSH
61883: LD_INT 1
61885: ARRAY
61886: PUSH
61887: LD_INT 2
61889: ARRAY
61890: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61891: LD_ADDR_VAR 0 12
61895: PUSH
61896: LD_VAR 0 14
61900: PUSH
61901: LD_INT 1
61903: ARRAY
61904: PUSH
61905: LD_INT 3
61907: ARRAY
61908: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61909: LD_VAR 0 11
61913: PPUSH
61914: LD_VAR 0 12
61918: PPUSH
61919: CALL_OW 351
61923: NOT
61924: IFTRUE 61943
61926: PUSH
61927: LD_VAR 0 11
61931: PPUSH
61932: LD_VAR 0 12
61936: PPUSH
61937: CALL_OW 554
61941: NOT
61942: OR
61943: IFFALSE 61977
// begin task := Delete ( task , 1 ) ;
61945: LD_ADDR_VAR 0 14
61949: PUSH
61950: LD_VAR 0 14
61954: PPUSH
61955: LD_INT 1
61957: PPUSH
61958: CALL_OW 3
61962: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61963: LD_VAR 0 1
61967: PPUSH
61968: LD_VAR 0 14
61972: PPUSH
61973: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 314
61986: NOT
61987: IFFALSE 61822
// end ;
61989: LD_VAR 0 5
61993: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61994: LD_EXP 64
61998: NOT
61999: IFFALSE 62049
62001: GO 62003
62003: DISABLE
// begin initHack := true ;
62004: LD_ADDR_EXP 64
62008: PUSH
62009: LD_INT 1
62011: ST_TO_ADDR
// hackTanks := [ ] ;
62012: LD_ADDR_EXP 65
62016: PUSH
62017: EMPTY
62018: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62019: LD_ADDR_EXP 66
62023: PUSH
62024: EMPTY
62025: ST_TO_ADDR
// hackLimit := 3 ;
62026: LD_ADDR_EXP 67
62030: PUSH
62031: LD_INT 3
62033: ST_TO_ADDR
// hackDist := 12 ;
62034: LD_ADDR_EXP 68
62038: PUSH
62039: LD_INT 12
62041: ST_TO_ADDR
// hackCounter := [ ] ;
62042: LD_ADDR_EXP 69
62046: PUSH
62047: EMPTY
62048: ST_TO_ADDR
// end ;
62049: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62050: LD_EXP 64
62054: IFFALSE 62072
62056: PUSH
62057: LD_INT 34
62059: PUSH
62060: LD_INT 99
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PPUSH
62067: CALL_OW 69
62071: AND
62072: IFFALSE 62325
62074: GO 62076
62076: DISABLE
62077: LD_INT 0
62079: PPUSH
62080: PPUSH
// begin enable ;
62081: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62082: LD_ADDR_VAR 0 1
62086: PUSH
62087: LD_INT 34
62089: PUSH
62090: LD_INT 99
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PPUSH
62097: CALL_OW 69
62101: PUSH
62102: FOR_IN
62103: IFFALSE 62323
// begin if not i in hackTanks then
62105: LD_VAR 0 1
62109: PUSH
62110: LD_EXP 65
62114: IN
62115: NOT
62116: IFFALSE 62199
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62118: LD_ADDR_EXP 65
62122: PUSH
62123: LD_EXP 65
62127: PPUSH
62128: LD_EXP 65
62132: PUSH
62133: LD_INT 1
62135: PLUS
62136: PPUSH
62137: LD_VAR 0 1
62141: PPUSH
62142: CALL_OW 1
62146: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62147: LD_ADDR_EXP 66
62151: PUSH
62152: LD_EXP 66
62156: PPUSH
62157: LD_EXP 66
62161: PUSH
62162: LD_INT 1
62164: PLUS
62165: PPUSH
62166: EMPTY
62167: PPUSH
62168: CALL_OW 1
62172: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62173: LD_ADDR_EXP 69
62177: PUSH
62178: LD_EXP 69
62182: PPUSH
62183: LD_EXP 69
62187: PUSH
62188: LD_INT 1
62190: PLUS
62191: PPUSH
62192: EMPTY
62193: PPUSH
62194: CALL_OW 1
62198: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62199: LD_VAR 0 1
62203: PPUSH
62204: CALL_OW 302
62208: NOT
62209: IFFALSE 62222
// begin HackUnlinkAll ( i ) ;
62211: LD_VAR 0 1
62215: PPUSH
62216: CALL 62328 0 1
// continue ;
62220: GO 62102
// end ; HackCheckCapturedStatus ( i ) ;
62222: LD_VAR 0 1
62226: PPUSH
62227: CALL 62773 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62231: LD_ADDR_VAR 0 2
62235: PUSH
62236: LD_INT 81
62238: PUSH
62239: LD_VAR 0 1
62243: PPUSH
62244: CALL_OW 255
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 33
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 91
62265: PUSH
62266: LD_VAR 0 1
62270: PUSH
62271: LD_EXP 68
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 50
62283: PUSH
62284: EMPTY
62285: LIST
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: PPUSH
62293: CALL_OW 69
62297: ST_TO_ADDR
// if not tmp then
62298: LD_VAR 0 2
62302: NOT
62303: IFFALSE 62307
// continue ;
62305: GO 62102
// HackLink ( i , tmp ) ;
62307: LD_VAR 0 1
62311: PPUSH
62312: LD_VAR 0 2
62316: PPUSH
62317: CALL 62464 0 2
// end ;
62321: GO 62102
62323: POP
62324: POP
// end ;
62325: PPOPN 2
62327: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62328: LD_INT 0
62330: PPUSH
62331: PPUSH
62332: PPUSH
// if not hack in hackTanks then
62333: LD_VAR 0 1
62337: PUSH
62338: LD_EXP 65
62342: IN
62343: NOT
62344: IFFALSE 62348
// exit ;
62346: GO 62459
// index := GetElementIndex ( hackTanks , hack ) ;
62348: LD_ADDR_VAR 0 4
62352: PUSH
62353: LD_EXP 65
62357: PPUSH
62358: LD_VAR 0 1
62362: PPUSH
62363: CALL 21040 0 2
62367: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62368: LD_EXP 66
62372: PUSH
62373: LD_VAR 0 4
62377: ARRAY
62378: IFFALSE 62459
// begin for i in hackTanksCaptured [ index ] do
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: LD_EXP 66
62389: PUSH
62390: LD_VAR 0 4
62394: ARRAY
62395: PUSH
62396: FOR_IN
62397: IFFALSE 62423
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62399: LD_VAR 0 3
62403: PUSH
62404: LD_INT 1
62406: ARRAY
62407: PPUSH
62408: LD_VAR 0 3
62412: PUSH
62413: LD_INT 2
62415: ARRAY
62416: PPUSH
62417: CALL_OW 235
62421: GO 62396
62423: POP
62424: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62425: LD_ADDR_EXP 66
62429: PUSH
62430: LD_EXP 66
62434: PPUSH
62435: LD_VAR 0 4
62439: PPUSH
62440: EMPTY
62441: PPUSH
62442: CALL_OW 1
62446: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62447: LD_VAR 0 1
62451: PPUSH
62452: LD_INT 0
62454: PPUSH
62455: CALL_OW 505
// end ; end ;
62459: LD_VAR 0 2
62463: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62464: LD_INT 0
62466: PPUSH
62467: PPUSH
62468: PPUSH
// if not hack in hackTanks or not vehicles then
62469: LD_VAR 0 1
62473: PUSH
62474: LD_EXP 65
62478: IN
62479: NOT
62480: IFTRUE 62489
62482: PUSH
62483: LD_VAR 0 2
62487: NOT
62488: OR
62489: IFFALSE 62493
// exit ;
62491: GO 62768
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62493: LD_ADDR_VAR 0 2
62497: PUSH
62498: LD_VAR 0 1
62502: PPUSH
62503: LD_VAR 0 2
62507: PPUSH
62508: LD_INT 1
62510: PPUSH
62511: LD_INT 1
62513: PPUSH
62514: CALL 21692 0 4
62518: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62519: LD_ADDR_VAR 0 5
62523: PUSH
62524: LD_EXP 65
62528: PPUSH
62529: LD_VAR 0 1
62533: PPUSH
62534: CALL 21040 0 2
62538: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62539: LD_EXP 66
62543: PUSH
62544: LD_VAR 0 5
62548: ARRAY
62549: PUSH
62550: LD_EXP 67
62554: LESS
62555: IFFALSE 62744
// begin for i := 1 to vehicles do
62557: LD_ADDR_VAR 0 4
62561: PUSH
62562: DOUBLE
62563: LD_INT 1
62565: DEC
62566: ST_TO_ADDR
62567: LD_VAR 0 2
62571: PUSH
62572: FOR_TO
62573: IFFALSE 62742
// begin if hackTanksCaptured [ index ] = hackLimit then
62575: LD_EXP 66
62579: PUSH
62580: LD_VAR 0 5
62584: ARRAY
62585: PUSH
62586: LD_EXP 67
62590: EQUAL
62591: IFFALSE 62595
// break ;
62593: GO 62742
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62595: LD_ADDR_EXP 69
62599: PUSH
62600: LD_EXP 69
62604: PPUSH
62605: LD_VAR 0 5
62609: PPUSH
62610: LD_EXP 69
62614: PUSH
62615: LD_VAR 0 5
62619: ARRAY
62620: PUSH
62621: LD_INT 1
62623: PLUS
62624: PPUSH
62625: CALL_OW 1
62629: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62630: LD_ADDR_EXP 66
62634: PUSH
62635: LD_EXP 66
62639: PPUSH
62640: LD_VAR 0 5
62644: PUSH
62645: LD_EXP 66
62649: PUSH
62650: LD_VAR 0 5
62654: ARRAY
62655: PUSH
62656: LD_INT 1
62658: PLUS
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PPUSH
62664: LD_VAR 0 2
62668: PUSH
62669: LD_VAR 0 4
62673: ARRAY
62674: PUSH
62675: LD_VAR 0 2
62679: PUSH
62680: LD_VAR 0 4
62684: ARRAY
62685: PPUSH
62686: CALL_OW 255
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PPUSH
62695: CALL 21257 0 3
62699: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62700: LD_VAR 0 2
62704: PUSH
62705: LD_VAR 0 4
62709: ARRAY
62710: PPUSH
62711: LD_VAR 0 1
62715: PPUSH
62716: CALL_OW 255
62720: PPUSH
62721: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62725: LD_VAR 0 2
62729: PUSH
62730: LD_VAR 0 4
62734: ARRAY
62735: PPUSH
62736: CALL_OW 141
// end ;
62740: GO 62572
62742: POP
62743: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62744: LD_VAR 0 1
62748: PPUSH
62749: LD_EXP 66
62753: PUSH
62754: LD_VAR 0 5
62758: ARRAY
62759: PUSH
62760: LD_INT 0
62762: PLUS
62763: PPUSH
62764: CALL_OW 505
// end ;
62768: LD_VAR 0 3
62772: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62773: LD_INT 0
62775: PPUSH
62776: PPUSH
62777: PPUSH
62778: PPUSH
// if not hack in hackTanks then
62779: LD_VAR 0 1
62783: PUSH
62784: LD_EXP 65
62788: IN
62789: NOT
62790: IFFALSE 62794
// exit ;
62792: GO 63038
// index := GetElementIndex ( hackTanks , hack ) ;
62794: LD_ADDR_VAR 0 4
62798: PUSH
62799: LD_EXP 65
62803: PPUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL 21040 0 2
62813: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62814: LD_ADDR_VAR 0 3
62818: PUSH
62819: DOUBLE
62820: LD_EXP 66
62824: PUSH
62825: LD_VAR 0 4
62829: ARRAY
62830: INC
62831: ST_TO_ADDR
62832: LD_INT 1
62834: PUSH
62835: FOR_DOWNTO
62836: IFFALSE 63012
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62838: LD_ADDR_VAR 0 5
62842: PUSH
62843: LD_EXP 66
62847: PUSH
62848: LD_VAR 0 4
62852: ARRAY
62853: PUSH
62854: LD_VAR 0 3
62858: ARRAY
62859: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62860: LD_VAR 0 5
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: PPUSH
62869: CALL_OW 302
62873: NOT
62874: IFTRUE 62902
62876: PUSH
62877: LD_VAR 0 5
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PPUSH
62886: CALL_OW 255
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: CALL_OW 255
62900: NONEQUAL
62901: OR
62902: IFFALSE 63010
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62904: LD_VAR 0 5
62908: PUSH
62909: LD_INT 1
62911: ARRAY
62912: PPUSH
62913: CALL_OW 305
62917: IFFALSE 62945
62919: PUSH
62920: LD_VAR 0 5
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: PPUSH
62929: CALL_OW 255
62933: PUSH
62934: LD_VAR 0 1
62938: PPUSH
62939: CALL_OW 255
62943: EQUAL
62944: AND
62945: IFFALSE 62969
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62947: LD_VAR 0 5
62951: PUSH
62952: LD_INT 1
62954: ARRAY
62955: PPUSH
62956: LD_VAR 0 5
62960: PUSH
62961: LD_INT 2
62963: ARRAY
62964: PPUSH
62965: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62969: LD_ADDR_EXP 66
62973: PUSH
62974: LD_EXP 66
62978: PPUSH
62979: LD_VAR 0 4
62983: PPUSH
62984: LD_EXP 66
62988: PUSH
62989: LD_VAR 0 4
62993: ARRAY
62994: PPUSH
62995: LD_VAR 0 3
62999: PPUSH
63000: CALL_OW 3
63004: PPUSH
63005: CALL_OW 1
63009: ST_TO_ADDR
// end ; end ;
63010: GO 62835
63012: POP
63013: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63014: LD_VAR 0 1
63018: PPUSH
63019: LD_EXP 66
63023: PUSH
63024: LD_VAR 0 4
63028: ARRAY
63029: PUSH
63030: LD_INT 0
63032: PLUS
63033: PPUSH
63034: CALL_OW 505
// end ;
63038: LD_VAR 0 2
63042: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63043: LD_INT 0
63045: PPUSH
63046: PPUSH
63047: PPUSH
63048: PPUSH
// if not hack in hackTanks then
63049: LD_VAR 0 1
63053: PUSH
63054: LD_EXP 65
63058: IN
63059: NOT
63060: IFFALSE 63064
// exit ;
63062: GO 63149
// index := GetElementIndex ( hackTanks , hack ) ;
63064: LD_ADDR_VAR 0 5
63068: PUSH
63069: LD_EXP 65
63073: PPUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: CALL 21040 0 2
63083: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63084: LD_ADDR_VAR 0 4
63088: PUSH
63089: DOUBLE
63090: LD_INT 1
63092: DEC
63093: ST_TO_ADDR
63094: LD_EXP 66
63098: PUSH
63099: LD_VAR 0 5
63103: ARRAY
63104: PUSH
63105: FOR_TO
63106: IFFALSE 63147
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63108: LD_EXP 66
63112: PUSH
63113: LD_VAR 0 5
63117: ARRAY
63118: PUSH
63119: LD_VAR 0 4
63123: ARRAY
63124: PUSH
63125: LD_INT 1
63127: ARRAY
63128: PUSH
63129: LD_VAR 0 2
63133: EQUAL
63134: IFFALSE 63145
// KillUnit ( vehicle ) ;
63136: LD_VAR 0 2
63140: PPUSH
63141: CALL_OW 66
63145: GO 63105
63147: POP
63148: POP
// end ;
63149: LD_VAR 0 3
63153: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
63154: LD_EXP 70
63158: NOT
63159: IFFALSE 63292
63161: GO 63163
63163: DISABLE
63164: LD_INT 0
63166: PPUSH
// begin initMiner := true ;
63167: LD_ADDR_EXP 70
63171: PUSH
63172: LD_INT 1
63174: ST_TO_ADDR
// minersList := [ ] ;
63175: LD_ADDR_EXP 71
63179: PUSH
63180: EMPTY
63181: ST_TO_ADDR
// minerMinesList := [ ] ;
63182: LD_ADDR_EXP 72
63186: PUSH
63187: EMPTY
63188: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
63189: LD_ADDR_EXP 73
63193: PUSH
63194: LD_INT 6
63196: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63197: LD_ADDR_VAR 0 1
63201: PUSH
63202: LD_INT 34
63204: PUSH
63205: LD_INT 81
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PPUSH
63212: CALL_OW 69
63216: PUSH
63217: FOR_IN
63218: IFFALSE 63290
// begin if not i in minersList then
63220: LD_VAR 0 1
63224: PUSH
63225: LD_EXP 71
63229: IN
63230: NOT
63231: IFFALSE 63288
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63233: LD_ADDR_EXP 71
63237: PUSH
63238: LD_EXP 71
63242: PPUSH
63243: LD_EXP 71
63247: PUSH
63248: LD_INT 1
63250: PLUS
63251: PPUSH
63252: LD_VAR 0 1
63256: PPUSH
63257: CALL_OW 1
63261: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63262: LD_ADDR_EXP 72
63266: PUSH
63267: LD_EXP 72
63271: PPUSH
63272: LD_EXP 72
63276: PUSH
63277: LD_INT 1
63279: PLUS
63280: PPUSH
63281: EMPTY
63282: PPUSH
63283: CALL_OW 1
63287: ST_TO_ADDR
// end end ;
63288: GO 63217
63290: POP
63291: POP
// end ;
63292: PPOPN 1
63294: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
63295: LD_EXP 70
63299: IFFALSE 63330
63301: PUSH
63302: LD_EXP 72
63306: PPUSH
63307: CALL 18339 0 1
63311: IFTRUE 63329
63313: PUSH
63314: LD_INT 34
63316: PUSH
63317: LD_INT 81
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PPUSH
63324: CALL_OW 69
63328: OR
63329: AND
63330: IFFALSE 63829
63332: GO 63334
63334: DISABLE
63335: LD_INT 0
63337: PPUSH
63338: PPUSH
63339: PPUSH
63340: PPUSH
// begin enable ;
63341: ENABLE
// for i := minerMinesList downto 1 do
63342: LD_ADDR_VAR 0 1
63346: PUSH
63347: DOUBLE
63348: LD_EXP 72
63352: INC
63353: ST_TO_ADDR
63354: LD_INT 1
63356: PUSH
63357: FOR_DOWNTO
63358: IFFALSE 63827
// begin if IsLive ( minersList [ i ] ) then
63360: LD_EXP 71
63364: PUSH
63365: LD_VAR 0 1
63369: ARRAY
63370: PPUSH
63371: CALL_OW 300
63375: IFFALSE 63408
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
63377: LD_EXP 71
63381: PUSH
63382: LD_VAR 0 1
63386: ARRAY
63387: PPUSH
63388: LD_EXP 72
63392: PUSH
63393: LD_VAR 0 1
63397: ARRAY
63398: PPUSH
63399: CALL 18339 0 1
63403: PPUSH
63404: CALL_OW 505
// if not minerMinesList [ i ] then
63408: LD_EXP 72
63412: PUSH
63413: LD_VAR 0 1
63417: ARRAY
63418: NOT
63419: IFFALSE 63423
// continue ;
63421: GO 63357
// for j := minerMinesList [ i ] downto 1 do
63423: LD_ADDR_VAR 0 2
63427: PUSH
63428: DOUBLE
63429: LD_EXP 72
63433: PUSH
63434: LD_VAR 0 1
63438: ARRAY
63439: INC
63440: ST_TO_ADDR
63441: LD_INT 1
63443: PUSH
63444: FOR_DOWNTO
63445: IFFALSE 63823
// begin side := GetSide ( minersList [ i ] ) ;
63447: LD_ADDR_VAR 0 3
63451: PUSH
63452: LD_EXP 71
63456: PUSH
63457: LD_VAR 0 1
63461: ARRAY
63462: PPUSH
63463: CALL_OW 255
63467: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63468: LD_EXP 71
63472: PUSH
63473: LD_VAR 0 1
63477: ARRAY
63478: PPUSH
63479: CALL_OW 301
63483: IFTRUE 63503
63485: PUSH
63486: LD_EXP 71
63490: PUSH
63491: LD_VAR 0 1
63495: ARRAY
63496: PPUSH
63497: CALL_OW 305
63501: NOT
63502: OR
63503: IFFALSE 63594
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63505: LD_EXP 72
63509: PUSH
63510: LD_VAR 0 1
63514: ARRAY
63515: PUSH
63516: LD_VAR 0 2
63520: ARRAY
63521: PUSH
63522: LD_INT 1
63524: ARRAY
63525: PPUSH
63526: LD_EXP 72
63530: PUSH
63531: LD_VAR 0 1
63535: ARRAY
63536: PUSH
63537: LD_VAR 0 2
63541: ARRAY
63542: PUSH
63543: LD_INT 2
63545: ARRAY
63546: PPUSH
63547: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63551: LD_ADDR_EXP 72
63555: PUSH
63556: LD_EXP 72
63560: PPUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: LD_EXP 72
63570: PUSH
63571: LD_VAR 0 1
63575: ARRAY
63576: PPUSH
63577: LD_VAR 0 2
63581: PPUSH
63582: CALL_OW 3
63586: PPUSH
63587: CALL_OW 1
63591: ST_TO_ADDR
// continue ;
63592: GO 63444
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63594: LD_ADDR_VAR 0 4
63598: PUSH
63599: LD_EXP 72
63603: PUSH
63604: LD_VAR 0 1
63608: ARRAY
63609: PUSH
63610: LD_VAR 0 2
63614: ARRAY
63615: PUSH
63616: LD_INT 1
63618: ARRAY
63619: PPUSH
63620: LD_EXP 72
63624: PUSH
63625: LD_VAR 0 1
63629: ARRAY
63630: PUSH
63631: LD_VAR 0 2
63635: ARRAY
63636: PUSH
63637: LD_INT 2
63639: ARRAY
63640: PPUSH
63641: CALL_OW 428
63645: ST_TO_ADDR
// if not tmp then
63646: LD_VAR 0 4
63650: NOT
63651: IFFALSE 63655
// continue ;
63653: GO 63444
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63655: LD_VAR 0 4
63659: PUSH
63660: LD_INT 81
63662: PUSH
63663: LD_VAR 0 3
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PPUSH
63672: CALL_OW 69
63676: IN
63677: IFFALSE 63727
63679: PUSH
63680: LD_EXP 72
63684: PUSH
63685: LD_VAR 0 1
63689: ARRAY
63690: PUSH
63691: LD_VAR 0 2
63695: ARRAY
63696: PUSH
63697: LD_INT 1
63699: ARRAY
63700: PPUSH
63701: LD_EXP 72
63705: PUSH
63706: LD_VAR 0 1
63710: ARRAY
63711: PUSH
63712: LD_VAR 0 2
63716: ARRAY
63717: PUSH
63718: LD_INT 2
63720: ARRAY
63721: PPUSH
63722: CALL_OW 458
63726: AND
63727: IFFALSE 63821
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63729: LD_EXP 72
63733: PUSH
63734: LD_VAR 0 1
63738: ARRAY
63739: PUSH
63740: LD_VAR 0 2
63744: ARRAY
63745: PUSH
63746: LD_INT 1
63748: ARRAY
63749: PPUSH
63750: LD_EXP 72
63754: PUSH
63755: LD_VAR 0 1
63759: ARRAY
63760: PUSH
63761: LD_VAR 0 2
63765: ARRAY
63766: PUSH
63767: LD_INT 2
63769: ARRAY
63770: PPUSH
63771: LD_VAR 0 3
63775: PPUSH
63776: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63780: LD_ADDR_EXP 72
63784: PUSH
63785: LD_EXP 72
63789: PPUSH
63790: LD_VAR 0 1
63794: PPUSH
63795: LD_EXP 72
63799: PUSH
63800: LD_VAR 0 1
63804: ARRAY
63805: PPUSH
63806: LD_VAR 0 2
63810: PPUSH
63811: CALL_OW 3
63815: PPUSH
63816: CALL_OW 1
63820: ST_TO_ADDR
// end ; end ;
63821: GO 63444
63823: POP
63824: POP
// end ;
63825: GO 63357
63827: POP
63828: POP
// end ;
63829: PPOPN 4
63831: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63832: LD_INT 0
63834: PPUSH
63835: PPUSH
63836: PPUSH
63837: PPUSH
// result := false ;
63838: LD_ADDR_VAR 0 4
63842: PUSH
63843: LD_INT 0
63845: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 264
63855: PUSH
63856: LD_INT 81
63858: EQUAL
63859: NOT
63860: IFFALSE 63864
// exit ;
63862: GO 64234
// side := GetSide ( unit ) ;
63864: LD_ADDR_VAR 0 6
63868: PUSH
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 255
63878: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63879: LD_ADDR_VAR 0 5
63883: PUSH
63884: LD_EXP 71
63888: PPUSH
63889: LD_VAR 0 1
63893: PPUSH
63894: CALL 21040 0 2
63898: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63899: LD_EXP 72
63903: PUSH
63904: LD_VAR 0 5
63908: ARRAY
63909: PUSH
63910: LD_EXP 73
63914: GREATEREQUAL
63915: IFFALSE 63919
// exit ;
63917: GO 64234
// ComMoveXY ( unit , x , y ) ;
63919: LD_VAR 0 1
63923: PPUSH
63924: LD_VAR 0 2
63928: PPUSH
63929: LD_VAR 0 3
63933: PPUSH
63934: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63938: LD_INT 35
63940: PPUSH
63941: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63945: LD_VAR 0 1
63949: PPUSH
63950: LD_VAR 0 2
63954: PPUSH
63955: LD_VAR 0 3
63959: PPUSH
63960: CALL 53086 0 3
63964: NOT
63965: IFFALSE 63978
63967: PUSH
63968: LD_VAR 0 1
63972: PPUSH
63973: CALL_OW 314
63977: AND
63978: IFFALSE 63982
// exit ;
63980: GO 64234
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63982: LD_VAR 0 2
63986: PPUSH
63987: LD_VAR 0 3
63991: PPUSH
63992: CALL_OW 428
63996: PUSH
63997: LD_VAR 0 1
64001: EQUAL
64002: IFFALSE 64016
64004: PUSH
64005: LD_VAR 0 1
64009: PPUSH
64010: CALL_OW 314
64014: NOT
64015: AND
64016: IFFALSE 63938
// if MineAtPos ( x , y ) then
64018: LD_VAR 0 2
64022: PPUSH
64023: LD_VAR 0 3
64027: PPUSH
64028: CALL_OW 458
64032: IFFALSE 64036
// exit ;
64034: GO 64234
// if your_side = side then
64036: LD_OWVAR 2
64040: PUSH
64041: LD_VAR 0 6
64045: EQUAL
64046: IFFALSE 64065
// PlaySoundXY ( x , y , PlantMine ) ;
64048: LD_VAR 0 2
64052: PPUSH
64053: LD_VAR 0 3
64057: PPUSH
64058: LD_STRING PlantMine
64060: PPUSH
64061: CALL_OW 366
// repeat wait ( 1 ) ;
64065: LD_INT 1
64067: PPUSH
64068: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
64072: LD_VAR 0 2
64076: PPUSH
64077: LD_VAR 0 3
64081: PPUSH
64082: LD_VAR 0 6
64086: PPUSH
64087: LD_INT 0
64089: PPUSH
64090: CALL_OW 454
64094: IFFALSE 64065
// if MineAtPos ( x , y ) then
64096: LD_VAR 0 2
64100: PPUSH
64101: LD_VAR 0 3
64105: PPUSH
64106: CALL_OW 458
64110: IFFALSE 64226
// begin for i in minerMinesList [ index ] do
64112: LD_ADDR_VAR 0 7
64116: PUSH
64117: LD_EXP 72
64121: PUSH
64122: LD_VAR 0 5
64126: ARRAY
64127: PUSH
64128: FOR_IN
64129: IFFALSE 64171
// if i [ 1 ] = x and i [ 2 ] = y then
64131: LD_VAR 0 7
64135: PUSH
64136: LD_INT 1
64138: ARRAY
64139: PUSH
64140: LD_VAR 0 2
64144: EQUAL
64145: IFFALSE 64163
64147: PUSH
64148: LD_VAR 0 7
64152: PUSH
64153: LD_INT 2
64155: ARRAY
64156: PUSH
64157: LD_VAR 0 3
64161: EQUAL
64162: AND
64163: IFFALSE 64169
// exit ;
64165: POP
64166: POP
64167: GO 64234
64169: GO 64128
64171: POP
64172: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64173: LD_ADDR_EXP 72
64177: PUSH
64178: LD_EXP 72
64182: PPUSH
64183: LD_VAR 0 5
64187: PUSH
64188: LD_EXP 72
64192: PUSH
64193: LD_VAR 0 5
64197: ARRAY
64198: PUSH
64199: LD_INT 1
64201: PLUS
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PPUSH
64207: LD_VAR 0 2
64211: PUSH
64212: LD_VAR 0 3
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PPUSH
64221: CALL 21257 0 3
64225: ST_TO_ADDR
// end ; result := true ;
64226: LD_ADDR_VAR 0 4
64230: PUSH
64231: LD_INT 1
64233: ST_TO_ADDR
// end ;
64234: LD_VAR 0 4
64238: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64239: LD_INT 0
64241: PPUSH
64242: PPUSH
64243: PPUSH
// if not unit in minersList then
64244: LD_VAR 0 1
64248: PUSH
64249: LD_EXP 71
64253: IN
64254: NOT
64255: IFFALSE 64259
// exit ;
64257: GO 64466
// index := GetElementIndex ( minersList , unit ) ;
64259: LD_ADDR_VAR 0 6
64263: PUSH
64264: LD_EXP 71
64268: PPUSH
64269: LD_VAR 0 1
64273: PPUSH
64274: CALL 21040 0 2
64278: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64279: LD_ADDR_VAR 0 5
64283: PUSH
64284: DOUBLE
64285: LD_EXP 72
64289: PUSH
64290: LD_VAR 0 6
64294: ARRAY
64295: INC
64296: ST_TO_ADDR
64297: LD_INT 1
64299: PUSH
64300: FOR_DOWNTO
64301: IFFALSE 64464
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64303: LD_EXP 72
64307: PUSH
64308: LD_VAR 0 6
64312: ARRAY
64313: PUSH
64314: LD_VAR 0 5
64318: ARRAY
64319: PUSH
64320: LD_INT 1
64322: ARRAY
64323: PPUSH
64324: LD_EXP 72
64328: PUSH
64329: LD_VAR 0 6
64333: ARRAY
64334: PUSH
64335: LD_VAR 0 5
64339: ARRAY
64340: PUSH
64341: LD_INT 2
64343: ARRAY
64344: PPUSH
64345: LD_VAR 0 2
64349: PPUSH
64350: LD_VAR 0 3
64354: PPUSH
64355: CALL_OW 298
64359: PUSH
64360: LD_INT 6
64362: LESS
64363: IFFALSE 64462
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64365: LD_EXP 72
64369: PUSH
64370: LD_VAR 0 6
64374: ARRAY
64375: PUSH
64376: LD_VAR 0 5
64380: ARRAY
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PPUSH
64386: LD_EXP 72
64390: PUSH
64391: LD_VAR 0 6
64395: ARRAY
64396: PUSH
64397: LD_VAR 0 5
64401: ARRAY
64402: PUSH
64403: LD_INT 2
64405: ARRAY
64406: PPUSH
64407: LD_VAR 0 1
64411: PPUSH
64412: CALL_OW 255
64416: PPUSH
64417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64421: LD_ADDR_EXP 72
64425: PUSH
64426: LD_EXP 72
64430: PPUSH
64431: LD_VAR 0 6
64435: PPUSH
64436: LD_EXP 72
64440: PUSH
64441: LD_VAR 0 6
64445: ARRAY
64446: PPUSH
64447: LD_VAR 0 5
64451: PPUSH
64452: CALL_OW 3
64456: PPUSH
64457: CALL_OW 1
64461: ST_TO_ADDR
// end ; end ;
64462: GO 64300
64464: POP
64465: POP
// end ;
64466: LD_VAR 0 4
64470: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64471: LD_INT 0
64473: PPUSH
64474: PPUSH
64475: PPUSH
64476: PPUSH
64477: PPUSH
64478: PPUSH
64479: PPUSH
64480: PPUSH
64481: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64482: LD_VAR 0 1
64486: PPUSH
64487: CALL_OW 264
64491: PUSH
64492: LD_INT 81
64494: EQUAL
64495: NOT
64496: IFTRUE 64511
64498: PUSH
64499: LD_VAR 0 1
64503: PUSH
64504: LD_EXP 71
64508: IN
64509: NOT
64510: OR
64511: IFFALSE 64515
// exit ;
64513: GO 64841
// index := GetElementIndex ( minersList , unit ) ;
64515: LD_ADDR_VAR 0 6
64519: PUSH
64520: LD_EXP 71
64524: PPUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: CALL 21040 0 2
64534: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64535: LD_ADDR_VAR 0 8
64539: PUSH
64540: LD_EXP 73
64544: PUSH
64545: LD_EXP 72
64549: PUSH
64550: LD_VAR 0 6
64554: ARRAY
64555: MINUS
64556: ST_TO_ADDR
// if not minesFreeAmount then
64557: LD_VAR 0 8
64561: NOT
64562: IFFALSE 64566
// exit ;
64564: GO 64841
// tmp := [ ] ;
64566: LD_ADDR_VAR 0 7
64570: PUSH
64571: EMPTY
64572: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64573: LD_ADDR_VAR 0 5
64577: PUSH
64578: DOUBLE
64579: LD_INT 1
64581: DEC
64582: ST_TO_ADDR
64583: LD_VAR 0 8
64587: PUSH
64588: FOR_TO
64589: IFFALSE 64788
// begin _d := rand ( 0 , 5 ) ;
64591: LD_ADDR_VAR 0 11
64595: PUSH
64596: LD_INT 0
64598: PPUSH
64599: LD_INT 5
64601: PPUSH
64602: CALL_OW 12
64606: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64607: LD_ADDR_VAR 0 12
64611: PUSH
64612: LD_INT 2
64614: PPUSH
64615: LD_INT 6
64617: PPUSH
64618: CALL_OW 12
64622: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64623: LD_ADDR_VAR 0 9
64627: PUSH
64628: LD_VAR 0 2
64632: PPUSH
64633: LD_VAR 0 11
64637: PPUSH
64638: LD_VAR 0 12
64642: PPUSH
64643: CALL_OW 272
64647: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64648: LD_ADDR_VAR 0 10
64652: PUSH
64653: LD_VAR 0 3
64657: PPUSH
64658: LD_VAR 0 11
64662: PPUSH
64663: LD_VAR 0 12
64667: PPUSH
64668: CALL_OW 273
64672: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64673: LD_VAR 0 9
64677: PPUSH
64678: LD_VAR 0 10
64682: PPUSH
64683: CALL_OW 488
64687: IFFALSE 64711
64689: PUSH
64690: LD_VAR 0 9
64694: PUSH
64695: LD_VAR 0 10
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_VAR 0 7
64708: IN
64709: NOT
64710: AND
64711: IFFALSE 64730
64713: PUSH
64714: LD_VAR 0 9
64718: PPUSH
64719: LD_VAR 0 10
64723: PPUSH
64724: CALL_OW 458
64728: NOT
64729: AND
64730: IFFALSE 64772
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64732: LD_ADDR_VAR 0 7
64736: PUSH
64737: LD_VAR 0 7
64741: PPUSH
64742: LD_VAR 0 7
64746: PUSH
64747: LD_INT 1
64749: PLUS
64750: PPUSH
64751: LD_VAR 0 9
64755: PUSH
64756: LD_VAR 0 10
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PPUSH
64765: CALL_OW 1
64769: ST_TO_ADDR
64770: GO 64786
// i := i - 1 ;
64772: LD_ADDR_VAR 0 5
64776: PUSH
64777: LD_VAR 0 5
64781: PUSH
64782: LD_INT 1
64784: MINUS
64785: ST_TO_ADDR
// end ;
64786: GO 64588
64788: POP
64789: POP
// for i in tmp do
64790: LD_ADDR_VAR 0 5
64794: PUSH
64795: LD_VAR 0 7
64799: PUSH
64800: FOR_IN
64801: IFFALSE 64839
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64803: LD_VAR 0 1
64807: PPUSH
64808: LD_VAR 0 5
64812: PUSH
64813: LD_INT 1
64815: ARRAY
64816: PPUSH
64817: LD_VAR 0 5
64821: PUSH
64822: LD_INT 2
64824: ARRAY
64825: PPUSH
64826: CALL 63832 0 3
64830: NOT
64831: IFFALSE 64837
// exit ;
64833: POP
64834: POP
64835: GO 64841
64837: GO 64800
64839: POP
64840: POP
// end ;
64841: LD_VAR 0 4
64845: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64846: LD_INT 0
64848: PPUSH
64849: PPUSH
64850: PPUSH
64851: PPUSH
64852: PPUSH
64853: PPUSH
64854: PPUSH
64855: PPUSH
64856: PPUSH
// if GetClass ( unit ) <> class_sniper then
64857: LD_VAR 0 1
64861: PPUSH
64862: CALL_OW 257
64866: PUSH
64867: LD_INT 5
64869: NONEQUAL
64870: IFFALSE 64874
// exit ;
64872: GO 65344
// dist := 8 ;
64874: LD_ADDR_VAR 0 5
64878: PUSH
64879: LD_INT 8
64881: ST_TO_ADDR
// viewRange := 12 ;
64882: LD_ADDR_VAR 0 8
64886: PUSH
64887: LD_INT 12
64889: ST_TO_ADDR
// side := GetSide ( unit ) ;
64890: LD_ADDR_VAR 0 6
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 255
64904: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64905: LD_INT 61
64907: PPUSH
64908: LD_VAR 0 6
64912: PPUSH
64913: CALL_OW 321
64917: PUSH
64918: LD_INT 2
64920: EQUAL
64921: IFFALSE 64931
// viewRange := 16 ;
64923: LD_ADDR_VAR 0 8
64927: PUSH
64928: LD_INT 16
64930: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64931: LD_VAR 0 1
64935: PPUSH
64936: LD_VAR 0 2
64940: PPUSH
64941: LD_VAR 0 3
64945: PPUSH
64946: CALL_OW 297
64950: PUSH
64951: LD_VAR 0 5
64955: GREATER
64956: IFFALSE 65035
// begin ComMoveXY ( unit , x , y ) ;
64958: LD_VAR 0 1
64962: PPUSH
64963: LD_VAR 0 2
64967: PPUSH
64968: LD_VAR 0 3
64972: PPUSH
64973: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64977: LD_INT 35
64979: PPUSH
64980: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_VAR 0 2
64993: PPUSH
64994: LD_VAR 0 3
64998: PPUSH
64999: CALL 53086 0 3
65003: NOT
65004: IFFALSE 65008
// exit ;
65006: GO 65344
// until GetDistUnitXY ( unit , x , y ) < dist ;
65008: LD_VAR 0 1
65012: PPUSH
65013: LD_VAR 0 2
65017: PPUSH
65018: LD_VAR 0 3
65022: PPUSH
65023: CALL_OW 297
65027: PUSH
65028: LD_VAR 0 5
65032: LESS
65033: IFFALSE 64977
// end ; ComTurnXY ( unit , x , y ) ;
65035: LD_VAR 0 1
65039: PPUSH
65040: LD_VAR 0 2
65044: PPUSH
65045: LD_VAR 0 3
65049: PPUSH
65050: CALL_OW 118
// repeat if Multiplayer then
65054: LD_OWVAR 4
65058: IFFALSE 65069
// wait ( 35 ) else
65060: LD_INT 35
65062: PPUSH
65063: CALL_OW 67
65067: GO 65076
// wait ( 5 ) ;
65069: LD_INT 5
65071: PPUSH
65072: CALL_OW 67
// _d := GetDir ( unit ) ;
65076: LD_ADDR_VAR 0 11
65080: PUSH
65081: LD_VAR 0 1
65085: PPUSH
65086: CALL_OW 254
65090: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65091: LD_ADDR_VAR 0 7
65095: PUSH
65096: LD_VAR 0 1
65100: PPUSH
65101: CALL_OW 250
65105: PPUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: CALL_OW 251
65115: PPUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: LD_VAR 0 3
65125: PPUSH
65126: CALL 55722 0 4
65130: ST_TO_ADDR
// until dir = _d ;
65131: LD_VAR 0 7
65135: PUSH
65136: LD_VAR 0 11
65140: EQUAL
65141: IFFALSE 65054
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65143: LD_ADDR_VAR 0 9
65147: PUSH
65148: LD_VAR 0 1
65152: PPUSH
65153: CALL_OW 250
65157: PPUSH
65158: LD_VAR 0 7
65162: PPUSH
65163: LD_VAR 0 5
65167: PPUSH
65168: CALL_OW 272
65172: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65173: LD_ADDR_VAR 0 10
65177: PUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: CALL_OW 251
65187: PPUSH
65188: LD_VAR 0 7
65192: PPUSH
65193: LD_VAR 0 5
65197: PPUSH
65198: CALL_OW 273
65202: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65203: LD_VAR 0 9
65207: PPUSH
65208: LD_VAR 0 10
65212: PPUSH
65213: CALL_OW 488
65217: NOT
65218: IFFALSE 65222
// exit ;
65220: GO 65344
// ComAnimCustom ( unit , 1 ) ;
65222: LD_VAR 0 1
65226: PPUSH
65227: LD_INT 1
65229: PPUSH
65230: CALL_OW 592
// p := 0 ;
65234: LD_ADDR_VAR 0 12
65238: PUSH
65239: LD_INT 0
65241: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65242: LD_VAR 0 9
65246: PPUSH
65247: LD_VAR 0 10
65251: PPUSH
65252: LD_VAR 0 6
65256: PPUSH
65257: LD_VAR 0 8
65261: PPUSH
65262: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65266: LD_INT 35
65268: PPUSH
65269: CALL_OW 67
// p := Inc ( p ) ;
65273: LD_ADDR_VAR 0 12
65277: PUSH
65278: LD_VAR 0 12
65282: PPUSH
65283: CALL 55678 0 1
65287: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65288: LD_VAR 0 12
65292: PUSH
65293: LD_INT 3
65295: EQUAL
65296: IFTRUE 65310
65298: PUSH
65299: LD_VAR 0 1
65303: PPUSH
65304: CALL_OW 302
65308: NOT
65309: OR
65310: IFTRUE 65323
65312: PUSH
65313: LD_VAR 0 1
65317: PPUSH
65318: CALL_OW 301
65322: OR
65323: IFFALSE 65266
// RemoveSeeing ( _x , _y , side ) ;
65325: LD_VAR 0 9
65329: PPUSH
65330: LD_VAR 0 10
65334: PPUSH
65335: LD_VAR 0 6
65339: PPUSH
65340: CALL_OW 331
// end ;
65344: LD_VAR 0 4
65348: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
65349: LD_INT 0
65351: PPUSH
65352: PPUSH
65353: PPUSH
65354: PPUSH
65355: PPUSH
65356: PPUSH
65357: PPUSH
65358: PPUSH
65359: PPUSH
65360: PPUSH
65361: PPUSH
// if not unit then
65362: LD_VAR 0 1
65366: NOT
65367: IFFALSE 65371
// exit ;
65369: GO 65642
// side := GetSide ( unit ) ;
65371: LD_ADDR_VAR 0 3
65375: PUSH
65376: LD_VAR 0 1
65380: PPUSH
65381: CALL_OW 255
65385: ST_TO_ADDR
// x := GetX ( unit ) ;
65386: LD_ADDR_VAR 0 5
65390: PUSH
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 250
65400: ST_TO_ADDR
// y := GetY ( unit ) ;
65401: LD_ADDR_VAR 0 6
65405: PUSH
65406: LD_VAR 0 1
65410: PPUSH
65411: CALL_OW 251
65415: ST_TO_ADDR
// r := 8 ;
65416: LD_ADDR_VAR 0 4
65420: PUSH
65421: LD_INT 8
65423: ST_TO_ADDR
// if x - r < 0 then
65424: LD_VAR 0 5
65428: PUSH
65429: LD_VAR 0 4
65433: MINUS
65434: PUSH
65435: LD_INT 0
65437: LESS
65438: IFFALSE 65450
// min_x := 0 else
65440: LD_ADDR_VAR 0 7
65444: PUSH
65445: LD_INT 0
65447: ST_TO_ADDR
65448: GO 65466
// min_x := x - r ;
65450: LD_ADDR_VAR 0 7
65454: PUSH
65455: LD_VAR 0 5
65459: PUSH
65460: LD_VAR 0 4
65464: MINUS
65465: ST_TO_ADDR
// if y - r < 0 then
65466: LD_VAR 0 6
65470: PUSH
65471: LD_VAR 0 4
65475: MINUS
65476: PUSH
65477: LD_INT 0
65479: LESS
65480: IFFALSE 65492
// min_y := 0 else
65482: LD_ADDR_VAR 0 8
65486: PUSH
65487: LD_INT 0
65489: ST_TO_ADDR
65490: GO 65508
// min_y := y - r ;
65492: LD_ADDR_VAR 0 8
65496: PUSH
65497: LD_VAR 0 6
65501: PUSH
65502: LD_VAR 0 4
65506: MINUS
65507: ST_TO_ADDR
// max_x := x + r ;
65508: LD_ADDR_VAR 0 9
65512: PUSH
65513: LD_VAR 0 5
65517: PUSH
65518: LD_VAR 0 4
65522: PLUS
65523: ST_TO_ADDR
// max_y := y + r ;
65524: LD_ADDR_VAR 0 10
65528: PUSH
65529: LD_VAR 0 6
65533: PUSH
65534: LD_VAR 0 4
65538: PLUS
65539: ST_TO_ADDR
// for _x = min_x to max_x do
65540: LD_ADDR_VAR 0 11
65544: PUSH
65545: DOUBLE
65546: LD_VAR 0 7
65550: DEC
65551: ST_TO_ADDR
65552: LD_VAR 0 9
65556: PUSH
65557: FOR_TO
65558: IFFALSE 65640
// for _y = min_y to max_y do
65560: LD_ADDR_VAR 0 12
65564: PUSH
65565: DOUBLE
65566: LD_VAR 0 8
65570: DEC
65571: ST_TO_ADDR
65572: LD_VAR 0 10
65576: PUSH
65577: FOR_TO
65578: IFFALSE 65636
// begin if not ValidHex ( _x , _y ) then
65580: LD_VAR 0 11
65584: PPUSH
65585: LD_VAR 0 12
65589: PPUSH
65590: CALL_OW 488
65594: NOT
65595: IFFALSE 65599
// continue ;
65597: GO 65577
// if MineAtPos ( _x , _y ) then
65599: LD_VAR 0 11
65603: PPUSH
65604: LD_VAR 0 12
65608: PPUSH
65609: CALL_OW 458
65613: IFFALSE 65634
// ViewMineAtPos ( _x , _y , side ) ;
65615: LD_VAR 0 11
65619: PPUSH
65620: LD_VAR 0 12
65624: PPUSH
65625: LD_VAR 0 3
65629: PPUSH
65630: CALL_OW 457
// end ;
65634: GO 65577
65636: POP
65637: POP
65638: GO 65557
65640: POP
65641: POP
// end ;
65642: LD_VAR 0 2
65646: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
65647: LD_INT 0
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
// if not units then
65655: LD_VAR 0 1
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 66094
// scaners := [ ] ;
65664: LD_ADDR_VAR 0 6
65668: PUSH
65669: EMPTY
65670: ST_TO_ADDR
// for i in units do
65671: LD_ADDR_VAR 0 3
65675: PUSH
65676: LD_VAR 0 1
65680: PUSH
65681: FOR_IN
65682: IFFALSE 65839
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65684: LD_VAR 0 3
65688: PPUSH
65689: CALL_OW 264
65693: PUSH
65694: LD_INT 11
65696: NONEQUAL
65697: IFTRUE 65711
65699: PUSH
65700: LD_VAR 0 3
65704: PPUSH
65705: CALL_OW 302
65709: NOT
65710: OR
65711: IFTRUE 65728
65713: PUSH
65714: LD_VAR 0 3
65718: PPUSH
65719: CALL_OW 110
65723: PUSH
65724: LD_INT 502
65726: EQUAL
65727: OR
65728: IFFALSE 65732
// continue ;
65730: GO 65681
// ComStop ( i ) ;
65732: LD_VAR 0 3
65736: PPUSH
65737: CALL_OW 141
// x := GetX ( i ) ;
65741: LD_ADDR_VAR 0 4
65745: PUSH
65746: LD_VAR 0 3
65750: PPUSH
65751: CALL_OW 250
65755: ST_TO_ADDR
// y := GetY ( i ) ;
65756: LD_ADDR_VAR 0 5
65760: PUSH
65761: LD_VAR 0 3
65765: PPUSH
65766: CALL_OW 251
65770: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65771: LD_VAR 0 3
65775: PPUSH
65776: CALL_OW 255
65780: PUSH
65781: LD_OWVAR 2
65785: EQUAL
65786: IFFALSE 65805
// PlaySoundXY ( x , y , mineDetector ) ;
65788: LD_VAR 0 4
65792: PPUSH
65793: LD_VAR 0 5
65797: PPUSH
65798: LD_STRING mineDetector
65800: PPUSH
65801: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65805: LD_ADDR_VAR 0 6
65809: PUSH
65810: LD_VAR 0 6
65814: PPUSH
65815: LD_VAR 0 3
65819: PPUSH
65820: CALL 54305 0 2
65824: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65825: LD_VAR 0 3
65829: PPUSH
65830: LD_INT 502
65832: PPUSH
65833: CALL_OW 109
// end ;
65837: GO 65681
65839: POP
65840: POP
// if not scaners then
65841: LD_VAR 0 6
65845: NOT
65846: IFFALSE 65850
// exit ;
65848: GO 66094
// wait ( 3 ) ;
65850: LD_INT 3
65852: PPUSH
65853: CALL_OW 67
// timer := 6 ;
65857: LD_ADDR_VAR 0 7
65861: PUSH
65862: LD_INT 6
65864: ST_TO_ADDR
// repeat for i in scaners do
65865: LD_ADDR_VAR 0 3
65869: PUSH
65870: LD_VAR 0 6
65874: PUSH
65875: FOR_IN
65876: IFFALSE 65992
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65878: LD_VAR 0 3
65882: PPUSH
65883: CALL_OW 302
65887: NOT
65888: IFTRUE 65901
65890: PUSH
65891: LD_VAR 0 3
65895: PPUSH
65896: CALL_OW 314
65900: OR
65901: IFTRUE 65932
65903: PUSH
65904: LD_VAR 0 3
65908: PPUSH
65909: CALL_OW 263
65913: PUSH
65914: LD_INT 1
65916: EQUAL
65917: IFFALSE 65931
65919: PUSH
65920: LD_VAR 0 3
65924: PPUSH
65925: CALL_OW 311
65929: NOT
65930: AND
65931: OR
65932: IFFALSE 65976
// begin SetUnitDisplayNumber ( i , 0 ) ;
65934: LD_VAR 0 3
65938: PPUSH
65939: LD_INT 0
65941: PPUSH
65942: CALL_OW 505
// SetTag ( i , 0 ) ;
65946: LD_VAR 0 3
65950: PPUSH
65951: LD_INT 0
65953: PPUSH
65954: CALL_OW 109
// scaners := scaners diff i ;
65958: LD_ADDR_VAR 0 6
65962: PUSH
65963: LD_VAR 0 6
65967: PUSH
65968: LD_VAR 0 3
65972: DIFF
65973: ST_TO_ADDR
// continue ;
65974: GO 65875
// end ; SetUnitDisplayNumber ( i , timer ) ;
65976: LD_VAR 0 3
65980: PPUSH
65981: LD_VAR 0 7
65985: PPUSH
65986: CALL_OW 505
// end ;
65990: GO 65875
65992: POP
65993: POP
// if not scaners then
65994: LD_VAR 0 6
65998: NOT
65999: IFFALSE 66003
// exit ;
66001: GO 66094
// timer := Dec ( timer ) ;
66003: LD_ADDR_VAR 0 7
66007: PUSH
66008: LD_VAR 0 7
66012: PPUSH
66013: CALL 55700 0 1
66017: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66018: LD_INT 35
66020: PPUSH
66021: CALL_OW 67
// until timer = 0 ;
66025: LD_VAR 0 7
66029: PUSH
66030: LD_INT 0
66032: EQUAL
66033: IFFALSE 65865
// if not scaners then
66035: LD_VAR 0 6
66039: NOT
66040: IFFALSE 66044
// exit ;
66042: GO 66094
// for i in scaners do
66044: LD_ADDR_VAR 0 3
66048: PUSH
66049: LD_VAR 0 6
66053: PUSH
66054: FOR_IN
66055: IFFALSE 66092
// begin SetUnitDisplayNumber ( i , 0 ) ;
66057: LD_VAR 0 3
66061: PPUSH
66062: LD_INT 0
66064: PPUSH
66065: CALL_OW 505
// SetTag ( i , 0 ) ;
66069: LD_VAR 0 3
66073: PPUSH
66074: LD_INT 0
66076: PPUSH
66077: CALL_OW 109
// RevealDetectorMine ( i ) ;
66081: LD_VAR 0 3
66085: PPUSH
66086: CALL 65349 0 1
// end ;
66090: GO 66054
66092: POP
66093: POP
// end ;
66094: LD_VAR 0 2
66098: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
66099: LD_INT 0
66101: PPUSH
// if p1 = mine_detector_mode then
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 103
66109: EQUAL
66110: IFFALSE 66121
// DetectMine ( units ) ;
66112: LD_VAR 0 1
66116: PPUSH
66117: CALL 65647 0 1
// end ; end_of_file
66121: LD_VAR 0 7
66125: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66126: LD_VAR 0 1
66130: PUSH
66131: LD_INT 200
66133: DOUBLE
66134: GREATEREQUAL
66135: IFFALSE 66143
66137: LD_INT 299
66139: DOUBLE
66140: LESSEQUAL
66141: IFTRUE 66145
66143: GO 66177
66145: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66146: LD_VAR 0 1
66150: PPUSH
66151: LD_VAR 0 2
66155: PPUSH
66156: LD_VAR 0 3
66160: PPUSH
66161: LD_VAR 0 4
66165: PPUSH
66166: LD_VAR 0 5
66170: PPUSH
66171: CALL 60502 0 5
66175: GO 66254
66177: LD_INT 300
66179: DOUBLE
66180: GREATEREQUAL
66181: IFFALSE 66189
66183: LD_INT 399
66185: DOUBLE
66186: LESSEQUAL
66187: IFTRUE 66191
66189: GO 66253
66191: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66192: LD_VAR 0 1
66196: PPUSH
66197: LD_VAR 0 2
66201: PPUSH
66202: LD_VAR 0 3
66206: PPUSH
66207: LD_VAR 0 4
66211: PPUSH
66212: LD_VAR 0 5
66216: PPUSH
66217: LD_VAR 0 6
66221: PPUSH
66222: LD_VAR 0 7
66226: PPUSH
66227: LD_VAR 0 8
66231: PPUSH
66232: LD_VAR 0 9
66236: PPUSH
66237: LD_VAR 0 10
66241: PPUSH
66242: LD_VAR 0 11
66246: PPUSH
66247: CALL 12668 0 11
66251: GO 66254
66253: POP
// end ;
66254: PPOPN 11
66256: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66257: LD_VAR 0 1
66261: PPUSH
66262: LD_VAR 0 2
66266: PPUSH
66267: LD_VAR 0 3
66271: PPUSH
66272: LD_VAR 0 4
66276: PPUSH
66277: LD_VAR 0 5
66281: PPUSH
66282: CALL 59802 0 5
// end ;
66286: PPOPN 5
66288: END
