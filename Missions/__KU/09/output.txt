// every 0 0$1 do var i ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
// begin enable ;
   6: ENABLE
// display_strings := [ ] ;
   7: LD_ADDR_OWVAR 47
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_btype , b_depot ] ) do
  14: LD_ADDR_VAR 0 1
  18: PUSH
  19: LD_INT 30
  21: PUSH
  22: LD_INT 0
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PPUSH
  29: CALL_OW 69
  33: PUSH
  34: FOR_IN
  35: IFFALSE 68
// display_strings := display_strings ^ GetResourceType ( GetBase ( i ) , mat_oil ) ;
  37: LD_ADDR_OWVAR 47
  41: PUSH
  42: LD_OWVAR 47
  46: PUSH
  47: LD_VAR 0 1
  51: PPUSH
  52: CALL_OW 274
  56: PPUSH
  57: LD_INT 2
  59: PPUSH
  60: CALL_OW 275
  64: ADD
  65: ST_TO_ADDR
  66: GO 34
  68: POP
  69: POP
// end ; end_of_file end_of_file end_of_file end_of_file
  70: PPOPN 1
  72: END
// export function Join ( array , element ) ; begin
  73: LD_INT 0
  75: PPUSH
// result := Replace ( array , array + 1 , element ) ;
  76: LD_ADDR_VAR 0 3
  80: PUSH
  81: LD_VAR 0 1
  85: PPUSH
  86: LD_VAR 0 1
  90: PUSH
  91: LD_INT 1
  93: PLUS
  94: PPUSH
  95: LD_VAR 0 2
  99: PPUSH
 100: CALL_OW 1
 104: ST_TO_ADDR
// end ;
 105: LD_VAR 0 3
 109: RET
// export function ComComplete ( units , b ) ; var i ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
// if not units then
 114: LD_VAR 0 1
 118: NOT
 119: IFFALSE 123
// exit ;
 121: GO 213
// for i in units do
 123: LD_ADDR_VAR 0 4
 127: PUSH
 128: LD_VAR 0 1
 132: PUSH
 133: FOR_IN
 134: IFFALSE 211
// if BuildingStatus ( b ) = bs_build then
 136: LD_VAR 0 2
 140: PPUSH
 141: CALL_OW 461
 145: PUSH
 146: LD_INT 1
 148: EQUAL
 149: IFFALSE 209
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
 151: LD_VAR 0 4
 155: PPUSH
 156: LD_STRING h
 158: PUSH
 159: LD_VAR 0 2
 163: PPUSH
 164: CALL_OW 250
 168: PUSH
 169: LD_VAR 0 2
 173: PPUSH
 174: CALL_OW 251
 178: PUSH
 179: LD_VAR 0 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: EMPTY
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: PPUSH
 205: CALL_OW 446
 209: GO 133
 211: POP
 212: POP
// end ;
 213: LD_VAR 0 3
 217: RET
// export function DangerInArea ( side , area ) ; begin
 218: LD_INT 0
 220: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
 221: LD_ADDR_VAR 0 3
 225: PUSH
 226: LD_VAR 0 2
 230: PPUSH
 231: LD_INT 81
 233: PUSH
 234: LD_VAR 0 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PPUSH
 243: CALL_OW 70
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 3
 252: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
 258: PPUSH
 259: PPUSH
 260: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
 261: LD_VAR 0 1
 265: NOT
 266: IFTRUE 283
 268: PUSH
 269: LD_VAR 0 1
 273: PPUSH
 274: CALL_OW 263
 278: PUSH
 279: LD_INT 2
 281: NONEQUAL
 282: OR
 283: IFFALSE 287
// exit ;
 285: GO 603
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
 287: LD_ADDR_VAR 0 6
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_VAR 0 1
 299: PPUSH
 300: CALL_OW 255
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PUSH
 309: LD_INT 2
 311: PUSH
 312: LD_INT 30
 314: PUSH
 315: LD_INT 36
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 34
 324: PUSH
 325: LD_INT 31
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: LIST
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: ST_TO_ADDR
// if not tmp then
 346: LD_VAR 0 6
 350: NOT
 351: IFFALSE 355
// exit ;
 353: GO 603
// result := [ ] ;
 355: LD_ADDR_VAR 0 2
 359: PUSH
 360: EMPTY
 361: ST_TO_ADDR
// for i in tmp do
 362: LD_ADDR_VAR 0 3
 366: PUSH
 367: LD_VAR 0 6
 371: PUSH
 372: FOR_IN
 373: IFFALSE 444
// begin t := UnitsInside ( i ) ;
 375: LD_ADDR_VAR 0 4
 379: PUSH
 380: LD_VAR 0 3
 384: PPUSH
 385: CALL_OW 313
 389: ST_TO_ADDR
// if t then
 390: LD_VAR 0 4
 394: IFFALSE 442
// for j in t do
 396: LD_ADDR_VAR 0 7
 400: PUSH
 401: LD_VAR 0 4
 405: PUSH
 406: FOR_IN
 407: IFFALSE 440
// result := Replace ( result , result + 1 , j ) ;
 409: LD_ADDR_VAR 0 2
 413: PUSH
 414: LD_VAR 0 2
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 1
 426: PLUS
 427: PPUSH
 428: LD_VAR 0 7
 432: PPUSH
 433: CALL_OW 1
 437: ST_TO_ADDR
 438: GO 406
 440: POP
 441: POP
// end ;
 442: GO 372
 444: POP
 445: POP
// if not result then
 446: LD_VAR 0 2
 450: NOT
 451: IFFALSE 455
// exit ;
 453: GO 603
// mech := result [ 1 ] ;
 455: LD_ADDR_VAR 0 5
 459: PUSH
 460: LD_VAR 0 2
 464: PUSH
 465: LD_INT 1
 467: ARRAY
 468: ST_TO_ADDR
// if result > 1 then
 469: LD_VAR 0 2
 473: PUSH
 474: LD_INT 1
 476: GREATER
 477: IFFALSE 589
// begin for i = 2 to result do
 479: LD_ADDR_VAR 0 3
 483: PUSH
 484: DOUBLE
 485: LD_INT 2
 487: DEC
 488: ST_TO_ADDR
 489: LD_VAR 0 2
 493: PUSH
 494: FOR_TO
 495: IFFALSE 587
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
 497: LD_ADDR_VAR 0 4
 501: PUSH
 502: LD_VAR 0 2
 506: PUSH
 507: LD_VAR 0 3
 511: ARRAY
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: CALL_OW 259
 520: PUSH
 521: LD_VAR 0 2
 525: PUSH
 526: LD_VAR 0 3
 530: ARRAY
 531: PPUSH
 532: CALL_OW 432
 536: MINUS
 537: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
 538: LD_VAR 0 4
 542: PUSH
 543: LD_VAR 0 5
 547: PPUSH
 548: LD_INT 3
 550: PPUSH
 551: CALL_OW 259
 555: PUSH
 556: LD_VAR 0 5
 560: PPUSH
 561: CALL_OW 432
 565: MINUS
 566: GREATEREQUAL
 567: IFFALSE 585
// mech := result [ i ] ;
 569: LD_ADDR_VAR 0 5
 573: PUSH
 574: LD_VAR 0 2
 578: PUSH
 579: LD_VAR 0 3
 583: ARRAY
 584: ST_TO_ADDR
// end ;
 585: GO 494
 587: POP
 588: POP
// end ; ComLinkTo ( vehicle , mech ) ;
 589: LD_VAR 0 1
 593: PPUSH
 594: LD_VAR 0 5
 598: PPUSH
 599: CALL_OW 135
// end ;
 603: LD_VAR 0 2
 607: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// if not side or not area then
 613: LD_VAR 0 1
 617: NOT
 618: IFTRUE 627
 620: PUSH
 621: LD_VAR 0 2
 625: NOT
 626: OR
 627: IFFALSE 631
// exit ;
 629: GO 750
// tmp := AreaToList ( area , 0 ) ;
 631: LD_ADDR_VAR 0 5
 635: PUSH
 636: LD_VAR 0 2
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 517
 648: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 649: LD_ADDR_VAR 0 4
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_VAR 0 5
 663: PUSH
 664: LD_INT 1
 666: ARRAY
 667: PUSH
 668: FOR_TO
 669: IFFALSE 748
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
 671: LD_VAR 0 5
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: PUSH
 680: LD_VAR 0 4
 684: ARRAY
 685: PPUSH
 686: LD_VAR 0 5
 690: PUSH
 691: LD_INT 2
 693: ARRAY
 694: PUSH
 695: LD_VAR 0 4
 699: ARRAY
 700: PPUSH
 701: CALL_OW 351
 705: IFFALSE 746
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
 707: LD_VAR 0 5
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: PUSH
 716: LD_VAR 0 4
 720: ARRAY
 721: PPUSH
 722: LD_VAR 0 5
 726: PUSH
 727: LD_INT 2
 729: ARRAY
 730: PUSH
 731: LD_VAR 0 4
 735: ARRAY
 736: PPUSH
 737: LD_VAR 0 1
 741: PPUSH
 742: CALL_OW 244
// end ;
 746: GO 668
 748: POP
 749: POP
// end ;
 750: LD_VAR 0 3
 754: RET
// export function Count ( array ) ; begin
 755: LD_INT 0
 757: PPUSH
// result := array + 0 ;
 758: LD_ADDR_VAR 0 2
 762: PUSH
 763: LD_VAR 0 1
 767: PUSH
 768: LD_INT 0
 770: PLUS
 771: ST_TO_ADDR
// end ;
 772: LD_VAR 0 2
 776: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
 777: LD_INT 0
 779: PPUSH
 780: PPUSH
 781: PPUSH
// if btype = b_depot then
 782: LD_VAR 0 2
 786: PUSH
 787: LD_INT 0
 789: EQUAL
 790: IFFALSE 802
// begin result := true ;
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: LD_INT 1
 799: ST_TO_ADDR
// exit ;
 800: GO 922
// end ; pom := GetBase ( depot ) ;
 802: LD_ADDR_VAR 0 4
 806: PUSH
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: LD_VAR 0 2
 826: PPUSH
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 248
 836: PPUSH
 837: CALL_OW 450
 841: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
 842: LD_ADDR_VAR 0 3
 846: PUSH
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 275
 859: PUSH
 860: LD_VAR 0 5
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: GREATEREQUAL
 869: IFFALSE 895
 871: PUSH
 872: LD_VAR 0 4
 876: PPUSH
 877: LD_INT 2
 879: PPUSH
 880: CALL_OW 275
 884: PUSH
 885: LD_VAR 0 5
 889: PUSH
 890: LD_INT 2
 892: ARRAY
 893: GREATEREQUAL
 894: AND
 895: IFFALSE 921
 897: PUSH
 898: LD_VAR 0 4
 902: PPUSH
 903: LD_INT 3
 905: PPUSH
 906: CALL_OW 275
 910: PUSH
 911: LD_VAR 0 5
 915: PUSH
 916: LD_INT 3
 918: ARRAY
 919: GREATEREQUAL
 920: AND
 921: ST_TO_ADDR
// end ;
 922: LD_VAR 0 3
 926: RET
