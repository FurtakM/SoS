// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 281
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: IFFALSE 159
 141: PUSH
 142: LD_VAR 0 3
 146: PUSH
 147: LD_INT 1
 149: ARRAY
 150: PUSH
 151: LD_INT 1
 153: ARRAY
 154: PUSH
 155: LD_STRING p
 157: NONEQUAL
 158: AND
 159: IFFALSE 175
// begin SetTag ( i , 0 ) ;
 161: LD_VAR 0 1
 165: PPUSH
 166: LD_INT 0
 168: PPUSH
 169: CALL_OW 109
// continue ;
 173: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 175: LD_VAR 0 1
 179: PPUSH
 180: CALL_OW 110
 184: PUSH
 185: LD_INT 1
 187: NONEQUAL
 188: IFFALSE 208
 190: PUSH
 191: LD_VAR 0 3
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_INT 1
 202: ARRAY
 203: PUSH
 204: LD_STRING p
 206: EQUAL
 207: AND
 208: IFFALSE 279
// begin SetTag ( i , 1 ) ;
 210: LD_VAR 0 1
 214: PPUSH
 215: LD_INT 1
 217: PPUSH
 218: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 222: LD_INT 1
 224: PPUSH
 225: LD_VAR 0 1
 229: PPUSH
 230: LD_VAR 0 3
 234: PUSH
 235: LD_INT 1
 237: ARRAY
 238: PUSH
 239: LD_INT 2
 241: ARRAY
 242: PPUSH
 243: LD_VAR 0 3
 247: PUSH
 248: LD_INT 1
 250: ARRAY
 251: PUSH
 252: LD_INT 3
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 3
 260: PUSH
 261: LD_INT 1
 263: ARRAY
 264: PUSH
 265: LD_INT 4
 267: ARRAY
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 0
 274: PPUSH
 275: CALL_OW 595
// end ; end ;
 279: GO 87
 281: POP
 282: POP
// until mineCounter = 0 ;
 283: LD_EXP 1
 287: PUSH
 288: LD_INT 0
 290: EQUAL
 291: IFFALSE 16
// end ;
 293: PPOPN 3
 295: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 296: LD_VAR 0 1
 300: PUSH
 301: LD_INT 1
 303: EQUAL
 304: IFFALSE 394
// begin repeat wait ( 0 0$1 ) ;
 306: LD_INT 35
 308: PPUSH
 309: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 313: LD_VAR 0 3
 317: PPUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: CALL_OW 458
 327: IFTRUE 355
 329: PUSH
 330: LD_VAR 0 5
 334: PPUSH
 335: CALL_OW 250
 339: PPUSH
 340: LD_VAR 0 5
 344: PPUSH
 345: CALL_OW 251
 349: PPUSH
 350: CALL 397 0 2
 354: OR
 355: IFFALSE 359
// break ;
 357: GO 380
// if GetTag ( p1 ) <> 1 then
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 110
 368: PUSH
 369: LD_INT 1
 371: NONEQUAL
 372: IFFALSE 376
// exit ;
 374: GO 394
// until false ;
 376: LD_INT 0
 378: IFFALSE 306
// mineCounter := mineCounter - 1 ;
 380: LD_ADDR_EXP 1
 384: PUSH
 385: LD_EXP 1
 389: PUSH
 390: LD_INT 1
 392: MINUS
 393: ST_TO_ADDR
// end ; end ;
 394: PPOPN 7
 396: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 397: LD_INT 0
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// for _d := 0 to 5 do
 403: LD_ADDR_VAR 0 6
 407: PUSH
 408: DOUBLE
 409: LD_INT 0
 411: DEC
 412: ST_TO_ADDR
 413: LD_INT 5
 415: PUSH
 416: FOR_TO
 417: IFFALSE 525
// for _x := - 3 to 3 do
 419: LD_ADDR_VAR 0 4
 423: PUSH
 424: DOUBLE
 425: LD_INT 3
 427: NEG
 428: DEC
 429: ST_TO_ADDR
 430: LD_INT 3
 432: PUSH
 433: FOR_TO
 434: IFFALSE 521
// for _y := - 3 to 3 do
 436: LD_ADDR_VAR 0 5
 440: PUSH
 441: DOUBLE
 442: LD_INT 3
 444: NEG
 445: DEC
 446: ST_TO_ADDR
 447: LD_INT 3
 449: PUSH
 450: FOR_TO
 451: IFFALSE 517
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 453: LD_VAR 0 1
 457: PPUSH
 458: LD_VAR 0 6
 462: PPUSH
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 272
 472: PPUSH
 473: LD_VAR 0 2
 477: PPUSH
 478: LD_VAR 0 6
 482: PPUSH
 483: LD_VAR 0 5
 487: PPUSH
 488: CALL_OW 273
 492: PPUSH
 493: CALL_OW 458
 497: IFFALSE 515
// begin result := true ;
 499: LD_ADDR_VAR 0 3
 503: PUSH
 504: LD_INT 1
 506: ST_TO_ADDR
// exit ;
 507: POP
 508: POP
 509: POP
 510: POP
 511: POP
 512: POP
 513: GO 527
// end ;
 515: GO 450
 517: POP
 518: POP
 519: GO 433
 521: POP
 522: POP
 523: GO 416
 525: POP
 526: POP
// end ;
 527: LD_VAR 0 3
 531: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 532: GO 534
 534: DISABLE
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
 539: PPUSH
 540: PPUSH
 541: PPUSH
 542: PPUSH
 543: PPUSH
 544: PPUSH
 545: PPUSH
// begin x := 23 ;
 546: LD_ADDR_VAR 0 2
 550: PUSH
 551: LD_INT 23
 553: ST_TO_ADDR
// y := 19 ;
 554: LD_ADDR_VAR 0 3
 558: PUSH
 559: LD_INT 19
 561: ST_TO_ADDR
// uc_side := 8 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 8
 569: ST_TO_ADDR
// uc_nation := 1 ;
 570: LD_ADDR_OWVAR 21
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 578: LD_INT 0
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 381
// for _r := 1 to 6 do
 588: LD_ADDR_VAR 0 4
 592: PUSH
 593: DOUBLE
 594: LD_INT 1
 596: DEC
 597: ST_TO_ADDR
 598: LD_INT 6
 600: PUSH
 601: FOR_TO
 602: IFFALSE 754
// begin for _x := - _r to _r do
 604: LD_ADDR_VAR 0 5
 608: PUSH
 609: DOUBLE
 610: LD_VAR 0 4
 614: NEG
 615: DEC
 616: ST_TO_ADDR
 617: LD_VAR 0 4
 621: PUSH
 622: FOR_TO
 623: IFFALSE 750
// for _y := - _r to _r do
 625: LD_ADDR_VAR 0 6
 629: PUSH
 630: DOUBLE
 631: LD_VAR 0 4
 635: NEG
 636: DEC
 637: ST_TO_ADDR
 638: LD_VAR 0 4
 642: PUSH
 643: FOR_TO
 644: IFFALSE 746
// begin __x := x + _x ;
 646: LD_ADDR_VAR 0 8
 650: PUSH
 651: LD_VAR 0 2
 655: PUSH
 656: LD_VAR 0 5
 660: PLUS
 661: ST_TO_ADDR
// __y := y + _y ;
 662: LD_ADDR_VAR 0 9
 666: PUSH
 667: LD_VAR 0 3
 671: PUSH
 672: LD_VAR 0 6
 676: PLUS
 677: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 678: LD_VAR 0 8
 682: PPUSH
 683: LD_VAR 0 9
 687: PPUSH
 688: CALL_OW 428
 692: IFFALSE 696
// continue ;
 694: GO 643
// wait ( 1 ) ;
 696: LD_INT 1
 698: PPUSH
 699: CALL_OW 67
// un := CreateHuman ;
 703: LD_ADDR_VAR 0 1
 707: PUSH
 708: CALL_OW 44
 712: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_VAR 0 8
 722: PPUSH
 723: LD_VAR 0 9
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 48
// ComHold ( un ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: CALL_OW 140
// end ;
 744: GO 643
 746: POP
 747: POP
 748: GO 622
 750: POP
 751: POP
// end ;
 752: GO 601
 754: POP
 755: POP
// end ;
 756: PPOPN 9
 758: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 759: LD_INT 0
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
 766: PPUSH
 767: PPUSH
 768: PPUSH
 769: PPUSH
 770: PPUSH
 771: PPUSH
// enemySkilllevel := 2 ;
 772: LD_ADDR_VAR 0 16
 776: PUSH
 777: LD_INT 2
 779: ST_TO_ADDR
// uc_side := 1 ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_INT 1
 787: ST_TO_ADDR
// uc_nation := 1 ;
 788: LD_ADDR_OWVAR 21
 792: PUSH
 793: LD_INT 1
 795: ST_TO_ADDR
// hc_name :=  ;
 796: LD_ADDR_OWVAR 26
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 812: LD_ADDR_VAR 0 8
 816: PUSH
 817: DOUBLE
 818: LD_INT 1
 820: DEC
 821: ST_TO_ADDR
 822: LD_VAR 0 1
 826: PUSH
 827: FOR_TO
 828: IFFALSE 903
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 830: LD_INT 0
 832: PPUSH
 833: LD_VAR 0 16
 837: PPUSH
 838: CALL_OW 381
// un = CreateHuman ;
 842: LD_ADDR_VAR 0 9
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 852: LD_ADDR_VAR 0 17
 856: PUSH
 857: LD_VAR 0 17
 861: PUSH
 862: LD_VAR 0 9
 866: ADD
 867: ST_TO_ADDR
// sols := sols ^ un ;
 868: LD_ADDR_VAR 0 12
 872: PUSH
 873: LD_VAR 0 12
 877: PUSH
 878: LD_VAR 0 9
 882: ADD
 883: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 884: LD_VAR 0 9
 888: PPUSH
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 0
 896: PPUSH
 897: CALL_OW 49
// end ;
 901: GO 827
 903: POP
 904: POP
// for i := 1 to engsAmount do
 905: LD_ADDR_VAR 0 8
 909: PUSH
 910: DOUBLE
 911: LD_INT 1
 913: DEC
 914: ST_TO_ADDR
 915: LD_VAR 0 2
 919: PUSH
 920: FOR_TO
 921: IFFALSE 996
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 923: LD_INT 0
 925: PPUSH
 926: LD_VAR 0 16
 930: PPUSH
 931: CALL_OW 382
// un = CreateHuman ;
 935: LD_ADDR_VAR 0 9
 939: PUSH
 940: CALL_OW 44
 944: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 945: LD_ADDR_VAR 0 17
 949: PUSH
 950: LD_VAR 0 17
 954: PUSH
 955: LD_VAR 0 9
 959: ADD
 960: ST_TO_ADDR
// engs := engs ^ un ;
 961: LD_ADDR_VAR 0 13
 965: PUSH
 966: LD_VAR 0 13
 970: PUSH
 971: LD_VAR 0 9
 975: ADD
 976: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 977: LD_VAR 0 9
 981: PPUSH
 982: LD_VAR 0 6
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 920
 996: POP
 997: POP
// for i := 1 to mechsAmount do
 998: LD_ADDR_VAR 0 8
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_VAR 0 3
1012: PUSH
1013: FOR_TO
1014: IFFALSE 1089
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1016: LD_INT 0
1018: PPUSH
1019: LD_VAR 0 16
1023: PPUSH
1024: CALL_OW 382
// un = CreateHuman ;
1028: LD_ADDR_VAR 0 9
1032: PUSH
1033: CALL_OW 44
1037: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1038: LD_ADDR_VAR 0 17
1042: PUSH
1043: LD_VAR 0 17
1047: PUSH
1048: LD_VAR 0 9
1052: ADD
1053: ST_TO_ADDR
// engs := engs ^ un ;
1054: LD_ADDR_VAR 0 13
1058: PUSH
1059: LD_VAR 0 13
1063: PUSH
1064: LD_VAR 0 9
1068: ADD
1069: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1070: LD_VAR 0 9
1074: PPUSH
1075: LD_VAR 0 6
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ;
1087: GO 1013
1089: POP
1090: POP
// for i := 1 to scientistsAmount do
1091: LD_ADDR_VAR 0 8
1095: PUSH
1096: DOUBLE
1097: LD_INT 1
1099: DEC
1100: ST_TO_ADDR
1101: LD_VAR 0 4
1105: PUSH
1106: FOR_TO
1107: IFFALSE 1182
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1109: LD_INT 0
1111: PPUSH
1112: LD_VAR 0 16
1116: PPUSH
1117: CALL_OW 383
// un = CreateHuman ;
1121: LD_ADDR_VAR 0 9
1125: PUSH
1126: CALL_OW 44
1130: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1131: LD_ADDR_VAR 0 17
1135: PUSH
1136: LD_VAR 0 17
1140: PUSH
1141: LD_VAR 0 9
1145: ADD
1146: ST_TO_ADDR
// mechs := mechs ^ un ;
1147: LD_ADDR_VAR 0 14
1151: PUSH
1152: LD_VAR 0 14
1156: PUSH
1157: LD_VAR 0 9
1161: ADD
1162: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1163: LD_VAR 0 9
1167: PPUSH
1168: LD_VAR 0 6
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 49
// end ;
1180: GO 1106
1182: POP
1183: POP
// for i := 1 to vehiclesAmount do
1184: LD_ADDR_VAR 0 8
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_VAR 0 5
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1366
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1202: LD_ADDR_OWVAR 40
1206: PUSH
1207: LD_INT 2
1209: PUSH
1210: LD_INT 4
1212: PUSH
1213: LD_INT 3
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 1
1223: PPUSH
1224: LD_INT 3
1226: PPUSH
1227: CALL_OW 12
1231: ARRAY
1232: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1233: LD_ADDR_OWVAR 37
1237: PUSH
1238: LD_INT 3
1240: ST_TO_ADDR
// vc_control = control_manual ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_engine = engine_combustion ;
1249: LD_ADDR_OWVAR 39
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
// veh = CreateVehicle ;
1257: LD_ADDR_VAR 0 10
1261: PUSH
1262: CALL_OW 45
1266: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1267: LD_ADDR_VAR 0 17
1271: PUSH
1272: LD_VAR 0 17
1276: PUSH
1277: LD_VAR 0 10
1281: ADD
1282: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1283: LD_VAR 0 10
1287: PPUSH
1288: LD_VAR 0 6
1292: PPUSH
1293: LD_INT 0
1295: PPUSH
1296: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1300: LD_INT 0
1302: PPUSH
1303: LD_VAR 0 16
1307: PPUSH
1308: CALL_OW 383
// un = CreateHuman ;
1312: LD_ADDR_VAR 0 9
1316: PUSH
1317: CALL_OW 44
1321: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1322: LD_ADDR_VAR 0 17
1326: PUSH
1327: LD_VAR 0 17
1331: PUSH
1332: LD_VAR 0 9
1336: ADD
1337: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1338: LD_VAR 0 9
1342: PPUSH
1343: LD_VAR 0 10
1347: PPUSH
1348: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1352: LD_VAR 0 10
1356: PPUSH
1357: LD_INT 100
1359: PPUSH
1360: CALL_OW 240
// end ;
1364: GO 1199
1366: POP
1367: POP
// end ; end_of_file
1368: LD_VAR 0 7
1372: RET
// export globalGameSaveCounter ; every 0 0$1 do
1373: GO 1375
1375: DISABLE
// begin enable ;
1376: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1377: LD_STRING updateTimer(
1379: PUSH
1380: LD_OWVAR 1
1384: STR
1385: PUSH
1386: LD_STRING );
1388: STR
1389: PPUSH
1390: CALL_OW 559
// end ;
1394: END
// every 0 0$1 do
1395: GO 1397
1397: DISABLE
// begin globalGameSaveCounter := 0 ;
1398: LD_ADDR_EXP 2
1402: PUSH
1403: LD_INT 0
1405: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1406: LD_STRING setGameSaveCounter(0)
1408: PPUSH
1409: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1413: LD_STRING initStreamRollete();
1415: PPUSH
1416: CALL_OW 559
// InitStreamMode ;
1420: CALL 2765 0 0
// DefineStreamItems ( false ) ;
1424: LD_INT 0
1426: PPUSH
1427: CALL 3229 0 1
// end ;
1431: END
// export function SOS_MapStart ( ) ; begin
1432: LD_INT 0
1434: PPUSH
// if streamModeActive then
1435: LD_EXP 3
1439: IFFALSE 1448
// DefineStreamItems ( true ) ;
1441: LD_INT 1
1443: PPUSH
1444: CALL 3229 0 1
// UpdateLuaVariables ( ) ;
1448: CALL 1465 0 0
// UpdateFactoryWaypoints ( ) ;
1452: CALL 16351 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1456: CALL 16603 0 0
// end ;
1460: LD_VAR 0 1
1464: RET
// function UpdateLuaVariables ( ) ; begin
1465: LD_INT 0
1467: PPUSH
// if globalGameSaveCounter then
1468: LD_EXP 2
1472: IFFALSE 1506
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1474: LD_ADDR_EXP 2
1478: PUSH
1479: LD_EXP 2
1483: PPUSH
1484: CALL 63440 0 1
1488: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1489: LD_STRING setGameSaveCounter(
1491: PUSH
1492: LD_EXP 2
1496: STR
1497: PUSH
1498: LD_STRING )
1500: STR
1501: PPUSH
1502: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1506: LD_STRING setGameDifficulty(
1508: PUSH
1509: LD_OWVAR 67
1513: STR
1514: PUSH
1515: LD_STRING )
1517: STR
1518: PPUSH
1519: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
1523: LD_STRING displayDifficulty(
1525: PUSH
1526: LD_OWVAR 67
1530: STR
1531: PUSH
1532: LD_STRING )
1534: STR
1535: PPUSH
1536: CALL_OW 559
// end ;
1540: LD_VAR 0 1
1544: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1545: LD_INT 0
1547: PPUSH
// if p2 = stream_mode then
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 100
1555: EQUAL
1556: IFFALSE 2559
// begin if not StreamModeActive then
1558: LD_EXP 3
1562: NOT
1563: IFFALSE 1573
// StreamModeActive := true ;
1565: LD_ADDR_EXP 3
1569: PUSH
1570: LD_INT 1
1572: ST_TO_ADDR
// if p3 = 0 then
1573: LD_VAR 0 3
1577: PUSH
1578: LD_INT 0
1580: EQUAL
1581: IFFALSE 1587
// InitStreamMode ;
1583: CALL 2765 0 0
// if p3 = 1 then
1587: LD_VAR 0 3
1591: PUSH
1592: LD_INT 1
1594: EQUAL
1595: IFFALSE 1605
// sRocket := true ;
1597: LD_ADDR_EXP 8
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// if p3 = 2 then
1605: LD_VAR 0 3
1609: PUSH
1610: LD_INT 2
1612: EQUAL
1613: IFFALSE 1623
// sSpeed := true ;
1615: LD_ADDR_EXP 7
1619: PUSH
1620: LD_INT 1
1622: ST_TO_ADDR
// if p3 = 3 then
1623: LD_VAR 0 3
1627: PUSH
1628: LD_INT 3
1630: EQUAL
1631: IFFALSE 1641
// sEngine := true ;
1633: LD_ADDR_EXP 9
1637: PUSH
1638: LD_INT 1
1640: ST_TO_ADDR
// if p3 = 4 then
1641: LD_VAR 0 3
1645: PUSH
1646: LD_INT 4
1648: EQUAL
1649: IFFALSE 1659
// sSpec := true ;
1651: LD_ADDR_EXP 6
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// if p3 = 5 then
1659: LD_VAR 0 3
1663: PUSH
1664: LD_INT 5
1666: EQUAL
1667: IFFALSE 1677
// sLevel := true ;
1669: LD_ADDR_EXP 10
1673: PUSH
1674: LD_INT 1
1676: ST_TO_ADDR
// if p3 = 6 then
1677: LD_VAR 0 3
1681: PUSH
1682: LD_INT 6
1684: EQUAL
1685: IFFALSE 1695
// sArmoury := true ;
1687: LD_ADDR_EXP 11
1691: PUSH
1692: LD_INT 1
1694: ST_TO_ADDR
// if p3 = 7 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 7
1702: EQUAL
1703: IFFALSE 1713
// sRadar := true ;
1705: LD_ADDR_EXP 12
1709: PUSH
1710: LD_INT 1
1712: ST_TO_ADDR
// if p3 = 8 then
1713: LD_VAR 0 3
1717: PUSH
1718: LD_INT 8
1720: EQUAL
1721: IFFALSE 1731
// sBunker := true ;
1723: LD_ADDR_EXP 13
1727: PUSH
1728: LD_INT 1
1730: ST_TO_ADDR
// if p3 = 9 then
1731: LD_VAR 0 3
1735: PUSH
1736: LD_INT 9
1738: EQUAL
1739: IFFALSE 1749
// sHack := true ;
1741: LD_ADDR_EXP 14
1745: PUSH
1746: LD_INT 1
1748: ST_TO_ADDR
// if p3 = 10 then
1749: LD_VAR 0 3
1753: PUSH
1754: LD_INT 10
1756: EQUAL
1757: IFFALSE 1767
// sFire := true ;
1759: LD_ADDR_EXP 15
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// if p3 = 11 then
1767: LD_VAR 0 3
1771: PUSH
1772: LD_INT 11
1774: EQUAL
1775: IFFALSE 1785
// sRefresh := true ;
1777: LD_ADDR_EXP 16
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// if p3 = 12 then
1785: LD_VAR 0 3
1789: PUSH
1790: LD_INT 12
1792: EQUAL
1793: IFFALSE 1803
// sExp := true ;
1795: LD_ADDR_EXP 17
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// if p3 = 13 then
1803: LD_VAR 0 3
1807: PUSH
1808: LD_INT 13
1810: EQUAL
1811: IFFALSE 1821
// sDepot := true ;
1813: LD_ADDR_EXP 18
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// if p3 = 14 then
1821: LD_VAR 0 3
1825: PUSH
1826: LD_INT 14
1828: EQUAL
1829: IFFALSE 1839
// sFlag := true ;
1831: LD_ADDR_EXP 19
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// if p3 = 15 then
1839: LD_VAR 0 3
1843: PUSH
1844: LD_INT 15
1846: EQUAL
1847: IFFALSE 1857
// sKamikadze := true ;
1849: LD_ADDR_EXP 27
1853: PUSH
1854: LD_INT 1
1856: ST_TO_ADDR
// if p3 = 16 then
1857: LD_VAR 0 3
1861: PUSH
1862: LD_INT 16
1864: EQUAL
1865: IFFALSE 1875
// sTroll := true ;
1867: LD_ADDR_EXP 28
1871: PUSH
1872: LD_INT 1
1874: ST_TO_ADDR
// if p3 = 17 then
1875: LD_VAR 0 3
1879: PUSH
1880: LD_INT 17
1882: EQUAL
1883: IFFALSE 1893
// sSlow := true ;
1885: LD_ADDR_EXP 29
1889: PUSH
1890: LD_INT 1
1892: ST_TO_ADDR
// if p3 = 18 then
1893: LD_VAR 0 3
1897: PUSH
1898: LD_INT 18
1900: EQUAL
1901: IFFALSE 1911
// sLack := true ;
1903: LD_ADDR_EXP 30
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// if p3 = 19 then
1911: LD_VAR 0 3
1915: PUSH
1916: LD_INT 19
1918: EQUAL
1919: IFFALSE 1929
// sTank := true ;
1921: LD_ADDR_EXP 32
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// if p3 = 20 then
1929: LD_VAR 0 3
1933: PUSH
1934: LD_INT 20
1936: EQUAL
1937: IFFALSE 1947
// sRemote := true ;
1939: LD_ADDR_EXP 33
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// if p3 = 21 then
1947: LD_VAR 0 3
1951: PUSH
1952: LD_INT 21
1954: EQUAL
1955: IFFALSE 1965
// sPowell := true ;
1957: LD_ADDR_EXP 34
1961: PUSH
1962: LD_INT 1
1964: ST_TO_ADDR
// if p3 = 22 then
1965: LD_VAR 0 3
1969: PUSH
1970: LD_INT 22
1972: EQUAL
1973: IFFALSE 1983
// sTeleport := true ;
1975: LD_ADDR_EXP 37
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// if p3 = 23 then
1983: LD_VAR 0 3
1987: PUSH
1988: LD_INT 23
1990: EQUAL
1991: IFFALSE 2001
// sOilTower := true ;
1993: LD_ADDR_EXP 39
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// if p3 = 24 then
2001: LD_VAR 0 3
2005: PUSH
2006: LD_INT 24
2008: EQUAL
2009: IFFALSE 2019
// sShovel := true ;
2011: LD_ADDR_EXP 40
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// if p3 = 25 then
2019: LD_VAR 0 3
2023: PUSH
2024: LD_INT 25
2026: EQUAL
2027: IFFALSE 2037
// sSheik := true ;
2029: LD_ADDR_EXP 41
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// if p3 = 26 then
2037: LD_VAR 0 3
2041: PUSH
2042: LD_INT 26
2044: EQUAL
2045: IFFALSE 2055
// sEarthquake := true ;
2047: LD_ADDR_EXP 43
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// if p3 = 27 then
2055: LD_VAR 0 3
2059: PUSH
2060: LD_INT 27
2062: EQUAL
2063: IFFALSE 2073
// sAI := true ;
2065: LD_ADDR_EXP 44
2069: PUSH
2070: LD_INT 1
2072: ST_TO_ADDR
// if p3 = 28 then
2073: LD_VAR 0 3
2077: PUSH
2078: LD_INT 28
2080: EQUAL
2081: IFFALSE 2091
// sCargo := true ;
2083: LD_ADDR_EXP 47
2087: PUSH
2088: LD_INT 1
2090: ST_TO_ADDR
// if p3 = 29 then
2091: LD_VAR 0 3
2095: PUSH
2096: LD_INT 29
2098: EQUAL
2099: IFFALSE 2109
// sDLaser := true ;
2101: LD_ADDR_EXP 48
2105: PUSH
2106: LD_INT 1
2108: ST_TO_ADDR
// if p3 = 30 then
2109: LD_VAR 0 3
2113: PUSH
2114: LD_INT 30
2116: EQUAL
2117: IFFALSE 2127
// sExchange := true ;
2119: LD_ADDR_EXP 49
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// if p3 = 31 then
2127: LD_VAR 0 3
2131: PUSH
2132: LD_INT 31
2134: EQUAL
2135: IFFALSE 2145
// sFac := true ;
2137: LD_ADDR_EXP 50
2141: PUSH
2142: LD_INT 1
2144: ST_TO_ADDR
// if p3 = 32 then
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 32
2152: EQUAL
2153: IFFALSE 2163
// sPower := true ;
2155: LD_ADDR_EXP 51
2159: PUSH
2160: LD_INT 1
2162: ST_TO_ADDR
// if p3 = 33 then
2163: LD_VAR 0 3
2167: PUSH
2168: LD_INT 33
2170: EQUAL
2171: IFFALSE 2181
// sRandom := true ;
2173: LD_ADDR_EXP 52
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// if p3 = 34 then
2181: LD_VAR 0 3
2185: PUSH
2186: LD_INT 34
2188: EQUAL
2189: IFFALSE 2199
// sShield := true ;
2191: LD_ADDR_EXP 53
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// if p3 = 35 then
2199: LD_VAR 0 3
2203: PUSH
2204: LD_INT 35
2206: EQUAL
2207: IFFALSE 2217
// sTime := true ;
2209: LD_ADDR_EXP 54
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// if p3 = 36 then
2217: LD_VAR 0 3
2221: PUSH
2222: LD_INT 36
2224: EQUAL
2225: IFFALSE 2235
// sTools := true ;
2227: LD_ADDR_EXP 55
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// if p3 = 101 then
2235: LD_VAR 0 3
2239: PUSH
2240: LD_INT 101
2242: EQUAL
2243: IFFALSE 2253
// sSold := true ;
2245: LD_ADDR_EXP 20
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// if p3 = 102 then
2253: LD_VAR 0 3
2257: PUSH
2258: LD_INT 102
2260: EQUAL
2261: IFFALSE 2271
// sDiff := true ;
2263: LD_ADDR_EXP 21
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if p3 = 103 then
2271: LD_VAR 0 3
2275: PUSH
2276: LD_INT 103
2278: EQUAL
2279: IFFALSE 2289
// sFog := true ;
2281: LD_ADDR_EXP 24
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// if p3 = 104 then
2289: LD_VAR 0 3
2293: PUSH
2294: LD_INT 104
2296: EQUAL
2297: IFFALSE 2307
// sReset := true ;
2299: LD_ADDR_EXP 25
2303: PUSH
2304: LD_INT 1
2306: ST_TO_ADDR
// if p3 = 105 then
2307: LD_VAR 0 3
2311: PUSH
2312: LD_INT 105
2314: EQUAL
2315: IFFALSE 2325
// sSun := true ;
2317: LD_ADDR_EXP 26
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// if p3 = 106 then
2325: LD_VAR 0 3
2329: PUSH
2330: LD_INT 106
2332: EQUAL
2333: IFFALSE 2343
// sTiger := true ;
2335: LD_ADDR_EXP 22
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// if p3 = 107 then
2343: LD_VAR 0 3
2347: PUSH
2348: LD_INT 107
2350: EQUAL
2351: IFFALSE 2361
// sBomb := true ;
2353: LD_ADDR_EXP 23
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// if p3 = 108 then
2361: LD_VAR 0 3
2365: PUSH
2366: LD_INT 108
2368: EQUAL
2369: IFFALSE 2379
// sWound := true ;
2371: LD_ADDR_EXP 31
2375: PUSH
2376: LD_INT 1
2378: ST_TO_ADDR
// if p3 = 109 then
2379: LD_VAR 0 3
2383: PUSH
2384: LD_INT 109
2386: EQUAL
2387: IFFALSE 2397
// sBetray := true ;
2389: LD_ADDR_EXP 35
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// if p3 = 110 then
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 110
2404: EQUAL
2405: IFFALSE 2415
// sContamin := true ;
2407: LD_ADDR_EXP 36
2411: PUSH
2412: LD_INT 1
2414: ST_TO_ADDR
// if p3 = 111 then
2415: LD_VAR 0 3
2419: PUSH
2420: LD_INT 111
2422: EQUAL
2423: IFFALSE 2433
// sOil := true ;
2425: LD_ADDR_EXP 38
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// if p3 = 112 then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 112
2440: EQUAL
2441: IFFALSE 2451
// sStu := true ;
2443: LD_ADDR_EXP 42
2447: PUSH
2448: LD_INT 1
2450: ST_TO_ADDR
// if p3 = 113 then
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 113
2458: EQUAL
2459: IFFALSE 2469
// sBazooka := true ;
2461: LD_ADDR_EXP 45
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// if p3 = 114 then
2469: LD_VAR 0 3
2473: PUSH
2474: LD_INT 114
2476: EQUAL
2477: IFFALSE 2487
// sMortar := true ;
2479: LD_ADDR_EXP 46
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// if p3 = 115 then
2487: LD_VAR 0 3
2491: PUSH
2492: LD_INT 115
2494: EQUAL
2495: IFFALSE 2505
// sRanger := true ;
2497: LD_ADDR_EXP 56
2501: PUSH
2502: LD_INT 1
2504: ST_TO_ADDR
// if p3 = 116 then
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 116
2512: EQUAL
2513: IFFALSE 2523
// sComputer := true ;
2515: LD_ADDR_EXP 57
2519: PUSH
2520: LD_INT 1
2522: ST_TO_ADDR
// if p3 = 117 then
2523: LD_VAR 0 3
2527: PUSH
2528: LD_INT 117
2530: EQUAL
2531: IFFALSE 2541
// s30 := true ;
2533: LD_ADDR_EXP 58
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// if p3 = 118 then
2541: LD_VAR 0 3
2545: PUSH
2546: LD_INT 118
2548: EQUAL
2549: IFFALSE 2559
// s60 := true ;
2551: LD_ADDR_EXP 59
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// end ; if p2 = hack_mode then
2559: LD_VAR 0 2
2563: PUSH
2564: LD_INT 101
2566: EQUAL
2567: IFFALSE 2695
// begin case p3 of 1 :
2569: LD_VAR 0 3
2573: PUSH
2574: LD_INT 1
2576: DOUBLE
2577: EQUAL
2578: IFTRUE 2582
2580: GO 2589
2582: POP
// hHackUnlimitedResources ; 2 :
2583: CALL 14958 0 0
2587: GO 2695
2589: LD_INT 2
2591: DOUBLE
2592: EQUAL
2593: IFTRUE 2597
2595: GO 2604
2597: POP
// hHackSetLevel10 ; 3 :
2598: CALL 15091 0 0
2602: GO 2695
2604: LD_INT 3
2606: DOUBLE
2607: EQUAL
2608: IFTRUE 2612
2610: GO 2619
2612: POP
// hHackSetLevel10YourUnits ; 4 :
2613: CALL 15176 0 0
2617: GO 2695
2619: LD_INT 4
2621: DOUBLE
2622: EQUAL
2623: IFTRUE 2627
2625: GO 2634
2627: POP
// hHackInvincible ; 5 :
2628: CALL 15624 0 0
2632: GO 2695
2634: LD_INT 5
2636: DOUBLE
2637: EQUAL
2638: IFTRUE 2642
2640: GO 2649
2642: POP
// hHackInvisible ; 6 :
2643: CALL 15735 0 0
2647: GO 2695
2649: LD_INT 6
2651: DOUBLE
2652: EQUAL
2653: IFTRUE 2657
2655: GO 2664
2657: POP
// hHackChangeYourSide ; 7 :
2658: CALL 15792 0 0
2662: GO 2695
2664: LD_INT 7
2666: DOUBLE
2667: EQUAL
2668: IFTRUE 2672
2670: GO 2679
2672: POP
// hHackChangeUnitSide ; 8 :
2673: CALL 15834 0 0
2677: GO 2695
2679: LD_INT 8
2681: DOUBLE
2682: EQUAL
2683: IFTRUE 2687
2685: GO 2694
2687: POP
// hHackFog ; end ;
2688: CALL 15935 0 0
2692: GO 2695
2694: POP
// end ; if p2 = game_save_mode then
2695: LD_VAR 0 2
2699: PUSH
2700: LD_INT 102
2702: EQUAL
2703: IFFALSE 2760
// begin if p3 = 1 then
2705: LD_VAR 0 3
2709: PUSH
2710: LD_INT 1
2712: EQUAL
2713: IFFALSE 2725
// globalGameSaveCounter := p4 ;
2715: LD_ADDR_EXP 2
2719: PUSH
2720: LD_VAR 0 4
2724: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 2
2732: EQUAL
2733: IFFALSE 2741
2735: PUSH
2736: LD_EXP 2
2740: AND
2741: IFFALSE 2760
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2743: LD_STRING setGameSaveCounter(
2745: PUSH
2746: LD_EXP 2
2750: STR
2751: PUSH
2752: LD_STRING )
2754: STR
2755: PPUSH
2756: CALL_OW 559
// end ; end ;
2760: LD_VAR 0 7
2764: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2765: LD_INT 0
2767: PPUSH
// streamModeActive := false ;
2768: LD_ADDR_EXP 3
2772: PUSH
2773: LD_INT 0
2775: ST_TO_ADDR
// normalCounter := 36 ;
2776: LD_ADDR_EXP 4
2780: PUSH
2781: LD_INT 36
2783: ST_TO_ADDR
// hardcoreCounter := 18 ;
2784: LD_ADDR_EXP 5
2788: PUSH
2789: LD_INT 18
2791: ST_TO_ADDR
// sRocket := false ;
2792: LD_ADDR_EXP 8
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// sSpeed := false ;
2800: LD_ADDR_EXP 7
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// sEngine := false ;
2808: LD_ADDR_EXP 9
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// sSpec := false ;
2816: LD_ADDR_EXP 6
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// sLevel := false ;
2824: LD_ADDR_EXP 10
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// sArmoury := false ;
2832: LD_ADDR_EXP 11
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// sRadar := false ;
2840: LD_ADDR_EXP 12
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// sBunker := false ;
2848: LD_ADDR_EXP 13
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// sHack := false ;
2856: LD_ADDR_EXP 14
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// sFire := false ;
2864: LD_ADDR_EXP 15
2868: PUSH
2869: LD_INT 0
2871: ST_TO_ADDR
// sRefresh := false ;
2872: LD_ADDR_EXP 16
2876: PUSH
2877: LD_INT 0
2879: ST_TO_ADDR
// sExp := false ;
2880: LD_ADDR_EXP 17
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// sDepot := false ;
2888: LD_ADDR_EXP 18
2892: PUSH
2893: LD_INT 0
2895: ST_TO_ADDR
// sFlag := false ;
2896: LD_ADDR_EXP 19
2900: PUSH
2901: LD_INT 0
2903: ST_TO_ADDR
// sKamikadze := false ;
2904: LD_ADDR_EXP 27
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// sTroll := false ;
2912: LD_ADDR_EXP 28
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// sSlow := false ;
2920: LD_ADDR_EXP 29
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// sLack := false ;
2928: LD_ADDR_EXP 30
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// sTank := false ;
2936: LD_ADDR_EXP 32
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// sRemote := false ;
2944: LD_ADDR_EXP 33
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
// sPowell := false ;
2952: LD_ADDR_EXP 34
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// sTeleport := false ;
2960: LD_ADDR_EXP 37
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// sOilTower := false ;
2968: LD_ADDR_EXP 39
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// sShovel := false ;
2976: LD_ADDR_EXP 40
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// sSheik := false ;
2984: LD_ADDR_EXP 41
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// sEarthquake := false ;
2992: LD_ADDR_EXP 43
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// sAI := false ;
3000: LD_ADDR_EXP 44
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// sCargo := false ;
3008: LD_ADDR_EXP 47
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// sDLaser := false ;
3016: LD_ADDR_EXP 48
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// sExchange := false ;
3024: LD_ADDR_EXP 49
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// sFac := false ;
3032: LD_ADDR_EXP 50
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// sPower := false ;
3040: LD_ADDR_EXP 51
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// sRandom := false ;
3048: LD_ADDR_EXP 52
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// sShield := false ;
3056: LD_ADDR_EXP 53
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// sTime := false ;
3064: LD_ADDR_EXP 54
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// sTools := false ;
3072: LD_ADDR_EXP 55
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// sSold := false ;
3080: LD_ADDR_EXP 20
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// sDiff := false ;
3088: LD_ADDR_EXP 21
3092: PUSH
3093: LD_INT 0
3095: ST_TO_ADDR
// sFog := false ;
3096: LD_ADDR_EXP 24
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// sReset := false ;
3104: LD_ADDR_EXP 25
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// sSun := false ;
3112: LD_ADDR_EXP 26
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// sTiger := false ;
3120: LD_ADDR_EXP 22
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sBomb := false ;
3128: LD_ADDR_EXP 23
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sWound := false ;
3136: LD_ADDR_EXP 31
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sBetray := false ;
3144: LD_ADDR_EXP 35
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sContamin := false ;
3152: LD_ADDR_EXP 36
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sOil := false ;
3160: LD_ADDR_EXP 38
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sStu := false ;
3168: LD_ADDR_EXP 42
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sBazooka := false ;
3176: LD_ADDR_EXP 45
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sMortar := false ;
3184: LD_ADDR_EXP 46
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sRanger := false ;
3192: LD_ADDR_EXP 56
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// sComputer := false ;
3200: LD_ADDR_EXP 57
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// s30 := false ;
3208: LD_ADDR_EXP 58
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// s60 := false ;
3216: LD_ADDR_EXP 59
3220: PUSH
3221: LD_INT 0
3223: ST_TO_ADDR
// end ;
3224: LD_VAR 0 1
3228: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
3236: PPUSH
3237: PPUSH
// result := [ ] ;
3238: LD_ADDR_VAR 0 2
3242: PUSH
3243: EMPTY
3244: ST_TO_ADDR
// if campaign_id = 1 then
3245: LD_OWVAR 69
3249: PUSH
3250: LD_INT 1
3252: EQUAL
3253: IFFALSE 6419
// begin case mission_number of 1 :
3255: LD_OWVAR 70
3259: PUSH
3260: LD_INT 1
3262: DOUBLE
3263: EQUAL
3264: IFTRUE 3268
3266: GO 3344
3268: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: LD_INT 2
3276: PUSH
3277: LD_INT 4
3279: PUSH
3280: LD_INT 11
3282: PUSH
3283: LD_INT 12
3285: PUSH
3286: LD_INT 15
3288: PUSH
3289: LD_INT 16
3291: PUSH
3292: LD_INT 22
3294: PUSH
3295: LD_INT 23
3297: PUSH
3298: LD_INT 26
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 101
3314: PUSH
3315: LD_INT 102
3317: PUSH
3318: LD_INT 106
3320: PUSH
3321: LD_INT 116
3323: PUSH
3324: LD_INT 117
3326: PUSH
3327: LD_INT 118
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: ST_TO_ADDR
3342: GO 6417
3344: LD_INT 2
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3352
3350: GO 3436
3352: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: LD_INT 2
3360: PUSH
3361: LD_INT 4
3363: PUSH
3364: LD_INT 11
3366: PUSH
3367: LD_INT 12
3369: PUSH
3370: LD_INT 15
3372: PUSH
3373: LD_INT 16
3375: PUSH
3376: LD_INT 22
3378: PUSH
3379: LD_INT 23
3381: PUSH
3382: LD_INT 26
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: PUSH
3396: LD_INT 101
3398: PUSH
3399: LD_INT 102
3401: PUSH
3402: LD_INT 105
3404: PUSH
3405: LD_INT 106
3407: PUSH
3408: LD_INT 108
3410: PUSH
3411: LD_INT 116
3413: PUSH
3414: LD_INT 117
3416: PUSH
3417: LD_INT 118
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: ST_TO_ADDR
3434: GO 6417
3436: LD_INT 3
3438: DOUBLE
3439: EQUAL
3440: IFTRUE 3444
3442: GO 3532
3444: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3445: LD_ADDR_VAR 0 2
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: LD_INT 4
3455: PUSH
3456: LD_INT 5
3458: PUSH
3459: LD_INT 11
3461: PUSH
3462: LD_INT 12
3464: PUSH
3465: LD_INT 15
3467: PUSH
3468: LD_INT 16
3470: PUSH
3471: LD_INT 22
3473: PUSH
3474: LD_INT 26
3476: PUSH
3477: LD_INT 36
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 101
3494: PUSH
3495: LD_INT 102
3497: PUSH
3498: LD_INT 105
3500: PUSH
3501: LD_INT 106
3503: PUSH
3504: LD_INT 108
3506: PUSH
3507: LD_INT 116
3509: PUSH
3510: LD_INT 117
3512: PUSH
3513: LD_INT 118
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: ST_TO_ADDR
3530: GO 6417
3532: LD_INT 4
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3636
3540: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3541: LD_ADDR_VAR 0 2
3545: PUSH
3546: LD_INT 2
3548: PUSH
3549: LD_INT 4
3551: PUSH
3552: LD_INT 5
3554: PUSH
3555: LD_INT 8
3557: PUSH
3558: LD_INT 11
3560: PUSH
3561: LD_INT 12
3563: PUSH
3564: LD_INT 15
3566: PUSH
3567: LD_INT 16
3569: PUSH
3570: LD_INT 22
3572: PUSH
3573: LD_INT 23
3575: PUSH
3576: LD_INT 26
3578: PUSH
3579: LD_INT 36
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 101
3598: PUSH
3599: LD_INT 102
3601: PUSH
3602: LD_INT 105
3604: PUSH
3605: LD_INT 106
3607: PUSH
3608: LD_INT 108
3610: PUSH
3611: LD_INT 116
3613: PUSH
3614: LD_INT 117
3616: PUSH
3617: LD_INT 118
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: ST_TO_ADDR
3634: GO 6417
3636: LD_INT 5
3638: DOUBLE
3639: EQUAL
3640: IFTRUE 3644
3642: GO 3756
3644: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3645: LD_ADDR_VAR 0 2
3649: PUSH
3650: LD_INT 2
3652: PUSH
3653: LD_INT 4
3655: PUSH
3656: LD_INT 5
3658: PUSH
3659: LD_INT 6
3661: PUSH
3662: LD_INT 8
3664: PUSH
3665: LD_INT 11
3667: PUSH
3668: LD_INT 12
3670: PUSH
3671: LD_INT 15
3673: PUSH
3674: LD_INT 16
3676: PUSH
3677: LD_INT 22
3679: PUSH
3680: LD_INT 23
3682: PUSH
3683: LD_INT 25
3685: PUSH
3686: LD_INT 26
3688: PUSH
3689: LD_INT 36
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: PUSH
3708: LD_INT 101
3710: PUSH
3711: LD_INT 102
3713: PUSH
3714: LD_INT 105
3716: PUSH
3717: LD_INT 106
3719: PUSH
3720: LD_INT 108
3722: PUSH
3723: LD_INT 109
3725: PUSH
3726: LD_INT 112
3728: PUSH
3729: LD_INT 116
3731: PUSH
3732: LD_INT 117
3734: PUSH
3735: LD_INT 118
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: ST_TO_ADDR
3754: GO 6417
3756: LD_INT 6
3758: DOUBLE
3759: EQUAL
3760: IFTRUE 3764
3762: GO 3896
3764: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3765: LD_ADDR_VAR 0 2
3769: PUSH
3770: LD_INT 2
3772: PUSH
3773: LD_INT 4
3775: PUSH
3776: LD_INT 5
3778: PUSH
3779: LD_INT 6
3781: PUSH
3782: LD_INT 8
3784: PUSH
3785: LD_INT 11
3787: PUSH
3788: LD_INT 12
3790: PUSH
3791: LD_INT 15
3793: PUSH
3794: LD_INT 16
3796: PUSH
3797: LD_INT 20
3799: PUSH
3800: LD_INT 21
3802: PUSH
3803: LD_INT 22
3805: PUSH
3806: LD_INT 23
3808: PUSH
3809: LD_INT 25
3811: PUSH
3812: LD_INT 26
3814: PUSH
3815: LD_INT 30
3817: PUSH
3818: LD_INT 31
3820: PUSH
3821: LD_INT 32
3823: PUSH
3824: LD_INT 36
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: PUSH
3848: LD_INT 101
3850: PUSH
3851: LD_INT 102
3853: PUSH
3854: LD_INT 105
3856: PUSH
3857: LD_INT 106
3859: PUSH
3860: LD_INT 108
3862: PUSH
3863: LD_INT 109
3865: PUSH
3866: LD_INT 112
3868: PUSH
3869: LD_INT 116
3871: PUSH
3872: LD_INT 117
3874: PUSH
3875: LD_INT 118
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: ST_TO_ADDR
3894: GO 6417
3896: LD_INT 7
3898: DOUBLE
3899: EQUAL
3900: IFTRUE 3904
3902: GO 4016
3904: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3905: LD_ADDR_VAR 0 2
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: LD_INT 4
3915: PUSH
3916: LD_INT 5
3918: PUSH
3919: LD_INT 7
3921: PUSH
3922: LD_INT 11
3924: PUSH
3925: LD_INT 12
3927: PUSH
3928: LD_INT 15
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 20
3936: PUSH
3937: LD_INT 21
3939: PUSH
3940: LD_INT 22
3942: PUSH
3943: LD_INT 23
3945: PUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 26
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 101
3970: PUSH
3971: LD_INT 102
3973: PUSH
3974: LD_INT 103
3976: PUSH
3977: LD_INT 105
3979: PUSH
3980: LD_INT 106
3982: PUSH
3983: LD_INT 108
3985: PUSH
3986: LD_INT 112
3988: PUSH
3989: LD_INT 116
3991: PUSH
3992: LD_INT 117
3994: PUSH
3995: LD_INT 118
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: ST_TO_ADDR
4014: GO 6417
4016: LD_INT 8
4018: DOUBLE
4019: EQUAL
4020: IFTRUE 4024
4022: GO 4164
4024: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 4
4035: PUSH
4036: LD_INT 5
4038: PUSH
4039: LD_INT 6
4041: PUSH
4042: LD_INT 7
4044: PUSH
4045: LD_INT 8
4047: PUSH
4048: LD_INT 11
4050: PUSH
4051: LD_INT 12
4053: PUSH
4054: LD_INT 15
4056: PUSH
4057: LD_INT 16
4059: PUSH
4060: LD_INT 20
4062: PUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 22
4068: PUSH
4069: LD_INT 23
4071: PUSH
4072: LD_INT 25
4074: PUSH
4075: LD_INT 26
4077: PUSH
4078: LD_INT 30
4080: PUSH
4081: LD_INT 31
4083: PUSH
4084: LD_INT 32
4086: PUSH
4087: LD_INT 36
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 101
4114: PUSH
4115: LD_INT 102
4117: PUSH
4118: LD_INT 103
4120: PUSH
4121: LD_INT 105
4123: PUSH
4124: LD_INT 106
4126: PUSH
4127: LD_INT 108
4129: PUSH
4130: LD_INT 109
4132: PUSH
4133: LD_INT 112
4135: PUSH
4136: LD_INT 116
4138: PUSH
4139: LD_INT 117
4141: PUSH
4142: LD_INT 118
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: ST_TO_ADDR
4162: GO 6417
4164: LD_INT 9
4166: DOUBLE
4167: EQUAL
4168: IFTRUE 4172
4170: GO 4320
4172: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4173: LD_ADDR_VAR 0 2
4177: PUSH
4178: LD_INT 2
4180: PUSH
4181: LD_INT 4
4183: PUSH
4184: LD_INT 5
4186: PUSH
4187: LD_INT 6
4189: PUSH
4190: LD_INT 7
4192: PUSH
4193: LD_INT 8
4195: PUSH
4196: LD_INT 11
4198: PUSH
4199: LD_INT 12
4201: PUSH
4202: LD_INT 15
4204: PUSH
4205: LD_INT 16
4207: PUSH
4208: LD_INT 20
4210: PUSH
4211: LD_INT 21
4213: PUSH
4214: LD_INT 22
4216: PUSH
4217: LD_INT 23
4219: PUSH
4220: LD_INT 25
4222: PUSH
4223: LD_INT 26
4225: PUSH
4226: LD_INT 28
4228: PUSH
4229: LD_INT 30
4231: PUSH
4232: LD_INT 31
4234: PUSH
4235: LD_INT 32
4237: PUSH
4238: LD_INT 36
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 101
4266: PUSH
4267: LD_INT 102
4269: PUSH
4270: LD_INT 103
4272: PUSH
4273: LD_INT 105
4275: PUSH
4276: LD_INT 106
4278: PUSH
4279: LD_INT 108
4281: PUSH
4282: LD_INT 109
4284: PUSH
4285: LD_INT 112
4287: PUSH
4288: LD_INT 114
4290: PUSH
4291: LD_INT 116
4293: PUSH
4294: LD_INT 117
4296: PUSH
4297: LD_INT 118
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: ST_TO_ADDR
4318: GO 6417
4320: LD_INT 10
4322: DOUBLE
4323: EQUAL
4324: IFTRUE 4328
4326: GO 4524
4328: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 2
4336: PUSH
4337: LD_INT 4
4339: PUSH
4340: LD_INT 5
4342: PUSH
4343: LD_INT 6
4345: PUSH
4346: LD_INT 7
4348: PUSH
4349: LD_INT 8
4351: PUSH
4352: LD_INT 9
4354: PUSH
4355: LD_INT 10
4357: PUSH
4358: LD_INT 11
4360: PUSH
4361: LD_INT 12
4363: PUSH
4364: LD_INT 13
4366: PUSH
4367: LD_INT 14
4369: PUSH
4370: LD_INT 15
4372: PUSH
4373: LD_INT 16
4375: PUSH
4376: LD_INT 17
4378: PUSH
4379: LD_INT 18
4381: PUSH
4382: LD_INT 19
4384: PUSH
4385: LD_INT 20
4387: PUSH
4388: LD_INT 21
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 23
4396: PUSH
4397: LD_INT 24
4399: PUSH
4400: LD_INT 25
4402: PUSH
4403: LD_INT 26
4405: PUSH
4406: LD_INT 28
4408: PUSH
4409: LD_INT 30
4411: PUSH
4412: LD_INT 31
4414: PUSH
4415: LD_INT 32
4417: PUSH
4418: LD_INT 36
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 101
4454: PUSH
4455: LD_INT 102
4457: PUSH
4458: LD_INT 103
4460: PUSH
4461: LD_INT 104
4463: PUSH
4464: LD_INT 105
4466: PUSH
4467: LD_INT 106
4469: PUSH
4470: LD_INT 107
4472: PUSH
4473: LD_INT 108
4475: PUSH
4476: LD_INT 109
4478: PUSH
4479: LD_INT 110
4481: PUSH
4482: LD_INT 111
4484: PUSH
4485: LD_INT 112
4487: PUSH
4488: LD_INT 114
4490: PUSH
4491: LD_INT 116
4493: PUSH
4494: LD_INT 117
4496: PUSH
4497: LD_INT 118
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
4522: GO 6417
4524: LD_INT 11
4526: DOUBLE
4527: EQUAL
4528: IFTRUE 4532
4530: GO 4736
4532: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4533: LD_ADDR_VAR 0 2
4537: PUSH
4538: LD_INT 2
4540: PUSH
4541: LD_INT 3
4543: PUSH
4544: LD_INT 4
4546: PUSH
4547: LD_INT 5
4549: PUSH
4550: LD_INT 6
4552: PUSH
4553: LD_INT 7
4555: PUSH
4556: LD_INT 8
4558: PUSH
4559: LD_INT 9
4561: PUSH
4562: LD_INT 10
4564: PUSH
4565: LD_INT 11
4567: PUSH
4568: LD_INT 12
4570: PUSH
4571: LD_INT 13
4573: PUSH
4574: LD_INT 14
4576: PUSH
4577: LD_INT 15
4579: PUSH
4580: LD_INT 16
4582: PUSH
4583: LD_INT 17
4585: PUSH
4586: LD_INT 18
4588: PUSH
4589: LD_INT 19
4591: PUSH
4592: LD_INT 20
4594: PUSH
4595: LD_INT 21
4597: PUSH
4598: LD_INT 22
4600: PUSH
4601: LD_INT 23
4603: PUSH
4604: LD_INT 24
4606: PUSH
4607: LD_INT 25
4609: PUSH
4610: LD_INT 26
4612: PUSH
4613: LD_INT 28
4615: PUSH
4616: LD_INT 30
4618: PUSH
4619: LD_INT 31
4621: PUSH
4622: LD_INT 32
4624: PUSH
4625: LD_INT 34
4627: PUSH
4628: LD_INT 36
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 101
4666: PUSH
4667: LD_INT 102
4669: PUSH
4670: LD_INT 103
4672: PUSH
4673: LD_INT 104
4675: PUSH
4676: LD_INT 105
4678: PUSH
4679: LD_INT 106
4681: PUSH
4682: LD_INT 107
4684: PUSH
4685: LD_INT 108
4687: PUSH
4688: LD_INT 109
4690: PUSH
4691: LD_INT 110
4693: PUSH
4694: LD_INT 111
4696: PUSH
4697: LD_INT 112
4699: PUSH
4700: LD_INT 114
4702: PUSH
4703: LD_INT 116
4705: PUSH
4706: LD_INT 117
4708: PUSH
4709: LD_INT 118
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: ST_TO_ADDR
4734: GO 6417
4736: LD_INT 12
4738: DOUBLE
4739: EQUAL
4740: IFTRUE 4744
4742: GO 4964
4744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4745: LD_ADDR_VAR 0 2
4749: PUSH
4750: LD_INT 1
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 3
4758: PUSH
4759: LD_INT 4
4761: PUSH
4762: LD_INT 5
4764: PUSH
4765: LD_INT 6
4767: PUSH
4768: LD_INT 7
4770: PUSH
4771: LD_INT 8
4773: PUSH
4774: LD_INT 9
4776: PUSH
4777: LD_INT 10
4779: PUSH
4780: LD_INT 11
4782: PUSH
4783: LD_INT 12
4785: PUSH
4786: LD_INT 13
4788: PUSH
4789: LD_INT 14
4791: PUSH
4792: LD_INT 15
4794: PUSH
4795: LD_INT 16
4797: PUSH
4798: LD_INT 17
4800: PUSH
4801: LD_INT 18
4803: PUSH
4804: LD_INT 19
4806: PUSH
4807: LD_INT 20
4809: PUSH
4810: LD_INT 21
4812: PUSH
4813: LD_INT 22
4815: PUSH
4816: LD_INT 23
4818: PUSH
4819: LD_INT 24
4821: PUSH
4822: LD_INT 25
4824: PUSH
4825: LD_INT 26
4827: PUSH
4828: LD_INT 27
4830: PUSH
4831: LD_INT 28
4833: PUSH
4834: LD_INT 30
4836: PUSH
4837: LD_INT 31
4839: PUSH
4840: LD_INT 32
4842: PUSH
4843: LD_INT 33
4845: PUSH
4846: LD_INT 34
4848: PUSH
4849: LD_INT 36
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 101
4890: PUSH
4891: LD_INT 102
4893: PUSH
4894: LD_INT 103
4896: PUSH
4897: LD_INT 104
4899: PUSH
4900: LD_INT 105
4902: PUSH
4903: LD_INT 106
4905: PUSH
4906: LD_INT 107
4908: PUSH
4909: LD_INT 108
4911: PUSH
4912: LD_INT 109
4914: PUSH
4915: LD_INT 110
4917: PUSH
4918: LD_INT 111
4920: PUSH
4921: LD_INT 112
4923: PUSH
4924: LD_INT 113
4926: PUSH
4927: LD_INT 114
4929: PUSH
4930: LD_INT 116
4932: PUSH
4933: LD_INT 117
4935: PUSH
4936: LD_INT 118
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: ST_TO_ADDR
4962: GO 6417
4964: LD_INT 13
4966: DOUBLE
4967: EQUAL
4968: IFTRUE 4972
4970: GO 5180
4972: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4973: LD_ADDR_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: PUSH
4981: LD_INT 2
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: LD_INT 4
4989: PUSH
4990: LD_INT 5
4992: PUSH
4993: LD_INT 8
4995: PUSH
4996: LD_INT 9
4998: PUSH
4999: LD_INT 10
5001: PUSH
5002: LD_INT 11
5004: PUSH
5005: LD_INT 12
5007: PUSH
5008: LD_INT 14
5010: PUSH
5011: LD_INT 15
5013: PUSH
5014: LD_INT 16
5016: PUSH
5017: LD_INT 17
5019: PUSH
5020: LD_INT 18
5022: PUSH
5023: LD_INT 19
5025: PUSH
5026: LD_INT 20
5028: PUSH
5029: LD_INT 21
5031: PUSH
5032: LD_INT 22
5034: PUSH
5035: LD_INT 23
5037: PUSH
5038: LD_INT 24
5040: PUSH
5041: LD_INT 25
5043: PUSH
5044: LD_INT 26
5046: PUSH
5047: LD_INT 27
5049: PUSH
5050: LD_INT 28
5052: PUSH
5053: LD_INT 30
5055: PUSH
5056: LD_INT 31
5058: PUSH
5059: LD_INT 32
5061: PUSH
5062: LD_INT 33
5064: PUSH
5065: LD_INT 34
5067: PUSH
5068: LD_INT 36
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 101
5106: PUSH
5107: LD_INT 102
5109: PUSH
5110: LD_INT 103
5112: PUSH
5113: LD_INT 104
5115: PUSH
5116: LD_INT 105
5118: PUSH
5119: LD_INT 106
5121: PUSH
5122: LD_INT 107
5124: PUSH
5125: LD_INT 108
5127: PUSH
5128: LD_INT 109
5130: PUSH
5131: LD_INT 110
5133: PUSH
5134: LD_INT 111
5136: PUSH
5137: LD_INT 112
5139: PUSH
5140: LD_INT 113
5142: PUSH
5143: LD_INT 114
5145: PUSH
5146: LD_INT 116
5148: PUSH
5149: LD_INT 117
5151: PUSH
5152: LD_INT 118
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: ST_TO_ADDR
5178: GO 6417
5180: LD_INT 14
5182: DOUBLE
5183: EQUAL
5184: IFTRUE 5188
5186: GO 5412
5188: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5189: LD_ADDR_VAR 0 2
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: LD_INT 3
5202: PUSH
5203: LD_INT 4
5205: PUSH
5206: LD_INT 5
5208: PUSH
5209: LD_INT 6
5211: PUSH
5212: LD_INT 7
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: LD_INT 9
5220: PUSH
5221: LD_INT 10
5223: PUSH
5224: LD_INT 11
5226: PUSH
5227: LD_INT 12
5229: PUSH
5230: LD_INT 13
5232: PUSH
5233: LD_INT 14
5235: PUSH
5236: LD_INT 15
5238: PUSH
5239: LD_INT 16
5241: PUSH
5242: LD_INT 17
5244: PUSH
5245: LD_INT 18
5247: PUSH
5248: LD_INT 19
5250: PUSH
5251: LD_INT 20
5253: PUSH
5254: LD_INT 21
5256: PUSH
5257: LD_INT 22
5259: PUSH
5260: LD_INT 23
5262: PUSH
5263: LD_INT 24
5265: PUSH
5266: LD_INT 25
5268: PUSH
5269: LD_INT 26
5271: PUSH
5272: LD_INT 27
5274: PUSH
5275: LD_INT 28
5277: PUSH
5278: LD_INT 29
5280: PUSH
5281: LD_INT 30
5283: PUSH
5284: LD_INT 31
5286: PUSH
5287: LD_INT 32
5289: PUSH
5290: LD_INT 33
5292: PUSH
5293: LD_INT 34
5295: PUSH
5296: LD_INT 36
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 101
5338: PUSH
5339: LD_INT 102
5341: PUSH
5342: LD_INT 103
5344: PUSH
5345: LD_INT 104
5347: PUSH
5348: LD_INT 105
5350: PUSH
5351: LD_INT 106
5353: PUSH
5354: LD_INT 107
5356: PUSH
5357: LD_INT 108
5359: PUSH
5360: LD_INT 109
5362: PUSH
5363: LD_INT 110
5365: PUSH
5366: LD_INT 111
5368: PUSH
5369: LD_INT 112
5371: PUSH
5372: LD_INT 113
5374: PUSH
5375: LD_INT 114
5377: PUSH
5378: LD_INT 116
5380: PUSH
5381: LD_INT 117
5383: PUSH
5384: LD_INT 118
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: ST_TO_ADDR
5410: GO 6417
5412: LD_INT 15
5414: DOUBLE
5415: EQUAL
5416: IFTRUE 5420
5418: GO 5644
5420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5421: LD_ADDR_VAR 0 2
5425: PUSH
5426: LD_INT 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: LD_INT 4
5437: PUSH
5438: LD_INT 5
5440: PUSH
5441: LD_INT 6
5443: PUSH
5444: LD_INT 7
5446: PUSH
5447: LD_INT 8
5449: PUSH
5450: LD_INT 9
5452: PUSH
5453: LD_INT 10
5455: PUSH
5456: LD_INT 11
5458: PUSH
5459: LD_INT 12
5461: PUSH
5462: LD_INT 13
5464: PUSH
5465: LD_INT 14
5467: PUSH
5468: LD_INT 15
5470: PUSH
5471: LD_INT 16
5473: PUSH
5474: LD_INT 17
5476: PUSH
5477: LD_INT 18
5479: PUSH
5480: LD_INT 19
5482: PUSH
5483: LD_INT 20
5485: PUSH
5486: LD_INT 21
5488: PUSH
5489: LD_INT 22
5491: PUSH
5492: LD_INT 23
5494: PUSH
5495: LD_INT 24
5497: PUSH
5498: LD_INT 25
5500: PUSH
5501: LD_INT 26
5503: PUSH
5504: LD_INT 27
5506: PUSH
5507: LD_INT 28
5509: PUSH
5510: LD_INT 29
5512: PUSH
5513: LD_INT 30
5515: PUSH
5516: LD_INT 31
5518: PUSH
5519: LD_INT 32
5521: PUSH
5522: LD_INT 33
5524: PUSH
5525: LD_INT 34
5527: PUSH
5528: LD_INT 36
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 101
5570: PUSH
5571: LD_INT 102
5573: PUSH
5574: LD_INT 103
5576: PUSH
5577: LD_INT 104
5579: PUSH
5580: LD_INT 105
5582: PUSH
5583: LD_INT 106
5585: PUSH
5586: LD_INT 107
5588: PUSH
5589: LD_INT 108
5591: PUSH
5592: LD_INT 109
5594: PUSH
5595: LD_INT 110
5597: PUSH
5598: LD_INT 111
5600: PUSH
5601: LD_INT 112
5603: PUSH
5604: LD_INT 113
5606: PUSH
5607: LD_INT 114
5609: PUSH
5610: LD_INT 116
5612: PUSH
5613: LD_INT 117
5615: PUSH
5616: LD_INT 118
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: ST_TO_ADDR
5642: GO 6417
5644: LD_INT 16
5646: DOUBLE
5647: EQUAL
5648: IFTRUE 5652
5650: GO 5788
5652: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5653: LD_ADDR_VAR 0 2
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: LD_INT 4
5663: PUSH
5664: LD_INT 5
5666: PUSH
5667: LD_INT 7
5669: PUSH
5670: LD_INT 11
5672: PUSH
5673: LD_INT 12
5675: PUSH
5676: LD_INT 15
5678: PUSH
5679: LD_INT 16
5681: PUSH
5682: LD_INT 20
5684: PUSH
5685: LD_INT 21
5687: PUSH
5688: LD_INT 22
5690: PUSH
5691: LD_INT 23
5693: PUSH
5694: LD_INT 25
5696: PUSH
5697: LD_INT 26
5699: PUSH
5700: LD_INT 30
5702: PUSH
5703: LD_INT 31
5705: PUSH
5706: LD_INT 32
5708: PUSH
5709: LD_INT 33
5711: PUSH
5712: LD_INT 34
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: PUSH
5736: LD_INT 101
5738: PUSH
5739: LD_INT 102
5741: PUSH
5742: LD_INT 103
5744: PUSH
5745: LD_INT 106
5747: PUSH
5748: LD_INT 108
5750: PUSH
5751: LD_INT 112
5753: PUSH
5754: LD_INT 113
5756: PUSH
5757: LD_INT 114
5759: PUSH
5760: LD_INT 116
5762: PUSH
5763: LD_INT 117
5765: PUSH
5766: LD_INT 118
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: ST_TO_ADDR
5786: GO 6417
5788: LD_INT 17
5790: DOUBLE
5791: EQUAL
5792: IFTRUE 5796
5794: GO 6020
5796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: LD_INT 1
5804: PUSH
5805: LD_INT 2
5807: PUSH
5808: LD_INT 3
5810: PUSH
5811: LD_INT 4
5813: PUSH
5814: LD_INT 5
5816: PUSH
5817: LD_INT 6
5819: PUSH
5820: LD_INT 7
5822: PUSH
5823: LD_INT 8
5825: PUSH
5826: LD_INT 9
5828: PUSH
5829: LD_INT 10
5831: PUSH
5832: LD_INT 11
5834: PUSH
5835: LD_INT 12
5837: PUSH
5838: LD_INT 13
5840: PUSH
5841: LD_INT 14
5843: PUSH
5844: LD_INT 15
5846: PUSH
5847: LD_INT 16
5849: PUSH
5850: LD_INT 17
5852: PUSH
5853: LD_INT 18
5855: PUSH
5856: LD_INT 19
5858: PUSH
5859: LD_INT 20
5861: PUSH
5862: LD_INT 21
5864: PUSH
5865: LD_INT 22
5867: PUSH
5868: LD_INT 23
5870: PUSH
5871: LD_INT 24
5873: PUSH
5874: LD_INT 25
5876: PUSH
5877: LD_INT 26
5879: PUSH
5880: LD_INT 27
5882: PUSH
5883: LD_INT 28
5885: PUSH
5886: LD_INT 29
5888: PUSH
5889: LD_INT 30
5891: PUSH
5892: LD_INT 31
5894: PUSH
5895: LD_INT 32
5897: PUSH
5898: LD_INT 33
5900: PUSH
5901: LD_INT 34
5903: PUSH
5904: LD_INT 36
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: LD_INT 101
5946: PUSH
5947: LD_INT 102
5949: PUSH
5950: LD_INT 103
5952: PUSH
5953: LD_INT 104
5955: PUSH
5956: LD_INT 105
5958: PUSH
5959: LD_INT 106
5961: PUSH
5962: LD_INT 107
5964: PUSH
5965: LD_INT 108
5967: PUSH
5968: LD_INT 109
5970: PUSH
5971: LD_INT 110
5973: PUSH
5974: LD_INT 111
5976: PUSH
5977: LD_INT 112
5979: PUSH
5980: LD_INT 113
5982: PUSH
5983: LD_INT 114
5985: PUSH
5986: LD_INT 116
5988: PUSH
5989: LD_INT 117
5991: PUSH
5992: LD_INT 118
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: ST_TO_ADDR
6018: GO 6417
6020: LD_INT 18
6022: DOUBLE
6023: EQUAL
6024: IFTRUE 6028
6026: GO 6176
6028: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6029: LD_ADDR_VAR 0 2
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 4
6039: PUSH
6040: LD_INT 5
6042: PUSH
6043: LD_INT 7
6045: PUSH
6046: LD_INT 11
6048: PUSH
6049: LD_INT 12
6051: PUSH
6052: LD_INT 15
6054: PUSH
6055: LD_INT 16
6057: PUSH
6058: LD_INT 20
6060: PUSH
6061: LD_INT 21
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 23
6069: PUSH
6070: LD_INT 25
6072: PUSH
6073: LD_INT 26
6075: PUSH
6076: LD_INT 30
6078: PUSH
6079: LD_INT 31
6081: PUSH
6082: LD_INT 32
6084: PUSH
6085: LD_INT 33
6087: PUSH
6088: LD_INT 34
6090: PUSH
6091: LD_INT 35
6093: PUSH
6094: LD_INT 36
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 101
6122: PUSH
6123: LD_INT 102
6125: PUSH
6126: LD_INT 103
6128: PUSH
6129: LD_INT 106
6131: PUSH
6132: LD_INT 108
6134: PUSH
6135: LD_INT 112
6137: PUSH
6138: LD_INT 113
6140: PUSH
6141: LD_INT 114
6143: PUSH
6144: LD_INT 115
6146: PUSH
6147: LD_INT 116
6149: PUSH
6150: LD_INT 117
6152: PUSH
6153: LD_INT 118
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: ST_TO_ADDR
6174: GO 6417
6176: LD_INT 19
6178: DOUBLE
6179: EQUAL
6180: IFTRUE 6184
6182: GO 6416
6184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6185: LD_ADDR_VAR 0 2
6189: PUSH
6190: LD_INT 1
6192: PUSH
6193: LD_INT 2
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_INT 4
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: LD_INT 6
6207: PUSH
6208: LD_INT 7
6210: PUSH
6211: LD_INT 8
6213: PUSH
6214: LD_INT 9
6216: PUSH
6217: LD_INT 10
6219: PUSH
6220: LD_INT 11
6222: PUSH
6223: LD_INT 12
6225: PUSH
6226: LD_INT 13
6228: PUSH
6229: LD_INT 14
6231: PUSH
6232: LD_INT 15
6234: PUSH
6235: LD_INT 16
6237: PUSH
6238: LD_INT 17
6240: PUSH
6241: LD_INT 18
6243: PUSH
6244: LD_INT 19
6246: PUSH
6247: LD_INT 20
6249: PUSH
6250: LD_INT 21
6252: PUSH
6253: LD_INT 22
6255: PUSH
6256: LD_INT 23
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 25
6264: PUSH
6265: LD_INT 26
6267: PUSH
6268: LD_INT 27
6270: PUSH
6271: LD_INT 28
6273: PUSH
6274: LD_INT 29
6276: PUSH
6277: LD_INT 30
6279: PUSH
6280: LD_INT 31
6282: PUSH
6283: LD_INT 32
6285: PUSH
6286: LD_INT 33
6288: PUSH
6289: LD_INT 34
6291: PUSH
6292: LD_INT 35
6294: PUSH
6295: LD_INT 36
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 101
6338: PUSH
6339: LD_INT 102
6341: PUSH
6342: LD_INT 103
6344: PUSH
6345: LD_INT 104
6347: PUSH
6348: LD_INT 105
6350: PUSH
6351: LD_INT 106
6353: PUSH
6354: LD_INT 107
6356: PUSH
6357: LD_INT 108
6359: PUSH
6360: LD_INT 109
6362: PUSH
6363: LD_INT 110
6365: PUSH
6366: LD_INT 111
6368: PUSH
6369: LD_INT 112
6371: PUSH
6372: LD_INT 113
6374: PUSH
6375: LD_INT 114
6377: PUSH
6378: LD_INT 115
6380: PUSH
6381: LD_INT 116
6383: PUSH
6384: LD_INT 117
6386: PUSH
6387: LD_INT 118
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: ST_TO_ADDR
6414: GO 6417
6416: POP
// end else
6417: GO 6648
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: LD_INT 3
6432: PUSH
6433: LD_INT 4
6435: PUSH
6436: LD_INT 5
6438: PUSH
6439: LD_INT 6
6441: PUSH
6442: LD_INT 7
6444: PUSH
6445: LD_INT 8
6447: PUSH
6448: LD_INT 9
6450: PUSH
6451: LD_INT 10
6453: PUSH
6454: LD_INT 11
6456: PUSH
6457: LD_INT 12
6459: PUSH
6460: LD_INT 13
6462: PUSH
6463: LD_INT 14
6465: PUSH
6466: LD_INT 15
6468: PUSH
6469: LD_INT 16
6471: PUSH
6472: LD_INT 17
6474: PUSH
6475: LD_INT 18
6477: PUSH
6478: LD_INT 19
6480: PUSH
6481: LD_INT 20
6483: PUSH
6484: LD_INT 21
6486: PUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 23
6492: PUSH
6493: LD_INT 24
6495: PUSH
6496: LD_INT 25
6498: PUSH
6499: LD_INT 26
6501: PUSH
6502: LD_INT 27
6504: PUSH
6505: LD_INT 28
6507: PUSH
6508: LD_INT 29
6510: PUSH
6511: LD_INT 30
6513: PUSH
6514: LD_INT 31
6516: PUSH
6517: LD_INT 32
6519: PUSH
6520: LD_INT 33
6522: PUSH
6523: LD_INT 34
6525: PUSH
6526: LD_INT 35
6528: PUSH
6529: LD_INT 36
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 101
6572: PUSH
6573: LD_INT 102
6575: PUSH
6576: LD_INT 103
6578: PUSH
6579: LD_INT 104
6581: PUSH
6582: LD_INT 105
6584: PUSH
6585: LD_INT 106
6587: PUSH
6588: LD_INT 107
6590: PUSH
6591: LD_INT 108
6593: PUSH
6594: LD_INT 109
6596: PUSH
6597: LD_INT 110
6599: PUSH
6600: LD_INT 111
6602: PUSH
6603: LD_INT 112
6605: PUSH
6606: LD_INT 113
6608: PUSH
6609: LD_INT 114
6611: PUSH
6612: LD_INT 115
6614: PUSH
6615: LD_INT 116
6617: PUSH
6618: LD_INT 117
6620: PUSH
6621: LD_INT 118
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: ST_TO_ADDR
// if result then
6648: LD_VAR 0 2
6652: IFFALSE 7438
// begin normal :=  ;
6654: LD_ADDR_VAR 0 5
6658: PUSH
6659: LD_STRING 
6661: ST_TO_ADDR
// hardcore :=  ;
6662: LD_ADDR_VAR 0 6
6666: PUSH
6667: LD_STRING 
6669: ST_TO_ADDR
// active :=  ;
6670: LD_ADDR_VAR 0 7
6674: PUSH
6675: LD_STRING 
6677: ST_TO_ADDR
// for i = 1 to normalCounter do
6678: LD_ADDR_VAR 0 8
6682: PUSH
6683: DOUBLE
6684: LD_INT 1
6686: DEC
6687: ST_TO_ADDR
6688: LD_EXP 4
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6795
// begin tmp := 0 ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_STRING 0
6703: ST_TO_ADDR
// if result [ 1 ] then
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: ARRAY
6712: IFFALSE 6777
// if result [ 1 ] [ 1 ] = i then
6714: LD_VAR 0 2
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PUSH
6727: LD_VAR 0 8
6731: EQUAL
6732: IFFALSE 6777
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_VAR 0 2
6743: PPUSH
6744: LD_INT 1
6746: PPUSH
6747: LD_VAR 0 2
6751: PUSH
6752: LD_INT 1
6754: ARRAY
6755: PPUSH
6756: LD_INT 1
6758: PPUSH
6759: CALL_OW 3
6763: PPUSH
6764: CALL_OW 1
6768: ST_TO_ADDR
// tmp := 1 ;
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_STRING 1
6776: ST_TO_ADDR
// end ; normal := normal & tmp ;
6777: LD_ADDR_VAR 0 5
6781: PUSH
6782: LD_VAR 0 5
6786: PUSH
6787: LD_VAR 0 3
6791: STR
6792: ST_TO_ADDR
// end ;
6793: GO 6693
6795: POP
6796: POP
// for i = 1 to hardcoreCounter do
6797: LD_ADDR_VAR 0 8
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_EXP 5
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6918
// begin tmp := 0 ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_STRING 0
6822: ST_TO_ADDR
// if result [ 2 ] then
6823: LD_VAR 0 2
6827: PUSH
6828: LD_INT 2
6830: ARRAY
6831: IFFALSE 6900
// if result [ 2 ] [ 1 ] = 100 + i then
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 2
6840: ARRAY
6841: PUSH
6842: LD_INT 1
6844: ARRAY
6845: PUSH
6846: LD_INT 100
6848: PUSH
6849: LD_VAR 0 8
6853: PLUS
6854: EQUAL
6855: IFFALSE 6900
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_INT 2
6869: PPUSH
6870: LD_VAR 0 2
6874: PUSH
6875: LD_INT 2
6877: ARRAY
6878: PPUSH
6879: LD_INT 1
6881: PPUSH
6882: CALL_OW 3
6886: PPUSH
6887: CALL_OW 1
6891: ST_TO_ADDR
// tmp := 1 ;
6892: LD_ADDR_VAR 0 3
6896: PUSH
6897: LD_STRING 1
6899: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6900: LD_ADDR_VAR 0 6
6904: PUSH
6905: LD_VAR 0 6
6909: PUSH
6910: LD_VAR 0 3
6914: STR
6915: ST_TO_ADDR
// end ;
6916: GO 6812
6918: POP
6919: POP
// if isGameLoad then
6920: LD_VAR 0 1
6924: IFFALSE 7399
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6926: LD_ADDR_VAR 0 4
6930: PUSH
6931: LD_EXP 8
6935: PUSH
6936: LD_EXP 7
6940: PUSH
6941: LD_EXP 9
6945: PUSH
6946: LD_EXP 6
6950: PUSH
6951: LD_EXP 10
6955: PUSH
6956: LD_EXP 11
6960: PUSH
6961: LD_EXP 12
6965: PUSH
6966: LD_EXP 13
6970: PUSH
6971: LD_EXP 14
6975: PUSH
6976: LD_EXP 15
6980: PUSH
6981: LD_EXP 16
6985: PUSH
6986: LD_EXP 17
6990: PUSH
6991: LD_EXP 18
6995: PUSH
6996: LD_EXP 19
7000: PUSH
7001: LD_EXP 27
7005: PUSH
7006: LD_EXP 28
7010: PUSH
7011: LD_EXP 29
7015: PUSH
7016: LD_EXP 30
7020: PUSH
7021: LD_EXP 32
7025: PUSH
7026: LD_EXP 33
7030: PUSH
7031: LD_EXP 34
7035: PUSH
7036: LD_EXP 37
7040: PUSH
7041: LD_EXP 39
7045: PUSH
7046: LD_EXP 40
7050: PUSH
7051: LD_EXP 41
7055: PUSH
7056: LD_EXP 43
7060: PUSH
7061: LD_EXP 44
7065: PUSH
7066: LD_EXP 47
7070: PUSH
7071: LD_EXP 48
7075: PUSH
7076: LD_EXP 49
7080: PUSH
7081: LD_EXP 50
7085: PUSH
7086: LD_EXP 51
7090: PUSH
7091: LD_EXP 52
7095: PUSH
7096: LD_EXP 53
7100: PUSH
7101: LD_EXP 54
7105: PUSH
7106: LD_EXP 55
7110: PUSH
7111: LD_EXP 20
7115: PUSH
7116: LD_EXP 21
7120: PUSH
7121: LD_EXP 24
7125: PUSH
7126: LD_EXP 25
7130: PUSH
7131: LD_EXP 26
7135: PUSH
7136: LD_EXP 22
7140: PUSH
7141: LD_EXP 23
7145: PUSH
7146: LD_EXP 31
7150: PUSH
7151: LD_EXP 35
7155: PUSH
7156: LD_EXP 36
7160: PUSH
7161: LD_EXP 38
7165: PUSH
7166: LD_EXP 42
7170: PUSH
7171: LD_EXP 45
7175: PUSH
7176: LD_EXP 46
7180: PUSH
7181: LD_EXP 56
7185: PUSH
7186: LD_EXP 57
7190: PUSH
7191: LD_EXP 58
7195: PUSH
7196: LD_EXP 59
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: ST_TO_ADDR
// tmp :=  ;
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_STRING 
7264: ST_TO_ADDR
// for i = 1 to normalCounter do
7265: LD_ADDR_VAR 0 8
7269: PUSH
7270: DOUBLE
7271: LD_INT 1
7273: DEC
7274: ST_TO_ADDR
7275: LD_EXP 4
7279: PUSH
7280: FOR_TO
7281: IFFALSE 7317
// begin if flags [ i ] then
7283: LD_VAR 0 4
7287: PUSH
7288: LD_VAR 0 8
7292: ARRAY
7293: IFFALSE 7315
// tmp := tmp & i & ; ;
7295: LD_ADDR_VAR 0 3
7299: PUSH
7300: LD_VAR 0 3
7304: PUSH
7305: LD_VAR 0 8
7309: STR
7310: PUSH
7311: LD_STRING ;
7313: STR
7314: ST_TO_ADDR
// end ;
7315: GO 7280
7317: POP
7318: POP
// for i = 1 to hardcoreCounter do
7319: LD_ADDR_VAR 0 8
7323: PUSH
7324: DOUBLE
7325: LD_INT 1
7327: DEC
7328: ST_TO_ADDR
7329: LD_EXP 5
7333: PUSH
7334: FOR_TO
7335: IFFALSE 7381
// begin if flags [ normalCounter + i ] then
7337: LD_VAR 0 4
7341: PUSH
7342: LD_EXP 4
7346: PUSH
7347: LD_VAR 0 8
7351: PLUS
7352: ARRAY
7353: IFFALSE 7379
// tmp := tmp & ( 100 + i ) & ; ;
7355: LD_ADDR_VAR 0 3
7359: PUSH
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 100
7367: PUSH
7368: LD_VAR 0 8
7372: PLUS
7373: STR
7374: PUSH
7375: LD_STRING ;
7377: STR
7378: ST_TO_ADDR
// end ;
7379: GO 7334
7381: POP
7382: POP
// if tmp then
7383: LD_VAR 0 3
7387: IFFALSE 7399
// active := tmp ;
7389: LD_ADDR_VAR 0 7
7393: PUSH
7394: LD_VAR 0 3
7398: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7399: LD_STRING getStreamItemsFromMission("
7401: PUSH
7402: LD_VAR 0 5
7406: STR
7407: PUSH
7408: LD_STRING ","
7410: STR
7411: PUSH
7412: LD_VAR 0 6
7416: STR
7417: PUSH
7418: LD_STRING ","
7420: STR
7421: PUSH
7422: LD_VAR 0 7
7426: STR
7427: PUSH
7428: LD_STRING ")
7430: STR
7431: PPUSH
7432: CALL_OW 559
// end else
7436: GO 7445
// ToLua ( getStreamItemsFromMission("","","") ) ;
7438: LD_STRING getStreamItemsFromMission("","","")
7440: PPUSH
7441: CALL_OW 559
// end ;
7445: LD_VAR 0 2
7449: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7450: LD_EXP 3
7454: IFFALSE 7462
7456: PUSH
7457: LD_EXP 8
7461: AND
7462: IFFALSE 7586
7464: GO 7466
7466: DISABLE
7467: LD_INT 0
7469: PPUSH
7470: PPUSH
// begin enable ;
7471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7472: LD_ADDR_VAR 0 2
7476: PUSH
7477: LD_INT 22
7479: PUSH
7480: LD_OWVAR 2
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: LD_INT 34
7494: PUSH
7495: LD_INT 7
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 45
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 28
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 34
7524: PUSH
7525: LD_INT 47
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: ST_TO_ADDR
// if not tmp then
7548: LD_VAR 0 2
7552: NOT
7553: IFFALSE 7557
// exit ;
7555: GO 7586
// for i in tmp do
7557: LD_ADDR_VAR 0 1
7561: PUSH
7562: LD_VAR 0 2
7566: PUSH
7567: FOR_IN
7568: IFFALSE 7584
// begin SetLives ( i , 0 ) ;
7570: LD_VAR 0 1
7574: PPUSH
7575: LD_INT 0
7577: PPUSH
7578: CALL_OW 234
// end ;
7582: GO 7567
7584: POP
7585: POP
// end ;
7586: PPOPN 2
7588: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7589: LD_EXP 3
7593: IFFALSE 7601
7595: PUSH
7596: LD_EXP 9
7600: AND
7601: IFFALSE 7685
7603: GO 7605
7605: DISABLE
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
// begin enable ;
7610: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7611: LD_ADDR_VAR 0 2
7615: PUSH
7616: LD_INT 22
7618: PUSH
7619: LD_OWVAR 2
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 32
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 69
7646: ST_TO_ADDR
// if not tmp then
7647: LD_VAR 0 2
7651: NOT
7652: IFFALSE 7656
// exit ;
7654: GO 7685
// for i in tmp do
7656: LD_ADDR_VAR 0 1
7660: PUSH
7661: LD_VAR 0 2
7665: PUSH
7666: FOR_IN
7667: IFFALSE 7683
// begin SetLives ( i , 0 ) ;
7669: LD_VAR 0 1
7673: PPUSH
7674: LD_INT 0
7676: PPUSH
7677: CALL_OW 234
// end ;
7681: GO 7666
7683: POP
7684: POP
// end ;
7685: PPOPN 2
7687: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7688: LD_EXP 3
7692: IFFALSE 7700
7694: PUSH
7695: LD_EXP 6
7699: AND
7700: IFFALSE 7793
7702: GO 7704
7704: DISABLE
7705: LD_INT 0
7707: PPUSH
// begin enable ;
7708: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7709: LD_ADDR_VAR 0 1
7713: PUSH
7714: LD_INT 22
7716: PUSH
7717: LD_OWVAR 2
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: LD_INT 25
7731: PUSH
7732: LD_INT 5
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 25
7741: PUSH
7742: LD_INT 9
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 25
7751: PUSH
7752: LD_INT 8
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PPUSH
7769: CALL_OW 69
7773: PUSH
7774: FOR_IN
7775: IFFALSE 7791
// begin SetClass ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 336
// end ;
7789: GO 7774
7791: POP
7792: POP
// end ;
7793: PPOPN 1
7795: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7796: LD_EXP 3
7800: IFFALSE 7808
7802: PUSH
7803: LD_EXP 7
7807: AND
7808: IFFALSE 7820
7810: PUSH
7811: LD_OWVAR 65
7815: PUSH
7816: LD_INT 7
7818: LESS
7819: AND
7820: IFFALSE 7834
7822: GO 7824
7824: DISABLE
// begin enable ;
7825: ENABLE
// game_speed := 7 ;
7826: LD_ADDR_OWVAR 65
7830: PUSH
7831: LD_INT 7
7833: ST_TO_ADDR
// end ;
7834: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7835: LD_EXP 3
7839: IFFALSE 7847
7841: PUSH
7842: LD_EXP 10
7846: AND
7847: IFFALSE 8049
7849: GO 7851
7851: DISABLE
7852: LD_INT 0
7854: PPUSH
7855: PPUSH
7856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7857: LD_ADDR_VAR 0 3
7861: PUSH
7862: LD_INT 81
7864: PUSH
7865: LD_OWVAR 2
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 21
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 69
7892: ST_TO_ADDR
// if not tmp then
7893: LD_VAR 0 3
7897: NOT
7898: IFFALSE 7902
// exit ;
7900: GO 8049
// if tmp > 5 then
7902: LD_VAR 0 3
7906: PUSH
7907: LD_INT 5
7909: GREATER
7910: IFFALSE 7922
// k := 5 else
7912: LD_ADDR_VAR 0 2
7916: PUSH
7917: LD_INT 5
7919: ST_TO_ADDR
7920: GO 7932
// k := tmp ;
7922: LD_ADDR_VAR 0 2
7926: PUSH
7927: LD_VAR 0 3
7931: ST_TO_ADDR
// for i := 1 to k do
7932: LD_ADDR_VAR 0 1
7936: PUSH
7937: DOUBLE
7938: LD_INT 1
7940: DEC
7941: ST_TO_ADDR
7942: LD_VAR 0 2
7946: PUSH
7947: FOR_TO
7948: IFFALSE 8047
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7950: LD_VAR 0 3
7954: PUSH
7955: LD_VAR 0 1
7959: ARRAY
7960: PPUSH
7961: LD_VAR 0 1
7965: PUSH
7966: LD_INT 4
7968: MOD
7969: PUSH
7970: LD_INT 1
7972: PLUS
7973: PPUSH
7974: CALL_OW 259
7978: PUSH
7979: LD_INT 10
7981: LESS
7982: IFFALSE 8045
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7984: LD_VAR 0 3
7988: PUSH
7989: LD_VAR 0 1
7993: ARRAY
7994: PPUSH
7995: LD_VAR 0 1
7999: PUSH
8000: LD_INT 4
8002: MOD
8003: PUSH
8004: LD_INT 1
8006: PLUS
8007: PPUSH
8008: LD_VAR 0 3
8012: PUSH
8013: LD_VAR 0 1
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 1
8023: PUSH
8024: LD_INT 4
8026: MOD
8027: PUSH
8028: LD_INT 1
8030: PLUS
8031: PPUSH
8032: CALL_OW 259
8036: PUSH
8037: LD_INT 1
8039: PLUS
8040: PPUSH
8041: CALL_OW 237
8045: GO 7947
8047: POP
8048: POP
// end ;
8049: PPOPN 3
8051: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8052: LD_EXP 3
8056: IFFALSE 8064
8058: PUSH
8059: LD_EXP 11
8063: AND
8064: IFFALSE 8084
8066: GO 8068
8068: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8069: LD_INT 4
8071: PPUSH
8072: LD_OWVAR 2
8076: PPUSH
8077: LD_INT 0
8079: PPUSH
8080: CALL_OW 324
8084: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8085: LD_EXP 3
8089: IFFALSE 8097
8091: PUSH
8092: LD_EXP 40
8096: AND
8097: IFFALSE 8117
8099: GO 8101
8101: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8102: LD_INT 19
8104: PPUSH
8105: LD_OWVAR 2
8109: PPUSH
8110: LD_INT 0
8112: PPUSH
8113: CALL_OW 324
8117: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8118: LD_EXP 3
8122: IFFALSE 8130
8124: PUSH
8125: LD_EXP 12
8129: AND
8130: IFFALSE 8232
8132: GO 8134
8134: DISABLE
8135: LD_INT 0
8137: PPUSH
8138: PPUSH
// begin enable ;
8139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8140: LD_ADDR_VAR 0 2
8144: PUSH
8145: LD_INT 22
8147: PUSH
8148: LD_OWVAR 2
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: LD_INT 34
8162: PUSH
8163: LD_INT 11
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 34
8172: PUSH
8173: LD_INT 30
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: LIST
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PPUSH
8189: CALL_OW 69
8193: ST_TO_ADDR
// if not tmp then
8194: LD_VAR 0 2
8198: NOT
8199: IFFALSE 8203
// exit ;
8201: GO 8232
// for i in tmp do
8203: LD_ADDR_VAR 0 1
8207: PUSH
8208: LD_VAR 0 2
8212: PUSH
8213: FOR_IN
8214: IFFALSE 8230
// begin SetLives ( i , 0 ) ;
8216: LD_VAR 0 1
8220: PPUSH
8221: LD_INT 0
8223: PPUSH
8224: CALL_OW 234
// end ;
8228: GO 8213
8230: POP
8231: POP
// end ;
8232: PPOPN 2
8234: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8235: LD_EXP 3
8239: IFFALSE 8247
8241: PUSH
8242: LD_EXP 13
8246: AND
8247: IFFALSE 8267
8249: GO 8251
8251: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8252: LD_INT 32
8254: PPUSH
8255: LD_OWVAR 2
8259: PPUSH
8260: LD_INT 0
8262: PPUSH
8263: CALL_OW 324
8267: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8268: LD_EXP 3
8272: IFFALSE 8280
8274: PUSH
8275: LD_EXP 14
8279: AND
8280: IFFALSE 8463
8282: GO 8284
8284: DISABLE
8285: LD_INT 0
8287: PPUSH
8288: PPUSH
8289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_INT 22
8297: PUSH
8298: LD_OWVAR 2
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 33
8309: PUSH
8310: LD_INT 3
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: ST_TO_ADDR
// if not tmp then
8326: LD_VAR 0 2
8330: NOT
8331: IFFALSE 8335
// exit ;
8333: GO 8463
// side := 0 ;
8335: LD_ADDR_VAR 0 3
8339: PUSH
8340: LD_INT 0
8342: ST_TO_ADDR
// for i := 1 to 8 do
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: DOUBLE
8349: LD_INT 1
8351: DEC
8352: ST_TO_ADDR
8353: LD_INT 8
8355: PUSH
8356: FOR_TO
8357: IFFALSE 8407
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8359: LD_OWVAR 2
8363: PUSH
8364: LD_VAR 0 1
8368: NONEQUAL
8369: IFFALSE 8391
8371: PUSH
8372: LD_OWVAR 2
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL_OW 81
8386: PUSH
8387: LD_INT 2
8389: EQUAL
8390: AND
8391: IFFALSE 8405
// begin side := i ;
8393: LD_ADDR_VAR 0 3
8397: PUSH
8398: LD_VAR 0 1
8402: ST_TO_ADDR
// break ;
8403: GO 8407
// end ;
8405: GO 8356
8407: POP
8408: POP
// if not side then
8409: LD_VAR 0 3
8413: NOT
8414: IFFALSE 8418
// exit ;
8416: GO 8463
// for i := 1 to tmp do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: DOUBLE
8424: LD_INT 1
8426: DEC
8427: ST_TO_ADDR
8428: LD_VAR 0 2
8432: PUSH
8433: FOR_TO
8434: IFFALSE 8461
// if Prob ( 60 ) then
8436: LD_INT 60
8438: PPUSH
8439: CALL_OW 13
8443: IFFALSE 8459
// SetSide ( i , side ) ;
8445: LD_VAR 0 1
8449: PPUSH
8450: LD_VAR 0 3
8454: PPUSH
8455: CALL_OW 235
8459: GO 8433
8461: POP
8462: POP
// end ;
8463: PPOPN 3
8465: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8466: LD_EXP 3
8470: IFFALSE 8478
8472: PUSH
8473: LD_EXP 16
8477: AND
8478: IFFALSE 8597
8480: GO 8482
8482: DISABLE
8483: LD_INT 0
8485: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8486: LD_ADDR_VAR 0 1
8490: PUSH
8491: LD_INT 22
8493: PUSH
8494: LD_OWVAR 2
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 21
8505: PUSH
8506: LD_INT 1
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 3
8515: PUSH
8516: LD_INT 23
8518: PUSH
8519: LD_INT 0
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: PPUSH
8535: CALL_OW 69
8539: PUSH
8540: FOR_IN
8541: IFFALSE 8595
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8543: LD_VAR 0 1
8547: PPUSH
8548: CALL_OW 257
8552: PUSH
8553: LD_INT 1
8555: PUSH
8556: LD_INT 2
8558: PUSH
8559: LD_INT 3
8561: PUSH
8562: LD_INT 4
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: IN
8571: IFFALSE 8593
// SetClass ( un , rand ( 1 , 4 ) ) ;
8573: LD_VAR 0 1
8577: PPUSH
8578: LD_INT 1
8580: PPUSH
8581: LD_INT 4
8583: PPUSH
8584: CALL_OW 12
8588: PPUSH
8589: CALL_OW 336
8593: GO 8540
8595: POP
8596: POP
// end ;
8597: PPOPN 1
8599: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8600: LD_EXP 3
8604: IFFALSE 8612
8606: PUSH
8607: LD_EXP 15
8611: AND
8612: IFFALSE 8691
8614: GO 8616
8616: DISABLE
8617: LD_INT 0
8619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8620: LD_ADDR_VAR 0 1
8624: PUSH
8625: LD_INT 22
8627: PUSH
8628: LD_OWVAR 2
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 21
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: ST_TO_ADDR
// if not tmp then
8656: LD_VAR 0 1
8660: NOT
8661: IFFALSE 8665
// exit ;
8663: GO 8691
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8665: LD_VAR 0 1
8669: PUSH
8670: LD_INT 1
8672: PPUSH
8673: LD_VAR 0 1
8677: PPUSH
8678: CALL_OW 12
8682: ARRAY
8683: PPUSH
8684: LD_INT 100
8686: PPUSH
8687: CALL_OW 234
// end ;
8691: PPOPN 1
8693: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8694: LD_EXP 3
8698: IFFALSE 8706
8700: PUSH
8701: LD_EXP 17
8705: AND
8706: IFFALSE 8804
8708: GO 8710
8710: DISABLE
8711: LD_INT 0
8713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8714: LD_ADDR_VAR 0 1
8718: PUSH
8719: LD_INT 22
8721: PUSH
8722: LD_OWVAR 2
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 21
8733: PUSH
8734: LD_INT 1
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// if not tmp then
8750: LD_VAR 0 1
8754: NOT
8755: IFFALSE 8759
// exit ;
8757: GO 8804
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8759: LD_VAR 0 1
8763: PUSH
8764: LD_INT 1
8766: PPUSH
8767: LD_VAR 0 1
8771: PPUSH
8772: CALL_OW 12
8776: ARRAY
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_INT 4
8783: PPUSH
8784: CALL_OW 12
8788: PPUSH
8789: LD_INT 3000
8791: PPUSH
8792: LD_INT 9000
8794: PPUSH
8795: CALL_OW 12
8799: PPUSH
8800: CALL_OW 492
// end ;
8804: PPOPN 1
8806: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8807: LD_EXP 3
8811: IFFALSE 8819
8813: PUSH
8814: LD_EXP 18
8818: AND
8819: IFFALSE 8839
8821: GO 8823
8823: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8824: LD_INT 1
8826: PPUSH
8827: LD_OWVAR 2
8831: PPUSH
8832: LD_INT 0
8834: PPUSH
8835: CALL_OW 324
8839: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8840: LD_EXP 3
8844: IFFALSE 8852
8846: PUSH
8847: LD_EXP 19
8851: AND
8852: IFFALSE 8935
8854: GO 8856
8856: DISABLE
8857: LD_INT 0
8859: PPUSH
8860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8861: LD_ADDR_VAR 0 2
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_OWVAR 2
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 21
8880: PUSH
8881: LD_INT 3
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: ST_TO_ADDR
// if not tmp then
8897: LD_VAR 0 2
8901: NOT
8902: IFFALSE 8906
// exit ;
8904: GO 8935
// for i in tmp do
8906: LD_ADDR_VAR 0 1
8910: PUSH
8911: LD_VAR 0 2
8915: PUSH
8916: FOR_IN
8917: IFFALSE 8933
// SetBLevel ( i , 10 ) ;
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_INT 10
8926: PPUSH
8927: CALL_OW 241
8931: GO 8916
8933: POP
8934: POP
// end ;
8935: PPOPN 2
8937: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8938: LD_EXP 3
8942: IFFALSE 8950
8944: PUSH
8945: LD_EXP 20
8949: AND
8950: IFFALSE 9061
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
8959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8960: LD_ADDR_VAR 0 3
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_OWVAR 2
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 25
8979: PUSH
8980: LD_INT 1
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: ST_TO_ADDR
// if not tmp then
8996: LD_VAR 0 3
9000: NOT
9001: IFFALSE 9005
// exit ;
9003: GO 9061
// un := tmp [ rand ( 1 , tmp ) ] ;
9005: LD_ADDR_VAR 0 2
9009: PUSH
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_VAR 0 3
9022: PPUSH
9023: CALL_OW 12
9027: ARRAY
9028: ST_TO_ADDR
// if Crawls ( un ) then
9029: LD_VAR 0 2
9033: PPUSH
9034: CALL_OW 318
9038: IFFALSE 9049
// ComWalk ( un ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9049: LD_VAR 0 2
9053: PPUSH
9054: LD_INT 5
9056: PPUSH
9057: CALL_OW 336
// end ;
9061: PPOPN 3
9063: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9064: LD_EXP 3
9068: IFFALSE 9076
9070: PUSH
9071: LD_EXP 21
9075: AND
9076: IFFALSE 9088
9078: PUSH
9079: LD_OWVAR 67
9083: PUSH
9084: LD_INT 4
9086: LESS
9087: AND
9088: IFFALSE 9107
9090: GO 9092
9092: DISABLE
// begin Difficulty := Difficulty + 1 ;
9093: LD_ADDR_OWVAR 67
9097: PUSH
9098: LD_OWVAR 67
9102: PUSH
9103: LD_INT 1
9105: PLUS
9106: ST_TO_ADDR
// end ;
9107: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9108: LD_EXP 3
9112: IFFALSE 9120
9114: PUSH
9115: LD_EXP 22
9119: AND
9120: IFFALSE 9223
9122: GO 9124
9124: DISABLE
9125: LD_INT 0
9127: PPUSH
// begin for i := 1 to 5 do
9128: LD_ADDR_VAR 0 1
9132: PUSH
9133: DOUBLE
9134: LD_INT 1
9136: DEC
9137: ST_TO_ADDR
9138: LD_INT 5
9140: PUSH
9141: FOR_TO
9142: IFFALSE 9221
// begin uc_nation := nation_nature ;
9144: LD_ADDR_OWVAR 21
9148: PUSH
9149: LD_INT 0
9151: ST_TO_ADDR
// uc_side := 0 ;
9152: LD_ADDR_OWVAR 20
9156: PUSH
9157: LD_INT 0
9159: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9160: LD_ADDR_OWVAR 29
9164: PUSH
9165: LD_INT 12
9167: PUSH
9168: LD_INT 12
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: ST_TO_ADDR
// hc_agressivity := 20 ;
9175: LD_ADDR_OWVAR 35
9179: PUSH
9180: LD_INT 20
9182: ST_TO_ADDR
// hc_class := class_tiger ;
9183: LD_ADDR_OWVAR 28
9187: PUSH
9188: LD_INT 14
9190: ST_TO_ADDR
// hc_gallery :=  ;
9191: LD_ADDR_OWVAR 33
9195: PUSH
9196: LD_STRING 
9198: ST_TO_ADDR
// hc_name :=  ;
9199: LD_ADDR_OWVAR 26
9203: PUSH
9204: LD_STRING 
9206: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9207: CALL_OW 44
9211: PPUSH
9212: LD_INT 0
9214: PPUSH
9215: CALL_OW 51
// end ;
9219: GO 9141
9221: POP
9222: POP
// end ;
9223: PPOPN 1
9225: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9226: LD_EXP 3
9230: IFFALSE 9238
9232: PUSH
9233: LD_EXP 23
9237: AND
9238: IFFALSE 9247
9240: GO 9242
9242: DISABLE
// StreamSibBomb ;
9243: CALL 9248 0 0
9247: END
// export function StreamSibBomb ; var i , x , y ; begin
9248: LD_INT 0
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
// result := false ;
9254: LD_ADDR_VAR 0 1
9258: PUSH
9259: LD_INT 0
9261: ST_TO_ADDR
// for i := 1 to 16 do
9262: LD_ADDR_VAR 0 2
9266: PUSH
9267: DOUBLE
9268: LD_INT 1
9270: DEC
9271: ST_TO_ADDR
9272: LD_INT 16
9274: PUSH
9275: FOR_TO
9276: IFFALSE 9475
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: LD_INT 10
9285: PUSH
9286: LD_INT 20
9288: PUSH
9289: LD_INT 30
9291: PUSH
9292: LD_INT 40
9294: PUSH
9295: LD_INT 50
9297: PUSH
9298: LD_INT 60
9300: PUSH
9301: LD_INT 70
9303: PUSH
9304: LD_INT 80
9306: PUSH
9307: LD_INT 90
9309: PUSH
9310: LD_INT 100
9312: PUSH
9313: LD_INT 110
9315: PUSH
9316: LD_INT 120
9318: PUSH
9319: LD_INT 130
9321: PUSH
9322: LD_INT 140
9324: PUSH
9325: LD_INT 150
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 1
9347: PPUSH
9348: LD_INT 15
9350: PPUSH
9351: CALL_OW 12
9355: ARRAY
9356: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9357: LD_ADDR_VAR 0 4
9361: PUSH
9362: LD_INT 10
9364: PUSH
9365: LD_INT 20
9367: PUSH
9368: LD_INT 30
9370: PUSH
9371: LD_INT 40
9373: PUSH
9374: LD_INT 50
9376: PUSH
9377: LD_INT 60
9379: PUSH
9380: LD_INT 70
9382: PUSH
9383: LD_INT 80
9385: PUSH
9386: LD_INT 90
9388: PUSH
9389: LD_INT 100
9391: PUSH
9392: LD_INT 110
9394: PUSH
9395: LD_INT 120
9397: PUSH
9398: LD_INT 130
9400: PUSH
9401: LD_INT 140
9403: PUSH
9404: LD_INT 150
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 1
9426: PPUSH
9427: LD_INT 15
9429: PPUSH
9430: CALL_OW 12
9434: ARRAY
9435: ST_TO_ADDR
// if ValidHex ( x , y ) then
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: CALL_OW 488
9450: IFFALSE 9473
// begin result := [ x , y ] ;
9452: LD_ADDR_VAR 0 1
9456: PUSH
9457: LD_VAR 0 3
9461: PUSH
9462: LD_VAR 0 4
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: ST_TO_ADDR
// break ;
9471: GO 9475
// end ; end ;
9473: GO 9275
9475: POP
9476: POP
// if result then
9477: LD_VAR 0 1
9481: IFFALSE 9541
// begin ToLua ( playSibBomb() ) ;
9483: LD_STRING playSibBomb()
9485: PPUSH
9486: CALL_OW 559
// wait ( 0 0$14 ) ;
9490: LD_INT 490
9492: PPUSH
9493: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9497: LD_VAR 0 1
9501: PUSH
9502: LD_INT 1
9504: ARRAY
9505: PPUSH
9506: LD_VAR 0 1
9510: PUSH
9511: LD_INT 2
9513: ARRAY
9514: PPUSH
9515: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9519: LD_VAR 0 1
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: PPUSH
9528: LD_VAR 0 1
9532: PUSH
9533: LD_INT 2
9535: ARRAY
9536: PPUSH
9537: CALL_OW 429
// end ; end ;
9541: LD_VAR 0 1
9545: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9546: LD_EXP 3
9550: IFFALSE 9558
9552: PUSH
9553: LD_EXP 25
9557: AND
9558: IFFALSE 9570
9560: GO 9562
9562: DISABLE
// YouLost (  ) ;
9563: LD_STRING 
9565: PPUSH
9566: CALL_OW 104
9570: END
// every 0 0$1 trigger StreamModeActive and sFog do
9571: LD_EXP 3
9575: IFFALSE 9583
9577: PUSH
9578: LD_EXP 24
9582: AND
9583: IFFALSE 9597
9585: GO 9587
9587: DISABLE
// FogOff ( your_side ) ;
9588: LD_OWVAR 2
9592: PPUSH
9593: CALL_OW 344
9597: END
// every 0 0$1 trigger StreamModeActive and sSun do
9598: LD_EXP 3
9602: IFFALSE 9610
9604: PUSH
9605: LD_EXP 26
9609: AND
9610: IFFALSE 9638
9612: GO 9614
9614: DISABLE
// begin solar_recharge_percent := 0 ;
9615: LD_ADDR_OWVAR 79
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9623: LD_INT 10500
9625: PPUSH
9626: CALL_OW 67
// solar_recharge_percent := 100 ;
9630: LD_ADDR_OWVAR 79
9634: PUSH
9635: LD_INT 100
9637: ST_TO_ADDR
// end ;
9638: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9639: LD_EXP 3
9643: IFFALSE 9651
9645: PUSH
9646: LD_EXP 27
9650: AND
9651: IFFALSE 9890
9653: GO 9655
9655: DISABLE
9656: LD_INT 0
9658: PPUSH
9659: PPUSH
9660: PPUSH
// begin tmp := [ ] ;
9661: LD_ADDR_VAR 0 3
9665: PUSH
9666: EMPTY
9667: ST_TO_ADDR
// for i := 1 to 6 do
9668: LD_ADDR_VAR 0 1
9672: PUSH
9673: DOUBLE
9674: LD_INT 1
9676: DEC
9677: ST_TO_ADDR
9678: LD_INT 6
9680: PUSH
9681: FOR_TO
9682: IFFALSE 9787
// begin uc_nation := nation_nature ;
9684: LD_ADDR_OWVAR 21
9688: PUSH
9689: LD_INT 0
9691: ST_TO_ADDR
// uc_side := 0 ;
9692: LD_ADDR_OWVAR 20
9696: PUSH
9697: LD_INT 0
9699: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9700: LD_ADDR_OWVAR 29
9704: PUSH
9705: LD_INT 12
9707: PUSH
9708: LD_INT 12
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: ST_TO_ADDR
// hc_agressivity := 20 ;
9715: LD_ADDR_OWVAR 35
9719: PUSH
9720: LD_INT 20
9722: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9723: LD_ADDR_OWVAR 28
9727: PUSH
9728: LD_INT 17
9730: ST_TO_ADDR
// hc_gallery :=  ;
9731: LD_ADDR_OWVAR 33
9735: PUSH
9736: LD_STRING 
9738: ST_TO_ADDR
// hc_name :=  ;
9739: LD_ADDR_OWVAR 26
9743: PUSH
9744: LD_STRING 
9746: ST_TO_ADDR
// un := CreateHuman ;
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: CALL_OW 44
9756: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 51
// tmp := tmp ^ un ;
9769: LD_ADDR_VAR 0 3
9773: PUSH
9774: LD_VAR 0 3
9778: PUSH
9779: LD_VAR 0 2
9783: ADD
9784: ST_TO_ADDR
// end ;
9785: GO 9681
9787: POP
9788: POP
// repeat wait ( 0 0$1 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// for un in tmp do
9796: LD_ADDR_VAR 0 2
9800: PUSH
9801: LD_VAR 0 3
9805: PUSH
9806: FOR_IN
9807: IFFALSE 9881
// begin if IsDead ( un ) then
9809: LD_VAR 0 2
9813: PPUSH
9814: CALL_OW 301
9818: IFFALSE 9838
// begin tmp := tmp diff un ;
9820: LD_ADDR_VAR 0 3
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: LD_VAR 0 2
9834: DIFF
9835: ST_TO_ADDR
// continue ;
9836: GO 9806
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9838: LD_VAR 0 2
9842: PPUSH
9843: LD_INT 3
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 0
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PPUSH
9860: CALL_OW 69
9864: PPUSH
9865: LD_VAR 0 2
9869: PPUSH
9870: CALL_OW 74
9874: PPUSH
9875: CALL_OW 115
// end ;
9879: GO 9806
9881: POP
9882: POP
// until not tmp ;
9883: LD_VAR 0 3
9887: NOT
9888: IFFALSE 9789
// end ;
9890: PPOPN 3
9892: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9893: LD_EXP 3
9897: IFFALSE 9905
9899: PUSH
9900: LD_EXP 28
9904: AND
9905: IFFALSE 9959
9907: GO 9909
9909: DISABLE
// begin ToLua ( displayTroll(); ) ;
9910: LD_STRING displayTroll();
9912: PPUSH
9913: CALL_OW 559
// wait ( 3 3$00 ) ;
9917: LD_INT 6300
9919: PPUSH
9920: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9924: LD_STRING hideTroll();
9926: PPUSH
9927: CALL_OW 559
// wait ( 1 1$00 ) ;
9931: LD_INT 2100
9933: PPUSH
9934: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9938: LD_STRING displayTroll();
9940: PPUSH
9941: CALL_OW 559
// wait ( 1 1$00 ) ;
9945: LD_INT 2100
9947: PPUSH
9948: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9952: LD_STRING hideTroll();
9954: PPUSH
9955: CALL_OW 559
// end ;
9959: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9960: LD_EXP 3
9964: IFFALSE 9972
9966: PUSH
9967: LD_EXP 29
9971: AND
9972: IFFALSE 10035
9974: GO 9976
9976: DISABLE
9977: LD_INT 0
9979: PPUSH
// begin p := 0 ;
9980: LD_ADDR_VAR 0 1
9984: PUSH
9985: LD_INT 0
9987: ST_TO_ADDR
// repeat game_speed := 1 ;
9988: LD_ADDR_OWVAR 65
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9996: LD_INT 35
9998: PPUSH
9999: CALL_OW 67
// p := p + 1 ;
10003: LD_ADDR_VAR 0 1
10007: PUSH
10008: LD_VAR 0 1
10012: PUSH
10013: LD_INT 1
10015: PLUS
10016: ST_TO_ADDR
// until p >= 60 ;
10017: LD_VAR 0 1
10021: PUSH
10022: LD_INT 60
10024: GREATEREQUAL
10025: IFFALSE 9988
// game_speed := 4 ;
10027: LD_ADDR_OWVAR 65
10031: PUSH
10032: LD_INT 4
10034: ST_TO_ADDR
// end ;
10035: PPOPN 1
10037: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10038: LD_EXP 3
10042: IFFALSE 10050
10044: PUSH
10045: LD_EXP 30
10049: AND
10050: IFFALSE 10196
10052: GO 10054
10054: DISABLE
10055: LD_INT 0
10057: PPUSH
10058: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10059: LD_ADDR_VAR 0 1
10063: PUSH
10064: LD_INT 22
10066: PUSH
10067: LD_OWVAR 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 2
10078: PUSH
10079: LD_INT 30
10081: PUSH
10082: LD_INT 0
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: LD_INT 30
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 69
10112: ST_TO_ADDR
// if not depot then
10113: LD_VAR 0 1
10117: NOT
10118: IFFALSE 10122
// exit ;
10120: GO 10196
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10122: LD_ADDR_VAR 0 2
10126: PUSH
10127: LD_VAR 0 1
10131: PUSH
10132: LD_INT 1
10134: PPUSH
10135: LD_VAR 0 1
10139: PPUSH
10140: CALL_OW 12
10144: ARRAY
10145: PPUSH
10146: CALL_OW 274
10150: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10151: LD_VAR 0 2
10155: PPUSH
10156: LD_INT 1
10158: PPUSH
10159: LD_INT 0
10161: PPUSH
10162: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10166: LD_VAR 0 2
10170: PPUSH
10171: LD_INT 2
10173: PPUSH
10174: LD_INT 0
10176: PPUSH
10177: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10181: LD_VAR 0 2
10185: PPUSH
10186: LD_INT 3
10188: PPUSH
10189: LD_INT 0
10191: PPUSH
10192: CALL_OW 277
// end ;
10196: PPOPN 2
10198: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10199: LD_EXP 3
10203: IFFALSE 10211
10205: PUSH
10206: LD_EXP 31
10210: AND
10211: IFFALSE 10308
10213: GO 10215
10215: DISABLE
10216: LD_INT 0
10218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_INT 22
10226: PUSH
10227: LD_OWVAR 2
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 21
10238: PUSH
10239: LD_INT 1
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 3
10248: PUSH
10249: LD_INT 23
10251: PUSH
10252: LD_INT 0
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 69
10272: ST_TO_ADDR
// if not tmp then
10273: LD_VAR 0 1
10277: NOT
10278: IFFALSE 10282
// exit ;
10280: GO 10308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10282: LD_VAR 0 1
10286: PUSH
10287: LD_INT 1
10289: PPUSH
10290: LD_VAR 0 1
10294: PPUSH
10295: CALL_OW 12
10299: ARRAY
10300: PPUSH
10301: LD_INT 200
10303: PPUSH
10304: CALL_OW 234
// end ;
10308: PPOPN 1
10310: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10311: LD_EXP 3
10315: IFFALSE 10323
10317: PUSH
10318: LD_EXP 32
10322: AND
10323: IFFALSE 10402
10325: GO 10327
10327: DISABLE
10328: LD_INT 0
10330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10331: LD_ADDR_VAR 0 1
10335: PUSH
10336: LD_INT 22
10338: PUSH
10339: LD_OWVAR 2
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 21
10350: PUSH
10351: LD_INT 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ST_TO_ADDR
// if not tmp then
10367: LD_VAR 0 1
10371: NOT
10372: IFFALSE 10376
// exit ;
10374: GO 10402
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10376: LD_VAR 0 1
10380: PUSH
10381: LD_INT 1
10383: PPUSH
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 12
10393: ARRAY
10394: PPUSH
10395: LD_INT 60
10397: PPUSH
10398: CALL_OW 234
// end ;
10402: PPOPN 1
10404: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10405: LD_EXP 3
10409: IFFALSE 10417
10411: PUSH
10412: LD_EXP 33
10416: AND
10417: IFFALSE 10516
10419: GO 10421
10421: DISABLE
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
// begin enable ;
10426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10427: LD_ADDR_VAR 0 1
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_OWVAR 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 61
10446: PUSH
10447: EMPTY
10448: LIST
10449: PUSH
10450: LD_INT 33
10452: PUSH
10453: LD_INT 2
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: ST_TO_ADDR
// if not tmp then
10470: LD_VAR 0 1
10474: NOT
10475: IFFALSE 10479
// exit ;
10477: GO 10516
// for i in tmp do
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_VAR 0 1
10488: PUSH
10489: FOR_IN
10490: IFFALSE 10514
// if IsControledBy ( i ) then
10492: LD_VAR 0 2
10496: PPUSH
10497: CALL_OW 312
10501: IFFALSE 10512
// ComUnlink ( i ) ;
10503: LD_VAR 0 2
10507: PPUSH
10508: CALL_OW 136
10512: GO 10489
10514: POP
10515: POP
// end ;
10516: PPOPN 2
10518: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10519: LD_EXP 3
10523: IFFALSE 10531
10525: PUSH
10526: LD_EXP 34
10530: AND
10531: IFFALSE 10671
10533: GO 10535
10535: DISABLE
10536: LD_INT 0
10538: PPUSH
10539: PPUSH
// begin ToLua ( displayPowell(); ) ;
10540: LD_STRING displayPowell();
10542: PPUSH
10543: CALL_OW 559
// uc_side := 0 ;
10547: LD_ADDR_OWVAR 20
10551: PUSH
10552: LD_INT 0
10554: ST_TO_ADDR
// uc_nation := 2 ;
10555: LD_ADDR_OWVAR 21
10559: PUSH
10560: LD_INT 2
10562: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10563: LD_ADDR_OWVAR 37
10567: PUSH
10568: LD_INT 14
10570: ST_TO_ADDR
// vc_engine := engine_siberite ;
10571: LD_ADDR_OWVAR 39
10575: PUSH
10576: LD_INT 3
10578: ST_TO_ADDR
// vc_control := control_apeman ;
10579: LD_ADDR_OWVAR 38
10583: PUSH
10584: LD_INT 5
10586: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10587: LD_ADDR_OWVAR 40
10591: PUSH
10592: LD_INT 29
10594: ST_TO_ADDR
// un := CreateVehicle ;
10595: LD_ADDR_VAR 0 2
10599: PUSH
10600: CALL_OW 45
10604: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10605: LD_VAR 0 2
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10617: LD_INT 35
10619: PPUSH
10620: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10624: LD_VAR 0 2
10628: PPUSH
10629: LD_INT 22
10631: PUSH
10632: LD_OWVAR 2
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PPUSH
10641: CALL_OW 69
10645: PPUSH
10646: LD_VAR 0 2
10650: PPUSH
10651: CALL_OW 74
10655: PPUSH
10656: CALL_OW 115
// until IsDead ( un ) ;
10660: LD_VAR 0 2
10664: PPUSH
10665: CALL_OW 301
10669: IFFALSE 10617
// end ;
10671: PPOPN 2
10673: END
// every 0 0$1 trigger StreamModeActive and sStu do
10674: LD_EXP 3
10678: IFFALSE 10686
10680: PUSH
10681: LD_EXP 42
10685: AND
10686: IFFALSE 10702
10688: GO 10690
10690: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10691: LD_STRING displayStucuk();
10693: PPUSH
10694: CALL_OW 559
// ResetFog ;
10698: CALL_OW 335
// end ;
10702: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10703: LD_EXP 3
10707: IFFALSE 10715
10709: PUSH
10710: LD_EXP 35
10714: AND
10715: IFFALSE 10856
10717: GO 10719
10719: DISABLE
10720: LD_INT 0
10722: PPUSH
10723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10724: LD_ADDR_VAR 0 2
10728: PUSH
10729: LD_INT 22
10731: PUSH
10732: LD_OWVAR 2
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 21
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PPUSH
10755: CALL_OW 69
10759: ST_TO_ADDR
// if not tmp then
10760: LD_VAR 0 2
10764: NOT
10765: IFFALSE 10769
// exit ;
10767: GO 10856
// un := tmp [ rand ( 1 , tmp ) ] ;
10769: LD_ADDR_VAR 0 1
10773: PUSH
10774: LD_VAR 0 2
10778: PUSH
10779: LD_INT 1
10781: PPUSH
10782: LD_VAR 0 2
10786: PPUSH
10787: CALL_OW 12
10791: ARRAY
10792: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10793: LD_VAR 0 1
10797: PPUSH
10798: LD_INT 0
10800: PPUSH
10801: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10805: LD_VAR 0 1
10809: PPUSH
10810: LD_OWVAR 3
10814: PUSH
10815: LD_VAR 0 1
10819: DIFF
10820: PPUSH
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 74
10830: PPUSH
10831: CALL_OW 115
// wait ( 0 0$20 ) ;
10835: LD_INT 700
10837: PPUSH
10838: CALL_OW 67
// SetSide ( un , your_side ) ;
10842: LD_VAR 0 1
10846: PPUSH
10847: LD_OWVAR 2
10851: PPUSH
10852: CALL_OW 235
// end ;
10856: PPOPN 2
10858: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10859: LD_EXP 3
10863: IFFALSE 10871
10865: PUSH
10866: LD_EXP 36
10870: AND
10871: IFFALSE 10977
10873: GO 10875
10875: DISABLE
10876: LD_INT 0
10878: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10879: LD_ADDR_VAR 0 1
10883: PUSH
10884: LD_INT 22
10886: PUSH
10887: LD_OWVAR 2
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: LD_INT 30
10901: PUSH
10902: LD_INT 0
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 30
10911: PUSH
10912: LD_INT 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PPUSH
10928: CALL_OW 69
10932: ST_TO_ADDR
// if not depot then
10933: LD_VAR 0 1
10937: NOT
10938: IFFALSE 10942
// exit ;
10940: GO 10977
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10942: LD_VAR 0 1
10946: PUSH
10947: LD_INT 1
10949: ARRAY
10950: PPUSH
10951: CALL_OW 250
10955: PPUSH
10956: LD_VAR 0 1
10960: PUSH
10961: LD_INT 1
10963: ARRAY
10964: PPUSH
10965: CALL_OW 251
10969: PPUSH
10970: LD_INT 70
10972: PPUSH
10973: CALL_OW 495
// end ;
10977: PPOPN 1
10979: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10980: LD_EXP 3
10984: IFFALSE 10992
10986: PUSH
10987: LD_EXP 37
10991: AND
10992: IFFALSE 11203
10994: GO 10996
10996: DISABLE
10997: LD_INT 0
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11004: LD_ADDR_VAR 0 5
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_OWVAR 2
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 21
11023: PUSH
11024: LD_INT 1
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PPUSH
11035: CALL_OW 69
11039: ST_TO_ADDR
// if not tmp then
11040: LD_VAR 0 5
11044: NOT
11045: IFFALSE 11049
// exit ;
11047: GO 11203
// for i in tmp do
11049: LD_ADDR_VAR 0 1
11053: PUSH
11054: LD_VAR 0 5
11058: PUSH
11059: FOR_IN
11060: IFFALSE 11201
// begin d := rand ( 0 , 5 ) ;
11062: LD_ADDR_VAR 0 4
11066: PUSH
11067: LD_INT 0
11069: PPUSH
11070: LD_INT 5
11072: PPUSH
11073: CALL_OW 12
11077: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11078: LD_ADDR_VAR 0 2
11082: PUSH
11083: LD_VAR 0 1
11087: PPUSH
11088: CALL_OW 250
11092: PPUSH
11093: LD_VAR 0 4
11097: PPUSH
11098: LD_INT 3
11100: PPUSH
11101: LD_INT 12
11103: PPUSH
11104: CALL_OW 12
11108: PPUSH
11109: CALL_OW 272
11113: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11114: LD_ADDR_VAR 0 3
11118: PUSH
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 251
11128: PPUSH
11129: LD_VAR 0 4
11133: PPUSH
11134: LD_INT 3
11136: PPUSH
11137: LD_INT 12
11139: PPUSH
11140: CALL_OW 12
11144: PPUSH
11145: CALL_OW 273
11149: ST_TO_ADDR
// if ValidHex ( x , y ) then
11150: LD_VAR 0 2
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL_OW 488
11164: IFFALSE 11199
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11166: LD_VAR 0 1
11170: PPUSH
11171: LD_VAR 0 2
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 3
11183: PPUSH
11184: LD_INT 6
11186: PPUSH
11187: CALL_OW 12
11191: PPUSH
11192: LD_INT 1
11194: PPUSH
11195: CALL_OW 483
// end ;
11199: GO 11059
11201: POP
11202: POP
// end ;
11203: PPOPN 5
11205: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11206: LD_EXP 3
11210: IFFALSE 11218
11212: PUSH
11213: LD_EXP 38
11217: AND
11218: IFFALSE 11312
11220: GO 11222
11222: DISABLE
11223: LD_INT 0
11225: PPUSH
11226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11227: LD_ADDR_VAR 0 2
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_OWVAR 2
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 21
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 69
11273: ST_TO_ADDR
// if not tmp then
11274: LD_VAR 0 2
11278: NOT
11279: IFFALSE 11283
// exit ;
11281: GO 11312
// for i in tmp do
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_VAR 0 2
11292: PUSH
11293: FOR_IN
11294: IFFALSE 11310
// SetFuel ( i , 0 ) ;
11296: LD_VAR 0 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 240
11308: GO 11293
11310: POP
11311: POP
// end ;
11312: PPOPN 2
11314: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11315: LD_EXP 3
11319: IFFALSE 11327
11321: PUSH
11322: LD_EXP 39
11326: AND
11327: IFFALSE 11393
11329: GO 11331
11331: DISABLE
11332: LD_INT 0
11334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11335: LD_ADDR_VAR 0 1
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_OWVAR 2
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 30
11354: PUSH
11355: LD_INT 29
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: ST_TO_ADDR
// if not tmp then
11371: LD_VAR 0 1
11375: NOT
11376: IFFALSE 11380
// exit ;
11378: GO 11393
// DestroyUnit ( tmp [ 1 ] ) ;
11380: LD_VAR 0 1
11384: PUSH
11385: LD_INT 1
11387: ARRAY
11388: PPUSH
11389: CALL_OW 65
// end ;
11393: PPOPN 1
11395: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11396: LD_EXP 3
11400: IFFALSE 11408
11402: PUSH
11403: LD_EXP 41
11407: AND
11408: IFFALSE 11537
11410: GO 11412
11412: DISABLE
11413: LD_INT 0
11415: PPUSH
// begin uc_side := 0 ;
11416: LD_ADDR_OWVAR 20
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// uc_nation := nation_arabian ;
11424: LD_ADDR_OWVAR 21
11428: PUSH
11429: LD_INT 2
11431: ST_TO_ADDR
// hc_gallery :=  ;
11432: LD_ADDR_OWVAR 33
11436: PUSH
11437: LD_STRING 
11439: ST_TO_ADDR
// hc_name :=  ;
11440: LD_ADDR_OWVAR 26
11444: PUSH
11445: LD_STRING 
11447: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11448: LD_INT 1
11450: PPUSH
11451: LD_INT 11
11453: PPUSH
11454: LD_INT 10
11456: PPUSH
11457: CALL_OW 380
// un := CreateHuman ;
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: CALL_OW 44
11470: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11471: LD_VAR 0 1
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11483: LD_INT 35
11485: PPUSH
11486: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11490: LD_VAR 0 1
11494: PPUSH
11495: LD_INT 22
11497: PUSH
11498: LD_OWVAR 2
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PPUSH
11507: CALL_OW 69
11511: PPUSH
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 74
11521: PPUSH
11522: CALL_OW 115
// until IsDead ( un ) ;
11526: LD_VAR 0 1
11530: PPUSH
11531: CALL_OW 301
11535: IFFALSE 11483
// end ;
11537: PPOPN 1
11539: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11540: LD_EXP 3
11544: IFFALSE 11552
11546: PUSH
11547: LD_EXP 43
11551: AND
11552: IFFALSE 11564
11554: GO 11556
11556: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11557: LD_STRING earthquake(getX(game), 0, 32)
11559: PPUSH
11560: CALL_OW 559
11564: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11565: LD_EXP 3
11569: IFFALSE 11577
11571: PUSH
11572: LD_EXP 44
11576: AND
11577: IFFALSE 11668
11579: GO 11581
11581: DISABLE
11582: LD_INT 0
11584: PPUSH
// begin enable ;
11585: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11586: LD_ADDR_VAR 0 1
11590: PUSH
11591: LD_INT 22
11593: PUSH
11594: LD_OWVAR 2
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 33
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: PPUSH
11628: CALL_OW 69
11632: ST_TO_ADDR
// if not tmp then
11633: LD_VAR 0 1
11637: NOT
11638: IFFALSE 11642
// exit ;
11640: GO 11668
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11642: LD_VAR 0 1
11646: PUSH
11647: LD_INT 1
11649: PPUSH
11650: LD_VAR 0 1
11654: PPUSH
11655: CALL_OW 12
11659: ARRAY
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 234
// end ;
11668: PPOPN 1
11670: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11671: LD_EXP 3
11675: IFFALSE 11683
11677: PUSH
11678: LD_EXP 45
11682: AND
11683: IFFALSE 11824
11685: GO 11687
11687: DISABLE
11688: LD_INT 0
11690: PPUSH
11691: PPUSH
11692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11693: LD_ADDR_VAR 0 3
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_OWVAR 2
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 25
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: ST_TO_ADDR
// if not tmp then
11729: LD_VAR 0 3
11733: NOT
11734: IFFALSE 11738
// exit ;
11736: GO 11824
// un := tmp [ rand ( 1 , tmp ) ] ;
11738: LD_ADDR_VAR 0 2
11742: PUSH
11743: LD_VAR 0 3
11747: PUSH
11748: LD_INT 1
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: CALL_OW 12
11760: ARRAY
11761: ST_TO_ADDR
// if Crawls ( un ) then
11762: LD_VAR 0 2
11766: PPUSH
11767: CALL_OW 318
11771: IFFALSE 11782
// ComWalk ( un ) ;
11773: LD_VAR 0 2
11777: PPUSH
11778: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11782: LD_VAR 0 2
11786: PPUSH
11787: LD_INT 9
11789: PPUSH
11790: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11794: LD_INT 28
11796: PPUSH
11797: LD_OWVAR 2
11801: PPUSH
11802: LD_INT 2
11804: PPUSH
11805: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11809: LD_INT 29
11811: PPUSH
11812: LD_OWVAR 2
11816: PPUSH
11817: LD_INT 2
11819: PPUSH
11820: CALL_OW 322
// end ;
11824: PPOPN 3
11826: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11827: LD_EXP 3
11831: IFFALSE 11839
11833: PUSH
11834: LD_EXP 46
11838: AND
11839: IFFALSE 11950
11841: GO 11843
11843: DISABLE
11844: LD_INT 0
11846: PPUSH
11847: PPUSH
11848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_OWVAR 2
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 25
11868: PUSH
11869: LD_INT 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: ST_TO_ADDR
// if not tmp then
11885: LD_VAR 0 3
11889: NOT
11890: IFFALSE 11894
// exit ;
11892: GO 11950
// un := tmp [ rand ( 1 , tmp ) ] ;
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: LD_VAR 0 3
11903: PUSH
11904: LD_INT 1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL_OW 12
11916: ARRAY
11917: ST_TO_ADDR
// if Crawls ( un ) then
11918: LD_VAR 0 2
11922: PPUSH
11923: CALL_OW 318
11927: IFFALSE 11938
// ComWalk ( un ) ;
11929: LD_VAR 0 2
11933: PPUSH
11934: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11938: LD_VAR 0 2
11942: PPUSH
11943: LD_INT 8
11945: PPUSH
11946: CALL_OW 336
// end ;
11950: PPOPN 3
11952: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11953: LD_EXP 3
11957: IFFALSE 11965
11959: PUSH
11960: LD_EXP 47
11964: AND
11965: IFFALSE 12109
11967: GO 11969
11969: DISABLE
11970: LD_INT 0
11972: PPUSH
11973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 22
11981: PUSH
11982: LD_OWVAR 2
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 2
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 2
12003: PUSH
12004: LD_INT 34
12006: PUSH
12007: LD_INT 12
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 34
12016: PUSH
12017: LD_INT 51
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 34
12026: PUSH
12027: LD_INT 32
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 69
12049: ST_TO_ADDR
// if not tmp then
12050: LD_VAR 0 2
12054: NOT
12055: IFFALSE 12059
// exit ;
12057: GO 12109
// for i in tmp do
12059: LD_ADDR_VAR 0 1
12063: PUSH
12064: LD_VAR 0 2
12068: PUSH
12069: FOR_IN
12070: IFFALSE 12107
// if GetCargo ( i , mat_artifact ) = 0 then
12072: LD_VAR 0 1
12076: PPUSH
12077: LD_INT 4
12079: PPUSH
12080: CALL_OW 289
12084: PUSH
12085: LD_INT 0
12087: EQUAL
12088: IFFALSE 12105
// SetCargo ( i , mat_siberit , 100 ) ;
12090: LD_VAR 0 1
12094: PPUSH
12095: LD_INT 3
12097: PPUSH
12098: LD_INT 100
12100: PPUSH
12101: CALL_OW 290
12105: GO 12069
12107: POP
12108: POP
// end ;
12109: PPOPN 2
12111: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12112: LD_EXP 3
12116: IFFALSE 12124
12118: PUSH
12119: LD_EXP 48
12123: AND
12124: IFFALSE 12307
12126: GO 12128
12128: DISABLE
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_OWVAR 2
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: ST_TO_ADDR
// if not tmp then
12155: LD_VAR 0 2
12159: NOT
12160: IFFALSE 12164
// exit ;
12162: GO 12307
// for i := 1 to 2 do
12164: LD_ADDR_VAR 0 1
12168: PUSH
12169: DOUBLE
12170: LD_INT 1
12172: DEC
12173: ST_TO_ADDR
12174: LD_INT 2
12176: PUSH
12177: FOR_TO
12178: IFFALSE 12305
// begin uc_side := your_side ;
12180: LD_ADDR_OWVAR 20
12184: PUSH
12185: LD_OWVAR 2
12189: ST_TO_ADDR
// uc_nation := nation_american ;
12190: LD_ADDR_OWVAR 21
12194: PUSH
12195: LD_INT 1
12197: ST_TO_ADDR
// vc_chassis := us_morphling ;
12198: LD_ADDR_OWVAR 37
12202: PUSH
12203: LD_INT 5
12205: ST_TO_ADDR
// vc_engine := engine_siberite ;
12206: LD_ADDR_OWVAR 39
12210: PUSH
12211: LD_INT 3
12213: ST_TO_ADDR
// vc_control := control_computer ;
12214: LD_ADDR_OWVAR 38
12218: PUSH
12219: LD_INT 3
12221: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12222: LD_ADDR_OWVAR 40
12226: PUSH
12227: LD_INT 10
12229: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12230: LD_VAR 0 2
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: CALL_OW 310
12243: NOT
12244: IFFALSE 12291
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12246: CALL_OW 45
12250: PPUSH
12251: LD_VAR 0 2
12255: PUSH
12256: LD_INT 1
12258: ARRAY
12259: PPUSH
12260: CALL_OW 250
12264: PPUSH
12265: LD_VAR 0 2
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: CALL_OW 251
12278: PPUSH
12279: LD_INT 12
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 50
12289: GO 12303
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12291: CALL_OW 45
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 51
// end ;
12303: GO 12177
12305: POP
12306: POP
// end ;
12307: PPOPN 2
12309: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12310: LD_EXP 3
12314: IFFALSE 12322
12316: PUSH
12317: LD_EXP 49
12321: AND
12322: IFFALSE 12544
12324: GO 12326
12326: DISABLE
12327: LD_INT 0
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12335: LD_ADDR_VAR 0 6
12339: PUSH
12340: LD_INT 22
12342: PUSH
12343: LD_OWVAR 2
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 21
12354: PUSH
12355: LD_INT 1
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 3
12364: PUSH
12365: LD_INT 23
12367: PUSH
12368: LD_INT 0
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL_OW 69
12388: ST_TO_ADDR
// if not tmp then
12389: LD_VAR 0 6
12393: NOT
12394: IFFALSE 12398
// exit ;
12396: GO 12544
// s1 := rand ( 1 , 4 ) ;
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_INT 1
12405: PPUSH
12406: LD_INT 4
12408: PPUSH
12409: CALL_OW 12
12413: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12414: LD_ADDR_VAR 0 4
12418: PUSH
12419: LD_VAR 0 6
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 2
12432: PPUSH
12433: CALL_OW 259
12437: ST_TO_ADDR
// if s1 = 1 then
12438: LD_VAR 0 2
12442: PUSH
12443: LD_INT 1
12445: EQUAL
12446: IFFALSE 12466
// s2 := rand ( 2 , 4 ) else
12448: LD_ADDR_VAR 0 3
12452: PUSH
12453: LD_INT 2
12455: PPUSH
12456: LD_INT 4
12458: PPUSH
12459: CALL_OW 12
12463: ST_TO_ADDR
12464: GO 12474
// s2 := 1 ;
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: LD_INT 1
12473: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12474: LD_ADDR_VAR 0 5
12478: PUSH
12479: LD_VAR 0 6
12483: PUSH
12484: LD_INT 1
12486: ARRAY
12487: PPUSH
12488: LD_VAR 0 3
12492: PPUSH
12493: CALL_OW 259
12497: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12498: LD_VAR 0 6
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PPUSH
12507: LD_VAR 0 2
12511: PPUSH
12512: LD_VAR 0 5
12516: PPUSH
12517: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12521: LD_VAR 0 6
12525: PUSH
12526: LD_INT 1
12528: ARRAY
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_VAR 0 4
12539: PPUSH
12540: CALL_OW 237
// end ;
12544: PPOPN 6
12546: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12547: LD_EXP 3
12551: IFFALSE 12559
12553: PUSH
12554: LD_EXP 50
12558: AND
12559: IFFALSE 12638
12561: GO 12563
12563: DISABLE
12564: LD_INT 0
12566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12567: LD_ADDR_VAR 0 1
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_OWVAR 2
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 30
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PPUSH
12598: CALL_OW 69
12602: ST_TO_ADDR
// if not tmp then
12603: LD_VAR 0 1
12607: NOT
12608: IFFALSE 12612
// exit ;
12610: GO 12638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12612: LD_VAR 0 1
12616: PUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_VAR 0 1
12624: PPUSH
12625: CALL_OW 12
12629: ARRAY
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 234
// end ;
12638: PPOPN 1
12640: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12641: LD_EXP 3
12645: IFFALSE 12653
12647: PUSH
12648: LD_EXP 51
12652: AND
12653: IFFALSE 12765
12655: GO 12657
12657: DISABLE
12658: LD_INT 0
12660: PPUSH
12661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12662: LD_ADDR_VAR 0 2
12666: PUSH
12667: LD_INT 22
12669: PUSH
12670: LD_OWVAR 2
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: LD_INT 30
12684: PUSH
12685: LD_INT 27
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 30
12694: PUSH
12695: LD_INT 26
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 30
12704: PUSH
12705: LD_INT 28
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PPUSH
12722: CALL_OW 69
12726: ST_TO_ADDR
// if not tmp then
12727: LD_VAR 0 2
12731: NOT
12732: IFFALSE 12736
// exit ;
12734: GO 12765
// for i in tmp do
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_VAR 0 2
12745: PUSH
12746: FOR_IN
12747: IFFALSE 12763
// SetLives ( i , 1 ) ;
12749: LD_VAR 0 1
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 234
12761: GO 12746
12763: POP
12764: POP
// end ;
12765: PPOPN 2
12767: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12768: LD_EXP 3
12772: IFFALSE 12780
12774: PUSH
12775: LD_EXP 52
12779: AND
12780: IFFALSE 13067
12782: GO 12784
12784: DISABLE
12785: LD_INT 0
12787: PPUSH
12788: PPUSH
12789: PPUSH
// begin i := rand ( 1 , 7 ) ;
12790: LD_ADDR_VAR 0 1
12794: PUSH
12795: LD_INT 1
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL_OW 12
12805: ST_TO_ADDR
// case i of 1 :
12806: LD_VAR 0 1
12810: PUSH
12811: LD_INT 1
12813: DOUBLE
12814: EQUAL
12815: IFTRUE 12819
12817: GO 12829
12819: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12820: LD_STRING earthquake(getX(game), 0, 32)
12822: PPUSH
12823: CALL_OW 559
12827: GO 13067
12829: LD_INT 2
12831: DOUBLE
12832: EQUAL
12833: IFTRUE 12837
12835: GO 12851
12837: POP
// begin ToLua ( displayStucuk(); ) ;
12838: LD_STRING displayStucuk();
12840: PPUSH
12841: CALL_OW 559
// ResetFog ;
12845: CALL_OW 335
// end ; 3 :
12849: GO 13067
12851: LD_INT 3
12853: DOUBLE
12854: EQUAL
12855: IFTRUE 12859
12857: GO 12963
12859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: LD_INT 22
12867: PUSH
12868: LD_OWVAR 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 25
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 69
12895: ST_TO_ADDR
// if not tmp then
12896: LD_VAR 0 2
12900: NOT
12901: IFFALSE 12905
// exit ;
12903: GO 13067
// un := tmp [ rand ( 1 , tmp ) ] ;
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: LD_VAR 0 2
12914: PUSH
12915: LD_INT 1
12917: PPUSH
12918: LD_VAR 0 2
12922: PPUSH
12923: CALL_OW 12
12927: ARRAY
12928: ST_TO_ADDR
// if Crawls ( un ) then
12929: LD_VAR 0 3
12933: PPUSH
12934: CALL_OW 318
12938: IFFALSE 12949
// ComWalk ( un ) ;
12940: LD_VAR 0 3
12944: PPUSH
12945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 8
12956: PPUSH
12957: CALL_OW 336
// end ; 4 :
12961: GO 13067
12963: LD_INT 4
12965: DOUBLE
12966: EQUAL
12967: IFTRUE 12971
12969: GO 13045
12971: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12972: LD_ADDR_VAR 0 2
12976: PUSH
12977: LD_INT 22
12979: PUSH
12980: LD_OWVAR 2
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 30
12991: PUSH
12992: LD_INT 29
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: CALL_OW 69
13007: ST_TO_ADDR
// if not tmp then
13008: LD_VAR 0 2
13012: NOT
13013: IFFALSE 13017
// exit ;
13015: GO 13067
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13017: LD_VAR 0 2
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PPUSH
13026: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13030: LD_VAR 0 2
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PPUSH
13039: CALL_OW 65
// end ; 5 .. 7 :
13043: GO 13067
13045: LD_INT 5
13047: DOUBLE
13048: GREATEREQUAL
13049: IFFALSE 13057
13051: LD_INT 7
13053: DOUBLE
13054: LESSEQUAL
13055: IFTRUE 13059
13057: GO 13066
13059: POP
// StreamSibBomb ; end ;
13060: CALL 9248 0 0
13064: GO 13067
13066: POP
// end ;
13067: PPOPN 3
13069: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13070: LD_EXP 3
13074: IFFALSE 13082
13076: PUSH
13077: LD_EXP 53
13081: AND
13082: IFFALSE 13238
13084: GO 13086
13086: DISABLE
13087: LD_INT 0
13089: PPUSH
13090: PPUSH
13091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: LD_INT 81
13099: PUSH
13100: LD_OWVAR 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 2
13111: PUSH
13112: LD_INT 21
13114: PUSH
13115: LD_INT 1
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 21
13124: PUSH
13125: LD_INT 2
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PPUSH
13141: CALL_OW 69
13145: ST_TO_ADDR
// if not tmp then
13146: LD_VAR 0 2
13150: NOT
13151: IFFALSE 13155
// exit ;
13153: GO 13238
// p := 0 ;
13155: LD_ADDR_VAR 0 3
13159: PUSH
13160: LD_INT 0
13162: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// p := p + 1 ;
13170: LD_ADDR_VAR 0 3
13174: PUSH
13175: LD_VAR 0 3
13179: PUSH
13180: LD_INT 1
13182: PLUS
13183: ST_TO_ADDR
// for i in tmp do
13184: LD_ADDR_VAR 0 1
13188: PUSH
13189: LD_VAR 0 2
13193: PUSH
13194: FOR_IN
13195: IFFALSE 13226
// if GetLives ( i ) < 1000 then
13197: LD_VAR 0 1
13201: PPUSH
13202: CALL_OW 256
13206: PUSH
13207: LD_INT 1000
13209: LESS
13210: IFFALSE 13224
// SetLives ( i , 1000 ) ;
13212: LD_VAR 0 1
13216: PPUSH
13217: LD_INT 1000
13219: PPUSH
13220: CALL_OW 234
13224: GO 13194
13226: POP
13227: POP
// until p > 20 ;
13228: LD_VAR 0 3
13232: PUSH
13233: LD_INT 20
13235: GREATER
13236: IFFALSE 13163
// end ;
13238: PPOPN 3
13240: END
// every 0 0$1 trigger StreamModeActive and sTime do
13241: LD_EXP 3
13245: IFFALSE 13253
13247: PUSH
13248: LD_EXP 54
13252: AND
13253: IFFALSE 13288
13255: GO 13257
13257: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13258: LD_INT 28
13260: PPUSH
13261: LD_OWVAR 2
13265: PPUSH
13266: LD_INT 2
13268: PPUSH
13269: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13273: LD_INT 30
13275: PPUSH
13276: LD_OWVAR 2
13280: PPUSH
13281: LD_INT 2
13283: PPUSH
13284: CALL_OW 322
// end ;
13288: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13289: LD_EXP 3
13293: IFFALSE 13301
13295: PUSH
13296: LD_EXP 55
13300: AND
13301: IFFALSE 13422
13303: GO 13305
13305: DISABLE
13306: LD_INT 0
13308: PPUSH
13309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13310: LD_ADDR_VAR 0 2
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_OWVAR 2
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 21
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 3
13339: PUSH
13340: LD_INT 23
13342: PUSH
13343: LD_INT 0
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 69
13363: ST_TO_ADDR
// if not tmp then
13364: LD_VAR 0 2
13368: NOT
13369: IFFALSE 13373
// exit ;
13371: GO 13422
// for i in tmp do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_VAR 0 2
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13420
// begin if Crawls ( i ) then
13386: LD_VAR 0 1
13390: PPUSH
13391: CALL_OW 318
13395: IFFALSE 13406
// ComWalk ( i ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: CALL_OW 138
// SetClass ( i , 2 ) ;
13406: LD_VAR 0 1
13410: PPUSH
13411: LD_INT 2
13413: PPUSH
13414: CALL_OW 336
// end ;
13418: GO 13383
13420: POP
13421: POP
// end ;
13422: PPOPN 2
13424: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13425: LD_EXP 3
13429: IFFALSE 13437
13431: PUSH
13432: LD_EXP 56
13436: AND
13437: IFFALSE 13727
13439: GO 13441
13441: DISABLE
13442: LD_INT 0
13444: PPUSH
13445: PPUSH
13446: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13447: LD_OWVAR 2
13451: PPUSH
13452: LD_INT 9
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13465: LD_INT 9
13467: PPUSH
13468: LD_OWVAR 2
13472: PPUSH
13473: CALL_OW 343
// uc_side := 9 ;
13477: LD_ADDR_OWVAR 20
13481: PUSH
13482: LD_INT 9
13484: ST_TO_ADDR
// uc_nation := 2 ;
13485: LD_ADDR_OWVAR 21
13489: PUSH
13490: LD_INT 2
13492: ST_TO_ADDR
// hc_name := Dark Warrior ;
13493: LD_ADDR_OWVAR 26
13497: PUSH
13498: LD_STRING Dark Warrior
13500: ST_TO_ADDR
// hc_gallery :=  ;
13501: LD_ADDR_OWVAR 33
13505: PUSH
13506: LD_STRING 
13508: ST_TO_ADDR
// hc_noskilllimit := true ;
13509: LD_ADDR_OWVAR 76
13513: PUSH
13514: LD_INT 1
13516: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13517: LD_ADDR_OWVAR 31
13521: PUSH
13522: LD_INT 30
13524: PUSH
13525: LD_INT 30
13527: PUSH
13528: LD_INT 30
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: ST_TO_ADDR
// un := CreateHuman ;
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: CALL_OW 44
13549: ST_TO_ADDR
// hc_noskilllimit := false ;
13550: LD_ADDR_OWVAR 76
13554: PUSH
13555: LD_INT 0
13557: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 51
// ToLua ( playRanger() ) ;
13570: LD_STRING playRanger()
13572: PPUSH
13573: CALL_OW 559
// p := 0 ;
13577: LD_ADDR_VAR 0 2
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13585: LD_INT 35
13587: PPUSH
13588: CALL_OW 67
// p := p + 1 ;
13592: LD_ADDR_VAR 0 2
13596: PUSH
13597: LD_VAR 0 2
13601: PUSH
13602: LD_INT 1
13604: PLUS
13605: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13606: LD_VAR 0 3
13610: PPUSH
13611: CALL_OW 256
13615: PUSH
13616: LD_INT 1000
13618: LESS
13619: IFFALSE 13633
// SetLives ( un , 1000 ) ;
13621: LD_VAR 0 3
13625: PPUSH
13626: LD_INT 1000
13628: PPUSH
13629: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 81
13640: PUSH
13641: LD_OWVAR 2
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 91
13652: PUSH
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 30
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PPUSH
13670: CALL_OW 69
13674: PPUSH
13675: LD_VAR 0 3
13679: PPUSH
13680: CALL_OW 74
13684: PPUSH
13685: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13689: LD_VAR 0 2
13693: PUSH
13694: LD_INT 80
13696: GREATER
13697: IFTRUE 13710
13699: PUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: CALL_OW 301
13709: OR
13710: IFFALSE 13585
// if un then
13712: LD_VAR 0 3
13716: IFFALSE 13727
// RemoveUnit ( un ) ;
13718: LD_VAR 0 3
13722: PPUSH
13723: CALL_OW 64
// end ;
13727: PPOPN 3
13729: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13730: LD_EXP 57
13734: IFFALSE 13850
13736: GO 13738
13738: DISABLE
13739: LD_INT 0
13741: PPUSH
13742: PPUSH
13743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13744: LD_ADDR_VAR 0 2
13748: PUSH
13749: LD_INT 81
13751: PUSH
13752: LD_OWVAR 2
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 21
13763: PUSH
13764: LD_INT 1
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 69
13779: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13780: LD_STRING playComputer()
13782: PPUSH
13783: CALL_OW 559
// if not tmp then
13787: LD_VAR 0 2
13791: NOT
13792: IFFALSE 13796
// exit ;
13794: GO 13850
// for i in tmp do
13796: LD_ADDR_VAR 0 1
13800: PUSH
13801: LD_VAR 0 2
13805: PUSH
13806: FOR_IN
13807: IFFALSE 13848
// for j := 1 to 4 do
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: DOUBLE
13815: LD_INT 1
13817: DEC
13818: ST_TO_ADDR
13819: LD_INT 4
13821: PUSH
13822: FOR_TO
13823: IFFALSE 13844
// SetSkill ( i , j , 10 ) ;
13825: LD_VAR 0 1
13829: PPUSH
13830: LD_VAR 0 3
13834: PPUSH
13835: LD_INT 10
13837: PPUSH
13838: CALL_OW 237
13842: GO 13822
13844: POP
13845: POP
13846: GO 13806
13848: POP
13849: POP
// end ;
13850: PPOPN 3
13852: END
// every 0 0$1 trigger s30 do var i , tmp ;
13853: LD_EXP 58
13857: IFFALSE 13926
13859: GO 13861
13861: DISABLE
13862: LD_INT 0
13864: PPUSH
13865: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13866: LD_ADDR_VAR 0 2
13870: PUSH
13871: LD_INT 22
13873: PUSH
13874: LD_OWVAR 2
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: ST_TO_ADDR
// if not tmp then
13888: LD_VAR 0 2
13892: NOT
13893: IFFALSE 13897
// exit ;
13895: GO 13926
// for i in tmp do
13897: LD_ADDR_VAR 0 1
13901: PUSH
13902: LD_VAR 0 2
13906: PUSH
13907: FOR_IN
13908: IFFALSE 13924
// SetLives ( i , 300 ) ;
13910: LD_VAR 0 1
13914: PPUSH
13915: LD_INT 300
13917: PPUSH
13918: CALL_OW 234
13922: GO 13907
13924: POP
13925: POP
// end ;
13926: PPOPN 2
13928: END
// every 0 0$1 trigger s60 do var i , tmp ;
13929: LD_EXP 59
13933: IFFALSE 14002
13935: GO 13937
13937: DISABLE
13938: LD_INT 0
13940: PPUSH
13941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13942: LD_ADDR_VAR 0 2
13946: PUSH
13947: LD_INT 22
13949: PUSH
13950: LD_OWVAR 2
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 69
13963: ST_TO_ADDR
// if not tmp then
13964: LD_VAR 0 2
13968: NOT
13969: IFFALSE 13973
// exit ;
13971: GO 14002
// for i in tmp do
13973: LD_ADDR_VAR 0 1
13977: PUSH
13978: LD_VAR 0 2
13982: PUSH
13983: FOR_IN
13984: IFFALSE 14000
// SetLives ( i , 600 ) ;
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_INT 600
13993: PPUSH
13994: CALL_OW 234
13998: GO 13983
14000: POP
14001: POP
// end ;
14002: PPOPN 2
14004: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14005: LD_INT 0
14007: PPUSH
// case cmd of 301 :
14008: LD_VAR 0 1
14012: PUSH
14013: LD_INT 301
14015: DOUBLE
14016: EQUAL
14017: IFTRUE 14021
14019: GO 14053
14021: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14022: LD_VAR 0 6
14026: PPUSH
14027: LD_VAR 0 7
14031: PPUSH
14032: LD_VAR 0 8
14036: PPUSH
14037: LD_VAR 0 4
14041: PPUSH
14042: LD_VAR 0 5
14046: PPUSH
14047: CALL 15266 0 5
14051: GO 14174
14053: LD_INT 302
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14098
14061: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14062: LD_VAR 0 6
14066: PPUSH
14067: LD_VAR 0 7
14071: PPUSH
14072: LD_VAR 0 8
14076: PPUSH
14077: LD_VAR 0 9
14081: PPUSH
14082: LD_VAR 0 4
14086: PPUSH
14087: LD_VAR 0 5
14091: PPUSH
14092: CALL 15357 0 6
14096: GO 14174
14098: LD_INT 303
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14143
14106: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14107: LD_VAR 0 6
14111: PPUSH
14112: LD_VAR 0 7
14116: PPUSH
14117: LD_VAR 0 8
14121: PPUSH
14122: LD_VAR 0 9
14126: PPUSH
14127: LD_VAR 0 4
14131: PPUSH
14132: LD_VAR 0 5
14136: PPUSH
14137: CALL 14179 0 6
14141: GO 14174
14143: LD_INT 304
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14173
14151: POP
// hHackTeleport ( unit , x , y ) ; end ;
14152: LD_VAR 0 2
14156: PPUSH
14157: LD_VAR 0 4
14161: PPUSH
14162: LD_VAR 0 5
14166: PPUSH
14167: CALL 15950 0 3
14171: GO 14174
14173: POP
// end ;
14174: LD_VAR 0 12
14178: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14179: LD_INT 0
14181: PPUSH
14182: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14183: LD_VAR 0 1
14187: PUSH
14188: LD_INT 1
14190: LESS
14191: IFTRUE 14203
14193: PUSH
14194: LD_VAR 0 1
14198: PUSH
14199: LD_INT 3
14201: GREATER
14202: OR
14203: IFTRUE 14221
14205: PUSH
14206: LD_VAR 0 5
14210: PPUSH
14211: LD_VAR 0 6
14215: PPUSH
14216: CALL_OW 428
14220: OR
14221: IFFALSE 14225
// exit ;
14223: GO 14953
// uc_side := your_side ;
14225: LD_ADDR_OWVAR 20
14229: PUSH
14230: LD_OWVAR 2
14234: ST_TO_ADDR
// uc_nation := nation ;
14235: LD_ADDR_OWVAR 21
14239: PUSH
14240: LD_VAR 0 1
14244: ST_TO_ADDR
// bc_level = 1 ;
14245: LD_ADDR_OWVAR 43
14249: PUSH
14250: LD_INT 1
14252: ST_TO_ADDR
// case btype of 1 :
14253: LD_VAR 0 2
14257: PUSH
14258: LD_INT 1
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14277
14266: POP
// bc_type := b_depot ; 2 :
14267: LD_ADDR_OWVAR 42
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
14275: GO 14897
14277: LD_INT 2
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14296
14285: POP
// bc_type := b_warehouse ; 3 :
14286: LD_ADDR_OWVAR 42
14290: PUSH
14291: LD_INT 1
14293: ST_TO_ADDR
14294: GO 14897
14296: LD_INT 3
14298: DOUBLE
14299: EQUAL
14300: IFTRUE 14304
14302: GO 14315
14304: POP
// bc_type := b_lab ; 4 .. 9 :
14305: LD_ADDR_OWVAR 42
14309: PUSH
14310: LD_INT 6
14312: ST_TO_ADDR
14313: GO 14897
14315: LD_INT 4
14317: DOUBLE
14318: GREATEREQUAL
14319: IFFALSE 14327
14321: LD_INT 9
14323: DOUBLE
14324: LESSEQUAL
14325: IFTRUE 14329
14327: GO 14389
14329: POP
// begin bc_type := b_lab_half ;
14330: LD_ADDR_OWVAR 42
14334: PUSH
14335: LD_INT 7
14337: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14338: LD_ADDR_OWVAR 44
14342: PUSH
14343: LD_INT 10
14345: PUSH
14346: LD_INT 11
14348: PUSH
14349: LD_INT 12
14351: PUSH
14352: LD_INT 15
14354: PUSH
14355: LD_INT 14
14357: PUSH
14358: LD_INT 13
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: PUSH
14369: LD_VAR 0 2
14373: PUSH
14374: LD_INT 3
14376: MINUS
14377: ARRAY
14378: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14379: LD_ADDR_OWVAR 45
14383: PUSH
14384: LD_INT 9
14386: ST_TO_ADDR
// end ; 10 .. 13 :
14387: GO 14897
14389: LD_INT 10
14391: DOUBLE
14392: GREATEREQUAL
14393: IFFALSE 14401
14395: LD_INT 13
14397: DOUBLE
14398: LESSEQUAL
14399: IFTRUE 14403
14401: GO 14480
14403: POP
// begin bc_type := b_lab_full ;
14404: LD_ADDR_OWVAR 42
14408: PUSH
14409: LD_INT 8
14411: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14412: LD_ADDR_OWVAR 44
14416: PUSH
14417: LD_INT 10
14419: PUSH
14420: LD_INT 12
14422: PUSH
14423: LD_INT 14
14425: PUSH
14426: LD_INT 13
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_VAR 0 2
14439: PUSH
14440: LD_INT 9
14442: MINUS
14443: ARRAY
14444: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14445: LD_ADDR_OWVAR 45
14449: PUSH
14450: LD_INT 11
14452: PUSH
14453: LD_INT 15
14455: PUSH
14456: LD_INT 12
14458: PUSH
14459: LD_INT 15
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: LD_VAR 0 2
14472: PUSH
14473: LD_INT 9
14475: MINUS
14476: ARRAY
14477: ST_TO_ADDR
// end ; 14 :
14478: GO 14897
14480: LD_INT 14
14482: DOUBLE
14483: EQUAL
14484: IFTRUE 14488
14486: GO 14499
14488: POP
// bc_type := b_workshop ; 15 :
14489: LD_ADDR_OWVAR 42
14493: PUSH
14494: LD_INT 2
14496: ST_TO_ADDR
14497: GO 14897
14499: LD_INT 15
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14518
14507: POP
// bc_type := b_factory ; 16 :
14508: LD_ADDR_OWVAR 42
14512: PUSH
14513: LD_INT 3
14515: ST_TO_ADDR
14516: GO 14897
14518: LD_INT 16
14520: DOUBLE
14521: EQUAL
14522: IFTRUE 14526
14524: GO 14537
14526: POP
// bc_type := b_ext_gun ; 17 :
14527: LD_ADDR_OWVAR 42
14531: PUSH
14532: LD_INT 17
14534: ST_TO_ADDR
14535: GO 14897
14537: LD_INT 17
14539: DOUBLE
14540: EQUAL
14541: IFTRUE 14545
14543: GO 14573
14545: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14546: LD_ADDR_OWVAR 42
14550: PUSH
14551: LD_INT 19
14553: PUSH
14554: LD_INT 23
14556: PUSH
14557: LD_INT 19
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_VAR 0 1
14569: ARRAY
14570: ST_TO_ADDR
14571: GO 14897
14573: LD_INT 18
14575: DOUBLE
14576: EQUAL
14577: IFTRUE 14581
14579: GO 14592
14581: POP
// bc_type := b_ext_radar ; 19 :
14582: LD_ADDR_OWVAR 42
14586: PUSH
14587: LD_INT 20
14589: ST_TO_ADDR
14590: GO 14897
14592: LD_INT 19
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14611
14600: POP
// bc_type := b_ext_radio ; 20 :
14601: LD_ADDR_OWVAR 42
14605: PUSH
14606: LD_INT 22
14608: ST_TO_ADDR
14609: GO 14897
14611: LD_INT 20
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14630
14619: POP
// bc_type := b_ext_siberium ; 21 :
14620: LD_ADDR_OWVAR 42
14624: PUSH
14625: LD_INT 21
14627: ST_TO_ADDR
14628: GO 14897
14630: LD_INT 21
14632: DOUBLE
14633: EQUAL
14634: IFTRUE 14638
14636: GO 14649
14638: POP
// bc_type := b_ext_computer ; 22 :
14639: LD_ADDR_OWVAR 42
14643: PUSH
14644: LD_INT 24
14646: ST_TO_ADDR
14647: GO 14897
14649: LD_INT 22
14651: DOUBLE
14652: EQUAL
14653: IFTRUE 14657
14655: GO 14668
14657: POP
// bc_type := b_ext_track ; 23 :
14658: LD_ADDR_OWVAR 42
14662: PUSH
14663: LD_INT 16
14665: ST_TO_ADDR
14666: GO 14897
14668: LD_INT 23
14670: DOUBLE
14671: EQUAL
14672: IFTRUE 14676
14674: GO 14687
14676: POP
// bc_type := b_ext_laser ; 24 :
14677: LD_ADDR_OWVAR 42
14681: PUSH
14682: LD_INT 25
14684: ST_TO_ADDR
14685: GO 14897
14687: LD_INT 24
14689: DOUBLE
14690: EQUAL
14691: IFTRUE 14695
14693: GO 14706
14695: POP
// bc_type := b_control_tower ; 25 :
14696: LD_ADDR_OWVAR 42
14700: PUSH
14701: LD_INT 36
14703: ST_TO_ADDR
14704: GO 14897
14706: LD_INT 25
14708: DOUBLE
14709: EQUAL
14710: IFTRUE 14714
14712: GO 14725
14714: POP
// bc_type := b_breastwork ; 26 :
14715: LD_ADDR_OWVAR 42
14719: PUSH
14720: LD_INT 31
14722: ST_TO_ADDR
14723: GO 14897
14725: LD_INT 26
14727: DOUBLE
14728: EQUAL
14729: IFTRUE 14733
14731: GO 14744
14733: POP
// bc_type := b_bunker ; 27 :
14734: LD_ADDR_OWVAR 42
14738: PUSH
14739: LD_INT 32
14741: ST_TO_ADDR
14742: GO 14897
14744: LD_INT 27
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14763
14752: POP
// bc_type := b_turret ; 28 :
14753: LD_ADDR_OWVAR 42
14757: PUSH
14758: LD_INT 33
14760: ST_TO_ADDR
14761: GO 14897
14763: LD_INT 28
14765: DOUBLE
14766: EQUAL
14767: IFTRUE 14771
14769: GO 14782
14771: POP
// bc_type := b_armoury ; 29 :
14772: LD_ADDR_OWVAR 42
14776: PUSH
14777: LD_INT 4
14779: ST_TO_ADDR
14780: GO 14897
14782: LD_INT 29
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14801
14790: POP
// bc_type := b_barracks ; 30 :
14791: LD_ADDR_OWVAR 42
14795: PUSH
14796: LD_INT 5
14798: ST_TO_ADDR
14799: GO 14897
14801: LD_INT 30
14803: DOUBLE
14804: EQUAL
14805: IFTRUE 14809
14807: GO 14820
14809: POP
// bc_type := b_solar_power ; 31 :
14810: LD_ADDR_OWVAR 42
14814: PUSH
14815: LD_INT 27
14817: ST_TO_ADDR
14818: GO 14897
14820: LD_INT 31
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 14839
14828: POP
// bc_type := b_oil_power ; 32 :
14829: LD_ADDR_OWVAR 42
14833: PUSH
14834: LD_INT 26
14836: ST_TO_ADDR
14837: GO 14897
14839: LD_INT 32
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14847
14845: GO 14858
14847: POP
// bc_type := b_siberite_power ; 33 :
14848: LD_ADDR_OWVAR 42
14852: PUSH
14853: LD_INT 28
14855: ST_TO_ADDR
14856: GO 14897
14858: LD_INT 33
14860: DOUBLE
14861: EQUAL
14862: IFTRUE 14866
14864: GO 14877
14866: POP
// bc_type := b_oil_mine ; 34 :
14867: LD_ADDR_OWVAR 42
14871: PUSH
14872: LD_INT 29
14874: ST_TO_ADDR
14875: GO 14897
14877: LD_INT 34
14879: DOUBLE
14880: EQUAL
14881: IFTRUE 14885
14883: GO 14896
14885: POP
// bc_type := b_siberite_mine ; end ;
14886: LD_ADDR_OWVAR 42
14890: PUSH
14891: LD_INT 30
14893: ST_TO_ADDR
14894: GO 14897
14896: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14897: LD_ADDR_VAR 0 8
14901: PUSH
14902: LD_VAR 0 5
14906: PPUSH
14907: LD_VAR 0 6
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: CALL_OW 47
14921: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14922: LD_OWVAR 42
14926: PUSH
14927: LD_INT 32
14929: PUSH
14930: LD_INT 33
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: IN
14937: IFFALSE 14953
// PlaceWeaponTurret ( b , weapon ) ;
14939: LD_VAR 0 8
14943: PPUSH
14944: LD_VAR 0 4
14948: PPUSH
14949: CALL_OW 431
// end ;
14953: LD_VAR 0 7
14957: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14958: LD_INT 0
14960: PPUSH
14961: PPUSH
14962: PPUSH
14963: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14964: LD_ADDR_VAR 0 4
14968: PUSH
14969: LD_INT 22
14971: PUSH
14972: LD_OWVAR 2
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 2
14983: PUSH
14984: LD_INT 30
14986: PUSH
14987: LD_INT 0
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 30
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if not tmp then
15018: LD_VAR 0 4
15022: NOT
15023: IFFALSE 15027
// exit ;
15025: GO 15086
// for i in tmp do
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: LD_VAR 0 4
15036: PUSH
15037: FOR_IN
15038: IFFALSE 15084
// for j = 1 to 3 do
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: DOUBLE
15046: LD_INT 1
15048: DEC
15049: ST_TO_ADDR
15050: LD_INT 3
15052: PUSH
15053: FOR_TO
15054: IFFALSE 15080
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15056: LD_VAR 0 2
15060: PPUSH
15061: CALL_OW 274
15065: PPUSH
15066: LD_VAR 0 3
15070: PPUSH
15071: LD_INT 99999
15073: PPUSH
15074: CALL_OW 277
15078: GO 15053
15080: POP
15081: POP
15082: GO 15037
15084: POP
15085: POP
// end ;
15086: LD_VAR 0 1
15090: RET
// export function hHackSetLevel10 ; var i , j ; begin
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
15095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15096: LD_ADDR_VAR 0 2
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: PUSH
15116: FOR_IN
15117: IFFALSE 15169
// if IsSelected ( i ) then
15119: LD_VAR 0 2
15123: PPUSH
15124: CALL_OW 306
15128: IFFALSE 15167
// begin for j := 1 to 4 do
15130: LD_ADDR_VAR 0 3
15134: PUSH
15135: DOUBLE
15136: LD_INT 1
15138: DEC
15139: ST_TO_ADDR
15140: LD_INT 4
15142: PUSH
15143: FOR_TO
15144: IFFALSE 15165
// SetSkill ( i , j , 10 ) ;
15146: LD_VAR 0 2
15150: PPUSH
15151: LD_VAR 0 3
15155: PPUSH
15156: LD_INT 10
15158: PPUSH
15159: CALL_OW 237
15163: GO 15143
15165: POP
15166: POP
// end ;
15167: GO 15116
15169: POP
15170: POP
// end ;
15171: LD_VAR 0 1
15175: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
15180: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15181: LD_ADDR_VAR 0 2
15185: PUSH
15186: LD_INT 22
15188: PUSH
15189: LD_OWVAR 2
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 21
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PPUSH
15212: CALL_OW 69
15216: PUSH
15217: FOR_IN
15218: IFFALSE 15259
// begin for j := 1 to 4 do
15220: LD_ADDR_VAR 0 3
15224: PUSH
15225: DOUBLE
15226: LD_INT 1
15228: DEC
15229: ST_TO_ADDR
15230: LD_INT 4
15232: PUSH
15233: FOR_TO
15234: IFFALSE 15255
// SetSkill ( i , j , 10 ) ;
15236: LD_VAR 0 2
15240: PPUSH
15241: LD_VAR 0 3
15245: PPUSH
15246: LD_INT 10
15248: PPUSH
15249: CALL_OW 237
15253: GO 15233
15255: POP
15256: POP
// end ;
15257: GO 15217
15259: POP
15260: POP
// end ;
15261: LD_VAR 0 1
15265: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15266: LD_INT 0
15268: PPUSH
// uc_side := your_side ;
15269: LD_ADDR_OWVAR 20
15273: PUSH
15274: LD_OWVAR 2
15278: ST_TO_ADDR
// uc_nation := nation ;
15279: LD_ADDR_OWVAR 21
15283: PUSH
15284: LD_VAR 0 1
15288: ST_TO_ADDR
// InitHc ;
15289: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15293: LD_INT 0
15295: PPUSH
15296: LD_VAR 0 2
15300: PPUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15310: LD_VAR 0 4
15314: PPUSH
15315: LD_VAR 0 5
15319: PPUSH
15320: CALL_OW 428
15324: PUSH
15325: LD_INT 0
15327: EQUAL
15328: IFFALSE 15352
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15330: CALL_OW 44
15334: PPUSH
15335: LD_VAR 0 4
15339: PPUSH
15340: LD_VAR 0 5
15344: PPUSH
15345: LD_INT 1
15347: PPUSH
15348: CALL_OW 48
// end ;
15352: LD_VAR 0 6
15356: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15357: LD_INT 0
15359: PPUSH
15360: PPUSH
// uc_side := your_side ;
15361: LD_ADDR_OWVAR 20
15365: PUSH
15366: LD_OWVAR 2
15370: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 1
15378: PUSH
15379: LD_INT 2
15381: PUSH
15382: LD_INT 3
15384: PUSH
15385: LD_INT 4
15387: PUSH
15388: LD_INT 5
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: IN
15398: IFFALSE 15410
// uc_nation := nation_american else
15400: LD_ADDR_OWVAR 21
15404: PUSH
15405: LD_INT 1
15407: ST_TO_ADDR
15408: GO 15453
// if chassis in [ 11 , 12 , 13 , 14 ] then
15410: LD_VAR 0 1
15414: PUSH
15415: LD_INT 11
15417: PUSH
15418: LD_INT 12
15420: PUSH
15421: LD_INT 13
15423: PUSH
15424: LD_INT 14
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: IN
15433: IFFALSE 15445
// uc_nation := nation_arabian else
15435: LD_ADDR_OWVAR 21
15439: PUSH
15440: LD_INT 2
15442: ST_TO_ADDR
15443: GO 15453
// uc_nation := nation_russian ;
15445: LD_ADDR_OWVAR 21
15449: PUSH
15450: LD_INT 3
15452: ST_TO_ADDR
// vc_chassis := chassis ;
15453: LD_ADDR_OWVAR 37
15457: PUSH
15458: LD_VAR 0 1
15462: ST_TO_ADDR
// vc_engine := engine ;
15463: LD_ADDR_OWVAR 39
15467: PUSH
15468: LD_VAR 0 2
15472: ST_TO_ADDR
// vc_control := control ;
15473: LD_ADDR_OWVAR 38
15477: PUSH
15478: LD_VAR 0 3
15482: ST_TO_ADDR
// vc_weapon := weapon ;
15483: LD_ADDR_OWVAR 40
15487: PUSH
15488: LD_VAR 0 4
15492: ST_TO_ADDR
// un := CreateVehicle ;
15493: LD_ADDR_VAR 0 8
15497: PUSH
15498: CALL_OW 45
15502: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15503: LD_VAR 0 8
15507: PPUSH
15508: LD_INT 0
15510: PPUSH
15511: LD_INT 5
15513: PPUSH
15514: CALL_OW 12
15518: PPUSH
15519: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15523: LD_VAR 0 8
15527: PPUSH
15528: LD_VAR 0 5
15532: PPUSH
15533: LD_VAR 0 6
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 48
// end ;
15545: LD_VAR 0 7
15549: RET
// export hInvincible ; every 1 do
15550: GO 15552
15552: DISABLE
// hInvincible := [ ] ;
15553: LD_ADDR_EXP 60
15557: PUSH
15558: EMPTY
15559: ST_TO_ADDR
15560: END
// every 10 do var i ;
15561: GO 15563
15563: DISABLE
15564: LD_INT 0
15566: PPUSH
// begin enable ;
15567: ENABLE
// if not hInvincible then
15568: LD_EXP 60
15572: NOT
15573: IFFALSE 15577
// exit ;
15575: GO 15621
// for i in hInvincible do
15577: LD_ADDR_VAR 0 1
15581: PUSH
15582: LD_EXP 60
15586: PUSH
15587: FOR_IN
15588: IFFALSE 15619
// if GetLives ( i ) < 1000 then
15590: LD_VAR 0 1
15594: PPUSH
15595: CALL_OW 256
15599: PUSH
15600: LD_INT 1000
15602: LESS
15603: IFFALSE 15617
// SetLives ( i , 1000 ) ;
15605: LD_VAR 0 1
15609: PPUSH
15610: LD_INT 1000
15612: PPUSH
15613: CALL_OW 234
15617: GO 15587
15619: POP
15620: POP
// end ;
15621: PPOPN 1
15623: END
// export function hHackInvincible ; var i ; begin
15624: LD_INT 0
15626: PPUSH
15627: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15628: LD_ADDR_VAR 0 2
15632: PUSH
15633: LD_INT 2
15635: PUSH
15636: LD_INT 21
15638: PUSH
15639: LD_INT 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 21
15648: PUSH
15649: LD_INT 2
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 69
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15728
// if IsSelected ( i ) then
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 306
15678: IFFALSE 15726
// begin if i in hInvincible then
15680: LD_VAR 0 2
15684: PUSH
15685: LD_EXP 60
15689: IN
15690: IFFALSE 15710
// hInvincible := hInvincible diff i else
15692: LD_ADDR_EXP 60
15696: PUSH
15697: LD_EXP 60
15701: PUSH
15702: LD_VAR 0 2
15706: DIFF
15707: ST_TO_ADDR
15708: GO 15726
// hInvincible := hInvincible union i ;
15710: LD_ADDR_EXP 60
15714: PUSH
15715: LD_EXP 60
15719: PUSH
15720: LD_VAR 0 2
15724: UNION
15725: ST_TO_ADDR
// end ;
15726: GO 15666
15728: POP
15729: POP
// end ;
15730: LD_VAR 0 1
15734: RET
// export function hHackInvisible ; var i , j ; begin
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_INT 21
15747: PUSH
15748: LD_INT 1
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PPUSH
15755: CALL_OW 69
15759: PUSH
15760: FOR_IN
15761: IFFALSE 15785
// if IsSelected ( i ) then
15763: LD_VAR 0 2
15767: PPUSH
15768: CALL_OW 306
15772: IFFALSE 15783
// ComForceInvisible ( i ) ;
15774: LD_VAR 0 2
15778: PPUSH
15779: CALL_OW 496
15783: GO 15760
15785: POP
15786: POP
// end ;
15787: LD_VAR 0 1
15791: RET
// export function hHackChangeYourSide ; begin
15792: LD_INT 0
15794: PPUSH
// if your_side = 8 then
15795: LD_OWVAR 2
15799: PUSH
15800: LD_INT 8
15802: EQUAL
15803: IFFALSE 15815
// your_side := 0 else
15805: LD_ADDR_OWVAR 2
15809: PUSH
15810: LD_INT 0
15812: ST_TO_ADDR
15813: GO 15829
// your_side := your_side + 1 ;
15815: LD_ADDR_OWVAR 2
15819: PUSH
15820: LD_OWVAR 2
15824: PUSH
15825: LD_INT 1
15827: PLUS
15828: ST_TO_ADDR
// end ;
15829: LD_VAR 0 1
15833: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
15838: PPUSH
// for i in all_units do
15839: LD_ADDR_VAR 0 2
15843: PUSH
15844: LD_OWVAR 3
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15928
// if IsSelected ( i ) then
15852: LD_VAR 0 2
15856: PPUSH
15857: CALL_OW 306
15861: IFFALSE 15926
// begin j := GetSide ( i ) ;
15863: LD_ADDR_VAR 0 3
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: CALL_OW 255
15877: ST_TO_ADDR
// if j = 8 then
15878: LD_VAR 0 3
15882: PUSH
15883: LD_INT 8
15885: EQUAL
15886: IFFALSE 15898
// j := 0 else
15888: LD_ADDR_VAR 0 3
15892: PUSH
15893: LD_INT 0
15895: ST_TO_ADDR
15896: GO 15912
// j := j + 1 ;
15898: LD_ADDR_VAR 0 3
15902: PUSH
15903: LD_VAR 0 3
15907: PUSH
15908: LD_INT 1
15910: PLUS
15911: ST_TO_ADDR
// SetSide ( i , j ) ;
15912: LD_VAR 0 2
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: CALL_OW 235
// end ;
15926: GO 15849
15928: POP
15929: POP
// end ;
15930: LD_VAR 0 1
15934: RET
// export function hHackFog ; begin
15935: LD_INT 0
15937: PPUSH
// FogOff ( true ) ;
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 344
// end ;
15945: LD_VAR 0 1
15949: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15950: LD_INT 0
15952: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15953: LD_VAR 0 1
15957: PPUSH
15958: LD_VAR 0 2
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: LD_INT 1
15973: PPUSH
15974: CALL_OW 483
// CenterOnXY ( x , y ) ;
15978: LD_VAR 0 2
15982: PPUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: CALL_OW 84
// end ;
15992: LD_VAR 0 4
15996: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16001: LD_VAR 0 1
16005: NOT
16006: IFTRUE 16025
16008: PUSH
16009: LD_VAR 0 2
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: CALL_OW 488
16023: NOT
16024: OR
16025: IFTRUE 16060
16027: PUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 266
16037: PUSH
16038: LD_INT 3
16040: NONEQUAL
16041: IFFALSE 16059
16043: PUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 247
16053: PUSH
16054: LD_INT 1
16056: EQUAL
16057: NOT
16058: AND
16059: OR
16060: IFFALSE 16064
// exit ;
16062: GO 16346
// if GetType ( factory ) = unit_human then
16064: LD_VAR 0 1
16068: PPUSH
16069: CALL_OW 247
16073: PUSH
16074: LD_INT 1
16076: EQUAL
16077: IFFALSE 16094
// factory := IsInUnit ( factory ) ;
16079: LD_ADDR_VAR 0 1
16083: PUSH
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 310
16093: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 266
16103: PUSH
16104: LD_INT 3
16106: NONEQUAL
16107: IFFALSE 16111
// exit ;
16109: GO 16346
// for i := 1 to Count ( factoryWaypoints ) do
16111: LD_ADDR_VAR 0 5
16115: PUSH
16116: DOUBLE
16117: LD_INT 1
16119: DEC
16120: ST_TO_ADDR
16121: LD_EXP 61
16125: PPUSH
16126: CALL 26135 0 1
16130: PUSH
16131: FOR_TO
16132: IFFALSE 16294
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16134: LD_VAR 0 2
16138: PPUSH
16139: LD_VAR 0 3
16143: PPUSH
16144: CALL_OW 428
16148: PUSH
16149: LD_EXP 61
16153: PUSH
16154: LD_VAR 0 5
16158: ARRAY
16159: PUSH
16160: LD_INT 2
16162: ARRAY
16163: EQUAL
16164: IFFALSE 16196
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16166: LD_ADDR_EXP 61
16170: PUSH
16171: LD_EXP 61
16175: PPUSH
16176: LD_VAR 0 5
16180: PPUSH
16181: CALL_OW 3
16185: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16186: CALL 16351 0 0
// exit ;
16190: POP
16191: POP
16192: GO 16346
// end else
16194: GO 16292
// if factory = factoryWaypoints [ i ] [ 2 ] then
16196: LD_VAR 0 1
16200: PUSH
16201: LD_EXP 61
16205: PUSH
16206: LD_VAR 0 5
16210: ARRAY
16211: PUSH
16212: LD_INT 2
16214: ARRAY
16215: EQUAL
16216: IFFALSE 16292
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16218: LD_ADDR_EXP 61
16222: PUSH
16223: LD_EXP 61
16227: PPUSH
16228: LD_VAR 0 5
16232: PPUSH
16233: CALL_OW 3
16237: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16238: LD_ADDR_EXP 61
16242: PUSH
16243: LD_EXP 61
16247: PPUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 255
16257: PUSH
16258: LD_VAR 0 1
16262: PUSH
16263: LD_VAR 0 2
16267: PUSH
16268: LD_VAR 0 3
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: PPUSH
16279: CALL 62067 0 2
16283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16284: CALL 16351 0 0
// exit ;
16288: POP
16289: POP
16290: GO 16346
// end ; end ;
16292: GO 16131
16294: POP
16295: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16296: LD_ADDR_EXP 61
16300: PUSH
16301: LD_EXP 61
16305: PPUSH
16306: LD_VAR 0 1
16310: PPUSH
16311: CALL_OW 255
16315: PUSH
16316: LD_VAR 0 1
16320: PUSH
16321: LD_VAR 0 2
16325: PUSH
16326: LD_VAR 0 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL 62067 0 2
16341: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16342: CALL 16351 0 0
// end ;
16346: LD_VAR 0 4
16350: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16351: LD_INT 0
16353: PPUSH
16354: PPUSH
16355: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16356: LD_STRING resetFactoryWaypoint();
16358: PPUSH
16359: CALL_OW 559
// if factoryWaypoints then
16363: LD_EXP 61
16367: IFFALSE 16488
// begin list := factoryWaypoints ;
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: LD_EXP 61
16378: ST_TO_ADDR
// for i := 1 to list do
16379: LD_ADDR_VAR 0 2
16383: PUSH
16384: DOUBLE
16385: LD_INT 1
16387: DEC
16388: ST_TO_ADDR
16389: LD_VAR 0 3
16393: PUSH
16394: FOR_TO
16395: IFFALSE 16486
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16397: LD_STRING setFactoryWaypointXY(
16399: PUSH
16400: LD_VAR 0 3
16404: PUSH
16405: LD_VAR 0 2
16409: ARRAY
16410: PUSH
16411: LD_INT 1
16413: ARRAY
16414: STR
16415: PUSH
16416: LD_STRING ,
16418: STR
16419: PUSH
16420: LD_VAR 0 3
16424: PUSH
16425: LD_VAR 0 2
16429: ARRAY
16430: PUSH
16431: LD_INT 2
16433: ARRAY
16434: STR
16435: PUSH
16436: LD_STRING ,
16438: STR
16439: PUSH
16440: LD_VAR 0 3
16444: PUSH
16445: LD_VAR 0 2
16449: ARRAY
16450: PUSH
16451: LD_INT 3
16453: ARRAY
16454: STR
16455: PUSH
16456: LD_STRING ,
16458: STR
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_VAR 0 2
16469: ARRAY
16470: PUSH
16471: LD_INT 4
16473: ARRAY
16474: STR
16475: PUSH
16476: LD_STRING )
16478: STR
16479: PPUSH
16480: CALL_OW 559
16484: GO 16394
16486: POP
16487: POP
// end ; end ;
16488: LD_VAR 0 1
16492: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16493: LD_INT 0
16495: PPUSH
// if HexInfo ( x , y ) = warehouse then
16496: LD_VAR 0 2
16500: PPUSH
16501: LD_VAR 0 3
16505: PPUSH
16506: CALL_OW 428
16510: PUSH
16511: LD_VAR 0 1
16515: EQUAL
16516: IFFALSE 16543
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16518: LD_ADDR_EXP 63
16522: PUSH
16523: LD_EXP 63
16527: PPUSH
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_INT 0
16535: PPUSH
16536: CALL_OW 1
16540: ST_TO_ADDR
16541: GO 16594
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16543: LD_ADDR_EXP 63
16547: PUSH
16548: LD_EXP 63
16552: PPUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 255
16567: PUSH
16568: LD_VAR 0 1
16572: PUSH
16573: LD_VAR 0 2
16577: PUSH
16578: LD_VAR 0 3
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 1
16593: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16594: CALL 16603 0 0
// end ;
16598: LD_VAR 0 4
16602: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16603: LD_INT 0
16605: PPUSH
16606: PPUSH
16607: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16608: LD_STRING resetWarehouseGatheringPoints();
16610: PPUSH
16611: CALL_OW 559
// if warehouseGatheringPoints then
16615: LD_EXP 63
16619: IFFALSE 16745
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16621: LD_ADDR_VAR 0 3
16625: PUSH
16626: LD_EXP 63
16630: PPUSH
16631: CALL 66001 0 1
16635: ST_TO_ADDR
// for i := 1 to list do
16636: LD_ADDR_VAR 0 2
16640: PUSH
16641: DOUBLE
16642: LD_INT 1
16644: DEC
16645: ST_TO_ADDR
16646: LD_VAR 0 3
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16743
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16654: LD_STRING setWarehouseGatheringPointXY(
16656: PUSH
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 2
16666: ARRAY
16667: PUSH
16668: LD_INT 1
16670: ARRAY
16671: STR
16672: PUSH
16673: LD_STRING ,
16675: STR
16676: PUSH
16677: LD_VAR 0 3
16681: PUSH
16682: LD_VAR 0 2
16686: ARRAY
16687: PUSH
16688: LD_INT 2
16690: ARRAY
16691: STR
16692: PUSH
16693: LD_STRING ,
16695: STR
16696: PUSH
16697: LD_VAR 0 3
16701: PUSH
16702: LD_VAR 0 2
16706: ARRAY
16707: PUSH
16708: LD_INT 3
16710: ARRAY
16711: STR
16712: PUSH
16713: LD_STRING ,
16715: STR
16716: PUSH
16717: LD_VAR 0 3
16721: PUSH
16722: LD_VAR 0 2
16726: ARRAY
16727: PUSH
16728: LD_INT 4
16730: ARRAY
16731: STR
16732: PUSH
16733: LD_STRING )
16735: STR
16736: PPUSH
16737: CALL_OW 559
16741: GO 16651
16743: POP
16744: POP
// end ; end ;
16745: LD_VAR 0 1
16749: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16750: LD_EXP 63
16754: IFFALSE 17449
16756: GO 16758
16758: DISABLE
16759: LD_INT 0
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
16767: PPUSH
16768: PPUSH
16769: PPUSH
// begin enable ;
16770: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16771: LD_ADDR_VAR 0 3
16775: PUSH
16776: LD_EXP 63
16780: PPUSH
16781: CALL 66001 0 1
16785: ST_TO_ADDR
// if not list then
16786: LD_VAR 0 3
16790: NOT
16791: IFFALSE 16795
// exit ;
16793: GO 17449
// for i := 1 to list do
16795: LD_ADDR_VAR 0 1
16799: PUSH
16800: DOUBLE
16801: LD_INT 1
16803: DEC
16804: ST_TO_ADDR
16805: LD_VAR 0 3
16809: PUSH
16810: FOR_TO
16811: IFFALSE 17447
// begin depot := list [ i ] [ 2 ] ;
16813: LD_ADDR_VAR 0 8
16817: PUSH
16818: LD_VAR 0 3
16822: PUSH
16823: LD_VAR 0 1
16827: ARRAY
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16833: LD_ADDR_VAR 0 5
16837: PUSH
16838: LD_VAR 0 3
16842: PUSH
16843: LD_VAR 0 1
16847: ARRAY
16848: PUSH
16849: LD_INT 1
16851: ARRAY
16852: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16853: LD_VAR 0 8
16857: PPUSH
16858: CALL_OW 301
16862: IFTRUE 16881
16864: PUSH
16865: LD_VAR 0 5
16869: PUSH
16870: LD_VAR 0 8
16874: PPUSH
16875: CALL_OW 255
16879: NONEQUAL
16880: OR
16881: IFFALSE 16910
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16883: LD_ADDR_EXP 63
16887: PUSH
16888: LD_EXP 63
16892: PPUSH
16893: LD_VAR 0 8
16897: PPUSH
16898: LD_INT 0
16900: PPUSH
16901: CALL_OW 1
16905: ST_TO_ADDR
// exit ;
16906: POP
16907: POP
16908: GO 17449
// end ; x := list [ i ] [ 3 ] ;
16910: LD_ADDR_VAR 0 6
16914: PUSH
16915: LD_VAR 0 3
16919: PUSH
16920: LD_VAR 0 1
16924: ARRAY
16925: PUSH
16926: LD_INT 3
16928: ARRAY
16929: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16930: LD_ADDR_VAR 0 7
16934: PUSH
16935: LD_VAR 0 3
16939: PUSH
16940: LD_VAR 0 1
16944: ARRAY
16945: PUSH
16946: LD_INT 4
16948: ARRAY
16949: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16950: LD_ADDR_VAR 0 9
16954: PUSH
16955: LD_VAR 0 6
16959: PPUSH
16960: LD_VAR 0 7
16964: PPUSH
16965: LD_INT 16
16967: PPUSH
16968: CALL 64575 0 3
16972: ST_TO_ADDR
// if not cratesNearbyPoint then
16973: LD_VAR 0 9
16977: NOT
16978: IFFALSE 16984
// exit ;
16980: POP
16981: POP
16982: GO 17449
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16984: LD_ADDR_VAR 0 4
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_VAR 0 5
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 3
17003: PUSH
17004: LD_INT 60
17006: PUSH
17007: EMPTY
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 91
17016: PUSH
17017: LD_VAR 0 8
17021: PUSH
17022: LD_INT 6
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: LD_INT 25
17035: PUSH
17036: LD_INT 2
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 25
17045: PUSH
17046: LD_INT 16
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: PPUSH
17064: CALL_OW 69
17068: PUSH
17069: LD_VAR 0 8
17073: PPUSH
17074: CALL_OW 313
17078: PPUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 60
17084: PUSH
17085: EMPTY
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 2
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 25
17107: PUSH
17108: LD_INT 16
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 72
17128: UNION
17129: ST_TO_ADDR
// if tmp then
17130: LD_VAR 0 4
17134: IFFALSE 17214
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17136: LD_ADDR_VAR 0 4
17140: PUSH
17141: LD_VAR 0 4
17145: PPUSH
17146: LD_INT 3
17148: PPUSH
17149: CALL 62382 0 2
17153: ST_TO_ADDR
// for j in tmp do
17154: LD_ADDR_VAR 0 2
17158: PUSH
17159: LD_VAR 0 4
17163: PUSH
17164: FOR_IN
17165: IFFALSE 17208
// begin if IsInUnit ( j ) then
17167: LD_VAR 0 2
17171: PPUSH
17172: CALL_OW 310
17176: IFFALSE 17187
// ComExit ( j ) ;
17178: LD_VAR 0 2
17182: PPUSH
17183: CALL 62465 0 1
// AddComCollect ( j , x , y ) ;
17187: LD_VAR 0 2
17191: PPUSH
17192: LD_VAR 0 6
17196: PPUSH
17197: LD_VAR 0 7
17201: PPUSH
17202: CALL_OW 177
// end ;
17206: GO 17164
17208: POP
17209: POP
// exit ;
17210: POP
17211: POP
17212: GO 17449
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17214: LD_ADDR_VAR 0 4
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: LD_VAR 0 5
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 91
17233: PUSH
17234: LD_VAR 0 8
17238: PUSH
17239: LD_INT 8
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 34
17252: PUSH
17253: LD_INT 12
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 34
17262: PUSH
17263: LD_INT 51
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 34
17272: PUSH
17273: LD_INT 32
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 34
17282: PUSH
17283: LD_INT 89
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: ST_TO_ADDR
// if tmp then
17307: LD_VAR 0 4
17311: IFFALSE 17445
// begin for j in tmp do
17313: LD_ADDR_VAR 0 2
17317: PUSH
17318: LD_VAR 0 4
17322: PUSH
17323: FOR_IN
17324: IFFALSE 17443
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17326: LD_VAR 0 2
17330: PPUSH
17331: CALL_OW 262
17335: PUSH
17336: LD_INT 3
17338: EQUAL
17339: IFTRUE 17356
17341: PUSH
17342: LD_VAR 0 2
17346: PPUSH
17347: CALL_OW 261
17351: PUSH
17352: LD_INT 20
17354: GREATER
17355: OR
17356: IFFALSE 17370
17358: PUSH
17359: LD_VAR 0 2
17363: PPUSH
17364: CALL_OW 314
17368: NOT
17369: AND
17370: IFFALSE 17400
17372: PUSH
17373: LD_VAR 0 2
17377: PPUSH
17378: CALL_OW 263
17382: PUSH
17383: LD_INT 1
17385: NONEQUAL
17386: IFTRUE 17399
17388: PUSH
17389: LD_VAR 0 2
17393: PPUSH
17394: CALL_OW 311
17398: OR
17399: AND
17400: IFFALSE 17441
// begin ComCollect ( j , x , y ) ;
17402: LD_VAR 0 2
17406: PPUSH
17407: LD_VAR 0 6
17411: PPUSH
17412: LD_VAR 0 7
17416: PPUSH
17417: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17421: LD_VAR 0 2
17425: PPUSH
17426: LD_VAR 0 8
17430: PPUSH
17431: CALL_OW 172
// exit ;
17435: POP
17436: POP
17437: POP
17438: POP
17439: GO 17449
// end ;
17441: GO 17323
17443: POP
17444: POP
// end ; end ;
17445: GO 16810
17447: POP
17448: POP
// end ; end_of_file
17449: PPOPN 9
17451: END
// export function SOS_UnitDestroyed ( un ) ; begin
17452: LD_INT 0
17454: PPUSH
// ComRadiation ( un ) ;
17455: LD_VAR 0 1
17459: PPUSH
17460: CALL 18541 0 1
// end ;
17464: LD_VAR 0 2
17468: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17469: LD_INT 0
17471: PPUSH
// ComRadiation ( un ) ;
17472: LD_VAR 0 1
17476: PPUSH
17477: CALL 18541 0 1
// end ;
17481: LD_VAR 0 2
17485: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17486: LD_INT 0
17488: PPUSH
// end ;
17489: LD_VAR 0 4
17493: RET
// export function SOS_Command ( cmd ) ; begin
17494: LD_INT 0
17496: PPUSH
// end ;
17497: LD_VAR 0 2
17501: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17502: LD_INT 0
17504: PPUSH
// end ;
17505: LD_VAR 0 6
17509: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
17510: LD_INT 0
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
// if not vehicle or not factory then
17516: LD_VAR 0 1
17520: NOT
17521: IFTRUE 17530
17523: PUSH
17524: LD_VAR 0 2
17528: NOT
17529: OR
17530: IFFALSE 17534
// exit ;
17532: GO 18116
// if not factoryWaypoints then
17534: LD_EXP 61
17538: NOT
17539: IFFALSE 17543
// exit ;
17541: GO 18116
// for i := 1 to Count ( factoryWaypoints ) do
17543: LD_ADDR_VAR 0 4
17547: PUSH
17548: DOUBLE
17549: LD_INT 1
17551: DEC
17552: ST_TO_ADDR
17553: LD_EXP 61
17557: PPUSH
17558: CALL 26135 0 1
17562: PUSH
17563: FOR_TO
17564: IFFALSE 18114
// if factoryWaypoints [ i ] [ 2 ] = factory then
17566: LD_EXP 61
17570: PUSH
17571: LD_VAR 0 4
17575: ARRAY
17576: PUSH
17577: LD_INT 2
17579: ARRAY
17580: PUSH
17581: LD_VAR 0 2
17585: EQUAL
17586: IFFALSE 18112
// begin if GetControl ( vehicle ) = control_manual then
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 263
17597: PUSH
17598: LD_INT 1
17600: EQUAL
17601: IFFALSE 17965
// begin driver := IsDrivenBy ( vehicle ) ;
17603: LD_ADDR_VAR 0 5
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 311
17617: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
17618: LD_VAR 0 5
17622: PUSH
17623: LD_EXP 62
17627: IN
17628: IFTRUE 17642
17630: PUSH
17631: LD_VAR 0 1
17635: PUSH
17636: LD_EXP 62
17640: IN
17641: OR
17642: IFFALSE 17648
// exit ;
17644: POP
17645: POP
17646: GO 18116
// if not HasTask ( driver ) then
17648: LD_VAR 0 5
17652: PPUSH
17653: CALL_OW 314
17657: NOT
17658: IFFALSE 17963
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
17660: LD_ADDR_EXP 62
17664: PUSH
17665: LD_EXP 62
17669: PPUSH
17670: LD_VAR 0 5
17674: PPUSH
17675: CALL 62067 0 2
17679: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
17680: LD_ADDR_EXP 62
17684: PUSH
17685: LD_EXP 62
17689: PPUSH
17690: LD_VAR 0 1
17694: PPUSH
17695: CALL 62067 0 2
17699: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17700: LD_ADDR_VAR 0 6
17704: PUSH
17705: LD_EXP 61
17709: PUSH
17710: LD_VAR 0 4
17714: ARRAY
17715: PUSH
17716: LD_INT 3
17718: ARRAY
17719: PPUSH
17720: LD_EXP 61
17724: PUSH
17725: LD_VAR 0 4
17729: ARRAY
17730: PUSH
17731: LD_INT 4
17733: ARRAY
17734: PPUSH
17735: CALL_OW 428
17739: ST_TO_ADDR
// if hex then
17740: LD_VAR 0 6
17744: IFFALSE 17762
// ComMoveUnit ( driver , hex ) else
17746: LD_VAR 0 5
17750: PPUSH
17751: LD_VAR 0 6
17755: PPUSH
17756: CALL_OW 112
17760: GO 17846
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
17762: LD_VAR 0 1
17766: PPUSH
17767: LD_EXP 61
17771: PUSH
17772: LD_VAR 0 4
17776: ARRAY
17777: PUSH
17778: LD_INT 3
17780: ARRAY
17781: PPUSH
17782: LD_EXP 61
17786: PUSH
17787: LD_VAR 0 4
17791: ARRAY
17792: PUSH
17793: LD_INT 4
17795: ARRAY
17796: PPUSH
17797: CALL_OW 297
17801: PUSH
17802: LD_INT 0
17804: GREATER
17805: IFFALSE 17846
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17807: LD_VAR 0 5
17811: PPUSH
17812: LD_EXP 61
17816: PUSH
17817: LD_VAR 0 4
17821: ARRAY
17822: PUSH
17823: LD_INT 3
17825: ARRAY
17826: PPUSH
17827: LD_EXP 61
17831: PUSH
17832: LD_VAR 0 4
17836: ARRAY
17837: PUSH
17838: LD_INT 4
17840: ARRAY
17841: PPUSH
17842: CALL_OW 111
// AddComExitVehicle ( driver ) ;
17846: LD_VAR 0 5
17850: PPUSH
17851: CALL_OW 181
// if Multiplayer then
17855: LD_OWVAR 4
17859: IFFALSE 17908
// begin repeat wait ( 10 ) ;
17861: LD_INT 10
17863: PPUSH
17864: CALL_OW 67
// until not IsInUnit ( driver ) ;
17868: LD_VAR 0 5
17872: PPUSH
17873: CALL_OW 310
17877: NOT
17878: IFFALSE 17861
// if not HasTask ( driver ) then
17880: LD_VAR 0 5
17884: PPUSH
17885: CALL_OW 314
17889: NOT
17890: IFFALSE 17906
// ComEnterUnit ( driver , factory ) ;
17892: LD_VAR 0 5
17896: PPUSH
17897: LD_VAR 0 2
17901: PPUSH
17902: CALL_OW 120
// end else
17906: GO 17922
// AddComEnterUnit ( driver , factory ) ;
17908: LD_VAR 0 5
17912: PPUSH
17913: LD_VAR 0 2
17917: PPUSH
17918: CALL_OW 180
// wait ( 0 0$1 ) ;
17922: LD_INT 35
17924: PPUSH
17925: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
17929: LD_ADDR_EXP 62
17933: PUSH
17934: LD_EXP 62
17938: PUSH
17939: LD_VAR 0 5
17943: DIFF
17944: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
17945: LD_ADDR_EXP 62
17949: PUSH
17950: LD_EXP 62
17954: PUSH
17955: LD_VAR 0 1
17959: DIFF
17960: ST_TO_ADDR
// break ;
17961: GO 18114
// end ; end else
17963: GO 18112
// if GetControl ( vehicle ) = control_remote then
17965: LD_VAR 0 1
17969: PPUSH
17970: CALL_OW 263
17974: PUSH
17975: LD_INT 2
17977: EQUAL
17978: IFFALSE 18064
// begin wait ( 0 0$2 ) ;
17980: LD_INT 70
17982: PPUSH
17983: CALL_OW 67
// repeat wait ( 10 ) ;
17987: LD_INT 10
17989: PPUSH
17990: CALL_OW 67
// Connect ( vehicle ) ;
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL 32379 0 1
// until IsControledBy ( vehicle ) ;
18003: LD_VAR 0 1
18007: PPUSH
18008: CALL_OW 312
18012: IFFALSE 17987
// wait ( 10 ) ;
18014: LD_INT 10
18016: PPUSH
18017: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18021: LD_VAR 0 1
18025: PPUSH
18026: LD_EXP 61
18030: PUSH
18031: LD_VAR 0 4
18035: ARRAY
18036: PUSH
18037: LD_INT 3
18039: ARRAY
18040: PPUSH
18041: LD_EXP 61
18045: PUSH
18046: LD_VAR 0 4
18050: ARRAY
18051: PUSH
18052: LD_INT 4
18054: ARRAY
18055: PPUSH
18056: CALL_OW 111
// break ;
18060: GO 18114
// end else
18062: GO 18112
// begin wait ( 0 0$3 ) ;
18064: LD_INT 105
18066: PPUSH
18067: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18071: LD_VAR 0 1
18075: PPUSH
18076: LD_EXP 61
18080: PUSH
18081: LD_VAR 0 4
18085: ARRAY
18086: PUSH
18087: LD_INT 3
18089: ARRAY
18090: PPUSH
18091: LD_EXP 61
18095: PUSH
18096: LD_VAR 0 4
18100: ARRAY
18101: PUSH
18102: LD_INT 4
18104: ARRAY
18105: PPUSH
18106: CALL_OW 111
// break ;
18110: GO 18114
// end ; end ;
18112: GO 17563
18114: POP
18115: POP
// end ;
18116: LD_VAR 0 3
18120: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18121: LD_INT 0
18123: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18124: LD_VAR 0 1
18128: PUSH
18129: LD_INT 250
18131: EQUAL
18132: IFFALSE 18149
18134: PUSH
18135: LD_VAR 0 2
18139: PPUSH
18140: CALL_OW 264
18144: PUSH
18145: LD_INT 81
18147: EQUAL
18148: AND
18149: IFFALSE 18170
// MinerPlaceMine ( unit , x , y ) ;
18151: LD_VAR 0 2
18155: PPUSH
18156: LD_VAR 0 4
18160: PPUSH
18161: LD_VAR 0 5
18165: PPUSH
18166: CALL 21302 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 251
18177: EQUAL
18178: IFFALSE 18195
18180: PUSH
18181: LD_VAR 0 2
18185: PPUSH
18186: CALL_OW 264
18190: PUSH
18191: LD_INT 81
18193: EQUAL
18194: AND
18195: IFFALSE 18216
// MinerDetonateMine ( unit , x , y ) ;
18197: LD_VAR 0 2
18201: PPUSH
18202: LD_VAR 0 4
18206: PPUSH
18207: LD_VAR 0 5
18211: PPUSH
18212: CALL 21581 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18216: LD_VAR 0 1
18220: PUSH
18221: LD_INT 252
18223: EQUAL
18224: IFFALSE 18241
18226: PUSH
18227: LD_VAR 0 2
18231: PPUSH
18232: CALL_OW 264
18236: PUSH
18237: LD_INT 81
18239: EQUAL
18240: AND
18241: IFFALSE 18262
// MinerCreateMinefield ( unit , x , y ) ;
18243: LD_VAR 0 2
18247: PPUSH
18248: LD_VAR 0 4
18252: PPUSH
18253: LD_VAR 0 5
18257: PPUSH
18258: CALL 22000 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18262: LD_VAR 0 1
18266: PUSH
18267: LD_INT 253
18269: EQUAL
18270: IFFALSE 18287
18272: PUSH
18273: LD_VAR 0 2
18277: PPUSH
18278: CALL_OW 257
18282: PUSH
18283: LD_INT 5
18285: EQUAL
18286: AND
18287: IFFALSE 18308
// ComBinocular ( unit , x , y ) ;
18289: LD_VAR 0 2
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: LD_VAR 0 5
18303: PPUSH
18304: CALL 22375 0 3
// if selectedUnit then
18308: LD_VAR 0 3
18312: IFFALSE 18372
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18314: LD_VAR 0 1
18318: PUSH
18319: LD_INT 254
18321: EQUAL
18322: IFFALSE 18339
18324: PUSH
18325: LD_VAR 0 2
18329: PPUSH
18330: CALL_OW 264
18334: PUSH
18335: LD_INT 99
18337: EQUAL
18338: AND
18339: IFFALSE 18356
18341: PUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: CALL_OW 263
18351: PUSH
18352: LD_INT 3
18354: EQUAL
18355: AND
18356: IFFALSE 18372
// HackDestroyVehicle ( unit , selectedUnit ) ;
18358: LD_VAR 0 2
18362: PPUSH
18363: LD_VAR 0 3
18367: PPUSH
18368: CALL 20662 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18372: LD_VAR 0 1
18376: PUSH
18377: LD_INT 255
18379: EQUAL
18380: IFFALSE 18404
18382: PUSH
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 264
18392: PUSH
18393: LD_INT 14
18395: PUSH
18396: LD_INT 53
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: IN
18403: AND
18404: IFFALSE 18422
18406: PUSH
18407: LD_VAR 0 4
18411: PPUSH
18412: LD_VAR 0 5
18416: PPUSH
18417: CALL_OW 488
18421: AND
18422: IFFALSE 18446
// CutTreeXYR ( unit , x , y , 12 ) ;
18424: LD_VAR 0 2
18428: PPUSH
18429: LD_VAR 0 4
18433: PPUSH
18434: LD_VAR 0 5
18438: PPUSH
18439: LD_INT 12
18441: PPUSH
18442: CALL 18637 0 4
// if cmd = 256 then
18446: LD_VAR 0 1
18450: PUSH
18451: LD_INT 256
18453: EQUAL
18454: IFFALSE 18475
// SetFactoryWaypoint ( unit , x , y ) ;
18456: LD_VAR 0 2
18460: PPUSH
18461: LD_VAR 0 4
18465: PPUSH
18466: LD_VAR 0 5
18470: PPUSH
18471: CALL 15997 0 3
// if cmd = 257 then
18475: LD_VAR 0 1
18479: PUSH
18480: LD_INT 257
18482: EQUAL
18483: IFFALSE 18504
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18485: LD_VAR 0 2
18489: PPUSH
18490: LD_VAR 0 4
18494: PPUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: CALL 16493 0 3
// if cmd = 258 then
18504: LD_VAR 0 1
18508: PUSH
18509: LD_INT 258
18511: EQUAL
18512: IFFALSE 18536
// BurnTreeXYR ( unit , x , y , 8 ) ;
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 4
18523: PPUSH
18524: LD_VAR 0 5
18528: PPUSH
18529: LD_INT 8
18531: PPUSH
18532: CALL 19037 0 4
// end ;
18536: LD_VAR 0 6
18540: RET
// export function ComRadiation ( un ) ; var eff ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 264
18554: PUSH
18555: LD_INT 91
18557: NONEQUAL
18558: IFFALSE 18562
// exit ;
18560: GO 18632
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18562: LD_INT 68
18564: PPUSH
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 255
18574: PPUSH
18575: CALL_OW 321
18579: PUSH
18580: LD_INT 2
18582: EQUAL
18583: IFFALSE 18595
// eff := 50 else
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_INT 50
18592: ST_TO_ADDR
18593: GO 18603
// eff := 25 ;
18595: LD_ADDR_VAR 0 3
18599: PUSH
18600: LD_INT 25
18602: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 250
18612: PPUSH
18613: LD_VAR 0 1
18617: PPUSH
18618: CALL_OW 251
18622: PPUSH
18623: LD_VAR 0 3
18627: PPUSH
18628: CALL_OW 495
// end ;
18632: LD_VAR 0 2
18636: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18637: LD_INT 0
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 302
18657: NOT
18658: IFTRUE 18677
18660: PUSH
18661: LD_VAR 0 2
18665: PPUSH
18666: LD_VAR 0 3
18670: PPUSH
18671: CALL_OW 488
18675: NOT
18676: OR
18677: IFTRUE 18686
18679: PUSH
18680: LD_VAR 0 4
18684: NOT
18685: OR
18686: IFFALSE 18690
// exit ;
18688: GO 19032
// list := [ ] ;
18690: LD_ADDR_VAR 0 13
18694: PUSH
18695: EMPTY
18696: ST_TO_ADDR
// if x - r < 0 then
18697: LD_VAR 0 2
18701: PUSH
18702: LD_VAR 0 4
18706: MINUS
18707: PUSH
18708: LD_INT 0
18710: LESS
18711: IFFALSE 18723
// min_x := 0 else
18713: LD_ADDR_VAR 0 7
18717: PUSH
18718: LD_INT 0
18720: ST_TO_ADDR
18721: GO 18739
// min_x := x - r ;
18723: LD_ADDR_VAR 0 7
18727: PUSH
18728: LD_VAR 0 2
18732: PUSH
18733: LD_VAR 0 4
18737: MINUS
18738: ST_TO_ADDR
// if y - r < 0 then
18739: LD_VAR 0 3
18743: PUSH
18744: LD_VAR 0 4
18748: MINUS
18749: PUSH
18750: LD_INT 0
18752: LESS
18753: IFFALSE 18765
// min_y := 0 else
18755: LD_ADDR_VAR 0 8
18759: PUSH
18760: LD_INT 0
18762: ST_TO_ADDR
18763: GO 18781
// min_y := y - r ;
18765: LD_ADDR_VAR 0 8
18769: PUSH
18770: LD_VAR 0 3
18774: PUSH
18775: LD_VAR 0 4
18779: MINUS
18780: ST_TO_ADDR
// max_x := x + r ;
18781: LD_ADDR_VAR 0 9
18785: PUSH
18786: LD_VAR 0 2
18790: PUSH
18791: LD_VAR 0 4
18795: PLUS
18796: ST_TO_ADDR
// max_y := y + r ;
18797: LD_ADDR_VAR 0 10
18801: PUSH
18802: LD_VAR 0 3
18806: PUSH
18807: LD_VAR 0 4
18811: PLUS
18812: ST_TO_ADDR
// for _x = min_x to max_x do
18813: LD_ADDR_VAR 0 11
18817: PUSH
18818: DOUBLE
18819: LD_VAR 0 7
18823: DEC
18824: ST_TO_ADDR
18825: LD_VAR 0 9
18829: PUSH
18830: FOR_TO
18831: IFFALSE 18950
// for _y = min_y to max_y do
18833: LD_ADDR_VAR 0 12
18837: PUSH
18838: DOUBLE
18839: LD_VAR 0 8
18843: DEC
18844: ST_TO_ADDR
18845: LD_VAR 0 10
18849: PUSH
18850: FOR_TO
18851: IFFALSE 18946
// begin if not ValidHex ( _x , _y ) then
18853: LD_VAR 0 11
18857: PPUSH
18858: LD_VAR 0 12
18862: PPUSH
18863: CALL_OW 488
18867: NOT
18868: IFFALSE 18872
// continue ;
18870: GO 18850
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18872: LD_VAR 0 11
18876: PPUSH
18877: LD_VAR 0 12
18881: PPUSH
18882: CALL_OW 351
18886: IFFALSE 18904
18888: PUSH
18889: LD_VAR 0 11
18893: PPUSH
18894: LD_VAR 0 12
18898: PPUSH
18899: CALL_OW 554
18903: AND
18904: IFFALSE 18944
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18906: LD_ADDR_VAR 0 13
18910: PUSH
18911: LD_VAR 0 13
18915: PPUSH
18916: LD_VAR 0 13
18920: PUSH
18921: LD_INT 1
18923: PLUS
18924: PPUSH
18925: LD_VAR 0 11
18929: PUSH
18930: LD_VAR 0 12
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 2
18943: ST_TO_ADDR
// end ;
18944: GO 18850
18946: POP
18947: POP
18948: GO 18830
18950: POP
18951: POP
// if not list then
18952: LD_VAR 0 13
18956: NOT
18957: IFFALSE 18961
// exit ;
18959: GO 19032
// for i in list do
18961: LD_ADDR_VAR 0 6
18965: PUSH
18966: LD_VAR 0 13
18970: PUSH
18971: FOR_IN
18972: IFFALSE 19030
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18974: LD_VAR 0 1
18978: PPUSH
18979: LD_STRING M
18981: PUSH
18982: LD_VAR 0 6
18986: PUSH
18987: LD_INT 1
18989: ARRAY
18990: PUSH
18991: LD_VAR 0 6
18995: PUSH
18996: LD_INT 2
18998: ARRAY
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: LD_INT 0
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: EMPTY
19022: LIST
19023: PPUSH
19024: CALL_OW 447
19028: GO 18971
19030: POP
19031: POP
// end ;
19032: LD_VAR 0 5
19036: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19049: LD_VAR 0 1
19053: PPUSH
19054: CALL_OW 302
19058: NOT
19059: IFTRUE 19078
19061: PUSH
19062: LD_VAR 0 2
19066: PPUSH
19067: LD_VAR 0 3
19071: PPUSH
19072: CALL_OW 488
19076: NOT
19077: OR
19078: IFTRUE 19087
19080: PUSH
19081: LD_VAR 0 4
19085: NOT
19086: OR
19087: IFFALSE 19091
// exit ;
19089: GO 19608
// list := [ ] ;
19091: LD_ADDR_VAR 0 13
19095: PUSH
19096: EMPTY
19097: ST_TO_ADDR
// if x - r < 0 then
19098: LD_VAR 0 2
19102: PUSH
19103: LD_VAR 0 4
19107: MINUS
19108: PUSH
19109: LD_INT 0
19111: LESS
19112: IFFALSE 19124
// min_x := 0 else
19114: LD_ADDR_VAR 0 7
19118: PUSH
19119: LD_INT 0
19121: ST_TO_ADDR
19122: GO 19140
// min_x := x - r ;
19124: LD_ADDR_VAR 0 7
19128: PUSH
19129: LD_VAR 0 2
19133: PUSH
19134: LD_VAR 0 4
19138: MINUS
19139: ST_TO_ADDR
// if y - r < 0 then
19140: LD_VAR 0 3
19144: PUSH
19145: LD_VAR 0 4
19149: MINUS
19150: PUSH
19151: LD_INT 0
19153: LESS
19154: IFFALSE 19166
// min_y := 0 else
19156: LD_ADDR_VAR 0 8
19160: PUSH
19161: LD_INT 0
19163: ST_TO_ADDR
19164: GO 19182
// min_y := y - r ;
19166: LD_ADDR_VAR 0 8
19170: PUSH
19171: LD_VAR 0 3
19175: PUSH
19176: LD_VAR 0 4
19180: MINUS
19181: ST_TO_ADDR
// max_x := x + r ;
19182: LD_ADDR_VAR 0 9
19186: PUSH
19187: LD_VAR 0 2
19191: PUSH
19192: LD_VAR 0 4
19196: PLUS
19197: ST_TO_ADDR
// max_y := y + r ;
19198: LD_ADDR_VAR 0 10
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: LD_VAR 0 4
19212: PLUS
19213: ST_TO_ADDR
// for _x = min_x to max_x do
19214: LD_ADDR_VAR 0 11
19218: PUSH
19219: DOUBLE
19220: LD_VAR 0 7
19224: DEC
19225: ST_TO_ADDR
19226: LD_VAR 0 9
19230: PUSH
19231: FOR_TO
19232: IFFALSE 19351
// for _y = min_y to max_y do
19234: LD_ADDR_VAR 0 12
19238: PUSH
19239: DOUBLE
19240: LD_VAR 0 8
19244: DEC
19245: ST_TO_ADDR
19246: LD_VAR 0 10
19250: PUSH
19251: FOR_TO
19252: IFFALSE 19347
// begin if not ValidHex ( _x , _y ) then
19254: LD_VAR 0 11
19258: PPUSH
19259: LD_VAR 0 12
19263: PPUSH
19264: CALL_OW 488
19268: NOT
19269: IFFALSE 19273
// continue ;
19271: GO 19251
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19273: LD_VAR 0 11
19277: PPUSH
19278: LD_VAR 0 12
19282: PPUSH
19283: CALL_OW 351
19287: IFFALSE 19305
19289: PUSH
19290: LD_VAR 0 11
19294: PPUSH
19295: LD_VAR 0 12
19299: PPUSH
19300: CALL_OW 554
19304: AND
19305: IFFALSE 19345
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19307: LD_ADDR_VAR 0 13
19311: PUSH
19312: LD_VAR 0 13
19316: PPUSH
19317: LD_VAR 0 13
19321: PUSH
19322: LD_INT 1
19324: PLUS
19325: PPUSH
19326: LD_VAR 0 11
19330: PUSH
19331: LD_VAR 0 12
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 2
19344: ST_TO_ADDR
// end ;
19345: GO 19251
19347: POP
19348: POP
19349: GO 19231
19351: POP
19352: POP
// if not list then
19353: LD_VAR 0 13
19357: NOT
19358: IFFALSE 19362
// exit ;
19360: GO 19608
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19362: LD_ADDR_VAR 0 13
19366: PUSH
19367: LD_VAR 0 1
19371: PPUSH
19372: LD_VAR 0 13
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL 29507 0 4
19387: ST_TO_ADDR
// ComStop ( flame ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL_OW 141
// for i in list do
19397: LD_ADDR_VAR 0 6
19401: PUSH
19402: LD_VAR 0 13
19406: PUSH
19407: FOR_IN
19408: IFFALSE 19439
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19410: LD_VAR 0 1
19414: PPUSH
19415: LD_VAR 0 6
19419: PUSH
19420: LD_INT 1
19422: ARRAY
19423: PPUSH
19424: LD_VAR 0 6
19428: PUSH
19429: LD_INT 2
19431: ARRAY
19432: PPUSH
19433: CALL_OW 176
19437: GO 19407
19439: POP
19440: POP
// repeat wait ( 0 0$1 ) ;
19441: LD_INT 35
19443: PPUSH
19444: CALL_OW 67
// task := GetTaskList ( flame ) ;
19448: LD_ADDR_VAR 0 14
19452: PUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL_OW 437
19462: ST_TO_ADDR
// if not task then
19463: LD_VAR 0 14
19467: NOT
19468: IFFALSE 19472
// exit ;
19470: GO 19608
// if task [ 1 ] [ 1 ] <> | then
19472: LD_VAR 0 14
19476: PUSH
19477: LD_INT 1
19479: ARRAY
19480: PUSH
19481: LD_INT 1
19483: ARRAY
19484: PUSH
19485: LD_STRING |
19487: NONEQUAL
19488: IFFALSE 19492
// exit ;
19490: GO 19608
// _x := task [ 1 ] [ 2 ] ;
19492: LD_ADDR_VAR 0 11
19496: PUSH
19497: LD_VAR 0 14
19501: PUSH
19502: LD_INT 1
19504: ARRAY
19505: PUSH
19506: LD_INT 2
19508: ARRAY
19509: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19510: LD_ADDR_VAR 0 12
19514: PUSH
19515: LD_VAR 0 14
19519: PUSH
19520: LD_INT 1
19522: ARRAY
19523: PUSH
19524: LD_INT 3
19526: ARRAY
19527: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19528: LD_VAR 0 11
19532: PPUSH
19533: LD_VAR 0 12
19537: PPUSH
19538: CALL_OW 351
19542: NOT
19543: IFTRUE 19562
19545: PUSH
19546: LD_VAR 0 11
19550: PPUSH
19551: LD_VAR 0 12
19555: PPUSH
19556: CALL_OW 554
19560: NOT
19561: OR
19562: IFFALSE 19596
// begin task := Delete ( task , 1 ) ;
19564: LD_ADDR_VAR 0 14
19568: PUSH
19569: LD_VAR 0 14
19573: PPUSH
19574: LD_INT 1
19576: PPUSH
19577: CALL_OW 3
19581: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_VAR 0 14
19591: PPUSH
19592: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 314
19605: NOT
19606: IFFALSE 19441
// end ;
19608: LD_VAR 0 5
19612: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19613: LD_EXP 65
19617: NOT
19618: IFFALSE 19668
19620: GO 19622
19622: DISABLE
// begin initHack := true ;
19623: LD_ADDR_EXP 65
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// hackTanks := [ ] ;
19631: LD_ADDR_EXP 66
19635: PUSH
19636: EMPTY
19637: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19638: LD_ADDR_EXP 67
19642: PUSH
19643: EMPTY
19644: ST_TO_ADDR
// hackLimit := 3 ;
19645: LD_ADDR_EXP 68
19649: PUSH
19650: LD_INT 3
19652: ST_TO_ADDR
// hackDist := 12 ;
19653: LD_ADDR_EXP 69
19657: PUSH
19658: LD_INT 12
19660: ST_TO_ADDR
// hackCounter := [ ] ;
19661: LD_ADDR_EXP 70
19665: PUSH
19666: EMPTY
19667: ST_TO_ADDR
// end ;
19668: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19669: LD_EXP 65
19673: IFFALSE 19691
19675: PUSH
19676: LD_INT 34
19678: PUSH
19679: LD_INT 99
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: AND
19691: IFFALSE 19944
19693: GO 19695
19695: DISABLE
19696: LD_INT 0
19698: PPUSH
19699: PPUSH
// begin enable ;
19700: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19701: LD_ADDR_VAR 0 1
19705: PUSH
19706: LD_INT 34
19708: PUSH
19709: LD_INT 99
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PPUSH
19716: CALL_OW 69
19720: PUSH
19721: FOR_IN
19722: IFFALSE 19942
// begin if not i in hackTanks then
19724: LD_VAR 0 1
19728: PUSH
19729: LD_EXP 66
19733: IN
19734: NOT
19735: IFFALSE 19818
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19737: LD_ADDR_EXP 66
19741: PUSH
19742: LD_EXP 66
19746: PPUSH
19747: LD_EXP 66
19751: PUSH
19752: LD_INT 1
19754: PLUS
19755: PPUSH
19756: LD_VAR 0 1
19760: PPUSH
19761: CALL_OW 1
19765: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19766: LD_ADDR_EXP 67
19770: PUSH
19771: LD_EXP 67
19775: PPUSH
19776: LD_EXP 67
19780: PUSH
19781: LD_INT 1
19783: PLUS
19784: PPUSH
19785: EMPTY
19786: PPUSH
19787: CALL_OW 1
19791: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19792: LD_ADDR_EXP 70
19796: PUSH
19797: LD_EXP 70
19801: PPUSH
19802: LD_EXP 70
19806: PUSH
19807: LD_INT 1
19809: PLUS
19810: PPUSH
19811: EMPTY
19812: PPUSH
19813: CALL_OW 1
19817: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19818: LD_VAR 0 1
19822: PPUSH
19823: CALL_OW 302
19827: NOT
19828: IFFALSE 19841
// begin HackUnlinkAll ( i ) ;
19830: LD_VAR 0 1
19834: PPUSH
19835: CALL 19947 0 1
// continue ;
19839: GO 19721
// end ; HackCheckCapturedStatus ( i ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: CALL 20392 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19850: LD_ADDR_VAR 0 2
19854: PUSH
19855: LD_INT 81
19857: PUSH
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL_OW 255
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 33
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 91
19884: PUSH
19885: LD_VAR 0 1
19889: PUSH
19890: LD_EXP 69
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 50
19902: PUSH
19903: EMPTY
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PPUSH
19912: CALL_OW 69
19916: ST_TO_ADDR
// if not tmp then
19917: LD_VAR 0 2
19921: NOT
19922: IFFALSE 19926
// continue ;
19924: GO 19721
// HackLink ( i , tmp ) ;
19926: LD_VAR 0 1
19930: PPUSH
19931: LD_VAR 0 2
19935: PPUSH
19936: CALL 20083 0 2
// end ;
19940: GO 19721
19942: POP
19943: POP
// end ;
19944: PPOPN 2
19946: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19947: LD_INT 0
19949: PPUSH
19950: PPUSH
19951: PPUSH
// if not hack in hackTanks then
19952: LD_VAR 0 1
19956: PUSH
19957: LD_EXP 66
19961: IN
19962: NOT
19963: IFFALSE 19967
// exit ;
19965: GO 20078
// index := GetElementIndex ( hackTanks , hack ) ;
19967: LD_ADDR_VAR 0 4
19971: PUSH
19972: LD_EXP 66
19976: PPUSH
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL 28802 0 2
19986: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19987: LD_EXP 67
19991: PUSH
19992: LD_VAR 0 4
19996: ARRAY
19997: IFFALSE 20078
// begin for i in hackTanksCaptured [ index ] do
19999: LD_ADDR_VAR 0 3
20003: PUSH
20004: LD_EXP 67
20008: PUSH
20009: LD_VAR 0 4
20013: ARRAY
20014: PUSH
20015: FOR_IN
20016: IFFALSE 20042
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 1
20025: ARRAY
20026: PPUSH
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 2
20034: ARRAY
20035: PPUSH
20036: CALL_OW 235
20040: GO 20015
20042: POP
20043: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20044: LD_ADDR_EXP 67
20048: PUSH
20049: LD_EXP 67
20053: PPUSH
20054: LD_VAR 0 4
20058: PPUSH
20059: EMPTY
20060: PPUSH
20061: CALL_OW 1
20065: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20066: LD_VAR 0 1
20070: PPUSH
20071: LD_INT 0
20073: PPUSH
20074: CALL_OW 505
// end ; end ;
20078: LD_VAR 0 2
20082: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20083: LD_INT 0
20085: PPUSH
20086: PPUSH
20087: PPUSH
// if not hack in hackTanks or not vehicles then
20088: LD_VAR 0 1
20092: PUSH
20093: LD_EXP 66
20097: IN
20098: NOT
20099: IFTRUE 20108
20101: PUSH
20102: LD_VAR 0 2
20106: NOT
20107: OR
20108: IFFALSE 20112
// exit ;
20110: GO 20387
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: LD_VAR 0 2
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: LD_INT 1
20132: PPUSH
20133: CALL 29454 0 4
20137: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20138: LD_ADDR_VAR 0 5
20142: PUSH
20143: LD_EXP 66
20147: PPUSH
20148: LD_VAR 0 1
20152: PPUSH
20153: CALL 28802 0 2
20157: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20158: LD_EXP 67
20162: PUSH
20163: LD_VAR 0 5
20167: ARRAY
20168: PUSH
20169: LD_EXP 68
20173: LESS
20174: IFFALSE 20363
// begin for i := 1 to vehicles do
20176: LD_ADDR_VAR 0 4
20180: PUSH
20181: DOUBLE
20182: LD_INT 1
20184: DEC
20185: ST_TO_ADDR
20186: LD_VAR 0 2
20190: PUSH
20191: FOR_TO
20192: IFFALSE 20361
// begin if hackTanksCaptured [ index ] = hackLimit then
20194: LD_EXP 67
20198: PUSH
20199: LD_VAR 0 5
20203: ARRAY
20204: PUSH
20205: LD_EXP 68
20209: EQUAL
20210: IFFALSE 20214
// break ;
20212: GO 20361
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20214: LD_ADDR_EXP 70
20218: PUSH
20219: LD_EXP 70
20223: PPUSH
20224: LD_VAR 0 5
20228: PPUSH
20229: LD_EXP 70
20233: PUSH
20234: LD_VAR 0 5
20238: ARRAY
20239: PUSH
20240: LD_INT 1
20242: PLUS
20243: PPUSH
20244: CALL_OW 1
20248: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20249: LD_ADDR_EXP 67
20253: PUSH
20254: LD_EXP 67
20258: PPUSH
20259: LD_VAR 0 5
20263: PUSH
20264: LD_EXP 67
20268: PUSH
20269: LD_VAR 0 5
20273: ARRAY
20274: PUSH
20275: LD_INT 1
20277: PLUS
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: LD_VAR 0 2
20287: PUSH
20288: LD_VAR 0 4
20292: ARRAY
20293: PUSH
20294: LD_VAR 0 2
20298: PUSH
20299: LD_VAR 0 4
20303: ARRAY
20304: PPUSH
20305: CALL_OW 255
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL 29019 0 3
20318: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20319: LD_VAR 0 2
20323: PUSH
20324: LD_VAR 0 4
20328: ARRAY
20329: PPUSH
20330: LD_VAR 0 1
20334: PPUSH
20335: CALL_OW 255
20339: PPUSH
20340: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20344: LD_VAR 0 2
20348: PUSH
20349: LD_VAR 0 4
20353: ARRAY
20354: PPUSH
20355: CALL_OW 141
// end ;
20359: GO 20191
20361: POP
20362: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20363: LD_VAR 0 1
20367: PPUSH
20368: LD_EXP 67
20372: PUSH
20373: LD_VAR 0 5
20377: ARRAY
20378: PUSH
20379: LD_INT 0
20381: PLUS
20382: PPUSH
20383: CALL_OW 505
// end ;
20387: LD_VAR 0 3
20391: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20392: LD_INT 0
20394: PPUSH
20395: PPUSH
20396: PPUSH
20397: PPUSH
// if not hack in hackTanks then
20398: LD_VAR 0 1
20402: PUSH
20403: LD_EXP 66
20407: IN
20408: NOT
20409: IFFALSE 20413
// exit ;
20411: GO 20657
// index := GetElementIndex ( hackTanks , hack ) ;
20413: LD_ADDR_VAR 0 4
20417: PUSH
20418: LD_EXP 66
20422: PPUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL 28802 0 2
20432: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20433: LD_ADDR_VAR 0 3
20437: PUSH
20438: DOUBLE
20439: LD_EXP 67
20443: PUSH
20444: LD_VAR 0 4
20448: ARRAY
20449: INC
20450: ST_TO_ADDR
20451: LD_INT 1
20453: PUSH
20454: FOR_DOWNTO
20455: IFFALSE 20631
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20457: LD_ADDR_VAR 0 5
20461: PUSH
20462: LD_EXP 67
20466: PUSH
20467: LD_VAR 0 4
20471: ARRAY
20472: PUSH
20473: LD_VAR 0 3
20477: ARRAY
20478: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20479: LD_VAR 0 5
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PPUSH
20488: CALL_OW 302
20492: NOT
20493: IFTRUE 20521
20495: PUSH
20496: LD_VAR 0 5
20500: PUSH
20501: LD_INT 1
20503: ARRAY
20504: PPUSH
20505: CALL_OW 255
20509: PUSH
20510: LD_VAR 0 1
20514: PPUSH
20515: CALL_OW 255
20519: NONEQUAL
20520: OR
20521: IFFALSE 20629
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20523: LD_VAR 0 5
20527: PUSH
20528: LD_INT 1
20530: ARRAY
20531: PPUSH
20532: CALL_OW 305
20536: IFFALSE 20564
20538: PUSH
20539: LD_VAR 0 5
20543: PUSH
20544: LD_INT 1
20546: ARRAY
20547: PPUSH
20548: CALL_OW 255
20552: PUSH
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 255
20562: EQUAL
20563: AND
20564: IFFALSE 20588
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20566: LD_VAR 0 5
20570: PUSH
20571: LD_INT 1
20573: ARRAY
20574: PPUSH
20575: LD_VAR 0 5
20579: PUSH
20580: LD_INT 2
20582: ARRAY
20583: PPUSH
20584: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20588: LD_ADDR_EXP 67
20592: PUSH
20593: LD_EXP 67
20597: PPUSH
20598: LD_VAR 0 4
20602: PPUSH
20603: LD_EXP 67
20607: PUSH
20608: LD_VAR 0 4
20612: ARRAY
20613: PPUSH
20614: LD_VAR 0 3
20618: PPUSH
20619: CALL_OW 3
20623: PPUSH
20624: CALL_OW 1
20628: ST_TO_ADDR
// end ; end ;
20629: GO 20454
20631: POP
20632: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20633: LD_VAR 0 1
20637: PPUSH
20638: LD_EXP 67
20642: PUSH
20643: LD_VAR 0 4
20647: ARRAY
20648: PUSH
20649: LD_INT 0
20651: PLUS
20652: PPUSH
20653: CALL_OW 505
// end ;
20657: LD_VAR 0 2
20661: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20662: LD_INT 0
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
// if not hack in hackTanks then
20668: LD_VAR 0 1
20672: PUSH
20673: LD_EXP 66
20677: IN
20678: NOT
20679: IFFALSE 20683
// exit ;
20681: GO 20768
// index := GetElementIndex ( hackTanks , hack ) ;
20683: LD_ADDR_VAR 0 5
20687: PUSH
20688: LD_EXP 66
20692: PPUSH
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL 28802 0 2
20702: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20703: LD_ADDR_VAR 0 4
20707: PUSH
20708: DOUBLE
20709: LD_INT 1
20711: DEC
20712: ST_TO_ADDR
20713: LD_EXP 67
20717: PUSH
20718: LD_VAR 0 5
20722: ARRAY
20723: PUSH
20724: FOR_TO
20725: IFFALSE 20766
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20727: LD_EXP 67
20731: PUSH
20732: LD_VAR 0 5
20736: ARRAY
20737: PUSH
20738: LD_VAR 0 4
20742: ARRAY
20743: PUSH
20744: LD_INT 1
20746: ARRAY
20747: PUSH
20748: LD_VAR 0 2
20752: EQUAL
20753: IFFALSE 20764
// KillUnit ( vehicle ) ;
20755: LD_VAR 0 2
20759: PPUSH
20760: CALL_OW 66
20764: GO 20724
20766: POP
20767: POP
// end ;
20768: LD_VAR 0 3
20772: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20773: LD_EXP 71
20777: NOT
20778: IFFALSE 20813
20780: GO 20782
20782: DISABLE
// begin initMiner := true ;
20783: LD_ADDR_EXP 71
20787: PUSH
20788: LD_INT 1
20790: ST_TO_ADDR
// minersList := [ ] ;
20791: LD_ADDR_EXP 72
20795: PUSH
20796: EMPTY
20797: ST_TO_ADDR
// minerMinesList := [ ] ;
20798: LD_ADDR_EXP 73
20802: PUSH
20803: EMPTY
20804: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20805: LD_ADDR_EXP 74
20809: PUSH
20810: LD_INT 5
20812: ST_TO_ADDR
// end ;
20813: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20814: LD_EXP 71
20818: IFFALSE 20836
20820: PUSH
20821: LD_INT 34
20823: PUSH
20824: LD_INT 81
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PPUSH
20831: CALL_OW 69
20835: AND
20836: IFFALSE 21299
20838: GO 20840
20840: DISABLE
20841: LD_INT 0
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
// begin enable ;
20847: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20848: LD_ADDR_VAR 0 1
20852: PUSH
20853: LD_INT 34
20855: PUSH
20856: LD_INT 81
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PPUSH
20863: CALL_OW 69
20867: PUSH
20868: FOR_IN
20869: IFFALSE 20941
// begin if not i in minersList then
20871: LD_VAR 0 1
20875: PUSH
20876: LD_EXP 72
20880: IN
20881: NOT
20882: IFFALSE 20939
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20884: LD_ADDR_EXP 72
20888: PUSH
20889: LD_EXP 72
20893: PPUSH
20894: LD_EXP 72
20898: PUSH
20899: LD_INT 1
20901: PLUS
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 1
20912: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20913: LD_ADDR_EXP 73
20917: PUSH
20918: LD_EXP 73
20922: PPUSH
20923: LD_EXP 73
20927: PUSH
20928: LD_INT 1
20930: PLUS
20931: PPUSH
20932: EMPTY
20933: PPUSH
20934: CALL_OW 1
20938: ST_TO_ADDR
// end end ;
20939: GO 20868
20941: POP
20942: POP
// for i := minerMinesList downto 1 do
20943: LD_ADDR_VAR 0 1
20947: PUSH
20948: DOUBLE
20949: LD_EXP 73
20953: INC
20954: ST_TO_ADDR
20955: LD_INT 1
20957: PUSH
20958: FOR_DOWNTO
20959: IFFALSE 21297
// begin if IsLive ( minersList [ i ] ) then
20961: LD_EXP 72
20965: PUSH
20966: LD_VAR 0 1
20970: ARRAY
20971: PPUSH
20972: CALL_OW 300
20976: IFFALSE 21004
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20978: LD_EXP 72
20982: PUSH
20983: LD_VAR 0 1
20987: ARRAY
20988: PPUSH
20989: LD_EXP 73
20993: PUSH
20994: LD_VAR 0 1
20998: ARRAY
20999: PPUSH
21000: CALL_OW 505
// if not minerMinesList [ i ] then
21004: LD_EXP 73
21008: PUSH
21009: LD_VAR 0 1
21013: ARRAY
21014: NOT
21015: IFFALSE 21019
// continue ;
21017: GO 20958
// for j := minerMinesList [ i ] downto 1 do
21019: LD_ADDR_VAR 0 2
21023: PUSH
21024: DOUBLE
21025: LD_EXP 73
21029: PUSH
21030: LD_VAR 0 1
21034: ARRAY
21035: INC
21036: ST_TO_ADDR
21037: LD_INT 1
21039: PUSH
21040: FOR_DOWNTO
21041: IFFALSE 21293
// begin side := GetSide ( minersList [ i ] ) ;
21043: LD_ADDR_VAR 0 3
21047: PUSH
21048: LD_EXP 72
21052: PUSH
21053: LD_VAR 0 1
21057: ARRAY
21058: PPUSH
21059: CALL_OW 255
21063: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21064: LD_ADDR_VAR 0 4
21068: PUSH
21069: LD_EXP 73
21073: PUSH
21074: LD_VAR 0 1
21078: ARRAY
21079: PUSH
21080: LD_VAR 0 2
21084: ARRAY
21085: PUSH
21086: LD_INT 1
21088: ARRAY
21089: PPUSH
21090: LD_EXP 73
21094: PUSH
21095: LD_VAR 0 1
21099: ARRAY
21100: PUSH
21101: LD_VAR 0 2
21105: ARRAY
21106: PUSH
21107: LD_INT 2
21109: ARRAY
21110: PPUSH
21111: CALL_OW 428
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 4
21120: NOT
21121: IFFALSE 21125
// continue ;
21123: GO 21040
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21125: LD_VAR 0 4
21129: PUSH
21130: LD_INT 81
21132: PUSH
21133: LD_VAR 0 3
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PPUSH
21142: CALL_OW 69
21146: IN
21147: IFFALSE 21197
21149: PUSH
21150: LD_EXP 73
21154: PUSH
21155: LD_VAR 0 1
21159: ARRAY
21160: PUSH
21161: LD_VAR 0 2
21165: ARRAY
21166: PUSH
21167: LD_INT 1
21169: ARRAY
21170: PPUSH
21171: LD_EXP 73
21175: PUSH
21176: LD_VAR 0 1
21180: ARRAY
21181: PUSH
21182: LD_VAR 0 2
21186: ARRAY
21187: PUSH
21188: LD_INT 2
21190: ARRAY
21191: PPUSH
21192: CALL_OW 458
21196: AND
21197: IFFALSE 21291
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21199: LD_EXP 73
21203: PUSH
21204: LD_VAR 0 1
21208: ARRAY
21209: PUSH
21210: LD_VAR 0 2
21214: ARRAY
21215: PUSH
21216: LD_INT 1
21218: ARRAY
21219: PPUSH
21220: LD_EXP 73
21224: PUSH
21225: LD_VAR 0 1
21229: ARRAY
21230: PUSH
21231: LD_VAR 0 2
21235: ARRAY
21236: PUSH
21237: LD_INT 2
21239: ARRAY
21240: PPUSH
21241: LD_VAR 0 3
21245: PPUSH
21246: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21250: LD_ADDR_EXP 73
21254: PUSH
21255: LD_EXP 73
21259: PPUSH
21260: LD_VAR 0 1
21264: PPUSH
21265: LD_EXP 73
21269: PUSH
21270: LD_VAR 0 1
21274: ARRAY
21275: PPUSH
21276: LD_VAR 0 2
21280: PPUSH
21281: CALL_OW 3
21285: PPUSH
21286: CALL_OW 1
21290: ST_TO_ADDR
// end ; end ;
21291: GO 21040
21293: POP
21294: POP
// end ;
21295: GO 20958
21297: POP
21298: POP
// end ;
21299: PPOPN 4
21301: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21302: LD_INT 0
21304: PPUSH
21305: PPUSH
// result := false ;
21306: LD_ADDR_VAR 0 4
21310: PUSH
21311: LD_INT 0
21313: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21314: LD_VAR 0 1
21318: PPUSH
21319: CALL_OW 264
21323: PUSH
21324: LD_INT 81
21326: EQUAL
21327: NOT
21328: IFFALSE 21332
// exit ;
21330: GO 21576
// index := GetElementIndex ( minersList , unit ) ;
21332: LD_ADDR_VAR 0 5
21336: PUSH
21337: LD_EXP 72
21341: PPUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL 28802 0 2
21351: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21352: LD_EXP 73
21356: PUSH
21357: LD_VAR 0 5
21361: ARRAY
21362: PUSH
21363: LD_EXP 74
21367: GREATEREQUAL
21368: IFFALSE 21372
// exit ;
21370: GO 21576
// ComMoveXY ( unit , x , y ) ;
21372: LD_VAR 0 1
21376: PPUSH
21377: LD_VAR 0 2
21381: PPUSH
21382: LD_VAR 0 3
21386: PPUSH
21387: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21391: LD_INT 35
21393: PPUSH
21394: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21398: LD_VAR 0 1
21402: PPUSH
21403: LD_VAR 0 2
21407: PPUSH
21408: LD_VAR 0 3
21412: PPUSH
21413: CALL 60848 0 3
21417: NOT
21418: IFFALSE 21431
21420: PUSH
21421: LD_VAR 0 1
21425: PPUSH
21426: CALL_OW 314
21430: AND
21431: IFFALSE 21435
// exit ;
21433: GO 21576
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21435: LD_VAR 0 2
21439: PPUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: CALL_OW 428
21449: PUSH
21450: LD_VAR 0 1
21454: EQUAL
21455: IFFALSE 21469
21457: PUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: CALL_OW 314
21467: NOT
21468: AND
21469: IFFALSE 21391
// PlaySoundXY ( x , y , PlantMine ) ;
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: LD_STRING PlantMine
21483: PPUSH
21484: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21488: LD_VAR 0 2
21492: PPUSH
21493: LD_VAR 0 3
21497: PPUSH
21498: LD_VAR 0 1
21502: PPUSH
21503: CALL_OW 255
21507: PPUSH
21508: LD_INT 0
21510: PPUSH
21511: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21515: LD_ADDR_EXP 73
21519: PUSH
21520: LD_EXP 73
21524: PPUSH
21525: LD_VAR 0 5
21529: PUSH
21530: LD_EXP 73
21534: PUSH
21535: LD_VAR 0 5
21539: ARRAY
21540: PUSH
21541: LD_INT 1
21543: PLUS
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: LD_VAR 0 2
21553: PUSH
21554: LD_VAR 0 3
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PPUSH
21563: CALL 29019 0 3
21567: ST_TO_ADDR
// result := true ;
21568: LD_ADDR_VAR 0 4
21572: PUSH
21573: LD_INT 1
21575: ST_TO_ADDR
// end ;
21576: LD_VAR 0 4
21580: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
21585: PPUSH
// if not unit in minersList then
21586: LD_VAR 0 1
21590: PUSH
21591: LD_EXP 72
21595: IN
21596: NOT
21597: IFFALSE 21601
// exit ;
21599: GO 21995
// index := GetElementIndex ( minersList , unit ) ;
21601: LD_ADDR_VAR 0 6
21605: PUSH
21606: LD_EXP 72
21610: PPUSH
21611: LD_VAR 0 1
21615: PPUSH
21616: CALL 28802 0 2
21620: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21621: LD_ADDR_VAR 0 5
21625: PUSH
21626: DOUBLE
21627: LD_EXP 73
21631: PUSH
21632: LD_VAR 0 6
21636: ARRAY
21637: INC
21638: ST_TO_ADDR
21639: LD_INT 1
21641: PUSH
21642: FOR_DOWNTO
21643: IFFALSE 21806
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21645: LD_EXP 73
21649: PUSH
21650: LD_VAR 0 6
21654: ARRAY
21655: PUSH
21656: LD_VAR 0 5
21660: ARRAY
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: PUSH
21666: LD_VAR 0 2
21670: EQUAL
21671: IFFALSE 21701
21673: PUSH
21674: LD_EXP 73
21678: PUSH
21679: LD_VAR 0 6
21683: ARRAY
21684: PUSH
21685: LD_VAR 0 5
21689: ARRAY
21690: PUSH
21691: LD_INT 2
21693: ARRAY
21694: PUSH
21695: LD_VAR 0 3
21699: EQUAL
21700: AND
21701: IFFALSE 21804
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21703: LD_EXP 73
21707: PUSH
21708: LD_VAR 0 6
21712: ARRAY
21713: PUSH
21714: LD_VAR 0 5
21718: ARRAY
21719: PUSH
21720: LD_INT 1
21722: ARRAY
21723: PPUSH
21724: LD_EXP 73
21728: PUSH
21729: LD_VAR 0 6
21733: ARRAY
21734: PUSH
21735: LD_VAR 0 5
21739: ARRAY
21740: PUSH
21741: LD_INT 2
21743: ARRAY
21744: PPUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 255
21754: PPUSH
21755: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21759: LD_ADDR_EXP 73
21763: PUSH
21764: LD_EXP 73
21768: PPUSH
21769: LD_VAR 0 6
21773: PPUSH
21774: LD_EXP 73
21778: PUSH
21779: LD_VAR 0 6
21783: ARRAY
21784: PPUSH
21785: LD_VAR 0 5
21789: PPUSH
21790: CALL_OW 3
21794: PPUSH
21795: CALL_OW 1
21799: ST_TO_ADDR
// exit ;
21800: POP
21801: POP
21802: GO 21995
// end ; end ;
21804: GO 21642
21806: POP
21807: POP
// for i := minerMinesList [ index ] downto 1 do
21808: LD_ADDR_VAR 0 5
21812: PUSH
21813: DOUBLE
21814: LD_EXP 73
21818: PUSH
21819: LD_VAR 0 6
21823: ARRAY
21824: INC
21825: ST_TO_ADDR
21826: LD_INT 1
21828: PUSH
21829: FOR_DOWNTO
21830: IFFALSE 21993
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21832: LD_EXP 73
21836: PUSH
21837: LD_VAR 0 6
21841: ARRAY
21842: PUSH
21843: LD_VAR 0 5
21847: ARRAY
21848: PUSH
21849: LD_INT 1
21851: ARRAY
21852: PPUSH
21853: LD_EXP 73
21857: PUSH
21858: LD_VAR 0 6
21862: ARRAY
21863: PUSH
21864: LD_VAR 0 5
21868: ARRAY
21869: PUSH
21870: LD_INT 2
21872: ARRAY
21873: PPUSH
21874: LD_VAR 0 2
21878: PPUSH
21879: LD_VAR 0 3
21883: PPUSH
21884: CALL_OW 298
21888: PUSH
21889: LD_INT 6
21891: LESS
21892: IFFALSE 21991
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21894: LD_EXP 73
21898: PUSH
21899: LD_VAR 0 6
21903: ARRAY
21904: PUSH
21905: LD_VAR 0 5
21909: ARRAY
21910: PUSH
21911: LD_INT 1
21913: ARRAY
21914: PPUSH
21915: LD_EXP 73
21919: PUSH
21920: LD_VAR 0 6
21924: ARRAY
21925: PUSH
21926: LD_VAR 0 5
21930: ARRAY
21931: PUSH
21932: LD_INT 2
21934: ARRAY
21935: PPUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 255
21945: PPUSH
21946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21950: LD_ADDR_EXP 73
21954: PUSH
21955: LD_EXP 73
21959: PPUSH
21960: LD_VAR 0 6
21964: PPUSH
21965: LD_EXP 73
21969: PUSH
21970: LD_VAR 0 6
21974: ARRAY
21975: PPUSH
21976: LD_VAR 0 5
21980: PPUSH
21981: CALL_OW 3
21985: PPUSH
21986: CALL_OW 1
21990: ST_TO_ADDR
// end ; end ;
21991: GO 21829
21993: POP
21994: POP
// end ;
21995: LD_VAR 0 4
21999: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 264
22020: PUSH
22021: LD_INT 81
22023: EQUAL
22024: NOT
22025: IFTRUE 22040
22027: PUSH
22028: LD_VAR 0 1
22032: PUSH
22033: LD_EXP 72
22037: IN
22038: NOT
22039: OR
22040: IFFALSE 22044
// exit ;
22042: GO 22370
// index := GetElementIndex ( minersList , unit ) ;
22044: LD_ADDR_VAR 0 6
22048: PUSH
22049: LD_EXP 72
22053: PPUSH
22054: LD_VAR 0 1
22058: PPUSH
22059: CALL 28802 0 2
22063: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22064: LD_ADDR_VAR 0 8
22068: PUSH
22069: LD_EXP 74
22073: PUSH
22074: LD_EXP 73
22078: PUSH
22079: LD_VAR 0 6
22083: ARRAY
22084: MINUS
22085: ST_TO_ADDR
// if not minesFreeAmount then
22086: LD_VAR 0 8
22090: NOT
22091: IFFALSE 22095
// exit ;
22093: GO 22370
// tmp := [ ] ;
22095: LD_ADDR_VAR 0 7
22099: PUSH
22100: EMPTY
22101: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22102: LD_ADDR_VAR 0 5
22106: PUSH
22107: DOUBLE
22108: LD_INT 1
22110: DEC
22111: ST_TO_ADDR
22112: LD_VAR 0 8
22116: PUSH
22117: FOR_TO
22118: IFFALSE 22317
// begin _d := rand ( 0 , 5 ) ;
22120: LD_ADDR_VAR 0 11
22124: PUSH
22125: LD_INT 0
22127: PPUSH
22128: LD_INT 5
22130: PPUSH
22131: CALL_OW 12
22135: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22136: LD_ADDR_VAR 0 12
22140: PUSH
22141: LD_INT 2
22143: PPUSH
22144: LD_INT 6
22146: PPUSH
22147: CALL_OW 12
22151: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22152: LD_ADDR_VAR 0 9
22156: PUSH
22157: LD_VAR 0 2
22161: PPUSH
22162: LD_VAR 0 11
22166: PPUSH
22167: LD_VAR 0 12
22171: PPUSH
22172: CALL_OW 272
22176: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22177: LD_ADDR_VAR 0 10
22181: PUSH
22182: LD_VAR 0 3
22186: PPUSH
22187: LD_VAR 0 11
22191: PPUSH
22192: LD_VAR 0 12
22196: PPUSH
22197: CALL_OW 273
22201: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22202: LD_VAR 0 9
22206: PPUSH
22207: LD_VAR 0 10
22211: PPUSH
22212: CALL_OW 488
22216: IFFALSE 22240
22218: PUSH
22219: LD_VAR 0 9
22223: PUSH
22224: LD_VAR 0 10
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_VAR 0 7
22237: IN
22238: NOT
22239: AND
22240: IFFALSE 22259
22242: PUSH
22243: LD_VAR 0 9
22247: PPUSH
22248: LD_VAR 0 10
22252: PPUSH
22253: CALL_OW 458
22257: NOT
22258: AND
22259: IFFALSE 22301
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22261: LD_ADDR_VAR 0 7
22265: PUSH
22266: LD_VAR 0 7
22270: PPUSH
22271: LD_VAR 0 7
22275: PUSH
22276: LD_INT 1
22278: PLUS
22279: PPUSH
22280: LD_VAR 0 9
22284: PUSH
22285: LD_VAR 0 10
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PPUSH
22294: CALL_OW 1
22298: ST_TO_ADDR
22299: GO 22315
// i := i - 1 ;
22301: LD_ADDR_VAR 0 5
22305: PUSH
22306: LD_VAR 0 5
22310: PUSH
22311: LD_INT 1
22313: MINUS
22314: ST_TO_ADDR
// end ;
22315: GO 22117
22317: POP
22318: POP
// for i in tmp do
22319: LD_ADDR_VAR 0 5
22323: PUSH
22324: LD_VAR 0 7
22328: PUSH
22329: FOR_IN
22330: IFFALSE 22368
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_VAR 0 5
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: PPUSH
22346: LD_VAR 0 5
22350: PUSH
22351: LD_INT 2
22353: ARRAY
22354: PPUSH
22355: CALL 21302 0 3
22359: NOT
22360: IFFALSE 22366
// exit ;
22362: POP
22363: POP
22364: GO 22370
22366: GO 22329
22368: POP
22369: POP
// end ;
22370: LD_VAR 0 4
22374: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22375: LD_INT 0
22377: PPUSH
22378: PPUSH
22379: PPUSH
22380: PPUSH
22381: PPUSH
22382: PPUSH
22383: PPUSH
22384: PPUSH
22385: PPUSH
// if GetClass ( unit ) <> class_sniper then
22386: LD_VAR 0 1
22390: PPUSH
22391: CALL_OW 257
22395: PUSH
22396: LD_INT 5
22398: NONEQUAL
22399: IFFALSE 22403
// exit ;
22401: GO 22873
// dist := 8 ;
22403: LD_ADDR_VAR 0 5
22407: PUSH
22408: LD_INT 8
22410: ST_TO_ADDR
// viewRange := 12 ;
22411: LD_ADDR_VAR 0 8
22415: PUSH
22416: LD_INT 12
22418: ST_TO_ADDR
// side := GetSide ( unit ) ;
22419: LD_ADDR_VAR 0 6
22423: PUSH
22424: LD_VAR 0 1
22428: PPUSH
22429: CALL_OW 255
22433: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22434: LD_INT 61
22436: PPUSH
22437: LD_VAR 0 6
22441: PPUSH
22442: CALL_OW 321
22446: PUSH
22447: LD_INT 2
22449: EQUAL
22450: IFFALSE 22460
// viewRange := 16 ;
22452: LD_ADDR_VAR 0 8
22456: PUSH
22457: LD_INT 16
22459: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22460: LD_VAR 0 1
22464: PPUSH
22465: LD_VAR 0 2
22469: PPUSH
22470: LD_VAR 0 3
22474: PPUSH
22475: CALL_OW 297
22479: PUSH
22480: LD_VAR 0 5
22484: GREATER
22485: IFFALSE 22564
// begin ComMoveXY ( unit , x , y ) ;
22487: LD_VAR 0 1
22491: PPUSH
22492: LD_VAR 0 2
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22506: LD_INT 35
22508: PPUSH
22509: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22513: LD_VAR 0 1
22517: PPUSH
22518: LD_VAR 0 2
22522: PPUSH
22523: LD_VAR 0 3
22527: PPUSH
22528: CALL 60848 0 3
22532: NOT
22533: IFFALSE 22537
// exit ;
22535: GO 22873
// until GetDistUnitXY ( unit , x , y ) < dist ;
22537: LD_VAR 0 1
22541: PPUSH
22542: LD_VAR 0 2
22546: PPUSH
22547: LD_VAR 0 3
22551: PPUSH
22552: CALL_OW 297
22556: PUSH
22557: LD_VAR 0 5
22561: LESS
22562: IFFALSE 22506
// end ; ComTurnXY ( unit , x , y ) ;
22564: LD_VAR 0 1
22568: PPUSH
22569: LD_VAR 0 2
22573: PPUSH
22574: LD_VAR 0 3
22578: PPUSH
22579: CALL_OW 118
// repeat if Multiplayer then
22583: LD_OWVAR 4
22587: IFFALSE 22598
// wait ( 35 ) else
22589: LD_INT 35
22591: PPUSH
22592: CALL_OW 67
22596: GO 22605
// wait ( 5 ) ;
22598: LD_INT 5
22600: PPUSH
22601: CALL_OW 67
// _d := GetDir ( unit ) ;
22605: LD_ADDR_VAR 0 11
22609: PUSH
22610: LD_VAR 0 1
22614: PPUSH
22615: CALL_OW 254
22619: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
22620: LD_ADDR_VAR 0 7
22624: PUSH
22625: LD_VAR 0 1
22629: PPUSH
22630: CALL_OW 250
22634: PPUSH
22635: LD_VAR 0 1
22639: PPUSH
22640: CALL_OW 251
22644: PPUSH
22645: LD_VAR 0 2
22649: PPUSH
22650: LD_VAR 0 3
22654: PPUSH
22655: CALL 63484 0 4
22659: ST_TO_ADDR
// until dir = _d ;
22660: LD_VAR 0 7
22664: PUSH
22665: LD_VAR 0 11
22669: EQUAL
22670: IFFALSE 22583
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
22672: LD_ADDR_VAR 0 9
22676: PUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL_OW 250
22686: PPUSH
22687: LD_VAR 0 7
22691: PPUSH
22692: LD_VAR 0 5
22696: PPUSH
22697: CALL_OW 272
22701: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
22702: LD_ADDR_VAR 0 10
22706: PUSH
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 251
22716: PPUSH
22717: LD_VAR 0 7
22721: PPUSH
22722: LD_VAR 0 5
22726: PPUSH
22727: CALL_OW 273
22731: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22732: LD_VAR 0 9
22736: PPUSH
22737: LD_VAR 0 10
22741: PPUSH
22742: CALL_OW 488
22746: NOT
22747: IFFALSE 22751
// exit ;
22749: GO 22873
// ComAnimCustom ( unit , 1 ) ;
22751: LD_VAR 0 1
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 592
// p := 0 ;
22763: LD_ADDR_VAR 0 12
22767: PUSH
22768: LD_INT 0
22770: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22771: LD_VAR 0 9
22775: PPUSH
22776: LD_VAR 0 10
22780: PPUSH
22781: LD_VAR 0 6
22785: PPUSH
22786: LD_VAR 0 8
22790: PPUSH
22791: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
22795: LD_INT 35
22797: PPUSH
22798: CALL_OW 67
// p := Inc ( p ) ;
22802: LD_ADDR_VAR 0 12
22806: PUSH
22807: LD_VAR 0 12
22811: PPUSH
22812: CALL 63440 0 1
22816: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
22817: LD_VAR 0 12
22821: PUSH
22822: LD_INT 3
22824: EQUAL
22825: IFTRUE 22839
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 302
22837: NOT
22838: OR
22839: IFTRUE 22852
22841: PUSH
22842: LD_VAR 0 1
22846: PPUSH
22847: CALL_OW 301
22851: OR
22852: IFFALSE 22795
// RemoveSeeing ( _x , _y , side ) ;
22854: LD_VAR 0 9
22858: PPUSH
22859: LD_VAR 0 10
22863: PPUSH
22864: LD_VAR 0 6
22868: PPUSH
22869: CALL_OW 331
// end ;
22873: LD_VAR 0 4
22877: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
22878: LD_INT 0
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
22887: PPUSH
22888: PPUSH
22889: PPUSH
22890: PPUSH
// if not unit then
22891: LD_VAR 0 1
22895: NOT
22896: IFFALSE 22900
// exit ;
22898: GO 23171
// side := GetSide ( unit ) ;
22900: LD_ADDR_VAR 0 3
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 255
22914: ST_TO_ADDR
// x := GetX ( unit ) ;
22915: LD_ADDR_VAR 0 5
22919: PUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 250
22929: ST_TO_ADDR
// y := GetY ( unit ) ;
22930: LD_ADDR_VAR 0 6
22934: PUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: CALL_OW 251
22944: ST_TO_ADDR
// r := 8 ;
22945: LD_ADDR_VAR 0 4
22949: PUSH
22950: LD_INT 8
22952: ST_TO_ADDR
// if x - r < 0 then
22953: LD_VAR 0 5
22957: PUSH
22958: LD_VAR 0 4
22962: MINUS
22963: PUSH
22964: LD_INT 0
22966: LESS
22967: IFFALSE 22979
// min_x := 0 else
22969: LD_ADDR_VAR 0 7
22973: PUSH
22974: LD_INT 0
22976: ST_TO_ADDR
22977: GO 22995
// min_x := x - r ;
22979: LD_ADDR_VAR 0 7
22983: PUSH
22984: LD_VAR 0 5
22988: PUSH
22989: LD_VAR 0 4
22993: MINUS
22994: ST_TO_ADDR
// if y - r < 0 then
22995: LD_VAR 0 6
22999: PUSH
23000: LD_VAR 0 4
23004: MINUS
23005: PUSH
23006: LD_INT 0
23008: LESS
23009: IFFALSE 23021
// min_y := 0 else
23011: LD_ADDR_VAR 0 8
23015: PUSH
23016: LD_INT 0
23018: ST_TO_ADDR
23019: GO 23037
// min_y := y - r ;
23021: LD_ADDR_VAR 0 8
23025: PUSH
23026: LD_VAR 0 6
23030: PUSH
23031: LD_VAR 0 4
23035: MINUS
23036: ST_TO_ADDR
// max_x := x + r ;
23037: LD_ADDR_VAR 0 9
23041: PUSH
23042: LD_VAR 0 5
23046: PUSH
23047: LD_VAR 0 4
23051: PLUS
23052: ST_TO_ADDR
// max_y := y + r ;
23053: LD_ADDR_VAR 0 10
23057: PUSH
23058: LD_VAR 0 6
23062: PUSH
23063: LD_VAR 0 4
23067: PLUS
23068: ST_TO_ADDR
// for _x = min_x to max_x do
23069: LD_ADDR_VAR 0 11
23073: PUSH
23074: DOUBLE
23075: LD_VAR 0 7
23079: DEC
23080: ST_TO_ADDR
23081: LD_VAR 0 9
23085: PUSH
23086: FOR_TO
23087: IFFALSE 23169
// for _y = min_y to max_y do
23089: LD_ADDR_VAR 0 12
23093: PUSH
23094: DOUBLE
23095: LD_VAR 0 8
23099: DEC
23100: ST_TO_ADDR
23101: LD_VAR 0 10
23105: PUSH
23106: FOR_TO
23107: IFFALSE 23165
// begin if not ValidHex ( _x , _y ) then
23109: LD_VAR 0 11
23113: PPUSH
23114: LD_VAR 0 12
23118: PPUSH
23119: CALL_OW 488
23123: NOT
23124: IFFALSE 23128
// continue ;
23126: GO 23106
// if MineAtPos ( _x , _y ) then
23128: LD_VAR 0 11
23132: PPUSH
23133: LD_VAR 0 12
23137: PPUSH
23138: CALL_OW 458
23142: IFFALSE 23163
// ViewMineAtPos ( _x , _y , side ) ;
23144: LD_VAR 0 11
23148: PPUSH
23149: LD_VAR 0 12
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: CALL_OW 457
// end ;
23163: GO 23106
23165: POP
23166: POP
23167: GO 23086
23169: POP
23170: POP
// end ;
23171: LD_VAR 0 2
23175: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
23176: LD_INT 0
23178: PPUSH
23179: PPUSH
23180: PPUSH
23181: PPUSH
23182: PPUSH
23183: PPUSH
// if not units then
23184: LD_VAR 0 1
23188: NOT
23189: IFFALSE 23193
// exit ;
23191: GO 23623
// scaners := [ ] ;
23193: LD_ADDR_VAR 0 6
23197: PUSH
23198: EMPTY
23199: ST_TO_ADDR
// for i in units do
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_VAR 0 1
23209: PUSH
23210: FOR_IN
23211: IFFALSE 23368
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
23213: LD_VAR 0 3
23217: PPUSH
23218: CALL_OW 264
23222: PUSH
23223: LD_INT 11
23225: NONEQUAL
23226: IFTRUE 23240
23228: PUSH
23229: LD_VAR 0 3
23233: PPUSH
23234: CALL_OW 302
23238: NOT
23239: OR
23240: IFTRUE 23257
23242: PUSH
23243: LD_VAR 0 3
23247: PPUSH
23248: CALL_OW 110
23252: PUSH
23253: LD_INT 502
23255: EQUAL
23256: OR
23257: IFFALSE 23261
// continue ;
23259: GO 23210
// ComStop ( i ) ;
23261: LD_VAR 0 3
23265: PPUSH
23266: CALL_OW 141
// x := GetX ( i ) ;
23270: LD_ADDR_VAR 0 4
23274: PUSH
23275: LD_VAR 0 3
23279: PPUSH
23280: CALL_OW 250
23284: ST_TO_ADDR
// y := GetY ( i ) ;
23285: LD_ADDR_VAR 0 5
23289: PUSH
23290: LD_VAR 0 3
23294: PPUSH
23295: CALL_OW 251
23299: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23300: LD_VAR 0 3
23304: PPUSH
23305: CALL_OW 255
23309: PUSH
23310: LD_OWVAR 2
23314: EQUAL
23315: IFFALSE 23334
// PlaySoundXY ( x , y , mineDetector ) ;
23317: LD_VAR 0 4
23321: PPUSH
23322: LD_VAR 0 5
23326: PPUSH
23327: LD_STRING mineDetector
23329: PPUSH
23330: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23334: LD_ADDR_VAR 0 6
23338: PUSH
23339: LD_VAR 0 6
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: CALL 62067 0 2
23353: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
23354: LD_VAR 0 3
23358: PPUSH
23359: LD_INT 502
23361: PPUSH
23362: CALL_OW 109
// end ;
23366: GO 23210
23368: POP
23369: POP
// if not scaners then
23370: LD_VAR 0 6
23374: NOT
23375: IFFALSE 23379
// exit ;
23377: GO 23623
// wait ( 3 ) ;
23379: LD_INT 3
23381: PPUSH
23382: CALL_OW 67
// timer := 6 ;
23386: LD_ADDR_VAR 0 7
23390: PUSH
23391: LD_INT 6
23393: ST_TO_ADDR
// repeat for i in scaners do
23394: LD_ADDR_VAR 0 3
23398: PUSH
23399: LD_VAR 0 6
23403: PUSH
23404: FOR_IN
23405: IFFALSE 23521
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
23407: LD_VAR 0 3
23411: PPUSH
23412: CALL_OW 302
23416: NOT
23417: IFTRUE 23430
23419: PUSH
23420: LD_VAR 0 3
23424: PPUSH
23425: CALL_OW 314
23429: OR
23430: IFTRUE 23461
23432: PUSH
23433: LD_VAR 0 3
23437: PPUSH
23438: CALL_OW 263
23442: PUSH
23443: LD_INT 1
23445: EQUAL
23446: IFFALSE 23460
23448: PUSH
23449: LD_VAR 0 3
23453: PPUSH
23454: CALL_OW 311
23458: NOT
23459: AND
23460: OR
23461: IFFALSE 23505
// begin SetUnitDisplayNumber ( i , 0 ) ;
23463: LD_VAR 0 3
23467: PPUSH
23468: LD_INT 0
23470: PPUSH
23471: CALL_OW 505
// SetTag ( i , 0 ) ;
23475: LD_VAR 0 3
23479: PPUSH
23480: LD_INT 0
23482: PPUSH
23483: CALL_OW 109
// scaners := scaners diff i ;
23487: LD_ADDR_VAR 0 6
23491: PUSH
23492: LD_VAR 0 6
23496: PUSH
23497: LD_VAR 0 3
23501: DIFF
23502: ST_TO_ADDR
// continue ;
23503: GO 23404
// end ; SetUnitDisplayNumber ( i , timer ) ;
23505: LD_VAR 0 3
23509: PPUSH
23510: LD_VAR 0 7
23514: PPUSH
23515: CALL_OW 505
// end ;
23519: GO 23404
23521: POP
23522: POP
// if not scaners then
23523: LD_VAR 0 6
23527: NOT
23528: IFFALSE 23532
// exit ;
23530: GO 23623
// timer := Dec ( timer ) ;
23532: LD_ADDR_VAR 0 7
23536: PUSH
23537: LD_VAR 0 7
23541: PPUSH
23542: CALL 63462 0 1
23546: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23547: LD_INT 35
23549: PPUSH
23550: CALL_OW 67
// until timer = 0 ;
23554: LD_VAR 0 7
23558: PUSH
23559: LD_INT 0
23561: EQUAL
23562: IFFALSE 23394
// if not scaners then
23564: LD_VAR 0 6
23568: NOT
23569: IFFALSE 23573
// exit ;
23571: GO 23623
// for i in scaners do
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_VAR 0 6
23582: PUSH
23583: FOR_IN
23584: IFFALSE 23621
// begin SetUnitDisplayNumber ( i , 0 ) ;
23586: LD_VAR 0 3
23590: PPUSH
23591: LD_INT 0
23593: PPUSH
23594: CALL_OW 505
// SetTag ( i , 0 ) ;
23598: LD_VAR 0 3
23602: PPUSH
23603: LD_INT 0
23605: PPUSH
23606: CALL_OW 109
// RevealDetectorMine ( i ) ;
23610: LD_VAR 0 3
23614: PPUSH
23615: CALL 22878 0 1
// end ;
23619: GO 23583
23621: POP
23622: POP
// end ;
23623: LD_VAR 0 2
23627: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
23628: LD_INT 0
23630: PPUSH
// if p1 = mine_detector_mode then
23631: LD_VAR 0 2
23635: PUSH
23636: LD_INT 103
23638: EQUAL
23639: IFFALSE 23650
// DetectMine ( units ) ;
23641: LD_VAR 0 1
23645: PPUSH
23646: CALL 23176 0 1
// end ; end_of_file
23650: LD_VAR 0 7
23654: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
23655: LD_VAR 0 1
23659: PPUSH
23660: LD_VAR 0 2
23664: PPUSH
23665: LD_VAR 0 3
23669: PPUSH
23670: LD_VAR 0 4
23674: PPUSH
23675: LD_VAR 0 5
23679: PPUSH
23680: LD_VAR 0 6
23684: PPUSH
23685: CALL 1545 0 6
// end ;
23689: PPOPN 6
23691: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
23692: LD_INT 0
23694: PPUSH
// begin if not units then
23695: LD_VAR 0 1
23699: NOT
23700: IFFALSE 23704
// exit ;
23702: GO 23738
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
23704: LD_VAR 0 1
23708: PPUSH
23709: LD_VAR 0 2
23713: PPUSH
23714: LD_VAR 0 3
23718: PPUSH
23719: LD_VAR 0 4
23723: PPUSH
23724: LD_VAR 0 5
23728: PPUSH
23729: LD_VAR 0 6
23733: PPUSH
23734: CALL 23628 0 6
// end ;
23738: PPOPN 7
23740: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
23741: CALL 1432 0 0
// end ; end_of_file
23745: PPOPN 1
23747: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
23748: LD_VAR 0 1
23752: PUSH
23753: LD_INT 200
23755: DOUBLE
23756: GREATEREQUAL
23757: IFFALSE 23765
23759: LD_INT 299
23761: DOUBLE
23762: LESSEQUAL
23763: IFTRUE 23767
23765: GO 23799
23767: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
23768: LD_VAR 0 1
23772: PPUSH
23773: LD_VAR 0 2
23777: PPUSH
23778: LD_VAR 0 3
23782: PPUSH
23783: LD_VAR 0 4
23787: PPUSH
23788: LD_VAR 0 5
23792: PPUSH
23793: CALL 18121 0 5
23797: GO 23876
23799: LD_INT 300
23801: DOUBLE
23802: GREATEREQUAL
23803: IFFALSE 23811
23805: LD_INT 399
23807: DOUBLE
23808: LESSEQUAL
23809: IFTRUE 23813
23811: GO 23875
23813: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
23814: LD_VAR 0 1
23818: PPUSH
23819: LD_VAR 0 2
23823: PPUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: LD_VAR 0 4
23833: PPUSH
23834: LD_VAR 0 5
23838: PPUSH
23839: LD_VAR 0 6
23843: PPUSH
23844: LD_VAR 0 7
23848: PPUSH
23849: LD_VAR 0 8
23853: PPUSH
23854: LD_VAR 0 9
23858: PPUSH
23859: LD_VAR 0 10
23863: PPUSH
23864: LD_VAR 0 11
23868: PPUSH
23869: CALL 14005 0 11
23873: GO 23876
23875: POP
// end ;
23876: PPOPN 11
23878: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
23879: LD_VAR 0 1
23883: PPUSH
23884: LD_VAR 0 2
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: LD_VAR 0 4
23898: PPUSH
23899: LD_VAR 0 5
23903: PPUSH
23904: CALL 17502 0 5
// end ; end_of_file
23908: PPOPN 5
23910: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23911: LD_INT 0
23913: PPUSH
23914: PPUSH
// if exist_mode then
23915: LD_VAR 0 2
23919: IFFALSE 23965
// begin unit := CreateCharacter ( prefix & ident ) ;
23921: LD_ADDR_VAR 0 5
23925: PUSH
23926: LD_VAR 0 3
23930: PUSH
23931: LD_VAR 0 1
23935: STR
23936: PPUSH
23937: CALL_OW 34
23941: ST_TO_ADDR
// if unit then
23942: LD_VAR 0 5
23946: IFFALSE 23963
// DeleteCharacters ( prefix & ident ) ;
23948: LD_VAR 0 3
23952: PUSH
23953: LD_VAR 0 1
23957: STR
23958: PPUSH
23959: CALL_OW 40
// end else
23963: GO 23980
// unit := NewCharacter ( ident ) ;
23965: LD_ADDR_VAR 0 5
23969: PUSH
23970: LD_VAR 0 1
23974: PPUSH
23975: CALL_OW 25
23979: ST_TO_ADDR
// result := unit ;
23980: LD_ADDR_VAR 0 4
23984: PUSH
23985: LD_VAR 0 5
23989: ST_TO_ADDR
// end ;
23990: LD_VAR 0 4
23994: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
// if exist_mode then
23999: LD_VAR 0 2
24003: IFFALSE 24028
// unit := CreateCharacter ( prefix & ident ) else
24005: LD_ADDR_VAR 0 5
24009: PUSH
24010: LD_VAR 0 3
24014: PUSH
24015: LD_VAR 0 1
24019: STR
24020: PPUSH
24021: CALL_OW 34
24025: ST_TO_ADDR
24026: GO 24043
// unit := NewCharacter ( ident ) ;
24028: LD_ADDR_VAR 0 5
24032: PUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 25
24042: ST_TO_ADDR
// result := unit ;
24043: LD_ADDR_VAR 0 4
24047: PUSH
24048: LD_VAR 0 5
24052: ST_TO_ADDR
// end ;
24053: LD_VAR 0 4
24057: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
// if not side or not nation then
24062: LD_VAR 0 1
24066: NOT
24067: IFTRUE 24076
24069: PUSH
24070: LD_VAR 0 2
24074: NOT
24075: OR
24076: IFFALSE 24080
// exit ;
24078: GO 24874
// case nation of nation_american :
24080: LD_VAR 0 2
24084: PUSH
24085: LD_INT 1
24087: DOUBLE
24088: EQUAL
24089: IFTRUE 24093
24091: GO 24315
24093: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24094: LD_ADDR_VAR 0 4
24098: PUSH
24099: LD_INT 35
24101: PUSH
24102: LD_INT 45
24104: PUSH
24105: LD_INT 46
24107: PUSH
24108: LD_INT 47
24110: PUSH
24111: LD_INT 82
24113: PUSH
24114: LD_INT 83
24116: PUSH
24117: LD_INT 84
24119: PUSH
24120: LD_INT 85
24122: PUSH
24123: LD_INT 86
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 6
24134: PUSH
24135: LD_INT 15
24137: PUSH
24138: LD_INT 16
24140: PUSH
24141: LD_INT 7
24143: PUSH
24144: LD_INT 12
24146: PUSH
24147: LD_INT 13
24149: PUSH
24150: LD_INT 10
24152: PUSH
24153: LD_INT 14
24155: PUSH
24156: LD_INT 20
24158: PUSH
24159: LD_INT 21
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_INT 25
24167: PUSH
24168: LD_INT 32
24170: PUSH
24171: LD_INT 27
24173: PUSH
24174: LD_INT 36
24176: PUSH
24177: LD_INT 69
24179: PUSH
24180: LD_INT 39
24182: PUSH
24183: LD_INT 34
24185: PUSH
24186: LD_INT 40
24188: PUSH
24189: LD_INT 48
24191: PUSH
24192: LD_INT 49
24194: PUSH
24195: LD_INT 50
24197: PUSH
24198: LD_INT 51
24200: PUSH
24201: LD_INT 52
24203: PUSH
24204: LD_INT 53
24206: PUSH
24207: LD_INT 54
24209: PUSH
24210: LD_INT 55
24212: PUSH
24213: LD_INT 56
24215: PUSH
24216: LD_INT 57
24218: PUSH
24219: LD_INT 58
24221: PUSH
24222: LD_INT 59
24224: PUSH
24225: LD_INT 60
24227: PUSH
24228: LD_INT 61
24230: PUSH
24231: LD_INT 62
24233: PUSH
24234: LD_INT 80
24236: PUSH
24237: LD_INT 82
24239: PUSH
24240: LD_INT 83
24242: PUSH
24243: LD_INT 84
24245: PUSH
24246: LD_INT 85
24248: PUSH
24249: LD_INT 86
24251: PUSH
24252: LD_INT 90
24254: PUSH
24255: LD_INT 93
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: ST_TO_ADDR
24313: GO 24796
24315: LD_INT 2
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24557
24323: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24324: LD_ADDR_VAR 0 4
24328: PUSH
24329: LD_INT 35
24331: PUSH
24332: LD_INT 45
24334: PUSH
24335: LD_INT 46
24337: PUSH
24338: LD_INT 47
24340: PUSH
24341: LD_INT 82
24343: PUSH
24344: LD_INT 83
24346: PUSH
24347: LD_INT 84
24349: PUSH
24350: LD_INT 85
24352: PUSH
24353: LD_INT 87
24355: PUSH
24356: LD_INT 70
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: LD_INT 11
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 4
24370: PUSH
24371: LD_INT 5
24373: PUSH
24374: LD_INT 6
24376: PUSH
24377: LD_INT 15
24379: PUSH
24380: LD_INT 18
24382: PUSH
24383: LD_INT 7
24385: PUSH
24386: LD_INT 17
24388: PUSH
24389: LD_INT 8
24391: PUSH
24392: LD_INT 20
24394: PUSH
24395: LD_INT 21
24397: PUSH
24398: LD_INT 22
24400: PUSH
24401: LD_INT 72
24403: PUSH
24404: LD_INT 26
24406: PUSH
24407: LD_INT 69
24409: PUSH
24410: LD_INT 39
24412: PUSH
24413: LD_INT 40
24415: PUSH
24416: LD_INT 41
24418: PUSH
24419: LD_INT 42
24421: PUSH
24422: LD_INT 43
24424: PUSH
24425: LD_INT 48
24427: PUSH
24428: LD_INT 49
24430: PUSH
24431: LD_INT 50
24433: PUSH
24434: LD_INT 51
24436: PUSH
24437: LD_INT 52
24439: PUSH
24440: LD_INT 53
24442: PUSH
24443: LD_INT 54
24445: PUSH
24446: LD_INT 55
24448: PUSH
24449: LD_INT 56
24451: PUSH
24452: LD_INT 60
24454: PUSH
24455: LD_INT 61
24457: PUSH
24458: LD_INT 62
24460: PUSH
24461: LD_INT 66
24463: PUSH
24464: LD_INT 67
24466: PUSH
24467: LD_INT 68
24469: PUSH
24470: LD_INT 81
24472: PUSH
24473: LD_INT 82
24475: PUSH
24476: LD_INT 83
24478: PUSH
24479: LD_INT 84
24481: PUSH
24482: LD_INT 85
24484: PUSH
24485: LD_INT 87
24487: PUSH
24488: LD_INT 88
24490: PUSH
24491: LD_INT 92
24493: PUSH
24494: LD_INT 94
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 24796
24557: LD_INT 3
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24795
24565: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24566: LD_ADDR_VAR 0 4
24570: PUSH
24571: LD_INT 46
24573: PUSH
24574: LD_INT 47
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: LD_INT 82
24585: PUSH
24586: LD_INT 83
24588: PUSH
24589: LD_INT 84
24591: PUSH
24592: LD_INT 85
24594: PUSH
24595: LD_INT 86
24597: PUSH
24598: LD_INT 11
24600: PUSH
24601: LD_INT 9
24603: PUSH
24604: LD_INT 20
24606: PUSH
24607: LD_INT 19
24609: PUSH
24610: LD_INT 21
24612: PUSH
24613: LD_INT 24
24615: PUSH
24616: LD_INT 22
24618: PUSH
24619: LD_INT 25
24621: PUSH
24622: LD_INT 28
24624: PUSH
24625: LD_INT 29
24627: PUSH
24628: LD_INT 30
24630: PUSH
24631: LD_INT 31
24633: PUSH
24634: LD_INT 37
24636: PUSH
24637: LD_INT 38
24639: PUSH
24640: LD_INT 32
24642: PUSH
24643: LD_INT 27
24645: PUSH
24646: LD_INT 33
24648: PUSH
24649: LD_INT 69
24651: PUSH
24652: LD_INT 39
24654: PUSH
24655: LD_INT 34
24657: PUSH
24658: LD_INT 40
24660: PUSH
24661: LD_INT 71
24663: PUSH
24664: LD_INT 23
24666: PUSH
24667: LD_INT 44
24669: PUSH
24670: LD_INT 48
24672: PUSH
24673: LD_INT 49
24675: PUSH
24676: LD_INT 50
24678: PUSH
24679: LD_INT 51
24681: PUSH
24682: LD_INT 52
24684: PUSH
24685: LD_INT 53
24687: PUSH
24688: LD_INT 54
24690: PUSH
24691: LD_INT 55
24693: PUSH
24694: LD_INT 56
24696: PUSH
24697: LD_INT 57
24699: PUSH
24700: LD_INT 58
24702: PUSH
24703: LD_INT 59
24705: PUSH
24706: LD_INT 63
24708: PUSH
24709: LD_INT 64
24711: PUSH
24712: LD_INT 65
24714: PUSH
24715: LD_INT 82
24717: PUSH
24718: LD_INT 83
24720: PUSH
24721: LD_INT 84
24723: PUSH
24724: LD_INT 85
24726: PUSH
24727: LD_INT 86
24729: PUSH
24730: LD_INT 89
24732: PUSH
24733: LD_INT 91
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 24796
24795: POP
// if state > - 1 and state < 3 then
24796: LD_VAR 0 3
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: GREATER
24805: IFFALSE 24817
24807: PUSH
24808: LD_VAR 0 3
24812: PUSH
24813: LD_INT 3
24815: LESS
24816: AND
24817: IFFALSE 24874
// for i in result do
24819: LD_ADDR_VAR 0 5
24823: PUSH
24824: LD_VAR 0 4
24828: PUSH
24829: FOR_IN
24830: IFFALSE 24872
// if GetTech ( i , side ) <> state then
24832: LD_VAR 0 5
24836: PPUSH
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL_OW 321
24846: PUSH
24847: LD_VAR 0 3
24851: NONEQUAL
24852: IFFALSE 24870
// result := result diff i ;
24854: LD_ADDR_VAR 0 4
24858: PUSH
24859: LD_VAR 0 4
24863: PUSH
24864: LD_VAR 0 5
24868: DIFF
24869: ST_TO_ADDR
24870: GO 24829
24872: POP
24873: POP
// end ;
24874: LD_VAR 0 4
24878: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
24883: PPUSH
// result := true ;
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_INT 1
24891: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24892: LD_ADDR_VAR 0 5
24896: PUSH
24897: LD_VAR 0 2
24901: PPUSH
24902: CALL_OW 480
24906: ST_TO_ADDR
// if not tmp then
24907: LD_VAR 0 5
24911: NOT
24912: IFFALSE 24916
// exit ;
24914: GO 24965
// for i in tmp do
24916: LD_ADDR_VAR 0 4
24920: PUSH
24921: LD_VAR 0 5
24925: PUSH
24926: FOR_IN
24927: IFFALSE 24963
// if GetTech ( i , side ) <> state_researched then
24929: LD_VAR 0 4
24933: PPUSH
24934: LD_VAR 0 1
24938: PPUSH
24939: CALL_OW 321
24943: PUSH
24944: LD_INT 2
24946: NONEQUAL
24947: IFFALSE 24961
// begin result := false ;
24949: LD_ADDR_VAR 0 3
24953: PUSH
24954: LD_INT 0
24956: ST_TO_ADDR
// exit ;
24957: POP
24958: POP
24959: GO 24965
// end ;
24961: GO 24926
24963: POP
24964: POP
// end ;
24965: LD_VAR 0 3
24969: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24970: LD_INT 0
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24985: LD_VAR 0 1
24989: NOT
24990: IFTRUE 25007
24992: PUSH
24993: LD_VAR 0 1
24997: PPUSH
24998: CALL_OW 257
25002: PUSH
25003: LD_INT 9
25005: NONEQUAL
25006: OR
25007: IFFALSE 25011
// exit ;
25009: GO 25590
// side := GetSide ( unit ) ;
25011: LD_ADDR_VAR 0 9
25015: PUSH
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL_OW 255
25025: ST_TO_ADDR
// tech_space := tech_spacanom ;
25026: LD_ADDR_VAR 0 12
25030: PUSH
25031: LD_INT 29
25033: ST_TO_ADDR
// tech_time := tech_taurad ;
25034: LD_ADDR_VAR 0 13
25038: PUSH
25039: LD_INT 28
25041: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25042: LD_ADDR_VAR 0 11
25046: PUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: CALL_OW 310
25056: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25057: LD_VAR 0 11
25061: PPUSH
25062: CALL_OW 247
25066: PUSH
25067: LD_INT 2
25069: EQUAL
25070: IFFALSE 25074
// exit ;
25072: GO 25590
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25074: LD_ADDR_VAR 0 8
25078: PUSH
25079: LD_INT 81
25081: PUSH
25082: LD_VAR 0 9
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 3
25093: PUSH
25094: LD_INT 21
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PPUSH
25112: CALL_OW 69
25116: ST_TO_ADDR
// if not tmp then
25117: LD_VAR 0 8
25121: NOT
25122: IFFALSE 25126
// exit ;
25124: GO 25590
// if in_unit then
25126: LD_VAR 0 11
25130: IFFALSE 25154
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25132: LD_ADDR_VAR 0 10
25136: PUSH
25137: LD_VAR 0 8
25141: PPUSH
25142: LD_VAR 0 11
25146: PPUSH
25147: CALL_OW 74
25151: ST_TO_ADDR
25152: GO 25174
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25154: LD_ADDR_VAR 0 10
25158: PUSH
25159: LD_VAR 0 8
25163: PPUSH
25164: LD_VAR 0 1
25168: PPUSH
25169: CALL_OW 74
25173: ST_TO_ADDR
// if not enemy then
25174: LD_VAR 0 10
25178: NOT
25179: IFFALSE 25183
// exit ;
25181: GO 25590
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25183: LD_VAR 0 11
25187: IFFALSE 25209
25189: PUSH
25190: LD_VAR 0 11
25194: PPUSH
25195: LD_VAR 0 10
25199: PPUSH
25200: CALL_OW 296
25204: PUSH
25205: LD_INT 13
25207: GREATER
25208: AND
25209: IFTRUE 25231
25211: PUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: LD_VAR 0 10
25221: PPUSH
25222: CALL_OW 296
25226: PUSH
25227: LD_INT 12
25229: GREATER
25230: OR
25231: IFFALSE 25235
// exit ;
25233: GO 25590
// missile := [ 1 ] ;
25235: LD_ADDR_VAR 0 14
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25246: LD_VAR 0 9
25250: PPUSH
25251: LD_VAR 0 12
25255: PPUSH
25256: CALL_OW 325
25260: IFFALSE 25289
// missile := Replace ( missile , missile + 1 , 2 ) ;
25262: LD_ADDR_VAR 0 14
25266: PUSH
25267: LD_VAR 0 14
25271: PPUSH
25272: LD_VAR 0 14
25276: PUSH
25277: LD_INT 1
25279: PLUS
25280: PPUSH
25281: LD_INT 2
25283: PPUSH
25284: CALL_OW 1
25288: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25289: LD_VAR 0 9
25293: PPUSH
25294: LD_VAR 0 13
25298: PPUSH
25299: CALL_OW 325
25303: IFFALSE 25327
25305: PUSH
25306: LD_VAR 0 10
25310: PPUSH
25311: CALL_OW 255
25315: PPUSH
25316: LD_VAR 0 13
25320: PPUSH
25321: CALL_OW 325
25325: NOT
25326: AND
25327: IFFALSE 25356
// missile := Replace ( missile , missile + 1 , 3 ) ;
25329: LD_ADDR_VAR 0 14
25333: PUSH
25334: LD_VAR 0 14
25338: PPUSH
25339: LD_VAR 0 14
25343: PUSH
25344: LD_INT 1
25346: PLUS
25347: PPUSH
25348: LD_INT 3
25350: PPUSH
25351: CALL_OW 1
25355: ST_TO_ADDR
// if missile < 2 then
25356: LD_VAR 0 14
25360: PUSH
25361: LD_INT 2
25363: LESS
25364: IFFALSE 25368
// exit ;
25366: GO 25590
// x := GetX ( enemy ) ;
25368: LD_ADDR_VAR 0 4
25372: PUSH
25373: LD_VAR 0 10
25377: PPUSH
25378: CALL_OW 250
25382: ST_TO_ADDR
// y := GetY ( enemy ) ;
25383: LD_ADDR_VAR 0 5
25387: PUSH
25388: LD_VAR 0 10
25392: PPUSH
25393: CALL_OW 251
25397: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25398: LD_ADDR_VAR 0 6
25402: PUSH
25403: LD_VAR 0 4
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PPUSH
25412: LD_INT 1
25414: PPUSH
25415: CALL_OW 12
25419: PLUS
25420: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25421: LD_ADDR_VAR 0 7
25425: PUSH
25426: LD_VAR 0 5
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 12
25442: PLUS
25443: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25444: LD_VAR 0 6
25448: PPUSH
25449: LD_VAR 0 7
25453: PPUSH
25454: CALL_OW 488
25458: NOT
25459: IFFALSE 25481
// begin _x := x ;
25461: LD_ADDR_VAR 0 6
25465: PUSH
25466: LD_VAR 0 4
25470: ST_TO_ADDR
// _y := y ;
25471: LD_ADDR_VAR 0 7
25475: PUSH
25476: LD_VAR 0 5
25480: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25481: LD_ADDR_VAR 0 3
25485: PUSH
25486: LD_INT 1
25488: PPUSH
25489: LD_VAR 0 14
25493: PPUSH
25494: CALL_OW 12
25498: ST_TO_ADDR
// case i of 1 :
25499: LD_VAR 0 3
25503: PUSH
25504: LD_INT 1
25506: DOUBLE
25507: EQUAL
25508: IFTRUE 25512
25510: GO 25529
25512: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25513: LD_VAR 0 1
25517: PPUSH
25518: LD_VAR 0 10
25522: PPUSH
25523: CALL_OW 115
25527: GO 25590
25529: LD_INT 2
25531: DOUBLE
25532: EQUAL
25533: IFTRUE 25537
25535: GO 25559
25537: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25538: LD_VAR 0 1
25542: PPUSH
25543: LD_VAR 0 6
25547: PPUSH
25548: LD_VAR 0 7
25552: PPUSH
25553: CALL_OW 153
25557: GO 25590
25559: LD_INT 3
25561: DOUBLE
25562: EQUAL
25563: IFTRUE 25567
25565: GO 25589
25567: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_VAR 0 6
25577: PPUSH
25578: LD_VAR 0 7
25582: PPUSH
25583: CALL_OW 154
25587: GO 25590
25589: POP
// end ;
25590: LD_VAR 0 2
25594: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25595: LD_INT 0
25597: PPUSH
25598: PPUSH
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
// if not unit or not building then
25603: LD_VAR 0 1
25607: NOT
25608: IFTRUE 25617
25610: PUSH
25611: LD_VAR 0 2
25615: NOT
25616: OR
25617: IFFALSE 25621
// exit ;
25619: GO 25779
// x := GetX ( building ) ;
25621: LD_ADDR_VAR 0 5
25625: PUSH
25626: LD_VAR 0 2
25630: PPUSH
25631: CALL_OW 250
25635: ST_TO_ADDR
// y := GetY ( building ) ;
25636: LD_ADDR_VAR 0 6
25640: PUSH
25641: LD_VAR 0 2
25645: PPUSH
25646: CALL_OW 251
25650: ST_TO_ADDR
// for i := 0 to 5 do
25651: LD_ADDR_VAR 0 4
25655: PUSH
25656: DOUBLE
25657: LD_INT 0
25659: DEC
25660: ST_TO_ADDR
25661: LD_INT 5
25663: PUSH
25664: FOR_TO
25665: IFFALSE 25777
// begin _x := ShiftX ( x , i , 3 ) ;
25667: LD_ADDR_VAR 0 7
25671: PUSH
25672: LD_VAR 0 5
25676: PPUSH
25677: LD_VAR 0 4
25681: PPUSH
25682: LD_INT 3
25684: PPUSH
25685: CALL_OW 272
25689: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25690: LD_ADDR_VAR 0 8
25694: PUSH
25695: LD_VAR 0 6
25699: PPUSH
25700: LD_VAR 0 4
25704: PPUSH
25705: LD_INT 3
25707: PPUSH
25708: CALL_OW 273
25712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25713: LD_VAR 0 7
25717: PPUSH
25718: LD_VAR 0 8
25722: PPUSH
25723: CALL_OW 488
25727: NOT
25728: IFFALSE 25732
// continue ;
25730: GO 25664
// if HexInfo ( _x , _y ) = 0 then
25732: LD_VAR 0 7
25736: PPUSH
25737: LD_VAR 0 8
25741: PPUSH
25742: CALL_OW 428
25746: PUSH
25747: LD_INT 0
25749: EQUAL
25750: IFFALSE 25775
// begin ComMoveXY ( unit , _x , _y ) ;
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_VAR 0 7
25761: PPUSH
25762: LD_VAR 0 8
25766: PPUSH
25767: CALL_OW 111
// exit ;
25771: POP
25772: POP
25773: GO 25779
// end ; end ;
25775: GO 25664
25777: POP
25778: POP
// end ;
25779: LD_VAR 0 3
25783: RET
// export function ScanBase ( side , base_area ) ; begin
25784: LD_INT 0
25786: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25787: LD_ADDR_VAR 0 3
25791: PUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_INT 81
25799: PUSH
25800: LD_VAR 0 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PPUSH
25809: CALL_OW 70
25813: ST_TO_ADDR
// end ;
25814: LD_VAR 0 3
25818: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25819: LD_INT 0
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
// result := false ;
25825: LD_ADDR_VAR 0 2
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// side := GetSide ( unit ) ;
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL_OW 255
25847: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25848: LD_ADDR_VAR 0 4
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 248
25862: ST_TO_ADDR
// case nat of 1 :
25863: LD_VAR 0 4
25867: PUSH
25868: LD_INT 1
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 25887
25876: POP
// tech := tech_lassight ; 2 :
25877: LD_ADDR_VAR 0 5
25881: PUSH
25882: LD_INT 12
25884: ST_TO_ADDR
25885: GO 25926
25887: LD_INT 2
25889: DOUBLE
25890: EQUAL
25891: IFTRUE 25895
25893: GO 25906
25895: POP
// tech := tech_mortar ; 3 :
25896: LD_ADDR_VAR 0 5
25900: PUSH
25901: LD_INT 41
25903: ST_TO_ADDR
25904: GO 25926
25906: LD_INT 3
25908: DOUBLE
25909: EQUAL
25910: IFTRUE 25914
25912: GO 25925
25914: POP
// tech := tech_bazooka ; end ;
25915: LD_ADDR_VAR 0 5
25919: PUSH
25920: LD_INT 44
25922: ST_TO_ADDR
25923: GO 25926
25925: POP
// if Researched ( side , tech ) then
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_VAR 0 5
25935: PPUSH
25936: CALL_OW 325
25940: IFFALSE 25967
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25942: LD_ADDR_VAR 0 2
25946: PUSH
25947: LD_INT 5
25949: PUSH
25950: LD_INT 8
25952: PUSH
25953: LD_INT 9
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PUSH
25961: LD_VAR 0 4
25965: ARRAY
25966: ST_TO_ADDR
// end ;
25967: LD_VAR 0 2
25971: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
25976: PPUSH
// if not mines then
25977: LD_VAR 0 2
25981: NOT
25982: IFFALSE 25986
// exit ;
25984: GO 26130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25986: LD_ADDR_VAR 0 5
25990: PUSH
25991: LD_INT 81
25993: PUSH
25994: LD_VAR 0 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 3
26005: PUSH
26006: LD_INT 21
26008: PUSH
26009: LD_INT 3
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: ST_TO_ADDR
// for i in mines do
26029: LD_ADDR_VAR 0 4
26033: PUSH
26034: LD_VAR 0 2
26038: PUSH
26039: FOR_IN
26040: IFFALSE 26128
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26042: LD_VAR 0 4
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PPUSH
26051: LD_VAR 0 4
26055: PUSH
26056: LD_INT 2
26058: ARRAY
26059: PPUSH
26060: CALL_OW 458
26064: NOT
26065: IFFALSE 26069
// continue ;
26067: GO 26039
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26069: LD_VAR 0 4
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 4
26082: PUSH
26083: LD_INT 2
26085: ARRAY
26086: PPUSH
26087: CALL_OW 428
26091: PUSH
26092: LD_VAR 0 5
26096: IN
26097: IFFALSE 26126
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26099: LD_VAR 0 4
26103: PUSH
26104: LD_INT 1
26106: ARRAY
26107: PPUSH
26108: LD_VAR 0 4
26112: PUSH
26113: LD_INT 2
26115: ARRAY
26116: PPUSH
26117: LD_VAR 0 1
26121: PPUSH
26122: CALL_OW 456
// end ;
26126: GO 26039
26128: POP
26129: POP
// end ;
26130: LD_VAR 0 3
26134: RET
// export function Count ( array ) ; begin
26135: LD_INT 0
26137: PPUSH
// result := array + 0 ;
26138: LD_ADDR_VAR 0 2
26142: PUSH
26143: LD_VAR 0 1
26147: PUSH
26148: LD_INT 0
26150: PLUS
26151: ST_TO_ADDR
// end ;
26152: LD_VAR 0 2
26156: RET
// export function IsEmpty ( building ) ; begin
26157: LD_INT 0
26159: PPUSH
// if not building then
26160: LD_VAR 0 1
26164: NOT
26165: IFFALSE 26169
// exit ;
26167: GO 26212
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26169: LD_ADDR_VAR 0 2
26173: PUSH
26174: LD_VAR 0 1
26178: PUSH
26179: LD_INT 22
26181: PUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: CALL_OW 255
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 58
26198: PUSH
26199: EMPTY
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PPUSH
26206: CALL_OW 69
26210: IN
26211: ST_TO_ADDR
// end ;
26212: LD_VAR 0 2
26216: RET
// export function IsNotFull ( building ) ; var places ; begin
26217: LD_INT 0
26219: PPUSH
26220: PPUSH
// if not building then
26221: LD_VAR 0 1
26225: NOT
26226: IFFALSE 26230
// exit ;
26228: GO 26258
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26230: LD_ADDR_VAR 0 2
26234: PUSH
26235: LD_VAR 0 1
26239: PPUSH
26240: LD_INT 3
26242: PUSH
26243: LD_INT 62
26245: PUSH
26246: EMPTY
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PPUSH
26253: CALL_OW 72
26257: ST_TO_ADDR
// end ;
26258: LD_VAR 0 2
26262: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26263: LD_INT 0
26265: PPUSH
26266: PPUSH
26267: PPUSH
26268: PPUSH
// tmp := [ ] ;
26269: LD_ADDR_VAR 0 3
26273: PUSH
26274: EMPTY
26275: ST_TO_ADDR
// list := [ ] ;
26276: LD_ADDR_VAR 0 5
26280: PUSH
26281: EMPTY
26282: ST_TO_ADDR
// for i = 16 to 25 do
26283: LD_ADDR_VAR 0 4
26287: PUSH
26288: DOUBLE
26289: LD_INT 16
26291: DEC
26292: ST_TO_ADDR
26293: LD_INT 25
26295: PUSH
26296: FOR_TO
26297: IFFALSE 26370
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26299: LD_ADDR_VAR 0 3
26303: PUSH
26304: LD_VAR 0 3
26308: PUSH
26309: LD_INT 22
26311: PUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 255
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 91
26328: PUSH
26329: LD_VAR 0 1
26333: PUSH
26334: LD_INT 6
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 30
26344: PUSH
26345: LD_VAR 0 4
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: PUSH
26359: EMPTY
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: ADD
26367: ST_TO_ADDR
26368: GO 26296
26370: POP
26371: POP
// for i = 1 to tmp do
26372: LD_ADDR_VAR 0 4
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_VAR 0 3
26386: PUSH
26387: FOR_TO
26388: IFFALSE 26476
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 5
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: LD_VAR 0 4
26409: ARRAY
26410: PPUSH
26411: CALL_OW 266
26415: PUSH
26416: LD_VAR 0 3
26420: PUSH
26421: LD_VAR 0 4
26425: ARRAY
26426: PPUSH
26427: CALL_OW 250
26431: PUSH
26432: LD_VAR 0 3
26436: PUSH
26437: LD_VAR 0 4
26441: ARRAY
26442: PPUSH
26443: CALL_OW 251
26447: PUSH
26448: LD_VAR 0 3
26452: PUSH
26453: LD_VAR 0 4
26457: ARRAY
26458: PPUSH
26459: CALL_OW 254
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: PUSH
26470: EMPTY
26471: LIST
26472: ADD
26473: ST_TO_ADDR
26474: GO 26387
26476: POP
26477: POP
// result := list ;
26478: LD_ADDR_VAR 0 2
26482: PUSH
26483: LD_VAR 0 5
26487: ST_TO_ADDR
// end ;
26488: LD_VAR 0 2
26492: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26493: LD_INT 0
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
// if not factory then
26502: LD_VAR 0 1
26506: NOT
26507: IFFALSE 26511
// exit ;
26509: GO 27114
// if control = control_apeman then
26511: LD_VAR 0 4
26515: PUSH
26516: LD_INT 5
26518: EQUAL
26519: IFFALSE 26628
// begin tmp := UnitsInside ( factory ) ;
26521: LD_ADDR_VAR 0 8
26525: PUSH
26526: LD_VAR 0 1
26530: PPUSH
26531: CALL_OW 313
26535: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26536: LD_VAR 0 8
26540: PPUSH
26541: LD_INT 25
26543: PUSH
26544: LD_INT 12
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PPUSH
26551: CALL_OW 72
26555: NOT
26556: IFFALSE 26566
// control := control_manual ;
26558: LD_ADDR_VAR 0 4
26562: PUSH
26563: LD_INT 1
26565: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26566: LD_ADDR_VAR 0 8
26570: PUSH
26571: LD_VAR 0 1
26575: PPUSH
26576: CALL 26263 0 1
26580: ST_TO_ADDR
// if tmp then
26581: LD_VAR 0 8
26585: IFFALSE 26628
// begin for i in tmp do
26587: LD_ADDR_VAR 0 7
26591: PUSH
26592: LD_VAR 0 8
26596: PUSH
26597: FOR_IN
26598: IFFALSE 26626
// if i [ 1 ] = b_ext_radio then
26600: LD_VAR 0 7
26604: PUSH
26605: LD_INT 1
26607: ARRAY
26608: PUSH
26609: LD_INT 22
26611: EQUAL
26612: IFFALSE 26624
// begin control := control_remote ;
26614: LD_ADDR_VAR 0 4
26618: PUSH
26619: LD_INT 2
26621: ST_TO_ADDR
// break ;
26622: GO 26626
// end ;
26624: GO 26597
26626: POP
26627: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26628: LD_VAR 0 1
26632: PPUSH
26633: LD_VAR 0 2
26637: PPUSH
26638: LD_VAR 0 3
26642: PPUSH
26643: LD_VAR 0 4
26647: PPUSH
26648: LD_VAR 0 5
26652: PPUSH
26653: CALL_OW 448
26657: IFFALSE 26692
// begin result := [ chassis , engine , control , weapon ] ;
26659: LD_ADDR_VAR 0 6
26663: PUSH
26664: LD_VAR 0 2
26668: PUSH
26669: LD_VAR 0 3
26673: PUSH
26674: LD_VAR 0 4
26678: PUSH
26679: LD_VAR 0 5
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: ST_TO_ADDR
// exit ;
26690: GO 27114
// end ; _chassis := AvailableChassisList ( factory ) ;
26692: LD_ADDR_VAR 0 9
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: CALL_OW 475
26706: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26707: LD_ADDR_VAR 0 11
26711: PUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 476
26721: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26722: LD_ADDR_VAR 0 12
26726: PUSH
26727: LD_VAR 0 1
26731: PPUSH
26732: CALL_OW 477
26736: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26737: LD_ADDR_VAR 0 10
26741: PUSH
26742: LD_VAR 0 1
26746: PPUSH
26747: CALL_OW 478
26751: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26752: LD_VAR 0 9
26756: NOT
26757: IFTRUE 26766
26759: PUSH
26760: LD_VAR 0 11
26764: NOT
26765: OR
26766: IFTRUE 26775
26768: PUSH
26769: LD_VAR 0 12
26773: NOT
26774: OR
26775: IFTRUE 26784
26777: PUSH
26778: LD_VAR 0 10
26782: NOT
26783: OR
26784: IFFALSE 26819
// begin result := [ chassis , engine , control , weapon ] ;
26786: LD_ADDR_VAR 0 6
26790: PUSH
26791: LD_VAR 0 2
26795: PUSH
26796: LD_VAR 0 3
26800: PUSH
26801: LD_VAR 0 4
26805: PUSH
26806: LD_VAR 0 5
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: ST_TO_ADDR
// exit ;
26817: GO 27114
// end ; if not chassis in _chassis then
26819: LD_VAR 0 2
26823: PUSH
26824: LD_VAR 0 9
26828: IN
26829: NOT
26830: IFFALSE 26856
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26832: LD_ADDR_VAR 0 2
26836: PUSH
26837: LD_VAR 0 9
26841: PUSH
26842: LD_INT 1
26844: PPUSH
26845: LD_VAR 0 9
26849: PPUSH
26850: CALL_OW 12
26854: ARRAY
26855: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26856: LD_VAR 0 2
26860: PPUSH
26861: LD_VAR 0 3
26865: PPUSH
26866: CALL 27119 0 2
26870: NOT
26871: IFFALSE 26932
// repeat engine := _engine [ 1 ] ;
26873: LD_ADDR_VAR 0 3
26877: PUSH
26878: LD_VAR 0 11
26882: PUSH
26883: LD_INT 1
26885: ARRAY
26886: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26887: LD_ADDR_VAR 0 11
26891: PUSH
26892: LD_VAR 0 11
26896: PPUSH
26897: LD_INT 1
26899: PPUSH
26900: CALL_OW 3
26904: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26905: LD_VAR 0 2
26909: PPUSH
26910: LD_VAR 0 3
26914: PPUSH
26915: CALL 27119 0 2
26919: IFTRUE 26930
26921: PUSH
26922: LD_VAR 0 11
26926: PUSH
26927: EMPTY
26928: EQUAL
26929: OR
26930: IFFALSE 26873
// if not control in _control then
26932: LD_VAR 0 4
26936: PUSH
26937: LD_VAR 0 12
26941: IN
26942: NOT
26943: IFFALSE 26969
// control := _control [ rand ( 1 , _control ) ] ;
26945: LD_ADDR_VAR 0 4
26949: PUSH
26950: LD_VAR 0 12
26954: PUSH
26955: LD_INT 1
26957: PPUSH
26958: LD_VAR 0 12
26962: PPUSH
26963: CALL_OW 12
26967: ARRAY
26968: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_VAR 0 5
26978: PPUSH
26979: CALL 27341 0 2
26983: NOT
26984: IFFALSE 27045
// repeat weapon := _weapon [ 1 ] ;
26986: LD_ADDR_VAR 0 5
26990: PUSH
26991: LD_VAR 0 10
26995: PUSH
26996: LD_INT 1
26998: ARRAY
26999: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27000: LD_ADDR_VAR 0 10
27004: PUSH
27005: LD_VAR 0 10
27009: PPUSH
27010: LD_INT 1
27012: PPUSH
27013: CALL_OW 3
27017: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27018: LD_VAR 0 2
27022: PPUSH
27023: LD_VAR 0 5
27027: PPUSH
27028: CALL 27341 0 2
27032: IFTRUE 27043
27034: PUSH
27035: LD_VAR 0 10
27039: PUSH
27040: EMPTY
27041: EQUAL
27042: OR
27043: IFFALSE 26986
// result := [ ] ;
27045: LD_ADDR_VAR 0 6
27049: PUSH
27050: EMPTY
27051: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_VAR 0 2
27061: PPUSH
27062: LD_VAR 0 3
27066: PPUSH
27067: LD_VAR 0 4
27071: PPUSH
27072: LD_VAR 0 5
27076: PPUSH
27077: CALL_OW 448
27081: IFFALSE 27114
// result := [ chassis , engine , control , weapon ] ;
27083: LD_ADDR_VAR 0 6
27087: PUSH
27088: LD_VAR 0 2
27092: PUSH
27093: LD_VAR 0 3
27097: PUSH
27098: LD_VAR 0 4
27102: PUSH
27103: LD_VAR 0 5
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// end ;
27114: LD_VAR 0 6
27118: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27119: LD_INT 0
27121: PPUSH
// if not chassis or not engine then
27122: LD_VAR 0 1
27126: NOT
27127: IFTRUE 27136
27129: PUSH
27130: LD_VAR 0 2
27134: NOT
27135: OR
27136: IFFALSE 27140
// exit ;
27138: GO 27336
// case engine of engine_solar :
27140: LD_VAR 0 2
27144: PUSH
27145: LD_INT 2
27147: DOUBLE
27148: EQUAL
27149: IFTRUE 27153
27151: GO 27191
27153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_INT 11
27161: PUSH
27162: LD_INT 12
27164: PUSH
27165: LD_INT 13
27167: PUSH
27168: LD_INT 14
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: LD_INT 3
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
27189: GO 27320
27191: LD_INT 1
27193: DOUBLE
27194: EQUAL
27195: IFTRUE 27199
27197: GO 27261
27199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27200: LD_ADDR_VAR 0 3
27204: PUSH
27205: LD_INT 11
27207: PUSH
27208: LD_INT 12
27210: PUSH
27211: LD_INT 13
27213: PUSH
27214: LD_INT 14
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 2
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: LD_INT 4
27228: PUSH
27229: LD_INT 5
27231: PUSH
27232: LD_INT 21
27234: PUSH
27235: LD_INT 23
27237: PUSH
27238: LD_INT 22
27240: PUSH
27241: LD_INT 24
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: ST_TO_ADDR
27259: GO 27320
27261: LD_INT 3
27263: DOUBLE
27264: EQUAL
27265: IFTRUE 27269
27267: GO 27319
27269: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27270: LD_ADDR_VAR 0 3
27274: PUSH
27275: LD_INT 13
27277: PUSH
27278: LD_INT 14
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 3
27286: PUSH
27287: LD_INT 4
27289: PUSH
27290: LD_INT 5
27292: PUSH
27293: LD_INT 21
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 23
27301: PUSH
27302: LD_INT 24
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: ST_TO_ADDR
27317: GO 27320
27319: POP
// result := ( chassis in result ) ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_VAR 0 1
27329: PUSH
27330: LD_VAR 0 3
27334: IN
27335: ST_TO_ADDR
// end ;
27336: LD_VAR 0 3
27340: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27341: LD_INT 0
27343: PPUSH
// if not chassis or not weapon then
27344: LD_VAR 0 1
27348: NOT
27349: IFTRUE 27358
27351: PUSH
27352: LD_VAR 0 2
27356: NOT
27357: OR
27358: IFFALSE 27362
// exit ;
27360: GO 28422
// case weapon of us_machine_gun :
27362: LD_VAR 0 2
27366: PUSH
27367: LD_INT 2
27369: DOUBLE
27370: EQUAL
27371: IFTRUE 27375
27373: GO 27405
27375: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27376: LD_ADDR_VAR 0 3
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 2
27386: PUSH
27387: LD_INT 3
27389: PUSH
27390: LD_INT 4
27392: PUSH
27393: LD_INT 5
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: ST_TO_ADDR
27403: GO 28406
27405: LD_INT 3
27407: DOUBLE
27408: EQUAL
27409: IFTRUE 27413
27411: GO 27443
27413: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: LD_INT 3
27427: PUSH
27428: LD_INT 4
27430: PUSH
27431: LD_INT 5
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: ST_TO_ADDR
27441: GO 28406
27443: LD_INT 11
27445: DOUBLE
27446: EQUAL
27447: IFTRUE 27451
27449: GO 27481
27451: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27452: LD_ADDR_VAR 0 3
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 4
27468: PUSH
27469: LD_INT 5
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 28406
27481: LD_INT 4
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27515
27489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27490: LD_ADDR_VAR 0 3
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 4
27503: PUSH
27504: LD_INT 5
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 28406
27515: LD_INT 5
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27549
27523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: LD_INT 3
27534: PUSH
27535: LD_INT 4
27537: PUSH
27538: LD_INT 5
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: ST_TO_ADDR
27547: GO 28406
27549: LD_INT 9
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27583
27557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: LD_INT 3
27568: PUSH
27569: LD_INT 4
27571: PUSH
27572: LD_INT 5
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: ST_TO_ADDR
27581: GO 28406
27583: LD_INT 7
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27591
27589: GO 27617
27591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 3
27602: PUSH
27603: LD_INT 4
27605: PUSH
27606: LD_INT 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
27615: GO 28406
27617: LD_INT 12
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27651
27625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27626: LD_ADDR_VAR 0 3
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 3
27636: PUSH
27637: LD_INT 4
27639: PUSH
27640: LD_INT 5
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
27649: GO 28406
27651: LD_INT 13
27653: DOUBLE
27654: EQUAL
27655: IFTRUE 27659
27657: GO 27685
27659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_INT 2
27667: PUSH
27668: LD_INT 3
27670: PUSH
27671: LD_INT 4
27673: PUSH
27674: LD_INT 5
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
27683: GO 28406
27685: LD_INT 14
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 27711
27693: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27694: LD_ADDR_VAR 0 3
27698: PUSH
27699: LD_INT 4
27701: PUSH
27702: LD_INT 5
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: ST_TO_ADDR
27709: GO 28406
27711: LD_INT 6
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27737
27719: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_INT 4
27727: PUSH
27728: LD_INT 5
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 28406
27737: LD_INT 10
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27763
27745: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 4
27753: PUSH
27754: LD_INT 5
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: ST_TO_ADDR
27761: GO 28406
27763: LD_INT 22
27765: DOUBLE
27766: EQUAL
27767: IFTRUE 27771
27769: GO 27797
27771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27772: LD_ADDR_VAR 0 3
27776: PUSH
27777: LD_INT 11
27779: PUSH
27780: LD_INT 12
27782: PUSH
27783: LD_INT 13
27785: PUSH
27786: LD_INT 14
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
27795: GO 28406
27797: LD_INT 23
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27831
27805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: LD_INT 11
27813: PUSH
27814: LD_INT 12
27816: PUSH
27817: LD_INT 13
27819: PUSH
27820: LD_INT 14
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: ST_TO_ADDR
27829: GO 28406
27831: LD_INT 24
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27865
27839: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27840: LD_ADDR_VAR 0 3
27844: PUSH
27845: LD_INT 11
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: LD_INT 13
27853: PUSH
27854: LD_INT 14
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: ST_TO_ADDR
27863: GO 28406
27865: LD_INT 30
27867: DOUBLE
27868: EQUAL
27869: IFTRUE 27873
27871: GO 27899
27873: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27874: LD_ADDR_VAR 0 3
27878: PUSH
27879: LD_INT 11
27881: PUSH
27882: LD_INT 12
27884: PUSH
27885: LD_INT 13
27887: PUSH
27888: LD_INT 14
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
27897: GO 28406
27899: LD_INT 25
27901: DOUBLE
27902: EQUAL
27903: IFTRUE 27907
27905: GO 27925
27907: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27908: LD_ADDR_VAR 0 3
27912: PUSH
27913: LD_INT 13
27915: PUSH
27916: LD_INT 14
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: ST_TO_ADDR
27923: GO 28406
27925: LD_INT 27
27927: DOUBLE
27928: EQUAL
27929: IFTRUE 27933
27931: GO 27951
27933: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27934: LD_ADDR_VAR 0 3
27938: PUSH
27939: LD_INT 13
27941: PUSH
27942: LD_INT 14
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: ST_TO_ADDR
27949: GO 28406
27951: LD_INT 92
27953: DOUBLE
27954: EQUAL
27955: IFTRUE 27959
27957: GO 27985
27959: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27960: LD_ADDR_VAR 0 3
27964: PUSH
27965: LD_INT 11
27967: PUSH
27968: LD_INT 12
27970: PUSH
27971: LD_INT 13
27973: PUSH
27974: LD_INT 14
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
27983: GO 28406
27985: LD_INT 28
27987: DOUBLE
27988: EQUAL
27989: IFTRUE 27993
27991: GO 28011
27993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27994: LD_ADDR_VAR 0 3
27998: PUSH
27999: LD_INT 13
28001: PUSH
28002: LD_INT 14
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: ST_TO_ADDR
28009: GO 28406
28011: LD_INT 29
28013: DOUBLE
28014: EQUAL
28015: IFTRUE 28019
28017: GO 28037
28019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28020: LD_ADDR_VAR 0 3
28024: PUSH
28025: LD_INT 13
28027: PUSH
28028: LD_INT 14
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: ST_TO_ADDR
28035: GO 28406
28037: LD_INT 31
28039: DOUBLE
28040: EQUAL
28041: IFTRUE 28045
28043: GO 28063
28045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28046: LD_ADDR_VAR 0 3
28050: PUSH
28051: LD_INT 13
28053: PUSH
28054: LD_INT 14
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: ST_TO_ADDR
28061: GO 28406
28063: LD_INT 26
28065: DOUBLE
28066: EQUAL
28067: IFTRUE 28071
28069: GO 28089
28071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: LD_INT 13
28079: PUSH
28080: LD_INT 14
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: ST_TO_ADDR
28087: GO 28406
28089: LD_INT 42
28091: DOUBLE
28092: EQUAL
28093: IFTRUE 28097
28095: GO 28123
28097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28098: LD_ADDR_VAR 0 3
28102: PUSH
28103: LD_INT 21
28105: PUSH
28106: LD_INT 22
28108: PUSH
28109: LD_INT 23
28111: PUSH
28112: LD_INT 24
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: ST_TO_ADDR
28121: GO 28406
28123: LD_INT 43
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28157
28131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28132: LD_ADDR_VAR 0 3
28136: PUSH
28137: LD_INT 21
28139: PUSH
28140: LD_INT 22
28142: PUSH
28143: LD_INT 23
28145: PUSH
28146: LD_INT 24
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: ST_TO_ADDR
28155: GO 28406
28157: LD_INT 44
28159: DOUBLE
28160: EQUAL
28161: IFTRUE 28165
28163: GO 28191
28165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28166: LD_ADDR_VAR 0 3
28170: PUSH
28171: LD_INT 21
28173: PUSH
28174: LD_INT 22
28176: PUSH
28177: LD_INT 23
28179: PUSH
28180: LD_INT 24
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
28189: GO 28406
28191: LD_INT 45
28193: DOUBLE
28194: EQUAL
28195: IFTRUE 28199
28197: GO 28225
28199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28200: LD_ADDR_VAR 0 3
28204: PUSH
28205: LD_INT 21
28207: PUSH
28208: LD_INT 22
28210: PUSH
28211: LD_INT 23
28213: PUSH
28214: LD_INT 24
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: ST_TO_ADDR
28223: GO 28406
28225: LD_INT 49
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28259
28233: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 21
28241: PUSH
28242: LD_INT 22
28244: PUSH
28245: LD_INT 23
28247: PUSH
28248: LD_INT 24
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: ST_TO_ADDR
28257: GO 28406
28259: LD_INT 51
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28267
28265: GO 28293
28267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28268: LD_ADDR_VAR 0 3
28272: PUSH
28273: LD_INT 21
28275: PUSH
28276: LD_INT 22
28278: PUSH
28279: LD_INT 23
28281: PUSH
28282: LD_INT 24
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: ST_TO_ADDR
28291: GO 28406
28293: LD_INT 52
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28327
28301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28302: LD_ADDR_VAR 0 3
28306: PUSH
28307: LD_INT 21
28309: PUSH
28310: LD_INT 22
28312: PUSH
28313: LD_INT 23
28315: PUSH
28316: LD_INT 24
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
28325: GO 28406
28327: LD_INT 53
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28353
28335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28336: LD_ADDR_VAR 0 3
28340: PUSH
28341: LD_INT 23
28343: PUSH
28344: LD_INT 24
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: ST_TO_ADDR
28351: GO 28406
28353: LD_INT 46
28355: DOUBLE
28356: EQUAL
28357: IFTRUE 28361
28359: GO 28379
28361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28362: LD_ADDR_VAR 0 3
28366: PUSH
28367: LD_INT 23
28369: PUSH
28370: LD_INT 24
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: ST_TO_ADDR
28377: GO 28406
28379: LD_INT 47
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 28405
28387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_INT 23
28395: PUSH
28396: LD_INT 24
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: ST_TO_ADDR
28403: GO 28406
28405: POP
// result := ( chassis in result ) ;
28406: LD_ADDR_VAR 0 3
28410: PUSH
28411: LD_VAR 0 1
28415: PUSH
28416: LD_VAR 0 3
28420: IN
28421: ST_TO_ADDR
// end ;
28422: LD_VAR 0 3
28426: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28427: LD_INT 0
28429: PPUSH
28430: PPUSH
28431: PPUSH
28432: PPUSH
28433: PPUSH
28434: PPUSH
28435: PPUSH
// result := array ;
28436: LD_ADDR_VAR 0 5
28440: PUSH
28441: LD_VAR 0 1
28445: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28446: LD_VAR 0 1
28450: NOT
28451: IFTRUE 28460
28453: PUSH
28454: LD_VAR 0 2
28458: NOT
28459: OR
28460: IFTRUE 28469
28462: PUSH
28463: LD_VAR 0 3
28467: NOT
28468: OR
28469: IFTRUE 28483
28471: PUSH
28472: LD_VAR 0 2
28476: PUSH
28477: LD_VAR 0 1
28481: GREATER
28482: OR
28483: IFTRUE 28497
28485: PUSH
28486: LD_VAR 0 3
28490: PUSH
28491: LD_VAR 0 1
28495: GREATER
28496: OR
28497: IFFALSE 28501
// exit ;
28499: GO 28797
// if direction then
28501: LD_VAR 0 4
28505: IFFALSE 28569
// begin d := 1 ;
28507: LD_ADDR_VAR 0 9
28511: PUSH
28512: LD_INT 1
28514: ST_TO_ADDR
// if i_from > i_to then
28515: LD_VAR 0 2
28519: PUSH
28520: LD_VAR 0 3
28524: GREATER
28525: IFFALSE 28551
// length := ( array - i_from ) + i_to else
28527: LD_ADDR_VAR 0 11
28531: PUSH
28532: LD_VAR 0 1
28536: PUSH
28537: LD_VAR 0 2
28541: MINUS
28542: PUSH
28543: LD_VAR 0 3
28547: PLUS
28548: ST_TO_ADDR
28549: GO 28567
// length := i_to - i_from ;
28551: LD_ADDR_VAR 0 11
28555: PUSH
28556: LD_VAR 0 3
28560: PUSH
28561: LD_VAR 0 2
28565: MINUS
28566: ST_TO_ADDR
// end else
28567: GO 28630
// begin d := - 1 ;
28569: LD_ADDR_VAR 0 9
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: ST_TO_ADDR
// if i_from > i_to then
28578: LD_VAR 0 2
28582: PUSH
28583: LD_VAR 0 3
28587: GREATER
28588: IFFALSE 28608
// length := i_from - i_to else
28590: LD_ADDR_VAR 0 11
28594: PUSH
28595: LD_VAR 0 2
28599: PUSH
28600: LD_VAR 0 3
28604: MINUS
28605: ST_TO_ADDR
28606: GO 28630
// length := ( array - i_to ) + i_from ;
28608: LD_ADDR_VAR 0 11
28612: PUSH
28613: LD_VAR 0 1
28617: PUSH
28618: LD_VAR 0 3
28622: MINUS
28623: PUSH
28624: LD_VAR 0 2
28628: PLUS
28629: ST_TO_ADDR
// end ; if not length then
28630: LD_VAR 0 11
28634: NOT
28635: IFFALSE 28639
// exit ;
28637: GO 28797
// tmp := array ;
28639: LD_ADDR_VAR 0 10
28643: PUSH
28644: LD_VAR 0 1
28648: ST_TO_ADDR
// for i = 1 to length do
28649: LD_ADDR_VAR 0 6
28653: PUSH
28654: DOUBLE
28655: LD_INT 1
28657: DEC
28658: ST_TO_ADDR
28659: LD_VAR 0 11
28663: PUSH
28664: FOR_TO
28665: IFFALSE 28785
// begin for j = 1 to array do
28667: LD_ADDR_VAR 0 7
28671: PUSH
28672: DOUBLE
28673: LD_INT 1
28675: DEC
28676: ST_TO_ADDR
28677: LD_VAR 0 1
28681: PUSH
28682: FOR_TO
28683: IFFALSE 28771
// begin k := j + d ;
28685: LD_ADDR_VAR 0 8
28689: PUSH
28690: LD_VAR 0 7
28694: PUSH
28695: LD_VAR 0 9
28699: PLUS
28700: ST_TO_ADDR
// if k > array then
28701: LD_VAR 0 8
28705: PUSH
28706: LD_VAR 0 1
28710: GREATER
28711: IFFALSE 28721
// k := 1 ;
28713: LD_ADDR_VAR 0 8
28717: PUSH
28718: LD_INT 1
28720: ST_TO_ADDR
// if not k then
28721: LD_VAR 0 8
28725: NOT
28726: IFFALSE 28738
// k := array ;
28728: LD_ADDR_VAR 0 8
28732: PUSH
28733: LD_VAR 0 1
28737: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28738: LD_ADDR_VAR 0 10
28742: PUSH
28743: LD_VAR 0 10
28747: PPUSH
28748: LD_VAR 0 8
28752: PPUSH
28753: LD_VAR 0 1
28757: PUSH
28758: LD_VAR 0 7
28762: ARRAY
28763: PPUSH
28764: CALL_OW 1
28768: ST_TO_ADDR
// end ;
28769: GO 28682
28771: POP
28772: POP
// array := tmp ;
28773: LD_ADDR_VAR 0 1
28777: PUSH
28778: LD_VAR 0 10
28782: ST_TO_ADDR
// end ;
28783: GO 28664
28785: POP
28786: POP
// result := array ;
28787: LD_ADDR_VAR 0 5
28791: PUSH
28792: LD_VAR 0 1
28796: ST_TO_ADDR
// end ;
28797: LD_VAR 0 5
28801: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
// result := 0 ;
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
// if not array or not value in array then
28814: LD_VAR 0 1
28818: NOT
28819: IFTRUE 28834
28821: PUSH
28822: LD_VAR 0 2
28826: PUSH
28827: LD_VAR 0 1
28831: IN
28832: NOT
28833: OR
28834: IFFALSE 28838
// exit ;
28836: GO 28892
// for i = 1 to array do
28838: LD_ADDR_VAR 0 4
28842: PUSH
28843: DOUBLE
28844: LD_INT 1
28846: DEC
28847: ST_TO_ADDR
28848: LD_VAR 0 1
28852: PUSH
28853: FOR_TO
28854: IFFALSE 28890
// if value = array [ i ] then
28856: LD_VAR 0 2
28860: PUSH
28861: LD_VAR 0 1
28865: PUSH
28866: LD_VAR 0 4
28870: ARRAY
28871: EQUAL
28872: IFFALSE 28888
// begin result := i ;
28874: LD_ADDR_VAR 0 3
28878: PUSH
28879: LD_VAR 0 4
28883: ST_TO_ADDR
// exit ;
28884: POP
28885: POP
28886: GO 28892
// end ;
28888: GO 28853
28890: POP
28891: POP
// end ;
28892: LD_VAR 0 3
28896: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28897: LD_INT 0
28899: PPUSH
// vc_chassis := chassis ;
28900: LD_ADDR_OWVAR 37
28904: PUSH
28905: LD_VAR 0 1
28909: ST_TO_ADDR
// vc_engine := engine ;
28910: LD_ADDR_OWVAR 39
28914: PUSH
28915: LD_VAR 0 2
28919: ST_TO_ADDR
// vc_control := control ;
28920: LD_ADDR_OWVAR 38
28924: PUSH
28925: LD_VAR 0 3
28929: ST_TO_ADDR
// vc_weapon := weapon ;
28930: LD_ADDR_OWVAR 40
28934: PUSH
28935: LD_VAR 0 4
28939: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28940: LD_ADDR_OWVAR 41
28944: PUSH
28945: LD_VAR 0 5
28949: ST_TO_ADDR
// end ;
28950: LD_VAR 0 6
28954: RET
// export function WantPlant ( unit ) ; var task ; begin
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
// result := false ;
28959: LD_ADDR_VAR 0 2
28963: PUSH
28964: LD_INT 0
28966: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28967: LD_ADDR_VAR 0 3
28971: PUSH
28972: LD_VAR 0 1
28976: PPUSH
28977: CALL_OW 437
28981: ST_TO_ADDR
// if task then
28982: LD_VAR 0 3
28986: IFFALSE 29014
// if task [ 1 ] [ 1 ] = p then
28988: LD_VAR 0 3
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PUSH
28997: LD_INT 1
28999: ARRAY
29000: PUSH
29001: LD_STRING p
29003: EQUAL
29004: IFFALSE 29014
// result := true ;
29006: LD_ADDR_VAR 0 2
29010: PUSH
29011: LD_INT 1
29013: ST_TO_ADDR
// end ;
29014: LD_VAR 0 2
29018: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29019: LD_INT 0
29021: PPUSH
29022: PPUSH
29023: PPUSH
29024: PPUSH
// if pos < 1 then
29025: LD_VAR 0 2
29029: PUSH
29030: LD_INT 1
29032: LESS
29033: IFFALSE 29037
// exit ;
29035: GO 29340
// if pos = 1 then
29037: LD_VAR 0 2
29041: PUSH
29042: LD_INT 1
29044: EQUAL
29045: IFFALSE 29078
// result := Replace ( arr , pos [ 1 ] , value ) else
29047: LD_ADDR_VAR 0 4
29051: PUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: LD_VAR 0 2
29061: PUSH
29062: LD_INT 1
29064: ARRAY
29065: PPUSH
29066: LD_VAR 0 3
29070: PPUSH
29071: CALL_OW 1
29075: ST_TO_ADDR
29076: GO 29340
// begin tmp := arr ;
29078: LD_ADDR_VAR 0 6
29082: PUSH
29083: LD_VAR 0 1
29087: ST_TO_ADDR
// s_arr := [ tmp ] ;
29088: LD_ADDR_VAR 0 7
29092: PUSH
29093: LD_VAR 0 6
29097: PUSH
29098: EMPTY
29099: LIST
29100: ST_TO_ADDR
// for i = 1 to pos - 1 do
29101: LD_ADDR_VAR 0 5
29105: PUSH
29106: DOUBLE
29107: LD_INT 1
29109: DEC
29110: ST_TO_ADDR
29111: LD_VAR 0 2
29115: PUSH
29116: LD_INT 1
29118: MINUS
29119: PUSH
29120: FOR_TO
29121: IFFALSE 29166
// begin tmp := tmp [ pos [ i ] ] ;
29123: LD_ADDR_VAR 0 6
29127: PUSH
29128: LD_VAR 0 6
29132: PUSH
29133: LD_VAR 0 2
29137: PUSH
29138: LD_VAR 0 5
29142: ARRAY
29143: ARRAY
29144: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29145: LD_ADDR_VAR 0 7
29149: PUSH
29150: LD_VAR 0 7
29154: PUSH
29155: LD_VAR 0 6
29159: PUSH
29160: EMPTY
29161: LIST
29162: ADD
29163: ST_TO_ADDR
// end ;
29164: GO 29120
29166: POP
29167: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29168: LD_ADDR_VAR 0 6
29172: PUSH
29173: LD_VAR 0 6
29177: PPUSH
29178: LD_VAR 0 2
29182: PUSH
29183: LD_VAR 0 2
29187: ARRAY
29188: PPUSH
29189: LD_VAR 0 3
29193: PPUSH
29194: CALL_OW 1
29198: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29199: LD_ADDR_VAR 0 7
29203: PUSH
29204: LD_VAR 0 7
29208: PPUSH
29209: LD_VAR 0 7
29213: PPUSH
29214: LD_VAR 0 6
29218: PPUSH
29219: CALL_OW 1
29223: ST_TO_ADDR
// for i = s_arr downto 2 do
29224: LD_ADDR_VAR 0 5
29228: PUSH
29229: DOUBLE
29230: LD_VAR 0 7
29234: INC
29235: ST_TO_ADDR
29236: LD_INT 2
29238: PUSH
29239: FOR_DOWNTO
29240: IFFALSE 29324
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29242: LD_ADDR_VAR 0 6
29246: PUSH
29247: LD_VAR 0 7
29251: PUSH
29252: LD_VAR 0 5
29256: PUSH
29257: LD_INT 1
29259: MINUS
29260: ARRAY
29261: PPUSH
29262: LD_VAR 0 2
29266: PUSH
29267: LD_VAR 0 5
29271: PUSH
29272: LD_INT 1
29274: MINUS
29275: ARRAY
29276: PPUSH
29277: LD_VAR 0 7
29281: PUSH
29282: LD_VAR 0 5
29286: ARRAY
29287: PPUSH
29288: CALL_OW 1
29292: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29293: LD_ADDR_VAR 0 7
29297: PUSH
29298: LD_VAR 0 7
29302: PPUSH
29303: LD_VAR 0 5
29307: PUSH
29308: LD_INT 1
29310: MINUS
29311: PPUSH
29312: LD_VAR 0 6
29316: PPUSH
29317: CALL_OW 1
29321: ST_TO_ADDR
// end ;
29322: GO 29239
29324: POP
29325: POP
// result := s_arr [ 1 ] ;
29326: LD_ADDR_VAR 0 4
29330: PUSH
29331: LD_VAR 0 7
29335: PUSH
29336: LD_INT 1
29338: ARRAY
29339: ST_TO_ADDR
// end ; end ;
29340: LD_VAR 0 4
29344: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
// if not list then
29349: LD_VAR 0 1
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29449
// i := list [ pos1 ] ;
29358: LD_ADDR_VAR 0 5
29362: PUSH
29363: LD_VAR 0 1
29367: PUSH
29368: LD_VAR 0 2
29372: ARRAY
29373: ST_TO_ADDR
// if not i then
29374: LD_VAR 0 5
29378: NOT
29379: IFFALSE 29383
// exit ;
29381: GO 29449
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29383: LD_ADDR_VAR 0 1
29387: PUSH
29388: LD_VAR 0 1
29392: PPUSH
29393: LD_VAR 0 2
29397: PPUSH
29398: LD_VAR 0 1
29402: PUSH
29403: LD_VAR 0 3
29407: ARRAY
29408: PPUSH
29409: CALL_OW 1
29413: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29414: LD_ADDR_VAR 0 1
29418: PUSH
29419: LD_VAR 0 1
29423: PPUSH
29424: LD_VAR 0 3
29428: PPUSH
29429: LD_VAR 0 5
29433: PPUSH
29434: CALL_OW 1
29438: ST_TO_ADDR
// result := list ;
29439: LD_ADDR_VAR 0 4
29443: PUSH
29444: LD_VAR 0 1
29448: ST_TO_ADDR
// end ;
29449: LD_VAR 0 4
29453: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29454: LD_INT 0
29456: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29457: LD_ADDR_VAR 0 5
29461: PUSH
29462: LD_VAR 0 1
29466: PPUSH
29467: CALL_OW 250
29471: PPUSH
29472: LD_VAR 0 1
29476: PPUSH
29477: CALL_OW 251
29481: PPUSH
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_VAR 0 3
29491: PPUSH
29492: LD_VAR 0 4
29496: PPUSH
29497: CALL 29879 0 5
29501: ST_TO_ADDR
// end ;
29502: LD_VAR 0 5
29506: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29507: LD_INT 0
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
// if not list or not unit then
29513: LD_VAR 0 2
29517: NOT
29518: IFTRUE 29527
29520: PUSH
29521: LD_VAR 0 1
29525: NOT
29526: OR
29527: IFFALSE 29531
// exit ;
29529: GO 29874
// result := [ ] ;
29531: LD_ADDR_VAR 0 5
29535: PUSH
29536: EMPTY
29537: ST_TO_ADDR
// for i in list do
29538: LD_ADDR_VAR 0 6
29542: PUSH
29543: LD_VAR 0 2
29547: PUSH
29548: FOR_IN
29549: IFFALSE 29767
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29551: LD_ADDR_VAR 0 8
29555: PUSH
29556: LD_VAR 0 1
29560: PPUSH
29561: LD_VAR 0 6
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: PPUSH
29570: LD_VAR 0 6
29574: PUSH
29575: LD_INT 2
29577: ARRAY
29578: PPUSH
29579: CALL_OW 297
29583: ST_TO_ADDR
// if not Count ( result ) then
29584: LD_VAR 0 5
29588: PPUSH
29589: CALL 26135 0 1
29593: NOT
29594: IFFALSE 29627
// begin result := Join ( result , [ i , tmp ] ) ;
29596: LD_ADDR_VAR 0 5
29600: PUSH
29601: LD_VAR 0 5
29605: PPUSH
29606: LD_VAR 0 6
29610: PUSH
29611: LD_VAR 0 8
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PPUSH
29620: CALL 62067 0 2
29624: ST_TO_ADDR
// continue ;
29625: GO 29548
// end ; if result [ result ] [ 2 ] <= tmp then
29627: LD_VAR 0 5
29631: PUSH
29632: LD_VAR 0 5
29636: ARRAY
29637: PUSH
29638: LD_INT 2
29640: ARRAY
29641: PUSH
29642: LD_VAR 0 8
29646: LESSEQUAL
29647: IFFALSE 29680
// result := Join ( result , [ i , tmp ] ) else
29649: LD_ADDR_VAR 0 5
29653: PUSH
29654: LD_VAR 0 5
29658: PPUSH
29659: LD_VAR 0 6
29663: PUSH
29664: LD_VAR 0 8
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PPUSH
29673: CALL 62067 0 2
29677: ST_TO_ADDR
29678: GO 29765
// begin for j := 1 to Count ( result ) do
29680: LD_ADDR_VAR 0 7
29684: PUSH
29685: DOUBLE
29686: LD_INT 1
29688: DEC
29689: ST_TO_ADDR
29690: LD_VAR 0 5
29694: PPUSH
29695: CALL 26135 0 1
29699: PUSH
29700: FOR_TO
29701: IFFALSE 29763
// begin if tmp < result [ j ] [ 2 ] then
29703: LD_VAR 0 8
29707: PUSH
29708: LD_VAR 0 5
29712: PUSH
29713: LD_VAR 0 7
29717: ARRAY
29718: PUSH
29719: LD_INT 2
29721: ARRAY
29722: LESS
29723: IFFALSE 29761
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29725: LD_ADDR_VAR 0 5
29729: PUSH
29730: LD_VAR 0 5
29734: PPUSH
29735: LD_VAR 0 7
29739: PPUSH
29740: LD_VAR 0 6
29744: PUSH
29745: LD_VAR 0 8
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PPUSH
29754: CALL_OW 2
29758: ST_TO_ADDR
// break ;
29759: GO 29763
// end ; end ;
29761: GO 29700
29763: POP
29764: POP
// end ; end ;
29765: GO 29548
29767: POP
29768: POP
// if result and not asc then
29769: LD_VAR 0 5
29773: IFFALSE 29782
29775: PUSH
29776: LD_VAR 0 3
29780: NOT
29781: AND
29782: IFFALSE 29799
// result := ReverseArray ( result ) ;
29784: LD_ADDR_VAR 0 5
29788: PUSH
29789: LD_VAR 0 5
29793: PPUSH
29794: CALL 57157 0 1
29798: ST_TO_ADDR
// tmp := [ ] ;
29799: LD_ADDR_VAR 0 8
29803: PUSH
29804: EMPTY
29805: ST_TO_ADDR
// if mode then
29806: LD_VAR 0 4
29810: IFFALSE 29874
// begin for i := 1 to result do
29812: LD_ADDR_VAR 0 6
29816: PUSH
29817: DOUBLE
29818: LD_INT 1
29820: DEC
29821: ST_TO_ADDR
29822: LD_VAR 0 5
29826: PUSH
29827: FOR_TO
29828: IFFALSE 29862
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29830: LD_ADDR_VAR 0 8
29834: PUSH
29835: LD_VAR 0 8
29839: PPUSH
29840: LD_VAR 0 5
29844: PUSH
29845: LD_VAR 0 6
29849: ARRAY
29850: PUSH
29851: LD_INT 1
29853: ARRAY
29854: PPUSH
29855: CALL 62067 0 2
29859: ST_TO_ADDR
29860: GO 29827
29862: POP
29863: POP
// result := tmp ;
29864: LD_ADDR_VAR 0 5
29868: PUSH
29869: LD_VAR 0 8
29873: ST_TO_ADDR
// end ; end ;
29874: LD_VAR 0 5
29878: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
// if not list then
29885: LD_VAR 0 3
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 30284
// result := [ ] ;
29894: LD_ADDR_VAR 0 6
29898: PUSH
29899: EMPTY
29900: ST_TO_ADDR
// for i in list do
29901: LD_ADDR_VAR 0 7
29905: PUSH
29906: LD_VAR 0 3
29910: PUSH
29911: FOR_IN
29912: IFFALSE 30114
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29914: LD_ADDR_VAR 0 9
29918: PUSH
29919: LD_VAR 0 7
29923: PPUSH
29924: LD_VAR 0 1
29928: PPUSH
29929: LD_VAR 0 2
29933: PPUSH
29934: CALL_OW 297
29938: ST_TO_ADDR
// if not result then
29939: LD_VAR 0 6
29943: NOT
29944: IFFALSE 29970
// result := [ [ i , tmp ] ] else
29946: LD_ADDR_VAR 0 6
29950: PUSH
29951: LD_VAR 0 7
29955: PUSH
29956: LD_VAR 0 9
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: ST_TO_ADDR
29968: GO 30112
// begin if result [ result ] [ 2 ] <= tmp then
29970: LD_VAR 0 6
29974: PUSH
29975: LD_VAR 0 6
29979: ARRAY
29980: PUSH
29981: LD_INT 2
29983: ARRAY
29984: PUSH
29985: LD_VAR 0 9
29989: LESSEQUAL
29990: IFFALSE 30032
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29992: LD_ADDR_VAR 0 6
29996: PUSH
29997: LD_VAR 0 6
30001: PPUSH
30002: LD_VAR 0 6
30006: PUSH
30007: LD_INT 1
30009: PLUS
30010: PPUSH
30011: LD_VAR 0 7
30015: PUSH
30016: LD_VAR 0 9
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PPUSH
30025: CALL_OW 2
30029: ST_TO_ADDR
30030: GO 30112
// for j := 1 to result do
30032: LD_ADDR_VAR 0 8
30036: PUSH
30037: DOUBLE
30038: LD_INT 1
30040: DEC
30041: ST_TO_ADDR
30042: LD_VAR 0 6
30046: PUSH
30047: FOR_TO
30048: IFFALSE 30110
// begin if tmp < result [ j ] [ 2 ] then
30050: LD_VAR 0 9
30054: PUSH
30055: LD_VAR 0 6
30059: PUSH
30060: LD_VAR 0 8
30064: ARRAY
30065: PUSH
30066: LD_INT 2
30068: ARRAY
30069: LESS
30070: IFFALSE 30108
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30072: LD_ADDR_VAR 0 6
30076: PUSH
30077: LD_VAR 0 6
30081: PPUSH
30082: LD_VAR 0 8
30086: PPUSH
30087: LD_VAR 0 7
30091: PUSH
30092: LD_VAR 0 9
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PPUSH
30101: CALL_OW 2
30105: ST_TO_ADDR
// break ;
30106: GO 30110
// end ; end ;
30108: GO 30047
30110: POP
30111: POP
// end ; end ;
30112: GO 29911
30114: POP
30115: POP
// if result and not asc then
30116: LD_VAR 0 6
30120: IFFALSE 30129
30122: PUSH
30123: LD_VAR 0 4
30127: NOT
30128: AND
30129: IFFALSE 30204
// begin tmp := result ;
30131: LD_ADDR_VAR 0 9
30135: PUSH
30136: LD_VAR 0 6
30140: ST_TO_ADDR
// for i = tmp downto 1 do
30141: LD_ADDR_VAR 0 7
30145: PUSH
30146: DOUBLE
30147: LD_VAR 0 9
30151: INC
30152: ST_TO_ADDR
30153: LD_INT 1
30155: PUSH
30156: FOR_DOWNTO
30157: IFFALSE 30202
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30159: LD_ADDR_VAR 0 6
30163: PUSH
30164: LD_VAR 0 6
30168: PPUSH
30169: LD_VAR 0 9
30173: PUSH
30174: LD_VAR 0 7
30178: MINUS
30179: PUSH
30180: LD_INT 1
30182: PLUS
30183: PPUSH
30184: LD_VAR 0 9
30188: PUSH
30189: LD_VAR 0 7
30193: ARRAY
30194: PPUSH
30195: CALL_OW 1
30199: ST_TO_ADDR
30200: GO 30156
30202: POP
30203: POP
// end ; tmp := [ ] ;
30204: LD_ADDR_VAR 0 9
30208: PUSH
30209: EMPTY
30210: ST_TO_ADDR
// if mode then
30211: LD_VAR 0 5
30215: IFFALSE 30284
// begin for i = 1 to result do
30217: LD_ADDR_VAR 0 7
30221: PUSH
30222: DOUBLE
30223: LD_INT 1
30225: DEC
30226: ST_TO_ADDR
30227: LD_VAR 0 6
30231: PUSH
30232: FOR_TO
30233: IFFALSE 30272
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30235: LD_ADDR_VAR 0 9
30239: PUSH
30240: LD_VAR 0 9
30244: PPUSH
30245: LD_VAR 0 7
30249: PPUSH
30250: LD_VAR 0 6
30254: PUSH
30255: LD_VAR 0 7
30259: ARRAY
30260: PUSH
30261: LD_INT 1
30263: ARRAY
30264: PPUSH
30265: CALL_OW 1
30269: ST_TO_ADDR
30270: GO 30232
30272: POP
30273: POP
// result := tmp ;
30274: LD_ADDR_VAR 0 6
30278: PUSH
30279: LD_VAR 0 9
30283: ST_TO_ADDR
// end ; end ;
30284: LD_VAR 0 6
30288: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30289: LD_INT 0
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30297: LD_ADDR_VAR 0 5
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: EMPTY
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: ST_TO_ADDR
// if not x or not y then
30319: LD_VAR 0 2
30323: NOT
30324: IFTRUE 30333
30326: PUSH
30327: LD_VAR 0 3
30331: NOT
30332: OR
30333: IFFALSE 30337
// exit ;
30335: GO 31993
// if not range then
30337: LD_VAR 0 4
30341: NOT
30342: IFFALSE 30352
// range := 10 ;
30344: LD_ADDR_VAR 0 4
30348: PUSH
30349: LD_INT 10
30351: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30352: LD_ADDR_VAR 0 8
30356: PUSH
30357: LD_INT 81
30359: PUSH
30360: LD_VAR 0 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 92
30371: PUSH
30372: LD_VAR 0 2
30376: PUSH
30377: LD_VAR 0 3
30381: PUSH
30382: LD_VAR 0 4
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 3
30395: PUSH
30396: LD_INT 21
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: LIST
30414: PPUSH
30415: CALL_OW 69
30419: ST_TO_ADDR
// if not tmp then
30420: LD_VAR 0 8
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 31993
// for i in tmp do
30429: LD_ADDR_VAR 0 6
30433: PUSH
30434: LD_VAR 0 8
30438: PUSH
30439: FOR_IN
30440: IFFALSE 31968
// begin points := [ 0 , 0 , 0 ] ;
30442: LD_ADDR_VAR 0 9
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: ST_TO_ADDR
// bpoints := 1 ;
30461: LD_ADDR_VAR 0 10
30465: PUSH
30466: LD_INT 1
30468: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30469: LD_VAR 0 6
30473: PPUSH
30474: CALL_OW 247
30478: PUSH
30479: LD_INT 1
30481: DOUBLE
30482: EQUAL
30483: IFTRUE 30487
30485: GO 31069
30487: POP
// begin if GetClass ( i ) = 1 then
30488: LD_VAR 0 6
30492: PPUSH
30493: CALL_OW 257
30497: PUSH
30498: LD_INT 1
30500: EQUAL
30501: IFFALSE 30522
// points := [ 10 , 5 , 3 ] ;
30503: LD_ADDR_VAR 0 9
30507: PUSH
30508: LD_INT 10
30510: PUSH
30511: LD_INT 5
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30522: LD_VAR 0 6
30526: PPUSH
30527: CALL_OW 257
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: LD_INT 4
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: IN
30546: IFFALSE 30567
// points := [ 3 , 2 , 1 ] ;
30548: LD_ADDR_VAR 0 9
30552: PUSH
30553: LD_INT 3
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30567: LD_VAR 0 6
30571: PPUSH
30572: CALL_OW 257
30576: PUSH
30577: LD_INT 5
30579: EQUAL
30580: IFFALSE 30601
// points := [ 130 , 5 , 2 ] ;
30582: LD_ADDR_VAR 0 9
30586: PUSH
30587: LD_INT 130
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30601: LD_VAR 0 6
30605: PPUSH
30606: CALL_OW 257
30610: PUSH
30611: LD_INT 8
30613: EQUAL
30614: IFFALSE 30635
// points := [ 35 , 35 , 30 ] ;
30616: LD_ADDR_VAR 0 9
30620: PUSH
30621: LD_INT 35
30623: PUSH
30624: LD_INT 35
30626: PUSH
30627: LD_INT 30
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 257
30644: PUSH
30645: LD_INT 9
30647: EQUAL
30648: IFFALSE 30669
// points := [ 20 , 55 , 40 ] ;
30650: LD_ADDR_VAR 0 9
30654: PUSH
30655: LD_INT 20
30657: PUSH
30658: LD_INT 55
30660: PUSH
30661: LD_INT 40
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30669: LD_VAR 0 6
30673: PPUSH
30674: CALL_OW 257
30678: PUSH
30679: LD_INT 12
30681: PUSH
30682: LD_INT 16
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: IN
30689: IFFALSE 30710
// points := [ 5 , 3 , 2 ] ;
30691: LD_ADDR_VAR 0 9
30695: PUSH
30696: LD_INT 5
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30710: LD_VAR 0 6
30714: PPUSH
30715: CALL_OW 257
30719: PUSH
30720: LD_INT 17
30722: EQUAL
30723: IFFALSE 30744
// points := [ 100 , 50 , 75 ] ;
30725: LD_ADDR_VAR 0 9
30729: PUSH
30730: LD_INT 100
30732: PUSH
30733: LD_INT 50
30735: PUSH
30736: LD_INT 75
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30744: LD_VAR 0 6
30748: PPUSH
30749: CALL_OW 257
30753: PUSH
30754: LD_INT 15
30756: EQUAL
30757: IFFALSE 30778
// points := [ 10 , 5 , 3 ] ;
30759: LD_ADDR_VAR 0 9
30763: PUSH
30764: LD_INT 10
30766: PUSH
30767: LD_INT 5
30769: PUSH
30770: LD_INT 3
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30778: LD_VAR 0 6
30782: PPUSH
30783: CALL_OW 257
30787: PUSH
30788: LD_INT 14
30790: EQUAL
30791: IFFALSE 30812
// points := [ 10 , 0 , 0 ] ;
30793: LD_ADDR_VAR 0 9
30797: PUSH
30798: LD_INT 10
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30812: LD_VAR 0 6
30816: PPUSH
30817: CALL_OW 257
30821: PUSH
30822: LD_INT 11
30824: EQUAL
30825: IFFALSE 30846
// points := [ 30 , 10 , 5 ] ;
30827: LD_ADDR_VAR 0 9
30831: PUSH
30832: LD_INT 30
30834: PUSH
30835: LD_INT 10
30837: PUSH
30838: LD_INT 5
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: LIST
30845: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30846: LD_VAR 0 1
30850: PPUSH
30851: LD_INT 5
30853: PPUSH
30854: CALL_OW 321
30858: PUSH
30859: LD_INT 2
30861: EQUAL
30862: IFFALSE 30879
// bpoints := bpoints * 1.8 ;
30864: LD_ADDR_VAR 0 10
30868: PUSH
30869: LD_VAR 0 10
30873: PUSH
30874: LD_REAL  1.80000000000000E+0000
30877: MUL
30878: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30879: LD_VAR 0 6
30883: PPUSH
30884: CALL_OW 257
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: LD_INT 3
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: IN
30907: IFFALSE 30927
30909: PUSH
30910: LD_VAR 0 1
30914: PPUSH
30915: LD_INT 51
30917: PPUSH
30918: CALL_OW 321
30922: PUSH
30923: LD_INT 2
30925: EQUAL
30926: AND
30927: IFFALSE 30944
// bpoints := bpoints * 1.2 ;
30929: LD_ADDR_VAR 0 10
30933: PUSH
30934: LD_VAR 0 10
30938: PUSH
30939: LD_REAL  1.20000000000000E+0000
30942: MUL
30943: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30944: LD_VAR 0 6
30948: PPUSH
30949: CALL_OW 257
30953: PUSH
30954: LD_INT 5
30956: PUSH
30957: LD_INT 7
30959: PUSH
30960: LD_INT 9
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: LIST
30967: IN
30968: IFFALSE 30988
30970: PUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: LD_INT 52
30978: PPUSH
30979: CALL_OW 321
30983: PUSH
30984: LD_INT 2
30986: EQUAL
30987: AND
30988: IFFALSE 31005
// bpoints := bpoints * 1.5 ;
30990: LD_ADDR_VAR 0 10
30994: PUSH
30995: LD_VAR 0 10
30999: PUSH
31000: LD_REAL  1.50000000000000E+0000
31003: MUL
31004: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31005: LD_VAR 0 1
31009: PPUSH
31010: LD_INT 66
31012: PPUSH
31013: CALL_OW 321
31017: PUSH
31018: LD_INT 2
31020: EQUAL
31021: IFFALSE 31038
// bpoints := bpoints * 1.1 ;
31023: LD_ADDR_VAR 0 10
31027: PUSH
31028: LD_VAR 0 10
31032: PUSH
31033: LD_REAL  1.10000000000000E+0000
31036: MUL
31037: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31038: LD_ADDR_VAR 0 10
31042: PUSH
31043: LD_VAR 0 10
31047: PUSH
31048: LD_VAR 0 6
31052: PPUSH
31053: LD_INT 1
31055: PPUSH
31056: CALL_OW 259
31060: PUSH
31061: LD_REAL  1.15000000000000E+0000
31064: MUL
31065: MUL
31066: ST_TO_ADDR
// end ; unit_vehicle :
31067: GO 31897
31069: LD_INT 2
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31885
31077: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31078: LD_VAR 0 6
31082: PPUSH
31083: CALL_OW 264
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 42
31093: PUSH
31094: LD_INT 24
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: IN
31102: IFFALSE 31123
// points := [ 25 , 5 , 3 ] ;
31104: LD_ADDR_VAR 0 9
31108: PUSH
31109: LD_INT 25
31111: PUSH
31112: LD_INT 5
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31123: LD_VAR 0 6
31127: PPUSH
31128: CALL_OW 264
31132: PUSH
31133: LD_INT 4
31135: PUSH
31136: LD_INT 43
31138: PUSH
31139: LD_INT 25
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: IN
31147: IFFALSE 31168
// points := [ 40 , 15 , 5 ] ;
31149: LD_ADDR_VAR 0 9
31153: PUSH
31154: LD_INT 40
31156: PUSH
31157: LD_INT 15
31159: PUSH
31160: LD_INT 5
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31168: LD_VAR 0 6
31172: PPUSH
31173: CALL_OW 264
31177: PUSH
31178: LD_INT 3
31180: PUSH
31181: LD_INT 23
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: IN
31188: IFFALSE 31209
// points := [ 7 , 25 , 8 ] ;
31190: LD_ADDR_VAR 0 9
31194: PUSH
31195: LD_INT 7
31197: PUSH
31198: LD_INT 25
31200: PUSH
31201: LD_INT 8
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31209: LD_VAR 0 6
31213: PPUSH
31214: CALL_OW 264
31218: PUSH
31219: LD_INT 5
31221: PUSH
31222: LD_INT 27
31224: PUSH
31225: LD_INT 44
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: IN
31233: IFFALSE 31254
// points := [ 14 , 50 , 16 ] ;
31235: LD_ADDR_VAR 0 9
31239: PUSH
31240: LD_INT 14
31242: PUSH
31243: LD_INT 50
31245: PUSH
31246: LD_INT 16
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31254: LD_VAR 0 6
31258: PPUSH
31259: CALL_OW 264
31263: PUSH
31264: LD_INT 6
31266: PUSH
31267: LD_INT 46
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: IN
31274: IFFALSE 31295
// points := [ 32 , 120 , 70 ] ;
31276: LD_ADDR_VAR 0 9
31280: PUSH
31281: LD_INT 32
31283: PUSH
31284: LD_INT 120
31286: PUSH
31287: LD_INT 70
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31295: LD_VAR 0 6
31299: PPUSH
31300: CALL_OW 264
31304: PUSH
31305: LD_INT 7
31307: PUSH
31308: LD_INT 28
31310: PUSH
31311: LD_INT 45
31313: PUSH
31314: LD_INT 92
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: IN
31323: IFFALSE 31344
// points := [ 35 , 20 , 45 ] ;
31325: LD_ADDR_VAR 0 9
31329: PUSH
31330: LD_INT 35
31332: PUSH
31333: LD_INT 20
31335: PUSH
31336: LD_INT 45
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31344: LD_VAR 0 6
31348: PPUSH
31349: CALL_OW 264
31353: PUSH
31354: LD_INT 47
31356: PUSH
31357: EMPTY
31358: LIST
31359: IN
31360: IFFALSE 31381
// points := [ 67 , 45 , 75 ] ;
31362: LD_ADDR_VAR 0 9
31366: PUSH
31367: LD_INT 67
31369: PUSH
31370: LD_INT 45
31372: PUSH
31373: LD_INT 75
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31381: LD_VAR 0 6
31385: PPUSH
31386: CALL_OW 264
31390: PUSH
31391: LD_INT 26
31393: PUSH
31394: EMPTY
31395: LIST
31396: IN
31397: IFFALSE 31418
// points := [ 120 , 30 , 80 ] ;
31399: LD_ADDR_VAR 0 9
31403: PUSH
31404: LD_INT 120
31406: PUSH
31407: LD_INT 30
31409: PUSH
31410: LD_INT 80
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31418: LD_VAR 0 6
31422: PPUSH
31423: CALL_OW 264
31427: PUSH
31428: LD_INT 22
31430: PUSH
31431: EMPTY
31432: LIST
31433: IN
31434: IFFALSE 31455
// points := [ 40 , 1 , 1 ] ;
31436: LD_ADDR_VAR 0 9
31440: PUSH
31441: LD_INT 40
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31455: LD_VAR 0 6
31459: PPUSH
31460: CALL_OW 264
31464: PUSH
31465: LD_INT 29
31467: PUSH
31468: EMPTY
31469: LIST
31470: IN
31471: IFFALSE 31492
// points := [ 70 , 200 , 400 ] ;
31473: LD_ADDR_VAR 0 9
31477: PUSH
31478: LD_INT 70
31480: PUSH
31481: LD_INT 200
31483: PUSH
31484: LD_INT 400
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: LIST
31491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31492: LD_VAR 0 6
31496: PPUSH
31497: CALL_OW 264
31501: PUSH
31502: LD_INT 14
31504: PUSH
31505: LD_INT 53
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: IN
31512: IFFALSE 31533
// points := [ 40 , 10 , 20 ] ;
31514: LD_ADDR_VAR 0 9
31518: PUSH
31519: LD_INT 40
31521: PUSH
31522: LD_INT 10
31524: PUSH
31525: LD_INT 20
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: LIST
31532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31533: LD_VAR 0 6
31537: PPUSH
31538: CALL_OW 264
31542: PUSH
31543: LD_INT 9
31545: PUSH
31546: EMPTY
31547: LIST
31548: IN
31549: IFFALSE 31570
// points := [ 5 , 70 , 20 ] ;
31551: LD_ADDR_VAR 0 9
31555: PUSH
31556: LD_INT 5
31558: PUSH
31559: LD_INT 70
31561: PUSH
31562: LD_INT 20
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31570: LD_VAR 0 6
31574: PPUSH
31575: CALL_OW 264
31579: PUSH
31580: LD_INT 10
31582: PUSH
31583: EMPTY
31584: LIST
31585: IN
31586: IFFALSE 31607
// points := [ 35 , 110 , 70 ] ;
31588: LD_ADDR_VAR 0 9
31592: PUSH
31593: LD_INT 35
31595: PUSH
31596: LD_INT 110
31598: PUSH
31599: LD_INT 70
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31607: LD_VAR 0 6
31611: PPUSH
31612: CALL_OW 265
31616: PUSH
31617: LD_INT 25
31619: EQUAL
31620: IFFALSE 31641
// points := [ 80 , 65 , 100 ] ;
31622: LD_ADDR_VAR 0 9
31626: PUSH
31627: LD_INT 80
31629: PUSH
31630: LD_INT 65
31632: PUSH
31633: LD_INT 100
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31641: LD_VAR 0 6
31645: PPUSH
31646: CALL_OW 263
31650: PUSH
31651: LD_INT 1
31653: EQUAL
31654: IFFALSE 31689
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31656: LD_ADDR_VAR 0 10
31660: PUSH
31661: LD_VAR 0 10
31665: PUSH
31666: LD_VAR 0 6
31670: PPUSH
31671: CALL_OW 311
31675: PPUSH
31676: LD_INT 3
31678: PPUSH
31679: CALL_OW 259
31683: PUSH
31684: LD_INT 4
31686: MUL
31687: MUL
31688: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31689: LD_VAR 0 6
31693: PPUSH
31694: CALL_OW 263
31698: PUSH
31699: LD_INT 2
31701: EQUAL
31702: IFFALSE 31753
// begin j := IsControledBy ( i ) ;
31704: LD_ADDR_VAR 0 7
31708: PUSH
31709: LD_VAR 0 6
31713: PPUSH
31714: CALL_OW 312
31718: ST_TO_ADDR
// if j then
31719: LD_VAR 0 7
31723: IFFALSE 31753
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31725: LD_ADDR_VAR 0 10
31729: PUSH
31730: LD_VAR 0 10
31734: PUSH
31735: LD_VAR 0 7
31739: PPUSH
31740: LD_INT 3
31742: PPUSH
31743: CALL_OW 259
31747: PUSH
31748: LD_INT 3
31750: MUL
31751: MUL
31752: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 264
31762: PUSH
31763: LD_INT 5
31765: PUSH
31766: LD_INT 6
31768: PUSH
31769: LD_INT 46
31771: PUSH
31772: LD_INT 44
31774: PUSH
31775: LD_INT 47
31777: PUSH
31778: LD_INT 45
31780: PUSH
31781: LD_INT 28
31783: PUSH
31784: LD_INT 7
31786: PUSH
31787: LD_INT 27
31789: PUSH
31790: LD_INT 29
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: IN
31805: IFFALSE 31825
31807: PUSH
31808: LD_VAR 0 1
31812: PPUSH
31813: LD_INT 52
31815: PPUSH
31816: CALL_OW 321
31820: PUSH
31821: LD_INT 2
31823: EQUAL
31824: AND
31825: IFFALSE 31842
// bpoints := bpoints * 1.2 ;
31827: LD_ADDR_VAR 0 10
31831: PUSH
31832: LD_VAR 0 10
31836: PUSH
31837: LD_REAL  1.20000000000000E+0000
31840: MUL
31841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31842: LD_VAR 0 6
31846: PPUSH
31847: CALL_OW 264
31851: PUSH
31852: LD_INT 6
31854: PUSH
31855: LD_INT 46
31857: PUSH
31858: LD_INT 47
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: IN
31866: IFFALSE 31883
// bpoints := bpoints * 1.2 ;
31868: LD_ADDR_VAR 0 10
31872: PUSH
31873: LD_VAR 0 10
31877: PUSH
31878: LD_REAL  1.20000000000000E+0000
31881: MUL
31882: ST_TO_ADDR
// end ; unit_building :
31883: GO 31897
31885: LD_INT 3
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31896
31893: POP
// ; end ;
31894: GO 31897
31896: POP
// for j = 1 to 3 do
31897: LD_ADDR_VAR 0 7
31901: PUSH
31902: DOUBLE
31903: LD_INT 1
31905: DEC
31906: ST_TO_ADDR
31907: LD_INT 3
31909: PUSH
31910: FOR_TO
31911: IFFALSE 31964
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_VAR 0 5
31922: PPUSH
31923: LD_VAR 0 7
31927: PPUSH
31928: LD_VAR 0 5
31932: PUSH
31933: LD_VAR 0 7
31937: ARRAY
31938: PUSH
31939: LD_VAR 0 9
31943: PUSH
31944: LD_VAR 0 7
31948: ARRAY
31949: PUSH
31950: LD_VAR 0 10
31954: MUL
31955: PLUS
31956: PPUSH
31957: CALL_OW 1
31961: ST_TO_ADDR
31962: GO 31910
31964: POP
31965: POP
// end ;
31966: GO 30439
31968: POP
31969: POP
// result := Replace ( result , 4 , tmp ) ;
31970: LD_ADDR_VAR 0 5
31974: PUSH
31975: LD_VAR 0 5
31979: PPUSH
31980: LD_INT 4
31982: PPUSH
31983: LD_VAR 0 8
31987: PPUSH
31988: CALL_OW 1
31992: ST_TO_ADDR
// end ;
31993: LD_VAR 0 5
31997: RET
// export function DangerAtRange ( unit , range ) ; begin
31998: LD_INT 0
32000: PPUSH
// if not unit then
32001: LD_VAR 0 1
32005: NOT
32006: IFFALSE 32010
// exit ;
32008: GO 32055
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32010: LD_ADDR_VAR 0 3
32014: PUSH
32015: LD_VAR 0 1
32019: PPUSH
32020: CALL_OW 255
32024: PPUSH
32025: LD_VAR 0 1
32029: PPUSH
32030: CALL_OW 250
32034: PPUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: CALL_OW 251
32044: PPUSH
32045: LD_VAR 0 2
32049: PPUSH
32050: CALL 30289 0 4
32054: ST_TO_ADDR
// end ;
32055: LD_VAR 0 3
32059: RET
// export function DangerInArea ( side , area ) ; begin
32060: LD_INT 0
32062: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_INT 81
32075: PUSH
32076: LD_VAR 0 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PPUSH
32085: CALL_OW 70
32089: ST_TO_ADDR
// end ;
32090: LD_VAR 0 3
32094: RET
// export function IsExtension ( b ) ; begin
32095: LD_INT 0
32097: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: LD_VAR 0 1
32107: PUSH
32108: LD_INT 23
32110: PUSH
32111: LD_INT 20
32113: PUSH
32114: LD_INT 22
32116: PUSH
32117: LD_INT 17
32119: PUSH
32120: LD_INT 24
32122: PUSH
32123: LD_INT 21
32125: PUSH
32126: LD_INT 19
32128: PUSH
32129: LD_INT 16
32131: PUSH
32132: LD_INT 25
32134: PUSH
32135: LD_INT 18
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: IN
32150: ST_TO_ADDR
// end ;
32151: LD_VAR 0 2
32155: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32156: LD_INT 0
32158: PPUSH
32159: PPUSH
32160: PPUSH
// result := [ ] ;
32161: LD_ADDR_VAR 0 4
32165: PUSH
32166: EMPTY
32167: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32168: LD_ADDR_VAR 0 5
32172: PUSH
32173: LD_VAR 0 2
32177: PPUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PPUSH
32188: CALL_OW 70
32192: ST_TO_ADDR
// if not tmp then
32193: LD_VAR 0 5
32197: NOT
32198: IFFALSE 32202
// exit ;
32200: GO 32266
// if checkLink then
32202: LD_VAR 0 3
32206: IFFALSE 32256
// begin for i in tmp do
32208: LD_ADDR_VAR 0 6
32212: PUSH
32213: LD_VAR 0 5
32217: PUSH
32218: FOR_IN
32219: IFFALSE 32254
// if GetBase ( i ) <> base then
32221: LD_VAR 0 6
32225: PPUSH
32226: CALL_OW 274
32230: PUSH
32231: LD_VAR 0 1
32235: NONEQUAL
32236: IFFALSE 32252
// ComLinkToBase ( base , i ) ;
32238: LD_VAR 0 1
32242: PPUSH
32243: LD_VAR 0 6
32247: PPUSH
32248: CALL_OW 169
32252: GO 32218
32254: POP
32255: POP
// end ; result := tmp ;
32256: LD_ADDR_VAR 0 4
32260: PUSH
32261: LD_VAR 0 5
32265: ST_TO_ADDR
// end ;
32266: LD_VAR 0 4
32270: RET
// export function ComComplete ( units , b ) ; var i ; begin
32271: LD_INT 0
32273: PPUSH
32274: PPUSH
// if not units then
32275: LD_VAR 0 1
32279: NOT
32280: IFFALSE 32284
// exit ;
32282: GO 32374
// for i in units do
32284: LD_ADDR_VAR 0 4
32288: PUSH
32289: LD_VAR 0 1
32293: PUSH
32294: FOR_IN
32295: IFFALSE 32372
// if BuildingStatus ( b ) = bs_build then
32297: LD_VAR 0 2
32301: PPUSH
32302: CALL_OW 461
32306: PUSH
32307: LD_INT 1
32309: EQUAL
32310: IFFALSE 32370
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32312: LD_VAR 0 4
32316: PPUSH
32317: LD_STRING h
32319: PUSH
32320: LD_VAR 0 2
32324: PPUSH
32325: CALL_OW 250
32329: PUSH
32330: LD_VAR 0 2
32334: PPUSH
32335: CALL_OW 251
32339: PUSH
32340: LD_VAR 0 2
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: PPUSH
32366: CALL_OW 446
32370: GO 32294
32372: POP
32373: POP
// end ;
32374: LD_VAR 0 3
32378: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32379: LD_INT 0
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32387: LD_VAR 0 1
32391: NOT
32392: IFTRUE 32409
32394: PUSH
32395: LD_VAR 0 1
32399: PPUSH
32400: CALL_OW 263
32404: PUSH
32405: LD_INT 2
32407: NONEQUAL
32408: OR
32409: IFFALSE 32413
// exit ;
32411: GO 32729
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32413: LD_ADDR_VAR 0 6
32417: PUSH
32418: LD_INT 22
32420: PUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 255
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_INT 36
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 34
32450: PUSH
32451: LD_INT 31
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PPUSH
32467: CALL_OW 69
32471: ST_TO_ADDR
// if not tmp then
32472: LD_VAR 0 6
32476: NOT
32477: IFFALSE 32481
// exit ;
32479: GO 32729
// result := [ ] ;
32481: LD_ADDR_VAR 0 2
32485: PUSH
32486: EMPTY
32487: ST_TO_ADDR
// for i in tmp do
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_VAR 0 6
32497: PUSH
32498: FOR_IN
32499: IFFALSE 32570
// begin t := UnitsInside ( i ) ;
32501: LD_ADDR_VAR 0 4
32505: PUSH
32506: LD_VAR 0 3
32510: PPUSH
32511: CALL_OW 313
32515: ST_TO_ADDR
// if t then
32516: LD_VAR 0 4
32520: IFFALSE 32568
// for j in t do
32522: LD_ADDR_VAR 0 7
32526: PUSH
32527: LD_VAR 0 4
32531: PUSH
32532: FOR_IN
32533: IFFALSE 32566
// result := Replace ( result , result + 1 , j ) ;
32535: LD_ADDR_VAR 0 2
32539: PUSH
32540: LD_VAR 0 2
32544: PPUSH
32545: LD_VAR 0 2
32549: PUSH
32550: LD_INT 1
32552: PLUS
32553: PPUSH
32554: LD_VAR 0 7
32558: PPUSH
32559: CALL_OW 1
32563: ST_TO_ADDR
32564: GO 32532
32566: POP
32567: POP
// end ;
32568: GO 32498
32570: POP
32571: POP
// if not result then
32572: LD_VAR 0 2
32576: NOT
32577: IFFALSE 32581
// exit ;
32579: GO 32729
// mech := result [ 1 ] ;
32581: LD_ADDR_VAR 0 5
32585: PUSH
32586: LD_VAR 0 2
32590: PUSH
32591: LD_INT 1
32593: ARRAY
32594: ST_TO_ADDR
// if result > 1 then
32595: LD_VAR 0 2
32599: PUSH
32600: LD_INT 1
32602: GREATER
32603: IFFALSE 32715
// begin for i = 2 to result do
32605: LD_ADDR_VAR 0 3
32609: PUSH
32610: DOUBLE
32611: LD_INT 2
32613: DEC
32614: ST_TO_ADDR
32615: LD_VAR 0 2
32619: PUSH
32620: FOR_TO
32621: IFFALSE 32713
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32623: LD_ADDR_VAR 0 4
32627: PUSH
32628: LD_VAR 0 2
32632: PUSH
32633: LD_VAR 0 3
32637: ARRAY
32638: PPUSH
32639: LD_INT 3
32641: PPUSH
32642: CALL_OW 259
32646: PUSH
32647: LD_VAR 0 2
32651: PUSH
32652: LD_VAR 0 3
32656: ARRAY
32657: PPUSH
32658: CALL_OW 432
32662: MINUS
32663: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32664: LD_VAR 0 4
32668: PUSH
32669: LD_VAR 0 5
32673: PPUSH
32674: LD_INT 3
32676: PPUSH
32677: CALL_OW 259
32681: PUSH
32682: LD_VAR 0 5
32686: PPUSH
32687: CALL_OW 432
32691: MINUS
32692: GREATEREQUAL
32693: IFFALSE 32711
// mech := result [ i ] ;
32695: LD_ADDR_VAR 0 5
32699: PUSH
32700: LD_VAR 0 2
32704: PUSH
32705: LD_VAR 0 3
32709: ARRAY
32710: ST_TO_ADDR
// end ;
32711: GO 32620
32713: POP
32714: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32715: LD_VAR 0 1
32719: PPUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: CALL_OW 135
// end ;
32729: LD_VAR 0 2
32733: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32734: LD_INT 0
32736: PPUSH
32737: PPUSH
32738: PPUSH
32739: PPUSH
32740: PPUSH
32741: PPUSH
32742: PPUSH
32743: PPUSH
32744: PPUSH
32745: PPUSH
32746: PPUSH
32747: PPUSH
32748: PPUSH
// result := [ ] ;
32749: LD_ADDR_VAR 0 7
32753: PUSH
32754: EMPTY
32755: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 266
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: IN
32776: NOT
32777: IFFALSE 32781
// exit ;
32779: GO 34421
// if name then
32781: LD_VAR 0 3
32785: IFFALSE 32801
// SetBName ( base_dep , name ) ;
32787: LD_VAR 0 1
32791: PPUSH
32792: LD_VAR 0 3
32796: PPUSH
32797: CALL_OW 500
// base := GetBase ( base_dep ) ;
32801: LD_ADDR_VAR 0 15
32805: PUSH
32806: LD_VAR 0 1
32810: PPUSH
32811: CALL_OW 274
32815: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32816: LD_ADDR_VAR 0 16
32820: PUSH
32821: LD_VAR 0 1
32825: PPUSH
32826: CALL_OW 255
32830: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32831: LD_ADDR_VAR 0 17
32835: PUSH
32836: LD_VAR 0 1
32840: PPUSH
32841: CALL_OW 248
32845: ST_TO_ADDR
// if sources then
32846: LD_VAR 0 5
32850: IFFALSE 32897
// for i = 1 to 3 do
32852: LD_ADDR_VAR 0 8
32856: PUSH
32857: DOUBLE
32858: LD_INT 1
32860: DEC
32861: ST_TO_ADDR
32862: LD_INT 3
32864: PUSH
32865: FOR_TO
32866: IFFALSE 32895
// AddResourceType ( base , i , sources [ i ] ) ;
32868: LD_VAR 0 15
32872: PPUSH
32873: LD_VAR 0 8
32877: PPUSH
32878: LD_VAR 0 5
32882: PUSH
32883: LD_VAR 0 8
32887: ARRAY
32888: PPUSH
32889: CALL_OW 276
32893: GO 32865
32895: POP
32896: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32897: LD_ADDR_VAR 0 18
32901: PUSH
32902: LD_VAR 0 15
32906: PPUSH
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_INT 1
32914: PPUSH
32915: CALL 32156 0 3
32919: ST_TO_ADDR
// InitHc ;
32920: CALL_OW 19
// InitUc ;
32924: CALL_OW 18
// uc_side := side ;
32928: LD_ADDR_OWVAR 20
32932: PUSH
32933: LD_VAR 0 16
32937: ST_TO_ADDR
// uc_nation := nation ;
32938: LD_ADDR_OWVAR 21
32942: PUSH
32943: LD_VAR 0 17
32947: ST_TO_ADDR
// if buildings then
32948: LD_VAR 0 18
32952: IFFALSE 34280
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32954: LD_ADDR_VAR 0 19
32958: PUSH
32959: LD_VAR 0 18
32963: PPUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 30
32969: PUSH
32970: LD_INT 29
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 30
32979: PUSH
32980: LD_INT 30
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 72
32996: ST_TO_ADDR
// if tmp then
32997: LD_VAR 0 19
33001: IFFALSE 33049
// for i in tmp do
33003: LD_ADDR_VAR 0 8
33007: PUSH
33008: LD_VAR 0 19
33012: PUSH
33013: FOR_IN
33014: IFFALSE 33047
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33016: LD_VAR 0 8
33020: PPUSH
33021: CALL_OW 250
33025: PPUSH
33026: LD_VAR 0 8
33030: PPUSH
33031: CALL_OW 251
33035: PPUSH
33036: LD_VAR 0 16
33040: PPUSH
33041: CALL_OW 441
33045: GO 33013
33047: POP
33048: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33049: LD_VAR 0 18
33053: PPUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 30
33059: PUSH
33060: LD_INT 32
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 30
33069: PUSH
33070: LD_INT 33
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 72
33086: IFFALSE 33174
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33088: LD_ADDR_VAR 0 8
33092: PUSH
33093: LD_VAR 0 18
33097: PPUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 30
33103: PUSH
33104: LD_INT 32
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 30
33113: PUSH
33114: LD_INT 33
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: PPUSH
33126: CALL_OW 72
33130: PUSH
33131: FOR_IN
33132: IFFALSE 33172
// begin if not GetBWeapon ( i ) then
33134: LD_VAR 0 8
33138: PPUSH
33139: CALL_OW 269
33143: NOT
33144: IFFALSE 33170
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33146: LD_VAR 0 8
33150: PPUSH
33151: LD_VAR 0 8
33155: PPUSH
33156: LD_VAR 0 2
33160: PPUSH
33161: CALL 34426 0 2
33165: PPUSH
33166: CALL_OW 431
// end ;
33170: GO 33131
33172: POP
33173: POP
// end ; for i = 1 to personel do
33174: LD_ADDR_VAR 0 8
33178: PUSH
33179: DOUBLE
33180: LD_INT 1
33182: DEC
33183: ST_TO_ADDR
33184: LD_VAR 0 6
33188: PUSH
33189: FOR_TO
33190: IFFALSE 34260
// begin if i > 4 then
33192: LD_VAR 0 8
33196: PUSH
33197: LD_INT 4
33199: GREATER
33200: IFFALSE 33204
// break ;
33202: GO 34260
// case i of 1 :
33204: LD_VAR 0 8
33208: PUSH
33209: LD_INT 1
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33217
33215: GO 33297
33217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33218: LD_ADDR_VAR 0 12
33222: PUSH
33223: LD_VAR 0 18
33227: PPUSH
33228: LD_INT 22
33230: PUSH
33231: LD_VAR 0 16
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 58
33242: PUSH
33243: EMPTY
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: PUSH
33249: LD_INT 30
33251: PUSH
33252: LD_INT 32
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 30
33261: PUSH
33262: LD_INT 4
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 30
33271: PUSH
33272: LD_INT 5
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: PPUSH
33290: CALL_OW 72
33294: ST_TO_ADDR
33295: GO 33519
33297: LD_INT 2
33299: DOUBLE
33300: EQUAL
33301: IFTRUE 33305
33303: GO 33367
33305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33306: LD_ADDR_VAR 0 12
33310: PUSH
33311: LD_VAR 0 18
33315: PPUSH
33316: LD_INT 22
33318: PUSH
33319: LD_VAR 0 16
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: LD_INT 30
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 30
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: LIST
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL_OW 72
33364: ST_TO_ADDR
33365: GO 33519
33367: LD_INT 3
33369: DOUBLE
33370: EQUAL
33371: IFTRUE 33375
33373: GO 33437
33375: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33376: LD_ADDR_VAR 0 12
33380: PUSH
33381: LD_VAR 0 18
33385: PPUSH
33386: LD_INT 22
33388: PUSH
33389: LD_VAR 0 16
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 30
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 30
33413: PUSH
33414: LD_INT 3
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PPUSH
33430: CALL_OW 72
33434: ST_TO_ADDR
33435: GO 33519
33437: LD_INT 4
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33518
33445: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33446: LD_ADDR_VAR 0 12
33450: PUSH
33451: LD_VAR 0 18
33455: PPUSH
33456: LD_INT 22
33458: PUSH
33459: LD_VAR 0 16
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: LD_INT 30
33473: PUSH
33474: LD_INT 6
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 30
33483: PUSH
33484: LD_INT 7
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 30
33493: PUSH
33494: LD_INT 8
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PPUSH
33511: CALL_OW 72
33515: ST_TO_ADDR
33516: GO 33519
33518: POP
// if i = 1 then
33519: LD_VAR 0 8
33523: PUSH
33524: LD_INT 1
33526: EQUAL
33527: IFFALSE 33638
// begin tmp := [ ] ;
33529: LD_ADDR_VAR 0 19
33533: PUSH
33534: EMPTY
33535: ST_TO_ADDR
// for j in f do
33536: LD_ADDR_VAR 0 9
33540: PUSH
33541: LD_VAR 0 12
33545: PUSH
33546: FOR_IN
33547: IFFALSE 33620
// if GetBType ( j ) = b_bunker then
33549: LD_VAR 0 9
33553: PPUSH
33554: CALL_OW 266
33558: PUSH
33559: LD_INT 32
33561: EQUAL
33562: IFFALSE 33589
// tmp := Insert ( tmp , 1 , j ) else
33564: LD_ADDR_VAR 0 19
33568: PUSH
33569: LD_VAR 0 19
33573: PPUSH
33574: LD_INT 1
33576: PPUSH
33577: LD_VAR 0 9
33581: PPUSH
33582: CALL_OW 2
33586: ST_TO_ADDR
33587: GO 33618
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33589: LD_ADDR_VAR 0 19
33593: PUSH
33594: LD_VAR 0 19
33598: PPUSH
33599: LD_VAR 0 19
33603: PUSH
33604: LD_INT 1
33606: PLUS
33607: PPUSH
33608: LD_VAR 0 9
33612: PPUSH
33613: CALL_OW 2
33617: ST_TO_ADDR
33618: GO 33546
33620: POP
33621: POP
// if tmp then
33622: LD_VAR 0 19
33626: IFFALSE 33638
// f := tmp ;
33628: LD_ADDR_VAR 0 12
33632: PUSH
33633: LD_VAR 0 19
33637: ST_TO_ADDR
// end ; x := personel [ i ] ;
33638: LD_ADDR_VAR 0 13
33642: PUSH
33643: LD_VAR 0 6
33647: PUSH
33648: LD_VAR 0 8
33652: ARRAY
33653: ST_TO_ADDR
// if x = - 1 then
33654: LD_VAR 0 13
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: EQUAL
33663: IFFALSE 33874
// begin for j in f do
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_VAR 0 12
33674: PUSH
33675: FOR_IN
33676: IFFALSE 33870
// repeat InitHc ;
33678: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33682: LD_VAR 0 9
33686: PPUSH
33687: CALL_OW 266
33691: PUSH
33692: LD_INT 5
33694: EQUAL
33695: IFFALSE 33765
// begin if UnitsInside ( j ) < 3 then
33697: LD_VAR 0 9
33701: PPUSH
33702: CALL_OW 313
33706: PUSH
33707: LD_INT 3
33709: LESS
33710: IFFALSE 33746
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33712: LD_INT 0
33714: PPUSH
33715: LD_INT 5
33717: PUSH
33718: LD_INT 8
33720: PUSH
33721: LD_INT 9
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: PUSH
33729: LD_VAR 0 17
33733: ARRAY
33734: PPUSH
33735: LD_VAR 0 4
33739: PPUSH
33740: CALL_OW 380
33744: GO 33763
// PrepareHuman ( false , i , skill ) ;
33746: LD_INT 0
33748: PPUSH
33749: LD_VAR 0 8
33753: PPUSH
33754: LD_VAR 0 4
33758: PPUSH
33759: CALL_OW 380
// end else
33763: GO 33782
// PrepareHuman ( false , i , skill ) ;
33765: LD_INT 0
33767: PPUSH
33768: LD_VAR 0 8
33772: PPUSH
33773: LD_VAR 0 4
33777: PPUSH
33778: CALL_OW 380
// un := CreateHuman ;
33782: LD_ADDR_VAR 0 14
33786: PUSH
33787: CALL_OW 44
33791: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: LD_VAR 0 7
33801: PPUSH
33802: LD_INT 1
33804: PPUSH
33805: LD_VAR 0 14
33809: PPUSH
33810: CALL_OW 2
33814: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33815: LD_VAR 0 14
33819: PPUSH
33820: LD_VAR 0 9
33824: PPUSH
33825: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33829: LD_VAR 0 9
33833: PPUSH
33834: CALL_OW 313
33838: PUSH
33839: LD_INT 6
33841: EQUAL
33842: IFTRUE 33866
33844: PUSH
33845: LD_VAR 0 9
33849: PPUSH
33850: CALL_OW 266
33854: PUSH
33855: LD_INT 32
33857: PUSH
33858: LD_INT 31
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: IN
33865: OR
33866: IFFALSE 33678
33868: GO 33675
33870: POP
33871: POP
// end else
33872: GO 34258
// for j = 1 to x do
33874: LD_ADDR_VAR 0 9
33878: PUSH
33879: DOUBLE
33880: LD_INT 1
33882: DEC
33883: ST_TO_ADDR
33884: LD_VAR 0 13
33888: PUSH
33889: FOR_TO
33890: IFFALSE 34256
// begin InitHc ;
33892: CALL_OW 19
// if not f then
33896: LD_VAR 0 12
33900: NOT
33901: IFFALSE 33990
// begin PrepareHuman ( false , i , skill ) ;
33903: LD_INT 0
33905: PPUSH
33906: LD_VAR 0 8
33910: PPUSH
33911: LD_VAR 0 4
33915: PPUSH
33916: CALL_OW 380
// un := CreateHuman ;
33920: LD_ADDR_VAR 0 14
33924: PUSH
33925: CALL_OW 44
33929: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33930: LD_ADDR_VAR 0 7
33934: PUSH
33935: LD_VAR 0 7
33939: PPUSH
33940: LD_INT 1
33942: PPUSH
33943: LD_VAR 0 14
33947: PPUSH
33948: CALL_OW 2
33952: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33953: LD_VAR 0 14
33957: PPUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: CALL_OW 250
33967: PPUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 251
33977: PPUSH
33978: LD_INT 10
33980: PPUSH
33981: LD_INT 0
33983: PPUSH
33984: CALL_OW 50
// continue ;
33988: GO 33889
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33990: LD_VAR 0 12
33994: PUSH
33995: LD_INT 1
33997: ARRAY
33998: PPUSH
33999: CALL_OW 313
34003: IFFALSE 34031
34005: PUSH
34006: LD_VAR 0 12
34010: PUSH
34011: LD_INT 1
34013: ARRAY
34014: PPUSH
34015: CALL_OW 266
34019: PUSH
34020: LD_INT 32
34022: PUSH
34023: LD_INT 31
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: IN
34030: AND
34031: IFTRUE 34052
34033: PUSH
34034: LD_VAR 0 12
34038: PUSH
34039: LD_INT 1
34041: ARRAY
34042: PPUSH
34043: CALL_OW 313
34047: PUSH
34048: LD_INT 6
34050: EQUAL
34051: OR
34052: IFFALSE 34072
// f := Delete ( f , 1 ) ;
34054: LD_ADDR_VAR 0 12
34058: PUSH
34059: LD_VAR 0 12
34063: PPUSH
34064: LD_INT 1
34066: PPUSH
34067: CALL_OW 3
34071: ST_TO_ADDR
// if not f then
34072: LD_VAR 0 12
34076: NOT
34077: IFFALSE 34095
// begin x := x + 2 ;
34079: LD_ADDR_VAR 0 13
34083: PUSH
34084: LD_VAR 0 13
34088: PUSH
34089: LD_INT 2
34091: PLUS
34092: ST_TO_ADDR
// continue ;
34093: GO 33889
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34095: LD_VAR 0 12
34099: PUSH
34100: LD_INT 1
34102: ARRAY
34103: PPUSH
34104: CALL_OW 266
34108: PUSH
34109: LD_INT 5
34111: EQUAL
34112: IFFALSE 34186
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34114: LD_VAR 0 12
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: PPUSH
34123: CALL_OW 313
34127: PUSH
34128: LD_INT 3
34130: LESS
34131: IFFALSE 34167
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34133: LD_INT 0
34135: PPUSH
34136: LD_INT 5
34138: PUSH
34139: LD_INT 8
34141: PUSH
34142: LD_INT 9
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: PUSH
34150: LD_VAR 0 17
34154: ARRAY
34155: PPUSH
34156: LD_VAR 0 4
34160: PPUSH
34161: CALL_OW 380
34165: GO 34184
// PrepareHuman ( false , i , skill ) ;
34167: LD_INT 0
34169: PPUSH
34170: LD_VAR 0 8
34174: PPUSH
34175: LD_VAR 0 4
34179: PPUSH
34180: CALL_OW 380
// end else
34184: GO 34203
// PrepareHuman ( false , i , skill ) ;
34186: LD_INT 0
34188: PPUSH
34189: LD_VAR 0 8
34193: PPUSH
34194: LD_VAR 0 4
34198: PPUSH
34199: CALL_OW 380
// un := CreateHuman ;
34203: LD_ADDR_VAR 0 14
34207: PUSH
34208: CALL_OW 44
34212: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34213: LD_ADDR_VAR 0 7
34217: PUSH
34218: LD_VAR 0 7
34222: PPUSH
34223: LD_INT 1
34225: PPUSH
34226: LD_VAR 0 14
34230: PPUSH
34231: CALL_OW 2
34235: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34236: LD_VAR 0 14
34240: PPUSH
34241: LD_VAR 0 12
34245: PUSH
34246: LD_INT 1
34248: ARRAY
34249: PPUSH
34250: CALL_OW 52
// end ;
34254: GO 33889
34256: POP
34257: POP
// end ;
34258: GO 33189
34260: POP
34261: POP
// result := result ^ buildings ;
34262: LD_ADDR_VAR 0 7
34266: PUSH
34267: LD_VAR 0 7
34271: PUSH
34272: LD_VAR 0 18
34276: ADD
34277: ST_TO_ADDR
// end else
34278: GO 34421
// begin for i = 1 to personel do
34280: LD_ADDR_VAR 0 8
34284: PUSH
34285: DOUBLE
34286: LD_INT 1
34288: DEC
34289: ST_TO_ADDR
34290: LD_VAR 0 6
34294: PUSH
34295: FOR_TO
34296: IFFALSE 34419
// begin if i > 4 then
34298: LD_VAR 0 8
34302: PUSH
34303: LD_INT 4
34305: GREATER
34306: IFFALSE 34310
// break ;
34308: GO 34419
// x := personel [ i ] ;
34310: LD_ADDR_VAR 0 13
34314: PUSH
34315: LD_VAR 0 6
34319: PUSH
34320: LD_VAR 0 8
34324: ARRAY
34325: ST_TO_ADDR
// if x = - 1 then
34326: LD_VAR 0 13
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: EQUAL
34335: IFFALSE 34339
// continue ;
34337: GO 34295
// PrepareHuman ( false , i , skill ) ;
34339: LD_INT 0
34341: PPUSH
34342: LD_VAR 0 8
34346: PPUSH
34347: LD_VAR 0 4
34351: PPUSH
34352: CALL_OW 380
// un := CreateHuman ;
34356: LD_ADDR_VAR 0 14
34360: PUSH
34361: CALL_OW 44
34365: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34366: LD_VAR 0 14
34370: PPUSH
34371: LD_VAR 0 1
34375: PPUSH
34376: CALL_OW 250
34380: PPUSH
34381: LD_VAR 0 1
34385: PPUSH
34386: CALL_OW 251
34390: PPUSH
34391: LD_INT 10
34393: PPUSH
34394: LD_INT 0
34396: PPUSH
34397: CALL_OW 50
// result := result ^ un ;
34401: LD_ADDR_VAR 0 7
34405: PUSH
34406: LD_VAR 0 7
34410: PUSH
34411: LD_VAR 0 14
34415: ADD
34416: ST_TO_ADDR
// end ;
34417: GO 34295
34419: POP
34420: POP
// end ; end ;
34421: LD_VAR 0 7
34425: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34426: LD_INT 0
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
34434: PPUSH
34435: PPUSH
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
// result := false ;
34444: LD_ADDR_VAR 0 3
34448: PUSH
34449: LD_INT 0
34451: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34452: LD_VAR 0 1
34456: NOT
34457: IFTRUE 34482
34459: PUSH
34460: LD_VAR 0 1
34464: PPUSH
34465: CALL_OW 266
34469: PUSH
34470: LD_INT 32
34472: PUSH
34473: LD_INT 33
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: IN
34480: NOT
34481: OR
34482: IFFALSE 34486
// exit ;
34484: GO 35621
// nat := GetNation ( tower ) ;
34486: LD_ADDR_VAR 0 12
34490: PUSH
34491: LD_VAR 0 1
34495: PPUSH
34496: CALL_OW 248
34500: ST_TO_ADDR
// side := GetSide ( tower ) ;
34501: LD_ADDR_VAR 0 16
34505: PUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 255
34515: ST_TO_ADDR
// x := GetX ( tower ) ;
34516: LD_ADDR_VAR 0 10
34520: PUSH
34521: LD_VAR 0 1
34525: PPUSH
34526: CALL_OW 250
34530: ST_TO_ADDR
// y := GetY ( tower ) ;
34531: LD_ADDR_VAR 0 11
34535: PUSH
34536: LD_VAR 0 1
34540: PPUSH
34541: CALL_OW 251
34545: ST_TO_ADDR
// if not x or not y then
34546: LD_VAR 0 10
34550: NOT
34551: IFTRUE 34560
34553: PUSH
34554: LD_VAR 0 11
34558: NOT
34559: OR
34560: IFFALSE 34564
// exit ;
34562: GO 35621
// weapon := 0 ;
34564: LD_ADDR_VAR 0 18
34568: PUSH
34569: LD_INT 0
34571: ST_TO_ADDR
// fac_list := [ ] ;
34572: LD_ADDR_VAR 0 17
34576: PUSH
34577: EMPTY
34578: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34579: LD_ADDR_VAR 0 6
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 274
34593: PPUSH
34594: LD_VAR 0 2
34598: PPUSH
34599: LD_INT 0
34601: PPUSH
34602: CALL 32156 0 3
34606: PPUSH
34607: LD_INT 30
34609: PUSH
34610: LD_INT 3
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PPUSH
34617: CALL_OW 72
34621: ST_TO_ADDR
// if not factories then
34622: LD_VAR 0 6
34626: NOT
34627: IFFALSE 34631
// exit ;
34629: GO 35621
// for i in factories do
34631: LD_ADDR_VAR 0 8
34635: PUSH
34636: LD_VAR 0 6
34640: PUSH
34641: FOR_IN
34642: IFFALSE 34667
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34644: LD_ADDR_VAR 0 17
34648: PUSH
34649: LD_VAR 0 17
34653: PUSH
34654: LD_VAR 0 8
34658: PPUSH
34659: CALL_OW 478
34663: UNION
34664: ST_TO_ADDR
34665: GO 34641
34667: POP
34668: POP
// if not fac_list then
34669: LD_VAR 0 17
34673: NOT
34674: IFFALSE 34678
// exit ;
34676: GO 35621
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34678: LD_ADDR_VAR 0 5
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: LD_INT 5
34688: PUSH
34689: LD_INT 9
34691: PUSH
34692: LD_INT 10
34694: PUSH
34695: LD_INT 6
34697: PUSH
34698: LD_INT 7
34700: PUSH
34701: LD_INT 11
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 27
34715: PUSH
34716: LD_INT 28
34718: PUSH
34719: LD_INT 26
34721: PUSH
34722: LD_INT 30
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 43
34733: PUSH
34734: LD_INT 44
34736: PUSH
34737: LD_INT 46
34739: PUSH
34740: LD_INT 45
34742: PUSH
34743: LD_INT 47
34745: PUSH
34746: LD_INT 49
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: PUSH
34762: LD_VAR 0 12
34766: ARRAY
34767: ST_TO_ADDR
// list := list isect fac_list ;
34768: LD_ADDR_VAR 0 5
34772: PUSH
34773: LD_VAR 0 5
34777: PUSH
34778: LD_VAR 0 17
34782: ISECT
34783: ST_TO_ADDR
// if not list then
34784: LD_VAR 0 5
34788: NOT
34789: IFFALSE 34793
// exit ;
34791: GO 35621
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34793: LD_VAR 0 12
34797: PUSH
34798: LD_INT 3
34800: EQUAL
34801: IFFALSE 34813
34803: PUSH
34804: LD_INT 49
34806: PUSH
34807: LD_VAR 0 5
34811: IN
34812: AND
34813: IFFALSE 34833
34815: PUSH
34816: LD_INT 31
34818: PPUSH
34819: LD_VAR 0 16
34823: PPUSH
34824: CALL_OW 321
34828: PUSH
34829: LD_INT 2
34831: EQUAL
34832: AND
34833: IFFALSE 34893
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34835: LD_INT 22
34837: PUSH
34838: LD_VAR 0 16
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 35
34849: PUSH
34850: LD_INT 49
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 91
34859: PUSH
34860: LD_VAR 0 1
34864: PUSH
34865: LD_INT 10
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: PPUSH
34878: CALL_OW 69
34882: NOT
34883: IFFALSE 34893
// weapon := ru_time_lapser ;
34885: LD_ADDR_VAR 0 18
34889: PUSH
34890: LD_INT 49
34892: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34893: LD_VAR 0 12
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: IN
34908: IFFALSE 34932
34910: PUSH
34911: LD_INT 11
34913: PUSH
34914: LD_VAR 0 5
34918: IN
34919: IFTRUE 34931
34921: PUSH
34922: LD_INT 30
34924: PUSH
34925: LD_VAR 0 5
34929: IN
34930: OR
34931: AND
34932: IFFALSE 34952
34934: PUSH
34935: LD_INT 6
34937: PPUSH
34938: LD_VAR 0 16
34942: PPUSH
34943: CALL_OW 321
34947: PUSH
34948: LD_INT 2
34950: EQUAL
34951: AND
34952: IFFALSE 35119
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34954: LD_INT 22
34956: PUSH
34957: LD_VAR 0 16
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: LD_INT 35
34971: PUSH
34972: LD_INT 11
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 35
34981: PUSH
34982: LD_INT 30
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 91
34996: PUSH
34997: LD_VAR 0 1
35001: PUSH
35002: LD_INT 18
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: LIST
35014: PPUSH
35015: CALL_OW 69
35019: NOT
35020: IFFALSE 35096
35022: PUSH
35023: LD_INT 22
35025: PUSH
35026: LD_VAR 0 16
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 30
35040: PUSH
35041: LD_INT 32
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 30
35050: PUSH
35051: LD_INT 33
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 91
35065: PUSH
35066: LD_VAR 0 1
35070: PUSH
35071: LD_INT 12
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: PPUSH
35087: CALL_OW 69
35091: PUSH
35092: LD_INT 2
35094: GREATER
35095: AND
35096: IFFALSE 35119
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35098: LD_ADDR_VAR 0 18
35102: PUSH
35103: LD_INT 11
35105: PUSH
35106: LD_INT 30
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_VAR 0 12
35117: ARRAY
35118: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35119: LD_VAR 0 18
35123: NOT
35124: IFFALSE 35144
35126: PUSH
35127: LD_INT 40
35129: PPUSH
35130: LD_VAR 0 16
35134: PPUSH
35135: CALL_OW 321
35139: PUSH
35140: LD_INT 2
35142: EQUAL
35143: AND
35144: IFFALSE 35180
35146: PUSH
35147: LD_INT 7
35149: PUSH
35150: LD_VAR 0 5
35154: IN
35155: IFTRUE 35167
35157: PUSH
35158: LD_INT 28
35160: PUSH
35161: LD_VAR 0 5
35165: IN
35166: OR
35167: IFTRUE 35179
35169: PUSH
35170: LD_INT 45
35172: PUSH
35173: LD_VAR 0 5
35177: IN
35178: OR
35179: AND
35180: IFFALSE 35434
// begin hex := GetHexInfo ( x , y ) ;
35182: LD_ADDR_VAR 0 4
35186: PUSH
35187: LD_VAR 0 10
35191: PPUSH
35192: LD_VAR 0 11
35196: PPUSH
35197: CALL_OW 546
35201: ST_TO_ADDR
// if hex [ 1 ] then
35202: LD_VAR 0 4
35206: PUSH
35207: LD_INT 1
35209: ARRAY
35210: IFFALSE 35214
// exit ;
35212: GO 35621
// height := hex [ 2 ] ;
35214: LD_ADDR_VAR 0 15
35218: PUSH
35219: LD_VAR 0 4
35223: PUSH
35224: LD_INT 2
35226: ARRAY
35227: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35228: LD_ADDR_VAR 0 14
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 2
35238: PUSH
35239: LD_INT 3
35241: PUSH
35242: LD_INT 5
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: ST_TO_ADDR
// for i in tmp do
35251: LD_ADDR_VAR 0 8
35255: PUSH
35256: LD_VAR 0 14
35260: PUSH
35261: FOR_IN
35262: IFFALSE 35432
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35264: LD_ADDR_VAR 0 9
35268: PUSH
35269: LD_VAR 0 10
35273: PPUSH
35274: LD_VAR 0 8
35278: PPUSH
35279: LD_INT 5
35281: PPUSH
35282: CALL_OW 272
35286: PUSH
35287: LD_VAR 0 11
35291: PPUSH
35292: LD_VAR 0 8
35296: PPUSH
35297: LD_INT 5
35299: PPUSH
35300: CALL_OW 273
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35309: LD_VAR 0 9
35313: PUSH
35314: LD_INT 1
35316: ARRAY
35317: PPUSH
35318: LD_VAR 0 9
35322: PUSH
35323: LD_INT 2
35325: ARRAY
35326: PPUSH
35327: CALL_OW 488
35331: IFFALSE 35430
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35333: LD_ADDR_VAR 0 4
35337: PUSH
35338: LD_VAR 0 9
35342: PUSH
35343: LD_INT 1
35345: ARRAY
35346: PPUSH
35347: LD_VAR 0 9
35351: PUSH
35352: LD_INT 2
35354: ARRAY
35355: PPUSH
35356: CALL_OW 546
35360: ST_TO_ADDR
// if hex [ 1 ] then
35361: LD_VAR 0 4
35365: PUSH
35366: LD_INT 1
35368: ARRAY
35369: IFFALSE 35373
// continue ;
35371: GO 35261
// h := hex [ 2 ] ;
35373: LD_ADDR_VAR 0 13
35377: PUSH
35378: LD_VAR 0 4
35382: PUSH
35383: LD_INT 2
35385: ARRAY
35386: ST_TO_ADDR
// if h + 7 < height then
35387: LD_VAR 0 13
35391: PUSH
35392: LD_INT 7
35394: PLUS
35395: PUSH
35396: LD_VAR 0 15
35400: LESS
35401: IFFALSE 35430
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35403: LD_ADDR_VAR 0 18
35407: PUSH
35408: LD_INT 7
35410: PUSH
35411: LD_INT 28
35413: PUSH
35414: LD_INT 45
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: PUSH
35422: LD_VAR 0 12
35426: ARRAY
35427: ST_TO_ADDR
// break ;
35428: GO 35432
// end ; end ; end ;
35430: GO 35261
35432: POP
35433: POP
// end ; if not weapon then
35434: LD_VAR 0 18
35438: NOT
35439: IFFALSE 35499
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35441: LD_ADDR_VAR 0 5
35445: PUSH
35446: LD_VAR 0 5
35450: PUSH
35451: LD_INT 11
35453: PUSH
35454: LD_INT 30
35456: PUSH
35457: LD_INT 49
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: DIFF
35465: ST_TO_ADDR
// if not list then
35466: LD_VAR 0 5
35470: NOT
35471: IFFALSE 35475
// exit ;
35473: GO 35621
// weapon := list [ rand ( 1 , list ) ] ;
35475: LD_ADDR_VAR 0 18
35479: PUSH
35480: LD_VAR 0 5
35484: PUSH
35485: LD_INT 1
35487: PPUSH
35488: LD_VAR 0 5
35492: PPUSH
35493: CALL_OW 12
35497: ARRAY
35498: ST_TO_ADDR
// end ; if weapon then
35499: LD_VAR 0 18
35503: IFFALSE 35621
// begin tmp := CostOfWeapon ( weapon ) ;
35505: LD_ADDR_VAR 0 14
35509: PUSH
35510: LD_VAR 0 18
35514: PPUSH
35515: CALL_OW 451
35519: ST_TO_ADDR
// j := GetBase ( tower ) ;
35520: LD_ADDR_VAR 0 9
35524: PUSH
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 274
35534: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35535: LD_VAR 0 9
35539: PPUSH
35540: LD_INT 1
35542: PPUSH
35543: CALL_OW 275
35547: PUSH
35548: LD_VAR 0 14
35552: PUSH
35553: LD_INT 1
35555: ARRAY
35556: GREATEREQUAL
35557: IFFALSE 35583
35559: PUSH
35560: LD_VAR 0 9
35564: PPUSH
35565: LD_INT 2
35567: PPUSH
35568: CALL_OW 275
35572: PUSH
35573: LD_VAR 0 14
35577: PUSH
35578: LD_INT 2
35580: ARRAY
35581: GREATEREQUAL
35582: AND
35583: IFFALSE 35609
35585: PUSH
35586: LD_VAR 0 9
35590: PPUSH
35591: LD_INT 3
35593: PPUSH
35594: CALL_OW 275
35598: PUSH
35599: LD_VAR 0 14
35603: PUSH
35604: LD_INT 3
35606: ARRAY
35607: GREATEREQUAL
35608: AND
35609: IFFALSE 35621
// result := weapon ;
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: LD_VAR 0 18
35620: ST_TO_ADDR
// end ; end ;
35621: LD_VAR 0 3
35625: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35626: LD_INT 0
35628: PPUSH
35629: PPUSH
// result := true ;
35630: LD_ADDR_VAR 0 3
35634: PUSH
35635: LD_INT 1
35637: ST_TO_ADDR
// if array1 = array2 then
35638: LD_VAR 0 1
35642: PUSH
35643: LD_VAR 0 2
35647: EQUAL
35648: IFFALSE 35708
// begin for i = 1 to array1 do
35650: LD_ADDR_VAR 0 4
35654: PUSH
35655: DOUBLE
35656: LD_INT 1
35658: DEC
35659: ST_TO_ADDR
35660: LD_VAR 0 1
35664: PUSH
35665: FOR_TO
35666: IFFALSE 35704
// if array1 [ i ] <> array2 [ i ] then
35668: LD_VAR 0 1
35672: PUSH
35673: LD_VAR 0 4
35677: ARRAY
35678: PUSH
35679: LD_VAR 0 2
35683: PUSH
35684: LD_VAR 0 4
35688: ARRAY
35689: NONEQUAL
35690: IFFALSE 35702
// begin result := false ;
35692: LD_ADDR_VAR 0 3
35696: PUSH
35697: LD_INT 0
35699: ST_TO_ADDR
// break ;
35700: GO 35704
// end ;
35702: GO 35665
35704: POP
35705: POP
// end else
35706: GO 35716
// result := false ;
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_INT 0
35715: ST_TO_ADDR
// end ;
35716: LD_VAR 0 3
35720: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35721: LD_INT 0
35723: PPUSH
35724: PPUSH
// if not array1 or not array2 then
35725: LD_VAR 0 1
35729: NOT
35730: IFTRUE 35739
35732: PUSH
35733: LD_VAR 0 2
35737: NOT
35738: OR
35739: IFFALSE 35743
// exit ;
35741: GO 35807
// result := true ;
35743: LD_ADDR_VAR 0 3
35747: PUSH
35748: LD_INT 1
35750: ST_TO_ADDR
// for i = 1 to array1 do
35751: LD_ADDR_VAR 0 4
35755: PUSH
35756: DOUBLE
35757: LD_INT 1
35759: DEC
35760: ST_TO_ADDR
35761: LD_VAR 0 1
35765: PUSH
35766: FOR_TO
35767: IFFALSE 35805
// if array1 [ i ] <> array2 [ i ] then
35769: LD_VAR 0 1
35773: PUSH
35774: LD_VAR 0 4
35778: ARRAY
35779: PUSH
35780: LD_VAR 0 2
35784: PUSH
35785: LD_VAR 0 4
35789: ARRAY
35790: NONEQUAL
35791: IFFALSE 35803
// begin result := false ;
35793: LD_ADDR_VAR 0 3
35797: PUSH
35798: LD_INT 0
35800: ST_TO_ADDR
// break ;
35801: GO 35805
// end ;
35803: GO 35766
35805: POP
35806: POP
// end ;
35807: LD_VAR 0 3
35811: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35812: LD_INT 0
35814: PPUSH
35815: PPUSH
35816: PPUSH
// pom := GetBase ( fac ) ;
35817: LD_ADDR_VAR 0 5
35821: PUSH
35822: LD_VAR 0 1
35826: PPUSH
35827: CALL_OW 274
35831: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35832: LD_ADDR_VAR 0 4
35836: PUSH
35837: LD_VAR 0 2
35841: PUSH
35842: LD_INT 1
35844: ARRAY
35845: PPUSH
35846: LD_VAR 0 2
35850: PUSH
35851: LD_INT 2
35853: ARRAY
35854: PPUSH
35855: LD_VAR 0 2
35859: PUSH
35860: LD_INT 3
35862: ARRAY
35863: PPUSH
35864: LD_VAR 0 2
35868: PUSH
35869: LD_INT 4
35871: ARRAY
35872: PPUSH
35873: CALL_OW 449
35877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35878: LD_ADDR_VAR 0 3
35882: PUSH
35883: LD_VAR 0 5
35887: PPUSH
35888: LD_INT 1
35890: PPUSH
35891: CALL_OW 275
35895: PUSH
35896: LD_VAR 0 4
35900: PUSH
35901: LD_INT 1
35903: ARRAY
35904: GREATEREQUAL
35905: IFFALSE 35931
35907: PUSH
35908: LD_VAR 0 5
35912: PPUSH
35913: LD_INT 2
35915: PPUSH
35916: CALL_OW 275
35920: PUSH
35921: LD_VAR 0 4
35925: PUSH
35926: LD_INT 2
35928: ARRAY
35929: GREATEREQUAL
35930: AND
35931: IFFALSE 35957
35933: PUSH
35934: LD_VAR 0 5
35938: PPUSH
35939: LD_INT 3
35941: PPUSH
35942: CALL_OW 275
35946: PUSH
35947: LD_VAR 0 4
35951: PUSH
35952: LD_INT 3
35954: ARRAY
35955: GREATEREQUAL
35956: AND
35957: ST_TO_ADDR
// end ;
35958: LD_VAR 0 3
35962: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35963: LD_INT 0
35965: PPUSH
35966: PPUSH
35967: PPUSH
35968: PPUSH
// pom := GetBase ( building ) ;
35969: LD_ADDR_VAR 0 3
35973: PUSH
35974: LD_VAR 0 1
35978: PPUSH
35979: CALL_OW 274
35983: ST_TO_ADDR
// if not pom then
35984: LD_VAR 0 3
35988: NOT
35989: IFFALSE 35993
// exit ;
35991: GO 36167
// btype := GetBType ( building ) ;
35993: LD_ADDR_VAR 0 5
35997: PUSH
35998: LD_VAR 0 1
36002: PPUSH
36003: CALL_OW 266
36007: ST_TO_ADDR
// if btype = b_armoury then
36008: LD_VAR 0 5
36012: PUSH
36013: LD_INT 4
36015: EQUAL
36016: IFFALSE 36026
// btype := b_barracks ;
36018: LD_ADDR_VAR 0 5
36022: PUSH
36023: LD_INT 5
36025: ST_TO_ADDR
// if btype = b_depot then
36026: LD_VAR 0 5
36030: PUSH
36031: LD_INT 0
36033: EQUAL
36034: IFFALSE 36044
// btype := b_warehouse ;
36036: LD_ADDR_VAR 0 5
36040: PUSH
36041: LD_INT 1
36043: ST_TO_ADDR
// if btype = b_workshop then
36044: LD_VAR 0 5
36048: PUSH
36049: LD_INT 2
36051: EQUAL
36052: IFFALSE 36062
// btype := b_factory ;
36054: LD_ADDR_VAR 0 5
36058: PUSH
36059: LD_INT 3
36061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36062: LD_ADDR_VAR 0 4
36066: PUSH
36067: LD_VAR 0 5
36071: PPUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: CALL_OW 248
36081: PPUSH
36082: CALL_OW 450
36086: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36087: LD_ADDR_VAR 0 2
36091: PUSH
36092: LD_VAR 0 3
36096: PPUSH
36097: LD_INT 1
36099: PPUSH
36100: CALL_OW 275
36104: PUSH
36105: LD_VAR 0 4
36109: PUSH
36110: LD_INT 1
36112: ARRAY
36113: GREATEREQUAL
36114: IFFALSE 36140
36116: PUSH
36117: LD_VAR 0 3
36121: PPUSH
36122: LD_INT 2
36124: PPUSH
36125: CALL_OW 275
36129: PUSH
36130: LD_VAR 0 4
36134: PUSH
36135: LD_INT 2
36137: ARRAY
36138: GREATEREQUAL
36139: AND
36140: IFFALSE 36166
36142: PUSH
36143: LD_VAR 0 3
36147: PPUSH
36148: LD_INT 3
36150: PPUSH
36151: CALL_OW 275
36155: PUSH
36156: LD_VAR 0 4
36160: PUSH
36161: LD_INT 3
36163: ARRAY
36164: GREATEREQUAL
36165: AND
36166: ST_TO_ADDR
// end ;
36167: LD_VAR 0 2
36171: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
36176: PPUSH
// pom := GetBase ( building ) ;
36177: LD_ADDR_VAR 0 4
36181: PUSH
36182: LD_VAR 0 1
36186: PPUSH
36187: CALL_OW 274
36191: ST_TO_ADDR
// if not pom then
36192: LD_VAR 0 4
36196: NOT
36197: IFFALSE 36201
// exit ;
36199: GO 36306
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36201: LD_ADDR_VAR 0 5
36205: PUSH
36206: LD_VAR 0 2
36210: PPUSH
36211: LD_VAR 0 1
36215: PPUSH
36216: CALL_OW 248
36220: PPUSH
36221: CALL_OW 450
36225: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_VAR 0 4
36235: PPUSH
36236: LD_INT 1
36238: PPUSH
36239: CALL_OW 275
36243: PUSH
36244: LD_VAR 0 5
36248: PUSH
36249: LD_INT 1
36251: ARRAY
36252: GREATEREQUAL
36253: IFFALSE 36279
36255: PUSH
36256: LD_VAR 0 4
36260: PPUSH
36261: LD_INT 2
36263: PPUSH
36264: CALL_OW 275
36268: PUSH
36269: LD_VAR 0 5
36273: PUSH
36274: LD_INT 2
36276: ARRAY
36277: GREATEREQUAL
36278: AND
36279: IFFALSE 36305
36281: PUSH
36282: LD_VAR 0 4
36286: PPUSH
36287: LD_INT 3
36289: PPUSH
36290: CALL_OW 275
36294: PUSH
36295: LD_VAR 0 5
36299: PUSH
36300: LD_INT 3
36302: ARRAY
36303: GREATEREQUAL
36304: AND
36305: ST_TO_ADDR
// end ;
36306: LD_VAR 0 3
36310: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36311: LD_INT 0
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
36317: PPUSH
36318: PPUSH
36319: PPUSH
36320: PPUSH
36321: PPUSH
36322: PPUSH
36323: PPUSH
// result := false ;
36324: LD_ADDR_VAR 0 8
36328: PUSH
36329: LD_INT 0
36331: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36332: LD_VAR 0 5
36336: NOT
36337: IFTRUE 36346
36339: PUSH
36340: LD_VAR 0 1
36344: NOT
36345: OR
36346: IFTRUE 36355
36348: PUSH
36349: LD_VAR 0 2
36353: NOT
36354: OR
36355: IFTRUE 36364
36357: PUSH
36358: LD_VAR 0 3
36362: NOT
36363: OR
36364: IFFALSE 36368
// exit ;
36366: GO 37194
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36368: LD_ADDR_VAR 0 14
36372: PUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: LD_VAR 0 2
36382: PPUSH
36383: LD_VAR 0 3
36387: PPUSH
36388: LD_VAR 0 4
36392: PPUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PPUSH
36402: CALL_OW 248
36406: PPUSH
36407: LD_INT 0
36409: PPUSH
36410: CALL 38475 0 6
36414: ST_TO_ADDR
// if not hexes then
36415: LD_VAR 0 14
36419: NOT
36420: IFFALSE 36424
// exit ;
36422: GO 37194
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36424: LD_ADDR_VAR 0 17
36428: PUSH
36429: LD_VAR 0 5
36433: PPUSH
36434: LD_INT 22
36436: PUSH
36437: LD_VAR 0 13
36441: PPUSH
36442: CALL_OW 255
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 30
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 30
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PPUSH
36483: CALL_OW 72
36487: ST_TO_ADDR
// for i = 1 to hexes do
36488: LD_ADDR_VAR 0 9
36492: PUSH
36493: DOUBLE
36494: LD_INT 1
36496: DEC
36497: ST_TO_ADDR
36498: LD_VAR 0 14
36502: PUSH
36503: FOR_TO
36504: IFFALSE 37192
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36506: LD_ADDR_VAR 0 13
36510: PUSH
36511: LD_VAR 0 14
36515: PUSH
36516: LD_VAR 0 9
36520: ARRAY
36521: PUSH
36522: LD_INT 1
36524: ARRAY
36525: PPUSH
36526: LD_VAR 0 14
36530: PUSH
36531: LD_VAR 0 9
36535: ARRAY
36536: PUSH
36537: LD_INT 2
36539: ARRAY
36540: PPUSH
36541: CALL_OW 428
36545: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36546: LD_VAR 0 14
36550: PUSH
36551: LD_VAR 0 9
36555: ARRAY
36556: PUSH
36557: LD_INT 1
36559: ARRAY
36560: PPUSH
36561: LD_VAR 0 14
36565: PUSH
36566: LD_VAR 0 9
36570: ARRAY
36571: PUSH
36572: LD_INT 2
36574: ARRAY
36575: PPUSH
36576: CALL_OW 351
36580: IFTRUE 36619
36582: PUSH
36583: LD_VAR 0 14
36587: PUSH
36588: LD_VAR 0 9
36592: ARRAY
36593: PUSH
36594: LD_INT 1
36596: ARRAY
36597: PPUSH
36598: LD_VAR 0 14
36602: PUSH
36603: LD_VAR 0 9
36607: ARRAY
36608: PUSH
36609: LD_INT 2
36611: ARRAY
36612: PPUSH
36613: CALL_OW 488
36617: NOT
36618: OR
36619: IFTRUE 36636
36621: PUSH
36622: LD_VAR 0 13
36626: PPUSH
36627: CALL_OW 247
36631: PUSH
36632: LD_INT 3
36634: EQUAL
36635: OR
36636: IFFALSE 36642
// exit ;
36638: POP
36639: POP
36640: GO 37194
// if not tmp then
36642: LD_VAR 0 13
36646: NOT
36647: IFFALSE 36651
// continue ;
36649: GO 36503
// result := true ;
36651: LD_ADDR_VAR 0 8
36655: PUSH
36656: LD_INT 1
36658: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36659: LD_VAR 0 6
36663: IFFALSE 36680
36665: PUSH
36666: LD_VAR 0 13
36670: PPUSH
36671: CALL_OW 247
36675: PUSH
36676: LD_INT 2
36678: EQUAL
36679: AND
36680: IFFALSE 36697
36682: PUSH
36683: LD_VAR 0 13
36687: PPUSH
36688: CALL_OW 263
36692: PUSH
36693: LD_INT 1
36695: EQUAL
36696: AND
36697: IFFALSE 36861
// begin if IsDrivenBy ( tmp ) then
36699: LD_VAR 0 13
36703: PPUSH
36704: CALL_OW 311
36708: IFFALSE 36712
// continue ;
36710: GO 36503
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36712: LD_VAR 0 6
36716: PPUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 60
36722: PUSH
36723: EMPTY
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 55
36735: PUSH
36736: EMPTY
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PPUSH
36747: CALL_OW 72
36751: IFFALSE 36859
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36753: LD_ADDR_VAR 0 18
36757: PUSH
36758: LD_VAR 0 6
36762: PPUSH
36763: LD_INT 3
36765: PUSH
36766: LD_INT 60
36768: PUSH
36769: EMPTY
36770: LIST
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 3
36778: PUSH
36779: LD_INT 55
36781: PUSH
36782: EMPTY
36783: LIST
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PPUSH
36793: CALL_OW 72
36797: PUSH
36798: LD_INT 1
36800: ARRAY
36801: ST_TO_ADDR
// if IsInUnit ( driver ) then
36802: LD_VAR 0 18
36806: PPUSH
36807: CALL_OW 310
36811: IFFALSE 36822
// ComExit ( driver ) ;
36813: LD_VAR 0 18
36817: PPUSH
36818: CALL 62465 0 1
// AddComEnterUnit ( driver , tmp ) ;
36822: LD_VAR 0 18
36826: PPUSH
36827: LD_VAR 0 13
36831: PPUSH
36832: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36836: LD_VAR 0 18
36840: PPUSH
36841: LD_VAR 0 7
36845: PPUSH
36846: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36850: LD_VAR 0 18
36854: PPUSH
36855: CALL_OW 181
// end ; continue ;
36859: GO 36503
// end ; if not cleaners or not tmp in cleaners then
36861: LD_VAR 0 6
36865: NOT
36866: IFTRUE 36881
36868: PUSH
36869: LD_VAR 0 13
36873: PUSH
36874: LD_VAR 0 6
36878: IN
36879: NOT
36880: OR
36881: IFFALSE 37190
// begin if dep then
36883: LD_VAR 0 17
36887: IFFALSE 37023
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36889: LD_ADDR_VAR 0 16
36893: PUSH
36894: LD_VAR 0 17
36898: PUSH
36899: LD_INT 1
36901: ARRAY
36902: PPUSH
36903: CALL_OW 250
36907: PPUSH
36908: LD_VAR 0 17
36912: PUSH
36913: LD_INT 1
36915: ARRAY
36916: PPUSH
36917: CALL_OW 254
36921: PPUSH
36922: LD_INT 5
36924: PPUSH
36925: CALL_OW 272
36929: PUSH
36930: LD_VAR 0 17
36934: PUSH
36935: LD_INT 1
36937: ARRAY
36938: PPUSH
36939: CALL_OW 251
36943: PPUSH
36944: LD_VAR 0 17
36948: PUSH
36949: LD_INT 1
36951: ARRAY
36952: PPUSH
36953: CALL_OW 254
36957: PPUSH
36958: LD_INT 5
36960: PPUSH
36961: CALL_OW 273
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36970: LD_VAR 0 16
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: LD_VAR 0 16
36983: PUSH
36984: LD_INT 2
36986: ARRAY
36987: PPUSH
36988: CALL_OW 488
36992: IFFALSE 37023
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36994: LD_VAR 0 13
36998: PPUSH
36999: LD_VAR 0 16
37003: PUSH
37004: LD_INT 1
37006: ARRAY
37007: PPUSH
37008: LD_VAR 0 16
37012: PUSH
37013: LD_INT 2
37015: ARRAY
37016: PPUSH
37017: CALL_OW 111
// continue ;
37021: GO 36503
// end ; end ; r := GetDir ( tmp ) ;
37023: LD_ADDR_VAR 0 15
37027: PUSH
37028: LD_VAR 0 13
37032: PPUSH
37033: CALL_OW 254
37037: ST_TO_ADDR
// if r = 5 then
37038: LD_VAR 0 15
37042: PUSH
37043: LD_INT 5
37045: EQUAL
37046: IFFALSE 37056
// r := 0 ;
37048: LD_ADDR_VAR 0 15
37052: PUSH
37053: LD_INT 0
37055: ST_TO_ADDR
// for j = r to 5 do
37056: LD_ADDR_VAR 0 10
37060: PUSH
37061: DOUBLE
37062: LD_VAR 0 15
37066: DEC
37067: ST_TO_ADDR
37068: LD_INT 5
37070: PUSH
37071: FOR_TO
37072: IFFALSE 37188
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37074: LD_ADDR_VAR 0 11
37078: PUSH
37079: LD_VAR 0 13
37083: PPUSH
37084: CALL_OW 250
37088: PPUSH
37089: LD_VAR 0 10
37093: PPUSH
37094: LD_INT 2
37096: PPUSH
37097: CALL_OW 272
37101: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37102: LD_ADDR_VAR 0 12
37106: PUSH
37107: LD_VAR 0 13
37111: PPUSH
37112: CALL_OW 251
37116: PPUSH
37117: LD_VAR 0 10
37121: PPUSH
37122: LD_INT 2
37124: PPUSH
37125: CALL_OW 273
37129: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37130: LD_VAR 0 11
37134: PPUSH
37135: LD_VAR 0 12
37139: PPUSH
37140: CALL_OW 488
37144: IFFALSE 37163
37146: PUSH
37147: LD_VAR 0 11
37151: PPUSH
37152: LD_VAR 0 12
37156: PPUSH
37157: CALL_OW 428
37161: NOT
37162: AND
37163: IFFALSE 37186
// begin ComMoveXY ( tmp , _x , _y ) ;
37165: LD_VAR 0 13
37169: PPUSH
37170: LD_VAR 0 11
37174: PPUSH
37175: LD_VAR 0 12
37179: PPUSH
37180: CALL_OW 111
// break ;
37184: GO 37188
// end ; end ;
37186: GO 37071
37188: POP
37189: POP
// end ; end ;
37190: GO 36503
37192: POP
37193: POP
// end ;
37194: LD_VAR 0 8
37198: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37199: LD_INT 0
37201: PPUSH
// result := true ;
37202: LD_ADDR_VAR 0 3
37206: PUSH
37207: LD_INT 1
37209: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37210: LD_VAR 0 2
37214: PUSH
37215: LD_INT 24
37217: DOUBLE
37218: EQUAL
37219: IFTRUE 37229
37221: LD_INT 33
37223: DOUBLE
37224: EQUAL
37225: IFTRUE 37229
37227: GO 37254
37229: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37230: LD_ADDR_VAR 0 3
37234: PUSH
37235: LD_INT 32
37237: PPUSH
37238: LD_VAR 0 1
37242: PPUSH
37243: CALL_OW 321
37247: PUSH
37248: LD_INT 2
37250: EQUAL
37251: ST_TO_ADDR
37252: GO 37570
37254: LD_INT 20
37256: DOUBLE
37257: EQUAL
37258: IFTRUE 37262
37260: GO 37287
37262: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_INT 6
37270: PPUSH
37271: LD_VAR 0 1
37275: PPUSH
37276: CALL_OW 321
37280: PUSH
37281: LD_INT 2
37283: EQUAL
37284: ST_TO_ADDR
37285: GO 37570
37287: LD_INT 22
37289: DOUBLE
37290: EQUAL
37291: IFTRUE 37301
37293: LD_INT 36
37295: DOUBLE
37296: EQUAL
37297: IFTRUE 37301
37299: GO 37326
37301: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37302: LD_ADDR_VAR 0 3
37306: PUSH
37307: LD_INT 15
37309: PPUSH
37310: LD_VAR 0 1
37314: PPUSH
37315: CALL_OW 321
37319: PUSH
37320: LD_INT 2
37322: EQUAL
37323: ST_TO_ADDR
37324: GO 37570
37326: LD_INT 30
37328: DOUBLE
37329: EQUAL
37330: IFTRUE 37334
37332: GO 37359
37334: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37335: LD_ADDR_VAR 0 3
37339: PUSH
37340: LD_INT 20
37342: PPUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL_OW 321
37352: PUSH
37353: LD_INT 2
37355: EQUAL
37356: ST_TO_ADDR
37357: GO 37570
37359: LD_INT 28
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37373
37365: LD_INT 21
37367: DOUBLE
37368: EQUAL
37369: IFTRUE 37373
37371: GO 37398
37373: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37374: LD_ADDR_VAR 0 3
37378: PUSH
37379: LD_INT 21
37381: PPUSH
37382: LD_VAR 0 1
37386: PPUSH
37387: CALL_OW 321
37391: PUSH
37392: LD_INT 2
37394: EQUAL
37395: ST_TO_ADDR
37396: GO 37570
37398: LD_INT 16
37400: DOUBLE
37401: EQUAL
37402: IFTRUE 37406
37404: GO 37431
37406: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37407: LD_ADDR_VAR 0 3
37411: PUSH
37412: LD_INT 84
37414: PPUSH
37415: LD_VAR 0 1
37419: PPUSH
37420: CALL_OW 321
37424: PUSH
37425: LD_INT 2
37427: EQUAL
37428: ST_TO_ADDR
37429: GO 37570
37431: LD_INT 19
37433: DOUBLE
37434: EQUAL
37435: IFTRUE 37445
37437: LD_INT 23
37439: DOUBLE
37440: EQUAL
37441: IFTRUE 37445
37443: GO 37470
37445: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: LD_INT 83
37453: PPUSH
37454: LD_VAR 0 1
37458: PPUSH
37459: CALL_OW 321
37463: PUSH
37464: LD_INT 2
37466: EQUAL
37467: ST_TO_ADDR
37468: GO 37570
37470: LD_INT 17
37472: DOUBLE
37473: EQUAL
37474: IFTRUE 37478
37476: GO 37503
37478: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37479: LD_ADDR_VAR 0 3
37483: PUSH
37484: LD_INT 39
37486: PPUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL_OW 321
37496: PUSH
37497: LD_INT 2
37499: EQUAL
37500: ST_TO_ADDR
37501: GO 37570
37503: LD_INT 18
37505: DOUBLE
37506: EQUAL
37507: IFTRUE 37511
37509: GO 37536
37511: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37512: LD_ADDR_VAR 0 3
37516: PUSH
37517: LD_INT 40
37519: PPUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 321
37529: PUSH
37530: LD_INT 2
37532: EQUAL
37533: ST_TO_ADDR
37534: GO 37570
37536: LD_INT 27
37538: DOUBLE
37539: EQUAL
37540: IFTRUE 37544
37542: GO 37569
37544: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37545: LD_ADDR_VAR 0 3
37549: PUSH
37550: LD_INT 35
37552: PPUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 321
37562: PUSH
37563: LD_INT 2
37565: EQUAL
37566: ST_TO_ADDR
37567: GO 37570
37569: POP
// end ;
37570: LD_VAR 0 3
37574: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37575: LD_INT 0
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
// result := false ;
37588: LD_ADDR_VAR 0 6
37592: PUSH
37593: LD_INT 0
37595: ST_TO_ADDR
// if btype = b_depot then
37596: LD_VAR 0 2
37600: PUSH
37601: LD_INT 0
37603: EQUAL
37604: IFFALSE 37616
// begin result := true ;
37606: LD_ADDR_VAR 0 6
37610: PUSH
37611: LD_INT 1
37613: ST_TO_ADDR
// exit ;
37614: GO 38470
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37616: LD_VAR 0 1
37620: NOT
37621: IFTRUE 37646
37623: PUSH
37624: LD_VAR 0 1
37628: PPUSH
37629: CALL_OW 266
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: IN
37644: NOT
37645: OR
37646: IFTRUE 37655
37648: PUSH
37649: LD_VAR 0 2
37653: NOT
37654: OR
37655: IFTRUE 37691
37657: PUSH
37658: LD_VAR 0 5
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 4
37677: PUSH
37678: LD_INT 5
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: IN
37689: NOT
37690: OR
37691: IFTRUE 37710
37693: PUSH
37694: LD_VAR 0 3
37698: PPUSH
37699: LD_VAR 0 4
37703: PPUSH
37704: CALL_OW 488
37708: NOT
37709: OR
37710: IFFALSE 37714
// exit ;
37712: GO 38470
// side := GetSide ( depot ) ;
37714: LD_ADDR_VAR 0 9
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: CALL_OW 255
37728: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37729: LD_VAR 0 9
37733: PPUSH
37734: LD_VAR 0 2
37738: PPUSH
37739: CALL 37199 0 2
37743: NOT
37744: IFFALSE 37748
// exit ;
37746: GO 38470
// pom := GetBase ( depot ) ;
37748: LD_ADDR_VAR 0 10
37752: PUSH
37753: LD_VAR 0 1
37757: PPUSH
37758: CALL_OW 274
37762: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37763: LD_ADDR_VAR 0 11
37767: PUSH
37768: LD_VAR 0 2
37772: PPUSH
37773: LD_VAR 0 1
37777: PPUSH
37778: CALL_OW 248
37782: PPUSH
37783: CALL_OW 450
37787: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37788: LD_VAR 0 10
37792: PPUSH
37793: LD_INT 1
37795: PPUSH
37796: CALL_OW 275
37800: PUSH
37801: LD_VAR 0 11
37805: PUSH
37806: LD_INT 1
37808: ARRAY
37809: GREATEREQUAL
37810: IFFALSE 37836
37812: PUSH
37813: LD_VAR 0 10
37817: PPUSH
37818: LD_INT 2
37820: PPUSH
37821: CALL_OW 275
37825: PUSH
37826: LD_VAR 0 11
37830: PUSH
37831: LD_INT 2
37833: ARRAY
37834: GREATEREQUAL
37835: AND
37836: IFFALSE 37862
37838: PUSH
37839: LD_VAR 0 10
37843: PPUSH
37844: LD_INT 3
37846: PPUSH
37847: CALL_OW 275
37851: PUSH
37852: LD_VAR 0 11
37856: PUSH
37857: LD_INT 3
37859: ARRAY
37860: GREATEREQUAL
37861: AND
37862: NOT
37863: IFFALSE 37867
// exit ;
37865: GO 38470
// if GetBType ( depot ) = b_depot then
37867: LD_VAR 0 1
37871: PPUSH
37872: CALL_OW 266
37876: PUSH
37877: LD_INT 0
37879: EQUAL
37880: IFFALSE 37892
// dist := 28 else
37882: LD_ADDR_VAR 0 14
37886: PUSH
37887: LD_INT 28
37889: ST_TO_ADDR
37890: GO 37900
// dist := 36 ;
37892: LD_ADDR_VAR 0 14
37896: PUSH
37897: LD_INT 36
37899: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37900: LD_VAR 0 1
37904: PPUSH
37905: LD_VAR 0 3
37909: PPUSH
37910: LD_VAR 0 4
37914: PPUSH
37915: CALL_OW 297
37919: PUSH
37920: LD_VAR 0 14
37924: GREATER
37925: IFFALSE 37929
// exit ;
37927: GO 38470
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37929: LD_ADDR_VAR 0 12
37933: PUSH
37934: LD_VAR 0 2
37938: PPUSH
37939: LD_VAR 0 3
37943: PPUSH
37944: LD_VAR 0 4
37948: PPUSH
37949: LD_VAR 0 5
37953: PPUSH
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 248
37963: PPUSH
37964: LD_INT 0
37966: PPUSH
37967: CALL 38475 0 6
37971: ST_TO_ADDR
// if not hexes then
37972: LD_VAR 0 12
37976: NOT
37977: IFFALSE 37981
// exit ;
37979: GO 38470
// hex := GetHexInfo ( x , y ) ;
37981: LD_ADDR_VAR 0 15
37985: PUSH
37986: LD_VAR 0 3
37990: PPUSH
37991: LD_VAR 0 4
37995: PPUSH
37996: CALL_OW 546
38000: ST_TO_ADDR
// if hex [ 1 ] then
38001: LD_VAR 0 15
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: IFFALSE 38013
// exit ;
38011: GO 38470
// height := hex [ 2 ] ;
38013: LD_ADDR_VAR 0 13
38017: PUSH
38018: LD_VAR 0 15
38022: PUSH
38023: LD_INT 2
38025: ARRAY
38026: ST_TO_ADDR
// for i = 1 to hexes do
38027: LD_ADDR_VAR 0 7
38031: PUSH
38032: DOUBLE
38033: LD_INT 1
38035: DEC
38036: ST_TO_ADDR
38037: LD_VAR 0 12
38041: PUSH
38042: FOR_TO
38043: IFFALSE 38387
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38045: LD_VAR 0 12
38049: PUSH
38050: LD_VAR 0 7
38054: ARRAY
38055: PUSH
38056: LD_INT 1
38058: ARRAY
38059: PPUSH
38060: LD_VAR 0 12
38064: PUSH
38065: LD_VAR 0 7
38069: ARRAY
38070: PUSH
38071: LD_INT 2
38073: ARRAY
38074: PPUSH
38075: CALL_OW 488
38079: NOT
38080: IFTRUE 38122
38082: PUSH
38083: LD_VAR 0 12
38087: PUSH
38088: LD_VAR 0 7
38092: ARRAY
38093: PUSH
38094: LD_INT 1
38096: ARRAY
38097: PPUSH
38098: LD_VAR 0 12
38102: PUSH
38103: LD_VAR 0 7
38107: ARRAY
38108: PUSH
38109: LD_INT 2
38111: ARRAY
38112: PPUSH
38113: CALL_OW 428
38117: PUSH
38118: LD_INT 0
38120: GREATER
38121: OR
38122: IFTRUE 38160
38124: PUSH
38125: LD_VAR 0 12
38129: PUSH
38130: LD_VAR 0 7
38134: ARRAY
38135: PUSH
38136: LD_INT 1
38138: ARRAY
38139: PPUSH
38140: LD_VAR 0 12
38144: PUSH
38145: LD_VAR 0 7
38149: ARRAY
38150: PUSH
38151: LD_INT 2
38153: ARRAY
38154: PPUSH
38155: CALL_OW 351
38159: OR
38160: IFFALSE 38166
// exit ;
38162: POP
38163: POP
38164: GO 38470
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38166: LD_ADDR_VAR 0 8
38170: PUSH
38171: LD_VAR 0 12
38175: PUSH
38176: LD_VAR 0 7
38180: ARRAY
38181: PUSH
38182: LD_INT 1
38184: ARRAY
38185: PPUSH
38186: LD_VAR 0 12
38190: PUSH
38191: LD_VAR 0 7
38195: ARRAY
38196: PUSH
38197: LD_INT 2
38199: ARRAY
38200: PPUSH
38201: CALL_OW 546
38205: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38206: LD_VAR 0 8
38210: PUSH
38211: LD_INT 1
38213: ARRAY
38214: IFTRUE 38236
38216: PUSH
38217: LD_VAR 0 8
38221: PUSH
38222: LD_INT 2
38224: ARRAY
38225: PUSH
38226: LD_VAR 0 13
38230: PUSH
38231: LD_INT 2
38233: PLUS
38234: GREATER
38235: OR
38236: IFTRUE 38258
38238: PUSH
38239: LD_VAR 0 8
38243: PUSH
38244: LD_INT 2
38246: ARRAY
38247: PUSH
38248: LD_VAR 0 13
38252: PUSH
38253: LD_INT 2
38255: MINUS
38256: LESS
38257: OR
38258: IFTRUE 38326
38260: PUSH
38261: LD_VAR 0 8
38265: PUSH
38266: LD_INT 3
38268: ARRAY
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 8
38275: PUSH
38276: LD_INT 9
38278: PUSH
38279: LD_INT 10
38281: PUSH
38282: LD_INT 11
38284: PUSH
38285: LD_INT 12
38287: PUSH
38288: LD_INT 13
38290: PUSH
38291: LD_INT 16
38293: PUSH
38294: LD_INT 17
38296: PUSH
38297: LD_INT 18
38299: PUSH
38300: LD_INT 19
38302: PUSH
38303: LD_INT 20
38305: PUSH
38306: LD_INT 21
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: IN
38324: NOT
38325: OR
38326: IFTRUE 38339
38328: PUSH
38329: LD_VAR 0 8
38333: PUSH
38334: LD_INT 5
38336: ARRAY
38337: NOT
38338: OR
38339: IFTRUE 38379
38341: PUSH
38342: LD_VAR 0 8
38346: PUSH
38347: LD_INT 6
38349: ARRAY
38350: PUSH
38351: LD_INT 1
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 7
38359: PUSH
38360: LD_INT 9
38362: PUSH
38363: LD_INT 10
38365: PUSH
38366: LD_INT 11
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: IN
38377: NOT
38378: OR
38379: IFFALSE 38385
// exit ;
38381: POP
38382: POP
38383: GO 38470
// end ;
38385: GO 38042
38387: POP
38388: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38389: LD_VAR 0 9
38393: PPUSH
38394: LD_VAR 0 3
38398: PPUSH
38399: LD_VAR 0 4
38403: PPUSH
38404: LD_INT 20
38406: PPUSH
38407: CALL 30289 0 4
38411: PUSH
38412: LD_INT 4
38414: ARRAY
38415: IFFALSE 38419
// exit ;
38417: GO 38470
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38419: LD_VAR 0 2
38423: PUSH
38424: LD_INT 29
38426: PUSH
38427: LD_INT 30
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: IN
38434: IFFALSE 38458
38436: PUSH
38437: LD_VAR 0 3
38441: PPUSH
38442: LD_VAR 0 4
38446: PPUSH
38447: LD_VAR 0 9
38451: PPUSH
38452: CALL_OW 440
38456: NOT
38457: AND
38458: IFFALSE 38462
// exit ;
38460: GO 38470
// result := true ;
38462: LD_ADDR_VAR 0 6
38466: PUSH
38467: LD_INT 1
38469: ST_TO_ADDR
// end ;
38470: LD_VAR 0 6
38474: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38475: LD_INT 0
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
38481: PPUSH
38482: PPUSH
38483: PPUSH
38484: PPUSH
38485: PPUSH
38486: PPUSH
38487: PPUSH
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
38502: PPUSH
38503: PPUSH
38504: PPUSH
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
// result = [ ] ;
38535: LD_ADDR_VAR 0 7
38539: PUSH
38540: EMPTY
38541: ST_TO_ADDR
// temp_list = [ ] ;
38542: LD_ADDR_VAR 0 9
38546: PUSH
38547: EMPTY
38548: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38549: LD_VAR 0 4
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: LD_INT 4
38568: PUSH
38569: LD_INT 5
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: IN
38580: NOT
38581: IFTRUE 38624
38583: PUSH
38584: LD_VAR 0 1
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: IN
38599: IFFALSE 38623
38601: PUSH
38602: LD_VAR 0 5
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 3
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: IN
38621: NOT
38622: AND
38623: OR
38624: IFFALSE 38628
// exit ;
38626: GO 57027
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38628: LD_VAR 0 1
38632: PUSH
38633: LD_INT 6
38635: PUSH
38636: LD_INT 7
38638: PUSH
38639: LD_INT 8
38641: PUSH
38642: LD_INT 13
38644: PUSH
38645: LD_INT 12
38647: PUSH
38648: LD_INT 15
38650: PUSH
38651: LD_INT 11
38653: PUSH
38654: LD_INT 14
38656: PUSH
38657: LD_INT 10
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: IN
38671: IFFALSE 38681
// btype = b_lab ;
38673: LD_ADDR_VAR 0 1
38677: PUSH
38678: LD_INT 6
38680: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38681: LD_VAR 0 6
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: IN
38700: NOT
38701: IFTRUE 38769
38703: PUSH
38704: LD_VAR 0 1
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 3
38720: PUSH
38721: LD_INT 6
38723: PUSH
38724: LD_INT 36
38726: PUSH
38727: LD_INT 4
38729: PUSH
38730: LD_INT 5
38732: PUSH
38733: LD_INT 31
38735: PUSH
38736: LD_INT 32
38738: PUSH
38739: LD_INT 33
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: IN
38755: NOT
38756: IFFALSE 38768
38758: PUSH
38759: LD_VAR 0 6
38763: PUSH
38764: LD_INT 1
38766: EQUAL
38767: AND
38768: OR
38769: IFTRUE 38801
38771: PUSH
38772: LD_VAR 0 1
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: IN
38787: NOT
38788: IFFALSE 38800
38790: PUSH
38791: LD_VAR 0 6
38795: PUSH
38796: LD_INT 2
38798: EQUAL
38799: AND
38800: OR
38801: IFFALSE 38811
// mode = 0 ;
38803: LD_ADDR_VAR 0 6
38807: PUSH
38808: LD_INT 0
38810: ST_TO_ADDR
// case mode of 0 :
38811: LD_VAR 0 6
38815: PUSH
38816: LD_INT 0
38818: DOUBLE
38819: EQUAL
38820: IFTRUE 38824
38822: GO 50277
38824: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38825: LD_ADDR_VAR 0 11
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 2
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39018: LD_ADDR_VAR 0 12
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 3
39175: NEG
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39214: LD_ADDR_VAR 0 13
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: LD_INT 3
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 3
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 3
39385: NEG
39386: PUSH
39387: LD_INT 3
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39413: LD_ADDR_VAR 0 14
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: LD_INT 3
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 3
39574: NEG
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39609: LD_ADDR_VAR 0 15
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: NEG
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39802: LD_ADDR_VAR 0 16
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 2
39937: NEG
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 3
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39995: LD_ADDR_VAR 0 17
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 2
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40225: LD_ADDR_VAR 0 18
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 2
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40455: LD_ADDR_VAR 0 19
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 2
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 2
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40685: LD_ADDR_VAR 0 20
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 2
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40915: LD_ADDR_VAR 0 21
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41145: LD_ADDR_VAR 0 22
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41375: LD_ADDR_VAR 0 23
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 3
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 3
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41655: LD_ADDR_VAR 0 24
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: LD_INT 2
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 3
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41931: LD_ADDR_VAR 0 25
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 1
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: LD_INT 1
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: NEG
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42205: LD_ADDR_VAR 0 26
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 2
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 0
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42481: LD_ADDR_VAR 0 27
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 2
42577: NEG
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: NEG
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 3
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42761: LD_ADDR_VAR 0 28
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 3
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43043: LD_ADDR_VAR 0 29
43047: PUSH
43048: LD_INT 0
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 3
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43322: LD_ADDR_VAR 0 30
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: LD_INT 2
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: NEG
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 3
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 2
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43600: LD_ADDR_VAR 0 31
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: LD_INT 0
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 3
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43878: LD_ADDR_VAR 0 32
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 3
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44156: LD_ADDR_VAR 0 33
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: LD_INT 1
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 2
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 3
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: NEG
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44435: LD_ADDR_VAR 0 34
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 3
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 3
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 3
44680: NEG
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44715: LD_ADDR_VAR 0 35
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44827: LD_ADDR_VAR 0 36
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 2
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44939: LD_ADDR_VAR 0 37
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45051: LD_ADDR_VAR 0 38
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 0
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 2
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45163: LD_ADDR_VAR 0 39
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45275: LD_ADDR_VAR 0 40
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: NEG
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: LD_INT 1
45359: NEG
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45387: LD_ADDR_VAR 0 41
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 3
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 3
45630: PUSH
45631: LD_INT 3
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 3
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 3
45661: NEG
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45737: LD_ADDR_VAR 0 42
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 3
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 3
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 2
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 3
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 3
45983: PUSH
45984: LD_INT 3
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: NEG
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46087: LD_ADDR_VAR 0 43
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46435: LD_ADDR_VAR 0 44
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 3
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 2
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 3
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 3
46732: NEG
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: LD_INT 3
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46785: LD_ADDR_VAR 0 45
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 2
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 1
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: LD_INT 2
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 3
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 3
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 3
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47135: LD_ADDR_VAR 0 46
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 3
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 3
47431: NEG
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: NEG
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47483: LD_ADDR_VAR 0 47
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 2
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47634: LD_ADDR_VAR 0 48
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47781: LD_ADDR_VAR 0 49
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47925: LD_ADDR_VAR 0 50
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48069: LD_ADDR_VAR 0 51
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48216: LD_ADDR_VAR 0 52
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48367: LD_ADDR_VAR 0 53
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48597: LD_ADDR_VAR 0 54
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: NEG
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48827: LD_ADDR_VAR 0 55
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: LD_INT 2
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49057: LD_ADDR_VAR 0 56
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 1
49138: NEG
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 2
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49287: LD_ADDR_VAR 0 57
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: LD_INT 2
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49517: LD_ADDR_VAR 0 58
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49747: LD_ADDR_VAR 0 59
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49835: LD_ADDR_VAR 0 60
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 0
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49923: LD_ADDR_VAR 0 61
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50011: LD_ADDR_VAR 0 62
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 1
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50099: LD_ADDR_VAR 0 63
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50187: LD_ADDR_VAR 0 64
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: ST_TO_ADDR
// end ; 1 :
50275: GO 56172
50277: LD_INT 1
50279: DOUBLE
50280: EQUAL
50281: IFTRUE 50285
50283: GO 52908
50285: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50286: LD_ADDR_VAR 0 11
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 3
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50330: LD_ADDR_VAR 0 12
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50371: LD_ADDR_VAR 0 13
50375: PUSH
50376: LD_INT 3
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 3
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50411: LD_ADDR_VAR 0 14
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50452: LD_ADDR_VAR 0 15
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50496: LD_ADDR_VAR 0 16
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 3
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: LIST
50541: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50542: LD_ADDR_VAR 0 17
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 3
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50586: LD_ADDR_VAR 0 18
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50627: LD_ADDR_VAR 0 19
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 3
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50667: LD_ADDR_VAR 0 20
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50708: LD_ADDR_VAR 0 21
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: LIST
50751: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50752: LD_ADDR_VAR 0 22
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: LD_INT 3
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: LIST
50797: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50798: LD_ADDR_VAR 0 23
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 4
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 3
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50842: LD_ADDR_VAR 0 24
50846: PUSH
50847: LD_INT 3
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 4
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50883: LD_ADDR_VAR 0 25
50887: PUSH
50888: LD_INT 3
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 4
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50923: LD_ADDR_VAR 0 26
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 4
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50964: LD_ADDR_VAR 0 27
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 4
50993: NEG
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51008: LD_ADDR_VAR 0 28
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 3
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 3
51027: NEG
51028: PUSH
51029: LD_INT 4
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 4
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51054: LD_ADDR_VAR 0 29
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 3
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 4
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 4
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 5
51133: NEG
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 5
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 4
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: LD_INT 6
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 6
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 5
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51209: LD_ADDR_VAR 0 30
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 3
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 4
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 4
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 5
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 5
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 5
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 6
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 6
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51352: LD_ADDR_VAR 0 31
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 4
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 4
51399: PUSH
51400: LD_INT 4
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: LD_INT 4
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 5
51419: PUSH
51420: LD_INT 4
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 5
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 4
51439: PUSH
51440: LD_INT 5
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 6
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 6
51459: PUSH
51460: LD_INT 6
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 5
51469: PUSH
51470: LD_INT 6
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51491: LD_ADDR_VAR 0 32
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: LD_INT 3
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: NEG
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: LD_INT 4
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 4
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: LD_INT 3
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 5
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 5
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 4
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 6
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 6
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 5
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51634: LD_ADDR_VAR 0 33
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 3
51663: NEG
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 4
51686: NEG
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 4
51697: NEG
51698: PUSH
51699: LD_INT 1
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 4
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 5
51720: NEG
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: NEG
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 5
51743: NEG
51744: PUSH
51745: LD_INT 1
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 6
51754: NEG
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 6
51765: NEG
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51789: LD_ADDR_VAR 0 34
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 3
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 4
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 4
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 4
51856: NEG
51857: PUSH
51858: LD_INT 4
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: LD_INT 5
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 5
51880: NEG
51881: PUSH
51882: LD_INT 4
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 5
51892: NEG
51893: PUSH
51894: LD_INT 5
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 5
51904: NEG
51905: PUSH
51906: LD_INT 6
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 6
51916: NEG
51917: PUSH
51918: LD_INT 5
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 6
51928: NEG
51929: PUSH
51930: LD_INT 6
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51952: LD_ADDR_VAR 0 41
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 3
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51996: LD_ADDR_VAR 0 42
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52037: LD_ADDR_VAR 0 43
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: LD_INT 2
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 3
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52077: LD_ADDR_VAR 0 44
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52118: LD_ADDR_VAR 0 45
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52162: LD_ADDR_VAR 0 46
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 3
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52208: LD_ADDR_VAR 0 47
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: LD_INT 3
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: NEG
52228: PUSH
52229: LD_INT 3
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52241: LD_ADDR_VAR 0 48
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52272: LD_ADDR_VAR 0 49
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 3
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52301: LD_ADDR_VAR 0 50
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: PUSH
52319: LD_INT 3
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52330: LD_ADDR_VAR 0 51
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52361: LD_ADDR_VAR 0 52
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52394: LD_ADDR_VAR 0 53
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52438: LD_ADDR_VAR 0 54
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 3
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52479: LD_ADDR_VAR 0 55
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 2
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52519: LD_ADDR_VAR 0 56
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 2
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52560: LD_ADDR_VAR 0 57
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52604: LD_ADDR_VAR 0 58
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: LIST
52649: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52650: LD_ADDR_VAR 0 59
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 2
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52694: LD_ADDR_VAR 0 60
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52735: LD_ADDR_VAR 0 61
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: PUSH
52763: LD_INT 2
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52775: LD_ADDR_VAR 0 62
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52816: LD_ADDR_VAR 0 63
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52860: LD_ADDR_VAR 0 64
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 2
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// end ; 2 :
52906: GO 56172
52908: LD_INT 2
52910: DOUBLE
52911: EQUAL
52912: IFTRUE 52916
52914: GO 56171
52916: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52917: LD_ADDR_VAR 0 29
52921: PUSH
52922: LD_INT 4
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 4
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 5
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 5
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 4
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 5
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 3
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 4
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 4
53047: PUSH
53048: LD_INT 4
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: PUSH
53058: LD_INT 4
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 4
53087: PUSH
53088: LD_INT 2
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: LD_INT 4
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: LD_INT 4
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 5
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 5
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 4
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 3
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 5
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 3
53245: NEG
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 4
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 4
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 4
53279: NEG
53280: PUSH
53281: LD_INT 2
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: NEG
53303: PUSH
53304: LD_INT 4
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 4
53314: NEG
53315: PUSH
53316: LD_INT 5
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 3
53326: NEG
53327: PUSH
53328: LD_INT 4
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 4
53350: NEG
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 5
53362: NEG
53363: PUSH
53364: LD_INT 4
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 5
53374: NEG
53375: PUSH
53376: LD_INT 5
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 5
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 5
53398: NEG
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53455: LD_ADDR_VAR 0 30
53459: PUSH
53460: LD_INT 4
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 4
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 5
53482: PUSH
53483: LD_INT 4
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 5
53492: PUSH
53493: LD_INT 5
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 4
53502: PUSH
53503: LD_INT 5
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 3
53512: PUSH
53513: LD_INT 4
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 5
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: LD_INT 5
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 3
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 4
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 4
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 4
53645: NEG
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 4
53656: NEG
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 5
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 5
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 5
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 3
53736: NEG
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: LD_INT 3
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: LD_INT 4
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 4
53807: NEG
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 4
53819: NEG
53820: PUSH
53821: LD_INT 4
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: LD_INT 4
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 4
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 5
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 4
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 3
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 4
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: LD_INT 5
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 5
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54002: LD_ADDR_VAR 0 31
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 4
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 5
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: LD_INT 4
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 5
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 3
54102: NEG
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: NEG
54114: PUSH
54115: LD_INT 1
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 2
54125: NEG
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 4
54158: NEG
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 4
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 4
54181: NEG
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 4
54204: NEG
54205: PUSH
54206: LD_INT 4
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 4
54216: NEG
54217: PUSH
54218: LD_INT 5
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 3
54228: NEG
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: LD_INT 3
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 4
54252: NEG
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 5
54264: NEG
54265: PUSH
54266: LD_INT 4
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 5
54276: NEG
54277: PUSH
54278: LD_INT 5
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: LD_INT 5
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: NEG
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 3
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 3
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: NEG
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 4
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: LD_INT 4
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 4
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 4
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 5
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 4
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 5
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54552: LD_ADDR_VAR 0 32
54556: PUSH
54557: LD_INT 4
54559: NEG
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 4
54570: NEG
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: NEG
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: NEG
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 4
54604: NEG
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 5
54615: NEG
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 5
54626: NEG
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 5
54638: NEG
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 3
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: LD_INT 4
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 4
54721: NEG
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: LD_INT 4
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: LD_INT 4
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 4
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 5
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 4
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 3
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 4
54828: NEG
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 5
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 5
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 4
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 4
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 4
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: LD_INT 4
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 5
54994: PUSH
54995: LD_INT 5
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 4
55004: PUSH
55005: LD_INT 5
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: LD_INT 4
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: PUSH
55025: LD_INT 3
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 5
55034: PUSH
55035: LD_INT 3
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: LD_INT 5
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55099: LD_ADDR_VAR 0 33
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: LD_INT 4
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 4
55118: NEG
55119: PUSH
55120: LD_INT 5
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 4
55154: NEG
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 5
55166: NEG
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 5
55178: NEG
55179: PUSH
55180: LD_INT 5
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 3
55190: NEG
55191: PUSH
55192: LD_INT 5
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 5
55202: NEG
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: LD_INT 3
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 4
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 3
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 4
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 4
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 4
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 4
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 5
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 3
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 5
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 4
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 4
55439: PUSH
55440: LD_INT 4
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: LD_INT 4
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 3
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 4
55479: PUSH
55480: LD_INT 2
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 4
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 5
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 5
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 4
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 5
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: NEG
55582: PUSH
55583: LD_INT 3
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55637: LD_ADDR_VAR 0 34
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 4
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: LD_INT 5
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 0
55688: PUSH
55689: LD_INT 3
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 4
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: LD_INT 5
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 3
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 5
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: PUSH
55768: LD_INT 0
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 3
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 4
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 5
55859: PUSH
55860: LD_INT 4
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 5
55869: PUSH
55870: LD_INT 5
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 4
55879: PUSH
55880: LD_INT 5
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: LD_INT 4
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 5
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 5
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 3
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: LD_INT 4
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 2
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 4
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 4
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 5
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 5
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 5
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 3
56113: NEG
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// end ; end ;
56169: GO 56172
56171: POP
// case btype of b_depot , b_warehouse :
56172: LD_VAR 0 1
56176: PUSH
56177: LD_INT 0
56179: DOUBLE
56180: EQUAL
56181: IFTRUE 56191
56183: LD_INT 1
56185: DOUBLE
56186: EQUAL
56187: IFTRUE 56191
56189: GO 56392
56191: POP
// case nation of nation_american :
56192: LD_VAR 0 5
56196: PUSH
56197: LD_INT 1
56199: DOUBLE
56200: EQUAL
56201: IFTRUE 56205
56203: GO 56261
56205: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56206: LD_ADDR_VAR 0 9
56210: PUSH
56211: LD_VAR 0 11
56215: PUSH
56216: LD_VAR 0 12
56220: PUSH
56221: LD_VAR 0 13
56225: PUSH
56226: LD_VAR 0 14
56230: PUSH
56231: LD_VAR 0 15
56235: PUSH
56236: LD_VAR 0 16
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: PUSH
56249: LD_VAR 0 4
56253: PUSH
56254: LD_INT 1
56256: PLUS
56257: ARRAY
56258: ST_TO_ADDR
56259: GO 56390
56261: LD_INT 2
56263: DOUBLE
56264: EQUAL
56265: IFTRUE 56269
56267: GO 56325
56269: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56270: LD_ADDR_VAR 0 9
56274: PUSH
56275: LD_VAR 0 17
56279: PUSH
56280: LD_VAR 0 18
56284: PUSH
56285: LD_VAR 0 19
56289: PUSH
56290: LD_VAR 0 20
56294: PUSH
56295: LD_VAR 0 21
56299: PUSH
56300: LD_VAR 0 22
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: PUSH
56313: LD_VAR 0 4
56317: PUSH
56318: LD_INT 1
56320: PLUS
56321: ARRAY
56322: ST_TO_ADDR
56323: GO 56390
56325: LD_INT 3
56327: DOUBLE
56328: EQUAL
56329: IFTRUE 56333
56331: GO 56389
56333: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56334: LD_ADDR_VAR 0 9
56338: PUSH
56339: LD_VAR 0 23
56343: PUSH
56344: LD_VAR 0 24
56348: PUSH
56349: LD_VAR 0 25
56353: PUSH
56354: LD_VAR 0 26
56358: PUSH
56359: LD_VAR 0 27
56363: PUSH
56364: LD_VAR 0 28
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: PUSH
56377: LD_VAR 0 4
56381: PUSH
56382: LD_INT 1
56384: PLUS
56385: ARRAY
56386: ST_TO_ADDR
56387: GO 56390
56389: POP
56390: GO 56945
56392: LD_INT 2
56394: DOUBLE
56395: EQUAL
56396: IFTRUE 56406
56398: LD_INT 3
56400: DOUBLE
56401: EQUAL
56402: IFTRUE 56406
56404: GO 56462
56406: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56407: LD_ADDR_VAR 0 9
56411: PUSH
56412: LD_VAR 0 29
56416: PUSH
56417: LD_VAR 0 30
56421: PUSH
56422: LD_VAR 0 31
56426: PUSH
56427: LD_VAR 0 32
56431: PUSH
56432: LD_VAR 0 33
56436: PUSH
56437: LD_VAR 0 34
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: PUSH
56450: LD_VAR 0 4
56454: PUSH
56455: LD_INT 1
56457: PLUS
56458: ARRAY
56459: ST_TO_ADDR
56460: GO 56945
56462: LD_INT 16
56464: DOUBLE
56465: EQUAL
56466: IFTRUE 56524
56468: LD_INT 17
56470: DOUBLE
56471: EQUAL
56472: IFTRUE 56524
56474: LD_INT 18
56476: DOUBLE
56477: EQUAL
56478: IFTRUE 56524
56480: LD_INT 19
56482: DOUBLE
56483: EQUAL
56484: IFTRUE 56524
56486: LD_INT 22
56488: DOUBLE
56489: EQUAL
56490: IFTRUE 56524
56492: LD_INT 20
56494: DOUBLE
56495: EQUAL
56496: IFTRUE 56524
56498: LD_INT 21
56500: DOUBLE
56501: EQUAL
56502: IFTRUE 56524
56504: LD_INT 23
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56524
56510: LD_INT 24
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56524
56516: LD_INT 25
56518: DOUBLE
56519: EQUAL
56520: IFTRUE 56524
56522: GO 56580
56524: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56525: LD_ADDR_VAR 0 9
56529: PUSH
56530: LD_VAR 0 35
56534: PUSH
56535: LD_VAR 0 36
56539: PUSH
56540: LD_VAR 0 37
56544: PUSH
56545: LD_VAR 0 38
56549: PUSH
56550: LD_VAR 0 39
56554: PUSH
56555: LD_VAR 0 40
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: PUSH
56568: LD_VAR 0 4
56572: PUSH
56573: LD_INT 1
56575: PLUS
56576: ARRAY
56577: ST_TO_ADDR
56578: GO 56945
56580: LD_INT 6
56582: DOUBLE
56583: EQUAL
56584: IFTRUE 56636
56586: LD_INT 7
56588: DOUBLE
56589: EQUAL
56590: IFTRUE 56636
56592: LD_INT 8
56594: DOUBLE
56595: EQUAL
56596: IFTRUE 56636
56598: LD_INT 13
56600: DOUBLE
56601: EQUAL
56602: IFTRUE 56636
56604: LD_INT 12
56606: DOUBLE
56607: EQUAL
56608: IFTRUE 56636
56610: LD_INT 15
56612: DOUBLE
56613: EQUAL
56614: IFTRUE 56636
56616: LD_INT 11
56618: DOUBLE
56619: EQUAL
56620: IFTRUE 56636
56622: LD_INT 14
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56636
56628: LD_INT 10
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56636
56634: GO 56692
56636: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56637: LD_ADDR_VAR 0 9
56641: PUSH
56642: LD_VAR 0 41
56646: PUSH
56647: LD_VAR 0 42
56651: PUSH
56652: LD_VAR 0 43
56656: PUSH
56657: LD_VAR 0 44
56661: PUSH
56662: LD_VAR 0 45
56666: PUSH
56667: LD_VAR 0 46
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: PUSH
56680: LD_VAR 0 4
56684: PUSH
56685: LD_INT 1
56687: PLUS
56688: ARRAY
56689: ST_TO_ADDR
56690: GO 56945
56692: LD_INT 36
56694: DOUBLE
56695: EQUAL
56696: IFTRUE 56700
56698: GO 56756
56700: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56701: LD_ADDR_VAR 0 9
56705: PUSH
56706: LD_VAR 0 47
56710: PUSH
56711: LD_VAR 0 48
56715: PUSH
56716: LD_VAR 0 49
56720: PUSH
56721: LD_VAR 0 50
56725: PUSH
56726: LD_VAR 0 51
56730: PUSH
56731: LD_VAR 0 52
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: PUSH
56744: LD_VAR 0 4
56748: PUSH
56749: LD_INT 1
56751: PLUS
56752: ARRAY
56753: ST_TO_ADDR
56754: GO 56945
56756: LD_INT 4
56758: DOUBLE
56759: EQUAL
56760: IFTRUE 56782
56762: LD_INT 5
56764: DOUBLE
56765: EQUAL
56766: IFTRUE 56782
56768: LD_INT 34
56770: DOUBLE
56771: EQUAL
56772: IFTRUE 56782
56774: LD_INT 37
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56782
56780: GO 56838
56782: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56783: LD_ADDR_VAR 0 9
56787: PUSH
56788: LD_VAR 0 53
56792: PUSH
56793: LD_VAR 0 54
56797: PUSH
56798: LD_VAR 0 55
56802: PUSH
56803: LD_VAR 0 56
56807: PUSH
56808: LD_VAR 0 57
56812: PUSH
56813: LD_VAR 0 58
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: PUSH
56826: LD_VAR 0 4
56830: PUSH
56831: LD_INT 1
56833: PLUS
56834: ARRAY
56835: ST_TO_ADDR
56836: GO 56945
56838: LD_INT 31
56840: DOUBLE
56841: EQUAL
56842: IFTRUE 56888
56844: LD_INT 32
56846: DOUBLE
56847: EQUAL
56848: IFTRUE 56888
56850: LD_INT 33
56852: DOUBLE
56853: EQUAL
56854: IFTRUE 56888
56856: LD_INT 27
56858: DOUBLE
56859: EQUAL
56860: IFTRUE 56888
56862: LD_INT 26
56864: DOUBLE
56865: EQUAL
56866: IFTRUE 56888
56868: LD_INT 28
56870: DOUBLE
56871: EQUAL
56872: IFTRUE 56888
56874: LD_INT 29
56876: DOUBLE
56877: EQUAL
56878: IFTRUE 56888
56880: LD_INT 30
56882: DOUBLE
56883: EQUAL
56884: IFTRUE 56888
56886: GO 56944
56888: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56889: LD_ADDR_VAR 0 9
56893: PUSH
56894: LD_VAR 0 59
56898: PUSH
56899: LD_VAR 0 60
56903: PUSH
56904: LD_VAR 0 61
56908: PUSH
56909: LD_VAR 0 62
56913: PUSH
56914: LD_VAR 0 63
56918: PUSH
56919: LD_VAR 0 64
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: PUSH
56932: LD_VAR 0 4
56936: PUSH
56937: LD_INT 1
56939: PLUS
56940: ARRAY
56941: ST_TO_ADDR
56942: GO 56945
56944: POP
// temp_list2 = [ ] ;
56945: LD_ADDR_VAR 0 10
56949: PUSH
56950: EMPTY
56951: ST_TO_ADDR
// for i in temp_list do
56952: LD_ADDR_VAR 0 8
56956: PUSH
56957: LD_VAR 0 9
56961: PUSH
56962: FOR_IN
56963: IFFALSE 57015
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56965: LD_ADDR_VAR 0 10
56969: PUSH
56970: LD_VAR 0 10
56974: PUSH
56975: LD_VAR 0 8
56979: PUSH
56980: LD_INT 1
56982: ARRAY
56983: PUSH
56984: LD_VAR 0 2
56988: PLUS
56989: PUSH
56990: LD_VAR 0 8
56994: PUSH
56995: LD_INT 2
56997: ARRAY
56998: PUSH
56999: LD_VAR 0 3
57003: PLUS
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: ADD
57012: ST_TO_ADDR
57013: GO 56962
57015: POP
57016: POP
// result = temp_list2 ;
57017: LD_ADDR_VAR 0 7
57021: PUSH
57022: LD_VAR 0 10
57026: ST_TO_ADDR
// end ;
57027: LD_VAR 0 7
57031: RET
// export function EnemyInRange ( unit , dist ) ; begin
57032: LD_INT 0
57034: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57035: LD_ADDR_VAR 0 3
57039: PUSH
57040: LD_VAR 0 1
57044: PPUSH
57045: CALL_OW 255
57049: PPUSH
57050: LD_VAR 0 1
57054: PPUSH
57055: CALL_OW 250
57059: PPUSH
57060: LD_VAR 0 1
57064: PPUSH
57065: CALL_OW 251
57069: PPUSH
57070: LD_VAR 0 2
57074: PPUSH
57075: CALL 30289 0 4
57079: PUSH
57080: LD_INT 4
57082: ARRAY
57083: ST_TO_ADDR
// end ;
57084: LD_VAR 0 3
57088: RET
// export function PlayerSeeMe ( unit ) ; begin
57089: LD_INT 0
57091: PPUSH
// result := See ( your_side , unit ) ;
57092: LD_ADDR_VAR 0 2
57096: PUSH
57097: LD_OWVAR 2
57101: PPUSH
57102: LD_VAR 0 1
57106: PPUSH
57107: CALL_OW 292
57111: ST_TO_ADDR
// end ;
57112: LD_VAR 0 2
57116: RET
// export function ReverseDir ( unit ) ; begin
57117: LD_INT 0
57119: PPUSH
// if not unit then
57120: LD_VAR 0 1
57124: NOT
57125: IFFALSE 57129
// exit ;
57127: GO 57152
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57129: LD_ADDR_VAR 0 2
57133: PUSH
57134: LD_VAR 0 1
57138: PPUSH
57139: CALL_OW 254
57143: PUSH
57144: LD_INT 3
57146: PLUS
57147: PUSH
57148: LD_INT 6
57150: MOD
57151: ST_TO_ADDR
// end ;
57152: LD_VAR 0 2
57156: RET
// export function ReverseArray ( array ) ; var i ; begin
57157: LD_INT 0
57159: PPUSH
57160: PPUSH
// if not array then
57161: LD_VAR 0 1
57165: NOT
57166: IFFALSE 57170
// exit ;
57168: GO 57225
// result := [ ] ;
57170: LD_ADDR_VAR 0 2
57174: PUSH
57175: EMPTY
57176: ST_TO_ADDR
// for i := array downto 1 do
57177: LD_ADDR_VAR 0 3
57181: PUSH
57182: DOUBLE
57183: LD_VAR 0 1
57187: INC
57188: ST_TO_ADDR
57189: LD_INT 1
57191: PUSH
57192: FOR_DOWNTO
57193: IFFALSE 57223
// result := Join ( result , array [ i ] ) ;
57195: LD_ADDR_VAR 0 2
57199: PUSH
57200: LD_VAR 0 2
57204: PPUSH
57205: LD_VAR 0 1
57209: PUSH
57210: LD_VAR 0 3
57214: ARRAY
57215: PPUSH
57216: CALL 62067 0 2
57220: ST_TO_ADDR
57221: GO 57192
57223: POP
57224: POP
// end ;
57225: LD_VAR 0 2
57229: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57230: LD_INT 0
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
// if not unit or not hexes then
57238: LD_VAR 0 1
57242: NOT
57243: IFTRUE 57252
57245: PUSH
57246: LD_VAR 0 2
57250: NOT
57251: OR
57252: IFFALSE 57256
// exit ;
57254: GO 57379
// dist := 9999 ;
57256: LD_ADDR_VAR 0 5
57260: PUSH
57261: LD_INT 9999
57263: ST_TO_ADDR
// for i = 1 to hexes do
57264: LD_ADDR_VAR 0 4
57268: PUSH
57269: DOUBLE
57270: LD_INT 1
57272: DEC
57273: ST_TO_ADDR
57274: LD_VAR 0 2
57278: PUSH
57279: FOR_TO
57280: IFFALSE 57367
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57282: LD_ADDR_VAR 0 6
57286: PUSH
57287: LD_VAR 0 1
57291: PPUSH
57292: LD_VAR 0 2
57296: PUSH
57297: LD_VAR 0 4
57301: ARRAY
57302: PUSH
57303: LD_INT 1
57305: ARRAY
57306: PPUSH
57307: LD_VAR 0 2
57311: PUSH
57312: LD_VAR 0 4
57316: ARRAY
57317: PUSH
57318: LD_INT 2
57320: ARRAY
57321: PPUSH
57322: CALL_OW 297
57326: ST_TO_ADDR
// if tdist < dist then
57327: LD_VAR 0 6
57331: PUSH
57332: LD_VAR 0 5
57336: LESS
57337: IFFALSE 57365
// begin hex := hexes [ i ] ;
57339: LD_ADDR_VAR 0 8
57343: PUSH
57344: LD_VAR 0 2
57348: PUSH
57349: LD_VAR 0 4
57353: ARRAY
57354: ST_TO_ADDR
// dist := tdist ;
57355: LD_ADDR_VAR 0 5
57359: PUSH
57360: LD_VAR 0 6
57364: ST_TO_ADDR
// end ; end ;
57365: GO 57279
57367: POP
57368: POP
// result := hex ;
57369: LD_ADDR_VAR 0 3
57373: PUSH
57374: LD_VAR 0 8
57378: ST_TO_ADDR
// end ;
57379: LD_VAR 0 3
57383: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57384: LD_INT 0
57386: PPUSH
57387: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57388: LD_VAR 0 1
57392: NOT
57393: IFTRUE 57432
57395: PUSH
57396: LD_VAR 0 1
57400: PUSH
57401: LD_INT 21
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 23
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PPUSH
57425: CALL_OW 69
57429: IN
57430: NOT
57431: OR
57432: IFFALSE 57436
// exit ;
57434: GO 57483
// for i = 1 to 3 do
57436: LD_ADDR_VAR 0 3
57440: PUSH
57441: DOUBLE
57442: LD_INT 1
57444: DEC
57445: ST_TO_ADDR
57446: LD_INT 3
57448: PUSH
57449: FOR_TO
57450: IFFALSE 57481
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57452: LD_VAR 0 1
57456: PPUSH
57457: CALL_OW 250
57461: PPUSH
57462: LD_VAR 0 1
57466: PPUSH
57467: CALL_OW 251
57471: PPUSH
57472: LD_INT 1
57474: PPUSH
57475: CALL_OW 453
57479: GO 57449
57481: POP
57482: POP
// end ;
57483: LD_VAR 0 2
57487: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57488: LD_INT 0
57490: PPUSH
57491: PPUSH
57492: PPUSH
57493: PPUSH
57494: PPUSH
57495: PPUSH
// if not unit or not enemy_unit then
57496: LD_VAR 0 1
57500: NOT
57501: IFTRUE 57510
57503: PUSH
57504: LD_VAR 0 2
57508: NOT
57509: OR
57510: IFFALSE 57514
// exit ;
57512: GO 57985
// if GetLives ( i ) < 250 then
57514: LD_VAR 0 4
57518: PPUSH
57519: CALL_OW 256
57523: PUSH
57524: LD_INT 250
57526: LESS
57527: IFFALSE 57540
// begin ComAutodestruct ( i ) ;
57529: LD_VAR 0 4
57533: PPUSH
57534: CALL 57384 0 1
// exit ;
57538: GO 57985
// end ; x := GetX ( enemy_unit ) ;
57540: LD_ADDR_VAR 0 7
57544: PUSH
57545: LD_VAR 0 2
57549: PPUSH
57550: CALL_OW 250
57554: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57555: LD_ADDR_VAR 0 8
57559: PUSH
57560: LD_VAR 0 2
57564: PPUSH
57565: CALL_OW 251
57569: ST_TO_ADDR
// if not x or not y then
57570: LD_VAR 0 7
57574: NOT
57575: IFTRUE 57584
57577: PUSH
57578: LD_VAR 0 8
57582: NOT
57583: OR
57584: IFFALSE 57588
// exit ;
57586: GO 57985
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57588: LD_ADDR_VAR 0 6
57592: PUSH
57593: LD_VAR 0 7
57597: PPUSH
57598: LD_INT 0
57600: PPUSH
57601: LD_INT 4
57603: PPUSH
57604: CALL_OW 272
57608: PUSH
57609: LD_VAR 0 8
57613: PPUSH
57614: LD_INT 0
57616: PPUSH
57617: LD_INT 4
57619: PPUSH
57620: CALL_OW 273
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_VAR 0 7
57633: PPUSH
57634: LD_INT 1
57636: PPUSH
57637: LD_INT 4
57639: PPUSH
57640: CALL_OW 272
57644: PUSH
57645: LD_VAR 0 8
57649: PPUSH
57650: LD_INT 1
57652: PPUSH
57653: LD_INT 4
57655: PPUSH
57656: CALL_OW 273
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_VAR 0 7
57669: PPUSH
57670: LD_INT 2
57672: PPUSH
57673: LD_INT 4
57675: PPUSH
57676: CALL_OW 272
57680: PUSH
57681: LD_VAR 0 8
57685: PPUSH
57686: LD_INT 2
57688: PPUSH
57689: LD_INT 4
57691: PPUSH
57692: CALL_OW 273
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_VAR 0 7
57705: PPUSH
57706: LD_INT 3
57708: PPUSH
57709: LD_INT 4
57711: PPUSH
57712: CALL_OW 272
57716: PUSH
57717: LD_VAR 0 8
57721: PPUSH
57722: LD_INT 3
57724: PPUSH
57725: LD_INT 4
57727: PPUSH
57728: CALL_OW 273
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_VAR 0 7
57741: PPUSH
57742: LD_INT 4
57744: PPUSH
57745: LD_INT 4
57747: PPUSH
57748: CALL_OW 272
57752: PUSH
57753: LD_VAR 0 8
57757: PPUSH
57758: LD_INT 4
57760: PPUSH
57761: LD_INT 4
57763: PPUSH
57764: CALL_OW 273
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_VAR 0 7
57777: PPUSH
57778: LD_INT 5
57780: PPUSH
57781: LD_INT 4
57783: PPUSH
57784: CALL_OW 272
57788: PUSH
57789: LD_VAR 0 8
57793: PPUSH
57794: LD_INT 5
57796: PPUSH
57797: LD_INT 4
57799: PPUSH
57800: CALL_OW 273
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// for i = tmp downto 1 do
57817: LD_ADDR_VAR 0 4
57821: PUSH
57822: DOUBLE
57823: LD_VAR 0 6
57827: INC
57828: ST_TO_ADDR
57829: LD_INT 1
57831: PUSH
57832: FOR_DOWNTO
57833: IFFALSE 57936
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57835: LD_VAR 0 6
57839: PUSH
57840: LD_VAR 0 4
57844: ARRAY
57845: PUSH
57846: LD_INT 1
57848: ARRAY
57849: PPUSH
57850: LD_VAR 0 6
57854: PUSH
57855: LD_VAR 0 4
57859: ARRAY
57860: PUSH
57861: LD_INT 2
57863: ARRAY
57864: PPUSH
57865: CALL_OW 488
57869: NOT
57870: IFTRUE 57912
57872: PUSH
57873: LD_VAR 0 6
57877: PUSH
57878: LD_VAR 0 4
57882: ARRAY
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PPUSH
57888: LD_VAR 0 6
57892: PUSH
57893: LD_VAR 0 4
57897: ARRAY
57898: PUSH
57899: LD_INT 2
57901: ARRAY
57902: PPUSH
57903: CALL_OW 428
57907: PUSH
57908: LD_INT 0
57910: NONEQUAL
57911: OR
57912: IFFALSE 57934
// tmp := Delete ( tmp , i ) ;
57914: LD_ADDR_VAR 0 6
57918: PUSH
57919: LD_VAR 0 6
57923: PPUSH
57924: LD_VAR 0 4
57928: PPUSH
57929: CALL_OW 3
57933: ST_TO_ADDR
57934: GO 57832
57936: POP
57937: POP
// j := GetClosestHex ( unit , tmp ) ;
57938: LD_ADDR_VAR 0 5
57942: PUSH
57943: LD_VAR 0 1
57947: PPUSH
57948: LD_VAR 0 6
57952: PPUSH
57953: CALL 57230 0 2
57957: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57958: LD_VAR 0 1
57962: PPUSH
57963: LD_VAR 0 5
57967: PUSH
57968: LD_INT 1
57970: ARRAY
57971: PPUSH
57972: LD_VAR 0 5
57976: PUSH
57977: LD_INT 2
57979: ARRAY
57980: PPUSH
57981: CALL_OW 111
// end ;
57985: LD_VAR 0 3
57989: RET
// export function PrepareApemanSoldier ( ) ; begin
57990: LD_INT 0
57992: PPUSH
// uc_nation := 0 ;
57993: LD_ADDR_OWVAR 21
57997: PUSH
57998: LD_INT 0
58000: ST_TO_ADDR
// hc_sex := sex_male ;
58001: LD_ADDR_OWVAR 27
58005: PUSH
58006: LD_INT 1
58008: ST_TO_ADDR
// hc_name :=  ;
58009: LD_ADDR_OWVAR 26
58013: PUSH
58014: LD_STRING 
58016: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58017: LD_ADDR_OWVAR 28
58021: PUSH
58022: LD_INT 15
58024: ST_TO_ADDR
// hc_gallery :=  ;
58025: LD_ADDR_OWVAR 33
58029: PUSH
58030: LD_STRING 
58032: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58033: LD_ADDR_OWVAR 31
58037: PUSH
58038: LD_INT 0
58040: PPUSH
58041: LD_INT 3
58043: PPUSH
58044: CALL_OW 12
58048: PUSH
58049: LD_INT 0
58051: PPUSH
58052: LD_INT 3
58054: PPUSH
58055: CALL_OW 12
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58072: LD_ADDR_OWVAR 29
58076: PUSH
58077: LD_INT 12
58079: PUSH
58080: LD_INT 12
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: ST_TO_ADDR
// end ;
58087: LD_VAR 0 1
58091: RET
// export function PrepareApemanEngineer ( ) ; begin
58092: LD_INT 0
58094: PPUSH
// uc_nation := 0 ;
58095: LD_ADDR_OWVAR 21
58099: PUSH
58100: LD_INT 0
58102: ST_TO_ADDR
// hc_sex := sex_male ;
58103: LD_ADDR_OWVAR 27
58107: PUSH
58108: LD_INT 1
58110: ST_TO_ADDR
// hc_name :=  ;
58111: LD_ADDR_OWVAR 26
58115: PUSH
58116: LD_STRING 
58118: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58119: LD_ADDR_OWVAR 28
58123: PUSH
58124: LD_INT 16
58126: ST_TO_ADDR
// hc_gallery :=  ;
58127: LD_ADDR_OWVAR 33
58131: PUSH
58132: LD_STRING 
58134: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58135: LD_ADDR_OWVAR 31
58139: PUSH
58140: LD_INT 0
58142: PPUSH
58143: LD_INT 3
58145: PPUSH
58146: CALL_OW 12
58150: PUSH
58151: LD_INT 0
58153: PPUSH
58154: LD_INT 3
58156: PPUSH
58157: CALL_OW 12
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58174: LD_ADDR_OWVAR 29
58178: PUSH
58179: LD_INT 12
58181: PUSH
58182: LD_INT 12
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// end ;
58189: LD_VAR 0 1
58193: RET
// export function PrepareApeman ( agressivity ) ; begin
58194: LD_INT 0
58196: PPUSH
// uc_side := 0 ;
58197: LD_ADDR_OWVAR 20
58201: PUSH
58202: LD_INT 0
58204: ST_TO_ADDR
// uc_nation := 0 ;
58205: LD_ADDR_OWVAR 21
58209: PUSH
58210: LD_INT 0
58212: ST_TO_ADDR
// hc_sex := sex_male ;
58213: LD_ADDR_OWVAR 27
58217: PUSH
58218: LD_INT 1
58220: ST_TO_ADDR
// hc_class := class_apeman ;
58221: LD_ADDR_OWVAR 28
58225: PUSH
58226: LD_INT 12
58228: ST_TO_ADDR
// hc_gallery :=  ;
58229: LD_ADDR_OWVAR 33
58233: PUSH
58234: LD_STRING 
58236: ST_TO_ADDR
// hc_name :=  ;
58237: LD_ADDR_OWVAR 26
58241: PUSH
58242: LD_STRING 
58244: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58245: LD_ADDR_OWVAR 29
58249: PUSH
58250: LD_INT 12
58252: PUSH
58253: LD_INT 12
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// if agressivity = 0 then
58260: LD_VAR 0 1
58264: PUSH
58265: LD_INT 0
58267: EQUAL
58268: IFFALSE 58280
// hc_agressivity := 0 else
58270: LD_ADDR_OWVAR 35
58274: PUSH
58275: LD_INT 0
58277: ST_TO_ADDR
58278: GO 58301
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58280: LD_ADDR_OWVAR 35
58284: PUSH
58285: LD_VAR 0 1
58289: NEG
58290: PPUSH
58291: LD_VAR 0 1
58295: PPUSH
58296: CALL_OW 12
58300: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58301: LD_ADDR_OWVAR 31
58305: PUSH
58306: LD_INT 0
58308: PPUSH
58309: LD_INT 3
58311: PPUSH
58312: CALL_OW 12
58316: PUSH
58317: LD_INT 0
58319: PPUSH
58320: LD_INT 3
58322: PPUSH
58323: CALL_OW 12
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// end ;
58340: LD_VAR 0 2
58344: RET
// export function PrepareTiger ( agressivity ) ; begin
58345: LD_INT 0
58347: PPUSH
// uc_side := 0 ;
58348: LD_ADDR_OWVAR 20
58352: PUSH
58353: LD_INT 0
58355: ST_TO_ADDR
// uc_nation := 0 ;
58356: LD_ADDR_OWVAR 21
58360: PUSH
58361: LD_INT 0
58363: ST_TO_ADDR
// InitHc ;
58364: CALL_OW 19
// hc_class := class_tiger ;
58368: LD_ADDR_OWVAR 28
58372: PUSH
58373: LD_INT 14
58375: ST_TO_ADDR
// hc_gallery :=  ;
58376: LD_ADDR_OWVAR 33
58380: PUSH
58381: LD_STRING 
58383: ST_TO_ADDR
// hc_name :=  ;
58384: LD_ADDR_OWVAR 26
58388: PUSH
58389: LD_STRING 
58391: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58392: LD_ADDR_OWVAR 35
58396: PUSH
58397: LD_VAR 0 1
58401: NEG
58402: PPUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 12
58412: ST_TO_ADDR
// end ;
58413: LD_VAR 0 2
58417: RET
// export function PrepareEnchidna ( ) ; begin
58418: LD_INT 0
58420: PPUSH
// uc_side := 0 ;
58421: LD_ADDR_OWVAR 20
58425: PUSH
58426: LD_INT 0
58428: ST_TO_ADDR
// uc_nation := 0 ;
58429: LD_ADDR_OWVAR 21
58433: PUSH
58434: LD_INT 0
58436: ST_TO_ADDR
// InitHc ;
58437: CALL_OW 19
// hc_class := class_baggie ;
58441: LD_ADDR_OWVAR 28
58445: PUSH
58446: LD_INT 13
58448: ST_TO_ADDR
// hc_gallery :=  ;
58449: LD_ADDR_OWVAR 33
58453: PUSH
58454: LD_STRING 
58456: ST_TO_ADDR
// hc_name :=  ;
58457: LD_ADDR_OWVAR 26
58461: PUSH
58462: LD_STRING 
58464: ST_TO_ADDR
// end ;
58465: LD_VAR 0 1
58469: RET
// export function PrepareFrog ( ) ; begin
58470: LD_INT 0
58472: PPUSH
// uc_side := 0 ;
58473: LD_ADDR_OWVAR 20
58477: PUSH
58478: LD_INT 0
58480: ST_TO_ADDR
// uc_nation := 0 ;
58481: LD_ADDR_OWVAR 21
58485: PUSH
58486: LD_INT 0
58488: ST_TO_ADDR
// InitHc ;
58489: CALL_OW 19
// hc_class := class_frog ;
58493: LD_ADDR_OWVAR 28
58497: PUSH
58498: LD_INT 19
58500: ST_TO_ADDR
// hc_gallery :=  ;
58501: LD_ADDR_OWVAR 33
58505: PUSH
58506: LD_STRING 
58508: ST_TO_ADDR
// hc_name :=  ;
58509: LD_ADDR_OWVAR 26
58513: PUSH
58514: LD_STRING 
58516: ST_TO_ADDR
// end ;
58517: LD_VAR 0 1
58521: RET
// export function PrepareFish ( ) ; begin
58522: LD_INT 0
58524: PPUSH
// uc_side := 0 ;
58525: LD_ADDR_OWVAR 20
58529: PUSH
58530: LD_INT 0
58532: ST_TO_ADDR
// uc_nation := 0 ;
58533: LD_ADDR_OWVAR 21
58537: PUSH
58538: LD_INT 0
58540: ST_TO_ADDR
// InitHc ;
58541: CALL_OW 19
// hc_class := class_fish ;
58545: LD_ADDR_OWVAR 28
58549: PUSH
58550: LD_INT 20
58552: ST_TO_ADDR
// hc_gallery :=  ;
58553: LD_ADDR_OWVAR 33
58557: PUSH
58558: LD_STRING 
58560: ST_TO_ADDR
// hc_name :=  ;
58561: LD_ADDR_OWVAR 26
58565: PUSH
58566: LD_STRING 
58568: ST_TO_ADDR
// end ;
58569: LD_VAR 0 1
58573: RET
// export function PrepareBird ( ) ; begin
58574: LD_INT 0
58576: PPUSH
// uc_side := 0 ;
58577: LD_ADDR_OWVAR 20
58581: PUSH
58582: LD_INT 0
58584: ST_TO_ADDR
// uc_nation := 0 ;
58585: LD_ADDR_OWVAR 21
58589: PUSH
58590: LD_INT 0
58592: ST_TO_ADDR
// InitHc ;
58593: CALL_OW 19
// hc_class := class_phororhacos ;
58597: LD_ADDR_OWVAR 28
58601: PUSH
58602: LD_INT 18
58604: ST_TO_ADDR
// hc_gallery :=  ;
58605: LD_ADDR_OWVAR 33
58609: PUSH
58610: LD_STRING 
58612: ST_TO_ADDR
// hc_name :=  ;
58613: LD_ADDR_OWVAR 26
58617: PUSH
58618: LD_STRING 
58620: ST_TO_ADDR
// end ;
58621: LD_VAR 0 1
58625: RET
// export function PrepareHorse ( ) ; begin
58626: LD_INT 0
58628: PPUSH
// uc_side := 0 ;
58629: LD_ADDR_OWVAR 20
58633: PUSH
58634: LD_INT 0
58636: ST_TO_ADDR
// uc_nation := 0 ;
58637: LD_ADDR_OWVAR 21
58641: PUSH
58642: LD_INT 0
58644: ST_TO_ADDR
// InitHc ;
58645: CALL_OW 19
// hc_class := class_horse ;
58649: LD_ADDR_OWVAR 28
58653: PUSH
58654: LD_INT 21
58656: ST_TO_ADDR
// hc_gallery :=  ;
58657: LD_ADDR_OWVAR 33
58661: PUSH
58662: LD_STRING 
58664: ST_TO_ADDR
// hc_name :=  ;
58665: LD_ADDR_OWVAR 26
58669: PUSH
58670: LD_STRING 
58672: ST_TO_ADDR
// end ;
58673: LD_VAR 0 1
58677: RET
// export function PrepareMastodont ( ) ; begin
58678: LD_INT 0
58680: PPUSH
// uc_side := 0 ;
58681: LD_ADDR_OWVAR 20
58685: PUSH
58686: LD_INT 0
58688: ST_TO_ADDR
// uc_nation := 0 ;
58689: LD_ADDR_OWVAR 21
58693: PUSH
58694: LD_INT 0
58696: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58697: LD_ADDR_OWVAR 37
58701: PUSH
58702: LD_INT 31
58704: ST_TO_ADDR
// vc_control := control_rider ;
58705: LD_ADDR_OWVAR 38
58709: PUSH
58710: LD_INT 4
58712: ST_TO_ADDR
// end ;
58713: LD_VAR 0 1
58717: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58718: LD_INT 0
58720: PPUSH
58721: PPUSH
58722: PPUSH
// uc_side = 0 ;
58723: LD_ADDR_OWVAR 20
58727: PUSH
58728: LD_INT 0
58730: ST_TO_ADDR
// uc_nation = 0 ;
58731: LD_ADDR_OWVAR 21
58735: PUSH
58736: LD_INT 0
58738: ST_TO_ADDR
// InitHc_All ( ) ;
58739: CALL_OW 584
// InitVc ;
58743: CALL_OW 20
// if mastodonts then
58747: LD_VAR 0 6
58751: IFFALSE 58818
// for i = 1 to mastodonts do
58753: LD_ADDR_VAR 0 11
58757: PUSH
58758: DOUBLE
58759: LD_INT 1
58761: DEC
58762: ST_TO_ADDR
58763: LD_VAR 0 6
58767: PUSH
58768: FOR_TO
58769: IFFALSE 58816
// begin vc_chassis := 31 ;
58771: LD_ADDR_OWVAR 37
58775: PUSH
58776: LD_INT 31
58778: ST_TO_ADDR
// vc_control := control_rider ;
58779: LD_ADDR_OWVAR 38
58783: PUSH
58784: LD_INT 4
58786: ST_TO_ADDR
// animal := CreateVehicle ;
58787: LD_ADDR_VAR 0 12
58791: PUSH
58792: CALL_OW 45
58796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58797: LD_VAR 0 12
58801: PPUSH
58802: LD_VAR 0 8
58806: PPUSH
58807: LD_INT 0
58809: PPUSH
58810: CALL 60960 0 3
// end ;
58814: GO 58768
58816: POP
58817: POP
// if horses then
58818: LD_VAR 0 5
58822: IFFALSE 58889
// for i = 1 to horses do
58824: LD_ADDR_VAR 0 11
58828: PUSH
58829: DOUBLE
58830: LD_INT 1
58832: DEC
58833: ST_TO_ADDR
58834: LD_VAR 0 5
58838: PUSH
58839: FOR_TO
58840: IFFALSE 58887
// begin hc_class := 21 ;
58842: LD_ADDR_OWVAR 28
58846: PUSH
58847: LD_INT 21
58849: ST_TO_ADDR
// hc_gallery :=  ;
58850: LD_ADDR_OWVAR 33
58854: PUSH
58855: LD_STRING 
58857: ST_TO_ADDR
// animal := CreateHuman ;
58858: LD_ADDR_VAR 0 12
58862: PUSH
58863: CALL_OW 44
58867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58868: LD_VAR 0 12
58872: PPUSH
58873: LD_VAR 0 8
58877: PPUSH
58878: LD_INT 0
58880: PPUSH
58881: CALL 60960 0 3
// end ;
58885: GO 58839
58887: POP
58888: POP
// if birds then
58889: LD_VAR 0 1
58893: IFFALSE 58960
// for i = 1 to birds do
58895: LD_ADDR_VAR 0 11
58899: PUSH
58900: DOUBLE
58901: LD_INT 1
58903: DEC
58904: ST_TO_ADDR
58905: LD_VAR 0 1
58909: PUSH
58910: FOR_TO
58911: IFFALSE 58958
// begin hc_class := 18 ;
58913: LD_ADDR_OWVAR 28
58917: PUSH
58918: LD_INT 18
58920: ST_TO_ADDR
// hc_gallery =  ;
58921: LD_ADDR_OWVAR 33
58925: PUSH
58926: LD_STRING 
58928: ST_TO_ADDR
// animal := CreateHuman ;
58929: LD_ADDR_VAR 0 12
58933: PUSH
58934: CALL_OW 44
58938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58939: LD_VAR 0 12
58943: PPUSH
58944: LD_VAR 0 8
58948: PPUSH
58949: LD_INT 0
58951: PPUSH
58952: CALL 60960 0 3
// end ;
58956: GO 58910
58958: POP
58959: POP
// if tigers then
58960: LD_VAR 0 2
58964: IFFALSE 59048
// for i = 1 to tigers do
58966: LD_ADDR_VAR 0 11
58970: PUSH
58971: DOUBLE
58972: LD_INT 1
58974: DEC
58975: ST_TO_ADDR
58976: LD_VAR 0 2
58980: PUSH
58981: FOR_TO
58982: IFFALSE 59046
// begin hc_class = class_tiger ;
58984: LD_ADDR_OWVAR 28
58988: PUSH
58989: LD_INT 14
58991: ST_TO_ADDR
// hc_gallery =  ;
58992: LD_ADDR_OWVAR 33
58996: PUSH
58997: LD_STRING 
58999: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59000: LD_ADDR_OWVAR 35
59004: PUSH
59005: LD_INT 7
59007: NEG
59008: PPUSH
59009: LD_INT 7
59011: PPUSH
59012: CALL_OW 12
59016: ST_TO_ADDR
// animal := CreateHuman ;
59017: LD_ADDR_VAR 0 12
59021: PUSH
59022: CALL_OW 44
59026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59027: LD_VAR 0 12
59031: PPUSH
59032: LD_VAR 0 8
59036: PPUSH
59037: LD_INT 0
59039: PPUSH
59040: CALL 60960 0 3
// end ;
59044: GO 58981
59046: POP
59047: POP
// if apemans then
59048: LD_VAR 0 3
59052: IFFALSE 59175
// for i = 1 to apemans do
59054: LD_ADDR_VAR 0 11
59058: PUSH
59059: DOUBLE
59060: LD_INT 1
59062: DEC
59063: ST_TO_ADDR
59064: LD_VAR 0 3
59068: PUSH
59069: FOR_TO
59070: IFFALSE 59173
// begin hc_class = class_apeman ;
59072: LD_ADDR_OWVAR 28
59076: PUSH
59077: LD_INT 12
59079: ST_TO_ADDR
// hc_gallery =  ;
59080: LD_ADDR_OWVAR 33
59084: PUSH
59085: LD_STRING 
59087: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59088: LD_ADDR_OWVAR 35
59092: PUSH
59093: LD_INT 2
59095: NEG
59096: PPUSH
59097: LD_INT 2
59099: PPUSH
59100: CALL_OW 12
59104: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59105: LD_ADDR_OWVAR 31
59109: PUSH
59110: LD_INT 1
59112: PPUSH
59113: LD_INT 3
59115: PPUSH
59116: CALL_OW 12
59120: PUSH
59121: LD_INT 1
59123: PPUSH
59124: LD_INT 3
59126: PPUSH
59127: CALL_OW 12
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: ST_TO_ADDR
// animal := CreateHuman ;
59144: LD_ADDR_VAR 0 12
59148: PUSH
59149: CALL_OW 44
59153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59154: LD_VAR 0 12
59158: PPUSH
59159: LD_VAR 0 8
59163: PPUSH
59164: LD_INT 0
59166: PPUSH
59167: CALL 60960 0 3
// end ;
59171: GO 59069
59173: POP
59174: POP
// if enchidnas then
59175: LD_VAR 0 4
59179: IFFALSE 59246
// for i = 1 to enchidnas do
59181: LD_ADDR_VAR 0 11
59185: PUSH
59186: DOUBLE
59187: LD_INT 1
59189: DEC
59190: ST_TO_ADDR
59191: LD_VAR 0 4
59195: PUSH
59196: FOR_TO
59197: IFFALSE 59244
// begin hc_class = 13 ;
59199: LD_ADDR_OWVAR 28
59203: PUSH
59204: LD_INT 13
59206: ST_TO_ADDR
// hc_gallery =  ;
59207: LD_ADDR_OWVAR 33
59211: PUSH
59212: LD_STRING 
59214: ST_TO_ADDR
// animal := CreateHuman ;
59215: LD_ADDR_VAR 0 12
59219: PUSH
59220: CALL_OW 44
59224: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59225: LD_VAR 0 12
59229: PPUSH
59230: LD_VAR 0 8
59234: PPUSH
59235: LD_INT 0
59237: PPUSH
59238: CALL 60960 0 3
// end ;
59242: GO 59196
59244: POP
59245: POP
// if fishes then
59246: LD_VAR 0 7
59250: IFFALSE 59317
// for i = 1 to fishes do
59252: LD_ADDR_VAR 0 11
59256: PUSH
59257: DOUBLE
59258: LD_INT 1
59260: DEC
59261: ST_TO_ADDR
59262: LD_VAR 0 7
59266: PUSH
59267: FOR_TO
59268: IFFALSE 59315
// begin hc_class = 20 ;
59270: LD_ADDR_OWVAR 28
59274: PUSH
59275: LD_INT 20
59277: ST_TO_ADDR
// hc_gallery =  ;
59278: LD_ADDR_OWVAR 33
59282: PUSH
59283: LD_STRING 
59285: ST_TO_ADDR
// animal := CreateHuman ;
59286: LD_ADDR_VAR 0 12
59290: PUSH
59291: CALL_OW 44
59295: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59296: LD_VAR 0 12
59300: PPUSH
59301: LD_VAR 0 9
59305: PPUSH
59306: LD_INT 0
59308: PPUSH
59309: CALL 60960 0 3
// end ;
59313: GO 59267
59315: POP
59316: POP
// end ;
59317: LD_VAR 0 10
59321: RET
// export function WantHeal ( sci , unit ) ; begin
59322: LD_INT 0
59324: PPUSH
// if GetTaskList ( sci ) > 0 then
59325: LD_VAR 0 1
59329: PPUSH
59330: CALL_OW 437
59334: PUSH
59335: LD_INT 0
59337: GREATER
59338: IFFALSE 59410
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59340: LD_VAR 0 1
59344: PPUSH
59345: CALL_OW 437
59349: PUSH
59350: LD_INT 1
59352: ARRAY
59353: PUSH
59354: LD_INT 1
59356: ARRAY
59357: PUSH
59358: LD_STRING l
59360: EQUAL
59361: IFFALSE 59388
59363: PUSH
59364: LD_VAR 0 1
59368: PPUSH
59369: CALL_OW 437
59373: PUSH
59374: LD_INT 1
59376: ARRAY
59377: PUSH
59378: LD_INT 4
59380: ARRAY
59381: PUSH
59382: LD_VAR 0 2
59386: EQUAL
59387: AND
59388: IFFALSE 59400
// result := true else
59390: LD_ADDR_VAR 0 3
59394: PUSH
59395: LD_INT 1
59397: ST_TO_ADDR
59398: GO 59408
// result := false ;
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: LD_INT 0
59407: ST_TO_ADDR
// end else
59408: GO 59418
// result := false ;
59410: LD_ADDR_VAR 0 3
59414: PUSH
59415: LD_INT 0
59417: ST_TO_ADDR
// end ;
59418: LD_VAR 0 3
59422: RET
// export function HealTarget ( sci ) ; begin
59423: LD_INT 0
59425: PPUSH
// if not sci then
59426: LD_VAR 0 1
59430: NOT
59431: IFFALSE 59435
// exit ;
59433: GO 59500
// result := 0 ;
59435: LD_ADDR_VAR 0 2
59439: PUSH
59440: LD_INT 0
59442: ST_TO_ADDR
// if GetTaskList ( sci ) then
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 437
59452: IFFALSE 59500
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59454: LD_VAR 0 1
59458: PPUSH
59459: CALL_OW 437
59463: PUSH
59464: LD_INT 1
59466: ARRAY
59467: PUSH
59468: LD_INT 1
59470: ARRAY
59471: PUSH
59472: LD_STRING l
59474: EQUAL
59475: IFFALSE 59500
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59477: LD_ADDR_VAR 0 2
59481: PUSH
59482: LD_VAR 0 1
59486: PPUSH
59487: CALL_OW 437
59491: PUSH
59492: LD_INT 1
59494: ARRAY
59495: PUSH
59496: LD_INT 4
59498: ARRAY
59499: ST_TO_ADDR
// end ;
59500: LD_VAR 0 2
59504: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59505: LD_INT 0
59507: PPUSH
59508: PPUSH
59509: PPUSH
59510: PPUSH
// if not base_units then
59511: LD_VAR 0 1
59515: NOT
59516: IFFALSE 59520
// exit ;
59518: GO 59607
// result := false ;
59520: LD_ADDR_VAR 0 2
59524: PUSH
59525: LD_INT 0
59527: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59528: LD_ADDR_VAR 0 5
59532: PUSH
59533: LD_VAR 0 1
59537: PPUSH
59538: LD_INT 21
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PPUSH
59548: CALL_OW 72
59552: ST_TO_ADDR
// if not tmp then
59553: LD_VAR 0 5
59557: NOT
59558: IFFALSE 59562
// exit ;
59560: GO 59607
// for i in tmp do
59562: LD_ADDR_VAR 0 3
59566: PUSH
59567: LD_VAR 0 5
59571: PUSH
59572: FOR_IN
59573: IFFALSE 59605
// begin result := EnemyInRange ( i , 22 ) ;
59575: LD_ADDR_VAR 0 2
59579: PUSH
59580: LD_VAR 0 3
59584: PPUSH
59585: LD_INT 22
59587: PPUSH
59588: CALL 57032 0 2
59592: ST_TO_ADDR
// if result then
59593: LD_VAR 0 2
59597: IFFALSE 59603
// exit ;
59599: POP
59600: POP
59601: GO 59607
// end ;
59603: GO 59572
59605: POP
59606: POP
// end ;
59607: LD_VAR 0 2
59611: RET
// export function FilterByTag ( units , tag ) ; begin
59612: LD_INT 0
59614: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59615: LD_ADDR_VAR 0 3
59619: PUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: LD_INT 120
59627: PUSH
59628: LD_VAR 0 2
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PPUSH
59637: CALL_OW 72
59641: ST_TO_ADDR
// end ;
59642: LD_VAR 0 3
59646: RET
// export function IsDriver ( un ) ; begin
59647: LD_INT 0
59649: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59650: LD_ADDR_VAR 0 2
59654: PUSH
59655: LD_VAR 0 1
59659: PUSH
59660: LD_INT 55
59662: PUSH
59663: EMPTY
59664: LIST
59665: PPUSH
59666: CALL_OW 69
59670: IN
59671: ST_TO_ADDR
// end ;
59672: LD_VAR 0 2
59676: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59677: LD_INT 0
59679: PPUSH
59680: PPUSH
// list := [ ] ;
59681: LD_ADDR_VAR 0 5
59685: PUSH
59686: EMPTY
59687: ST_TO_ADDR
// case d of 0 :
59688: LD_VAR 0 3
59692: PUSH
59693: LD_INT 0
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59701
59699: GO 59834
59701: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59702: LD_ADDR_VAR 0 5
59706: PUSH
59707: LD_VAR 0 1
59711: PUSH
59712: LD_INT 4
59714: MINUS
59715: PUSH
59716: LD_VAR 0 2
59720: PUSH
59721: LD_INT 4
59723: MINUS
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: PUSH
59733: LD_VAR 0 1
59737: PUSH
59738: LD_INT 3
59740: MINUS
59741: PUSH
59742: LD_VAR 0 2
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: LD_VAR 0 1
59759: PUSH
59760: LD_INT 4
59762: PLUS
59763: PUSH
59764: LD_VAR 0 2
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: PUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_INT 3
59784: PLUS
59785: PUSH
59786: LD_VAR 0 2
59790: PUSH
59791: LD_INT 3
59793: PLUS
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: PUSH
59803: LD_VAR 0 1
59807: PUSH
59808: LD_VAR 0 2
59812: PUSH
59813: LD_INT 4
59815: PLUS
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: LIST
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// end ; 1 :
59832: GO 60532
59834: LD_INT 1
59836: DOUBLE
59837: EQUAL
59838: IFTRUE 59842
59840: GO 59975
59842: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59843: LD_ADDR_VAR 0 5
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_VAR 0 2
59857: PUSH
59858: LD_INT 4
59860: MINUS
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 1
59874: PUSH
59875: LD_INT 3
59877: MINUS
59878: PUSH
59879: LD_VAR 0 2
59883: PUSH
59884: LD_INT 3
59886: MINUS
59887: PUSH
59888: LD_INT 2
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: PUSH
59896: LD_VAR 0 1
59900: PUSH
59901: LD_INT 4
59903: MINUS
59904: PUSH
59905: LD_VAR 0 2
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: LD_VAR 0 1
59922: PUSH
59923: LD_VAR 0 2
59927: PUSH
59928: LD_INT 3
59930: PLUS
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: LD_VAR 0 1
59944: PUSH
59945: LD_INT 4
59947: PLUS
59948: PUSH
59949: LD_VAR 0 2
59953: PUSH
59954: LD_INT 4
59956: PLUS
59957: PUSH
59958: LD_INT 5
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: ST_TO_ADDR
// end ; 2 :
59973: GO 60532
59975: LD_INT 2
59977: DOUBLE
59978: EQUAL
59979: IFTRUE 59983
59981: GO 60112
59983: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59984: LD_ADDR_VAR 0 5
59988: PUSH
59989: LD_VAR 0 1
59993: PUSH
59994: LD_VAR 0 2
59998: PUSH
59999: LD_INT 3
60001: MINUS
60002: PUSH
60003: LD_INT 3
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: LIST
60010: PUSH
60011: LD_VAR 0 1
60015: PUSH
60016: LD_INT 4
60018: PLUS
60019: PUSH
60020: LD_VAR 0 2
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: LD_VAR 0 1
60037: PUSH
60038: LD_VAR 0 2
60042: PUSH
60043: LD_INT 4
60045: PLUS
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: PUSH
60055: LD_VAR 0 1
60059: PUSH
60060: LD_INT 3
60062: MINUS
60063: PUSH
60064: LD_VAR 0 2
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 1
60081: PUSH
60082: LD_INT 4
60084: MINUS
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_INT 4
60093: MINUS
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: ST_TO_ADDR
// end ; 3 :
60110: GO 60532
60112: LD_INT 3
60114: DOUBLE
60115: EQUAL
60116: IFTRUE 60120
60118: GO 60253
60120: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60121: LD_ADDR_VAR 0 5
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_INT 3
60133: PLUS
60134: PUSH
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 4
60155: PLUS
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_INT 4
60164: PLUS
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: PUSH
60174: LD_VAR 0 1
60178: PUSH
60179: LD_INT 4
60181: MINUS
60182: PUSH
60183: LD_VAR 0 2
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: PUSH
60196: LD_VAR 0 1
60200: PUSH
60201: LD_VAR 0 2
60205: PUSH
60206: LD_INT 4
60208: MINUS
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: PUSH
60218: LD_VAR 0 1
60222: PUSH
60223: LD_INT 3
60225: MINUS
60226: PUSH
60227: LD_VAR 0 2
60231: PUSH
60232: LD_INT 3
60234: MINUS
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: LIST
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: ST_TO_ADDR
// end ; 4 :
60251: GO 60532
60253: LD_INT 4
60255: DOUBLE
60256: EQUAL
60257: IFTRUE 60261
60259: GO 60394
60261: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60262: LD_ADDR_VAR 0 5
60266: PUSH
60267: LD_VAR 0 1
60271: PUSH
60272: LD_VAR 0 2
60276: PUSH
60277: LD_INT 4
60279: PLUS
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_INT 3
60296: PLUS
60297: PUSH
60298: LD_VAR 0 2
60302: PUSH
60303: LD_INT 3
60305: PLUS
60306: PUSH
60307: LD_INT 5
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: PUSH
60315: LD_VAR 0 1
60319: PUSH
60320: LD_INT 4
60322: PLUS
60323: PUSH
60324: LD_VAR 0 2
60328: PUSH
60329: LD_INT 4
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: PUSH
60337: LD_VAR 0 1
60341: PUSH
60342: LD_VAR 0 2
60346: PUSH
60347: LD_INT 3
60349: MINUS
60350: PUSH
60351: LD_INT 3
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: PUSH
60359: LD_VAR 0 1
60363: PUSH
60364: LD_INT 4
60366: MINUS
60367: PUSH
60368: LD_VAR 0 2
60372: PUSH
60373: LD_INT 4
60375: MINUS
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: ST_TO_ADDR
// end ; 5 :
60392: GO 60532
60394: LD_INT 5
60396: DOUBLE
60397: EQUAL
60398: IFTRUE 60402
60400: GO 60531
60402: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60403: LD_ADDR_VAR 0 5
60407: PUSH
60408: LD_VAR 0 1
60412: PUSH
60413: LD_INT 4
60415: MINUS
60416: PUSH
60417: LD_VAR 0 2
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_VAR 0 1
60434: PUSH
60435: LD_VAR 0 2
60439: PUSH
60440: LD_INT 4
60442: MINUS
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: PUSH
60452: LD_VAR 0 1
60456: PUSH
60457: LD_INT 4
60459: PLUS
60460: PUSH
60461: LD_VAR 0 2
60465: PUSH
60466: LD_INT 4
60468: PLUS
60469: PUSH
60470: LD_INT 5
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_INT 3
60485: PLUS
60486: PUSH
60487: LD_VAR 0 2
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: PUSH
60500: LD_VAR 0 1
60504: PUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_INT 3
60512: PLUS
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: ST_TO_ADDR
// end ; end ;
60529: GO 60532
60531: POP
// result := list ;
60532: LD_ADDR_VAR 0 4
60536: PUSH
60537: LD_VAR 0 5
60541: ST_TO_ADDR
// end ;
60542: LD_VAR 0 4
60546: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60547: LD_INT 0
60549: PPUSH
60550: PPUSH
60551: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60552: LD_VAR 0 1
60556: NOT
60557: IFTRUE 60585
60559: PUSH
60560: LD_VAR 0 2
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: IN
60583: NOT
60584: OR
60585: IFFALSE 60589
// exit ;
60587: GO 60672
// tmp := [ ] ;
60589: LD_ADDR_VAR 0 5
60593: PUSH
60594: EMPTY
60595: ST_TO_ADDR
// for i in units do
60596: LD_ADDR_VAR 0 4
60600: PUSH
60601: LD_VAR 0 1
60605: PUSH
60606: FOR_IN
60607: IFFALSE 60641
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60609: LD_ADDR_VAR 0 5
60613: PUSH
60614: LD_VAR 0 5
60618: PPUSH
60619: LD_VAR 0 4
60623: PPUSH
60624: LD_VAR 0 2
60628: PPUSH
60629: CALL_OW 259
60633: PPUSH
60634: CALL 62067 0 2
60638: ST_TO_ADDR
60639: GO 60606
60641: POP
60642: POP
// if not tmp then
60643: LD_VAR 0 5
60647: NOT
60648: IFFALSE 60652
// exit ;
60650: GO 60672
// result := SortListByListDesc ( units , tmp ) ;
60652: LD_ADDR_VAR 0 3
60656: PUSH
60657: LD_VAR 0 1
60661: PPUSH
60662: LD_VAR 0 5
60666: PPUSH
60667: CALL_OW 77
60671: ST_TO_ADDR
// end ;
60672: LD_VAR 0 3
60676: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60677: LD_INT 0
60679: PPUSH
60680: PPUSH
60681: PPUSH
// result := false ;
60682: LD_ADDR_VAR 0 3
60686: PUSH
60687: LD_INT 0
60689: ST_TO_ADDR
// if not building then
60690: LD_VAR 0 2
60694: NOT
60695: IFFALSE 60699
// exit ;
60697: GO 60843
// x := GetX ( building ) ;
60699: LD_ADDR_VAR 0 4
60703: PUSH
60704: LD_VAR 0 2
60708: PPUSH
60709: CALL_OW 250
60713: ST_TO_ADDR
// y := GetY ( building ) ;
60714: LD_ADDR_VAR 0 5
60718: PUSH
60719: LD_VAR 0 2
60723: PPUSH
60724: CALL_OW 251
60728: ST_TO_ADDR
// if not x or not y then
60729: LD_VAR 0 4
60733: NOT
60734: IFTRUE 60743
60736: PUSH
60737: LD_VAR 0 5
60741: NOT
60742: OR
60743: IFFALSE 60747
// exit ;
60745: GO 60843
// if GetTaskList ( unit ) then
60747: LD_VAR 0 1
60751: PPUSH
60752: CALL_OW 437
60756: IFFALSE 60843
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60758: LD_STRING e
60760: PUSH
60761: LD_VAR 0 1
60765: PPUSH
60766: CALL_OW 437
60770: PUSH
60771: LD_INT 1
60773: ARRAY
60774: PUSH
60775: LD_INT 1
60777: ARRAY
60778: EQUAL
60779: IFFALSE 60806
60781: PUSH
60782: LD_VAR 0 4
60786: PUSH
60787: LD_VAR 0 1
60791: PPUSH
60792: CALL_OW 437
60796: PUSH
60797: LD_INT 1
60799: ARRAY
60800: PUSH
60801: LD_INT 2
60803: ARRAY
60804: EQUAL
60805: AND
60806: IFFALSE 60833
60808: PUSH
60809: LD_VAR 0 5
60813: PUSH
60814: LD_VAR 0 1
60818: PPUSH
60819: CALL_OW 437
60823: PUSH
60824: LD_INT 1
60826: ARRAY
60827: PUSH
60828: LD_INT 3
60830: ARRAY
60831: EQUAL
60832: AND
60833: IFFALSE 60843
// result := true end ;
60835: LD_ADDR_VAR 0 3
60839: PUSH
60840: LD_INT 1
60842: ST_TO_ADDR
// end ;
60843: LD_VAR 0 3
60847: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60848: LD_INT 0
60850: PPUSH
// result := false ;
60851: LD_ADDR_VAR 0 4
60855: PUSH
60856: LD_INT 0
60858: ST_TO_ADDR
// if GetTaskList ( unit ) then
60859: LD_VAR 0 1
60863: PPUSH
60864: CALL_OW 437
60868: IFFALSE 60955
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60870: LD_STRING M
60872: PUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL_OW 437
60882: PUSH
60883: LD_INT 1
60885: ARRAY
60886: PUSH
60887: LD_INT 1
60889: ARRAY
60890: EQUAL
60891: IFFALSE 60918
60893: PUSH
60894: LD_VAR 0 2
60898: PUSH
60899: LD_VAR 0 1
60903: PPUSH
60904: CALL_OW 437
60908: PUSH
60909: LD_INT 1
60911: ARRAY
60912: PUSH
60913: LD_INT 2
60915: ARRAY
60916: EQUAL
60917: AND
60918: IFFALSE 60945
60920: PUSH
60921: LD_VAR 0 3
60925: PUSH
60926: LD_VAR 0 1
60930: PPUSH
60931: CALL_OW 437
60935: PUSH
60936: LD_INT 1
60938: ARRAY
60939: PUSH
60940: LD_INT 3
60942: ARRAY
60943: EQUAL
60944: AND
60945: IFFALSE 60955
// result := true ;
60947: LD_ADDR_VAR 0 4
60951: PUSH
60952: LD_INT 1
60954: ST_TO_ADDR
// end ; end ;
60955: LD_VAR 0 4
60959: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
60964: PPUSH
60965: PPUSH
// if not unit or not area then
60966: LD_VAR 0 1
60970: NOT
60971: IFTRUE 60980
60973: PUSH
60974: LD_VAR 0 2
60978: NOT
60979: OR
60980: IFFALSE 60984
// exit ;
60982: GO 61160
// tmp := AreaToList ( area , i ) ;
60984: LD_ADDR_VAR 0 6
60988: PUSH
60989: LD_VAR 0 2
60993: PPUSH
60994: LD_VAR 0 5
60998: PPUSH
60999: CALL_OW 517
61003: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61004: LD_ADDR_VAR 0 5
61008: PUSH
61009: DOUBLE
61010: LD_INT 1
61012: DEC
61013: ST_TO_ADDR
61014: LD_VAR 0 6
61018: PUSH
61019: LD_INT 1
61021: ARRAY
61022: PUSH
61023: FOR_TO
61024: IFFALSE 61158
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61026: LD_ADDR_VAR 0 7
61030: PUSH
61031: LD_VAR 0 6
61035: PUSH
61036: LD_INT 1
61038: ARRAY
61039: PUSH
61040: LD_VAR 0 5
61044: ARRAY
61045: PUSH
61046: LD_VAR 0 6
61050: PUSH
61051: LD_INT 2
61053: ARRAY
61054: PUSH
61055: LD_VAR 0 5
61059: ARRAY
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61065: LD_INT 92
61067: PUSH
61068: LD_VAR 0 7
61072: PUSH
61073: LD_INT 1
61075: ARRAY
61076: PUSH
61077: LD_VAR 0 7
61081: PUSH
61082: LD_INT 2
61084: ARRAY
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: PPUSH
61095: CALL_OW 69
61099: PUSH
61100: LD_INT 0
61102: EQUAL
61103: IFFALSE 61156
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61105: LD_VAR 0 1
61109: PPUSH
61110: LD_VAR 0 7
61114: PUSH
61115: LD_INT 1
61117: ARRAY
61118: PPUSH
61119: LD_VAR 0 7
61123: PUSH
61124: LD_INT 2
61126: ARRAY
61127: PPUSH
61128: LD_VAR 0 3
61132: PPUSH
61133: CALL_OW 48
// result := IsPlaced ( unit ) ;
61137: LD_ADDR_VAR 0 4
61141: PUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 305
61151: ST_TO_ADDR
// exit ;
61152: POP
61153: POP
61154: GO 61160
// end ; end ;
61156: GO 61023
61158: POP
61159: POP
// end ;
61160: LD_VAR 0 4
61164: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61165: LD_INT 0
61167: PPUSH
61168: PPUSH
61169: PPUSH
// if not side or side > 8 then
61170: LD_VAR 0 1
61174: NOT
61175: IFTRUE 61187
61177: PUSH
61178: LD_VAR 0 1
61182: PUSH
61183: LD_INT 8
61185: GREATER
61186: OR
61187: IFFALSE 61191
// exit ;
61189: GO 61378
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61191: LD_ADDR_VAR 0 4
61195: PUSH
61196: LD_INT 22
61198: PUSH
61199: LD_VAR 0 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 21
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PPUSH
61222: CALL_OW 69
61226: ST_TO_ADDR
// if not tmp then
61227: LD_VAR 0 4
61231: NOT
61232: IFFALSE 61236
// exit ;
61234: GO 61378
// enable_addtolog := true ;
61236: LD_ADDR_OWVAR 81
61240: PUSH
61241: LD_INT 1
61243: ST_TO_ADDR
// AddToLog ( [ ) ;
61244: LD_STRING [
61246: PPUSH
61247: CALL_OW 561
// for i in tmp do
61251: LD_ADDR_VAR 0 3
61255: PUSH
61256: LD_VAR 0 4
61260: PUSH
61261: FOR_IN
61262: IFFALSE 61369
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61264: LD_STRING [
61266: PUSH
61267: LD_VAR 0 3
61271: PPUSH
61272: CALL_OW 266
61276: STR
61277: PUSH
61278: LD_STRING , 
61280: STR
61281: PUSH
61282: LD_VAR 0 3
61286: PPUSH
61287: CALL_OW 250
61291: STR
61292: PUSH
61293: LD_STRING , 
61295: STR
61296: PUSH
61297: LD_VAR 0 3
61301: PPUSH
61302: CALL_OW 251
61306: STR
61307: PUSH
61308: LD_STRING , 
61310: STR
61311: PUSH
61312: LD_VAR 0 3
61316: PPUSH
61317: CALL_OW 254
61321: STR
61322: PUSH
61323: LD_STRING , 
61325: STR
61326: PUSH
61327: LD_VAR 0 3
61331: PPUSH
61332: LD_INT 1
61334: PPUSH
61335: CALL_OW 268
61339: STR
61340: PUSH
61341: LD_STRING , 
61343: STR
61344: PUSH
61345: LD_VAR 0 3
61349: PPUSH
61350: LD_INT 2
61352: PPUSH
61353: CALL_OW 268
61357: STR
61358: PUSH
61359: LD_STRING ],
61361: STR
61362: PPUSH
61363: CALL_OW 561
// end ;
61367: GO 61261
61369: POP
61370: POP
// AddToLog ( ]; ) ;
61371: LD_STRING ];
61373: PPUSH
61374: CALL_OW 561
// end ;
61378: LD_VAR 0 2
61382: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61383: LD_INT 0
61385: PPUSH
61386: PPUSH
61387: PPUSH
61388: PPUSH
61389: PPUSH
// if not area or not rate or not max then
61390: LD_VAR 0 1
61394: NOT
61395: IFTRUE 61404
61397: PUSH
61398: LD_VAR 0 2
61402: NOT
61403: OR
61404: IFTRUE 61413
61406: PUSH
61407: LD_VAR 0 4
61411: NOT
61412: OR
61413: IFFALSE 61417
// exit ;
61415: GO 61606
// while 1 do
61417: LD_INT 1
61419: IFFALSE 61606
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61421: LD_ADDR_VAR 0 9
61425: PUSH
61426: LD_VAR 0 1
61430: PPUSH
61431: LD_INT 1
61433: PPUSH
61434: CALL_OW 287
61438: PUSH
61439: LD_INT 10
61441: MUL
61442: ST_TO_ADDR
// r := rate / 10 ;
61443: LD_ADDR_VAR 0 7
61447: PUSH
61448: LD_VAR 0 2
61452: PUSH
61453: LD_INT 10
61455: DIVREAL
61456: ST_TO_ADDR
// time := 1 1$00 ;
61457: LD_ADDR_VAR 0 8
61461: PUSH
61462: LD_INT 2100
61464: ST_TO_ADDR
// if amount < min then
61465: LD_VAR 0 9
61469: PUSH
61470: LD_VAR 0 3
61474: LESS
61475: IFFALSE 61493
// r := r * 2 else
61477: LD_ADDR_VAR 0 7
61481: PUSH
61482: LD_VAR 0 7
61486: PUSH
61487: LD_INT 2
61489: MUL
61490: ST_TO_ADDR
61491: GO 61519
// if amount > max then
61493: LD_VAR 0 9
61497: PUSH
61498: LD_VAR 0 4
61502: GREATER
61503: IFFALSE 61519
// r := r / 2 ;
61505: LD_ADDR_VAR 0 7
61509: PUSH
61510: LD_VAR 0 7
61514: PUSH
61515: LD_INT 2
61517: DIVREAL
61518: ST_TO_ADDR
// time := time / r ;
61519: LD_ADDR_VAR 0 8
61523: PUSH
61524: LD_VAR 0 8
61528: PUSH
61529: LD_VAR 0 7
61533: DIVREAL
61534: ST_TO_ADDR
// if time < 0 then
61535: LD_VAR 0 8
61539: PUSH
61540: LD_INT 0
61542: LESS
61543: IFFALSE 61560
// time := time * - 1 ;
61545: LD_ADDR_VAR 0 8
61549: PUSH
61550: LD_VAR 0 8
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: MUL
61559: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61560: LD_VAR 0 8
61564: PUSH
61565: LD_INT 35
61567: PPUSH
61568: LD_INT 875
61570: PPUSH
61571: CALL_OW 12
61575: PLUS
61576: PPUSH
61577: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61581: LD_INT 1
61583: PPUSH
61584: LD_INT 5
61586: PPUSH
61587: CALL_OW 12
61591: PPUSH
61592: LD_VAR 0 1
61596: PPUSH
61597: LD_INT 1
61599: PPUSH
61600: CALL_OW 55
// end ;
61604: GO 61417
// end ;
61606: LD_VAR 0 5
61610: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61611: LD_INT 0
61613: PPUSH
61614: PPUSH
61615: PPUSH
61616: PPUSH
61617: PPUSH
61618: PPUSH
61619: PPUSH
61620: PPUSH
// if not turrets or not factories then
61621: LD_VAR 0 1
61625: NOT
61626: IFTRUE 61635
61628: PUSH
61629: LD_VAR 0 2
61633: NOT
61634: OR
61635: IFFALSE 61639
// exit ;
61637: GO 61946
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61639: LD_ADDR_VAR 0 10
61643: PUSH
61644: LD_INT 5
61646: PUSH
61647: LD_INT 6
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 2
61656: PUSH
61657: LD_INT 4
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 3
61666: PUSH
61667: LD_INT 5
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 24
61681: PUSH
61682: LD_INT 25
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 23
61691: PUSH
61692: LD_INT 27
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 42
61705: PUSH
61706: LD_INT 43
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 44
61715: PUSH
61716: LD_INT 46
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 45
61725: PUSH
61726: LD_INT 47
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: LIST
61742: ST_TO_ADDR
// result := [ ] ;
61743: LD_ADDR_VAR 0 3
61747: PUSH
61748: EMPTY
61749: ST_TO_ADDR
// for i in turrets do
61750: LD_ADDR_VAR 0 4
61754: PUSH
61755: LD_VAR 0 1
61759: PUSH
61760: FOR_IN
61761: IFFALSE 61944
// begin nat := GetNation ( i ) ;
61763: LD_ADDR_VAR 0 7
61767: PUSH
61768: LD_VAR 0 4
61772: PPUSH
61773: CALL_OW 248
61777: ST_TO_ADDR
// weapon := 0 ;
61778: LD_ADDR_VAR 0 8
61782: PUSH
61783: LD_INT 0
61785: ST_TO_ADDR
// if not nat then
61786: LD_VAR 0 7
61790: NOT
61791: IFFALSE 61795
// continue ;
61793: GO 61760
// for j in list [ nat ] do
61795: LD_ADDR_VAR 0 5
61799: PUSH
61800: LD_VAR 0 10
61804: PUSH
61805: LD_VAR 0 7
61809: ARRAY
61810: PUSH
61811: FOR_IN
61812: IFFALSE 61853
// if GetBWeapon ( i ) = j [ 1 ] then
61814: LD_VAR 0 4
61818: PPUSH
61819: CALL_OW 269
61823: PUSH
61824: LD_VAR 0 5
61828: PUSH
61829: LD_INT 1
61831: ARRAY
61832: EQUAL
61833: IFFALSE 61851
// begin weapon := j [ 2 ] ;
61835: LD_ADDR_VAR 0 8
61839: PUSH
61840: LD_VAR 0 5
61844: PUSH
61845: LD_INT 2
61847: ARRAY
61848: ST_TO_ADDR
// break ;
61849: GO 61853
// end ;
61851: GO 61811
61853: POP
61854: POP
// if not weapon then
61855: LD_VAR 0 8
61859: NOT
61860: IFFALSE 61864
// continue ;
61862: GO 61760
// for k in factories do
61864: LD_ADDR_VAR 0 6
61868: PUSH
61869: LD_VAR 0 2
61873: PUSH
61874: FOR_IN
61875: IFFALSE 61940
// begin weapons := AvailableWeaponList ( k ) ;
61877: LD_ADDR_VAR 0 9
61881: PUSH
61882: LD_VAR 0 6
61886: PPUSH
61887: CALL_OW 478
61891: ST_TO_ADDR
// if not weapons then
61892: LD_VAR 0 9
61896: NOT
61897: IFFALSE 61901
// continue ;
61899: GO 61874
// if weapon in weapons then
61901: LD_VAR 0 8
61905: PUSH
61906: LD_VAR 0 9
61910: IN
61911: IFFALSE 61938
// begin result := [ i , weapon ] ;
61913: LD_ADDR_VAR 0 3
61917: PUSH
61918: LD_VAR 0 4
61922: PUSH
61923: LD_VAR 0 8
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: ST_TO_ADDR
// exit ;
61932: POP
61933: POP
61934: POP
61935: POP
61936: GO 61946
// end ; end ;
61938: GO 61874
61940: POP
61941: POP
// end ;
61942: GO 61760
61944: POP
61945: POP
// end ;
61946: LD_VAR 0 3
61950: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61951: LD_INT 0
61953: PPUSH
// if not side or side > 8 then
61954: LD_VAR 0 3
61958: NOT
61959: IFTRUE 61971
61961: PUSH
61962: LD_VAR 0 3
61966: PUSH
61967: LD_INT 8
61969: GREATER
61970: OR
61971: IFFALSE 61975
// exit ;
61973: GO 62034
// if not range then
61975: LD_VAR 0 4
61979: NOT
61980: IFFALSE 61991
// range := - 12 ;
61982: LD_ADDR_VAR 0 4
61986: PUSH
61987: LD_INT 12
61989: NEG
61990: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61991: LD_VAR 0 1
61995: PPUSH
61996: LD_VAR 0 2
62000: PPUSH
62001: LD_VAR 0 3
62005: PPUSH
62006: LD_VAR 0 4
62010: PPUSH
62011: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62015: LD_VAR 0 1
62019: PPUSH
62020: LD_VAR 0 2
62024: PPUSH
62025: LD_VAR 0 3
62029: PPUSH
62030: CALL_OW 331
// end ;
62034: LD_VAR 0 5
62038: RET
// export function Video ( mode ) ; begin
62039: LD_INT 0
62041: PPUSH
// ingame_video = mode ;
62042: LD_ADDR_OWVAR 52
62046: PUSH
62047: LD_VAR 0 1
62051: ST_TO_ADDR
// interface_hidden = mode ;
62052: LD_ADDR_OWVAR 54
62056: PUSH
62057: LD_VAR 0 1
62061: ST_TO_ADDR
// end ;
62062: LD_VAR 0 2
62066: RET
// export function Join ( array , element ) ; begin
62067: LD_INT 0
62069: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62070: LD_ADDR_VAR 0 3
62074: PUSH
62075: LD_VAR 0 1
62079: PPUSH
62080: LD_VAR 0 1
62084: PUSH
62085: LD_INT 1
62087: PLUS
62088: PPUSH
62089: LD_VAR 0 2
62093: PPUSH
62094: CALL_OW 1
62098: ST_TO_ADDR
// end ;
62099: LD_VAR 0 3
62103: RET
// export function JoinUnion ( array , element ) ; begin
62104: LD_INT 0
62106: PPUSH
// result := array union element ;
62107: LD_ADDR_VAR 0 3
62111: PUSH
62112: LD_VAR 0 1
62116: PUSH
62117: LD_VAR 0 2
62121: UNION
62122: ST_TO_ADDR
// end ;
62123: LD_VAR 0 3
62127: RET
// export function GetBehemoths ( side ) ; begin
62128: LD_INT 0
62130: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: LD_INT 22
62138: PUSH
62139: LD_VAR 0 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 31
62150: PUSH
62151: LD_INT 25
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PPUSH
62162: CALL_OW 69
62166: ST_TO_ADDR
// end ;
62167: LD_VAR 0 2
62171: RET
// export function Shuffle ( array ) ; var i , index ; begin
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
62176: PPUSH
// result := [ ] ;
62177: LD_ADDR_VAR 0 2
62181: PUSH
62182: EMPTY
62183: ST_TO_ADDR
// if not array then
62184: LD_VAR 0 1
62188: NOT
62189: IFFALSE 62193
// exit ;
62191: GO 62292
// Randomize ;
62193: CALL_OW 10
// for i = array downto 1 do
62197: LD_ADDR_VAR 0 3
62201: PUSH
62202: DOUBLE
62203: LD_VAR 0 1
62207: INC
62208: ST_TO_ADDR
62209: LD_INT 1
62211: PUSH
62212: FOR_DOWNTO
62213: IFFALSE 62290
// begin index := rand ( 1 , array ) ;
62215: LD_ADDR_VAR 0 4
62219: PUSH
62220: LD_INT 1
62222: PPUSH
62223: LD_VAR 0 1
62227: PPUSH
62228: CALL_OW 12
62232: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62233: LD_ADDR_VAR 0 2
62237: PUSH
62238: LD_VAR 0 2
62242: PPUSH
62243: LD_VAR 0 2
62247: PUSH
62248: LD_INT 1
62250: PLUS
62251: PPUSH
62252: LD_VAR 0 1
62256: PUSH
62257: LD_VAR 0 4
62261: ARRAY
62262: PPUSH
62263: CALL_OW 2
62267: ST_TO_ADDR
// array := Delete ( array , index ) ;
62268: LD_ADDR_VAR 0 1
62272: PUSH
62273: LD_VAR 0 1
62277: PPUSH
62278: LD_VAR 0 4
62282: PPUSH
62283: CALL_OW 3
62287: ST_TO_ADDR
// end ;
62288: GO 62212
62290: POP
62291: POP
// end ;
62292: LD_VAR 0 2
62296: RET
// export function GetBaseMaterials ( base ) ; begin
62297: LD_INT 0
62299: PPUSH
// result := [ 0 , 0 , 0 ] ;
62300: LD_ADDR_VAR 0 2
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: ST_TO_ADDR
// if not base then
62319: LD_VAR 0 1
62323: NOT
62324: IFFALSE 62328
// exit ;
62326: GO 62377
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62328: LD_ADDR_VAR 0 2
62332: PUSH
62333: LD_VAR 0 1
62337: PPUSH
62338: LD_INT 1
62340: PPUSH
62341: CALL_OW 275
62345: PUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: LD_INT 2
62353: PPUSH
62354: CALL_OW 275
62358: PUSH
62359: LD_VAR 0 1
62363: PPUSH
62364: LD_INT 3
62366: PPUSH
62367: CALL_OW 275
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: LIST
62376: ST_TO_ADDR
// end ;
62377: LD_VAR 0 2
62381: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62382: LD_INT 0
62384: PPUSH
62385: PPUSH
// result := array ;
62386: LD_ADDR_VAR 0 3
62390: PUSH
62391: LD_VAR 0 1
62395: ST_TO_ADDR
// if size >= result then
62396: LD_VAR 0 2
62400: PUSH
62401: LD_VAR 0 3
62405: GREATEREQUAL
62406: IFFALSE 62410
// exit ;
62408: GO 62460
// if size then
62410: LD_VAR 0 2
62414: IFFALSE 62460
// for i := array downto size do
62416: LD_ADDR_VAR 0 4
62420: PUSH
62421: DOUBLE
62422: LD_VAR 0 1
62426: INC
62427: ST_TO_ADDR
62428: LD_VAR 0 2
62432: PUSH
62433: FOR_DOWNTO
62434: IFFALSE 62458
// result := Delete ( result , result ) ;
62436: LD_ADDR_VAR 0 3
62440: PUSH
62441: LD_VAR 0 3
62445: PPUSH
62446: LD_VAR 0 3
62450: PPUSH
62451: CALL_OW 3
62455: ST_TO_ADDR
62456: GO 62433
62458: POP
62459: POP
// end ;
62460: LD_VAR 0 3
62464: RET
// export function ComExit ( unit ) ; var tmp ; begin
62465: LD_INT 0
62467: PPUSH
62468: PPUSH
// if not IsInUnit ( unit ) then
62469: LD_VAR 0 1
62473: PPUSH
62474: CALL_OW 310
62478: NOT
62479: IFFALSE 62483
// exit ;
62481: GO 62543
// tmp := IsInUnit ( unit ) ;
62483: LD_ADDR_VAR 0 3
62487: PUSH
62488: LD_VAR 0 1
62492: PPUSH
62493: CALL_OW 310
62497: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62498: LD_VAR 0 3
62502: PPUSH
62503: CALL_OW 247
62507: PUSH
62508: LD_INT 2
62510: EQUAL
62511: IFFALSE 62524
// ComExitVehicle ( unit ) else
62513: LD_VAR 0 1
62517: PPUSH
62518: CALL_OW 121
62522: GO 62533
// ComExitBuilding ( unit ) ;
62524: LD_VAR 0 1
62528: PPUSH
62529: CALL_OW 122
// result := tmp ;
62533: LD_ADDR_VAR 0 2
62537: PUSH
62538: LD_VAR 0 3
62542: ST_TO_ADDR
// end ;
62543: LD_VAR 0 2
62547: RET
// export function ComExitAll ( units ) ; var i ; begin
62548: LD_INT 0
62550: PPUSH
62551: PPUSH
// if not units then
62552: LD_VAR 0 1
62556: NOT
62557: IFFALSE 62561
// exit ;
62559: GO 62587
// for i in units do
62561: LD_ADDR_VAR 0 3
62565: PUSH
62566: LD_VAR 0 1
62570: PUSH
62571: FOR_IN
62572: IFFALSE 62585
// ComExit ( i ) ;
62574: LD_VAR 0 3
62578: PPUSH
62579: CALL 62465 0 1
62583: GO 62571
62585: POP
62586: POP
// end ;
62587: LD_VAR 0 2
62591: RET
// export function ResetHc ; begin
62592: LD_INT 0
62594: PPUSH
// InitHc ;
62595: CALL_OW 19
// hc_importance := 0 ;
62599: LD_ADDR_OWVAR 32
62603: PUSH
62604: LD_INT 0
62606: ST_TO_ADDR
// end ;
62607: LD_VAR 0 1
62611: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62612: LD_INT 0
62614: PPUSH
62615: PPUSH
62616: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62617: LD_ADDR_VAR 0 6
62621: PUSH
62622: LD_VAR 0 1
62626: PUSH
62627: LD_VAR 0 3
62631: PLUS
62632: PUSH
62633: LD_INT 2
62635: DIV
62636: ST_TO_ADDR
// if _x < 0 then
62637: LD_VAR 0 6
62641: PUSH
62642: LD_INT 0
62644: LESS
62645: IFFALSE 62662
// _x := _x * - 1 ;
62647: LD_ADDR_VAR 0 6
62651: PUSH
62652: LD_VAR 0 6
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: MUL
62661: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62662: LD_ADDR_VAR 0 7
62666: PUSH
62667: LD_VAR 0 2
62671: PUSH
62672: LD_VAR 0 4
62676: PLUS
62677: PUSH
62678: LD_INT 2
62680: DIV
62681: ST_TO_ADDR
// if _y < 0 then
62682: LD_VAR 0 7
62686: PUSH
62687: LD_INT 0
62689: LESS
62690: IFFALSE 62707
// _y := _y * - 1 ;
62692: LD_ADDR_VAR 0 7
62696: PUSH
62697: LD_VAR 0 7
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: MUL
62706: ST_TO_ADDR
// result := [ _x , _y ] ;
62707: LD_ADDR_VAR 0 5
62711: PUSH
62712: LD_VAR 0 6
62716: PUSH
62717: LD_VAR 0 7
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: ST_TO_ADDR
// end ;
62726: LD_VAR 0 5
62730: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62731: LD_INT 0
62733: PPUSH
62734: PPUSH
62735: PPUSH
62736: PPUSH
// task := GetTaskList ( unit ) ;
62737: LD_ADDR_VAR 0 7
62741: PUSH
62742: LD_VAR 0 1
62746: PPUSH
62747: CALL_OW 437
62751: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62752: LD_VAR 0 7
62756: NOT
62757: IFFALSE 62776
62759: PUSH
62760: LD_VAR 0 1
62764: PPUSH
62765: LD_VAR 0 2
62769: PPUSH
62770: CALL_OW 308
62774: NOT
62775: AND
62776: IFFALSE 62780
// exit ;
62778: GO 62898
// if IsInArea ( unit , area ) then
62780: LD_VAR 0 1
62784: PPUSH
62785: LD_VAR 0 2
62789: PPUSH
62790: CALL_OW 308
62794: IFFALSE 62812
// begin ComMoveToArea ( unit , goAway ) ;
62796: LD_VAR 0 1
62800: PPUSH
62801: LD_VAR 0 3
62805: PPUSH
62806: CALL_OW 113
// exit ;
62810: GO 62898
// end ; if task [ 1 ] [ 1 ] <> M then
62812: LD_VAR 0 7
62816: PUSH
62817: LD_INT 1
62819: ARRAY
62820: PUSH
62821: LD_INT 1
62823: ARRAY
62824: PUSH
62825: LD_STRING M
62827: NONEQUAL
62828: IFFALSE 62832
// exit ;
62830: GO 62898
// x := task [ 1 ] [ 2 ] ;
62832: LD_ADDR_VAR 0 5
62836: PUSH
62837: LD_VAR 0 7
62841: PUSH
62842: LD_INT 1
62844: ARRAY
62845: PUSH
62846: LD_INT 2
62848: ARRAY
62849: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62850: LD_ADDR_VAR 0 6
62854: PUSH
62855: LD_VAR 0 7
62859: PUSH
62860: LD_INT 1
62862: ARRAY
62863: PUSH
62864: LD_INT 3
62866: ARRAY
62867: ST_TO_ADDR
// if InArea ( x , y , area ) then
62868: LD_VAR 0 5
62872: PPUSH
62873: LD_VAR 0 6
62877: PPUSH
62878: LD_VAR 0 2
62882: PPUSH
62883: CALL_OW 309
62887: IFFALSE 62898
// ComStop ( unit ) ;
62889: LD_VAR 0 1
62893: PPUSH
62894: CALL_OW 141
// end ;
62898: LD_VAR 0 4
62902: RET
// export function Abs ( value ) ; begin
62903: LD_INT 0
62905: PPUSH
// result := value ;
62906: LD_ADDR_VAR 0 2
62910: PUSH
62911: LD_VAR 0 1
62915: ST_TO_ADDR
// if value < 0 then
62916: LD_VAR 0 1
62920: PUSH
62921: LD_INT 0
62923: LESS
62924: IFFALSE 62941
// result := value * - 1 ;
62926: LD_ADDR_VAR 0 2
62930: PUSH
62931: LD_VAR 0 1
62935: PUSH
62936: LD_INT 1
62938: NEG
62939: MUL
62940: ST_TO_ADDR
// end ;
62941: LD_VAR 0 2
62945: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62946: LD_INT 0
62948: PPUSH
62949: PPUSH
62950: PPUSH
62951: PPUSH
62952: PPUSH
62953: PPUSH
62954: PPUSH
62955: PPUSH
// if not unit or not building then
62956: LD_VAR 0 1
62960: NOT
62961: IFTRUE 62970
62963: PUSH
62964: LD_VAR 0 2
62968: NOT
62969: OR
62970: IFFALSE 62974
// exit ;
62972: GO 63202
// x := GetX ( building ) ;
62974: LD_ADDR_VAR 0 4
62978: PUSH
62979: LD_VAR 0 2
62983: PPUSH
62984: CALL_OW 250
62988: ST_TO_ADDR
// y := GetY ( building ) ;
62989: LD_ADDR_VAR 0 6
62993: PUSH
62994: LD_VAR 0 2
62998: PPUSH
62999: CALL_OW 251
63003: ST_TO_ADDR
// d := GetDir ( building ) ;
63004: LD_ADDR_VAR 0 8
63008: PUSH
63009: LD_VAR 0 2
63013: PPUSH
63014: CALL_OW 254
63018: ST_TO_ADDR
// r := 4 ;
63019: LD_ADDR_VAR 0 9
63023: PUSH
63024: LD_INT 4
63026: ST_TO_ADDR
// for i := 1 to 5 do
63027: LD_ADDR_VAR 0 10
63031: PUSH
63032: DOUBLE
63033: LD_INT 1
63035: DEC
63036: ST_TO_ADDR
63037: LD_INT 5
63039: PUSH
63040: FOR_TO
63041: IFFALSE 63200
// begin _x := ShiftX ( x , d , r + i ) ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: LD_VAR 0 4
63052: PPUSH
63053: LD_VAR 0 8
63057: PPUSH
63058: LD_VAR 0 9
63062: PUSH
63063: LD_VAR 0 10
63067: PLUS
63068: PPUSH
63069: CALL_OW 272
63073: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63074: LD_ADDR_VAR 0 7
63078: PUSH
63079: LD_VAR 0 6
63083: PPUSH
63084: LD_VAR 0 8
63088: PPUSH
63089: LD_VAR 0 9
63093: PUSH
63094: LD_VAR 0 10
63098: PLUS
63099: PPUSH
63100: CALL_OW 273
63104: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63105: LD_VAR 0 5
63109: PPUSH
63110: LD_VAR 0 7
63114: PPUSH
63115: CALL_OW 488
63119: IFFALSE 63154
63121: PUSH
63122: LD_VAR 0 5
63126: PPUSH
63127: LD_VAR 0 7
63131: PPUSH
63132: CALL_OW 428
63136: PPUSH
63137: CALL_OW 247
63141: PUSH
63142: LD_INT 3
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: IN
63152: NOT
63153: AND
63154: IFFALSE 63198
// begin ComMoveXY ( unit , _x , _y ) ;
63156: LD_VAR 0 1
63160: PPUSH
63161: LD_VAR 0 5
63165: PPUSH
63166: LD_VAR 0 7
63170: PPUSH
63171: CALL_OW 111
// result := [ _x , _y ] ;
63175: LD_ADDR_VAR 0 3
63179: PUSH
63180: LD_VAR 0 5
63184: PUSH
63185: LD_VAR 0 7
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: ST_TO_ADDR
// exit ;
63194: POP
63195: POP
63196: GO 63202
// end ; end ;
63198: GO 63040
63200: POP
63201: POP
// end ;
63202: LD_VAR 0 3
63206: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63207: LD_INT 0
63209: PPUSH
63210: PPUSH
63211: PPUSH
// result := 0 ;
63212: LD_ADDR_VAR 0 3
63216: PUSH
63217: LD_INT 0
63219: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63220: LD_VAR 0 1
63224: PUSH
63225: LD_INT 0
63227: LESS
63228: IFTRUE 63240
63230: PUSH
63231: LD_VAR 0 1
63235: PUSH
63236: LD_INT 8
63238: GREATER
63239: OR
63240: IFTRUE 63252
63242: PUSH
63243: LD_VAR 0 2
63247: PUSH
63248: LD_INT 0
63250: LESS
63251: OR
63252: IFTRUE 63264
63254: PUSH
63255: LD_VAR 0 2
63259: PUSH
63260: LD_INT 8
63262: GREATER
63263: OR
63264: IFFALSE 63268
// exit ;
63266: GO 63343
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63268: LD_ADDR_VAR 0 4
63272: PUSH
63273: LD_INT 22
63275: PUSH
63276: LD_VAR 0 2
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PPUSH
63285: CALL_OW 69
63289: PUSH
63290: FOR_IN
63291: IFFALSE 63341
// begin un := UnitShoot ( i ) ;
63293: LD_ADDR_VAR 0 5
63297: PUSH
63298: LD_VAR 0 4
63302: PPUSH
63303: CALL_OW 504
63307: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63308: LD_VAR 0 5
63312: PPUSH
63313: CALL_OW 255
63317: PUSH
63318: LD_VAR 0 1
63322: EQUAL
63323: IFFALSE 63339
// begin result := un ;
63325: LD_ADDR_VAR 0 3
63329: PUSH
63330: LD_VAR 0 5
63334: ST_TO_ADDR
// exit ;
63335: POP
63336: POP
63337: GO 63343
// end ; end ;
63339: GO 63290
63341: POP
63342: POP
// end ;
63343: LD_VAR 0 3
63347: RET
// export function GetCargoBay ( units ) ; begin
63348: LD_INT 0
63350: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63351: LD_ADDR_VAR 0 2
63355: PUSH
63356: LD_VAR 0 1
63360: PPUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 34
63366: PUSH
63367: LD_INT 12
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 34
63376: PUSH
63377: LD_INT 51
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 34
63386: PUSH
63387: LD_INT 32
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 34
63396: PUSH
63397: LD_INT 89
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: PPUSH
63411: CALL_OW 72
63415: ST_TO_ADDR
// end ;
63416: LD_VAR 0 2
63420: RET
// export function Negate ( value ) ; begin
63421: LD_INT 0
63423: PPUSH
// result := not value ;
63424: LD_ADDR_VAR 0 2
63428: PUSH
63429: LD_VAR 0 1
63433: NOT
63434: ST_TO_ADDR
// end ;
63435: LD_VAR 0 2
63439: RET
// export function Inc ( value ) ; begin
63440: LD_INT 0
63442: PPUSH
// result := value + 1 ;
63443: LD_ADDR_VAR 0 2
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 1
63455: PLUS
63456: ST_TO_ADDR
// end ;
63457: LD_VAR 0 2
63461: RET
// export function Dec ( value ) ; begin
63462: LD_INT 0
63464: PPUSH
// result := value - 1 ;
63465: LD_ADDR_VAR 0 2
63469: PUSH
63470: LD_VAR 0 1
63474: PUSH
63475: LD_INT 1
63477: MINUS
63478: ST_TO_ADDR
// end ;
63479: LD_VAR 0 2
63483: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63484: LD_INT 0
63486: PPUSH
63487: PPUSH
63488: PPUSH
63489: PPUSH
63490: PPUSH
63491: PPUSH
63492: PPUSH
63493: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63494: LD_VAR 0 1
63498: PPUSH
63499: LD_VAR 0 2
63503: PPUSH
63504: CALL_OW 488
63508: NOT
63509: IFTRUE 63528
63511: PUSH
63512: LD_VAR 0 3
63516: PPUSH
63517: LD_VAR 0 4
63521: PPUSH
63522: CALL_OW 488
63526: NOT
63527: OR
63528: IFFALSE 63541
// begin result := - 1 ;
63530: LD_ADDR_VAR 0 5
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: ST_TO_ADDR
// exit ;
63539: GO 63776
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63541: LD_ADDR_VAR 0 12
63545: PUSH
63546: LD_VAR 0 1
63550: PPUSH
63551: LD_VAR 0 2
63555: PPUSH
63556: LD_VAR 0 3
63560: PPUSH
63561: LD_VAR 0 4
63565: PPUSH
63566: CALL 62612 0 4
63570: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63571: LD_ADDR_VAR 0 11
63575: PUSH
63576: LD_VAR 0 1
63580: PPUSH
63581: LD_VAR 0 2
63585: PPUSH
63586: LD_VAR 0 12
63590: PUSH
63591: LD_INT 1
63593: ARRAY
63594: PPUSH
63595: LD_VAR 0 12
63599: PUSH
63600: LD_INT 2
63602: ARRAY
63603: PPUSH
63604: CALL_OW 298
63608: ST_TO_ADDR
// distance := 9999 ;
63609: LD_ADDR_VAR 0 10
63613: PUSH
63614: LD_INT 9999
63616: ST_TO_ADDR
// for i := 0 to 5 do
63617: LD_ADDR_VAR 0 6
63621: PUSH
63622: DOUBLE
63623: LD_INT 0
63625: DEC
63626: ST_TO_ADDR
63627: LD_INT 5
63629: PUSH
63630: FOR_TO
63631: IFFALSE 63774
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63633: LD_ADDR_VAR 0 7
63637: PUSH
63638: LD_VAR 0 1
63642: PPUSH
63643: LD_VAR 0 6
63647: PPUSH
63648: LD_VAR 0 11
63652: PPUSH
63653: CALL_OW 272
63657: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63658: LD_ADDR_VAR 0 8
63662: PUSH
63663: LD_VAR 0 2
63667: PPUSH
63668: LD_VAR 0 6
63672: PPUSH
63673: LD_VAR 0 11
63677: PPUSH
63678: CALL_OW 273
63682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63683: LD_VAR 0 7
63687: PPUSH
63688: LD_VAR 0 8
63692: PPUSH
63693: CALL_OW 488
63697: NOT
63698: IFFALSE 63702
// continue ;
63700: GO 63630
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63702: LD_ADDR_VAR 0 9
63706: PUSH
63707: LD_VAR 0 12
63711: PUSH
63712: LD_INT 1
63714: ARRAY
63715: PPUSH
63716: LD_VAR 0 12
63720: PUSH
63721: LD_INT 2
63723: ARRAY
63724: PPUSH
63725: LD_VAR 0 7
63729: PPUSH
63730: LD_VAR 0 8
63734: PPUSH
63735: CALL_OW 298
63739: ST_TO_ADDR
// if tmp < distance then
63740: LD_VAR 0 9
63744: PUSH
63745: LD_VAR 0 10
63749: LESS
63750: IFFALSE 63772
// begin result := i ;
63752: LD_ADDR_VAR 0 5
63756: PUSH
63757: LD_VAR 0 6
63761: ST_TO_ADDR
// distance := tmp ;
63762: LD_ADDR_VAR 0 10
63766: PUSH
63767: LD_VAR 0 9
63771: ST_TO_ADDR
// end ; end ;
63772: GO 63630
63774: POP
63775: POP
// end ;
63776: LD_VAR 0 5
63780: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63781: LD_INT 0
63783: PPUSH
63784: PPUSH
// if not driver or not IsInUnit ( driver ) then
63785: LD_VAR 0 1
63789: NOT
63790: IFTRUE 63804
63792: PUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: CALL_OW 310
63802: NOT
63803: OR
63804: IFFALSE 63808
// exit ;
63806: GO 63898
// vehicle := IsInUnit ( driver ) ;
63808: LD_ADDR_VAR 0 3
63812: PUSH
63813: LD_VAR 0 1
63817: PPUSH
63818: CALL_OW 310
63822: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63823: LD_VAR 0 1
63827: PPUSH
63828: LD_STRING \
63830: PUSH
63831: LD_INT 0
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: LD_INT 0
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: PUSH
63858: LD_STRING E
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: LD_VAR 0 3
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PPUSH
63894: CALL_OW 446
// end ;
63898: LD_VAR 0 2
63902: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63903: LD_INT 0
63905: PPUSH
63906: PPUSH
// if not driver or not IsInUnit ( driver ) then
63907: LD_VAR 0 1
63911: NOT
63912: IFTRUE 63926
63914: PUSH
63915: LD_VAR 0 1
63919: PPUSH
63920: CALL_OW 310
63924: NOT
63925: OR
63926: IFFALSE 63930
// exit ;
63928: GO 64020
// vehicle := IsInUnit ( driver ) ;
63930: LD_ADDR_VAR 0 3
63934: PUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: CALL_OW 310
63944: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63945: LD_VAR 0 1
63949: PPUSH
63950: LD_STRING \
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 0
63958: PUSH
63959: LD_INT 0
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: PUSH
63980: LD_STRING E
63982: PUSH
63983: LD_INT 0
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_VAR 0 3
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PPUSH
64016: CALL_OW 447
// end ;
64020: LD_VAR 0 2
64024: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64025: LD_INT 0
64027: PPUSH
64028: PPUSH
64029: PPUSH
// tmp := [ ] ;
64030: LD_ADDR_VAR 0 5
64034: PUSH
64035: EMPTY
64036: ST_TO_ADDR
// for i in units do
64037: LD_ADDR_VAR 0 4
64041: PUSH
64042: LD_VAR 0 1
64046: PUSH
64047: FOR_IN
64048: IFFALSE 64086
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64050: LD_ADDR_VAR 0 5
64054: PUSH
64055: LD_VAR 0 5
64059: PPUSH
64060: LD_VAR 0 5
64064: PUSH
64065: LD_INT 1
64067: PLUS
64068: PPUSH
64069: LD_VAR 0 4
64073: PPUSH
64074: CALL_OW 256
64078: PPUSH
64079: CALL_OW 2
64083: ST_TO_ADDR
64084: GO 64047
64086: POP
64087: POP
// if not tmp then
64088: LD_VAR 0 5
64092: NOT
64093: IFFALSE 64097
// exit ;
64095: GO 64145
// if asc then
64097: LD_VAR 0 2
64101: IFFALSE 64125
// result := SortListByListAsc ( units , tmp ) else
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: LD_VAR 0 1
64112: PPUSH
64113: LD_VAR 0 5
64117: PPUSH
64118: CALL_OW 76
64122: ST_TO_ADDR
64123: GO 64145
// result := SortListByListDesc ( units , tmp ) ;
64125: LD_ADDR_VAR 0 3
64129: PUSH
64130: LD_VAR 0 1
64134: PPUSH
64135: LD_VAR 0 5
64139: PPUSH
64140: CALL_OW 77
64144: ST_TO_ADDR
// end ;
64145: LD_VAR 0 3
64149: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64150: LD_INT 0
64152: PPUSH
64153: PPUSH
// task := GetTaskList ( mech ) ;
64154: LD_ADDR_VAR 0 4
64158: PUSH
64159: LD_VAR 0 1
64163: PPUSH
64164: CALL_OW 437
64168: ST_TO_ADDR
// if not task then
64169: LD_VAR 0 4
64173: NOT
64174: IFFALSE 64178
// exit ;
64176: GO 64222
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64178: LD_ADDR_VAR 0 3
64182: PUSH
64183: LD_VAR 0 4
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PUSH
64192: LD_INT 1
64194: ARRAY
64195: PUSH
64196: LD_STRING r
64198: EQUAL
64199: IFFALSE 64221
64201: PUSH
64202: LD_VAR 0 4
64206: PUSH
64207: LD_INT 1
64209: ARRAY
64210: PUSH
64211: LD_INT 4
64213: ARRAY
64214: PUSH
64215: LD_VAR 0 2
64219: EQUAL
64220: AND
64221: ST_TO_ADDR
// end ;
64222: LD_VAR 0 3
64226: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64227: LD_INT 0
64229: PPUSH
// SetDir ( unit , d ) ;
64230: LD_VAR 0 1
64234: PPUSH
64235: LD_VAR 0 4
64239: PPUSH
64240: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64244: LD_ADDR_VAR 0 6
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: LD_VAR 0 2
64258: PPUSH
64259: LD_VAR 0 3
64263: PPUSH
64264: LD_VAR 0 5
64268: PPUSH
64269: CALL_OW 48
64273: ST_TO_ADDR
// end ;
64274: LD_VAR 0 6
64278: RET
// export function ToNaturalNumber ( number ) ; begin
64279: LD_INT 0
64281: PPUSH
// result := number div 1 ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_VAR 0 1
64291: PUSH
64292: LD_INT 1
64294: DIV
64295: ST_TO_ADDR
// if number < 0 then
64296: LD_VAR 0 1
64300: PUSH
64301: LD_INT 0
64303: LESS
64304: IFFALSE 64314
// result := 0 ;
64306: LD_ADDR_VAR 0 2
64310: PUSH
64311: LD_INT 0
64313: ST_TO_ADDR
// end ;
64314: LD_VAR 0 2
64318: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64319: LD_INT 0
64321: PPUSH
64322: PPUSH
64323: PPUSH
// if not buildings then
64324: LD_VAR 0 1
64328: NOT
64329: IFFALSE 64333
// exit ;
64331: GO 64448
// tmp := [ ] ;
64333: LD_ADDR_VAR 0 5
64337: PUSH
64338: EMPTY
64339: ST_TO_ADDR
// for b in buildings do
64340: LD_ADDR_VAR 0 4
64344: PUSH
64345: LD_VAR 0 1
64349: PUSH
64350: FOR_IN
64351: IFFALSE 64389
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64353: LD_ADDR_VAR 0 5
64357: PUSH
64358: LD_VAR 0 5
64362: PPUSH
64363: LD_VAR 0 5
64367: PUSH
64368: LD_INT 1
64370: PLUS
64371: PPUSH
64372: LD_VAR 0 4
64376: PPUSH
64377: CALL_OW 266
64381: PPUSH
64382: CALL_OW 1
64386: ST_TO_ADDR
64387: GO 64350
64389: POP
64390: POP
// if not tmp then
64391: LD_VAR 0 5
64395: NOT
64396: IFFALSE 64400
// exit ;
64398: GO 64448
// if asc then
64400: LD_VAR 0 2
64404: IFFALSE 64428
// result := SortListByListAsc ( buildings , tmp ) else
64406: LD_ADDR_VAR 0 3
64410: PUSH
64411: LD_VAR 0 1
64415: PPUSH
64416: LD_VAR 0 5
64420: PPUSH
64421: CALL_OW 76
64425: ST_TO_ADDR
64426: GO 64448
// result := SortListByListDesc ( buildings , tmp ) ;
64428: LD_ADDR_VAR 0 3
64432: PUSH
64433: LD_VAR 0 1
64437: PPUSH
64438: LD_VAR 0 5
64442: PPUSH
64443: CALL_OW 77
64447: ST_TO_ADDR
// end ;
64448: LD_VAR 0 3
64452: RET
// export function SortByClass ( units , class ) ; var un ; begin
64453: LD_INT 0
64455: PPUSH
64456: PPUSH
// if not units or not class then
64457: LD_VAR 0 1
64461: NOT
64462: IFTRUE 64471
64464: PUSH
64465: LD_VAR 0 2
64469: NOT
64470: OR
64471: IFFALSE 64475
// exit ;
64473: GO 64570
// result := [ ] ;
64475: LD_ADDR_VAR 0 3
64479: PUSH
64480: EMPTY
64481: ST_TO_ADDR
// for un in units do
64482: LD_ADDR_VAR 0 4
64486: PUSH
64487: LD_VAR 0 1
64491: PUSH
64492: FOR_IN
64493: IFFALSE 64568
// if GetClass ( un ) = class then
64495: LD_VAR 0 4
64499: PPUSH
64500: CALL_OW 257
64504: PUSH
64505: LD_VAR 0 2
64509: EQUAL
64510: IFFALSE 64537
// result := Insert ( result , 1 , un ) else
64512: LD_ADDR_VAR 0 3
64516: PUSH
64517: LD_VAR 0 3
64521: PPUSH
64522: LD_INT 1
64524: PPUSH
64525: LD_VAR 0 4
64529: PPUSH
64530: CALL_OW 2
64534: ST_TO_ADDR
64535: GO 64566
// result := Replace ( result , result + 1 , un ) ;
64537: LD_ADDR_VAR 0 3
64541: PUSH
64542: LD_VAR 0 3
64546: PPUSH
64547: LD_VAR 0 3
64551: PUSH
64552: LD_INT 1
64554: PLUS
64555: PPUSH
64556: LD_VAR 0 4
64560: PPUSH
64561: CALL_OW 1
64565: ST_TO_ADDR
64566: GO 64492
64568: POP
64569: POP
// end ;
64570: LD_VAR 0 3
64574: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64575: LD_INT 0
64577: PPUSH
64578: PPUSH
64579: PPUSH
64580: PPUSH
64581: PPUSH
64582: PPUSH
64583: PPUSH
// result := [ ] ;
64584: LD_ADDR_VAR 0 4
64588: PUSH
64589: EMPTY
64590: ST_TO_ADDR
// if x - r < 0 then
64591: LD_VAR 0 1
64595: PUSH
64596: LD_VAR 0 3
64600: MINUS
64601: PUSH
64602: LD_INT 0
64604: LESS
64605: IFFALSE 64617
// min_x := 0 else
64607: LD_ADDR_VAR 0 8
64611: PUSH
64612: LD_INT 0
64614: ST_TO_ADDR
64615: GO 64633
// min_x := x - r ;
64617: LD_ADDR_VAR 0 8
64621: PUSH
64622: LD_VAR 0 1
64626: PUSH
64627: LD_VAR 0 3
64631: MINUS
64632: ST_TO_ADDR
// if y - r < 0 then
64633: LD_VAR 0 2
64637: PUSH
64638: LD_VAR 0 3
64642: MINUS
64643: PUSH
64644: LD_INT 0
64646: LESS
64647: IFFALSE 64659
// min_y := 0 else
64649: LD_ADDR_VAR 0 7
64653: PUSH
64654: LD_INT 0
64656: ST_TO_ADDR
64657: GO 64675
// min_y := y - r ;
64659: LD_ADDR_VAR 0 7
64663: PUSH
64664: LD_VAR 0 2
64668: PUSH
64669: LD_VAR 0 3
64673: MINUS
64674: ST_TO_ADDR
// max_x := x + r ;
64675: LD_ADDR_VAR 0 9
64679: PUSH
64680: LD_VAR 0 1
64684: PUSH
64685: LD_VAR 0 3
64689: PLUS
64690: ST_TO_ADDR
// max_y := y + r ;
64691: LD_ADDR_VAR 0 10
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_VAR 0 3
64705: PLUS
64706: ST_TO_ADDR
// for _x = min_x to max_x do
64707: LD_ADDR_VAR 0 5
64711: PUSH
64712: DOUBLE
64713: LD_VAR 0 8
64717: DEC
64718: ST_TO_ADDR
64719: LD_VAR 0 9
64723: PUSH
64724: FOR_TO
64725: IFFALSE 64826
// for _y = min_y to max_y do
64727: LD_ADDR_VAR 0 6
64731: PUSH
64732: DOUBLE
64733: LD_VAR 0 7
64737: DEC
64738: ST_TO_ADDR
64739: LD_VAR 0 10
64743: PUSH
64744: FOR_TO
64745: IFFALSE 64822
// begin if not ValidHex ( _x , _y ) then
64747: LD_VAR 0 5
64751: PPUSH
64752: LD_VAR 0 6
64756: PPUSH
64757: CALL_OW 488
64761: NOT
64762: IFFALSE 64766
// continue ;
64764: GO 64744
// if GetResourceTypeXY ( _x , _y ) then
64766: LD_VAR 0 5
64770: PPUSH
64771: LD_VAR 0 6
64775: PPUSH
64776: CALL_OW 283
64780: IFFALSE 64820
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64782: LD_ADDR_VAR 0 4
64786: PUSH
64787: LD_VAR 0 4
64791: PPUSH
64792: LD_VAR 0 4
64796: PUSH
64797: LD_INT 1
64799: PLUS
64800: PPUSH
64801: LD_VAR 0 5
64805: PUSH
64806: LD_VAR 0 6
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PPUSH
64815: CALL_OW 1
64819: ST_TO_ADDR
// end ;
64820: GO 64744
64822: POP
64823: POP
64824: GO 64724
64826: POP
64827: POP
// end ;
64828: LD_VAR 0 4
64832: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64833: LD_INT 0
64835: PPUSH
64836: PPUSH
64837: PPUSH
64838: PPUSH
64839: PPUSH
64840: PPUSH
64841: PPUSH
64842: PPUSH
// if not units then
64843: LD_VAR 0 1
64847: NOT
64848: IFFALSE 64852
// exit ;
64850: GO 65384
// result := UnitFilter ( units , [ f_ok ] ) ;
64852: LD_ADDR_VAR 0 3
64856: PUSH
64857: LD_VAR 0 1
64861: PPUSH
64862: LD_INT 50
64864: PUSH
64865: EMPTY
64866: LIST
64867: PPUSH
64868: CALL_OW 72
64872: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64873: LD_ADDR_VAR 0 8
64877: PUSH
64878: LD_VAR 0 1
64882: PUSH
64883: LD_INT 1
64885: ARRAY
64886: PPUSH
64887: CALL_OW 255
64891: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64892: LD_ADDR_VAR 0 10
64896: PUSH
64897: LD_INT 29
64899: PUSH
64900: LD_INT 91
64902: PUSH
64903: LD_INT 49
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: LIST
64910: ST_TO_ADDR
// if not result then
64911: LD_VAR 0 3
64915: NOT
64916: IFFALSE 64920
// exit ;
64918: GO 65384
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64920: LD_ADDR_VAR 0 5
64924: PUSH
64925: LD_INT 81
64927: PUSH
64928: LD_VAR 0 8
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PPUSH
64937: CALL_OW 69
64941: ST_TO_ADDR
// for i in result do
64942: LD_ADDR_VAR 0 4
64946: PUSH
64947: LD_VAR 0 3
64951: PUSH
64952: FOR_IN
64953: IFFALSE 65382
// begin tag := GetTag ( i ) + 1 ;
64955: LD_ADDR_VAR 0 9
64959: PUSH
64960: LD_VAR 0 4
64964: PPUSH
64965: CALL_OW 110
64969: PUSH
64970: LD_INT 1
64972: PLUS
64973: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
64974: LD_ADDR_VAR 0 7
64978: PUSH
64979: LD_VAR 0 4
64983: PPUSH
64984: CALL_OW 250
64988: PPUSH
64989: LD_VAR 0 4
64993: PPUSH
64994: CALL_OW 251
64998: PPUSH
64999: LD_INT 4
65001: PPUSH
65002: CALL 64575 0 3
65006: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65007: LD_VAR 0 4
65011: PPUSH
65012: CALL_OW 247
65016: PUSH
65017: LD_INT 2
65019: EQUAL
65020: IFFALSE 65032
65022: PUSH
65023: LD_VAR 0 7
65027: PUSH
65028: LD_INT 2
65030: GREATER
65031: AND
65032: IFFALSE 65052
65034: PUSH
65035: LD_VAR 0 4
65039: PPUSH
65040: CALL_OW 264
65044: PUSH
65045: LD_VAR 0 10
65049: IN
65050: NOT
65051: AND
65052: IFFALSE 65091
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65054: LD_VAR 0 4
65058: PPUSH
65059: LD_VAR 0 7
65063: PUSH
65064: LD_INT 1
65066: ARRAY
65067: PUSH
65068: LD_INT 1
65070: ARRAY
65071: PPUSH
65072: LD_VAR 0 7
65076: PUSH
65077: LD_INT 1
65079: ARRAY
65080: PUSH
65081: LD_INT 2
65083: ARRAY
65084: PPUSH
65085: CALL_OW 116
65089: GO 65380
// if path > tag then
65091: LD_VAR 0 2
65095: PUSH
65096: LD_VAR 0 9
65100: GREATER
65101: IFFALSE 65309
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65103: LD_ADDR_VAR 0 6
65107: PUSH
65108: LD_VAR 0 5
65112: PPUSH
65113: LD_INT 91
65115: PUSH
65116: LD_VAR 0 4
65120: PUSH
65121: LD_INT 8
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: PPUSH
65129: CALL_OW 72
65133: ST_TO_ADDR
// if nearEnemy then
65134: LD_VAR 0 6
65138: IFFALSE 65207
// begin if GetWeapon ( i ) = ru_time_lapser then
65140: LD_VAR 0 4
65144: PPUSH
65145: CALL_OW 264
65149: PUSH
65150: LD_INT 49
65152: EQUAL
65153: IFFALSE 65181
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65155: LD_VAR 0 4
65159: PPUSH
65160: LD_VAR 0 6
65164: PPUSH
65165: LD_VAR 0 4
65169: PPUSH
65170: CALL_OW 74
65174: PPUSH
65175: CALL_OW 112
65179: GO 65205
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65181: LD_VAR 0 4
65185: PPUSH
65186: LD_VAR 0 6
65190: PPUSH
65191: LD_VAR 0 4
65195: PPUSH
65196: CALL_OW 74
65200: PPUSH
65201: CALL 66465 0 2
// end else
65205: GO 65307
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65207: LD_VAR 0 4
65211: PPUSH
65212: LD_VAR 0 2
65216: PUSH
65217: LD_VAR 0 9
65221: ARRAY
65222: PUSH
65223: LD_INT 1
65225: ARRAY
65226: PPUSH
65227: LD_VAR 0 2
65231: PUSH
65232: LD_VAR 0 9
65236: ARRAY
65237: PUSH
65238: LD_INT 2
65240: ARRAY
65241: PPUSH
65242: CALL_OW 297
65246: PUSH
65247: LD_INT 6
65249: GREATER
65250: IFFALSE 65293
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65252: LD_VAR 0 4
65256: PPUSH
65257: LD_VAR 0 2
65261: PUSH
65262: LD_VAR 0 9
65266: ARRAY
65267: PUSH
65268: LD_INT 1
65270: ARRAY
65271: PPUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_VAR 0 9
65281: ARRAY
65282: PUSH
65283: LD_INT 2
65285: ARRAY
65286: PPUSH
65287: CALL_OW 114
65291: GO 65307
// SetTag ( i , tag ) ;
65293: LD_VAR 0 4
65297: PPUSH
65298: LD_VAR 0 9
65302: PPUSH
65303: CALL_OW 109
// end else
65307: GO 65380
// if enemy then
65309: LD_VAR 0 5
65313: IFFALSE 65380
// begin if GetWeapon ( i ) = ru_time_lapser then
65315: LD_VAR 0 4
65319: PPUSH
65320: CALL_OW 264
65324: PUSH
65325: LD_INT 49
65327: EQUAL
65328: IFFALSE 65356
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65330: LD_VAR 0 4
65334: PPUSH
65335: LD_VAR 0 5
65339: PPUSH
65340: LD_VAR 0 4
65344: PPUSH
65345: CALL_OW 74
65349: PPUSH
65350: CALL_OW 112
65354: GO 65380
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65356: LD_VAR 0 4
65360: PPUSH
65361: LD_VAR 0 5
65365: PPUSH
65366: LD_VAR 0 4
65370: PPUSH
65371: CALL_OW 74
65375: PPUSH
65376: CALL 66465 0 2
// end ; end ;
65380: GO 64952
65382: POP
65383: POP
// end ;
65384: LD_VAR 0 3
65388: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65389: LD_INT 0
65391: PPUSH
65392: PPUSH
65393: PPUSH
// if not unit or IsInUnit ( unit ) then
65394: LD_VAR 0 1
65398: NOT
65399: IFTRUE 65412
65401: PUSH
65402: LD_VAR 0 1
65406: PPUSH
65407: CALL_OW 310
65411: OR
65412: IFFALSE 65416
// exit ;
65414: GO 65507
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65416: LD_ADDR_VAR 0 4
65420: PUSH
65421: LD_VAR 0 1
65425: PPUSH
65426: CALL_OW 250
65430: PPUSH
65431: LD_VAR 0 2
65435: PPUSH
65436: LD_INT 1
65438: PPUSH
65439: CALL_OW 272
65443: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65444: LD_ADDR_VAR 0 5
65448: PUSH
65449: LD_VAR 0 1
65453: PPUSH
65454: CALL_OW 251
65458: PPUSH
65459: LD_VAR 0 2
65463: PPUSH
65464: LD_INT 1
65466: PPUSH
65467: CALL_OW 273
65471: ST_TO_ADDR
// if ValidHex ( x , y ) then
65472: LD_VAR 0 4
65476: PPUSH
65477: LD_VAR 0 5
65481: PPUSH
65482: CALL_OW 488
65486: IFFALSE 65507
// ComTurnXY ( unit , x , y ) ;
65488: LD_VAR 0 1
65492: PPUSH
65493: LD_VAR 0 4
65497: PPUSH
65498: LD_VAR 0 5
65502: PPUSH
65503: CALL_OW 118
// end ;
65507: LD_VAR 0 3
65511: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65512: LD_INT 0
65514: PPUSH
65515: PPUSH
// result := false ;
65516: LD_ADDR_VAR 0 3
65520: PUSH
65521: LD_INT 0
65523: ST_TO_ADDR
// if not units then
65524: LD_VAR 0 2
65528: NOT
65529: IFFALSE 65533
// exit ;
65531: GO 65578
// for i in units do
65533: LD_ADDR_VAR 0 4
65537: PUSH
65538: LD_VAR 0 2
65542: PUSH
65543: FOR_IN
65544: IFFALSE 65576
// if See ( side , i ) then
65546: LD_VAR 0 1
65550: PPUSH
65551: LD_VAR 0 4
65555: PPUSH
65556: CALL_OW 292
65560: IFFALSE 65574
// begin result := true ;
65562: LD_ADDR_VAR 0 3
65566: PUSH
65567: LD_INT 1
65569: ST_TO_ADDR
// exit ;
65570: POP
65571: POP
65572: GO 65578
// end ;
65574: GO 65543
65576: POP
65577: POP
// end ;
65578: LD_VAR 0 3
65582: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65583: LD_INT 0
65585: PPUSH
65586: PPUSH
65587: PPUSH
65588: PPUSH
// if not unit or not points then
65589: LD_VAR 0 1
65593: NOT
65594: IFTRUE 65603
65596: PUSH
65597: LD_VAR 0 2
65601: NOT
65602: OR
65603: IFFALSE 65607
// exit ;
65605: GO 65697
// dist := 99999 ;
65607: LD_ADDR_VAR 0 5
65611: PUSH
65612: LD_INT 99999
65614: ST_TO_ADDR
// for i in points do
65615: LD_ADDR_VAR 0 4
65619: PUSH
65620: LD_VAR 0 2
65624: PUSH
65625: FOR_IN
65626: IFFALSE 65695
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65628: LD_ADDR_VAR 0 6
65632: PUSH
65633: LD_VAR 0 1
65637: PPUSH
65638: LD_VAR 0 4
65642: PUSH
65643: LD_INT 1
65645: ARRAY
65646: PPUSH
65647: LD_VAR 0 4
65651: PUSH
65652: LD_INT 2
65654: ARRAY
65655: PPUSH
65656: CALL_OW 297
65660: ST_TO_ADDR
// if tmpDist < dist then
65661: LD_VAR 0 6
65665: PUSH
65666: LD_VAR 0 5
65670: LESS
65671: IFFALSE 65693
// begin result := i ;
65673: LD_ADDR_VAR 0 3
65677: PUSH
65678: LD_VAR 0 4
65682: ST_TO_ADDR
// dist := tmpDist ;
65683: LD_ADDR_VAR 0 5
65687: PUSH
65688: LD_VAR 0 6
65692: ST_TO_ADDR
// end ; end ;
65693: GO 65625
65695: POP
65696: POP
// end ;
65697: LD_VAR 0 3
65701: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65702: LD_INT 0
65704: PPUSH
// uc_side := side ;
65705: LD_ADDR_OWVAR 20
65709: PUSH
65710: LD_VAR 0 1
65714: ST_TO_ADDR
// uc_nation := 3 ;
65715: LD_ADDR_OWVAR 21
65719: PUSH
65720: LD_INT 3
65722: ST_TO_ADDR
// vc_chassis := 25 ;
65723: LD_ADDR_OWVAR 37
65727: PUSH
65728: LD_INT 25
65730: ST_TO_ADDR
// vc_engine := engine_siberite ;
65731: LD_ADDR_OWVAR 39
65735: PUSH
65736: LD_INT 3
65738: ST_TO_ADDR
// vc_control := control_computer ;
65739: LD_ADDR_OWVAR 38
65743: PUSH
65744: LD_INT 3
65746: ST_TO_ADDR
// vc_weapon := 59 ;
65747: LD_ADDR_OWVAR 40
65751: PUSH
65752: LD_INT 59
65754: ST_TO_ADDR
// result := CreateVehicle ;
65755: LD_ADDR_VAR 0 5
65759: PUSH
65760: CALL_OW 45
65764: ST_TO_ADDR
// SetDir ( result , d ) ;
65765: LD_VAR 0 5
65769: PPUSH
65770: LD_VAR 0 4
65774: PPUSH
65775: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65779: LD_VAR 0 5
65783: PPUSH
65784: LD_VAR 0 2
65788: PPUSH
65789: LD_VAR 0 3
65793: PPUSH
65794: LD_INT 0
65796: PPUSH
65797: CALL_OW 48
// end ;
65801: LD_VAR 0 5
65805: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65806: LD_INT 0
65808: PPUSH
65809: PPUSH
65810: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65811: LD_ADDR_VAR 0 2
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65834: LD_VAR 0 1
65838: NOT
65839: IFTRUE 65872
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: CALL_OW 264
65851: PUSH
65852: LD_INT 12
65854: PUSH
65855: LD_INT 51
65857: PUSH
65858: LD_INT 32
65860: PUSH
65861: LD_INT 89
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: IN
65870: NOT
65871: OR
65872: IFFALSE 65876
// exit ;
65874: GO 65974
// for i := 1 to 3 do
65876: LD_ADDR_VAR 0 3
65880: PUSH
65881: DOUBLE
65882: LD_INT 1
65884: DEC
65885: ST_TO_ADDR
65886: LD_INT 3
65888: PUSH
65889: FOR_TO
65890: IFFALSE 65972
// begin tmp := GetCargo ( cargo , i ) ;
65892: LD_ADDR_VAR 0 4
65896: PUSH
65897: LD_VAR 0 1
65901: PPUSH
65902: LD_VAR 0 3
65906: PPUSH
65907: CALL_OW 289
65911: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65912: LD_ADDR_VAR 0 2
65916: PUSH
65917: LD_VAR 0 2
65921: PPUSH
65922: LD_VAR 0 3
65926: PPUSH
65927: LD_VAR 0 4
65931: PPUSH
65932: CALL_OW 1
65936: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65937: LD_ADDR_VAR 0 2
65941: PUSH
65942: LD_VAR 0 2
65946: PPUSH
65947: LD_INT 4
65949: PPUSH
65950: LD_VAR 0 2
65954: PUSH
65955: LD_INT 4
65957: ARRAY
65958: PUSH
65959: LD_VAR 0 4
65963: PLUS
65964: PPUSH
65965: CALL_OW 1
65969: ST_TO_ADDR
// end ;
65970: GO 65889
65972: POP
65973: POP
// end ;
65974: LD_VAR 0 2
65978: RET
// export function Length ( array ) ; begin
65979: LD_INT 0
65981: PPUSH
// result := array + 0 ;
65982: LD_ADDR_VAR 0 2
65986: PUSH
65987: LD_VAR 0 1
65991: PUSH
65992: LD_INT 0
65994: PLUS
65995: ST_TO_ADDR
// end ;
65996: LD_VAR 0 2
66000: RET
// export function PrepareArray ( array ) ; begin
66001: LD_INT 0
66003: PPUSH
// result := array diff 0 ;
66004: LD_ADDR_VAR 0 2
66008: PUSH
66009: LD_VAR 0 1
66013: PUSH
66014: LD_INT 0
66016: DIFF
66017: ST_TO_ADDR
// if not result [ 1 ] then
66018: LD_VAR 0 2
66022: PUSH
66023: LD_INT 1
66025: ARRAY
66026: NOT
66027: IFFALSE 66047
// result := Delete ( result , 1 ) ;
66029: LD_ADDR_VAR 0 2
66033: PUSH
66034: LD_VAR 0 2
66038: PPUSH
66039: LD_INT 1
66041: PPUSH
66042: CALL_OW 3
66046: ST_TO_ADDR
// end ;
66047: LD_VAR 0 2
66051: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66052: LD_INT 0
66054: PPUSH
66055: PPUSH
66056: PPUSH
66057: PPUSH
// sibRocketRange := 25 ;
66058: LD_ADDR_VAR 0 6
66062: PUSH
66063: LD_INT 25
66065: ST_TO_ADDR
// result := false ;
66066: LD_ADDR_VAR 0 4
66070: PUSH
66071: LD_INT 0
66073: ST_TO_ADDR
// for i := 0 to 5 do
66074: LD_ADDR_VAR 0 5
66078: PUSH
66079: DOUBLE
66080: LD_INT 0
66082: DEC
66083: ST_TO_ADDR
66084: LD_INT 5
66086: PUSH
66087: FOR_TO
66088: IFFALSE 66155
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66090: LD_VAR 0 1
66094: PPUSH
66095: LD_VAR 0 5
66099: PPUSH
66100: LD_VAR 0 6
66104: PPUSH
66105: CALL_OW 272
66109: PPUSH
66110: LD_VAR 0 2
66114: PPUSH
66115: LD_VAR 0 5
66119: PPUSH
66120: LD_VAR 0 6
66124: PPUSH
66125: CALL_OW 273
66129: PPUSH
66130: LD_VAR 0 3
66134: PPUSH
66135: CALL_OW 309
66139: IFFALSE 66153
// begin result := true ;
66141: LD_ADDR_VAR 0 4
66145: PUSH
66146: LD_INT 1
66148: ST_TO_ADDR
// exit ;
66149: POP
66150: POP
66151: GO 66157
// end ;
66153: GO 66087
66155: POP
66156: POP
// end ;
66157: LD_VAR 0 4
66161: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66162: LD_INT 0
66164: PPUSH
66165: PPUSH
66166: PPUSH
// if btype = b_depot then
66167: LD_VAR 0 2
66171: PUSH
66172: LD_INT 0
66174: EQUAL
66175: IFFALSE 66187
// begin result := true ;
66177: LD_ADDR_VAR 0 3
66181: PUSH
66182: LD_INT 1
66184: ST_TO_ADDR
// exit ;
66185: GO 66307
// end ; pom := GetBase ( depot ) ;
66187: LD_ADDR_VAR 0 4
66191: PUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: CALL_OW 274
66201: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66202: LD_ADDR_VAR 0 5
66206: PUSH
66207: LD_VAR 0 2
66211: PPUSH
66212: LD_VAR 0 1
66216: PPUSH
66217: CALL_OW 248
66221: PPUSH
66222: CALL_OW 450
66226: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66227: LD_ADDR_VAR 0 3
66231: PUSH
66232: LD_VAR 0 4
66236: PPUSH
66237: LD_INT 1
66239: PPUSH
66240: CALL_OW 275
66244: PUSH
66245: LD_VAR 0 5
66249: PUSH
66250: LD_INT 1
66252: ARRAY
66253: GREATEREQUAL
66254: IFFALSE 66280
66256: PUSH
66257: LD_VAR 0 4
66261: PPUSH
66262: LD_INT 2
66264: PPUSH
66265: CALL_OW 275
66269: PUSH
66270: LD_VAR 0 5
66274: PUSH
66275: LD_INT 2
66277: ARRAY
66278: GREATEREQUAL
66279: AND
66280: IFFALSE 66306
66282: PUSH
66283: LD_VAR 0 4
66287: PPUSH
66288: LD_INT 3
66290: PPUSH
66291: CALL_OW 275
66295: PUSH
66296: LD_VAR 0 5
66300: PUSH
66301: LD_INT 3
66303: ARRAY
66304: GREATEREQUAL
66305: AND
66306: ST_TO_ADDR
// end ;
66307: LD_VAR 0 3
66311: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66312: LD_INT 0
66314: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66315: LD_VAR 0 1
66319: PPUSH
66320: LD_VAR 0 2
66324: PPUSH
66325: LD_INT 0
66327: PPUSH
66328: LD_INT 0
66330: PPUSH
66331: LD_INT 1
66333: PPUSH
66334: LD_INT 0
66336: PPUSH
66337: CALL_OW 587
// end ;
66341: LD_VAR 0 3
66345: RET
// export function CenterOnNow ( unit ) ; begin
66346: LD_INT 0
66348: PPUSH
// result := IsInUnit ( unit ) ;
66349: LD_ADDR_VAR 0 2
66353: PUSH
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 310
66363: ST_TO_ADDR
// if not result then
66364: LD_VAR 0 2
66368: NOT
66369: IFFALSE 66381
// result := unit ;
66371: LD_ADDR_VAR 0 2
66375: PUSH
66376: LD_VAR 0 1
66380: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66381: LD_VAR 0 1
66385: PPUSH
66386: CALL_OW 87
// end ;
66390: LD_VAR 0 2
66394: RET
// export function ComMoveHex ( unit , hex ) ; begin
66395: LD_INT 0
66397: PPUSH
// if not hex then
66398: LD_VAR 0 2
66402: NOT
66403: IFFALSE 66407
// exit ;
66405: GO 66460
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66407: LD_VAR 0 2
66411: PUSH
66412: LD_INT 1
66414: ARRAY
66415: PPUSH
66416: LD_VAR 0 2
66420: PUSH
66421: LD_INT 2
66423: ARRAY
66424: PPUSH
66425: CALL_OW 428
66429: IFFALSE 66433
// exit ;
66431: GO 66460
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66433: LD_VAR 0 1
66437: PPUSH
66438: LD_VAR 0 2
66442: PUSH
66443: LD_INT 1
66445: ARRAY
66446: PPUSH
66447: LD_VAR 0 2
66451: PUSH
66452: LD_INT 2
66454: ARRAY
66455: PPUSH
66456: CALL_OW 111
// end ;
66460: LD_VAR 0 3
66464: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66465: LD_INT 0
66467: PPUSH
66468: PPUSH
66469: PPUSH
// if not unit or not enemy then
66470: LD_VAR 0 1
66474: NOT
66475: IFTRUE 66484
66477: PUSH
66478: LD_VAR 0 2
66482: NOT
66483: OR
66484: IFFALSE 66488
// exit ;
66486: GO 66614
// x := GetX ( enemy ) ;
66488: LD_ADDR_VAR 0 4
66492: PUSH
66493: LD_VAR 0 2
66497: PPUSH
66498: CALL_OW 250
66502: ST_TO_ADDR
// y := GetY ( enemy ) ;
66503: LD_ADDR_VAR 0 5
66507: PUSH
66508: LD_VAR 0 2
66512: PPUSH
66513: CALL_OW 251
66517: ST_TO_ADDR
// if ValidHex ( x , y ) then
66518: LD_VAR 0 4
66522: PPUSH
66523: LD_VAR 0 5
66527: PPUSH
66528: CALL_OW 488
66532: IFFALSE 66614
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66534: LD_VAR 0 2
66538: PPUSH
66539: CALL_OW 247
66543: PUSH
66544: LD_INT 3
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: IN
66554: IFTRUE 66577
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 255
66566: PPUSH
66567: LD_VAR 0 2
66571: PPUSH
66572: CALL_OW 292
66576: OR
66577: IFFALSE 66595
// ComAttackUnit ( unit , enemy ) else
66579: LD_VAR 0 1
66583: PPUSH
66584: LD_VAR 0 2
66588: PPUSH
66589: CALL_OW 115
66593: GO 66614
// ComAgressiveMove ( unit , x , y ) ;
66595: LD_VAR 0 1
66599: PPUSH
66600: LD_VAR 0 4
66604: PPUSH
66605: LD_VAR 0 5
66609: PPUSH
66610: CALL_OW 114
// end ;
66614: LD_VAR 0 3
66618: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66619: LD_INT 0
66621: PPUSH
66622: PPUSH
66623: PPUSH
// list := AreaToList ( area , 0 ) ;
66624: LD_ADDR_VAR 0 5
66628: PUSH
66629: LD_VAR 0 1
66633: PPUSH
66634: LD_INT 0
66636: PPUSH
66637: CALL_OW 517
66641: ST_TO_ADDR
// if not list then
66642: LD_VAR 0 5
66646: NOT
66647: IFFALSE 66651
// exit ;
66649: GO 66781
// if all then
66651: LD_VAR 0 2
66655: IFFALSE 66743
// begin for i := 1 to list [ 1 ] do
66657: LD_ADDR_VAR 0 4
66661: PUSH
66662: DOUBLE
66663: LD_INT 1
66665: DEC
66666: ST_TO_ADDR
66667: LD_VAR 0 5
66671: PUSH
66672: LD_INT 1
66674: ARRAY
66675: PUSH
66676: FOR_TO
66677: IFFALSE 66739
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66679: LD_ADDR_VAR 0 3
66683: PUSH
66684: LD_VAR 0 3
66688: PPUSH
66689: LD_VAR 0 3
66693: PUSH
66694: LD_INT 1
66696: PLUS
66697: PPUSH
66698: LD_VAR 0 5
66702: PUSH
66703: LD_INT 1
66705: ARRAY
66706: PUSH
66707: LD_VAR 0 4
66711: ARRAY
66712: PUSH
66713: LD_VAR 0 5
66717: PUSH
66718: LD_INT 2
66720: ARRAY
66721: PUSH
66722: LD_VAR 0 4
66726: ARRAY
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PPUSH
66732: CALL_OW 1
66736: ST_TO_ADDR
66737: GO 66676
66739: POP
66740: POP
// exit ;
66741: GO 66781
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
66743: LD_ADDR_VAR 0 3
66747: PUSH
66748: LD_VAR 0 5
66752: PUSH
66753: LD_INT 1
66755: ARRAY
66756: PUSH
66757: LD_INT 1
66759: ARRAY
66760: PUSH
66761: LD_VAR 0 5
66765: PUSH
66766: LD_INT 2
66768: ARRAY
66769: PUSH
66770: LD_INT 1
66772: ARRAY
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: EMPTY
66779: LIST
66780: ST_TO_ADDR
// end ;
66781: LD_VAR 0 3
66785: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
66786: LD_INT 0
66788: PPUSH
66789: PPUSH
// list := AreaToList ( area , 0 ) ;
66790: LD_ADDR_VAR 0 4
66794: PUSH
66795: LD_VAR 0 1
66799: PPUSH
66800: LD_INT 0
66802: PPUSH
66803: CALL_OW 517
66807: ST_TO_ADDR
// if not list then
66808: LD_VAR 0 4
66812: NOT
66813: IFFALSE 66817
// exit ;
66815: GO 66858
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
66817: LD_ADDR_VAR 0 3
66821: PUSH
66822: LD_VAR 0 4
66826: PUSH
66827: LD_INT 1
66829: ARRAY
66830: PUSH
66831: LD_INT 1
66833: ARRAY
66834: PUSH
66835: LD_VAR 0 4
66839: PUSH
66840: LD_INT 2
66842: ARRAY
66843: PUSH
66844: LD_INT 1
66846: ARRAY
66847: PUSH
66848: LD_VAR 0 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: ST_TO_ADDR
// end ;
66858: LD_VAR 0 3
66862: RET
// export function First ( array ) ; begin
66863: LD_INT 0
66865: PPUSH
// if not array then
66866: LD_VAR 0 1
66870: NOT
66871: IFFALSE 66875
// exit ;
66873: GO 66889
// result := array [ 1 ] ;
66875: LD_ADDR_VAR 0 2
66879: PUSH
66880: LD_VAR 0 1
66884: PUSH
66885: LD_INT 1
66887: ARRAY
66888: ST_TO_ADDR
// end ;
66889: LD_VAR 0 2
66893: RET
// export function Last ( array ) ; begin
66894: LD_INT 0
66896: PPUSH
// if not array then
66897: LD_VAR 0 1
66901: NOT
66902: IFFALSE 66906
// exit ;
66904: GO 66922
// result := array [ array ] ;
66906: LD_ADDR_VAR 0 2
66910: PUSH
66911: LD_VAR 0 1
66915: PUSH
66916: LD_VAR 0 1
66920: ARRAY
66921: ST_TO_ADDR
// end ;
66922: LD_VAR 0 2
66926: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
66927: LD_INT 0
66929: PPUSH
66930: PPUSH
// result := [ ] ;
66931: LD_ADDR_VAR 0 5
66935: PUSH
66936: EMPTY
66937: ST_TO_ADDR
// if not array then
66938: LD_VAR 0 1
66942: NOT
66943: IFFALSE 66947
// exit ;
66945: GO 67059
// for i := 1 to array do
66947: LD_ADDR_VAR 0 6
66951: PUSH
66952: DOUBLE
66953: LD_INT 1
66955: DEC
66956: ST_TO_ADDR
66957: LD_VAR 0 1
66961: PUSH
66962: FOR_TO
66963: IFFALSE 67057
// if array [ i ] [ index ] = value then
66965: LD_VAR 0 1
66969: PUSH
66970: LD_VAR 0 6
66974: ARRAY
66975: PUSH
66976: LD_VAR 0 2
66980: ARRAY
66981: PUSH
66982: LD_VAR 0 3
66986: EQUAL
66987: IFFALSE 67055
// begin if indexColumn then
66989: LD_VAR 0 4
66993: IFFALSE 67029
// result := Join ( result , array [ i ] [ indexColumn ] ) else
66995: LD_ADDR_VAR 0 5
66999: PUSH
67000: LD_VAR 0 5
67004: PPUSH
67005: LD_VAR 0 1
67009: PUSH
67010: LD_VAR 0 6
67014: ARRAY
67015: PUSH
67016: LD_VAR 0 4
67020: ARRAY
67021: PPUSH
67022: CALL 62067 0 2
67026: ST_TO_ADDR
67027: GO 67055
// result := Join ( result , array [ i ] ) ;
67029: LD_ADDR_VAR 0 5
67033: PUSH
67034: LD_VAR 0 5
67038: PPUSH
67039: LD_VAR 0 1
67043: PUSH
67044: LD_VAR 0 6
67048: ARRAY
67049: PPUSH
67050: CALL 62067 0 2
67054: ST_TO_ADDR
// end ;
67055: GO 66962
67057: POP
67058: POP
// end ;
67059: LD_VAR 0 5
67063: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67064: LD_INT 0
67066: PPUSH
// if not vehicles or not parkingPoint then
67067: LD_VAR 0 1
67071: NOT
67072: IFTRUE 67081
67074: PUSH
67075: LD_VAR 0 2
67079: NOT
67080: OR
67081: IFFALSE 67085
// exit ;
67083: GO 67183
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67085: LD_ADDR_VAR 0 1
67089: PUSH
67090: LD_VAR 0 1
67094: PPUSH
67095: LD_INT 50
67097: PUSH
67098: EMPTY
67099: LIST
67100: PUSH
67101: LD_INT 3
67103: PUSH
67104: LD_INT 92
67106: PUSH
67107: LD_VAR 0 2
67111: PUSH
67112: LD_INT 1
67114: ARRAY
67115: PUSH
67116: LD_VAR 0 2
67120: PUSH
67121: LD_INT 2
67123: ARRAY
67124: PUSH
67125: LD_INT 8
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PPUSH
67142: CALL_OW 72
67146: ST_TO_ADDR
// if not vehicles then
67147: LD_VAR 0 1
67151: NOT
67152: IFFALSE 67156
// exit ;
67154: GO 67183
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67156: LD_VAR 0 1
67160: PPUSH
67161: LD_VAR 0 2
67165: PUSH
67166: LD_INT 1
67168: ARRAY
67169: PPUSH
67170: LD_VAR 0 2
67174: PUSH
67175: LD_INT 2
67177: ARRAY
67178: PPUSH
67179: CALL_OW 111
// end ;
67183: LD_VAR 0 3
67187: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67188: LD_INT 0
67190: PPUSH
67191: PPUSH
67192: PPUSH
// if not side or not area then
67193: LD_VAR 0 1
67197: NOT
67198: IFTRUE 67207
67200: PUSH
67201: LD_VAR 0 2
67205: NOT
67206: OR
67207: IFFALSE 67211
// exit ;
67209: GO 67330
// tmp := AreaToList ( area , 0 ) ;
67211: LD_ADDR_VAR 0 5
67215: PUSH
67216: LD_VAR 0 2
67220: PPUSH
67221: LD_INT 0
67223: PPUSH
67224: CALL_OW 517
67228: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67229: LD_ADDR_VAR 0 4
67233: PUSH
67234: DOUBLE
67235: LD_INT 1
67237: DEC
67238: ST_TO_ADDR
67239: LD_VAR 0 5
67243: PUSH
67244: LD_INT 1
67246: ARRAY
67247: PUSH
67248: FOR_TO
67249: IFFALSE 67328
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67251: LD_VAR 0 5
67255: PUSH
67256: LD_INT 1
67258: ARRAY
67259: PUSH
67260: LD_VAR 0 4
67264: ARRAY
67265: PPUSH
67266: LD_VAR 0 5
67270: PUSH
67271: LD_INT 2
67273: ARRAY
67274: PUSH
67275: LD_VAR 0 4
67279: ARRAY
67280: PPUSH
67281: CALL_OW 351
67285: IFFALSE 67326
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67287: LD_VAR 0 5
67291: PUSH
67292: LD_INT 1
67294: ARRAY
67295: PUSH
67296: LD_VAR 0 4
67300: ARRAY
67301: PPUSH
67302: LD_VAR 0 5
67306: PUSH
67307: LD_INT 2
67309: ARRAY
67310: PUSH
67311: LD_VAR 0 4
67315: ARRAY
67316: PPUSH
67317: LD_VAR 0 1
67321: PPUSH
67322: CALL_OW 244
// end ;
67326: GO 67248
67328: POP
67329: POP
// end ;
67330: LD_VAR 0 3
67334: RET
// export function UniqueArray ( array ) ; var i ; begin
67335: LD_INT 0
67337: PPUSH
67338: PPUSH
// result := [ ] ;
67339: LD_ADDR_VAR 0 2
67343: PUSH
67344: EMPTY
67345: ST_TO_ADDR
// if not array then
67346: LD_VAR 0 1
67350: NOT
67351: IFFALSE 67355
// exit ;
67353: GO 67416
// for i := 1 to array do
67355: LD_ADDR_VAR 0 3
67359: PUSH
67360: DOUBLE
67361: LD_INT 1
67363: DEC
67364: ST_TO_ADDR
67365: LD_VAR 0 1
67369: PUSH
67370: FOR_TO
67371: IFFALSE 67414
// if not array [ i ] in result then
67373: LD_VAR 0 1
67377: PUSH
67378: LD_VAR 0 3
67382: ARRAY
67383: PUSH
67384: LD_VAR 0 2
67388: IN
67389: NOT
67390: IFFALSE 67412
// result := Join ( result , i ) ;
67392: LD_ADDR_VAR 0 2
67396: PUSH
67397: LD_VAR 0 2
67401: PPUSH
67402: LD_VAR 0 3
67406: PPUSH
67407: CALL 62067 0 2
67411: ST_TO_ADDR
67412: GO 67370
67414: POP
67415: POP
// end ;
67416: LD_VAR 0 2
67420: RET
