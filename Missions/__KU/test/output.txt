// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2757 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3221 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3221 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16090 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16347 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 61354 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
1517: LD_STRING displayDifficulty(
1519: PUSH
1520: LD_OWVAR 67
1524: STR
1525: PUSH
1526: LD_STRING )
1528: STR
1529: PPUSH
1530: CALL_OW 559
// end ;
1534: LD_VAR 0 1
1538: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1539: LD_INT 0
1541: PPUSH
// if p2 = stream_mode then
1542: LD_VAR 0 2
1546: PUSH
1547: LD_INT 100
1549: EQUAL
1550: IFFALSE 2553
// begin if not StreamModeActive then
1552: LD_EXP 3
1556: NOT
1557: IFFALSE 1567
// StreamModeActive := true ;
1559: LD_ADDR_EXP 3
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// if p3 = 0 then
1567: LD_VAR 0 3
1571: PUSH
1572: LD_INT 0
1574: EQUAL
1575: IFFALSE 1581
// InitStreamMode ;
1577: CALL 2757 0 0
// if p3 = 1 then
1581: LD_VAR 0 3
1585: PUSH
1586: LD_INT 1
1588: EQUAL
1589: IFFALSE 1599
// sRocket := true ;
1591: LD_ADDR_EXP 8
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// if p3 = 2 then
1599: LD_VAR 0 3
1603: PUSH
1604: LD_INT 2
1606: EQUAL
1607: IFFALSE 1617
// sSpeed := true ;
1609: LD_ADDR_EXP 7
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// if p3 = 3 then
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 3
1624: EQUAL
1625: IFFALSE 1635
// sEngine := true ;
1627: LD_ADDR_EXP 9
1631: PUSH
1632: LD_INT 1
1634: ST_TO_ADDR
// if p3 = 4 then
1635: LD_VAR 0 3
1639: PUSH
1640: LD_INT 4
1642: EQUAL
1643: IFFALSE 1653
// sSpec := true ;
1645: LD_ADDR_EXP 6
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// if p3 = 5 then
1653: LD_VAR 0 3
1657: PUSH
1658: LD_INT 5
1660: EQUAL
1661: IFFALSE 1671
// sLevel := true ;
1663: LD_ADDR_EXP 10
1667: PUSH
1668: LD_INT 1
1670: ST_TO_ADDR
// if p3 = 6 then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 6
1678: EQUAL
1679: IFFALSE 1689
// sArmoury := true ;
1681: LD_ADDR_EXP 11
1685: PUSH
1686: LD_INT 1
1688: ST_TO_ADDR
// if p3 = 7 then
1689: LD_VAR 0 3
1693: PUSH
1694: LD_INT 7
1696: EQUAL
1697: IFFALSE 1707
// sRadar := true ;
1699: LD_ADDR_EXP 12
1703: PUSH
1704: LD_INT 1
1706: ST_TO_ADDR
// if p3 = 8 then
1707: LD_VAR 0 3
1711: PUSH
1712: LD_INT 8
1714: EQUAL
1715: IFFALSE 1725
// sBunker := true ;
1717: LD_ADDR_EXP 13
1721: PUSH
1722: LD_INT 1
1724: ST_TO_ADDR
// if p3 = 9 then
1725: LD_VAR 0 3
1729: PUSH
1730: LD_INT 9
1732: EQUAL
1733: IFFALSE 1743
// sHack := true ;
1735: LD_ADDR_EXP 14
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// if p3 = 10 then
1743: LD_VAR 0 3
1747: PUSH
1748: LD_INT 10
1750: EQUAL
1751: IFFALSE 1761
// sFire := true ;
1753: LD_ADDR_EXP 15
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// if p3 = 11 then
1761: LD_VAR 0 3
1765: PUSH
1766: LD_INT 11
1768: EQUAL
1769: IFFALSE 1779
// sRefresh := true ;
1771: LD_ADDR_EXP 16
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// if p3 = 12 then
1779: LD_VAR 0 3
1783: PUSH
1784: LD_INT 12
1786: EQUAL
1787: IFFALSE 1797
// sExp := true ;
1789: LD_ADDR_EXP 17
1793: PUSH
1794: LD_INT 1
1796: ST_TO_ADDR
// if p3 = 13 then
1797: LD_VAR 0 3
1801: PUSH
1802: LD_INT 13
1804: EQUAL
1805: IFFALSE 1815
// sDepot := true ;
1807: LD_ADDR_EXP 18
1811: PUSH
1812: LD_INT 1
1814: ST_TO_ADDR
// if p3 = 14 then
1815: LD_VAR 0 3
1819: PUSH
1820: LD_INT 14
1822: EQUAL
1823: IFFALSE 1833
// sFlag := true ;
1825: LD_ADDR_EXP 19
1829: PUSH
1830: LD_INT 1
1832: ST_TO_ADDR
// if p3 = 15 then
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 15
1840: EQUAL
1841: IFFALSE 1851
// sKamikadze := true ;
1843: LD_ADDR_EXP 27
1847: PUSH
1848: LD_INT 1
1850: ST_TO_ADDR
// if p3 = 16 then
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 16
1858: EQUAL
1859: IFFALSE 1869
// sTroll := true ;
1861: LD_ADDR_EXP 28
1865: PUSH
1866: LD_INT 1
1868: ST_TO_ADDR
// if p3 = 17 then
1869: LD_VAR 0 3
1873: PUSH
1874: LD_INT 17
1876: EQUAL
1877: IFFALSE 1887
// sSlow := true ;
1879: LD_ADDR_EXP 29
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// if p3 = 18 then
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 18
1894: EQUAL
1895: IFFALSE 1905
// sLack := true ;
1897: LD_ADDR_EXP 30
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if p3 = 19 then
1905: LD_VAR 0 3
1909: PUSH
1910: LD_INT 19
1912: EQUAL
1913: IFFALSE 1923
// sTank := true ;
1915: LD_ADDR_EXP 32
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// if p3 = 20 then
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 20
1930: EQUAL
1931: IFFALSE 1941
// sRemote := true ;
1933: LD_ADDR_EXP 33
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// if p3 = 21 then
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 21
1948: EQUAL
1949: IFFALSE 1959
// sPowell := true ;
1951: LD_ADDR_EXP 34
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 22 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 22
1966: EQUAL
1967: IFFALSE 1977
// sTeleport := true ;
1969: LD_ADDR_EXP 37
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// if p3 = 23 then
1977: LD_VAR 0 3
1981: PUSH
1982: LD_INT 23
1984: EQUAL
1985: IFFALSE 1995
// sOilTower := true ;
1987: LD_ADDR_EXP 39
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if p3 = 24 then
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 24
2002: EQUAL
2003: IFFALSE 2013
// sShovel := true ;
2005: LD_ADDR_EXP 40
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 25 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 25
2020: EQUAL
2021: IFFALSE 2031
// sSheik := true ;
2023: LD_ADDR_EXP 41
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 26 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 26
2038: EQUAL
2039: IFFALSE 2049
// sEarthquake := true ;
2041: LD_ADDR_EXP 43
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 27 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 27
2056: EQUAL
2057: IFFALSE 2067
// sAI := true ;
2059: LD_ADDR_EXP 44
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 28 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 28
2074: EQUAL
2075: IFFALSE 2085
// sCargo := true ;
2077: LD_ADDR_EXP 47
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 29 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 29
2092: EQUAL
2093: IFFALSE 2103
// sDLaser := true ;
2095: LD_ADDR_EXP 48
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 30 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 30
2110: EQUAL
2111: IFFALSE 2121
// sExchange := true ;
2113: LD_ADDR_EXP 49
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 31 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 31
2128: EQUAL
2129: IFFALSE 2139
// sFac := true ;
2131: LD_ADDR_EXP 50
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 32 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 32
2146: EQUAL
2147: IFFALSE 2157
// sPower := true ;
2149: LD_ADDR_EXP 51
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 33 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 33
2164: EQUAL
2165: IFFALSE 2175
// sRandom := true ;
2167: LD_ADDR_EXP 52
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 34 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 34
2182: EQUAL
2183: IFFALSE 2193
// sShield := true ;
2185: LD_ADDR_EXP 53
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 35 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 35
2200: EQUAL
2201: IFFALSE 2211
// sTime := true ;
2203: LD_ADDR_EXP 54
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 36 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 36
2218: EQUAL
2219: IFFALSE 2229
// sTools := true ;
2221: LD_ADDR_EXP 55
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 101 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 101
2236: EQUAL
2237: IFFALSE 2247
// sSold := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 102 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 102
2254: EQUAL
2255: IFFALSE 2265
// sDiff := true ;
2257: LD_ADDR_EXP 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 103 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 103
2272: EQUAL
2273: IFFALSE 2283
// sFog := true ;
2275: LD_ADDR_EXP 24
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 104 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 104
2290: EQUAL
2291: IFFALSE 2301
// sReset := true ;
2293: LD_ADDR_EXP 25
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 105 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 105
2308: EQUAL
2309: IFFALSE 2319
// sSun := true ;
2311: LD_ADDR_EXP 26
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 106 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 106
2326: EQUAL
2327: IFFALSE 2337
// sTiger := true ;
2329: LD_ADDR_EXP 22
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 107 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 107
2344: EQUAL
2345: IFFALSE 2355
// sBomb := true ;
2347: LD_ADDR_EXP 23
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 108 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 108
2362: EQUAL
2363: IFFALSE 2373
// sWound := true ;
2365: LD_ADDR_EXP 31
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 109 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 109
2380: EQUAL
2381: IFFALSE 2391
// sBetray := true ;
2383: LD_ADDR_EXP 35
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 110 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 110
2398: EQUAL
2399: IFFALSE 2409
// sContamin := true ;
2401: LD_ADDR_EXP 36
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 111 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 111
2416: EQUAL
2417: IFFALSE 2427
// sOil := true ;
2419: LD_ADDR_EXP 38
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 112 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 112
2434: EQUAL
2435: IFFALSE 2445
// sStu := true ;
2437: LD_ADDR_EXP 42
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 113 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 113
2452: EQUAL
2453: IFFALSE 2463
// sBazooka := true ;
2455: LD_ADDR_EXP 45
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 114 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 114
2470: EQUAL
2471: IFFALSE 2481
// sMortar := true ;
2473: LD_ADDR_EXP 46
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 115 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 115
2488: EQUAL
2489: IFFALSE 2499
// sRanger := true ;
2491: LD_ADDR_EXP 56
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 116 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 116
2506: EQUAL
2507: IFFALSE 2517
// sComputer := true ;
2509: LD_ADDR_EXP 57
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 117 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 117
2524: EQUAL
2525: IFFALSE 2535
// s30 := true ;
2527: LD_ADDR_EXP 58
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 118 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 118
2542: EQUAL
2543: IFFALSE 2553
// s60 := true ;
2545: LD_ADDR_EXP 59
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// end ; if p2 = hack_mode then
2553: LD_VAR 0 2
2557: PUSH
2558: LD_INT 101
2560: EQUAL
2561: IFFALSE 2689
// begin case p3 of 1 :
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 1
2570: DOUBLE
2571: EQUAL
2572: IFTRUE 2576
2574: GO 2583
2576: POP
// hHackUnlimitedResources ; 2 :
2577: CALL 14836 0 0
2581: GO 2689
2583: LD_INT 2
2585: DOUBLE
2586: EQUAL
2587: IFTRUE 2591
2589: GO 2598
2591: POP
// hHackSetLevel10 ; 3 :
2592: CALL 14969 0 0
2596: GO 2689
2598: LD_INT 3
2600: DOUBLE
2601: EQUAL
2602: IFTRUE 2606
2604: GO 2613
2606: POP
// hHackSetLevel10YourUnits ; 4 :
2607: CALL 15054 0 0
2611: GO 2689
2613: LD_INT 4
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2628
2621: POP
// hHackInvincible ; 5 :
2622: CALL 15502 0 0
2626: GO 2689
2628: LD_INT 5
2630: DOUBLE
2631: EQUAL
2632: IFTRUE 2636
2634: GO 2643
2636: POP
// hHackInvisible ; 6 :
2637: CALL 15613 0 0
2641: GO 2689
2643: LD_INT 6
2645: DOUBLE
2646: EQUAL
2647: IFTRUE 2651
2649: GO 2658
2651: POP
// hHackChangeYourSide ; 7 :
2652: CALL 15670 0 0
2656: GO 2689
2658: LD_INT 7
2660: DOUBLE
2661: EQUAL
2662: IFTRUE 2666
2664: GO 2673
2666: POP
// hHackChangeUnitSide ; 8 :
2667: CALL 15712 0 0
2671: GO 2689
2673: LD_INT 8
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2688
2681: POP
// hHackFog ; end ;
2682: CALL 15813 0 0
2686: GO 2689
2688: POP
// end ; if p2 = game_save_mode then
2689: LD_VAR 0 2
2693: PUSH
2694: LD_INT 102
2696: EQUAL
2697: IFFALSE 2752
// begin if p3 = 1 then
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: IFFALSE 2719
// globalGameSaveCounter := p4 ;
2709: LD_ADDR_EXP 2
2713: PUSH
2714: LD_VAR 0 4
2718: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 2
2726: EQUAL
2727: PUSH
2728: LD_EXP 2
2732: AND
2733: IFFALSE 2752
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2735: LD_STRING setGameSaveCounter(
2737: PUSH
2738: LD_EXP 2
2742: STR
2743: PUSH
2744: LD_STRING )
2746: STR
2747: PPUSH
2748: CALL_OW 559
// end ; end ;
2752: LD_VAR 0 7
2756: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2757: LD_INT 0
2759: PPUSH
// streamModeActive := false ;
2760: LD_ADDR_EXP 3
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// normalCounter := 36 ;
2768: LD_ADDR_EXP 4
2772: PUSH
2773: LD_INT 36
2775: ST_TO_ADDR
// hardcoreCounter := 18 ;
2776: LD_ADDR_EXP 5
2780: PUSH
2781: LD_INT 18
2783: ST_TO_ADDR
// sRocket := false ;
2784: LD_ADDR_EXP 8
2788: PUSH
2789: LD_INT 0
2791: ST_TO_ADDR
// sSpeed := false ;
2792: LD_ADDR_EXP 7
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// sEngine := false ;
2800: LD_ADDR_EXP 9
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// sSpec := false ;
2808: LD_ADDR_EXP 6
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// sLevel := false ;
2816: LD_ADDR_EXP 10
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// sArmoury := false ;
2824: LD_ADDR_EXP 11
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// sRadar := false ;
2832: LD_ADDR_EXP 12
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// sBunker := false ;
2840: LD_ADDR_EXP 13
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// sHack := false ;
2848: LD_ADDR_EXP 14
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// sFire := false ;
2856: LD_ADDR_EXP 15
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// sRefresh := false ;
2864: LD_ADDR_EXP 16
2868: PUSH
2869: LD_INT 0
2871: ST_TO_ADDR
// sExp := false ;
2872: LD_ADDR_EXP 17
2876: PUSH
2877: LD_INT 0
2879: ST_TO_ADDR
// sDepot := false ;
2880: LD_ADDR_EXP 18
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// sFlag := false ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 0
2895: ST_TO_ADDR
// sKamikadze := false ;
2896: LD_ADDR_EXP 27
2900: PUSH
2901: LD_INT 0
2903: ST_TO_ADDR
// sTroll := false ;
2904: LD_ADDR_EXP 28
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// sSlow := false ;
2912: LD_ADDR_EXP 29
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// sLack := false ;
2920: LD_ADDR_EXP 30
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// sTank := false ;
2928: LD_ADDR_EXP 32
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// sRemote := false ;
2936: LD_ADDR_EXP 33
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// sPowell := false ;
2944: LD_ADDR_EXP 34
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
// sTeleport := false ;
2952: LD_ADDR_EXP 37
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// sOilTower := false ;
2960: LD_ADDR_EXP 39
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// sShovel := false ;
2968: LD_ADDR_EXP 40
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// sSheik := false ;
2976: LD_ADDR_EXP 41
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// sEarthquake := false ;
2984: LD_ADDR_EXP 43
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// sAI := false ;
2992: LD_ADDR_EXP 44
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// sCargo := false ;
3000: LD_ADDR_EXP 47
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// sDLaser := false ;
3008: LD_ADDR_EXP 48
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// sExchange := false ;
3016: LD_ADDR_EXP 49
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// sFac := false ;
3024: LD_ADDR_EXP 50
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// sPower := false ;
3032: LD_ADDR_EXP 51
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// sRandom := false ;
3040: LD_ADDR_EXP 52
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// sShield := false ;
3048: LD_ADDR_EXP 53
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// sTime := false ;
3056: LD_ADDR_EXP 54
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// sTools := false ;
3064: LD_ADDR_EXP 55
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// sSold := false ;
3072: LD_ADDR_EXP 20
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// sDiff := false ;
3080: LD_ADDR_EXP 21
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// sFog := false ;
3088: LD_ADDR_EXP 24
3092: PUSH
3093: LD_INT 0
3095: ST_TO_ADDR
// sReset := false ;
3096: LD_ADDR_EXP 25
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// sSun := false ;
3104: LD_ADDR_EXP 26
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// sTiger := false ;
3112: LD_ADDR_EXP 22
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// sBomb := false ;
3120: LD_ADDR_EXP 23
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sWound := false ;
3128: LD_ADDR_EXP 31
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sBetray := false ;
3136: LD_ADDR_EXP 35
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sContamin := false ;
3144: LD_ADDR_EXP 36
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sOil := false ;
3152: LD_ADDR_EXP 38
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sStu := false ;
3160: LD_ADDR_EXP 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sBazooka := false ;
3168: LD_ADDR_EXP 45
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sMortar := false ;
3176: LD_ADDR_EXP 46
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sRanger := false ;
3184: LD_ADDR_EXP 56
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sComputer := false ;
3192: LD_ADDR_EXP 57
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// s30 := false ;
3200: LD_ADDR_EXP 58
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// s60 := false ;
3208: LD_ADDR_EXP 59
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// end ;
3216: LD_VAR 0 1
3220: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
// result := [ ] ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: EMPTY
3236: ST_TO_ADDR
// if campaign_id = 1 then
3237: LD_OWVAR 69
3241: PUSH
3242: LD_INT 1
3244: EQUAL
3245: IFFALSE 6411
// begin case mission_number of 1 :
3247: LD_OWVAR 70
3251: PUSH
3252: LD_INT 1
3254: DOUBLE
3255: EQUAL
3256: IFTRUE 3260
3258: GO 3336
3260: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: LD_INT 2
3268: PUSH
3269: LD_INT 4
3271: PUSH
3272: LD_INT 11
3274: PUSH
3275: LD_INT 12
3277: PUSH
3278: LD_INT 15
3280: PUSH
3281: LD_INT 16
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 23
3289: PUSH
3290: LD_INT 26
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 101
3306: PUSH
3307: LD_INT 102
3309: PUSH
3310: LD_INT 106
3312: PUSH
3313: LD_INT 116
3315: PUSH
3316: LD_INT 117
3318: PUSH
3319: LD_INT 118
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: ST_TO_ADDR
3334: GO 6409
3336: LD_INT 2
3338: DOUBLE
3339: EQUAL
3340: IFTRUE 3344
3342: GO 3428
3344: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_INT 2
3352: PUSH
3353: LD_INT 4
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 15
3364: PUSH
3365: LD_INT 16
3367: PUSH
3368: LD_INT 22
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 26
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 101
3390: PUSH
3391: LD_INT 102
3393: PUSH
3394: LD_INT 105
3396: PUSH
3397: LD_INT 106
3399: PUSH
3400: LD_INT 108
3402: PUSH
3403: LD_INT 116
3405: PUSH
3406: LD_INT 117
3408: PUSH
3409: LD_INT 118
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: ST_TO_ADDR
3426: GO 6409
3428: LD_INT 3
3430: DOUBLE
3431: EQUAL
3432: IFTRUE 3436
3434: GO 3524
3436: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 11
3453: PUSH
3454: LD_INT 12
3456: PUSH
3457: LD_INT 15
3459: PUSH
3460: LD_INT 16
3462: PUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 26
3468: PUSH
3469: LD_INT 36
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 101
3486: PUSH
3487: LD_INT 102
3489: PUSH
3490: LD_INT 105
3492: PUSH
3493: LD_INT 106
3495: PUSH
3496: LD_INT 108
3498: PUSH
3499: LD_INT 116
3501: PUSH
3502: LD_INT 117
3504: PUSH
3505: LD_INT 118
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: ST_TO_ADDR
3522: GO 6409
3524: LD_INT 4
3526: DOUBLE
3527: EQUAL
3528: IFTRUE 3532
3530: GO 3628
3532: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 11
3552: PUSH
3553: LD_INT 12
3555: PUSH
3556: LD_INT 15
3558: PUSH
3559: LD_INT 16
3561: PUSH
3562: LD_INT 22
3564: PUSH
3565: LD_INT 23
3567: PUSH
3568: LD_INT 26
3570: PUSH
3571: LD_INT 36
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 101
3590: PUSH
3591: LD_INT 102
3593: PUSH
3594: LD_INT 105
3596: PUSH
3597: LD_INT 106
3599: PUSH
3600: LD_INT 108
3602: PUSH
3603: LD_INT 116
3605: PUSH
3606: LD_INT 117
3608: PUSH
3609: LD_INT 118
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: ST_TO_ADDR
3626: GO 6409
3628: LD_INT 5
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3636
3634: GO 3748
3636: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 4
3647: PUSH
3648: LD_INT 5
3650: PUSH
3651: LD_INT 6
3653: PUSH
3654: LD_INT 8
3656: PUSH
3657: LD_INT 11
3659: PUSH
3660: LD_INT 12
3662: PUSH
3663: LD_INT 15
3665: PUSH
3666: LD_INT 16
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 23
3674: PUSH
3675: LD_INT 25
3677: PUSH
3678: LD_INT 26
3680: PUSH
3681: LD_INT 36
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 101
3702: PUSH
3703: LD_INT 102
3705: PUSH
3706: LD_INT 105
3708: PUSH
3709: LD_INT 106
3711: PUSH
3712: LD_INT 108
3714: PUSH
3715: LD_INT 109
3717: PUSH
3718: LD_INT 112
3720: PUSH
3721: LD_INT 116
3723: PUSH
3724: LD_INT 117
3726: PUSH
3727: LD_INT 118
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: ST_TO_ADDR
3746: GO 6409
3748: LD_INT 6
3750: DOUBLE
3751: EQUAL
3752: IFTRUE 3756
3754: GO 3888
3756: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: LD_INT 5
3770: PUSH
3771: LD_INT 6
3773: PUSH
3774: LD_INT 8
3776: PUSH
3777: LD_INT 11
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: LD_INT 15
3785: PUSH
3786: LD_INT 16
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 25
3803: PUSH
3804: LD_INT 26
3806: PUSH
3807: LD_INT 30
3809: PUSH
3810: LD_INT 31
3812: PUSH
3813: LD_INT 32
3815: PUSH
3816: LD_INT 36
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 101
3842: PUSH
3843: LD_INT 102
3845: PUSH
3846: LD_INT 105
3848: PUSH
3849: LD_INT 106
3851: PUSH
3852: LD_INT 108
3854: PUSH
3855: LD_INT 109
3857: PUSH
3858: LD_INT 112
3860: PUSH
3861: LD_INT 116
3863: PUSH
3864: LD_INT 117
3866: PUSH
3867: LD_INT 118
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 6409
3888: LD_INT 7
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4008
3896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 4
3907: PUSH
3908: LD_INT 5
3910: PUSH
3911: LD_INT 7
3913: PUSH
3914: LD_INT 11
3916: PUSH
3917: LD_INT 12
3919: PUSH
3920: LD_INT 15
3922: PUSH
3923: LD_INT 16
3925: PUSH
3926: LD_INT 20
3928: PUSH
3929: LD_INT 21
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 23
3937: PUSH
3938: LD_INT 25
3940: PUSH
3941: LD_INT 26
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 101
3962: PUSH
3963: LD_INT 102
3965: PUSH
3966: LD_INT 103
3968: PUSH
3969: LD_INT 105
3971: PUSH
3972: LD_INT 106
3974: PUSH
3975: LD_INT 108
3977: PUSH
3978: LD_INT 112
3980: PUSH
3981: LD_INT 116
3983: PUSH
3984: LD_INT 117
3986: PUSH
3987: LD_INT 118
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: ST_TO_ADDR
4006: GO 6409
4008: LD_INT 8
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4156
4016: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: LD_INT 6
4033: PUSH
4034: LD_INT 7
4036: PUSH
4037: LD_INT 8
4039: PUSH
4040: LD_INT 11
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: LD_INT 15
4048: PUSH
4049: LD_INT 16
4051: PUSH
4052: LD_INT 20
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 23
4063: PUSH
4064: LD_INT 25
4066: PUSH
4067: LD_INT 26
4069: PUSH
4070: LD_INT 30
4072: PUSH
4073: LD_INT 31
4075: PUSH
4076: LD_INT 32
4078: PUSH
4079: LD_INT 36
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 101
4106: PUSH
4107: LD_INT 102
4109: PUSH
4110: LD_INT 103
4112: PUSH
4113: LD_INT 105
4115: PUSH
4116: LD_INT 106
4118: PUSH
4119: LD_INT 108
4121: PUSH
4122: LD_INT 109
4124: PUSH
4125: LD_INT 112
4127: PUSH
4128: LD_INT 116
4130: PUSH
4131: LD_INT 117
4133: PUSH
4134: LD_INT 118
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 6409
4156: LD_INT 9
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4312
4164: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: LD_INT 2
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: LD_INT 5
4178: PUSH
4179: LD_INT 6
4181: PUSH
4182: LD_INT 7
4184: PUSH
4185: LD_INT 8
4187: PUSH
4188: LD_INT 11
4190: PUSH
4191: LD_INT 12
4193: PUSH
4194: LD_INT 15
4196: PUSH
4197: LD_INT 16
4199: PUSH
4200: LD_INT 20
4202: PUSH
4203: LD_INT 21
4205: PUSH
4206: LD_INT 22
4208: PUSH
4209: LD_INT 23
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 26
4217: PUSH
4218: LD_INT 28
4220: PUSH
4221: LD_INT 30
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 32
4229: PUSH
4230: LD_INT 36
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 101
4258: PUSH
4259: LD_INT 102
4261: PUSH
4262: LD_INT 103
4264: PUSH
4265: LD_INT 105
4267: PUSH
4268: LD_INT 106
4270: PUSH
4271: LD_INT 108
4273: PUSH
4274: LD_INT 109
4276: PUSH
4277: LD_INT 112
4279: PUSH
4280: LD_INT 114
4282: PUSH
4283: LD_INT 116
4285: PUSH
4286: LD_INT 117
4288: PUSH
4289: LD_INT 118
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: ST_TO_ADDR
4310: GO 6409
4312: LD_INT 10
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4516
4320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 4
4331: PUSH
4332: LD_INT 5
4334: PUSH
4335: LD_INT 6
4337: PUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 8
4343: PUSH
4344: LD_INT 9
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: LD_INT 11
4352: PUSH
4353: LD_INT 12
4355: PUSH
4356: LD_INT 13
4358: PUSH
4359: LD_INT 14
4361: PUSH
4362: LD_INT 15
4364: PUSH
4365: LD_INT 16
4367: PUSH
4368: LD_INT 17
4370: PUSH
4371: LD_INT 18
4373: PUSH
4374: LD_INT 19
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 24
4391: PUSH
4392: LD_INT 25
4394: PUSH
4395: LD_INT 26
4397: PUSH
4398: LD_INT 28
4400: PUSH
4401: LD_INT 30
4403: PUSH
4404: LD_INT 31
4406: PUSH
4407: LD_INT 32
4409: PUSH
4410: LD_INT 36
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 101
4446: PUSH
4447: LD_INT 102
4449: PUSH
4450: LD_INT 103
4452: PUSH
4453: LD_INT 104
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: LD_INT 107
4464: PUSH
4465: LD_INT 108
4467: PUSH
4468: LD_INT 109
4470: PUSH
4471: LD_INT 110
4473: PUSH
4474: LD_INT 111
4476: PUSH
4477: LD_INT 112
4479: PUSH
4480: LD_INT 114
4482: PUSH
4483: LD_INT 116
4485: PUSH
4486: LD_INT 117
4488: PUSH
4489: LD_INT 118
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: ST_TO_ADDR
4514: GO 6409
4516: LD_INT 11
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4728
4524: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 4
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: LD_INT 6
4544: PUSH
4545: LD_INT 7
4547: PUSH
4548: LD_INT 8
4550: PUSH
4551: LD_INT 9
4553: PUSH
4554: LD_INT 10
4556: PUSH
4557: LD_INT 11
4559: PUSH
4560: LD_INT 12
4562: PUSH
4563: LD_INT 13
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 15
4571: PUSH
4572: LD_INT 16
4574: PUSH
4575: LD_INT 17
4577: PUSH
4578: LD_INT 18
4580: PUSH
4581: LD_INT 19
4583: PUSH
4584: LD_INT 20
4586: PUSH
4587: LD_INT 21
4589: PUSH
4590: LD_INT 22
4592: PUSH
4593: LD_INT 23
4595: PUSH
4596: LD_INT 24
4598: PUSH
4599: LD_INT 25
4601: PUSH
4602: LD_INT 26
4604: PUSH
4605: LD_INT 28
4607: PUSH
4608: LD_INT 30
4610: PUSH
4611: LD_INT 31
4613: PUSH
4614: LD_INT 32
4616: PUSH
4617: LD_INT 34
4619: PUSH
4620: LD_INT 36
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 101
4658: PUSH
4659: LD_INT 102
4661: PUSH
4662: LD_INT 103
4664: PUSH
4665: LD_INT 104
4667: PUSH
4668: LD_INT 105
4670: PUSH
4671: LD_INT 106
4673: PUSH
4674: LD_INT 107
4676: PUSH
4677: LD_INT 108
4679: PUSH
4680: LD_INT 109
4682: PUSH
4683: LD_INT 110
4685: PUSH
4686: LD_INT 111
4688: PUSH
4689: LD_INT 112
4691: PUSH
4692: LD_INT 114
4694: PUSH
4695: LD_INT 116
4697: PUSH
4698: LD_INT 117
4700: PUSH
4701: LD_INT 118
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: ST_TO_ADDR
4726: GO 6409
4728: LD_INT 12
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4956
4736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: LD_INT 1
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 5
4756: PUSH
4757: LD_INT 6
4759: PUSH
4760: LD_INT 7
4762: PUSH
4763: LD_INT 8
4765: PUSH
4766: LD_INT 9
4768: PUSH
4769: LD_INT 10
4771: PUSH
4772: LD_INT 11
4774: PUSH
4775: LD_INT 12
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 14
4783: PUSH
4784: LD_INT 15
4786: PUSH
4787: LD_INT 16
4789: PUSH
4790: LD_INT 17
4792: PUSH
4793: LD_INT 18
4795: PUSH
4796: LD_INT 19
4798: PUSH
4799: LD_INT 20
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 22
4807: PUSH
4808: LD_INT 23
4810: PUSH
4811: LD_INT 24
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 27
4822: PUSH
4823: LD_INT 28
4825: PUSH
4826: LD_INT 30
4828: PUSH
4829: LD_INT 31
4831: PUSH
4832: LD_INT 32
4834: PUSH
4835: LD_INT 33
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 36
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 101
4882: PUSH
4883: LD_INT 102
4885: PUSH
4886: LD_INT 103
4888: PUSH
4889: LD_INT 104
4891: PUSH
4892: LD_INT 105
4894: PUSH
4895: LD_INT 106
4897: PUSH
4898: LD_INT 107
4900: PUSH
4901: LD_INT 108
4903: PUSH
4904: LD_INT 109
4906: PUSH
4907: LD_INT 110
4909: PUSH
4910: LD_INT 111
4912: PUSH
4913: LD_INT 112
4915: PUSH
4916: LD_INT 113
4918: PUSH
4919: LD_INT 114
4921: PUSH
4922: LD_INT 116
4924: PUSH
4925: LD_INT 117
4927: PUSH
4928: LD_INT 118
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 6409
4956: LD_INT 13
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 5172
4964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: LD_INT 8
4987: PUSH
4988: LD_INT 9
4990: PUSH
4991: LD_INT 10
4993: PUSH
4994: LD_INT 11
4996: PUSH
4997: LD_INT 12
4999: PUSH
5000: LD_INT 14
5002: PUSH
5003: LD_INT 15
5005: PUSH
5006: LD_INT 16
5008: PUSH
5009: LD_INT 17
5011: PUSH
5012: LD_INT 18
5014: PUSH
5015: LD_INT 19
5017: PUSH
5018: LD_INT 20
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 22
5026: PUSH
5027: LD_INT 23
5029: PUSH
5030: LD_INT 24
5032: PUSH
5033: LD_INT 25
5035: PUSH
5036: LD_INT 26
5038: PUSH
5039: LD_INT 27
5041: PUSH
5042: LD_INT 28
5044: PUSH
5045: LD_INT 30
5047: PUSH
5048: LD_INT 31
5050: PUSH
5051: LD_INT 32
5053: PUSH
5054: LD_INT 33
5056: PUSH
5057: LD_INT 34
5059: PUSH
5060: LD_INT 36
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 101
5098: PUSH
5099: LD_INT 102
5101: PUSH
5102: LD_INT 103
5104: PUSH
5105: LD_INT 104
5107: PUSH
5108: LD_INT 105
5110: PUSH
5111: LD_INT 106
5113: PUSH
5114: LD_INT 107
5116: PUSH
5117: LD_INT 108
5119: PUSH
5120: LD_INT 109
5122: PUSH
5123: LD_INT 110
5125: PUSH
5126: LD_INT 111
5128: PUSH
5129: LD_INT 112
5131: PUSH
5132: LD_INT 113
5134: PUSH
5135: LD_INT 114
5137: PUSH
5138: LD_INT 116
5140: PUSH
5141: LD_INT 117
5143: PUSH
5144: LD_INT 118
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: ST_TO_ADDR
5170: GO 6409
5172: LD_INT 14
5174: DOUBLE
5175: EQUAL
5176: IFTRUE 5180
5178: GO 5404
5180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5181: LD_ADDR_VAR 0 2
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 3
5194: PUSH
5195: LD_INT 4
5197: PUSH
5198: LD_INT 5
5200: PUSH
5201: LD_INT 6
5203: PUSH
5204: LD_INT 7
5206: PUSH
5207: LD_INT 8
5209: PUSH
5210: LD_INT 9
5212: PUSH
5213: LD_INT 10
5215: PUSH
5216: LD_INT 11
5218: PUSH
5219: LD_INT 12
5221: PUSH
5222: LD_INT 13
5224: PUSH
5225: LD_INT 14
5227: PUSH
5228: LD_INT 15
5230: PUSH
5231: LD_INT 16
5233: PUSH
5234: LD_INT 17
5236: PUSH
5237: LD_INT 18
5239: PUSH
5240: LD_INT 19
5242: PUSH
5243: LD_INT 20
5245: PUSH
5246: LD_INT 21
5248: PUSH
5249: LD_INT 22
5251: PUSH
5252: LD_INT 23
5254: PUSH
5255: LD_INT 24
5257: PUSH
5258: LD_INT 25
5260: PUSH
5261: LD_INT 26
5263: PUSH
5264: LD_INT 27
5266: PUSH
5267: LD_INT 28
5269: PUSH
5270: LD_INT 29
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 31
5278: PUSH
5279: LD_INT 32
5281: PUSH
5282: LD_INT 33
5284: PUSH
5285: LD_INT 34
5287: PUSH
5288: LD_INT 36
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 101
5330: PUSH
5331: LD_INT 102
5333: PUSH
5334: LD_INT 103
5336: PUSH
5337: LD_INT 104
5339: PUSH
5340: LD_INT 105
5342: PUSH
5343: LD_INT 106
5345: PUSH
5346: LD_INT 107
5348: PUSH
5349: LD_INT 108
5351: PUSH
5352: LD_INT 109
5354: PUSH
5355: LD_INT 110
5357: PUSH
5358: LD_INT 111
5360: PUSH
5361: LD_INT 112
5363: PUSH
5364: LD_INT 113
5366: PUSH
5367: LD_INT 114
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 117
5375: PUSH
5376: LD_INT 118
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: ST_TO_ADDR
5402: GO 6409
5404: LD_INT 15
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5636
5412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: LD_INT 1
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 3
5426: PUSH
5427: LD_INT 4
5429: PUSH
5430: LD_INT 5
5432: PUSH
5433: LD_INT 6
5435: PUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: LD_INT 11
5450: PUSH
5451: LD_INT 12
5453: PUSH
5454: LD_INT 13
5456: PUSH
5457: LD_INT 14
5459: PUSH
5460: LD_INT 15
5462: PUSH
5463: LD_INT 16
5465: PUSH
5466: LD_INT 17
5468: PUSH
5469: LD_INT 18
5471: PUSH
5472: LD_INT 19
5474: PUSH
5475: LD_INT 20
5477: PUSH
5478: LD_INT 21
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 23
5486: PUSH
5487: LD_INT 24
5489: PUSH
5490: LD_INT 25
5492: PUSH
5493: LD_INT 26
5495: PUSH
5496: LD_INT 27
5498: PUSH
5499: LD_INT 28
5501: PUSH
5502: LD_INT 29
5504: PUSH
5505: LD_INT 30
5507: PUSH
5508: LD_INT 31
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 33
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 36
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 101
5562: PUSH
5563: LD_INT 102
5565: PUSH
5566: LD_INT 103
5568: PUSH
5569: LD_INT 104
5571: PUSH
5572: LD_INT 105
5574: PUSH
5575: LD_INT 106
5577: PUSH
5578: LD_INT 107
5580: PUSH
5581: LD_INT 108
5583: PUSH
5584: LD_INT 109
5586: PUSH
5587: LD_INT 110
5589: PUSH
5590: LD_INT 111
5592: PUSH
5593: LD_INT 112
5595: PUSH
5596: LD_INT 113
5598: PUSH
5599: LD_INT 114
5601: PUSH
5602: LD_INT 116
5604: PUSH
5605: LD_INT 117
5607: PUSH
5608: LD_INT 118
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: ST_TO_ADDR
5634: GO 6409
5636: LD_INT 16
5638: DOUBLE
5639: EQUAL
5640: IFTRUE 5644
5642: GO 5780
5644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: LD_INT 5
5658: PUSH
5659: LD_INT 7
5661: PUSH
5662: LD_INT 11
5664: PUSH
5665: LD_INT 12
5667: PUSH
5668: LD_INT 15
5670: PUSH
5671: LD_INT 16
5673: PUSH
5674: LD_INT 20
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 25
5688: PUSH
5689: LD_INT 26
5691: PUSH
5692: LD_INT 30
5694: PUSH
5695: LD_INT 31
5697: PUSH
5698: LD_INT 32
5700: PUSH
5701: LD_INT 33
5703: PUSH
5704: LD_INT 34
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 101
5730: PUSH
5731: LD_INT 102
5733: PUSH
5734: LD_INT 103
5736: PUSH
5737: LD_INT 106
5739: PUSH
5740: LD_INT 108
5742: PUSH
5743: LD_INT 112
5745: PUSH
5746: LD_INT 113
5748: PUSH
5749: LD_INT 114
5751: PUSH
5752: LD_INT 116
5754: PUSH
5755: LD_INT 117
5757: PUSH
5758: LD_INT 118
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: ST_TO_ADDR
5778: GO 6409
5780: LD_INT 17
5782: DOUBLE
5783: EQUAL
5784: IFTRUE 5788
5786: GO 6012
5788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: LD_INT 4
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: LD_INT 6
5811: PUSH
5812: LD_INT 7
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: LD_INT 9
5820: PUSH
5821: LD_INT 10
5823: PUSH
5824: LD_INT 11
5826: PUSH
5827: LD_INT 12
5829: PUSH
5830: LD_INT 13
5832: PUSH
5833: LD_INT 14
5835: PUSH
5836: LD_INT 15
5838: PUSH
5839: LD_INT 16
5841: PUSH
5842: LD_INT 17
5844: PUSH
5845: LD_INT 18
5847: PUSH
5848: LD_INT 19
5850: PUSH
5851: LD_INT 20
5853: PUSH
5854: LD_INT 21
5856: PUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 23
5862: PUSH
5863: LD_INT 24
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 26
5871: PUSH
5872: LD_INT 27
5874: PUSH
5875: LD_INT 28
5877: PUSH
5878: LD_INT 29
5880: PUSH
5881: LD_INT 30
5883: PUSH
5884: LD_INT 31
5886: PUSH
5887: LD_INT 32
5889: PUSH
5890: LD_INT 33
5892: PUSH
5893: LD_INT 34
5895: PUSH
5896: LD_INT 36
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 101
5938: PUSH
5939: LD_INT 102
5941: PUSH
5942: LD_INT 103
5944: PUSH
5945: LD_INT 104
5947: PUSH
5948: LD_INT 105
5950: PUSH
5951: LD_INT 106
5953: PUSH
5954: LD_INT 107
5956: PUSH
5957: LD_INT 108
5959: PUSH
5960: LD_INT 109
5962: PUSH
5963: LD_INT 110
5965: PUSH
5966: LD_INT 111
5968: PUSH
5969: LD_INT 112
5971: PUSH
5972: LD_INT 113
5974: PUSH
5975: LD_INT 114
5977: PUSH
5978: LD_INT 116
5980: PUSH
5981: LD_INT 117
5983: PUSH
5984: LD_INT 118
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: ST_TO_ADDR
6010: GO 6409
6012: LD_INT 18
6014: DOUBLE
6015: EQUAL
6016: IFTRUE 6020
6018: GO 6168
6020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: LD_INT 5
6034: PUSH
6035: LD_INT 7
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 12
6043: PUSH
6044: LD_INT 15
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 20
6052: PUSH
6053: LD_INT 21
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_INT 23
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 26
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 31
6073: PUSH
6074: LD_INT 32
6076: PUSH
6077: LD_INT 33
6079: PUSH
6080: LD_INT 34
6082: PUSH
6083: LD_INT 35
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 101
6114: PUSH
6115: LD_INT 102
6117: PUSH
6118: LD_INT 103
6120: PUSH
6121: LD_INT 106
6123: PUSH
6124: LD_INT 108
6126: PUSH
6127: LD_INT 112
6129: PUSH
6130: LD_INT 113
6132: PUSH
6133: LD_INT 114
6135: PUSH
6136: LD_INT 115
6138: PUSH
6139: LD_INT 116
6141: PUSH
6142: LD_INT 117
6144: PUSH
6145: LD_INT 118
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: ST_TO_ADDR
6166: GO 6409
6168: LD_INT 19
6170: DOUBLE
6171: EQUAL
6172: IFTRUE 6176
6174: GO 6408
6176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6177: LD_ADDR_VAR 0 2
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: LD_INT 5
6196: PUSH
6197: LD_INT 6
6199: PUSH
6200: LD_INT 7
6202: PUSH
6203: LD_INT 8
6205: PUSH
6206: LD_INT 9
6208: PUSH
6209: LD_INT 10
6211: PUSH
6212: LD_INT 11
6214: PUSH
6215: LD_INT 12
6217: PUSH
6218: LD_INT 13
6220: PUSH
6221: LD_INT 14
6223: PUSH
6224: LD_INT 15
6226: PUSH
6227: LD_INT 16
6229: PUSH
6230: LD_INT 17
6232: PUSH
6233: LD_INT 18
6235: PUSH
6236: LD_INT 19
6238: PUSH
6239: LD_INT 20
6241: PUSH
6242: LD_INT 21
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 23
6250: PUSH
6251: LD_INT 24
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 26
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 28
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 30
6271: PUSH
6272: LD_INT 31
6274: PUSH
6275: LD_INT 32
6277: PUSH
6278: LD_INT 33
6280: PUSH
6281: LD_INT 34
6283: PUSH
6284: LD_INT 35
6286: PUSH
6287: LD_INT 36
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 101
6330: PUSH
6331: LD_INT 102
6333: PUSH
6334: LD_INT 103
6336: PUSH
6337: LD_INT 104
6339: PUSH
6340: LD_INT 105
6342: PUSH
6343: LD_INT 106
6345: PUSH
6346: LD_INT 107
6348: PUSH
6349: LD_INT 108
6351: PUSH
6352: LD_INT 109
6354: PUSH
6355: LD_INT 110
6357: PUSH
6358: LD_INT 111
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 113
6366: PUSH
6367: LD_INT 114
6369: PUSH
6370: LD_INT 115
6372: PUSH
6373: LD_INT 116
6375: PUSH
6376: LD_INT 117
6378: PUSH
6379: LD_INT 118
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 6409
6408: POP
// end else
6409: GO 6640
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6411: LD_ADDR_VAR 0 2
6415: PUSH
6416: LD_INT 1
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 6
6433: PUSH
6434: LD_INT 7
6436: PUSH
6437: LD_INT 8
6439: PUSH
6440: LD_INT 9
6442: PUSH
6443: LD_INT 10
6445: PUSH
6446: LD_INT 11
6448: PUSH
6449: LD_INT 12
6451: PUSH
6452: LD_INT 13
6454: PUSH
6455: LD_INT 14
6457: PUSH
6458: LD_INT 15
6460: PUSH
6461: LD_INT 16
6463: PUSH
6464: LD_INT 17
6466: PUSH
6467: LD_INT 18
6469: PUSH
6470: LD_INT 19
6472: PUSH
6473: LD_INT 20
6475: PUSH
6476: LD_INT 21
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 23
6484: PUSH
6485: LD_INT 24
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 26
6493: PUSH
6494: LD_INT 27
6496: PUSH
6497: LD_INT 28
6499: PUSH
6500: LD_INT 29
6502: PUSH
6503: LD_INT 30
6505: PUSH
6506: LD_INT 31
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 33
6514: PUSH
6515: LD_INT 34
6517: PUSH
6518: LD_INT 35
6520: PUSH
6521: LD_INT 36
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 101
6564: PUSH
6565: LD_INT 102
6567: PUSH
6568: LD_INT 103
6570: PUSH
6571: LD_INT 104
6573: PUSH
6574: LD_INT 105
6576: PUSH
6577: LD_INT 106
6579: PUSH
6580: LD_INT 107
6582: PUSH
6583: LD_INT 108
6585: PUSH
6586: LD_INT 109
6588: PUSH
6589: LD_INT 110
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 112
6597: PUSH
6598: LD_INT 113
6600: PUSH
6601: LD_INT 114
6603: PUSH
6604: LD_INT 115
6606: PUSH
6607: LD_INT 116
6609: PUSH
6610: LD_INT 117
6612: PUSH
6613: LD_INT 118
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ST_TO_ADDR
// if result then
6640: LD_VAR 0 2
6644: IFFALSE 7430
// begin normal :=  ;
6646: LD_ADDR_VAR 0 5
6650: PUSH
6651: LD_STRING 
6653: ST_TO_ADDR
// hardcore :=  ;
6654: LD_ADDR_VAR 0 6
6658: PUSH
6659: LD_STRING 
6661: ST_TO_ADDR
// active :=  ;
6662: LD_ADDR_VAR 0 7
6666: PUSH
6667: LD_STRING 
6669: ST_TO_ADDR
// for i = 1 to normalCounter do
6670: LD_ADDR_VAR 0 8
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_EXP 4
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6787
// begin tmp := 0 ;
6688: LD_ADDR_VAR 0 3
6692: PUSH
6693: LD_STRING 0
6695: ST_TO_ADDR
// if result [ 1 ] then
6696: LD_VAR 0 2
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: IFFALSE 6769
// if result [ 1 ] [ 1 ] = i then
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 8
6723: EQUAL
6724: IFFALSE 6769
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 3
6755: PPUSH
6756: CALL_OW 1
6760: ST_TO_ADDR
// tmp := 1 ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_STRING 1
6768: ST_TO_ADDR
// end ; normal := normal & tmp ;
6769: LD_ADDR_VAR 0 5
6773: PUSH
6774: LD_VAR 0 5
6778: PUSH
6779: LD_VAR 0 3
6783: STR
6784: ST_TO_ADDR
// end ;
6785: GO 6685
6787: POP
6788: POP
// for i = 1 to hardcoreCounter do
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_EXP 5
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6910
// begin tmp := 0 ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_STRING 0
6814: ST_TO_ADDR
// if result [ 2 ] then
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 2
6822: ARRAY
6823: IFFALSE 6892
// if result [ 2 ] [ 1 ] = 100 + i then
6825: LD_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: ARRAY
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PUSH
6838: LD_INT 100
6840: PUSH
6841: LD_VAR 0 8
6845: PLUS
6846: EQUAL
6847: IFFALSE 6892
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 2
6858: PPUSH
6859: LD_INT 2
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PPUSH
6871: LD_INT 1
6873: PPUSH
6874: CALL_OW 3
6878: PPUSH
6879: CALL_OW 1
6883: ST_TO_ADDR
// tmp := 1 ;
6884: LD_ADDR_VAR 0 3
6888: PUSH
6889: LD_STRING 1
6891: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 6
6901: PUSH
6902: LD_VAR 0 3
6906: STR
6907: ST_TO_ADDR
// end ;
6908: GO 6804
6910: POP
6911: POP
// if isGameLoad then
6912: LD_VAR 0 1
6916: IFFALSE 7391
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: LD_EXP 8
6927: PUSH
6928: LD_EXP 7
6932: PUSH
6933: LD_EXP 9
6937: PUSH
6938: LD_EXP 6
6942: PUSH
6943: LD_EXP 10
6947: PUSH
6948: LD_EXP 11
6952: PUSH
6953: LD_EXP 12
6957: PUSH
6958: LD_EXP 13
6962: PUSH
6963: LD_EXP 14
6967: PUSH
6968: LD_EXP 15
6972: PUSH
6973: LD_EXP 16
6977: PUSH
6978: LD_EXP 17
6982: PUSH
6983: LD_EXP 18
6987: PUSH
6988: LD_EXP 19
6992: PUSH
6993: LD_EXP 27
6997: PUSH
6998: LD_EXP 28
7002: PUSH
7003: LD_EXP 29
7007: PUSH
7008: LD_EXP 30
7012: PUSH
7013: LD_EXP 32
7017: PUSH
7018: LD_EXP 33
7022: PUSH
7023: LD_EXP 34
7027: PUSH
7028: LD_EXP 37
7032: PUSH
7033: LD_EXP 39
7037: PUSH
7038: LD_EXP 40
7042: PUSH
7043: LD_EXP 41
7047: PUSH
7048: LD_EXP 43
7052: PUSH
7053: LD_EXP 44
7057: PUSH
7058: LD_EXP 47
7062: PUSH
7063: LD_EXP 48
7067: PUSH
7068: LD_EXP 49
7072: PUSH
7073: LD_EXP 50
7077: PUSH
7078: LD_EXP 51
7082: PUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_EXP 53
7092: PUSH
7093: LD_EXP 54
7097: PUSH
7098: LD_EXP 55
7102: PUSH
7103: LD_EXP 20
7107: PUSH
7108: LD_EXP 21
7112: PUSH
7113: LD_EXP 24
7117: PUSH
7118: LD_EXP 25
7122: PUSH
7123: LD_EXP 26
7127: PUSH
7128: LD_EXP 22
7132: PUSH
7133: LD_EXP 23
7137: PUSH
7138: LD_EXP 31
7142: PUSH
7143: LD_EXP 35
7147: PUSH
7148: LD_EXP 36
7152: PUSH
7153: LD_EXP 38
7157: PUSH
7158: LD_EXP 42
7162: PUSH
7163: LD_EXP 45
7167: PUSH
7168: LD_EXP 46
7172: PUSH
7173: LD_EXP 56
7177: PUSH
7178: LD_EXP 57
7182: PUSH
7183: LD_EXP 58
7187: PUSH
7188: LD_EXP 59
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: ST_TO_ADDR
// tmp :=  ;
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_STRING 
7256: ST_TO_ADDR
// for i = 1 to normalCounter do
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_EXP 4
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7309
// begin if flags [ i ] then
7275: LD_VAR 0 4
7279: PUSH
7280: LD_VAR 0 8
7284: ARRAY
7285: IFFALSE 7307
// tmp := tmp & i & ; ;
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_VAR 0 3
7296: PUSH
7297: LD_VAR 0 8
7301: STR
7302: PUSH
7303: LD_STRING ;
7305: STR
7306: ST_TO_ADDR
// end ;
7307: GO 7272
7309: POP
7310: POP
// for i = 1 to hardcoreCounter do
7311: LD_ADDR_VAR 0 8
7315: PUSH
7316: DOUBLE
7317: LD_INT 1
7319: DEC
7320: ST_TO_ADDR
7321: LD_EXP 5
7325: PUSH
7326: FOR_TO
7327: IFFALSE 7373
// begin if flags [ normalCounter + i ] then
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 4
7338: PUSH
7339: LD_VAR 0 8
7343: PLUS
7344: ARRAY
7345: IFFALSE 7371
// tmp := tmp & ( 100 + i ) & ; ;
7347: LD_ADDR_VAR 0 3
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 100
7359: PUSH
7360: LD_VAR 0 8
7364: PLUS
7365: STR
7366: PUSH
7367: LD_STRING ;
7369: STR
7370: ST_TO_ADDR
// end ;
7371: GO 7326
7373: POP
7374: POP
// if tmp then
7375: LD_VAR 0 3
7379: IFFALSE 7391
// active := tmp ;
7381: LD_ADDR_VAR 0 7
7385: PUSH
7386: LD_VAR 0 3
7390: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7391: LD_STRING getStreamItemsFromMission("
7393: PUSH
7394: LD_VAR 0 5
7398: STR
7399: PUSH
7400: LD_STRING ","
7402: STR
7403: PUSH
7404: LD_VAR 0 6
7408: STR
7409: PUSH
7410: LD_STRING ","
7412: STR
7413: PUSH
7414: LD_VAR 0 7
7418: STR
7419: PUSH
7420: LD_STRING ")
7422: STR
7423: PPUSH
7424: CALL_OW 559
// end else
7428: GO 7437
// ToLua ( getStreamItemsFromMission("","","") ) ;
7430: LD_STRING getStreamItemsFromMission("","","")
7432: PPUSH
7433: CALL_OW 559
// end ;
7437: LD_VAR 0 2
7441: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7442: LD_EXP 3
7446: PUSH
7447: LD_EXP 8
7451: AND
7452: IFFALSE 7576
7454: GO 7456
7456: DISABLE
7457: LD_INT 0
7459: PPUSH
7460: PPUSH
// begin enable ;
7461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7462: LD_ADDR_VAR 0 2
7466: PUSH
7467: LD_INT 22
7469: PUSH
7470: LD_OWVAR 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 2
7481: PUSH
7482: LD_INT 34
7484: PUSH
7485: LD_INT 7
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 34
7494: PUSH
7495: LD_INT 45
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 28
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 47
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// if not tmp then
7538: LD_VAR 0 2
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 7576
// for i in tmp do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7574
// begin SetLives ( i , 0 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 0
7567: PPUSH
7568: CALL_OW 234
// end ;
7572: GO 7557
7574: POP
7575: POP
// end ;
7576: PPOPN 2
7578: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7579: LD_EXP 3
7583: PUSH
7584: LD_EXP 9
7588: AND
7589: IFFALSE 7673
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
// begin enable ;
7598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7599: LD_ADDR_VAR 0 2
7603: PUSH
7604: LD_INT 22
7606: PUSH
7607: LD_OWVAR 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 32
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PPUSH
7630: CALL_OW 69
7634: ST_TO_ADDR
// if not tmp then
7635: LD_VAR 0 2
7639: NOT
7640: IFFALSE 7644
// exit ;
7642: GO 7673
// for i in tmp do
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_VAR 0 2
7653: PUSH
7654: FOR_IN
7655: IFFALSE 7671
// begin SetLives ( i , 0 ) ;
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_INT 0
7664: PPUSH
7665: CALL_OW 234
// end ;
7669: GO 7654
7671: POP
7672: POP
// end ;
7673: PPOPN 2
7675: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7676: LD_EXP 3
7680: PUSH
7681: LD_EXP 6
7685: AND
7686: IFFALSE 7779
7688: GO 7690
7690: DISABLE
7691: LD_INT 0
7693: PPUSH
// begin enable ;
7694: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7695: LD_ADDR_VAR 0 1
7699: PUSH
7700: LD_INT 22
7702: PUSH
7703: LD_OWVAR 2
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 25
7717: PUSH
7718: LD_INT 5
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 25
7727: PUSH
7728: LD_INT 9
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 8
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 69
7759: PUSH
7760: FOR_IN
7761: IFFALSE 7777
// begin SetClass ( i , 1 ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: CALL_OW 336
// end ;
7775: GO 7760
7777: POP
7778: POP
// end ;
7779: PPOPN 1
7781: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7782: LD_EXP 3
7786: PUSH
7787: LD_EXP 7
7791: AND
7792: PUSH
7793: LD_OWVAR 65
7797: PUSH
7798: LD_INT 7
7800: LESS
7801: AND
7802: IFFALSE 7816
7804: GO 7806
7806: DISABLE
// begin enable ;
7807: ENABLE
// game_speed := 7 ;
7808: LD_ADDR_OWVAR 65
7812: PUSH
7813: LD_INT 7
7815: ST_TO_ADDR
// end ;
7816: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7817: LD_EXP 3
7821: PUSH
7822: LD_EXP 10
7826: AND
7827: IFFALSE 8029
7829: GO 7831
7831: DISABLE
7832: LD_INT 0
7834: PPUSH
7835: PPUSH
7836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 81
7844: PUSH
7845: LD_OWVAR 2
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 21
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// if not tmp then
7873: LD_VAR 0 3
7877: NOT
7878: IFFALSE 7882
// exit ;
7880: GO 8029
// if tmp > 5 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 5
7889: GREATER
7890: IFFALSE 7902
// k := 5 else
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 5
7899: ST_TO_ADDR
7900: GO 7912
// k := tmp ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 3
7911: ST_TO_ADDR
// for i := 1 to k do
7912: LD_ADDR_VAR 0 1
7916: PUSH
7917: DOUBLE
7918: LD_INT 1
7920: DEC
7921: ST_TO_ADDR
7922: LD_VAR 0 2
7926: PUSH
7927: FOR_TO
7928: IFFALSE 8027
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7930: LD_VAR 0 3
7934: PUSH
7935: LD_VAR 0 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 4
7948: MOD
7949: PUSH
7950: LD_INT 1
7952: PLUS
7953: PPUSH
7954: CALL_OW 259
7958: PUSH
7959: LD_INT 10
7961: LESS
7962: IFFALSE 8025
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7964: LD_VAR 0 3
7968: PUSH
7969: LD_VAR 0 1
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 1
7979: PUSH
7980: LD_INT 4
7982: MOD
7983: PUSH
7984: LD_INT 1
7986: PLUS
7987: PPUSH
7988: LD_VAR 0 3
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PPUSH
7999: LD_VAR 0 1
8003: PUSH
8004: LD_INT 4
8006: MOD
8007: PUSH
8008: LD_INT 1
8010: PLUS
8011: PPUSH
8012: CALL_OW 259
8016: PUSH
8017: LD_INT 1
8019: PLUS
8020: PPUSH
8021: CALL_OW 237
8025: GO 7927
8027: POP
8028: POP
// end ;
8029: PPOPN 3
8031: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8032: LD_EXP 3
8036: PUSH
8037: LD_EXP 11
8041: AND
8042: IFFALSE 8062
8044: GO 8046
8046: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8047: LD_INT 4
8049: PPUSH
8050: LD_OWVAR 2
8054: PPUSH
8055: LD_INT 0
8057: PPUSH
8058: CALL_OW 324
8062: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8063: LD_EXP 3
8067: PUSH
8068: LD_EXP 40
8072: AND
8073: IFFALSE 8093
8075: GO 8077
8077: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8078: LD_INT 19
8080: PPUSH
8081: LD_OWVAR 2
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 324
8093: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8094: LD_EXP 3
8098: PUSH
8099: LD_EXP 12
8103: AND
8104: IFFALSE 8206
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin enable ;
8113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_OWVAR 2
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: LD_INT 34
8136: PUSH
8137: LD_INT 11
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 34
8146: PUSH
8147: LD_INT 30
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: ST_TO_ADDR
// if not tmp then
8168: LD_VAR 0 2
8172: NOT
8173: IFFALSE 8177
// exit ;
8175: GO 8206
// for i in tmp do
8177: LD_ADDR_VAR 0 1
8181: PUSH
8182: LD_VAR 0 2
8186: PUSH
8187: FOR_IN
8188: IFFALSE 8204
// begin SetLives ( i , 0 ) ;
8190: LD_VAR 0 1
8194: PPUSH
8195: LD_INT 0
8197: PPUSH
8198: CALL_OW 234
// end ;
8202: GO 8187
8204: POP
8205: POP
// end ;
8206: PPOPN 2
8208: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8209: LD_EXP 3
8213: PUSH
8214: LD_EXP 13
8218: AND
8219: IFFALSE 8239
8221: GO 8223
8223: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8224: LD_INT 32
8226: PPUSH
8227: LD_OWVAR 2
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 324
8239: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8240: LD_EXP 3
8244: PUSH
8245: LD_EXP 14
8249: AND
8250: IFFALSE 8431
8252: GO 8254
8254: DISABLE
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8260: LD_ADDR_VAR 0 2
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_OWVAR 2
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 33
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 69
8295: ST_TO_ADDR
// if not tmp then
8296: LD_VAR 0 2
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8431
// side := 0 ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// for i := 1 to 8 do
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: DOUBLE
8319: LD_INT 1
8321: DEC
8322: ST_TO_ADDR
8323: LD_INT 8
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8375
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8329: LD_OWVAR 2
8333: PUSH
8334: LD_VAR 0 1
8338: NONEQUAL
8339: PUSH
8340: LD_OWVAR 2
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 81
8354: PUSH
8355: LD_INT 2
8357: EQUAL
8358: AND
8359: IFFALSE 8373
// begin side := i ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_VAR 0 1
8370: ST_TO_ADDR
// break ;
8371: GO 8375
// end ;
8373: GO 8326
8375: POP
8376: POP
// if not side then
8377: LD_VAR 0 3
8381: NOT
8382: IFFALSE 8386
// exit ;
8384: GO 8431
// for i := 1 to tmp do
8386: LD_ADDR_VAR 0 1
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_VAR 0 2
8400: PUSH
8401: FOR_TO
8402: IFFALSE 8429
// if Prob ( 60 ) then
8404: LD_INT 60
8406: PPUSH
8407: CALL_OW 13
8411: IFFALSE 8427
// SetSide ( i , side ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 3
8422: PPUSH
8423: CALL_OW 235
8427: GO 8401
8429: POP
8430: POP
// end ;
8431: PPOPN 3
8433: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8434: LD_EXP 3
8438: PUSH
8439: LD_EXP 16
8443: AND
8444: IFFALSE 8563
8446: GO 8448
8448: DISABLE
8449: LD_INT 0
8451: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8452: LD_ADDR_VAR 0 1
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_OWVAR 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 0
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: FOR_IN
8507: IFFALSE 8561
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 257
8518: PUSH
8519: LD_INT 1
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: IN
8537: IFFALSE 8559
// SetClass ( un , rand ( 1 , 4 ) ) ;
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 4
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 336
8559: GO 8506
8561: POP
8562: POP
// end ;
8563: PPOPN 1
8565: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8566: LD_EXP 3
8570: PUSH
8571: LD_EXP 15
8575: AND
8576: IFFALSE 8655
8578: GO 8580
8580: DISABLE
8581: LD_INT 0
8583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8584: LD_ADDR_VAR 0 1
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_OWVAR 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
// if not tmp then
8620: LD_VAR 0 1
8624: NOT
8625: IFFALSE 8629
// exit ;
8627: GO 8655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8629: LD_VAR 0 1
8633: PUSH
8634: LD_INT 1
8636: PPUSH
8637: LD_VAR 0 1
8641: PPUSH
8642: CALL_OW 12
8646: ARRAY
8647: PPUSH
8648: LD_INT 100
8650: PPUSH
8651: CALL_OW 234
// end ;
8655: PPOPN 1
8657: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8658: LD_EXP 3
8662: PUSH
8663: LD_EXP 17
8667: AND
8668: IFFALSE 8766
8670: GO 8672
8672: DISABLE
8673: LD_INT 0
8675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_OWVAR 2
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: ST_TO_ADDR
// if not tmp then
8712: LD_VAR 0 1
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 8766
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 12
8738: ARRAY
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: LD_INT 4
8745: PPUSH
8746: CALL_OW 12
8750: PPUSH
8751: LD_INT 3000
8753: PPUSH
8754: LD_INT 9000
8756: PPUSH
8757: CALL_OW 12
8761: PPUSH
8762: CALL_OW 492
// end ;
8766: PPOPN 1
8768: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8769: LD_EXP 3
8773: PUSH
8774: LD_EXP 18
8778: AND
8779: IFFALSE 8799
8781: GO 8783
8783: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8784: LD_INT 1
8786: PPUSH
8787: LD_OWVAR 2
8791: PPUSH
8792: LD_INT 0
8794: PPUSH
8795: CALL_OW 324
8799: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8800: LD_EXP 3
8804: PUSH
8805: LD_EXP 19
8809: AND
8810: IFFALSE 8893
8812: GO 8814
8814: DISABLE
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8819: LD_ADDR_VAR 0 2
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_OWVAR 2
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: ST_TO_ADDR
// if not tmp then
8855: LD_VAR 0 2
8859: NOT
8860: IFFALSE 8864
// exit ;
8862: GO 8893
// for i in tmp do
8864: LD_ADDR_VAR 0 1
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: FOR_IN
8875: IFFALSE 8891
// SetBLevel ( i , 10 ) ;
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_INT 10
8884: PPUSH
8885: CALL_OW 241
8889: GO 8874
8891: POP
8892: POP
// end ;
8893: PPOPN 2
8895: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8896: LD_EXP 3
8900: PUSH
8901: LD_EXP 20
8905: AND
8906: IFFALSE 9017
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8916: LD_ADDR_VAR 0 3
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_OWVAR 2
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL_OW 69
8951: ST_TO_ADDR
// if not tmp then
8952: LD_VAR 0 3
8956: NOT
8957: IFFALSE 8961
// exit ;
8959: GO 9017
// un := tmp [ rand ( 1 , tmp ) ] ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 3
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: ST_TO_ADDR
// if Crawls ( un ) then
8985: LD_VAR 0 2
8989: PPUSH
8990: CALL_OW 318
8994: IFFALSE 9005
// ComWalk ( un ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9005: LD_VAR 0 2
9009: PPUSH
9010: LD_INT 5
9012: PPUSH
9013: CALL_OW 336
// end ;
9017: PPOPN 3
9019: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9020: LD_EXP 3
9024: PUSH
9025: LD_EXP 21
9029: AND
9030: PUSH
9031: LD_OWVAR 67
9035: PUSH
9036: LD_INT 4
9038: LESS
9039: AND
9040: IFFALSE 9059
9042: GO 9044
9044: DISABLE
// begin Difficulty := Difficulty + 1 ;
9045: LD_ADDR_OWVAR 67
9049: PUSH
9050: LD_OWVAR 67
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end ;
9059: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9060: LD_EXP 3
9064: PUSH
9065: LD_EXP 22
9069: AND
9070: IFFALSE 9173
9072: GO 9074
9074: DISABLE
9075: LD_INT 0
9077: PPUSH
// begin for i := 1 to 5 do
9078: LD_ADDR_VAR 0 1
9082: PUSH
9083: DOUBLE
9084: LD_INT 1
9086: DEC
9087: ST_TO_ADDR
9088: LD_INT 5
9090: PUSH
9091: FOR_TO
9092: IFFALSE 9171
// begin uc_nation := nation_nature ;
9094: LD_ADDR_OWVAR 21
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// uc_side := 0 ;
9102: LD_ADDR_OWVAR 20
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9110: LD_ADDR_OWVAR 29
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 12
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: ST_TO_ADDR
// hc_agressivity := 20 ;
9125: LD_ADDR_OWVAR 35
9129: PUSH
9130: LD_INT 20
9132: ST_TO_ADDR
// hc_class := class_tiger ;
9133: LD_ADDR_OWVAR 28
9137: PUSH
9138: LD_INT 14
9140: ST_TO_ADDR
// hc_gallery :=  ;
9141: LD_ADDR_OWVAR 33
9145: PUSH
9146: LD_STRING 
9148: ST_TO_ADDR
// hc_name :=  ;
9149: LD_ADDR_OWVAR 26
9153: PUSH
9154: LD_STRING 
9156: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9157: CALL_OW 44
9161: PPUSH
9162: LD_INT 0
9164: PPUSH
9165: CALL_OW 51
// end ;
9169: GO 9091
9171: POP
9172: POP
// end ;
9173: PPOPN 1
9175: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9176: LD_EXP 3
9180: PUSH
9181: LD_EXP 23
9185: AND
9186: IFFALSE 9195
9188: GO 9190
9190: DISABLE
// StreamSibBomb ;
9191: CALL 9196 0 0
9195: END
// export function StreamSibBomb ; var i , x , y ; begin
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// result := false ;
9202: LD_ADDR_VAR 0 1
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// for i := 1 to 16 do
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: DOUBLE
9216: LD_INT 1
9218: DEC
9219: ST_TO_ADDR
9220: LD_INT 16
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9423
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9226: LD_ADDR_VAR 0 3
9230: PUSH
9231: LD_INT 10
9233: PUSH
9234: LD_INT 20
9236: PUSH
9237: LD_INT 30
9239: PUSH
9240: LD_INT 40
9242: PUSH
9243: LD_INT 50
9245: PUSH
9246: LD_INT 60
9248: PUSH
9249: LD_INT 70
9251: PUSH
9252: LD_INT 80
9254: PUSH
9255: LD_INT 90
9257: PUSH
9258: LD_INT 100
9260: PUSH
9261: LD_INT 110
9263: PUSH
9264: LD_INT 120
9266: PUSH
9267: LD_INT 130
9269: PUSH
9270: LD_INT 140
9272: PUSH
9273: LD_INT 150
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 1
9295: PPUSH
9296: LD_INT 15
9298: PPUSH
9299: CALL_OW 12
9303: ARRAY
9304: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9305: LD_ADDR_VAR 0 4
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 20
9315: PUSH
9316: LD_INT 30
9318: PUSH
9319: LD_INT 40
9321: PUSH
9322: LD_INT 50
9324: PUSH
9325: LD_INT 60
9327: PUSH
9328: LD_INT 70
9330: PUSH
9331: LD_INT 80
9333: PUSH
9334: LD_INT 90
9336: PUSH
9337: LD_INT 100
9339: PUSH
9340: LD_INT 110
9342: PUSH
9343: LD_INT 120
9345: PUSH
9346: LD_INT 130
9348: PUSH
9349: LD_INT 140
9351: PUSH
9352: LD_INT 150
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 15
9377: PPUSH
9378: CALL_OW 12
9382: ARRAY
9383: ST_TO_ADDR
// if ValidHex ( x , y ) then
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_VAR 0 4
9393: PPUSH
9394: CALL_OW 488
9398: IFFALSE 9421
// begin result := [ x , y ] ;
9400: LD_ADDR_VAR 0 1
9404: PUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_VAR 0 4
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: ST_TO_ADDR
// break ;
9419: GO 9423
// end ; end ;
9421: GO 9223
9423: POP
9424: POP
// if result then
9425: LD_VAR 0 1
9429: IFFALSE 9489
// begin ToLua ( playSibBomb() ) ;
9431: LD_STRING playSibBomb()
9433: PPUSH
9434: CALL_OW 559
// wait ( 0 0$14 ) ;
9438: LD_INT 490
9440: PPUSH
9441: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9445: LD_VAR 0 1
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: PPUSH
9454: LD_VAR 0 1
9458: PUSH
9459: LD_INT 2
9461: ARRAY
9462: PPUSH
9463: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9467: LD_VAR 0 1
9471: PUSH
9472: LD_INT 1
9474: ARRAY
9475: PPUSH
9476: LD_VAR 0 1
9480: PUSH
9481: LD_INT 2
9483: ARRAY
9484: PPUSH
9485: CALL_OW 429
// end ; end ;
9489: LD_VAR 0 1
9493: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9494: LD_EXP 3
9498: PUSH
9499: LD_EXP 25
9503: AND
9504: IFFALSE 9516
9506: GO 9508
9508: DISABLE
// YouLost (  ) ;
9509: LD_STRING 
9511: PPUSH
9512: CALL_OW 104
9516: END
// every 0 0$1 trigger StreamModeActive and sFog do
9517: LD_EXP 3
9521: PUSH
9522: LD_EXP 24
9526: AND
9527: IFFALSE 9541
9529: GO 9531
9531: DISABLE
// FogOff ( your_side ) ;
9532: LD_OWVAR 2
9536: PPUSH
9537: CALL_OW 344
9541: END
// every 0 0$1 trigger StreamModeActive and sSun do
9542: LD_EXP 3
9546: PUSH
9547: LD_EXP 26
9551: AND
9552: IFFALSE 9580
9554: GO 9556
9556: DISABLE
// begin solar_recharge_percent := 0 ;
9557: LD_ADDR_OWVAR 79
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9565: LD_INT 10500
9567: PPUSH
9568: CALL_OW 67
// solar_recharge_percent := 100 ;
9572: LD_ADDR_OWVAR 79
9576: PUSH
9577: LD_INT 100
9579: ST_TO_ADDR
// end ;
9580: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9581: LD_EXP 3
9585: PUSH
9586: LD_EXP 27
9590: AND
9591: IFFALSE 9830
9593: GO 9595
9595: DISABLE
9596: LD_INT 0
9598: PPUSH
9599: PPUSH
9600: PPUSH
// begin tmp := [ ] ;
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: EMPTY
9607: ST_TO_ADDR
// for i := 1 to 6 do
9608: LD_ADDR_VAR 0 1
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 6
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9727
// begin uc_nation := nation_nature ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// uc_side := 0 ;
9632: LD_ADDR_OWVAR 20
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9640: LD_ADDR_OWVAR 29
9644: PUSH
9645: LD_INT 12
9647: PUSH
9648: LD_INT 12
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_agressivity := 20 ;
9655: LD_ADDR_OWVAR 35
9659: PUSH
9660: LD_INT 20
9662: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9663: LD_ADDR_OWVAR 28
9667: PUSH
9668: LD_INT 17
9670: ST_TO_ADDR
// hc_gallery :=  ;
9671: LD_ADDR_OWVAR 33
9675: PUSH
9676: LD_STRING 
9678: ST_TO_ADDR
// hc_name :=  ;
9679: LD_ADDR_OWVAR 26
9683: PUSH
9684: LD_STRING 
9686: ST_TO_ADDR
// un := CreateHuman ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9697: LD_VAR 0 2
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 51
// tmp := tmp ^ un ;
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_VAR 0 3
9718: PUSH
9719: LD_VAR 0 2
9723: ADD
9724: ST_TO_ADDR
// end ;
9725: GO 9621
9727: POP
9728: POP
// repeat wait ( 0 0$1 ) ;
9729: LD_INT 35
9731: PPUSH
9732: CALL_OW 67
// for un in tmp do
9736: LD_ADDR_VAR 0 2
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9821
// begin if IsDead ( un ) then
9749: LD_VAR 0 2
9753: PPUSH
9754: CALL_OW 301
9758: IFFALSE 9778
// begin tmp := tmp diff un ;
9760: LD_ADDR_VAR 0 3
9764: PUSH
9765: LD_VAR 0 3
9769: PUSH
9770: LD_VAR 0 2
9774: DIFF
9775: ST_TO_ADDR
// continue ;
9776: GO 9746
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9778: LD_VAR 0 2
9782: PPUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 0
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: PPUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 74
9814: PPUSH
9815: CALL_OW 115
// end ;
9819: GO 9746
9821: POP
9822: POP
// until not tmp ;
9823: LD_VAR 0 3
9827: NOT
9828: IFFALSE 9729
// end ;
9830: PPOPN 3
9832: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9833: LD_EXP 3
9837: PUSH
9838: LD_EXP 28
9842: AND
9843: IFFALSE 9897
9845: GO 9847
9847: DISABLE
// begin ToLua ( displayTroll(); ) ;
9848: LD_STRING displayTroll();
9850: PPUSH
9851: CALL_OW 559
// wait ( 3 3$00 ) ;
9855: LD_INT 6300
9857: PPUSH
9858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9862: LD_STRING hideTroll();
9864: PPUSH
9865: CALL_OW 559
// wait ( 1 1$00 ) ;
9869: LD_INT 2100
9871: PPUSH
9872: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9876: LD_STRING displayTroll();
9878: PPUSH
9879: CALL_OW 559
// wait ( 1 1$00 ) ;
9883: LD_INT 2100
9885: PPUSH
9886: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9890: LD_STRING hideTroll();
9892: PPUSH
9893: CALL_OW 559
// end ;
9897: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9898: LD_EXP 3
9902: PUSH
9903: LD_EXP 29
9907: AND
9908: IFFALSE 9971
9910: GO 9912
9912: DISABLE
9913: LD_INT 0
9915: PPUSH
// begin p := 0 ;
9916: LD_ADDR_VAR 0 1
9920: PUSH
9921: LD_INT 0
9923: ST_TO_ADDR
// repeat game_speed := 1 ;
9924: LD_ADDR_OWVAR 65
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9932: LD_INT 35
9934: PPUSH
9935: CALL_OW 67
// p := p + 1 ;
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: LD_INT 1
9951: PLUS
9952: ST_TO_ADDR
// until p >= 60 ;
9953: LD_VAR 0 1
9957: PUSH
9958: LD_INT 60
9960: GREATEREQUAL
9961: IFFALSE 9924
// game_speed := 4 ;
9963: LD_ADDR_OWVAR 65
9967: PUSH
9968: LD_INT 4
9970: ST_TO_ADDR
// end ;
9971: PPOPN 1
9973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9974: LD_EXP 3
9978: PUSH
9979: LD_EXP 30
9983: AND
9984: IFFALSE 10130
9986: GO 9988
9988: DISABLE
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9993: LD_ADDR_VAR 0 1
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_OWVAR 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 30
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: ST_TO_ADDR
// if not depot then
10047: LD_VAR 0 1
10051: NOT
10052: IFFALSE 10056
// exit ;
10054: GO 10130
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10056: LD_ADDR_VAR 0 2
10060: PUSH
10061: LD_VAR 0 1
10065: PUSH
10066: LD_INT 1
10068: PPUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 12
10078: ARRAY
10079: PPUSH
10080: CALL_OW 274
10084: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10085: LD_VAR 0 2
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: LD_INT 2
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10115: LD_VAR 0 2
10119: PPUSH
10120: LD_INT 3
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 277
// end ;
10130: PPOPN 2
10132: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10133: LD_EXP 3
10137: PUSH
10138: LD_EXP 31
10142: AND
10143: IFFALSE 10240
10145: GO 10147
10147: DISABLE
10148: LD_INT 0
10150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10151: LD_ADDR_VAR 0 1
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_OWVAR 2
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 3
10180: PUSH
10181: LD_INT 23
10183: PUSH
10184: LD_INT 0
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 69
10204: ST_TO_ADDR
// if not tmp then
10205: LD_VAR 0 1
10209: NOT
10210: IFFALSE 10214
// exit ;
10212: GO 10240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10214: LD_VAR 0 1
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_VAR 0 1
10226: PPUSH
10227: CALL_OW 12
10231: ARRAY
10232: PPUSH
10233: LD_INT 200
10235: PPUSH
10236: CALL_OW 234
// end ;
10240: PPOPN 1
10242: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10243: LD_EXP 3
10247: PUSH
10248: LD_EXP 32
10252: AND
10253: IFFALSE 10332
10255: GO 10257
10257: DISABLE
10258: LD_INT 0
10260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_OWVAR 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 69
10296: ST_TO_ADDR
// if not tmp then
10297: LD_VAR 0 1
10301: NOT
10302: IFFALSE 10306
// exit ;
10304: GO 10332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10306: LD_VAR 0 1
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 12
10323: ARRAY
10324: PPUSH
10325: LD_INT 60
10327: PPUSH
10328: CALL_OW 234
// end ;
10332: PPOPN 1
10334: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10335: LD_EXP 3
10339: PUSH
10340: LD_EXP 33
10344: AND
10345: IFFALSE 10444
10347: GO 10349
10349: DISABLE
10350: LD_INT 0
10352: PPUSH
10353: PPUSH
// begin enable ;
10354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10355: LD_ADDR_VAR 0 1
10359: PUSH
10360: LD_INT 22
10362: PUSH
10363: LD_OWVAR 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 61
10374: PUSH
10375: EMPTY
10376: LIST
10377: PUSH
10378: LD_INT 33
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// if not tmp then
10398: LD_VAR 0 1
10402: NOT
10403: IFFALSE 10407
// exit ;
10405: GO 10444
// for i in tmp do
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_VAR 0 1
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10442
// if IsControledBy ( i ) then
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL_OW 312
10429: IFFALSE 10440
// ComUnlink ( i ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: CALL_OW 136
10440: GO 10417
10442: POP
10443: POP
// end ;
10444: PPOPN 2
10446: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10447: LD_EXP 3
10451: PUSH
10452: LD_EXP 34
10456: AND
10457: IFFALSE 10597
10459: GO 10461
10461: DISABLE
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
// begin ToLua ( displayPowell(); ) ;
10466: LD_STRING displayPowell();
10468: PPUSH
10469: CALL_OW 559
// uc_side := 0 ;
10473: LD_ADDR_OWVAR 20
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// uc_nation := 2 ;
10481: LD_ADDR_OWVAR 21
10485: PUSH
10486: LD_INT 2
10488: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10489: LD_ADDR_OWVAR 37
10493: PUSH
10494: LD_INT 14
10496: ST_TO_ADDR
// vc_engine := engine_siberite ;
10497: LD_ADDR_OWVAR 39
10501: PUSH
10502: LD_INT 3
10504: ST_TO_ADDR
// vc_control := control_apeman ;
10505: LD_ADDR_OWVAR 38
10509: PUSH
10510: LD_INT 5
10512: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10513: LD_ADDR_OWVAR 40
10517: PUSH
10518: LD_INT 29
10520: ST_TO_ADDR
// un := CreateVehicle ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: CALL_OW 45
10530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10543: LD_INT 35
10545: PPUSH
10546: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 22
10557: PUSH
10558: LD_OWVAR 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL_OW 69
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL_OW 74
10581: PPUSH
10582: CALL_OW 115
// until IsDead ( un ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 301
10595: IFFALSE 10543
// end ;
10597: PPOPN 2
10599: END
// every 0 0$1 trigger StreamModeActive and sStu do
10600: LD_EXP 3
10604: PUSH
10605: LD_EXP 42
10609: AND
10610: IFFALSE 10626
10612: GO 10614
10614: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10615: LD_STRING displayStucuk();
10617: PPUSH
10618: CALL_OW 559
// ResetFog ;
10622: CALL_OW 335
// end ;
10626: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10627: LD_EXP 3
10631: PUSH
10632: LD_EXP 35
10636: AND
10637: IFFALSE 10778
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_OWVAR 2
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 69
10681: ST_TO_ADDR
// if not tmp then
10682: LD_VAR 0 2
10686: NOT
10687: IFFALSE 10691
// exit ;
10689: GO 10778
// un := tmp [ rand ( 1 , tmp ) ] ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 12
10713: ARRAY
10714: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: LD_INT 0
10722: PPUSH
10723: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: PPUSH
10753: CALL_OW 115
// wait ( 0 0$20 ) ;
10757: LD_INT 700
10759: PPUSH
10760: CALL_OW 67
// SetSide ( un , your_side ) ;
10764: LD_VAR 0 1
10768: PPUSH
10769: LD_OWVAR 2
10773: PPUSH
10774: CALL_OW 235
// end ;
10778: PPOPN 2
10780: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10781: LD_EXP 3
10785: PUSH
10786: LD_EXP 36
10790: AND
10791: IFFALSE 10897
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_OWVAR 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 0
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 30
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// if not depot then
10853: LD_VAR 0 1
10857: NOT
10858: IFFALSE 10862
// exit ;
10860: GO 10897
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10862: LD_VAR 0 1
10866: PUSH
10867: LD_INT 1
10869: ARRAY
10870: PPUSH
10871: CALL_OW 250
10875: PPUSH
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 1
10883: ARRAY
10884: PPUSH
10885: CALL_OW 251
10889: PPUSH
10890: LD_INT 70
10892: PPUSH
10893: CALL_OW 495
// end ;
10897: PPOPN 1
10899: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10900: LD_EXP 3
10904: PUSH
10905: LD_EXP 37
10909: AND
10910: IFFALSE 11121
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10922: LD_ADDR_VAR 0 5
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_OWVAR 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: ST_TO_ADDR
// if not tmp then
10958: LD_VAR 0 5
10962: NOT
10963: IFFALSE 10967
// exit ;
10965: GO 11121
// for i in tmp do
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_VAR 0 5
10976: PUSH
10977: FOR_IN
10978: IFFALSE 11119
// begin d := rand ( 0 , 5 ) ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 0
10987: PPUSH
10988: LD_INT 5
10990: PPUSH
10991: CALL_OW 12
10995: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10996: LD_ADDR_VAR 0 2
11000: PUSH
11001: LD_VAR 0 1
11005: PPUSH
11006: CALL_OW 250
11010: PPUSH
11011: LD_VAR 0 4
11015: PPUSH
11016: LD_INT 3
11018: PPUSH
11019: LD_INT 12
11021: PPUSH
11022: CALL_OW 12
11026: PPUSH
11027: CALL_OW 272
11031: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 251
11046: PPUSH
11047: LD_VAR 0 4
11051: PPUSH
11052: LD_INT 3
11054: PPUSH
11055: LD_INT 12
11057: PPUSH
11058: CALL_OW 12
11062: PPUSH
11063: CALL_OW 273
11067: ST_TO_ADDR
// if ValidHex ( x , y ) then
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: CALL_OW 488
11082: IFFALSE 11117
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11084: LD_VAR 0 1
11088: PPUSH
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 3
11101: PPUSH
11102: LD_INT 6
11104: PPUSH
11105: CALL_OW 12
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 483
// end ;
11117: GO 10977
11119: POP
11120: POP
// end ;
11121: PPOPN 5
11123: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11124: LD_EXP 3
11128: PUSH
11129: LD_EXP 38
11133: AND
11134: IFFALSE 11228
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_OWVAR 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 32
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 2
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11228
// for i in tmp do
11199: LD_ADDR_VAR 0 1
11203: PUSH
11204: LD_VAR 0 2
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11226
// SetFuel ( i , 0 ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 240
11224: GO 11209
11226: POP
11227: POP
// end ;
11228: PPOPN 2
11230: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11231: LD_EXP 3
11235: PUSH
11236: LD_EXP 39
11240: AND
11241: IFFALSE 11307
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11249: LD_ADDR_VAR 0 1
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_OWVAR 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 30
11268: PUSH
11269: LD_INT 29
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: ST_TO_ADDR
// if not tmp then
11285: LD_VAR 0 1
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11307
// DestroyUnit ( tmp [ 1 ] ) ;
11294: LD_VAR 0 1
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: PPUSH
11303: CALL_OW 65
// end ;
11307: PPOPN 1
11309: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11310: LD_EXP 3
11314: PUSH
11315: LD_EXP 41
11319: AND
11320: IFFALSE 11449
11322: GO 11324
11324: DISABLE
11325: LD_INT 0
11327: PPUSH
// begin uc_side := 0 ;
11328: LD_ADDR_OWVAR 20
11332: PUSH
11333: LD_INT 0
11335: ST_TO_ADDR
// uc_nation := nation_arabian ;
11336: LD_ADDR_OWVAR 21
11340: PUSH
11341: LD_INT 2
11343: ST_TO_ADDR
// hc_gallery :=  ;
11344: LD_ADDR_OWVAR 33
11348: PUSH
11349: LD_STRING 
11351: ST_TO_ADDR
// hc_name :=  ;
11352: LD_ADDR_OWVAR 26
11356: PUSH
11357: LD_STRING 
11359: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11360: LD_INT 1
11362: PPUSH
11363: LD_INT 11
11365: PPUSH
11366: LD_INT 10
11368: PPUSH
11369: CALL_OW 380
// un := CreateHuman ;
11373: LD_ADDR_VAR 0 1
11377: PUSH
11378: CALL_OW 44
11382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_INT 22
11409: PUSH
11410: LD_OWVAR 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PPUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 74
11433: PPUSH
11434: CALL_OW 115
// until IsDead ( un ) ;
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 301
11447: IFFALSE 11395
// end ;
11449: PPOPN 1
11451: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11452: LD_EXP 3
11456: PUSH
11457: LD_EXP 43
11461: AND
11462: IFFALSE 11474
11464: GO 11466
11466: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11467: LD_STRING earthquake(getX(game), 0, 32)
11469: PPUSH
11470: CALL_OW 559
11474: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11475: LD_EXP 3
11479: PUSH
11480: LD_EXP 44
11484: AND
11485: IFFALSE 11576
11487: GO 11489
11489: DISABLE
11490: LD_INT 0
11492: PPUSH
// begin enable ;
11493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_OWVAR 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 69
11540: ST_TO_ADDR
// if not tmp then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11550
// exit ;
11548: GO 11576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11550: LD_VAR 0 1
11554: PUSH
11555: LD_INT 1
11557: PPUSH
11558: LD_VAR 0 1
11562: PPUSH
11563: CALL_OW 12
11567: ARRAY
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 234
// end ;
11576: PPOPN 1
11578: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11579: LD_EXP 3
11583: PUSH
11584: LD_EXP 45
11588: AND
11589: IFFALSE 11730
11591: GO 11593
11593: DISABLE
11594: LD_INT 0
11596: PPUSH
11597: PPUSH
11598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_OWVAR 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: ST_TO_ADDR
// if not tmp then
11635: LD_VAR 0 3
11639: NOT
11640: IFFALSE 11644
// exit ;
11642: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11644: LD_ADDR_VAR 0 2
11648: PUSH
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: ST_TO_ADDR
// if Crawls ( un ) then
11668: LD_VAR 0 2
11672: PPUSH
11673: CALL_OW 318
11677: IFFALSE 11688
// ComWalk ( un ) ;
11679: LD_VAR 0 2
11683: PPUSH
11684: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_INT 9
11695: PPUSH
11696: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11700: LD_INT 28
11702: PPUSH
11703: LD_OWVAR 2
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11715: LD_INT 29
11717: PPUSH
11718: LD_OWVAR 2
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 322
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11733: LD_EXP 3
11737: PUSH
11738: LD_EXP 46
11742: AND
11743: IFFALSE 11854
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11753: LD_ADDR_VAR 0 3
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PPUSH
11784: CALL_OW 69
11788: ST_TO_ADDR
// if not tmp then
11789: LD_VAR 0 3
11793: NOT
11794: IFFALSE 11798
// exit ;
11796: GO 11854
// un := tmp [ rand ( 1 , tmp ) ] ;
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_VAR 0 3
11807: PUSH
11808: LD_INT 1
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: CALL_OW 12
11820: ARRAY
11821: ST_TO_ADDR
// if Crawls ( un ) then
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 318
11831: IFFALSE 11842
// ComWalk ( un ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 8
11849: PPUSH
11850: CALL_OW 336
// end ;
11854: PPOPN 3
11856: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11857: LD_EXP 3
11861: PUSH
11862: LD_EXP 47
11866: AND
11867: IFFALSE 12011
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_OWVAR 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: LD_INT 34
11908: PUSH
11909: LD_INT 12
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 34
11918: PUSH
11919: LD_INT 51
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 69
11951: ST_TO_ADDR
// if not tmp then
11952: LD_VAR 0 2
11956: NOT
11957: IFFALSE 11961
// exit ;
11959: GO 12011
// for i in tmp do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: LD_VAR 0 2
11970: PUSH
11971: FOR_IN
11972: IFFALSE 12009
// if GetCargo ( i , mat_artifact ) = 0 then
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 4
11981: PPUSH
11982: CALL_OW 289
11986: PUSH
11987: LD_INT 0
11989: EQUAL
11990: IFFALSE 12007
// SetCargo ( i , mat_siberit , 100 ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 100
12002: PPUSH
12003: CALL_OW 290
12007: GO 11971
12009: POP
12010: POP
// end ;
12011: PPOPN 2
12013: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12014: LD_EXP 3
12018: PUSH
12019: LD_EXP 48
12023: AND
12024: IFFALSE 12207
12026: GO 12028
12028: DISABLE
12029: LD_INT 0
12031: PPUSH
12032: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12033: LD_ADDR_VAR 0 2
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_OWVAR 2
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: ST_TO_ADDR
// if not tmp then
12055: LD_VAR 0 2
12059: NOT
12060: IFFALSE 12064
// exit ;
12062: GO 12207
// for i := 1 to 2 do
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: DOUBLE
12070: LD_INT 1
12072: DEC
12073: ST_TO_ADDR
12074: LD_INT 2
12076: PUSH
12077: FOR_TO
12078: IFFALSE 12205
// begin uc_side := your_side ;
12080: LD_ADDR_OWVAR 20
12084: PUSH
12085: LD_OWVAR 2
12089: ST_TO_ADDR
// uc_nation := nation_american ;
12090: LD_ADDR_OWVAR 21
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// vc_chassis := us_morphling ;
12098: LD_ADDR_OWVAR 37
12102: PUSH
12103: LD_INT 5
12105: ST_TO_ADDR
// vc_engine := engine_siberite ;
12106: LD_ADDR_OWVAR 39
12110: PUSH
12111: LD_INT 3
12113: ST_TO_ADDR
// vc_control := control_computer ;
12114: LD_ADDR_OWVAR 38
12118: PUSH
12119: LD_INT 3
12121: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12122: LD_ADDR_OWVAR 40
12126: PUSH
12127: LD_INT 10
12129: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12130: LD_VAR 0 2
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: CALL_OW 310
12143: NOT
12144: IFFALSE 12191
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12146: CALL_OW 45
12150: PPUSH
12151: LD_VAR 0 2
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: CALL_OW 250
12164: PPUSH
12165: LD_VAR 0 2
12169: PUSH
12170: LD_INT 1
12172: ARRAY
12173: PPUSH
12174: CALL_OW 251
12178: PPUSH
12179: LD_INT 12
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 50
12189: GO 12203
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12191: CALL_OW 45
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 51
// end ;
12203: GO 12077
12205: POP
12206: POP
// end ;
12207: PPOPN 2
12209: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12210: LD_EXP 3
12214: PUSH
12215: LD_EXP 49
12219: AND
12220: IFFALSE 12442
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12233: LD_ADDR_VAR 0 6
12237: PUSH
12238: LD_INT 22
12240: PUSH
12241: LD_OWVAR 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: LD_INT 23
12265: PUSH
12266: LD_INT 0
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: ST_TO_ADDR
// if not tmp then
12287: LD_VAR 0 6
12291: NOT
12292: IFFALSE 12296
// exit ;
12294: GO 12442
// s1 := rand ( 1 , 4 ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 12
12311: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: LD_VAR 0 6
12321: PUSH
12322: LD_INT 1
12324: ARRAY
12325: PPUSH
12326: LD_VAR 0 2
12330: PPUSH
12331: CALL_OW 259
12335: ST_TO_ADDR
// if s1 = 1 then
12336: LD_VAR 0 2
12340: PUSH
12341: LD_INT 1
12343: EQUAL
12344: IFFALSE 12364
// s2 := rand ( 2 , 4 ) else
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: LD_INT 2
12353: PPUSH
12354: LD_INT 4
12356: PPUSH
12357: CALL_OW 12
12361: ST_TO_ADDR
12362: GO 12372
// s2 := 1 ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12372: LD_ADDR_VAR 0 5
12376: PUSH
12377: LD_VAR 0 6
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 3
12390: PPUSH
12391: CALL_OW 259
12395: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12396: LD_VAR 0 6
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: PPUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: LD_VAR 0 5
12414: PPUSH
12415: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12419: LD_VAR 0 6
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: CALL_OW 237
// end ;
12442: PPOPN 6
12444: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12445: LD_EXP 3
12449: PUSH
12450: LD_EXP 50
12454: AND
12455: IFFALSE 12534
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if not tmp then
12499: LD_VAR 0 1
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 12
12525: ARRAY
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 234
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12537: LD_EXP 3
12541: PUSH
12542: LD_EXP 51
12546: AND
12547: IFFALSE 12659
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 27
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 26
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 28
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 69
12620: ST_TO_ADDR
// if not tmp then
12621: LD_VAR 0 2
12625: NOT
12626: IFFALSE 12630
// exit ;
12628: GO 12659
// for i in tmp do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: FOR_IN
12641: IFFALSE 12657
// SetLives ( i , 1 ) ;
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 234
12655: GO 12640
12657: POP
12658: POP
// end ;
12659: PPOPN 2
12661: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12662: LD_EXP 3
12666: PUSH
12667: LD_EXP 52
12671: AND
12672: IFFALSE 12959
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin i := rand ( 1 , 7 ) ;
12682: LD_ADDR_VAR 0 1
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_INT 7
12692: PPUSH
12693: CALL_OW 12
12697: ST_TO_ADDR
// case i of 1 :
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: DOUBLE
12706: EQUAL
12707: IFTRUE 12711
12709: GO 12721
12711: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12712: LD_STRING earthquake(getX(game), 0, 32)
12714: PPUSH
12715: CALL_OW 559
12719: GO 12959
12721: LD_INT 2
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12743
12729: POP
// begin ToLua ( displayStucuk(); ) ;
12730: LD_STRING displayStucuk();
12732: PPUSH
12733: CALL_OW 559
// ResetFog ;
12737: CALL_OW 335
// end ; 3 :
12741: GO 12959
12743: LD_INT 3
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12855
12751: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// if not tmp then
12788: LD_VAR 0 2
12792: NOT
12793: IFFALSE 12797
// exit ;
12795: GO 12959
// un := tmp [ rand ( 1 , tmp ) ] ;
12797: LD_ADDR_VAR 0 3
12801: PUSH
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: CALL_OW 12
12819: ARRAY
12820: ST_TO_ADDR
// if Crawls ( un ) then
12821: LD_VAR 0 3
12825: PPUSH
12826: CALL_OW 318
12830: IFFALSE 12841
// ComWalk ( un ) ;
12832: LD_VAR 0 3
12836: PPUSH
12837: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 8
12848: PPUSH
12849: CALL_OW 336
// end ; 4 :
12853: GO 12959
12855: LD_INT 4
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12937
12863: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 29
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: ST_TO_ADDR
// if not tmp then
12900: LD_VAR 0 2
12904: NOT
12905: IFFALSE 12909
// exit ;
12907: GO 12959
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12909: LD_VAR 0 2
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PPUSH
12918: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12922: LD_VAR 0 2
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: PPUSH
12931: CALL_OW 65
// end ; 5 .. 7 :
12935: GO 12959
12937: LD_INT 5
12939: DOUBLE
12940: GREATEREQUAL
12941: IFFALSE 12949
12943: LD_INT 7
12945: DOUBLE
12946: LESSEQUAL
12947: IFTRUE 12951
12949: GO 12958
12951: POP
// StreamSibBomb ; end ;
12952: CALL 9196 0 0
12956: GO 12959
12958: POP
// end ;
12959: PPOPN 3
12961: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12962: LD_EXP 3
12966: PUSH
12967: LD_EXP 53
12971: AND
12972: IFFALSE 13128
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12982: LD_ADDR_VAR 0 2
12986: PUSH
12987: LD_INT 81
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 2
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// if not tmp then
13036: LD_VAR 0 2
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13128
// p := 0 ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13053: LD_INT 35
13055: PPUSH
13056: CALL_OW 67
// p := p + 1 ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 1
13072: PLUS
13073: ST_TO_ADDR
// for i in tmp do
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_VAR 0 2
13083: PUSH
13084: FOR_IN
13085: IFFALSE 13116
// if GetLives ( i ) < 1000 then
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 1000
13099: LESS
13100: IFFALSE 13114
// SetLives ( i , 1000 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 1000
13109: PPUSH
13110: CALL_OW 234
13114: GO 13084
13116: POP
13117: POP
// until p > 20 ;
13118: LD_VAR 0 3
13122: PUSH
13123: LD_INT 20
13125: GREATER
13126: IFFALSE 13053
// end ;
13128: PPOPN 3
13130: END
// every 0 0$1 trigger StreamModeActive and sTime do
13131: LD_EXP 3
13135: PUSH
13136: LD_EXP 54
13140: AND
13141: IFFALSE 13176
13143: GO 13145
13145: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13146: LD_INT 28
13148: PPUSH
13149: LD_OWVAR 2
13153: PPUSH
13154: LD_INT 2
13156: PPUSH
13157: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13161: LD_INT 30
13163: PPUSH
13164: LD_OWVAR 2
13168: PPUSH
13169: LD_INT 2
13171: PPUSH
13172: CALL_OW 322
// end ;
13176: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13177: LD_EXP 3
13181: PUSH
13182: LD_EXP 55
13186: AND
13187: IFFALSE 13308
13189: GO 13191
13191: DISABLE
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_OWVAR 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 23
13228: PUSH
13229: LD_INT 0
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: ST_TO_ADDR
// if not tmp then
13250: LD_VAR 0 2
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13308
// for i in tmp do
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_VAR 0 2
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13306
// begin if Crawls ( i ) then
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 318
13281: IFFALSE 13292
// ComWalk ( i ) ;
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 138
// SetClass ( i , 2 ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: CALL_OW 336
// end ;
13304: GO 13269
13306: POP
13307: POP
// end ;
13308: PPOPN 2
13310: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13311: LD_EXP 3
13315: PUSH
13316: LD_EXP 56
13320: AND
13321: IFFALSE 13609
13323: GO 13325
13325: DISABLE
13326: LD_INT 0
13328: PPUSH
13329: PPUSH
13330: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13331: LD_OWVAR 2
13335: PPUSH
13336: LD_INT 9
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13349: LD_INT 9
13351: PPUSH
13352: LD_OWVAR 2
13356: PPUSH
13357: CALL_OW 343
// uc_side := 9 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 9
13368: ST_TO_ADDR
// uc_nation := 2 ;
13369: LD_ADDR_OWVAR 21
13373: PUSH
13374: LD_INT 2
13376: ST_TO_ADDR
// hc_name := Dark Warrior ;
13377: LD_ADDR_OWVAR 26
13381: PUSH
13382: LD_STRING Dark Warrior
13384: ST_TO_ADDR
// hc_gallery :=  ;
13385: LD_ADDR_OWVAR 33
13389: PUSH
13390: LD_STRING 
13392: ST_TO_ADDR
// hc_noskilllimit := true ;
13393: LD_ADDR_OWVAR 76
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13401: LD_ADDR_OWVAR 31
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: LD_INT 30
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: ST_TO_ADDR
// un := CreateHuman ;
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: CALL_OW 44
13433: ST_TO_ADDR
// hc_noskilllimit := false ;
13434: LD_ADDR_OWVAR 76
13438: PUSH
13439: LD_INT 0
13441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 51
// ToLua ( playRanger() ) ;
13454: LD_STRING playRanger()
13456: PPUSH
13457: CALL_OW 559
// p := 0 ;
13461: LD_ADDR_VAR 0 2
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13469: LD_INT 35
13471: PPUSH
13472: CALL_OW 67
// p := p + 1 ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_INT 1
13488: PLUS
13489: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13490: LD_VAR 0 3
13494: PPUSH
13495: CALL_OW 256
13499: PUSH
13500: LD_INT 1000
13502: LESS
13503: IFFALSE 13517
// SetLives ( un , 1000 ) ;
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1000
13512: PPUSH
13513: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 81
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 91
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 69
13558: PPUSH
13559: LD_VAR 0 3
13563: PPUSH
13564: CALL_OW 74
13568: PPUSH
13569: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 80
13580: GREATER
13581: PUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: CALL_OW 301
13591: OR
13592: IFFALSE 13469
// if un then
13594: LD_VAR 0 3
13598: IFFALSE 13609
// RemoveUnit ( un ) ;
13600: LD_VAR 0 3
13604: PPUSH
13605: CALL_OW 64
// end ;
13609: PPOPN 3
13611: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13612: LD_EXP 57
13616: IFFALSE 13732
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
13624: PPUSH
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 81
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13662: LD_STRING playComputer()
13664: PPUSH
13665: CALL_OW 559
// if not tmp then
13669: LD_VAR 0 2
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 13732
// for i in tmp do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_VAR 0 2
13687: PUSH
13688: FOR_IN
13689: IFFALSE 13730
// for j := 1 to 4 do
13691: LD_ADDR_VAR 0 3
13695: PUSH
13696: DOUBLE
13697: LD_INT 1
13699: DEC
13700: ST_TO_ADDR
13701: LD_INT 4
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13726
// SetSkill ( i , j , 10 ) ;
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 10
13719: PPUSH
13720: CALL_OW 237
13724: GO 13704
13726: POP
13727: POP
13728: GO 13688
13730: POP
13731: POP
// end ;
13732: PPOPN 3
13734: END
// every 0 0$1 trigger s30 do var i , tmp ;
13735: LD_EXP 58
13739: IFFALSE 13808
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: ST_TO_ADDR
// if not tmp then
13770: LD_VAR 0 2
13774: NOT
13775: IFFALSE 13779
// exit ;
13777: GO 13808
// for i in tmp do
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: LD_VAR 0 2
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13806
// SetLives ( i , 300 ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_INT 300
13799: PPUSH
13800: CALL_OW 234
13804: GO 13789
13806: POP
13807: POP
// end ;
13808: PPOPN 2
13810: END
// every 0 0$1 trigger s60 do var i , tmp ;
13811: LD_EXP 59
13815: IFFALSE 13884
13817: GO 13819
13819: DISABLE
13820: LD_INT 0
13822: PPUSH
13823: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PPUSH
13841: CALL_OW 69
13845: ST_TO_ADDR
// if not tmp then
13846: LD_VAR 0 2
13850: NOT
13851: IFFALSE 13855
// exit ;
13853: GO 13884
// for i in tmp do
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_VAR 0 2
13864: PUSH
13865: FOR_IN
13866: IFFALSE 13882
// SetLives ( i , 600 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_INT 600
13875: PPUSH
13876: CALL_OW 234
13880: GO 13865
13882: POP
13883: POP
// end ;
13884: PPOPN 2
13886: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13887: LD_INT 0
13889: PPUSH
// case cmd of 301 :
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 301
13897: DOUBLE
13898: EQUAL
13899: IFTRUE 13903
13901: GO 13935
13903: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13904: LD_VAR 0 6
13908: PPUSH
13909: LD_VAR 0 7
13913: PPUSH
13914: LD_VAR 0 8
13918: PPUSH
13919: LD_VAR 0 4
13923: PPUSH
13924: LD_VAR 0 5
13928: PPUSH
13929: CALL 15144 0 5
13933: GO 14056
13935: LD_INT 302
13937: DOUBLE
13938: EQUAL
13939: IFTRUE 13943
13941: GO 13980
13943: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13944: LD_VAR 0 6
13948: PPUSH
13949: LD_VAR 0 7
13953: PPUSH
13954: LD_VAR 0 8
13958: PPUSH
13959: LD_VAR 0 9
13963: PPUSH
13964: LD_VAR 0 4
13968: PPUSH
13969: LD_VAR 0 5
13973: PPUSH
13974: CALL 15235 0 6
13978: GO 14056
13980: LD_INT 303
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14025
13988: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 7
13998: PPUSH
13999: LD_VAR 0 8
14003: PPUSH
14004: LD_VAR 0 9
14008: PPUSH
14009: LD_VAR 0 4
14013: PPUSH
14014: LD_VAR 0 5
14018: PPUSH
14019: CALL 14061 0 6
14023: GO 14056
14025: LD_INT 304
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14055
14033: POP
// hHackTeleport ( unit , x , y ) ; end ;
14034: LD_VAR 0 2
14038: PPUSH
14039: LD_VAR 0 4
14043: PPUSH
14044: LD_VAR 0 5
14048: PPUSH
14049: CALL 15828 0 3
14053: GO 14056
14055: POP
// end ;
14056: LD_VAR 0 12
14060: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14065: LD_VAR 0 1
14069: PUSH
14070: LD_INT 1
14072: LESS
14073: PUSH
14074: LD_VAR 0 1
14078: PUSH
14079: LD_INT 3
14081: GREATER
14082: OR
14083: PUSH
14084: LD_VAR 0 5
14088: PPUSH
14089: LD_VAR 0 6
14093: PPUSH
14094: CALL_OW 428
14098: OR
14099: IFFALSE 14103
// exit ;
14101: GO 14831
// uc_side := your_side ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_OWVAR 2
14112: ST_TO_ADDR
// uc_nation := nation ;
14113: LD_ADDR_OWVAR 21
14117: PUSH
14118: LD_VAR 0 1
14122: ST_TO_ADDR
// bc_level = 1 ;
14123: LD_ADDR_OWVAR 43
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// case btype of 1 :
14131: LD_VAR 0 2
14135: PUSH
14136: LD_INT 1
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14155
14144: POP
// bc_type := b_depot ; 2 :
14145: LD_ADDR_OWVAR 42
14149: PUSH
14150: LD_INT 0
14152: ST_TO_ADDR
14153: GO 14775
14155: LD_INT 2
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14174
14163: POP
// bc_type := b_warehouse ; 3 :
14164: LD_ADDR_OWVAR 42
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
14172: GO 14775
14174: LD_INT 3
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14193
14182: POP
// bc_type := b_lab ; 4 .. 9 :
14183: LD_ADDR_OWVAR 42
14187: PUSH
14188: LD_INT 6
14190: ST_TO_ADDR
14191: GO 14775
14193: LD_INT 4
14195: DOUBLE
14196: GREATEREQUAL
14197: IFFALSE 14205
14199: LD_INT 9
14201: DOUBLE
14202: LESSEQUAL
14203: IFTRUE 14207
14205: GO 14267
14207: POP
// begin bc_type := b_lab_half ;
14208: LD_ADDR_OWVAR 42
14212: PUSH
14213: LD_INT 7
14215: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14216: LD_ADDR_OWVAR 44
14220: PUSH
14221: LD_INT 10
14223: PUSH
14224: LD_INT 11
14226: PUSH
14227: LD_INT 12
14229: PUSH
14230: LD_INT 15
14232: PUSH
14233: LD_INT 14
14235: PUSH
14236: LD_INT 13
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_VAR 0 2
14251: PUSH
14252: LD_INT 3
14254: MINUS
14255: ARRAY
14256: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14257: LD_ADDR_OWVAR 45
14261: PUSH
14262: LD_INT 9
14264: ST_TO_ADDR
// end ; 10 .. 13 :
14265: GO 14775
14267: LD_INT 10
14269: DOUBLE
14270: GREATEREQUAL
14271: IFFALSE 14279
14273: LD_INT 13
14275: DOUBLE
14276: LESSEQUAL
14277: IFTRUE 14281
14279: GO 14358
14281: POP
// begin bc_type := b_lab_full ;
14282: LD_ADDR_OWVAR 42
14286: PUSH
14287: LD_INT 8
14289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14290: LD_ADDR_OWVAR 44
14294: PUSH
14295: LD_INT 10
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 14
14303: PUSH
14304: LD_INT 13
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: LD_INT 9
14320: MINUS
14321: ARRAY
14322: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14323: LD_ADDR_OWVAR 45
14327: PUSH
14328: LD_INT 11
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 12
14336: PUSH
14337: LD_INT 15
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 9
14353: MINUS
14354: ARRAY
14355: ST_TO_ADDR
// end ; 14 :
14356: GO 14775
14358: LD_INT 14
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14377
14366: POP
// bc_type := b_workshop ; 15 :
14367: LD_ADDR_OWVAR 42
14371: PUSH
14372: LD_INT 2
14374: ST_TO_ADDR
14375: GO 14775
14377: LD_INT 15
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// bc_type := b_factory ; 16 :
14386: LD_ADDR_OWVAR 42
14390: PUSH
14391: LD_INT 3
14393: ST_TO_ADDR
14394: GO 14775
14396: LD_INT 16
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14415
14404: POP
// bc_type := b_ext_gun ; 17 :
14405: LD_ADDR_OWVAR 42
14409: PUSH
14410: LD_INT 17
14412: ST_TO_ADDR
14413: GO 14775
14415: LD_INT 17
14417: DOUBLE
14418: EQUAL
14419: IFTRUE 14423
14421: GO 14451
14423: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14424: LD_ADDR_OWVAR 42
14428: PUSH
14429: LD_INT 19
14431: PUSH
14432: LD_INT 23
14434: PUSH
14435: LD_INT 19
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: LD_VAR 0 1
14447: ARRAY
14448: ST_TO_ADDR
14449: GO 14775
14451: LD_INT 18
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14470
14459: POP
// bc_type := b_ext_radar ; 19 :
14460: LD_ADDR_OWVAR 42
14464: PUSH
14465: LD_INT 20
14467: ST_TO_ADDR
14468: GO 14775
14470: LD_INT 19
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14489
14478: POP
// bc_type := b_ext_radio ; 20 :
14479: LD_ADDR_OWVAR 42
14483: PUSH
14484: LD_INT 22
14486: ST_TO_ADDR
14487: GO 14775
14489: LD_INT 20
14491: DOUBLE
14492: EQUAL
14493: IFTRUE 14497
14495: GO 14508
14497: POP
// bc_type := b_ext_siberium ; 21 :
14498: LD_ADDR_OWVAR 42
14502: PUSH
14503: LD_INT 21
14505: ST_TO_ADDR
14506: GO 14775
14508: LD_INT 21
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14527
14516: POP
// bc_type := b_ext_computer ; 22 :
14517: LD_ADDR_OWVAR 42
14521: PUSH
14522: LD_INT 24
14524: ST_TO_ADDR
14525: GO 14775
14527: LD_INT 22
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14546
14535: POP
// bc_type := b_ext_track ; 23 :
14536: LD_ADDR_OWVAR 42
14540: PUSH
14541: LD_INT 16
14543: ST_TO_ADDR
14544: GO 14775
14546: LD_INT 23
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14565
14554: POP
// bc_type := b_ext_laser ; 24 :
14555: LD_ADDR_OWVAR 42
14559: PUSH
14560: LD_INT 25
14562: ST_TO_ADDR
14563: GO 14775
14565: LD_INT 24
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14584
14573: POP
// bc_type := b_control_tower ; 25 :
14574: LD_ADDR_OWVAR 42
14578: PUSH
14579: LD_INT 36
14581: ST_TO_ADDR
14582: GO 14775
14584: LD_INT 25
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14603
14592: POP
// bc_type := b_breastwork ; 26 :
14593: LD_ADDR_OWVAR 42
14597: PUSH
14598: LD_INT 31
14600: ST_TO_ADDR
14601: GO 14775
14603: LD_INT 26
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14622
14611: POP
// bc_type := b_bunker ; 27 :
14612: LD_ADDR_OWVAR 42
14616: PUSH
14617: LD_INT 32
14619: ST_TO_ADDR
14620: GO 14775
14622: LD_INT 27
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14641
14630: POP
// bc_type := b_turret ; 28 :
14631: LD_ADDR_OWVAR 42
14635: PUSH
14636: LD_INT 33
14638: ST_TO_ADDR
14639: GO 14775
14641: LD_INT 28
14643: DOUBLE
14644: EQUAL
14645: IFTRUE 14649
14647: GO 14660
14649: POP
// bc_type := b_armoury ; 29 :
14650: LD_ADDR_OWVAR 42
14654: PUSH
14655: LD_INT 4
14657: ST_TO_ADDR
14658: GO 14775
14660: LD_INT 29
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14679
14668: POP
// bc_type := b_barracks ; 30 :
14669: LD_ADDR_OWVAR 42
14673: PUSH
14674: LD_INT 5
14676: ST_TO_ADDR
14677: GO 14775
14679: LD_INT 30
14681: DOUBLE
14682: EQUAL
14683: IFTRUE 14687
14685: GO 14698
14687: POP
// bc_type := b_solar_power ; 31 :
14688: LD_ADDR_OWVAR 42
14692: PUSH
14693: LD_INT 27
14695: ST_TO_ADDR
14696: GO 14775
14698: LD_INT 31
14700: DOUBLE
14701: EQUAL
14702: IFTRUE 14706
14704: GO 14717
14706: POP
// bc_type := b_oil_power ; 32 :
14707: LD_ADDR_OWVAR 42
14711: PUSH
14712: LD_INT 26
14714: ST_TO_ADDR
14715: GO 14775
14717: LD_INT 32
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14736
14725: POP
// bc_type := b_siberite_power ; 33 :
14726: LD_ADDR_OWVAR 42
14730: PUSH
14731: LD_INT 28
14733: ST_TO_ADDR
14734: GO 14775
14736: LD_INT 33
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14755
14744: POP
// bc_type := b_oil_mine ; 34 :
14745: LD_ADDR_OWVAR 42
14749: PUSH
14750: LD_INT 29
14752: ST_TO_ADDR
14753: GO 14775
14755: LD_INT 34
14757: DOUBLE
14758: EQUAL
14759: IFTRUE 14763
14761: GO 14774
14763: POP
// bc_type := b_siberite_mine ; end ;
14764: LD_ADDR_OWVAR 42
14768: PUSH
14769: LD_INT 30
14771: ST_TO_ADDR
14772: GO 14775
14774: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14775: LD_ADDR_VAR 0 8
14779: PUSH
14780: LD_VAR 0 5
14784: PPUSH
14785: LD_VAR 0 6
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 47
14799: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14800: LD_OWVAR 42
14804: PUSH
14805: LD_INT 32
14807: PUSH
14808: LD_INT 33
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: IN
14815: IFFALSE 14831
// PlaceWeaponTurret ( b , weapon ) ;
14817: LD_VAR 0 8
14821: PPUSH
14822: LD_VAR 0 4
14826: PPUSH
14827: CALL_OW 431
// end ;
14831: LD_VAR 0 7
14835: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14842: LD_ADDR_VAR 0 4
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 0
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 30
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 4
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14964
// for i in tmp do
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_VAR 0 4
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14962
// for j = 1 to 3 do
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: DOUBLE
14924: LD_INT 1
14926: DEC
14927: ST_TO_ADDR
14928: LD_INT 3
14930: PUSH
14931: FOR_TO
14932: IFFALSE 14958
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 274
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 99999
14951: PPUSH
14952: CALL_OW 277
14956: GO 14931
14958: POP
14959: POP
14960: GO 14915
14962: POP
14963: POP
// end ;
14964: LD_VAR 0 1
14968: RET
// export function hHackSetLevel10 ; var i , j ; begin
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
14973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 1
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15047
// if IsSelected ( i ) then
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 306
15006: IFFALSE 15045
// begin for j := 1 to 4 do
15008: LD_ADDR_VAR 0 3
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 4
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15043
// SetSkill ( i , j , 10 ) ;
15024: LD_VAR 0 2
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 10
15036: PPUSH
15037: CALL_OW 237
15041: GO 15021
15043: POP
15044: POP
// end ;
15045: GO 14994
15047: POP
15048: POP
// end ;
15049: LD_VAR 0 1
15053: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15054: LD_INT 0
15056: PPUSH
15057: PPUSH
15058: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 22
15066: PUSH
15067: LD_OWVAR 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15137
// begin for j := 1 to 4 do
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: DOUBLE
15104: LD_INT 1
15106: DEC
15107: ST_TO_ADDR
15108: LD_INT 4
15110: PUSH
15111: FOR_TO
15112: IFFALSE 15133
// SetSkill ( i , j , 10 ) ;
15114: LD_VAR 0 2
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 10
15126: PPUSH
15127: CALL_OW 237
15131: GO 15111
15133: POP
15134: POP
// end ;
15135: GO 15095
15137: POP
15138: POP
// end ;
15139: LD_VAR 0 1
15143: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15144: LD_INT 0
15146: PPUSH
// uc_side := your_side ;
15147: LD_ADDR_OWVAR 20
15151: PUSH
15152: LD_OWVAR 2
15156: ST_TO_ADDR
// uc_nation := nation ;
15157: LD_ADDR_OWVAR 21
15161: PUSH
15162: LD_VAR 0 1
15166: ST_TO_ADDR
// InitHc ;
15167: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15171: LD_INT 0
15173: PPUSH
15174: LD_VAR 0 2
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15188: LD_VAR 0 4
15192: PPUSH
15193: LD_VAR 0 5
15197: PPUSH
15198: CALL_OW 428
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15230
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15208: CALL_OW 44
15212: PPUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 48
// end ;
15230: LD_VAR 0 6
15234: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
// uc_side := your_side ;
15239: LD_ADDR_OWVAR 20
15243: PUSH
15244: LD_OWVAR 2
15248: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15249: LD_VAR 0 1
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: IN
15276: IFFALSE 15288
// uc_nation := nation_american else
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
15286: GO 15331
// if chassis in [ 11 , 12 , 13 , 14 ] then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: IN
15311: IFFALSE 15323
// uc_nation := nation_arabian else
15313: LD_ADDR_OWVAR 21
15317: PUSH
15318: LD_INT 2
15320: ST_TO_ADDR
15321: GO 15331
// uc_nation := nation_russian ;
15323: LD_ADDR_OWVAR 21
15327: PUSH
15328: LD_INT 3
15330: ST_TO_ADDR
// vc_chassis := chassis ;
15331: LD_ADDR_OWVAR 37
15335: PUSH
15336: LD_VAR 0 1
15340: ST_TO_ADDR
// vc_engine := engine ;
15341: LD_ADDR_OWVAR 39
15345: PUSH
15346: LD_VAR 0 2
15350: ST_TO_ADDR
// vc_control := control ;
15351: LD_ADDR_OWVAR 38
15355: PUSH
15356: LD_VAR 0 3
15360: ST_TO_ADDR
// vc_weapon := weapon ;
15361: LD_ADDR_OWVAR 40
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// un := CreateVehicle ;
15371: LD_ADDR_VAR 0 8
15375: PUSH
15376: CALL_OW 45
15380: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15381: LD_VAR 0 8
15385: PPUSH
15386: LD_INT 0
15388: PPUSH
15389: LD_INT 5
15391: PPUSH
15392: CALL_OW 12
15396: PPUSH
15397: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15401: LD_VAR 0 8
15405: PPUSH
15406: LD_VAR 0 5
15410: PPUSH
15411: LD_VAR 0 6
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 48
// end ;
15423: LD_VAR 0 7
15427: RET
// export hInvincible ; every 1 do
15428: GO 15430
15430: DISABLE
// hInvincible := [ ] ;
15431: LD_ADDR_EXP 60
15435: PUSH
15436: EMPTY
15437: ST_TO_ADDR
15438: END
// every 10 do var i ;
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin enable ;
15445: ENABLE
// if not hInvincible then
15446: LD_EXP 60
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15499
// for i in hInvincible do
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_EXP 60
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15497
// if GetLives ( i ) < 1000 then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 256
15477: PUSH
15478: LD_INT 1000
15480: LESS
15481: IFFALSE 15495
// SetLives ( i , 1000 ) ;
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_INT 1000
15490: PPUSH
15491: CALL_OW 234
15495: GO 15465
15497: POP
15498: POP
// end ;
15499: PPOPN 1
15501: END
// export function hHackInvincible ; var i ; begin
15502: LD_INT 0
15504: PPUSH
15505: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15606
// if IsSelected ( i ) then
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 306
15556: IFFALSE 15604
// begin if i in hInvincible then
15558: LD_VAR 0 2
15562: PUSH
15563: LD_EXP 60
15567: IN
15568: IFFALSE 15588
// hInvincible := hInvincible diff i else
15570: LD_ADDR_EXP 60
15574: PUSH
15575: LD_EXP 60
15579: PUSH
15580: LD_VAR 0 2
15584: DIFF
15585: ST_TO_ADDR
15586: GO 15604
// hInvincible := hInvincible union i ;
15588: LD_ADDR_EXP 60
15592: PUSH
15593: LD_EXP 60
15597: PUSH
15598: LD_VAR 0 2
15602: UNION
15603: ST_TO_ADDR
// end ;
15604: GO 15544
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function hHackInvisible ; var i , j ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 21
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15663
// if IsSelected ( i ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 306
15650: IFFALSE 15661
// ComForceInvisible ( i ) ;
15652: LD_VAR 0 2
15656: PPUSH
15657: CALL_OW 496
15661: GO 15638
15663: POP
15664: POP
// end ;
15665: LD_VAR 0 1
15669: RET
// export function hHackChangeYourSide ; begin
15670: LD_INT 0
15672: PPUSH
// if your_side = 8 then
15673: LD_OWVAR 2
15677: PUSH
15678: LD_INT 8
15680: EQUAL
15681: IFFALSE 15693
// your_side := 0 else
15683: LD_ADDR_OWVAR 2
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
15691: GO 15707
// your_side := your_side + 1 ;
15693: LD_ADDR_OWVAR 2
15697: PUSH
15698: LD_OWVAR 2
15702: PUSH
15703: LD_INT 1
15705: PLUS
15706: ST_TO_ADDR
// end ;
15707: LD_VAR 0 1
15711: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
// for i in all_units do
15717: LD_ADDR_VAR 0 2
15721: PUSH
15722: LD_OWVAR 3
15726: PUSH
15727: FOR_IN
15728: IFFALSE 15806
// if IsSelected ( i ) then
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 306
15739: IFFALSE 15804
// begin j := GetSide ( i ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 255
15755: ST_TO_ADDR
// if j = 8 then
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 8
15763: EQUAL
15764: IFFALSE 15776
// j := 0 else
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
15774: GO 15790
// j := j + 1 ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: ST_TO_ADDR
// SetSide ( i , j ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: LD_VAR 0 3
15799: PPUSH
15800: CALL_OW 235
// end ;
15804: GO 15727
15806: POP
15807: POP
// end ;
15808: LD_VAR 0 1
15812: RET
// export function hHackFog ; begin
15813: LD_INT 0
15815: PPUSH
// FogOff ( true ) ;
15816: LD_INT 1
15818: PPUSH
15819: CALL_OW 344
// end ;
15823: LD_VAR 0 1
15827: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15828: LD_INT 0
15830: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15831: LD_VAR 0 1
15835: PPUSH
15836: LD_VAR 0 2
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 483
// CenterOnXY ( x , y ) ;
15856: LD_VAR 0 2
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 84
// end ;
15870: LD_VAR 0 4
15874: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 2
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: CALL_OW 488
15899: NOT
15900: OR
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PUSH
15912: LD_INT 3
15914: NONEQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 1
15928: EQUAL
15929: NOT
15930: AND
15931: OR
15932: IFFALSE 15936
// exit ;
15934: GO 16085
// if GetType ( factory ) = unit_human then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 247
15945: PUSH
15946: LD_INT 1
15948: EQUAL
15949: IFFALSE 15966
// factory := IsInUnit ( factory ) ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 310
15965: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 266
15975: PUSH
15976: LD_INT 3
15978: NONEQUAL
15979: IFFALSE 15983
// exit ;
15981: GO 16085
// if HexInfo ( x , y ) = factory then
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: CALL_OW 428
15997: PUSH
15998: LD_VAR 0 1
16002: EQUAL
16003: IFFALSE 16030
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16005: LD_ADDR_EXP 61
16009: PUSH
16010: LD_EXP 61
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: LD_INT 0
16022: PPUSH
16023: CALL_OW 1
16027: ST_TO_ADDR
16028: GO 16081
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16030: LD_ADDR_EXP 61
16034: PUSH
16035: LD_EXP 61
16039: PPUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 255
16054: PUSH
16055: LD_VAR 0 1
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_VAR 0 3
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 1
16080: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16081: CALL 16090 0 0
// end ;
16085: LD_VAR 0 4
16089: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16095: LD_STRING resetFactoryWaypoint();
16097: PPUSH
16098: CALL_OW 559
// if factoryWaypoints then
16102: LD_EXP 61
16106: IFFALSE 16232
// begin list := PrepareArray ( factoryWaypoints ) ;
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: LD_EXP 61
16117: PPUSH
16118: CALL 63751 0 1
16122: ST_TO_ADDR
// for i := 1 to list do
16123: LD_ADDR_VAR 0 2
16127: PUSH
16128: DOUBLE
16129: LD_INT 1
16131: DEC
16132: ST_TO_ADDR
16133: LD_VAR 0 3
16137: PUSH
16138: FOR_TO
16139: IFFALSE 16230
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16141: LD_STRING setFactoryWaypointXY(
16143: PUSH
16144: LD_VAR 0 3
16148: PUSH
16149: LD_VAR 0 2
16153: ARRAY
16154: PUSH
16155: LD_INT 1
16157: ARRAY
16158: STR
16159: PUSH
16160: LD_STRING ,
16162: STR
16163: PUSH
16164: LD_VAR 0 3
16168: PUSH
16169: LD_VAR 0 2
16173: ARRAY
16174: PUSH
16175: LD_INT 2
16177: ARRAY
16178: STR
16179: PUSH
16180: LD_STRING ,
16182: STR
16183: PUSH
16184: LD_VAR 0 3
16188: PUSH
16189: LD_VAR 0 2
16193: ARRAY
16194: PUSH
16195: LD_INT 3
16197: ARRAY
16198: STR
16199: PUSH
16200: LD_STRING ,
16202: STR
16203: PUSH
16204: LD_VAR 0 3
16208: PUSH
16209: LD_VAR 0 2
16213: ARRAY
16214: PUSH
16215: LD_INT 4
16217: ARRAY
16218: STR
16219: PUSH
16220: LD_STRING )
16222: STR
16223: PPUSH
16224: CALL_OW 559
16228: GO 16138
16230: POP
16231: POP
// end ; end ;
16232: LD_VAR 0 1
16236: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16237: LD_INT 0
16239: PPUSH
// if HexInfo ( x , y ) = warehouse then
16240: LD_VAR 0 2
16244: PPUSH
16245: LD_VAR 0 3
16249: PPUSH
16250: CALL_OW 428
16254: PUSH
16255: LD_VAR 0 1
16259: EQUAL
16260: IFFALSE 16287
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16262: LD_ADDR_EXP 62
16266: PUSH
16267: LD_EXP 62
16271: PPUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: LD_INT 0
16279: PPUSH
16280: CALL_OW 1
16284: ST_TO_ADDR
16285: GO 16338
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16287: LD_ADDR_EXP 62
16291: PUSH
16292: LD_EXP 62
16296: PPUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 255
16311: PUSH
16312: LD_VAR 0 1
16316: PUSH
16317: LD_VAR 0 2
16321: PUSH
16322: LD_VAR 0 3
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 1
16337: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16338: CALL 16347 0 0
// end ;
16342: LD_VAR 0 4
16346: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
16351: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16352: LD_STRING resetWarehouseGatheringPoints();
16354: PPUSH
16355: CALL_OW 559
// if warehouseGatheringPoints then
16359: LD_EXP 62
16363: IFFALSE 16489
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16365: LD_ADDR_VAR 0 3
16369: PUSH
16370: LD_EXP 62
16374: PPUSH
16375: CALL 63751 0 1
16379: ST_TO_ADDR
// for i := 1 to list do
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: DOUBLE
16386: LD_INT 1
16388: DEC
16389: ST_TO_ADDR
16390: LD_VAR 0 3
16394: PUSH
16395: FOR_TO
16396: IFFALSE 16487
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16398: LD_STRING setWarehouseGatheringPointXY(
16400: PUSH
16401: LD_VAR 0 3
16405: PUSH
16406: LD_VAR 0 2
16410: ARRAY
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: STR
16416: PUSH
16417: LD_STRING ,
16419: STR
16420: PUSH
16421: LD_VAR 0 3
16425: PUSH
16426: LD_VAR 0 2
16430: ARRAY
16431: PUSH
16432: LD_INT 2
16434: ARRAY
16435: STR
16436: PUSH
16437: LD_STRING ,
16439: STR
16440: PUSH
16441: LD_VAR 0 3
16445: PUSH
16446: LD_VAR 0 2
16450: ARRAY
16451: PUSH
16452: LD_INT 3
16454: ARRAY
16455: STR
16456: PUSH
16457: LD_STRING ,
16459: STR
16460: PUSH
16461: LD_VAR 0 3
16465: PUSH
16466: LD_VAR 0 2
16470: ARRAY
16471: PUSH
16472: LD_INT 4
16474: ARRAY
16475: STR
16476: PUSH
16477: LD_STRING )
16479: STR
16480: PPUSH
16481: CALL_OW 559
16485: GO 16395
16487: POP
16488: POP
// end ; end ;
16489: LD_VAR 0 1
16493: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16494: LD_EXP 62
16498: IFFALSE 17183
16500: GO 16502
16502: DISABLE
16503: LD_INT 0
16505: PPUSH
16506: PPUSH
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
// begin enable ;
16514: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16515: LD_ADDR_VAR 0 3
16519: PUSH
16520: LD_EXP 62
16524: PPUSH
16525: CALL 63751 0 1
16529: ST_TO_ADDR
// if not list then
16530: LD_VAR 0 3
16534: NOT
16535: IFFALSE 16539
// exit ;
16537: GO 17183
// for i := 1 to list do
16539: LD_ADDR_VAR 0 1
16543: PUSH
16544: DOUBLE
16545: LD_INT 1
16547: DEC
16548: ST_TO_ADDR
16549: LD_VAR 0 3
16553: PUSH
16554: FOR_TO
16555: IFFALSE 17181
// begin depot := list [ i ] [ 2 ] ;
16557: LD_ADDR_VAR 0 8
16561: PUSH
16562: LD_VAR 0 3
16566: PUSH
16567: LD_VAR 0 1
16571: ARRAY
16572: PUSH
16573: LD_INT 2
16575: ARRAY
16576: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_VAR 0 3
16586: PUSH
16587: LD_VAR 0 1
16591: ARRAY
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16597: LD_VAR 0 8
16601: PPUSH
16602: CALL_OW 301
16606: PUSH
16607: LD_VAR 0 5
16611: PUSH
16612: LD_VAR 0 8
16616: PPUSH
16617: CALL_OW 255
16621: NONEQUAL
16622: OR
16623: IFFALSE 16652
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16625: LD_ADDR_EXP 62
16629: PUSH
16630: LD_EXP 62
16634: PPUSH
16635: LD_VAR 0 8
16639: PPUSH
16640: LD_INT 0
16642: PPUSH
16643: CALL_OW 1
16647: ST_TO_ADDR
// exit ;
16648: POP
16649: POP
16650: GO 17183
// end ; x := list [ i ] [ 3 ] ;
16652: LD_ADDR_VAR 0 6
16656: PUSH
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 1
16666: ARRAY
16667: PUSH
16668: LD_INT 3
16670: ARRAY
16671: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16672: LD_ADDR_VAR 0 7
16676: PUSH
16677: LD_VAR 0 3
16681: PUSH
16682: LD_VAR 0 1
16686: ARRAY
16687: PUSH
16688: LD_INT 4
16690: ARRAY
16691: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16692: LD_ADDR_VAR 0 9
16696: PUSH
16697: LD_VAR 0 6
16701: PPUSH
16702: LD_VAR 0 7
16706: PPUSH
16707: LD_INT 16
16709: PPUSH
16710: CALL 62339 0 3
16714: ST_TO_ADDR
// if not cratesNearbyPoint then
16715: LD_VAR 0 9
16719: NOT
16720: IFFALSE 16726
// exit ;
16722: POP
16723: POP
16724: GO 17183
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16726: LD_ADDR_VAR 0 4
16730: PUSH
16731: LD_INT 22
16733: PUSH
16734: LD_VAR 0 5
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 3
16745: PUSH
16746: LD_INT 60
16748: PUSH
16749: EMPTY
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 91
16758: PUSH
16759: LD_VAR 0 8
16763: PUSH
16764: LD_INT 6
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 25
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 25
16787: PUSH
16788: LD_INT 16
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 69
16810: PUSH
16811: LD_VAR 0 8
16815: PPUSH
16816: CALL_OW 313
16820: PPUSH
16821: LD_INT 3
16823: PUSH
16824: LD_INT 60
16826: PUSH
16827: EMPTY
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: LD_INT 25
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 16
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 72
16870: UNION
16871: ST_TO_ADDR
// if tmp then
16872: LD_VAR 0 4
16876: IFFALSE 16956
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16878: LD_ADDR_VAR 0 4
16882: PUSH
16883: LD_VAR 0 4
16887: PPUSH
16888: LD_INT 3
16890: PPUSH
16891: CALL 60308 0 2
16895: ST_TO_ADDR
// for j in tmp do
16896: LD_ADDR_VAR 0 2
16900: PUSH
16901: LD_VAR 0 4
16905: PUSH
16906: FOR_IN
16907: IFFALSE 16950
// begin if IsInUnit ( j ) then
16909: LD_VAR 0 2
16913: PPUSH
16914: CALL_OW 310
16918: IFFALSE 16929
// ComExit ( j ) ;
16920: LD_VAR 0 2
16924: PPUSH
16925: CALL 60391 0 1
// AddComCollect ( j , x , y ) ;
16929: LD_VAR 0 2
16933: PPUSH
16934: LD_VAR 0 6
16938: PPUSH
16939: LD_VAR 0 7
16943: PPUSH
16944: CALL_OW 177
// end ;
16948: GO 16906
16950: POP
16951: POP
// exit ;
16952: POP
16953: POP
16954: GO 17183
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16956: LD_ADDR_VAR 0 4
16960: PUSH
16961: LD_INT 22
16963: PUSH
16964: LD_VAR 0 5
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 91
16975: PUSH
16976: LD_VAR 0 8
16980: PUSH
16981: LD_INT 8
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 34
16994: PUSH
16995: LD_INT 12
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 34
17004: PUSH
17005: LD_INT 51
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 34
17014: PUSH
17015: LD_INT 32
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 34
17024: PUSH
17025: LD_INT 89
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: ST_TO_ADDR
// if tmp then
17049: LD_VAR 0 4
17053: IFFALSE 17179
// begin for j in tmp do
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_VAR 0 4
17064: PUSH
17065: FOR_IN
17066: IFFALSE 17177
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 262
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: PUSH
17082: LD_VAR 0 2
17086: PPUSH
17087: CALL_OW 261
17091: PUSH
17092: LD_INT 20
17094: GREATER
17095: OR
17096: PUSH
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 314
17106: NOT
17107: AND
17108: PUSH
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 263
17118: PUSH
17119: LD_INT 1
17121: NONEQUAL
17122: PUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: CALL_OW 311
17132: OR
17133: AND
17134: IFFALSE 17175
// begin ComCollect ( j , x , y ) ;
17136: LD_VAR 0 2
17140: PPUSH
17141: LD_VAR 0 6
17145: PPUSH
17146: LD_VAR 0 7
17150: PPUSH
17151: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17155: LD_VAR 0 2
17159: PPUSH
17160: LD_VAR 0 8
17164: PPUSH
17165: CALL_OW 172
// exit ;
17169: POP
17170: POP
17171: POP
17172: POP
17173: GO 17183
// end ;
17175: GO 17065
17177: POP
17178: POP
// end ; end ;
17179: GO 16554
17181: POP
17182: POP
// end ; end_of_file
17183: PPOPN 9
17185: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17186: LD_INT 0
17188: PPUSH
17189: PPUSH
17190: PPUSH
17191: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 264
17201: PUSH
17202: LD_INT 91
17204: EQUAL
17205: IFFALSE 17277
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17207: LD_INT 68
17209: PPUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 255
17219: PPUSH
17220: CALL_OW 321
17224: PUSH
17225: LD_INT 2
17227: EQUAL
17228: IFFALSE 17240
// eff := 70 else
17230: LD_ADDR_VAR 0 4
17234: PUSH
17235: LD_INT 70
17237: ST_TO_ADDR
17238: GO 17248
// eff := 30 ;
17240: LD_ADDR_VAR 0 4
17244: PUSH
17245: LD_INT 30
17247: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: CALL_OW 250
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 251
17267: PPUSH
17268: LD_VAR 0 4
17272: PPUSH
17273: CALL_OW 495
// end ; end ;
17277: LD_VAR 0 2
17281: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17282: LD_INT 0
17284: PPUSH
// end ;
17285: LD_VAR 0 4
17289: RET
// export function SOS_Command ( cmd ) ; begin
17290: LD_INT 0
17292: PPUSH
// end ;
17293: LD_VAR 0 2
17297: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17298: LD_INT 0
17300: PPUSH
// end ;
17301: LD_VAR 0 6
17305: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
// if not vehicle or not factory then
17310: LD_VAR 0 1
17314: NOT
17315: PUSH
17316: LD_VAR 0 2
17320: NOT
17321: OR
17322: IFFALSE 17326
// exit ;
17324: GO 17557
// if factoryWaypoints >= factory then
17326: LD_EXP 61
17330: PUSH
17331: LD_VAR 0 2
17335: GREATEREQUAL
17336: IFFALSE 17557
// if factoryWaypoints [ factory ] then
17338: LD_EXP 61
17342: PUSH
17343: LD_VAR 0 2
17347: ARRAY
17348: IFFALSE 17557
// begin if GetControl ( vehicle ) = control_manual then
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 263
17359: PUSH
17360: LD_INT 1
17362: EQUAL
17363: IFFALSE 17444
// begin driver := IsDrivenBy ( vehicle ) ;
17365: LD_ADDR_VAR 0 4
17369: PUSH
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 311
17379: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17380: LD_VAR 0 4
17384: PPUSH
17385: LD_EXP 61
17389: PUSH
17390: LD_VAR 0 2
17394: ARRAY
17395: PUSH
17396: LD_INT 3
17398: ARRAY
17399: PPUSH
17400: LD_EXP 61
17404: PUSH
17405: LD_VAR 0 2
17409: ARRAY
17410: PUSH
17411: LD_INT 4
17413: ARRAY
17414: PPUSH
17415: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17419: LD_VAR 0 4
17423: PPUSH
17424: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17428: LD_VAR 0 4
17432: PPUSH
17433: LD_VAR 0 2
17437: PPUSH
17438: CALL_OW 180
// end else
17442: GO 17557
// if GetControl ( vehicle ) = control_remote then
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 263
17453: PUSH
17454: LD_INT 2
17456: EQUAL
17457: IFFALSE 17518
// begin wait ( 0 0$2 ) ;
17459: LD_INT 70
17461: PPUSH
17462: CALL_OW 67
// if Connect ( vehicle ) then
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL 30610 0 1
17475: IFFALSE 17516
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_EXP 61
17486: PUSH
17487: LD_VAR 0 2
17491: ARRAY
17492: PUSH
17493: LD_INT 3
17495: ARRAY
17496: PPUSH
17497: LD_EXP 61
17501: PUSH
17502: LD_VAR 0 2
17506: ARRAY
17507: PUSH
17508: LD_INT 4
17510: ARRAY
17511: PPUSH
17512: CALL_OW 171
// end else
17516: GO 17557
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17518: LD_VAR 0 1
17522: PPUSH
17523: LD_EXP 61
17527: PUSH
17528: LD_VAR 0 2
17532: ARRAY
17533: PUSH
17534: LD_INT 3
17536: ARRAY
17537: PPUSH
17538: LD_EXP 61
17542: PUSH
17543: LD_VAR 0 2
17547: ARRAY
17548: PUSH
17549: LD_INT 4
17551: ARRAY
17552: PPUSH
17553: CALL_OW 171
// end ; end ;
17557: LD_VAR 0 3
17561: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17562: LD_INT 0
17564: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17565: LD_VAR 0 1
17569: PUSH
17570: LD_INT 250
17572: EQUAL
17573: PUSH
17574: LD_VAR 0 2
17578: PPUSH
17579: CALL_OW 264
17583: PUSH
17584: LD_INT 81
17586: EQUAL
17587: AND
17588: IFFALSE 17609
// MinerPlaceMine ( unit , x , y ) ;
17590: LD_VAR 0 2
17594: PPUSH
17595: LD_VAR 0 4
17599: PPUSH
17600: LD_VAR 0 5
17604: PPUSH
17605: CALL 20599 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17609: LD_VAR 0 1
17613: PUSH
17614: LD_INT 251
17616: EQUAL
17617: PUSH
17618: LD_VAR 0 2
17622: PPUSH
17623: CALL_OW 264
17627: PUSH
17628: LD_INT 81
17630: EQUAL
17631: AND
17632: IFFALSE 17653
// MinerDetonateMine ( unit , x , y ) ;
17634: LD_VAR 0 2
17638: PPUSH
17639: LD_VAR 0 4
17643: PPUSH
17644: LD_VAR 0 5
17648: PPUSH
17649: CALL 20874 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17653: LD_VAR 0 1
17657: PUSH
17658: LD_INT 252
17660: EQUAL
17661: PUSH
17662: LD_VAR 0 2
17666: PPUSH
17667: CALL_OW 264
17671: PUSH
17672: LD_INT 81
17674: EQUAL
17675: AND
17676: IFFALSE 17697
// MinerCreateMinefield ( unit , x , y ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: LD_VAR 0 4
17687: PPUSH
17688: LD_VAR 0 5
17692: PPUSH
17693: CALL 21291 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17697: LD_VAR 0 1
17701: PUSH
17702: LD_INT 253
17704: EQUAL
17705: PUSH
17706: LD_VAR 0 2
17710: PPUSH
17711: CALL_OW 257
17715: PUSH
17716: LD_INT 5
17718: EQUAL
17719: AND
17720: IFFALSE 17741
// ComBinocular ( unit , x , y ) ;
17722: LD_VAR 0 2
17726: PPUSH
17727: LD_VAR 0 4
17731: PPUSH
17732: LD_VAR 0 5
17736: PPUSH
17737: CALL 21660 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17741: LD_VAR 0 1
17745: PUSH
17746: LD_INT 254
17748: EQUAL
17749: PUSH
17750: LD_VAR 0 2
17754: PPUSH
17755: CALL_OW 264
17759: PUSH
17760: LD_INT 99
17762: EQUAL
17763: AND
17764: PUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: CALL_OW 263
17774: PUSH
17775: LD_INT 3
17777: EQUAL
17778: AND
17779: IFFALSE 17795
// HackDestroyVehicle ( unit , selectedUnit ) ;
17781: LD_VAR 0 2
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: CALL 19963 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17795: LD_VAR 0 1
17799: PUSH
17800: LD_INT 255
17802: EQUAL
17803: PUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 264
17813: PUSH
17814: LD_INT 14
17816: PUSH
17817: LD_INT 53
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: IN
17824: AND
17825: PUSH
17826: LD_VAR 0 4
17830: PPUSH
17831: LD_VAR 0 5
17835: PPUSH
17836: CALL_OW 488
17840: AND
17841: IFFALSE 17865
// CutTreeXYR ( unit , x , y , 12 ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: LD_VAR 0 4
17852: PPUSH
17853: LD_VAR 0 5
17857: PPUSH
17858: LD_INT 12
17860: PPUSH
17861: CALL 17960 0 4
// if cmd = 256 then
17865: LD_VAR 0 1
17869: PUSH
17870: LD_INT 256
17872: EQUAL
17873: IFFALSE 17894
// SetFactoryWaypoint ( unit , x , y ) ;
17875: LD_VAR 0 2
17879: PPUSH
17880: LD_VAR 0 4
17884: PPUSH
17885: LD_VAR 0 5
17889: PPUSH
17890: CALL 15875 0 3
// if cmd = 257 then
17894: LD_VAR 0 1
17898: PUSH
17899: LD_INT 257
17901: EQUAL
17902: IFFALSE 17923
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17904: LD_VAR 0 2
17908: PPUSH
17909: LD_VAR 0 4
17913: PPUSH
17914: LD_VAR 0 5
17918: PPUSH
17919: CALL 16237 0 3
// if cmd = 258 then
17923: LD_VAR 0 1
17927: PUSH
17928: LD_INT 258
17930: EQUAL
17931: IFFALSE 17955
// BurnTreeXYR ( unit , x , y , 8 ) ;
17933: LD_VAR 0 2
17937: PPUSH
17938: LD_VAR 0 4
17942: PPUSH
17943: LD_VAR 0 5
17947: PPUSH
17948: LD_INT 8
17950: PPUSH
17951: CALL 18354 0 4
// end ;
17955: LD_VAR 0 6
17959: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17960: LD_INT 0
17962: PPUSH
17963: PPUSH
17964: PPUSH
17965: PPUSH
17966: PPUSH
17967: PPUSH
17968: PPUSH
17969: PPUSH
17970: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 302
17980: NOT
17981: PUSH
17982: LD_VAR 0 2
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: CALL_OW 488
17996: NOT
17997: OR
17998: PUSH
17999: LD_VAR 0 4
18003: NOT
18004: OR
18005: IFFALSE 18009
// exit ;
18007: GO 18349
// list := [ ] ;
18009: LD_ADDR_VAR 0 13
18013: PUSH
18014: EMPTY
18015: ST_TO_ADDR
// if x - r < 0 then
18016: LD_VAR 0 2
18020: PUSH
18021: LD_VAR 0 4
18025: MINUS
18026: PUSH
18027: LD_INT 0
18029: LESS
18030: IFFALSE 18042
// min_x := 0 else
18032: LD_ADDR_VAR 0 7
18036: PUSH
18037: LD_INT 0
18039: ST_TO_ADDR
18040: GO 18058
// min_x := x - r ;
18042: LD_ADDR_VAR 0 7
18046: PUSH
18047: LD_VAR 0 2
18051: PUSH
18052: LD_VAR 0 4
18056: MINUS
18057: ST_TO_ADDR
// if y - r < 0 then
18058: LD_VAR 0 3
18062: PUSH
18063: LD_VAR 0 4
18067: MINUS
18068: PUSH
18069: LD_INT 0
18071: LESS
18072: IFFALSE 18084
// min_y := 0 else
18074: LD_ADDR_VAR 0 8
18078: PUSH
18079: LD_INT 0
18081: ST_TO_ADDR
18082: GO 18100
// min_y := y - r ;
18084: LD_ADDR_VAR 0 8
18088: PUSH
18089: LD_VAR 0 3
18093: PUSH
18094: LD_VAR 0 4
18098: MINUS
18099: ST_TO_ADDR
// max_x := x + r ;
18100: LD_ADDR_VAR 0 9
18104: PUSH
18105: LD_VAR 0 2
18109: PUSH
18110: LD_VAR 0 4
18114: PLUS
18115: ST_TO_ADDR
// max_y := y + r ;
18116: LD_ADDR_VAR 0 10
18120: PUSH
18121: LD_VAR 0 3
18125: PUSH
18126: LD_VAR 0 4
18130: PLUS
18131: ST_TO_ADDR
// for _x = min_x to max_x do
18132: LD_ADDR_VAR 0 11
18136: PUSH
18137: DOUBLE
18138: LD_VAR 0 7
18142: DEC
18143: ST_TO_ADDR
18144: LD_VAR 0 9
18148: PUSH
18149: FOR_TO
18150: IFFALSE 18267
// for _y = min_y to max_y do
18152: LD_ADDR_VAR 0 12
18156: PUSH
18157: DOUBLE
18158: LD_VAR 0 8
18162: DEC
18163: ST_TO_ADDR
18164: LD_VAR 0 10
18168: PUSH
18169: FOR_TO
18170: IFFALSE 18263
// begin if not ValidHex ( _x , _y ) then
18172: LD_VAR 0 11
18176: PPUSH
18177: LD_VAR 0 12
18181: PPUSH
18182: CALL_OW 488
18186: NOT
18187: IFFALSE 18191
// continue ;
18189: GO 18169
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18191: LD_VAR 0 11
18195: PPUSH
18196: LD_VAR 0 12
18200: PPUSH
18201: CALL_OW 351
18205: PUSH
18206: LD_VAR 0 11
18210: PPUSH
18211: LD_VAR 0 12
18215: PPUSH
18216: CALL_OW 554
18220: AND
18221: IFFALSE 18261
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18223: LD_ADDR_VAR 0 13
18227: PUSH
18228: LD_VAR 0 13
18232: PPUSH
18233: LD_VAR 0 13
18237: PUSH
18238: LD_INT 1
18240: PLUS
18241: PPUSH
18242: LD_VAR 0 11
18246: PUSH
18247: LD_VAR 0 12
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PPUSH
18256: CALL_OW 2
18260: ST_TO_ADDR
// end ;
18261: GO 18169
18263: POP
18264: POP
18265: GO 18149
18267: POP
18268: POP
// if not list then
18269: LD_VAR 0 13
18273: NOT
18274: IFFALSE 18278
// exit ;
18276: GO 18349
// for i in list do
18278: LD_ADDR_VAR 0 6
18282: PUSH
18283: LD_VAR 0 13
18287: PUSH
18288: FOR_IN
18289: IFFALSE 18347
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18291: LD_VAR 0 1
18295: PPUSH
18296: LD_STRING M
18298: PUSH
18299: LD_VAR 0 6
18303: PUSH
18304: LD_INT 1
18306: ARRAY
18307: PUSH
18308: LD_VAR 0 6
18312: PUSH
18313: LD_INT 2
18315: ARRAY
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: PPUSH
18341: CALL_OW 447
18345: GO 18288
18347: POP
18348: POP
// end ;
18349: LD_VAR 0 5
18353: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
18354: LD_INT 0
18356: PPUSH
18357: PPUSH
18358: PPUSH
18359: PPUSH
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18366: LD_VAR 0 1
18370: PPUSH
18371: CALL_OW 302
18375: NOT
18376: PUSH
18377: LD_VAR 0 2
18381: PPUSH
18382: LD_VAR 0 3
18386: PPUSH
18387: CALL_OW 488
18391: NOT
18392: OR
18393: PUSH
18394: LD_VAR 0 4
18398: NOT
18399: OR
18400: IFFALSE 18404
// exit ;
18402: GO 18917
// list := [ ] ;
18404: LD_ADDR_VAR 0 13
18408: PUSH
18409: EMPTY
18410: ST_TO_ADDR
// if x - r < 0 then
18411: LD_VAR 0 2
18415: PUSH
18416: LD_VAR 0 4
18420: MINUS
18421: PUSH
18422: LD_INT 0
18424: LESS
18425: IFFALSE 18437
// min_x := 0 else
18427: LD_ADDR_VAR 0 7
18431: PUSH
18432: LD_INT 0
18434: ST_TO_ADDR
18435: GO 18453
// min_x := x - r ;
18437: LD_ADDR_VAR 0 7
18441: PUSH
18442: LD_VAR 0 2
18446: PUSH
18447: LD_VAR 0 4
18451: MINUS
18452: ST_TO_ADDR
// if y - r < 0 then
18453: LD_VAR 0 3
18457: PUSH
18458: LD_VAR 0 4
18462: MINUS
18463: PUSH
18464: LD_INT 0
18466: LESS
18467: IFFALSE 18479
// min_y := 0 else
18469: LD_ADDR_VAR 0 8
18473: PUSH
18474: LD_INT 0
18476: ST_TO_ADDR
18477: GO 18495
// min_y := y - r ;
18479: LD_ADDR_VAR 0 8
18483: PUSH
18484: LD_VAR 0 3
18488: PUSH
18489: LD_VAR 0 4
18493: MINUS
18494: ST_TO_ADDR
// max_x := x + r ;
18495: LD_ADDR_VAR 0 9
18499: PUSH
18500: LD_VAR 0 2
18504: PUSH
18505: LD_VAR 0 4
18509: PLUS
18510: ST_TO_ADDR
// max_y := y + r ;
18511: LD_ADDR_VAR 0 10
18515: PUSH
18516: LD_VAR 0 3
18520: PUSH
18521: LD_VAR 0 4
18525: PLUS
18526: ST_TO_ADDR
// for _x = min_x to max_x do
18527: LD_ADDR_VAR 0 11
18531: PUSH
18532: DOUBLE
18533: LD_VAR 0 7
18537: DEC
18538: ST_TO_ADDR
18539: LD_VAR 0 9
18543: PUSH
18544: FOR_TO
18545: IFFALSE 18662
// for _y = min_y to max_y do
18547: LD_ADDR_VAR 0 12
18551: PUSH
18552: DOUBLE
18553: LD_VAR 0 8
18557: DEC
18558: ST_TO_ADDR
18559: LD_VAR 0 10
18563: PUSH
18564: FOR_TO
18565: IFFALSE 18658
// begin if not ValidHex ( _x , _y ) then
18567: LD_VAR 0 11
18571: PPUSH
18572: LD_VAR 0 12
18576: PPUSH
18577: CALL_OW 488
18581: NOT
18582: IFFALSE 18586
// continue ;
18584: GO 18564
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18586: LD_VAR 0 11
18590: PPUSH
18591: LD_VAR 0 12
18595: PPUSH
18596: CALL_OW 351
18600: PUSH
18601: LD_VAR 0 11
18605: PPUSH
18606: LD_VAR 0 12
18610: PPUSH
18611: CALL_OW 554
18615: AND
18616: IFFALSE 18656
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18618: LD_ADDR_VAR 0 13
18622: PUSH
18623: LD_VAR 0 13
18627: PPUSH
18628: LD_VAR 0 13
18632: PUSH
18633: LD_INT 1
18635: PLUS
18636: PPUSH
18637: LD_VAR 0 11
18641: PUSH
18642: LD_VAR 0 12
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 2
18655: ST_TO_ADDR
// end ;
18656: GO 18564
18658: POP
18659: POP
18660: GO 18544
18662: POP
18663: POP
// if not list then
18664: LD_VAR 0 13
18668: NOT
18669: IFFALSE 18673
// exit ;
18671: GO 18917
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18673: LD_ADDR_VAR 0 13
18677: PUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: LD_VAR 0 13
18687: PPUSH
18688: LD_INT 1
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL 27752 0 4
18698: ST_TO_ADDR
// ComStop ( flame ) ;
18699: LD_VAR 0 1
18703: PPUSH
18704: CALL_OW 141
// for i in list do
18708: LD_ADDR_VAR 0 6
18712: PUSH
18713: LD_VAR 0 13
18717: PUSH
18718: FOR_IN
18719: IFFALSE 18750
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18721: LD_VAR 0 1
18725: PPUSH
18726: LD_VAR 0 6
18730: PUSH
18731: LD_INT 1
18733: ARRAY
18734: PPUSH
18735: LD_VAR 0 6
18739: PUSH
18740: LD_INT 2
18742: ARRAY
18743: PPUSH
18744: CALL_OW 176
18748: GO 18718
18750: POP
18751: POP
// repeat wait ( 0 0$1 ) ;
18752: LD_INT 35
18754: PPUSH
18755: CALL_OW 67
// task := GetTaskList ( flame ) ;
18759: LD_ADDR_VAR 0 14
18763: PUSH
18764: LD_VAR 0 1
18768: PPUSH
18769: CALL_OW 437
18773: ST_TO_ADDR
// if not task then
18774: LD_VAR 0 14
18778: NOT
18779: IFFALSE 18783
// exit ;
18781: GO 18917
// if task [ 1 ] [ 1 ] <> | then
18783: LD_VAR 0 14
18787: PUSH
18788: LD_INT 1
18790: ARRAY
18791: PUSH
18792: LD_INT 1
18794: ARRAY
18795: PUSH
18796: LD_STRING |
18798: NONEQUAL
18799: IFFALSE 18803
// exit ;
18801: GO 18917
// _x := task [ 1 ] [ 2 ] ;
18803: LD_ADDR_VAR 0 11
18807: PUSH
18808: LD_VAR 0 14
18812: PUSH
18813: LD_INT 1
18815: ARRAY
18816: PUSH
18817: LD_INT 2
18819: ARRAY
18820: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18821: LD_ADDR_VAR 0 12
18825: PUSH
18826: LD_VAR 0 14
18830: PUSH
18831: LD_INT 1
18833: ARRAY
18834: PUSH
18835: LD_INT 3
18837: ARRAY
18838: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18839: LD_VAR 0 11
18843: PPUSH
18844: LD_VAR 0 12
18848: PPUSH
18849: CALL_OW 351
18853: NOT
18854: PUSH
18855: LD_VAR 0 11
18859: PPUSH
18860: LD_VAR 0 12
18864: PPUSH
18865: CALL_OW 554
18869: NOT
18870: OR
18871: IFFALSE 18905
// begin task := Delete ( task , 1 ) ;
18873: LD_ADDR_VAR 0 14
18877: PUSH
18878: LD_VAR 0 14
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 3
18890: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_VAR 0 14
18900: PPUSH
18901: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL_OW 314
18914: NOT
18915: IFFALSE 18752
// end ;
18917: LD_VAR 0 5
18921: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18922: LD_EXP 64
18926: NOT
18927: IFFALSE 18977
18929: GO 18931
18931: DISABLE
// begin initHack := true ;
18932: LD_ADDR_EXP 64
18936: PUSH
18937: LD_INT 1
18939: ST_TO_ADDR
// hackTanks := [ ] ;
18940: LD_ADDR_EXP 65
18944: PUSH
18945: EMPTY
18946: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18947: LD_ADDR_EXP 66
18951: PUSH
18952: EMPTY
18953: ST_TO_ADDR
// hackLimit := 3 ;
18954: LD_ADDR_EXP 67
18958: PUSH
18959: LD_INT 3
18961: ST_TO_ADDR
// hackDist := 12 ;
18962: LD_ADDR_EXP 68
18966: PUSH
18967: LD_INT 12
18969: ST_TO_ADDR
// hackCounter := [ ] ;
18970: LD_ADDR_EXP 69
18974: PUSH
18975: EMPTY
18976: ST_TO_ADDR
// end ;
18977: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18978: LD_EXP 64
18982: PUSH
18983: LD_INT 34
18985: PUSH
18986: LD_INT 99
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: AND
18998: IFFALSE 19251
19000: GO 19002
19002: DISABLE
19003: LD_INT 0
19005: PPUSH
19006: PPUSH
// begin enable ;
19007: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_INT 34
19015: PUSH
19016: LD_INT 99
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PPUSH
19023: CALL_OW 69
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19249
// begin if not i in hackTanks then
19031: LD_VAR 0 1
19035: PUSH
19036: LD_EXP 65
19040: IN
19041: NOT
19042: IFFALSE 19125
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19044: LD_ADDR_EXP 65
19048: PUSH
19049: LD_EXP 65
19053: PPUSH
19054: LD_EXP 65
19058: PUSH
19059: LD_INT 1
19061: PLUS
19062: PPUSH
19063: LD_VAR 0 1
19067: PPUSH
19068: CALL_OW 1
19072: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19073: LD_ADDR_EXP 66
19077: PUSH
19078: LD_EXP 66
19082: PPUSH
19083: LD_EXP 66
19087: PUSH
19088: LD_INT 1
19090: PLUS
19091: PPUSH
19092: EMPTY
19093: PPUSH
19094: CALL_OW 1
19098: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19099: LD_ADDR_EXP 69
19103: PUSH
19104: LD_EXP 69
19108: PPUSH
19109: LD_EXP 69
19113: PUSH
19114: LD_INT 1
19116: PLUS
19117: PPUSH
19118: EMPTY
19119: PPUSH
19120: CALL_OW 1
19124: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 302
19134: NOT
19135: IFFALSE 19148
// begin HackUnlinkAll ( i ) ;
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL 19254 0 1
// continue ;
19146: GO 19028
// end ; HackCheckCapturedStatus ( i ) ;
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL 19697 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19157: LD_ADDR_VAR 0 2
19161: PUSH
19162: LD_INT 81
19164: PUSH
19165: LD_VAR 0 1
19169: PPUSH
19170: CALL_OW 255
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 33
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 91
19191: PUSH
19192: LD_VAR 0 1
19196: PUSH
19197: LD_EXP 68
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 50
19209: PUSH
19210: EMPTY
19211: LIST
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: PPUSH
19219: CALL_OW 69
19223: ST_TO_ADDR
// if not tmp then
19224: LD_VAR 0 2
19228: NOT
19229: IFFALSE 19233
// continue ;
19231: GO 19028
// HackLink ( i , tmp ) ;
19233: LD_VAR 0 1
19237: PPUSH
19238: LD_VAR 0 2
19242: PPUSH
19243: CALL 19390 0 2
// end ;
19247: GO 19028
19249: POP
19250: POP
// end ;
19251: PPOPN 2
19253: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19254: LD_INT 0
19256: PPUSH
19257: PPUSH
19258: PPUSH
// if not hack in hackTanks then
19259: LD_VAR 0 1
19263: PUSH
19264: LD_EXP 65
19268: IN
19269: NOT
19270: IFFALSE 19274
// exit ;
19272: GO 19385
// index := GetElementIndex ( hackTanks , hack ) ;
19274: LD_ADDR_VAR 0 4
19278: PUSH
19279: LD_EXP 65
19283: PPUSH
19284: LD_VAR 0 1
19288: PPUSH
19289: CALL 27049 0 2
19293: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19294: LD_EXP 66
19298: PUSH
19299: LD_VAR 0 4
19303: ARRAY
19304: IFFALSE 19385
// begin for i in hackTanksCaptured [ index ] do
19306: LD_ADDR_VAR 0 3
19310: PUSH
19311: LD_EXP 66
19315: PUSH
19316: LD_VAR 0 4
19320: ARRAY
19321: PUSH
19322: FOR_IN
19323: IFFALSE 19349
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 1
19332: ARRAY
19333: PPUSH
19334: LD_VAR 0 3
19338: PUSH
19339: LD_INT 2
19341: ARRAY
19342: PPUSH
19343: CALL_OW 235
19347: GO 19322
19349: POP
19350: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19351: LD_ADDR_EXP 66
19355: PUSH
19356: LD_EXP 66
19360: PPUSH
19361: LD_VAR 0 4
19365: PPUSH
19366: EMPTY
19367: PPUSH
19368: CALL_OW 1
19372: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19373: LD_VAR 0 1
19377: PPUSH
19378: LD_INT 0
19380: PPUSH
19381: CALL_OW 505
// end ; end ;
19385: LD_VAR 0 2
19389: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19390: LD_INT 0
19392: PPUSH
19393: PPUSH
19394: PPUSH
// if not hack in hackTanks or not vehicles then
19395: LD_VAR 0 1
19399: PUSH
19400: LD_EXP 65
19404: IN
19405: NOT
19406: PUSH
19407: LD_VAR 0 2
19411: NOT
19412: OR
19413: IFFALSE 19417
// exit ;
19415: GO 19692
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19417: LD_ADDR_VAR 0 2
19421: PUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: LD_INT 1
19437: PPUSH
19438: CALL 27699 0 4
19442: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19443: LD_ADDR_VAR 0 5
19447: PUSH
19448: LD_EXP 65
19452: PPUSH
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL 27049 0 2
19462: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19463: LD_EXP 66
19467: PUSH
19468: LD_VAR 0 5
19472: ARRAY
19473: PUSH
19474: LD_EXP 67
19478: LESS
19479: IFFALSE 19668
// begin for i := 1 to vehicles do
19481: LD_ADDR_VAR 0 4
19485: PUSH
19486: DOUBLE
19487: LD_INT 1
19489: DEC
19490: ST_TO_ADDR
19491: LD_VAR 0 2
19495: PUSH
19496: FOR_TO
19497: IFFALSE 19666
// begin if hackTanksCaptured [ index ] = hackLimit then
19499: LD_EXP 66
19503: PUSH
19504: LD_VAR 0 5
19508: ARRAY
19509: PUSH
19510: LD_EXP 67
19514: EQUAL
19515: IFFALSE 19519
// break ;
19517: GO 19666
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19519: LD_ADDR_EXP 69
19523: PUSH
19524: LD_EXP 69
19528: PPUSH
19529: LD_VAR 0 5
19533: PPUSH
19534: LD_EXP 69
19538: PUSH
19539: LD_VAR 0 5
19543: ARRAY
19544: PUSH
19545: LD_INT 1
19547: PLUS
19548: PPUSH
19549: CALL_OW 1
19553: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19554: LD_ADDR_EXP 66
19558: PUSH
19559: LD_EXP 66
19563: PPUSH
19564: LD_VAR 0 5
19568: PUSH
19569: LD_EXP 66
19573: PUSH
19574: LD_VAR 0 5
19578: ARRAY
19579: PUSH
19580: LD_INT 1
19582: PLUS
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PPUSH
19588: LD_VAR 0 2
19592: PUSH
19593: LD_VAR 0 4
19597: ARRAY
19598: PUSH
19599: LD_VAR 0 2
19603: PUSH
19604: LD_VAR 0 4
19608: ARRAY
19609: PPUSH
19610: CALL_OW 255
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL 27264 0 3
19623: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19624: LD_VAR 0 2
19628: PUSH
19629: LD_VAR 0 4
19633: ARRAY
19634: PPUSH
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 255
19644: PPUSH
19645: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19649: LD_VAR 0 2
19653: PUSH
19654: LD_VAR 0 4
19658: ARRAY
19659: PPUSH
19660: CALL_OW 141
// end ;
19664: GO 19496
19666: POP
19667: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19668: LD_VAR 0 1
19672: PPUSH
19673: LD_EXP 66
19677: PUSH
19678: LD_VAR 0 5
19682: ARRAY
19683: PUSH
19684: LD_INT 0
19686: PLUS
19687: PPUSH
19688: CALL_OW 505
// end ;
19692: LD_VAR 0 3
19696: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19697: LD_INT 0
19699: PPUSH
19700: PPUSH
19701: PPUSH
19702: PPUSH
// if not hack in hackTanks then
19703: LD_VAR 0 1
19707: PUSH
19708: LD_EXP 65
19712: IN
19713: NOT
19714: IFFALSE 19718
// exit ;
19716: GO 19958
// index := GetElementIndex ( hackTanks , hack ) ;
19718: LD_ADDR_VAR 0 4
19722: PUSH
19723: LD_EXP 65
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL 27049 0 2
19737: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19738: LD_ADDR_VAR 0 3
19742: PUSH
19743: DOUBLE
19744: LD_EXP 66
19748: PUSH
19749: LD_VAR 0 4
19753: ARRAY
19754: INC
19755: ST_TO_ADDR
19756: LD_INT 1
19758: PUSH
19759: FOR_DOWNTO
19760: IFFALSE 19932
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19762: LD_ADDR_VAR 0 5
19766: PUSH
19767: LD_EXP 66
19771: PUSH
19772: LD_VAR 0 4
19776: ARRAY
19777: PUSH
19778: LD_VAR 0 3
19782: ARRAY
19783: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19784: LD_VAR 0 5
19788: PUSH
19789: LD_INT 1
19791: ARRAY
19792: PPUSH
19793: CALL_OW 302
19797: NOT
19798: PUSH
19799: LD_VAR 0 5
19803: PUSH
19804: LD_INT 1
19806: ARRAY
19807: PPUSH
19808: CALL_OW 255
19812: PUSH
19813: LD_VAR 0 1
19817: PPUSH
19818: CALL_OW 255
19822: NONEQUAL
19823: OR
19824: IFFALSE 19930
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19826: LD_VAR 0 5
19830: PUSH
19831: LD_INT 1
19833: ARRAY
19834: PPUSH
19835: CALL_OW 305
19839: PUSH
19840: LD_VAR 0 5
19844: PUSH
19845: LD_INT 1
19847: ARRAY
19848: PPUSH
19849: CALL_OW 255
19853: PUSH
19854: LD_VAR 0 1
19858: PPUSH
19859: CALL_OW 255
19863: EQUAL
19864: AND
19865: IFFALSE 19889
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19867: LD_VAR 0 5
19871: PUSH
19872: LD_INT 1
19874: ARRAY
19875: PPUSH
19876: LD_VAR 0 5
19880: PUSH
19881: LD_INT 2
19883: ARRAY
19884: PPUSH
19885: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19889: LD_ADDR_EXP 66
19893: PUSH
19894: LD_EXP 66
19898: PPUSH
19899: LD_VAR 0 4
19903: PPUSH
19904: LD_EXP 66
19908: PUSH
19909: LD_VAR 0 4
19913: ARRAY
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 3
19924: PPUSH
19925: CALL_OW 1
19929: ST_TO_ADDR
// end ; end ;
19930: GO 19759
19932: POP
19933: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19934: LD_VAR 0 1
19938: PPUSH
19939: LD_EXP 66
19943: PUSH
19944: LD_VAR 0 4
19948: ARRAY
19949: PUSH
19950: LD_INT 0
19952: PLUS
19953: PPUSH
19954: CALL_OW 505
// end ;
19958: LD_VAR 0 2
19962: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19963: LD_INT 0
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
// if not hack in hackTanks then
19969: LD_VAR 0 1
19973: PUSH
19974: LD_EXP 65
19978: IN
19979: NOT
19980: IFFALSE 19984
// exit ;
19982: GO 20069
// index := GetElementIndex ( hackTanks , hack ) ;
19984: LD_ADDR_VAR 0 5
19988: PUSH
19989: LD_EXP 65
19993: PPUSH
19994: LD_VAR 0 1
19998: PPUSH
19999: CALL 27049 0 2
20003: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20004: LD_ADDR_VAR 0 4
20008: PUSH
20009: DOUBLE
20010: LD_INT 1
20012: DEC
20013: ST_TO_ADDR
20014: LD_EXP 66
20018: PUSH
20019: LD_VAR 0 5
20023: ARRAY
20024: PUSH
20025: FOR_TO
20026: IFFALSE 20067
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20028: LD_EXP 66
20032: PUSH
20033: LD_VAR 0 5
20037: ARRAY
20038: PUSH
20039: LD_VAR 0 4
20043: ARRAY
20044: PUSH
20045: LD_INT 1
20047: ARRAY
20048: PUSH
20049: LD_VAR 0 2
20053: EQUAL
20054: IFFALSE 20065
// KillUnit ( vehicle ) ;
20056: LD_VAR 0 2
20060: PPUSH
20061: CALL_OW 66
20065: GO 20025
20067: POP
20068: POP
// end ;
20069: LD_VAR 0 3
20073: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20074: LD_EXP 70
20078: NOT
20079: IFFALSE 20114
20081: GO 20083
20083: DISABLE
// begin initMiner := true ;
20084: LD_ADDR_EXP 70
20088: PUSH
20089: LD_INT 1
20091: ST_TO_ADDR
// minersList := [ ] ;
20092: LD_ADDR_EXP 71
20096: PUSH
20097: EMPTY
20098: ST_TO_ADDR
// minerMinesList := [ ] ;
20099: LD_ADDR_EXP 72
20103: PUSH
20104: EMPTY
20105: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20106: LD_ADDR_EXP 73
20110: PUSH
20111: LD_INT 5
20113: ST_TO_ADDR
// end ;
20114: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20115: LD_EXP 70
20119: PUSH
20120: LD_INT 34
20122: PUSH
20123: LD_INT 81
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PPUSH
20130: CALL_OW 69
20134: AND
20135: IFFALSE 20596
20137: GO 20139
20139: DISABLE
20140: LD_INT 0
20142: PPUSH
20143: PPUSH
20144: PPUSH
20145: PPUSH
// begin enable ;
20146: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20147: LD_ADDR_VAR 0 1
20151: PUSH
20152: LD_INT 34
20154: PUSH
20155: LD_INT 81
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PPUSH
20162: CALL_OW 69
20166: PUSH
20167: FOR_IN
20168: IFFALSE 20240
// begin if not i in minersList then
20170: LD_VAR 0 1
20174: PUSH
20175: LD_EXP 71
20179: IN
20180: NOT
20181: IFFALSE 20238
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20183: LD_ADDR_EXP 71
20187: PUSH
20188: LD_EXP 71
20192: PPUSH
20193: LD_EXP 71
20197: PUSH
20198: LD_INT 1
20200: PLUS
20201: PPUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 1
20211: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20212: LD_ADDR_EXP 72
20216: PUSH
20217: LD_EXP 72
20221: PPUSH
20222: LD_EXP 72
20226: PUSH
20227: LD_INT 1
20229: PLUS
20230: PPUSH
20231: EMPTY
20232: PPUSH
20233: CALL_OW 1
20237: ST_TO_ADDR
// end end ;
20238: GO 20167
20240: POP
20241: POP
// for i := minerMinesList downto 1 do
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: DOUBLE
20248: LD_EXP 72
20252: INC
20253: ST_TO_ADDR
20254: LD_INT 1
20256: PUSH
20257: FOR_DOWNTO
20258: IFFALSE 20594
// begin if IsLive ( minersList [ i ] ) then
20260: LD_EXP 71
20264: PUSH
20265: LD_VAR 0 1
20269: ARRAY
20270: PPUSH
20271: CALL_OW 300
20275: IFFALSE 20303
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20277: LD_EXP 71
20281: PUSH
20282: LD_VAR 0 1
20286: ARRAY
20287: PPUSH
20288: LD_EXP 72
20292: PUSH
20293: LD_VAR 0 1
20297: ARRAY
20298: PPUSH
20299: CALL_OW 505
// if not minerMinesList [ i ] then
20303: LD_EXP 72
20307: PUSH
20308: LD_VAR 0 1
20312: ARRAY
20313: NOT
20314: IFFALSE 20318
// continue ;
20316: GO 20257
// for j := minerMinesList [ i ] downto 1 do
20318: LD_ADDR_VAR 0 2
20322: PUSH
20323: DOUBLE
20324: LD_EXP 72
20328: PUSH
20329: LD_VAR 0 1
20333: ARRAY
20334: INC
20335: ST_TO_ADDR
20336: LD_INT 1
20338: PUSH
20339: FOR_DOWNTO
20340: IFFALSE 20590
// begin side := GetSide ( minersList [ i ] ) ;
20342: LD_ADDR_VAR 0 3
20346: PUSH
20347: LD_EXP 71
20351: PUSH
20352: LD_VAR 0 1
20356: ARRAY
20357: PPUSH
20358: CALL_OW 255
20362: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20363: LD_ADDR_VAR 0 4
20367: PUSH
20368: LD_EXP 72
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: PUSH
20379: LD_VAR 0 2
20383: ARRAY
20384: PUSH
20385: LD_INT 1
20387: ARRAY
20388: PPUSH
20389: LD_EXP 72
20393: PUSH
20394: LD_VAR 0 1
20398: ARRAY
20399: PUSH
20400: LD_VAR 0 2
20404: ARRAY
20405: PUSH
20406: LD_INT 2
20408: ARRAY
20409: PPUSH
20410: CALL_OW 428
20414: ST_TO_ADDR
// if not tmp then
20415: LD_VAR 0 4
20419: NOT
20420: IFFALSE 20424
// continue ;
20422: GO 20339
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20424: LD_VAR 0 4
20428: PUSH
20429: LD_INT 81
20431: PUSH
20432: LD_VAR 0 3
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: IN
20446: PUSH
20447: LD_EXP 72
20451: PUSH
20452: LD_VAR 0 1
20456: ARRAY
20457: PUSH
20458: LD_VAR 0 2
20462: ARRAY
20463: PUSH
20464: LD_INT 1
20466: ARRAY
20467: PPUSH
20468: LD_EXP 72
20472: PUSH
20473: LD_VAR 0 1
20477: ARRAY
20478: PUSH
20479: LD_VAR 0 2
20483: ARRAY
20484: PUSH
20485: LD_INT 2
20487: ARRAY
20488: PPUSH
20489: CALL_OW 458
20493: AND
20494: IFFALSE 20588
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20496: LD_EXP 72
20500: PUSH
20501: LD_VAR 0 1
20505: ARRAY
20506: PUSH
20507: LD_VAR 0 2
20511: ARRAY
20512: PUSH
20513: LD_INT 1
20515: ARRAY
20516: PPUSH
20517: LD_EXP 72
20521: PUSH
20522: LD_VAR 0 1
20526: ARRAY
20527: PUSH
20528: LD_VAR 0 2
20532: ARRAY
20533: PUSH
20534: LD_INT 2
20536: ARRAY
20537: PPUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20547: LD_ADDR_EXP 72
20551: PUSH
20552: LD_EXP 72
20556: PPUSH
20557: LD_VAR 0 1
20561: PPUSH
20562: LD_EXP 72
20566: PUSH
20567: LD_VAR 0 1
20571: ARRAY
20572: PPUSH
20573: LD_VAR 0 2
20577: PPUSH
20578: CALL_OW 3
20582: PPUSH
20583: CALL_OW 1
20587: ST_TO_ADDR
// end ; end ;
20588: GO 20339
20590: POP
20591: POP
// end ;
20592: GO 20257
20594: POP
20595: POP
// end ;
20596: PPOPN 4
20598: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20599: LD_INT 0
20601: PPUSH
20602: PPUSH
// result := false ;
20603: LD_ADDR_VAR 0 4
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL_OW 264
20620: PUSH
20621: LD_INT 81
20623: EQUAL
20624: NOT
20625: IFFALSE 20629
// exit ;
20627: GO 20869
// index := GetElementIndex ( minersList , unit ) ;
20629: LD_ADDR_VAR 0 5
20633: PUSH
20634: LD_EXP 71
20638: PPUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL 27049 0 2
20648: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20649: LD_EXP 72
20653: PUSH
20654: LD_VAR 0 5
20658: ARRAY
20659: PUSH
20660: LD_EXP 73
20664: GREATEREQUAL
20665: IFFALSE 20669
// exit ;
20667: GO 20869
// ComMoveXY ( unit , x , y ) ;
20669: LD_VAR 0 1
20673: PPUSH
20674: LD_VAR 0 2
20678: PPUSH
20679: LD_VAR 0 3
20683: PPUSH
20684: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20688: LD_INT 35
20690: PPUSH
20691: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20695: LD_VAR 0 1
20699: PPUSH
20700: LD_VAR 0 2
20704: PPUSH
20705: LD_VAR 0 3
20709: PPUSH
20710: CALL 58790 0 3
20714: NOT
20715: PUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 314
20725: AND
20726: IFFALSE 20730
// exit ;
20728: GO 20869
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20730: LD_VAR 0 2
20734: PPUSH
20735: LD_VAR 0 3
20739: PPUSH
20740: CALL_OW 428
20744: PUSH
20745: LD_VAR 0 1
20749: EQUAL
20750: PUSH
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 314
20760: NOT
20761: AND
20762: IFFALSE 20688
// PlaySoundXY ( x , y , PlantMine ) ;
20764: LD_VAR 0 2
20768: PPUSH
20769: LD_VAR 0 3
20773: PPUSH
20774: LD_STRING PlantMine
20776: PPUSH
20777: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20781: LD_VAR 0 2
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 255
20800: PPUSH
20801: LD_INT 0
20803: PPUSH
20804: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20808: LD_ADDR_EXP 72
20812: PUSH
20813: LD_EXP 72
20817: PPUSH
20818: LD_VAR 0 5
20822: PUSH
20823: LD_EXP 72
20827: PUSH
20828: LD_VAR 0 5
20832: ARRAY
20833: PUSH
20834: LD_INT 1
20836: PLUS
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PPUSH
20842: LD_VAR 0 2
20846: PUSH
20847: LD_VAR 0 3
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PPUSH
20856: CALL 27264 0 3
20860: ST_TO_ADDR
// result := true ;
20861: LD_ADDR_VAR 0 4
20865: PUSH
20866: LD_INT 1
20868: ST_TO_ADDR
// end ;
20869: LD_VAR 0 4
20873: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20874: LD_INT 0
20876: PPUSH
20877: PPUSH
20878: PPUSH
// if not unit in minersList then
20879: LD_VAR 0 1
20883: PUSH
20884: LD_EXP 71
20888: IN
20889: NOT
20890: IFFALSE 20894
// exit ;
20892: GO 21286
// index := GetElementIndex ( minersList , unit ) ;
20894: LD_ADDR_VAR 0 6
20898: PUSH
20899: LD_EXP 71
20903: PPUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: CALL 27049 0 2
20913: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20914: LD_ADDR_VAR 0 5
20918: PUSH
20919: DOUBLE
20920: LD_EXP 72
20924: PUSH
20925: LD_VAR 0 6
20929: ARRAY
20930: INC
20931: ST_TO_ADDR
20932: LD_INT 1
20934: PUSH
20935: FOR_DOWNTO
20936: IFFALSE 21097
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20938: LD_EXP 72
20942: PUSH
20943: LD_VAR 0 6
20947: ARRAY
20948: PUSH
20949: LD_VAR 0 5
20953: ARRAY
20954: PUSH
20955: LD_INT 1
20957: ARRAY
20958: PUSH
20959: LD_VAR 0 2
20963: EQUAL
20964: PUSH
20965: LD_EXP 72
20969: PUSH
20970: LD_VAR 0 6
20974: ARRAY
20975: PUSH
20976: LD_VAR 0 5
20980: ARRAY
20981: PUSH
20982: LD_INT 2
20984: ARRAY
20985: PUSH
20986: LD_VAR 0 3
20990: EQUAL
20991: AND
20992: IFFALSE 21095
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20994: LD_EXP 72
20998: PUSH
20999: LD_VAR 0 6
21003: ARRAY
21004: PUSH
21005: LD_VAR 0 5
21009: ARRAY
21010: PUSH
21011: LD_INT 1
21013: ARRAY
21014: PPUSH
21015: LD_EXP 72
21019: PUSH
21020: LD_VAR 0 6
21024: ARRAY
21025: PUSH
21026: LD_VAR 0 5
21030: ARRAY
21031: PUSH
21032: LD_INT 2
21034: ARRAY
21035: PPUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL_OW 255
21045: PPUSH
21046: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21050: LD_ADDR_EXP 72
21054: PUSH
21055: LD_EXP 72
21059: PPUSH
21060: LD_VAR 0 6
21064: PPUSH
21065: LD_EXP 72
21069: PUSH
21070: LD_VAR 0 6
21074: ARRAY
21075: PPUSH
21076: LD_VAR 0 5
21080: PPUSH
21081: CALL_OW 3
21085: PPUSH
21086: CALL_OW 1
21090: ST_TO_ADDR
// exit ;
21091: POP
21092: POP
21093: GO 21286
// end ; end ;
21095: GO 20935
21097: POP
21098: POP
// for i := minerMinesList [ index ] downto 1 do
21099: LD_ADDR_VAR 0 5
21103: PUSH
21104: DOUBLE
21105: LD_EXP 72
21109: PUSH
21110: LD_VAR 0 6
21114: ARRAY
21115: INC
21116: ST_TO_ADDR
21117: LD_INT 1
21119: PUSH
21120: FOR_DOWNTO
21121: IFFALSE 21284
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21123: LD_EXP 72
21127: PUSH
21128: LD_VAR 0 6
21132: ARRAY
21133: PUSH
21134: LD_VAR 0 5
21138: ARRAY
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: LD_EXP 72
21148: PUSH
21149: LD_VAR 0 6
21153: ARRAY
21154: PUSH
21155: LD_VAR 0 5
21159: ARRAY
21160: PUSH
21161: LD_INT 2
21163: ARRAY
21164: PPUSH
21165: LD_VAR 0 2
21169: PPUSH
21170: LD_VAR 0 3
21174: PPUSH
21175: CALL_OW 298
21179: PUSH
21180: LD_INT 6
21182: LESS
21183: IFFALSE 21282
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21185: LD_EXP 72
21189: PUSH
21190: LD_VAR 0 6
21194: ARRAY
21195: PUSH
21196: LD_VAR 0 5
21200: ARRAY
21201: PUSH
21202: LD_INT 1
21204: ARRAY
21205: PPUSH
21206: LD_EXP 72
21210: PUSH
21211: LD_VAR 0 6
21215: ARRAY
21216: PUSH
21217: LD_VAR 0 5
21221: ARRAY
21222: PUSH
21223: LD_INT 2
21225: ARRAY
21226: PPUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL_OW 255
21236: PPUSH
21237: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21241: LD_ADDR_EXP 72
21245: PUSH
21246: LD_EXP 72
21250: PPUSH
21251: LD_VAR 0 6
21255: PPUSH
21256: LD_EXP 72
21260: PUSH
21261: LD_VAR 0 6
21265: ARRAY
21266: PPUSH
21267: LD_VAR 0 5
21271: PPUSH
21272: CALL_OW 3
21276: PPUSH
21277: CALL_OW 1
21281: ST_TO_ADDR
// end ; end ;
21282: GO 21120
21284: POP
21285: POP
// end ;
21286: LD_VAR 0 4
21290: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
21295: PPUSH
21296: PPUSH
21297: PPUSH
21298: PPUSH
21299: PPUSH
21300: PPUSH
21301: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21302: LD_VAR 0 1
21306: PPUSH
21307: CALL_OW 264
21311: PUSH
21312: LD_INT 81
21314: EQUAL
21315: NOT
21316: PUSH
21317: LD_VAR 0 1
21321: PUSH
21322: LD_EXP 71
21326: IN
21327: NOT
21328: OR
21329: IFFALSE 21333
// exit ;
21331: GO 21655
// index := GetElementIndex ( minersList , unit ) ;
21333: LD_ADDR_VAR 0 6
21337: PUSH
21338: LD_EXP 71
21342: PPUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL 27049 0 2
21352: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21353: LD_ADDR_VAR 0 8
21357: PUSH
21358: LD_EXP 73
21362: PUSH
21363: LD_EXP 72
21367: PUSH
21368: LD_VAR 0 6
21372: ARRAY
21373: MINUS
21374: ST_TO_ADDR
// if not minesFreeAmount then
21375: LD_VAR 0 8
21379: NOT
21380: IFFALSE 21384
// exit ;
21382: GO 21655
// tmp := [ ] ;
21384: LD_ADDR_VAR 0 7
21388: PUSH
21389: EMPTY
21390: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21391: LD_ADDR_VAR 0 5
21395: PUSH
21396: DOUBLE
21397: LD_INT 1
21399: DEC
21400: ST_TO_ADDR
21401: LD_VAR 0 8
21405: PUSH
21406: FOR_TO
21407: IFFALSE 21602
// begin _d := rand ( 0 , 5 ) ;
21409: LD_ADDR_VAR 0 11
21413: PUSH
21414: LD_INT 0
21416: PPUSH
21417: LD_INT 5
21419: PPUSH
21420: CALL_OW 12
21424: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21425: LD_ADDR_VAR 0 12
21429: PUSH
21430: LD_INT 2
21432: PPUSH
21433: LD_INT 6
21435: PPUSH
21436: CALL_OW 12
21440: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21441: LD_ADDR_VAR 0 9
21445: PUSH
21446: LD_VAR 0 2
21450: PPUSH
21451: LD_VAR 0 11
21455: PPUSH
21456: LD_VAR 0 12
21460: PPUSH
21461: CALL_OW 272
21465: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21466: LD_ADDR_VAR 0 10
21470: PUSH
21471: LD_VAR 0 3
21475: PPUSH
21476: LD_VAR 0 11
21480: PPUSH
21481: LD_VAR 0 12
21485: PPUSH
21486: CALL_OW 273
21490: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21491: LD_VAR 0 9
21495: PPUSH
21496: LD_VAR 0 10
21500: PPUSH
21501: CALL_OW 488
21505: PUSH
21506: LD_VAR 0 9
21510: PUSH
21511: LD_VAR 0 10
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_VAR 0 7
21524: IN
21525: NOT
21526: AND
21527: PUSH
21528: LD_VAR 0 9
21532: PPUSH
21533: LD_VAR 0 10
21537: PPUSH
21538: CALL_OW 458
21542: NOT
21543: AND
21544: IFFALSE 21586
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21546: LD_ADDR_VAR 0 7
21550: PUSH
21551: LD_VAR 0 7
21555: PPUSH
21556: LD_VAR 0 7
21560: PUSH
21561: LD_INT 1
21563: PLUS
21564: PPUSH
21565: LD_VAR 0 9
21569: PUSH
21570: LD_VAR 0 10
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PPUSH
21579: CALL_OW 1
21583: ST_TO_ADDR
21584: GO 21600
// i := i - 1 ;
21586: LD_ADDR_VAR 0 5
21590: PUSH
21591: LD_VAR 0 5
21595: PUSH
21596: LD_INT 1
21598: MINUS
21599: ST_TO_ADDR
// end ;
21600: GO 21406
21602: POP
21603: POP
// for i in tmp do
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PUSH
21614: FOR_IN
21615: IFFALSE 21653
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21617: LD_VAR 0 1
21621: PPUSH
21622: LD_VAR 0 5
21626: PUSH
21627: LD_INT 1
21629: ARRAY
21630: PPUSH
21631: LD_VAR 0 5
21635: PUSH
21636: LD_INT 2
21638: ARRAY
21639: PPUSH
21640: CALL 20599 0 3
21644: NOT
21645: IFFALSE 21651
// exit ;
21647: POP
21648: POP
21649: GO 21655
21651: GO 21614
21653: POP
21654: POP
// end ;
21655: LD_VAR 0 4
21659: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21660: LD_INT 0
21662: PPUSH
21663: PPUSH
21664: PPUSH
21665: PPUSH
21666: PPUSH
21667: PPUSH
21668: PPUSH
// if not GetClass ( unit ) = class_sniper then
21669: LD_VAR 0 1
21673: PPUSH
21674: CALL_OW 257
21678: PUSH
21679: LD_INT 5
21681: EQUAL
21682: NOT
21683: IFFALSE 21687
// exit ;
21685: GO 22075
// dist := 8 ;
21687: LD_ADDR_VAR 0 5
21691: PUSH
21692: LD_INT 8
21694: ST_TO_ADDR
// viewRange := 12 ;
21695: LD_ADDR_VAR 0 7
21699: PUSH
21700: LD_INT 12
21702: ST_TO_ADDR
// side := GetSide ( unit ) ;
21703: LD_ADDR_VAR 0 6
21707: PUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 255
21717: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21718: LD_INT 61
21720: PPUSH
21721: LD_VAR 0 6
21725: PPUSH
21726: CALL_OW 321
21730: PUSH
21731: LD_INT 2
21733: EQUAL
21734: IFFALSE 21744
// viewRange := 16 ;
21736: LD_ADDR_VAR 0 7
21740: PUSH
21741: LD_INT 16
21743: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_VAR 0 2
21753: PPUSH
21754: LD_VAR 0 3
21758: PPUSH
21759: CALL_OW 297
21763: PUSH
21764: LD_VAR 0 5
21768: GREATER
21769: IFFALSE 21848
// begin ComMoveXY ( unit , x , y ) ;
21771: LD_VAR 0 1
21775: PPUSH
21776: LD_VAR 0 2
21780: PPUSH
21781: LD_VAR 0 3
21785: PPUSH
21786: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21790: LD_INT 35
21792: PPUSH
21793: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21797: LD_VAR 0 1
21801: PPUSH
21802: LD_VAR 0 2
21806: PPUSH
21807: LD_VAR 0 3
21811: PPUSH
21812: CALL 58790 0 3
21816: NOT
21817: IFFALSE 21821
// exit ;
21819: GO 22075
// until GetDistUnitXY ( unit , x , y ) < dist ;
21821: LD_VAR 0 1
21825: PPUSH
21826: LD_VAR 0 2
21830: PPUSH
21831: LD_VAR 0 3
21835: PPUSH
21836: CALL_OW 297
21840: PUSH
21841: LD_VAR 0 5
21845: LESS
21846: IFFALSE 21790
// end ; ComTurnXY ( unit , x , y ) ;
21848: LD_VAR 0 1
21852: PPUSH
21853: LD_VAR 0 2
21857: PPUSH
21858: LD_VAR 0 3
21862: PPUSH
21863: CALL_OW 118
// wait ( 5 ) ;
21867: LD_INT 5
21869: PPUSH
21870: CALL_OW 67
// _d := GetDir ( unit ) ;
21874: LD_ADDR_VAR 0 10
21878: PUSH
21879: LD_VAR 0 1
21883: PPUSH
21884: CALL_OW 254
21888: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21889: LD_ADDR_VAR 0 8
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 250
21903: PPUSH
21904: LD_VAR 0 10
21908: PPUSH
21909: LD_VAR 0 5
21913: PPUSH
21914: CALL_OW 272
21918: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21919: LD_ADDR_VAR 0 9
21923: PUSH
21924: LD_VAR 0 1
21928: PPUSH
21929: CALL_OW 251
21933: PPUSH
21934: LD_VAR 0 10
21938: PPUSH
21939: LD_VAR 0 5
21943: PPUSH
21944: CALL_OW 273
21948: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21949: LD_VAR 0 8
21953: PPUSH
21954: LD_VAR 0 9
21958: PPUSH
21959: CALL_OW 488
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 22075
// ComAnimCustom ( unit , 1 ) ;
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21980: LD_VAR 0 8
21984: PPUSH
21985: LD_VAR 0 9
21989: PPUSH
21990: LD_VAR 0 6
21994: PPUSH
21995: LD_VAR 0 7
21999: PPUSH
22000: CALL_OW 330
// repeat wait ( 1 ) ;
22004: LD_INT 1
22006: PPUSH
22007: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 316
22020: PUSH
22021: LD_VAR 0 1
22025: PPUSH
22026: CALL_OW 314
22030: OR
22031: PUSH
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 302
22041: NOT
22042: OR
22043: PUSH
22044: LD_VAR 0 1
22048: PPUSH
22049: CALL_OW 301
22053: OR
22054: IFFALSE 22004
// RemoveSeeing ( _x , _y , side ) ;
22056: LD_VAR 0 8
22060: PPUSH
22061: LD_VAR 0 9
22065: PPUSH
22066: LD_VAR 0 6
22070: PPUSH
22071: CALL_OW 331
// end ; end_of_file
22075: LD_VAR 0 4
22079: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
22080: LD_VAR 0 1
22084: PPUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: LD_VAR 0 3
22094: PPUSH
22095: LD_VAR 0 4
22099: PPUSH
22100: LD_VAR 0 5
22104: PPUSH
22105: LD_VAR 0 6
22109: PPUSH
22110: CALL 1539 0 6
// end ;
22114: PPOPN 6
22116: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
22117: LD_INT 0
22119: PPUSH
// begin if not units then
22120: LD_VAR 0 1
22124: NOT
22125: IFFALSE 22129
// exit ;
22127: GO 22129
// end ;
22129: PPOPN 7
22131: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
22132: CALL 1426 0 0
// end ; end_of_file
22136: PPOPN 1
22138: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22139: LD_VAR 0 1
22143: PUSH
22144: LD_INT 200
22146: DOUBLE
22147: GREATEREQUAL
22148: IFFALSE 22156
22150: LD_INT 299
22152: DOUBLE
22153: LESSEQUAL
22154: IFTRUE 22158
22156: GO 22190
22158: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22159: LD_VAR 0 1
22163: PPUSH
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_VAR 0 3
22173: PPUSH
22174: LD_VAR 0 4
22178: PPUSH
22179: LD_VAR 0 5
22183: PPUSH
22184: CALL 17562 0 5
22188: GO 22267
22190: LD_INT 300
22192: DOUBLE
22193: GREATEREQUAL
22194: IFFALSE 22202
22196: LD_INT 399
22198: DOUBLE
22199: LESSEQUAL
22200: IFTRUE 22204
22202: GO 22266
22204: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22205: LD_VAR 0 1
22209: PPUSH
22210: LD_VAR 0 2
22214: PPUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_VAR 0 4
22224: PPUSH
22225: LD_VAR 0 5
22229: PPUSH
22230: LD_VAR 0 6
22234: PPUSH
22235: LD_VAR 0 7
22239: PPUSH
22240: LD_VAR 0 8
22244: PPUSH
22245: LD_VAR 0 9
22249: PPUSH
22250: LD_VAR 0 10
22254: PPUSH
22255: LD_VAR 0 11
22259: PPUSH
22260: CALL 13887 0 11
22264: GO 22267
22266: POP
// end ;
22267: PPOPN 11
22269: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22270: LD_VAR 0 1
22274: PPUSH
22275: LD_VAR 0 2
22279: PPUSH
22280: LD_VAR 0 3
22284: PPUSH
22285: LD_VAR 0 4
22289: PPUSH
22290: LD_VAR 0 5
22294: PPUSH
22295: CALL 17298 0 5
// end ; end_of_file
22299: PPOPN 5
22301: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22302: LD_INT 0
22304: PPUSH
22305: PPUSH
// if exist_mode then
22306: LD_VAR 0 2
22310: IFFALSE 22335
// unit := CreateCharacter ( prefix & ident ) else
22312: LD_ADDR_VAR 0 5
22316: PUSH
22317: LD_VAR 0 3
22321: PUSH
22322: LD_VAR 0 1
22326: STR
22327: PPUSH
22328: CALL_OW 34
22332: ST_TO_ADDR
22333: GO 22350
// unit := NewCharacter ( ident ) ;
22335: LD_ADDR_VAR 0 5
22339: PUSH
22340: LD_VAR 0 1
22344: PPUSH
22345: CALL_OW 25
22349: ST_TO_ADDR
// result := unit ;
22350: LD_ADDR_VAR 0 4
22354: PUSH
22355: LD_VAR 0 5
22359: ST_TO_ADDR
// end ;
22360: LD_VAR 0 4
22364: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22365: LD_INT 0
22367: PPUSH
22368: PPUSH
// if not side or not nation then
22369: LD_VAR 0 1
22373: NOT
22374: PUSH
22375: LD_VAR 0 2
22379: NOT
22380: OR
22381: IFFALSE 22385
// exit ;
22383: GO 23153
// case nation of nation_american :
22385: LD_VAR 0 2
22389: PUSH
22390: LD_INT 1
22392: DOUBLE
22393: EQUAL
22394: IFTRUE 22398
22396: GO 22612
22398: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22399: LD_ADDR_VAR 0 4
22403: PUSH
22404: LD_INT 35
22406: PUSH
22407: LD_INT 45
22409: PUSH
22410: LD_INT 46
22412: PUSH
22413: LD_INT 47
22415: PUSH
22416: LD_INT 82
22418: PUSH
22419: LD_INT 83
22421: PUSH
22422: LD_INT 84
22424: PUSH
22425: LD_INT 85
22427: PUSH
22428: LD_INT 86
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: LD_INT 6
22439: PUSH
22440: LD_INT 15
22442: PUSH
22443: LD_INT 16
22445: PUSH
22446: LD_INT 7
22448: PUSH
22449: LD_INT 12
22451: PUSH
22452: LD_INT 13
22454: PUSH
22455: LD_INT 10
22457: PUSH
22458: LD_INT 14
22460: PUSH
22461: LD_INT 20
22463: PUSH
22464: LD_INT 21
22466: PUSH
22467: LD_INT 22
22469: PUSH
22470: LD_INT 25
22472: PUSH
22473: LD_INT 32
22475: PUSH
22476: LD_INT 27
22478: PUSH
22479: LD_INT 36
22481: PUSH
22482: LD_INT 69
22484: PUSH
22485: LD_INT 39
22487: PUSH
22488: LD_INT 34
22490: PUSH
22491: LD_INT 40
22493: PUSH
22494: LD_INT 48
22496: PUSH
22497: LD_INT 49
22499: PUSH
22500: LD_INT 50
22502: PUSH
22503: LD_INT 51
22505: PUSH
22506: LD_INT 52
22508: PUSH
22509: LD_INT 53
22511: PUSH
22512: LD_INT 54
22514: PUSH
22515: LD_INT 55
22517: PUSH
22518: LD_INT 56
22520: PUSH
22521: LD_INT 57
22523: PUSH
22524: LD_INT 58
22526: PUSH
22527: LD_INT 59
22529: PUSH
22530: LD_INT 60
22532: PUSH
22533: LD_INT 61
22535: PUSH
22536: LD_INT 62
22538: PUSH
22539: LD_INT 80
22541: PUSH
22542: LD_INT 82
22544: PUSH
22545: LD_INT 83
22547: PUSH
22548: LD_INT 84
22550: PUSH
22551: LD_INT 85
22553: PUSH
22554: LD_INT 86
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: ST_TO_ADDR
22610: GO 23077
22612: LD_INT 2
22614: DOUBLE
22615: EQUAL
22616: IFTRUE 22620
22618: GO 22846
22620: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22621: LD_ADDR_VAR 0 4
22625: PUSH
22626: LD_INT 35
22628: PUSH
22629: LD_INT 45
22631: PUSH
22632: LD_INT 46
22634: PUSH
22635: LD_INT 47
22637: PUSH
22638: LD_INT 82
22640: PUSH
22641: LD_INT 83
22643: PUSH
22644: LD_INT 84
22646: PUSH
22647: LD_INT 85
22649: PUSH
22650: LD_INT 87
22652: PUSH
22653: LD_INT 70
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: LD_INT 11
22661: PUSH
22662: LD_INT 3
22664: PUSH
22665: LD_INT 4
22667: PUSH
22668: LD_INT 5
22670: PUSH
22671: LD_INT 6
22673: PUSH
22674: LD_INT 15
22676: PUSH
22677: LD_INT 18
22679: PUSH
22680: LD_INT 7
22682: PUSH
22683: LD_INT 17
22685: PUSH
22686: LD_INT 8
22688: PUSH
22689: LD_INT 20
22691: PUSH
22692: LD_INT 21
22694: PUSH
22695: LD_INT 22
22697: PUSH
22698: LD_INT 72
22700: PUSH
22701: LD_INT 26
22703: PUSH
22704: LD_INT 69
22706: PUSH
22707: LD_INT 39
22709: PUSH
22710: LD_INT 40
22712: PUSH
22713: LD_INT 41
22715: PUSH
22716: LD_INT 42
22718: PUSH
22719: LD_INT 43
22721: PUSH
22722: LD_INT 48
22724: PUSH
22725: LD_INT 49
22727: PUSH
22728: LD_INT 50
22730: PUSH
22731: LD_INT 51
22733: PUSH
22734: LD_INT 52
22736: PUSH
22737: LD_INT 53
22739: PUSH
22740: LD_INT 54
22742: PUSH
22743: LD_INT 55
22745: PUSH
22746: LD_INT 56
22748: PUSH
22749: LD_INT 60
22751: PUSH
22752: LD_INT 61
22754: PUSH
22755: LD_INT 62
22757: PUSH
22758: LD_INT 66
22760: PUSH
22761: LD_INT 67
22763: PUSH
22764: LD_INT 68
22766: PUSH
22767: LD_INT 81
22769: PUSH
22770: LD_INT 82
22772: PUSH
22773: LD_INT 83
22775: PUSH
22776: LD_INT 84
22778: PUSH
22779: LD_INT 85
22781: PUSH
22782: LD_INT 87
22784: PUSH
22785: LD_INT 88
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: ST_TO_ADDR
22844: GO 23077
22846: LD_INT 3
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 23076
22854: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22855: LD_ADDR_VAR 0 4
22859: PUSH
22860: LD_INT 46
22862: PUSH
22863: LD_INT 47
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 82
22874: PUSH
22875: LD_INT 83
22877: PUSH
22878: LD_INT 84
22880: PUSH
22881: LD_INT 85
22883: PUSH
22884: LD_INT 86
22886: PUSH
22887: LD_INT 11
22889: PUSH
22890: LD_INT 9
22892: PUSH
22893: LD_INT 20
22895: PUSH
22896: LD_INT 19
22898: PUSH
22899: LD_INT 21
22901: PUSH
22902: LD_INT 24
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 25
22910: PUSH
22911: LD_INT 28
22913: PUSH
22914: LD_INT 29
22916: PUSH
22917: LD_INT 30
22919: PUSH
22920: LD_INT 31
22922: PUSH
22923: LD_INT 37
22925: PUSH
22926: LD_INT 38
22928: PUSH
22929: LD_INT 32
22931: PUSH
22932: LD_INT 27
22934: PUSH
22935: LD_INT 33
22937: PUSH
22938: LD_INT 69
22940: PUSH
22941: LD_INT 39
22943: PUSH
22944: LD_INT 34
22946: PUSH
22947: LD_INT 40
22949: PUSH
22950: LD_INT 71
22952: PUSH
22953: LD_INT 23
22955: PUSH
22956: LD_INT 44
22958: PUSH
22959: LD_INT 48
22961: PUSH
22962: LD_INT 49
22964: PUSH
22965: LD_INT 50
22967: PUSH
22968: LD_INT 51
22970: PUSH
22971: LD_INT 52
22973: PUSH
22974: LD_INT 53
22976: PUSH
22977: LD_INT 54
22979: PUSH
22980: LD_INT 55
22982: PUSH
22983: LD_INT 56
22985: PUSH
22986: LD_INT 57
22988: PUSH
22989: LD_INT 58
22991: PUSH
22992: LD_INT 59
22994: PUSH
22995: LD_INT 63
22997: PUSH
22998: LD_INT 64
23000: PUSH
23001: LD_INT 65
23003: PUSH
23004: LD_INT 82
23006: PUSH
23007: LD_INT 83
23009: PUSH
23010: LD_INT 84
23012: PUSH
23013: LD_INT 85
23015: PUSH
23016: LD_INT 86
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: ST_TO_ADDR
23074: GO 23077
23076: POP
// if state > - 1 and state < 3 then
23077: LD_VAR 0 3
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: GREATER
23086: PUSH
23087: LD_VAR 0 3
23091: PUSH
23092: LD_INT 3
23094: LESS
23095: AND
23096: IFFALSE 23153
// for i in result do
23098: LD_ADDR_VAR 0 5
23102: PUSH
23103: LD_VAR 0 4
23107: PUSH
23108: FOR_IN
23109: IFFALSE 23151
// if GetTech ( i , side ) <> state then
23111: LD_VAR 0 5
23115: PPUSH
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 321
23125: PUSH
23126: LD_VAR 0 3
23130: NONEQUAL
23131: IFFALSE 23149
// result := result diff i ;
23133: LD_ADDR_VAR 0 4
23137: PUSH
23138: LD_VAR 0 4
23142: PUSH
23143: LD_VAR 0 5
23147: DIFF
23148: ST_TO_ADDR
23149: GO 23108
23151: POP
23152: POP
// end ;
23153: LD_VAR 0 4
23157: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23158: LD_INT 0
23160: PPUSH
23161: PPUSH
23162: PPUSH
// result := true ;
23163: LD_ADDR_VAR 0 3
23167: PUSH
23168: LD_INT 1
23170: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23171: LD_ADDR_VAR 0 5
23175: PUSH
23176: LD_VAR 0 2
23180: PPUSH
23181: CALL_OW 480
23185: ST_TO_ADDR
// if not tmp then
23186: LD_VAR 0 5
23190: NOT
23191: IFFALSE 23195
// exit ;
23193: GO 23244
// for i in tmp do
23195: LD_ADDR_VAR 0 4
23199: PUSH
23200: LD_VAR 0 5
23204: PUSH
23205: FOR_IN
23206: IFFALSE 23242
// if GetTech ( i , side ) <> state_researched then
23208: LD_VAR 0 4
23212: PPUSH
23213: LD_VAR 0 1
23217: PPUSH
23218: CALL_OW 321
23222: PUSH
23223: LD_INT 2
23225: NONEQUAL
23226: IFFALSE 23240
// begin result := false ;
23228: LD_ADDR_VAR 0 3
23232: PUSH
23233: LD_INT 0
23235: ST_TO_ADDR
// exit ;
23236: POP
23237: POP
23238: GO 23244
// end ;
23240: GO 23205
23242: POP
23243: POP
// end ;
23244: LD_VAR 0 3
23248: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23249: LD_INT 0
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
23258: PPUSH
23259: PPUSH
23260: PPUSH
23261: PPUSH
23262: PPUSH
23263: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23264: LD_VAR 0 1
23268: NOT
23269: PUSH
23270: LD_VAR 0 1
23274: PPUSH
23275: CALL_OW 257
23279: PUSH
23280: LD_INT 9
23282: NONEQUAL
23283: OR
23284: IFFALSE 23288
// exit ;
23286: GO 23861
// side := GetSide ( unit ) ;
23288: LD_ADDR_VAR 0 9
23292: PUSH
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 255
23302: ST_TO_ADDR
// tech_space := tech_spacanom ;
23303: LD_ADDR_VAR 0 12
23307: PUSH
23308: LD_INT 29
23310: ST_TO_ADDR
// tech_time := tech_taurad ;
23311: LD_ADDR_VAR 0 13
23315: PUSH
23316: LD_INT 28
23318: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23319: LD_ADDR_VAR 0 11
23323: PUSH
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL_OW 310
23333: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23334: LD_VAR 0 11
23338: PPUSH
23339: CALL_OW 247
23343: PUSH
23344: LD_INT 2
23346: EQUAL
23347: IFFALSE 23351
// exit ;
23349: GO 23861
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23351: LD_ADDR_VAR 0 8
23355: PUSH
23356: LD_INT 81
23358: PUSH
23359: LD_VAR 0 9
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 3
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PPUSH
23389: CALL_OW 69
23393: ST_TO_ADDR
// if not tmp then
23394: LD_VAR 0 8
23398: NOT
23399: IFFALSE 23403
// exit ;
23401: GO 23861
// if in_unit then
23403: LD_VAR 0 11
23407: IFFALSE 23431
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23409: LD_ADDR_VAR 0 10
23413: PUSH
23414: LD_VAR 0 8
23418: PPUSH
23419: LD_VAR 0 11
23423: PPUSH
23424: CALL_OW 74
23428: ST_TO_ADDR
23429: GO 23451
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23431: LD_ADDR_VAR 0 10
23435: PUSH
23436: LD_VAR 0 8
23440: PPUSH
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 74
23450: ST_TO_ADDR
// if not enemy then
23451: LD_VAR 0 10
23455: NOT
23456: IFFALSE 23460
// exit ;
23458: GO 23861
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23460: LD_VAR 0 11
23464: PUSH
23465: LD_VAR 0 11
23469: PPUSH
23470: LD_VAR 0 10
23474: PPUSH
23475: CALL_OW 296
23479: PUSH
23480: LD_INT 13
23482: GREATER
23483: AND
23484: PUSH
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_VAR 0 10
23494: PPUSH
23495: CALL_OW 296
23499: PUSH
23500: LD_INT 12
23502: GREATER
23503: OR
23504: IFFALSE 23508
// exit ;
23506: GO 23861
// missile := [ 1 ] ;
23508: LD_ADDR_VAR 0 14
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: EMPTY
23517: LIST
23518: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23519: LD_VAR 0 9
23523: PPUSH
23524: LD_VAR 0 12
23528: PPUSH
23529: CALL_OW 325
23533: IFFALSE 23562
// missile := Replace ( missile , missile + 1 , 2 ) ;
23535: LD_ADDR_VAR 0 14
23539: PUSH
23540: LD_VAR 0 14
23544: PPUSH
23545: LD_VAR 0 14
23549: PUSH
23550: LD_INT 1
23552: PLUS
23553: PPUSH
23554: LD_INT 2
23556: PPUSH
23557: CALL_OW 1
23561: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23562: LD_VAR 0 9
23566: PPUSH
23567: LD_VAR 0 13
23571: PPUSH
23572: CALL_OW 325
23576: PUSH
23577: LD_VAR 0 10
23581: PPUSH
23582: CALL_OW 255
23586: PPUSH
23587: LD_VAR 0 13
23591: PPUSH
23592: CALL_OW 325
23596: NOT
23597: AND
23598: IFFALSE 23627
// missile := Replace ( missile , missile + 1 , 3 ) ;
23600: LD_ADDR_VAR 0 14
23604: PUSH
23605: LD_VAR 0 14
23609: PPUSH
23610: LD_VAR 0 14
23614: PUSH
23615: LD_INT 1
23617: PLUS
23618: PPUSH
23619: LD_INT 3
23621: PPUSH
23622: CALL_OW 1
23626: ST_TO_ADDR
// if missile < 2 then
23627: LD_VAR 0 14
23631: PUSH
23632: LD_INT 2
23634: LESS
23635: IFFALSE 23639
// exit ;
23637: GO 23861
// x := GetX ( enemy ) ;
23639: LD_ADDR_VAR 0 4
23643: PUSH
23644: LD_VAR 0 10
23648: PPUSH
23649: CALL_OW 250
23653: ST_TO_ADDR
// y := GetY ( enemy ) ;
23654: LD_ADDR_VAR 0 5
23658: PUSH
23659: LD_VAR 0 10
23663: PPUSH
23664: CALL_OW 251
23668: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23669: LD_ADDR_VAR 0 6
23673: PUSH
23674: LD_VAR 0 4
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PPUSH
23683: LD_INT 1
23685: PPUSH
23686: CALL_OW 12
23690: PLUS
23691: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23692: LD_ADDR_VAR 0 7
23696: PUSH
23697: LD_VAR 0 5
23701: PUSH
23702: LD_INT 1
23704: NEG
23705: PPUSH
23706: LD_INT 1
23708: PPUSH
23709: CALL_OW 12
23713: PLUS
23714: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23715: LD_VAR 0 6
23719: PPUSH
23720: LD_VAR 0 7
23724: PPUSH
23725: CALL_OW 488
23729: NOT
23730: IFFALSE 23752
// begin _x := x ;
23732: LD_ADDR_VAR 0 6
23736: PUSH
23737: LD_VAR 0 4
23741: ST_TO_ADDR
// _y := y ;
23742: LD_ADDR_VAR 0 7
23746: PUSH
23747: LD_VAR 0 5
23751: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23752: LD_ADDR_VAR 0 3
23756: PUSH
23757: LD_INT 1
23759: PPUSH
23760: LD_VAR 0 14
23764: PPUSH
23765: CALL_OW 12
23769: ST_TO_ADDR
// case i of 1 :
23770: LD_VAR 0 3
23774: PUSH
23775: LD_INT 1
23777: DOUBLE
23778: EQUAL
23779: IFTRUE 23783
23781: GO 23800
23783: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23784: LD_VAR 0 1
23788: PPUSH
23789: LD_VAR 0 10
23793: PPUSH
23794: CALL_OW 115
23798: GO 23861
23800: LD_INT 2
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23830
23808: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23809: LD_VAR 0 1
23813: PPUSH
23814: LD_VAR 0 6
23818: PPUSH
23819: LD_VAR 0 7
23823: PPUSH
23824: CALL_OW 153
23828: GO 23861
23830: LD_INT 3
23832: DOUBLE
23833: EQUAL
23834: IFTRUE 23838
23836: GO 23860
23838: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23839: LD_VAR 0 1
23843: PPUSH
23844: LD_VAR 0 6
23848: PPUSH
23849: LD_VAR 0 7
23853: PPUSH
23854: CALL_OW 154
23858: GO 23861
23860: POP
// end ;
23861: LD_VAR 0 2
23865: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23866: LD_INT 0
23868: PPUSH
23869: PPUSH
23870: PPUSH
23871: PPUSH
23872: PPUSH
23873: PPUSH
// if not unit or not building then
23874: LD_VAR 0 1
23878: NOT
23879: PUSH
23880: LD_VAR 0 2
23884: NOT
23885: OR
23886: IFFALSE 23890
// exit ;
23888: GO 24048
// x := GetX ( building ) ;
23890: LD_ADDR_VAR 0 5
23894: PUSH
23895: LD_VAR 0 2
23899: PPUSH
23900: CALL_OW 250
23904: ST_TO_ADDR
// y := GetY ( building ) ;
23905: LD_ADDR_VAR 0 6
23909: PUSH
23910: LD_VAR 0 2
23914: PPUSH
23915: CALL_OW 251
23919: ST_TO_ADDR
// for i = 0 to 5 do
23920: LD_ADDR_VAR 0 4
23924: PUSH
23925: DOUBLE
23926: LD_INT 0
23928: DEC
23929: ST_TO_ADDR
23930: LD_INT 5
23932: PUSH
23933: FOR_TO
23934: IFFALSE 24046
// begin _x := ShiftX ( x , i , 3 ) ;
23936: LD_ADDR_VAR 0 7
23940: PUSH
23941: LD_VAR 0 5
23945: PPUSH
23946: LD_VAR 0 4
23950: PPUSH
23951: LD_INT 3
23953: PPUSH
23954: CALL_OW 272
23958: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23959: LD_ADDR_VAR 0 8
23963: PUSH
23964: LD_VAR 0 6
23968: PPUSH
23969: LD_VAR 0 4
23973: PPUSH
23974: LD_INT 3
23976: PPUSH
23977: CALL_OW 273
23981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23982: LD_VAR 0 7
23986: PPUSH
23987: LD_VAR 0 8
23991: PPUSH
23992: CALL_OW 488
23996: NOT
23997: IFFALSE 24001
// continue ;
23999: GO 23933
// if HexInfo ( _x , _y ) = 0 then
24001: LD_VAR 0 7
24005: PPUSH
24006: LD_VAR 0 8
24010: PPUSH
24011: CALL_OW 428
24015: PUSH
24016: LD_INT 0
24018: EQUAL
24019: IFFALSE 24044
// begin ComMoveXY ( unit , _x , _y ) ;
24021: LD_VAR 0 1
24025: PPUSH
24026: LD_VAR 0 7
24030: PPUSH
24031: LD_VAR 0 8
24035: PPUSH
24036: CALL_OW 111
// exit ;
24040: POP
24041: POP
24042: GO 24048
// end ; end ;
24044: GO 23933
24046: POP
24047: POP
// end ;
24048: LD_VAR 0 3
24052: RET
// export function ScanBase ( side , base_area ) ; begin
24053: LD_INT 0
24055: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24056: LD_ADDR_VAR 0 3
24060: PUSH
24061: LD_VAR 0 2
24065: PPUSH
24066: LD_INT 81
24068: PUSH
24069: LD_VAR 0 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PPUSH
24078: CALL_OW 70
24082: ST_TO_ADDR
// end ;
24083: LD_VAR 0 3
24087: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24088: LD_INT 0
24090: PPUSH
24091: PPUSH
24092: PPUSH
24093: PPUSH
// result := false ;
24094: LD_ADDR_VAR 0 2
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// side := GetSide ( unit ) ;
24102: LD_ADDR_VAR 0 3
24106: PUSH
24107: LD_VAR 0 1
24111: PPUSH
24112: CALL_OW 255
24116: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24117: LD_ADDR_VAR 0 4
24121: PUSH
24122: LD_VAR 0 1
24126: PPUSH
24127: CALL_OW 248
24131: ST_TO_ADDR
// case nat of 1 :
24132: LD_VAR 0 4
24136: PUSH
24137: LD_INT 1
24139: DOUBLE
24140: EQUAL
24141: IFTRUE 24145
24143: GO 24156
24145: POP
// tech := tech_lassight ; 2 :
24146: LD_ADDR_VAR 0 5
24150: PUSH
24151: LD_INT 12
24153: ST_TO_ADDR
24154: GO 24195
24156: LD_INT 2
24158: DOUBLE
24159: EQUAL
24160: IFTRUE 24164
24162: GO 24175
24164: POP
// tech := tech_mortar ; 3 :
24165: LD_ADDR_VAR 0 5
24169: PUSH
24170: LD_INT 41
24172: ST_TO_ADDR
24173: GO 24195
24175: LD_INT 3
24177: DOUBLE
24178: EQUAL
24179: IFTRUE 24183
24181: GO 24194
24183: POP
// tech := tech_bazooka ; end ;
24184: LD_ADDR_VAR 0 5
24188: PUSH
24189: LD_INT 44
24191: ST_TO_ADDR
24192: GO 24195
24194: POP
// if Researched ( side , tech ) then
24195: LD_VAR 0 3
24199: PPUSH
24200: LD_VAR 0 5
24204: PPUSH
24205: CALL_OW 325
24209: IFFALSE 24236
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24211: LD_ADDR_VAR 0 2
24215: PUSH
24216: LD_INT 5
24218: PUSH
24219: LD_INT 8
24221: PUSH
24222: LD_INT 9
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: PUSH
24230: LD_VAR 0 4
24234: ARRAY
24235: ST_TO_ADDR
// end ;
24236: LD_VAR 0 2
24240: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24241: LD_INT 0
24243: PPUSH
24244: PPUSH
24245: PPUSH
// if not mines then
24246: LD_VAR 0 2
24250: NOT
24251: IFFALSE 24255
// exit ;
24253: GO 24399
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24255: LD_ADDR_VAR 0 5
24259: PUSH
24260: LD_INT 81
24262: PUSH
24263: LD_VAR 0 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 3
24274: PUSH
24275: LD_INT 21
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// for i in mines do
24298: LD_ADDR_VAR 0 4
24302: PUSH
24303: LD_VAR 0 2
24307: PUSH
24308: FOR_IN
24309: IFFALSE 24397
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24311: LD_VAR 0 4
24315: PUSH
24316: LD_INT 1
24318: ARRAY
24319: PPUSH
24320: LD_VAR 0 4
24324: PUSH
24325: LD_INT 2
24327: ARRAY
24328: PPUSH
24329: CALL_OW 458
24333: NOT
24334: IFFALSE 24338
// continue ;
24336: GO 24308
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24338: LD_VAR 0 4
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: PPUSH
24347: LD_VAR 0 4
24351: PUSH
24352: LD_INT 2
24354: ARRAY
24355: PPUSH
24356: CALL_OW 428
24360: PUSH
24361: LD_VAR 0 5
24365: IN
24366: IFFALSE 24395
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24368: LD_VAR 0 4
24372: PUSH
24373: LD_INT 1
24375: ARRAY
24376: PPUSH
24377: LD_VAR 0 4
24381: PUSH
24382: LD_INT 2
24384: ARRAY
24385: PPUSH
24386: LD_VAR 0 1
24390: PPUSH
24391: CALL_OW 456
// end ;
24395: GO 24308
24397: POP
24398: POP
// end ;
24399: LD_VAR 0 3
24403: RET
// export function Count ( array ) ; begin
24404: LD_INT 0
24406: PPUSH
// result := array + 0 ;
24407: LD_ADDR_VAR 0 2
24411: PUSH
24412: LD_VAR 0 1
24416: PUSH
24417: LD_INT 0
24419: PLUS
24420: ST_TO_ADDR
// end ;
24421: LD_VAR 0 2
24425: RET
// export function IsEmpty ( building ) ; begin
24426: LD_INT 0
24428: PPUSH
// if not building then
24429: LD_VAR 0 1
24433: NOT
24434: IFFALSE 24438
// exit ;
24436: GO 24481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24438: LD_ADDR_VAR 0 2
24442: PUSH
24443: LD_VAR 0 1
24447: PUSH
24448: LD_INT 22
24450: PUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 255
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 58
24467: PUSH
24468: EMPTY
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: IN
24480: ST_TO_ADDR
// end ;
24481: LD_VAR 0 2
24485: RET
// export function IsNotFull ( building ) ; var places ; begin
24486: LD_INT 0
24488: PPUSH
24489: PPUSH
// if not building then
24490: LD_VAR 0 1
24494: NOT
24495: IFFALSE 24499
// exit ;
24497: GO 24527
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24499: LD_ADDR_VAR 0 2
24503: PUSH
24504: LD_VAR 0 1
24508: PPUSH
24509: LD_INT 3
24511: PUSH
24512: LD_INT 62
24514: PUSH
24515: EMPTY
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PPUSH
24522: CALL_OW 72
24526: ST_TO_ADDR
// end ;
24527: LD_VAR 0 2
24531: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24532: LD_INT 0
24534: PPUSH
24535: PPUSH
24536: PPUSH
24537: PPUSH
// tmp := [ ] ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: EMPTY
24544: ST_TO_ADDR
// list := [ ] ;
24545: LD_ADDR_VAR 0 5
24549: PUSH
24550: EMPTY
24551: ST_TO_ADDR
// for i = 16 to 25 do
24552: LD_ADDR_VAR 0 4
24556: PUSH
24557: DOUBLE
24558: LD_INT 16
24560: DEC
24561: ST_TO_ADDR
24562: LD_INT 25
24564: PUSH
24565: FOR_TO
24566: IFFALSE 24639
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_VAR 0 3
24577: PUSH
24578: LD_INT 22
24580: PUSH
24581: LD_VAR 0 1
24585: PPUSH
24586: CALL_OW 255
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 91
24597: PUSH
24598: LD_VAR 0 1
24602: PUSH
24603: LD_INT 6
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 30
24613: PUSH
24614: LD_VAR 0 4
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: PUSH
24628: EMPTY
24629: LIST
24630: PPUSH
24631: CALL_OW 69
24635: ADD
24636: ST_TO_ADDR
24637: GO 24565
24639: POP
24640: POP
// for i = 1 to tmp do
24641: LD_ADDR_VAR 0 4
24645: PUSH
24646: DOUBLE
24647: LD_INT 1
24649: DEC
24650: ST_TO_ADDR
24651: LD_VAR 0 3
24655: PUSH
24656: FOR_TO
24657: IFFALSE 24745
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24659: LD_ADDR_VAR 0 5
24663: PUSH
24664: LD_VAR 0 5
24668: PUSH
24669: LD_VAR 0 3
24673: PUSH
24674: LD_VAR 0 4
24678: ARRAY
24679: PPUSH
24680: CALL_OW 266
24684: PUSH
24685: LD_VAR 0 3
24689: PUSH
24690: LD_VAR 0 4
24694: ARRAY
24695: PPUSH
24696: CALL_OW 250
24700: PUSH
24701: LD_VAR 0 3
24705: PUSH
24706: LD_VAR 0 4
24710: ARRAY
24711: PPUSH
24712: CALL_OW 251
24716: PUSH
24717: LD_VAR 0 3
24721: PUSH
24722: LD_VAR 0 4
24726: ARRAY
24727: PPUSH
24728: CALL_OW 254
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: ADD
24742: ST_TO_ADDR
24743: GO 24656
24745: POP
24746: POP
// result := list ;
24747: LD_ADDR_VAR 0 2
24751: PUSH
24752: LD_VAR 0 5
24756: ST_TO_ADDR
// end ;
24757: LD_VAR 0 2
24761: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24762: LD_INT 0
24764: PPUSH
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
24769: PPUSH
24770: PPUSH
// if not factory then
24771: LD_VAR 0 1
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 25373
// if control = control_apeman then
24780: LD_VAR 0 4
24784: PUSH
24785: LD_INT 5
24787: EQUAL
24788: IFFALSE 24897
// begin tmp := UnitsInside ( factory ) ;
24790: LD_ADDR_VAR 0 8
24794: PUSH
24795: LD_VAR 0 1
24799: PPUSH
24800: CALL_OW 313
24804: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24805: LD_VAR 0 8
24809: PPUSH
24810: LD_INT 25
24812: PUSH
24813: LD_INT 12
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PPUSH
24820: CALL_OW 72
24824: NOT
24825: IFFALSE 24835
// control := control_manual ;
24827: LD_ADDR_VAR 0 4
24831: PUSH
24832: LD_INT 1
24834: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24835: LD_ADDR_VAR 0 8
24839: PUSH
24840: LD_VAR 0 1
24844: PPUSH
24845: CALL 24532 0 1
24849: ST_TO_ADDR
// if tmp then
24850: LD_VAR 0 8
24854: IFFALSE 24897
// begin for i in tmp do
24856: LD_ADDR_VAR 0 7
24860: PUSH
24861: LD_VAR 0 8
24865: PUSH
24866: FOR_IN
24867: IFFALSE 24895
// if i [ 1 ] = b_ext_radio then
24869: LD_VAR 0 7
24873: PUSH
24874: LD_INT 1
24876: ARRAY
24877: PUSH
24878: LD_INT 22
24880: EQUAL
24881: IFFALSE 24893
// begin control := control_remote ;
24883: LD_ADDR_VAR 0 4
24887: PUSH
24888: LD_INT 2
24890: ST_TO_ADDR
// break ;
24891: GO 24895
// end ;
24893: GO 24866
24895: POP
24896: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24897: LD_VAR 0 1
24901: PPUSH
24902: LD_VAR 0 2
24906: PPUSH
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_VAR 0 4
24916: PPUSH
24917: LD_VAR 0 5
24921: PPUSH
24922: CALL_OW 448
24926: IFFALSE 24961
// begin result := [ chassis , engine , control , weapon ] ;
24928: LD_ADDR_VAR 0 6
24932: PUSH
24933: LD_VAR 0 2
24937: PUSH
24938: LD_VAR 0 3
24942: PUSH
24943: LD_VAR 0 4
24947: PUSH
24948: LD_VAR 0 5
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: ST_TO_ADDR
// exit ;
24959: GO 25373
// end ; _chassis := AvailableChassisList ( factory ) ;
24961: LD_ADDR_VAR 0 9
24965: PUSH
24966: LD_VAR 0 1
24970: PPUSH
24971: CALL_OW 475
24975: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24976: LD_ADDR_VAR 0 11
24980: PUSH
24981: LD_VAR 0 1
24985: PPUSH
24986: CALL_OW 476
24990: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24991: LD_ADDR_VAR 0 12
24995: PUSH
24996: LD_VAR 0 1
25000: PPUSH
25001: CALL_OW 477
25005: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25006: LD_ADDR_VAR 0 10
25010: PUSH
25011: LD_VAR 0 1
25015: PPUSH
25016: CALL_OW 478
25020: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25021: LD_VAR 0 9
25025: NOT
25026: PUSH
25027: LD_VAR 0 11
25031: NOT
25032: OR
25033: PUSH
25034: LD_VAR 0 12
25038: NOT
25039: OR
25040: PUSH
25041: LD_VAR 0 10
25045: NOT
25046: OR
25047: IFFALSE 25082
// begin result := [ chassis , engine , control , weapon ] ;
25049: LD_ADDR_VAR 0 6
25053: PUSH
25054: LD_VAR 0 2
25058: PUSH
25059: LD_VAR 0 3
25063: PUSH
25064: LD_VAR 0 4
25068: PUSH
25069: LD_VAR 0 5
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: ST_TO_ADDR
// exit ;
25080: GO 25373
// end ; if not chassis in _chassis then
25082: LD_VAR 0 2
25086: PUSH
25087: LD_VAR 0 9
25091: IN
25092: NOT
25093: IFFALSE 25119
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25095: LD_ADDR_VAR 0 2
25099: PUSH
25100: LD_VAR 0 9
25104: PUSH
25105: LD_INT 1
25107: PPUSH
25108: LD_VAR 0 9
25112: PPUSH
25113: CALL_OW 12
25117: ARRAY
25118: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25119: LD_VAR 0 2
25123: PPUSH
25124: LD_VAR 0 3
25128: PPUSH
25129: CALL 25378 0 2
25133: NOT
25134: IFFALSE 25193
// repeat engine := _engine [ 1 ] ;
25136: LD_ADDR_VAR 0 3
25140: PUSH
25141: LD_VAR 0 11
25145: PUSH
25146: LD_INT 1
25148: ARRAY
25149: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25150: LD_ADDR_VAR 0 11
25154: PUSH
25155: LD_VAR 0 11
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL_OW 3
25167: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25168: LD_VAR 0 2
25172: PPUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: CALL 25378 0 2
25182: PUSH
25183: LD_VAR 0 11
25187: PUSH
25188: EMPTY
25189: EQUAL
25190: OR
25191: IFFALSE 25136
// if not control in _control then
25193: LD_VAR 0 4
25197: PUSH
25198: LD_VAR 0 12
25202: IN
25203: NOT
25204: IFFALSE 25230
// control := _control [ rand ( 1 , _control ) ] ;
25206: LD_ADDR_VAR 0 4
25210: PUSH
25211: LD_VAR 0 12
25215: PUSH
25216: LD_INT 1
25218: PPUSH
25219: LD_VAR 0 12
25223: PPUSH
25224: CALL_OW 12
25228: ARRAY
25229: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25230: LD_VAR 0 2
25234: PPUSH
25235: LD_VAR 0 5
25239: PPUSH
25240: CALL 25598 0 2
25244: NOT
25245: IFFALSE 25304
// repeat weapon := _weapon [ 1 ] ;
25247: LD_ADDR_VAR 0 5
25251: PUSH
25252: LD_VAR 0 10
25256: PUSH
25257: LD_INT 1
25259: ARRAY
25260: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25261: LD_ADDR_VAR 0 10
25265: PUSH
25266: LD_VAR 0 10
25270: PPUSH
25271: LD_INT 1
25273: PPUSH
25274: CALL_OW 3
25278: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25279: LD_VAR 0 2
25283: PPUSH
25284: LD_VAR 0 5
25288: PPUSH
25289: CALL 25598 0 2
25293: PUSH
25294: LD_VAR 0 10
25298: PUSH
25299: EMPTY
25300: EQUAL
25301: OR
25302: IFFALSE 25247
// result := [ ] ;
25304: LD_ADDR_VAR 0 6
25308: PUSH
25309: EMPTY
25310: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25311: LD_VAR 0 1
25315: PPUSH
25316: LD_VAR 0 2
25320: PPUSH
25321: LD_VAR 0 3
25325: PPUSH
25326: LD_VAR 0 4
25330: PPUSH
25331: LD_VAR 0 5
25335: PPUSH
25336: CALL_OW 448
25340: IFFALSE 25373
// result := [ chassis , engine , control , weapon ] ;
25342: LD_ADDR_VAR 0 6
25346: PUSH
25347: LD_VAR 0 2
25351: PUSH
25352: LD_VAR 0 3
25356: PUSH
25357: LD_VAR 0 4
25361: PUSH
25362: LD_VAR 0 5
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: ST_TO_ADDR
// end ;
25373: LD_VAR 0 6
25377: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25378: LD_INT 0
25380: PPUSH
// if not chassis or not engine then
25381: LD_VAR 0 1
25385: NOT
25386: PUSH
25387: LD_VAR 0 2
25391: NOT
25392: OR
25393: IFFALSE 25397
// exit ;
25395: GO 25593
// case engine of engine_solar :
25397: LD_VAR 0 2
25401: PUSH
25402: LD_INT 2
25404: DOUBLE
25405: EQUAL
25406: IFTRUE 25410
25408: GO 25448
25410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25411: LD_ADDR_VAR 0 3
25415: PUSH
25416: LD_INT 11
25418: PUSH
25419: LD_INT 12
25421: PUSH
25422: LD_INT 13
25424: PUSH
25425: LD_INT 14
25427: PUSH
25428: LD_INT 1
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: ST_TO_ADDR
25446: GO 25577
25448: LD_INT 1
25450: DOUBLE
25451: EQUAL
25452: IFTRUE 25456
25454: GO 25518
25456: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25457: LD_ADDR_VAR 0 3
25461: PUSH
25462: LD_INT 11
25464: PUSH
25465: LD_INT 12
25467: PUSH
25468: LD_INT 13
25470: PUSH
25471: LD_INT 14
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: LD_INT 3
25482: PUSH
25483: LD_INT 4
25485: PUSH
25486: LD_INT 5
25488: PUSH
25489: LD_INT 21
25491: PUSH
25492: LD_INT 23
25494: PUSH
25495: LD_INT 22
25497: PUSH
25498: LD_INT 24
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: ST_TO_ADDR
25516: GO 25577
25518: LD_INT 3
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25576
25526: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 13
25534: PUSH
25535: LD_INT 14
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 3
25543: PUSH
25544: LD_INT 4
25546: PUSH
25547: LD_INT 5
25549: PUSH
25550: LD_INT 21
25552: PUSH
25553: LD_INT 22
25555: PUSH
25556: LD_INT 23
25558: PUSH
25559: LD_INT 24
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: ST_TO_ADDR
25574: GO 25577
25576: POP
// result := ( chassis in result ) ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_VAR 0 1
25586: PUSH
25587: LD_VAR 0 3
25591: IN
25592: ST_TO_ADDR
// end ;
25593: LD_VAR 0 3
25597: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25598: LD_INT 0
25600: PPUSH
// if not chassis or not weapon then
25601: LD_VAR 0 1
25605: NOT
25606: PUSH
25607: LD_VAR 0 2
25611: NOT
25612: OR
25613: IFFALSE 25617
// exit ;
25615: GO 26677
// case weapon of us_machine_gun :
25617: LD_VAR 0 2
25621: PUSH
25622: LD_INT 2
25624: DOUBLE
25625: EQUAL
25626: IFTRUE 25630
25628: GO 25660
25630: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25631: LD_ADDR_VAR 0 3
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 3
25644: PUSH
25645: LD_INT 4
25647: PUSH
25648: LD_INT 5
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: ST_TO_ADDR
25658: GO 26661
25660: LD_INT 3
25662: DOUBLE
25663: EQUAL
25664: IFTRUE 25668
25666: GO 25698
25668: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25669: LD_ADDR_VAR 0 3
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 3
25682: PUSH
25683: LD_INT 4
25685: PUSH
25686: LD_INT 5
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: ST_TO_ADDR
25696: GO 26661
25698: LD_INT 11
25700: DOUBLE
25701: EQUAL
25702: IFTRUE 25706
25704: GO 25736
25706: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25707: LD_ADDR_VAR 0 3
25711: PUSH
25712: LD_INT 1
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: LD_INT 4
25723: PUSH
25724: LD_INT 5
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
25734: GO 26661
25736: LD_INT 4
25738: DOUBLE
25739: EQUAL
25740: IFTRUE 25744
25742: GO 25770
25744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25745: LD_ADDR_VAR 0 3
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: LD_INT 4
25758: PUSH
25759: LD_INT 5
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: ST_TO_ADDR
25768: GO 26661
25770: LD_INT 5
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25804
25778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: LD_INT 4
25792: PUSH
25793: LD_INT 5
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: ST_TO_ADDR
25802: GO 26661
25804: LD_INT 9
25806: DOUBLE
25807: EQUAL
25808: IFTRUE 25812
25810: GO 25838
25812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25813: LD_ADDR_VAR 0 3
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: LD_INT 4
25826: PUSH
25827: LD_INT 5
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: ST_TO_ADDR
25836: GO 26661
25838: LD_INT 7
25840: DOUBLE
25841: EQUAL
25842: IFTRUE 25846
25844: GO 25872
25846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25847: LD_ADDR_VAR 0 3
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: LD_INT 4
25860: PUSH
25861: LD_INT 5
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: ST_TO_ADDR
25870: GO 26661
25872: LD_INT 12
25874: DOUBLE
25875: EQUAL
25876: IFTRUE 25880
25878: GO 25906
25880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25881: LD_ADDR_VAR 0 3
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 3
25891: PUSH
25892: LD_INT 4
25894: PUSH
25895: LD_INT 5
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: ST_TO_ADDR
25904: GO 26661
25906: LD_INT 13
25908: DOUBLE
25909: EQUAL
25910: IFTRUE 25914
25912: GO 25940
25914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25915: LD_ADDR_VAR 0 3
25919: PUSH
25920: LD_INT 2
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: LD_INT 4
25928: PUSH
25929: LD_INT 5
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: ST_TO_ADDR
25938: GO 26661
25940: LD_INT 14
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25966
25948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_INT 4
25956: PUSH
25957: LD_INT 5
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: ST_TO_ADDR
25964: GO 26661
25966: LD_INT 6
25968: DOUBLE
25969: EQUAL
25970: IFTRUE 25974
25972: GO 25992
25974: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_INT 4
25982: PUSH
25983: LD_INT 5
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: ST_TO_ADDR
25990: GO 26661
25992: LD_INT 10
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26018
26000: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 4
26008: PUSH
26009: LD_INT 5
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: ST_TO_ADDR
26016: GO 26661
26018: LD_INT 22
26020: DOUBLE
26021: EQUAL
26022: IFTRUE 26026
26024: GO 26052
26026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_INT 11
26034: PUSH
26035: LD_INT 12
26037: PUSH
26038: LD_INT 13
26040: PUSH
26041: LD_INT 14
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: ST_TO_ADDR
26050: GO 26661
26052: LD_INT 23
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26086
26060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26061: LD_ADDR_VAR 0 3
26065: PUSH
26066: LD_INT 11
26068: PUSH
26069: LD_INT 12
26071: PUSH
26072: LD_INT 13
26074: PUSH
26075: LD_INT 14
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
26084: GO 26661
26086: LD_INT 24
26088: DOUBLE
26089: EQUAL
26090: IFTRUE 26094
26092: GO 26120
26094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_INT 11
26102: PUSH
26103: LD_INT 12
26105: PUSH
26106: LD_INT 13
26108: PUSH
26109: LD_INT 14
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: ST_TO_ADDR
26118: GO 26661
26120: LD_INT 30
26122: DOUBLE
26123: EQUAL
26124: IFTRUE 26128
26126: GO 26154
26128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26129: LD_ADDR_VAR 0 3
26133: PUSH
26134: LD_INT 11
26136: PUSH
26137: LD_INT 12
26139: PUSH
26140: LD_INT 13
26142: PUSH
26143: LD_INT 14
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: ST_TO_ADDR
26152: GO 26661
26154: LD_INT 25
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26180
26162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_INT 13
26170: PUSH
26171: LD_INT 14
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: ST_TO_ADDR
26178: GO 26661
26180: LD_INT 27
26182: DOUBLE
26183: EQUAL
26184: IFTRUE 26188
26186: GO 26206
26188: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26189: LD_ADDR_VAR 0 3
26193: PUSH
26194: LD_INT 13
26196: PUSH
26197: LD_INT 14
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: ST_TO_ADDR
26204: GO 26661
26206: LD_INT 92
26208: DOUBLE
26209: EQUAL
26210: IFTRUE 26214
26212: GO 26240
26214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26215: LD_ADDR_VAR 0 3
26219: PUSH
26220: LD_INT 11
26222: PUSH
26223: LD_INT 12
26225: PUSH
26226: LD_INT 13
26228: PUSH
26229: LD_INT 14
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: ST_TO_ADDR
26238: GO 26661
26240: LD_INT 28
26242: DOUBLE
26243: EQUAL
26244: IFTRUE 26248
26246: GO 26266
26248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26249: LD_ADDR_VAR 0 3
26253: PUSH
26254: LD_INT 13
26256: PUSH
26257: LD_INT 14
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: ST_TO_ADDR
26264: GO 26661
26266: LD_INT 29
26268: DOUBLE
26269: EQUAL
26270: IFTRUE 26274
26272: GO 26292
26274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26275: LD_ADDR_VAR 0 3
26279: PUSH
26280: LD_INT 13
26282: PUSH
26283: LD_INT 14
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: ST_TO_ADDR
26290: GO 26661
26292: LD_INT 31
26294: DOUBLE
26295: EQUAL
26296: IFTRUE 26300
26298: GO 26318
26300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26301: LD_ADDR_VAR 0 3
26305: PUSH
26306: LD_INT 13
26308: PUSH
26309: LD_INT 14
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: ST_TO_ADDR
26316: GO 26661
26318: LD_INT 26
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26344
26326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26327: LD_ADDR_VAR 0 3
26331: PUSH
26332: LD_INT 13
26334: PUSH
26335: LD_INT 14
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: ST_TO_ADDR
26342: GO 26661
26344: LD_INT 42
26346: DOUBLE
26347: EQUAL
26348: IFTRUE 26352
26350: GO 26378
26352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_INT 21
26360: PUSH
26361: LD_INT 22
26363: PUSH
26364: LD_INT 23
26366: PUSH
26367: LD_INT 24
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: ST_TO_ADDR
26376: GO 26661
26378: LD_INT 43
26380: DOUBLE
26381: EQUAL
26382: IFTRUE 26386
26384: GO 26412
26386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26387: LD_ADDR_VAR 0 3
26391: PUSH
26392: LD_INT 21
26394: PUSH
26395: LD_INT 22
26397: PUSH
26398: LD_INT 23
26400: PUSH
26401: LD_INT 24
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
26410: GO 26661
26412: LD_INT 44
26414: DOUBLE
26415: EQUAL
26416: IFTRUE 26420
26418: GO 26446
26420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26421: LD_ADDR_VAR 0 3
26425: PUSH
26426: LD_INT 21
26428: PUSH
26429: LD_INT 22
26431: PUSH
26432: LD_INT 23
26434: PUSH
26435: LD_INT 24
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: ST_TO_ADDR
26444: GO 26661
26446: LD_INT 45
26448: DOUBLE
26449: EQUAL
26450: IFTRUE 26454
26452: GO 26480
26454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26455: LD_ADDR_VAR 0 3
26459: PUSH
26460: LD_INT 21
26462: PUSH
26463: LD_INT 22
26465: PUSH
26466: LD_INT 23
26468: PUSH
26469: LD_INT 24
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: ST_TO_ADDR
26478: GO 26661
26480: LD_INT 49
26482: DOUBLE
26483: EQUAL
26484: IFTRUE 26488
26486: GO 26514
26488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26489: LD_ADDR_VAR 0 3
26493: PUSH
26494: LD_INT 21
26496: PUSH
26497: LD_INT 22
26499: PUSH
26500: LD_INT 23
26502: PUSH
26503: LD_INT 24
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: ST_TO_ADDR
26512: GO 26661
26514: LD_INT 51
26516: DOUBLE
26517: EQUAL
26518: IFTRUE 26522
26520: GO 26548
26522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26523: LD_ADDR_VAR 0 3
26527: PUSH
26528: LD_INT 21
26530: PUSH
26531: LD_INT 22
26533: PUSH
26534: LD_INT 23
26536: PUSH
26537: LD_INT 24
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: ST_TO_ADDR
26546: GO 26661
26548: LD_INT 52
26550: DOUBLE
26551: EQUAL
26552: IFTRUE 26556
26554: GO 26582
26556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26557: LD_ADDR_VAR 0 3
26561: PUSH
26562: LD_INT 21
26564: PUSH
26565: LD_INT 22
26567: PUSH
26568: LD_INT 23
26570: PUSH
26571: LD_INT 24
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: ST_TO_ADDR
26580: GO 26661
26582: LD_INT 53
26584: DOUBLE
26585: EQUAL
26586: IFTRUE 26590
26588: GO 26608
26590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_INT 23
26598: PUSH
26599: LD_INT 24
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: ST_TO_ADDR
26606: GO 26661
26608: LD_INT 46
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26634
26616: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 23
26624: PUSH
26625: LD_INT 24
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: ST_TO_ADDR
26632: GO 26661
26634: LD_INT 47
26636: DOUBLE
26637: EQUAL
26638: IFTRUE 26642
26640: GO 26660
26642: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26643: LD_ADDR_VAR 0 3
26647: PUSH
26648: LD_INT 23
26650: PUSH
26651: LD_INT 24
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: ST_TO_ADDR
26658: GO 26661
26660: POP
// result := ( chassis in result ) ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_VAR 0 1
26670: PUSH
26671: LD_VAR 0 3
26675: IN
26676: ST_TO_ADDR
// end ;
26677: LD_VAR 0 3
26681: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26682: LD_INT 0
26684: PPUSH
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
// result := array ;
26691: LD_ADDR_VAR 0 5
26695: PUSH
26696: LD_VAR 0 1
26700: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26701: LD_VAR 0 1
26705: NOT
26706: PUSH
26707: LD_VAR 0 2
26711: NOT
26712: OR
26713: PUSH
26714: LD_VAR 0 3
26718: NOT
26719: OR
26720: PUSH
26721: LD_VAR 0 2
26725: PUSH
26726: LD_VAR 0 1
26730: GREATER
26731: OR
26732: PUSH
26733: LD_VAR 0 3
26737: PUSH
26738: LD_VAR 0 1
26742: GREATER
26743: OR
26744: IFFALSE 26748
// exit ;
26746: GO 27044
// if direction then
26748: LD_VAR 0 4
26752: IFFALSE 26816
// begin d := 1 ;
26754: LD_ADDR_VAR 0 9
26758: PUSH
26759: LD_INT 1
26761: ST_TO_ADDR
// if i_from > i_to then
26762: LD_VAR 0 2
26766: PUSH
26767: LD_VAR 0 3
26771: GREATER
26772: IFFALSE 26798
// length := ( array - i_from ) + i_to else
26774: LD_ADDR_VAR 0 11
26778: PUSH
26779: LD_VAR 0 1
26783: PUSH
26784: LD_VAR 0 2
26788: MINUS
26789: PUSH
26790: LD_VAR 0 3
26794: PLUS
26795: ST_TO_ADDR
26796: GO 26814
// length := i_to - i_from ;
26798: LD_ADDR_VAR 0 11
26802: PUSH
26803: LD_VAR 0 3
26807: PUSH
26808: LD_VAR 0 2
26812: MINUS
26813: ST_TO_ADDR
// end else
26814: GO 26877
// begin d := - 1 ;
26816: LD_ADDR_VAR 0 9
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: ST_TO_ADDR
// if i_from > i_to then
26825: LD_VAR 0 2
26829: PUSH
26830: LD_VAR 0 3
26834: GREATER
26835: IFFALSE 26855
// length := i_from - i_to else
26837: LD_ADDR_VAR 0 11
26841: PUSH
26842: LD_VAR 0 2
26846: PUSH
26847: LD_VAR 0 3
26851: MINUS
26852: ST_TO_ADDR
26853: GO 26877
// length := ( array - i_to ) + i_from ;
26855: LD_ADDR_VAR 0 11
26859: PUSH
26860: LD_VAR 0 1
26864: PUSH
26865: LD_VAR 0 3
26869: MINUS
26870: PUSH
26871: LD_VAR 0 2
26875: PLUS
26876: ST_TO_ADDR
// end ; if not length then
26877: LD_VAR 0 11
26881: NOT
26882: IFFALSE 26886
// exit ;
26884: GO 27044
// tmp := array ;
26886: LD_ADDR_VAR 0 10
26890: PUSH
26891: LD_VAR 0 1
26895: ST_TO_ADDR
// for i = 1 to length do
26896: LD_ADDR_VAR 0 6
26900: PUSH
26901: DOUBLE
26902: LD_INT 1
26904: DEC
26905: ST_TO_ADDR
26906: LD_VAR 0 11
26910: PUSH
26911: FOR_TO
26912: IFFALSE 27032
// begin for j = 1 to array do
26914: LD_ADDR_VAR 0 7
26918: PUSH
26919: DOUBLE
26920: LD_INT 1
26922: DEC
26923: ST_TO_ADDR
26924: LD_VAR 0 1
26928: PUSH
26929: FOR_TO
26930: IFFALSE 27018
// begin k := j + d ;
26932: LD_ADDR_VAR 0 8
26936: PUSH
26937: LD_VAR 0 7
26941: PUSH
26942: LD_VAR 0 9
26946: PLUS
26947: ST_TO_ADDR
// if k > array then
26948: LD_VAR 0 8
26952: PUSH
26953: LD_VAR 0 1
26957: GREATER
26958: IFFALSE 26968
// k := 1 ;
26960: LD_ADDR_VAR 0 8
26964: PUSH
26965: LD_INT 1
26967: ST_TO_ADDR
// if not k then
26968: LD_VAR 0 8
26972: NOT
26973: IFFALSE 26985
// k := array ;
26975: LD_ADDR_VAR 0 8
26979: PUSH
26980: LD_VAR 0 1
26984: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26985: LD_ADDR_VAR 0 10
26989: PUSH
26990: LD_VAR 0 10
26994: PPUSH
26995: LD_VAR 0 8
26999: PPUSH
27000: LD_VAR 0 1
27004: PUSH
27005: LD_VAR 0 7
27009: ARRAY
27010: PPUSH
27011: CALL_OW 1
27015: ST_TO_ADDR
// end ;
27016: GO 26929
27018: POP
27019: POP
// array := tmp ;
27020: LD_ADDR_VAR 0 1
27024: PUSH
27025: LD_VAR 0 10
27029: ST_TO_ADDR
// end ;
27030: GO 26911
27032: POP
27033: POP
// result := array ;
27034: LD_ADDR_VAR 0 5
27038: PUSH
27039: LD_VAR 0 1
27043: ST_TO_ADDR
// end ;
27044: LD_VAR 0 5
27048: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27049: LD_INT 0
27051: PPUSH
27052: PPUSH
// result := 0 ;
27053: LD_ADDR_VAR 0 3
27057: PUSH
27058: LD_INT 0
27060: ST_TO_ADDR
// if not array or not value in array then
27061: LD_VAR 0 1
27065: NOT
27066: PUSH
27067: LD_VAR 0 2
27071: PUSH
27072: LD_VAR 0 1
27076: IN
27077: NOT
27078: OR
27079: IFFALSE 27083
// exit ;
27081: GO 27137
// for i = 1 to array do
27083: LD_ADDR_VAR 0 4
27087: PUSH
27088: DOUBLE
27089: LD_INT 1
27091: DEC
27092: ST_TO_ADDR
27093: LD_VAR 0 1
27097: PUSH
27098: FOR_TO
27099: IFFALSE 27135
// if value = array [ i ] then
27101: LD_VAR 0 2
27105: PUSH
27106: LD_VAR 0 1
27110: PUSH
27111: LD_VAR 0 4
27115: ARRAY
27116: EQUAL
27117: IFFALSE 27133
// begin result := i ;
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_VAR 0 4
27128: ST_TO_ADDR
// exit ;
27129: POP
27130: POP
27131: GO 27137
// end ;
27133: GO 27098
27135: POP
27136: POP
// end ;
27137: LD_VAR 0 3
27141: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27142: LD_INT 0
27144: PPUSH
// vc_chassis := chassis ;
27145: LD_ADDR_OWVAR 37
27149: PUSH
27150: LD_VAR 0 1
27154: ST_TO_ADDR
// vc_engine := engine ;
27155: LD_ADDR_OWVAR 39
27159: PUSH
27160: LD_VAR 0 2
27164: ST_TO_ADDR
// vc_control := control ;
27165: LD_ADDR_OWVAR 38
27169: PUSH
27170: LD_VAR 0 3
27174: ST_TO_ADDR
// vc_weapon := weapon ;
27175: LD_ADDR_OWVAR 40
27179: PUSH
27180: LD_VAR 0 4
27184: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27185: LD_ADDR_OWVAR 41
27189: PUSH
27190: LD_VAR 0 5
27194: ST_TO_ADDR
// end ;
27195: LD_VAR 0 6
27199: RET
// export function WantPlant ( unit ) ; var task ; begin
27200: LD_INT 0
27202: PPUSH
27203: PPUSH
// result := false ;
27204: LD_ADDR_VAR 0 2
27208: PUSH
27209: LD_INT 0
27211: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27212: LD_ADDR_VAR 0 3
27216: PUSH
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 437
27226: ST_TO_ADDR
// if task then
27227: LD_VAR 0 3
27231: IFFALSE 27259
// if task [ 1 ] [ 1 ] = p then
27233: LD_VAR 0 3
27237: PUSH
27238: LD_INT 1
27240: ARRAY
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: PUSH
27246: LD_STRING p
27248: EQUAL
27249: IFFALSE 27259
// result := true ;
27251: LD_ADDR_VAR 0 2
27255: PUSH
27256: LD_INT 1
27258: ST_TO_ADDR
// end ;
27259: LD_VAR 0 2
27263: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27264: LD_INT 0
27266: PPUSH
27267: PPUSH
27268: PPUSH
27269: PPUSH
// if pos < 1 then
27270: LD_VAR 0 2
27274: PUSH
27275: LD_INT 1
27277: LESS
27278: IFFALSE 27282
// exit ;
27280: GO 27585
// if pos = 1 then
27282: LD_VAR 0 2
27286: PUSH
27287: LD_INT 1
27289: EQUAL
27290: IFFALSE 27323
// result := Replace ( arr , pos [ 1 ] , value ) else
27292: LD_ADDR_VAR 0 4
27296: PUSH
27297: LD_VAR 0 1
27301: PPUSH
27302: LD_VAR 0 2
27306: PUSH
27307: LD_INT 1
27309: ARRAY
27310: PPUSH
27311: LD_VAR 0 3
27315: PPUSH
27316: CALL_OW 1
27320: ST_TO_ADDR
27321: GO 27585
// begin tmp := arr ;
27323: LD_ADDR_VAR 0 6
27327: PUSH
27328: LD_VAR 0 1
27332: ST_TO_ADDR
// s_arr := [ tmp ] ;
27333: LD_ADDR_VAR 0 7
27337: PUSH
27338: LD_VAR 0 6
27342: PUSH
27343: EMPTY
27344: LIST
27345: ST_TO_ADDR
// for i = 1 to pos - 1 do
27346: LD_ADDR_VAR 0 5
27350: PUSH
27351: DOUBLE
27352: LD_INT 1
27354: DEC
27355: ST_TO_ADDR
27356: LD_VAR 0 2
27360: PUSH
27361: LD_INT 1
27363: MINUS
27364: PUSH
27365: FOR_TO
27366: IFFALSE 27411
// begin tmp := tmp [ pos [ i ] ] ;
27368: LD_ADDR_VAR 0 6
27372: PUSH
27373: LD_VAR 0 6
27377: PUSH
27378: LD_VAR 0 2
27382: PUSH
27383: LD_VAR 0 5
27387: ARRAY
27388: ARRAY
27389: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27390: LD_ADDR_VAR 0 7
27394: PUSH
27395: LD_VAR 0 7
27399: PUSH
27400: LD_VAR 0 6
27404: PUSH
27405: EMPTY
27406: LIST
27407: ADD
27408: ST_TO_ADDR
// end ;
27409: GO 27365
27411: POP
27412: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27413: LD_ADDR_VAR 0 6
27417: PUSH
27418: LD_VAR 0 6
27422: PPUSH
27423: LD_VAR 0 2
27427: PUSH
27428: LD_VAR 0 2
27432: ARRAY
27433: PPUSH
27434: LD_VAR 0 3
27438: PPUSH
27439: CALL_OW 1
27443: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27444: LD_ADDR_VAR 0 7
27448: PUSH
27449: LD_VAR 0 7
27453: PPUSH
27454: LD_VAR 0 7
27458: PPUSH
27459: LD_VAR 0 6
27463: PPUSH
27464: CALL_OW 1
27468: ST_TO_ADDR
// for i = s_arr downto 2 do
27469: LD_ADDR_VAR 0 5
27473: PUSH
27474: DOUBLE
27475: LD_VAR 0 7
27479: INC
27480: ST_TO_ADDR
27481: LD_INT 2
27483: PUSH
27484: FOR_DOWNTO
27485: IFFALSE 27569
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27487: LD_ADDR_VAR 0 6
27491: PUSH
27492: LD_VAR 0 7
27496: PUSH
27497: LD_VAR 0 5
27501: PUSH
27502: LD_INT 1
27504: MINUS
27505: ARRAY
27506: PPUSH
27507: LD_VAR 0 2
27511: PUSH
27512: LD_VAR 0 5
27516: PUSH
27517: LD_INT 1
27519: MINUS
27520: ARRAY
27521: PPUSH
27522: LD_VAR 0 7
27526: PUSH
27527: LD_VAR 0 5
27531: ARRAY
27532: PPUSH
27533: CALL_OW 1
27537: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27538: LD_ADDR_VAR 0 7
27542: PUSH
27543: LD_VAR 0 7
27547: PPUSH
27548: LD_VAR 0 5
27552: PUSH
27553: LD_INT 1
27555: MINUS
27556: PPUSH
27557: LD_VAR 0 6
27561: PPUSH
27562: CALL_OW 1
27566: ST_TO_ADDR
// end ;
27567: GO 27484
27569: POP
27570: POP
// result := s_arr [ 1 ] ;
27571: LD_ADDR_VAR 0 4
27575: PUSH
27576: LD_VAR 0 7
27580: PUSH
27581: LD_INT 1
27583: ARRAY
27584: ST_TO_ADDR
// end ; end ;
27585: LD_VAR 0 4
27589: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27590: LD_INT 0
27592: PPUSH
27593: PPUSH
// if not list then
27594: LD_VAR 0 1
27598: NOT
27599: IFFALSE 27603
// exit ;
27601: GO 27694
// i := list [ pos1 ] ;
27603: LD_ADDR_VAR 0 5
27607: PUSH
27608: LD_VAR 0 1
27612: PUSH
27613: LD_VAR 0 2
27617: ARRAY
27618: ST_TO_ADDR
// if not i then
27619: LD_VAR 0 5
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 27694
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27628: LD_ADDR_VAR 0 1
27632: PUSH
27633: LD_VAR 0 1
27637: PPUSH
27638: LD_VAR 0 2
27642: PPUSH
27643: LD_VAR 0 1
27647: PUSH
27648: LD_VAR 0 3
27652: ARRAY
27653: PPUSH
27654: CALL_OW 1
27658: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27659: LD_ADDR_VAR 0 1
27663: PUSH
27664: LD_VAR 0 1
27668: PPUSH
27669: LD_VAR 0 3
27673: PPUSH
27674: LD_VAR 0 5
27678: PPUSH
27679: CALL_OW 1
27683: ST_TO_ADDR
// result := list ;
27684: LD_ADDR_VAR 0 4
27688: PUSH
27689: LD_VAR 0 1
27693: ST_TO_ADDR
// end ;
27694: LD_VAR 0 4
27698: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27699: LD_INT 0
27701: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27702: LD_ADDR_VAR 0 5
27706: PUSH
27707: LD_VAR 0 1
27711: PPUSH
27712: CALL_OW 250
27716: PPUSH
27717: LD_VAR 0 1
27721: PPUSH
27722: CALL_OW 251
27726: PPUSH
27727: LD_VAR 0 2
27731: PPUSH
27732: LD_VAR 0 3
27736: PPUSH
27737: LD_VAR 0 4
27741: PPUSH
27742: CALL 28120 0 5
27746: ST_TO_ADDR
// end ;
27747: LD_VAR 0 5
27751: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27752: LD_INT 0
27754: PPUSH
27755: PPUSH
27756: PPUSH
27757: PPUSH
// if not list or not unit then
27758: LD_VAR 0 2
27762: NOT
27763: PUSH
27764: LD_VAR 0 1
27768: NOT
27769: OR
27770: IFFALSE 27774
// exit ;
27772: GO 28115
// result := [ ] ;
27774: LD_ADDR_VAR 0 5
27778: PUSH
27779: EMPTY
27780: ST_TO_ADDR
// for i in list do
27781: LD_ADDR_VAR 0 6
27785: PUSH
27786: LD_VAR 0 2
27790: PUSH
27791: FOR_IN
27792: IFFALSE 28010
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27794: LD_ADDR_VAR 0 8
27798: PUSH
27799: LD_VAR 0 1
27803: PPUSH
27804: LD_VAR 0 6
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: PPUSH
27813: LD_VAR 0 6
27817: PUSH
27818: LD_INT 2
27820: ARRAY
27821: PPUSH
27822: CALL_OW 297
27826: ST_TO_ADDR
// if not Count ( result ) then
27827: LD_VAR 0 5
27831: PPUSH
27832: CALL 24404 0 1
27836: NOT
27837: IFFALSE 27870
// begin result := Join ( result , [ i , tmp ] ) ;
27839: LD_ADDR_VAR 0 5
27843: PUSH
27844: LD_VAR 0 5
27848: PPUSH
27849: LD_VAR 0 6
27853: PUSH
27854: LD_VAR 0 8
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PPUSH
27863: CALL 59993 0 2
27867: ST_TO_ADDR
// continue ;
27868: GO 27791
// end ; if result [ result ] [ 2 ] <= tmp then
27870: LD_VAR 0 5
27874: PUSH
27875: LD_VAR 0 5
27879: ARRAY
27880: PUSH
27881: LD_INT 2
27883: ARRAY
27884: PUSH
27885: LD_VAR 0 8
27889: LESSEQUAL
27890: IFFALSE 27923
// result := Join ( result , [ i , tmp ] ) else
27892: LD_ADDR_VAR 0 5
27896: PUSH
27897: LD_VAR 0 5
27901: PPUSH
27902: LD_VAR 0 6
27906: PUSH
27907: LD_VAR 0 8
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PPUSH
27916: CALL 59993 0 2
27920: ST_TO_ADDR
27921: GO 28008
// begin for j := 1 to Count ( result ) do
27923: LD_ADDR_VAR 0 7
27927: PUSH
27928: DOUBLE
27929: LD_INT 1
27931: DEC
27932: ST_TO_ADDR
27933: LD_VAR 0 5
27937: PPUSH
27938: CALL 24404 0 1
27942: PUSH
27943: FOR_TO
27944: IFFALSE 28006
// begin if tmp < result [ j ] [ 2 ] then
27946: LD_VAR 0 8
27950: PUSH
27951: LD_VAR 0 5
27955: PUSH
27956: LD_VAR 0 7
27960: ARRAY
27961: PUSH
27962: LD_INT 2
27964: ARRAY
27965: LESS
27966: IFFALSE 28004
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27968: LD_ADDR_VAR 0 5
27972: PUSH
27973: LD_VAR 0 5
27977: PPUSH
27978: LD_VAR 0 7
27982: PPUSH
27983: LD_VAR 0 6
27987: PUSH
27988: LD_VAR 0 8
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 2
28001: ST_TO_ADDR
// break ;
28002: GO 28006
// end ; end ;
28004: GO 27943
28006: POP
28007: POP
// end ; end ;
28008: GO 27791
28010: POP
28011: POP
// if result and not asc then
28012: LD_VAR 0 5
28016: PUSH
28017: LD_VAR 0 3
28021: NOT
28022: AND
28023: IFFALSE 28040
// result := ReverseArray ( result ) ;
28025: LD_ADDR_VAR 0 5
28029: PUSH
28030: LD_VAR 0 5
28034: PPUSH
28035: CALL 55280 0 1
28039: ST_TO_ADDR
// tmp := [ ] ;
28040: LD_ADDR_VAR 0 8
28044: PUSH
28045: EMPTY
28046: ST_TO_ADDR
// if mode then
28047: LD_VAR 0 4
28051: IFFALSE 28115
// begin for i := 1 to result do
28053: LD_ADDR_VAR 0 6
28057: PUSH
28058: DOUBLE
28059: LD_INT 1
28061: DEC
28062: ST_TO_ADDR
28063: LD_VAR 0 5
28067: PUSH
28068: FOR_TO
28069: IFFALSE 28103
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28071: LD_ADDR_VAR 0 8
28075: PUSH
28076: LD_VAR 0 8
28080: PPUSH
28081: LD_VAR 0 5
28085: PUSH
28086: LD_VAR 0 6
28090: ARRAY
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: CALL 59993 0 2
28100: ST_TO_ADDR
28101: GO 28068
28103: POP
28104: POP
// result := tmp ;
28105: LD_ADDR_VAR 0 5
28109: PUSH
28110: LD_VAR 0 8
28114: ST_TO_ADDR
// end ; end ;
28115: LD_VAR 0 5
28119: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
28124: PPUSH
28125: PPUSH
// if not list then
28126: LD_VAR 0 3
28130: NOT
28131: IFFALSE 28135
// exit ;
28133: GO 28523
// result := [ ] ;
28135: LD_ADDR_VAR 0 6
28139: PUSH
28140: EMPTY
28141: ST_TO_ADDR
// for i in list do
28142: LD_ADDR_VAR 0 7
28146: PUSH
28147: LD_VAR 0 3
28151: PUSH
28152: FOR_IN
28153: IFFALSE 28355
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28155: LD_ADDR_VAR 0 9
28159: PUSH
28160: LD_VAR 0 7
28164: PPUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: CALL_OW 297
28179: ST_TO_ADDR
// if not result then
28180: LD_VAR 0 6
28184: NOT
28185: IFFALSE 28211
// result := [ [ i , tmp ] ] else
28187: LD_ADDR_VAR 0 6
28191: PUSH
28192: LD_VAR 0 7
28196: PUSH
28197: LD_VAR 0 9
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: EMPTY
28207: LIST
28208: ST_TO_ADDR
28209: GO 28353
// begin if result [ result ] [ 2 ] < tmp then
28211: LD_VAR 0 6
28215: PUSH
28216: LD_VAR 0 6
28220: ARRAY
28221: PUSH
28222: LD_INT 2
28224: ARRAY
28225: PUSH
28226: LD_VAR 0 9
28230: LESS
28231: IFFALSE 28273
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28233: LD_ADDR_VAR 0 6
28237: PUSH
28238: LD_VAR 0 6
28242: PPUSH
28243: LD_VAR 0 6
28247: PUSH
28248: LD_INT 1
28250: PLUS
28251: PPUSH
28252: LD_VAR 0 7
28256: PUSH
28257: LD_VAR 0 9
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PPUSH
28266: CALL_OW 2
28270: ST_TO_ADDR
28271: GO 28353
// for j = 1 to result do
28273: LD_ADDR_VAR 0 8
28277: PUSH
28278: DOUBLE
28279: LD_INT 1
28281: DEC
28282: ST_TO_ADDR
28283: LD_VAR 0 6
28287: PUSH
28288: FOR_TO
28289: IFFALSE 28351
// begin if tmp < result [ j ] [ 2 ] then
28291: LD_VAR 0 9
28295: PUSH
28296: LD_VAR 0 6
28300: PUSH
28301: LD_VAR 0 8
28305: ARRAY
28306: PUSH
28307: LD_INT 2
28309: ARRAY
28310: LESS
28311: IFFALSE 28349
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28313: LD_ADDR_VAR 0 6
28317: PUSH
28318: LD_VAR 0 6
28322: PPUSH
28323: LD_VAR 0 8
28327: PPUSH
28328: LD_VAR 0 7
28332: PUSH
28333: LD_VAR 0 9
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PPUSH
28342: CALL_OW 2
28346: ST_TO_ADDR
// break ;
28347: GO 28351
// end ; end ;
28349: GO 28288
28351: POP
28352: POP
// end ; end ;
28353: GO 28152
28355: POP
28356: POP
// if result and not asc then
28357: LD_VAR 0 6
28361: PUSH
28362: LD_VAR 0 4
28366: NOT
28367: AND
28368: IFFALSE 28443
// begin tmp := result ;
28370: LD_ADDR_VAR 0 9
28374: PUSH
28375: LD_VAR 0 6
28379: ST_TO_ADDR
// for i = tmp downto 1 do
28380: LD_ADDR_VAR 0 7
28384: PUSH
28385: DOUBLE
28386: LD_VAR 0 9
28390: INC
28391: ST_TO_ADDR
28392: LD_INT 1
28394: PUSH
28395: FOR_DOWNTO
28396: IFFALSE 28441
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28398: LD_ADDR_VAR 0 6
28402: PUSH
28403: LD_VAR 0 6
28407: PPUSH
28408: LD_VAR 0 9
28412: PUSH
28413: LD_VAR 0 7
28417: MINUS
28418: PUSH
28419: LD_INT 1
28421: PLUS
28422: PPUSH
28423: LD_VAR 0 9
28427: PUSH
28428: LD_VAR 0 7
28432: ARRAY
28433: PPUSH
28434: CALL_OW 1
28438: ST_TO_ADDR
28439: GO 28395
28441: POP
28442: POP
// end ; tmp := [ ] ;
28443: LD_ADDR_VAR 0 9
28447: PUSH
28448: EMPTY
28449: ST_TO_ADDR
// if mode then
28450: LD_VAR 0 5
28454: IFFALSE 28523
// begin for i = 1 to result do
28456: LD_ADDR_VAR 0 7
28460: PUSH
28461: DOUBLE
28462: LD_INT 1
28464: DEC
28465: ST_TO_ADDR
28466: LD_VAR 0 6
28470: PUSH
28471: FOR_TO
28472: IFFALSE 28511
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28474: LD_ADDR_VAR 0 9
28478: PUSH
28479: LD_VAR 0 9
28483: PPUSH
28484: LD_VAR 0 7
28488: PPUSH
28489: LD_VAR 0 6
28493: PUSH
28494: LD_VAR 0 7
28498: ARRAY
28499: PUSH
28500: LD_INT 1
28502: ARRAY
28503: PPUSH
28504: CALL_OW 1
28508: ST_TO_ADDR
28509: GO 28471
28511: POP
28512: POP
// result := tmp ;
28513: LD_ADDR_VAR 0 6
28517: PUSH
28518: LD_VAR 0 9
28522: ST_TO_ADDR
// end ; end ;
28523: LD_VAR 0 6
28527: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28536: LD_ADDR_VAR 0 5
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: ST_TO_ADDR
// if not x or not y then
28558: LD_VAR 0 2
28562: NOT
28563: PUSH
28564: LD_VAR 0 3
28568: NOT
28569: OR
28570: IFFALSE 28574
// exit ;
28572: GO 30224
// if not range then
28574: LD_VAR 0 4
28578: NOT
28579: IFFALSE 28589
// range := 10 ;
28581: LD_ADDR_VAR 0 4
28585: PUSH
28586: LD_INT 10
28588: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28589: LD_ADDR_VAR 0 8
28593: PUSH
28594: LD_INT 81
28596: PUSH
28597: LD_VAR 0 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 92
28608: PUSH
28609: LD_VAR 0 2
28613: PUSH
28614: LD_VAR 0 3
28618: PUSH
28619: LD_VAR 0 4
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 3
28632: PUSH
28633: LD_INT 21
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: ST_TO_ADDR
// if not tmp then
28657: LD_VAR 0 8
28661: NOT
28662: IFFALSE 28666
// exit ;
28664: GO 30224
// for i in tmp do
28666: LD_ADDR_VAR 0 6
28670: PUSH
28671: LD_VAR 0 8
28675: PUSH
28676: FOR_IN
28677: IFFALSE 30199
// begin points := [ 0 , 0 , 0 ] ;
28679: LD_ADDR_VAR 0 9
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: ST_TO_ADDR
// bpoints := 1 ;
28698: LD_ADDR_VAR 0 10
28702: PUSH
28703: LD_INT 1
28705: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28706: LD_VAR 0 6
28710: PPUSH
28711: CALL_OW 247
28715: PUSH
28716: LD_INT 1
28718: DOUBLE
28719: EQUAL
28720: IFTRUE 28724
28722: GO 29302
28724: POP
// begin if GetClass ( i ) = 1 then
28725: LD_VAR 0 6
28729: PPUSH
28730: CALL_OW 257
28734: PUSH
28735: LD_INT 1
28737: EQUAL
28738: IFFALSE 28759
// points := [ 10 , 5 , 3 ] ;
28740: LD_ADDR_VAR 0 9
28744: PUSH
28745: LD_INT 10
28747: PUSH
28748: LD_INT 5
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28759: LD_VAR 0 6
28763: PPUSH
28764: CALL_OW 257
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: LD_INT 3
28774: PUSH
28775: LD_INT 4
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: IN
28783: IFFALSE 28804
// points := [ 3 , 2 , 1 ] ;
28785: LD_ADDR_VAR 0 9
28789: PUSH
28790: LD_INT 3
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28804: LD_VAR 0 6
28808: PPUSH
28809: CALL_OW 257
28813: PUSH
28814: LD_INT 5
28816: EQUAL
28817: IFFALSE 28838
// points := [ 130 , 5 , 2 ] ;
28819: LD_ADDR_VAR 0 9
28823: PUSH
28824: LD_INT 130
28826: PUSH
28827: LD_INT 5
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28838: LD_VAR 0 6
28842: PPUSH
28843: CALL_OW 257
28847: PUSH
28848: LD_INT 8
28850: EQUAL
28851: IFFALSE 28872
// points := [ 35 , 35 , 30 ] ;
28853: LD_ADDR_VAR 0 9
28857: PUSH
28858: LD_INT 35
28860: PUSH
28861: LD_INT 35
28863: PUSH
28864: LD_INT 30
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28872: LD_VAR 0 6
28876: PPUSH
28877: CALL_OW 257
28881: PUSH
28882: LD_INT 9
28884: EQUAL
28885: IFFALSE 28906
// points := [ 20 , 55 , 40 ] ;
28887: LD_ADDR_VAR 0 9
28891: PUSH
28892: LD_INT 20
28894: PUSH
28895: LD_INT 55
28897: PUSH
28898: LD_INT 40
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28906: LD_VAR 0 6
28910: PPUSH
28911: CALL_OW 257
28915: PUSH
28916: LD_INT 12
28918: PUSH
28919: LD_INT 16
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: IN
28926: IFFALSE 28947
// points := [ 5 , 3 , 2 ] ;
28928: LD_ADDR_VAR 0 9
28932: PUSH
28933: LD_INT 5
28935: PUSH
28936: LD_INT 3
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28947: LD_VAR 0 6
28951: PPUSH
28952: CALL_OW 257
28956: PUSH
28957: LD_INT 17
28959: EQUAL
28960: IFFALSE 28981
// points := [ 100 , 50 , 75 ] ;
28962: LD_ADDR_VAR 0 9
28966: PUSH
28967: LD_INT 100
28969: PUSH
28970: LD_INT 50
28972: PUSH
28973: LD_INT 75
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28981: LD_VAR 0 6
28985: PPUSH
28986: CALL_OW 257
28990: PUSH
28991: LD_INT 15
28993: EQUAL
28994: IFFALSE 29015
// points := [ 10 , 5 , 3 ] ;
28996: LD_ADDR_VAR 0 9
29000: PUSH
29001: LD_INT 10
29003: PUSH
29004: LD_INT 5
29006: PUSH
29007: LD_INT 3
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29015: LD_VAR 0 6
29019: PPUSH
29020: CALL_OW 257
29024: PUSH
29025: LD_INT 14
29027: EQUAL
29028: IFFALSE 29049
// points := [ 10 , 0 , 0 ] ;
29030: LD_ADDR_VAR 0 9
29034: PUSH
29035: LD_INT 10
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: LIST
29048: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29049: LD_VAR 0 6
29053: PPUSH
29054: CALL_OW 257
29058: PUSH
29059: LD_INT 11
29061: EQUAL
29062: IFFALSE 29083
// points := [ 30 , 10 , 5 ] ;
29064: LD_ADDR_VAR 0 9
29068: PUSH
29069: LD_INT 30
29071: PUSH
29072: LD_INT 10
29074: PUSH
29075: LD_INT 5
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_INT 5
29090: PPUSH
29091: CALL_OW 321
29095: PUSH
29096: LD_INT 2
29098: EQUAL
29099: IFFALSE 29116
// bpoints := bpoints * 1.8 ;
29101: LD_ADDR_VAR 0 10
29105: PUSH
29106: LD_VAR 0 10
29110: PUSH
29111: LD_REAL  1.80000000000000E+0000
29114: MUL
29115: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29116: LD_VAR 0 6
29120: PPUSH
29121: CALL_OW 257
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 3
29134: PUSH
29135: LD_INT 4
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: IN
29144: PUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_INT 51
29152: PPUSH
29153: CALL_OW 321
29157: PUSH
29158: LD_INT 2
29160: EQUAL
29161: AND
29162: IFFALSE 29179
// bpoints := bpoints * 1.2 ;
29164: LD_ADDR_VAR 0 10
29168: PUSH
29169: LD_VAR 0 10
29173: PUSH
29174: LD_REAL  1.20000000000000E+0000
29177: MUL
29178: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29179: LD_VAR 0 6
29183: PPUSH
29184: CALL_OW 257
29188: PUSH
29189: LD_INT 5
29191: PUSH
29192: LD_INT 7
29194: PUSH
29195: LD_INT 9
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: IN
29203: PUSH
29204: LD_VAR 0 1
29208: PPUSH
29209: LD_INT 52
29211: PPUSH
29212: CALL_OW 321
29216: PUSH
29217: LD_INT 2
29219: EQUAL
29220: AND
29221: IFFALSE 29238
// bpoints := bpoints * 1.5 ;
29223: LD_ADDR_VAR 0 10
29227: PUSH
29228: LD_VAR 0 10
29232: PUSH
29233: LD_REAL  1.50000000000000E+0000
29236: MUL
29237: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29238: LD_VAR 0 1
29242: PPUSH
29243: LD_INT 66
29245: PPUSH
29246: CALL_OW 321
29250: PUSH
29251: LD_INT 2
29253: EQUAL
29254: IFFALSE 29271
// bpoints := bpoints * 1.1 ;
29256: LD_ADDR_VAR 0 10
29260: PUSH
29261: LD_VAR 0 10
29265: PUSH
29266: LD_REAL  1.10000000000000E+0000
29269: MUL
29270: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29271: LD_ADDR_VAR 0 10
29275: PUSH
29276: LD_VAR 0 10
29280: PUSH
29281: LD_VAR 0 6
29285: PPUSH
29286: LD_INT 1
29288: PPUSH
29289: CALL_OW 259
29293: PUSH
29294: LD_REAL  1.15000000000000E+0000
29297: MUL
29298: MUL
29299: ST_TO_ADDR
// end ; unit_vehicle :
29300: GO 30128
29302: LD_INT 2
29304: DOUBLE
29305: EQUAL
29306: IFTRUE 29310
29308: GO 30116
29310: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29311: LD_VAR 0 6
29315: PPUSH
29316: CALL_OW 264
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 42
29326: PUSH
29327: LD_INT 24
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: IN
29335: IFFALSE 29356
// points := [ 25 , 5 , 3 ] ;
29337: LD_ADDR_VAR 0 9
29341: PUSH
29342: LD_INT 25
29344: PUSH
29345: LD_INT 5
29347: PUSH
29348: LD_INT 3
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29356: LD_VAR 0 6
29360: PPUSH
29361: CALL_OW 264
29365: PUSH
29366: LD_INT 4
29368: PUSH
29369: LD_INT 43
29371: PUSH
29372: LD_INT 25
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: IN
29380: IFFALSE 29401
// points := [ 40 , 15 , 5 ] ;
29382: LD_ADDR_VAR 0 9
29386: PUSH
29387: LD_INT 40
29389: PUSH
29390: LD_INT 15
29392: PUSH
29393: LD_INT 5
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29401: LD_VAR 0 6
29405: PPUSH
29406: CALL_OW 264
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: LD_INT 23
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: IN
29421: IFFALSE 29442
// points := [ 7 , 25 , 8 ] ;
29423: LD_ADDR_VAR 0 9
29427: PUSH
29428: LD_INT 7
29430: PUSH
29431: LD_INT 25
29433: PUSH
29434: LD_INT 8
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29442: LD_VAR 0 6
29446: PPUSH
29447: CALL_OW 264
29451: PUSH
29452: LD_INT 5
29454: PUSH
29455: LD_INT 27
29457: PUSH
29458: LD_INT 44
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: IN
29466: IFFALSE 29487
// points := [ 14 , 50 , 16 ] ;
29468: LD_ADDR_VAR 0 9
29472: PUSH
29473: LD_INT 14
29475: PUSH
29476: LD_INT 50
29478: PUSH
29479: LD_INT 16
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29487: LD_VAR 0 6
29491: PPUSH
29492: CALL_OW 264
29496: PUSH
29497: LD_INT 6
29499: PUSH
29500: LD_INT 46
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: IN
29507: IFFALSE 29528
// points := [ 32 , 120 , 70 ] ;
29509: LD_ADDR_VAR 0 9
29513: PUSH
29514: LD_INT 32
29516: PUSH
29517: LD_INT 120
29519: PUSH
29520: LD_INT 70
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29528: LD_VAR 0 6
29532: PPUSH
29533: CALL_OW 264
29537: PUSH
29538: LD_INT 7
29540: PUSH
29541: LD_INT 28
29543: PUSH
29544: LD_INT 45
29546: PUSH
29547: LD_INT 92
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: IN
29556: IFFALSE 29577
// points := [ 35 , 20 , 45 ] ;
29558: LD_ADDR_VAR 0 9
29562: PUSH
29563: LD_INT 35
29565: PUSH
29566: LD_INT 20
29568: PUSH
29569: LD_INT 45
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29577: LD_VAR 0 6
29581: PPUSH
29582: CALL_OW 264
29586: PUSH
29587: LD_INT 47
29589: PUSH
29590: EMPTY
29591: LIST
29592: IN
29593: IFFALSE 29614
// points := [ 67 , 45 , 75 ] ;
29595: LD_ADDR_VAR 0 9
29599: PUSH
29600: LD_INT 67
29602: PUSH
29603: LD_INT 45
29605: PUSH
29606: LD_INT 75
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29614: LD_VAR 0 6
29618: PPUSH
29619: CALL_OW 264
29623: PUSH
29624: LD_INT 26
29626: PUSH
29627: EMPTY
29628: LIST
29629: IN
29630: IFFALSE 29651
// points := [ 120 , 30 , 80 ] ;
29632: LD_ADDR_VAR 0 9
29636: PUSH
29637: LD_INT 120
29639: PUSH
29640: LD_INT 30
29642: PUSH
29643: LD_INT 80
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29651: LD_VAR 0 6
29655: PPUSH
29656: CALL_OW 264
29660: PUSH
29661: LD_INT 22
29663: PUSH
29664: EMPTY
29665: LIST
29666: IN
29667: IFFALSE 29688
// points := [ 40 , 1 , 1 ] ;
29669: LD_ADDR_VAR 0 9
29673: PUSH
29674: LD_INT 40
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29688: LD_VAR 0 6
29692: PPUSH
29693: CALL_OW 264
29697: PUSH
29698: LD_INT 29
29700: PUSH
29701: EMPTY
29702: LIST
29703: IN
29704: IFFALSE 29725
// points := [ 70 , 200 , 400 ] ;
29706: LD_ADDR_VAR 0 9
29710: PUSH
29711: LD_INT 70
29713: PUSH
29714: LD_INT 200
29716: PUSH
29717: LD_INT 400
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29725: LD_VAR 0 6
29729: PPUSH
29730: CALL_OW 264
29734: PUSH
29735: LD_INT 14
29737: PUSH
29738: LD_INT 53
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: IN
29745: IFFALSE 29766
// points := [ 40 , 10 , 20 ] ;
29747: LD_ADDR_VAR 0 9
29751: PUSH
29752: LD_INT 40
29754: PUSH
29755: LD_INT 10
29757: PUSH
29758: LD_INT 20
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29766: LD_VAR 0 6
29770: PPUSH
29771: CALL_OW 264
29775: PUSH
29776: LD_INT 9
29778: PUSH
29779: EMPTY
29780: LIST
29781: IN
29782: IFFALSE 29803
// points := [ 5 , 70 , 20 ] ;
29784: LD_ADDR_VAR 0 9
29788: PUSH
29789: LD_INT 5
29791: PUSH
29792: LD_INT 70
29794: PUSH
29795: LD_INT 20
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29803: LD_VAR 0 6
29807: PPUSH
29808: CALL_OW 264
29812: PUSH
29813: LD_INT 10
29815: PUSH
29816: EMPTY
29817: LIST
29818: IN
29819: IFFALSE 29840
// points := [ 35 , 110 , 70 ] ;
29821: LD_ADDR_VAR 0 9
29825: PUSH
29826: LD_INT 35
29828: PUSH
29829: LD_INT 110
29831: PUSH
29832: LD_INT 70
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29840: LD_VAR 0 6
29844: PPUSH
29845: CALL_OW 265
29849: PUSH
29850: LD_INT 25
29852: EQUAL
29853: IFFALSE 29874
// points := [ 80 , 65 , 100 ] ;
29855: LD_ADDR_VAR 0 9
29859: PUSH
29860: LD_INT 80
29862: PUSH
29863: LD_INT 65
29865: PUSH
29866: LD_INT 100
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29874: LD_VAR 0 6
29878: PPUSH
29879: CALL_OW 263
29883: PUSH
29884: LD_INT 1
29886: EQUAL
29887: IFFALSE 29922
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29889: LD_ADDR_VAR 0 10
29893: PUSH
29894: LD_VAR 0 10
29898: PUSH
29899: LD_VAR 0 6
29903: PPUSH
29904: CALL_OW 311
29908: PPUSH
29909: LD_INT 3
29911: PPUSH
29912: CALL_OW 259
29916: PUSH
29917: LD_INT 4
29919: MUL
29920: MUL
29921: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29922: LD_VAR 0 6
29926: PPUSH
29927: CALL_OW 263
29931: PUSH
29932: LD_INT 2
29934: EQUAL
29935: IFFALSE 29986
// begin j := IsControledBy ( i ) ;
29937: LD_ADDR_VAR 0 7
29941: PUSH
29942: LD_VAR 0 6
29946: PPUSH
29947: CALL_OW 312
29951: ST_TO_ADDR
// if j then
29952: LD_VAR 0 7
29956: IFFALSE 29986
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29958: LD_ADDR_VAR 0 10
29962: PUSH
29963: LD_VAR 0 10
29967: PUSH
29968: LD_VAR 0 7
29972: PPUSH
29973: LD_INT 3
29975: PPUSH
29976: CALL_OW 259
29980: PUSH
29981: LD_INT 3
29983: MUL
29984: MUL
29985: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29986: LD_VAR 0 6
29990: PPUSH
29991: CALL_OW 264
29995: PUSH
29996: LD_INT 5
29998: PUSH
29999: LD_INT 6
30001: PUSH
30002: LD_INT 46
30004: PUSH
30005: LD_INT 44
30007: PUSH
30008: LD_INT 47
30010: PUSH
30011: LD_INT 45
30013: PUSH
30014: LD_INT 28
30016: PUSH
30017: LD_INT 7
30019: PUSH
30020: LD_INT 27
30022: PUSH
30023: LD_INT 29
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: IN
30038: PUSH
30039: LD_VAR 0 1
30043: PPUSH
30044: LD_INT 52
30046: PPUSH
30047: CALL_OW 321
30051: PUSH
30052: LD_INT 2
30054: EQUAL
30055: AND
30056: IFFALSE 30073
// bpoints := bpoints * 1.2 ;
30058: LD_ADDR_VAR 0 10
30062: PUSH
30063: LD_VAR 0 10
30067: PUSH
30068: LD_REAL  1.20000000000000E+0000
30071: MUL
30072: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30073: LD_VAR 0 6
30077: PPUSH
30078: CALL_OW 264
30082: PUSH
30083: LD_INT 6
30085: PUSH
30086: LD_INT 46
30088: PUSH
30089: LD_INT 47
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: IN
30097: IFFALSE 30114
// bpoints := bpoints * 1.2 ;
30099: LD_ADDR_VAR 0 10
30103: PUSH
30104: LD_VAR 0 10
30108: PUSH
30109: LD_REAL  1.20000000000000E+0000
30112: MUL
30113: ST_TO_ADDR
// end ; unit_building :
30114: GO 30128
30116: LD_INT 3
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30124
30122: GO 30127
30124: POP
// ; end ;
30125: GO 30128
30127: POP
// for j = 1 to 3 do
30128: LD_ADDR_VAR 0 7
30132: PUSH
30133: DOUBLE
30134: LD_INT 1
30136: DEC
30137: ST_TO_ADDR
30138: LD_INT 3
30140: PUSH
30141: FOR_TO
30142: IFFALSE 30195
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30144: LD_ADDR_VAR 0 5
30148: PUSH
30149: LD_VAR 0 5
30153: PPUSH
30154: LD_VAR 0 7
30158: PPUSH
30159: LD_VAR 0 5
30163: PUSH
30164: LD_VAR 0 7
30168: ARRAY
30169: PUSH
30170: LD_VAR 0 9
30174: PUSH
30175: LD_VAR 0 7
30179: ARRAY
30180: PUSH
30181: LD_VAR 0 10
30185: MUL
30186: PLUS
30187: PPUSH
30188: CALL_OW 1
30192: ST_TO_ADDR
30193: GO 30141
30195: POP
30196: POP
// end ;
30197: GO 28676
30199: POP
30200: POP
// result := Replace ( result , 4 , tmp ) ;
30201: LD_ADDR_VAR 0 5
30205: PUSH
30206: LD_VAR 0 5
30210: PPUSH
30211: LD_INT 4
30213: PPUSH
30214: LD_VAR 0 8
30218: PPUSH
30219: CALL_OW 1
30223: ST_TO_ADDR
// end ;
30224: LD_VAR 0 5
30228: RET
// export function DangerAtRange ( unit , range ) ; begin
30229: LD_INT 0
30231: PPUSH
// if not unit then
30232: LD_VAR 0 1
30236: NOT
30237: IFFALSE 30241
// exit ;
30239: GO 30286
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30241: LD_ADDR_VAR 0 3
30245: PUSH
30246: LD_VAR 0 1
30250: PPUSH
30251: CALL_OW 255
30255: PPUSH
30256: LD_VAR 0 1
30260: PPUSH
30261: CALL_OW 250
30265: PPUSH
30266: LD_VAR 0 1
30270: PPUSH
30271: CALL_OW 251
30275: PPUSH
30276: LD_VAR 0 2
30280: PPUSH
30281: CALL 28528 0 4
30285: ST_TO_ADDR
// end ;
30286: LD_VAR 0 3
30290: RET
// export function DangerInArea ( side , area ) ; begin
30291: LD_INT 0
30293: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30294: LD_ADDR_VAR 0 3
30298: PUSH
30299: LD_VAR 0 2
30303: PPUSH
30304: LD_INT 81
30306: PUSH
30307: LD_VAR 0 1
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PPUSH
30316: CALL_OW 70
30320: ST_TO_ADDR
// end ;
30321: LD_VAR 0 3
30325: RET
// export function IsExtension ( b ) ; begin
30326: LD_INT 0
30328: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30329: LD_ADDR_VAR 0 2
30333: PUSH
30334: LD_VAR 0 1
30338: PUSH
30339: LD_INT 23
30341: PUSH
30342: LD_INT 20
30344: PUSH
30345: LD_INT 22
30347: PUSH
30348: LD_INT 17
30350: PUSH
30351: LD_INT 24
30353: PUSH
30354: LD_INT 21
30356: PUSH
30357: LD_INT 19
30359: PUSH
30360: LD_INT 16
30362: PUSH
30363: LD_INT 25
30365: PUSH
30366: LD_INT 18
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: IN
30381: ST_TO_ADDR
// end ;
30382: LD_VAR 0 2
30386: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30387: LD_INT 0
30389: PPUSH
30390: PPUSH
30391: PPUSH
// result := [ ] ;
30392: LD_ADDR_VAR 0 4
30396: PUSH
30397: EMPTY
30398: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30399: LD_ADDR_VAR 0 5
30403: PUSH
30404: LD_VAR 0 2
30408: PPUSH
30409: LD_INT 21
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 70
30423: ST_TO_ADDR
// if not tmp then
30424: LD_VAR 0 5
30428: NOT
30429: IFFALSE 30433
// exit ;
30431: GO 30497
// if checkLink then
30433: LD_VAR 0 3
30437: IFFALSE 30487
// begin for i in tmp do
30439: LD_ADDR_VAR 0 6
30443: PUSH
30444: LD_VAR 0 5
30448: PUSH
30449: FOR_IN
30450: IFFALSE 30485
// if GetBase ( i ) <> base then
30452: LD_VAR 0 6
30456: PPUSH
30457: CALL_OW 274
30461: PUSH
30462: LD_VAR 0 1
30466: NONEQUAL
30467: IFFALSE 30483
// ComLinkToBase ( base , i ) ;
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_VAR 0 6
30478: PPUSH
30479: CALL_OW 169
30483: GO 30449
30485: POP
30486: POP
// end ; result := tmp ;
30487: LD_ADDR_VAR 0 4
30491: PUSH
30492: LD_VAR 0 5
30496: ST_TO_ADDR
// end ;
30497: LD_VAR 0 4
30501: RET
// export function ComComplete ( units , b ) ; var i ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
// if not units then
30506: LD_VAR 0 1
30510: NOT
30511: IFFALSE 30515
// exit ;
30513: GO 30605
// for i in units do
30515: LD_ADDR_VAR 0 4
30519: PUSH
30520: LD_VAR 0 1
30524: PUSH
30525: FOR_IN
30526: IFFALSE 30603
// if BuildingStatus ( b ) = bs_build then
30528: LD_VAR 0 2
30532: PPUSH
30533: CALL_OW 461
30537: PUSH
30538: LD_INT 1
30540: EQUAL
30541: IFFALSE 30601
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30543: LD_VAR 0 4
30547: PPUSH
30548: LD_STRING h
30550: PUSH
30551: LD_VAR 0 2
30555: PPUSH
30556: CALL_OW 250
30560: PUSH
30561: LD_VAR 0 2
30565: PPUSH
30566: CALL_OW 251
30570: PUSH
30571: LD_VAR 0 2
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: PUSH
30594: EMPTY
30595: LIST
30596: PPUSH
30597: CALL_OW 446
30601: GO 30525
30603: POP
30604: POP
// end ;
30605: LD_VAR 0 3
30609: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30610: LD_INT 0
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30618: LD_VAR 0 1
30622: NOT
30623: PUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 263
30633: PUSH
30634: LD_INT 2
30636: NONEQUAL
30637: OR
30638: IFFALSE 30642
// exit ;
30640: GO 30958
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30642: LD_ADDR_VAR 0 6
30646: PUSH
30647: LD_INT 22
30649: PUSH
30650: LD_VAR 0 1
30654: PPUSH
30655: CALL_OW 255
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 30
30669: PUSH
30670: LD_INT 36
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 34
30679: PUSH
30680: LD_INT 31
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PPUSH
30696: CALL_OW 69
30700: ST_TO_ADDR
// if not tmp then
30701: LD_VAR 0 6
30705: NOT
30706: IFFALSE 30710
// exit ;
30708: GO 30958
// result := [ ] ;
30710: LD_ADDR_VAR 0 2
30714: PUSH
30715: EMPTY
30716: ST_TO_ADDR
// for i in tmp do
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_VAR 0 6
30726: PUSH
30727: FOR_IN
30728: IFFALSE 30799
// begin t := UnitsInside ( i ) ;
30730: LD_ADDR_VAR 0 4
30734: PUSH
30735: LD_VAR 0 3
30739: PPUSH
30740: CALL_OW 313
30744: ST_TO_ADDR
// if t then
30745: LD_VAR 0 4
30749: IFFALSE 30797
// for j in t do
30751: LD_ADDR_VAR 0 7
30755: PUSH
30756: LD_VAR 0 4
30760: PUSH
30761: FOR_IN
30762: IFFALSE 30795
// result := Replace ( result , result + 1 , j ) ;
30764: LD_ADDR_VAR 0 2
30768: PUSH
30769: LD_VAR 0 2
30773: PPUSH
30774: LD_VAR 0 2
30778: PUSH
30779: LD_INT 1
30781: PLUS
30782: PPUSH
30783: LD_VAR 0 7
30787: PPUSH
30788: CALL_OW 1
30792: ST_TO_ADDR
30793: GO 30761
30795: POP
30796: POP
// end ;
30797: GO 30727
30799: POP
30800: POP
// if not result then
30801: LD_VAR 0 2
30805: NOT
30806: IFFALSE 30810
// exit ;
30808: GO 30958
// mech := result [ 1 ] ;
30810: LD_ADDR_VAR 0 5
30814: PUSH
30815: LD_VAR 0 2
30819: PUSH
30820: LD_INT 1
30822: ARRAY
30823: ST_TO_ADDR
// if result > 1 then
30824: LD_VAR 0 2
30828: PUSH
30829: LD_INT 1
30831: GREATER
30832: IFFALSE 30944
// begin for i = 2 to result do
30834: LD_ADDR_VAR 0 3
30838: PUSH
30839: DOUBLE
30840: LD_INT 2
30842: DEC
30843: ST_TO_ADDR
30844: LD_VAR 0 2
30848: PUSH
30849: FOR_TO
30850: IFFALSE 30942
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30852: LD_ADDR_VAR 0 4
30856: PUSH
30857: LD_VAR 0 2
30861: PUSH
30862: LD_VAR 0 3
30866: ARRAY
30867: PPUSH
30868: LD_INT 3
30870: PPUSH
30871: CALL_OW 259
30875: PUSH
30876: LD_VAR 0 2
30880: PUSH
30881: LD_VAR 0 3
30885: ARRAY
30886: PPUSH
30887: CALL_OW 432
30891: MINUS
30892: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30893: LD_VAR 0 4
30897: PUSH
30898: LD_VAR 0 5
30902: PPUSH
30903: LD_INT 3
30905: PPUSH
30906: CALL_OW 259
30910: PUSH
30911: LD_VAR 0 5
30915: PPUSH
30916: CALL_OW 432
30920: MINUS
30921: GREATEREQUAL
30922: IFFALSE 30940
// mech := result [ i ] ;
30924: LD_ADDR_VAR 0 5
30928: PUSH
30929: LD_VAR 0 2
30933: PUSH
30934: LD_VAR 0 3
30938: ARRAY
30939: ST_TO_ADDR
// end ;
30940: GO 30849
30942: POP
30943: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30944: LD_VAR 0 1
30948: PPUSH
30949: LD_VAR 0 5
30953: PPUSH
30954: CALL_OW 135
// end ;
30958: LD_VAR 0 2
30962: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30963: LD_INT 0
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
// result := [ ] ;
30978: LD_ADDR_VAR 0 7
30982: PUSH
30983: EMPTY
30984: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 266
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: IN
31005: NOT
31006: IFFALSE 31010
// exit ;
31008: GO 32644
// if name then
31010: LD_VAR 0 3
31014: IFFALSE 31030
// SetBName ( base_dep , name ) ;
31016: LD_VAR 0 1
31020: PPUSH
31021: LD_VAR 0 3
31025: PPUSH
31026: CALL_OW 500
// base := GetBase ( base_dep ) ;
31030: LD_ADDR_VAR 0 15
31034: PUSH
31035: LD_VAR 0 1
31039: PPUSH
31040: CALL_OW 274
31044: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31045: LD_ADDR_VAR 0 16
31049: PUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 255
31059: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31060: LD_ADDR_VAR 0 17
31064: PUSH
31065: LD_VAR 0 1
31069: PPUSH
31070: CALL_OW 248
31074: ST_TO_ADDR
// if sources then
31075: LD_VAR 0 5
31079: IFFALSE 31126
// for i = 1 to 3 do
31081: LD_ADDR_VAR 0 8
31085: PUSH
31086: DOUBLE
31087: LD_INT 1
31089: DEC
31090: ST_TO_ADDR
31091: LD_INT 3
31093: PUSH
31094: FOR_TO
31095: IFFALSE 31124
// AddResourceType ( base , i , sources [ i ] ) ;
31097: LD_VAR 0 15
31101: PPUSH
31102: LD_VAR 0 8
31106: PPUSH
31107: LD_VAR 0 5
31111: PUSH
31112: LD_VAR 0 8
31116: ARRAY
31117: PPUSH
31118: CALL_OW 276
31122: GO 31094
31124: POP
31125: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31126: LD_ADDR_VAR 0 18
31130: PUSH
31131: LD_VAR 0 15
31135: PPUSH
31136: LD_VAR 0 2
31140: PPUSH
31141: LD_INT 1
31143: PPUSH
31144: CALL 30387 0 3
31148: ST_TO_ADDR
// InitHc ;
31149: CALL_OW 19
// InitUc ;
31153: CALL_OW 18
// uc_side := side ;
31157: LD_ADDR_OWVAR 20
31161: PUSH
31162: LD_VAR 0 16
31166: ST_TO_ADDR
// uc_nation := nation ;
31167: LD_ADDR_OWVAR 21
31171: PUSH
31172: LD_VAR 0 17
31176: ST_TO_ADDR
// if buildings then
31177: LD_VAR 0 18
31181: IFFALSE 32503
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31183: LD_ADDR_VAR 0 19
31187: PUSH
31188: LD_VAR 0 18
31192: PPUSH
31193: LD_INT 2
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: LD_INT 29
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 30
31208: PUSH
31209: LD_INT 30
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 72
31225: ST_TO_ADDR
// if tmp then
31226: LD_VAR 0 19
31230: IFFALSE 31278
// for i in tmp do
31232: LD_ADDR_VAR 0 8
31236: PUSH
31237: LD_VAR 0 19
31241: PUSH
31242: FOR_IN
31243: IFFALSE 31276
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31245: LD_VAR 0 8
31249: PPUSH
31250: CALL_OW 250
31254: PPUSH
31255: LD_VAR 0 8
31259: PPUSH
31260: CALL_OW 251
31264: PPUSH
31265: LD_VAR 0 16
31269: PPUSH
31270: CALL_OW 441
31274: GO 31242
31276: POP
31277: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31278: LD_VAR 0 18
31282: PPUSH
31283: LD_INT 2
31285: PUSH
31286: LD_INT 30
31288: PUSH
31289: LD_INT 32
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 30
31298: PUSH
31299: LD_INT 33
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 72
31315: IFFALSE 31403
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31317: LD_ADDR_VAR 0 8
31321: PUSH
31322: LD_VAR 0 18
31326: PPUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 30
31332: PUSH
31333: LD_INT 32
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 30
31342: PUSH
31343: LD_INT 33
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: PPUSH
31355: CALL_OW 72
31359: PUSH
31360: FOR_IN
31361: IFFALSE 31401
// begin if not GetBWeapon ( i ) then
31363: LD_VAR 0 8
31367: PPUSH
31368: CALL_OW 269
31372: NOT
31373: IFFALSE 31399
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31375: LD_VAR 0 8
31379: PPUSH
31380: LD_VAR 0 8
31384: PPUSH
31385: LD_VAR 0 2
31389: PPUSH
31390: CALL 32649 0 2
31394: PPUSH
31395: CALL_OW 431
// end ;
31399: GO 31360
31401: POP
31402: POP
// end ; for i = 1 to personel do
31403: LD_ADDR_VAR 0 8
31407: PUSH
31408: DOUBLE
31409: LD_INT 1
31411: DEC
31412: ST_TO_ADDR
31413: LD_VAR 0 6
31417: PUSH
31418: FOR_TO
31419: IFFALSE 32483
// begin if i > 4 then
31421: LD_VAR 0 8
31425: PUSH
31426: LD_INT 4
31428: GREATER
31429: IFFALSE 31433
// break ;
31431: GO 32483
// case i of 1 :
31433: LD_VAR 0 8
31437: PUSH
31438: LD_INT 1
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31526
31446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31447: LD_ADDR_VAR 0 12
31451: PUSH
31452: LD_VAR 0 18
31456: PPUSH
31457: LD_INT 22
31459: PUSH
31460: LD_VAR 0 16
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 58
31471: PUSH
31472: EMPTY
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 30
31480: PUSH
31481: LD_INT 32
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 30
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 30
31500: PUSH
31501: LD_INT 5
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: PPUSH
31519: CALL_OW 72
31523: ST_TO_ADDR
31524: GO 31748
31526: LD_INT 2
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31534
31532: GO 31596
31534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31535: LD_ADDR_VAR 0 12
31539: PUSH
31540: LD_VAR 0 18
31544: PPUSH
31545: LD_INT 22
31547: PUSH
31548: LD_VAR 0 16
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 30
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 30
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PPUSH
31589: CALL_OW 72
31593: ST_TO_ADDR
31594: GO 31748
31596: LD_INT 3
31598: DOUBLE
31599: EQUAL
31600: IFTRUE 31604
31602: GO 31666
31604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31605: LD_ADDR_VAR 0 12
31609: PUSH
31610: LD_VAR 0 18
31614: PPUSH
31615: LD_INT 22
31617: PUSH
31618: LD_VAR 0 16
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 30
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 30
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PPUSH
31659: CALL_OW 72
31663: ST_TO_ADDR
31664: GO 31748
31666: LD_INT 4
31668: DOUBLE
31669: EQUAL
31670: IFTRUE 31674
31672: GO 31747
31674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31675: LD_ADDR_VAR 0 12
31679: PUSH
31680: LD_VAR 0 18
31684: PPUSH
31685: LD_INT 22
31687: PUSH
31688: LD_VAR 0 16
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: LD_INT 30
31702: PUSH
31703: LD_INT 6
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 30
31712: PUSH
31713: LD_INT 7
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 30
31722: PUSH
31723: LD_INT 8
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PPUSH
31740: CALL_OW 72
31744: ST_TO_ADDR
31745: GO 31748
31747: POP
// if i = 1 then
31748: LD_VAR 0 8
31752: PUSH
31753: LD_INT 1
31755: EQUAL
31756: IFFALSE 31867
// begin tmp := [ ] ;
31758: LD_ADDR_VAR 0 19
31762: PUSH
31763: EMPTY
31764: ST_TO_ADDR
// for j in f do
31765: LD_ADDR_VAR 0 9
31769: PUSH
31770: LD_VAR 0 12
31774: PUSH
31775: FOR_IN
31776: IFFALSE 31849
// if GetBType ( j ) = b_bunker then
31778: LD_VAR 0 9
31782: PPUSH
31783: CALL_OW 266
31787: PUSH
31788: LD_INT 32
31790: EQUAL
31791: IFFALSE 31818
// tmp := Insert ( tmp , 1 , j ) else
31793: LD_ADDR_VAR 0 19
31797: PUSH
31798: LD_VAR 0 19
31802: PPUSH
31803: LD_INT 1
31805: PPUSH
31806: LD_VAR 0 9
31810: PPUSH
31811: CALL_OW 2
31815: ST_TO_ADDR
31816: GO 31847
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31818: LD_ADDR_VAR 0 19
31822: PUSH
31823: LD_VAR 0 19
31827: PPUSH
31828: LD_VAR 0 19
31832: PUSH
31833: LD_INT 1
31835: PLUS
31836: PPUSH
31837: LD_VAR 0 9
31841: PPUSH
31842: CALL_OW 2
31846: ST_TO_ADDR
31847: GO 31775
31849: POP
31850: POP
// if tmp then
31851: LD_VAR 0 19
31855: IFFALSE 31867
// f := tmp ;
31857: LD_ADDR_VAR 0 12
31861: PUSH
31862: LD_VAR 0 19
31866: ST_TO_ADDR
// end ; x := personel [ i ] ;
31867: LD_ADDR_VAR 0 13
31871: PUSH
31872: LD_VAR 0 6
31876: PUSH
31877: LD_VAR 0 8
31881: ARRAY
31882: ST_TO_ADDR
// if x = - 1 then
31883: LD_VAR 0 13
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: EQUAL
31892: IFFALSE 32101
// begin for j in f do
31894: LD_ADDR_VAR 0 9
31898: PUSH
31899: LD_VAR 0 12
31903: PUSH
31904: FOR_IN
31905: IFFALSE 32097
// repeat InitHc ;
31907: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31911: LD_VAR 0 9
31915: PPUSH
31916: CALL_OW 266
31920: PUSH
31921: LD_INT 5
31923: EQUAL
31924: IFFALSE 31994
// begin if UnitsInside ( j ) < 3 then
31926: LD_VAR 0 9
31930: PPUSH
31931: CALL_OW 313
31935: PUSH
31936: LD_INT 3
31938: LESS
31939: IFFALSE 31975
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31941: LD_INT 0
31943: PPUSH
31944: LD_INT 5
31946: PUSH
31947: LD_INT 8
31949: PUSH
31950: LD_INT 9
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: PUSH
31958: LD_VAR 0 17
31962: ARRAY
31963: PPUSH
31964: LD_VAR 0 4
31968: PPUSH
31969: CALL_OW 380
31973: GO 31992
// PrepareHuman ( false , i , skill ) ;
31975: LD_INT 0
31977: PPUSH
31978: LD_VAR 0 8
31982: PPUSH
31983: LD_VAR 0 4
31987: PPUSH
31988: CALL_OW 380
// end else
31992: GO 32011
// PrepareHuman ( false , i , skill ) ;
31994: LD_INT 0
31996: PPUSH
31997: LD_VAR 0 8
32001: PPUSH
32002: LD_VAR 0 4
32006: PPUSH
32007: CALL_OW 380
// un := CreateHuman ;
32011: LD_ADDR_VAR 0 14
32015: PUSH
32016: CALL_OW 44
32020: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32021: LD_ADDR_VAR 0 7
32025: PUSH
32026: LD_VAR 0 7
32030: PPUSH
32031: LD_INT 1
32033: PPUSH
32034: LD_VAR 0 14
32038: PPUSH
32039: CALL_OW 2
32043: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32044: LD_VAR 0 14
32048: PPUSH
32049: LD_VAR 0 9
32053: PPUSH
32054: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32058: LD_VAR 0 9
32062: PPUSH
32063: CALL_OW 313
32067: PUSH
32068: LD_INT 6
32070: EQUAL
32071: PUSH
32072: LD_VAR 0 9
32076: PPUSH
32077: CALL_OW 266
32081: PUSH
32082: LD_INT 32
32084: PUSH
32085: LD_INT 31
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: IN
32092: OR
32093: IFFALSE 31907
32095: GO 31904
32097: POP
32098: POP
// end else
32099: GO 32481
// for j = 1 to x do
32101: LD_ADDR_VAR 0 9
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_VAR 0 13
32115: PUSH
32116: FOR_TO
32117: IFFALSE 32479
// begin InitHc ;
32119: CALL_OW 19
// if not f then
32123: LD_VAR 0 12
32127: NOT
32128: IFFALSE 32217
// begin PrepareHuman ( false , i , skill ) ;
32130: LD_INT 0
32132: PPUSH
32133: LD_VAR 0 8
32137: PPUSH
32138: LD_VAR 0 4
32142: PPUSH
32143: CALL_OW 380
// un := CreateHuman ;
32147: LD_ADDR_VAR 0 14
32151: PUSH
32152: CALL_OW 44
32156: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32157: LD_ADDR_VAR 0 7
32161: PUSH
32162: LD_VAR 0 7
32166: PPUSH
32167: LD_INT 1
32169: PPUSH
32170: LD_VAR 0 14
32174: PPUSH
32175: CALL_OW 2
32179: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32180: LD_VAR 0 14
32184: PPUSH
32185: LD_VAR 0 1
32189: PPUSH
32190: CALL_OW 250
32194: PPUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 251
32204: PPUSH
32205: LD_INT 10
32207: PPUSH
32208: LD_INT 0
32210: PPUSH
32211: CALL_OW 50
// continue ;
32215: GO 32116
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32217: LD_VAR 0 12
32221: PUSH
32222: LD_INT 1
32224: ARRAY
32225: PPUSH
32226: CALL_OW 313
32230: PUSH
32231: LD_VAR 0 12
32235: PUSH
32236: LD_INT 1
32238: ARRAY
32239: PPUSH
32240: CALL_OW 266
32244: PUSH
32245: LD_INT 32
32247: PUSH
32248: LD_INT 31
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: IN
32255: AND
32256: PUSH
32257: LD_VAR 0 12
32261: PUSH
32262: LD_INT 1
32264: ARRAY
32265: PPUSH
32266: CALL_OW 313
32270: PUSH
32271: LD_INT 6
32273: EQUAL
32274: OR
32275: IFFALSE 32295
// f := Delete ( f , 1 ) ;
32277: LD_ADDR_VAR 0 12
32281: PUSH
32282: LD_VAR 0 12
32286: PPUSH
32287: LD_INT 1
32289: PPUSH
32290: CALL_OW 3
32294: ST_TO_ADDR
// if not f then
32295: LD_VAR 0 12
32299: NOT
32300: IFFALSE 32318
// begin x := x + 2 ;
32302: LD_ADDR_VAR 0 13
32306: PUSH
32307: LD_VAR 0 13
32311: PUSH
32312: LD_INT 2
32314: PLUS
32315: ST_TO_ADDR
// continue ;
32316: GO 32116
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32318: LD_VAR 0 12
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: CALL_OW 266
32331: PUSH
32332: LD_INT 5
32334: EQUAL
32335: IFFALSE 32409
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32337: LD_VAR 0 12
32341: PUSH
32342: LD_INT 1
32344: ARRAY
32345: PPUSH
32346: CALL_OW 313
32350: PUSH
32351: LD_INT 3
32353: LESS
32354: IFFALSE 32390
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32356: LD_INT 0
32358: PPUSH
32359: LD_INT 5
32361: PUSH
32362: LD_INT 8
32364: PUSH
32365: LD_INT 9
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: PUSH
32373: LD_VAR 0 17
32377: ARRAY
32378: PPUSH
32379: LD_VAR 0 4
32383: PPUSH
32384: CALL_OW 380
32388: GO 32407
// PrepareHuman ( false , i , skill ) ;
32390: LD_INT 0
32392: PPUSH
32393: LD_VAR 0 8
32397: PPUSH
32398: LD_VAR 0 4
32402: PPUSH
32403: CALL_OW 380
// end else
32407: GO 32426
// PrepareHuman ( false , i , skill ) ;
32409: LD_INT 0
32411: PPUSH
32412: LD_VAR 0 8
32416: PPUSH
32417: LD_VAR 0 4
32421: PPUSH
32422: CALL_OW 380
// un := CreateHuman ;
32426: LD_ADDR_VAR 0 14
32430: PUSH
32431: CALL_OW 44
32435: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32436: LD_ADDR_VAR 0 7
32440: PUSH
32441: LD_VAR 0 7
32445: PPUSH
32446: LD_INT 1
32448: PPUSH
32449: LD_VAR 0 14
32453: PPUSH
32454: CALL_OW 2
32458: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32459: LD_VAR 0 14
32463: PPUSH
32464: LD_VAR 0 12
32468: PUSH
32469: LD_INT 1
32471: ARRAY
32472: PPUSH
32473: CALL_OW 52
// end ;
32477: GO 32116
32479: POP
32480: POP
// end ;
32481: GO 31418
32483: POP
32484: POP
// result := result ^ buildings ;
32485: LD_ADDR_VAR 0 7
32489: PUSH
32490: LD_VAR 0 7
32494: PUSH
32495: LD_VAR 0 18
32499: ADD
32500: ST_TO_ADDR
// end else
32501: GO 32644
// begin for i = 1 to personel do
32503: LD_ADDR_VAR 0 8
32507: PUSH
32508: DOUBLE
32509: LD_INT 1
32511: DEC
32512: ST_TO_ADDR
32513: LD_VAR 0 6
32517: PUSH
32518: FOR_TO
32519: IFFALSE 32642
// begin if i > 4 then
32521: LD_VAR 0 8
32525: PUSH
32526: LD_INT 4
32528: GREATER
32529: IFFALSE 32533
// break ;
32531: GO 32642
// x := personel [ i ] ;
32533: LD_ADDR_VAR 0 13
32537: PUSH
32538: LD_VAR 0 6
32542: PUSH
32543: LD_VAR 0 8
32547: ARRAY
32548: ST_TO_ADDR
// if x = - 1 then
32549: LD_VAR 0 13
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: EQUAL
32558: IFFALSE 32562
// continue ;
32560: GO 32518
// PrepareHuman ( false , i , skill ) ;
32562: LD_INT 0
32564: PPUSH
32565: LD_VAR 0 8
32569: PPUSH
32570: LD_VAR 0 4
32574: PPUSH
32575: CALL_OW 380
// un := CreateHuman ;
32579: LD_ADDR_VAR 0 14
32583: PUSH
32584: CALL_OW 44
32588: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32589: LD_VAR 0 14
32593: PPUSH
32594: LD_VAR 0 1
32598: PPUSH
32599: CALL_OW 250
32603: PPUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: CALL_OW 251
32613: PPUSH
32614: LD_INT 10
32616: PPUSH
32617: LD_INT 0
32619: PPUSH
32620: CALL_OW 50
// result := result ^ un ;
32624: LD_ADDR_VAR 0 7
32628: PUSH
32629: LD_VAR 0 7
32633: PUSH
32634: LD_VAR 0 14
32638: ADD
32639: ST_TO_ADDR
// end ;
32640: GO 32518
32642: POP
32643: POP
// end ; end ;
32644: LD_VAR 0 7
32648: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32649: LD_INT 0
32651: PPUSH
32652: PPUSH
32653: PPUSH
32654: PPUSH
32655: PPUSH
32656: PPUSH
32657: PPUSH
32658: PPUSH
32659: PPUSH
32660: PPUSH
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
32666: PPUSH
// result := false ;
32667: LD_ADDR_VAR 0 3
32671: PUSH
32672: LD_INT 0
32674: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32675: LD_VAR 0 1
32679: NOT
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 266
32690: PUSH
32691: LD_INT 32
32693: PUSH
32694: LD_INT 33
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: IN
32701: NOT
32702: OR
32703: IFFALSE 32707
// exit ;
32705: GO 33816
// nat := GetNation ( tower ) ;
32707: LD_ADDR_VAR 0 12
32711: PUSH
32712: LD_VAR 0 1
32716: PPUSH
32717: CALL_OW 248
32721: ST_TO_ADDR
// side := GetSide ( tower ) ;
32722: LD_ADDR_VAR 0 16
32726: PUSH
32727: LD_VAR 0 1
32731: PPUSH
32732: CALL_OW 255
32736: ST_TO_ADDR
// x := GetX ( tower ) ;
32737: LD_ADDR_VAR 0 10
32741: PUSH
32742: LD_VAR 0 1
32746: PPUSH
32747: CALL_OW 250
32751: ST_TO_ADDR
// y := GetY ( tower ) ;
32752: LD_ADDR_VAR 0 11
32756: PUSH
32757: LD_VAR 0 1
32761: PPUSH
32762: CALL_OW 251
32766: ST_TO_ADDR
// if not x or not y then
32767: LD_VAR 0 10
32771: NOT
32772: PUSH
32773: LD_VAR 0 11
32777: NOT
32778: OR
32779: IFFALSE 32783
// exit ;
32781: GO 33816
// weapon := 0 ;
32783: LD_ADDR_VAR 0 18
32787: PUSH
32788: LD_INT 0
32790: ST_TO_ADDR
// fac_list := [ ] ;
32791: LD_ADDR_VAR 0 17
32795: PUSH
32796: EMPTY
32797: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32798: LD_ADDR_VAR 0 6
32802: PUSH
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL_OW 274
32812: PPUSH
32813: LD_VAR 0 2
32817: PPUSH
32818: LD_INT 0
32820: PPUSH
32821: CALL 30387 0 3
32825: PPUSH
32826: LD_INT 30
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PPUSH
32836: CALL_OW 72
32840: ST_TO_ADDR
// if not factories then
32841: LD_VAR 0 6
32845: NOT
32846: IFFALSE 32850
// exit ;
32848: GO 33816
// for i in factories do
32850: LD_ADDR_VAR 0 8
32854: PUSH
32855: LD_VAR 0 6
32859: PUSH
32860: FOR_IN
32861: IFFALSE 32886
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32863: LD_ADDR_VAR 0 17
32867: PUSH
32868: LD_VAR 0 17
32872: PUSH
32873: LD_VAR 0 8
32877: PPUSH
32878: CALL_OW 478
32882: UNION
32883: ST_TO_ADDR
32884: GO 32860
32886: POP
32887: POP
// if not fac_list then
32888: LD_VAR 0 17
32892: NOT
32893: IFFALSE 32897
// exit ;
32895: GO 33816
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32897: LD_ADDR_VAR 0 5
32901: PUSH
32902: LD_INT 4
32904: PUSH
32905: LD_INT 5
32907: PUSH
32908: LD_INT 9
32910: PUSH
32911: LD_INT 10
32913: PUSH
32914: LD_INT 6
32916: PUSH
32917: LD_INT 7
32919: PUSH
32920: LD_INT 11
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 27
32934: PUSH
32935: LD_INT 28
32937: PUSH
32938: LD_INT 26
32940: PUSH
32941: LD_INT 30
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 43
32952: PUSH
32953: LD_INT 44
32955: PUSH
32956: LD_INT 46
32958: PUSH
32959: LD_INT 45
32961: PUSH
32962: LD_INT 47
32964: PUSH
32965: LD_INT 49
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: PUSH
32981: LD_VAR 0 12
32985: ARRAY
32986: ST_TO_ADDR
// list := list isect fac_list ;
32987: LD_ADDR_VAR 0 5
32991: PUSH
32992: LD_VAR 0 5
32996: PUSH
32997: LD_VAR 0 17
33001: ISECT
33002: ST_TO_ADDR
// if not list then
33003: LD_VAR 0 5
33007: NOT
33008: IFFALSE 33012
// exit ;
33010: GO 33816
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33012: LD_VAR 0 12
33016: PUSH
33017: LD_INT 3
33019: EQUAL
33020: PUSH
33021: LD_INT 49
33023: PUSH
33024: LD_VAR 0 5
33028: IN
33029: AND
33030: PUSH
33031: LD_INT 31
33033: PPUSH
33034: LD_VAR 0 16
33038: PPUSH
33039: CALL_OW 321
33043: PUSH
33044: LD_INT 2
33046: EQUAL
33047: AND
33048: IFFALSE 33108
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33050: LD_INT 22
33052: PUSH
33053: LD_VAR 0 16
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 35
33064: PUSH
33065: LD_INT 49
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 91
33074: PUSH
33075: LD_VAR 0 1
33079: PUSH
33080: LD_INT 10
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: LIST
33092: PPUSH
33093: CALL_OW 69
33097: NOT
33098: IFFALSE 33108
// weapon := ru_time_lapser ;
33100: LD_ADDR_VAR 0 18
33104: PUSH
33105: LD_INT 49
33107: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33108: LD_VAR 0 12
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: IN
33123: PUSH
33124: LD_INT 11
33126: PUSH
33127: LD_VAR 0 5
33131: IN
33132: PUSH
33133: LD_INT 30
33135: PUSH
33136: LD_VAR 0 5
33140: IN
33141: OR
33142: AND
33143: PUSH
33144: LD_INT 6
33146: PPUSH
33147: LD_VAR 0 16
33151: PPUSH
33152: CALL_OW 321
33156: PUSH
33157: LD_INT 2
33159: EQUAL
33160: AND
33161: IFFALSE 33326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33163: LD_INT 22
33165: PUSH
33166: LD_VAR 0 16
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 35
33180: PUSH
33181: LD_INT 11
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 35
33190: PUSH
33191: LD_INT 30
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 91
33205: PUSH
33206: LD_VAR 0 1
33210: PUSH
33211: LD_INT 18
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: LIST
33223: PPUSH
33224: CALL_OW 69
33228: NOT
33229: PUSH
33230: LD_INT 22
33232: PUSH
33233: LD_VAR 0 16
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: PUSH
33245: LD_INT 30
33247: PUSH
33248: LD_INT 32
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 30
33257: PUSH
33258: LD_INT 33
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 91
33272: PUSH
33273: LD_VAR 0 1
33277: PUSH
33278: LD_INT 12
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: PPUSH
33294: CALL_OW 69
33298: PUSH
33299: LD_INT 2
33301: GREATER
33302: AND
33303: IFFALSE 33326
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33305: LD_ADDR_VAR 0 18
33309: PUSH
33310: LD_INT 11
33312: PUSH
33313: LD_INT 30
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_VAR 0 12
33324: ARRAY
33325: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33326: LD_VAR 0 18
33330: NOT
33331: PUSH
33332: LD_INT 40
33334: PPUSH
33335: LD_VAR 0 16
33339: PPUSH
33340: CALL_OW 321
33344: PUSH
33345: LD_INT 2
33347: EQUAL
33348: AND
33349: PUSH
33350: LD_INT 7
33352: PUSH
33353: LD_VAR 0 5
33357: IN
33358: PUSH
33359: LD_INT 28
33361: PUSH
33362: LD_VAR 0 5
33366: IN
33367: OR
33368: PUSH
33369: LD_INT 45
33371: PUSH
33372: LD_VAR 0 5
33376: IN
33377: OR
33378: AND
33379: IFFALSE 33633
// begin hex := GetHexInfo ( x , y ) ;
33381: LD_ADDR_VAR 0 4
33385: PUSH
33386: LD_VAR 0 10
33390: PPUSH
33391: LD_VAR 0 11
33395: PPUSH
33396: CALL_OW 546
33400: ST_TO_ADDR
// if hex [ 1 ] then
33401: LD_VAR 0 4
33405: PUSH
33406: LD_INT 1
33408: ARRAY
33409: IFFALSE 33413
// exit ;
33411: GO 33816
// height := hex [ 2 ] ;
33413: LD_ADDR_VAR 0 15
33417: PUSH
33418: LD_VAR 0 4
33422: PUSH
33423: LD_INT 2
33425: ARRAY
33426: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33427: LD_ADDR_VAR 0 14
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 5
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
// for i in tmp do
33450: LD_ADDR_VAR 0 8
33454: PUSH
33455: LD_VAR 0 14
33459: PUSH
33460: FOR_IN
33461: IFFALSE 33631
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33463: LD_ADDR_VAR 0 9
33467: PUSH
33468: LD_VAR 0 10
33472: PPUSH
33473: LD_VAR 0 8
33477: PPUSH
33478: LD_INT 5
33480: PPUSH
33481: CALL_OW 272
33485: PUSH
33486: LD_VAR 0 11
33490: PPUSH
33491: LD_VAR 0 8
33495: PPUSH
33496: LD_INT 5
33498: PPUSH
33499: CALL_OW 273
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33508: LD_VAR 0 9
33512: PUSH
33513: LD_INT 1
33515: ARRAY
33516: PPUSH
33517: LD_VAR 0 9
33521: PUSH
33522: LD_INT 2
33524: ARRAY
33525: PPUSH
33526: CALL_OW 488
33530: IFFALSE 33629
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33532: LD_ADDR_VAR 0 4
33536: PUSH
33537: LD_VAR 0 9
33541: PUSH
33542: LD_INT 1
33544: ARRAY
33545: PPUSH
33546: LD_VAR 0 9
33550: PUSH
33551: LD_INT 2
33553: ARRAY
33554: PPUSH
33555: CALL_OW 546
33559: ST_TO_ADDR
// if hex [ 1 ] then
33560: LD_VAR 0 4
33564: PUSH
33565: LD_INT 1
33567: ARRAY
33568: IFFALSE 33572
// continue ;
33570: GO 33460
// h := hex [ 2 ] ;
33572: LD_ADDR_VAR 0 13
33576: PUSH
33577: LD_VAR 0 4
33581: PUSH
33582: LD_INT 2
33584: ARRAY
33585: ST_TO_ADDR
// if h + 7 < height then
33586: LD_VAR 0 13
33590: PUSH
33591: LD_INT 7
33593: PLUS
33594: PUSH
33595: LD_VAR 0 15
33599: LESS
33600: IFFALSE 33629
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33602: LD_ADDR_VAR 0 18
33606: PUSH
33607: LD_INT 7
33609: PUSH
33610: LD_INT 28
33612: PUSH
33613: LD_INT 45
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: PUSH
33621: LD_VAR 0 12
33625: ARRAY
33626: ST_TO_ADDR
// break ;
33627: GO 33631
// end ; end ; end ;
33629: GO 33460
33631: POP
33632: POP
// end ; if not weapon then
33633: LD_VAR 0 18
33637: NOT
33638: IFFALSE 33698
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33640: LD_ADDR_VAR 0 5
33644: PUSH
33645: LD_VAR 0 5
33649: PUSH
33650: LD_INT 11
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: LD_INT 49
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: DIFF
33664: ST_TO_ADDR
// if not list then
33665: LD_VAR 0 5
33669: NOT
33670: IFFALSE 33674
// exit ;
33672: GO 33816
// weapon := list [ rand ( 1 , list ) ] ;
33674: LD_ADDR_VAR 0 18
33678: PUSH
33679: LD_VAR 0 5
33683: PUSH
33684: LD_INT 1
33686: PPUSH
33687: LD_VAR 0 5
33691: PPUSH
33692: CALL_OW 12
33696: ARRAY
33697: ST_TO_ADDR
// end ; if weapon then
33698: LD_VAR 0 18
33702: IFFALSE 33816
// begin tmp := CostOfWeapon ( weapon ) ;
33704: LD_ADDR_VAR 0 14
33708: PUSH
33709: LD_VAR 0 18
33713: PPUSH
33714: CALL_OW 451
33718: ST_TO_ADDR
// j := GetBase ( tower ) ;
33719: LD_ADDR_VAR 0 9
33723: PUSH
33724: LD_VAR 0 1
33728: PPUSH
33729: CALL_OW 274
33733: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33734: LD_VAR 0 9
33738: PPUSH
33739: LD_INT 1
33741: PPUSH
33742: CALL_OW 275
33746: PUSH
33747: LD_VAR 0 14
33751: PUSH
33752: LD_INT 1
33754: ARRAY
33755: GREATEREQUAL
33756: PUSH
33757: LD_VAR 0 9
33761: PPUSH
33762: LD_INT 2
33764: PPUSH
33765: CALL_OW 275
33769: PUSH
33770: LD_VAR 0 14
33774: PUSH
33775: LD_INT 2
33777: ARRAY
33778: GREATEREQUAL
33779: AND
33780: PUSH
33781: LD_VAR 0 9
33785: PPUSH
33786: LD_INT 3
33788: PPUSH
33789: CALL_OW 275
33793: PUSH
33794: LD_VAR 0 14
33798: PUSH
33799: LD_INT 3
33801: ARRAY
33802: GREATEREQUAL
33803: AND
33804: IFFALSE 33816
// result := weapon ;
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_VAR 0 18
33815: ST_TO_ADDR
// end ; end ;
33816: LD_VAR 0 3
33820: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33821: LD_INT 0
33823: PPUSH
33824: PPUSH
// result := true ;
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 1
33832: ST_TO_ADDR
// if array1 = array2 then
33833: LD_VAR 0 1
33837: PUSH
33838: LD_VAR 0 2
33842: EQUAL
33843: IFFALSE 33903
// begin for i = 1 to array1 do
33845: LD_ADDR_VAR 0 4
33849: PUSH
33850: DOUBLE
33851: LD_INT 1
33853: DEC
33854: ST_TO_ADDR
33855: LD_VAR 0 1
33859: PUSH
33860: FOR_TO
33861: IFFALSE 33899
// if array1 [ i ] <> array2 [ i ] then
33863: LD_VAR 0 1
33867: PUSH
33868: LD_VAR 0 4
33872: ARRAY
33873: PUSH
33874: LD_VAR 0 2
33878: PUSH
33879: LD_VAR 0 4
33883: ARRAY
33884: NONEQUAL
33885: IFFALSE 33897
// begin result := false ;
33887: LD_ADDR_VAR 0 3
33891: PUSH
33892: LD_INT 0
33894: ST_TO_ADDR
// break ;
33895: GO 33899
// end ;
33897: GO 33860
33899: POP
33900: POP
// end else
33901: GO 33911
// result := false ;
33903: LD_ADDR_VAR 0 3
33907: PUSH
33908: LD_INT 0
33910: ST_TO_ADDR
// end ;
33911: LD_VAR 0 3
33915: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33916: LD_INT 0
33918: PPUSH
33919: PPUSH
// if not array1 or not array2 then
33920: LD_VAR 0 1
33924: NOT
33925: PUSH
33926: LD_VAR 0 2
33930: NOT
33931: OR
33932: IFFALSE 33936
// exit ;
33934: GO 34000
// result := true ;
33936: LD_ADDR_VAR 0 3
33940: PUSH
33941: LD_INT 1
33943: ST_TO_ADDR
// for i = 1 to array1 do
33944: LD_ADDR_VAR 0 4
33948: PUSH
33949: DOUBLE
33950: LD_INT 1
33952: DEC
33953: ST_TO_ADDR
33954: LD_VAR 0 1
33958: PUSH
33959: FOR_TO
33960: IFFALSE 33998
// if array1 [ i ] <> array2 [ i ] then
33962: LD_VAR 0 1
33966: PUSH
33967: LD_VAR 0 4
33971: ARRAY
33972: PUSH
33973: LD_VAR 0 2
33977: PUSH
33978: LD_VAR 0 4
33982: ARRAY
33983: NONEQUAL
33984: IFFALSE 33996
// begin result := false ;
33986: LD_ADDR_VAR 0 3
33990: PUSH
33991: LD_INT 0
33993: ST_TO_ADDR
// break ;
33994: GO 33998
// end ;
33996: GO 33959
33998: POP
33999: POP
// end ;
34000: LD_VAR 0 3
34004: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34005: LD_INT 0
34007: PPUSH
34008: PPUSH
34009: PPUSH
// pom := GetBase ( fac ) ;
34010: LD_ADDR_VAR 0 5
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 274
34024: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34025: LD_ADDR_VAR 0 4
34029: PUSH
34030: LD_VAR 0 2
34034: PUSH
34035: LD_INT 1
34037: ARRAY
34038: PPUSH
34039: LD_VAR 0 2
34043: PUSH
34044: LD_INT 2
34046: ARRAY
34047: PPUSH
34048: LD_VAR 0 2
34052: PUSH
34053: LD_INT 3
34055: ARRAY
34056: PPUSH
34057: LD_VAR 0 2
34061: PUSH
34062: LD_INT 4
34064: ARRAY
34065: PPUSH
34066: CALL_OW 449
34070: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_VAR 0 5
34080: PPUSH
34081: LD_INT 1
34083: PPUSH
34084: CALL_OW 275
34088: PUSH
34089: LD_VAR 0 4
34093: PUSH
34094: LD_INT 1
34096: ARRAY
34097: GREATEREQUAL
34098: PUSH
34099: LD_VAR 0 5
34103: PPUSH
34104: LD_INT 2
34106: PPUSH
34107: CALL_OW 275
34111: PUSH
34112: LD_VAR 0 4
34116: PUSH
34117: LD_INT 2
34119: ARRAY
34120: GREATEREQUAL
34121: AND
34122: PUSH
34123: LD_VAR 0 5
34127: PPUSH
34128: LD_INT 3
34130: PPUSH
34131: CALL_OW 275
34135: PUSH
34136: LD_VAR 0 4
34140: PUSH
34141: LD_INT 3
34143: ARRAY
34144: GREATEREQUAL
34145: AND
34146: ST_TO_ADDR
// end ;
34147: LD_VAR 0 3
34151: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34152: LD_INT 0
34154: PPUSH
34155: PPUSH
34156: PPUSH
34157: PPUSH
// pom := GetBase ( building ) ;
34158: LD_ADDR_VAR 0 3
34162: PUSH
34163: LD_VAR 0 1
34167: PPUSH
34168: CALL_OW 274
34172: ST_TO_ADDR
// if not pom then
34173: LD_VAR 0 3
34177: NOT
34178: IFFALSE 34182
// exit ;
34180: GO 34352
// btype := GetBType ( building ) ;
34182: LD_ADDR_VAR 0 5
34186: PUSH
34187: LD_VAR 0 1
34191: PPUSH
34192: CALL_OW 266
34196: ST_TO_ADDR
// if btype = b_armoury then
34197: LD_VAR 0 5
34201: PUSH
34202: LD_INT 4
34204: EQUAL
34205: IFFALSE 34215
// btype := b_barracks ;
34207: LD_ADDR_VAR 0 5
34211: PUSH
34212: LD_INT 5
34214: ST_TO_ADDR
// if btype = b_depot then
34215: LD_VAR 0 5
34219: PUSH
34220: LD_INT 0
34222: EQUAL
34223: IFFALSE 34233
// btype := b_warehouse ;
34225: LD_ADDR_VAR 0 5
34229: PUSH
34230: LD_INT 1
34232: ST_TO_ADDR
// if btype = b_workshop then
34233: LD_VAR 0 5
34237: PUSH
34238: LD_INT 2
34240: EQUAL
34241: IFFALSE 34251
// btype := b_factory ;
34243: LD_ADDR_VAR 0 5
34247: PUSH
34248: LD_INT 3
34250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34251: LD_ADDR_VAR 0 4
34255: PUSH
34256: LD_VAR 0 5
34260: PPUSH
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 248
34270: PPUSH
34271: CALL_OW 450
34275: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34276: LD_ADDR_VAR 0 2
34280: PUSH
34281: LD_VAR 0 3
34285: PPUSH
34286: LD_INT 1
34288: PPUSH
34289: CALL_OW 275
34293: PUSH
34294: LD_VAR 0 4
34298: PUSH
34299: LD_INT 1
34301: ARRAY
34302: GREATEREQUAL
34303: PUSH
34304: LD_VAR 0 3
34308: PPUSH
34309: LD_INT 2
34311: PPUSH
34312: CALL_OW 275
34316: PUSH
34317: LD_VAR 0 4
34321: PUSH
34322: LD_INT 2
34324: ARRAY
34325: GREATEREQUAL
34326: AND
34327: PUSH
34328: LD_VAR 0 3
34332: PPUSH
34333: LD_INT 3
34335: PPUSH
34336: CALL_OW 275
34340: PUSH
34341: LD_VAR 0 4
34345: PUSH
34346: LD_INT 3
34348: ARRAY
34349: GREATEREQUAL
34350: AND
34351: ST_TO_ADDR
// end ;
34352: LD_VAR 0 2
34356: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34357: LD_INT 0
34359: PPUSH
34360: PPUSH
34361: PPUSH
// pom := GetBase ( building ) ;
34362: LD_ADDR_VAR 0 4
34366: PUSH
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 274
34376: ST_TO_ADDR
// if not pom then
34377: LD_VAR 0 4
34381: NOT
34382: IFFALSE 34386
// exit ;
34384: GO 34487
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34386: LD_ADDR_VAR 0 5
34390: PUSH
34391: LD_VAR 0 2
34395: PPUSH
34396: LD_VAR 0 1
34400: PPUSH
34401: CALL_OW 248
34405: PPUSH
34406: CALL_OW 450
34410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34411: LD_ADDR_VAR 0 3
34415: PUSH
34416: LD_VAR 0 4
34420: PPUSH
34421: LD_INT 1
34423: PPUSH
34424: CALL_OW 275
34428: PUSH
34429: LD_VAR 0 5
34433: PUSH
34434: LD_INT 1
34436: ARRAY
34437: GREATEREQUAL
34438: PUSH
34439: LD_VAR 0 4
34443: PPUSH
34444: LD_INT 2
34446: PPUSH
34447: CALL_OW 275
34451: PUSH
34452: LD_VAR 0 5
34456: PUSH
34457: LD_INT 2
34459: ARRAY
34460: GREATEREQUAL
34461: AND
34462: PUSH
34463: LD_VAR 0 4
34467: PPUSH
34468: LD_INT 3
34470: PPUSH
34471: CALL_OW 275
34475: PUSH
34476: LD_VAR 0 5
34480: PUSH
34481: LD_INT 3
34483: ARRAY
34484: GREATEREQUAL
34485: AND
34486: ST_TO_ADDR
// end ;
34487: LD_VAR 0 3
34491: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34492: LD_INT 0
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
// result := false ;
34505: LD_ADDR_VAR 0 8
34509: PUSH
34510: LD_INT 0
34512: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34513: LD_VAR 0 5
34517: NOT
34518: PUSH
34519: LD_VAR 0 1
34523: NOT
34524: OR
34525: PUSH
34526: LD_VAR 0 2
34530: NOT
34531: OR
34532: PUSH
34533: LD_VAR 0 3
34537: NOT
34538: OR
34539: IFFALSE 34543
// exit ;
34541: GO 35357
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34543: LD_ADDR_VAR 0 14
34547: PUSH
34548: LD_VAR 0 1
34552: PPUSH
34553: LD_VAR 0 2
34557: PPUSH
34558: LD_VAR 0 3
34562: PPUSH
34563: LD_VAR 0 4
34567: PPUSH
34568: LD_VAR 0 5
34572: PUSH
34573: LD_INT 1
34575: ARRAY
34576: PPUSH
34577: CALL_OW 248
34581: PPUSH
34582: LD_INT 0
34584: PPUSH
34585: CALL 36610 0 6
34589: ST_TO_ADDR
// if not hexes then
34590: LD_VAR 0 14
34594: NOT
34595: IFFALSE 34599
// exit ;
34597: GO 35357
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34599: LD_ADDR_VAR 0 17
34603: PUSH
34604: LD_VAR 0 5
34608: PPUSH
34609: LD_INT 22
34611: PUSH
34612: LD_VAR 0 13
34616: PPUSH
34617: CALL_OW 255
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: LD_INT 30
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 30
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PPUSH
34658: CALL_OW 72
34662: ST_TO_ADDR
// for i = 1 to hexes do
34663: LD_ADDR_VAR 0 9
34667: PUSH
34668: DOUBLE
34669: LD_INT 1
34671: DEC
34672: ST_TO_ADDR
34673: LD_VAR 0 14
34677: PUSH
34678: FOR_TO
34679: IFFALSE 35355
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34681: LD_ADDR_VAR 0 13
34685: PUSH
34686: LD_VAR 0 14
34690: PUSH
34691: LD_VAR 0 9
34695: ARRAY
34696: PUSH
34697: LD_INT 1
34699: ARRAY
34700: PPUSH
34701: LD_VAR 0 14
34705: PUSH
34706: LD_VAR 0 9
34710: ARRAY
34711: PUSH
34712: LD_INT 2
34714: ARRAY
34715: PPUSH
34716: CALL_OW 428
34720: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34721: LD_VAR 0 14
34725: PUSH
34726: LD_VAR 0 9
34730: ARRAY
34731: PUSH
34732: LD_INT 1
34734: ARRAY
34735: PPUSH
34736: LD_VAR 0 14
34740: PUSH
34741: LD_VAR 0 9
34745: ARRAY
34746: PUSH
34747: LD_INT 2
34749: ARRAY
34750: PPUSH
34751: CALL_OW 351
34755: PUSH
34756: LD_VAR 0 14
34760: PUSH
34761: LD_VAR 0 9
34765: ARRAY
34766: PUSH
34767: LD_INT 1
34769: ARRAY
34770: PPUSH
34771: LD_VAR 0 14
34775: PUSH
34776: LD_VAR 0 9
34780: ARRAY
34781: PUSH
34782: LD_INT 2
34784: ARRAY
34785: PPUSH
34786: CALL_OW 488
34790: NOT
34791: OR
34792: PUSH
34793: LD_VAR 0 13
34797: PPUSH
34798: CALL_OW 247
34802: PUSH
34803: LD_INT 3
34805: EQUAL
34806: OR
34807: IFFALSE 34813
// exit ;
34809: POP
34810: POP
34811: GO 35357
// if not tmp then
34813: LD_VAR 0 13
34817: NOT
34818: IFFALSE 34822
// continue ;
34820: GO 34678
// result := true ;
34822: LD_ADDR_VAR 0 8
34826: PUSH
34827: LD_INT 1
34829: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34830: LD_VAR 0 6
34834: PUSH
34835: LD_VAR 0 13
34839: PPUSH
34840: CALL_OW 247
34844: PUSH
34845: LD_INT 2
34847: EQUAL
34848: AND
34849: PUSH
34850: LD_VAR 0 13
34854: PPUSH
34855: CALL_OW 263
34859: PUSH
34860: LD_INT 1
34862: EQUAL
34863: AND
34864: IFFALSE 35028
// begin if IsDrivenBy ( tmp ) then
34866: LD_VAR 0 13
34870: PPUSH
34871: CALL_OW 311
34875: IFFALSE 34879
// continue ;
34877: GO 34678
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34879: LD_VAR 0 6
34883: PPUSH
34884: LD_INT 3
34886: PUSH
34887: LD_INT 60
34889: PUSH
34890: EMPTY
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 3
34899: PUSH
34900: LD_INT 55
34902: PUSH
34903: EMPTY
34904: LIST
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PPUSH
34914: CALL_OW 72
34918: IFFALSE 35026
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34920: LD_ADDR_VAR 0 18
34924: PUSH
34925: LD_VAR 0 6
34929: PPUSH
34930: LD_INT 3
34932: PUSH
34933: LD_INT 60
34935: PUSH
34936: EMPTY
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 3
34945: PUSH
34946: LD_INT 55
34948: PUSH
34949: EMPTY
34950: LIST
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PPUSH
34960: CALL_OW 72
34964: PUSH
34965: LD_INT 1
34967: ARRAY
34968: ST_TO_ADDR
// if IsInUnit ( driver ) then
34969: LD_VAR 0 18
34973: PPUSH
34974: CALL_OW 310
34978: IFFALSE 34989
// ComExit ( driver ) ;
34980: LD_VAR 0 18
34984: PPUSH
34985: CALL 60391 0 1
// AddComEnterUnit ( driver , tmp ) ;
34989: LD_VAR 0 18
34993: PPUSH
34994: LD_VAR 0 13
34998: PPUSH
34999: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35003: LD_VAR 0 18
35007: PPUSH
35008: LD_VAR 0 7
35012: PPUSH
35013: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35017: LD_VAR 0 18
35021: PPUSH
35022: CALL_OW 181
// end ; continue ;
35026: GO 34678
// end ; if not cleaners or not tmp in cleaners then
35028: LD_VAR 0 6
35032: NOT
35033: PUSH
35034: LD_VAR 0 13
35038: PUSH
35039: LD_VAR 0 6
35043: IN
35044: NOT
35045: OR
35046: IFFALSE 35353
// begin if dep then
35048: LD_VAR 0 17
35052: IFFALSE 35188
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35054: LD_ADDR_VAR 0 16
35058: PUSH
35059: LD_VAR 0 17
35063: PUSH
35064: LD_INT 1
35066: ARRAY
35067: PPUSH
35068: CALL_OW 250
35072: PPUSH
35073: LD_VAR 0 17
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: PPUSH
35082: CALL_OW 254
35086: PPUSH
35087: LD_INT 5
35089: PPUSH
35090: CALL_OW 272
35094: PUSH
35095: LD_VAR 0 17
35099: PUSH
35100: LD_INT 1
35102: ARRAY
35103: PPUSH
35104: CALL_OW 251
35108: PPUSH
35109: LD_VAR 0 17
35113: PUSH
35114: LD_INT 1
35116: ARRAY
35117: PPUSH
35118: CALL_OW 254
35122: PPUSH
35123: LD_INT 5
35125: PPUSH
35126: CALL_OW 273
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35135: LD_VAR 0 16
35139: PUSH
35140: LD_INT 1
35142: ARRAY
35143: PPUSH
35144: LD_VAR 0 16
35148: PUSH
35149: LD_INT 2
35151: ARRAY
35152: PPUSH
35153: CALL_OW 488
35157: IFFALSE 35188
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35159: LD_VAR 0 13
35163: PPUSH
35164: LD_VAR 0 16
35168: PUSH
35169: LD_INT 1
35171: ARRAY
35172: PPUSH
35173: LD_VAR 0 16
35177: PUSH
35178: LD_INT 2
35180: ARRAY
35181: PPUSH
35182: CALL_OW 111
// continue ;
35186: GO 34678
// end ; end ; r := GetDir ( tmp ) ;
35188: LD_ADDR_VAR 0 15
35192: PUSH
35193: LD_VAR 0 13
35197: PPUSH
35198: CALL_OW 254
35202: ST_TO_ADDR
// if r = 5 then
35203: LD_VAR 0 15
35207: PUSH
35208: LD_INT 5
35210: EQUAL
35211: IFFALSE 35221
// r := 0 ;
35213: LD_ADDR_VAR 0 15
35217: PUSH
35218: LD_INT 0
35220: ST_TO_ADDR
// for j = r to 5 do
35221: LD_ADDR_VAR 0 10
35225: PUSH
35226: DOUBLE
35227: LD_VAR 0 15
35231: DEC
35232: ST_TO_ADDR
35233: LD_INT 5
35235: PUSH
35236: FOR_TO
35237: IFFALSE 35351
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35239: LD_ADDR_VAR 0 11
35243: PUSH
35244: LD_VAR 0 13
35248: PPUSH
35249: CALL_OW 250
35253: PPUSH
35254: LD_VAR 0 10
35258: PPUSH
35259: LD_INT 2
35261: PPUSH
35262: CALL_OW 272
35266: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35267: LD_ADDR_VAR 0 12
35271: PUSH
35272: LD_VAR 0 13
35276: PPUSH
35277: CALL_OW 251
35281: PPUSH
35282: LD_VAR 0 10
35286: PPUSH
35287: LD_INT 2
35289: PPUSH
35290: CALL_OW 273
35294: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35295: LD_VAR 0 11
35299: PPUSH
35300: LD_VAR 0 12
35304: PPUSH
35305: CALL_OW 488
35309: PUSH
35310: LD_VAR 0 11
35314: PPUSH
35315: LD_VAR 0 12
35319: PPUSH
35320: CALL_OW 428
35324: NOT
35325: AND
35326: IFFALSE 35349
// begin ComMoveXY ( tmp , _x , _y ) ;
35328: LD_VAR 0 13
35332: PPUSH
35333: LD_VAR 0 11
35337: PPUSH
35338: LD_VAR 0 12
35342: PPUSH
35343: CALL_OW 111
// break ;
35347: GO 35351
// end ; end ;
35349: GO 35236
35351: POP
35352: POP
// end ; end ;
35353: GO 34678
35355: POP
35356: POP
// end ;
35357: LD_VAR 0 8
35361: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35362: LD_INT 0
35364: PPUSH
// result := true ;
35365: LD_ADDR_VAR 0 3
35369: PUSH
35370: LD_INT 1
35372: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35373: LD_VAR 0 2
35377: PUSH
35378: LD_INT 24
35380: DOUBLE
35381: EQUAL
35382: IFTRUE 35392
35384: LD_INT 33
35386: DOUBLE
35387: EQUAL
35388: IFTRUE 35392
35390: GO 35417
35392: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35393: LD_ADDR_VAR 0 3
35397: PUSH
35398: LD_INT 32
35400: PPUSH
35401: LD_VAR 0 1
35405: PPUSH
35406: CALL_OW 321
35410: PUSH
35411: LD_INT 2
35413: EQUAL
35414: ST_TO_ADDR
35415: GO 35733
35417: LD_INT 20
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35450
35425: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35426: LD_ADDR_VAR 0 3
35430: PUSH
35431: LD_INT 6
35433: PPUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 321
35443: PUSH
35444: LD_INT 2
35446: EQUAL
35447: ST_TO_ADDR
35448: GO 35733
35450: LD_INT 22
35452: DOUBLE
35453: EQUAL
35454: IFTRUE 35464
35456: LD_INT 36
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 35489
35464: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35465: LD_ADDR_VAR 0 3
35469: PUSH
35470: LD_INT 15
35472: PPUSH
35473: LD_VAR 0 1
35477: PPUSH
35478: CALL_OW 321
35482: PUSH
35483: LD_INT 2
35485: EQUAL
35486: ST_TO_ADDR
35487: GO 35733
35489: LD_INT 30
35491: DOUBLE
35492: EQUAL
35493: IFTRUE 35497
35495: GO 35522
35497: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35498: LD_ADDR_VAR 0 3
35502: PUSH
35503: LD_INT 20
35505: PPUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: CALL_OW 321
35515: PUSH
35516: LD_INT 2
35518: EQUAL
35519: ST_TO_ADDR
35520: GO 35733
35522: LD_INT 28
35524: DOUBLE
35525: EQUAL
35526: IFTRUE 35536
35528: LD_INT 21
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35561
35536: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 21
35544: PPUSH
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 321
35554: PUSH
35555: LD_INT 2
35557: EQUAL
35558: ST_TO_ADDR
35559: GO 35733
35561: LD_INT 16
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35594
35569: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 84
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 321
35587: PUSH
35588: LD_INT 2
35590: EQUAL
35591: ST_TO_ADDR
35592: GO 35733
35594: LD_INT 19
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35608
35600: LD_INT 23
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35608
35606: GO 35633
35608: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 83
35616: PPUSH
35617: LD_VAR 0 1
35621: PPUSH
35622: CALL_OW 321
35626: PUSH
35627: LD_INT 2
35629: EQUAL
35630: ST_TO_ADDR
35631: GO 35733
35633: LD_INT 17
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35666
35641: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35642: LD_ADDR_VAR 0 3
35646: PUSH
35647: LD_INT 39
35649: PPUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: CALL_OW 321
35659: PUSH
35660: LD_INT 2
35662: EQUAL
35663: ST_TO_ADDR
35664: GO 35733
35666: LD_INT 18
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35674
35672: GO 35699
35674: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35675: LD_ADDR_VAR 0 3
35679: PUSH
35680: LD_INT 40
35682: PPUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 321
35692: PUSH
35693: LD_INT 2
35695: EQUAL
35696: ST_TO_ADDR
35697: GO 35733
35699: LD_INT 27
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35732
35707: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35708: LD_ADDR_VAR 0 3
35712: PUSH
35713: LD_INT 35
35715: PPUSH
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 321
35725: PUSH
35726: LD_INT 2
35728: EQUAL
35729: ST_TO_ADDR
35730: GO 35733
35732: POP
// end ;
35733: LD_VAR 0 3
35737: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
35742: PPUSH
35743: PPUSH
35744: PPUSH
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
// result := false ;
35751: LD_ADDR_VAR 0 6
35755: PUSH
35756: LD_INT 0
35758: ST_TO_ADDR
// if btype = b_depot then
35759: LD_VAR 0 2
35763: PUSH
35764: LD_INT 0
35766: EQUAL
35767: IFFALSE 35779
// begin result := true ;
35769: LD_ADDR_VAR 0 6
35773: PUSH
35774: LD_INT 1
35776: ST_TO_ADDR
// exit ;
35777: GO 36605
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35779: LD_VAR 0 1
35783: NOT
35784: PUSH
35785: LD_VAR 0 1
35789: PPUSH
35790: CALL_OW 266
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: IN
35805: NOT
35806: OR
35807: PUSH
35808: LD_VAR 0 2
35812: NOT
35813: OR
35814: PUSH
35815: LD_VAR 0 5
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: LD_INT 4
35834: PUSH
35835: LD_INT 5
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: IN
35846: NOT
35847: OR
35848: PUSH
35849: LD_VAR 0 3
35853: PPUSH
35854: LD_VAR 0 4
35858: PPUSH
35859: CALL_OW 488
35863: NOT
35864: OR
35865: IFFALSE 35869
// exit ;
35867: GO 36605
// side := GetSide ( depot ) ;
35869: LD_ADDR_VAR 0 9
35873: PUSH
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 255
35883: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35884: LD_VAR 0 9
35888: PPUSH
35889: LD_VAR 0 2
35893: PPUSH
35894: CALL 35362 0 2
35898: NOT
35899: IFFALSE 35903
// exit ;
35901: GO 36605
// pom := GetBase ( depot ) ;
35903: LD_ADDR_VAR 0 10
35907: PUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 274
35917: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35918: LD_ADDR_VAR 0 11
35922: PUSH
35923: LD_VAR 0 2
35927: PPUSH
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL_OW 248
35937: PPUSH
35938: CALL_OW 450
35942: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35943: LD_VAR 0 10
35947: PPUSH
35948: LD_INT 1
35950: PPUSH
35951: CALL_OW 275
35955: PUSH
35956: LD_VAR 0 11
35960: PUSH
35961: LD_INT 1
35963: ARRAY
35964: GREATEREQUAL
35965: PUSH
35966: LD_VAR 0 10
35970: PPUSH
35971: LD_INT 2
35973: PPUSH
35974: CALL_OW 275
35978: PUSH
35979: LD_VAR 0 11
35983: PUSH
35984: LD_INT 2
35986: ARRAY
35987: GREATEREQUAL
35988: AND
35989: PUSH
35990: LD_VAR 0 10
35994: PPUSH
35995: LD_INT 3
35997: PPUSH
35998: CALL_OW 275
36002: PUSH
36003: LD_VAR 0 11
36007: PUSH
36008: LD_INT 3
36010: ARRAY
36011: GREATEREQUAL
36012: AND
36013: NOT
36014: IFFALSE 36018
// exit ;
36016: GO 36605
// if GetBType ( depot ) = b_depot then
36018: LD_VAR 0 1
36022: PPUSH
36023: CALL_OW 266
36027: PUSH
36028: LD_INT 0
36030: EQUAL
36031: IFFALSE 36043
// dist := 28 else
36033: LD_ADDR_VAR 0 14
36037: PUSH
36038: LD_INT 28
36040: ST_TO_ADDR
36041: GO 36051
// dist := 36 ;
36043: LD_ADDR_VAR 0 14
36047: PUSH
36048: LD_INT 36
36050: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36051: LD_VAR 0 1
36055: PPUSH
36056: LD_VAR 0 3
36060: PPUSH
36061: LD_VAR 0 4
36065: PPUSH
36066: CALL_OW 297
36070: PUSH
36071: LD_VAR 0 14
36075: GREATER
36076: IFFALSE 36080
// exit ;
36078: GO 36605
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36080: LD_ADDR_VAR 0 12
36084: PUSH
36085: LD_VAR 0 2
36089: PPUSH
36090: LD_VAR 0 3
36094: PPUSH
36095: LD_VAR 0 4
36099: PPUSH
36100: LD_VAR 0 5
36104: PPUSH
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL_OW 248
36114: PPUSH
36115: LD_INT 0
36117: PPUSH
36118: CALL 36610 0 6
36122: ST_TO_ADDR
// if not hexes then
36123: LD_VAR 0 12
36127: NOT
36128: IFFALSE 36132
// exit ;
36130: GO 36605
// hex := GetHexInfo ( x , y ) ;
36132: LD_ADDR_VAR 0 15
36136: PUSH
36137: LD_VAR 0 3
36141: PPUSH
36142: LD_VAR 0 4
36146: PPUSH
36147: CALL_OW 546
36151: ST_TO_ADDR
// if hex [ 1 ] then
36152: LD_VAR 0 15
36156: PUSH
36157: LD_INT 1
36159: ARRAY
36160: IFFALSE 36164
// exit ;
36162: GO 36605
// height := hex [ 2 ] ;
36164: LD_ADDR_VAR 0 13
36168: PUSH
36169: LD_VAR 0 15
36173: PUSH
36174: LD_INT 2
36176: ARRAY
36177: ST_TO_ADDR
// for i = 1 to hexes do
36178: LD_ADDR_VAR 0 7
36182: PUSH
36183: DOUBLE
36184: LD_INT 1
36186: DEC
36187: ST_TO_ADDR
36188: LD_VAR 0 12
36192: PUSH
36193: FOR_TO
36194: IFFALSE 36524
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36196: LD_VAR 0 12
36200: PUSH
36201: LD_VAR 0 7
36205: ARRAY
36206: PUSH
36207: LD_INT 1
36209: ARRAY
36210: PPUSH
36211: LD_VAR 0 12
36215: PUSH
36216: LD_VAR 0 7
36220: ARRAY
36221: PUSH
36222: LD_INT 2
36224: ARRAY
36225: PPUSH
36226: CALL_OW 488
36230: NOT
36231: PUSH
36232: LD_VAR 0 12
36236: PUSH
36237: LD_VAR 0 7
36241: ARRAY
36242: PUSH
36243: LD_INT 1
36245: ARRAY
36246: PPUSH
36247: LD_VAR 0 12
36251: PUSH
36252: LD_VAR 0 7
36256: ARRAY
36257: PUSH
36258: LD_INT 2
36260: ARRAY
36261: PPUSH
36262: CALL_OW 428
36266: PUSH
36267: LD_INT 0
36269: GREATER
36270: OR
36271: PUSH
36272: LD_VAR 0 12
36276: PUSH
36277: LD_VAR 0 7
36281: ARRAY
36282: PUSH
36283: LD_INT 1
36285: ARRAY
36286: PPUSH
36287: LD_VAR 0 12
36291: PUSH
36292: LD_VAR 0 7
36296: ARRAY
36297: PUSH
36298: LD_INT 2
36300: ARRAY
36301: PPUSH
36302: CALL_OW 351
36306: OR
36307: IFFALSE 36313
// exit ;
36309: POP
36310: POP
36311: GO 36605
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36313: LD_ADDR_VAR 0 8
36317: PUSH
36318: LD_VAR 0 12
36322: PUSH
36323: LD_VAR 0 7
36327: ARRAY
36328: PUSH
36329: LD_INT 1
36331: ARRAY
36332: PPUSH
36333: LD_VAR 0 12
36337: PUSH
36338: LD_VAR 0 7
36342: ARRAY
36343: PUSH
36344: LD_INT 2
36346: ARRAY
36347: PPUSH
36348: CALL_OW 546
36352: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36353: LD_VAR 0 8
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: PUSH
36362: LD_VAR 0 8
36366: PUSH
36367: LD_INT 2
36369: ARRAY
36370: PUSH
36371: LD_VAR 0 13
36375: PUSH
36376: LD_INT 2
36378: PLUS
36379: GREATER
36380: OR
36381: PUSH
36382: LD_VAR 0 8
36386: PUSH
36387: LD_INT 2
36389: ARRAY
36390: PUSH
36391: LD_VAR 0 13
36395: PUSH
36396: LD_INT 2
36398: MINUS
36399: LESS
36400: OR
36401: PUSH
36402: LD_VAR 0 8
36406: PUSH
36407: LD_INT 3
36409: ARRAY
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 8
36416: PUSH
36417: LD_INT 9
36419: PUSH
36420: LD_INT 10
36422: PUSH
36423: LD_INT 11
36425: PUSH
36426: LD_INT 12
36428: PUSH
36429: LD_INT 13
36431: PUSH
36432: LD_INT 16
36434: PUSH
36435: LD_INT 17
36437: PUSH
36438: LD_INT 18
36440: PUSH
36441: LD_INT 19
36443: PUSH
36444: LD_INT 20
36446: PUSH
36447: LD_INT 21
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: IN
36465: NOT
36466: OR
36467: PUSH
36468: LD_VAR 0 8
36472: PUSH
36473: LD_INT 5
36475: ARRAY
36476: NOT
36477: OR
36478: PUSH
36479: LD_VAR 0 8
36483: PUSH
36484: LD_INT 6
36486: ARRAY
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: LD_INT 7
36496: PUSH
36497: LD_INT 9
36499: PUSH
36500: LD_INT 10
36502: PUSH
36503: LD_INT 11
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: IN
36514: NOT
36515: OR
36516: IFFALSE 36522
// exit ;
36518: POP
36519: POP
36520: GO 36605
// end ;
36522: GO 36193
36524: POP
36525: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36526: LD_VAR 0 9
36530: PPUSH
36531: LD_VAR 0 3
36535: PPUSH
36536: LD_VAR 0 4
36540: PPUSH
36541: LD_INT 20
36543: PPUSH
36544: CALL 28528 0 4
36548: PUSH
36549: LD_INT 4
36551: ARRAY
36552: IFFALSE 36556
// exit ;
36554: GO 36605
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36556: LD_VAR 0 2
36560: PUSH
36561: LD_INT 29
36563: PUSH
36564: LD_INT 30
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: IN
36571: PUSH
36572: LD_VAR 0 3
36576: PPUSH
36577: LD_VAR 0 4
36581: PPUSH
36582: LD_VAR 0 9
36586: PPUSH
36587: CALL_OW 440
36591: NOT
36592: AND
36593: IFFALSE 36597
// exit ;
36595: GO 36605
// result := true ;
36597: LD_ADDR_VAR 0 6
36601: PUSH
36602: LD_INT 1
36604: ST_TO_ADDR
// end ;
36605: LD_VAR 0 6
36609: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36610: LD_INT 0
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
36621: PPUSH
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
36636: PPUSH
36637: PPUSH
36638: PPUSH
36639: PPUSH
36640: PPUSH
36641: PPUSH
36642: PPUSH
36643: PPUSH
36644: PPUSH
36645: PPUSH
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
36669: PPUSH
// result = [ ] ;
36670: LD_ADDR_VAR 0 7
36674: PUSH
36675: EMPTY
36676: ST_TO_ADDR
// temp_list = [ ] ;
36677: LD_ADDR_VAR 0 9
36681: PUSH
36682: EMPTY
36683: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36684: LD_VAR 0 4
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: LD_INT 4
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: IN
36715: NOT
36716: PUSH
36717: LD_VAR 0 1
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: IN
36732: PUSH
36733: LD_VAR 0 5
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: IN
36752: NOT
36753: AND
36754: OR
36755: IFFALSE 36759
// exit ;
36757: GO 55150
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36759: LD_VAR 0 1
36763: PUSH
36764: LD_INT 6
36766: PUSH
36767: LD_INT 7
36769: PUSH
36770: LD_INT 8
36772: PUSH
36773: LD_INT 13
36775: PUSH
36776: LD_INT 12
36778: PUSH
36779: LD_INT 15
36781: PUSH
36782: LD_INT 11
36784: PUSH
36785: LD_INT 14
36787: PUSH
36788: LD_INT 10
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: IN
36802: IFFALSE 36812
// btype = b_lab ;
36804: LD_ADDR_VAR 0 1
36808: PUSH
36809: LD_INT 6
36811: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36812: LD_VAR 0 6
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: IN
36831: NOT
36832: PUSH
36833: LD_VAR 0 1
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: LD_INT 3
36849: PUSH
36850: LD_INT 6
36852: PUSH
36853: LD_INT 36
36855: PUSH
36856: LD_INT 4
36858: PUSH
36859: LD_INT 5
36861: PUSH
36862: LD_INT 31
36864: PUSH
36865: LD_INT 32
36867: PUSH
36868: LD_INT 33
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: IN
36884: NOT
36885: PUSH
36886: LD_VAR 0 6
36890: PUSH
36891: LD_INT 1
36893: EQUAL
36894: AND
36895: OR
36896: PUSH
36897: LD_VAR 0 1
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: IN
36912: NOT
36913: PUSH
36914: LD_VAR 0 6
36918: PUSH
36919: LD_INT 2
36921: EQUAL
36922: AND
36923: OR
36924: IFFALSE 36934
// mode = 0 ;
36926: LD_ADDR_VAR 0 6
36930: PUSH
36931: LD_INT 0
36933: ST_TO_ADDR
// case mode of 0 :
36934: LD_VAR 0 6
36938: PUSH
36939: LD_INT 0
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 48400
36947: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36948: LD_ADDR_VAR 0 11
36952: PUSH
36953: LD_INT 0
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 0
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 2
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 3
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37141: LD_ADDR_VAR 0 12
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 3
37298: NEG
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 3
37309: NEG
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37337: LD_ADDR_VAR 0 13
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: NEG
37485: PUSH
37486: LD_INT 3
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 3
37496: NEG
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 3
37508: NEG
37509: PUSH
37510: LD_INT 3
37512: NEG
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37536: LD_ADDR_VAR 0 14
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 2
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 2
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: NEG
37683: PUSH
37684: LD_INT 3
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 3
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37732: LD_ADDR_VAR 0 15
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: NEG
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37925: LD_ADDR_VAR 0 16
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 3
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38118: LD_ADDR_VAR 0 17
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38348: LD_ADDR_VAR 0 18
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 1
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: NEG
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38578: LD_ADDR_VAR 0 19
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 0
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 2
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 2
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 2
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: NEG
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38808: LD_ADDR_VAR 0 20
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39038: LD_ADDR_VAR 0 21
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 2
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 2
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: NEG
39238: PUSH
39239: LD_INT 2
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39268: LD_ADDR_VAR 0 22
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: NEG
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 2
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39498: LD_ADDR_VAR 0 23
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: LD_INT 3
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 3
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39778: LD_ADDR_VAR 0 24
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40054: LD_ADDR_VAR 0 25
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 3
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40328: LD_ADDR_VAR 0 26
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 1
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 3
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40604: LD_ADDR_VAR 0 27
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 2
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: LD_INT 0
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 3
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40884: LD_ADDR_VAR 0 28
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 2
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 2
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: LD_INT 0
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 1
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 3
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 3
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 3
41119: NEG
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: NEG
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41166: LD_ADDR_VAR 0 29
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 3
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41445: LD_ADDR_VAR 0 30
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 2
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41723: LD_ADDR_VAR 0 31
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 2
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: LD_INT 3
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 3
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 3
41966: NEG
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42001: LD_ADDR_VAR 0 32
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: LD_INT 2
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 2
42233: NEG
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 3
42244: NEG
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42279: LD_ADDR_VAR 0 33
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 1
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 3
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 3
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42558: LD_ADDR_VAR 0 34
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 3
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: PUSH
42762: LD_INT 2
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 3
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42838: LD_ADDR_VAR 0 35
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 1
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 1
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42950: LD_ADDR_VAR 0 36
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43062: LD_ADDR_VAR 0 37
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43174: LD_ADDR_VAR 0 38
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: LD_INT 1
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43286: LD_ADDR_VAR 0 39
43290: PUSH
43291: LD_INT 0
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 0
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43398: LD_ADDR_VAR 0 40
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43510: LD_ADDR_VAR 0 41
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: LD_INT 3
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 3
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 3
43784: NEG
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 3
43807: NEG
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: NEG
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43860: LD_ADDR_VAR 0 42
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 0
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 2
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 2
44038: NEG
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: LD_INT 3
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: LD_INT 3
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 3
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: LD_INT 3
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: LD_INT 3
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: LD_INT 3
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 3
44157: NEG
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 3
44169: NEG
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44210: LD_ADDR_VAR 0 43
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 3
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 3
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44558: LD_ADDR_VAR 0 44
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 1
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: PUSH
44772: LD_INT 0
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 3
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: LD_INT 2
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: NEG
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 3
44867: NEG
44868: PUSH
44869: LD_INT 3
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44908: LD_ADDR_VAR 0 45
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: NEG
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 3
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 3
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 3
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 2
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 3
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 3
45217: NEG
45218: PUSH
45219: LD_INT 3
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45258: LD_ADDR_VAR 0 46
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: LD_INT 3
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 3
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45606: LD_ADDR_VAR 0 47
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45757: LD_ADDR_VAR 0 48
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45904: LD_ADDR_VAR 0 49
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 2
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46048: LD_ADDR_VAR 0 50
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46192: LD_ADDR_VAR 0 51
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: NEG
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46339: LD_ADDR_VAR 0 52
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46490: LD_ADDR_VAR 0 53
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: NEG
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 54
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46950: LD_ADDR_VAR 0 55
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 1
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 2
47149: NEG
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47180: LD_ADDR_VAR 0 56
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: NEG
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47410: LD_ADDR_VAR 0 57
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47640: LD_ADDR_VAR 0 58
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 2
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: NEG
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: NEG
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47870: LD_ADDR_VAR 0 59
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47958: LD_ADDR_VAR 0 60
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48046: LD_ADDR_VAR 0 61
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48134: LD_ADDR_VAR 0 62
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: LD_INT 1
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48222: LD_ADDR_VAR 0 63
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48310: LD_ADDR_VAR 0 64
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// end ; 1 :
48398: GO 54295
48400: LD_INT 1
48402: DOUBLE
48403: EQUAL
48404: IFTRUE 48408
48406: GO 51031
48408: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48409: LD_ADDR_VAR 0 11
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 3
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48453: LD_ADDR_VAR 0 12
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 3
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 3
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: LIST
48493: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48494: LD_ADDR_VAR 0 13
48498: PUSH
48499: LD_INT 3
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 3
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: PUSH
48522: LD_INT 3
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48534: LD_ADDR_VAR 0 14
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48575: LD_ADDR_VAR 0 15
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 1
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: NEG
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48619: LD_ADDR_VAR 0 16
48623: PUSH
48624: LD_INT 2
48626: NEG
48627: PUSH
48628: LD_INT 3
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 3
48650: NEG
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48665: LD_ADDR_VAR 0 17
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48709: LD_ADDR_VAR 0 18
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48750: LD_ADDR_VAR 0 19
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48790: LD_ADDR_VAR 0 20
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48831: LD_ADDR_VAR 0 21
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 3
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: LIST
48874: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48875: LD_ADDR_VAR 0 22
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 3
48906: NEG
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48921: LD_ADDR_VAR 0 23
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 3
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 4
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48965: LD_ADDR_VAR 0 24
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 4
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49006: LD_ADDR_VAR 0 25
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 4
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: LD_INT 4
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49046: LD_ADDR_VAR 0 26
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 4
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 3
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49087: LD_ADDR_VAR 0 27
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 4
49116: NEG
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49131: LD_ADDR_VAR 0 28
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 3
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: NEG
49151: PUSH
49152: LD_INT 4
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 4
49162: NEG
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49177: LD_ADDR_VAR 0 29
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 4
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: LD_INT 4
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: LD_INT 5
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 5
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 4
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 6
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 6
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: PUSH
49310: LD_INT 5
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49332: LD_ADDR_VAR 0 30
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 4
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 4
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 4
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 5
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 5
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 5
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 6
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 6
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49475: LD_ADDR_VAR 0 31
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: LD_INT 3
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 3
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 4
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: LD_INT 4
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: LD_INT 4
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 5
49542: PUSH
49543: LD_INT 4
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 5
49552: PUSH
49553: LD_INT 5
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 4
49562: PUSH
49563: LD_INT 5
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 6
49572: PUSH
49573: LD_INT 5
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 6
49582: PUSH
49583: LD_INT 6
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 5
49592: PUSH
49593: LD_INT 6
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49614: LD_ADDR_VAR 0 32
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 3
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 4
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 4
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 5
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 5
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 4
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 6
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 6
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 5
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49757: LD_ADDR_VAR 0 33
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 4
49809: NEG
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 4
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 4
49832: NEG
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 5
49843: NEG
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 5
49854: NEG
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 5
49866: NEG
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 6
49877: NEG
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 6
49888: NEG
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49912: LD_ADDR_VAR 0 34
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: LD_INT 3
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: NEG
49956: PUSH
49957: LD_INT 4
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 4
49967: NEG
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 4
49979: NEG
49980: PUSH
49981: LD_INT 4
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: NEG
49992: PUSH
49993: LD_INT 5
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 5
50003: NEG
50004: PUSH
50005: LD_INT 4
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 5
50015: NEG
50016: PUSH
50017: LD_INT 5
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 5
50027: NEG
50028: PUSH
50029: LD_INT 6
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 6
50039: NEG
50040: PUSH
50041: LD_INT 5
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 6
50051: NEG
50052: PUSH
50053: LD_INT 6
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50075: LD_ADDR_VAR 0 41
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50119: LD_ADDR_VAR 0 42
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 3
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50160: LD_ADDR_VAR 0 43
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50200: LD_ADDR_VAR 0 44
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 3
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50241: LD_ADDR_VAR 0 45
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: LIST
50284: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50285: LD_ADDR_VAR 0 46
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50331: LD_ADDR_VAR 0 47
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50364: LD_ADDR_VAR 0 48
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50395: LD_ADDR_VAR 0 49
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 2
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50424: LD_ADDR_VAR 0 50
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 3
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50453: LD_ADDR_VAR 0 51
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50484: LD_ADDR_VAR 0 52
50488: PUSH
50489: LD_INT 3
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: NEG
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50517: LD_ADDR_VAR 0 53
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: LD_INT 3
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 2
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50561: LD_ADDR_VAR 0 54
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 3
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50602: LD_ADDR_VAR 0 55
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: PUSH
50630: LD_INT 3
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50642: LD_ADDR_VAR 0 56
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50683: LD_ADDR_VAR 0 57
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50727: LD_ADDR_VAR 0 58
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50773: LD_ADDR_VAR 0 59
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: LD_INT 2
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50817: LD_ADDR_VAR 0 60
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50858: LD_ADDR_VAR 0 61
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50898: LD_ADDR_VAR 0 62
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50939: LD_ADDR_VAR 0 63
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50983: LD_ADDR_VAR 0 64
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: ST_TO_ADDR
// end ; 2 :
51029: GO 54295
51031: LD_INT 2
51033: DOUBLE
51034: EQUAL
51035: IFTRUE 51039
51037: GO 54294
51039: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51040: LD_ADDR_VAR 0 29
51044: PUSH
51045: LD_INT 4
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 5
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 5
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 4
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 5
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: PUSH
51151: LD_INT 2
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 4
51160: PUSH
51161: LD_INT 3
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 4
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: PUSH
51181: LD_INT 4
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 4
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: LD_INT 4
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: LD_INT 5
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 5
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 4
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: LD_INT 5
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 4
51379: NEG
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 4
51402: NEG
51403: PUSH
51404: LD_INT 2
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 4
51425: NEG
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 4
51437: NEG
51438: PUSH
51439: LD_INT 5
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 3
51449: NEG
51450: PUSH
51451: LD_INT 4
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 4
51473: NEG
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 5
51485: NEG
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 5
51497: NEG
51498: PUSH
51499: LD_INT 5
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: NEG
51510: PUSH
51511: LD_INT 5
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 5
51521: NEG
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51578: LD_ADDR_VAR 0 30
51582: PUSH
51583: LD_INT 4
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 4
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 5
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 5
51615: PUSH
51616: LD_INT 5
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: LD_INT 5
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: PUSH
51636: LD_INT 4
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: LD_INT 3
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 5
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 5
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 4
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 4
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 4
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 4
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 4
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 5
51824: NEG
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 5
51835: NEG
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 5
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 4
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 4
51930: NEG
51931: PUSH
51932: LD_INT 3
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 4
51942: NEG
51943: PUSH
51944: LD_INT 4
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 4
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 4
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 4
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 5
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 4
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 4
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 5
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 2
52057: PUSH
52058: LD_INT 3
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 5
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52125: LD_ADDR_VAR 0 31
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: LD_INT 4
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 4
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 5
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 5
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: LD_INT 4
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 5
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 2
52214: NEG
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 4
52281: NEG
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 4
52304: NEG
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 4
52327: NEG
52328: PUSH
52329: LD_INT 4
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 4
52339: NEG
52340: PUSH
52341: LD_INT 5
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: LD_INT 4
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: NEG
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 4
52375: NEG
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 5
52387: NEG
52388: PUSH
52389: LD_INT 4
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 5
52399: NEG
52400: PUSH
52401: LD_INT 5
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 3
52411: NEG
52412: PUSH
52413: LD_INT 5
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 5
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 3
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: LD_INT 4
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 3
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: LD_INT 4
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: NEG
52526: PUSH
52527: LD_INT 4
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 4
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 4
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 5
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 5
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 4
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: LD_INT 0
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 5
52620: PUSH
52621: LD_INT 2
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52675: LD_ADDR_VAR 0 32
52679: PUSH
52680: LD_INT 4
52682: NEG
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 4
52693: NEG
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 3
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 4
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 5
52738: NEG
52739: PUSH
52740: LD_INT 0
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 5
52749: NEG
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 5
52761: NEG
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: LD_INT 4
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 4
52844: NEG
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 4
52856: NEG
52857: PUSH
52858: LD_INT 4
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 4
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 4
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 4
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 5
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 4
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: LD_INT 3
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 3
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 4
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 5
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 5
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 2
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 4
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 4
53087: PUSH
53088: LD_INT 4
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 4
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 5
53107: PUSH
53108: LD_INT 4
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 5
53117: PUSH
53118: LD_INT 5
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 4
53127: PUSH
53128: LD_INT 5
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 4
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 5
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: LD_INT 5
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53222: LD_ADDR_VAR 0 33
53226: PUSH
53227: LD_INT 4
53229: NEG
53230: PUSH
53231: LD_INT 4
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 4
53241: NEG
53242: PUSH
53243: LD_INT 5
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 4
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 3
53265: NEG
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 4
53277: NEG
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 5
53289: NEG
53290: PUSH
53291: LD_INT 4
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 5
53301: NEG
53302: PUSH
53303: LD_INT 5
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 5
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 5
53325: NEG
53326: PUSH
53327: LD_INT 3
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 0
53348: PUSH
53349: LD_INT 4
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: NEG
53428: PUSH
53429: LD_INT 4
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 4
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 4
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 5
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 5
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 3
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 3
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 5
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 4
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 4
53562: PUSH
53563: LD_INT 4
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: LD_INT 4
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 3
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 4
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 4
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 4
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 4
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 5
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 5
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 4
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 5
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: LD_INT 3
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53760: LD_ADDR_VAR 0 34
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 4
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: LD_INT 5
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 4
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 4
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 5
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: LD_INT 5
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 4
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 4
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: LD_INT 4
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 5
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 5
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: PUSH
54003: LD_INT 5
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 5
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 3
54042: PUSH
54043: LD_INT 5
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 4
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 4
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 4
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 5
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 5
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 5
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: ST_TO_ADDR
// end ; end ;
54292: GO 54295
54294: POP
// case btype of b_depot , b_warehouse :
54295: LD_VAR 0 1
54299: PUSH
54300: LD_INT 0
54302: DOUBLE
54303: EQUAL
54304: IFTRUE 54314
54306: LD_INT 1
54308: DOUBLE
54309: EQUAL
54310: IFTRUE 54314
54312: GO 54515
54314: POP
// case nation of nation_american :
54315: LD_VAR 0 5
54319: PUSH
54320: LD_INT 1
54322: DOUBLE
54323: EQUAL
54324: IFTRUE 54328
54326: GO 54384
54328: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54329: LD_ADDR_VAR 0 9
54333: PUSH
54334: LD_VAR 0 11
54338: PUSH
54339: LD_VAR 0 12
54343: PUSH
54344: LD_VAR 0 13
54348: PUSH
54349: LD_VAR 0 14
54353: PUSH
54354: LD_VAR 0 15
54358: PUSH
54359: LD_VAR 0 16
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: PUSH
54372: LD_VAR 0 4
54376: PUSH
54377: LD_INT 1
54379: PLUS
54380: ARRAY
54381: ST_TO_ADDR
54382: GO 54513
54384: LD_INT 2
54386: DOUBLE
54387: EQUAL
54388: IFTRUE 54392
54390: GO 54448
54392: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54393: LD_ADDR_VAR 0 9
54397: PUSH
54398: LD_VAR 0 17
54402: PUSH
54403: LD_VAR 0 18
54407: PUSH
54408: LD_VAR 0 19
54412: PUSH
54413: LD_VAR 0 20
54417: PUSH
54418: LD_VAR 0 21
54422: PUSH
54423: LD_VAR 0 22
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: PUSH
54436: LD_VAR 0 4
54440: PUSH
54441: LD_INT 1
54443: PLUS
54444: ARRAY
54445: ST_TO_ADDR
54446: GO 54513
54448: LD_INT 3
54450: DOUBLE
54451: EQUAL
54452: IFTRUE 54456
54454: GO 54512
54456: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54457: LD_ADDR_VAR 0 9
54461: PUSH
54462: LD_VAR 0 23
54466: PUSH
54467: LD_VAR 0 24
54471: PUSH
54472: LD_VAR 0 25
54476: PUSH
54477: LD_VAR 0 26
54481: PUSH
54482: LD_VAR 0 27
54486: PUSH
54487: LD_VAR 0 28
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: PUSH
54500: LD_VAR 0 4
54504: PUSH
54505: LD_INT 1
54507: PLUS
54508: ARRAY
54509: ST_TO_ADDR
54510: GO 54513
54512: POP
54513: GO 55068
54515: LD_INT 2
54517: DOUBLE
54518: EQUAL
54519: IFTRUE 54529
54521: LD_INT 3
54523: DOUBLE
54524: EQUAL
54525: IFTRUE 54529
54527: GO 54585
54529: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54530: LD_ADDR_VAR 0 9
54534: PUSH
54535: LD_VAR 0 29
54539: PUSH
54540: LD_VAR 0 30
54544: PUSH
54545: LD_VAR 0 31
54549: PUSH
54550: LD_VAR 0 32
54554: PUSH
54555: LD_VAR 0 33
54559: PUSH
54560: LD_VAR 0 34
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: PUSH
54573: LD_VAR 0 4
54577: PUSH
54578: LD_INT 1
54580: PLUS
54581: ARRAY
54582: ST_TO_ADDR
54583: GO 55068
54585: LD_INT 16
54587: DOUBLE
54588: EQUAL
54589: IFTRUE 54647
54591: LD_INT 17
54593: DOUBLE
54594: EQUAL
54595: IFTRUE 54647
54597: LD_INT 18
54599: DOUBLE
54600: EQUAL
54601: IFTRUE 54647
54603: LD_INT 19
54605: DOUBLE
54606: EQUAL
54607: IFTRUE 54647
54609: LD_INT 22
54611: DOUBLE
54612: EQUAL
54613: IFTRUE 54647
54615: LD_INT 20
54617: DOUBLE
54618: EQUAL
54619: IFTRUE 54647
54621: LD_INT 21
54623: DOUBLE
54624: EQUAL
54625: IFTRUE 54647
54627: LD_INT 23
54629: DOUBLE
54630: EQUAL
54631: IFTRUE 54647
54633: LD_INT 24
54635: DOUBLE
54636: EQUAL
54637: IFTRUE 54647
54639: LD_INT 25
54641: DOUBLE
54642: EQUAL
54643: IFTRUE 54647
54645: GO 54703
54647: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54648: LD_ADDR_VAR 0 9
54652: PUSH
54653: LD_VAR 0 35
54657: PUSH
54658: LD_VAR 0 36
54662: PUSH
54663: LD_VAR 0 37
54667: PUSH
54668: LD_VAR 0 38
54672: PUSH
54673: LD_VAR 0 39
54677: PUSH
54678: LD_VAR 0 40
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: PUSH
54691: LD_VAR 0 4
54695: PUSH
54696: LD_INT 1
54698: PLUS
54699: ARRAY
54700: ST_TO_ADDR
54701: GO 55068
54703: LD_INT 6
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54759
54709: LD_INT 7
54711: DOUBLE
54712: EQUAL
54713: IFTRUE 54759
54715: LD_INT 8
54717: DOUBLE
54718: EQUAL
54719: IFTRUE 54759
54721: LD_INT 13
54723: DOUBLE
54724: EQUAL
54725: IFTRUE 54759
54727: LD_INT 12
54729: DOUBLE
54730: EQUAL
54731: IFTRUE 54759
54733: LD_INT 15
54735: DOUBLE
54736: EQUAL
54737: IFTRUE 54759
54739: LD_INT 11
54741: DOUBLE
54742: EQUAL
54743: IFTRUE 54759
54745: LD_INT 14
54747: DOUBLE
54748: EQUAL
54749: IFTRUE 54759
54751: LD_INT 10
54753: DOUBLE
54754: EQUAL
54755: IFTRUE 54759
54757: GO 54815
54759: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54760: LD_ADDR_VAR 0 9
54764: PUSH
54765: LD_VAR 0 41
54769: PUSH
54770: LD_VAR 0 42
54774: PUSH
54775: LD_VAR 0 43
54779: PUSH
54780: LD_VAR 0 44
54784: PUSH
54785: LD_VAR 0 45
54789: PUSH
54790: LD_VAR 0 46
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: PUSH
54803: LD_VAR 0 4
54807: PUSH
54808: LD_INT 1
54810: PLUS
54811: ARRAY
54812: ST_TO_ADDR
54813: GO 55068
54815: LD_INT 36
54817: DOUBLE
54818: EQUAL
54819: IFTRUE 54823
54821: GO 54879
54823: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54824: LD_ADDR_VAR 0 9
54828: PUSH
54829: LD_VAR 0 47
54833: PUSH
54834: LD_VAR 0 48
54838: PUSH
54839: LD_VAR 0 49
54843: PUSH
54844: LD_VAR 0 50
54848: PUSH
54849: LD_VAR 0 51
54853: PUSH
54854: LD_VAR 0 52
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: PUSH
54867: LD_VAR 0 4
54871: PUSH
54872: LD_INT 1
54874: PLUS
54875: ARRAY
54876: ST_TO_ADDR
54877: GO 55068
54879: LD_INT 4
54881: DOUBLE
54882: EQUAL
54883: IFTRUE 54905
54885: LD_INT 5
54887: DOUBLE
54888: EQUAL
54889: IFTRUE 54905
54891: LD_INT 34
54893: DOUBLE
54894: EQUAL
54895: IFTRUE 54905
54897: LD_INT 37
54899: DOUBLE
54900: EQUAL
54901: IFTRUE 54905
54903: GO 54961
54905: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54906: LD_ADDR_VAR 0 9
54910: PUSH
54911: LD_VAR 0 53
54915: PUSH
54916: LD_VAR 0 54
54920: PUSH
54921: LD_VAR 0 55
54925: PUSH
54926: LD_VAR 0 56
54930: PUSH
54931: LD_VAR 0 57
54935: PUSH
54936: LD_VAR 0 58
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: PUSH
54949: LD_VAR 0 4
54953: PUSH
54954: LD_INT 1
54956: PLUS
54957: ARRAY
54958: ST_TO_ADDR
54959: GO 55068
54961: LD_INT 31
54963: DOUBLE
54964: EQUAL
54965: IFTRUE 55011
54967: LD_INT 32
54969: DOUBLE
54970: EQUAL
54971: IFTRUE 55011
54973: LD_INT 33
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 55011
54979: LD_INT 27
54981: DOUBLE
54982: EQUAL
54983: IFTRUE 55011
54985: LD_INT 26
54987: DOUBLE
54988: EQUAL
54989: IFTRUE 55011
54991: LD_INT 28
54993: DOUBLE
54994: EQUAL
54995: IFTRUE 55011
54997: LD_INT 29
54999: DOUBLE
55000: EQUAL
55001: IFTRUE 55011
55003: LD_INT 30
55005: DOUBLE
55006: EQUAL
55007: IFTRUE 55011
55009: GO 55067
55011: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55012: LD_ADDR_VAR 0 9
55016: PUSH
55017: LD_VAR 0 59
55021: PUSH
55022: LD_VAR 0 60
55026: PUSH
55027: LD_VAR 0 61
55031: PUSH
55032: LD_VAR 0 62
55036: PUSH
55037: LD_VAR 0 63
55041: PUSH
55042: LD_VAR 0 64
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: PUSH
55055: LD_VAR 0 4
55059: PUSH
55060: LD_INT 1
55062: PLUS
55063: ARRAY
55064: ST_TO_ADDR
55065: GO 55068
55067: POP
// temp_list2 = [ ] ;
55068: LD_ADDR_VAR 0 10
55072: PUSH
55073: EMPTY
55074: ST_TO_ADDR
// for i in temp_list do
55075: LD_ADDR_VAR 0 8
55079: PUSH
55080: LD_VAR 0 9
55084: PUSH
55085: FOR_IN
55086: IFFALSE 55138
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55088: LD_ADDR_VAR 0 10
55092: PUSH
55093: LD_VAR 0 10
55097: PUSH
55098: LD_VAR 0 8
55102: PUSH
55103: LD_INT 1
55105: ARRAY
55106: PUSH
55107: LD_VAR 0 2
55111: PLUS
55112: PUSH
55113: LD_VAR 0 8
55117: PUSH
55118: LD_INT 2
55120: ARRAY
55121: PUSH
55122: LD_VAR 0 3
55126: PLUS
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: ADD
55135: ST_TO_ADDR
55136: GO 55085
55138: POP
55139: POP
// result = temp_list2 ;
55140: LD_ADDR_VAR 0 7
55144: PUSH
55145: LD_VAR 0 10
55149: ST_TO_ADDR
// end ;
55150: LD_VAR 0 7
55154: RET
// export function EnemyInRange ( unit , dist ) ; begin
55155: LD_INT 0
55157: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55158: LD_ADDR_VAR 0 3
55162: PUSH
55163: LD_VAR 0 1
55167: PPUSH
55168: CALL_OW 255
55172: PPUSH
55173: LD_VAR 0 1
55177: PPUSH
55178: CALL_OW 250
55182: PPUSH
55183: LD_VAR 0 1
55187: PPUSH
55188: CALL_OW 251
55192: PPUSH
55193: LD_VAR 0 2
55197: PPUSH
55198: CALL 28528 0 4
55202: PUSH
55203: LD_INT 4
55205: ARRAY
55206: ST_TO_ADDR
// end ;
55207: LD_VAR 0 3
55211: RET
// export function PlayerSeeMe ( unit ) ; begin
55212: LD_INT 0
55214: PPUSH
// result := See ( your_side , unit ) ;
55215: LD_ADDR_VAR 0 2
55219: PUSH
55220: LD_OWVAR 2
55224: PPUSH
55225: LD_VAR 0 1
55229: PPUSH
55230: CALL_OW 292
55234: ST_TO_ADDR
// end ;
55235: LD_VAR 0 2
55239: RET
// export function ReverseDir ( unit ) ; begin
55240: LD_INT 0
55242: PPUSH
// if not unit then
55243: LD_VAR 0 1
55247: NOT
55248: IFFALSE 55252
// exit ;
55250: GO 55275
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55252: LD_ADDR_VAR 0 2
55256: PUSH
55257: LD_VAR 0 1
55261: PPUSH
55262: CALL_OW 254
55266: PUSH
55267: LD_INT 3
55269: PLUS
55270: PUSH
55271: LD_INT 6
55273: MOD
55274: ST_TO_ADDR
// end ;
55275: LD_VAR 0 2
55279: RET
// export function ReverseArray ( array ) ; var i ; begin
55280: LD_INT 0
55282: PPUSH
55283: PPUSH
// if not array then
55284: LD_VAR 0 1
55288: NOT
55289: IFFALSE 55293
// exit ;
55291: GO 55348
// result := [ ] ;
55293: LD_ADDR_VAR 0 2
55297: PUSH
55298: EMPTY
55299: ST_TO_ADDR
// for i := array downto 1 do
55300: LD_ADDR_VAR 0 3
55304: PUSH
55305: DOUBLE
55306: LD_VAR 0 1
55310: INC
55311: ST_TO_ADDR
55312: LD_INT 1
55314: PUSH
55315: FOR_DOWNTO
55316: IFFALSE 55346
// result := Join ( result , array [ i ] ) ;
55318: LD_ADDR_VAR 0 2
55322: PUSH
55323: LD_VAR 0 2
55327: PPUSH
55328: LD_VAR 0 1
55332: PUSH
55333: LD_VAR 0 3
55337: ARRAY
55338: PPUSH
55339: CALL 59993 0 2
55343: ST_TO_ADDR
55344: GO 55315
55346: POP
55347: POP
// end ;
55348: LD_VAR 0 2
55352: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55353: LD_INT 0
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
// if not unit or not hexes then
55361: LD_VAR 0 1
55365: NOT
55366: PUSH
55367: LD_VAR 0 2
55371: NOT
55372: OR
55373: IFFALSE 55377
// exit ;
55375: GO 55500
// dist := 9999 ;
55377: LD_ADDR_VAR 0 5
55381: PUSH
55382: LD_INT 9999
55384: ST_TO_ADDR
// for i = 1 to hexes do
55385: LD_ADDR_VAR 0 4
55389: PUSH
55390: DOUBLE
55391: LD_INT 1
55393: DEC
55394: ST_TO_ADDR
55395: LD_VAR 0 2
55399: PUSH
55400: FOR_TO
55401: IFFALSE 55488
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55403: LD_ADDR_VAR 0 6
55407: PUSH
55408: LD_VAR 0 1
55412: PPUSH
55413: LD_VAR 0 2
55417: PUSH
55418: LD_VAR 0 4
55422: ARRAY
55423: PUSH
55424: LD_INT 1
55426: ARRAY
55427: PPUSH
55428: LD_VAR 0 2
55432: PUSH
55433: LD_VAR 0 4
55437: ARRAY
55438: PUSH
55439: LD_INT 2
55441: ARRAY
55442: PPUSH
55443: CALL_OW 297
55447: ST_TO_ADDR
// if tdist < dist then
55448: LD_VAR 0 6
55452: PUSH
55453: LD_VAR 0 5
55457: LESS
55458: IFFALSE 55486
// begin hex := hexes [ i ] ;
55460: LD_ADDR_VAR 0 8
55464: PUSH
55465: LD_VAR 0 2
55469: PUSH
55470: LD_VAR 0 4
55474: ARRAY
55475: ST_TO_ADDR
// dist := tdist ;
55476: LD_ADDR_VAR 0 5
55480: PUSH
55481: LD_VAR 0 6
55485: ST_TO_ADDR
// end ; end ;
55486: GO 55400
55488: POP
55489: POP
// result := hex ;
55490: LD_ADDR_VAR 0 3
55494: PUSH
55495: LD_VAR 0 8
55499: ST_TO_ADDR
// end ;
55500: LD_VAR 0 3
55504: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55505: LD_INT 0
55507: PPUSH
55508: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55509: LD_VAR 0 1
55513: NOT
55514: PUSH
55515: LD_VAR 0 1
55519: PUSH
55520: LD_INT 21
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 23
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PPUSH
55544: CALL_OW 69
55548: IN
55549: NOT
55550: OR
55551: IFFALSE 55555
// exit ;
55553: GO 55602
// for i = 1 to 3 do
55555: LD_ADDR_VAR 0 3
55559: PUSH
55560: DOUBLE
55561: LD_INT 1
55563: DEC
55564: ST_TO_ADDR
55565: LD_INT 3
55567: PUSH
55568: FOR_TO
55569: IFFALSE 55600
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55571: LD_VAR 0 1
55575: PPUSH
55576: CALL_OW 250
55580: PPUSH
55581: LD_VAR 0 1
55585: PPUSH
55586: CALL_OW 251
55590: PPUSH
55591: LD_INT 1
55593: PPUSH
55594: CALL_OW 453
55598: GO 55568
55600: POP
55601: POP
// end ;
55602: LD_VAR 0 2
55606: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55607: LD_INT 0
55609: PPUSH
55610: PPUSH
55611: PPUSH
55612: PPUSH
55613: PPUSH
55614: PPUSH
// if not unit or not enemy_unit then
55615: LD_VAR 0 1
55619: NOT
55620: PUSH
55621: LD_VAR 0 2
55625: NOT
55626: OR
55627: IFFALSE 55631
// exit ;
55629: GO 56098
// if GetLives ( i ) < 250 then
55631: LD_VAR 0 4
55635: PPUSH
55636: CALL_OW 256
55640: PUSH
55641: LD_INT 250
55643: LESS
55644: IFFALSE 55657
// begin ComAutodestruct ( i ) ;
55646: LD_VAR 0 4
55650: PPUSH
55651: CALL 55505 0 1
// exit ;
55655: GO 56098
// end ; x := GetX ( enemy_unit ) ;
55657: LD_ADDR_VAR 0 7
55661: PUSH
55662: LD_VAR 0 2
55666: PPUSH
55667: CALL_OW 250
55671: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55672: LD_ADDR_VAR 0 8
55676: PUSH
55677: LD_VAR 0 2
55681: PPUSH
55682: CALL_OW 251
55686: ST_TO_ADDR
// if not x or not y then
55687: LD_VAR 0 7
55691: NOT
55692: PUSH
55693: LD_VAR 0 8
55697: NOT
55698: OR
55699: IFFALSE 55703
// exit ;
55701: GO 56098
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55703: LD_ADDR_VAR 0 6
55707: PUSH
55708: LD_VAR 0 7
55712: PPUSH
55713: LD_INT 0
55715: PPUSH
55716: LD_INT 4
55718: PPUSH
55719: CALL_OW 272
55723: PUSH
55724: LD_VAR 0 8
55728: PPUSH
55729: LD_INT 0
55731: PPUSH
55732: LD_INT 4
55734: PPUSH
55735: CALL_OW 273
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_VAR 0 7
55748: PPUSH
55749: LD_INT 1
55751: PPUSH
55752: LD_INT 4
55754: PPUSH
55755: CALL_OW 272
55759: PUSH
55760: LD_VAR 0 8
55764: PPUSH
55765: LD_INT 1
55767: PPUSH
55768: LD_INT 4
55770: PPUSH
55771: CALL_OW 273
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_VAR 0 7
55784: PPUSH
55785: LD_INT 2
55787: PPUSH
55788: LD_INT 4
55790: PPUSH
55791: CALL_OW 272
55795: PUSH
55796: LD_VAR 0 8
55800: PPUSH
55801: LD_INT 2
55803: PPUSH
55804: LD_INT 4
55806: PPUSH
55807: CALL_OW 273
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_VAR 0 7
55820: PPUSH
55821: LD_INT 3
55823: PPUSH
55824: LD_INT 4
55826: PPUSH
55827: CALL_OW 272
55831: PUSH
55832: LD_VAR 0 8
55836: PPUSH
55837: LD_INT 3
55839: PPUSH
55840: LD_INT 4
55842: PPUSH
55843: CALL_OW 273
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_VAR 0 7
55856: PPUSH
55857: LD_INT 4
55859: PPUSH
55860: LD_INT 4
55862: PPUSH
55863: CALL_OW 272
55867: PUSH
55868: LD_VAR 0 8
55872: PPUSH
55873: LD_INT 4
55875: PPUSH
55876: LD_INT 4
55878: PPUSH
55879: CALL_OW 273
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_VAR 0 7
55892: PPUSH
55893: LD_INT 5
55895: PPUSH
55896: LD_INT 4
55898: PPUSH
55899: CALL_OW 272
55903: PUSH
55904: LD_VAR 0 8
55908: PPUSH
55909: LD_INT 5
55911: PPUSH
55912: LD_INT 4
55914: PPUSH
55915: CALL_OW 273
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// for i = tmp downto 1 do
55932: LD_ADDR_VAR 0 4
55936: PUSH
55937: DOUBLE
55938: LD_VAR 0 6
55942: INC
55943: ST_TO_ADDR
55944: LD_INT 1
55946: PUSH
55947: FOR_DOWNTO
55948: IFFALSE 56049
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55950: LD_VAR 0 6
55954: PUSH
55955: LD_VAR 0 4
55959: ARRAY
55960: PUSH
55961: LD_INT 1
55963: ARRAY
55964: PPUSH
55965: LD_VAR 0 6
55969: PUSH
55970: LD_VAR 0 4
55974: ARRAY
55975: PUSH
55976: LD_INT 2
55978: ARRAY
55979: PPUSH
55980: CALL_OW 488
55984: NOT
55985: PUSH
55986: LD_VAR 0 6
55990: PUSH
55991: LD_VAR 0 4
55995: ARRAY
55996: PUSH
55997: LD_INT 1
55999: ARRAY
56000: PPUSH
56001: LD_VAR 0 6
56005: PUSH
56006: LD_VAR 0 4
56010: ARRAY
56011: PUSH
56012: LD_INT 2
56014: ARRAY
56015: PPUSH
56016: CALL_OW 428
56020: PUSH
56021: LD_INT 0
56023: NONEQUAL
56024: OR
56025: IFFALSE 56047
// tmp := Delete ( tmp , i ) ;
56027: LD_ADDR_VAR 0 6
56031: PUSH
56032: LD_VAR 0 6
56036: PPUSH
56037: LD_VAR 0 4
56041: PPUSH
56042: CALL_OW 3
56046: ST_TO_ADDR
56047: GO 55947
56049: POP
56050: POP
// j := GetClosestHex ( unit , tmp ) ;
56051: LD_ADDR_VAR 0 5
56055: PUSH
56056: LD_VAR 0 1
56060: PPUSH
56061: LD_VAR 0 6
56065: PPUSH
56066: CALL 55353 0 2
56070: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56071: LD_VAR 0 1
56075: PPUSH
56076: LD_VAR 0 5
56080: PUSH
56081: LD_INT 1
56083: ARRAY
56084: PPUSH
56085: LD_VAR 0 5
56089: PUSH
56090: LD_INT 2
56092: ARRAY
56093: PPUSH
56094: CALL_OW 111
// end ;
56098: LD_VAR 0 3
56102: RET
// export function PrepareApemanSoldier ( ) ; begin
56103: LD_INT 0
56105: PPUSH
// uc_nation := 0 ;
56106: LD_ADDR_OWVAR 21
56110: PUSH
56111: LD_INT 0
56113: ST_TO_ADDR
// hc_sex := sex_male ;
56114: LD_ADDR_OWVAR 27
56118: PUSH
56119: LD_INT 1
56121: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56122: LD_ADDR_OWVAR 28
56126: PUSH
56127: LD_INT 15
56129: ST_TO_ADDR
// hc_gallery :=  ;
56130: LD_ADDR_OWVAR 33
56134: PUSH
56135: LD_STRING 
56137: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56138: LD_ADDR_OWVAR 31
56142: PUSH
56143: LD_INT 0
56145: PPUSH
56146: LD_INT 3
56148: PPUSH
56149: CALL_OW 12
56153: PUSH
56154: LD_INT 0
56156: PPUSH
56157: LD_INT 3
56159: PPUSH
56160: CALL_OW 12
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: ST_TO_ADDR
// end ;
56177: LD_VAR 0 1
56181: RET
// export function PrepareApemanEngineer ( ) ; begin
56182: LD_INT 0
56184: PPUSH
// uc_nation := 0 ;
56185: LD_ADDR_OWVAR 21
56189: PUSH
56190: LD_INT 0
56192: ST_TO_ADDR
// hc_sex := sex_male ;
56193: LD_ADDR_OWVAR 27
56197: PUSH
56198: LD_INT 1
56200: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56201: LD_ADDR_OWVAR 28
56205: PUSH
56206: LD_INT 16
56208: ST_TO_ADDR
// hc_gallery :=  ;
56209: LD_ADDR_OWVAR 33
56213: PUSH
56214: LD_STRING 
56216: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56217: LD_ADDR_OWVAR 31
56221: PUSH
56222: LD_INT 0
56224: PPUSH
56225: LD_INT 3
56227: PPUSH
56228: CALL_OW 12
56232: PUSH
56233: LD_INT 0
56235: PPUSH
56236: LD_INT 3
56238: PPUSH
56239: CALL_OW 12
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// end ;
56256: LD_VAR 0 1
56260: RET
// export function PrepareApeman ( agressivity ) ; begin
56261: LD_INT 0
56263: PPUSH
// uc_side := 0 ;
56264: LD_ADDR_OWVAR 20
56268: PUSH
56269: LD_INT 0
56271: ST_TO_ADDR
// uc_nation := 0 ;
56272: LD_ADDR_OWVAR 21
56276: PUSH
56277: LD_INT 0
56279: ST_TO_ADDR
// hc_sex := sex_male ;
56280: LD_ADDR_OWVAR 27
56284: PUSH
56285: LD_INT 1
56287: ST_TO_ADDR
// hc_class := class_apeman ;
56288: LD_ADDR_OWVAR 28
56292: PUSH
56293: LD_INT 12
56295: ST_TO_ADDR
// hc_gallery :=  ;
56296: LD_ADDR_OWVAR 33
56300: PUSH
56301: LD_STRING 
56303: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56304: LD_ADDR_OWVAR 35
56308: PUSH
56309: LD_VAR 0 1
56313: NEG
56314: PPUSH
56315: LD_VAR 0 1
56319: PPUSH
56320: CALL_OW 12
56324: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56325: LD_ADDR_OWVAR 31
56329: PUSH
56330: LD_INT 0
56332: PPUSH
56333: LD_INT 3
56335: PPUSH
56336: CALL_OW 12
56340: PUSH
56341: LD_INT 0
56343: PPUSH
56344: LD_INT 3
56346: PPUSH
56347: CALL_OW 12
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: ST_TO_ADDR
// end ;
56364: LD_VAR 0 2
56368: RET
// export function PrepareTiger ( agressivity ) ; begin
56369: LD_INT 0
56371: PPUSH
// uc_side := 0 ;
56372: LD_ADDR_OWVAR 20
56376: PUSH
56377: LD_INT 0
56379: ST_TO_ADDR
// uc_nation := 0 ;
56380: LD_ADDR_OWVAR 21
56384: PUSH
56385: LD_INT 0
56387: ST_TO_ADDR
// hc_class := class_tiger ;
56388: LD_ADDR_OWVAR 28
56392: PUSH
56393: LD_INT 14
56395: ST_TO_ADDR
// hc_gallery :=  ;
56396: LD_ADDR_OWVAR 33
56400: PUSH
56401: LD_STRING 
56403: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56404: LD_ADDR_OWVAR 35
56408: PUSH
56409: LD_VAR 0 1
56413: NEG
56414: PPUSH
56415: LD_VAR 0 1
56419: PPUSH
56420: CALL_OW 12
56424: ST_TO_ADDR
// end ;
56425: LD_VAR 0 2
56429: RET
// export function PrepareEnchidna ( ) ; begin
56430: LD_INT 0
56432: PPUSH
// uc_side := 0 ;
56433: LD_ADDR_OWVAR 20
56437: PUSH
56438: LD_INT 0
56440: ST_TO_ADDR
// uc_nation := 0 ;
56441: LD_ADDR_OWVAR 21
56445: PUSH
56446: LD_INT 0
56448: ST_TO_ADDR
// hc_class := class_baggie ;
56449: LD_ADDR_OWVAR 28
56453: PUSH
56454: LD_INT 13
56456: ST_TO_ADDR
// hc_gallery :=  ;
56457: LD_ADDR_OWVAR 33
56461: PUSH
56462: LD_STRING 
56464: ST_TO_ADDR
// end ;
56465: LD_VAR 0 1
56469: RET
// export function PrepareFrog ( ) ; begin
56470: LD_INT 0
56472: PPUSH
// uc_side := 0 ;
56473: LD_ADDR_OWVAR 20
56477: PUSH
56478: LD_INT 0
56480: ST_TO_ADDR
// uc_nation := 0 ;
56481: LD_ADDR_OWVAR 21
56485: PUSH
56486: LD_INT 0
56488: ST_TO_ADDR
// hc_class := class_frog ;
56489: LD_ADDR_OWVAR 28
56493: PUSH
56494: LD_INT 19
56496: ST_TO_ADDR
// hc_gallery :=  ;
56497: LD_ADDR_OWVAR 33
56501: PUSH
56502: LD_STRING 
56504: ST_TO_ADDR
// end ;
56505: LD_VAR 0 1
56509: RET
// export function PrepareFish ( ) ; begin
56510: LD_INT 0
56512: PPUSH
// uc_side := 0 ;
56513: LD_ADDR_OWVAR 20
56517: PUSH
56518: LD_INT 0
56520: ST_TO_ADDR
// uc_nation := 0 ;
56521: LD_ADDR_OWVAR 21
56525: PUSH
56526: LD_INT 0
56528: ST_TO_ADDR
// hc_class := class_fish ;
56529: LD_ADDR_OWVAR 28
56533: PUSH
56534: LD_INT 20
56536: ST_TO_ADDR
// hc_gallery :=  ;
56537: LD_ADDR_OWVAR 33
56541: PUSH
56542: LD_STRING 
56544: ST_TO_ADDR
// end ;
56545: LD_VAR 0 1
56549: RET
// export function PrepareBird ( ) ; begin
56550: LD_INT 0
56552: PPUSH
// uc_side := 0 ;
56553: LD_ADDR_OWVAR 20
56557: PUSH
56558: LD_INT 0
56560: ST_TO_ADDR
// uc_nation := 0 ;
56561: LD_ADDR_OWVAR 21
56565: PUSH
56566: LD_INT 0
56568: ST_TO_ADDR
// hc_class := class_phororhacos ;
56569: LD_ADDR_OWVAR 28
56573: PUSH
56574: LD_INT 18
56576: ST_TO_ADDR
// hc_gallery :=  ;
56577: LD_ADDR_OWVAR 33
56581: PUSH
56582: LD_STRING 
56584: ST_TO_ADDR
// end ;
56585: LD_VAR 0 1
56589: RET
// export function PrepareHorse ( ) ; begin
56590: LD_INT 0
56592: PPUSH
// uc_side := 0 ;
56593: LD_ADDR_OWVAR 20
56597: PUSH
56598: LD_INT 0
56600: ST_TO_ADDR
// uc_nation := 0 ;
56601: LD_ADDR_OWVAR 21
56605: PUSH
56606: LD_INT 0
56608: ST_TO_ADDR
// hc_class := class_horse ;
56609: LD_ADDR_OWVAR 28
56613: PUSH
56614: LD_INT 21
56616: ST_TO_ADDR
// hc_gallery :=  ;
56617: LD_ADDR_OWVAR 33
56621: PUSH
56622: LD_STRING 
56624: ST_TO_ADDR
// end ;
56625: LD_VAR 0 1
56629: RET
// export function PrepareMastodont ( ) ; begin
56630: LD_INT 0
56632: PPUSH
// uc_side := 0 ;
56633: LD_ADDR_OWVAR 20
56637: PUSH
56638: LD_INT 0
56640: ST_TO_ADDR
// uc_nation := 0 ;
56641: LD_ADDR_OWVAR 21
56645: PUSH
56646: LD_INT 0
56648: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56649: LD_ADDR_OWVAR 37
56653: PUSH
56654: LD_INT 31
56656: ST_TO_ADDR
// vc_control := control_rider ;
56657: LD_ADDR_OWVAR 38
56661: PUSH
56662: LD_INT 4
56664: ST_TO_ADDR
// end ;
56665: LD_VAR 0 1
56669: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56670: LD_INT 0
56672: PPUSH
56673: PPUSH
56674: PPUSH
// uc_side = 0 ;
56675: LD_ADDR_OWVAR 20
56679: PUSH
56680: LD_INT 0
56682: ST_TO_ADDR
// uc_nation = 0 ;
56683: LD_ADDR_OWVAR 21
56687: PUSH
56688: LD_INT 0
56690: ST_TO_ADDR
// InitHc_All ( ) ;
56691: CALL_OW 584
// InitVc ;
56695: CALL_OW 20
// if mastodonts then
56699: LD_VAR 0 6
56703: IFFALSE 56770
// for i = 1 to mastodonts do
56705: LD_ADDR_VAR 0 11
56709: PUSH
56710: DOUBLE
56711: LD_INT 1
56713: DEC
56714: ST_TO_ADDR
56715: LD_VAR 0 6
56719: PUSH
56720: FOR_TO
56721: IFFALSE 56768
// begin vc_chassis := 31 ;
56723: LD_ADDR_OWVAR 37
56727: PUSH
56728: LD_INT 31
56730: ST_TO_ADDR
// vc_control := control_rider ;
56731: LD_ADDR_OWVAR 38
56735: PUSH
56736: LD_INT 4
56738: ST_TO_ADDR
// animal := CreateVehicle ;
56739: LD_ADDR_VAR 0 12
56743: PUSH
56744: CALL_OW 45
56748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56749: LD_VAR 0 12
56753: PPUSH
56754: LD_VAR 0 8
56758: PPUSH
56759: LD_INT 0
56761: PPUSH
56762: CALL 58898 0 3
// end ;
56766: GO 56720
56768: POP
56769: POP
// if horses then
56770: LD_VAR 0 5
56774: IFFALSE 56841
// for i = 1 to horses do
56776: LD_ADDR_VAR 0 11
56780: PUSH
56781: DOUBLE
56782: LD_INT 1
56784: DEC
56785: ST_TO_ADDR
56786: LD_VAR 0 5
56790: PUSH
56791: FOR_TO
56792: IFFALSE 56839
// begin hc_class := 21 ;
56794: LD_ADDR_OWVAR 28
56798: PUSH
56799: LD_INT 21
56801: ST_TO_ADDR
// hc_gallery :=  ;
56802: LD_ADDR_OWVAR 33
56806: PUSH
56807: LD_STRING 
56809: ST_TO_ADDR
// animal := CreateHuman ;
56810: LD_ADDR_VAR 0 12
56814: PUSH
56815: CALL_OW 44
56819: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56820: LD_VAR 0 12
56824: PPUSH
56825: LD_VAR 0 8
56829: PPUSH
56830: LD_INT 0
56832: PPUSH
56833: CALL 58898 0 3
// end ;
56837: GO 56791
56839: POP
56840: POP
// if birds then
56841: LD_VAR 0 1
56845: IFFALSE 56912
// for i = 1 to birds do
56847: LD_ADDR_VAR 0 11
56851: PUSH
56852: DOUBLE
56853: LD_INT 1
56855: DEC
56856: ST_TO_ADDR
56857: LD_VAR 0 1
56861: PUSH
56862: FOR_TO
56863: IFFALSE 56910
// begin hc_class := 18 ;
56865: LD_ADDR_OWVAR 28
56869: PUSH
56870: LD_INT 18
56872: ST_TO_ADDR
// hc_gallery =  ;
56873: LD_ADDR_OWVAR 33
56877: PUSH
56878: LD_STRING 
56880: ST_TO_ADDR
// animal := CreateHuman ;
56881: LD_ADDR_VAR 0 12
56885: PUSH
56886: CALL_OW 44
56890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56891: LD_VAR 0 12
56895: PPUSH
56896: LD_VAR 0 8
56900: PPUSH
56901: LD_INT 0
56903: PPUSH
56904: CALL 58898 0 3
// end ;
56908: GO 56862
56910: POP
56911: POP
// if tigers then
56912: LD_VAR 0 2
56916: IFFALSE 57000
// for i = 1 to tigers do
56918: LD_ADDR_VAR 0 11
56922: PUSH
56923: DOUBLE
56924: LD_INT 1
56926: DEC
56927: ST_TO_ADDR
56928: LD_VAR 0 2
56932: PUSH
56933: FOR_TO
56934: IFFALSE 56998
// begin hc_class = class_tiger ;
56936: LD_ADDR_OWVAR 28
56940: PUSH
56941: LD_INT 14
56943: ST_TO_ADDR
// hc_gallery =  ;
56944: LD_ADDR_OWVAR 33
56948: PUSH
56949: LD_STRING 
56951: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56952: LD_ADDR_OWVAR 35
56956: PUSH
56957: LD_INT 7
56959: NEG
56960: PPUSH
56961: LD_INT 7
56963: PPUSH
56964: CALL_OW 12
56968: ST_TO_ADDR
// animal := CreateHuman ;
56969: LD_ADDR_VAR 0 12
56973: PUSH
56974: CALL_OW 44
56978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56979: LD_VAR 0 12
56983: PPUSH
56984: LD_VAR 0 8
56988: PPUSH
56989: LD_INT 0
56991: PPUSH
56992: CALL 58898 0 3
// end ;
56996: GO 56933
56998: POP
56999: POP
// if apemans then
57000: LD_VAR 0 3
57004: IFFALSE 57127
// for i = 1 to apemans do
57006: LD_ADDR_VAR 0 11
57010: PUSH
57011: DOUBLE
57012: LD_INT 1
57014: DEC
57015: ST_TO_ADDR
57016: LD_VAR 0 3
57020: PUSH
57021: FOR_TO
57022: IFFALSE 57125
// begin hc_class = class_apeman ;
57024: LD_ADDR_OWVAR 28
57028: PUSH
57029: LD_INT 12
57031: ST_TO_ADDR
// hc_gallery =  ;
57032: LD_ADDR_OWVAR 33
57036: PUSH
57037: LD_STRING 
57039: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57040: LD_ADDR_OWVAR 35
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PPUSH
57049: LD_INT 2
57051: PPUSH
57052: CALL_OW 12
57056: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57057: LD_ADDR_OWVAR 31
57061: PUSH
57062: LD_INT 1
57064: PPUSH
57065: LD_INT 3
57067: PPUSH
57068: CALL_OW 12
57072: PUSH
57073: LD_INT 1
57075: PPUSH
57076: LD_INT 3
57078: PPUSH
57079: CALL_OW 12
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// animal := CreateHuman ;
57096: LD_ADDR_VAR 0 12
57100: PUSH
57101: CALL_OW 44
57105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57106: LD_VAR 0 12
57110: PPUSH
57111: LD_VAR 0 8
57115: PPUSH
57116: LD_INT 0
57118: PPUSH
57119: CALL 58898 0 3
// end ;
57123: GO 57021
57125: POP
57126: POP
// if enchidnas then
57127: LD_VAR 0 4
57131: IFFALSE 57198
// for i = 1 to enchidnas do
57133: LD_ADDR_VAR 0 11
57137: PUSH
57138: DOUBLE
57139: LD_INT 1
57141: DEC
57142: ST_TO_ADDR
57143: LD_VAR 0 4
57147: PUSH
57148: FOR_TO
57149: IFFALSE 57196
// begin hc_class = 13 ;
57151: LD_ADDR_OWVAR 28
57155: PUSH
57156: LD_INT 13
57158: ST_TO_ADDR
// hc_gallery =  ;
57159: LD_ADDR_OWVAR 33
57163: PUSH
57164: LD_STRING 
57166: ST_TO_ADDR
// animal := CreateHuman ;
57167: LD_ADDR_VAR 0 12
57171: PUSH
57172: CALL_OW 44
57176: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57177: LD_VAR 0 12
57181: PPUSH
57182: LD_VAR 0 8
57186: PPUSH
57187: LD_INT 0
57189: PPUSH
57190: CALL 58898 0 3
// end ;
57194: GO 57148
57196: POP
57197: POP
// if fishes then
57198: LD_VAR 0 7
57202: IFFALSE 57269
// for i = 1 to fishes do
57204: LD_ADDR_VAR 0 11
57208: PUSH
57209: DOUBLE
57210: LD_INT 1
57212: DEC
57213: ST_TO_ADDR
57214: LD_VAR 0 7
57218: PUSH
57219: FOR_TO
57220: IFFALSE 57267
// begin hc_class = 20 ;
57222: LD_ADDR_OWVAR 28
57226: PUSH
57227: LD_INT 20
57229: ST_TO_ADDR
// hc_gallery =  ;
57230: LD_ADDR_OWVAR 33
57234: PUSH
57235: LD_STRING 
57237: ST_TO_ADDR
// animal := CreateHuman ;
57238: LD_ADDR_VAR 0 12
57242: PUSH
57243: CALL_OW 44
57247: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57248: LD_VAR 0 12
57252: PPUSH
57253: LD_VAR 0 9
57257: PPUSH
57258: LD_INT 0
57260: PPUSH
57261: CALL 58898 0 3
// end ;
57265: GO 57219
57267: POP
57268: POP
// end ;
57269: LD_VAR 0 10
57273: RET
// export function WantHeal ( sci , unit ) ; begin
57274: LD_INT 0
57276: PPUSH
// if GetTaskList ( sci ) > 0 then
57277: LD_VAR 0 1
57281: PPUSH
57282: CALL_OW 437
57286: PUSH
57287: LD_INT 0
57289: GREATER
57290: IFFALSE 57360
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57292: LD_VAR 0 1
57296: PPUSH
57297: CALL_OW 437
57301: PUSH
57302: LD_INT 1
57304: ARRAY
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PUSH
57310: LD_STRING l
57312: EQUAL
57313: PUSH
57314: LD_VAR 0 1
57318: PPUSH
57319: CALL_OW 437
57323: PUSH
57324: LD_INT 1
57326: ARRAY
57327: PUSH
57328: LD_INT 4
57330: ARRAY
57331: PUSH
57332: LD_VAR 0 2
57336: EQUAL
57337: AND
57338: IFFALSE 57350
// result := true else
57340: LD_ADDR_VAR 0 3
57344: PUSH
57345: LD_INT 1
57347: ST_TO_ADDR
57348: GO 57358
// result := false ;
57350: LD_ADDR_VAR 0 3
57354: PUSH
57355: LD_INT 0
57357: ST_TO_ADDR
// end else
57358: GO 57368
// result := false ;
57360: LD_ADDR_VAR 0 3
57364: PUSH
57365: LD_INT 0
57367: ST_TO_ADDR
// end ;
57368: LD_VAR 0 3
57372: RET
// export function HealTarget ( sci ) ; begin
57373: LD_INT 0
57375: PPUSH
// if not sci then
57376: LD_VAR 0 1
57380: NOT
57381: IFFALSE 57385
// exit ;
57383: GO 57450
// result := 0 ;
57385: LD_ADDR_VAR 0 2
57389: PUSH
57390: LD_INT 0
57392: ST_TO_ADDR
// if GetTaskList ( sci ) then
57393: LD_VAR 0 1
57397: PPUSH
57398: CALL_OW 437
57402: IFFALSE 57450
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57404: LD_VAR 0 1
57408: PPUSH
57409: CALL_OW 437
57413: PUSH
57414: LD_INT 1
57416: ARRAY
57417: PUSH
57418: LD_INT 1
57420: ARRAY
57421: PUSH
57422: LD_STRING l
57424: EQUAL
57425: IFFALSE 57450
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57427: LD_ADDR_VAR 0 2
57431: PUSH
57432: LD_VAR 0 1
57436: PPUSH
57437: CALL_OW 437
57441: PUSH
57442: LD_INT 1
57444: ARRAY
57445: PUSH
57446: LD_INT 4
57448: ARRAY
57449: ST_TO_ADDR
// end ;
57450: LD_VAR 0 2
57454: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57455: LD_INT 0
57457: PPUSH
57458: PPUSH
57459: PPUSH
57460: PPUSH
// if not base_units then
57461: LD_VAR 0 1
57465: NOT
57466: IFFALSE 57470
// exit ;
57468: GO 57557
// result := false ;
57470: LD_ADDR_VAR 0 2
57474: PUSH
57475: LD_INT 0
57477: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57478: LD_ADDR_VAR 0 5
57482: PUSH
57483: LD_VAR 0 1
57487: PPUSH
57488: LD_INT 21
57490: PUSH
57491: LD_INT 3
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PPUSH
57498: CALL_OW 72
57502: ST_TO_ADDR
// if not tmp then
57503: LD_VAR 0 5
57507: NOT
57508: IFFALSE 57512
// exit ;
57510: GO 57557
// for i in tmp do
57512: LD_ADDR_VAR 0 3
57516: PUSH
57517: LD_VAR 0 5
57521: PUSH
57522: FOR_IN
57523: IFFALSE 57555
// begin result := EnemyInRange ( i , 22 ) ;
57525: LD_ADDR_VAR 0 2
57529: PUSH
57530: LD_VAR 0 3
57534: PPUSH
57535: LD_INT 22
57537: PPUSH
57538: CALL 55155 0 2
57542: ST_TO_ADDR
// if result then
57543: LD_VAR 0 2
57547: IFFALSE 57553
// exit ;
57549: POP
57550: POP
57551: GO 57557
// end ;
57553: GO 57522
57555: POP
57556: POP
// end ;
57557: LD_VAR 0 2
57561: RET
// export function FilterByTag ( units , tag ) ; begin
57562: LD_INT 0
57564: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57565: LD_ADDR_VAR 0 3
57569: PUSH
57570: LD_VAR 0 1
57574: PPUSH
57575: LD_INT 120
57577: PUSH
57578: LD_VAR 0 2
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PPUSH
57587: CALL_OW 72
57591: ST_TO_ADDR
// end ;
57592: LD_VAR 0 3
57596: RET
// export function IsDriver ( un ) ; begin
57597: LD_INT 0
57599: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57600: LD_ADDR_VAR 0 2
57604: PUSH
57605: LD_VAR 0 1
57609: PUSH
57610: LD_INT 55
57612: PUSH
57613: EMPTY
57614: LIST
57615: PPUSH
57616: CALL_OW 69
57620: IN
57621: ST_TO_ADDR
// end ;
57622: LD_VAR 0 2
57626: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57627: LD_INT 0
57629: PPUSH
57630: PPUSH
// list := [ ] ;
57631: LD_ADDR_VAR 0 5
57635: PUSH
57636: EMPTY
57637: ST_TO_ADDR
// case d of 0 :
57638: LD_VAR 0 3
57642: PUSH
57643: LD_INT 0
57645: DOUBLE
57646: EQUAL
57647: IFTRUE 57651
57649: GO 57784
57651: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57652: LD_ADDR_VAR 0 5
57656: PUSH
57657: LD_VAR 0 1
57661: PUSH
57662: LD_INT 4
57664: MINUS
57665: PUSH
57666: LD_VAR 0 2
57670: PUSH
57671: LD_INT 4
57673: MINUS
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: PUSH
57683: LD_VAR 0 1
57687: PUSH
57688: LD_INT 3
57690: MINUS
57691: PUSH
57692: LD_VAR 0 2
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: PUSH
57705: LD_VAR 0 1
57709: PUSH
57710: LD_INT 4
57712: PLUS
57713: PUSH
57714: LD_VAR 0 2
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: LIST
57726: PUSH
57727: LD_VAR 0 1
57731: PUSH
57732: LD_INT 3
57734: PLUS
57735: PUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_INT 3
57743: PLUS
57744: PUSH
57745: LD_INT 5
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: PUSH
57753: LD_VAR 0 1
57757: PUSH
57758: LD_VAR 0 2
57762: PUSH
57763: LD_INT 4
57765: PLUS
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: ST_TO_ADDR
// end ; 1 :
57782: GO 58482
57784: LD_INT 1
57786: DOUBLE
57787: EQUAL
57788: IFTRUE 57792
57790: GO 57925
57792: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57793: LD_ADDR_VAR 0 5
57797: PUSH
57798: LD_VAR 0 1
57802: PUSH
57803: LD_VAR 0 2
57807: PUSH
57808: LD_INT 4
57810: MINUS
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PUSH
57820: LD_VAR 0 1
57824: PUSH
57825: LD_INT 3
57827: MINUS
57828: PUSH
57829: LD_VAR 0 2
57833: PUSH
57834: LD_INT 3
57836: MINUS
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: LIST
57845: PUSH
57846: LD_VAR 0 1
57850: PUSH
57851: LD_INT 4
57853: MINUS
57854: PUSH
57855: LD_VAR 0 2
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: PUSH
57868: LD_VAR 0 1
57872: PUSH
57873: LD_VAR 0 2
57877: PUSH
57878: LD_INT 3
57880: PLUS
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: PUSH
57890: LD_VAR 0 1
57894: PUSH
57895: LD_INT 4
57897: PLUS
57898: PUSH
57899: LD_VAR 0 2
57903: PUSH
57904: LD_INT 4
57906: PLUS
57907: PUSH
57908: LD_INT 5
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// end ; 2 :
57923: GO 58482
57925: LD_INT 2
57927: DOUBLE
57928: EQUAL
57929: IFTRUE 57933
57931: GO 58062
57933: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57934: LD_ADDR_VAR 0 5
57938: PUSH
57939: LD_VAR 0 1
57943: PUSH
57944: LD_VAR 0 2
57948: PUSH
57949: LD_INT 3
57951: MINUS
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: PUSH
57961: LD_VAR 0 1
57965: PUSH
57966: LD_INT 4
57968: PLUS
57969: PUSH
57970: LD_VAR 0 2
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: PUSH
57983: LD_VAR 0 1
57987: PUSH
57988: LD_VAR 0 2
57992: PUSH
57993: LD_INT 4
57995: PLUS
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: LIST
58004: PUSH
58005: LD_VAR 0 1
58009: PUSH
58010: LD_INT 3
58012: MINUS
58013: PUSH
58014: LD_VAR 0 2
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: PUSH
58027: LD_VAR 0 1
58031: PUSH
58032: LD_INT 4
58034: MINUS
58035: PUSH
58036: LD_VAR 0 2
58040: PUSH
58041: LD_INT 4
58043: MINUS
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// end ; 3 :
58060: GO 58482
58062: LD_INT 3
58064: DOUBLE
58065: EQUAL
58066: IFTRUE 58070
58068: GO 58203
58070: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58071: LD_ADDR_VAR 0 5
58075: PUSH
58076: LD_VAR 0 1
58080: PUSH
58081: LD_INT 3
58083: PLUS
58084: PUSH
58085: LD_VAR 0 2
58089: PUSH
58090: LD_INT 4
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: LIST
58097: PUSH
58098: LD_VAR 0 1
58102: PUSH
58103: LD_INT 4
58105: PLUS
58106: PUSH
58107: LD_VAR 0 2
58111: PUSH
58112: LD_INT 4
58114: PLUS
58115: PUSH
58116: LD_INT 5
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: PUSH
58124: LD_VAR 0 1
58128: PUSH
58129: LD_INT 4
58131: MINUS
58132: PUSH
58133: LD_VAR 0 2
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: LIST
58145: PUSH
58146: LD_VAR 0 1
58150: PUSH
58151: LD_VAR 0 2
58155: PUSH
58156: LD_INT 4
58158: MINUS
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: PUSH
58168: LD_VAR 0 1
58172: PUSH
58173: LD_INT 3
58175: MINUS
58176: PUSH
58177: LD_VAR 0 2
58181: PUSH
58182: LD_INT 3
58184: MINUS
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: ST_TO_ADDR
// end ; 4 :
58201: GO 58482
58203: LD_INT 4
58205: DOUBLE
58206: EQUAL
58207: IFTRUE 58211
58209: GO 58344
58211: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58212: LD_ADDR_VAR 0 5
58216: PUSH
58217: LD_VAR 0 1
58221: PUSH
58222: LD_VAR 0 2
58226: PUSH
58227: LD_INT 4
58229: PLUS
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: PUSH
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 3
58246: PLUS
58247: PUSH
58248: LD_VAR 0 2
58252: PUSH
58253: LD_INT 3
58255: PLUS
58256: PUSH
58257: LD_INT 5
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: LIST
58264: PUSH
58265: LD_VAR 0 1
58269: PUSH
58270: LD_INT 4
58272: PLUS
58273: PUSH
58274: LD_VAR 0 2
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: PUSH
58287: LD_VAR 0 1
58291: PUSH
58292: LD_VAR 0 2
58296: PUSH
58297: LD_INT 3
58299: MINUS
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: PUSH
58309: LD_VAR 0 1
58313: PUSH
58314: LD_INT 4
58316: MINUS
58317: PUSH
58318: LD_VAR 0 2
58322: PUSH
58323: LD_INT 4
58325: MINUS
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: ST_TO_ADDR
// end ; 5 :
58342: GO 58482
58344: LD_INT 5
58346: DOUBLE
58347: EQUAL
58348: IFTRUE 58352
58350: GO 58481
58352: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58353: LD_ADDR_VAR 0 5
58357: PUSH
58358: LD_VAR 0 1
58362: PUSH
58363: LD_INT 4
58365: MINUS
58366: PUSH
58367: LD_VAR 0 2
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: PUSH
58380: LD_VAR 0 1
58384: PUSH
58385: LD_VAR 0 2
58389: PUSH
58390: LD_INT 4
58392: MINUS
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: PUSH
58402: LD_VAR 0 1
58406: PUSH
58407: LD_INT 4
58409: PLUS
58410: PUSH
58411: LD_VAR 0 2
58415: PUSH
58416: LD_INT 4
58418: PLUS
58419: PUSH
58420: LD_INT 5
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: PUSH
58428: LD_VAR 0 1
58432: PUSH
58433: LD_INT 3
58435: PLUS
58436: PUSH
58437: LD_VAR 0 2
58441: PUSH
58442: LD_INT 4
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: PUSH
58450: LD_VAR 0 1
58454: PUSH
58455: LD_VAR 0 2
58459: PUSH
58460: LD_INT 3
58462: PLUS
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: LIST
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: ST_TO_ADDR
// end ; end ;
58479: GO 58482
58481: POP
// result := list ;
58482: LD_ADDR_VAR 0 4
58486: PUSH
58487: LD_VAR 0 5
58491: ST_TO_ADDR
// end ;
58492: LD_VAR 0 4
58496: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58497: LD_INT 0
58499: PPUSH
58500: PPUSH
58501: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58502: LD_VAR 0 1
58506: NOT
58507: PUSH
58508: LD_VAR 0 2
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: LD_INT 4
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: IN
58531: NOT
58532: OR
58533: IFFALSE 58537
// exit ;
58535: GO 58620
// tmp := [ ] ;
58537: LD_ADDR_VAR 0 5
58541: PUSH
58542: EMPTY
58543: ST_TO_ADDR
// for i in units do
58544: LD_ADDR_VAR 0 4
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: FOR_IN
58555: IFFALSE 58589
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58557: LD_ADDR_VAR 0 5
58561: PUSH
58562: LD_VAR 0 5
58566: PPUSH
58567: LD_VAR 0 4
58571: PPUSH
58572: LD_VAR 0 2
58576: PPUSH
58577: CALL_OW 259
58581: PPUSH
58582: CALL 59993 0 2
58586: ST_TO_ADDR
58587: GO 58554
58589: POP
58590: POP
// if not tmp then
58591: LD_VAR 0 5
58595: NOT
58596: IFFALSE 58600
// exit ;
58598: GO 58620
// result := SortListByListDesc ( units , tmp ) ;
58600: LD_ADDR_VAR 0 3
58604: PUSH
58605: LD_VAR 0 1
58609: PPUSH
58610: LD_VAR 0 5
58614: PPUSH
58615: CALL_OW 77
58619: ST_TO_ADDR
// end ;
58620: LD_VAR 0 3
58624: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58625: LD_INT 0
58627: PPUSH
58628: PPUSH
58629: PPUSH
// result := false ;
58630: LD_ADDR_VAR 0 3
58634: PUSH
58635: LD_INT 0
58637: ST_TO_ADDR
// if not building then
58638: LD_VAR 0 2
58642: NOT
58643: IFFALSE 58647
// exit ;
58645: GO 58785
// x := GetX ( building ) ;
58647: LD_ADDR_VAR 0 4
58651: PUSH
58652: LD_VAR 0 2
58656: PPUSH
58657: CALL_OW 250
58661: ST_TO_ADDR
// y := GetY ( building ) ;
58662: LD_ADDR_VAR 0 5
58666: PUSH
58667: LD_VAR 0 2
58671: PPUSH
58672: CALL_OW 251
58676: ST_TO_ADDR
// if not x or not y then
58677: LD_VAR 0 4
58681: NOT
58682: PUSH
58683: LD_VAR 0 5
58687: NOT
58688: OR
58689: IFFALSE 58693
// exit ;
58691: GO 58785
// if GetTaskList ( unit ) then
58693: LD_VAR 0 1
58697: PPUSH
58698: CALL_OW 437
58702: IFFALSE 58785
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58704: LD_STRING e
58706: PUSH
58707: LD_VAR 0 1
58711: PPUSH
58712: CALL_OW 437
58716: PUSH
58717: LD_INT 1
58719: ARRAY
58720: PUSH
58721: LD_INT 1
58723: ARRAY
58724: EQUAL
58725: PUSH
58726: LD_VAR 0 4
58730: PUSH
58731: LD_VAR 0 1
58735: PPUSH
58736: CALL_OW 437
58740: PUSH
58741: LD_INT 1
58743: ARRAY
58744: PUSH
58745: LD_INT 2
58747: ARRAY
58748: EQUAL
58749: AND
58750: PUSH
58751: LD_VAR 0 5
58755: PUSH
58756: LD_VAR 0 1
58760: PPUSH
58761: CALL_OW 437
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PUSH
58770: LD_INT 3
58772: ARRAY
58773: EQUAL
58774: AND
58775: IFFALSE 58785
// result := true end ;
58777: LD_ADDR_VAR 0 3
58781: PUSH
58782: LD_INT 1
58784: ST_TO_ADDR
// end ;
58785: LD_VAR 0 3
58789: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58790: LD_INT 0
58792: PPUSH
// result := false ;
58793: LD_ADDR_VAR 0 4
58797: PUSH
58798: LD_INT 0
58800: ST_TO_ADDR
// if GetTaskList ( unit ) then
58801: LD_VAR 0 1
58805: PPUSH
58806: CALL_OW 437
58810: IFFALSE 58893
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58812: LD_STRING M
58814: PUSH
58815: LD_VAR 0 1
58819: PPUSH
58820: CALL_OW 437
58824: PUSH
58825: LD_INT 1
58827: ARRAY
58828: PUSH
58829: LD_INT 1
58831: ARRAY
58832: EQUAL
58833: PUSH
58834: LD_VAR 0 2
58838: PUSH
58839: LD_VAR 0 1
58843: PPUSH
58844: CALL_OW 437
58848: PUSH
58849: LD_INT 1
58851: ARRAY
58852: PUSH
58853: LD_INT 2
58855: ARRAY
58856: EQUAL
58857: AND
58858: PUSH
58859: LD_VAR 0 3
58863: PUSH
58864: LD_VAR 0 1
58868: PPUSH
58869: CALL_OW 437
58873: PUSH
58874: LD_INT 1
58876: ARRAY
58877: PUSH
58878: LD_INT 3
58880: ARRAY
58881: EQUAL
58882: AND
58883: IFFALSE 58893
// result := true ;
58885: LD_ADDR_VAR 0 4
58889: PUSH
58890: LD_INT 1
58892: ST_TO_ADDR
// end ; end ;
58893: LD_VAR 0 4
58897: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58898: LD_INT 0
58900: PPUSH
58901: PPUSH
58902: PPUSH
58903: PPUSH
// if not unit or not area then
58904: LD_VAR 0 1
58908: NOT
58909: PUSH
58910: LD_VAR 0 2
58914: NOT
58915: OR
58916: IFFALSE 58920
// exit ;
58918: GO 59096
// tmp := AreaToList ( area , i ) ;
58920: LD_ADDR_VAR 0 6
58924: PUSH
58925: LD_VAR 0 2
58929: PPUSH
58930: LD_VAR 0 5
58934: PPUSH
58935: CALL_OW 517
58939: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58940: LD_ADDR_VAR 0 5
58944: PUSH
58945: DOUBLE
58946: LD_INT 1
58948: DEC
58949: ST_TO_ADDR
58950: LD_VAR 0 6
58954: PUSH
58955: LD_INT 1
58957: ARRAY
58958: PUSH
58959: FOR_TO
58960: IFFALSE 59094
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58962: LD_ADDR_VAR 0 7
58966: PUSH
58967: LD_VAR 0 6
58971: PUSH
58972: LD_INT 1
58974: ARRAY
58975: PUSH
58976: LD_VAR 0 5
58980: ARRAY
58981: PUSH
58982: LD_VAR 0 6
58986: PUSH
58987: LD_INT 2
58989: ARRAY
58990: PUSH
58991: LD_VAR 0 5
58995: ARRAY
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59001: LD_INT 92
59003: PUSH
59004: LD_VAR 0 7
59008: PUSH
59009: LD_INT 1
59011: ARRAY
59012: PUSH
59013: LD_VAR 0 7
59017: PUSH
59018: LD_INT 2
59020: ARRAY
59021: PUSH
59022: LD_INT 2
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: PPUSH
59031: CALL_OW 69
59035: PUSH
59036: LD_INT 0
59038: EQUAL
59039: IFFALSE 59092
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59041: LD_VAR 0 1
59045: PPUSH
59046: LD_VAR 0 7
59050: PUSH
59051: LD_INT 1
59053: ARRAY
59054: PPUSH
59055: LD_VAR 0 7
59059: PUSH
59060: LD_INT 2
59062: ARRAY
59063: PPUSH
59064: LD_VAR 0 3
59068: PPUSH
59069: CALL_OW 48
// result := IsPlaced ( unit ) ;
59073: LD_ADDR_VAR 0 4
59077: PUSH
59078: LD_VAR 0 1
59082: PPUSH
59083: CALL_OW 305
59087: ST_TO_ADDR
// exit ;
59088: POP
59089: POP
59090: GO 59096
// end ; end ;
59092: GO 58959
59094: POP
59095: POP
// end ;
59096: LD_VAR 0 4
59100: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59101: LD_INT 0
59103: PPUSH
59104: PPUSH
59105: PPUSH
// if not side or side > 8 then
59106: LD_VAR 0 1
59110: NOT
59111: PUSH
59112: LD_VAR 0 1
59116: PUSH
59117: LD_INT 8
59119: GREATER
59120: OR
59121: IFFALSE 59125
// exit ;
59123: GO 59312
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59125: LD_ADDR_VAR 0 4
59129: PUSH
59130: LD_INT 22
59132: PUSH
59133: LD_VAR 0 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 21
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PPUSH
59156: CALL_OW 69
59160: ST_TO_ADDR
// if not tmp then
59161: LD_VAR 0 4
59165: NOT
59166: IFFALSE 59170
// exit ;
59168: GO 59312
// enable_addtolog := true ;
59170: LD_ADDR_OWVAR 81
59174: PUSH
59175: LD_INT 1
59177: ST_TO_ADDR
// AddToLog ( [ ) ;
59178: LD_STRING [
59180: PPUSH
59181: CALL_OW 561
// for i in tmp do
59185: LD_ADDR_VAR 0 3
59189: PUSH
59190: LD_VAR 0 4
59194: PUSH
59195: FOR_IN
59196: IFFALSE 59303
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59198: LD_STRING [
59200: PUSH
59201: LD_VAR 0 3
59205: PPUSH
59206: CALL_OW 266
59210: STR
59211: PUSH
59212: LD_STRING , 
59214: STR
59215: PUSH
59216: LD_VAR 0 3
59220: PPUSH
59221: CALL_OW 250
59225: STR
59226: PUSH
59227: LD_STRING , 
59229: STR
59230: PUSH
59231: LD_VAR 0 3
59235: PPUSH
59236: CALL_OW 251
59240: STR
59241: PUSH
59242: LD_STRING , 
59244: STR
59245: PUSH
59246: LD_VAR 0 3
59250: PPUSH
59251: CALL_OW 254
59255: STR
59256: PUSH
59257: LD_STRING , 
59259: STR
59260: PUSH
59261: LD_VAR 0 3
59265: PPUSH
59266: LD_INT 1
59268: PPUSH
59269: CALL_OW 268
59273: STR
59274: PUSH
59275: LD_STRING , 
59277: STR
59278: PUSH
59279: LD_VAR 0 3
59283: PPUSH
59284: LD_INT 2
59286: PPUSH
59287: CALL_OW 268
59291: STR
59292: PUSH
59293: LD_STRING ],
59295: STR
59296: PPUSH
59297: CALL_OW 561
// end ;
59301: GO 59195
59303: POP
59304: POP
// AddToLog ( ]; ) ;
59305: LD_STRING ];
59307: PPUSH
59308: CALL_OW 561
// end ;
59312: LD_VAR 0 2
59316: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59317: LD_INT 0
59319: PPUSH
59320: PPUSH
59321: PPUSH
59322: PPUSH
59323: PPUSH
// if not area or not rate or not max then
59324: LD_VAR 0 1
59328: NOT
59329: PUSH
59330: LD_VAR 0 2
59334: NOT
59335: OR
59336: PUSH
59337: LD_VAR 0 4
59341: NOT
59342: OR
59343: IFFALSE 59347
// exit ;
59345: GO 59536
// while 1 do
59347: LD_INT 1
59349: IFFALSE 59536
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59351: LD_ADDR_VAR 0 9
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: LD_INT 1
59363: PPUSH
59364: CALL_OW 287
59368: PUSH
59369: LD_INT 10
59371: MUL
59372: ST_TO_ADDR
// r := rate / 10 ;
59373: LD_ADDR_VAR 0 7
59377: PUSH
59378: LD_VAR 0 2
59382: PUSH
59383: LD_INT 10
59385: DIVREAL
59386: ST_TO_ADDR
// time := 1 1$00 ;
59387: LD_ADDR_VAR 0 8
59391: PUSH
59392: LD_INT 2100
59394: ST_TO_ADDR
// if amount < min then
59395: LD_VAR 0 9
59399: PUSH
59400: LD_VAR 0 3
59404: LESS
59405: IFFALSE 59423
// r := r * 2 else
59407: LD_ADDR_VAR 0 7
59411: PUSH
59412: LD_VAR 0 7
59416: PUSH
59417: LD_INT 2
59419: MUL
59420: ST_TO_ADDR
59421: GO 59449
// if amount > max then
59423: LD_VAR 0 9
59427: PUSH
59428: LD_VAR 0 4
59432: GREATER
59433: IFFALSE 59449
// r := r / 2 ;
59435: LD_ADDR_VAR 0 7
59439: PUSH
59440: LD_VAR 0 7
59444: PUSH
59445: LD_INT 2
59447: DIVREAL
59448: ST_TO_ADDR
// time := time / r ;
59449: LD_ADDR_VAR 0 8
59453: PUSH
59454: LD_VAR 0 8
59458: PUSH
59459: LD_VAR 0 7
59463: DIVREAL
59464: ST_TO_ADDR
// if time < 0 then
59465: LD_VAR 0 8
59469: PUSH
59470: LD_INT 0
59472: LESS
59473: IFFALSE 59490
// time := time * - 1 ;
59475: LD_ADDR_VAR 0 8
59479: PUSH
59480: LD_VAR 0 8
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: MUL
59489: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59490: LD_VAR 0 8
59494: PUSH
59495: LD_INT 35
59497: PPUSH
59498: LD_INT 875
59500: PPUSH
59501: CALL_OW 12
59505: PLUS
59506: PPUSH
59507: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59511: LD_INT 1
59513: PPUSH
59514: LD_INT 5
59516: PPUSH
59517: CALL_OW 12
59521: PPUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: LD_INT 1
59529: PPUSH
59530: CALL_OW 55
// end ;
59534: GO 59347
// end ;
59536: LD_VAR 0 5
59540: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59541: LD_INT 0
59543: PPUSH
59544: PPUSH
59545: PPUSH
59546: PPUSH
59547: PPUSH
59548: PPUSH
59549: PPUSH
59550: PPUSH
// if not turrets or not factories then
59551: LD_VAR 0 1
59555: NOT
59556: PUSH
59557: LD_VAR 0 2
59561: NOT
59562: OR
59563: IFFALSE 59567
// exit ;
59565: GO 59874
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59567: LD_ADDR_VAR 0 10
59571: PUSH
59572: LD_INT 5
59574: PUSH
59575: LD_INT 6
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: LD_INT 4
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: PUSH
59595: LD_INT 5
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 24
59609: PUSH
59610: LD_INT 25
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 23
59619: PUSH
59620: LD_INT 27
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 42
59633: PUSH
59634: LD_INT 43
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 44
59643: PUSH
59644: LD_INT 46
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 45
59653: PUSH
59654: LD_INT 47
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// result := [ ] ;
59671: LD_ADDR_VAR 0 3
59675: PUSH
59676: EMPTY
59677: ST_TO_ADDR
// for i in turrets do
59678: LD_ADDR_VAR 0 4
59682: PUSH
59683: LD_VAR 0 1
59687: PUSH
59688: FOR_IN
59689: IFFALSE 59872
// begin nat := GetNation ( i ) ;
59691: LD_ADDR_VAR 0 7
59695: PUSH
59696: LD_VAR 0 4
59700: PPUSH
59701: CALL_OW 248
59705: ST_TO_ADDR
// weapon := 0 ;
59706: LD_ADDR_VAR 0 8
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// if not nat then
59714: LD_VAR 0 7
59718: NOT
59719: IFFALSE 59723
// continue ;
59721: GO 59688
// for j in list [ nat ] do
59723: LD_ADDR_VAR 0 5
59727: PUSH
59728: LD_VAR 0 10
59732: PUSH
59733: LD_VAR 0 7
59737: ARRAY
59738: PUSH
59739: FOR_IN
59740: IFFALSE 59781
// if GetBWeapon ( i ) = j [ 1 ] then
59742: LD_VAR 0 4
59746: PPUSH
59747: CALL_OW 269
59751: PUSH
59752: LD_VAR 0 5
59756: PUSH
59757: LD_INT 1
59759: ARRAY
59760: EQUAL
59761: IFFALSE 59779
// begin weapon := j [ 2 ] ;
59763: LD_ADDR_VAR 0 8
59767: PUSH
59768: LD_VAR 0 5
59772: PUSH
59773: LD_INT 2
59775: ARRAY
59776: ST_TO_ADDR
// break ;
59777: GO 59781
// end ;
59779: GO 59739
59781: POP
59782: POP
// if not weapon then
59783: LD_VAR 0 8
59787: NOT
59788: IFFALSE 59792
// continue ;
59790: GO 59688
// for k in factories do
59792: LD_ADDR_VAR 0 6
59796: PUSH
59797: LD_VAR 0 2
59801: PUSH
59802: FOR_IN
59803: IFFALSE 59868
// begin weapons := AvailableWeaponList ( k ) ;
59805: LD_ADDR_VAR 0 9
59809: PUSH
59810: LD_VAR 0 6
59814: PPUSH
59815: CALL_OW 478
59819: ST_TO_ADDR
// if not weapons then
59820: LD_VAR 0 9
59824: NOT
59825: IFFALSE 59829
// continue ;
59827: GO 59802
// if weapon in weapons then
59829: LD_VAR 0 8
59833: PUSH
59834: LD_VAR 0 9
59838: IN
59839: IFFALSE 59866
// begin result := [ i , weapon ] ;
59841: LD_ADDR_VAR 0 3
59845: PUSH
59846: LD_VAR 0 4
59850: PUSH
59851: LD_VAR 0 8
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: ST_TO_ADDR
// exit ;
59860: POP
59861: POP
59862: POP
59863: POP
59864: GO 59874
// end ; end ;
59866: GO 59802
59868: POP
59869: POP
// end ;
59870: GO 59688
59872: POP
59873: POP
// end ;
59874: LD_VAR 0 3
59878: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59879: LD_INT 0
59881: PPUSH
// if not side or side > 8 then
59882: LD_VAR 0 3
59886: NOT
59887: PUSH
59888: LD_VAR 0 3
59892: PUSH
59893: LD_INT 8
59895: GREATER
59896: OR
59897: IFFALSE 59901
// exit ;
59899: GO 59960
// if not range then
59901: LD_VAR 0 4
59905: NOT
59906: IFFALSE 59917
// range := - 12 ;
59908: LD_ADDR_VAR 0 4
59912: PUSH
59913: LD_INT 12
59915: NEG
59916: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59917: LD_VAR 0 1
59921: PPUSH
59922: LD_VAR 0 2
59926: PPUSH
59927: LD_VAR 0 3
59931: PPUSH
59932: LD_VAR 0 4
59936: PPUSH
59937: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59941: LD_VAR 0 1
59945: PPUSH
59946: LD_VAR 0 2
59950: PPUSH
59951: LD_VAR 0 3
59955: PPUSH
59956: CALL_OW 331
// end ;
59960: LD_VAR 0 5
59964: RET
// export function Video ( mode ) ; begin
59965: LD_INT 0
59967: PPUSH
// ingame_video = mode ;
59968: LD_ADDR_OWVAR 52
59972: PUSH
59973: LD_VAR 0 1
59977: ST_TO_ADDR
// interface_hidden = mode ;
59978: LD_ADDR_OWVAR 54
59982: PUSH
59983: LD_VAR 0 1
59987: ST_TO_ADDR
// end ;
59988: LD_VAR 0 2
59992: RET
// export function Join ( array , element ) ; begin
59993: LD_INT 0
59995: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59996: LD_ADDR_VAR 0 3
60000: PUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: LD_VAR 0 1
60010: PUSH
60011: LD_INT 1
60013: PLUS
60014: PPUSH
60015: LD_VAR 0 2
60019: PPUSH
60020: CALL_OW 1
60024: ST_TO_ADDR
// end ;
60025: LD_VAR 0 3
60029: RET
// export function JoinUnion ( array , element ) ; begin
60030: LD_INT 0
60032: PPUSH
// result := array union element ;
60033: LD_ADDR_VAR 0 3
60037: PUSH
60038: LD_VAR 0 1
60042: PUSH
60043: LD_VAR 0 2
60047: UNION
60048: ST_TO_ADDR
// end ;
60049: LD_VAR 0 3
60053: RET
// export function GetBehemoths ( side ) ; begin
60054: LD_INT 0
60056: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60057: LD_ADDR_VAR 0 2
60061: PUSH
60062: LD_INT 22
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 31
60076: PUSH
60077: LD_INT 25
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PPUSH
60088: CALL_OW 69
60092: ST_TO_ADDR
// end ;
60093: LD_VAR 0 2
60097: RET
// export function Shuffle ( array ) ; var i , index ; begin
60098: LD_INT 0
60100: PPUSH
60101: PPUSH
60102: PPUSH
// result := [ ] ;
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: EMPTY
60109: ST_TO_ADDR
// if not array then
60110: LD_VAR 0 1
60114: NOT
60115: IFFALSE 60119
// exit ;
60117: GO 60218
// Randomize ;
60119: CALL_OW 10
// for i = array downto 1 do
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: DOUBLE
60129: LD_VAR 0 1
60133: INC
60134: ST_TO_ADDR
60135: LD_INT 1
60137: PUSH
60138: FOR_DOWNTO
60139: IFFALSE 60216
// begin index := rand ( 1 , array ) ;
60141: LD_ADDR_VAR 0 4
60145: PUSH
60146: LD_INT 1
60148: PPUSH
60149: LD_VAR 0 1
60153: PPUSH
60154: CALL_OW 12
60158: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60159: LD_ADDR_VAR 0 2
60163: PUSH
60164: LD_VAR 0 2
60168: PPUSH
60169: LD_VAR 0 2
60173: PUSH
60174: LD_INT 1
60176: PLUS
60177: PPUSH
60178: LD_VAR 0 1
60182: PUSH
60183: LD_VAR 0 4
60187: ARRAY
60188: PPUSH
60189: CALL_OW 2
60193: ST_TO_ADDR
// array := Delete ( array , index ) ;
60194: LD_ADDR_VAR 0 1
60198: PUSH
60199: LD_VAR 0 1
60203: PPUSH
60204: LD_VAR 0 4
60208: PPUSH
60209: CALL_OW 3
60213: ST_TO_ADDR
// end ;
60214: GO 60138
60216: POP
60217: POP
// end ;
60218: LD_VAR 0 2
60222: RET
// export function GetBaseMaterials ( base ) ; begin
60223: LD_INT 0
60225: PPUSH
// result := [ 0 , 0 , 0 ] ;
60226: LD_ADDR_VAR 0 2
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: LIST
60244: ST_TO_ADDR
// if not base then
60245: LD_VAR 0 1
60249: NOT
60250: IFFALSE 60254
// exit ;
60252: GO 60303
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60254: LD_ADDR_VAR 0 2
60258: PUSH
60259: LD_VAR 0 1
60263: PPUSH
60264: LD_INT 1
60266: PPUSH
60267: CALL_OW 275
60271: PUSH
60272: LD_VAR 0 1
60276: PPUSH
60277: LD_INT 2
60279: PPUSH
60280: CALL_OW 275
60284: PUSH
60285: LD_VAR 0 1
60289: PPUSH
60290: LD_INT 3
60292: PPUSH
60293: CALL_OW 275
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: ST_TO_ADDR
// end ;
60303: LD_VAR 0 2
60307: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60308: LD_INT 0
60310: PPUSH
60311: PPUSH
// result := array ;
60312: LD_ADDR_VAR 0 3
60316: PUSH
60317: LD_VAR 0 1
60321: ST_TO_ADDR
// if size >= result then
60322: LD_VAR 0 2
60326: PUSH
60327: LD_VAR 0 3
60331: GREATEREQUAL
60332: IFFALSE 60336
// exit ;
60334: GO 60386
// if size then
60336: LD_VAR 0 2
60340: IFFALSE 60386
// for i := array downto size do
60342: LD_ADDR_VAR 0 4
60346: PUSH
60347: DOUBLE
60348: LD_VAR 0 1
60352: INC
60353: ST_TO_ADDR
60354: LD_VAR 0 2
60358: PUSH
60359: FOR_DOWNTO
60360: IFFALSE 60384
// result := Delete ( result , result ) ;
60362: LD_ADDR_VAR 0 3
60366: PUSH
60367: LD_VAR 0 3
60371: PPUSH
60372: LD_VAR 0 3
60376: PPUSH
60377: CALL_OW 3
60381: ST_TO_ADDR
60382: GO 60359
60384: POP
60385: POP
// end ;
60386: LD_VAR 0 3
60390: RET
// export function ComExit ( unit ) ; var tmp ; begin
60391: LD_INT 0
60393: PPUSH
60394: PPUSH
// if not IsInUnit ( unit ) then
60395: LD_VAR 0 1
60399: PPUSH
60400: CALL_OW 310
60404: NOT
60405: IFFALSE 60409
// exit ;
60407: GO 60469
// tmp := IsInUnit ( unit ) ;
60409: LD_ADDR_VAR 0 3
60413: PUSH
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 310
60423: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL_OW 247
60433: PUSH
60434: LD_INT 2
60436: EQUAL
60437: IFFALSE 60450
// ComExitVehicle ( unit ) else
60439: LD_VAR 0 1
60443: PPUSH
60444: CALL_OW 121
60448: GO 60459
// ComExitBuilding ( unit ) ;
60450: LD_VAR 0 1
60454: PPUSH
60455: CALL_OW 122
// result := tmp ;
60459: LD_ADDR_VAR 0 2
60463: PUSH
60464: LD_VAR 0 3
60468: ST_TO_ADDR
// end ;
60469: LD_VAR 0 2
60473: RET
// export function ComExitAll ( units ) ; var i ; begin
60474: LD_INT 0
60476: PPUSH
60477: PPUSH
// if not units then
60478: LD_VAR 0 1
60482: NOT
60483: IFFALSE 60487
// exit ;
60485: GO 60513
// for i in units do
60487: LD_ADDR_VAR 0 3
60491: PUSH
60492: LD_VAR 0 1
60496: PUSH
60497: FOR_IN
60498: IFFALSE 60511
// ComExit ( i ) ;
60500: LD_VAR 0 3
60504: PPUSH
60505: CALL 60391 0 1
60509: GO 60497
60511: POP
60512: POP
// end ;
60513: LD_VAR 0 2
60517: RET
// export function ResetHc ; begin
60518: LD_INT 0
60520: PPUSH
// InitHc ;
60521: CALL_OW 19
// hc_importance := 0 ;
60525: LD_ADDR_OWVAR 32
60529: PUSH
60530: LD_INT 0
60532: ST_TO_ADDR
// end ;
60533: LD_VAR 0 1
60537: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60538: LD_INT 0
60540: PPUSH
60541: PPUSH
60542: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60543: LD_ADDR_VAR 0 6
60547: PUSH
60548: LD_VAR 0 1
60552: PUSH
60553: LD_VAR 0 3
60557: PLUS
60558: PUSH
60559: LD_INT 2
60561: DIV
60562: ST_TO_ADDR
// if _x < 0 then
60563: LD_VAR 0 6
60567: PUSH
60568: LD_INT 0
60570: LESS
60571: IFFALSE 60588
// _x := _x * - 1 ;
60573: LD_ADDR_VAR 0 6
60577: PUSH
60578: LD_VAR 0 6
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: MUL
60587: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60588: LD_ADDR_VAR 0 7
60592: PUSH
60593: LD_VAR 0 2
60597: PUSH
60598: LD_VAR 0 4
60602: PLUS
60603: PUSH
60604: LD_INT 2
60606: DIV
60607: ST_TO_ADDR
// if _y < 0 then
60608: LD_VAR 0 7
60612: PUSH
60613: LD_INT 0
60615: LESS
60616: IFFALSE 60633
// _y := _y * - 1 ;
60618: LD_ADDR_VAR 0 7
60622: PUSH
60623: LD_VAR 0 7
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: MUL
60632: ST_TO_ADDR
// result := [ _x , _y ] ;
60633: LD_ADDR_VAR 0 5
60637: PUSH
60638: LD_VAR 0 6
60642: PUSH
60643: LD_VAR 0 7
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: ST_TO_ADDR
// end ;
60652: LD_VAR 0 5
60656: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60657: LD_INT 0
60659: PPUSH
60660: PPUSH
60661: PPUSH
60662: PPUSH
// task := GetTaskList ( unit ) ;
60663: LD_ADDR_VAR 0 7
60667: PUSH
60668: LD_VAR 0 1
60672: PPUSH
60673: CALL_OW 437
60677: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60678: LD_VAR 0 7
60682: NOT
60683: PUSH
60684: LD_VAR 0 1
60688: PPUSH
60689: LD_VAR 0 2
60693: PPUSH
60694: CALL_OW 308
60698: NOT
60699: AND
60700: IFFALSE 60704
// exit ;
60702: GO 60822
// if IsInArea ( unit , area ) then
60704: LD_VAR 0 1
60708: PPUSH
60709: LD_VAR 0 2
60713: PPUSH
60714: CALL_OW 308
60718: IFFALSE 60736
// begin ComMoveToArea ( unit , goAway ) ;
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_VAR 0 3
60729: PPUSH
60730: CALL_OW 113
// exit ;
60734: GO 60822
// end ; if task [ 1 ] [ 1 ] <> M then
60736: LD_VAR 0 7
60740: PUSH
60741: LD_INT 1
60743: ARRAY
60744: PUSH
60745: LD_INT 1
60747: ARRAY
60748: PUSH
60749: LD_STRING M
60751: NONEQUAL
60752: IFFALSE 60756
// exit ;
60754: GO 60822
// x := task [ 1 ] [ 2 ] ;
60756: LD_ADDR_VAR 0 5
60760: PUSH
60761: LD_VAR 0 7
60765: PUSH
60766: LD_INT 1
60768: ARRAY
60769: PUSH
60770: LD_INT 2
60772: ARRAY
60773: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60774: LD_ADDR_VAR 0 6
60778: PUSH
60779: LD_VAR 0 7
60783: PUSH
60784: LD_INT 1
60786: ARRAY
60787: PUSH
60788: LD_INT 3
60790: ARRAY
60791: ST_TO_ADDR
// if InArea ( x , y , area ) then
60792: LD_VAR 0 5
60796: PPUSH
60797: LD_VAR 0 6
60801: PPUSH
60802: LD_VAR 0 2
60806: PPUSH
60807: CALL_OW 309
60811: IFFALSE 60822
// ComStop ( unit ) ;
60813: LD_VAR 0 1
60817: PPUSH
60818: CALL_OW 141
// end ;
60822: LD_VAR 0 4
60826: RET
// export function Abs ( value ) ; begin
60827: LD_INT 0
60829: PPUSH
// result := value ;
60830: LD_ADDR_VAR 0 2
60834: PUSH
60835: LD_VAR 0 1
60839: ST_TO_ADDR
// if value < 0 then
60840: LD_VAR 0 1
60844: PUSH
60845: LD_INT 0
60847: LESS
60848: IFFALSE 60865
// result := value * - 1 ;
60850: LD_ADDR_VAR 0 2
60854: PUSH
60855: LD_VAR 0 1
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: MUL
60864: ST_TO_ADDR
// end ;
60865: LD_VAR 0 2
60869: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60870: LD_INT 0
60872: PPUSH
60873: PPUSH
60874: PPUSH
60875: PPUSH
60876: PPUSH
60877: PPUSH
60878: PPUSH
60879: PPUSH
// if not unit or not building then
60880: LD_VAR 0 1
60884: NOT
60885: PUSH
60886: LD_VAR 0 2
60890: NOT
60891: OR
60892: IFFALSE 60896
// exit ;
60894: GO 61122
// x := GetX ( building ) ;
60896: LD_ADDR_VAR 0 4
60900: PUSH
60901: LD_VAR 0 2
60905: PPUSH
60906: CALL_OW 250
60910: ST_TO_ADDR
// y := GetY ( building ) ;
60911: LD_ADDR_VAR 0 6
60915: PUSH
60916: LD_VAR 0 2
60920: PPUSH
60921: CALL_OW 251
60925: ST_TO_ADDR
// d := GetDir ( building ) ;
60926: LD_ADDR_VAR 0 8
60930: PUSH
60931: LD_VAR 0 2
60935: PPUSH
60936: CALL_OW 254
60940: ST_TO_ADDR
// r := 4 ;
60941: LD_ADDR_VAR 0 9
60945: PUSH
60946: LD_INT 4
60948: ST_TO_ADDR
// for i := 1 to 5 do
60949: LD_ADDR_VAR 0 10
60953: PUSH
60954: DOUBLE
60955: LD_INT 1
60957: DEC
60958: ST_TO_ADDR
60959: LD_INT 5
60961: PUSH
60962: FOR_TO
60963: IFFALSE 61120
// begin _x := ShiftX ( x , d , r + i ) ;
60965: LD_ADDR_VAR 0 5
60969: PUSH
60970: LD_VAR 0 4
60974: PPUSH
60975: LD_VAR 0 8
60979: PPUSH
60980: LD_VAR 0 9
60984: PUSH
60985: LD_VAR 0 10
60989: PLUS
60990: PPUSH
60991: CALL_OW 272
60995: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60996: LD_ADDR_VAR 0 7
61000: PUSH
61001: LD_VAR 0 6
61005: PPUSH
61006: LD_VAR 0 8
61010: PPUSH
61011: LD_VAR 0 9
61015: PUSH
61016: LD_VAR 0 10
61020: PLUS
61021: PPUSH
61022: CALL_OW 273
61026: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61027: LD_VAR 0 5
61031: PPUSH
61032: LD_VAR 0 7
61036: PPUSH
61037: CALL_OW 488
61041: PUSH
61042: LD_VAR 0 5
61046: PPUSH
61047: LD_VAR 0 7
61051: PPUSH
61052: CALL_OW 428
61056: PPUSH
61057: CALL_OW 247
61061: PUSH
61062: LD_INT 3
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: IN
61072: NOT
61073: AND
61074: IFFALSE 61118
// begin ComMoveXY ( unit , _x , _y ) ;
61076: LD_VAR 0 1
61080: PPUSH
61081: LD_VAR 0 5
61085: PPUSH
61086: LD_VAR 0 7
61090: PPUSH
61091: CALL_OW 111
// result := [ _x , _y ] ;
61095: LD_ADDR_VAR 0 3
61099: PUSH
61100: LD_VAR 0 5
61104: PUSH
61105: LD_VAR 0 7
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// exit ;
61114: POP
61115: POP
61116: GO 61122
// end ; end ;
61118: GO 60962
61120: POP
61121: POP
// end ;
61122: LD_VAR 0 3
61126: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61127: LD_INT 0
61129: PPUSH
61130: PPUSH
61131: PPUSH
// result := 0 ;
61132: LD_ADDR_VAR 0 3
61136: PUSH
61137: LD_INT 0
61139: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61140: LD_VAR 0 1
61144: PUSH
61145: LD_INT 0
61147: LESS
61148: PUSH
61149: LD_VAR 0 1
61153: PUSH
61154: LD_INT 8
61156: GREATER
61157: OR
61158: PUSH
61159: LD_VAR 0 2
61163: PUSH
61164: LD_INT 0
61166: LESS
61167: OR
61168: PUSH
61169: LD_VAR 0 2
61173: PUSH
61174: LD_INT 8
61176: GREATER
61177: OR
61178: IFFALSE 61182
// exit ;
61180: GO 61257
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61182: LD_ADDR_VAR 0 4
61186: PUSH
61187: LD_INT 22
61189: PUSH
61190: LD_VAR 0 2
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PPUSH
61199: CALL_OW 69
61203: PUSH
61204: FOR_IN
61205: IFFALSE 61255
// begin un := UnitShoot ( i ) ;
61207: LD_ADDR_VAR 0 5
61211: PUSH
61212: LD_VAR 0 4
61216: PPUSH
61217: CALL_OW 504
61221: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61222: LD_VAR 0 5
61226: PPUSH
61227: CALL_OW 255
61231: PUSH
61232: LD_VAR 0 1
61236: EQUAL
61237: IFFALSE 61253
// begin result := un ;
61239: LD_ADDR_VAR 0 3
61243: PUSH
61244: LD_VAR 0 5
61248: ST_TO_ADDR
// exit ;
61249: POP
61250: POP
61251: GO 61257
// end ; end ;
61253: GO 61204
61255: POP
61256: POP
// end ;
61257: LD_VAR 0 3
61261: RET
// export function GetCargoBay ( units ) ; begin
61262: LD_INT 0
61264: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61265: LD_ADDR_VAR 0 2
61269: PUSH
61270: LD_VAR 0 1
61274: PPUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 34
61280: PUSH
61281: LD_INT 12
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 34
61290: PUSH
61291: LD_INT 51
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 34
61300: PUSH
61301: LD_INT 32
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 34
61310: PUSH
61311: LD_INT 89
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: PPUSH
61325: CALL_OW 72
61329: ST_TO_ADDR
// end ;
61330: LD_VAR 0 2
61334: RET
// export function Negate ( value ) ; begin
61335: LD_INT 0
61337: PPUSH
// result := not value ;
61338: LD_ADDR_VAR 0 2
61342: PUSH
61343: LD_VAR 0 1
61347: NOT
61348: ST_TO_ADDR
// end ;
61349: LD_VAR 0 2
61353: RET
// export function Inc ( value ) ; begin
61354: LD_INT 0
61356: PPUSH
// result := value + 1 ;
61357: LD_ADDR_VAR 0 2
61361: PUSH
61362: LD_VAR 0 1
61366: PUSH
61367: LD_INT 1
61369: PLUS
61370: ST_TO_ADDR
// end ;
61371: LD_VAR 0 2
61375: RET
// export function Dec ( value ) ; begin
61376: LD_INT 0
61378: PPUSH
// result := value - 1 ;
61379: LD_ADDR_VAR 0 2
61383: PUSH
61384: LD_VAR 0 1
61388: PUSH
61389: LD_INT 1
61391: MINUS
61392: ST_TO_ADDR
// end ;
61393: LD_VAR 0 2
61397: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61398: LD_INT 0
61400: PPUSH
61401: PPUSH
61402: PPUSH
61403: PPUSH
61404: PPUSH
61405: PPUSH
61406: PPUSH
61407: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61408: LD_VAR 0 1
61412: PPUSH
61413: LD_VAR 0 2
61417: PPUSH
61418: CALL_OW 488
61422: NOT
61423: PUSH
61424: LD_VAR 0 3
61428: PPUSH
61429: LD_VAR 0 4
61433: PPUSH
61434: CALL_OW 488
61438: NOT
61439: OR
61440: IFFALSE 61453
// begin result := - 1 ;
61442: LD_ADDR_VAR 0 5
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: ST_TO_ADDR
// exit ;
61451: GO 61688
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61453: LD_ADDR_VAR 0 12
61457: PUSH
61458: LD_VAR 0 1
61462: PPUSH
61463: LD_VAR 0 2
61467: PPUSH
61468: LD_VAR 0 3
61472: PPUSH
61473: LD_VAR 0 4
61477: PPUSH
61478: CALL 60538 0 4
61482: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61483: LD_ADDR_VAR 0 11
61487: PUSH
61488: LD_VAR 0 1
61492: PPUSH
61493: LD_VAR 0 2
61497: PPUSH
61498: LD_VAR 0 12
61502: PUSH
61503: LD_INT 1
61505: ARRAY
61506: PPUSH
61507: LD_VAR 0 12
61511: PUSH
61512: LD_INT 2
61514: ARRAY
61515: PPUSH
61516: CALL_OW 298
61520: ST_TO_ADDR
// distance := 9999 ;
61521: LD_ADDR_VAR 0 10
61525: PUSH
61526: LD_INT 9999
61528: ST_TO_ADDR
// for i := 0 to 5 do
61529: LD_ADDR_VAR 0 6
61533: PUSH
61534: DOUBLE
61535: LD_INT 0
61537: DEC
61538: ST_TO_ADDR
61539: LD_INT 5
61541: PUSH
61542: FOR_TO
61543: IFFALSE 61686
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61545: LD_ADDR_VAR 0 7
61549: PUSH
61550: LD_VAR 0 1
61554: PPUSH
61555: LD_VAR 0 6
61559: PPUSH
61560: LD_VAR 0 11
61564: PPUSH
61565: CALL_OW 272
61569: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61570: LD_ADDR_VAR 0 8
61574: PUSH
61575: LD_VAR 0 2
61579: PPUSH
61580: LD_VAR 0 6
61584: PPUSH
61585: LD_VAR 0 11
61589: PPUSH
61590: CALL_OW 273
61594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61595: LD_VAR 0 7
61599: PPUSH
61600: LD_VAR 0 8
61604: PPUSH
61605: CALL_OW 488
61609: NOT
61610: IFFALSE 61614
// continue ;
61612: GO 61542
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61614: LD_ADDR_VAR 0 9
61618: PUSH
61619: LD_VAR 0 12
61623: PUSH
61624: LD_INT 1
61626: ARRAY
61627: PPUSH
61628: LD_VAR 0 12
61632: PUSH
61633: LD_INT 2
61635: ARRAY
61636: PPUSH
61637: LD_VAR 0 7
61641: PPUSH
61642: LD_VAR 0 8
61646: PPUSH
61647: CALL_OW 298
61651: ST_TO_ADDR
// if tmp < distance then
61652: LD_VAR 0 9
61656: PUSH
61657: LD_VAR 0 10
61661: LESS
61662: IFFALSE 61684
// begin result := i ;
61664: LD_ADDR_VAR 0 5
61668: PUSH
61669: LD_VAR 0 6
61673: ST_TO_ADDR
// distance := tmp ;
61674: LD_ADDR_VAR 0 10
61678: PUSH
61679: LD_VAR 0 9
61683: ST_TO_ADDR
// end ; end ;
61684: GO 61542
61686: POP
61687: POP
// end ;
61688: LD_VAR 0 5
61692: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61693: LD_INT 0
61695: PPUSH
61696: PPUSH
// if not driver or not IsInUnit ( driver ) then
61697: LD_VAR 0 1
61701: NOT
61702: PUSH
61703: LD_VAR 0 1
61707: PPUSH
61708: CALL_OW 310
61712: NOT
61713: OR
61714: IFFALSE 61718
// exit ;
61716: GO 61808
// vehicle := IsInUnit ( driver ) ;
61718: LD_ADDR_VAR 0 3
61722: PUSH
61723: LD_VAR 0 1
61727: PPUSH
61728: CALL_OW 310
61732: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61733: LD_VAR 0 1
61737: PPUSH
61738: LD_STRING \
61740: PUSH
61741: LD_INT 0
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: PUSH
61768: LD_STRING E
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: LD_VAR 0 3
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PPUSH
61804: CALL_OW 446
// end ;
61808: LD_VAR 0 2
61812: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61813: LD_INT 0
61815: PPUSH
61816: PPUSH
// if not driver or not IsInUnit ( driver ) then
61817: LD_VAR 0 1
61821: NOT
61822: PUSH
61823: LD_VAR 0 1
61827: PPUSH
61828: CALL_OW 310
61832: NOT
61833: OR
61834: IFFALSE 61838
// exit ;
61836: GO 61928
// vehicle := IsInUnit ( driver ) ;
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: LD_VAR 0 1
61847: PPUSH
61848: CALL_OW 310
61852: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61853: LD_VAR 0 1
61857: PPUSH
61858: LD_STRING \
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 0
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_STRING E
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_VAR 0 3
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PPUSH
61924: CALL_OW 447
// end ;
61928: LD_VAR 0 2
61932: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61933: LD_INT 0
61935: PPUSH
61936: PPUSH
61937: PPUSH
// tmp := [ ] ;
61938: LD_ADDR_VAR 0 5
61942: PUSH
61943: EMPTY
61944: ST_TO_ADDR
// for i in units do
61945: LD_ADDR_VAR 0 4
61949: PUSH
61950: LD_VAR 0 1
61954: PUSH
61955: FOR_IN
61956: IFFALSE 61994
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61958: LD_ADDR_VAR 0 5
61962: PUSH
61963: LD_VAR 0 5
61967: PPUSH
61968: LD_VAR 0 5
61972: PUSH
61973: LD_INT 1
61975: PLUS
61976: PPUSH
61977: LD_VAR 0 4
61981: PPUSH
61982: CALL_OW 256
61986: PPUSH
61987: CALL_OW 2
61991: ST_TO_ADDR
61992: GO 61955
61994: POP
61995: POP
// if not tmp then
61996: LD_VAR 0 5
62000: NOT
62001: IFFALSE 62005
// exit ;
62003: GO 62053
// if asc then
62005: LD_VAR 0 2
62009: IFFALSE 62033
// result := SortListByListAsc ( units , tmp ) else
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: LD_VAR 0 5
62025: PPUSH
62026: CALL_OW 76
62030: ST_TO_ADDR
62031: GO 62053
// result := SortListByListDesc ( units , tmp ) ;
62033: LD_ADDR_VAR 0 3
62037: PUSH
62038: LD_VAR 0 1
62042: PPUSH
62043: LD_VAR 0 5
62047: PPUSH
62048: CALL_OW 77
62052: ST_TO_ADDR
// end ;
62053: LD_VAR 0 3
62057: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62058: LD_INT 0
62060: PPUSH
62061: PPUSH
// task := GetTaskList ( mech ) ;
62062: LD_ADDR_VAR 0 4
62066: PUSH
62067: LD_VAR 0 1
62071: PPUSH
62072: CALL_OW 437
62076: ST_TO_ADDR
// if not task then
62077: LD_VAR 0 4
62081: NOT
62082: IFFALSE 62086
// exit ;
62084: GO 62128
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62086: LD_ADDR_VAR 0 3
62090: PUSH
62091: LD_VAR 0 4
62095: PUSH
62096: LD_INT 1
62098: ARRAY
62099: PUSH
62100: LD_INT 1
62102: ARRAY
62103: PUSH
62104: LD_STRING r
62106: EQUAL
62107: PUSH
62108: LD_VAR 0 4
62112: PUSH
62113: LD_INT 1
62115: ARRAY
62116: PUSH
62117: LD_INT 4
62119: ARRAY
62120: PUSH
62121: LD_VAR 0 2
62125: EQUAL
62126: AND
62127: ST_TO_ADDR
// end ;
62128: LD_VAR 0 3
62132: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62133: LD_INT 0
62135: PPUSH
// SetDir ( unit , d ) ;
62136: LD_VAR 0 1
62140: PPUSH
62141: LD_VAR 0 4
62145: PPUSH
62146: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62150: LD_VAR 0 1
62154: PPUSH
62155: LD_VAR 0 2
62159: PPUSH
62160: LD_VAR 0 3
62164: PPUSH
62165: LD_VAR 0 5
62169: PPUSH
62170: CALL_OW 48
// end ;
62174: LD_VAR 0 6
62178: RET
// export function ToNaturalNumber ( number ) ; begin
62179: LD_INT 0
62181: PPUSH
// result := number div 1 ;
62182: LD_ADDR_VAR 0 2
62186: PUSH
62187: LD_VAR 0 1
62191: PUSH
62192: LD_INT 1
62194: DIV
62195: ST_TO_ADDR
// if number < 0 then
62196: LD_VAR 0 1
62200: PUSH
62201: LD_INT 0
62203: LESS
62204: IFFALSE 62214
// result := 0 ;
62206: LD_ADDR_VAR 0 2
62210: PUSH
62211: LD_INT 0
62213: ST_TO_ADDR
// end ;
62214: LD_VAR 0 2
62218: RET
// export function SortByClass ( units , class ) ; var un ; begin
62219: LD_INT 0
62221: PPUSH
62222: PPUSH
// if not units or not class then
62223: LD_VAR 0 1
62227: NOT
62228: PUSH
62229: LD_VAR 0 2
62233: NOT
62234: OR
62235: IFFALSE 62239
// exit ;
62237: GO 62334
// result := [ ] ;
62239: LD_ADDR_VAR 0 3
62243: PUSH
62244: EMPTY
62245: ST_TO_ADDR
// for un in units do
62246: LD_ADDR_VAR 0 4
62250: PUSH
62251: LD_VAR 0 1
62255: PUSH
62256: FOR_IN
62257: IFFALSE 62332
// if GetClass ( un ) = class then
62259: LD_VAR 0 4
62263: PPUSH
62264: CALL_OW 257
62268: PUSH
62269: LD_VAR 0 2
62273: EQUAL
62274: IFFALSE 62301
// result := Insert ( result , 1 , un ) else
62276: LD_ADDR_VAR 0 3
62280: PUSH
62281: LD_VAR 0 3
62285: PPUSH
62286: LD_INT 1
62288: PPUSH
62289: LD_VAR 0 4
62293: PPUSH
62294: CALL_OW 2
62298: ST_TO_ADDR
62299: GO 62330
// result := Replace ( result , result + 1 , un ) ;
62301: LD_ADDR_VAR 0 3
62305: PUSH
62306: LD_VAR 0 3
62310: PPUSH
62311: LD_VAR 0 3
62315: PUSH
62316: LD_INT 1
62318: PLUS
62319: PPUSH
62320: LD_VAR 0 4
62324: PPUSH
62325: CALL_OW 1
62329: ST_TO_ADDR
62330: GO 62256
62332: POP
62333: POP
// end ;
62334: LD_VAR 0 3
62338: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62339: LD_INT 0
62341: PPUSH
62342: PPUSH
62343: PPUSH
62344: PPUSH
62345: PPUSH
62346: PPUSH
62347: PPUSH
// result := [ ] ;
62348: LD_ADDR_VAR 0 4
62352: PUSH
62353: EMPTY
62354: ST_TO_ADDR
// if x - r < 0 then
62355: LD_VAR 0 1
62359: PUSH
62360: LD_VAR 0 3
62364: MINUS
62365: PUSH
62366: LD_INT 0
62368: LESS
62369: IFFALSE 62381
// min_x := 0 else
62371: LD_ADDR_VAR 0 8
62375: PUSH
62376: LD_INT 0
62378: ST_TO_ADDR
62379: GO 62397
// min_x := x - r ;
62381: LD_ADDR_VAR 0 8
62385: PUSH
62386: LD_VAR 0 1
62390: PUSH
62391: LD_VAR 0 3
62395: MINUS
62396: ST_TO_ADDR
// if y - r < 0 then
62397: LD_VAR 0 2
62401: PUSH
62402: LD_VAR 0 3
62406: MINUS
62407: PUSH
62408: LD_INT 0
62410: LESS
62411: IFFALSE 62423
// min_y := 0 else
62413: LD_ADDR_VAR 0 7
62417: PUSH
62418: LD_INT 0
62420: ST_TO_ADDR
62421: GO 62439
// min_y := y - r ;
62423: LD_ADDR_VAR 0 7
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_VAR 0 3
62437: MINUS
62438: ST_TO_ADDR
// max_x := x + r ;
62439: LD_ADDR_VAR 0 9
62443: PUSH
62444: LD_VAR 0 1
62448: PUSH
62449: LD_VAR 0 3
62453: PLUS
62454: ST_TO_ADDR
// max_y := y + r ;
62455: LD_ADDR_VAR 0 10
62459: PUSH
62460: LD_VAR 0 2
62464: PUSH
62465: LD_VAR 0 3
62469: PLUS
62470: ST_TO_ADDR
// for _x = min_x to max_x do
62471: LD_ADDR_VAR 0 5
62475: PUSH
62476: DOUBLE
62477: LD_VAR 0 8
62481: DEC
62482: ST_TO_ADDR
62483: LD_VAR 0 9
62487: PUSH
62488: FOR_TO
62489: IFFALSE 62590
// for _y = min_y to max_y do
62491: LD_ADDR_VAR 0 6
62495: PUSH
62496: DOUBLE
62497: LD_VAR 0 7
62501: DEC
62502: ST_TO_ADDR
62503: LD_VAR 0 10
62507: PUSH
62508: FOR_TO
62509: IFFALSE 62586
// begin if not ValidHex ( _x , _y ) then
62511: LD_VAR 0 5
62515: PPUSH
62516: LD_VAR 0 6
62520: PPUSH
62521: CALL_OW 488
62525: NOT
62526: IFFALSE 62530
// continue ;
62528: GO 62508
// if GetResourceTypeXY ( _x , _y ) then
62530: LD_VAR 0 5
62534: PPUSH
62535: LD_VAR 0 6
62539: PPUSH
62540: CALL_OW 283
62544: IFFALSE 62584
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62546: LD_ADDR_VAR 0 4
62550: PUSH
62551: LD_VAR 0 4
62555: PPUSH
62556: LD_VAR 0 4
62560: PUSH
62561: LD_INT 1
62563: PLUS
62564: PPUSH
62565: LD_VAR 0 5
62569: PUSH
62570: LD_VAR 0 6
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PPUSH
62579: CALL_OW 1
62583: ST_TO_ADDR
// end ;
62584: GO 62508
62586: POP
62587: POP
62588: GO 62488
62590: POP
62591: POP
// end ;
62592: LD_VAR 0 4
62596: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62597: LD_INT 0
62599: PPUSH
62600: PPUSH
62601: PPUSH
62602: PPUSH
62603: PPUSH
62604: PPUSH
62605: PPUSH
62606: PPUSH
// if not units then
62607: LD_VAR 0 1
62611: NOT
62612: IFFALSE 62616
// exit ;
62614: GO 63140
// result := UnitFilter ( units , [ f_ok ] ) ;
62616: LD_ADDR_VAR 0 3
62620: PUSH
62621: LD_VAR 0 1
62625: PPUSH
62626: LD_INT 50
62628: PUSH
62629: EMPTY
62630: LIST
62631: PPUSH
62632: CALL_OW 72
62636: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62637: LD_ADDR_VAR 0 8
62641: PUSH
62642: LD_VAR 0 1
62646: PUSH
62647: LD_INT 1
62649: ARRAY
62650: PPUSH
62651: CALL_OW 255
62655: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62656: LD_ADDR_VAR 0 10
62660: PUSH
62661: LD_INT 29
62663: PUSH
62664: LD_INT 91
62666: PUSH
62667: LD_INT 49
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// if not result then
62675: LD_VAR 0 3
62679: NOT
62680: IFFALSE 62684
// exit ;
62682: GO 63140
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62684: LD_ADDR_VAR 0 5
62688: PUSH
62689: LD_INT 81
62691: PUSH
62692: LD_VAR 0 8
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PPUSH
62701: CALL_OW 69
62705: ST_TO_ADDR
// for i in result do
62706: LD_ADDR_VAR 0 4
62710: PUSH
62711: LD_VAR 0 3
62715: PUSH
62716: FOR_IN
62717: IFFALSE 63138
// begin tag := GetTag ( i ) + 1 ;
62719: LD_ADDR_VAR 0 9
62723: PUSH
62724: LD_VAR 0 4
62728: PPUSH
62729: CALL_OW 110
62733: PUSH
62734: LD_INT 1
62736: PLUS
62737: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62738: LD_ADDR_VAR 0 7
62742: PUSH
62743: LD_VAR 0 4
62747: PPUSH
62748: CALL_OW 250
62752: PPUSH
62753: LD_VAR 0 4
62757: PPUSH
62758: CALL_OW 251
62762: PPUSH
62763: LD_INT 6
62765: PPUSH
62766: CALL 62339 0 3
62770: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62771: LD_VAR 0 4
62775: PPUSH
62776: CALL_OW 247
62780: PUSH
62781: LD_INT 2
62783: EQUAL
62784: PUSH
62785: LD_VAR 0 7
62789: AND
62790: PUSH
62791: LD_VAR 0 4
62795: PPUSH
62796: CALL_OW 264
62800: PUSH
62801: LD_VAR 0 10
62805: IN
62806: NOT
62807: AND
62808: IFFALSE 62847
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62810: LD_VAR 0 4
62814: PPUSH
62815: LD_VAR 0 7
62819: PUSH
62820: LD_INT 1
62822: ARRAY
62823: PUSH
62824: LD_INT 1
62826: ARRAY
62827: PPUSH
62828: LD_VAR 0 7
62832: PUSH
62833: LD_INT 1
62835: ARRAY
62836: PUSH
62837: LD_INT 2
62839: ARRAY
62840: PPUSH
62841: CALL_OW 116
62845: GO 63136
// if path > tag then
62847: LD_VAR 0 2
62851: PUSH
62852: LD_VAR 0 9
62856: GREATER
62857: IFFALSE 63065
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62859: LD_ADDR_VAR 0 6
62863: PUSH
62864: LD_VAR 0 5
62868: PPUSH
62869: LD_INT 91
62871: PUSH
62872: LD_VAR 0 4
62876: PUSH
62877: LD_INT 8
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: PPUSH
62885: CALL_OW 72
62889: ST_TO_ADDR
// if nearEnemy then
62890: LD_VAR 0 6
62894: IFFALSE 62963
// begin if GetWeapon ( i ) = ru_time_lapser then
62896: LD_VAR 0 4
62900: PPUSH
62901: CALL_OW 264
62905: PUSH
62906: LD_INT 49
62908: EQUAL
62909: IFFALSE 62937
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62911: LD_VAR 0 4
62915: PPUSH
62916: LD_VAR 0 6
62920: PPUSH
62921: LD_VAR 0 4
62925: PPUSH
62926: CALL_OW 74
62930: PPUSH
62931: CALL_OW 112
62935: GO 62961
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62937: LD_VAR 0 4
62941: PPUSH
62942: LD_VAR 0 6
62946: PPUSH
62947: LD_VAR 0 4
62951: PPUSH
62952: CALL_OW 74
62956: PPUSH
62957: CALL 64065 0 2
// end else
62961: GO 63063
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62963: LD_VAR 0 4
62967: PPUSH
62968: LD_VAR 0 2
62972: PUSH
62973: LD_VAR 0 9
62977: ARRAY
62978: PUSH
62979: LD_INT 1
62981: ARRAY
62982: PPUSH
62983: LD_VAR 0 2
62987: PUSH
62988: LD_VAR 0 9
62992: ARRAY
62993: PUSH
62994: LD_INT 2
62996: ARRAY
62997: PPUSH
62998: CALL_OW 297
63002: PUSH
63003: LD_INT 6
63005: GREATER
63006: IFFALSE 63049
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63008: LD_VAR 0 4
63012: PPUSH
63013: LD_VAR 0 2
63017: PUSH
63018: LD_VAR 0 9
63022: ARRAY
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PPUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_VAR 0 9
63037: ARRAY
63038: PUSH
63039: LD_INT 2
63041: ARRAY
63042: PPUSH
63043: CALL_OW 114
63047: GO 63063
// SetTag ( i , tag ) ;
63049: LD_VAR 0 4
63053: PPUSH
63054: LD_VAR 0 9
63058: PPUSH
63059: CALL_OW 109
// end else
63063: GO 63136
// if enemy then
63065: LD_VAR 0 5
63069: IFFALSE 63136
// begin if GetWeapon ( i ) = ru_time_lapser then
63071: LD_VAR 0 4
63075: PPUSH
63076: CALL_OW 264
63080: PUSH
63081: LD_INT 49
63083: EQUAL
63084: IFFALSE 63112
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63086: LD_VAR 0 4
63090: PPUSH
63091: LD_VAR 0 5
63095: PPUSH
63096: LD_VAR 0 4
63100: PPUSH
63101: CALL_OW 74
63105: PPUSH
63106: CALL_OW 112
63110: GO 63136
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63112: LD_VAR 0 4
63116: PPUSH
63117: LD_VAR 0 5
63121: PPUSH
63122: LD_VAR 0 4
63126: PPUSH
63127: CALL_OW 74
63131: PPUSH
63132: CALL 64065 0 2
// end ; end ;
63136: GO 62716
63138: POP
63139: POP
// end ;
63140: LD_VAR 0 3
63144: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63145: LD_INT 0
63147: PPUSH
63148: PPUSH
63149: PPUSH
// if not unit or IsInUnit ( unit ) then
63150: LD_VAR 0 1
63154: NOT
63155: PUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL_OW 310
63165: OR
63166: IFFALSE 63170
// exit ;
63168: GO 63261
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63170: LD_ADDR_VAR 0 4
63174: PUSH
63175: LD_VAR 0 1
63179: PPUSH
63180: CALL_OW 250
63184: PPUSH
63185: LD_VAR 0 2
63189: PPUSH
63190: LD_INT 1
63192: PPUSH
63193: CALL_OW 272
63197: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63198: LD_ADDR_VAR 0 5
63202: PUSH
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL_OW 251
63212: PPUSH
63213: LD_VAR 0 2
63217: PPUSH
63218: LD_INT 1
63220: PPUSH
63221: CALL_OW 273
63225: ST_TO_ADDR
// if ValidHex ( x , y ) then
63226: LD_VAR 0 4
63230: PPUSH
63231: LD_VAR 0 5
63235: PPUSH
63236: CALL_OW 488
63240: IFFALSE 63261
// ComTurnXY ( unit , x , y ) ;
63242: LD_VAR 0 1
63246: PPUSH
63247: LD_VAR 0 4
63251: PPUSH
63252: LD_VAR 0 5
63256: PPUSH
63257: CALL_OW 118
// end ;
63261: LD_VAR 0 3
63265: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63266: LD_INT 0
63268: PPUSH
63269: PPUSH
// result := false ;
63270: LD_ADDR_VAR 0 3
63274: PUSH
63275: LD_INT 0
63277: ST_TO_ADDR
// if not units then
63278: LD_VAR 0 2
63282: NOT
63283: IFFALSE 63287
// exit ;
63285: GO 63332
// for i in units do
63287: LD_ADDR_VAR 0 4
63291: PUSH
63292: LD_VAR 0 2
63296: PUSH
63297: FOR_IN
63298: IFFALSE 63330
// if See ( side , i ) then
63300: LD_VAR 0 1
63304: PPUSH
63305: LD_VAR 0 4
63309: PPUSH
63310: CALL_OW 292
63314: IFFALSE 63328
// begin result := true ;
63316: LD_ADDR_VAR 0 3
63320: PUSH
63321: LD_INT 1
63323: ST_TO_ADDR
// exit ;
63324: POP
63325: POP
63326: GO 63332
// end ;
63328: GO 63297
63330: POP
63331: POP
// end ;
63332: LD_VAR 0 3
63336: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63337: LD_INT 0
63339: PPUSH
63340: PPUSH
63341: PPUSH
63342: PPUSH
// if not unit or not points then
63343: LD_VAR 0 1
63347: NOT
63348: PUSH
63349: LD_VAR 0 2
63353: NOT
63354: OR
63355: IFFALSE 63359
// exit ;
63357: GO 63449
// dist := 99999 ;
63359: LD_ADDR_VAR 0 5
63363: PUSH
63364: LD_INT 99999
63366: ST_TO_ADDR
// for i in points do
63367: LD_ADDR_VAR 0 4
63371: PUSH
63372: LD_VAR 0 2
63376: PUSH
63377: FOR_IN
63378: IFFALSE 63447
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63380: LD_ADDR_VAR 0 6
63384: PUSH
63385: LD_VAR 0 1
63389: PPUSH
63390: LD_VAR 0 4
63394: PUSH
63395: LD_INT 1
63397: ARRAY
63398: PPUSH
63399: LD_VAR 0 4
63403: PUSH
63404: LD_INT 2
63406: ARRAY
63407: PPUSH
63408: CALL_OW 297
63412: ST_TO_ADDR
// if tmpDist < dist then
63413: LD_VAR 0 6
63417: PUSH
63418: LD_VAR 0 5
63422: LESS
63423: IFFALSE 63445
// begin result := i ;
63425: LD_ADDR_VAR 0 3
63429: PUSH
63430: LD_VAR 0 4
63434: ST_TO_ADDR
// dist := tmpDist ;
63435: LD_ADDR_VAR 0 5
63439: PUSH
63440: LD_VAR 0 6
63444: ST_TO_ADDR
// end ; end ;
63445: GO 63377
63447: POP
63448: POP
// end ;
63449: LD_VAR 0 3
63453: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63454: LD_INT 0
63456: PPUSH
// uc_side := side ;
63457: LD_ADDR_OWVAR 20
63461: PUSH
63462: LD_VAR 0 1
63466: ST_TO_ADDR
// uc_nation := 3 ;
63467: LD_ADDR_OWVAR 21
63471: PUSH
63472: LD_INT 3
63474: ST_TO_ADDR
// vc_chassis := 25 ;
63475: LD_ADDR_OWVAR 37
63479: PUSH
63480: LD_INT 25
63482: ST_TO_ADDR
// vc_engine := engine_siberite ;
63483: LD_ADDR_OWVAR 39
63487: PUSH
63488: LD_INT 3
63490: ST_TO_ADDR
// vc_control := control_computer ;
63491: LD_ADDR_OWVAR 38
63495: PUSH
63496: LD_INT 3
63498: ST_TO_ADDR
// vc_weapon := 59 ;
63499: LD_ADDR_OWVAR 40
63503: PUSH
63504: LD_INT 59
63506: ST_TO_ADDR
// result := CreateVehicle ;
63507: LD_ADDR_VAR 0 5
63511: PUSH
63512: CALL_OW 45
63516: ST_TO_ADDR
// SetDir ( result , d ) ;
63517: LD_VAR 0 5
63521: PPUSH
63522: LD_VAR 0 4
63526: PPUSH
63527: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63531: LD_VAR 0 5
63535: PPUSH
63536: LD_VAR 0 2
63540: PPUSH
63541: LD_VAR 0 3
63545: PPUSH
63546: LD_INT 0
63548: PPUSH
63549: CALL_OW 48
// end ;
63553: LD_VAR 0 5
63557: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63558: LD_INT 0
63560: PPUSH
63561: PPUSH
63562: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63563: LD_ADDR_VAR 0 2
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63586: LD_VAR 0 1
63590: NOT
63591: PUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: CALL_OW 264
63601: PUSH
63602: LD_INT 12
63604: PUSH
63605: LD_INT 51
63607: PUSH
63608: LD_INT 32
63610: PUSH
63611: LD_INT 89
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: IN
63620: NOT
63621: OR
63622: IFFALSE 63626
// exit ;
63624: GO 63724
// for i := 1 to 3 do
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: DOUBLE
63632: LD_INT 1
63634: DEC
63635: ST_TO_ADDR
63636: LD_INT 3
63638: PUSH
63639: FOR_TO
63640: IFFALSE 63722
// begin tmp := GetCargo ( cargo , i ) ;
63642: LD_ADDR_VAR 0 4
63646: PUSH
63647: LD_VAR 0 1
63651: PPUSH
63652: LD_VAR 0 3
63656: PPUSH
63657: CALL_OW 289
63661: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63662: LD_ADDR_VAR 0 2
63666: PUSH
63667: LD_VAR 0 2
63671: PPUSH
63672: LD_VAR 0 3
63676: PPUSH
63677: LD_VAR 0 4
63681: PPUSH
63682: CALL_OW 1
63686: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63687: LD_ADDR_VAR 0 2
63691: PUSH
63692: LD_VAR 0 2
63696: PPUSH
63697: LD_INT 4
63699: PPUSH
63700: LD_VAR 0 2
63704: PUSH
63705: LD_INT 4
63707: ARRAY
63708: PUSH
63709: LD_VAR 0 4
63713: PLUS
63714: PPUSH
63715: CALL_OW 1
63719: ST_TO_ADDR
// end ;
63720: GO 63639
63722: POP
63723: POP
// end ;
63724: LD_VAR 0 2
63728: RET
// export function Length ( array ) ; begin
63729: LD_INT 0
63731: PPUSH
// result := array + 0 ;
63732: LD_ADDR_VAR 0 2
63736: PUSH
63737: LD_VAR 0 1
63741: PUSH
63742: LD_INT 0
63744: PLUS
63745: ST_TO_ADDR
// end ;
63746: LD_VAR 0 2
63750: RET
// export function PrepareArray ( array ) ; begin
63751: LD_INT 0
63753: PPUSH
// result := array diff 0 ;
63754: LD_ADDR_VAR 0 2
63758: PUSH
63759: LD_VAR 0 1
63763: PUSH
63764: LD_INT 0
63766: DIFF
63767: ST_TO_ADDR
// if not result [ 1 ] then
63768: LD_VAR 0 2
63772: PUSH
63773: LD_INT 1
63775: ARRAY
63776: NOT
63777: IFFALSE 63797
// result := Delete ( result , 1 ) ;
63779: LD_ADDR_VAR 0 2
63783: PUSH
63784: LD_VAR 0 2
63788: PPUSH
63789: LD_INT 1
63791: PPUSH
63792: CALL_OW 3
63796: ST_TO_ADDR
// end ;
63797: LD_VAR 0 2
63801: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63802: LD_INT 0
63804: PPUSH
63805: PPUSH
63806: PPUSH
63807: PPUSH
// sibRocketRange := 25 ;
63808: LD_ADDR_VAR 0 6
63812: PUSH
63813: LD_INT 25
63815: ST_TO_ADDR
// result := false ;
63816: LD_ADDR_VAR 0 4
63820: PUSH
63821: LD_INT 0
63823: ST_TO_ADDR
// for i := 0 to 5 do
63824: LD_ADDR_VAR 0 5
63828: PUSH
63829: DOUBLE
63830: LD_INT 0
63832: DEC
63833: ST_TO_ADDR
63834: LD_INT 5
63836: PUSH
63837: FOR_TO
63838: IFFALSE 63905
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63840: LD_VAR 0 1
63844: PPUSH
63845: LD_VAR 0 5
63849: PPUSH
63850: LD_VAR 0 6
63854: PPUSH
63855: CALL_OW 272
63859: PPUSH
63860: LD_VAR 0 2
63864: PPUSH
63865: LD_VAR 0 5
63869: PPUSH
63870: LD_VAR 0 6
63874: PPUSH
63875: CALL_OW 273
63879: PPUSH
63880: LD_VAR 0 3
63884: PPUSH
63885: CALL_OW 309
63889: IFFALSE 63903
// begin result := true ;
63891: LD_ADDR_VAR 0 4
63895: PUSH
63896: LD_INT 1
63898: ST_TO_ADDR
// exit ;
63899: POP
63900: POP
63901: GO 63907
// end ;
63903: GO 63837
63905: POP
63906: POP
// end ;
63907: LD_VAR 0 4
63911: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63912: LD_INT 0
63914: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63915: LD_VAR 0 1
63919: PPUSH
63920: LD_VAR 0 2
63924: PPUSH
63925: LD_INT 0
63927: PPUSH
63928: LD_INT 0
63930: PPUSH
63931: LD_INT 1
63933: PPUSH
63934: LD_INT 0
63936: PPUSH
63937: CALL_OW 587
// end ;
63941: LD_VAR 0 3
63945: RET
// export function CenterOnNow ( unit ) ; begin
63946: LD_INT 0
63948: PPUSH
// result := IsInUnit ( unit ) ;
63949: LD_ADDR_VAR 0 2
63953: PUSH
63954: LD_VAR 0 1
63958: PPUSH
63959: CALL_OW 310
63963: ST_TO_ADDR
// if not result then
63964: LD_VAR 0 2
63968: NOT
63969: IFFALSE 63981
// result := unit ;
63971: LD_ADDR_VAR 0 2
63975: PUSH
63976: LD_VAR 0 1
63980: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63981: LD_VAR 0 1
63985: PPUSH
63986: CALL_OW 87
// end ;
63990: LD_VAR 0 2
63994: RET
// export function ComMoveHex ( unit , hex ) ; begin
63995: LD_INT 0
63997: PPUSH
// if not hex then
63998: LD_VAR 0 2
64002: NOT
64003: IFFALSE 64007
// exit ;
64005: GO 64060
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64007: LD_VAR 0 2
64011: PUSH
64012: LD_INT 1
64014: ARRAY
64015: PPUSH
64016: LD_VAR 0 2
64020: PUSH
64021: LD_INT 2
64023: ARRAY
64024: PPUSH
64025: CALL_OW 428
64029: IFFALSE 64033
// exit ;
64031: GO 64060
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64033: LD_VAR 0 1
64037: PPUSH
64038: LD_VAR 0 2
64042: PUSH
64043: LD_INT 1
64045: ARRAY
64046: PPUSH
64047: LD_VAR 0 2
64051: PUSH
64052: LD_INT 2
64054: ARRAY
64055: PPUSH
64056: CALL_OW 111
// end ;
64060: LD_VAR 0 3
64064: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64065: LD_INT 0
64067: PPUSH
64068: PPUSH
64069: PPUSH
// if not unit or not enemy then
64070: LD_VAR 0 1
64074: NOT
64075: PUSH
64076: LD_VAR 0 2
64080: NOT
64081: OR
64082: IFFALSE 64086
// exit ;
64084: GO 64210
// x := GetX ( enemy ) ;
64086: LD_ADDR_VAR 0 4
64090: PUSH
64091: LD_VAR 0 2
64095: PPUSH
64096: CALL_OW 250
64100: ST_TO_ADDR
// y := GetY ( enemy ) ;
64101: LD_ADDR_VAR 0 5
64105: PUSH
64106: LD_VAR 0 2
64110: PPUSH
64111: CALL_OW 251
64115: ST_TO_ADDR
// if ValidHex ( x , y ) then
64116: LD_VAR 0 4
64120: PPUSH
64121: LD_VAR 0 5
64125: PPUSH
64126: CALL_OW 488
64130: IFFALSE 64210
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64132: LD_VAR 0 2
64136: PPUSH
64137: CALL_OW 247
64141: PUSH
64142: LD_INT 3
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: IN
64152: PUSH
64153: LD_VAR 0 1
64157: PPUSH
64158: CALL_OW 255
64162: PPUSH
64163: LD_VAR 0 2
64167: PPUSH
64168: CALL_OW 292
64172: OR
64173: IFFALSE 64191
// ComAttackUnit ( unit , enemy ) else
64175: LD_VAR 0 1
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: CALL_OW 115
64189: GO 64210
// ComAgressiveMove ( unit , x , y ) ;
64191: LD_VAR 0 1
64195: PPUSH
64196: LD_VAR 0 4
64200: PPUSH
64201: LD_VAR 0 5
64205: PPUSH
64206: CALL_OW 114
// end ;
64210: LD_VAR 0 3
64214: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64215: LD_INT 0
64217: PPUSH
64218: PPUSH
64219: PPUSH
// list := AreaToList ( area , 0 ) ;
64220: LD_ADDR_VAR 0 5
64224: PUSH
64225: LD_VAR 0 1
64229: PPUSH
64230: LD_INT 0
64232: PPUSH
64233: CALL_OW 517
64237: ST_TO_ADDR
// if not list then
64238: LD_VAR 0 5
64242: NOT
64243: IFFALSE 64247
// exit ;
64245: GO 64377
// if all then
64247: LD_VAR 0 2
64251: IFFALSE 64339
// begin for i := 1 to list [ 1 ] do
64253: LD_ADDR_VAR 0 4
64257: PUSH
64258: DOUBLE
64259: LD_INT 1
64261: DEC
64262: ST_TO_ADDR
64263: LD_VAR 0 5
64267: PUSH
64268: LD_INT 1
64270: ARRAY
64271: PUSH
64272: FOR_TO
64273: IFFALSE 64335
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64275: LD_ADDR_VAR 0 3
64279: PUSH
64280: LD_VAR 0 3
64284: PPUSH
64285: LD_VAR 0 3
64289: PUSH
64290: LD_INT 1
64292: PLUS
64293: PPUSH
64294: LD_VAR 0 5
64298: PUSH
64299: LD_INT 1
64301: ARRAY
64302: PUSH
64303: LD_VAR 0 4
64307: ARRAY
64308: PUSH
64309: LD_VAR 0 5
64313: PUSH
64314: LD_INT 2
64316: ARRAY
64317: PUSH
64318: LD_VAR 0 4
64322: ARRAY
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PPUSH
64328: CALL_OW 1
64332: ST_TO_ADDR
64333: GO 64272
64335: POP
64336: POP
// exit ;
64337: GO 64377
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64339: LD_ADDR_VAR 0 3
64343: PUSH
64344: LD_VAR 0 5
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: PUSH
64353: LD_INT 1
64355: ARRAY
64356: PUSH
64357: LD_VAR 0 5
64361: PUSH
64362: LD_INT 2
64364: ARRAY
64365: PUSH
64366: LD_INT 1
64368: ARRAY
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: ST_TO_ADDR
// end ;
64377: LD_VAR 0 3
64381: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64382: LD_INT 0
64384: PPUSH
64385: PPUSH
// list := AreaToList ( area , 0 ) ;
64386: LD_ADDR_VAR 0 4
64390: PUSH
64391: LD_VAR 0 1
64395: PPUSH
64396: LD_INT 0
64398: PPUSH
64399: CALL_OW 517
64403: ST_TO_ADDR
// if not list then
64404: LD_VAR 0 4
64408: NOT
64409: IFFALSE 64413
// exit ;
64411: GO 64454
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64413: LD_ADDR_VAR 0 3
64417: PUSH
64418: LD_VAR 0 4
64422: PUSH
64423: LD_INT 1
64425: ARRAY
64426: PUSH
64427: LD_INT 1
64429: ARRAY
64430: PUSH
64431: LD_VAR 0 4
64435: PUSH
64436: LD_INT 2
64438: ARRAY
64439: PUSH
64440: LD_INT 1
64442: ARRAY
64443: PUSH
64444: LD_VAR 0 2
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: LIST
64453: ST_TO_ADDR
// end ;
64454: LD_VAR 0 3
64458: RET
// export function First ( array ) ; begin
64459: LD_INT 0
64461: PPUSH
// if not array then
64462: LD_VAR 0 1
64466: NOT
64467: IFFALSE 64471
// exit ;
64469: GO 64485
// result := array [ 1 ] ;
64471: LD_ADDR_VAR 0 2
64475: PUSH
64476: LD_VAR 0 1
64480: PUSH
64481: LD_INT 1
64483: ARRAY
64484: ST_TO_ADDR
// end ;
64485: LD_VAR 0 2
64489: RET
// export function Last ( array ) ; begin
64490: LD_INT 0
64492: PPUSH
// if not array then
64493: LD_VAR 0 1
64497: NOT
64498: IFFALSE 64502
// exit ;
64500: GO 64518
// result := array [ array ] ;
64502: LD_ADDR_VAR 0 2
64506: PUSH
64507: LD_VAR 0 1
64511: PUSH
64512: LD_VAR 0 1
64516: ARRAY
64517: ST_TO_ADDR
// end ;
64518: LD_VAR 0 2
64522: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64523: LD_INT 0
64525: PPUSH
64526: PPUSH
// result := [ ] ;
64527: LD_ADDR_VAR 0 5
64531: PUSH
64532: EMPTY
64533: ST_TO_ADDR
// if not array then
64534: LD_VAR 0 1
64538: NOT
64539: IFFALSE 64543
// exit ;
64541: GO 64655
// for i := 1 to array do
64543: LD_ADDR_VAR 0 6
64547: PUSH
64548: DOUBLE
64549: LD_INT 1
64551: DEC
64552: ST_TO_ADDR
64553: LD_VAR 0 1
64557: PUSH
64558: FOR_TO
64559: IFFALSE 64653
// if array [ i ] [ index ] = value then
64561: LD_VAR 0 1
64565: PUSH
64566: LD_VAR 0 6
64570: ARRAY
64571: PUSH
64572: LD_VAR 0 2
64576: ARRAY
64577: PUSH
64578: LD_VAR 0 3
64582: EQUAL
64583: IFFALSE 64651
// begin if indexColumn then
64585: LD_VAR 0 4
64589: IFFALSE 64625
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64591: LD_ADDR_VAR 0 5
64595: PUSH
64596: LD_VAR 0 5
64600: PPUSH
64601: LD_VAR 0 1
64605: PUSH
64606: LD_VAR 0 6
64610: ARRAY
64611: PUSH
64612: LD_VAR 0 4
64616: ARRAY
64617: PPUSH
64618: CALL 59993 0 2
64622: ST_TO_ADDR
64623: GO 64651
// result := Join ( result , array [ i ] ) ;
64625: LD_ADDR_VAR 0 5
64629: PUSH
64630: LD_VAR 0 5
64634: PPUSH
64635: LD_VAR 0 1
64639: PUSH
64640: LD_VAR 0 6
64644: ARRAY
64645: PPUSH
64646: CALL 59993 0 2
64650: ST_TO_ADDR
// end ;
64651: GO 64558
64653: POP
64654: POP
// end ;
64655: LD_VAR 0 5
64659: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64660: LD_INT 0
64662: PPUSH
64663: PPUSH
64664: PPUSH
// if btype = b_depot then
64665: LD_VAR 0 2
64669: PUSH
64670: LD_INT 0
64672: EQUAL
64673: IFFALSE 64685
// begin result := true ;
64675: LD_ADDR_VAR 0 3
64679: PUSH
64680: LD_INT 1
64682: ST_TO_ADDR
// exit ;
64683: GO 64801
// end ; pom := GetBase ( depot ) ;
64685: LD_ADDR_VAR 0 4
64689: PUSH
64690: LD_VAR 0 1
64694: PPUSH
64695: CALL_OW 274
64699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64700: LD_ADDR_VAR 0 5
64704: PUSH
64705: LD_VAR 0 2
64709: PPUSH
64710: LD_VAR 0 1
64714: PPUSH
64715: CALL_OW 248
64719: PPUSH
64720: CALL_OW 450
64724: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64725: LD_ADDR_VAR 0 3
64729: PUSH
64730: LD_VAR 0 4
64734: PPUSH
64735: LD_INT 1
64737: PPUSH
64738: CALL_OW 275
64742: PUSH
64743: LD_VAR 0 5
64747: PUSH
64748: LD_INT 1
64750: ARRAY
64751: GREATEREQUAL
64752: PUSH
64753: LD_VAR 0 4
64757: PPUSH
64758: LD_INT 2
64760: PPUSH
64761: CALL_OW 275
64765: PUSH
64766: LD_VAR 0 5
64770: PUSH
64771: LD_INT 2
64773: ARRAY
64774: GREATEREQUAL
64775: AND
64776: PUSH
64777: LD_VAR 0 4
64781: PPUSH
64782: LD_INT 3
64784: PPUSH
64785: CALL_OW 275
64789: PUSH
64790: LD_VAR 0 5
64794: PUSH
64795: LD_INT 3
64797: ARRAY
64798: GREATEREQUAL
64799: AND
64800: ST_TO_ADDR
// end ;
64801: LD_VAR 0 3
64805: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64806: LD_INT 0
64808: PPUSH
// if not vehicles or not parkingPoint then
64809: LD_VAR 0 1
64813: NOT
64814: PUSH
64815: LD_VAR 0 2
64819: NOT
64820: OR
64821: IFFALSE 64825
// exit ;
64823: GO 64923
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64825: LD_ADDR_VAR 0 1
64829: PUSH
64830: LD_VAR 0 1
64834: PPUSH
64835: LD_INT 50
64837: PUSH
64838: EMPTY
64839: LIST
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: LD_INT 92
64846: PUSH
64847: LD_VAR 0 2
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: PUSH
64856: LD_VAR 0 2
64860: PUSH
64861: LD_INT 2
64863: ARRAY
64864: PUSH
64865: LD_INT 8
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PPUSH
64882: CALL_OW 72
64886: ST_TO_ADDR
// if not vehicles then
64887: LD_VAR 0 1
64891: NOT
64892: IFFALSE 64896
// exit ;
64894: GO 64923
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
64896: LD_VAR 0 1
64900: PPUSH
64901: LD_VAR 0 2
64905: PUSH
64906: LD_INT 1
64908: ARRAY
64909: PPUSH
64910: LD_VAR 0 2
64914: PUSH
64915: LD_INT 2
64917: ARRAY
64918: PPUSH
64919: CALL_OW 111
// end ;
64923: LD_VAR 0 3
64927: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
64928: LD_INT 0
64930: PPUSH
64931: PPUSH
64932: PPUSH
// if not side or not area then
64933: LD_VAR 0 1
64937: NOT
64938: PUSH
64939: LD_VAR 0 2
64943: NOT
64944: OR
64945: IFFALSE 64949
// exit ;
64947: GO 65068
// tmp := AreaToList ( area , 0 ) ;
64949: LD_ADDR_VAR 0 5
64953: PUSH
64954: LD_VAR 0 2
64958: PPUSH
64959: LD_INT 0
64961: PPUSH
64962: CALL_OW 517
64966: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64967: LD_ADDR_VAR 0 4
64971: PUSH
64972: DOUBLE
64973: LD_INT 1
64975: DEC
64976: ST_TO_ADDR
64977: LD_VAR 0 5
64981: PUSH
64982: LD_INT 1
64984: ARRAY
64985: PUSH
64986: FOR_TO
64987: IFFALSE 65066
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
64989: LD_VAR 0 5
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: PUSH
64998: LD_VAR 0 4
65002: ARRAY
65003: PPUSH
65004: LD_VAR 0 5
65008: PUSH
65009: LD_INT 2
65011: ARRAY
65012: PUSH
65013: LD_VAR 0 4
65017: ARRAY
65018: PPUSH
65019: CALL_OW 351
65023: IFFALSE 65064
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65025: LD_VAR 0 5
65029: PUSH
65030: LD_INT 1
65032: ARRAY
65033: PUSH
65034: LD_VAR 0 4
65038: ARRAY
65039: PPUSH
65040: LD_VAR 0 5
65044: PUSH
65045: LD_INT 2
65047: ARRAY
65048: PUSH
65049: LD_VAR 0 4
65053: ARRAY
65054: PPUSH
65055: LD_VAR 0 1
65059: PPUSH
65060: CALL_OW 244
// end ;
65064: GO 64986
65066: POP
65067: POP
// end ;
65068: LD_VAR 0 3
65072: RET
