// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2757 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3221 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3221 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16223 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16475 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 62197 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
1517: LD_STRING displayDifficulty(
1519: PUSH
1520: LD_OWVAR 67
1524: STR
1525: PUSH
1526: LD_STRING )
1528: STR
1529: PPUSH
1530: CALL_OW 559
// end ;
1534: LD_VAR 0 1
1538: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1539: LD_INT 0
1541: PPUSH
// if p2 = stream_mode then
1542: LD_VAR 0 2
1546: PUSH
1547: LD_INT 100
1549: EQUAL
1550: IFFALSE 2553
// begin if not StreamModeActive then
1552: LD_EXP 3
1556: NOT
1557: IFFALSE 1567
// StreamModeActive := true ;
1559: LD_ADDR_EXP 3
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// if p3 = 0 then
1567: LD_VAR 0 3
1571: PUSH
1572: LD_INT 0
1574: EQUAL
1575: IFFALSE 1581
// InitStreamMode ;
1577: CALL 2757 0 0
// if p3 = 1 then
1581: LD_VAR 0 3
1585: PUSH
1586: LD_INT 1
1588: EQUAL
1589: IFFALSE 1599
// sRocket := true ;
1591: LD_ADDR_EXP 8
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// if p3 = 2 then
1599: LD_VAR 0 3
1603: PUSH
1604: LD_INT 2
1606: EQUAL
1607: IFFALSE 1617
// sSpeed := true ;
1609: LD_ADDR_EXP 7
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// if p3 = 3 then
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 3
1624: EQUAL
1625: IFFALSE 1635
// sEngine := true ;
1627: LD_ADDR_EXP 9
1631: PUSH
1632: LD_INT 1
1634: ST_TO_ADDR
// if p3 = 4 then
1635: LD_VAR 0 3
1639: PUSH
1640: LD_INT 4
1642: EQUAL
1643: IFFALSE 1653
// sSpec := true ;
1645: LD_ADDR_EXP 6
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// if p3 = 5 then
1653: LD_VAR 0 3
1657: PUSH
1658: LD_INT 5
1660: EQUAL
1661: IFFALSE 1671
// sLevel := true ;
1663: LD_ADDR_EXP 10
1667: PUSH
1668: LD_INT 1
1670: ST_TO_ADDR
// if p3 = 6 then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 6
1678: EQUAL
1679: IFFALSE 1689
// sArmoury := true ;
1681: LD_ADDR_EXP 11
1685: PUSH
1686: LD_INT 1
1688: ST_TO_ADDR
// if p3 = 7 then
1689: LD_VAR 0 3
1693: PUSH
1694: LD_INT 7
1696: EQUAL
1697: IFFALSE 1707
// sRadar := true ;
1699: LD_ADDR_EXP 12
1703: PUSH
1704: LD_INT 1
1706: ST_TO_ADDR
// if p3 = 8 then
1707: LD_VAR 0 3
1711: PUSH
1712: LD_INT 8
1714: EQUAL
1715: IFFALSE 1725
// sBunker := true ;
1717: LD_ADDR_EXP 13
1721: PUSH
1722: LD_INT 1
1724: ST_TO_ADDR
// if p3 = 9 then
1725: LD_VAR 0 3
1729: PUSH
1730: LD_INT 9
1732: EQUAL
1733: IFFALSE 1743
// sHack := true ;
1735: LD_ADDR_EXP 14
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// if p3 = 10 then
1743: LD_VAR 0 3
1747: PUSH
1748: LD_INT 10
1750: EQUAL
1751: IFFALSE 1761
// sFire := true ;
1753: LD_ADDR_EXP 15
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// if p3 = 11 then
1761: LD_VAR 0 3
1765: PUSH
1766: LD_INT 11
1768: EQUAL
1769: IFFALSE 1779
// sRefresh := true ;
1771: LD_ADDR_EXP 16
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// if p3 = 12 then
1779: LD_VAR 0 3
1783: PUSH
1784: LD_INT 12
1786: EQUAL
1787: IFFALSE 1797
// sExp := true ;
1789: LD_ADDR_EXP 17
1793: PUSH
1794: LD_INT 1
1796: ST_TO_ADDR
// if p3 = 13 then
1797: LD_VAR 0 3
1801: PUSH
1802: LD_INT 13
1804: EQUAL
1805: IFFALSE 1815
// sDepot := true ;
1807: LD_ADDR_EXP 18
1811: PUSH
1812: LD_INT 1
1814: ST_TO_ADDR
// if p3 = 14 then
1815: LD_VAR 0 3
1819: PUSH
1820: LD_INT 14
1822: EQUAL
1823: IFFALSE 1833
// sFlag := true ;
1825: LD_ADDR_EXP 19
1829: PUSH
1830: LD_INT 1
1832: ST_TO_ADDR
// if p3 = 15 then
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 15
1840: EQUAL
1841: IFFALSE 1851
// sKamikadze := true ;
1843: LD_ADDR_EXP 27
1847: PUSH
1848: LD_INT 1
1850: ST_TO_ADDR
// if p3 = 16 then
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 16
1858: EQUAL
1859: IFFALSE 1869
// sTroll := true ;
1861: LD_ADDR_EXP 28
1865: PUSH
1866: LD_INT 1
1868: ST_TO_ADDR
// if p3 = 17 then
1869: LD_VAR 0 3
1873: PUSH
1874: LD_INT 17
1876: EQUAL
1877: IFFALSE 1887
// sSlow := true ;
1879: LD_ADDR_EXP 29
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// if p3 = 18 then
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 18
1894: EQUAL
1895: IFFALSE 1905
// sLack := true ;
1897: LD_ADDR_EXP 30
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if p3 = 19 then
1905: LD_VAR 0 3
1909: PUSH
1910: LD_INT 19
1912: EQUAL
1913: IFFALSE 1923
// sTank := true ;
1915: LD_ADDR_EXP 32
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// if p3 = 20 then
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 20
1930: EQUAL
1931: IFFALSE 1941
// sRemote := true ;
1933: LD_ADDR_EXP 33
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// if p3 = 21 then
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 21
1948: EQUAL
1949: IFFALSE 1959
// sPowell := true ;
1951: LD_ADDR_EXP 34
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 22 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 22
1966: EQUAL
1967: IFFALSE 1977
// sTeleport := true ;
1969: LD_ADDR_EXP 37
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// if p3 = 23 then
1977: LD_VAR 0 3
1981: PUSH
1982: LD_INT 23
1984: EQUAL
1985: IFFALSE 1995
// sOilTower := true ;
1987: LD_ADDR_EXP 39
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if p3 = 24 then
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 24
2002: EQUAL
2003: IFFALSE 2013
// sShovel := true ;
2005: LD_ADDR_EXP 40
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 25 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 25
2020: EQUAL
2021: IFFALSE 2031
// sSheik := true ;
2023: LD_ADDR_EXP 41
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 26 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 26
2038: EQUAL
2039: IFFALSE 2049
// sEarthquake := true ;
2041: LD_ADDR_EXP 43
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 27 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 27
2056: EQUAL
2057: IFFALSE 2067
// sAI := true ;
2059: LD_ADDR_EXP 44
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 28 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 28
2074: EQUAL
2075: IFFALSE 2085
// sCargo := true ;
2077: LD_ADDR_EXP 47
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 29 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 29
2092: EQUAL
2093: IFFALSE 2103
// sDLaser := true ;
2095: LD_ADDR_EXP 48
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 30 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 30
2110: EQUAL
2111: IFFALSE 2121
// sExchange := true ;
2113: LD_ADDR_EXP 49
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 31 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 31
2128: EQUAL
2129: IFFALSE 2139
// sFac := true ;
2131: LD_ADDR_EXP 50
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 32 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 32
2146: EQUAL
2147: IFFALSE 2157
// sPower := true ;
2149: LD_ADDR_EXP 51
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 33 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 33
2164: EQUAL
2165: IFFALSE 2175
// sRandom := true ;
2167: LD_ADDR_EXP 52
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 34 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 34
2182: EQUAL
2183: IFFALSE 2193
// sShield := true ;
2185: LD_ADDR_EXP 53
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 35 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 35
2200: EQUAL
2201: IFFALSE 2211
// sTime := true ;
2203: LD_ADDR_EXP 54
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 36 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 36
2218: EQUAL
2219: IFFALSE 2229
// sTools := true ;
2221: LD_ADDR_EXP 55
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 101 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 101
2236: EQUAL
2237: IFFALSE 2247
// sSold := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 102 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 102
2254: EQUAL
2255: IFFALSE 2265
// sDiff := true ;
2257: LD_ADDR_EXP 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 103 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 103
2272: EQUAL
2273: IFFALSE 2283
// sFog := true ;
2275: LD_ADDR_EXP 24
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 104 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 104
2290: EQUAL
2291: IFFALSE 2301
// sReset := true ;
2293: LD_ADDR_EXP 25
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 105 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 105
2308: EQUAL
2309: IFFALSE 2319
// sSun := true ;
2311: LD_ADDR_EXP 26
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 106 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 106
2326: EQUAL
2327: IFFALSE 2337
// sTiger := true ;
2329: LD_ADDR_EXP 22
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 107 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 107
2344: EQUAL
2345: IFFALSE 2355
// sBomb := true ;
2347: LD_ADDR_EXP 23
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 108 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 108
2362: EQUAL
2363: IFFALSE 2373
// sWound := true ;
2365: LD_ADDR_EXP 31
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 109 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 109
2380: EQUAL
2381: IFFALSE 2391
// sBetray := true ;
2383: LD_ADDR_EXP 35
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 110 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 110
2398: EQUAL
2399: IFFALSE 2409
// sContamin := true ;
2401: LD_ADDR_EXP 36
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 111 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 111
2416: EQUAL
2417: IFFALSE 2427
// sOil := true ;
2419: LD_ADDR_EXP 38
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 112 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 112
2434: EQUAL
2435: IFFALSE 2445
// sStu := true ;
2437: LD_ADDR_EXP 42
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 113 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 113
2452: EQUAL
2453: IFFALSE 2463
// sBazooka := true ;
2455: LD_ADDR_EXP 45
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 114 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 114
2470: EQUAL
2471: IFFALSE 2481
// sMortar := true ;
2473: LD_ADDR_EXP 46
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 115 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 115
2488: EQUAL
2489: IFFALSE 2499
// sRanger := true ;
2491: LD_ADDR_EXP 56
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 116 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 116
2506: EQUAL
2507: IFFALSE 2517
// sComputer := true ;
2509: LD_ADDR_EXP 57
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 117 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 117
2524: EQUAL
2525: IFFALSE 2535
// s30 := true ;
2527: LD_ADDR_EXP 58
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 118 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 118
2542: EQUAL
2543: IFFALSE 2553
// s60 := true ;
2545: LD_ADDR_EXP 59
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// end ; if p2 = hack_mode then
2553: LD_VAR 0 2
2557: PUSH
2558: LD_INT 101
2560: EQUAL
2561: IFFALSE 2689
// begin case p3 of 1 :
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 1
2570: DOUBLE
2571: EQUAL
2572: IFTRUE 2576
2574: GO 2583
2576: POP
// hHackUnlimitedResources ; 2 :
2577: CALL 14836 0 0
2581: GO 2689
2583: LD_INT 2
2585: DOUBLE
2586: EQUAL
2587: IFTRUE 2591
2589: GO 2598
2591: POP
// hHackSetLevel10 ; 3 :
2592: CALL 14969 0 0
2596: GO 2689
2598: LD_INT 3
2600: DOUBLE
2601: EQUAL
2602: IFTRUE 2606
2604: GO 2613
2606: POP
// hHackSetLevel10YourUnits ; 4 :
2607: CALL 15054 0 0
2611: GO 2689
2613: LD_INT 4
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2628
2621: POP
// hHackInvincible ; 5 :
2622: CALL 15502 0 0
2626: GO 2689
2628: LD_INT 5
2630: DOUBLE
2631: EQUAL
2632: IFTRUE 2636
2634: GO 2643
2636: POP
// hHackInvisible ; 6 :
2637: CALL 15613 0 0
2641: GO 2689
2643: LD_INT 6
2645: DOUBLE
2646: EQUAL
2647: IFTRUE 2651
2649: GO 2658
2651: POP
// hHackChangeYourSide ; 7 :
2652: CALL 15670 0 0
2656: GO 2689
2658: LD_INT 7
2660: DOUBLE
2661: EQUAL
2662: IFTRUE 2666
2664: GO 2673
2666: POP
// hHackChangeUnitSide ; 8 :
2667: CALL 15712 0 0
2671: GO 2689
2673: LD_INT 8
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2688
2681: POP
// hHackFog ; end ;
2682: CALL 15813 0 0
2686: GO 2689
2688: POP
// end ; if p2 = game_save_mode then
2689: LD_VAR 0 2
2693: PUSH
2694: LD_INT 102
2696: EQUAL
2697: IFFALSE 2752
// begin if p3 = 1 then
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: IFFALSE 2719
// globalGameSaveCounter := p4 ;
2709: LD_ADDR_EXP 2
2713: PUSH
2714: LD_VAR 0 4
2718: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 2
2726: EQUAL
2727: PUSH
2728: LD_EXP 2
2732: AND
2733: IFFALSE 2752
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2735: LD_STRING setGameSaveCounter(
2737: PUSH
2738: LD_EXP 2
2742: STR
2743: PUSH
2744: LD_STRING )
2746: STR
2747: PPUSH
2748: CALL_OW 559
// end ; end ;
2752: LD_VAR 0 7
2756: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2757: LD_INT 0
2759: PPUSH
// streamModeActive := false ;
2760: LD_ADDR_EXP 3
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// normalCounter := 36 ;
2768: LD_ADDR_EXP 4
2772: PUSH
2773: LD_INT 36
2775: ST_TO_ADDR
// hardcoreCounter := 18 ;
2776: LD_ADDR_EXP 5
2780: PUSH
2781: LD_INT 18
2783: ST_TO_ADDR
// sRocket := false ;
2784: LD_ADDR_EXP 8
2788: PUSH
2789: LD_INT 0
2791: ST_TO_ADDR
// sSpeed := false ;
2792: LD_ADDR_EXP 7
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// sEngine := false ;
2800: LD_ADDR_EXP 9
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// sSpec := false ;
2808: LD_ADDR_EXP 6
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// sLevel := false ;
2816: LD_ADDR_EXP 10
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// sArmoury := false ;
2824: LD_ADDR_EXP 11
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// sRadar := false ;
2832: LD_ADDR_EXP 12
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// sBunker := false ;
2840: LD_ADDR_EXP 13
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// sHack := false ;
2848: LD_ADDR_EXP 14
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// sFire := false ;
2856: LD_ADDR_EXP 15
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// sRefresh := false ;
2864: LD_ADDR_EXP 16
2868: PUSH
2869: LD_INT 0
2871: ST_TO_ADDR
// sExp := false ;
2872: LD_ADDR_EXP 17
2876: PUSH
2877: LD_INT 0
2879: ST_TO_ADDR
// sDepot := false ;
2880: LD_ADDR_EXP 18
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// sFlag := false ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 0
2895: ST_TO_ADDR
// sKamikadze := false ;
2896: LD_ADDR_EXP 27
2900: PUSH
2901: LD_INT 0
2903: ST_TO_ADDR
// sTroll := false ;
2904: LD_ADDR_EXP 28
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// sSlow := false ;
2912: LD_ADDR_EXP 29
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// sLack := false ;
2920: LD_ADDR_EXP 30
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// sTank := false ;
2928: LD_ADDR_EXP 32
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// sRemote := false ;
2936: LD_ADDR_EXP 33
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// sPowell := false ;
2944: LD_ADDR_EXP 34
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
// sTeleport := false ;
2952: LD_ADDR_EXP 37
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// sOilTower := false ;
2960: LD_ADDR_EXP 39
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// sShovel := false ;
2968: LD_ADDR_EXP 40
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// sSheik := false ;
2976: LD_ADDR_EXP 41
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// sEarthquake := false ;
2984: LD_ADDR_EXP 43
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// sAI := false ;
2992: LD_ADDR_EXP 44
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// sCargo := false ;
3000: LD_ADDR_EXP 47
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// sDLaser := false ;
3008: LD_ADDR_EXP 48
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// sExchange := false ;
3016: LD_ADDR_EXP 49
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// sFac := false ;
3024: LD_ADDR_EXP 50
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// sPower := false ;
3032: LD_ADDR_EXP 51
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// sRandom := false ;
3040: LD_ADDR_EXP 52
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// sShield := false ;
3048: LD_ADDR_EXP 53
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// sTime := false ;
3056: LD_ADDR_EXP 54
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// sTools := false ;
3064: LD_ADDR_EXP 55
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// sSold := false ;
3072: LD_ADDR_EXP 20
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// sDiff := false ;
3080: LD_ADDR_EXP 21
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// sFog := false ;
3088: LD_ADDR_EXP 24
3092: PUSH
3093: LD_INT 0
3095: ST_TO_ADDR
// sReset := false ;
3096: LD_ADDR_EXP 25
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// sSun := false ;
3104: LD_ADDR_EXP 26
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// sTiger := false ;
3112: LD_ADDR_EXP 22
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// sBomb := false ;
3120: LD_ADDR_EXP 23
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sWound := false ;
3128: LD_ADDR_EXP 31
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sBetray := false ;
3136: LD_ADDR_EXP 35
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sContamin := false ;
3144: LD_ADDR_EXP 36
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sOil := false ;
3152: LD_ADDR_EXP 38
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sStu := false ;
3160: LD_ADDR_EXP 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sBazooka := false ;
3168: LD_ADDR_EXP 45
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sMortar := false ;
3176: LD_ADDR_EXP 46
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sRanger := false ;
3184: LD_ADDR_EXP 56
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sComputer := false ;
3192: LD_ADDR_EXP 57
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// s30 := false ;
3200: LD_ADDR_EXP 58
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// s60 := false ;
3208: LD_ADDR_EXP 59
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// end ;
3216: LD_VAR 0 1
3220: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
// result := [ ] ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: EMPTY
3236: ST_TO_ADDR
// if campaign_id = 1 then
3237: LD_OWVAR 69
3241: PUSH
3242: LD_INT 1
3244: EQUAL
3245: IFFALSE 6411
// begin case mission_number of 1 :
3247: LD_OWVAR 70
3251: PUSH
3252: LD_INT 1
3254: DOUBLE
3255: EQUAL
3256: IFTRUE 3260
3258: GO 3336
3260: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: LD_INT 2
3268: PUSH
3269: LD_INT 4
3271: PUSH
3272: LD_INT 11
3274: PUSH
3275: LD_INT 12
3277: PUSH
3278: LD_INT 15
3280: PUSH
3281: LD_INT 16
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 23
3289: PUSH
3290: LD_INT 26
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 101
3306: PUSH
3307: LD_INT 102
3309: PUSH
3310: LD_INT 106
3312: PUSH
3313: LD_INT 116
3315: PUSH
3316: LD_INT 117
3318: PUSH
3319: LD_INT 118
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: ST_TO_ADDR
3334: GO 6409
3336: LD_INT 2
3338: DOUBLE
3339: EQUAL
3340: IFTRUE 3344
3342: GO 3428
3344: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_INT 2
3352: PUSH
3353: LD_INT 4
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 15
3364: PUSH
3365: LD_INT 16
3367: PUSH
3368: LD_INT 22
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 26
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 101
3390: PUSH
3391: LD_INT 102
3393: PUSH
3394: LD_INT 105
3396: PUSH
3397: LD_INT 106
3399: PUSH
3400: LD_INT 108
3402: PUSH
3403: LD_INT 116
3405: PUSH
3406: LD_INT 117
3408: PUSH
3409: LD_INT 118
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: ST_TO_ADDR
3426: GO 6409
3428: LD_INT 3
3430: DOUBLE
3431: EQUAL
3432: IFTRUE 3436
3434: GO 3524
3436: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 11
3453: PUSH
3454: LD_INT 12
3456: PUSH
3457: LD_INT 15
3459: PUSH
3460: LD_INT 16
3462: PUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 26
3468: PUSH
3469: LD_INT 36
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 101
3486: PUSH
3487: LD_INT 102
3489: PUSH
3490: LD_INT 105
3492: PUSH
3493: LD_INT 106
3495: PUSH
3496: LD_INT 108
3498: PUSH
3499: LD_INT 116
3501: PUSH
3502: LD_INT 117
3504: PUSH
3505: LD_INT 118
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: ST_TO_ADDR
3522: GO 6409
3524: LD_INT 4
3526: DOUBLE
3527: EQUAL
3528: IFTRUE 3532
3530: GO 3628
3532: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 11
3552: PUSH
3553: LD_INT 12
3555: PUSH
3556: LD_INT 15
3558: PUSH
3559: LD_INT 16
3561: PUSH
3562: LD_INT 22
3564: PUSH
3565: LD_INT 23
3567: PUSH
3568: LD_INT 26
3570: PUSH
3571: LD_INT 36
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 101
3590: PUSH
3591: LD_INT 102
3593: PUSH
3594: LD_INT 105
3596: PUSH
3597: LD_INT 106
3599: PUSH
3600: LD_INT 108
3602: PUSH
3603: LD_INT 116
3605: PUSH
3606: LD_INT 117
3608: PUSH
3609: LD_INT 118
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: ST_TO_ADDR
3626: GO 6409
3628: LD_INT 5
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3636
3634: GO 3748
3636: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 4
3647: PUSH
3648: LD_INT 5
3650: PUSH
3651: LD_INT 6
3653: PUSH
3654: LD_INT 8
3656: PUSH
3657: LD_INT 11
3659: PUSH
3660: LD_INT 12
3662: PUSH
3663: LD_INT 15
3665: PUSH
3666: LD_INT 16
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 23
3674: PUSH
3675: LD_INT 25
3677: PUSH
3678: LD_INT 26
3680: PUSH
3681: LD_INT 36
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 101
3702: PUSH
3703: LD_INT 102
3705: PUSH
3706: LD_INT 105
3708: PUSH
3709: LD_INT 106
3711: PUSH
3712: LD_INT 108
3714: PUSH
3715: LD_INT 109
3717: PUSH
3718: LD_INT 112
3720: PUSH
3721: LD_INT 116
3723: PUSH
3724: LD_INT 117
3726: PUSH
3727: LD_INT 118
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: ST_TO_ADDR
3746: GO 6409
3748: LD_INT 6
3750: DOUBLE
3751: EQUAL
3752: IFTRUE 3756
3754: GO 3888
3756: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: LD_INT 5
3770: PUSH
3771: LD_INT 6
3773: PUSH
3774: LD_INT 8
3776: PUSH
3777: LD_INT 11
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: LD_INT 15
3785: PUSH
3786: LD_INT 16
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 25
3803: PUSH
3804: LD_INT 26
3806: PUSH
3807: LD_INT 30
3809: PUSH
3810: LD_INT 31
3812: PUSH
3813: LD_INT 32
3815: PUSH
3816: LD_INT 36
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 101
3842: PUSH
3843: LD_INT 102
3845: PUSH
3846: LD_INT 105
3848: PUSH
3849: LD_INT 106
3851: PUSH
3852: LD_INT 108
3854: PUSH
3855: LD_INT 109
3857: PUSH
3858: LD_INT 112
3860: PUSH
3861: LD_INT 116
3863: PUSH
3864: LD_INT 117
3866: PUSH
3867: LD_INT 118
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 6409
3888: LD_INT 7
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4008
3896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 4
3907: PUSH
3908: LD_INT 5
3910: PUSH
3911: LD_INT 7
3913: PUSH
3914: LD_INT 11
3916: PUSH
3917: LD_INT 12
3919: PUSH
3920: LD_INT 15
3922: PUSH
3923: LD_INT 16
3925: PUSH
3926: LD_INT 20
3928: PUSH
3929: LD_INT 21
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 23
3937: PUSH
3938: LD_INT 25
3940: PUSH
3941: LD_INT 26
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 101
3962: PUSH
3963: LD_INT 102
3965: PUSH
3966: LD_INT 103
3968: PUSH
3969: LD_INT 105
3971: PUSH
3972: LD_INT 106
3974: PUSH
3975: LD_INT 108
3977: PUSH
3978: LD_INT 112
3980: PUSH
3981: LD_INT 116
3983: PUSH
3984: LD_INT 117
3986: PUSH
3987: LD_INT 118
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: ST_TO_ADDR
4006: GO 6409
4008: LD_INT 8
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4156
4016: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: LD_INT 6
4033: PUSH
4034: LD_INT 7
4036: PUSH
4037: LD_INT 8
4039: PUSH
4040: LD_INT 11
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: LD_INT 15
4048: PUSH
4049: LD_INT 16
4051: PUSH
4052: LD_INT 20
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 23
4063: PUSH
4064: LD_INT 25
4066: PUSH
4067: LD_INT 26
4069: PUSH
4070: LD_INT 30
4072: PUSH
4073: LD_INT 31
4075: PUSH
4076: LD_INT 32
4078: PUSH
4079: LD_INT 36
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 101
4106: PUSH
4107: LD_INT 102
4109: PUSH
4110: LD_INT 103
4112: PUSH
4113: LD_INT 105
4115: PUSH
4116: LD_INT 106
4118: PUSH
4119: LD_INT 108
4121: PUSH
4122: LD_INT 109
4124: PUSH
4125: LD_INT 112
4127: PUSH
4128: LD_INT 116
4130: PUSH
4131: LD_INT 117
4133: PUSH
4134: LD_INT 118
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 6409
4156: LD_INT 9
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4312
4164: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: LD_INT 2
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: LD_INT 5
4178: PUSH
4179: LD_INT 6
4181: PUSH
4182: LD_INT 7
4184: PUSH
4185: LD_INT 8
4187: PUSH
4188: LD_INT 11
4190: PUSH
4191: LD_INT 12
4193: PUSH
4194: LD_INT 15
4196: PUSH
4197: LD_INT 16
4199: PUSH
4200: LD_INT 20
4202: PUSH
4203: LD_INT 21
4205: PUSH
4206: LD_INT 22
4208: PUSH
4209: LD_INT 23
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 26
4217: PUSH
4218: LD_INT 28
4220: PUSH
4221: LD_INT 30
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 32
4229: PUSH
4230: LD_INT 36
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 101
4258: PUSH
4259: LD_INT 102
4261: PUSH
4262: LD_INT 103
4264: PUSH
4265: LD_INT 105
4267: PUSH
4268: LD_INT 106
4270: PUSH
4271: LD_INT 108
4273: PUSH
4274: LD_INT 109
4276: PUSH
4277: LD_INT 112
4279: PUSH
4280: LD_INT 114
4282: PUSH
4283: LD_INT 116
4285: PUSH
4286: LD_INT 117
4288: PUSH
4289: LD_INT 118
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: ST_TO_ADDR
4310: GO 6409
4312: LD_INT 10
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4516
4320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 4
4331: PUSH
4332: LD_INT 5
4334: PUSH
4335: LD_INT 6
4337: PUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 8
4343: PUSH
4344: LD_INT 9
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: LD_INT 11
4352: PUSH
4353: LD_INT 12
4355: PUSH
4356: LD_INT 13
4358: PUSH
4359: LD_INT 14
4361: PUSH
4362: LD_INT 15
4364: PUSH
4365: LD_INT 16
4367: PUSH
4368: LD_INT 17
4370: PUSH
4371: LD_INT 18
4373: PUSH
4374: LD_INT 19
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 24
4391: PUSH
4392: LD_INT 25
4394: PUSH
4395: LD_INT 26
4397: PUSH
4398: LD_INT 28
4400: PUSH
4401: LD_INT 30
4403: PUSH
4404: LD_INT 31
4406: PUSH
4407: LD_INT 32
4409: PUSH
4410: LD_INT 36
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 101
4446: PUSH
4447: LD_INT 102
4449: PUSH
4450: LD_INT 103
4452: PUSH
4453: LD_INT 104
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: LD_INT 107
4464: PUSH
4465: LD_INT 108
4467: PUSH
4468: LD_INT 109
4470: PUSH
4471: LD_INT 110
4473: PUSH
4474: LD_INT 111
4476: PUSH
4477: LD_INT 112
4479: PUSH
4480: LD_INT 114
4482: PUSH
4483: LD_INT 116
4485: PUSH
4486: LD_INT 117
4488: PUSH
4489: LD_INT 118
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: ST_TO_ADDR
4514: GO 6409
4516: LD_INT 11
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4728
4524: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 4
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: LD_INT 6
4544: PUSH
4545: LD_INT 7
4547: PUSH
4548: LD_INT 8
4550: PUSH
4551: LD_INT 9
4553: PUSH
4554: LD_INT 10
4556: PUSH
4557: LD_INT 11
4559: PUSH
4560: LD_INT 12
4562: PUSH
4563: LD_INT 13
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 15
4571: PUSH
4572: LD_INT 16
4574: PUSH
4575: LD_INT 17
4577: PUSH
4578: LD_INT 18
4580: PUSH
4581: LD_INT 19
4583: PUSH
4584: LD_INT 20
4586: PUSH
4587: LD_INT 21
4589: PUSH
4590: LD_INT 22
4592: PUSH
4593: LD_INT 23
4595: PUSH
4596: LD_INT 24
4598: PUSH
4599: LD_INT 25
4601: PUSH
4602: LD_INT 26
4604: PUSH
4605: LD_INT 28
4607: PUSH
4608: LD_INT 30
4610: PUSH
4611: LD_INT 31
4613: PUSH
4614: LD_INT 32
4616: PUSH
4617: LD_INT 34
4619: PUSH
4620: LD_INT 36
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 101
4658: PUSH
4659: LD_INT 102
4661: PUSH
4662: LD_INT 103
4664: PUSH
4665: LD_INT 104
4667: PUSH
4668: LD_INT 105
4670: PUSH
4671: LD_INT 106
4673: PUSH
4674: LD_INT 107
4676: PUSH
4677: LD_INT 108
4679: PUSH
4680: LD_INT 109
4682: PUSH
4683: LD_INT 110
4685: PUSH
4686: LD_INT 111
4688: PUSH
4689: LD_INT 112
4691: PUSH
4692: LD_INT 114
4694: PUSH
4695: LD_INT 116
4697: PUSH
4698: LD_INT 117
4700: PUSH
4701: LD_INT 118
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: ST_TO_ADDR
4726: GO 6409
4728: LD_INT 12
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4956
4736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: LD_INT 1
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 5
4756: PUSH
4757: LD_INT 6
4759: PUSH
4760: LD_INT 7
4762: PUSH
4763: LD_INT 8
4765: PUSH
4766: LD_INT 9
4768: PUSH
4769: LD_INT 10
4771: PUSH
4772: LD_INT 11
4774: PUSH
4775: LD_INT 12
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 14
4783: PUSH
4784: LD_INT 15
4786: PUSH
4787: LD_INT 16
4789: PUSH
4790: LD_INT 17
4792: PUSH
4793: LD_INT 18
4795: PUSH
4796: LD_INT 19
4798: PUSH
4799: LD_INT 20
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 22
4807: PUSH
4808: LD_INT 23
4810: PUSH
4811: LD_INT 24
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 27
4822: PUSH
4823: LD_INT 28
4825: PUSH
4826: LD_INT 30
4828: PUSH
4829: LD_INT 31
4831: PUSH
4832: LD_INT 32
4834: PUSH
4835: LD_INT 33
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 36
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 101
4882: PUSH
4883: LD_INT 102
4885: PUSH
4886: LD_INT 103
4888: PUSH
4889: LD_INT 104
4891: PUSH
4892: LD_INT 105
4894: PUSH
4895: LD_INT 106
4897: PUSH
4898: LD_INT 107
4900: PUSH
4901: LD_INT 108
4903: PUSH
4904: LD_INT 109
4906: PUSH
4907: LD_INT 110
4909: PUSH
4910: LD_INT 111
4912: PUSH
4913: LD_INT 112
4915: PUSH
4916: LD_INT 113
4918: PUSH
4919: LD_INT 114
4921: PUSH
4922: LD_INT 116
4924: PUSH
4925: LD_INT 117
4927: PUSH
4928: LD_INT 118
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 6409
4956: LD_INT 13
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 5172
4964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: LD_INT 8
4987: PUSH
4988: LD_INT 9
4990: PUSH
4991: LD_INT 10
4993: PUSH
4994: LD_INT 11
4996: PUSH
4997: LD_INT 12
4999: PUSH
5000: LD_INT 14
5002: PUSH
5003: LD_INT 15
5005: PUSH
5006: LD_INT 16
5008: PUSH
5009: LD_INT 17
5011: PUSH
5012: LD_INT 18
5014: PUSH
5015: LD_INT 19
5017: PUSH
5018: LD_INT 20
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 22
5026: PUSH
5027: LD_INT 23
5029: PUSH
5030: LD_INT 24
5032: PUSH
5033: LD_INT 25
5035: PUSH
5036: LD_INT 26
5038: PUSH
5039: LD_INT 27
5041: PUSH
5042: LD_INT 28
5044: PUSH
5045: LD_INT 30
5047: PUSH
5048: LD_INT 31
5050: PUSH
5051: LD_INT 32
5053: PUSH
5054: LD_INT 33
5056: PUSH
5057: LD_INT 34
5059: PUSH
5060: LD_INT 36
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 101
5098: PUSH
5099: LD_INT 102
5101: PUSH
5102: LD_INT 103
5104: PUSH
5105: LD_INT 104
5107: PUSH
5108: LD_INT 105
5110: PUSH
5111: LD_INT 106
5113: PUSH
5114: LD_INT 107
5116: PUSH
5117: LD_INT 108
5119: PUSH
5120: LD_INT 109
5122: PUSH
5123: LD_INT 110
5125: PUSH
5126: LD_INT 111
5128: PUSH
5129: LD_INT 112
5131: PUSH
5132: LD_INT 113
5134: PUSH
5135: LD_INT 114
5137: PUSH
5138: LD_INT 116
5140: PUSH
5141: LD_INT 117
5143: PUSH
5144: LD_INT 118
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: ST_TO_ADDR
5170: GO 6409
5172: LD_INT 14
5174: DOUBLE
5175: EQUAL
5176: IFTRUE 5180
5178: GO 5404
5180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5181: LD_ADDR_VAR 0 2
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 3
5194: PUSH
5195: LD_INT 4
5197: PUSH
5198: LD_INT 5
5200: PUSH
5201: LD_INT 6
5203: PUSH
5204: LD_INT 7
5206: PUSH
5207: LD_INT 8
5209: PUSH
5210: LD_INT 9
5212: PUSH
5213: LD_INT 10
5215: PUSH
5216: LD_INT 11
5218: PUSH
5219: LD_INT 12
5221: PUSH
5222: LD_INT 13
5224: PUSH
5225: LD_INT 14
5227: PUSH
5228: LD_INT 15
5230: PUSH
5231: LD_INT 16
5233: PUSH
5234: LD_INT 17
5236: PUSH
5237: LD_INT 18
5239: PUSH
5240: LD_INT 19
5242: PUSH
5243: LD_INT 20
5245: PUSH
5246: LD_INT 21
5248: PUSH
5249: LD_INT 22
5251: PUSH
5252: LD_INT 23
5254: PUSH
5255: LD_INT 24
5257: PUSH
5258: LD_INT 25
5260: PUSH
5261: LD_INT 26
5263: PUSH
5264: LD_INT 27
5266: PUSH
5267: LD_INT 28
5269: PUSH
5270: LD_INT 29
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 31
5278: PUSH
5279: LD_INT 32
5281: PUSH
5282: LD_INT 33
5284: PUSH
5285: LD_INT 34
5287: PUSH
5288: LD_INT 36
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 101
5330: PUSH
5331: LD_INT 102
5333: PUSH
5334: LD_INT 103
5336: PUSH
5337: LD_INT 104
5339: PUSH
5340: LD_INT 105
5342: PUSH
5343: LD_INT 106
5345: PUSH
5346: LD_INT 107
5348: PUSH
5349: LD_INT 108
5351: PUSH
5352: LD_INT 109
5354: PUSH
5355: LD_INT 110
5357: PUSH
5358: LD_INT 111
5360: PUSH
5361: LD_INT 112
5363: PUSH
5364: LD_INT 113
5366: PUSH
5367: LD_INT 114
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 117
5375: PUSH
5376: LD_INT 118
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: ST_TO_ADDR
5402: GO 6409
5404: LD_INT 15
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5636
5412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: LD_INT 1
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 3
5426: PUSH
5427: LD_INT 4
5429: PUSH
5430: LD_INT 5
5432: PUSH
5433: LD_INT 6
5435: PUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: LD_INT 11
5450: PUSH
5451: LD_INT 12
5453: PUSH
5454: LD_INT 13
5456: PUSH
5457: LD_INT 14
5459: PUSH
5460: LD_INT 15
5462: PUSH
5463: LD_INT 16
5465: PUSH
5466: LD_INT 17
5468: PUSH
5469: LD_INT 18
5471: PUSH
5472: LD_INT 19
5474: PUSH
5475: LD_INT 20
5477: PUSH
5478: LD_INT 21
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 23
5486: PUSH
5487: LD_INT 24
5489: PUSH
5490: LD_INT 25
5492: PUSH
5493: LD_INT 26
5495: PUSH
5496: LD_INT 27
5498: PUSH
5499: LD_INT 28
5501: PUSH
5502: LD_INT 29
5504: PUSH
5505: LD_INT 30
5507: PUSH
5508: LD_INT 31
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 33
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 36
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 101
5562: PUSH
5563: LD_INT 102
5565: PUSH
5566: LD_INT 103
5568: PUSH
5569: LD_INT 104
5571: PUSH
5572: LD_INT 105
5574: PUSH
5575: LD_INT 106
5577: PUSH
5578: LD_INT 107
5580: PUSH
5581: LD_INT 108
5583: PUSH
5584: LD_INT 109
5586: PUSH
5587: LD_INT 110
5589: PUSH
5590: LD_INT 111
5592: PUSH
5593: LD_INT 112
5595: PUSH
5596: LD_INT 113
5598: PUSH
5599: LD_INT 114
5601: PUSH
5602: LD_INT 116
5604: PUSH
5605: LD_INT 117
5607: PUSH
5608: LD_INT 118
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: ST_TO_ADDR
5634: GO 6409
5636: LD_INT 16
5638: DOUBLE
5639: EQUAL
5640: IFTRUE 5644
5642: GO 5780
5644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: LD_INT 5
5658: PUSH
5659: LD_INT 7
5661: PUSH
5662: LD_INT 11
5664: PUSH
5665: LD_INT 12
5667: PUSH
5668: LD_INT 15
5670: PUSH
5671: LD_INT 16
5673: PUSH
5674: LD_INT 20
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 25
5688: PUSH
5689: LD_INT 26
5691: PUSH
5692: LD_INT 30
5694: PUSH
5695: LD_INT 31
5697: PUSH
5698: LD_INT 32
5700: PUSH
5701: LD_INT 33
5703: PUSH
5704: LD_INT 34
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 101
5730: PUSH
5731: LD_INT 102
5733: PUSH
5734: LD_INT 103
5736: PUSH
5737: LD_INT 106
5739: PUSH
5740: LD_INT 108
5742: PUSH
5743: LD_INT 112
5745: PUSH
5746: LD_INT 113
5748: PUSH
5749: LD_INT 114
5751: PUSH
5752: LD_INT 116
5754: PUSH
5755: LD_INT 117
5757: PUSH
5758: LD_INT 118
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: ST_TO_ADDR
5778: GO 6409
5780: LD_INT 17
5782: DOUBLE
5783: EQUAL
5784: IFTRUE 5788
5786: GO 6012
5788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: LD_INT 4
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: LD_INT 6
5811: PUSH
5812: LD_INT 7
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: LD_INT 9
5820: PUSH
5821: LD_INT 10
5823: PUSH
5824: LD_INT 11
5826: PUSH
5827: LD_INT 12
5829: PUSH
5830: LD_INT 13
5832: PUSH
5833: LD_INT 14
5835: PUSH
5836: LD_INT 15
5838: PUSH
5839: LD_INT 16
5841: PUSH
5842: LD_INT 17
5844: PUSH
5845: LD_INT 18
5847: PUSH
5848: LD_INT 19
5850: PUSH
5851: LD_INT 20
5853: PUSH
5854: LD_INT 21
5856: PUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 23
5862: PUSH
5863: LD_INT 24
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 26
5871: PUSH
5872: LD_INT 27
5874: PUSH
5875: LD_INT 28
5877: PUSH
5878: LD_INT 29
5880: PUSH
5881: LD_INT 30
5883: PUSH
5884: LD_INT 31
5886: PUSH
5887: LD_INT 32
5889: PUSH
5890: LD_INT 33
5892: PUSH
5893: LD_INT 34
5895: PUSH
5896: LD_INT 36
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 101
5938: PUSH
5939: LD_INT 102
5941: PUSH
5942: LD_INT 103
5944: PUSH
5945: LD_INT 104
5947: PUSH
5948: LD_INT 105
5950: PUSH
5951: LD_INT 106
5953: PUSH
5954: LD_INT 107
5956: PUSH
5957: LD_INT 108
5959: PUSH
5960: LD_INT 109
5962: PUSH
5963: LD_INT 110
5965: PUSH
5966: LD_INT 111
5968: PUSH
5969: LD_INT 112
5971: PUSH
5972: LD_INT 113
5974: PUSH
5975: LD_INT 114
5977: PUSH
5978: LD_INT 116
5980: PUSH
5981: LD_INT 117
5983: PUSH
5984: LD_INT 118
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: ST_TO_ADDR
6010: GO 6409
6012: LD_INT 18
6014: DOUBLE
6015: EQUAL
6016: IFTRUE 6020
6018: GO 6168
6020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: LD_INT 5
6034: PUSH
6035: LD_INT 7
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 12
6043: PUSH
6044: LD_INT 15
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 20
6052: PUSH
6053: LD_INT 21
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_INT 23
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 26
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 31
6073: PUSH
6074: LD_INT 32
6076: PUSH
6077: LD_INT 33
6079: PUSH
6080: LD_INT 34
6082: PUSH
6083: LD_INT 35
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 101
6114: PUSH
6115: LD_INT 102
6117: PUSH
6118: LD_INT 103
6120: PUSH
6121: LD_INT 106
6123: PUSH
6124: LD_INT 108
6126: PUSH
6127: LD_INT 112
6129: PUSH
6130: LD_INT 113
6132: PUSH
6133: LD_INT 114
6135: PUSH
6136: LD_INT 115
6138: PUSH
6139: LD_INT 116
6141: PUSH
6142: LD_INT 117
6144: PUSH
6145: LD_INT 118
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: ST_TO_ADDR
6166: GO 6409
6168: LD_INT 19
6170: DOUBLE
6171: EQUAL
6172: IFTRUE 6176
6174: GO 6408
6176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6177: LD_ADDR_VAR 0 2
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: LD_INT 5
6196: PUSH
6197: LD_INT 6
6199: PUSH
6200: LD_INT 7
6202: PUSH
6203: LD_INT 8
6205: PUSH
6206: LD_INT 9
6208: PUSH
6209: LD_INT 10
6211: PUSH
6212: LD_INT 11
6214: PUSH
6215: LD_INT 12
6217: PUSH
6218: LD_INT 13
6220: PUSH
6221: LD_INT 14
6223: PUSH
6224: LD_INT 15
6226: PUSH
6227: LD_INT 16
6229: PUSH
6230: LD_INT 17
6232: PUSH
6233: LD_INT 18
6235: PUSH
6236: LD_INT 19
6238: PUSH
6239: LD_INT 20
6241: PUSH
6242: LD_INT 21
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 23
6250: PUSH
6251: LD_INT 24
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 26
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 28
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 30
6271: PUSH
6272: LD_INT 31
6274: PUSH
6275: LD_INT 32
6277: PUSH
6278: LD_INT 33
6280: PUSH
6281: LD_INT 34
6283: PUSH
6284: LD_INT 35
6286: PUSH
6287: LD_INT 36
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 101
6330: PUSH
6331: LD_INT 102
6333: PUSH
6334: LD_INT 103
6336: PUSH
6337: LD_INT 104
6339: PUSH
6340: LD_INT 105
6342: PUSH
6343: LD_INT 106
6345: PUSH
6346: LD_INT 107
6348: PUSH
6349: LD_INT 108
6351: PUSH
6352: LD_INT 109
6354: PUSH
6355: LD_INT 110
6357: PUSH
6358: LD_INT 111
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 113
6366: PUSH
6367: LD_INT 114
6369: PUSH
6370: LD_INT 115
6372: PUSH
6373: LD_INT 116
6375: PUSH
6376: LD_INT 117
6378: PUSH
6379: LD_INT 118
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 6409
6408: POP
// end else
6409: GO 6640
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6411: LD_ADDR_VAR 0 2
6415: PUSH
6416: LD_INT 1
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 6
6433: PUSH
6434: LD_INT 7
6436: PUSH
6437: LD_INT 8
6439: PUSH
6440: LD_INT 9
6442: PUSH
6443: LD_INT 10
6445: PUSH
6446: LD_INT 11
6448: PUSH
6449: LD_INT 12
6451: PUSH
6452: LD_INT 13
6454: PUSH
6455: LD_INT 14
6457: PUSH
6458: LD_INT 15
6460: PUSH
6461: LD_INT 16
6463: PUSH
6464: LD_INT 17
6466: PUSH
6467: LD_INT 18
6469: PUSH
6470: LD_INT 19
6472: PUSH
6473: LD_INT 20
6475: PUSH
6476: LD_INT 21
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 23
6484: PUSH
6485: LD_INT 24
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 26
6493: PUSH
6494: LD_INT 27
6496: PUSH
6497: LD_INT 28
6499: PUSH
6500: LD_INT 29
6502: PUSH
6503: LD_INT 30
6505: PUSH
6506: LD_INT 31
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 33
6514: PUSH
6515: LD_INT 34
6517: PUSH
6518: LD_INT 35
6520: PUSH
6521: LD_INT 36
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 101
6564: PUSH
6565: LD_INT 102
6567: PUSH
6568: LD_INT 103
6570: PUSH
6571: LD_INT 104
6573: PUSH
6574: LD_INT 105
6576: PUSH
6577: LD_INT 106
6579: PUSH
6580: LD_INT 107
6582: PUSH
6583: LD_INT 108
6585: PUSH
6586: LD_INT 109
6588: PUSH
6589: LD_INT 110
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 112
6597: PUSH
6598: LD_INT 113
6600: PUSH
6601: LD_INT 114
6603: PUSH
6604: LD_INT 115
6606: PUSH
6607: LD_INT 116
6609: PUSH
6610: LD_INT 117
6612: PUSH
6613: LD_INT 118
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ST_TO_ADDR
// if result then
6640: LD_VAR 0 2
6644: IFFALSE 7430
// begin normal :=  ;
6646: LD_ADDR_VAR 0 5
6650: PUSH
6651: LD_STRING 
6653: ST_TO_ADDR
// hardcore :=  ;
6654: LD_ADDR_VAR 0 6
6658: PUSH
6659: LD_STRING 
6661: ST_TO_ADDR
// active :=  ;
6662: LD_ADDR_VAR 0 7
6666: PUSH
6667: LD_STRING 
6669: ST_TO_ADDR
// for i = 1 to normalCounter do
6670: LD_ADDR_VAR 0 8
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_EXP 4
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6787
// begin tmp := 0 ;
6688: LD_ADDR_VAR 0 3
6692: PUSH
6693: LD_STRING 0
6695: ST_TO_ADDR
// if result [ 1 ] then
6696: LD_VAR 0 2
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: IFFALSE 6769
// if result [ 1 ] [ 1 ] = i then
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 8
6723: EQUAL
6724: IFFALSE 6769
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 3
6755: PPUSH
6756: CALL_OW 1
6760: ST_TO_ADDR
// tmp := 1 ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_STRING 1
6768: ST_TO_ADDR
// end ; normal := normal & tmp ;
6769: LD_ADDR_VAR 0 5
6773: PUSH
6774: LD_VAR 0 5
6778: PUSH
6779: LD_VAR 0 3
6783: STR
6784: ST_TO_ADDR
// end ;
6785: GO 6685
6787: POP
6788: POP
// for i = 1 to hardcoreCounter do
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_EXP 5
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6910
// begin tmp := 0 ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_STRING 0
6814: ST_TO_ADDR
// if result [ 2 ] then
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 2
6822: ARRAY
6823: IFFALSE 6892
// if result [ 2 ] [ 1 ] = 100 + i then
6825: LD_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: ARRAY
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PUSH
6838: LD_INT 100
6840: PUSH
6841: LD_VAR 0 8
6845: PLUS
6846: EQUAL
6847: IFFALSE 6892
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 2
6858: PPUSH
6859: LD_INT 2
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PPUSH
6871: LD_INT 1
6873: PPUSH
6874: CALL_OW 3
6878: PPUSH
6879: CALL_OW 1
6883: ST_TO_ADDR
// tmp := 1 ;
6884: LD_ADDR_VAR 0 3
6888: PUSH
6889: LD_STRING 1
6891: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 6
6901: PUSH
6902: LD_VAR 0 3
6906: STR
6907: ST_TO_ADDR
// end ;
6908: GO 6804
6910: POP
6911: POP
// if isGameLoad then
6912: LD_VAR 0 1
6916: IFFALSE 7391
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: LD_EXP 8
6927: PUSH
6928: LD_EXP 7
6932: PUSH
6933: LD_EXP 9
6937: PUSH
6938: LD_EXP 6
6942: PUSH
6943: LD_EXP 10
6947: PUSH
6948: LD_EXP 11
6952: PUSH
6953: LD_EXP 12
6957: PUSH
6958: LD_EXP 13
6962: PUSH
6963: LD_EXP 14
6967: PUSH
6968: LD_EXP 15
6972: PUSH
6973: LD_EXP 16
6977: PUSH
6978: LD_EXP 17
6982: PUSH
6983: LD_EXP 18
6987: PUSH
6988: LD_EXP 19
6992: PUSH
6993: LD_EXP 27
6997: PUSH
6998: LD_EXP 28
7002: PUSH
7003: LD_EXP 29
7007: PUSH
7008: LD_EXP 30
7012: PUSH
7013: LD_EXP 32
7017: PUSH
7018: LD_EXP 33
7022: PUSH
7023: LD_EXP 34
7027: PUSH
7028: LD_EXP 37
7032: PUSH
7033: LD_EXP 39
7037: PUSH
7038: LD_EXP 40
7042: PUSH
7043: LD_EXP 41
7047: PUSH
7048: LD_EXP 43
7052: PUSH
7053: LD_EXP 44
7057: PUSH
7058: LD_EXP 47
7062: PUSH
7063: LD_EXP 48
7067: PUSH
7068: LD_EXP 49
7072: PUSH
7073: LD_EXP 50
7077: PUSH
7078: LD_EXP 51
7082: PUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_EXP 53
7092: PUSH
7093: LD_EXP 54
7097: PUSH
7098: LD_EXP 55
7102: PUSH
7103: LD_EXP 20
7107: PUSH
7108: LD_EXP 21
7112: PUSH
7113: LD_EXP 24
7117: PUSH
7118: LD_EXP 25
7122: PUSH
7123: LD_EXP 26
7127: PUSH
7128: LD_EXP 22
7132: PUSH
7133: LD_EXP 23
7137: PUSH
7138: LD_EXP 31
7142: PUSH
7143: LD_EXP 35
7147: PUSH
7148: LD_EXP 36
7152: PUSH
7153: LD_EXP 38
7157: PUSH
7158: LD_EXP 42
7162: PUSH
7163: LD_EXP 45
7167: PUSH
7168: LD_EXP 46
7172: PUSH
7173: LD_EXP 56
7177: PUSH
7178: LD_EXP 57
7182: PUSH
7183: LD_EXP 58
7187: PUSH
7188: LD_EXP 59
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: ST_TO_ADDR
// tmp :=  ;
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_STRING 
7256: ST_TO_ADDR
// for i = 1 to normalCounter do
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_EXP 4
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7309
// begin if flags [ i ] then
7275: LD_VAR 0 4
7279: PUSH
7280: LD_VAR 0 8
7284: ARRAY
7285: IFFALSE 7307
// tmp := tmp & i & ; ;
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_VAR 0 3
7296: PUSH
7297: LD_VAR 0 8
7301: STR
7302: PUSH
7303: LD_STRING ;
7305: STR
7306: ST_TO_ADDR
// end ;
7307: GO 7272
7309: POP
7310: POP
// for i = 1 to hardcoreCounter do
7311: LD_ADDR_VAR 0 8
7315: PUSH
7316: DOUBLE
7317: LD_INT 1
7319: DEC
7320: ST_TO_ADDR
7321: LD_EXP 5
7325: PUSH
7326: FOR_TO
7327: IFFALSE 7373
// begin if flags [ normalCounter + i ] then
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 4
7338: PUSH
7339: LD_VAR 0 8
7343: PLUS
7344: ARRAY
7345: IFFALSE 7371
// tmp := tmp & ( 100 + i ) & ; ;
7347: LD_ADDR_VAR 0 3
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 100
7359: PUSH
7360: LD_VAR 0 8
7364: PLUS
7365: STR
7366: PUSH
7367: LD_STRING ;
7369: STR
7370: ST_TO_ADDR
// end ;
7371: GO 7326
7373: POP
7374: POP
// if tmp then
7375: LD_VAR 0 3
7379: IFFALSE 7391
// active := tmp ;
7381: LD_ADDR_VAR 0 7
7385: PUSH
7386: LD_VAR 0 3
7390: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7391: LD_STRING getStreamItemsFromMission("
7393: PUSH
7394: LD_VAR 0 5
7398: STR
7399: PUSH
7400: LD_STRING ","
7402: STR
7403: PUSH
7404: LD_VAR 0 6
7408: STR
7409: PUSH
7410: LD_STRING ","
7412: STR
7413: PUSH
7414: LD_VAR 0 7
7418: STR
7419: PUSH
7420: LD_STRING ")
7422: STR
7423: PPUSH
7424: CALL_OW 559
// end else
7428: GO 7437
// ToLua ( getStreamItemsFromMission("","","") ) ;
7430: LD_STRING getStreamItemsFromMission("","","")
7432: PPUSH
7433: CALL_OW 559
// end ;
7437: LD_VAR 0 2
7441: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7442: LD_EXP 3
7446: PUSH
7447: LD_EXP 8
7451: AND
7452: IFFALSE 7576
7454: GO 7456
7456: DISABLE
7457: LD_INT 0
7459: PPUSH
7460: PPUSH
// begin enable ;
7461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7462: LD_ADDR_VAR 0 2
7466: PUSH
7467: LD_INT 22
7469: PUSH
7470: LD_OWVAR 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 2
7481: PUSH
7482: LD_INT 34
7484: PUSH
7485: LD_INT 7
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 34
7494: PUSH
7495: LD_INT 45
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 28
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 47
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// if not tmp then
7538: LD_VAR 0 2
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 7576
// for i in tmp do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7574
// begin SetLives ( i , 0 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 0
7567: PPUSH
7568: CALL_OW 234
// end ;
7572: GO 7557
7574: POP
7575: POP
// end ;
7576: PPOPN 2
7578: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7579: LD_EXP 3
7583: PUSH
7584: LD_EXP 9
7588: AND
7589: IFFALSE 7673
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
// begin enable ;
7598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7599: LD_ADDR_VAR 0 2
7603: PUSH
7604: LD_INT 22
7606: PUSH
7607: LD_OWVAR 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 32
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PPUSH
7630: CALL_OW 69
7634: ST_TO_ADDR
// if not tmp then
7635: LD_VAR 0 2
7639: NOT
7640: IFFALSE 7644
// exit ;
7642: GO 7673
// for i in tmp do
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_VAR 0 2
7653: PUSH
7654: FOR_IN
7655: IFFALSE 7671
// begin SetLives ( i , 0 ) ;
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_INT 0
7664: PPUSH
7665: CALL_OW 234
// end ;
7669: GO 7654
7671: POP
7672: POP
// end ;
7673: PPOPN 2
7675: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7676: LD_EXP 3
7680: PUSH
7681: LD_EXP 6
7685: AND
7686: IFFALSE 7779
7688: GO 7690
7690: DISABLE
7691: LD_INT 0
7693: PPUSH
// begin enable ;
7694: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7695: LD_ADDR_VAR 0 1
7699: PUSH
7700: LD_INT 22
7702: PUSH
7703: LD_OWVAR 2
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 25
7717: PUSH
7718: LD_INT 5
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 25
7727: PUSH
7728: LD_INT 9
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 8
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 69
7759: PUSH
7760: FOR_IN
7761: IFFALSE 7777
// begin SetClass ( i , 1 ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: CALL_OW 336
// end ;
7775: GO 7760
7777: POP
7778: POP
// end ;
7779: PPOPN 1
7781: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7782: LD_EXP 3
7786: PUSH
7787: LD_EXP 7
7791: AND
7792: PUSH
7793: LD_OWVAR 65
7797: PUSH
7798: LD_INT 7
7800: LESS
7801: AND
7802: IFFALSE 7816
7804: GO 7806
7806: DISABLE
// begin enable ;
7807: ENABLE
// game_speed := 7 ;
7808: LD_ADDR_OWVAR 65
7812: PUSH
7813: LD_INT 7
7815: ST_TO_ADDR
// end ;
7816: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7817: LD_EXP 3
7821: PUSH
7822: LD_EXP 10
7826: AND
7827: IFFALSE 8029
7829: GO 7831
7831: DISABLE
7832: LD_INT 0
7834: PPUSH
7835: PPUSH
7836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 81
7844: PUSH
7845: LD_OWVAR 2
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 21
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// if not tmp then
7873: LD_VAR 0 3
7877: NOT
7878: IFFALSE 7882
// exit ;
7880: GO 8029
// if tmp > 5 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 5
7889: GREATER
7890: IFFALSE 7902
// k := 5 else
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 5
7899: ST_TO_ADDR
7900: GO 7912
// k := tmp ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 3
7911: ST_TO_ADDR
// for i := 1 to k do
7912: LD_ADDR_VAR 0 1
7916: PUSH
7917: DOUBLE
7918: LD_INT 1
7920: DEC
7921: ST_TO_ADDR
7922: LD_VAR 0 2
7926: PUSH
7927: FOR_TO
7928: IFFALSE 8027
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7930: LD_VAR 0 3
7934: PUSH
7935: LD_VAR 0 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 4
7948: MOD
7949: PUSH
7950: LD_INT 1
7952: PLUS
7953: PPUSH
7954: CALL_OW 259
7958: PUSH
7959: LD_INT 10
7961: LESS
7962: IFFALSE 8025
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7964: LD_VAR 0 3
7968: PUSH
7969: LD_VAR 0 1
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 1
7979: PUSH
7980: LD_INT 4
7982: MOD
7983: PUSH
7984: LD_INT 1
7986: PLUS
7987: PPUSH
7988: LD_VAR 0 3
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PPUSH
7999: LD_VAR 0 1
8003: PUSH
8004: LD_INT 4
8006: MOD
8007: PUSH
8008: LD_INT 1
8010: PLUS
8011: PPUSH
8012: CALL_OW 259
8016: PUSH
8017: LD_INT 1
8019: PLUS
8020: PPUSH
8021: CALL_OW 237
8025: GO 7927
8027: POP
8028: POP
// end ;
8029: PPOPN 3
8031: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8032: LD_EXP 3
8036: PUSH
8037: LD_EXP 11
8041: AND
8042: IFFALSE 8062
8044: GO 8046
8046: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8047: LD_INT 4
8049: PPUSH
8050: LD_OWVAR 2
8054: PPUSH
8055: LD_INT 0
8057: PPUSH
8058: CALL_OW 324
8062: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8063: LD_EXP 3
8067: PUSH
8068: LD_EXP 40
8072: AND
8073: IFFALSE 8093
8075: GO 8077
8077: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8078: LD_INT 19
8080: PPUSH
8081: LD_OWVAR 2
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 324
8093: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8094: LD_EXP 3
8098: PUSH
8099: LD_EXP 12
8103: AND
8104: IFFALSE 8206
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin enable ;
8113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_OWVAR 2
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: LD_INT 34
8136: PUSH
8137: LD_INT 11
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 34
8146: PUSH
8147: LD_INT 30
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: ST_TO_ADDR
// if not tmp then
8168: LD_VAR 0 2
8172: NOT
8173: IFFALSE 8177
// exit ;
8175: GO 8206
// for i in tmp do
8177: LD_ADDR_VAR 0 1
8181: PUSH
8182: LD_VAR 0 2
8186: PUSH
8187: FOR_IN
8188: IFFALSE 8204
// begin SetLives ( i , 0 ) ;
8190: LD_VAR 0 1
8194: PPUSH
8195: LD_INT 0
8197: PPUSH
8198: CALL_OW 234
// end ;
8202: GO 8187
8204: POP
8205: POP
// end ;
8206: PPOPN 2
8208: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8209: LD_EXP 3
8213: PUSH
8214: LD_EXP 13
8218: AND
8219: IFFALSE 8239
8221: GO 8223
8223: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8224: LD_INT 32
8226: PPUSH
8227: LD_OWVAR 2
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 324
8239: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8240: LD_EXP 3
8244: PUSH
8245: LD_EXP 14
8249: AND
8250: IFFALSE 8431
8252: GO 8254
8254: DISABLE
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8260: LD_ADDR_VAR 0 2
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_OWVAR 2
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 33
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 69
8295: ST_TO_ADDR
// if not tmp then
8296: LD_VAR 0 2
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8431
// side := 0 ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// for i := 1 to 8 do
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: DOUBLE
8319: LD_INT 1
8321: DEC
8322: ST_TO_ADDR
8323: LD_INT 8
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8375
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8329: LD_OWVAR 2
8333: PUSH
8334: LD_VAR 0 1
8338: NONEQUAL
8339: PUSH
8340: LD_OWVAR 2
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 81
8354: PUSH
8355: LD_INT 2
8357: EQUAL
8358: AND
8359: IFFALSE 8373
// begin side := i ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_VAR 0 1
8370: ST_TO_ADDR
// break ;
8371: GO 8375
// end ;
8373: GO 8326
8375: POP
8376: POP
// if not side then
8377: LD_VAR 0 3
8381: NOT
8382: IFFALSE 8386
// exit ;
8384: GO 8431
// for i := 1 to tmp do
8386: LD_ADDR_VAR 0 1
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_VAR 0 2
8400: PUSH
8401: FOR_TO
8402: IFFALSE 8429
// if Prob ( 60 ) then
8404: LD_INT 60
8406: PPUSH
8407: CALL_OW 13
8411: IFFALSE 8427
// SetSide ( i , side ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 3
8422: PPUSH
8423: CALL_OW 235
8427: GO 8401
8429: POP
8430: POP
// end ;
8431: PPOPN 3
8433: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8434: LD_EXP 3
8438: PUSH
8439: LD_EXP 16
8443: AND
8444: IFFALSE 8563
8446: GO 8448
8448: DISABLE
8449: LD_INT 0
8451: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8452: LD_ADDR_VAR 0 1
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_OWVAR 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 0
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: FOR_IN
8507: IFFALSE 8561
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 257
8518: PUSH
8519: LD_INT 1
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: IN
8537: IFFALSE 8559
// SetClass ( un , rand ( 1 , 4 ) ) ;
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 4
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 336
8559: GO 8506
8561: POP
8562: POP
// end ;
8563: PPOPN 1
8565: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8566: LD_EXP 3
8570: PUSH
8571: LD_EXP 15
8575: AND
8576: IFFALSE 8655
8578: GO 8580
8580: DISABLE
8581: LD_INT 0
8583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8584: LD_ADDR_VAR 0 1
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_OWVAR 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
// if not tmp then
8620: LD_VAR 0 1
8624: NOT
8625: IFFALSE 8629
// exit ;
8627: GO 8655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8629: LD_VAR 0 1
8633: PUSH
8634: LD_INT 1
8636: PPUSH
8637: LD_VAR 0 1
8641: PPUSH
8642: CALL_OW 12
8646: ARRAY
8647: PPUSH
8648: LD_INT 100
8650: PPUSH
8651: CALL_OW 234
// end ;
8655: PPOPN 1
8657: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8658: LD_EXP 3
8662: PUSH
8663: LD_EXP 17
8667: AND
8668: IFFALSE 8766
8670: GO 8672
8672: DISABLE
8673: LD_INT 0
8675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_OWVAR 2
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: ST_TO_ADDR
// if not tmp then
8712: LD_VAR 0 1
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 8766
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 12
8738: ARRAY
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: LD_INT 4
8745: PPUSH
8746: CALL_OW 12
8750: PPUSH
8751: LD_INT 3000
8753: PPUSH
8754: LD_INT 9000
8756: PPUSH
8757: CALL_OW 12
8761: PPUSH
8762: CALL_OW 492
// end ;
8766: PPOPN 1
8768: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8769: LD_EXP 3
8773: PUSH
8774: LD_EXP 18
8778: AND
8779: IFFALSE 8799
8781: GO 8783
8783: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8784: LD_INT 1
8786: PPUSH
8787: LD_OWVAR 2
8791: PPUSH
8792: LD_INT 0
8794: PPUSH
8795: CALL_OW 324
8799: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8800: LD_EXP 3
8804: PUSH
8805: LD_EXP 19
8809: AND
8810: IFFALSE 8893
8812: GO 8814
8814: DISABLE
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8819: LD_ADDR_VAR 0 2
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_OWVAR 2
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: ST_TO_ADDR
// if not tmp then
8855: LD_VAR 0 2
8859: NOT
8860: IFFALSE 8864
// exit ;
8862: GO 8893
// for i in tmp do
8864: LD_ADDR_VAR 0 1
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: FOR_IN
8875: IFFALSE 8891
// SetBLevel ( i , 10 ) ;
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_INT 10
8884: PPUSH
8885: CALL_OW 241
8889: GO 8874
8891: POP
8892: POP
// end ;
8893: PPOPN 2
8895: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8896: LD_EXP 3
8900: PUSH
8901: LD_EXP 20
8905: AND
8906: IFFALSE 9017
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8916: LD_ADDR_VAR 0 3
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_OWVAR 2
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL_OW 69
8951: ST_TO_ADDR
// if not tmp then
8952: LD_VAR 0 3
8956: NOT
8957: IFFALSE 8961
// exit ;
8959: GO 9017
// un := tmp [ rand ( 1 , tmp ) ] ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 3
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: ST_TO_ADDR
// if Crawls ( un ) then
8985: LD_VAR 0 2
8989: PPUSH
8990: CALL_OW 318
8994: IFFALSE 9005
// ComWalk ( un ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9005: LD_VAR 0 2
9009: PPUSH
9010: LD_INT 5
9012: PPUSH
9013: CALL_OW 336
// end ;
9017: PPOPN 3
9019: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9020: LD_EXP 3
9024: PUSH
9025: LD_EXP 21
9029: AND
9030: PUSH
9031: LD_OWVAR 67
9035: PUSH
9036: LD_INT 4
9038: LESS
9039: AND
9040: IFFALSE 9059
9042: GO 9044
9044: DISABLE
// begin Difficulty := Difficulty + 1 ;
9045: LD_ADDR_OWVAR 67
9049: PUSH
9050: LD_OWVAR 67
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end ;
9059: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9060: LD_EXP 3
9064: PUSH
9065: LD_EXP 22
9069: AND
9070: IFFALSE 9173
9072: GO 9074
9074: DISABLE
9075: LD_INT 0
9077: PPUSH
// begin for i := 1 to 5 do
9078: LD_ADDR_VAR 0 1
9082: PUSH
9083: DOUBLE
9084: LD_INT 1
9086: DEC
9087: ST_TO_ADDR
9088: LD_INT 5
9090: PUSH
9091: FOR_TO
9092: IFFALSE 9171
// begin uc_nation := nation_nature ;
9094: LD_ADDR_OWVAR 21
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// uc_side := 0 ;
9102: LD_ADDR_OWVAR 20
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9110: LD_ADDR_OWVAR 29
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 12
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: ST_TO_ADDR
// hc_agressivity := 20 ;
9125: LD_ADDR_OWVAR 35
9129: PUSH
9130: LD_INT 20
9132: ST_TO_ADDR
// hc_class := class_tiger ;
9133: LD_ADDR_OWVAR 28
9137: PUSH
9138: LD_INT 14
9140: ST_TO_ADDR
// hc_gallery :=  ;
9141: LD_ADDR_OWVAR 33
9145: PUSH
9146: LD_STRING 
9148: ST_TO_ADDR
// hc_name :=  ;
9149: LD_ADDR_OWVAR 26
9153: PUSH
9154: LD_STRING 
9156: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9157: CALL_OW 44
9161: PPUSH
9162: LD_INT 0
9164: PPUSH
9165: CALL_OW 51
// end ;
9169: GO 9091
9171: POP
9172: POP
// end ;
9173: PPOPN 1
9175: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9176: LD_EXP 3
9180: PUSH
9181: LD_EXP 23
9185: AND
9186: IFFALSE 9195
9188: GO 9190
9190: DISABLE
// StreamSibBomb ;
9191: CALL 9196 0 0
9195: END
// export function StreamSibBomb ; var i , x , y ; begin
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// result := false ;
9202: LD_ADDR_VAR 0 1
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// for i := 1 to 16 do
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: DOUBLE
9216: LD_INT 1
9218: DEC
9219: ST_TO_ADDR
9220: LD_INT 16
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9423
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9226: LD_ADDR_VAR 0 3
9230: PUSH
9231: LD_INT 10
9233: PUSH
9234: LD_INT 20
9236: PUSH
9237: LD_INT 30
9239: PUSH
9240: LD_INT 40
9242: PUSH
9243: LD_INT 50
9245: PUSH
9246: LD_INT 60
9248: PUSH
9249: LD_INT 70
9251: PUSH
9252: LD_INT 80
9254: PUSH
9255: LD_INT 90
9257: PUSH
9258: LD_INT 100
9260: PUSH
9261: LD_INT 110
9263: PUSH
9264: LD_INT 120
9266: PUSH
9267: LD_INT 130
9269: PUSH
9270: LD_INT 140
9272: PUSH
9273: LD_INT 150
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 1
9295: PPUSH
9296: LD_INT 15
9298: PPUSH
9299: CALL_OW 12
9303: ARRAY
9304: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9305: LD_ADDR_VAR 0 4
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 20
9315: PUSH
9316: LD_INT 30
9318: PUSH
9319: LD_INT 40
9321: PUSH
9322: LD_INT 50
9324: PUSH
9325: LD_INT 60
9327: PUSH
9328: LD_INT 70
9330: PUSH
9331: LD_INT 80
9333: PUSH
9334: LD_INT 90
9336: PUSH
9337: LD_INT 100
9339: PUSH
9340: LD_INT 110
9342: PUSH
9343: LD_INT 120
9345: PUSH
9346: LD_INT 130
9348: PUSH
9349: LD_INT 140
9351: PUSH
9352: LD_INT 150
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 15
9377: PPUSH
9378: CALL_OW 12
9382: ARRAY
9383: ST_TO_ADDR
// if ValidHex ( x , y ) then
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_VAR 0 4
9393: PPUSH
9394: CALL_OW 488
9398: IFFALSE 9421
// begin result := [ x , y ] ;
9400: LD_ADDR_VAR 0 1
9404: PUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_VAR 0 4
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: ST_TO_ADDR
// break ;
9419: GO 9423
// end ; end ;
9421: GO 9223
9423: POP
9424: POP
// if result then
9425: LD_VAR 0 1
9429: IFFALSE 9489
// begin ToLua ( playSibBomb() ) ;
9431: LD_STRING playSibBomb()
9433: PPUSH
9434: CALL_OW 559
// wait ( 0 0$14 ) ;
9438: LD_INT 490
9440: PPUSH
9441: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9445: LD_VAR 0 1
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: PPUSH
9454: LD_VAR 0 1
9458: PUSH
9459: LD_INT 2
9461: ARRAY
9462: PPUSH
9463: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9467: LD_VAR 0 1
9471: PUSH
9472: LD_INT 1
9474: ARRAY
9475: PPUSH
9476: LD_VAR 0 1
9480: PUSH
9481: LD_INT 2
9483: ARRAY
9484: PPUSH
9485: CALL_OW 429
// end ; end ;
9489: LD_VAR 0 1
9493: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9494: LD_EXP 3
9498: PUSH
9499: LD_EXP 25
9503: AND
9504: IFFALSE 9516
9506: GO 9508
9508: DISABLE
// YouLost (  ) ;
9509: LD_STRING 
9511: PPUSH
9512: CALL_OW 104
9516: END
// every 0 0$1 trigger StreamModeActive and sFog do
9517: LD_EXP 3
9521: PUSH
9522: LD_EXP 24
9526: AND
9527: IFFALSE 9541
9529: GO 9531
9531: DISABLE
// FogOff ( your_side ) ;
9532: LD_OWVAR 2
9536: PPUSH
9537: CALL_OW 344
9541: END
// every 0 0$1 trigger StreamModeActive and sSun do
9542: LD_EXP 3
9546: PUSH
9547: LD_EXP 26
9551: AND
9552: IFFALSE 9580
9554: GO 9556
9556: DISABLE
// begin solar_recharge_percent := 0 ;
9557: LD_ADDR_OWVAR 79
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9565: LD_INT 10500
9567: PPUSH
9568: CALL_OW 67
// solar_recharge_percent := 100 ;
9572: LD_ADDR_OWVAR 79
9576: PUSH
9577: LD_INT 100
9579: ST_TO_ADDR
// end ;
9580: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9581: LD_EXP 3
9585: PUSH
9586: LD_EXP 27
9590: AND
9591: IFFALSE 9830
9593: GO 9595
9595: DISABLE
9596: LD_INT 0
9598: PPUSH
9599: PPUSH
9600: PPUSH
// begin tmp := [ ] ;
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: EMPTY
9607: ST_TO_ADDR
// for i := 1 to 6 do
9608: LD_ADDR_VAR 0 1
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 6
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9727
// begin uc_nation := nation_nature ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// uc_side := 0 ;
9632: LD_ADDR_OWVAR 20
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9640: LD_ADDR_OWVAR 29
9644: PUSH
9645: LD_INT 12
9647: PUSH
9648: LD_INT 12
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_agressivity := 20 ;
9655: LD_ADDR_OWVAR 35
9659: PUSH
9660: LD_INT 20
9662: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9663: LD_ADDR_OWVAR 28
9667: PUSH
9668: LD_INT 17
9670: ST_TO_ADDR
// hc_gallery :=  ;
9671: LD_ADDR_OWVAR 33
9675: PUSH
9676: LD_STRING 
9678: ST_TO_ADDR
// hc_name :=  ;
9679: LD_ADDR_OWVAR 26
9683: PUSH
9684: LD_STRING 
9686: ST_TO_ADDR
// un := CreateHuman ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9697: LD_VAR 0 2
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 51
// tmp := tmp ^ un ;
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_VAR 0 3
9718: PUSH
9719: LD_VAR 0 2
9723: ADD
9724: ST_TO_ADDR
// end ;
9725: GO 9621
9727: POP
9728: POP
// repeat wait ( 0 0$1 ) ;
9729: LD_INT 35
9731: PPUSH
9732: CALL_OW 67
// for un in tmp do
9736: LD_ADDR_VAR 0 2
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9821
// begin if IsDead ( un ) then
9749: LD_VAR 0 2
9753: PPUSH
9754: CALL_OW 301
9758: IFFALSE 9778
// begin tmp := tmp diff un ;
9760: LD_ADDR_VAR 0 3
9764: PUSH
9765: LD_VAR 0 3
9769: PUSH
9770: LD_VAR 0 2
9774: DIFF
9775: ST_TO_ADDR
// continue ;
9776: GO 9746
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9778: LD_VAR 0 2
9782: PPUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 0
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: PPUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 74
9814: PPUSH
9815: CALL_OW 115
// end ;
9819: GO 9746
9821: POP
9822: POP
// until not tmp ;
9823: LD_VAR 0 3
9827: NOT
9828: IFFALSE 9729
// end ;
9830: PPOPN 3
9832: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9833: LD_EXP 3
9837: PUSH
9838: LD_EXP 28
9842: AND
9843: IFFALSE 9897
9845: GO 9847
9847: DISABLE
// begin ToLua ( displayTroll(); ) ;
9848: LD_STRING displayTroll();
9850: PPUSH
9851: CALL_OW 559
// wait ( 3 3$00 ) ;
9855: LD_INT 6300
9857: PPUSH
9858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9862: LD_STRING hideTroll();
9864: PPUSH
9865: CALL_OW 559
// wait ( 1 1$00 ) ;
9869: LD_INT 2100
9871: PPUSH
9872: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9876: LD_STRING displayTroll();
9878: PPUSH
9879: CALL_OW 559
// wait ( 1 1$00 ) ;
9883: LD_INT 2100
9885: PPUSH
9886: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9890: LD_STRING hideTroll();
9892: PPUSH
9893: CALL_OW 559
// end ;
9897: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9898: LD_EXP 3
9902: PUSH
9903: LD_EXP 29
9907: AND
9908: IFFALSE 9971
9910: GO 9912
9912: DISABLE
9913: LD_INT 0
9915: PPUSH
// begin p := 0 ;
9916: LD_ADDR_VAR 0 1
9920: PUSH
9921: LD_INT 0
9923: ST_TO_ADDR
// repeat game_speed := 1 ;
9924: LD_ADDR_OWVAR 65
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9932: LD_INT 35
9934: PPUSH
9935: CALL_OW 67
// p := p + 1 ;
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: LD_INT 1
9951: PLUS
9952: ST_TO_ADDR
// until p >= 60 ;
9953: LD_VAR 0 1
9957: PUSH
9958: LD_INT 60
9960: GREATEREQUAL
9961: IFFALSE 9924
// game_speed := 4 ;
9963: LD_ADDR_OWVAR 65
9967: PUSH
9968: LD_INT 4
9970: ST_TO_ADDR
// end ;
9971: PPOPN 1
9973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9974: LD_EXP 3
9978: PUSH
9979: LD_EXP 30
9983: AND
9984: IFFALSE 10130
9986: GO 9988
9988: DISABLE
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9993: LD_ADDR_VAR 0 1
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_OWVAR 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 30
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: ST_TO_ADDR
// if not depot then
10047: LD_VAR 0 1
10051: NOT
10052: IFFALSE 10056
// exit ;
10054: GO 10130
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10056: LD_ADDR_VAR 0 2
10060: PUSH
10061: LD_VAR 0 1
10065: PUSH
10066: LD_INT 1
10068: PPUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 12
10078: ARRAY
10079: PPUSH
10080: CALL_OW 274
10084: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10085: LD_VAR 0 2
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: LD_INT 2
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10115: LD_VAR 0 2
10119: PPUSH
10120: LD_INT 3
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 277
// end ;
10130: PPOPN 2
10132: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10133: LD_EXP 3
10137: PUSH
10138: LD_EXP 31
10142: AND
10143: IFFALSE 10240
10145: GO 10147
10147: DISABLE
10148: LD_INT 0
10150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10151: LD_ADDR_VAR 0 1
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_OWVAR 2
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 3
10180: PUSH
10181: LD_INT 23
10183: PUSH
10184: LD_INT 0
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 69
10204: ST_TO_ADDR
// if not tmp then
10205: LD_VAR 0 1
10209: NOT
10210: IFFALSE 10214
// exit ;
10212: GO 10240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10214: LD_VAR 0 1
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_VAR 0 1
10226: PPUSH
10227: CALL_OW 12
10231: ARRAY
10232: PPUSH
10233: LD_INT 200
10235: PPUSH
10236: CALL_OW 234
// end ;
10240: PPOPN 1
10242: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10243: LD_EXP 3
10247: PUSH
10248: LD_EXP 32
10252: AND
10253: IFFALSE 10332
10255: GO 10257
10257: DISABLE
10258: LD_INT 0
10260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_OWVAR 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 69
10296: ST_TO_ADDR
// if not tmp then
10297: LD_VAR 0 1
10301: NOT
10302: IFFALSE 10306
// exit ;
10304: GO 10332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10306: LD_VAR 0 1
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 12
10323: ARRAY
10324: PPUSH
10325: LD_INT 60
10327: PPUSH
10328: CALL_OW 234
// end ;
10332: PPOPN 1
10334: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10335: LD_EXP 3
10339: PUSH
10340: LD_EXP 33
10344: AND
10345: IFFALSE 10444
10347: GO 10349
10349: DISABLE
10350: LD_INT 0
10352: PPUSH
10353: PPUSH
// begin enable ;
10354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10355: LD_ADDR_VAR 0 1
10359: PUSH
10360: LD_INT 22
10362: PUSH
10363: LD_OWVAR 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 61
10374: PUSH
10375: EMPTY
10376: LIST
10377: PUSH
10378: LD_INT 33
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// if not tmp then
10398: LD_VAR 0 1
10402: NOT
10403: IFFALSE 10407
// exit ;
10405: GO 10444
// for i in tmp do
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_VAR 0 1
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10442
// if IsControledBy ( i ) then
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL_OW 312
10429: IFFALSE 10440
// ComUnlink ( i ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: CALL_OW 136
10440: GO 10417
10442: POP
10443: POP
// end ;
10444: PPOPN 2
10446: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10447: LD_EXP 3
10451: PUSH
10452: LD_EXP 34
10456: AND
10457: IFFALSE 10597
10459: GO 10461
10461: DISABLE
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
// begin ToLua ( displayPowell(); ) ;
10466: LD_STRING displayPowell();
10468: PPUSH
10469: CALL_OW 559
// uc_side := 0 ;
10473: LD_ADDR_OWVAR 20
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// uc_nation := 2 ;
10481: LD_ADDR_OWVAR 21
10485: PUSH
10486: LD_INT 2
10488: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10489: LD_ADDR_OWVAR 37
10493: PUSH
10494: LD_INT 14
10496: ST_TO_ADDR
// vc_engine := engine_siberite ;
10497: LD_ADDR_OWVAR 39
10501: PUSH
10502: LD_INT 3
10504: ST_TO_ADDR
// vc_control := control_apeman ;
10505: LD_ADDR_OWVAR 38
10509: PUSH
10510: LD_INT 5
10512: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10513: LD_ADDR_OWVAR 40
10517: PUSH
10518: LD_INT 29
10520: ST_TO_ADDR
// un := CreateVehicle ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: CALL_OW 45
10530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10543: LD_INT 35
10545: PPUSH
10546: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 22
10557: PUSH
10558: LD_OWVAR 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL_OW 69
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL_OW 74
10581: PPUSH
10582: CALL_OW 115
// until IsDead ( un ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 301
10595: IFFALSE 10543
// end ;
10597: PPOPN 2
10599: END
// every 0 0$1 trigger StreamModeActive and sStu do
10600: LD_EXP 3
10604: PUSH
10605: LD_EXP 42
10609: AND
10610: IFFALSE 10626
10612: GO 10614
10614: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10615: LD_STRING displayStucuk();
10617: PPUSH
10618: CALL_OW 559
// ResetFog ;
10622: CALL_OW 335
// end ;
10626: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10627: LD_EXP 3
10631: PUSH
10632: LD_EXP 35
10636: AND
10637: IFFALSE 10778
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_OWVAR 2
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 69
10681: ST_TO_ADDR
// if not tmp then
10682: LD_VAR 0 2
10686: NOT
10687: IFFALSE 10691
// exit ;
10689: GO 10778
// un := tmp [ rand ( 1 , tmp ) ] ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 12
10713: ARRAY
10714: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: LD_INT 0
10722: PPUSH
10723: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: PPUSH
10753: CALL_OW 115
// wait ( 0 0$20 ) ;
10757: LD_INT 700
10759: PPUSH
10760: CALL_OW 67
// SetSide ( un , your_side ) ;
10764: LD_VAR 0 1
10768: PPUSH
10769: LD_OWVAR 2
10773: PPUSH
10774: CALL_OW 235
// end ;
10778: PPOPN 2
10780: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10781: LD_EXP 3
10785: PUSH
10786: LD_EXP 36
10790: AND
10791: IFFALSE 10897
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_OWVAR 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 0
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 30
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// if not depot then
10853: LD_VAR 0 1
10857: NOT
10858: IFFALSE 10862
// exit ;
10860: GO 10897
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10862: LD_VAR 0 1
10866: PUSH
10867: LD_INT 1
10869: ARRAY
10870: PPUSH
10871: CALL_OW 250
10875: PPUSH
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 1
10883: ARRAY
10884: PPUSH
10885: CALL_OW 251
10889: PPUSH
10890: LD_INT 70
10892: PPUSH
10893: CALL_OW 495
// end ;
10897: PPOPN 1
10899: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10900: LD_EXP 3
10904: PUSH
10905: LD_EXP 37
10909: AND
10910: IFFALSE 11121
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10922: LD_ADDR_VAR 0 5
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_OWVAR 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: ST_TO_ADDR
// if not tmp then
10958: LD_VAR 0 5
10962: NOT
10963: IFFALSE 10967
// exit ;
10965: GO 11121
// for i in tmp do
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_VAR 0 5
10976: PUSH
10977: FOR_IN
10978: IFFALSE 11119
// begin d := rand ( 0 , 5 ) ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 0
10987: PPUSH
10988: LD_INT 5
10990: PPUSH
10991: CALL_OW 12
10995: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10996: LD_ADDR_VAR 0 2
11000: PUSH
11001: LD_VAR 0 1
11005: PPUSH
11006: CALL_OW 250
11010: PPUSH
11011: LD_VAR 0 4
11015: PPUSH
11016: LD_INT 3
11018: PPUSH
11019: LD_INT 12
11021: PPUSH
11022: CALL_OW 12
11026: PPUSH
11027: CALL_OW 272
11031: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 251
11046: PPUSH
11047: LD_VAR 0 4
11051: PPUSH
11052: LD_INT 3
11054: PPUSH
11055: LD_INT 12
11057: PPUSH
11058: CALL_OW 12
11062: PPUSH
11063: CALL_OW 273
11067: ST_TO_ADDR
// if ValidHex ( x , y ) then
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: CALL_OW 488
11082: IFFALSE 11117
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11084: LD_VAR 0 1
11088: PPUSH
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 3
11101: PPUSH
11102: LD_INT 6
11104: PPUSH
11105: CALL_OW 12
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 483
// end ;
11117: GO 10977
11119: POP
11120: POP
// end ;
11121: PPOPN 5
11123: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11124: LD_EXP 3
11128: PUSH
11129: LD_EXP 38
11133: AND
11134: IFFALSE 11228
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_OWVAR 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 32
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 2
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11228
// for i in tmp do
11199: LD_ADDR_VAR 0 1
11203: PUSH
11204: LD_VAR 0 2
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11226
// SetFuel ( i , 0 ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 240
11224: GO 11209
11226: POP
11227: POP
// end ;
11228: PPOPN 2
11230: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11231: LD_EXP 3
11235: PUSH
11236: LD_EXP 39
11240: AND
11241: IFFALSE 11307
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11249: LD_ADDR_VAR 0 1
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_OWVAR 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 30
11268: PUSH
11269: LD_INT 29
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: ST_TO_ADDR
// if not tmp then
11285: LD_VAR 0 1
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11307
// DestroyUnit ( tmp [ 1 ] ) ;
11294: LD_VAR 0 1
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: PPUSH
11303: CALL_OW 65
// end ;
11307: PPOPN 1
11309: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11310: LD_EXP 3
11314: PUSH
11315: LD_EXP 41
11319: AND
11320: IFFALSE 11449
11322: GO 11324
11324: DISABLE
11325: LD_INT 0
11327: PPUSH
// begin uc_side := 0 ;
11328: LD_ADDR_OWVAR 20
11332: PUSH
11333: LD_INT 0
11335: ST_TO_ADDR
// uc_nation := nation_arabian ;
11336: LD_ADDR_OWVAR 21
11340: PUSH
11341: LD_INT 2
11343: ST_TO_ADDR
// hc_gallery :=  ;
11344: LD_ADDR_OWVAR 33
11348: PUSH
11349: LD_STRING 
11351: ST_TO_ADDR
// hc_name :=  ;
11352: LD_ADDR_OWVAR 26
11356: PUSH
11357: LD_STRING 
11359: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11360: LD_INT 1
11362: PPUSH
11363: LD_INT 11
11365: PPUSH
11366: LD_INT 10
11368: PPUSH
11369: CALL_OW 380
// un := CreateHuman ;
11373: LD_ADDR_VAR 0 1
11377: PUSH
11378: CALL_OW 44
11382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_INT 22
11409: PUSH
11410: LD_OWVAR 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PPUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 74
11433: PPUSH
11434: CALL_OW 115
// until IsDead ( un ) ;
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 301
11447: IFFALSE 11395
// end ;
11449: PPOPN 1
11451: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11452: LD_EXP 3
11456: PUSH
11457: LD_EXP 43
11461: AND
11462: IFFALSE 11474
11464: GO 11466
11466: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11467: LD_STRING earthquake(getX(game), 0, 32)
11469: PPUSH
11470: CALL_OW 559
11474: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11475: LD_EXP 3
11479: PUSH
11480: LD_EXP 44
11484: AND
11485: IFFALSE 11576
11487: GO 11489
11489: DISABLE
11490: LD_INT 0
11492: PPUSH
// begin enable ;
11493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_OWVAR 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 69
11540: ST_TO_ADDR
// if not tmp then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11550
// exit ;
11548: GO 11576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11550: LD_VAR 0 1
11554: PUSH
11555: LD_INT 1
11557: PPUSH
11558: LD_VAR 0 1
11562: PPUSH
11563: CALL_OW 12
11567: ARRAY
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 234
// end ;
11576: PPOPN 1
11578: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11579: LD_EXP 3
11583: PUSH
11584: LD_EXP 45
11588: AND
11589: IFFALSE 11730
11591: GO 11593
11593: DISABLE
11594: LD_INT 0
11596: PPUSH
11597: PPUSH
11598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_OWVAR 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: ST_TO_ADDR
// if not tmp then
11635: LD_VAR 0 3
11639: NOT
11640: IFFALSE 11644
// exit ;
11642: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11644: LD_ADDR_VAR 0 2
11648: PUSH
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: ST_TO_ADDR
// if Crawls ( un ) then
11668: LD_VAR 0 2
11672: PPUSH
11673: CALL_OW 318
11677: IFFALSE 11688
// ComWalk ( un ) ;
11679: LD_VAR 0 2
11683: PPUSH
11684: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_INT 9
11695: PPUSH
11696: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11700: LD_INT 28
11702: PPUSH
11703: LD_OWVAR 2
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11715: LD_INT 29
11717: PPUSH
11718: LD_OWVAR 2
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 322
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11733: LD_EXP 3
11737: PUSH
11738: LD_EXP 46
11742: AND
11743: IFFALSE 11854
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11753: LD_ADDR_VAR 0 3
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PPUSH
11784: CALL_OW 69
11788: ST_TO_ADDR
// if not tmp then
11789: LD_VAR 0 3
11793: NOT
11794: IFFALSE 11798
// exit ;
11796: GO 11854
// un := tmp [ rand ( 1 , tmp ) ] ;
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_VAR 0 3
11807: PUSH
11808: LD_INT 1
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: CALL_OW 12
11820: ARRAY
11821: ST_TO_ADDR
// if Crawls ( un ) then
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 318
11831: IFFALSE 11842
// ComWalk ( un ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 8
11849: PPUSH
11850: CALL_OW 336
// end ;
11854: PPOPN 3
11856: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11857: LD_EXP 3
11861: PUSH
11862: LD_EXP 47
11866: AND
11867: IFFALSE 12011
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_OWVAR 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: LD_INT 34
11908: PUSH
11909: LD_INT 12
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 34
11918: PUSH
11919: LD_INT 51
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 69
11951: ST_TO_ADDR
// if not tmp then
11952: LD_VAR 0 2
11956: NOT
11957: IFFALSE 11961
// exit ;
11959: GO 12011
// for i in tmp do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: LD_VAR 0 2
11970: PUSH
11971: FOR_IN
11972: IFFALSE 12009
// if GetCargo ( i , mat_artifact ) = 0 then
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 4
11981: PPUSH
11982: CALL_OW 289
11986: PUSH
11987: LD_INT 0
11989: EQUAL
11990: IFFALSE 12007
// SetCargo ( i , mat_siberit , 100 ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 100
12002: PPUSH
12003: CALL_OW 290
12007: GO 11971
12009: POP
12010: POP
// end ;
12011: PPOPN 2
12013: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12014: LD_EXP 3
12018: PUSH
12019: LD_EXP 48
12023: AND
12024: IFFALSE 12207
12026: GO 12028
12028: DISABLE
12029: LD_INT 0
12031: PPUSH
12032: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12033: LD_ADDR_VAR 0 2
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_OWVAR 2
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: ST_TO_ADDR
// if not tmp then
12055: LD_VAR 0 2
12059: NOT
12060: IFFALSE 12064
// exit ;
12062: GO 12207
// for i := 1 to 2 do
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: DOUBLE
12070: LD_INT 1
12072: DEC
12073: ST_TO_ADDR
12074: LD_INT 2
12076: PUSH
12077: FOR_TO
12078: IFFALSE 12205
// begin uc_side := your_side ;
12080: LD_ADDR_OWVAR 20
12084: PUSH
12085: LD_OWVAR 2
12089: ST_TO_ADDR
// uc_nation := nation_american ;
12090: LD_ADDR_OWVAR 21
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// vc_chassis := us_morphling ;
12098: LD_ADDR_OWVAR 37
12102: PUSH
12103: LD_INT 5
12105: ST_TO_ADDR
// vc_engine := engine_siberite ;
12106: LD_ADDR_OWVAR 39
12110: PUSH
12111: LD_INT 3
12113: ST_TO_ADDR
// vc_control := control_computer ;
12114: LD_ADDR_OWVAR 38
12118: PUSH
12119: LD_INT 3
12121: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12122: LD_ADDR_OWVAR 40
12126: PUSH
12127: LD_INT 10
12129: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12130: LD_VAR 0 2
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: CALL_OW 310
12143: NOT
12144: IFFALSE 12191
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12146: CALL_OW 45
12150: PPUSH
12151: LD_VAR 0 2
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: CALL_OW 250
12164: PPUSH
12165: LD_VAR 0 2
12169: PUSH
12170: LD_INT 1
12172: ARRAY
12173: PPUSH
12174: CALL_OW 251
12178: PPUSH
12179: LD_INT 12
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 50
12189: GO 12203
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12191: CALL_OW 45
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 51
// end ;
12203: GO 12077
12205: POP
12206: POP
// end ;
12207: PPOPN 2
12209: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12210: LD_EXP 3
12214: PUSH
12215: LD_EXP 49
12219: AND
12220: IFFALSE 12442
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12233: LD_ADDR_VAR 0 6
12237: PUSH
12238: LD_INT 22
12240: PUSH
12241: LD_OWVAR 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: LD_INT 23
12265: PUSH
12266: LD_INT 0
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: ST_TO_ADDR
// if not tmp then
12287: LD_VAR 0 6
12291: NOT
12292: IFFALSE 12296
// exit ;
12294: GO 12442
// s1 := rand ( 1 , 4 ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 12
12311: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: LD_VAR 0 6
12321: PUSH
12322: LD_INT 1
12324: ARRAY
12325: PPUSH
12326: LD_VAR 0 2
12330: PPUSH
12331: CALL_OW 259
12335: ST_TO_ADDR
// if s1 = 1 then
12336: LD_VAR 0 2
12340: PUSH
12341: LD_INT 1
12343: EQUAL
12344: IFFALSE 12364
// s2 := rand ( 2 , 4 ) else
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: LD_INT 2
12353: PPUSH
12354: LD_INT 4
12356: PPUSH
12357: CALL_OW 12
12361: ST_TO_ADDR
12362: GO 12372
// s2 := 1 ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12372: LD_ADDR_VAR 0 5
12376: PUSH
12377: LD_VAR 0 6
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 3
12390: PPUSH
12391: CALL_OW 259
12395: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12396: LD_VAR 0 6
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: PPUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: LD_VAR 0 5
12414: PPUSH
12415: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12419: LD_VAR 0 6
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: CALL_OW 237
// end ;
12442: PPOPN 6
12444: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12445: LD_EXP 3
12449: PUSH
12450: LD_EXP 50
12454: AND
12455: IFFALSE 12534
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if not tmp then
12499: LD_VAR 0 1
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 12
12525: ARRAY
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 234
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12537: LD_EXP 3
12541: PUSH
12542: LD_EXP 51
12546: AND
12547: IFFALSE 12659
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 27
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 26
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 28
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 69
12620: ST_TO_ADDR
// if not tmp then
12621: LD_VAR 0 2
12625: NOT
12626: IFFALSE 12630
// exit ;
12628: GO 12659
// for i in tmp do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: FOR_IN
12641: IFFALSE 12657
// SetLives ( i , 1 ) ;
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 234
12655: GO 12640
12657: POP
12658: POP
// end ;
12659: PPOPN 2
12661: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12662: LD_EXP 3
12666: PUSH
12667: LD_EXP 52
12671: AND
12672: IFFALSE 12959
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin i := rand ( 1 , 7 ) ;
12682: LD_ADDR_VAR 0 1
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_INT 7
12692: PPUSH
12693: CALL_OW 12
12697: ST_TO_ADDR
// case i of 1 :
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: DOUBLE
12706: EQUAL
12707: IFTRUE 12711
12709: GO 12721
12711: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12712: LD_STRING earthquake(getX(game), 0, 32)
12714: PPUSH
12715: CALL_OW 559
12719: GO 12959
12721: LD_INT 2
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12743
12729: POP
// begin ToLua ( displayStucuk(); ) ;
12730: LD_STRING displayStucuk();
12732: PPUSH
12733: CALL_OW 559
// ResetFog ;
12737: CALL_OW 335
// end ; 3 :
12741: GO 12959
12743: LD_INT 3
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12855
12751: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// if not tmp then
12788: LD_VAR 0 2
12792: NOT
12793: IFFALSE 12797
// exit ;
12795: GO 12959
// un := tmp [ rand ( 1 , tmp ) ] ;
12797: LD_ADDR_VAR 0 3
12801: PUSH
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: CALL_OW 12
12819: ARRAY
12820: ST_TO_ADDR
// if Crawls ( un ) then
12821: LD_VAR 0 3
12825: PPUSH
12826: CALL_OW 318
12830: IFFALSE 12841
// ComWalk ( un ) ;
12832: LD_VAR 0 3
12836: PPUSH
12837: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 8
12848: PPUSH
12849: CALL_OW 336
// end ; 4 :
12853: GO 12959
12855: LD_INT 4
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12937
12863: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 29
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: ST_TO_ADDR
// if not tmp then
12900: LD_VAR 0 2
12904: NOT
12905: IFFALSE 12909
// exit ;
12907: GO 12959
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12909: LD_VAR 0 2
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PPUSH
12918: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12922: LD_VAR 0 2
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: PPUSH
12931: CALL_OW 65
// end ; 5 .. 7 :
12935: GO 12959
12937: LD_INT 5
12939: DOUBLE
12940: GREATEREQUAL
12941: IFFALSE 12949
12943: LD_INT 7
12945: DOUBLE
12946: LESSEQUAL
12947: IFTRUE 12951
12949: GO 12958
12951: POP
// StreamSibBomb ; end ;
12952: CALL 9196 0 0
12956: GO 12959
12958: POP
// end ;
12959: PPOPN 3
12961: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12962: LD_EXP 3
12966: PUSH
12967: LD_EXP 53
12971: AND
12972: IFFALSE 13128
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12982: LD_ADDR_VAR 0 2
12986: PUSH
12987: LD_INT 81
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 2
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// if not tmp then
13036: LD_VAR 0 2
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13128
// p := 0 ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13053: LD_INT 35
13055: PPUSH
13056: CALL_OW 67
// p := p + 1 ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 1
13072: PLUS
13073: ST_TO_ADDR
// for i in tmp do
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_VAR 0 2
13083: PUSH
13084: FOR_IN
13085: IFFALSE 13116
// if GetLives ( i ) < 1000 then
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 1000
13099: LESS
13100: IFFALSE 13114
// SetLives ( i , 1000 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 1000
13109: PPUSH
13110: CALL_OW 234
13114: GO 13084
13116: POP
13117: POP
// until p > 20 ;
13118: LD_VAR 0 3
13122: PUSH
13123: LD_INT 20
13125: GREATER
13126: IFFALSE 13053
// end ;
13128: PPOPN 3
13130: END
// every 0 0$1 trigger StreamModeActive and sTime do
13131: LD_EXP 3
13135: PUSH
13136: LD_EXP 54
13140: AND
13141: IFFALSE 13176
13143: GO 13145
13145: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13146: LD_INT 28
13148: PPUSH
13149: LD_OWVAR 2
13153: PPUSH
13154: LD_INT 2
13156: PPUSH
13157: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13161: LD_INT 30
13163: PPUSH
13164: LD_OWVAR 2
13168: PPUSH
13169: LD_INT 2
13171: PPUSH
13172: CALL_OW 322
// end ;
13176: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13177: LD_EXP 3
13181: PUSH
13182: LD_EXP 55
13186: AND
13187: IFFALSE 13308
13189: GO 13191
13191: DISABLE
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_OWVAR 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 23
13228: PUSH
13229: LD_INT 0
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: ST_TO_ADDR
// if not tmp then
13250: LD_VAR 0 2
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13308
// for i in tmp do
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_VAR 0 2
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13306
// begin if Crawls ( i ) then
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 318
13281: IFFALSE 13292
// ComWalk ( i ) ;
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 138
// SetClass ( i , 2 ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: CALL_OW 336
// end ;
13304: GO 13269
13306: POP
13307: POP
// end ;
13308: PPOPN 2
13310: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13311: LD_EXP 3
13315: PUSH
13316: LD_EXP 56
13320: AND
13321: IFFALSE 13609
13323: GO 13325
13325: DISABLE
13326: LD_INT 0
13328: PPUSH
13329: PPUSH
13330: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13331: LD_OWVAR 2
13335: PPUSH
13336: LD_INT 9
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13349: LD_INT 9
13351: PPUSH
13352: LD_OWVAR 2
13356: PPUSH
13357: CALL_OW 343
// uc_side := 9 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 9
13368: ST_TO_ADDR
// uc_nation := 2 ;
13369: LD_ADDR_OWVAR 21
13373: PUSH
13374: LD_INT 2
13376: ST_TO_ADDR
// hc_name := Dark Warrior ;
13377: LD_ADDR_OWVAR 26
13381: PUSH
13382: LD_STRING Dark Warrior
13384: ST_TO_ADDR
// hc_gallery :=  ;
13385: LD_ADDR_OWVAR 33
13389: PUSH
13390: LD_STRING 
13392: ST_TO_ADDR
// hc_noskilllimit := true ;
13393: LD_ADDR_OWVAR 76
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13401: LD_ADDR_OWVAR 31
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: LD_INT 30
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: ST_TO_ADDR
// un := CreateHuman ;
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: CALL_OW 44
13433: ST_TO_ADDR
// hc_noskilllimit := false ;
13434: LD_ADDR_OWVAR 76
13438: PUSH
13439: LD_INT 0
13441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 51
// ToLua ( playRanger() ) ;
13454: LD_STRING playRanger()
13456: PPUSH
13457: CALL_OW 559
// p := 0 ;
13461: LD_ADDR_VAR 0 2
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13469: LD_INT 35
13471: PPUSH
13472: CALL_OW 67
// p := p + 1 ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_INT 1
13488: PLUS
13489: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13490: LD_VAR 0 3
13494: PPUSH
13495: CALL_OW 256
13499: PUSH
13500: LD_INT 1000
13502: LESS
13503: IFFALSE 13517
// SetLives ( un , 1000 ) ;
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1000
13512: PPUSH
13513: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 81
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 91
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 69
13558: PPUSH
13559: LD_VAR 0 3
13563: PPUSH
13564: CALL_OW 74
13568: PPUSH
13569: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 80
13580: GREATER
13581: PUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: CALL_OW 301
13591: OR
13592: IFFALSE 13469
// if un then
13594: LD_VAR 0 3
13598: IFFALSE 13609
// RemoveUnit ( un ) ;
13600: LD_VAR 0 3
13604: PPUSH
13605: CALL_OW 64
// end ;
13609: PPOPN 3
13611: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13612: LD_EXP 57
13616: IFFALSE 13732
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
13624: PPUSH
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 81
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13662: LD_STRING playComputer()
13664: PPUSH
13665: CALL_OW 559
// if not tmp then
13669: LD_VAR 0 2
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 13732
// for i in tmp do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_VAR 0 2
13687: PUSH
13688: FOR_IN
13689: IFFALSE 13730
// for j := 1 to 4 do
13691: LD_ADDR_VAR 0 3
13695: PUSH
13696: DOUBLE
13697: LD_INT 1
13699: DEC
13700: ST_TO_ADDR
13701: LD_INT 4
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13726
// SetSkill ( i , j , 10 ) ;
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 10
13719: PPUSH
13720: CALL_OW 237
13724: GO 13704
13726: POP
13727: POP
13728: GO 13688
13730: POP
13731: POP
// end ;
13732: PPOPN 3
13734: END
// every 0 0$1 trigger s30 do var i , tmp ;
13735: LD_EXP 58
13739: IFFALSE 13808
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: ST_TO_ADDR
// if not tmp then
13770: LD_VAR 0 2
13774: NOT
13775: IFFALSE 13779
// exit ;
13777: GO 13808
// for i in tmp do
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: LD_VAR 0 2
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13806
// SetLives ( i , 300 ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_INT 300
13799: PPUSH
13800: CALL_OW 234
13804: GO 13789
13806: POP
13807: POP
// end ;
13808: PPOPN 2
13810: END
// every 0 0$1 trigger s60 do var i , tmp ;
13811: LD_EXP 59
13815: IFFALSE 13884
13817: GO 13819
13819: DISABLE
13820: LD_INT 0
13822: PPUSH
13823: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PPUSH
13841: CALL_OW 69
13845: ST_TO_ADDR
// if not tmp then
13846: LD_VAR 0 2
13850: NOT
13851: IFFALSE 13855
// exit ;
13853: GO 13884
// for i in tmp do
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_VAR 0 2
13864: PUSH
13865: FOR_IN
13866: IFFALSE 13882
// SetLives ( i , 600 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_INT 600
13875: PPUSH
13876: CALL_OW 234
13880: GO 13865
13882: POP
13883: POP
// end ;
13884: PPOPN 2
13886: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13887: LD_INT 0
13889: PPUSH
// case cmd of 301 :
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 301
13897: DOUBLE
13898: EQUAL
13899: IFTRUE 13903
13901: GO 13935
13903: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13904: LD_VAR 0 6
13908: PPUSH
13909: LD_VAR 0 7
13913: PPUSH
13914: LD_VAR 0 8
13918: PPUSH
13919: LD_VAR 0 4
13923: PPUSH
13924: LD_VAR 0 5
13928: PPUSH
13929: CALL 15144 0 5
13933: GO 14056
13935: LD_INT 302
13937: DOUBLE
13938: EQUAL
13939: IFTRUE 13943
13941: GO 13980
13943: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13944: LD_VAR 0 6
13948: PPUSH
13949: LD_VAR 0 7
13953: PPUSH
13954: LD_VAR 0 8
13958: PPUSH
13959: LD_VAR 0 9
13963: PPUSH
13964: LD_VAR 0 4
13968: PPUSH
13969: LD_VAR 0 5
13973: PPUSH
13974: CALL 15235 0 6
13978: GO 14056
13980: LD_INT 303
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14025
13988: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 7
13998: PPUSH
13999: LD_VAR 0 8
14003: PPUSH
14004: LD_VAR 0 9
14008: PPUSH
14009: LD_VAR 0 4
14013: PPUSH
14014: LD_VAR 0 5
14018: PPUSH
14019: CALL 14061 0 6
14023: GO 14056
14025: LD_INT 304
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14055
14033: POP
// hHackTeleport ( unit , x , y ) ; end ;
14034: LD_VAR 0 2
14038: PPUSH
14039: LD_VAR 0 4
14043: PPUSH
14044: LD_VAR 0 5
14048: PPUSH
14049: CALL 15828 0 3
14053: GO 14056
14055: POP
// end ;
14056: LD_VAR 0 12
14060: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14065: LD_VAR 0 1
14069: PUSH
14070: LD_INT 1
14072: LESS
14073: PUSH
14074: LD_VAR 0 1
14078: PUSH
14079: LD_INT 3
14081: GREATER
14082: OR
14083: PUSH
14084: LD_VAR 0 5
14088: PPUSH
14089: LD_VAR 0 6
14093: PPUSH
14094: CALL_OW 428
14098: OR
14099: IFFALSE 14103
// exit ;
14101: GO 14831
// uc_side := your_side ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_OWVAR 2
14112: ST_TO_ADDR
// uc_nation := nation ;
14113: LD_ADDR_OWVAR 21
14117: PUSH
14118: LD_VAR 0 1
14122: ST_TO_ADDR
// bc_level = 1 ;
14123: LD_ADDR_OWVAR 43
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// case btype of 1 :
14131: LD_VAR 0 2
14135: PUSH
14136: LD_INT 1
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14155
14144: POP
// bc_type := b_depot ; 2 :
14145: LD_ADDR_OWVAR 42
14149: PUSH
14150: LD_INT 0
14152: ST_TO_ADDR
14153: GO 14775
14155: LD_INT 2
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14174
14163: POP
// bc_type := b_warehouse ; 3 :
14164: LD_ADDR_OWVAR 42
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
14172: GO 14775
14174: LD_INT 3
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14193
14182: POP
// bc_type := b_lab ; 4 .. 9 :
14183: LD_ADDR_OWVAR 42
14187: PUSH
14188: LD_INT 6
14190: ST_TO_ADDR
14191: GO 14775
14193: LD_INT 4
14195: DOUBLE
14196: GREATEREQUAL
14197: IFFALSE 14205
14199: LD_INT 9
14201: DOUBLE
14202: LESSEQUAL
14203: IFTRUE 14207
14205: GO 14267
14207: POP
// begin bc_type := b_lab_half ;
14208: LD_ADDR_OWVAR 42
14212: PUSH
14213: LD_INT 7
14215: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14216: LD_ADDR_OWVAR 44
14220: PUSH
14221: LD_INT 10
14223: PUSH
14224: LD_INT 11
14226: PUSH
14227: LD_INT 12
14229: PUSH
14230: LD_INT 15
14232: PUSH
14233: LD_INT 14
14235: PUSH
14236: LD_INT 13
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_VAR 0 2
14251: PUSH
14252: LD_INT 3
14254: MINUS
14255: ARRAY
14256: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14257: LD_ADDR_OWVAR 45
14261: PUSH
14262: LD_INT 9
14264: ST_TO_ADDR
// end ; 10 .. 13 :
14265: GO 14775
14267: LD_INT 10
14269: DOUBLE
14270: GREATEREQUAL
14271: IFFALSE 14279
14273: LD_INT 13
14275: DOUBLE
14276: LESSEQUAL
14277: IFTRUE 14281
14279: GO 14358
14281: POP
// begin bc_type := b_lab_full ;
14282: LD_ADDR_OWVAR 42
14286: PUSH
14287: LD_INT 8
14289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14290: LD_ADDR_OWVAR 44
14294: PUSH
14295: LD_INT 10
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 14
14303: PUSH
14304: LD_INT 13
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: LD_INT 9
14320: MINUS
14321: ARRAY
14322: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14323: LD_ADDR_OWVAR 45
14327: PUSH
14328: LD_INT 11
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 12
14336: PUSH
14337: LD_INT 15
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 9
14353: MINUS
14354: ARRAY
14355: ST_TO_ADDR
// end ; 14 :
14356: GO 14775
14358: LD_INT 14
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14377
14366: POP
// bc_type := b_workshop ; 15 :
14367: LD_ADDR_OWVAR 42
14371: PUSH
14372: LD_INT 2
14374: ST_TO_ADDR
14375: GO 14775
14377: LD_INT 15
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// bc_type := b_factory ; 16 :
14386: LD_ADDR_OWVAR 42
14390: PUSH
14391: LD_INT 3
14393: ST_TO_ADDR
14394: GO 14775
14396: LD_INT 16
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14415
14404: POP
// bc_type := b_ext_gun ; 17 :
14405: LD_ADDR_OWVAR 42
14409: PUSH
14410: LD_INT 17
14412: ST_TO_ADDR
14413: GO 14775
14415: LD_INT 17
14417: DOUBLE
14418: EQUAL
14419: IFTRUE 14423
14421: GO 14451
14423: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14424: LD_ADDR_OWVAR 42
14428: PUSH
14429: LD_INT 19
14431: PUSH
14432: LD_INT 23
14434: PUSH
14435: LD_INT 19
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: LD_VAR 0 1
14447: ARRAY
14448: ST_TO_ADDR
14449: GO 14775
14451: LD_INT 18
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14470
14459: POP
// bc_type := b_ext_radar ; 19 :
14460: LD_ADDR_OWVAR 42
14464: PUSH
14465: LD_INT 20
14467: ST_TO_ADDR
14468: GO 14775
14470: LD_INT 19
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14489
14478: POP
// bc_type := b_ext_radio ; 20 :
14479: LD_ADDR_OWVAR 42
14483: PUSH
14484: LD_INT 22
14486: ST_TO_ADDR
14487: GO 14775
14489: LD_INT 20
14491: DOUBLE
14492: EQUAL
14493: IFTRUE 14497
14495: GO 14508
14497: POP
// bc_type := b_ext_siberium ; 21 :
14498: LD_ADDR_OWVAR 42
14502: PUSH
14503: LD_INT 21
14505: ST_TO_ADDR
14506: GO 14775
14508: LD_INT 21
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14527
14516: POP
// bc_type := b_ext_computer ; 22 :
14517: LD_ADDR_OWVAR 42
14521: PUSH
14522: LD_INT 24
14524: ST_TO_ADDR
14525: GO 14775
14527: LD_INT 22
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14546
14535: POP
// bc_type := b_ext_track ; 23 :
14536: LD_ADDR_OWVAR 42
14540: PUSH
14541: LD_INT 16
14543: ST_TO_ADDR
14544: GO 14775
14546: LD_INT 23
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14565
14554: POP
// bc_type := b_ext_laser ; 24 :
14555: LD_ADDR_OWVAR 42
14559: PUSH
14560: LD_INT 25
14562: ST_TO_ADDR
14563: GO 14775
14565: LD_INT 24
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14584
14573: POP
// bc_type := b_control_tower ; 25 :
14574: LD_ADDR_OWVAR 42
14578: PUSH
14579: LD_INT 36
14581: ST_TO_ADDR
14582: GO 14775
14584: LD_INT 25
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14603
14592: POP
// bc_type := b_breastwork ; 26 :
14593: LD_ADDR_OWVAR 42
14597: PUSH
14598: LD_INT 31
14600: ST_TO_ADDR
14601: GO 14775
14603: LD_INT 26
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14622
14611: POP
// bc_type := b_bunker ; 27 :
14612: LD_ADDR_OWVAR 42
14616: PUSH
14617: LD_INT 32
14619: ST_TO_ADDR
14620: GO 14775
14622: LD_INT 27
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14641
14630: POP
// bc_type := b_turret ; 28 :
14631: LD_ADDR_OWVAR 42
14635: PUSH
14636: LD_INT 33
14638: ST_TO_ADDR
14639: GO 14775
14641: LD_INT 28
14643: DOUBLE
14644: EQUAL
14645: IFTRUE 14649
14647: GO 14660
14649: POP
// bc_type := b_armoury ; 29 :
14650: LD_ADDR_OWVAR 42
14654: PUSH
14655: LD_INT 4
14657: ST_TO_ADDR
14658: GO 14775
14660: LD_INT 29
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14679
14668: POP
// bc_type := b_barracks ; 30 :
14669: LD_ADDR_OWVAR 42
14673: PUSH
14674: LD_INT 5
14676: ST_TO_ADDR
14677: GO 14775
14679: LD_INT 30
14681: DOUBLE
14682: EQUAL
14683: IFTRUE 14687
14685: GO 14698
14687: POP
// bc_type := b_solar_power ; 31 :
14688: LD_ADDR_OWVAR 42
14692: PUSH
14693: LD_INT 27
14695: ST_TO_ADDR
14696: GO 14775
14698: LD_INT 31
14700: DOUBLE
14701: EQUAL
14702: IFTRUE 14706
14704: GO 14717
14706: POP
// bc_type := b_oil_power ; 32 :
14707: LD_ADDR_OWVAR 42
14711: PUSH
14712: LD_INT 26
14714: ST_TO_ADDR
14715: GO 14775
14717: LD_INT 32
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14736
14725: POP
// bc_type := b_siberite_power ; 33 :
14726: LD_ADDR_OWVAR 42
14730: PUSH
14731: LD_INT 28
14733: ST_TO_ADDR
14734: GO 14775
14736: LD_INT 33
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14755
14744: POP
// bc_type := b_oil_mine ; 34 :
14745: LD_ADDR_OWVAR 42
14749: PUSH
14750: LD_INT 29
14752: ST_TO_ADDR
14753: GO 14775
14755: LD_INT 34
14757: DOUBLE
14758: EQUAL
14759: IFTRUE 14763
14761: GO 14774
14763: POP
// bc_type := b_siberite_mine ; end ;
14764: LD_ADDR_OWVAR 42
14768: PUSH
14769: LD_INT 30
14771: ST_TO_ADDR
14772: GO 14775
14774: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14775: LD_ADDR_VAR 0 8
14779: PUSH
14780: LD_VAR 0 5
14784: PPUSH
14785: LD_VAR 0 6
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 47
14799: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14800: LD_OWVAR 42
14804: PUSH
14805: LD_INT 32
14807: PUSH
14808: LD_INT 33
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: IN
14815: IFFALSE 14831
// PlaceWeaponTurret ( b , weapon ) ;
14817: LD_VAR 0 8
14821: PPUSH
14822: LD_VAR 0 4
14826: PPUSH
14827: CALL_OW 431
// end ;
14831: LD_VAR 0 7
14835: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14842: LD_ADDR_VAR 0 4
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 0
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 30
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 4
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14964
// for i in tmp do
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_VAR 0 4
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14962
// for j = 1 to 3 do
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: DOUBLE
14924: LD_INT 1
14926: DEC
14927: ST_TO_ADDR
14928: LD_INT 3
14930: PUSH
14931: FOR_TO
14932: IFFALSE 14958
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 274
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 99999
14951: PPUSH
14952: CALL_OW 277
14956: GO 14931
14958: POP
14959: POP
14960: GO 14915
14962: POP
14963: POP
// end ;
14964: LD_VAR 0 1
14968: RET
// export function hHackSetLevel10 ; var i , j ; begin
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
14973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 1
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15047
// if IsSelected ( i ) then
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 306
15006: IFFALSE 15045
// begin for j := 1 to 4 do
15008: LD_ADDR_VAR 0 3
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 4
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15043
// SetSkill ( i , j , 10 ) ;
15024: LD_VAR 0 2
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 10
15036: PPUSH
15037: CALL_OW 237
15041: GO 15021
15043: POP
15044: POP
// end ;
15045: GO 14994
15047: POP
15048: POP
// end ;
15049: LD_VAR 0 1
15053: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15054: LD_INT 0
15056: PPUSH
15057: PPUSH
15058: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 22
15066: PUSH
15067: LD_OWVAR 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15137
// begin for j := 1 to 4 do
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: DOUBLE
15104: LD_INT 1
15106: DEC
15107: ST_TO_ADDR
15108: LD_INT 4
15110: PUSH
15111: FOR_TO
15112: IFFALSE 15133
// SetSkill ( i , j , 10 ) ;
15114: LD_VAR 0 2
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 10
15126: PPUSH
15127: CALL_OW 237
15131: GO 15111
15133: POP
15134: POP
// end ;
15135: GO 15095
15137: POP
15138: POP
// end ;
15139: LD_VAR 0 1
15143: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15144: LD_INT 0
15146: PPUSH
// uc_side := your_side ;
15147: LD_ADDR_OWVAR 20
15151: PUSH
15152: LD_OWVAR 2
15156: ST_TO_ADDR
// uc_nation := nation ;
15157: LD_ADDR_OWVAR 21
15161: PUSH
15162: LD_VAR 0 1
15166: ST_TO_ADDR
// InitHc ;
15167: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15171: LD_INT 0
15173: PPUSH
15174: LD_VAR 0 2
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15188: LD_VAR 0 4
15192: PPUSH
15193: LD_VAR 0 5
15197: PPUSH
15198: CALL_OW 428
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15230
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15208: CALL_OW 44
15212: PPUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 48
// end ;
15230: LD_VAR 0 6
15234: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
// uc_side := your_side ;
15239: LD_ADDR_OWVAR 20
15243: PUSH
15244: LD_OWVAR 2
15248: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15249: LD_VAR 0 1
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: IN
15276: IFFALSE 15288
// uc_nation := nation_american else
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
15286: GO 15331
// if chassis in [ 11 , 12 , 13 , 14 ] then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: IN
15311: IFFALSE 15323
// uc_nation := nation_arabian else
15313: LD_ADDR_OWVAR 21
15317: PUSH
15318: LD_INT 2
15320: ST_TO_ADDR
15321: GO 15331
// uc_nation := nation_russian ;
15323: LD_ADDR_OWVAR 21
15327: PUSH
15328: LD_INT 3
15330: ST_TO_ADDR
// vc_chassis := chassis ;
15331: LD_ADDR_OWVAR 37
15335: PUSH
15336: LD_VAR 0 1
15340: ST_TO_ADDR
// vc_engine := engine ;
15341: LD_ADDR_OWVAR 39
15345: PUSH
15346: LD_VAR 0 2
15350: ST_TO_ADDR
// vc_control := control ;
15351: LD_ADDR_OWVAR 38
15355: PUSH
15356: LD_VAR 0 3
15360: ST_TO_ADDR
// vc_weapon := weapon ;
15361: LD_ADDR_OWVAR 40
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// un := CreateVehicle ;
15371: LD_ADDR_VAR 0 8
15375: PUSH
15376: CALL_OW 45
15380: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15381: LD_VAR 0 8
15385: PPUSH
15386: LD_INT 0
15388: PPUSH
15389: LD_INT 5
15391: PPUSH
15392: CALL_OW 12
15396: PPUSH
15397: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15401: LD_VAR 0 8
15405: PPUSH
15406: LD_VAR 0 5
15410: PPUSH
15411: LD_VAR 0 6
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 48
// end ;
15423: LD_VAR 0 7
15427: RET
// export hInvincible ; every 1 do
15428: GO 15430
15430: DISABLE
// hInvincible := [ ] ;
15431: LD_ADDR_EXP 60
15435: PUSH
15436: EMPTY
15437: ST_TO_ADDR
15438: END
// every 10 do var i ;
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin enable ;
15445: ENABLE
// if not hInvincible then
15446: LD_EXP 60
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15499
// for i in hInvincible do
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_EXP 60
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15497
// if GetLives ( i ) < 1000 then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 256
15477: PUSH
15478: LD_INT 1000
15480: LESS
15481: IFFALSE 15495
// SetLives ( i , 1000 ) ;
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_INT 1000
15490: PPUSH
15491: CALL_OW 234
15495: GO 15465
15497: POP
15498: POP
// end ;
15499: PPOPN 1
15501: END
// export function hHackInvincible ; var i ; begin
15502: LD_INT 0
15504: PPUSH
15505: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15606
// if IsSelected ( i ) then
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 306
15556: IFFALSE 15604
// begin if i in hInvincible then
15558: LD_VAR 0 2
15562: PUSH
15563: LD_EXP 60
15567: IN
15568: IFFALSE 15588
// hInvincible := hInvincible diff i else
15570: LD_ADDR_EXP 60
15574: PUSH
15575: LD_EXP 60
15579: PUSH
15580: LD_VAR 0 2
15584: DIFF
15585: ST_TO_ADDR
15586: GO 15604
// hInvincible := hInvincible union i ;
15588: LD_ADDR_EXP 60
15592: PUSH
15593: LD_EXP 60
15597: PUSH
15598: LD_VAR 0 2
15602: UNION
15603: ST_TO_ADDR
// end ;
15604: GO 15544
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function hHackInvisible ; var i , j ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 21
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15663
// if IsSelected ( i ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 306
15650: IFFALSE 15661
// ComForceInvisible ( i ) ;
15652: LD_VAR 0 2
15656: PPUSH
15657: CALL_OW 496
15661: GO 15638
15663: POP
15664: POP
// end ;
15665: LD_VAR 0 1
15669: RET
// export function hHackChangeYourSide ; begin
15670: LD_INT 0
15672: PPUSH
// if your_side = 8 then
15673: LD_OWVAR 2
15677: PUSH
15678: LD_INT 8
15680: EQUAL
15681: IFFALSE 15693
// your_side := 0 else
15683: LD_ADDR_OWVAR 2
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
15691: GO 15707
// your_side := your_side + 1 ;
15693: LD_ADDR_OWVAR 2
15697: PUSH
15698: LD_OWVAR 2
15702: PUSH
15703: LD_INT 1
15705: PLUS
15706: ST_TO_ADDR
// end ;
15707: LD_VAR 0 1
15711: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
// for i in all_units do
15717: LD_ADDR_VAR 0 2
15721: PUSH
15722: LD_OWVAR 3
15726: PUSH
15727: FOR_IN
15728: IFFALSE 15806
// if IsSelected ( i ) then
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 306
15739: IFFALSE 15804
// begin j := GetSide ( i ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 255
15755: ST_TO_ADDR
// if j = 8 then
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 8
15763: EQUAL
15764: IFFALSE 15776
// j := 0 else
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
15774: GO 15790
// j := j + 1 ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: ST_TO_ADDR
// SetSide ( i , j ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: LD_VAR 0 3
15799: PPUSH
15800: CALL_OW 235
// end ;
15804: GO 15727
15806: POP
15807: POP
// end ;
15808: LD_VAR 0 1
15812: RET
// export function hHackFog ; begin
15813: LD_INT 0
15815: PPUSH
// FogOff ( true ) ;
15816: LD_INT 1
15818: PPUSH
15819: CALL_OW 344
// end ;
15823: LD_VAR 0 1
15827: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15828: LD_INT 0
15830: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15831: LD_VAR 0 1
15835: PPUSH
15836: LD_VAR 0 2
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 483
// CenterOnXY ( x , y ) ;
15856: LD_VAR 0 2
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 84
// end ;
15870: LD_VAR 0 4
15874: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 2
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: CALL_OW 488
15899: NOT
15900: OR
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PUSH
15912: LD_INT 3
15914: NONEQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 1
15928: EQUAL
15929: NOT
15930: AND
15931: OR
15932: IFFALSE 15936
// exit ;
15934: GO 16218
// if GetType ( factory ) = unit_human then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 247
15945: PUSH
15946: LD_INT 1
15948: EQUAL
15949: IFFALSE 15966
// factory := IsInUnit ( factory ) ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 310
15965: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 266
15975: PUSH
15976: LD_INT 3
15978: NONEQUAL
15979: IFFALSE 15983
// exit ;
15981: GO 16218
// for i := 1 to Count ( factoryWaypoints ) do
15983: LD_ADDR_VAR 0 5
15987: PUSH
15988: DOUBLE
15989: LD_INT 1
15991: DEC
15992: ST_TO_ADDR
15993: LD_EXP 61
15997: PPUSH
15998: CALL 25086 0 1
16002: PUSH
16003: FOR_TO
16004: IFFALSE 16166
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16006: LD_VAR 0 2
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: CALL_OW 428
16020: PUSH
16021: LD_EXP 61
16025: PUSH
16026: LD_VAR 0 5
16030: ARRAY
16031: PUSH
16032: LD_INT 2
16034: ARRAY
16035: EQUAL
16036: IFFALSE 16068
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16038: LD_ADDR_EXP 61
16042: PUSH
16043: LD_EXP 61
16047: PPUSH
16048: LD_VAR 0 5
16052: PPUSH
16053: CALL_OW 3
16057: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16058: CALL 16223 0 0
// exit ;
16062: POP
16063: POP
16064: GO 16218
// end else
16066: GO 16164
// if factory = factoryWaypoints [ i ] [ 2 ] then
16068: LD_VAR 0 1
16072: PUSH
16073: LD_EXP 61
16077: PUSH
16078: LD_VAR 0 5
16082: ARRAY
16083: PUSH
16084: LD_INT 2
16086: ARRAY
16087: EQUAL
16088: IFFALSE 16164
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16090: LD_ADDR_EXP 61
16094: PUSH
16095: LD_EXP 61
16099: PPUSH
16100: LD_VAR 0 5
16104: PPUSH
16105: CALL_OW 3
16109: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16110: LD_ADDR_EXP 61
16114: PUSH
16115: LD_EXP 61
16119: PPUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 255
16129: PUSH
16130: LD_VAR 0 1
16134: PUSH
16135: LD_VAR 0 2
16139: PUSH
16140: LD_VAR 0 3
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: PPUSH
16151: CALL 60836 0 2
16155: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16156: CALL 16223 0 0
// exit ;
16160: POP
16161: POP
16162: GO 16218
// end ; end ;
16164: GO 16003
16166: POP
16167: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16168: LD_ADDR_EXP 61
16172: PUSH
16173: LD_EXP 61
16177: PPUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 255
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: LD_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL 60836 0 2
16213: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16214: CALL 16223 0 0
// end ;
16218: LD_VAR 0 4
16222: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16223: LD_INT 0
16225: PPUSH
16226: PPUSH
16227: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16228: LD_STRING resetFactoryWaypoint();
16230: PPUSH
16231: CALL_OW 559
// if factoryWaypoints then
16235: LD_EXP 61
16239: IFFALSE 16360
// begin list := factoryWaypoints ;
16241: LD_ADDR_VAR 0 3
16245: PUSH
16246: LD_EXP 61
16250: ST_TO_ADDR
// for i := 1 to list do
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: DOUBLE
16257: LD_INT 1
16259: DEC
16260: ST_TO_ADDR
16261: LD_VAR 0 3
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16358
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16269: LD_STRING setFactoryWaypointXY(
16271: PUSH
16272: LD_VAR 0 3
16276: PUSH
16277: LD_VAR 0 2
16281: ARRAY
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: STR
16287: PUSH
16288: LD_STRING ,
16290: STR
16291: PUSH
16292: LD_VAR 0 3
16296: PUSH
16297: LD_VAR 0 2
16301: ARRAY
16302: PUSH
16303: LD_INT 2
16305: ARRAY
16306: STR
16307: PUSH
16308: LD_STRING ,
16310: STR
16311: PUSH
16312: LD_VAR 0 3
16316: PUSH
16317: LD_VAR 0 2
16321: ARRAY
16322: PUSH
16323: LD_INT 3
16325: ARRAY
16326: STR
16327: PUSH
16328: LD_STRING ,
16330: STR
16331: PUSH
16332: LD_VAR 0 3
16336: PUSH
16337: LD_VAR 0 2
16341: ARRAY
16342: PUSH
16343: LD_INT 4
16345: ARRAY
16346: STR
16347: PUSH
16348: LD_STRING )
16350: STR
16351: PPUSH
16352: CALL_OW 559
16356: GO 16266
16358: POP
16359: POP
// end ; end ;
16360: LD_VAR 0 1
16364: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16365: LD_INT 0
16367: PPUSH
// if HexInfo ( x , y ) = warehouse then
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_VAR 0 3
16377: PPUSH
16378: CALL_OW 428
16382: PUSH
16383: LD_VAR 0 1
16387: EQUAL
16388: IFFALSE 16415
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16390: LD_ADDR_EXP 63
16394: PUSH
16395: LD_EXP 63
16399: PPUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_INT 0
16407: PPUSH
16408: CALL_OW 1
16412: ST_TO_ADDR
16413: GO 16466
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16415: LD_ADDR_EXP 63
16419: PUSH
16420: LD_EXP 63
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 255
16439: PUSH
16440: LD_VAR 0 1
16444: PUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_VAR 0 3
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PPUSH
16461: CALL_OW 1
16465: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16466: CALL 16475 0 0
// end ;
16470: LD_VAR 0 4
16474: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16475: LD_INT 0
16477: PPUSH
16478: PPUSH
16479: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16480: LD_STRING resetWarehouseGatheringPoints();
16482: PPUSH
16483: CALL_OW 559
// if warehouseGatheringPoints then
16487: LD_EXP 63
16491: IFFALSE 16617
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16493: LD_ADDR_VAR 0 3
16497: PUSH
16498: LD_EXP 63
16502: PPUSH
16503: CALL 64738 0 1
16507: ST_TO_ADDR
// for i := 1 to list do
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: DOUBLE
16514: LD_INT 1
16516: DEC
16517: ST_TO_ADDR
16518: LD_VAR 0 3
16522: PUSH
16523: FOR_TO
16524: IFFALSE 16615
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16526: LD_STRING setWarehouseGatheringPointXY(
16528: PUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_VAR 0 2
16538: ARRAY
16539: PUSH
16540: LD_INT 1
16542: ARRAY
16543: STR
16544: PUSH
16545: LD_STRING ,
16547: STR
16548: PUSH
16549: LD_VAR 0 3
16553: PUSH
16554: LD_VAR 0 2
16558: ARRAY
16559: PUSH
16560: LD_INT 2
16562: ARRAY
16563: STR
16564: PUSH
16565: LD_STRING ,
16567: STR
16568: PUSH
16569: LD_VAR 0 3
16573: PUSH
16574: LD_VAR 0 2
16578: ARRAY
16579: PUSH
16580: LD_INT 3
16582: ARRAY
16583: STR
16584: PUSH
16585: LD_STRING ,
16587: STR
16588: PUSH
16589: LD_VAR 0 3
16593: PUSH
16594: LD_VAR 0 2
16598: ARRAY
16599: PUSH
16600: LD_INT 4
16602: ARRAY
16603: STR
16604: PUSH
16605: LD_STRING )
16607: STR
16608: PPUSH
16609: CALL_OW 559
16613: GO 16523
16615: POP
16616: POP
// end ; end ;
16617: LD_VAR 0 1
16621: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16622: LD_EXP 63
16626: IFFALSE 17311
16628: GO 16630
16630: DISABLE
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
// begin enable ;
16642: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_EXP 63
16652: PPUSH
16653: CALL 64738 0 1
16657: ST_TO_ADDR
// if not list then
16658: LD_VAR 0 3
16662: NOT
16663: IFFALSE 16667
// exit ;
16665: GO 17311
// for i := 1 to list do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: DOUBLE
16673: LD_INT 1
16675: DEC
16676: ST_TO_ADDR
16677: LD_VAR 0 3
16681: PUSH
16682: FOR_TO
16683: IFFALSE 17309
// begin depot := list [ i ] [ 2 ] ;
16685: LD_ADDR_VAR 0 8
16689: PUSH
16690: LD_VAR 0 3
16694: PUSH
16695: LD_VAR 0 1
16699: ARRAY
16700: PUSH
16701: LD_INT 2
16703: ARRAY
16704: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16705: LD_ADDR_VAR 0 5
16709: PUSH
16710: LD_VAR 0 3
16714: PUSH
16715: LD_VAR 0 1
16719: ARRAY
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16725: LD_VAR 0 8
16729: PPUSH
16730: CALL_OW 301
16734: PUSH
16735: LD_VAR 0 5
16739: PUSH
16740: LD_VAR 0 8
16744: PPUSH
16745: CALL_OW 255
16749: NONEQUAL
16750: OR
16751: IFFALSE 16780
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16753: LD_ADDR_EXP 63
16757: PUSH
16758: LD_EXP 63
16762: PPUSH
16763: LD_VAR 0 8
16767: PPUSH
16768: LD_INT 0
16770: PPUSH
16771: CALL_OW 1
16775: ST_TO_ADDR
// exit ;
16776: POP
16777: POP
16778: GO 17311
// end ; x := list [ i ] [ 3 ] ;
16780: LD_ADDR_VAR 0 6
16784: PUSH
16785: LD_VAR 0 3
16789: PUSH
16790: LD_VAR 0 1
16794: ARRAY
16795: PUSH
16796: LD_INT 3
16798: ARRAY
16799: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16800: LD_ADDR_VAR 0 7
16804: PUSH
16805: LD_VAR 0 3
16809: PUSH
16810: LD_VAR 0 1
16814: ARRAY
16815: PUSH
16816: LD_INT 4
16818: ARRAY
16819: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16820: LD_ADDR_VAR 0 9
16824: PUSH
16825: LD_VAR 0 6
16829: PPUSH
16830: LD_VAR 0 7
16834: PPUSH
16835: LD_INT 16
16837: PPUSH
16838: CALL 63322 0 3
16842: ST_TO_ADDR
// if not cratesNearbyPoint then
16843: LD_VAR 0 9
16847: NOT
16848: IFFALSE 16854
// exit ;
16850: POP
16851: POP
16852: GO 17311
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16854: LD_ADDR_VAR 0 4
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_VAR 0 5
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 60
16876: PUSH
16877: EMPTY
16878: LIST
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 91
16886: PUSH
16887: LD_VAR 0 8
16891: PUSH
16892: LD_INT 6
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: LD_INT 25
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 25
16915: PUSH
16916: LD_INT 16
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: LIST
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 69
16938: PUSH
16939: LD_VAR 0 8
16943: PPUSH
16944: CALL_OW 313
16948: PPUSH
16949: LD_INT 3
16951: PUSH
16952: LD_INT 60
16954: PUSH
16955: EMPTY
16956: LIST
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: LD_INT 25
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 25
16977: PUSH
16978: LD_INT 16
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PPUSH
16994: CALL_OW 72
16998: UNION
16999: ST_TO_ADDR
// if tmp then
17000: LD_VAR 0 4
17004: IFFALSE 17084
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17006: LD_ADDR_VAR 0 4
17010: PUSH
17011: LD_VAR 0 4
17015: PPUSH
17016: LD_INT 3
17018: PPUSH
17019: CALL 61151 0 2
17023: ST_TO_ADDR
// for j in tmp do
17024: LD_ADDR_VAR 0 2
17028: PUSH
17029: LD_VAR 0 4
17033: PUSH
17034: FOR_IN
17035: IFFALSE 17078
// begin if IsInUnit ( j ) then
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 310
17046: IFFALSE 17057
// ComExit ( j ) ;
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL 61234 0 1
// AddComCollect ( j , x , y ) ;
17057: LD_VAR 0 2
17061: PPUSH
17062: LD_VAR 0 6
17066: PPUSH
17067: LD_VAR 0 7
17071: PPUSH
17072: CALL_OW 177
// end ;
17076: GO 17034
17078: POP
17079: POP
// exit ;
17080: POP
17081: POP
17082: GO 17311
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17084: LD_ADDR_VAR 0 4
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_VAR 0 5
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 91
17103: PUSH
17104: LD_VAR 0 8
17108: PUSH
17109: LD_INT 8
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 34
17122: PUSH
17123: LD_INT 12
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 34
17132: PUSH
17133: LD_INT 51
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 34
17142: PUSH
17143: LD_INT 32
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 34
17152: PUSH
17153: LD_INT 89
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if tmp then
17177: LD_VAR 0 4
17181: IFFALSE 17307
// begin for j in tmp do
17183: LD_ADDR_VAR 0 2
17187: PUSH
17188: LD_VAR 0 4
17192: PUSH
17193: FOR_IN
17194: IFFALSE 17305
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17196: LD_VAR 0 2
17200: PPUSH
17201: CALL_OW 262
17205: PUSH
17206: LD_INT 3
17208: EQUAL
17209: PUSH
17210: LD_VAR 0 2
17214: PPUSH
17215: CALL_OW 261
17219: PUSH
17220: LD_INT 20
17222: GREATER
17223: OR
17224: PUSH
17225: LD_VAR 0 2
17229: PPUSH
17230: CALL_OW 314
17234: NOT
17235: AND
17236: PUSH
17237: LD_VAR 0 2
17241: PPUSH
17242: CALL_OW 263
17246: PUSH
17247: LD_INT 1
17249: NONEQUAL
17250: PUSH
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 311
17260: OR
17261: AND
17262: IFFALSE 17303
// begin ComCollect ( j , x , y ) ;
17264: LD_VAR 0 2
17268: PPUSH
17269: LD_VAR 0 6
17273: PPUSH
17274: LD_VAR 0 7
17278: PPUSH
17279: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_VAR 0 8
17292: PPUSH
17293: CALL_OW 172
// exit ;
17297: POP
17298: POP
17299: POP
17300: POP
17301: GO 17311
// end ;
17303: GO 17193
17305: POP
17306: POP
// end ; end ;
17307: GO 16682
17309: POP
17310: POP
// end ; end_of_file
17311: PPOPN 9
17313: END
// export function SOS_UnitDestroyed ( un ) ; begin
17314: LD_INT 0
17316: PPUSH
// ComRadiation ( un ) ;
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL 18383 0 1
// end ;
17326: LD_VAR 0 2
17330: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17331: LD_INT 0
17333: PPUSH
// ComRadiation ( un ) ;
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL 18383 0 1
// end ;
17343: LD_VAR 0 2
17347: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17348: LD_INT 0
17350: PPUSH
// end ;
17351: LD_VAR 0 4
17355: RET
// export function SOS_Command ( cmd ) ; begin
17356: LD_INT 0
17358: PPUSH
// end ;
17359: LD_VAR 0 2
17363: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17364: LD_INT 0
17366: PPUSH
// end ;
17367: LD_VAR 0 6
17371: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
17372: LD_INT 0
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
// if not vehicle or not factory then
17378: LD_VAR 0 1
17382: NOT
17383: PUSH
17384: LD_VAR 0 2
17388: NOT
17389: OR
17390: IFFALSE 17394
// exit ;
17392: GO 17974
// if not factoryWaypoints then
17394: LD_EXP 61
17398: NOT
17399: IFFALSE 17403
// exit ;
17401: GO 17974
// for i := 1 to Count ( factoryWaypoints ) do
17403: LD_ADDR_VAR 0 4
17407: PUSH
17408: DOUBLE
17409: LD_INT 1
17411: DEC
17412: ST_TO_ADDR
17413: LD_EXP 61
17417: PPUSH
17418: CALL 25086 0 1
17422: PUSH
17423: FOR_TO
17424: IFFALSE 17972
// if factoryWaypoints [ i ] [ 2 ] = factory then
17426: LD_EXP 61
17430: PUSH
17431: LD_VAR 0 4
17435: ARRAY
17436: PUSH
17437: LD_INT 2
17439: ARRAY
17440: PUSH
17441: LD_VAR 0 2
17445: EQUAL
17446: IFFALSE 17970
// begin if GetControl ( vehicle ) = control_manual then
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 263
17457: PUSH
17458: LD_INT 1
17460: EQUAL
17461: IFFALSE 17823
// begin driver := IsDrivenBy ( vehicle ) ;
17463: LD_ADDR_VAR 0 5
17467: PUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 311
17477: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
17478: LD_VAR 0 5
17482: PUSH
17483: LD_EXP 62
17487: IN
17488: PUSH
17489: LD_VAR 0 1
17493: PUSH
17494: LD_EXP 62
17498: IN
17499: OR
17500: IFFALSE 17506
// exit ;
17502: POP
17503: POP
17504: GO 17974
// if not HasTask ( driver ) then
17506: LD_VAR 0 5
17510: PPUSH
17511: CALL_OW 314
17515: NOT
17516: IFFALSE 17821
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
17518: LD_ADDR_EXP 62
17522: PUSH
17523: LD_EXP 62
17527: PPUSH
17528: LD_VAR 0 5
17532: PPUSH
17533: CALL 60836 0 2
17537: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
17538: LD_ADDR_EXP 62
17542: PUSH
17543: LD_EXP 62
17547: PPUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL 60836 0 2
17557: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17558: LD_ADDR_VAR 0 6
17562: PUSH
17563: LD_EXP 61
17567: PUSH
17568: LD_VAR 0 4
17572: ARRAY
17573: PUSH
17574: LD_INT 3
17576: ARRAY
17577: PPUSH
17578: LD_EXP 61
17582: PUSH
17583: LD_VAR 0 4
17587: ARRAY
17588: PUSH
17589: LD_INT 4
17591: ARRAY
17592: PPUSH
17593: CALL_OW 428
17597: ST_TO_ADDR
// if hex then
17598: LD_VAR 0 6
17602: IFFALSE 17620
// ComMoveUnit ( driver , hex ) else
17604: LD_VAR 0 5
17608: PPUSH
17609: LD_VAR 0 6
17613: PPUSH
17614: CALL_OW 112
17618: GO 17704
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
17620: LD_VAR 0 1
17624: PPUSH
17625: LD_EXP 61
17629: PUSH
17630: LD_VAR 0 4
17634: ARRAY
17635: PUSH
17636: LD_INT 3
17638: ARRAY
17639: PPUSH
17640: LD_EXP 61
17644: PUSH
17645: LD_VAR 0 4
17649: ARRAY
17650: PUSH
17651: LD_INT 4
17653: ARRAY
17654: PPUSH
17655: CALL_OW 297
17659: PUSH
17660: LD_INT 0
17662: GREATER
17663: IFFALSE 17704
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17665: LD_VAR 0 5
17669: PPUSH
17670: LD_EXP 61
17674: PUSH
17675: LD_VAR 0 4
17679: ARRAY
17680: PUSH
17681: LD_INT 3
17683: ARRAY
17684: PPUSH
17685: LD_EXP 61
17689: PUSH
17690: LD_VAR 0 4
17694: ARRAY
17695: PUSH
17696: LD_INT 4
17698: ARRAY
17699: PPUSH
17700: CALL_OW 111
// AddComExitVehicle ( driver ) ;
17704: LD_VAR 0 5
17708: PPUSH
17709: CALL_OW 181
// if Multiplayer then
17713: LD_OWVAR 4
17717: IFFALSE 17766
// begin repeat wait ( 10 ) ;
17719: LD_INT 10
17721: PPUSH
17722: CALL_OW 67
// until not IsInUnit ( driver ) ;
17726: LD_VAR 0 5
17730: PPUSH
17731: CALL_OW 310
17735: NOT
17736: IFFALSE 17719
// if not HasTask ( driver ) then
17738: LD_VAR 0 5
17742: PPUSH
17743: CALL_OW 314
17747: NOT
17748: IFFALSE 17764
// ComEnterUnit ( driver , factory ) ;
17750: LD_VAR 0 5
17754: PPUSH
17755: LD_VAR 0 2
17759: PPUSH
17760: CALL_OW 120
// end else
17764: GO 17780
// AddComEnterUnit ( driver , factory ) ;
17766: LD_VAR 0 5
17770: PPUSH
17771: LD_VAR 0 2
17775: PPUSH
17776: CALL_OW 180
// wait ( 0 0$1 ) ;
17780: LD_INT 35
17782: PPUSH
17783: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
17787: LD_ADDR_EXP 62
17791: PUSH
17792: LD_EXP 62
17796: PUSH
17797: LD_VAR 0 5
17801: DIFF
17802: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
17803: LD_ADDR_EXP 62
17807: PUSH
17808: LD_EXP 62
17812: PUSH
17813: LD_VAR 0 1
17817: DIFF
17818: ST_TO_ADDR
// break ;
17819: GO 17972
// end ; end else
17821: GO 17970
// if GetControl ( vehicle ) = control_remote then
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 263
17832: PUSH
17833: LD_INT 2
17835: EQUAL
17836: IFFALSE 17922
// begin wait ( 0 0$2 ) ;
17838: LD_INT 70
17840: PPUSH
17841: CALL_OW 67
// repeat wait ( 10 ) ;
17845: LD_INT 10
17847: PPUSH
17848: CALL_OW 67
// Connect ( vehicle ) ;
17852: LD_VAR 0 1
17856: PPUSH
17857: CALL 31292 0 1
// until IsControledBy ( vehicle ) ;
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 312
17870: IFFALSE 17845
// wait ( 10 ) ;
17872: LD_INT 10
17874: PPUSH
17875: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17879: LD_VAR 0 1
17883: PPUSH
17884: LD_EXP 61
17888: PUSH
17889: LD_VAR 0 4
17893: ARRAY
17894: PUSH
17895: LD_INT 3
17897: ARRAY
17898: PPUSH
17899: LD_EXP 61
17903: PUSH
17904: LD_VAR 0 4
17908: ARRAY
17909: PUSH
17910: LD_INT 4
17912: ARRAY
17913: PPUSH
17914: CALL_OW 111
// break ;
17918: GO 17972
// end else
17920: GO 17970
// begin wait ( 0 0$3 ) ;
17922: LD_INT 105
17924: PPUSH
17925: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17929: LD_VAR 0 1
17933: PPUSH
17934: LD_EXP 61
17938: PUSH
17939: LD_VAR 0 4
17943: ARRAY
17944: PUSH
17945: LD_INT 3
17947: ARRAY
17948: PPUSH
17949: LD_EXP 61
17953: PUSH
17954: LD_VAR 0 4
17958: ARRAY
17959: PUSH
17960: LD_INT 4
17962: ARRAY
17963: PPUSH
17964: CALL_OW 111
// break ;
17968: GO 17972
// end ; end ;
17970: GO 17423
17972: POP
17973: POP
// end ;
17974: LD_VAR 0 3
17978: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17979: LD_INT 0
17981: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17982: LD_VAR 0 1
17986: PUSH
17987: LD_INT 250
17989: EQUAL
17990: PUSH
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 264
18000: PUSH
18001: LD_INT 81
18003: EQUAL
18004: AND
18005: IFFALSE 18026
// MinerPlaceMine ( unit , x , y ) ;
18007: LD_VAR 0 2
18011: PPUSH
18012: LD_VAR 0 4
18016: PPUSH
18017: LD_VAR 0 5
18021: PPUSH
18022: CALL 21118 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18026: LD_VAR 0 1
18030: PUSH
18031: LD_INT 251
18033: EQUAL
18034: PUSH
18035: LD_VAR 0 2
18039: PPUSH
18040: CALL_OW 264
18044: PUSH
18045: LD_INT 81
18047: EQUAL
18048: AND
18049: IFFALSE 18070
// MinerDetonateMine ( unit , x , y ) ;
18051: LD_VAR 0 2
18055: PPUSH
18056: LD_VAR 0 4
18060: PPUSH
18061: LD_VAR 0 5
18065: PPUSH
18066: CALL 21393 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18070: LD_VAR 0 1
18074: PUSH
18075: LD_INT 252
18077: EQUAL
18078: PUSH
18079: LD_VAR 0 2
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 81
18091: EQUAL
18092: AND
18093: IFFALSE 18114
// MinerCreateMinefield ( unit , x , y ) ;
18095: LD_VAR 0 2
18099: PPUSH
18100: LD_VAR 0 4
18104: PPUSH
18105: LD_VAR 0 5
18109: PPUSH
18110: CALL 21810 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18114: LD_VAR 0 1
18118: PUSH
18119: LD_INT 253
18121: EQUAL
18122: PUSH
18123: LD_VAR 0 2
18127: PPUSH
18128: CALL_OW 257
18132: PUSH
18133: LD_INT 5
18135: EQUAL
18136: AND
18137: IFFALSE 18158
// ComBinocular ( unit , x , y ) ;
18139: LD_VAR 0 2
18143: PPUSH
18144: LD_VAR 0 4
18148: PPUSH
18149: LD_VAR 0 5
18153: PPUSH
18154: CALL 22179 0 3
// if selectedUnit then
18158: LD_VAR 0 3
18162: IFFALSE 18218
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18164: LD_VAR 0 1
18168: PUSH
18169: LD_INT 254
18171: EQUAL
18172: PUSH
18173: LD_VAR 0 2
18177: PPUSH
18178: CALL_OW 264
18182: PUSH
18183: LD_INT 99
18185: EQUAL
18186: AND
18187: PUSH
18188: LD_VAR 0 3
18192: PPUSH
18193: CALL_OW 263
18197: PUSH
18198: LD_INT 3
18200: EQUAL
18201: AND
18202: IFFALSE 18218
// HackDestroyVehicle ( unit , selectedUnit ) ;
18204: LD_VAR 0 2
18208: PPUSH
18209: LD_VAR 0 3
18213: PPUSH
18214: CALL 20482 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18218: LD_VAR 0 1
18222: PUSH
18223: LD_INT 255
18225: EQUAL
18226: PUSH
18227: LD_VAR 0 2
18231: PPUSH
18232: CALL_OW 264
18236: PUSH
18237: LD_INT 14
18239: PUSH
18240: LD_INT 53
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: IN
18247: AND
18248: PUSH
18249: LD_VAR 0 4
18253: PPUSH
18254: LD_VAR 0 5
18258: PPUSH
18259: CALL_OW 488
18263: AND
18264: IFFALSE 18288
// CutTreeXYR ( unit , x , y , 12 ) ;
18266: LD_VAR 0 2
18270: PPUSH
18271: LD_VAR 0 4
18275: PPUSH
18276: LD_VAR 0 5
18280: PPUSH
18281: LD_INT 12
18283: PPUSH
18284: CALL 18479 0 4
// if cmd = 256 then
18288: LD_VAR 0 1
18292: PUSH
18293: LD_INT 256
18295: EQUAL
18296: IFFALSE 18317
// SetFactoryWaypoint ( unit , x , y ) ;
18298: LD_VAR 0 2
18302: PPUSH
18303: LD_VAR 0 4
18307: PPUSH
18308: LD_VAR 0 5
18312: PPUSH
18313: CALL 15875 0 3
// if cmd = 257 then
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 257
18324: EQUAL
18325: IFFALSE 18346
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18327: LD_VAR 0 2
18331: PPUSH
18332: LD_VAR 0 4
18336: PPUSH
18337: LD_VAR 0 5
18341: PPUSH
18342: CALL 16365 0 3
// if cmd = 258 then
18346: LD_VAR 0 1
18350: PUSH
18351: LD_INT 258
18353: EQUAL
18354: IFFALSE 18378
// BurnTreeXYR ( unit , x , y , 8 ) ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: LD_INT 8
18373: PPUSH
18374: CALL 18873 0 4
// end ;
18378: LD_VAR 0 6
18382: RET
// export function ComRadiation ( un ) ; var eff ; begin
18383: LD_INT 0
18385: PPUSH
18386: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 264
18396: PUSH
18397: LD_INT 91
18399: NONEQUAL
18400: IFFALSE 18404
// exit ;
18402: GO 18474
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18404: LD_INT 68
18406: PPUSH
18407: LD_VAR 0 1
18411: PPUSH
18412: CALL_OW 255
18416: PPUSH
18417: CALL_OW 321
18421: PUSH
18422: LD_INT 2
18424: EQUAL
18425: IFFALSE 18437
// eff := 50 else
18427: LD_ADDR_VAR 0 3
18431: PUSH
18432: LD_INT 50
18434: ST_TO_ADDR
18435: GO 18445
// eff := 25 ;
18437: LD_ADDR_VAR 0 3
18441: PUSH
18442: LD_INT 25
18444: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 250
18454: PPUSH
18455: LD_VAR 0 1
18459: PPUSH
18460: CALL_OW 251
18464: PPUSH
18465: LD_VAR 0 3
18469: PPUSH
18470: CALL_OW 495
// end ;
18474: LD_VAR 0 2
18478: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
18488: PPUSH
18489: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18490: LD_VAR 0 1
18494: PPUSH
18495: CALL_OW 302
18499: NOT
18500: PUSH
18501: LD_VAR 0 2
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: CALL_OW 488
18515: NOT
18516: OR
18517: PUSH
18518: LD_VAR 0 4
18522: NOT
18523: OR
18524: IFFALSE 18528
// exit ;
18526: GO 18868
// list := [ ] ;
18528: LD_ADDR_VAR 0 13
18532: PUSH
18533: EMPTY
18534: ST_TO_ADDR
// if x - r < 0 then
18535: LD_VAR 0 2
18539: PUSH
18540: LD_VAR 0 4
18544: MINUS
18545: PUSH
18546: LD_INT 0
18548: LESS
18549: IFFALSE 18561
// min_x := 0 else
18551: LD_ADDR_VAR 0 7
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
18559: GO 18577
// min_x := x - r ;
18561: LD_ADDR_VAR 0 7
18565: PUSH
18566: LD_VAR 0 2
18570: PUSH
18571: LD_VAR 0 4
18575: MINUS
18576: ST_TO_ADDR
// if y - r < 0 then
18577: LD_VAR 0 3
18581: PUSH
18582: LD_VAR 0 4
18586: MINUS
18587: PUSH
18588: LD_INT 0
18590: LESS
18591: IFFALSE 18603
// min_y := 0 else
18593: LD_ADDR_VAR 0 8
18597: PUSH
18598: LD_INT 0
18600: ST_TO_ADDR
18601: GO 18619
// min_y := y - r ;
18603: LD_ADDR_VAR 0 8
18607: PUSH
18608: LD_VAR 0 3
18612: PUSH
18613: LD_VAR 0 4
18617: MINUS
18618: ST_TO_ADDR
// max_x := x + r ;
18619: LD_ADDR_VAR 0 9
18623: PUSH
18624: LD_VAR 0 2
18628: PUSH
18629: LD_VAR 0 4
18633: PLUS
18634: ST_TO_ADDR
// max_y := y + r ;
18635: LD_ADDR_VAR 0 10
18639: PUSH
18640: LD_VAR 0 3
18644: PUSH
18645: LD_VAR 0 4
18649: PLUS
18650: ST_TO_ADDR
// for _x = min_x to max_x do
18651: LD_ADDR_VAR 0 11
18655: PUSH
18656: DOUBLE
18657: LD_VAR 0 7
18661: DEC
18662: ST_TO_ADDR
18663: LD_VAR 0 9
18667: PUSH
18668: FOR_TO
18669: IFFALSE 18786
// for _y = min_y to max_y do
18671: LD_ADDR_VAR 0 12
18675: PUSH
18676: DOUBLE
18677: LD_VAR 0 8
18681: DEC
18682: ST_TO_ADDR
18683: LD_VAR 0 10
18687: PUSH
18688: FOR_TO
18689: IFFALSE 18782
// begin if not ValidHex ( _x , _y ) then
18691: LD_VAR 0 11
18695: PPUSH
18696: LD_VAR 0 12
18700: PPUSH
18701: CALL_OW 488
18705: NOT
18706: IFFALSE 18710
// continue ;
18708: GO 18688
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18710: LD_VAR 0 11
18714: PPUSH
18715: LD_VAR 0 12
18719: PPUSH
18720: CALL_OW 351
18724: PUSH
18725: LD_VAR 0 11
18729: PPUSH
18730: LD_VAR 0 12
18734: PPUSH
18735: CALL_OW 554
18739: AND
18740: IFFALSE 18780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18742: LD_ADDR_VAR 0 13
18746: PUSH
18747: LD_VAR 0 13
18751: PPUSH
18752: LD_VAR 0 13
18756: PUSH
18757: LD_INT 1
18759: PLUS
18760: PPUSH
18761: LD_VAR 0 11
18765: PUSH
18766: LD_VAR 0 12
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 2
18779: ST_TO_ADDR
// end ;
18780: GO 18688
18782: POP
18783: POP
18784: GO 18668
18786: POP
18787: POP
// if not list then
18788: LD_VAR 0 13
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18868
// for i in list do
18797: LD_ADDR_VAR 0 6
18801: PUSH
18802: LD_VAR 0 13
18806: PUSH
18807: FOR_IN
18808: IFFALSE 18866
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18810: LD_VAR 0 1
18814: PPUSH
18815: LD_STRING M
18817: PUSH
18818: LD_VAR 0 6
18822: PUSH
18823: LD_INT 1
18825: ARRAY
18826: PUSH
18827: LD_VAR 0 6
18831: PUSH
18832: LD_INT 2
18834: ARRAY
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: PPUSH
18860: CALL_OW 447
18864: GO 18807
18866: POP
18867: POP
// end ;
18868: LD_VAR 0 5
18872: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
18873: LD_INT 0
18875: PPUSH
18876: PPUSH
18877: PPUSH
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
18882: PPUSH
18883: PPUSH
18884: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18885: LD_VAR 0 1
18889: PPUSH
18890: CALL_OW 302
18894: NOT
18895: PUSH
18896: LD_VAR 0 2
18900: PPUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: CALL_OW 488
18910: NOT
18911: OR
18912: PUSH
18913: LD_VAR 0 4
18917: NOT
18918: OR
18919: IFFALSE 18923
// exit ;
18921: GO 19436
// list := [ ] ;
18923: LD_ADDR_VAR 0 13
18927: PUSH
18928: EMPTY
18929: ST_TO_ADDR
// if x - r < 0 then
18930: LD_VAR 0 2
18934: PUSH
18935: LD_VAR 0 4
18939: MINUS
18940: PUSH
18941: LD_INT 0
18943: LESS
18944: IFFALSE 18956
// min_x := 0 else
18946: LD_ADDR_VAR 0 7
18950: PUSH
18951: LD_INT 0
18953: ST_TO_ADDR
18954: GO 18972
// min_x := x - r ;
18956: LD_ADDR_VAR 0 7
18960: PUSH
18961: LD_VAR 0 2
18965: PUSH
18966: LD_VAR 0 4
18970: MINUS
18971: ST_TO_ADDR
// if y - r < 0 then
18972: LD_VAR 0 3
18976: PUSH
18977: LD_VAR 0 4
18981: MINUS
18982: PUSH
18983: LD_INT 0
18985: LESS
18986: IFFALSE 18998
// min_y := 0 else
18988: LD_ADDR_VAR 0 8
18992: PUSH
18993: LD_INT 0
18995: ST_TO_ADDR
18996: GO 19014
// min_y := y - r ;
18998: LD_ADDR_VAR 0 8
19002: PUSH
19003: LD_VAR 0 3
19007: PUSH
19008: LD_VAR 0 4
19012: MINUS
19013: ST_TO_ADDR
// max_x := x + r ;
19014: LD_ADDR_VAR 0 9
19018: PUSH
19019: LD_VAR 0 2
19023: PUSH
19024: LD_VAR 0 4
19028: PLUS
19029: ST_TO_ADDR
// max_y := y + r ;
19030: LD_ADDR_VAR 0 10
19034: PUSH
19035: LD_VAR 0 3
19039: PUSH
19040: LD_VAR 0 4
19044: PLUS
19045: ST_TO_ADDR
// for _x = min_x to max_x do
19046: LD_ADDR_VAR 0 11
19050: PUSH
19051: DOUBLE
19052: LD_VAR 0 7
19056: DEC
19057: ST_TO_ADDR
19058: LD_VAR 0 9
19062: PUSH
19063: FOR_TO
19064: IFFALSE 19181
// for _y = min_y to max_y do
19066: LD_ADDR_VAR 0 12
19070: PUSH
19071: DOUBLE
19072: LD_VAR 0 8
19076: DEC
19077: ST_TO_ADDR
19078: LD_VAR 0 10
19082: PUSH
19083: FOR_TO
19084: IFFALSE 19177
// begin if not ValidHex ( _x , _y ) then
19086: LD_VAR 0 11
19090: PPUSH
19091: LD_VAR 0 12
19095: PPUSH
19096: CALL_OW 488
19100: NOT
19101: IFFALSE 19105
// continue ;
19103: GO 19083
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19105: LD_VAR 0 11
19109: PPUSH
19110: LD_VAR 0 12
19114: PPUSH
19115: CALL_OW 351
19119: PUSH
19120: LD_VAR 0 11
19124: PPUSH
19125: LD_VAR 0 12
19129: PPUSH
19130: CALL_OW 554
19134: AND
19135: IFFALSE 19175
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19137: LD_ADDR_VAR 0 13
19141: PUSH
19142: LD_VAR 0 13
19146: PPUSH
19147: LD_VAR 0 13
19151: PUSH
19152: LD_INT 1
19154: PLUS
19155: PPUSH
19156: LD_VAR 0 11
19160: PUSH
19161: LD_VAR 0 12
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 2
19174: ST_TO_ADDR
// end ;
19175: GO 19083
19177: POP
19178: POP
19179: GO 19063
19181: POP
19182: POP
// if not list then
19183: LD_VAR 0 13
19187: NOT
19188: IFFALSE 19192
// exit ;
19190: GO 19436
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19192: LD_ADDR_VAR 0 13
19196: PUSH
19197: LD_VAR 0 1
19201: PPUSH
19202: LD_VAR 0 13
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: LD_INT 1
19212: PPUSH
19213: CALL 28434 0 4
19217: ST_TO_ADDR
// ComStop ( flame ) ;
19218: LD_VAR 0 1
19222: PPUSH
19223: CALL_OW 141
// for i in list do
19227: LD_ADDR_VAR 0 6
19231: PUSH
19232: LD_VAR 0 13
19236: PUSH
19237: FOR_IN
19238: IFFALSE 19269
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19240: LD_VAR 0 1
19244: PPUSH
19245: LD_VAR 0 6
19249: PUSH
19250: LD_INT 1
19252: ARRAY
19253: PPUSH
19254: LD_VAR 0 6
19258: PUSH
19259: LD_INT 2
19261: ARRAY
19262: PPUSH
19263: CALL_OW 176
19267: GO 19237
19269: POP
19270: POP
// repeat wait ( 0 0$1 ) ;
19271: LD_INT 35
19273: PPUSH
19274: CALL_OW 67
// task := GetTaskList ( flame ) ;
19278: LD_ADDR_VAR 0 14
19282: PUSH
19283: LD_VAR 0 1
19287: PPUSH
19288: CALL_OW 437
19292: ST_TO_ADDR
// if not task then
19293: LD_VAR 0 14
19297: NOT
19298: IFFALSE 19302
// exit ;
19300: GO 19436
// if task [ 1 ] [ 1 ] <> | then
19302: LD_VAR 0 14
19306: PUSH
19307: LD_INT 1
19309: ARRAY
19310: PUSH
19311: LD_INT 1
19313: ARRAY
19314: PUSH
19315: LD_STRING |
19317: NONEQUAL
19318: IFFALSE 19322
// exit ;
19320: GO 19436
// _x := task [ 1 ] [ 2 ] ;
19322: LD_ADDR_VAR 0 11
19326: PUSH
19327: LD_VAR 0 14
19331: PUSH
19332: LD_INT 1
19334: ARRAY
19335: PUSH
19336: LD_INT 2
19338: ARRAY
19339: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19340: LD_ADDR_VAR 0 12
19344: PUSH
19345: LD_VAR 0 14
19349: PUSH
19350: LD_INT 1
19352: ARRAY
19353: PUSH
19354: LD_INT 3
19356: ARRAY
19357: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19358: LD_VAR 0 11
19362: PPUSH
19363: LD_VAR 0 12
19367: PPUSH
19368: CALL_OW 351
19372: NOT
19373: PUSH
19374: LD_VAR 0 11
19378: PPUSH
19379: LD_VAR 0 12
19383: PPUSH
19384: CALL_OW 554
19388: NOT
19389: OR
19390: IFFALSE 19424
// begin task := Delete ( task , 1 ) ;
19392: LD_ADDR_VAR 0 14
19396: PUSH
19397: LD_VAR 0 14
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL_OW 3
19409: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19410: LD_VAR 0 1
19414: PPUSH
19415: LD_VAR 0 14
19419: PPUSH
19420: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19424: LD_VAR 0 1
19428: PPUSH
19429: CALL_OW 314
19433: NOT
19434: IFFALSE 19271
// end ;
19436: LD_VAR 0 5
19440: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19441: LD_EXP 65
19445: NOT
19446: IFFALSE 19496
19448: GO 19450
19450: DISABLE
// begin initHack := true ;
19451: LD_ADDR_EXP 65
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// hackTanks := [ ] ;
19459: LD_ADDR_EXP 66
19463: PUSH
19464: EMPTY
19465: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19466: LD_ADDR_EXP 67
19470: PUSH
19471: EMPTY
19472: ST_TO_ADDR
// hackLimit := 3 ;
19473: LD_ADDR_EXP 68
19477: PUSH
19478: LD_INT 3
19480: ST_TO_ADDR
// hackDist := 12 ;
19481: LD_ADDR_EXP 69
19485: PUSH
19486: LD_INT 12
19488: ST_TO_ADDR
// hackCounter := [ ] ;
19489: LD_ADDR_EXP 70
19493: PUSH
19494: EMPTY
19495: ST_TO_ADDR
// end ;
19496: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19497: LD_EXP 65
19501: PUSH
19502: LD_INT 34
19504: PUSH
19505: LD_INT 99
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 69
19516: AND
19517: IFFALSE 19770
19519: GO 19521
19521: DISABLE
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
// begin enable ;
19526: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19527: LD_ADDR_VAR 0 1
19531: PUSH
19532: LD_INT 34
19534: PUSH
19535: LD_INT 99
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PPUSH
19542: CALL_OW 69
19546: PUSH
19547: FOR_IN
19548: IFFALSE 19768
// begin if not i in hackTanks then
19550: LD_VAR 0 1
19554: PUSH
19555: LD_EXP 66
19559: IN
19560: NOT
19561: IFFALSE 19644
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19563: LD_ADDR_EXP 66
19567: PUSH
19568: LD_EXP 66
19572: PPUSH
19573: LD_EXP 66
19577: PUSH
19578: LD_INT 1
19580: PLUS
19581: PPUSH
19582: LD_VAR 0 1
19586: PPUSH
19587: CALL_OW 1
19591: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19592: LD_ADDR_EXP 67
19596: PUSH
19597: LD_EXP 67
19601: PPUSH
19602: LD_EXP 67
19606: PUSH
19607: LD_INT 1
19609: PLUS
19610: PPUSH
19611: EMPTY
19612: PPUSH
19613: CALL_OW 1
19617: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19618: LD_ADDR_EXP 70
19622: PUSH
19623: LD_EXP 70
19627: PPUSH
19628: LD_EXP 70
19632: PUSH
19633: LD_INT 1
19635: PLUS
19636: PPUSH
19637: EMPTY
19638: PPUSH
19639: CALL_OW 1
19643: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL_OW 302
19653: NOT
19654: IFFALSE 19667
// begin HackUnlinkAll ( i ) ;
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL 19773 0 1
// continue ;
19665: GO 19547
// end ; HackCheckCapturedStatus ( i ) ;
19667: LD_VAR 0 1
19671: PPUSH
19672: CALL 20216 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19676: LD_ADDR_VAR 0 2
19680: PUSH
19681: LD_INT 81
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 255
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 33
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 91
19710: PUSH
19711: LD_VAR 0 1
19715: PUSH
19716: LD_EXP 69
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 50
19728: PUSH
19729: EMPTY
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: PPUSH
19738: CALL_OW 69
19742: ST_TO_ADDR
// if not tmp then
19743: LD_VAR 0 2
19747: NOT
19748: IFFALSE 19752
// continue ;
19750: GO 19547
// HackLink ( i , tmp ) ;
19752: LD_VAR 0 1
19756: PPUSH
19757: LD_VAR 0 2
19761: PPUSH
19762: CALL 19909 0 2
// end ;
19766: GO 19547
19768: POP
19769: POP
// end ;
19770: PPOPN 2
19772: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19773: LD_INT 0
19775: PPUSH
19776: PPUSH
19777: PPUSH
// if not hack in hackTanks then
19778: LD_VAR 0 1
19782: PUSH
19783: LD_EXP 66
19787: IN
19788: NOT
19789: IFFALSE 19793
// exit ;
19791: GO 19904
// index := GetElementIndex ( hackTanks , hack ) ;
19793: LD_ADDR_VAR 0 4
19797: PUSH
19798: LD_EXP 66
19802: PPUSH
19803: LD_VAR 0 1
19807: PPUSH
19808: CALL 27731 0 2
19812: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19813: LD_EXP 67
19817: PUSH
19818: LD_VAR 0 4
19822: ARRAY
19823: IFFALSE 19904
// begin for i in hackTanksCaptured [ index ] do
19825: LD_ADDR_VAR 0 3
19829: PUSH
19830: LD_EXP 67
19834: PUSH
19835: LD_VAR 0 4
19839: ARRAY
19840: PUSH
19841: FOR_IN
19842: IFFALSE 19868
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19844: LD_VAR 0 3
19848: PUSH
19849: LD_INT 1
19851: ARRAY
19852: PPUSH
19853: LD_VAR 0 3
19857: PUSH
19858: LD_INT 2
19860: ARRAY
19861: PPUSH
19862: CALL_OW 235
19866: GO 19841
19868: POP
19869: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19870: LD_ADDR_EXP 67
19874: PUSH
19875: LD_EXP 67
19879: PPUSH
19880: LD_VAR 0 4
19884: PPUSH
19885: EMPTY
19886: PPUSH
19887: CALL_OW 1
19891: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_INT 0
19899: PPUSH
19900: CALL_OW 505
// end ; end ;
19904: LD_VAR 0 2
19908: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
19913: PPUSH
// if not hack in hackTanks or not vehicles then
19914: LD_VAR 0 1
19918: PUSH
19919: LD_EXP 66
19923: IN
19924: NOT
19925: PUSH
19926: LD_VAR 0 2
19930: NOT
19931: OR
19932: IFFALSE 19936
// exit ;
19934: GO 20211
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19936: LD_ADDR_VAR 0 2
19940: PUSH
19941: LD_VAR 0 1
19945: PPUSH
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_INT 1
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: CALL 28381 0 4
19961: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19962: LD_ADDR_VAR 0 5
19966: PUSH
19967: LD_EXP 66
19971: PPUSH
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL 27731 0 2
19981: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19982: LD_EXP 67
19986: PUSH
19987: LD_VAR 0 5
19991: ARRAY
19992: PUSH
19993: LD_EXP 68
19997: LESS
19998: IFFALSE 20187
// begin for i := 1 to vehicles do
20000: LD_ADDR_VAR 0 4
20004: PUSH
20005: DOUBLE
20006: LD_INT 1
20008: DEC
20009: ST_TO_ADDR
20010: LD_VAR 0 2
20014: PUSH
20015: FOR_TO
20016: IFFALSE 20185
// begin if hackTanksCaptured [ index ] = hackLimit then
20018: LD_EXP 67
20022: PUSH
20023: LD_VAR 0 5
20027: ARRAY
20028: PUSH
20029: LD_EXP 68
20033: EQUAL
20034: IFFALSE 20038
// break ;
20036: GO 20185
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20038: LD_ADDR_EXP 70
20042: PUSH
20043: LD_EXP 70
20047: PPUSH
20048: LD_VAR 0 5
20052: PPUSH
20053: LD_EXP 70
20057: PUSH
20058: LD_VAR 0 5
20062: ARRAY
20063: PUSH
20064: LD_INT 1
20066: PLUS
20067: PPUSH
20068: CALL_OW 1
20072: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20073: LD_ADDR_EXP 67
20077: PUSH
20078: LD_EXP 67
20082: PPUSH
20083: LD_VAR 0 5
20087: PUSH
20088: LD_EXP 67
20092: PUSH
20093: LD_VAR 0 5
20097: ARRAY
20098: PUSH
20099: LD_INT 1
20101: PLUS
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PPUSH
20107: LD_VAR 0 2
20111: PUSH
20112: LD_VAR 0 4
20116: ARRAY
20117: PUSH
20118: LD_VAR 0 2
20122: PUSH
20123: LD_VAR 0 4
20127: ARRAY
20128: PPUSH
20129: CALL_OW 255
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PPUSH
20138: CALL 27946 0 3
20142: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20143: LD_VAR 0 2
20147: PUSH
20148: LD_VAR 0 4
20152: ARRAY
20153: PPUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 255
20163: PPUSH
20164: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20168: LD_VAR 0 2
20172: PUSH
20173: LD_VAR 0 4
20177: ARRAY
20178: PPUSH
20179: CALL_OW 141
// end ;
20183: GO 20015
20185: POP
20186: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20187: LD_VAR 0 1
20191: PPUSH
20192: LD_EXP 67
20196: PUSH
20197: LD_VAR 0 5
20201: ARRAY
20202: PUSH
20203: LD_INT 0
20205: PLUS
20206: PPUSH
20207: CALL_OW 505
// end ;
20211: LD_VAR 0 3
20215: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20216: LD_INT 0
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
// if not hack in hackTanks then
20222: LD_VAR 0 1
20226: PUSH
20227: LD_EXP 66
20231: IN
20232: NOT
20233: IFFALSE 20237
// exit ;
20235: GO 20477
// index := GetElementIndex ( hackTanks , hack ) ;
20237: LD_ADDR_VAR 0 4
20241: PUSH
20242: LD_EXP 66
20246: PPUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL 27731 0 2
20256: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20257: LD_ADDR_VAR 0 3
20261: PUSH
20262: DOUBLE
20263: LD_EXP 67
20267: PUSH
20268: LD_VAR 0 4
20272: ARRAY
20273: INC
20274: ST_TO_ADDR
20275: LD_INT 1
20277: PUSH
20278: FOR_DOWNTO
20279: IFFALSE 20451
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20281: LD_ADDR_VAR 0 5
20285: PUSH
20286: LD_EXP 67
20290: PUSH
20291: LD_VAR 0 4
20295: ARRAY
20296: PUSH
20297: LD_VAR 0 3
20301: ARRAY
20302: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20303: LD_VAR 0 5
20307: PUSH
20308: LD_INT 1
20310: ARRAY
20311: PPUSH
20312: CALL_OW 302
20316: NOT
20317: PUSH
20318: LD_VAR 0 5
20322: PUSH
20323: LD_INT 1
20325: ARRAY
20326: PPUSH
20327: CALL_OW 255
20331: PUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: CALL_OW 255
20341: NONEQUAL
20342: OR
20343: IFFALSE 20449
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20345: LD_VAR 0 5
20349: PUSH
20350: LD_INT 1
20352: ARRAY
20353: PPUSH
20354: CALL_OW 305
20358: PUSH
20359: LD_VAR 0 5
20363: PUSH
20364: LD_INT 1
20366: ARRAY
20367: PPUSH
20368: CALL_OW 255
20372: PUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 255
20382: EQUAL
20383: AND
20384: IFFALSE 20408
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20386: LD_VAR 0 5
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_VAR 0 5
20399: PUSH
20400: LD_INT 2
20402: ARRAY
20403: PPUSH
20404: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20408: LD_ADDR_EXP 67
20412: PUSH
20413: LD_EXP 67
20417: PPUSH
20418: LD_VAR 0 4
20422: PPUSH
20423: LD_EXP 67
20427: PUSH
20428: LD_VAR 0 4
20432: ARRAY
20433: PPUSH
20434: LD_VAR 0 3
20438: PPUSH
20439: CALL_OW 3
20443: PPUSH
20444: CALL_OW 1
20448: ST_TO_ADDR
// end ; end ;
20449: GO 20278
20451: POP
20452: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20453: LD_VAR 0 1
20457: PPUSH
20458: LD_EXP 67
20462: PUSH
20463: LD_VAR 0 4
20467: ARRAY
20468: PUSH
20469: LD_INT 0
20471: PLUS
20472: PPUSH
20473: CALL_OW 505
// end ;
20477: LD_VAR 0 2
20481: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20482: LD_INT 0
20484: PPUSH
20485: PPUSH
20486: PPUSH
20487: PPUSH
// if not hack in hackTanks then
20488: LD_VAR 0 1
20492: PUSH
20493: LD_EXP 66
20497: IN
20498: NOT
20499: IFFALSE 20503
// exit ;
20501: GO 20588
// index := GetElementIndex ( hackTanks , hack ) ;
20503: LD_ADDR_VAR 0 5
20507: PUSH
20508: LD_EXP 66
20512: PPUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL 27731 0 2
20522: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20523: LD_ADDR_VAR 0 4
20527: PUSH
20528: DOUBLE
20529: LD_INT 1
20531: DEC
20532: ST_TO_ADDR
20533: LD_EXP 67
20537: PUSH
20538: LD_VAR 0 5
20542: ARRAY
20543: PUSH
20544: FOR_TO
20545: IFFALSE 20586
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20547: LD_EXP 67
20551: PUSH
20552: LD_VAR 0 5
20556: ARRAY
20557: PUSH
20558: LD_VAR 0 4
20562: ARRAY
20563: PUSH
20564: LD_INT 1
20566: ARRAY
20567: PUSH
20568: LD_VAR 0 2
20572: EQUAL
20573: IFFALSE 20584
// KillUnit ( vehicle ) ;
20575: LD_VAR 0 2
20579: PPUSH
20580: CALL_OW 66
20584: GO 20544
20586: POP
20587: POP
// end ;
20588: LD_VAR 0 3
20592: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20593: LD_EXP 71
20597: NOT
20598: IFFALSE 20633
20600: GO 20602
20602: DISABLE
// begin initMiner := true ;
20603: LD_ADDR_EXP 71
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// minersList := [ ] ;
20611: LD_ADDR_EXP 72
20615: PUSH
20616: EMPTY
20617: ST_TO_ADDR
// minerMinesList := [ ] ;
20618: LD_ADDR_EXP 73
20622: PUSH
20623: EMPTY
20624: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20625: LD_ADDR_EXP 74
20629: PUSH
20630: LD_INT 5
20632: ST_TO_ADDR
// end ;
20633: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20634: LD_EXP 71
20638: PUSH
20639: LD_INT 34
20641: PUSH
20642: LD_INT 81
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PPUSH
20649: CALL_OW 69
20653: AND
20654: IFFALSE 21115
20656: GO 20658
20658: DISABLE
20659: LD_INT 0
20661: PPUSH
20662: PPUSH
20663: PPUSH
20664: PPUSH
// begin enable ;
20665: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20666: LD_ADDR_VAR 0 1
20670: PUSH
20671: LD_INT 34
20673: PUSH
20674: LD_INT 81
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 69
20685: PUSH
20686: FOR_IN
20687: IFFALSE 20759
// begin if not i in minersList then
20689: LD_VAR 0 1
20693: PUSH
20694: LD_EXP 72
20698: IN
20699: NOT
20700: IFFALSE 20757
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20702: LD_ADDR_EXP 72
20706: PUSH
20707: LD_EXP 72
20711: PPUSH
20712: LD_EXP 72
20716: PUSH
20717: LD_INT 1
20719: PLUS
20720: PPUSH
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 1
20730: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20731: LD_ADDR_EXP 73
20735: PUSH
20736: LD_EXP 73
20740: PPUSH
20741: LD_EXP 73
20745: PUSH
20746: LD_INT 1
20748: PLUS
20749: PPUSH
20750: EMPTY
20751: PPUSH
20752: CALL_OW 1
20756: ST_TO_ADDR
// end end ;
20757: GO 20686
20759: POP
20760: POP
// for i := minerMinesList downto 1 do
20761: LD_ADDR_VAR 0 1
20765: PUSH
20766: DOUBLE
20767: LD_EXP 73
20771: INC
20772: ST_TO_ADDR
20773: LD_INT 1
20775: PUSH
20776: FOR_DOWNTO
20777: IFFALSE 21113
// begin if IsLive ( minersList [ i ] ) then
20779: LD_EXP 72
20783: PUSH
20784: LD_VAR 0 1
20788: ARRAY
20789: PPUSH
20790: CALL_OW 300
20794: IFFALSE 20822
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20796: LD_EXP 72
20800: PUSH
20801: LD_VAR 0 1
20805: ARRAY
20806: PPUSH
20807: LD_EXP 73
20811: PUSH
20812: LD_VAR 0 1
20816: ARRAY
20817: PPUSH
20818: CALL_OW 505
// if not minerMinesList [ i ] then
20822: LD_EXP 73
20826: PUSH
20827: LD_VAR 0 1
20831: ARRAY
20832: NOT
20833: IFFALSE 20837
// continue ;
20835: GO 20776
// for j := minerMinesList [ i ] downto 1 do
20837: LD_ADDR_VAR 0 2
20841: PUSH
20842: DOUBLE
20843: LD_EXP 73
20847: PUSH
20848: LD_VAR 0 1
20852: ARRAY
20853: INC
20854: ST_TO_ADDR
20855: LD_INT 1
20857: PUSH
20858: FOR_DOWNTO
20859: IFFALSE 21109
// begin side := GetSide ( minersList [ i ] ) ;
20861: LD_ADDR_VAR 0 3
20865: PUSH
20866: LD_EXP 72
20870: PUSH
20871: LD_VAR 0 1
20875: ARRAY
20876: PPUSH
20877: CALL_OW 255
20881: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20882: LD_ADDR_VAR 0 4
20886: PUSH
20887: LD_EXP 73
20891: PUSH
20892: LD_VAR 0 1
20896: ARRAY
20897: PUSH
20898: LD_VAR 0 2
20902: ARRAY
20903: PUSH
20904: LD_INT 1
20906: ARRAY
20907: PPUSH
20908: LD_EXP 73
20912: PUSH
20913: LD_VAR 0 1
20917: ARRAY
20918: PUSH
20919: LD_VAR 0 2
20923: ARRAY
20924: PUSH
20925: LD_INT 2
20927: ARRAY
20928: PPUSH
20929: CALL_OW 428
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 4
20938: NOT
20939: IFFALSE 20943
// continue ;
20941: GO 20858
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20943: LD_VAR 0 4
20947: PUSH
20948: LD_INT 81
20950: PUSH
20951: LD_VAR 0 3
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PPUSH
20960: CALL_OW 69
20964: IN
20965: PUSH
20966: LD_EXP 73
20970: PUSH
20971: LD_VAR 0 1
20975: ARRAY
20976: PUSH
20977: LD_VAR 0 2
20981: ARRAY
20982: PUSH
20983: LD_INT 1
20985: ARRAY
20986: PPUSH
20987: LD_EXP 73
20991: PUSH
20992: LD_VAR 0 1
20996: ARRAY
20997: PUSH
20998: LD_VAR 0 2
21002: ARRAY
21003: PUSH
21004: LD_INT 2
21006: ARRAY
21007: PPUSH
21008: CALL_OW 458
21012: AND
21013: IFFALSE 21107
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21015: LD_EXP 73
21019: PUSH
21020: LD_VAR 0 1
21024: ARRAY
21025: PUSH
21026: LD_VAR 0 2
21030: ARRAY
21031: PUSH
21032: LD_INT 1
21034: ARRAY
21035: PPUSH
21036: LD_EXP 73
21040: PUSH
21041: LD_VAR 0 1
21045: ARRAY
21046: PUSH
21047: LD_VAR 0 2
21051: ARRAY
21052: PUSH
21053: LD_INT 2
21055: ARRAY
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21066: LD_ADDR_EXP 73
21070: PUSH
21071: LD_EXP 73
21075: PPUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: LD_EXP 73
21085: PUSH
21086: LD_VAR 0 1
21090: ARRAY
21091: PPUSH
21092: LD_VAR 0 2
21096: PPUSH
21097: CALL_OW 3
21101: PPUSH
21102: CALL_OW 1
21106: ST_TO_ADDR
// end ; end ;
21107: GO 20858
21109: POP
21110: POP
// end ;
21111: GO 20776
21113: POP
21114: POP
// end ;
21115: PPOPN 4
21117: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
// result := false ;
21122: LD_ADDR_VAR 0 4
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 264
21139: PUSH
21140: LD_INT 81
21142: EQUAL
21143: NOT
21144: IFFALSE 21148
// exit ;
21146: GO 21388
// index := GetElementIndex ( minersList , unit ) ;
21148: LD_ADDR_VAR 0 5
21152: PUSH
21153: LD_EXP 72
21157: PPUSH
21158: LD_VAR 0 1
21162: PPUSH
21163: CALL 27731 0 2
21167: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21168: LD_EXP 73
21172: PUSH
21173: LD_VAR 0 5
21177: ARRAY
21178: PUSH
21179: LD_EXP 74
21183: GREATEREQUAL
21184: IFFALSE 21188
// exit ;
21186: GO 21388
// ComMoveXY ( unit , x , y ) ;
21188: LD_VAR 0 1
21192: PPUSH
21193: LD_VAR 0 2
21197: PPUSH
21198: LD_VAR 0 3
21202: PPUSH
21203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21207: LD_INT 35
21209: PPUSH
21210: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21214: LD_VAR 0 1
21218: PPUSH
21219: LD_VAR 0 2
21223: PPUSH
21224: LD_VAR 0 3
21228: PPUSH
21229: CALL 59633 0 3
21233: NOT
21234: PUSH
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 314
21244: AND
21245: IFFALSE 21249
// exit ;
21247: GO 21388
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21249: LD_VAR 0 2
21253: PPUSH
21254: LD_VAR 0 3
21258: PPUSH
21259: CALL_OW 428
21263: PUSH
21264: LD_VAR 0 1
21268: EQUAL
21269: PUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 314
21279: NOT
21280: AND
21281: IFFALSE 21207
// PlaySoundXY ( x , y , PlantMine ) ;
21283: LD_VAR 0 2
21287: PPUSH
21288: LD_VAR 0 3
21292: PPUSH
21293: LD_STRING PlantMine
21295: PPUSH
21296: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 255
21319: PPUSH
21320: LD_INT 0
21322: PPUSH
21323: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21327: LD_ADDR_EXP 73
21331: PUSH
21332: LD_EXP 73
21336: PPUSH
21337: LD_VAR 0 5
21341: PUSH
21342: LD_EXP 73
21346: PUSH
21347: LD_VAR 0 5
21351: ARRAY
21352: PUSH
21353: LD_INT 1
21355: PLUS
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PPUSH
21361: LD_VAR 0 2
21365: PUSH
21366: LD_VAR 0 3
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL 27946 0 3
21379: ST_TO_ADDR
// result := true ;
21380: LD_ADDR_VAR 0 4
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// end ;
21388: LD_VAR 0 4
21392: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
21397: PPUSH
// if not unit in minersList then
21398: LD_VAR 0 1
21402: PUSH
21403: LD_EXP 72
21407: IN
21408: NOT
21409: IFFALSE 21413
// exit ;
21411: GO 21805
// index := GetElementIndex ( minersList , unit ) ;
21413: LD_ADDR_VAR 0 6
21417: PUSH
21418: LD_EXP 72
21422: PPUSH
21423: LD_VAR 0 1
21427: PPUSH
21428: CALL 27731 0 2
21432: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21433: LD_ADDR_VAR 0 5
21437: PUSH
21438: DOUBLE
21439: LD_EXP 73
21443: PUSH
21444: LD_VAR 0 6
21448: ARRAY
21449: INC
21450: ST_TO_ADDR
21451: LD_INT 1
21453: PUSH
21454: FOR_DOWNTO
21455: IFFALSE 21616
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21457: LD_EXP 73
21461: PUSH
21462: LD_VAR 0 6
21466: ARRAY
21467: PUSH
21468: LD_VAR 0 5
21472: ARRAY
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: PUSH
21478: LD_VAR 0 2
21482: EQUAL
21483: PUSH
21484: LD_EXP 73
21488: PUSH
21489: LD_VAR 0 6
21493: ARRAY
21494: PUSH
21495: LD_VAR 0 5
21499: ARRAY
21500: PUSH
21501: LD_INT 2
21503: ARRAY
21504: PUSH
21505: LD_VAR 0 3
21509: EQUAL
21510: AND
21511: IFFALSE 21614
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21513: LD_EXP 73
21517: PUSH
21518: LD_VAR 0 6
21522: ARRAY
21523: PUSH
21524: LD_VAR 0 5
21528: ARRAY
21529: PUSH
21530: LD_INT 1
21532: ARRAY
21533: PPUSH
21534: LD_EXP 73
21538: PUSH
21539: LD_VAR 0 6
21543: ARRAY
21544: PUSH
21545: LD_VAR 0 5
21549: ARRAY
21550: PUSH
21551: LD_INT 2
21553: ARRAY
21554: PPUSH
21555: LD_VAR 0 1
21559: PPUSH
21560: CALL_OW 255
21564: PPUSH
21565: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21569: LD_ADDR_EXP 73
21573: PUSH
21574: LD_EXP 73
21578: PPUSH
21579: LD_VAR 0 6
21583: PPUSH
21584: LD_EXP 73
21588: PUSH
21589: LD_VAR 0 6
21593: ARRAY
21594: PPUSH
21595: LD_VAR 0 5
21599: PPUSH
21600: CALL_OW 3
21604: PPUSH
21605: CALL_OW 1
21609: ST_TO_ADDR
// exit ;
21610: POP
21611: POP
21612: GO 21805
// end ; end ;
21614: GO 21454
21616: POP
21617: POP
// for i := minerMinesList [ index ] downto 1 do
21618: LD_ADDR_VAR 0 5
21622: PUSH
21623: DOUBLE
21624: LD_EXP 73
21628: PUSH
21629: LD_VAR 0 6
21633: ARRAY
21634: INC
21635: ST_TO_ADDR
21636: LD_INT 1
21638: PUSH
21639: FOR_DOWNTO
21640: IFFALSE 21803
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21642: LD_EXP 73
21646: PUSH
21647: LD_VAR 0 6
21651: ARRAY
21652: PUSH
21653: LD_VAR 0 5
21657: ARRAY
21658: PUSH
21659: LD_INT 1
21661: ARRAY
21662: PPUSH
21663: LD_EXP 73
21667: PUSH
21668: LD_VAR 0 6
21672: ARRAY
21673: PUSH
21674: LD_VAR 0 5
21678: ARRAY
21679: PUSH
21680: LD_INT 2
21682: ARRAY
21683: PPUSH
21684: LD_VAR 0 2
21688: PPUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL_OW 298
21698: PUSH
21699: LD_INT 6
21701: LESS
21702: IFFALSE 21801
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21704: LD_EXP 73
21708: PUSH
21709: LD_VAR 0 6
21713: ARRAY
21714: PUSH
21715: LD_VAR 0 5
21719: ARRAY
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PPUSH
21725: LD_EXP 73
21729: PUSH
21730: LD_VAR 0 6
21734: ARRAY
21735: PUSH
21736: LD_VAR 0 5
21740: ARRAY
21741: PUSH
21742: LD_INT 2
21744: ARRAY
21745: PPUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 255
21755: PPUSH
21756: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21760: LD_ADDR_EXP 73
21764: PUSH
21765: LD_EXP 73
21769: PPUSH
21770: LD_VAR 0 6
21774: PPUSH
21775: LD_EXP 73
21779: PUSH
21780: LD_VAR 0 6
21784: ARRAY
21785: PPUSH
21786: LD_VAR 0 5
21790: PPUSH
21791: CALL_OW 3
21795: PPUSH
21796: CALL_OW 1
21800: ST_TO_ADDR
// end ; end ;
21801: GO 21639
21803: POP
21804: POP
// end ;
21805: LD_VAR 0 4
21809: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21810: LD_INT 0
21812: PPUSH
21813: PPUSH
21814: PPUSH
21815: PPUSH
21816: PPUSH
21817: PPUSH
21818: PPUSH
21819: PPUSH
21820: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21821: LD_VAR 0 1
21825: PPUSH
21826: CALL_OW 264
21830: PUSH
21831: LD_INT 81
21833: EQUAL
21834: NOT
21835: PUSH
21836: LD_VAR 0 1
21840: PUSH
21841: LD_EXP 72
21845: IN
21846: NOT
21847: OR
21848: IFFALSE 21852
// exit ;
21850: GO 22174
// index := GetElementIndex ( minersList , unit ) ;
21852: LD_ADDR_VAR 0 6
21856: PUSH
21857: LD_EXP 72
21861: PPUSH
21862: LD_VAR 0 1
21866: PPUSH
21867: CALL 27731 0 2
21871: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21872: LD_ADDR_VAR 0 8
21876: PUSH
21877: LD_EXP 74
21881: PUSH
21882: LD_EXP 73
21886: PUSH
21887: LD_VAR 0 6
21891: ARRAY
21892: MINUS
21893: ST_TO_ADDR
// if not minesFreeAmount then
21894: LD_VAR 0 8
21898: NOT
21899: IFFALSE 21903
// exit ;
21901: GO 22174
// tmp := [ ] ;
21903: LD_ADDR_VAR 0 7
21907: PUSH
21908: EMPTY
21909: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21910: LD_ADDR_VAR 0 5
21914: PUSH
21915: DOUBLE
21916: LD_INT 1
21918: DEC
21919: ST_TO_ADDR
21920: LD_VAR 0 8
21924: PUSH
21925: FOR_TO
21926: IFFALSE 22121
// begin _d := rand ( 0 , 5 ) ;
21928: LD_ADDR_VAR 0 11
21932: PUSH
21933: LD_INT 0
21935: PPUSH
21936: LD_INT 5
21938: PPUSH
21939: CALL_OW 12
21943: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21944: LD_ADDR_VAR 0 12
21948: PUSH
21949: LD_INT 2
21951: PPUSH
21952: LD_INT 6
21954: PPUSH
21955: CALL_OW 12
21959: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21960: LD_ADDR_VAR 0 9
21964: PUSH
21965: LD_VAR 0 2
21969: PPUSH
21970: LD_VAR 0 11
21974: PPUSH
21975: LD_VAR 0 12
21979: PPUSH
21980: CALL_OW 272
21984: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21985: LD_ADDR_VAR 0 10
21989: PUSH
21990: LD_VAR 0 3
21994: PPUSH
21995: LD_VAR 0 11
21999: PPUSH
22000: LD_VAR 0 12
22004: PPUSH
22005: CALL_OW 273
22009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22010: LD_VAR 0 9
22014: PPUSH
22015: LD_VAR 0 10
22019: PPUSH
22020: CALL_OW 488
22024: PUSH
22025: LD_VAR 0 9
22029: PUSH
22030: LD_VAR 0 10
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_VAR 0 7
22043: IN
22044: NOT
22045: AND
22046: PUSH
22047: LD_VAR 0 9
22051: PPUSH
22052: LD_VAR 0 10
22056: PPUSH
22057: CALL_OW 458
22061: NOT
22062: AND
22063: IFFALSE 22105
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22065: LD_ADDR_VAR 0 7
22069: PUSH
22070: LD_VAR 0 7
22074: PPUSH
22075: LD_VAR 0 7
22079: PUSH
22080: LD_INT 1
22082: PLUS
22083: PPUSH
22084: LD_VAR 0 9
22088: PUSH
22089: LD_VAR 0 10
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 1
22102: ST_TO_ADDR
22103: GO 22119
// i := i - 1 ;
22105: LD_ADDR_VAR 0 5
22109: PUSH
22110: LD_VAR 0 5
22114: PUSH
22115: LD_INT 1
22117: MINUS
22118: ST_TO_ADDR
// end ;
22119: GO 21925
22121: POP
22122: POP
// for i in tmp do
22123: LD_ADDR_VAR 0 5
22127: PUSH
22128: LD_VAR 0 7
22132: PUSH
22133: FOR_IN
22134: IFFALSE 22172
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_VAR 0 5
22145: PUSH
22146: LD_INT 1
22148: ARRAY
22149: PPUSH
22150: LD_VAR 0 5
22154: PUSH
22155: LD_INT 2
22157: ARRAY
22158: PPUSH
22159: CALL 21118 0 3
22163: NOT
22164: IFFALSE 22170
// exit ;
22166: POP
22167: POP
22168: GO 22174
22170: GO 22133
22172: POP
22173: POP
// end ;
22174: LD_VAR 0 4
22178: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
22185: PPUSH
22186: PPUSH
22187: PPUSH
22188: PPUSH
22189: PPUSH
// if GetClass ( unit ) <> class_sniper then
22190: LD_VAR 0 1
22194: PPUSH
22195: CALL_OW 257
22199: PUSH
22200: LD_INT 5
22202: NONEQUAL
22203: IFFALSE 22207
// exit ;
22205: GO 22673
// dist := 8 ;
22207: LD_ADDR_VAR 0 5
22211: PUSH
22212: LD_INT 8
22214: ST_TO_ADDR
// viewRange := 12 ;
22215: LD_ADDR_VAR 0 8
22219: PUSH
22220: LD_INT 12
22222: ST_TO_ADDR
// side := GetSide ( unit ) ;
22223: LD_ADDR_VAR 0 6
22227: PUSH
22228: LD_VAR 0 1
22232: PPUSH
22233: CALL_OW 255
22237: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22238: LD_INT 61
22240: PPUSH
22241: LD_VAR 0 6
22245: PPUSH
22246: CALL_OW 321
22250: PUSH
22251: LD_INT 2
22253: EQUAL
22254: IFFALSE 22264
// viewRange := 16 ;
22256: LD_ADDR_VAR 0 8
22260: PUSH
22261: LD_INT 16
22263: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22264: LD_VAR 0 1
22268: PPUSH
22269: LD_VAR 0 2
22273: PPUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: CALL_OW 297
22283: PUSH
22284: LD_VAR 0 5
22288: GREATER
22289: IFFALSE 22368
// begin ComMoveXY ( unit , x , y ) ;
22291: LD_VAR 0 1
22295: PPUSH
22296: LD_VAR 0 2
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22310: LD_INT 35
22312: PPUSH
22313: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22317: LD_VAR 0 1
22321: PPUSH
22322: LD_VAR 0 2
22326: PPUSH
22327: LD_VAR 0 3
22331: PPUSH
22332: CALL 59633 0 3
22336: NOT
22337: IFFALSE 22341
// exit ;
22339: GO 22673
// until GetDistUnitXY ( unit , x , y ) < dist ;
22341: LD_VAR 0 1
22345: PPUSH
22346: LD_VAR 0 2
22350: PPUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: CALL_OW 297
22360: PUSH
22361: LD_VAR 0 5
22365: LESS
22366: IFFALSE 22310
// end ; ComTurnXY ( unit , x , y ) ;
22368: LD_VAR 0 1
22372: PPUSH
22373: LD_VAR 0 2
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: CALL_OW 118
// repeat if Multiplayer then
22387: LD_OWVAR 4
22391: IFFALSE 22402
// wait ( 35 ) else
22393: LD_INT 35
22395: PPUSH
22396: CALL_OW 67
22400: GO 22409
// wait ( 5 ) ;
22402: LD_INT 5
22404: PPUSH
22405: CALL_OW 67
// _d := GetDir ( unit ) ;
22409: LD_ADDR_VAR 0 11
22413: PUSH
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 254
22423: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
22424: LD_ADDR_VAR 0 7
22428: PUSH
22429: LD_VAR 0 1
22433: PPUSH
22434: CALL_OW 250
22438: PPUSH
22439: LD_VAR 0 1
22443: PPUSH
22444: CALL_OW 251
22448: PPUSH
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL 62241 0 4
22463: ST_TO_ADDR
// until dir = _d ;
22464: LD_VAR 0 7
22468: PUSH
22469: LD_VAR 0 11
22473: EQUAL
22474: IFFALSE 22387
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
22476: LD_ADDR_VAR 0 9
22480: PUSH
22481: LD_VAR 0 1
22485: PPUSH
22486: CALL_OW 250
22490: PPUSH
22491: LD_VAR 0 7
22495: PPUSH
22496: LD_VAR 0 5
22500: PPUSH
22501: CALL_OW 272
22505: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
22506: LD_ADDR_VAR 0 10
22510: PUSH
22511: LD_VAR 0 1
22515: PPUSH
22516: CALL_OW 251
22520: PPUSH
22521: LD_VAR 0 7
22525: PPUSH
22526: LD_VAR 0 5
22530: PPUSH
22531: CALL_OW 273
22535: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22536: LD_VAR 0 9
22540: PPUSH
22541: LD_VAR 0 10
22545: PPUSH
22546: CALL_OW 488
22550: NOT
22551: IFFALSE 22555
// exit ;
22553: GO 22673
// ComAnimCustom ( unit , 1 ) ;
22555: LD_VAR 0 1
22559: PPUSH
22560: LD_INT 1
22562: PPUSH
22563: CALL_OW 592
// p := 0 ;
22567: LD_ADDR_VAR 0 12
22571: PUSH
22572: LD_INT 0
22574: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22575: LD_VAR 0 9
22579: PPUSH
22580: LD_VAR 0 10
22584: PPUSH
22585: LD_VAR 0 6
22589: PPUSH
22590: LD_VAR 0 8
22594: PPUSH
22595: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
22599: LD_INT 35
22601: PPUSH
22602: CALL_OW 67
// p := Inc ( p ) ;
22606: LD_ADDR_VAR 0 12
22610: PUSH
22611: LD_VAR 0 12
22615: PPUSH
22616: CALL 62197 0 1
22620: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
22621: LD_VAR 0 12
22625: PUSH
22626: LD_INT 3
22628: EQUAL
22629: PUSH
22630: LD_VAR 0 1
22634: PPUSH
22635: CALL_OW 302
22639: NOT
22640: OR
22641: PUSH
22642: LD_VAR 0 1
22646: PPUSH
22647: CALL_OW 301
22651: OR
22652: IFFALSE 22599
// RemoveSeeing ( _x , _y , side ) ;
22654: LD_VAR 0 9
22658: PPUSH
22659: LD_VAR 0 10
22663: PPUSH
22664: LD_VAR 0 6
22668: PPUSH
22669: CALL_OW 331
// end ; end_of_file
22673: LD_VAR 0 4
22677: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
22678: LD_VAR 0 1
22682: PPUSH
22683: LD_VAR 0 2
22687: PPUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: LD_VAR 0 4
22697: PPUSH
22698: LD_VAR 0 5
22702: PPUSH
22703: LD_VAR 0 6
22707: PPUSH
22708: CALL 1539 0 6
// end ;
22712: PPOPN 6
22714: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
22715: LD_INT 0
22717: PPUSH
// begin if not units then
22718: LD_VAR 0 1
22722: NOT
22723: IFFALSE 22727
// exit ;
22725: GO 22727
// end ;
22727: PPOPN 7
22729: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
22730: CALL 1426 0 0
// end ; end_of_file
22734: PPOPN 1
22736: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22737: LD_VAR 0 1
22741: PUSH
22742: LD_INT 200
22744: DOUBLE
22745: GREATEREQUAL
22746: IFFALSE 22754
22748: LD_INT 299
22750: DOUBLE
22751: LESSEQUAL
22752: IFTRUE 22756
22754: GO 22788
22756: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22757: LD_VAR 0 1
22761: PPUSH
22762: LD_VAR 0 2
22766: PPUSH
22767: LD_VAR 0 3
22771: PPUSH
22772: LD_VAR 0 4
22776: PPUSH
22777: LD_VAR 0 5
22781: PPUSH
22782: CALL 17979 0 5
22786: GO 22865
22788: LD_INT 300
22790: DOUBLE
22791: GREATEREQUAL
22792: IFFALSE 22800
22794: LD_INT 399
22796: DOUBLE
22797: LESSEQUAL
22798: IFTRUE 22802
22800: GO 22864
22802: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22803: LD_VAR 0 1
22807: PPUSH
22808: LD_VAR 0 2
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_VAR 0 4
22822: PPUSH
22823: LD_VAR 0 5
22827: PPUSH
22828: LD_VAR 0 6
22832: PPUSH
22833: LD_VAR 0 7
22837: PPUSH
22838: LD_VAR 0 8
22842: PPUSH
22843: LD_VAR 0 9
22847: PPUSH
22848: LD_VAR 0 10
22852: PPUSH
22853: LD_VAR 0 11
22857: PPUSH
22858: CALL 13887 0 11
22862: GO 22865
22864: POP
// end ;
22865: PPOPN 11
22867: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22868: LD_VAR 0 1
22872: PPUSH
22873: LD_VAR 0 2
22877: PPUSH
22878: LD_VAR 0 3
22882: PPUSH
22883: LD_VAR 0 4
22887: PPUSH
22888: LD_VAR 0 5
22892: PPUSH
22893: CALL 17364 0 5
// end ; end_of_file
22897: PPOPN 5
22899: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22900: LD_INT 0
22902: PPUSH
22903: PPUSH
// if exist_mode then
22904: LD_VAR 0 2
22908: IFFALSE 22954
// begin unit := CreateCharacter ( prefix & ident ) ;
22910: LD_ADDR_VAR 0 5
22914: PUSH
22915: LD_VAR 0 3
22919: PUSH
22920: LD_VAR 0 1
22924: STR
22925: PPUSH
22926: CALL_OW 34
22930: ST_TO_ADDR
// if unit then
22931: LD_VAR 0 5
22935: IFFALSE 22952
// DeleteCharacters ( prefix & ident ) ;
22937: LD_VAR 0 3
22941: PUSH
22942: LD_VAR 0 1
22946: STR
22947: PPUSH
22948: CALL_OW 40
// end else
22952: GO 22969
// unit := NewCharacter ( ident ) ;
22954: LD_ADDR_VAR 0 5
22958: PUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 25
22968: ST_TO_ADDR
// result := unit ;
22969: LD_ADDR_VAR 0 4
22973: PUSH
22974: LD_VAR 0 5
22978: ST_TO_ADDR
// end ;
22979: LD_VAR 0 4
22983: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
22984: LD_INT 0
22986: PPUSH
22987: PPUSH
// if exist_mode then
22988: LD_VAR 0 2
22992: IFFALSE 23017
// unit := CreateCharacter ( prefix & ident ) else
22994: LD_ADDR_VAR 0 5
22998: PUSH
22999: LD_VAR 0 3
23003: PUSH
23004: LD_VAR 0 1
23008: STR
23009: PPUSH
23010: CALL_OW 34
23014: ST_TO_ADDR
23015: GO 23032
// unit := NewCharacter ( ident ) ;
23017: LD_ADDR_VAR 0 5
23021: PUSH
23022: LD_VAR 0 1
23026: PPUSH
23027: CALL_OW 25
23031: ST_TO_ADDR
// result := unit ;
23032: LD_ADDR_VAR 0 4
23036: PUSH
23037: LD_VAR 0 5
23041: ST_TO_ADDR
// end ;
23042: LD_VAR 0 4
23046: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23047: LD_INT 0
23049: PPUSH
23050: PPUSH
// if not side or not nation then
23051: LD_VAR 0 1
23055: NOT
23056: PUSH
23057: LD_VAR 0 2
23061: NOT
23062: OR
23063: IFFALSE 23067
// exit ;
23065: GO 23835
// case nation of nation_american :
23067: LD_VAR 0 2
23071: PUSH
23072: LD_INT 1
23074: DOUBLE
23075: EQUAL
23076: IFTRUE 23080
23078: GO 23294
23080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23081: LD_ADDR_VAR 0 4
23085: PUSH
23086: LD_INT 35
23088: PUSH
23089: LD_INT 45
23091: PUSH
23092: LD_INT 46
23094: PUSH
23095: LD_INT 47
23097: PUSH
23098: LD_INT 82
23100: PUSH
23101: LD_INT 83
23103: PUSH
23104: LD_INT 84
23106: PUSH
23107: LD_INT 85
23109: PUSH
23110: LD_INT 86
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 6
23121: PUSH
23122: LD_INT 15
23124: PUSH
23125: LD_INT 16
23127: PUSH
23128: LD_INT 7
23130: PUSH
23131: LD_INT 12
23133: PUSH
23134: LD_INT 13
23136: PUSH
23137: LD_INT 10
23139: PUSH
23140: LD_INT 14
23142: PUSH
23143: LD_INT 20
23145: PUSH
23146: LD_INT 21
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 25
23154: PUSH
23155: LD_INT 32
23157: PUSH
23158: LD_INT 27
23160: PUSH
23161: LD_INT 36
23163: PUSH
23164: LD_INT 69
23166: PUSH
23167: LD_INT 39
23169: PUSH
23170: LD_INT 34
23172: PUSH
23173: LD_INT 40
23175: PUSH
23176: LD_INT 48
23178: PUSH
23179: LD_INT 49
23181: PUSH
23182: LD_INT 50
23184: PUSH
23185: LD_INT 51
23187: PUSH
23188: LD_INT 52
23190: PUSH
23191: LD_INT 53
23193: PUSH
23194: LD_INT 54
23196: PUSH
23197: LD_INT 55
23199: PUSH
23200: LD_INT 56
23202: PUSH
23203: LD_INT 57
23205: PUSH
23206: LD_INT 58
23208: PUSH
23209: LD_INT 59
23211: PUSH
23212: LD_INT 60
23214: PUSH
23215: LD_INT 61
23217: PUSH
23218: LD_INT 62
23220: PUSH
23221: LD_INT 80
23223: PUSH
23224: LD_INT 82
23226: PUSH
23227: LD_INT 83
23229: PUSH
23230: LD_INT 84
23232: PUSH
23233: LD_INT 85
23235: PUSH
23236: LD_INT 86
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: ST_TO_ADDR
23292: GO 23759
23294: LD_INT 2
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23528
23302: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23303: LD_ADDR_VAR 0 4
23307: PUSH
23308: LD_INT 35
23310: PUSH
23311: LD_INT 45
23313: PUSH
23314: LD_INT 46
23316: PUSH
23317: LD_INT 47
23319: PUSH
23320: LD_INT 82
23322: PUSH
23323: LD_INT 83
23325: PUSH
23326: LD_INT 84
23328: PUSH
23329: LD_INT 85
23331: PUSH
23332: LD_INT 87
23334: PUSH
23335: LD_INT 70
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 11
23343: PUSH
23344: LD_INT 3
23346: PUSH
23347: LD_INT 4
23349: PUSH
23350: LD_INT 5
23352: PUSH
23353: LD_INT 6
23355: PUSH
23356: LD_INT 15
23358: PUSH
23359: LD_INT 18
23361: PUSH
23362: LD_INT 7
23364: PUSH
23365: LD_INT 17
23367: PUSH
23368: LD_INT 8
23370: PUSH
23371: LD_INT 20
23373: PUSH
23374: LD_INT 21
23376: PUSH
23377: LD_INT 22
23379: PUSH
23380: LD_INT 72
23382: PUSH
23383: LD_INT 26
23385: PUSH
23386: LD_INT 69
23388: PUSH
23389: LD_INT 39
23391: PUSH
23392: LD_INT 40
23394: PUSH
23395: LD_INT 41
23397: PUSH
23398: LD_INT 42
23400: PUSH
23401: LD_INT 43
23403: PUSH
23404: LD_INT 48
23406: PUSH
23407: LD_INT 49
23409: PUSH
23410: LD_INT 50
23412: PUSH
23413: LD_INT 51
23415: PUSH
23416: LD_INT 52
23418: PUSH
23419: LD_INT 53
23421: PUSH
23422: LD_INT 54
23424: PUSH
23425: LD_INT 55
23427: PUSH
23428: LD_INT 56
23430: PUSH
23431: LD_INT 60
23433: PUSH
23434: LD_INT 61
23436: PUSH
23437: LD_INT 62
23439: PUSH
23440: LD_INT 66
23442: PUSH
23443: LD_INT 67
23445: PUSH
23446: LD_INT 68
23448: PUSH
23449: LD_INT 81
23451: PUSH
23452: LD_INT 82
23454: PUSH
23455: LD_INT 83
23457: PUSH
23458: LD_INT 84
23460: PUSH
23461: LD_INT 85
23463: PUSH
23464: LD_INT 87
23466: PUSH
23467: LD_INT 88
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: ST_TO_ADDR
23526: GO 23759
23528: LD_INT 3
23530: DOUBLE
23531: EQUAL
23532: IFTRUE 23536
23534: GO 23758
23536: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23537: LD_ADDR_VAR 0 4
23541: PUSH
23542: LD_INT 46
23544: PUSH
23545: LD_INT 47
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 82
23556: PUSH
23557: LD_INT 83
23559: PUSH
23560: LD_INT 84
23562: PUSH
23563: LD_INT 85
23565: PUSH
23566: LD_INT 86
23568: PUSH
23569: LD_INT 11
23571: PUSH
23572: LD_INT 9
23574: PUSH
23575: LD_INT 20
23577: PUSH
23578: LD_INT 19
23580: PUSH
23581: LD_INT 21
23583: PUSH
23584: LD_INT 24
23586: PUSH
23587: LD_INT 22
23589: PUSH
23590: LD_INT 25
23592: PUSH
23593: LD_INT 28
23595: PUSH
23596: LD_INT 29
23598: PUSH
23599: LD_INT 30
23601: PUSH
23602: LD_INT 31
23604: PUSH
23605: LD_INT 37
23607: PUSH
23608: LD_INT 38
23610: PUSH
23611: LD_INT 32
23613: PUSH
23614: LD_INT 27
23616: PUSH
23617: LD_INT 33
23619: PUSH
23620: LD_INT 69
23622: PUSH
23623: LD_INT 39
23625: PUSH
23626: LD_INT 34
23628: PUSH
23629: LD_INT 40
23631: PUSH
23632: LD_INT 71
23634: PUSH
23635: LD_INT 23
23637: PUSH
23638: LD_INT 44
23640: PUSH
23641: LD_INT 48
23643: PUSH
23644: LD_INT 49
23646: PUSH
23647: LD_INT 50
23649: PUSH
23650: LD_INT 51
23652: PUSH
23653: LD_INT 52
23655: PUSH
23656: LD_INT 53
23658: PUSH
23659: LD_INT 54
23661: PUSH
23662: LD_INT 55
23664: PUSH
23665: LD_INT 56
23667: PUSH
23668: LD_INT 57
23670: PUSH
23671: LD_INT 58
23673: PUSH
23674: LD_INT 59
23676: PUSH
23677: LD_INT 63
23679: PUSH
23680: LD_INT 64
23682: PUSH
23683: LD_INT 65
23685: PUSH
23686: LD_INT 82
23688: PUSH
23689: LD_INT 83
23691: PUSH
23692: LD_INT 84
23694: PUSH
23695: LD_INT 85
23697: PUSH
23698: LD_INT 86
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: ST_TO_ADDR
23756: GO 23759
23758: POP
// if state > - 1 and state < 3 then
23759: LD_VAR 0 3
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: GREATER
23768: PUSH
23769: LD_VAR 0 3
23773: PUSH
23774: LD_INT 3
23776: LESS
23777: AND
23778: IFFALSE 23835
// for i in result do
23780: LD_ADDR_VAR 0 5
23784: PUSH
23785: LD_VAR 0 4
23789: PUSH
23790: FOR_IN
23791: IFFALSE 23833
// if GetTech ( i , side ) <> state then
23793: LD_VAR 0 5
23797: PPUSH
23798: LD_VAR 0 1
23802: PPUSH
23803: CALL_OW 321
23807: PUSH
23808: LD_VAR 0 3
23812: NONEQUAL
23813: IFFALSE 23831
// result := result diff i ;
23815: LD_ADDR_VAR 0 4
23819: PUSH
23820: LD_VAR 0 4
23824: PUSH
23825: LD_VAR 0 5
23829: DIFF
23830: ST_TO_ADDR
23831: GO 23790
23833: POP
23834: POP
// end ;
23835: LD_VAR 0 4
23839: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
23844: PPUSH
// result := true ;
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_INT 1
23852: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23853: LD_ADDR_VAR 0 5
23857: PUSH
23858: LD_VAR 0 2
23862: PPUSH
23863: CALL_OW 480
23867: ST_TO_ADDR
// if not tmp then
23868: LD_VAR 0 5
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23926
// for i in tmp do
23877: LD_ADDR_VAR 0 4
23881: PUSH
23882: LD_VAR 0 5
23886: PUSH
23887: FOR_IN
23888: IFFALSE 23924
// if GetTech ( i , side ) <> state_researched then
23890: LD_VAR 0 4
23894: PPUSH
23895: LD_VAR 0 1
23899: PPUSH
23900: CALL_OW 321
23904: PUSH
23905: LD_INT 2
23907: NONEQUAL
23908: IFFALSE 23922
// begin result := false ;
23910: LD_ADDR_VAR 0 3
23914: PUSH
23915: LD_INT 0
23917: ST_TO_ADDR
// exit ;
23918: POP
23919: POP
23920: GO 23926
// end ;
23922: GO 23887
23924: POP
23925: POP
// end ;
23926: LD_VAR 0 3
23930: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23931: LD_INT 0
23933: PPUSH
23934: PPUSH
23935: PPUSH
23936: PPUSH
23937: PPUSH
23938: PPUSH
23939: PPUSH
23940: PPUSH
23941: PPUSH
23942: PPUSH
23943: PPUSH
23944: PPUSH
23945: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23946: LD_VAR 0 1
23950: NOT
23951: PUSH
23952: LD_VAR 0 1
23956: PPUSH
23957: CALL_OW 257
23961: PUSH
23962: LD_INT 9
23964: NONEQUAL
23965: OR
23966: IFFALSE 23970
// exit ;
23968: GO 24543
// side := GetSide ( unit ) ;
23970: LD_ADDR_VAR 0 9
23974: PUSH
23975: LD_VAR 0 1
23979: PPUSH
23980: CALL_OW 255
23984: ST_TO_ADDR
// tech_space := tech_spacanom ;
23985: LD_ADDR_VAR 0 12
23989: PUSH
23990: LD_INT 29
23992: ST_TO_ADDR
// tech_time := tech_taurad ;
23993: LD_ADDR_VAR 0 13
23997: PUSH
23998: LD_INT 28
24000: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24001: LD_ADDR_VAR 0 11
24005: PUSH
24006: LD_VAR 0 1
24010: PPUSH
24011: CALL_OW 310
24015: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24016: LD_VAR 0 11
24020: PPUSH
24021: CALL_OW 247
24025: PUSH
24026: LD_INT 2
24028: EQUAL
24029: IFFALSE 24033
// exit ;
24031: GO 24543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24033: LD_ADDR_VAR 0 8
24037: PUSH
24038: LD_INT 81
24040: PUSH
24041: LD_VAR 0 9
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 21
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PPUSH
24071: CALL_OW 69
24075: ST_TO_ADDR
// if not tmp then
24076: LD_VAR 0 8
24080: NOT
24081: IFFALSE 24085
// exit ;
24083: GO 24543
// if in_unit then
24085: LD_VAR 0 11
24089: IFFALSE 24113
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24091: LD_ADDR_VAR 0 10
24095: PUSH
24096: LD_VAR 0 8
24100: PPUSH
24101: LD_VAR 0 11
24105: PPUSH
24106: CALL_OW 74
24110: ST_TO_ADDR
24111: GO 24133
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24113: LD_ADDR_VAR 0 10
24117: PUSH
24118: LD_VAR 0 8
24122: PPUSH
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 74
24132: ST_TO_ADDR
// if not enemy then
24133: LD_VAR 0 10
24137: NOT
24138: IFFALSE 24142
// exit ;
24140: GO 24543
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24142: LD_VAR 0 11
24146: PUSH
24147: LD_VAR 0 11
24151: PPUSH
24152: LD_VAR 0 10
24156: PPUSH
24157: CALL_OW 296
24161: PUSH
24162: LD_INT 13
24164: GREATER
24165: AND
24166: PUSH
24167: LD_VAR 0 1
24171: PPUSH
24172: LD_VAR 0 10
24176: PPUSH
24177: CALL_OW 296
24181: PUSH
24182: LD_INT 12
24184: GREATER
24185: OR
24186: IFFALSE 24190
// exit ;
24188: GO 24543
// missile := [ 1 ] ;
24190: LD_ADDR_VAR 0 14
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: EMPTY
24199: LIST
24200: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24201: LD_VAR 0 9
24205: PPUSH
24206: LD_VAR 0 12
24210: PPUSH
24211: CALL_OW 325
24215: IFFALSE 24244
// missile := Replace ( missile , missile + 1 , 2 ) ;
24217: LD_ADDR_VAR 0 14
24221: PUSH
24222: LD_VAR 0 14
24226: PPUSH
24227: LD_VAR 0 14
24231: PUSH
24232: LD_INT 1
24234: PLUS
24235: PPUSH
24236: LD_INT 2
24238: PPUSH
24239: CALL_OW 1
24243: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24244: LD_VAR 0 9
24248: PPUSH
24249: LD_VAR 0 13
24253: PPUSH
24254: CALL_OW 325
24258: PUSH
24259: LD_VAR 0 10
24263: PPUSH
24264: CALL_OW 255
24268: PPUSH
24269: LD_VAR 0 13
24273: PPUSH
24274: CALL_OW 325
24278: NOT
24279: AND
24280: IFFALSE 24309
// missile := Replace ( missile , missile + 1 , 3 ) ;
24282: LD_ADDR_VAR 0 14
24286: PUSH
24287: LD_VAR 0 14
24291: PPUSH
24292: LD_VAR 0 14
24296: PUSH
24297: LD_INT 1
24299: PLUS
24300: PPUSH
24301: LD_INT 3
24303: PPUSH
24304: CALL_OW 1
24308: ST_TO_ADDR
// if missile < 2 then
24309: LD_VAR 0 14
24313: PUSH
24314: LD_INT 2
24316: LESS
24317: IFFALSE 24321
// exit ;
24319: GO 24543
// x := GetX ( enemy ) ;
24321: LD_ADDR_VAR 0 4
24325: PUSH
24326: LD_VAR 0 10
24330: PPUSH
24331: CALL_OW 250
24335: ST_TO_ADDR
// y := GetY ( enemy ) ;
24336: LD_ADDR_VAR 0 5
24340: PUSH
24341: LD_VAR 0 10
24345: PPUSH
24346: CALL_OW 251
24350: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24351: LD_ADDR_VAR 0 6
24355: PUSH
24356: LD_VAR 0 4
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: CALL_OW 12
24372: PLUS
24373: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24374: LD_ADDR_VAR 0 7
24378: PUSH
24379: LD_VAR 0 5
24383: PUSH
24384: LD_INT 1
24386: NEG
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 12
24395: PLUS
24396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24397: LD_VAR 0 6
24401: PPUSH
24402: LD_VAR 0 7
24406: PPUSH
24407: CALL_OW 488
24411: NOT
24412: IFFALSE 24434
// begin _x := x ;
24414: LD_ADDR_VAR 0 6
24418: PUSH
24419: LD_VAR 0 4
24423: ST_TO_ADDR
// _y := y ;
24424: LD_ADDR_VAR 0 7
24428: PUSH
24429: LD_VAR 0 5
24433: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24434: LD_ADDR_VAR 0 3
24438: PUSH
24439: LD_INT 1
24441: PPUSH
24442: LD_VAR 0 14
24446: PPUSH
24447: CALL_OW 12
24451: ST_TO_ADDR
// case i of 1 :
24452: LD_VAR 0 3
24456: PUSH
24457: LD_INT 1
24459: DOUBLE
24460: EQUAL
24461: IFTRUE 24465
24463: GO 24482
24465: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24466: LD_VAR 0 1
24470: PPUSH
24471: LD_VAR 0 10
24475: PPUSH
24476: CALL_OW 115
24480: GO 24543
24482: LD_INT 2
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24512
24490: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_VAR 0 6
24500: PPUSH
24501: LD_VAR 0 7
24505: PPUSH
24506: CALL_OW 153
24510: GO 24543
24512: LD_INT 3
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24542
24520: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24521: LD_VAR 0 1
24525: PPUSH
24526: LD_VAR 0 6
24530: PPUSH
24531: LD_VAR 0 7
24535: PPUSH
24536: CALL_OW 154
24540: GO 24543
24542: POP
// end ;
24543: LD_VAR 0 2
24547: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24548: LD_INT 0
24550: PPUSH
24551: PPUSH
24552: PPUSH
24553: PPUSH
24554: PPUSH
24555: PPUSH
// if not unit or not building then
24556: LD_VAR 0 1
24560: NOT
24561: PUSH
24562: LD_VAR 0 2
24566: NOT
24567: OR
24568: IFFALSE 24572
// exit ;
24570: GO 24730
// x := GetX ( building ) ;
24572: LD_ADDR_VAR 0 5
24576: PUSH
24577: LD_VAR 0 2
24581: PPUSH
24582: CALL_OW 250
24586: ST_TO_ADDR
// y := GetY ( building ) ;
24587: LD_ADDR_VAR 0 6
24591: PUSH
24592: LD_VAR 0 2
24596: PPUSH
24597: CALL_OW 251
24601: ST_TO_ADDR
// for i := 0 to 5 do
24602: LD_ADDR_VAR 0 4
24606: PUSH
24607: DOUBLE
24608: LD_INT 0
24610: DEC
24611: ST_TO_ADDR
24612: LD_INT 5
24614: PUSH
24615: FOR_TO
24616: IFFALSE 24728
// begin _x := ShiftX ( x , i , 3 ) ;
24618: LD_ADDR_VAR 0 7
24622: PUSH
24623: LD_VAR 0 5
24627: PPUSH
24628: LD_VAR 0 4
24632: PPUSH
24633: LD_INT 3
24635: PPUSH
24636: CALL_OW 272
24640: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24641: LD_ADDR_VAR 0 8
24645: PUSH
24646: LD_VAR 0 6
24650: PPUSH
24651: LD_VAR 0 4
24655: PPUSH
24656: LD_INT 3
24658: PPUSH
24659: CALL_OW 273
24663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24664: LD_VAR 0 7
24668: PPUSH
24669: LD_VAR 0 8
24673: PPUSH
24674: CALL_OW 488
24678: NOT
24679: IFFALSE 24683
// continue ;
24681: GO 24615
// if HexInfo ( _x , _y ) = 0 then
24683: LD_VAR 0 7
24687: PPUSH
24688: LD_VAR 0 8
24692: PPUSH
24693: CALL_OW 428
24697: PUSH
24698: LD_INT 0
24700: EQUAL
24701: IFFALSE 24726
// begin ComMoveXY ( unit , _x , _y ) ;
24703: LD_VAR 0 1
24707: PPUSH
24708: LD_VAR 0 7
24712: PPUSH
24713: LD_VAR 0 8
24717: PPUSH
24718: CALL_OW 111
// exit ;
24722: POP
24723: POP
24724: GO 24730
// end ; end ;
24726: GO 24615
24728: POP
24729: POP
// end ;
24730: LD_VAR 0 3
24734: RET
// export function ScanBase ( side , base_area ) ; begin
24735: LD_INT 0
24737: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24738: LD_ADDR_VAR 0 3
24742: PUSH
24743: LD_VAR 0 2
24747: PPUSH
24748: LD_INT 81
24750: PUSH
24751: LD_VAR 0 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 70
24764: ST_TO_ADDR
// end ;
24765: LD_VAR 0 3
24769: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24770: LD_INT 0
24772: PPUSH
24773: PPUSH
24774: PPUSH
24775: PPUSH
// result := false ;
24776: LD_ADDR_VAR 0 2
24780: PUSH
24781: LD_INT 0
24783: ST_TO_ADDR
// side := GetSide ( unit ) ;
24784: LD_ADDR_VAR 0 3
24788: PUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL_OW 255
24798: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24799: LD_ADDR_VAR 0 4
24803: PUSH
24804: LD_VAR 0 1
24808: PPUSH
24809: CALL_OW 248
24813: ST_TO_ADDR
// case nat of 1 :
24814: LD_VAR 0 4
24818: PUSH
24819: LD_INT 1
24821: DOUBLE
24822: EQUAL
24823: IFTRUE 24827
24825: GO 24838
24827: POP
// tech := tech_lassight ; 2 :
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_INT 12
24835: ST_TO_ADDR
24836: GO 24877
24838: LD_INT 2
24840: DOUBLE
24841: EQUAL
24842: IFTRUE 24846
24844: GO 24857
24846: POP
// tech := tech_mortar ; 3 :
24847: LD_ADDR_VAR 0 5
24851: PUSH
24852: LD_INT 41
24854: ST_TO_ADDR
24855: GO 24877
24857: LD_INT 3
24859: DOUBLE
24860: EQUAL
24861: IFTRUE 24865
24863: GO 24876
24865: POP
// tech := tech_bazooka ; end ;
24866: LD_ADDR_VAR 0 5
24870: PUSH
24871: LD_INT 44
24873: ST_TO_ADDR
24874: GO 24877
24876: POP
// if Researched ( side , tech ) then
24877: LD_VAR 0 3
24881: PPUSH
24882: LD_VAR 0 5
24886: PPUSH
24887: CALL_OW 325
24891: IFFALSE 24918
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24893: LD_ADDR_VAR 0 2
24897: PUSH
24898: LD_INT 5
24900: PUSH
24901: LD_INT 8
24903: PUSH
24904: LD_INT 9
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: LD_VAR 0 4
24916: ARRAY
24917: ST_TO_ADDR
// end ;
24918: LD_VAR 0 2
24922: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24923: LD_INT 0
24925: PPUSH
24926: PPUSH
24927: PPUSH
// if not mines then
24928: LD_VAR 0 2
24932: NOT
24933: IFFALSE 24937
// exit ;
24935: GO 25081
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24937: LD_ADDR_VAR 0 5
24941: PUSH
24942: LD_INT 81
24944: PUSH
24945: LD_VAR 0 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 3
24956: PUSH
24957: LD_INT 21
24959: PUSH
24960: LD_INT 3
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PPUSH
24975: CALL_OW 69
24979: ST_TO_ADDR
// for i in mines do
24980: LD_ADDR_VAR 0 4
24984: PUSH
24985: LD_VAR 0 2
24989: PUSH
24990: FOR_IN
24991: IFFALSE 25079
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24993: LD_VAR 0 4
24997: PUSH
24998: LD_INT 1
25000: ARRAY
25001: PPUSH
25002: LD_VAR 0 4
25006: PUSH
25007: LD_INT 2
25009: ARRAY
25010: PPUSH
25011: CALL_OW 458
25015: NOT
25016: IFFALSE 25020
// continue ;
25018: GO 24990
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25020: LD_VAR 0 4
25024: PUSH
25025: LD_INT 1
25027: ARRAY
25028: PPUSH
25029: LD_VAR 0 4
25033: PUSH
25034: LD_INT 2
25036: ARRAY
25037: PPUSH
25038: CALL_OW 428
25042: PUSH
25043: LD_VAR 0 5
25047: IN
25048: IFFALSE 25077
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25050: LD_VAR 0 4
25054: PUSH
25055: LD_INT 1
25057: ARRAY
25058: PPUSH
25059: LD_VAR 0 4
25063: PUSH
25064: LD_INT 2
25066: ARRAY
25067: PPUSH
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 456
// end ;
25077: GO 24990
25079: POP
25080: POP
// end ;
25081: LD_VAR 0 3
25085: RET
// export function Count ( array ) ; begin
25086: LD_INT 0
25088: PPUSH
// result := array + 0 ;
25089: LD_ADDR_VAR 0 2
25093: PUSH
25094: LD_VAR 0 1
25098: PUSH
25099: LD_INT 0
25101: PLUS
25102: ST_TO_ADDR
// end ;
25103: LD_VAR 0 2
25107: RET
// export function IsEmpty ( building ) ; begin
25108: LD_INT 0
25110: PPUSH
// if not building then
25111: LD_VAR 0 1
25115: NOT
25116: IFFALSE 25120
// exit ;
25118: GO 25163
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_VAR 0 1
25129: PUSH
25130: LD_INT 22
25132: PUSH
25133: LD_VAR 0 1
25137: PPUSH
25138: CALL_OW 255
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 58
25149: PUSH
25150: EMPTY
25151: LIST
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PPUSH
25157: CALL_OW 69
25161: IN
25162: ST_TO_ADDR
// end ;
25163: LD_VAR 0 2
25167: RET
// export function IsNotFull ( building ) ; var places ; begin
25168: LD_INT 0
25170: PPUSH
25171: PPUSH
// if not building then
25172: LD_VAR 0 1
25176: NOT
25177: IFFALSE 25181
// exit ;
25179: GO 25209
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25181: LD_ADDR_VAR 0 2
25185: PUSH
25186: LD_VAR 0 1
25190: PPUSH
25191: LD_INT 3
25193: PUSH
25194: LD_INT 62
25196: PUSH
25197: EMPTY
25198: LIST
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PPUSH
25204: CALL_OW 72
25208: ST_TO_ADDR
// end ;
25209: LD_VAR 0 2
25213: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25214: LD_INT 0
25216: PPUSH
25217: PPUSH
25218: PPUSH
25219: PPUSH
// tmp := [ ] ;
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: EMPTY
25226: ST_TO_ADDR
// list := [ ] ;
25227: LD_ADDR_VAR 0 5
25231: PUSH
25232: EMPTY
25233: ST_TO_ADDR
// for i = 16 to 25 do
25234: LD_ADDR_VAR 0 4
25238: PUSH
25239: DOUBLE
25240: LD_INT 16
25242: DEC
25243: ST_TO_ADDR
25244: LD_INT 25
25246: PUSH
25247: FOR_TO
25248: IFFALSE 25321
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25250: LD_ADDR_VAR 0 3
25254: PUSH
25255: LD_VAR 0 3
25259: PUSH
25260: LD_INT 22
25262: PUSH
25263: LD_VAR 0 1
25267: PPUSH
25268: CALL_OW 255
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 91
25279: PUSH
25280: LD_VAR 0 1
25284: PUSH
25285: LD_INT 6
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 30
25295: PUSH
25296: LD_VAR 0 4
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: PPUSH
25313: CALL_OW 69
25317: ADD
25318: ST_TO_ADDR
25319: GO 25247
25321: POP
25322: POP
// for i = 1 to tmp do
25323: LD_ADDR_VAR 0 4
25327: PUSH
25328: DOUBLE
25329: LD_INT 1
25331: DEC
25332: ST_TO_ADDR
25333: LD_VAR 0 3
25337: PUSH
25338: FOR_TO
25339: IFFALSE 25427
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25341: LD_ADDR_VAR 0 5
25345: PUSH
25346: LD_VAR 0 5
25350: PUSH
25351: LD_VAR 0 3
25355: PUSH
25356: LD_VAR 0 4
25360: ARRAY
25361: PPUSH
25362: CALL_OW 266
25366: PUSH
25367: LD_VAR 0 3
25371: PUSH
25372: LD_VAR 0 4
25376: ARRAY
25377: PPUSH
25378: CALL_OW 250
25382: PUSH
25383: LD_VAR 0 3
25387: PUSH
25388: LD_VAR 0 4
25392: ARRAY
25393: PPUSH
25394: CALL_OW 251
25398: PUSH
25399: LD_VAR 0 3
25403: PUSH
25404: LD_VAR 0 4
25408: ARRAY
25409: PPUSH
25410: CALL_OW 254
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: PUSH
25421: EMPTY
25422: LIST
25423: ADD
25424: ST_TO_ADDR
25425: GO 25338
25427: POP
25428: POP
// result := list ;
25429: LD_ADDR_VAR 0 2
25433: PUSH
25434: LD_VAR 0 5
25438: ST_TO_ADDR
// end ;
25439: LD_VAR 0 2
25443: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25444: LD_INT 0
25446: PPUSH
25447: PPUSH
25448: PPUSH
25449: PPUSH
25450: PPUSH
25451: PPUSH
25452: PPUSH
// if not factory then
25453: LD_VAR 0 1
25457: NOT
25458: IFFALSE 25462
// exit ;
25460: GO 26055
// if control = control_apeman then
25462: LD_VAR 0 4
25466: PUSH
25467: LD_INT 5
25469: EQUAL
25470: IFFALSE 25579
// begin tmp := UnitsInside ( factory ) ;
25472: LD_ADDR_VAR 0 8
25476: PUSH
25477: LD_VAR 0 1
25481: PPUSH
25482: CALL_OW 313
25486: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25487: LD_VAR 0 8
25491: PPUSH
25492: LD_INT 25
25494: PUSH
25495: LD_INT 12
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PPUSH
25502: CALL_OW 72
25506: NOT
25507: IFFALSE 25517
// control := control_manual ;
25509: LD_ADDR_VAR 0 4
25513: PUSH
25514: LD_INT 1
25516: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25517: LD_ADDR_VAR 0 8
25521: PUSH
25522: LD_VAR 0 1
25526: PPUSH
25527: CALL 25214 0 1
25531: ST_TO_ADDR
// if tmp then
25532: LD_VAR 0 8
25536: IFFALSE 25579
// begin for i in tmp do
25538: LD_ADDR_VAR 0 7
25542: PUSH
25543: LD_VAR 0 8
25547: PUSH
25548: FOR_IN
25549: IFFALSE 25577
// if i [ 1 ] = b_ext_radio then
25551: LD_VAR 0 7
25555: PUSH
25556: LD_INT 1
25558: ARRAY
25559: PUSH
25560: LD_INT 22
25562: EQUAL
25563: IFFALSE 25575
// begin control := control_remote ;
25565: LD_ADDR_VAR 0 4
25569: PUSH
25570: LD_INT 2
25572: ST_TO_ADDR
// break ;
25573: GO 25577
// end ;
25575: GO 25548
25577: POP
25578: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25579: LD_VAR 0 1
25583: PPUSH
25584: LD_VAR 0 2
25588: PPUSH
25589: LD_VAR 0 3
25593: PPUSH
25594: LD_VAR 0 4
25598: PPUSH
25599: LD_VAR 0 5
25603: PPUSH
25604: CALL_OW 448
25608: IFFALSE 25643
// begin result := [ chassis , engine , control , weapon ] ;
25610: LD_ADDR_VAR 0 6
25614: PUSH
25615: LD_VAR 0 2
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_VAR 0 4
25629: PUSH
25630: LD_VAR 0 5
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: ST_TO_ADDR
// exit ;
25641: GO 26055
// end ; _chassis := AvailableChassisList ( factory ) ;
25643: LD_ADDR_VAR 0 9
25647: PUSH
25648: LD_VAR 0 1
25652: PPUSH
25653: CALL_OW 475
25657: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25658: LD_ADDR_VAR 0 11
25662: PUSH
25663: LD_VAR 0 1
25667: PPUSH
25668: CALL_OW 476
25672: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25673: LD_ADDR_VAR 0 12
25677: PUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL_OW 477
25687: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25688: LD_ADDR_VAR 0 10
25692: PUSH
25693: LD_VAR 0 1
25697: PPUSH
25698: CALL_OW 478
25702: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25703: LD_VAR 0 9
25707: NOT
25708: PUSH
25709: LD_VAR 0 11
25713: NOT
25714: OR
25715: PUSH
25716: LD_VAR 0 12
25720: NOT
25721: OR
25722: PUSH
25723: LD_VAR 0 10
25727: NOT
25728: OR
25729: IFFALSE 25764
// begin result := [ chassis , engine , control , weapon ] ;
25731: LD_ADDR_VAR 0 6
25735: PUSH
25736: LD_VAR 0 2
25740: PUSH
25741: LD_VAR 0 3
25745: PUSH
25746: LD_VAR 0 4
25750: PUSH
25751: LD_VAR 0 5
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: ST_TO_ADDR
// exit ;
25762: GO 26055
// end ; if not chassis in _chassis then
25764: LD_VAR 0 2
25768: PUSH
25769: LD_VAR 0 9
25773: IN
25774: NOT
25775: IFFALSE 25801
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_VAR 0 9
25786: PUSH
25787: LD_INT 1
25789: PPUSH
25790: LD_VAR 0 9
25794: PPUSH
25795: CALL_OW 12
25799: ARRAY
25800: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25801: LD_VAR 0 2
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: CALL 26060 0 2
25815: NOT
25816: IFFALSE 25875
// repeat engine := _engine [ 1 ] ;
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_VAR 0 11
25827: PUSH
25828: LD_INT 1
25830: ARRAY
25831: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25832: LD_ADDR_VAR 0 11
25836: PUSH
25837: LD_VAR 0 11
25841: PPUSH
25842: LD_INT 1
25844: PPUSH
25845: CALL_OW 3
25849: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: CALL 26060 0 2
25864: PUSH
25865: LD_VAR 0 11
25869: PUSH
25870: EMPTY
25871: EQUAL
25872: OR
25873: IFFALSE 25818
// if not control in _control then
25875: LD_VAR 0 4
25879: PUSH
25880: LD_VAR 0 12
25884: IN
25885: NOT
25886: IFFALSE 25912
// control := _control [ rand ( 1 , _control ) ] ;
25888: LD_ADDR_VAR 0 4
25892: PUSH
25893: LD_VAR 0 12
25897: PUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_VAR 0 12
25905: PPUSH
25906: CALL_OW 12
25910: ARRAY
25911: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25912: LD_VAR 0 2
25916: PPUSH
25917: LD_VAR 0 5
25921: PPUSH
25922: CALL 26280 0 2
25926: NOT
25927: IFFALSE 25986
// repeat weapon := _weapon [ 1 ] ;
25929: LD_ADDR_VAR 0 5
25933: PUSH
25934: LD_VAR 0 10
25938: PUSH
25939: LD_INT 1
25941: ARRAY
25942: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25943: LD_ADDR_VAR 0 10
25947: PUSH
25948: LD_VAR 0 10
25952: PPUSH
25953: LD_INT 1
25955: PPUSH
25956: CALL_OW 3
25960: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_VAR 0 5
25970: PPUSH
25971: CALL 26280 0 2
25975: PUSH
25976: LD_VAR 0 10
25980: PUSH
25981: EMPTY
25982: EQUAL
25983: OR
25984: IFFALSE 25929
// result := [ ] ;
25986: LD_ADDR_VAR 0 6
25990: PUSH
25991: EMPTY
25992: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25993: LD_VAR 0 1
25997: PPUSH
25998: LD_VAR 0 2
26002: PPUSH
26003: LD_VAR 0 3
26007: PPUSH
26008: LD_VAR 0 4
26012: PPUSH
26013: LD_VAR 0 5
26017: PPUSH
26018: CALL_OW 448
26022: IFFALSE 26055
// result := [ chassis , engine , control , weapon ] ;
26024: LD_ADDR_VAR 0 6
26028: PUSH
26029: LD_VAR 0 2
26033: PUSH
26034: LD_VAR 0 3
26038: PUSH
26039: LD_VAR 0 4
26043: PUSH
26044: LD_VAR 0 5
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: ST_TO_ADDR
// end ;
26055: LD_VAR 0 6
26059: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26060: LD_INT 0
26062: PPUSH
// if not chassis or not engine then
26063: LD_VAR 0 1
26067: NOT
26068: PUSH
26069: LD_VAR 0 2
26073: NOT
26074: OR
26075: IFFALSE 26079
// exit ;
26077: GO 26275
// case engine of engine_solar :
26079: LD_VAR 0 2
26083: PUSH
26084: LD_INT 2
26086: DOUBLE
26087: EQUAL
26088: IFTRUE 26092
26090: GO 26130
26092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26093: LD_ADDR_VAR 0 3
26097: PUSH
26098: LD_INT 11
26100: PUSH
26101: LD_INT 12
26103: PUSH
26104: LD_INT 13
26106: PUSH
26107: LD_INT 14
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: ST_TO_ADDR
26128: GO 26259
26130: LD_INT 1
26132: DOUBLE
26133: EQUAL
26134: IFTRUE 26138
26136: GO 26200
26138: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26139: LD_ADDR_VAR 0 3
26143: PUSH
26144: LD_INT 11
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: LD_INT 13
26152: PUSH
26153: LD_INT 14
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 3
26164: PUSH
26165: LD_INT 4
26167: PUSH
26168: LD_INT 5
26170: PUSH
26171: LD_INT 21
26173: PUSH
26174: LD_INT 23
26176: PUSH
26177: LD_INT 22
26179: PUSH
26180: LD_INT 24
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: ST_TO_ADDR
26198: GO 26259
26200: LD_INT 3
26202: DOUBLE
26203: EQUAL
26204: IFTRUE 26208
26206: GO 26258
26208: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26209: LD_ADDR_VAR 0 3
26213: PUSH
26214: LD_INT 13
26216: PUSH
26217: LD_INT 14
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: LD_INT 3
26225: PUSH
26226: LD_INT 4
26228: PUSH
26229: LD_INT 5
26231: PUSH
26232: LD_INT 21
26234: PUSH
26235: LD_INT 22
26237: PUSH
26238: LD_INT 23
26240: PUSH
26241: LD_INT 24
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
26256: GO 26259
26258: POP
// result := ( chassis in result ) ;
26259: LD_ADDR_VAR 0 3
26263: PUSH
26264: LD_VAR 0 1
26268: PUSH
26269: LD_VAR 0 3
26273: IN
26274: ST_TO_ADDR
// end ;
26275: LD_VAR 0 3
26279: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26280: LD_INT 0
26282: PPUSH
// if not chassis or not weapon then
26283: LD_VAR 0 1
26287: NOT
26288: PUSH
26289: LD_VAR 0 2
26293: NOT
26294: OR
26295: IFFALSE 26299
// exit ;
26297: GO 27359
// case weapon of us_machine_gun :
26299: LD_VAR 0 2
26303: PUSH
26304: LD_INT 2
26306: DOUBLE
26307: EQUAL
26308: IFTRUE 26312
26310: GO 26342
26312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26313: LD_ADDR_VAR 0 3
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 2
26323: PUSH
26324: LD_INT 3
26326: PUSH
26327: LD_INT 4
26329: PUSH
26330: LD_INT 5
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: ST_TO_ADDR
26340: GO 27343
26342: LD_INT 3
26344: DOUBLE
26345: EQUAL
26346: IFTRUE 26350
26348: GO 26380
26350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26351: LD_ADDR_VAR 0 3
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 2
26361: PUSH
26362: LD_INT 3
26364: PUSH
26365: LD_INT 4
26367: PUSH
26368: LD_INT 5
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: ST_TO_ADDR
26378: GO 27343
26380: LD_INT 11
26382: DOUBLE
26383: EQUAL
26384: IFTRUE 26388
26386: GO 26418
26388: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26389: LD_ADDR_VAR 0 3
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: LD_INT 3
26402: PUSH
26403: LD_INT 4
26405: PUSH
26406: LD_INT 5
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: ST_TO_ADDR
26416: GO 27343
26418: LD_INT 4
26420: DOUBLE
26421: EQUAL
26422: IFTRUE 26426
26424: GO 26452
26426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26427: LD_ADDR_VAR 0 3
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: LD_INT 3
26437: PUSH
26438: LD_INT 4
26440: PUSH
26441: LD_INT 5
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
26450: GO 27343
26452: LD_INT 5
26454: DOUBLE
26455: EQUAL
26456: IFTRUE 26460
26458: GO 26486
26460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26461: LD_ADDR_VAR 0 3
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 3
26471: PUSH
26472: LD_INT 4
26474: PUSH
26475: LD_INT 5
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: ST_TO_ADDR
26484: GO 27343
26486: LD_INT 9
26488: DOUBLE
26489: EQUAL
26490: IFTRUE 26494
26492: GO 26520
26494: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26495: LD_ADDR_VAR 0 3
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 4
26508: PUSH
26509: LD_INT 5
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: ST_TO_ADDR
26518: GO 27343
26520: LD_INT 7
26522: DOUBLE
26523: EQUAL
26524: IFTRUE 26528
26526: GO 26554
26528: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26529: LD_ADDR_VAR 0 3
26533: PUSH
26534: LD_INT 2
26536: PUSH
26537: LD_INT 3
26539: PUSH
26540: LD_INT 4
26542: PUSH
26543: LD_INT 5
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
26552: GO 27343
26554: LD_INT 12
26556: DOUBLE
26557: EQUAL
26558: IFTRUE 26562
26560: GO 26588
26562: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: LD_INT 4
26576: PUSH
26577: LD_INT 5
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: ST_TO_ADDR
26586: GO 27343
26588: LD_INT 13
26590: DOUBLE
26591: EQUAL
26592: IFTRUE 26596
26594: GO 26622
26596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26597: LD_ADDR_VAR 0 3
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: LD_INT 3
26607: PUSH
26608: LD_INT 4
26610: PUSH
26611: LD_INT 5
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: ST_TO_ADDR
26620: GO 27343
26622: LD_INT 14
26624: DOUBLE
26625: EQUAL
26626: IFTRUE 26630
26628: GO 26648
26630: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26631: LD_ADDR_VAR 0 3
26635: PUSH
26636: LD_INT 4
26638: PUSH
26639: LD_INT 5
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: ST_TO_ADDR
26646: GO 27343
26648: LD_INT 6
26650: DOUBLE
26651: EQUAL
26652: IFTRUE 26656
26654: GO 26674
26656: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26657: LD_ADDR_VAR 0 3
26661: PUSH
26662: LD_INT 4
26664: PUSH
26665: LD_INT 5
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: ST_TO_ADDR
26672: GO 27343
26674: LD_INT 10
26676: DOUBLE
26677: EQUAL
26678: IFTRUE 26682
26680: GO 26700
26682: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26683: LD_ADDR_VAR 0 3
26687: PUSH
26688: LD_INT 4
26690: PUSH
26691: LD_INT 5
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: ST_TO_ADDR
26698: GO 27343
26700: LD_INT 22
26702: DOUBLE
26703: EQUAL
26704: IFTRUE 26708
26706: GO 26734
26708: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26709: LD_ADDR_VAR 0 3
26713: PUSH
26714: LD_INT 11
26716: PUSH
26717: LD_INT 12
26719: PUSH
26720: LD_INT 13
26722: PUSH
26723: LD_INT 14
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: ST_TO_ADDR
26732: GO 27343
26734: LD_INT 23
26736: DOUBLE
26737: EQUAL
26738: IFTRUE 26742
26740: GO 26768
26742: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26743: LD_ADDR_VAR 0 3
26747: PUSH
26748: LD_INT 11
26750: PUSH
26751: LD_INT 12
26753: PUSH
26754: LD_INT 13
26756: PUSH
26757: LD_INT 14
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: ST_TO_ADDR
26766: GO 27343
26768: LD_INT 24
26770: DOUBLE
26771: EQUAL
26772: IFTRUE 26776
26774: GO 26802
26776: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26777: LD_ADDR_VAR 0 3
26781: PUSH
26782: LD_INT 11
26784: PUSH
26785: LD_INT 12
26787: PUSH
26788: LD_INT 13
26790: PUSH
26791: LD_INT 14
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
26800: GO 27343
26802: LD_INT 30
26804: DOUBLE
26805: EQUAL
26806: IFTRUE 26810
26808: GO 26836
26810: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26811: LD_ADDR_VAR 0 3
26815: PUSH
26816: LD_INT 11
26818: PUSH
26819: LD_INT 12
26821: PUSH
26822: LD_INT 13
26824: PUSH
26825: LD_INT 14
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: ST_TO_ADDR
26834: GO 27343
26836: LD_INT 25
26838: DOUBLE
26839: EQUAL
26840: IFTRUE 26844
26842: GO 26862
26844: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26845: LD_ADDR_VAR 0 3
26849: PUSH
26850: LD_INT 13
26852: PUSH
26853: LD_INT 14
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: ST_TO_ADDR
26860: GO 27343
26862: LD_INT 27
26864: DOUBLE
26865: EQUAL
26866: IFTRUE 26870
26868: GO 26888
26870: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_INT 13
26878: PUSH
26879: LD_INT 14
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: ST_TO_ADDR
26886: GO 27343
26888: LD_INT 92
26890: DOUBLE
26891: EQUAL
26892: IFTRUE 26896
26894: GO 26922
26896: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_INT 11
26904: PUSH
26905: LD_INT 12
26907: PUSH
26908: LD_INT 13
26910: PUSH
26911: LD_INT 14
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: ST_TO_ADDR
26920: GO 27343
26922: LD_INT 28
26924: DOUBLE
26925: EQUAL
26926: IFTRUE 26930
26928: GO 26948
26930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26931: LD_ADDR_VAR 0 3
26935: PUSH
26936: LD_INT 13
26938: PUSH
26939: LD_INT 14
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: ST_TO_ADDR
26946: GO 27343
26948: LD_INT 29
26950: DOUBLE
26951: EQUAL
26952: IFTRUE 26956
26954: GO 26974
26956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26957: LD_ADDR_VAR 0 3
26961: PUSH
26962: LD_INT 13
26964: PUSH
26965: LD_INT 14
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: ST_TO_ADDR
26972: GO 27343
26974: LD_INT 31
26976: DOUBLE
26977: EQUAL
26978: IFTRUE 26982
26980: GO 27000
26982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_INT 13
26990: PUSH
26991: LD_INT 14
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: ST_TO_ADDR
26998: GO 27343
27000: LD_INT 26
27002: DOUBLE
27003: EQUAL
27004: IFTRUE 27008
27006: GO 27026
27008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27009: LD_ADDR_VAR 0 3
27013: PUSH
27014: LD_INT 13
27016: PUSH
27017: LD_INT 14
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: ST_TO_ADDR
27024: GO 27343
27026: LD_INT 42
27028: DOUBLE
27029: EQUAL
27030: IFTRUE 27034
27032: GO 27060
27034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_INT 21
27042: PUSH
27043: LD_INT 22
27045: PUSH
27046: LD_INT 23
27048: PUSH
27049: LD_INT 24
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: ST_TO_ADDR
27058: GO 27343
27060: LD_INT 43
27062: DOUBLE
27063: EQUAL
27064: IFTRUE 27068
27066: GO 27094
27068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27069: LD_ADDR_VAR 0 3
27073: PUSH
27074: LD_INT 21
27076: PUSH
27077: LD_INT 22
27079: PUSH
27080: LD_INT 23
27082: PUSH
27083: LD_INT 24
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: ST_TO_ADDR
27092: GO 27343
27094: LD_INT 44
27096: DOUBLE
27097: EQUAL
27098: IFTRUE 27102
27100: GO 27128
27102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27103: LD_ADDR_VAR 0 3
27107: PUSH
27108: LD_INT 21
27110: PUSH
27111: LD_INT 22
27113: PUSH
27114: LD_INT 23
27116: PUSH
27117: LD_INT 24
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: ST_TO_ADDR
27126: GO 27343
27128: LD_INT 45
27130: DOUBLE
27131: EQUAL
27132: IFTRUE 27136
27134: GO 27162
27136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_INT 21
27144: PUSH
27145: LD_INT 22
27147: PUSH
27148: LD_INT 23
27150: PUSH
27151: LD_INT 24
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: ST_TO_ADDR
27160: GO 27343
27162: LD_INT 49
27164: DOUBLE
27165: EQUAL
27166: IFTRUE 27170
27168: GO 27196
27170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27171: LD_ADDR_VAR 0 3
27175: PUSH
27176: LD_INT 21
27178: PUSH
27179: LD_INT 22
27181: PUSH
27182: LD_INT 23
27184: PUSH
27185: LD_INT 24
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: ST_TO_ADDR
27194: GO 27343
27196: LD_INT 51
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27204
27202: GO 27230
27204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27205: LD_ADDR_VAR 0 3
27209: PUSH
27210: LD_INT 21
27212: PUSH
27213: LD_INT 22
27215: PUSH
27216: LD_INT 23
27218: PUSH
27219: LD_INT 24
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
27228: GO 27343
27230: LD_INT 52
27232: DOUBLE
27233: EQUAL
27234: IFTRUE 27238
27236: GO 27264
27238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27239: LD_ADDR_VAR 0 3
27243: PUSH
27244: LD_INT 21
27246: PUSH
27247: LD_INT 22
27249: PUSH
27250: LD_INT 23
27252: PUSH
27253: LD_INT 24
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: ST_TO_ADDR
27262: GO 27343
27264: LD_INT 53
27266: DOUBLE
27267: EQUAL
27268: IFTRUE 27272
27270: GO 27290
27272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27273: LD_ADDR_VAR 0 3
27277: PUSH
27278: LD_INT 23
27280: PUSH
27281: LD_INT 24
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: ST_TO_ADDR
27288: GO 27343
27290: LD_INT 46
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 27316
27298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_INT 23
27306: PUSH
27307: LD_INT 24
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: ST_TO_ADDR
27314: GO 27343
27316: LD_INT 47
27318: DOUBLE
27319: EQUAL
27320: IFTRUE 27324
27322: GO 27342
27324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27325: LD_ADDR_VAR 0 3
27329: PUSH
27330: LD_INT 23
27332: PUSH
27333: LD_INT 24
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: ST_TO_ADDR
27340: GO 27343
27342: POP
// result := ( chassis in result ) ;
27343: LD_ADDR_VAR 0 3
27347: PUSH
27348: LD_VAR 0 1
27352: PUSH
27353: LD_VAR 0 3
27357: IN
27358: ST_TO_ADDR
// end ;
27359: LD_VAR 0 3
27363: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27364: LD_INT 0
27366: PPUSH
27367: PPUSH
27368: PPUSH
27369: PPUSH
27370: PPUSH
27371: PPUSH
27372: PPUSH
// result := array ;
27373: LD_ADDR_VAR 0 5
27377: PUSH
27378: LD_VAR 0 1
27382: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27383: LD_VAR 0 1
27387: NOT
27388: PUSH
27389: LD_VAR 0 2
27393: NOT
27394: OR
27395: PUSH
27396: LD_VAR 0 3
27400: NOT
27401: OR
27402: PUSH
27403: LD_VAR 0 2
27407: PUSH
27408: LD_VAR 0 1
27412: GREATER
27413: OR
27414: PUSH
27415: LD_VAR 0 3
27419: PUSH
27420: LD_VAR 0 1
27424: GREATER
27425: OR
27426: IFFALSE 27430
// exit ;
27428: GO 27726
// if direction then
27430: LD_VAR 0 4
27434: IFFALSE 27498
// begin d := 1 ;
27436: LD_ADDR_VAR 0 9
27440: PUSH
27441: LD_INT 1
27443: ST_TO_ADDR
// if i_from > i_to then
27444: LD_VAR 0 2
27448: PUSH
27449: LD_VAR 0 3
27453: GREATER
27454: IFFALSE 27480
// length := ( array - i_from ) + i_to else
27456: LD_ADDR_VAR 0 11
27460: PUSH
27461: LD_VAR 0 1
27465: PUSH
27466: LD_VAR 0 2
27470: MINUS
27471: PUSH
27472: LD_VAR 0 3
27476: PLUS
27477: ST_TO_ADDR
27478: GO 27496
// length := i_to - i_from ;
27480: LD_ADDR_VAR 0 11
27484: PUSH
27485: LD_VAR 0 3
27489: PUSH
27490: LD_VAR 0 2
27494: MINUS
27495: ST_TO_ADDR
// end else
27496: GO 27559
// begin d := - 1 ;
27498: LD_ADDR_VAR 0 9
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: ST_TO_ADDR
// if i_from > i_to then
27507: LD_VAR 0 2
27511: PUSH
27512: LD_VAR 0 3
27516: GREATER
27517: IFFALSE 27537
// length := i_from - i_to else
27519: LD_ADDR_VAR 0 11
27523: PUSH
27524: LD_VAR 0 2
27528: PUSH
27529: LD_VAR 0 3
27533: MINUS
27534: ST_TO_ADDR
27535: GO 27559
// length := ( array - i_to ) + i_from ;
27537: LD_ADDR_VAR 0 11
27541: PUSH
27542: LD_VAR 0 1
27546: PUSH
27547: LD_VAR 0 3
27551: MINUS
27552: PUSH
27553: LD_VAR 0 2
27557: PLUS
27558: ST_TO_ADDR
// end ; if not length then
27559: LD_VAR 0 11
27563: NOT
27564: IFFALSE 27568
// exit ;
27566: GO 27726
// tmp := array ;
27568: LD_ADDR_VAR 0 10
27572: PUSH
27573: LD_VAR 0 1
27577: ST_TO_ADDR
// for i = 1 to length do
27578: LD_ADDR_VAR 0 6
27582: PUSH
27583: DOUBLE
27584: LD_INT 1
27586: DEC
27587: ST_TO_ADDR
27588: LD_VAR 0 11
27592: PUSH
27593: FOR_TO
27594: IFFALSE 27714
// begin for j = 1 to array do
27596: LD_ADDR_VAR 0 7
27600: PUSH
27601: DOUBLE
27602: LD_INT 1
27604: DEC
27605: ST_TO_ADDR
27606: LD_VAR 0 1
27610: PUSH
27611: FOR_TO
27612: IFFALSE 27700
// begin k := j + d ;
27614: LD_ADDR_VAR 0 8
27618: PUSH
27619: LD_VAR 0 7
27623: PUSH
27624: LD_VAR 0 9
27628: PLUS
27629: ST_TO_ADDR
// if k > array then
27630: LD_VAR 0 8
27634: PUSH
27635: LD_VAR 0 1
27639: GREATER
27640: IFFALSE 27650
// k := 1 ;
27642: LD_ADDR_VAR 0 8
27646: PUSH
27647: LD_INT 1
27649: ST_TO_ADDR
// if not k then
27650: LD_VAR 0 8
27654: NOT
27655: IFFALSE 27667
// k := array ;
27657: LD_ADDR_VAR 0 8
27661: PUSH
27662: LD_VAR 0 1
27666: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27667: LD_ADDR_VAR 0 10
27671: PUSH
27672: LD_VAR 0 10
27676: PPUSH
27677: LD_VAR 0 8
27681: PPUSH
27682: LD_VAR 0 1
27686: PUSH
27687: LD_VAR 0 7
27691: ARRAY
27692: PPUSH
27693: CALL_OW 1
27697: ST_TO_ADDR
// end ;
27698: GO 27611
27700: POP
27701: POP
// array := tmp ;
27702: LD_ADDR_VAR 0 1
27706: PUSH
27707: LD_VAR 0 10
27711: ST_TO_ADDR
// end ;
27712: GO 27593
27714: POP
27715: POP
// result := array ;
27716: LD_ADDR_VAR 0 5
27720: PUSH
27721: LD_VAR 0 1
27725: ST_TO_ADDR
// end ;
27726: LD_VAR 0 5
27730: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27731: LD_INT 0
27733: PPUSH
27734: PPUSH
// result := 0 ;
27735: LD_ADDR_VAR 0 3
27739: PUSH
27740: LD_INT 0
27742: ST_TO_ADDR
// if not array or not value in array then
27743: LD_VAR 0 1
27747: NOT
27748: PUSH
27749: LD_VAR 0 2
27753: PUSH
27754: LD_VAR 0 1
27758: IN
27759: NOT
27760: OR
27761: IFFALSE 27765
// exit ;
27763: GO 27819
// for i = 1 to array do
27765: LD_ADDR_VAR 0 4
27769: PUSH
27770: DOUBLE
27771: LD_INT 1
27773: DEC
27774: ST_TO_ADDR
27775: LD_VAR 0 1
27779: PUSH
27780: FOR_TO
27781: IFFALSE 27817
// if value = array [ i ] then
27783: LD_VAR 0 2
27787: PUSH
27788: LD_VAR 0 1
27792: PUSH
27793: LD_VAR 0 4
27797: ARRAY
27798: EQUAL
27799: IFFALSE 27815
// begin result := i ;
27801: LD_ADDR_VAR 0 3
27805: PUSH
27806: LD_VAR 0 4
27810: ST_TO_ADDR
// exit ;
27811: POP
27812: POP
27813: GO 27819
// end ;
27815: GO 27780
27817: POP
27818: POP
// end ;
27819: LD_VAR 0 3
27823: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27824: LD_INT 0
27826: PPUSH
// vc_chassis := chassis ;
27827: LD_ADDR_OWVAR 37
27831: PUSH
27832: LD_VAR 0 1
27836: ST_TO_ADDR
// vc_engine := engine ;
27837: LD_ADDR_OWVAR 39
27841: PUSH
27842: LD_VAR 0 2
27846: ST_TO_ADDR
// vc_control := control ;
27847: LD_ADDR_OWVAR 38
27851: PUSH
27852: LD_VAR 0 3
27856: ST_TO_ADDR
// vc_weapon := weapon ;
27857: LD_ADDR_OWVAR 40
27861: PUSH
27862: LD_VAR 0 4
27866: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27867: LD_ADDR_OWVAR 41
27871: PUSH
27872: LD_VAR 0 5
27876: ST_TO_ADDR
// end ;
27877: LD_VAR 0 6
27881: RET
// export function WantPlant ( unit ) ; var task ; begin
27882: LD_INT 0
27884: PPUSH
27885: PPUSH
// result := false ;
27886: LD_ADDR_VAR 0 2
27890: PUSH
27891: LD_INT 0
27893: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_VAR 0 1
27903: PPUSH
27904: CALL_OW 437
27908: ST_TO_ADDR
// if task then
27909: LD_VAR 0 3
27913: IFFALSE 27941
// if task [ 1 ] [ 1 ] = p then
27915: LD_VAR 0 3
27919: PUSH
27920: LD_INT 1
27922: ARRAY
27923: PUSH
27924: LD_INT 1
27926: ARRAY
27927: PUSH
27928: LD_STRING p
27930: EQUAL
27931: IFFALSE 27941
// result := true ;
27933: LD_ADDR_VAR 0 2
27937: PUSH
27938: LD_INT 1
27940: ST_TO_ADDR
// end ;
27941: LD_VAR 0 2
27945: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// if pos < 1 then
27952: LD_VAR 0 2
27956: PUSH
27957: LD_INT 1
27959: LESS
27960: IFFALSE 27964
// exit ;
27962: GO 28267
// if pos = 1 then
27964: LD_VAR 0 2
27968: PUSH
27969: LD_INT 1
27971: EQUAL
27972: IFFALSE 28005
// result := Replace ( arr , pos [ 1 ] , value ) else
27974: LD_ADDR_VAR 0 4
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: LD_VAR 0 2
27988: PUSH
27989: LD_INT 1
27991: ARRAY
27992: PPUSH
27993: LD_VAR 0 3
27997: PPUSH
27998: CALL_OW 1
28002: ST_TO_ADDR
28003: GO 28267
// begin tmp := arr ;
28005: LD_ADDR_VAR 0 6
28009: PUSH
28010: LD_VAR 0 1
28014: ST_TO_ADDR
// s_arr := [ tmp ] ;
28015: LD_ADDR_VAR 0 7
28019: PUSH
28020: LD_VAR 0 6
28024: PUSH
28025: EMPTY
28026: LIST
28027: ST_TO_ADDR
// for i = 1 to pos - 1 do
28028: LD_ADDR_VAR 0 5
28032: PUSH
28033: DOUBLE
28034: LD_INT 1
28036: DEC
28037: ST_TO_ADDR
28038: LD_VAR 0 2
28042: PUSH
28043: LD_INT 1
28045: MINUS
28046: PUSH
28047: FOR_TO
28048: IFFALSE 28093
// begin tmp := tmp [ pos [ i ] ] ;
28050: LD_ADDR_VAR 0 6
28054: PUSH
28055: LD_VAR 0 6
28059: PUSH
28060: LD_VAR 0 2
28064: PUSH
28065: LD_VAR 0 5
28069: ARRAY
28070: ARRAY
28071: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28072: LD_ADDR_VAR 0 7
28076: PUSH
28077: LD_VAR 0 7
28081: PUSH
28082: LD_VAR 0 6
28086: PUSH
28087: EMPTY
28088: LIST
28089: ADD
28090: ST_TO_ADDR
// end ;
28091: GO 28047
28093: POP
28094: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28095: LD_ADDR_VAR 0 6
28099: PUSH
28100: LD_VAR 0 6
28104: PPUSH
28105: LD_VAR 0 2
28109: PUSH
28110: LD_VAR 0 2
28114: ARRAY
28115: PPUSH
28116: LD_VAR 0 3
28120: PPUSH
28121: CALL_OW 1
28125: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28126: LD_ADDR_VAR 0 7
28130: PUSH
28131: LD_VAR 0 7
28135: PPUSH
28136: LD_VAR 0 7
28140: PPUSH
28141: LD_VAR 0 6
28145: PPUSH
28146: CALL_OW 1
28150: ST_TO_ADDR
// for i = s_arr downto 2 do
28151: LD_ADDR_VAR 0 5
28155: PUSH
28156: DOUBLE
28157: LD_VAR 0 7
28161: INC
28162: ST_TO_ADDR
28163: LD_INT 2
28165: PUSH
28166: FOR_DOWNTO
28167: IFFALSE 28251
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28169: LD_ADDR_VAR 0 6
28173: PUSH
28174: LD_VAR 0 7
28178: PUSH
28179: LD_VAR 0 5
28183: PUSH
28184: LD_INT 1
28186: MINUS
28187: ARRAY
28188: PPUSH
28189: LD_VAR 0 2
28193: PUSH
28194: LD_VAR 0 5
28198: PUSH
28199: LD_INT 1
28201: MINUS
28202: ARRAY
28203: PPUSH
28204: LD_VAR 0 7
28208: PUSH
28209: LD_VAR 0 5
28213: ARRAY
28214: PPUSH
28215: CALL_OW 1
28219: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28220: LD_ADDR_VAR 0 7
28224: PUSH
28225: LD_VAR 0 7
28229: PPUSH
28230: LD_VAR 0 5
28234: PUSH
28235: LD_INT 1
28237: MINUS
28238: PPUSH
28239: LD_VAR 0 6
28243: PPUSH
28244: CALL_OW 1
28248: ST_TO_ADDR
// end ;
28249: GO 28166
28251: POP
28252: POP
// result := s_arr [ 1 ] ;
28253: LD_ADDR_VAR 0 4
28257: PUSH
28258: LD_VAR 0 7
28262: PUSH
28263: LD_INT 1
28265: ARRAY
28266: ST_TO_ADDR
// end ; end ;
28267: LD_VAR 0 4
28271: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
// if not list then
28276: LD_VAR 0 1
28280: NOT
28281: IFFALSE 28285
// exit ;
28283: GO 28376
// i := list [ pos1 ] ;
28285: LD_ADDR_VAR 0 5
28289: PUSH
28290: LD_VAR 0 1
28294: PUSH
28295: LD_VAR 0 2
28299: ARRAY
28300: ST_TO_ADDR
// if not i then
28301: LD_VAR 0 5
28305: NOT
28306: IFFALSE 28310
// exit ;
28308: GO 28376
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28310: LD_ADDR_VAR 0 1
28314: PUSH
28315: LD_VAR 0 1
28319: PPUSH
28320: LD_VAR 0 2
28324: PPUSH
28325: LD_VAR 0 1
28329: PUSH
28330: LD_VAR 0 3
28334: ARRAY
28335: PPUSH
28336: CALL_OW 1
28340: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28341: LD_ADDR_VAR 0 1
28345: PUSH
28346: LD_VAR 0 1
28350: PPUSH
28351: LD_VAR 0 3
28355: PPUSH
28356: LD_VAR 0 5
28360: PPUSH
28361: CALL_OW 1
28365: ST_TO_ADDR
// result := list ;
28366: LD_ADDR_VAR 0 4
28370: PUSH
28371: LD_VAR 0 1
28375: ST_TO_ADDR
// end ;
28376: LD_VAR 0 4
28380: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28381: LD_INT 0
28383: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28384: LD_ADDR_VAR 0 5
28388: PUSH
28389: LD_VAR 0 1
28393: PPUSH
28394: CALL_OW 250
28398: PPUSH
28399: LD_VAR 0 1
28403: PPUSH
28404: CALL_OW 251
28408: PPUSH
28409: LD_VAR 0 2
28413: PPUSH
28414: LD_VAR 0 3
28418: PPUSH
28419: LD_VAR 0 4
28423: PPUSH
28424: CALL 28802 0 5
28428: ST_TO_ADDR
// end ;
28429: LD_VAR 0 5
28433: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28434: LD_INT 0
28436: PPUSH
28437: PPUSH
28438: PPUSH
28439: PPUSH
// if not list or not unit then
28440: LD_VAR 0 2
28444: NOT
28445: PUSH
28446: LD_VAR 0 1
28450: NOT
28451: OR
28452: IFFALSE 28456
// exit ;
28454: GO 28797
// result := [ ] ;
28456: LD_ADDR_VAR 0 5
28460: PUSH
28461: EMPTY
28462: ST_TO_ADDR
// for i in list do
28463: LD_ADDR_VAR 0 6
28467: PUSH
28468: LD_VAR 0 2
28472: PUSH
28473: FOR_IN
28474: IFFALSE 28692
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28476: LD_ADDR_VAR 0 8
28480: PUSH
28481: LD_VAR 0 1
28485: PPUSH
28486: LD_VAR 0 6
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PPUSH
28495: LD_VAR 0 6
28499: PUSH
28500: LD_INT 2
28502: ARRAY
28503: PPUSH
28504: CALL_OW 297
28508: ST_TO_ADDR
// if not Count ( result ) then
28509: LD_VAR 0 5
28513: PPUSH
28514: CALL 25086 0 1
28518: NOT
28519: IFFALSE 28552
// begin result := Join ( result , [ i , tmp ] ) ;
28521: LD_ADDR_VAR 0 5
28525: PUSH
28526: LD_VAR 0 5
28530: PPUSH
28531: LD_VAR 0 6
28535: PUSH
28536: LD_VAR 0 8
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PPUSH
28545: CALL 60836 0 2
28549: ST_TO_ADDR
// continue ;
28550: GO 28473
// end ; if result [ result ] [ 2 ] <= tmp then
28552: LD_VAR 0 5
28556: PUSH
28557: LD_VAR 0 5
28561: ARRAY
28562: PUSH
28563: LD_INT 2
28565: ARRAY
28566: PUSH
28567: LD_VAR 0 8
28571: LESSEQUAL
28572: IFFALSE 28605
// result := Join ( result , [ i , tmp ] ) else
28574: LD_ADDR_VAR 0 5
28578: PUSH
28579: LD_VAR 0 5
28583: PPUSH
28584: LD_VAR 0 6
28588: PUSH
28589: LD_VAR 0 8
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PPUSH
28598: CALL 60836 0 2
28602: ST_TO_ADDR
28603: GO 28690
// begin for j := 1 to Count ( result ) do
28605: LD_ADDR_VAR 0 7
28609: PUSH
28610: DOUBLE
28611: LD_INT 1
28613: DEC
28614: ST_TO_ADDR
28615: LD_VAR 0 5
28619: PPUSH
28620: CALL 25086 0 1
28624: PUSH
28625: FOR_TO
28626: IFFALSE 28688
// begin if tmp < result [ j ] [ 2 ] then
28628: LD_VAR 0 8
28632: PUSH
28633: LD_VAR 0 5
28637: PUSH
28638: LD_VAR 0 7
28642: ARRAY
28643: PUSH
28644: LD_INT 2
28646: ARRAY
28647: LESS
28648: IFFALSE 28686
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28650: LD_ADDR_VAR 0 5
28654: PUSH
28655: LD_VAR 0 5
28659: PPUSH
28660: LD_VAR 0 7
28664: PPUSH
28665: LD_VAR 0 6
28669: PUSH
28670: LD_VAR 0 8
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 2
28683: ST_TO_ADDR
// break ;
28684: GO 28688
// end ; end ;
28686: GO 28625
28688: POP
28689: POP
// end ; end ;
28690: GO 28473
28692: POP
28693: POP
// if result and not asc then
28694: LD_VAR 0 5
28698: PUSH
28699: LD_VAR 0 3
28703: NOT
28704: AND
28705: IFFALSE 28722
// result := ReverseArray ( result ) ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 5
28716: PPUSH
28717: CALL 55962 0 1
28721: ST_TO_ADDR
// tmp := [ ] ;
28722: LD_ADDR_VAR 0 8
28726: PUSH
28727: EMPTY
28728: ST_TO_ADDR
// if mode then
28729: LD_VAR 0 4
28733: IFFALSE 28797
// begin for i := 1 to result do
28735: LD_ADDR_VAR 0 6
28739: PUSH
28740: DOUBLE
28741: LD_INT 1
28743: DEC
28744: ST_TO_ADDR
28745: LD_VAR 0 5
28749: PUSH
28750: FOR_TO
28751: IFFALSE 28785
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28753: LD_ADDR_VAR 0 8
28757: PUSH
28758: LD_VAR 0 8
28762: PPUSH
28763: LD_VAR 0 5
28767: PUSH
28768: LD_VAR 0 6
28772: ARRAY
28773: PUSH
28774: LD_INT 1
28776: ARRAY
28777: PPUSH
28778: CALL 60836 0 2
28782: ST_TO_ADDR
28783: GO 28750
28785: POP
28786: POP
// result := tmp ;
28787: LD_ADDR_VAR 0 5
28791: PUSH
28792: LD_VAR 0 8
28796: ST_TO_ADDR
// end ; end ;
28797: LD_VAR 0 5
28801: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
// if not list then
28808: LD_VAR 0 3
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 29205
// result := [ ] ;
28817: LD_ADDR_VAR 0 6
28821: PUSH
28822: EMPTY
28823: ST_TO_ADDR
// for i in list do
28824: LD_ADDR_VAR 0 7
28828: PUSH
28829: LD_VAR 0 3
28833: PUSH
28834: FOR_IN
28835: IFFALSE 29037
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28837: LD_ADDR_VAR 0 9
28841: PUSH
28842: LD_VAR 0 7
28846: PPUSH
28847: LD_VAR 0 1
28851: PPUSH
28852: LD_VAR 0 2
28856: PPUSH
28857: CALL_OW 297
28861: ST_TO_ADDR
// if not result then
28862: LD_VAR 0 6
28866: NOT
28867: IFFALSE 28893
// result := [ [ i , tmp ] ] else
28869: LD_ADDR_VAR 0 6
28873: PUSH
28874: LD_VAR 0 7
28878: PUSH
28879: LD_VAR 0 9
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: ST_TO_ADDR
28891: GO 29035
// begin if result [ result ] [ 2 ] <= tmp then
28893: LD_VAR 0 6
28897: PUSH
28898: LD_VAR 0 6
28902: ARRAY
28903: PUSH
28904: LD_INT 2
28906: ARRAY
28907: PUSH
28908: LD_VAR 0 9
28912: LESSEQUAL
28913: IFFALSE 28955
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28915: LD_ADDR_VAR 0 6
28919: PUSH
28920: LD_VAR 0 6
28924: PPUSH
28925: LD_VAR 0 6
28929: PUSH
28930: LD_INT 1
28932: PLUS
28933: PPUSH
28934: LD_VAR 0 7
28938: PUSH
28939: LD_VAR 0 9
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 2
28952: ST_TO_ADDR
28953: GO 29035
// for j := 1 to result do
28955: LD_ADDR_VAR 0 8
28959: PUSH
28960: DOUBLE
28961: LD_INT 1
28963: DEC
28964: ST_TO_ADDR
28965: LD_VAR 0 6
28969: PUSH
28970: FOR_TO
28971: IFFALSE 29033
// begin if tmp < result [ j ] [ 2 ] then
28973: LD_VAR 0 9
28977: PUSH
28978: LD_VAR 0 6
28982: PUSH
28983: LD_VAR 0 8
28987: ARRAY
28988: PUSH
28989: LD_INT 2
28991: ARRAY
28992: LESS
28993: IFFALSE 29031
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28995: LD_ADDR_VAR 0 6
28999: PUSH
29000: LD_VAR 0 6
29004: PPUSH
29005: LD_VAR 0 8
29009: PPUSH
29010: LD_VAR 0 7
29014: PUSH
29015: LD_VAR 0 9
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 2
29028: ST_TO_ADDR
// break ;
29029: GO 29033
// end ; end ;
29031: GO 28970
29033: POP
29034: POP
// end ; end ;
29035: GO 28834
29037: POP
29038: POP
// if result and not asc then
29039: LD_VAR 0 6
29043: PUSH
29044: LD_VAR 0 4
29048: NOT
29049: AND
29050: IFFALSE 29125
// begin tmp := result ;
29052: LD_ADDR_VAR 0 9
29056: PUSH
29057: LD_VAR 0 6
29061: ST_TO_ADDR
// for i = tmp downto 1 do
29062: LD_ADDR_VAR 0 7
29066: PUSH
29067: DOUBLE
29068: LD_VAR 0 9
29072: INC
29073: ST_TO_ADDR
29074: LD_INT 1
29076: PUSH
29077: FOR_DOWNTO
29078: IFFALSE 29123
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29080: LD_ADDR_VAR 0 6
29084: PUSH
29085: LD_VAR 0 6
29089: PPUSH
29090: LD_VAR 0 9
29094: PUSH
29095: LD_VAR 0 7
29099: MINUS
29100: PUSH
29101: LD_INT 1
29103: PLUS
29104: PPUSH
29105: LD_VAR 0 9
29109: PUSH
29110: LD_VAR 0 7
29114: ARRAY
29115: PPUSH
29116: CALL_OW 1
29120: ST_TO_ADDR
29121: GO 29077
29123: POP
29124: POP
// end ; tmp := [ ] ;
29125: LD_ADDR_VAR 0 9
29129: PUSH
29130: EMPTY
29131: ST_TO_ADDR
// if mode then
29132: LD_VAR 0 5
29136: IFFALSE 29205
// begin for i = 1 to result do
29138: LD_ADDR_VAR 0 7
29142: PUSH
29143: DOUBLE
29144: LD_INT 1
29146: DEC
29147: ST_TO_ADDR
29148: LD_VAR 0 6
29152: PUSH
29153: FOR_TO
29154: IFFALSE 29193
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29156: LD_ADDR_VAR 0 9
29160: PUSH
29161: LD_VAR 0 9
29165: PPUSH
29166: LD_VAR 0 7
29170: PPUSH
29171: LD_VAR 0 6
29175: PUSH
29176: LD_VAR 0 7
29180: ARRAY
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 1
29190: ST_TO_ADDR
29191: GO 29153
29193: POP
29194: POP
// result := tmp ;
29195: LD_ADDR_VAR 0 6
29199: PUSH
29200: LD_VAR 0 9
29204: ST_TO_ADDR
// end ; end ;
29205: LD_VAR 0 6
29209: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29210: LD_INT 0
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29218: LD_ADDR_VAR 0 5
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: ST_TO_ADDR
// if not x or not y then
29240: LD_VAR 0 2
29244: NOT
29245: PUSH
29246: LD_VAR 0 3
29250: NOT
29251: OR
29252: IFFALSE 29256
// exit ;
29254: GO 30906
// if not range then
29256: LD_VAR 0 4
29260: NOT
29261: IFFALSE 29271
// range := 10 ;
29263: LD_ADDR_VAR 0 4
29267: PUSH
29268: LD_INT 10
29270: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29271: LD_ADDR_VAR 0 8
29275: PUSH
29276: LD_INT 81
29278: PUSH
29279: LD_VAR 0 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 92
29290: PUSH
29291: LD_VAR 0 2
29295: PUSH
29296: LD_VAR 0 3
29300: PUSH
29301: LD_VAR 0 4
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: LD_INT 21
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: PPUSH
29334: CALL_OW 69
29338: ST_TO_ADDR
// if not tmp then
29339: LD_VAR 0 8
29343: NOT
29344: IFFALSE 29348
// exit ;
29346: GO 30906
// for i in tmp do
29348: LD_ADDR_VAR 0 6
29352: PUSH
29353: LD_VAR 0 8
29357: PUSH
29358: FOR_IN
29359: IFFALSE 30881
// begin points := [ 0 , 0 , 0 ] ;
29361: LD_ADDR_VAR 0 9
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// bpoints := 1 ;
29380: LD_ADDR_VAR 0 10
29384: PUSH
29385: LD_INT 1
29387: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29388: LD_VAR 0 6
29392: PPUSH
29393: CALL_OW 247
29397: PUSH
29398: LD_INT 1
29400: DOUBLE
29401: EQUAL
29402: IFTRUE 29406
29404: GO 29984
29406: POP
// begin if GetClass ( i ) = 1 then
29407: LD_VAR 0 6
29411: PPUSH
29412: CALL_OW 257
29416: PUSH
29417: LD_INT 1
29419: EQUAL
29420: IFFALSE 29441
// points := [ 10 , 5 , 3 ] ;
29422: LD_ADDR_VAR 0 9
29426: PUSH
29427: LD_INT 10
29429: PUSH
29430: LD_INT 5
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29441: LD_VAR 0 6
29445: PPUSH
29446: CALL_OW 257
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: LD_INT 3
29456: PUSH
29457: LD_INT 4
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: IN
29465: IFFALSE 29486
// points := [ 3 , 2 , 1 ] ;
29467: LD_ADDR_VAR 0 9
29471: PUSH
29472: LD_INT 3
29474: PUSH
29475: LD_INT 2
29477: PUSH
29478: LD_INT 1
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29486: LD_VAR 0 6
29490: PPUSH
29491: CALL_OW 257
29495: PUSH
29496: LD_INT 5
29498: EQUAL
29499: IFFALSE 29520
// points := [ 130 , 5 , 2 ] ;
29501: LD_ADDR_VAR 0 9
29505: PUSH
29506: LD_INT 130
29508: PUSH
29509: LD_INT 5
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29520: LD_VAR 0 6
29524: PPUSH
29525: CALL_OW 257
29529: PUSH
29530: LD_INT 8
29532: EQUAL
29533: IFFALSE 29554
// points := [ 35 , 35 , 30 ] ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_INT 35
29542: PUSH
29543: LD_INT 35
29545: PUSH
29546: LD_INT 30
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29554: LD_VAR 0 6
29558: PPUSH
29559: CALL_OW 257
29563: PUSH
29564: LD_INT 9
29566: EQUAL
29567: IFFALSE 29588
// points := [ 20 , 55 , 40 ] ;
29569: LD_ADDR_VAR 0 9
29573: PUSH
29574: LD_INT 20
29576: PUSH
29577: LD_INT 55
29579: PUSH
29580: LD_INT 40
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29588: LD_VAR 0 6
29592: PPUSH
29593: CALL_OW 257
29597: PUSH
29598: LD_INT 12
29600: PUSH
29601: LD_INT 16
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: IN
29608: IFFALSE 29629
// points := [ 5 , 3 , 2 ] ;
29610: LD_ADDR_VAR 0 9
29614: PUSH
29615: LD_INT 5
29617: PUSH
29618: LD_INT 3
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: LIST
29628: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29629: LD_VAR 0 6
29633: PPUSH
29634: CALL_OW 257
29638: PUSH
29639: LD_INT 17
29641: EQUAL
29642: IFFALSE 29663
// points := [ 100 , 50 , 75 ] ;
29644: LD_ADDR_VAR 0 9
29648: PUSH
29649: LD_INT 100
29651: PUSH
29652: LD_INT 50
29654: PUSH
29655: LD_INT 75
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: LIST
29662: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29663: LD_VAR 0 6
29667: PPUSH
29668: CALL_OW 257
29672: PUSH
29673: LD_INT 15
29675: EQUAL
29676: IFFALSE 29697
// points := [ 10 , 5 , 3 ] ;
29678: LD_ADDR_VAR 0 9
29682: PUSH
29683: LD_INT 10
29685: PUSH
29686: LD_INT 5
29688: PUSH
29689: LD_INT 3
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29697: LD_VAR 0 6
29701: PPUSH
29702: CALL_OW 257
29706: PUSH
29707: LD_INT 14
29709: EQUAL
29710: IFFALSE 29731
// points := [ 10 , 0 , 0 ] ;
29712: LD_ADDR_VAR 0 9
29716: PUSH
29717: LD_INT 10
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29731: LD_VAR 0 6
29735: PPUSH
29736: CALL_OW 257
29740: PUSH
29741: LD_INT 11
29743: EQUAL
29744: IFFALSE 29765
// points := [ 30 , 10 , 5 ] ;
29746: LD_ADDR_VAR 0 9
29750: PUSH
29751: LD_INT 30
29753: PUSH
29754: LD_INT 10
29756: PUSH
29757: LD_INT 5
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29765: LD_VAR 0 1
29769: PPUSH
29770: LD_INT 5
29772: PPUSH
29773: CALL_OW 321
29777: PUSH
29778: LD_INT 2
29780: EQUAL
29781: IFFALSE 29798
// bpoints := bpoints * 1.8 ;
29783: LD_ADDR_VAR 0 10
29787: PUSH
29788: LD_VAR 0 10
29792: PUSH
29793: LD_REAL  1.80000000000000E+0000
29796: MUL
29797: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29798: LD_VAR 0 6
29802: PPUSH
29803: CALL_OW 257
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: LD_INT 4
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: IN
29826: PUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: LD_INT 51
29834: PPUSH
29835: CALL_OW 321
29839: PUSH
29840: LD_INT 2
29842: EQUAL
29843: AND
29844: IFFALSE 29861
// bpoints := bpoints * 1.2 ;
29846: LD_ADDR_VAR 0 10
29850: PUSH
29851: LD_VAR 0 10
29855: PUSH
29856: LD_REAL  1.20000000000000E+0000
29859: MUL
29860: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29861: LD_VAR 0 6
29865: PPUSH
29866: CALL_OW 257
29870: PUSH
29871: LD_INT 5
29873: PUSH
29874: LD_INT 7
29876: PUSH
29877: LD_INT 9
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: LIST
29884: IN
29885: PUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: LD_INT 52
29893: PPUSH
29894: CALL_OW 321
29898: PUSH
29899: LD_INT 2
29901: EQUAL
29902: AND
29903: IFFALSE 29920
// bpoints := bpoints * 1.5 ;
29905: LD_ADDR_VAR 0 10
29909: PUSH
29910: LD_VAR 0 10
29914: PUSH
29915: LD_REAL  1.50000000000000E+0000
29918: MUL
29919: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29920: LD_VAR 0 1
29924: PPUSH
29925: LD_INT 66
29927: PPUSH
29928: CALL_OW 321
29932: PUSH
29933: LD_INT 2
29935: EQUAL
29936: IFFALSE 29953
// bpoints := bpoints * 1.1 ;
29938: LD_ADDR_VAR 0 10
29942: PUSH
29943: LD_VAR 0 10
29947: PUSH
29948: LD_REAL  1.10000000000000E+0000
29951: MUL
29952: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29953: LD_ADDR_VAR 0 10
29957: PUSH
29958: LD_VAR 0 10
29962: PUSH
29963: LD_VAR 0 6
29967: PPUSH
29968: LD_INT 1
29970: PPUSH
29971: CALL_OW 259
29975: PUSH
29976: LD_REAL  1.15000000000000E+0000
29979: MUL
29980: MUL
29981: ST_TO_ADDR
// end ; unit_vehicle :
29982: GO 30810
29984: LD_INT 2
29986: DOUBLE
29987: EQUAL
29988: IFTRUE 29992
29990: GO 30798
29992: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29993: LD_VAR 0 6
29997: PPUSH
29998: CALL_OW 264
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 42
30008: PUSH
30009: LD_INT 24
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: IN
30017: IFFALSE 30038
// points := [ 25 , 5 , 3 ] ;
30019: LD_ADDR_VAR 0 9
30023: PUSH
30024: LD_INT 25
30026: PUSH
30027: LD_INT 5
30029: PUSH
30030: LD_INT 3
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30038: LD_VAR 0 6
30042: PPUSH
30043: CALL_OW 264
30047: PUSH
30048: LD_INT 4
30050: PUSH
30051: LD_INT 43
30053: PUSH
30054: LD_INT 25
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: IN
30062: IFFALSE 30083
// points := [ 40 , 15 , 5 ] ;
30064: LD_ADDR_VAR 0 9
30068: PUSH
30069: LD_INT 40
30071: PUSH
30072: LD_INT 15
30074: PUSH
30075: LD_INT 5
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30083: LD_VAR 0 6
30087: PPUSH
30088: CALL_OW 264
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: LD_INT 23
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: IN
30103: IFFALSE 30124
// points := [ 7 , 25 , 8 ] ;
30105: LD_ADDR_VAR 0 9
30109: PUSH
30110: LD_INT 7
30112: PUSH
30113: LD_INT 25
30115: PUSH
30116: LD_INT 8
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: LIST
30123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30124: LD_VAR 0 6
30128: PPUSH
30129: CALL_OW 264
30133: PUSH
30134: LD_INT 5
30136: PUSH
30137: LD_INT 27
30139: PUSH
30140: LD_INT 44
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: IN
30148: IFFALSE 30169
// points := [ 14 , 50 , 16 ] ;
30150: LD_ADDR_VAR 0 9
30154: PUSH
30155: LD_INT 14
30157: PUSH
30158: LD_INT 50
30160: PUSH
30161: LD_INT 16
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30169: LD_VAR 0 6
30173: PPUSH
30174: CALL_OW 264
30178: PUSH
30179: LD_INT 6
30181: PUSH
30182: LD_INT 46
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: IN
30189: IFFALSE 30210
// points := [ 32 , 120 , 70 ] ;
30191: LD_ADDR_VAR 0 9
30195: PUSH
30196: LD_INT 32
30198: PUSH
30199: LD_INT 120
30201: PUSH
30202: LD_INT 70
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30210: LD_VAR 0 6
30214: PPUSH
30215: CALL_OW 264
30219: PUSH
30220: LD_INT 7
30222: PUSH
30223: LD_INT 28
30225: PUSH
30226: LD_INT 45
30228: PUSH
30229: LD_INT 92
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: IN
30238: IFFALSE 30259
// points := [ 35 , 20 , 45 ] ;
30240: LD_ADDR_VAR 0 9
30244: PUSH
30245: LD_INT 35
30247: PUSH
30248: LD_INT 20
30250: PUSH
30251: LD_INT 45
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30259: LD_VAR 0 6
30263: PPUSH
30264: CALL_OW 264
30268: PUSH
30269: LD_INT 47
30271: PUSH
30272: EMPTY
30273: LIST
30274: IN
30275: IFFALSE 30296
// points := [ 67 , 45 , 75 ] ;
30277: LD_ADDR_VAR 0 9
30281: PUSH
30282: LD_INT 67
30284: PUSH
30285: LD_INT 45
30287: PUSH
30288: LD_INT 75
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30296: LD_VAR 0 6
30300: PPUSH
30301: CALL_OW 264
30305: PUSH
30306: LD_INT 26
30308: PUSH
30309: EMPTY
30310: LIST
30311: IN
30312: IFFALSE 30333
// points := [ 120 , 30 , 80 ] ;
30314: LD_ADDR_VAR 0 9
30318: PUSH
30319: LD_INT 120
30321: PUSH
30322: LD_INT 30
30324: PUSH
30325: LD_INT 80
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30333: LD_VAR 0 6
30337: PPUSH
30338: CALL_OW 264
30342: PUSH
30343: LD_INT 22
30345: PUSH
30346: EMPTY
30347: LIST
30348: IN
30349: IFFALSE 30370
// points := [ 40 , 1 , 1 ] ;
30351: LD_ADDR_VAR 0 9
30355: PUSH
30356: LD_INT 40
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: LIST
30369: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30370: LD_VAR 0 6
30374: PPUSH
30375: CALL_OW 264
30379: PUSH
30380: LD_INT 29
30382: PUSH
30383: EMPTY
30384: LIST
30385: IN
30386: IFFALSE 30407
// points := [ 70 , 200 , 400 ] ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_INT 70
30395: PUSH
30396: LD_INT 200
30398: PUSH
30399: LD_INT 400
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30407: LD_VAR 0 6
30411: PPUSH
30412: CALL_OW 264
30416: PUSH
30417: LD_INT 14
30419: PUSH
30420: LD_INT 53
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: IN
30427: IFFALSE 30448
// points := [ 40 , 10 , 20 ] ;
30429: LD_ADDR_VAR 0 9
30433: PUSH
30434: LD_INT 40
30436: PUSH
30437: LD_INT 10
30439: PUSH
30440: LD_INT 20
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30448: LD_VAR 0 6
30452: PPUSH
30453: CALL_OW 264
30457: PUSH
30458: LD_INT 9
30460: PUSH
30461: EMPTY
30462: LIST
30463: IN
30464: IFFALSE 30485
// points := [ 5 , 70 , 20 ] ;
30466: LD_ADDR_VAR 0 9
30470: PUSH
30471: LD_INT 5
30473: PUSH
30474: LD_INT 70
30476: PUSH
30477: LD_INT 20
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30485: LD_VAR 0 6
30489: PPUSH
30490: CALL_OW 264
30494: PUSH
30495: LD_INT 10
30497: PUSH
30498: EMPTY
30499: LIST
30500: IN
30501: IFFALSE 30522
// points := [ 35 , 110 , 70 ] ;
30503: LD_ADDR_VAR 0 9
30507: PUSH
30508: LD_INT 35
30510: PUSH
30511: LD_INT 110
30513: PUSH
30514: LD_INT 70
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30522: LD_VAR 0 6
30526: PPUSH
30527: CALL_OW 265
30531: PUSH
30532: LD_INT 25
30534: EQUAL
30535: IFFALSE 30556
// points := [ 80 , 65 , 100 ] ;
30537: LD_ADDR_VAR 0 9
30541: PUSH
30542: LD_INT 80
30544: PUSH
30545: LD_INT 65
30547: PUSH
30548: LD_INT 100
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30556: LD_VAR 0 6
30560: PPUSH
30561: CALL_OW 263
30565: PUSH
30566: LD_INT 1
30568: EQUAL
30569: IFFALSE 30604
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30571: LD_ADDR_VAR 0 10
30575: PUSH
30576: LD_VAR 0 10
30580: PUSH
30581: LD_VAR 0 6
30585: PPUSH
30586: CALL_OW 311
30590: PPUSH
30591: LD_INT 3
30593: PPUSH
30594: CALL_OW 259
30598: PUSH
30599: LD_INT 4
30601: MUL
30602: MUL
30603: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30604: LD_VAR 0 6
30608: PPUSH
30609: CALL_OW 263
30613: PUSH
30614: LD_INT 2
30616: EQUAL
30617: IFFALSE 30668
// begin j := IsControledBy ( i ) ;
30619: LD_ADDR_VAR 0 7
30623: PUSH
30624: LD_VAR 0 6
30628: PPUSH
30629: CALL_OW 312
30633: ST_TO_ADDR
// if j then
30634: LD_VAR 0 7
30638: IFFALSE 30668
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30640: LD_ADDR_VAR 0 10
30644: PUSH
30645: LD_VAR 0 10
30649: PUSH
30650: LD_VAR 0 7
30654: PPUSH
30655: LD_INT 3
30657: PPUSH
30658: CALL_OW 259
30662: PUSH
30663: LD_INT 3
30665: MUL
30666: MUL
30667: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30668: LD_VAR 0 6
30672: PPUSH
30673: CALL_OW 264
30677: PUSH
30678: LD_INT 5
30680: PUSH
30681: LD_INT 6
30683: PUSH
30684: LD_INT 46
30686: PUSH
30687: LD_INT 44
30689: PUSH
30690: LD_INT 47
30692: PUSH
30693: LD_INT 45
30695: PUSH
30696: LD_INT 28
30698: PUSH
30699: LD_INT 7
30701: PUSH
30702: LD_INT 27
30704: PUSH
30705: LD_INT 29
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: IN
30720: PUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: LD_INT 52
30728: PPUSH
30729: CALL_OW 321
30733: PUSH
30734: LD_INT 2
30736: EQUAL
30737: AND
30738: IFFALSE 30755
// bpoints := bpoints * 1.2 ;
30740: LD_ADDR_VAR 0 10
30744: PUSH
30745: LD_VAR 0 10
30749: PUSH
30750: LD_REAL  1.20000000000000E+0000
30753: MUL
30754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30755: LD_VAR 0 6
30759: PPUSH
30760: CALL_OW 264
30764: PUSH
30765: LD_INT 6
30767: PUSH
30768: LD_INT 46
30770: PUSH
30771: LD_INT 47
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: LIST
30778: IN
30779: IFFALSE 30796
// bpoints := bpoints * 1.2 ;
30781: LD_ADDR_VAR 0 10
30785: PUSH
30786: LD_VAR 0 10
30790: PUSH
30791: LD_REAL  1.20000000000000E+0000
30794: MUL
30795: ST_TO_ADDR
// end ; unit_building :
30796: GO 30810
30798: LD_INT 3
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30809
30806: POP
// ; end ;
30807: GO 30810
30809: POP
// for j = 1 to 3 do
30810: LD_ADDR_VAR 0 7
30814: PUSH
30815: DOUBLE
30816: LD_INT 1
30818: DEC
30819: ST_TO_ADDR
30820: LD_INT 3
30822: PUSH
30823: FOR_TO
30824: IFFALSE 30877
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30826: LD_ADDR_VAR 0 5
30830: PUSH
30831: LD_VAR 0 5
30835: PPUSH
30836: LD_VAR 0 7
30840: PPUSH
30841: LD_VAR 0 5
30845: PUSH
30846: LD_VAR 0 7
30850: ARRAY
30851: PUSH
30852: LD_VAR 0 9
30856: PUSH
30857: LD_VAR 0 7
30861: ARRAY
30862: PUSH
30863: LD_VAR 0 10
30867: MUL
30868: PLUS
30869: PPUSH
30870: CALL_OW 1
30874: ST_TO_ADDR
30875: GO 30823
30877: POP
30878: POP
// end ;
30879: GO 29358
30881: POP
30882: POP
// result := Replace ( result , 4 , tmp ) ;
30883: LD_ADDR_VAR 0 5
30887: PUSH
30888: LD_VAR 0 5
30892: PPUSH
30893: LD_INT 4
30895: PPUSH
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 1
30905: ST_TO_ADDR
// end ;
30906: LD_VAR 0 5
30910: RET
// export function DangerAtRange ( unit , range ) ; begin
30911: LD_INT 0
30913: PPUSH
// if not unit then
30914: LD_VAR 0 1
30918: NOT
30919: IFFALSE 30923
// exit ;
30921: GO 30968
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 255
30937: PPUSH
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL_OW 250
30947: PPUSH
30948: LD_VAR 0 1
30952: PPUSH
30953: CALL_OW 251
30957: PPUSH
30958: LD_VAR 0 2
30962: PPUSH
30963: CALL 29210 0 4
30967: ST_TO_ADDR
// end ;
30968: LD_VAR 0 3
30972: RET
// export function DangerInArea ( side , area ) ; begin
30973: LD_INT 0
30975: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_VAR 0 2
30985: PPUSH
30986: LD_INT 81
30988: PUSH
30989: LD_VAR 0 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PPUSH
30998: CALL_OW 70
31002: ST_TO_ADDR
// end ;
31003: LD_VAR 0 3
31007: RET
// export function IsExtension ( b ) ; begin
31008: LD_INT 0
31010: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31011: LD_ADDR_VAR 0 2
31015: PUSH
31016: LD_VAR 0 1
31020: PUSH
31021: LD_INT 23
31023: PUSH
31024: LD_INT 20
31026: PUSH
31027: LD_INT 22
31029: PUSH
31030: LD_INT 17
31032: PUSH
31033: LD_INT 24
31035: PUSH
31036: LD_INT 21
31038: PUSH
31039: LD_INT 19
31041: PUSH
31042: LD_INT 16
31044: PUSH
31045: LD_INT 25
31047: PUSH
31048: LD_INT 18
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: IN
31063: ST_TO_ADDR
// end ;
31064: LD_VAR 0 2
31068: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31069: LD_INT 0
31071: PPUSH
31072: PPUSH
31073: PPUSH
// result := [ ] ;
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: EMPTY
31080: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31081: LD_ADDR_VAR 0 5
31085: PUSH
31086: LD_VAR 0 2
31090: PPUSH
31091: LD_INT 21
31093: PUSH
31094: LD_INT 3
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PPUSH
31101: CALL_OW 70
31105: ST_TO_ADDR
// if not tmp then
31106: LD_VAR 0 5
31110: NOT
31111: IFFALSE 31115
// exit ;
31113: GO 31179
// if checkLink then
31115: LD_VAR 0 3
31119: IFFALSE 31169
// begin for i in tmp do
31121: LD_ADDR_VAR 0 6
31125: PUSH
31126: LD_VAR 0 5
31130: PUSH
31131: FOR_IN
31132: IFFALSE 31167
// if GetBase ( i ) <> base then
31134: LD_VAR 0 6
31138: PPUSH
31139: CALL_OW 274
31143: PUSH
31144: LD_VAR 0 1
31148: NONEQUAL
31149: IFFALSE 31165
// ComLinkToBase ( base , i ) ;
31151: LD_VAR 0 1
31155: PPUSH
31156: LD_VAR 0 6
31160: PPUSH
31161: CALL_OW 169
31165: GO 31131
31167: POP
31168: POP
// end ; result := tmp ;
31169: LD_ADDR_VAR 0 4
31173: PUSH
31174: LD_VAR 0 5
31178: ST_TO_ADDR
// end ;
31179: LD_VAR 0 4
31183: RET
// export function ComComplete ( units , b ) ; var i ; begin
31184: LD_INT 0
31186: PPUSH
31187: PPUSH
// if not units then
31188: LD_VAR 0 1
31192: NOT
31193: IFFALSE 31197
// exit ;
31195: GO 31287
// for i in units do
31197: LD_ADDR_VAR 0 4
31201: PUSH
31202: LD_VAR 0 1
31206: PUSH
31207: FOR_IN
31208: IFFALSE 31285
// if BuildingStatus ( b ) = bs_build then
31210: LD_VAR 0 2
31214: PPUSH
31215: CALL_OW 461
31219: PUSH
31220: LD_INT 1
31222: EQUAL
31223: IFFALSE 31283
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31225: LD_VAR 0 4
31229: PPUSH
31230: LD_STRING h
31232: PUSH
31233: LD_VAR 0 2
31237: PPUSH
31238: CALL_OW 250
31242: PUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: CALL_OW 251
31252: PUSH
31253: LD_VAR 0 2
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: PUSH
31276: EMPTY
31277: LIST
31278: PPUSH
31279: CALL_OW 446
31283: GO 31207
31285: POP
31286: POP
// end ;
31287: LD_VAR 0 3
31291: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31292: LD_INT 0
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31300: LD_VAR 0 1
31304: NOT
31305: PUSH
31306: LD_VAR 0 1
31310: PPUSH
31311: CALL_OW 263
31315: PUSH
31316: LD_INT 2
31318: NONEQUAL
31319: OR
31320: IFFALSE 31324
// exit ;
31322: GO 31640
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31324: LD_ADDR_VAR 0 6
31328: PUSH
31329: LD_INT 22
31331: PUSH
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL_OW 255
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 30
31351: PUSH
31352: LD_INT 36
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 34
31361: PUSH
31362: LD_INT 31
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PPUSH
31378: CALL_OW 69
31382: ST_TO_ADDR
// if not tmp then
31383: LD_VAR 0 6
31387: NOT
31388: IFFALSE 31392
// exit ;
31390: GO 31640
// result := [ ] ;
31392: LD_ADDR_VAR 0 2
31396: PUSH
31397: EMPTY
31398: ST_TO_ADDR
// for i in tmp do
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: LD_VAR 0 6
31408: PUSH
31409: FOR_IN
31410: IFFALSE 31481
// begin t := UnitsInside ( i ) ;
31412: LD_ADDR_VAR 0 4
31416: PUSH
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 313
31426: ST_TO_ADDR
// if t then
31427: LD_VAR 0 4
31431: IFFALSE 31479
// for j in t do
31433: LD_ADDR_VAR 0 7
31437: PUSH
31438: LD_VAR 0 4
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31477
// result := Replace ( result , result + 1 , j ) ;
31446: LD_ADDR_VAR 0 2
31450: PUSH
31451: LD_VAR 0 2
31455: PPUSH
31456: LD_VAR 0 2
31460: PUSH
31461: LD_INT 1
31463: PLUS
31464: PPUSH
31465: LD_VAR 0 7
31469: PPUSH
31470: CALL_OW 1
31474: ST_TO_ADDR
31475: GO 31443
31477: POP
31478: POP
// end ;
31479: GO 31409
31481: POP
31482: POP
// if not result then
31483: LD_VAR 0 2
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 31640
// mech := result [ 1 ] ;
31492: LD_ADDR_VAR 0 5
31496: PUSH
31497: LD_VAR 0 2
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: ST_TO_ADDR
// if result > 1 then
31506: LD_VAR 0 2
31510: PUSH
31511: LD_INT 1
31513: GREATER
31514: IFFALSE 31626
// begin for i = 2 to result do
31516: LD_ADDR_VAR 0 3
31520: PUSH
31521: DOUBLE
31522: LD_INT 2
31524: DEC
31525: ST_TO_ADDR
31526: LD_VAR 0 2
31530: PUSH
31531: FOR_TO
31532: IFFALSE 31624
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31534: LD_ADDR_VAR 0 4
31538: PUSH
31539: LD_VAR 0 2
31543: PUSH
31544: LD_VAR 0 3
31548: ARRAY
31549: PPUSH
31550: LD_INT 3
31552: PPUSH
31553: CALL_OW 259
31557: PUSH
31558: LD_VAR 0 2
31562: PUSH
31563: LD_VAR 0 3
31567: ARRAY
31568: PPUSH
31569: CALL_OW 432
31573: MINUS
31574: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31575: LD_VAR 0 4
31579: PUSH
31580: LD_VAR 0 5
31584: PPUSH
31585: LD_INT 3
31587: PPUSH
31588: CALL_OW 259
31592: PUSH
31593: LD_VAR 0 5
31597: PPUSH
31598: CALL_OW 432
31602: MINUS
31603: GREATEREQUAL
31604: IFFALSE 31622
// mech := result [ i ] ;
31606: LD_ADDR_VAR 0 5
31610: PUSH
31611: LD_VAR 0 2
31615: PUSH
31616: LD_VAR 0 3
31620: ARRAY
31621: ST_TO_ADDR
// end ;
31622: GO 31531
31624: POP
31625: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31626: LD_VAR 0 1
31630: PPUSH
31631: LD_VAR 0 5
31635: PPUSH
31636: CALL_OW 135
// end ;
31640: LD_VAR 0 2
31644: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31645: LD_INT 0
31647: PPUSH
31648: PPUSH
31649: PPUSH
31650: PPUSH
31651: PPUSH
31652: PPUSH
31653: PPUSH
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
31658: PPUSH
31659: PPUSH
// result := [ ] ;
31660: LD_ADDR_VAR 0 7
31664: PUSH
31665: EMPTY
31666: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31667: LD_VAR 0 1
31671: PPUSH
31672: CALL_OW 266
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: IN
31687: NOT
31688: IFFALSE 31692
// exit ;
31690: GO 33326
// if name then
31692: LD_VAR 0 3
31696: IFFALSE 31712
// SetBName ( base_dep , name ) ;
31698: LD_VAR 0 1
31702: PPUSH
31703: LD_VAR 0 3
31707: PPUSH
31708: CALL_OW 500
// base := GetBase ( base_dep ) ;
31712: LD_ADDR_VAR 0 15
31716: PUSH
31717: LD_VAR 0 1
31721: PPUSH
31722: CALL_OW 274
31726: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31727: LD_ADDR_VAR 0 16
31731: PUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 255
31741: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31742: LD_ADDR_VAR 0 17
31746: PUSH
31747: LD_VAR 0 1
31751: PPUSH
31752: CALL_OW 248
31756: ST_TO_ADDR
// if sources then
31757: LD_VAR 0 5
31761: IFFALSE 31808
// for i = 1 to 3 do
31763: LD_ADDR_VAR 0 8
31767: PUSH
31768: DOUBLE
31769: LD_INT 1
31771: DEC
31772: ST_TO_ADDR
31773: LD_INT 3
31775: PUSH
31776: FOR_TO
31777: IFFALSE 31806
// AddResourceType ( base , i , sources [ i ] ) ;
31779: LD_VAR 0 15
31783: PPUSH
31784: LD_VAR 0 8
31788: PPUSH
31789: LD_VAR 0 5
31793: PUSH
31794: LD_VAR 0 8
31798: ARRAY
31799: PPUSH
31800: CALL_OW 276
31804: GO 31776
31806: POP
31807: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31808: LD_ADDR_VAR 0 18
31812: PUSH
31813: LD_VAR 0 15
31817: PPUSH
31818: LD_VAR 0 2
31822: PPUSH
31823: LD_INT 1
31825: PPUSH
31826: CALL 31069 0 3
31830: ST_TO_ADDR
// InitHc ;
31831: CALL_OW 19
// InitUc ;
31835: CALL_OW 18
// uc_side := side ;
31839: LD_ADDR_OWVAR 20
31843: PUSH
31844: LD_VAR 0 16
31848: ST_TO_ADDR
// uc_nation := nation ;
31849: LD_ADDR_OWVAR 21
31853: PUSH
31854: LD_VAR 0 17
31858: ST_TO_ADDR
// if buildings then
31859: LD_VAR 0 18
31863: IFFALSE 33185
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31865: LD_ADDR_VAR 0 19
31869: PUSH
31870: LD_VAR 0 18
31874: PPUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 30
31880: PUSH
31881: LD_INT 29
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 30
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: PPUSH
31903: CALL_OW 72
31907: ST_TO_ADDR
// if tmp then
31908: LD_VAR 0 19
31912: IFFALSE 31960
// for i in tmp do
31914: LD_ADDR_VAR 0 8
31918: PUSH
31919: LD_VAR 0 19
31923: PUSH
31924: FOR_IN
31925: IFFALSE 31958
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31927: LD_VAR 0 8
31931: PPUSH
31932: CALL_OW 250
31936: PPUSH
31937: LD_VAR 0 8
31941: PPUSH
31942: CALL_OW 251
31946: PPUSH
31947: LD_VAR 0 16
31951: PPUSH
31952: CALL_OW 441
31956: GO 31924
31958: POP
31959: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31960: LD_VAR 0 18
31964: PPUSH
31965: LD_INT 2
31967: PUSH
31968: LD_INT 30
31970: PUSH
31971: LD_INT 32
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 30
31980: PUSH
31981: LD_INT 33
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: PPUSH
31993: CALL_OW 72
31997: IFFALSE 32085
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31999: LD_ADDR_VAR 0 8
32003: PUSH
32004: LD_VAR 0 18
32008: PPUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 30
32014: PUSH
32015: LD_INT 32
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 30
32024: PUSH
32025: LD_INT 33
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: PPUSH
32037: CALL_OW 72
32041: PUSH
32042: FOR_IN
32043: IFFALSE 32083
// begin if not GetBWeapon ( i ) then
32045: LD_VAR 0 8
32049: PPUSH
32050: CALL_OW 269
32054: NOT
32055: IFFALSE 32081
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32057: LD_VAR 0 8
32061: PPUSH
32062: LD_VAR 0 8
32066: PPUSH
32067: LD_VAR 0 2
32071: PPUSH
32072: CALL 33331 0 2
32076: PPUSH
32077: CALL_OW 431
// end ;
32081: GO 32042
32083: POP
32084: POP
// end ; for i = 1 to personel do
32085: LD_ADDR_VAR 0 8
32089: PUSH
32090: DOUBLE
32091: LD_INT 1
32093: DEC
32094: ST_TO_ADDR
32095: LD_VAR 0 6
32099: PUSH
32100: FOR_TO
32101: IFFALSE 33165
// begin if i > 4 then
32103: LD_VAR 0 8
32107: PUSH
32108: LD_INT 4
32110: GREATER
32111: IFFALSE 32115
// break ;
32113: GO 33165
// case i of 1 :
32115: LD_VAR 0 8
32119: PUSH
32120: LD_INT 1
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32208
32128: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32129: LD_ADDR_VAR 0 12
32133: PUSH
32134: LD_VAR 0 18
32138: PPUSH
32139: LD_INT 22
32141: PUSH
32142: LD_VAR 0 16
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 58
32153: PUSH
32154: EMPTY
32155: LIST
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: LD_INT 30
32162: PUSH
32163: LD_INT 32
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 30
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 30
32182: PUSH
32183: LD_INT 5
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: PPUSH
32201: CALL_OW 72
32205: ST_TO_ADDR
32206: GO 32430
32208: LD_INT 2
32210: DOUBLE
32211: EQUAL
32212: IFTRUE 32216
32214: GO 32278
32216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32217: LD_ADDR_VAR 0 12
32221: PUSH
32222: LD_VAR 0 18
32226: PPUSH
32227: LD_INT 22
32229: PUSH
32230: LD_VAR 0 16
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: PUSH
32242: LD_INT 30
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 30
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PPUSH
32271: CALL_OW 72
32275: ST_TO_ADDR
32276: GO 32430
32278: LD_INT 3
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32348
32286: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32287: LD_ADDR_VAR 0 12
32291: PUSH
32292: LD_VAR 0 18
32296: PPUSH
32297: LD_INT 22
32299: PUSH
32300: LD_VAR 0 16
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 30
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 30
32324: PUSH
32325: LD_INT 3
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PPUSH
32341: CALL_OW 72
32345: ST_TO_ADDR
32346: GO 32430
32348: LD_INT 4
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32429
32356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32357: LD_ADDR_VAR 0 12
32361: PUSH
32362: LD_VAR 0 18
32366: PPUSH
32367: LD_INT 22
32369: PUSH
32370: LD_VAR 0 16
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: PUSH
32382: LD_INT 30
32384: PUSH
32385: LD_INT 6
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 30
32394: PUSH
32395: LD_INT 7
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 30
32404: PUSH
32405: LD_INT 8
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PPUSH
32422: CALL_OW 72
32426: ST_TO_ADDR
32427: GO 32430
32429: POP
// if i = 1 then
32430: LD_VAR 0 8
32434: PUSH
32435: LD_INT 1
32437: EQUAL
32438: IFFALSE 32549
// begin tmp := [ ] ;
32440: LD_ADDR_VAR 0 19
32444: PUSH
32445: EMPTY
32446: ST_TO_ADDR
// for j in f do
32447: LD_ADDR_VAR 0 9
32451: PUSH
32452: LD_VAR 0 12
32456: PUSH
32457: FOR_IN
32458: IFFALSE 32531
// if GetBType ( j ) = b_bunker then
32460: LD_VAR 0 9
32464: PPUSH
32465: CALL_OW 266
32469: PUSH
32470: LD_INT 32
32472: EQUAL
32473: IFFALSE 32500
// tmp := Insert ( tmp , 1 , j ) else
32475: LD_ADDR_VAR 0 19
32479: PUSH
32480: LD_VAR 0 19
32484: PPUSH
32485: LD_INT 1
32487: PPUSH
32488: LD_VAR 0 9
32492: PPUSH
32493: CALL_OW 2
32497: ST_TO_ADDR
32498: GO 32529
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32500: LD_ADDR_VAR 0 19
32504: PUSH
32505: LD_VAR 0 19
32509: PPUSH
32510: LD_VAR 0 19
32514: PUSH
32515: LD_INT 1
32517: PLUS
32518: PPUSH
32519: LD_VAR 0 9
32523: PPUSH
32524: CALL_OW 2
32528: ST_TO_ADDR
32529: GO 32457
32531: POP
32532: POP
// if tmp then
32533: LD_VAR 0 19
32537: IFFALSE 32549
// f := tmp ;
32539: LD_ADDR_VAR 0 12
32543: PUSH
32544: LD_VAR 0 19
32548: ST_TO_ADDR
// end ; x := personel [ i ] ;
32549: LD_ADDR_VAR 0 13
32553: PUSH
32554: LD_VAR 0 6
32558: PUSH
32559: LD_VAR 0 8
32563: ARRAY
32564: ST_TO_ADDR
// if x = - 1 then
32565: LD_VAR 0 13
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: EQUAL
32574: IFFALSE 32783
// begin for j in f do
32576: LD_ADDR_VAR 0 9
32580: PUSH
32581: LD_VAR 0 12
32585: PUSH
32586: FOR_IN
32587: IFFALSE 32779
// repeat InitHc ;
32589: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32593: LD_VAR 0 9
32597: PPUSH
32598: CALL_OW 266
32602: PUSH
32603: LD_INT 5
32605: EQUAL
32606: IFFALSE 32676
// begin if UnitsInside ( j ) < 3 then
32608: LD_VAR 0 9
32612: PPUSH
32613: CALL_OW 313
32617: PUSH
32618: LD_INT 3
32620: LESS
32621: IFFALSE 32657
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32623: LD_INT 0
32625: PPUSH
32626: LD_INT 5
32628: PUSH
32629: LD_INT 8
32631: PUSH
32632: LD_INT 9
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: PUSH
32640: LD_VAR 0 17
32644: ARRAY
32645: PPUSH
32646: LD_VAR 0 4
32650: PPUSH
32651: CALL_OW 380
32655: GO 32674
// PrepareHuman ( false , i , skill ) ;
32657: LD_INT 0
32659: PPUSH
32660: LD_VAR 0 8
32664: PPUSH
32665: LD_VAR 0 4
32669: PPUSH
32670: CALL_OW 380
// end else
32674: GO 32693
// PrepareHuman ( false , i , skill ) ;
32676: LD_INT 0
32678: PPUSH
32679: LD_VAR 0 8
32683: PPUSH
32684: LD_VAR 0 4
32688: PPUSH
32689: CALL_OW 380
// un := CreateHuman ;
32693: LD_ADDR_VAR 0 14
32697: PUSH
32698: CALL_OW 44
32702: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32703: LD_ADDR_VAR 0 7
32707: PUSH
32708: LD_VAR 0 7
32712: PPUSH
32713: LD_INT 1
32715: PPUSH
32716: LD_VAR 0 14
32720: PPUSH
32721: CALL_OW 2
32725: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32726: LD_VAR 0 14
32730: PPUSH
32731: LD_VAR 0 9
32735: PPUSH
32736: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32740: LD_VAR 0 9
32744: PPUSH
32745: CALL_OW 313
32749: PUSH
32750: LD_INT 6
32752: EQUAL
32753: PUSH
32754: LD_VAR 0 9
32758: PPUSH
32759: CALL_OW 266
32763: PUSH
32764: LD_INT 32
32766: PUSH
32767: LD_INT 31
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: IN
32774: OR
32775: IFFALSE 32589
32777: GO 32586
32779: POP
32780: POP
// end else
32781: GO 33163
// for j = 1 to x do
32783: LD_ADDR_VAR 0 9
32787: PUSH
32788: DOUBLE
32789: LD_INT 1
32791: DEC
32792: ST_TO_ADDR
32793: LD_VAR 0 13
32797: PUSH
32798: FOR_TO
32799: IFFALSE 33161
// begin InitHc ;
32801: CALL_OW 19
// if not f then
32805: LD_VAR 0 12
32809: NOT
32810: IFFALSE 32899
// begin PrepareHuman ( false , i , skill ) ;
32812: LD_INT 0
32814: PPUSH
32815: LD_VAR 0 8
32819: PPUSH
32820: LD_VAR 0 4
32824: PPUSH
32825: CALL_OW 380
// un := CreateHuman ;
32829: LD_ADDR_VAR 0 14
32833: PUSH
32834: CALL_OW 44
32838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32839: LD_ADDR_VAR 0 7
32843: PUSH
32844: LD_VAR 0 7
32848: PPUSH
32849: LD_INT 1
32851: PPUSH
32852: LD_VAR 0 14
32856: PPUSH
32857: CALL_OW 2
32861: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32862: LD_VAR 0 14
32866: PPUSH
32867: LD_VAR 0 1
32871: PPUSH
32872: CALL_OW 250
32876: PPUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 251
32886: PPUSH
32887: LD_INT 10
32889: PPUSH
32890: LD_INT 0
32892: PPUSH
32893: CALL_OW 50
// continue ;
32897: GO 32798
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32899: LD_VAR 0 12
32903: PUSH
32904: LD_INT 1
32906: ARRAY
32907: PPUSH
32908: CALL_OW 313
32912: PUSH
32913: LD_VAR 0 12
32917: PUSH
32918: LD_INT 1
32920: ARRAY
32921: PPUSH
32922: CALL_OW 266
32926: PUSH
32927: LD_INT 32
32929: PUSH
32930: LD_INT 31
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: IN
32937: AND
32938: PUSH
32939: LD_VAR 0 12
32943: PUSH
32944: LD_INT 1
32946: ARRAY
32947: PPUSH
32948: CALL_OW 313
32952: PUSH
32953: LD_INT 6
32955: EQUAL
32956: OR
32957: IFFALSE 32977
// f := Delete ( f , 1 ) ;
32959: LD_ADDR_VAR 0 12
32963: PUSH
32964: LD_VAR 0 12
32968: PPUSH
32969: LD_INT 1
32971: PPUSH
32972: CALL_OW 3
32976: ST_TO_ADDR
// if not f then
32977: LD_VAR 0 12
32981: NOT
32982: IFFALSE 33000
// begin x := x + 2 ;
32984: LD_ADDR_VAR 0 13
32988: PUSH
32989: LD_VAR 0 13
32993: PUSH
32994: LD_INT 2
32996: PLUS
32997: ST_TO_ADDR
// continue ;
32998: GO 32798
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33000: LD_VAR 0 12
33004: PUSH
33005: LD_INT 1
33007: ARRAY
33008: PPUSH
33009: CALL_OW 266
33013: PUSH
33014: LD_INT 5
33016: EQUAL
33017: IFFALSE 33091
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33019: LD_VAR 0 12
33023: PUSH
33024: LD_INT 1
33026: ARRAY
33027: PPUSH
33028: CALL_OW 313
33032: PUSH
33033: LD_INT 3
33035: LESS
33036: IFFALSE 33072
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33038: LD_INT 0
33040: PPUSH
33041: LD_INT 5
33043: PUSH
33044: LD_INT 8
33046: PUSH
33047: LD_INT 9
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: PUSH
33055: LD_VAR 0 17
33059: ARRAY
33060: PPUSH
33061: LD_VAR 0 4
33065: PPUSH
33066: CALL_OW 380
33070: GO 33089
// PrepareHuman ( false , i , skill ) ;
33072: LD_INT 0
33074: PPUSH
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_VAR 0 4
33084: PPUSH
33085: CALL_OW 380
// end else
33089: GO 33108
// PrepareHuman ( false , i , skill ) ;
33091: LD_INT 0
33093: PPUSH
33094: LD_VAR 0 8
33098: PPUSH
33099: LD_VAR 0 4
33103: PPUSH
33104: CALL_OW 380
// un := CreateHuman ;
33108: LD_ADDR_VAR 0 14
33112: PUSH
33113: CALL_OW 44
33117: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33118: LD_ADDR_VAR 0 7
33122: PUSH
33123: LD_VAR 0 7
33127: PPUSH
33128: LD_INT 1
33130: PPUSH
33131: LD_VAR 0 14
33135: PPUSH
33136: CALL_OW 2
33140: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33141: LD_VAR 0 14
33145: PPUSH
33146: LD_VAR 0 12
33150: PUSH
33151: LD_INT 1
33153: ARRAY
33154: PPUSH
33155: CALL_OW 52
// end ;
33159: GO 32798
33161: POP
33162: POP
// end ;
33163: GO 32100
33165: POP
33166: POP
// result := result ^ buildings ;
33167: LD_ADDR_VAR 0 7
33171: PUSH
33172: LD_VAR 0 7
33176: PUSH
33177: LD_VAR 0 18
33181: ADD
33182: ST_TO_ADDR
// end else
33183: GO 33326
// begin for i = 1 to personel do
33185: LD_ADDR_VAR 0 8
33189: PUSH
33190: DOUBLE
33191: LD_INT 1
33193: DEC
33194: ST_TO_ADDR
33195: LD_VAR 0 6
33199: PUSH
33200: FOR_TO
33201: IFFALSE 33324
// begin if i > 4 then
33203: LD_VAR 0 8
33207: PUSH
33208: LD_INT 4
33210: GREATER
33211: IFFALSE 33215
// break ;
33213: GO 33324
// x := personel [ i ] ;
33215: LD_ADDR_VAR 0 13
33219: PUSH
33220: LD_VAR 0 6
33224: PUSH
33225: LD_VAR 0 8
33229: ARRAY
33230: ST_TO_ADDR
// if x = - 1 then
33231: LD_VAR 0 13
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: EQUAL
33240: IFFALSE 33244
// continue ;
33242: GO 33200
// PrepareHuman ( false , i , skill ) ;
33244: LD_INT 0
33246: PPUSH
33247: LD_VAR 0 8
33251: PPUSH
33252: LD_VAR 0 4
33256: PPUSH
33257: CALL_OW 380
// un := CreateHuman ;
33261: LD_ADDR_VAR 0 14
33265: PUSH
33266: CALL_OW 44
33270: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33271: LD_VAR 0 14
33275: PPUSH
33276: LD_VAR 0 1
33280: PPUSH
33281: CALL_OW 250
33285: PPUSH
33286: LD_VAR 0 1
33290: PPUSH
33291: CALL_OW 251
33295: PPUSH
33296: LD_INT 10
33298: PPUSH
33299: LD_INT 0
33301: PPUSH
33302: CALL_OW 50
// result := result ^ un ;
33306: LD_ADDR_VAR 0 7
33310: PUSH
33311: LD_VAR 0 7
33315: PUSH
33316: LD_VAR 0 14
33320: ADD
33321: ST_TO_ADDR
// end ;
33322: GO 33200
33324: POP
33325: POP
// end ; end ;
33326: LD_VAR 0 7
33330: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33331: LD_INT 0
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
// result := false ;
33349: LD_ADDR_VAR 0 3
33353: PUSH
33354: LD_INT 0
33356: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33357: LD_VAR 0 1
33361: NOT
33362: PUSH
33363: LD_VAR 0 1
33367: PPUSH
33368: CALL_OW 266
33372: PUSH
33373: LD_INT 32
33375: PUSH
33376: LD_INT 33
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: IN
33383: NOT
33384: OR
33385: IFFALSE 33389
// exit ;
33387: GO 34498
// nat := GetNation ( tower ) ;
33389: LD_ADDR_VAR 0 12
33393: PUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: CALL_OW 248
33403: ST_TO_ADDR
// side := GetSide ( tower ) ;
33404: LD_ADDR_VAR 0 16
33408: PUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL_OW 255
33418: ST_TO_ADDR
// x := GetX ( tower ) ;
33419: LD_ADDR_VAR 0 10
33423: PUSH
33424: LD_VAR 0 1
33428: PPUSH
33429: CALL_OW 250
33433: ST_TO_ADDR
// y := GetY ( tower ) ;
33434: LD_ADDR_VAR 0 11
33438: PUSH
33439: LD_VAR 0 1
33443: PPUSH
33444: CALL_OW 251
33448: ST_TO_ADDR
// if not x or not y then
33449: LD_VAR 0 10
33453: NOT
33454: PUSH
33455: LD_VAR 0 11
33459: NOT
33460: OR
33461: IFFALSE 33465
// exit ;
33463: GO 34498
// weapon := 0 ;
33465: LD_ADDR_VAR 0 18
33469: PUSH
33470: LD_INT 0
33472: ST_TO_ADDR
// fac_list := [ ] ;
33473: LD_ADDR_VAR 0 17
33477: PUSH
33478: EMPTY
33479: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33480: LD_ADDR_VAR 0 6
33484: PUSH
33485: LD_VAR 0 1
33489: PPUSH
33490: CALL_OW 274
33494: PPUSH
33495: LD_VAR 0 2
33499: PPUSH
33500: LD_INT 0
33502: PPUSH
33503: CALL 31069 0 3
33507: PPUSH
33508: LD_INT 30
33510: PUSH
33511: LD_INT 3
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PPUSH
33518: CALL_OW 72
33522: ST_TO_ADDR
// if not factories then
33523: LD_VAR 0 6
33527: NOT
33528: IFFALSE 33532
// exit ;
33530: GO 34498
// for i in factories do
33532: LD_ADDR_VAR 0 8
33536: PUSH
33537: LD_VAR 0 6
33541: PUSH
33542: FOR_IN
33543: IFFALSE 33568
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33545: LD_ADDR_VAR 0 17
33549: PUSH
33550: LD_VAR 0 17
33554: PUSH
33555: LD_VAR 0 8
33559: PPUSH
33560: CALL_OW 478
33564: UNION
33565: ST_TO_ADDR
33566: GO 33542
33568: POP
33569: POP
// if not fac_list then
33570: LD_VAR 0 17
33574: NOT
33575: IFFALSE 33579
// exit ;
33577: GO 34498
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33579: LD_ADDR_VAR 0 5
33583: PUSH
33584: LD_INT 4
33586: PUSH
33587: LD_INT 5
33589: PUSH
33590: LD_INT 9
33592: PUSH
33593: LD_INT 10
33595: PUSH
33596: LD_INT 6
33598: PUSH
33599: LD_INT 7
33601: PUSH
33602: LD_INT 11
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 27
33616: PUSH
33617: LD_INT 28
33619: PUSH
33620: LD_INT 26
33622: PUSH
33623: LD_INT 30
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 43
33634: PUSH
33635: LD_INT 44
33637: PUSH
33638: LD_INT 46
33640: PUSH
33641: LD_INT 45
33643: PUSH
33644: LD_INT 47
33646: PUSH
33647: LD_INT 49
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: PUSH
33663: LD_VAR 0 12
33667: ARRAY
33668: ST_TO_ADDR
// list := list isect fac_list ;
33669: LD_ADDR_VAR 0 5
33673: PUSH
33674: LD_VAR 0 5
33678: PUSH
33679: LD_VAR 0 17
33683: ISECT
33684: ST_TO_ADDR
// if not list then
33685: LD_VAR 0 5
33689: NOT
33690: IFFALSE 33694
// exit ;
33692: GO 34498
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33694: LD_VAR 0 12
33698: PUSH
33699: LD_INT 3
33701: EQUAL
33702: PUSH
33703: LD_INT 49
33705: PUSH
33706: LD_VAR 0 5
33710: IN
33711: AND
33712: PUSH
33713: LD_INT 31
33715: PPUSH
33716: LD_VAR 0 16
33720: PPUSH
33721: CALL_OW 321
33725: PUSH
33726: LD_INT 2
33728: EQUAL
33729: AND
33730: IFFALSE 33790
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33732: LD_INT 22
33734: PUSH
33735: LD_VAR 0 16
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 35
33746: PUSH
33747: LD_INT 49
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 91
33756: PUSH
33757: LD_VAR 0 1
33761: PUSH
33762: LD_INT 10
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: LIST
33774: PPUSH
33775: CALL_OW 69
33779: NOT
33780: IFFALSE 33790
// weapon := ru_time_lapser ;
33782: LD_ADDR_VAR 0 18
33786: PUSH
33787: LD_INT 49
33789: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33790: LD_VAR 0 12
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: IN
33805: PUSH
33806: LD_INT 11
33808: PUSH
33809: LD_VAR 0 5
33813: IN
33814: PUSH
33815: LD_INT 30
33817: PUSH
33818: LD_VAR 0 5
33822: IN
33823: OR
33824: AND
33825: PUSH
33826: LD_INT 6
33828: PPUSH
33829: LD_VAR 0 16
33833: PPUSH
33834: CALL_OW 321
33838: PUSH
33839: LD_INT 2
33841: EQUAL
33842: AND
33843: IFFALSE 34008
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33845: LD_INT 22
33847: PUSH
33848: LD_VAR 0 16
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 35
33862: PUSH
33863: LD_INT 11
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 35
33872: PUSH
33873: LD_INT 30
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 91
33887: PUSH
33888: LD_VAR 0 1
33892: PUSH
33893: LD_INT 18
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: LIST
33905: PPUSH
33906: CALL_OW 69
33910: NOT
33911: PUSH
33912: LD_INT 22
33914: PUSH
33915: LD_VAR 0 16
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: LD_INT 30
33929: PUSH
33930: LD_INT 32
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 30
33939: PUSH
33940: LD_INT 33
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 91
33954: PUSH
33955: LD_VAR 0 1
33959: PUSH
33960: LD_INT 12
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: PPUSH
33976: CALL_OW 69
33980: PUSH
33981: LD_INT 2
33983: GREATER
33984: AND
33985: IFFALSE 34008
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33987: LD_ADDR_VAR 0 18
33991: PUSH
33992: LD_INT 11
33994: PUSH
33995: LD_INT 30
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_VAR 0 12
34006: ARRAY
34007: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34008: LD_VAR 0 18
34012: NOT
34013: PUSH
34014: LD_INT 40
34016: PPUSH
34017: LD_VAR 0 16
34021: PPUSH
34022: CALL_OW 321
34026: PUSH
34027: LD_INT 2
34029: EQUAL
34030: AND
34031: PUSH
34032: LD_INT 7
34034: PUSH
34035: LD_VAR 0 5
34039: IN
34040: PUSH
34041: LD_INT 28
34043: PUSH
34044: LD_VAR 0 5
34048: IN
34049: OR
34050: PUSH
34051: LD_INT 45
34053: PUSH
34054: LD_VAR 0 5
34058: IN
34059: OR
34060: AND
34061: IFFALSE 34315
// begin hex := GetHexInfo ( x , y ) ;
34063: LD_ADDR_VAR 0 4
34067: PUSH
34068: LD_VAR 0 10
34072: PPUSH
34073: LD_VAR 0 11
34077: PPUSH
34078: CALL_OW 546
34082: ST_TO_ADDR
// if hex [ 1 ] then
34083: LD_VAR 0 4
34087: PUSH
34088: LD_INT 1
34090: ARRAY
34091: IFFALSE 34095
// exit ;
34093: GO 34498
// height := hex [ 2 ] ;
34095: LD_ADDR_VAR 0 15
34099: PUSH
34100: LD_VAR 0 4
34104: PUSH
34105: LD_INT 2
34107: ARRAY
34108: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34109: LD_ADDR_VAR 0 14
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 5
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: ST_TO_ADDR
// for i in tmp do
34132: LD_ADDR_VAR 0 8
34136: PUSH
34137: LD_VAR 0 14
34141: PUSH
34142: FOR_IN
34143: IFFALSE 34313
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34145: LD_ADDR_VAR 0 9
34149: PUSH
34150: LD_VAR 0 10
34154: PPUSH
34155: LD_VAR 0 8
34159: PPUSH
34160: LD_INT 5
34162: PPUSH
34163: CALL_OW 272
34167: PUSH
34168: LD_VAR 0 11
34172: PPUSH
34173: LD_VAR 0 8
34177: PPUSH
34178: LD_INT 5
34180: PPUSH
34181: CALL_OW 273
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34190: LD_VAR 0 9
34194: PUSH
34195: LD_INT 1
34197: ARRAY
34198: PPUSH
34199: LD_VAR 0 9
34203: PUSH
34204: LD_INT 2
34206: ARRAY
34207: PPUSH
34208: CALL_OW 488
34212: IFFALSE 34311
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34214: LD_ADDR_VAR 0 4
34218: PUSH
34219: LD_VAR 0 9
34223: PUSH
34224: LD_INT 1
34226: ARRAY
34227: PPUSH
34228: LD_VAR 0 9
34232: PUSH
34233: LD_INT 2
34235: ARRAY
34236: PPUSH
34237: CALL_OW 546
34241: ST_TO_ADDR
// if hex [ 1 ] then
34242: LD_VAR 0 4
34246: PUSH
34247: LD_INT 1
34249: ARRAY
34250: IFFALSE 34254
// continue ;
34252: GO 34142
// h := hex [ 2 ] ;
34254: LD_ADDR_VAR 0 13
34258: PUSH
34259: LD_VAR 0 4
34263: PUSH
34264: LD_INT 2
34266: ARRAY
34267: ST_TO_ADDR
// if h + 7 < height then
34268: LD_VAR 0 13
34272: PUSH
34273: LD_INT 7
34275: PLUS
34276: PUSH
34277: LD_VAR 0 15
34281: LESS
34282: IFFALSE 34311
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34284: LD_ADDR_VAR 0 18
34288: PUSH
34289: LD_INT 7
34291: PUSH
34292: LD_INT 28
34294: PUSH
34295: LD_INT 45
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: PUSH
34303: LD_VAR 0 12
34307: ARRAY
34308: ST_TO_ADDR
// break ;
34309: GO 34313
// end ; end ; end ;
34311: GO 34142
34313: POP
34314: POP
// end ; if not weapon then
34315: LD_VAR 0 18
34319: NOT
34320: IFFALSE 34380
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34322: LD_ADDR_VAR 0 5
34326: PUSH
34327: LD_VAR 0 5
34331: PUSH
34332: LD_INT 11
34334: PUSH
34335: LD_INT 30
34337: PUSH
34338: LD_INT 49
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: DIFF
34346: ST_TO_ADDR
// if not list then
34347: LD_VAR 0 5
34351: NOT
34352: IFFALSE 34356
// exit ;
34354: GO 34498
// weapon := list [ rand ( 1 , list ) ] ;
34356: LD_ADDR_VAR 0 18
34360: PUSH
34361: LD_VAR 0 5
34365: PUSH
34366: LD_INT 1
34368: PPUSH
34369: LD_VAR 0 5
34373: PPUSH
34374: CALL_OW 12
34378: ARRAY
34379: ST_TO_ADDR
// end ; if weapon then
34380: LD_VAR 0 18
34384: IFFALSE 34498
// begin tmp := CostOfWeapon ( weapon ) ;
34386: LD_ADDR_VAR 0 14
34390: PUSH
34391: LD_VAR 0 18
34395: PPUSH
34396: CALL_OW 451
34400: ST_TO_ADDR
// j := GetBase ( tower ) ;
34401: LD_ADDR_VAR 0 9
34405: PUSH
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 274
34415: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34416: LD_VAR 0 9
34420: PPUSH
34421: LD_INT 1
34423: PPUSH
34424: CALL_OW 275
34428: PUSH
34429: LD_VAR 0 14
34433: PUSH
34434: LD_INT 1
34436: ARRAY
34437: GREATEREQUAL
34438: PUSH
34439: LD_VAR 0 9
34443: PPUSH
34444: LD_INT 2
34446: PPUSH
34447: CALL_OW 275
34451: PUSH
34452: LD_VAR 0 14
34456: PUSH
34457: LD_INT 2
34459: ARRAY
34460: GREATEREQUAL
34461: AND
34462: PUSH
34463: LD_VAR 0 9
34467: PPUSH
34468: LD_INT 3
34470: PPUSH
34471: CALL_OW 275
34475: PUSH
34476: LD_VAR 0 14
34480: PUSH
34481: LD_INT 3
34483: ARRAY
34484: GREATEREQUAL
34485: AND
34486: IFFALSE 34498
// result := weapon ;
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_VAR 0 18
34497: ST_TO_ADDR
// end ; end ;
34498: LD_VAR 0 3
34502: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34503: LD_INT 0
34505: PPUSH
34506: PPUSH
// result := true ;
34507: LD_ADDR_VAR 0 3
34511: PUSH
34512: LD_INT 1
34514: ST_TO_ADDR
// if array1 = array2 then
34515: LD_VAR 0 1
34519: PUSH
34520: LD_VAR 0 2
34524: EQUAL
34525: IFFALSE 34585
// begin for i = 1 to array1 do
34527: LD_ADDR_VAR 0 4
34531: PUSH
34532: DOUBLE
34533: LD_INT 1
34535: DEC
34536: ST_TO_ADDR
34537: LD_VAR 0 1
34541: PUSH
34542: FOR_TO
34543: IFFALSE 34581
// if array1 [ i ] <> array2 [ i ] then
34545: LD_VAR 0 1
34549: PUSH
34550: LD_VAR 0 4
34554: ARRAY
34555: PUSH
34556: LD_VAR 0 2
34560: PUSH
34561: LD_VAR 0 4
34565: ARRAY
34566: NONEQUAL
34567: IFFALSE 34579
// begin result := false ;
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 0
34576: ST_TO_ADDR
// break ;
34577: GO 34581
// end ;
34579: GO 34542
34581: POP
34582: POP
// end else
34583: GO 34593
// result := false ;
34585: LD_ADDR_VAR 0 3
34589: PUSH
34590: LD_INT 0
34592: ST_TO_ADDR
// end ;
34593: LD_VAR 0 3
34597: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34598: LD_INT 0
34600: PPUSH
34601: PPUSH
// if not array1 or not array2 then
34602: LD_VAR 0 1
34606: NOT
34607: PUSH
34608: LD_VAR 0 2
34612: NOT
34613: OR
34614: IFFALSE 34618
// exit ;
34616: GO 34682
// result := true ;
34618: LD_ADDR_VAR 0 3
34622: PUSH
34623: LD_INT 1
34625: ST_TO_ADDR
// for i = 1 to array1 do
34626: LD_ADDR_VAR 0 4
34630: PUSH
34631: DOUBLE
34632: LD_INT 1
34634: DEC
34635: ST_TO_ADDR
34636: LD_VAR 0 1
34640: PUSH
34641: FOR_TO
34642: IFFALSE 34680
// if array1 [ i ] <> array2 [ i ] then
34644: LD_VAR 0 1
34648: PUSH
34649: LD_VAR 0 4
34653: ARRAY
34654: PUSH
34655: LD_VAR 0 2
34659: PUSH
34660: LD_VAR 0 4
34664: ARRAY
34665: NONEQUAL
34666: IFFALSE 34678
// begin result := false ;
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_INT 0
34675: ST_TO_ADDR
// break ;
34676: GO 34680
// end ;
34678: GO 34641
34680: POP
34681: POP
// end ;
34682: LD_VAR 0 3
34686: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34687: LD_INT 0
34689: PPUSH
34690: PPUSH
34691: PPUSH
// pom := GetBase ( fac ) ;
34692: LD_ADDR_VAR 0 5
34696: PUSH
34697: LD_VAR 0 1
34701: PPUSH
34702: CALL_OW 274
34706: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34707: LD_ADDR_VAR 0 4
34711: PUSH
34712: LD_VAR 0 2
34716: PUSH
34717: LD_INT 1
34719: ARRAY
34720: PPUSH
34721: LD_VAR 0 2
34725: PUSH
34726: LD_INT 2
34728: ARRAY
34729: PPUSH
34730: LD_VAR 0 2
34734: PUSH
34735: LD_INT 3
34737: ARRAY
34738: PPUSH
34739: LD_VAR 0 2
34743: PUSH
34744: LD_INT 4
34746: ARRAY
34747: PPUSH
34748: CALL_OW 449
34752: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34753: LD_ADDR_VAR 0 3
34757: PUSH
34758: LD_VAR 0 5
34762: PPUSH
34763: LD_INT 1
34765: PPUSH
34766: CALL_OW 275
34770: PUSH
34771: LD_VAR 0 4
34775: PUSH
34776: LD_INT 1
34778: ARRAY
34779: GREATEREQUAL
34780: PUSH
34781: LD_VAR 0 5
34785: PPUSH
34786: LD_INT 2
34788: PPUSH
34789: CALL_OW 275
34793: PUSH
34794: LD_VAR 0 4
34798: PUSH
34799: LD_INT 2
34801: ARRAY
34802: GREATEREQUAL
34803: AND
34804: PUSH
34805: LD_VAR 0 5
34809: PPUSH
34810: LD_INT 3
34812: PPUSH
34813: CALL_OW 275
34817: PUSH
34818: LD_VAR 0 4
34822: PUSH
34823: LD_INT 3
34825: ARRAY
34826: GREATEREQUAL
34827: AND
34828: ST_TO_ADDR
// end ;
34829: LD_VAR 0 3
34833: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34834: LD_INT 0
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
// pom := GetBase ( building ) ;
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_VAR 0 1
34849: PPUSH
34850: CALL_OW 274
34854: ST_TO_ADDR
// if not pom then
34855: LD_VAR 0 3
34859: NOT
34860: IFFALSE 34864
// exit ;
34862: GO 35034
// btype := GetBType ( building ) ;
34864: LD_ADDR_VAR 0 5
34868: PUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 266
34878: ST_TO_ADDR
// if btype = b_armoury then
34879: LD_VAR 0 5
34883: PUSH
34884: LD_INT 4
34886: EQUAL
34887: IFFALSE 34897
// btype := b_barracks ;
34889: LD_ADDR_VAR 0 5
34893: PUSH
34894: LD_INT 5
34896: ST_TO_ADDR
// if btype = b_depot then
34897: LD_VAR 0 5
34901: PUSH
34902: LD_INT 0
34904: EQUAL
34905: IFFALSE 34915
// btype := b_warehouse ;
34907: LD_ADDR_VAR 0 5
34911: PUSH
34912: LD_INT 1
34914: ST_TO_ADDR
// if btype = b_workshop then
34915: LD_VAR 0 5
34919: PUSH
34920: LD_INT 2
34922: EQUAL
34923: IFFALSE 34933
// btype := b_factory ;
34925: LD_ADDR_VAR 0 5
34929: PUSH
34930: LD_INT 3
34932: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34933: LD_ADDR_VAR 0 4
34937: PUSH
34938: LD_VAR 0 5
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 248
34952: PPUSH
34953: CALL_OW 450
34957: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34958: LD_ADDR_VAR 0 2
34962: PUSH
34963: LD_VAR 0 3
34967: PPUSH
34968: LD_INT 1
34970: PPUSH
34971: CALL_OW 275
34975: PUSH
34976: LD_VAR 0 4
34980: PUSH
34981: LD_INT 1
34983: ARRAY
34984: GREATEREQUAL
34985: PUSH
34986: LD_VAR 0 3
34990: PPUSH
34991: LD_INT 2
34993: PPUSH
34994: CALL_OW 275
34998: PUSH
34999: LD_VAR 0 4
35003: PUSH
35004: LD_INT 2
35006: ARRAY
35007: GREATEREQUAL
35008: AND
35009: PUSH
35010: LD_VAR 0 3
35014: PPUSH
35015: LD_INT 3
35017: PPUSH
35018: CALL_OW 275
35022: PUSH
35023: LD_VAR 0 4
35027: PUSH
35028: LD_INT 3
35030: ARRAY
35031: GREATEREQUAL
35032: AND
35033: ST_TO_ADDR
// end ;
35034: LD_VAR 0 2
35038: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35039: LD_INT 0
35041: PPUSH
35042: PPUSH
35043: PPUSH
// pom := GetBase ( building ) ;
35044: LD_ADDR_VAR 0 4
35048: PUSH
35049: LD_VAR 0 1
35053: PPUSH
35054: CALL_OW 274
35058: ST_TO_ADDR
// if not pom then
35059: LD_VAR 0 4
35063: NOT
35064: IFFALSE 35068
// exit ;
35066: GO 35169
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35068: LD_ADDR_VAR 0 5
35072: PUSH
35073: LD_VAR 0 2
35077: PPUSH
35078: LD_VAR 0 1
35082: PPUSH
35083: CALL_OW 248
35087: PPUSH
35088: CALL_OW 450
35092: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35093: LD_ADDR_VAR 0 3
35097: PUSH
35098: LD_VAR 0 4
35102: PPUSH
35103: LD_INT 1
35105: PPUSH
35106: CALL_OW 275
35110: PUSH
35111: LD_VAR 0 5
35115: PUSH
35116: LD_INT 1
35118: ARRAY
35119: GREATEREQUAL
35120: PUSH
35121: LD_VAR 0 4
35125: PPUSH
35126: LD_INT 2
35128: PPUSH
35129: CALL_OW 275
35133: PUSH
35134: LD_VAR 0 5
35138: PUSH
35139: LD_INT 2
35141: ARRAY
35142: GREATEREQUAL
35143: AND
35144: PUSH
35145: LD_VAR 0 4
35149: PPUSH
35150: LD_INT 3
35152: PPUSH
35153: CALL_OW 275
35157: PUSH
35158: LD_VAR 0 5
35162: PUSH
35163: LD_INT 3
35165: ARRAY
35166: GREATEREQUAL
35167: AND
35168: ST_TO_ADDR
// end ;
35169: LD_VAR 0 3
35173: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35174: LD_INT 0
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
// result := false ;
35187: LD_ADDR_VAR 0 8
35191: PUSH
35192: LD_INT 0
35194: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35195: LD_VAR 0 5
35199: NOT
35200: PUSH
35201: LD_VAR 0 1
35205: NOT
35206: OR
35207: PUSH
35208: LD_VAR 0 2
35212: NOT
35213: OR
35214: PUSH
35215: LD_VAR 0 3
35219: NOT
35220: OR
35221: IFFALSE 35225
// exit ;
35223: GO 36039
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35225: LD_ADDR_VAR 0 14
35229: PUSH
35230: LD_VAR 0 1
35234: PPUSH
35235: LD_VAR 0 2
35239: PPUSH
35240: LD_VAR 0 3
35244: PPUSH
35245: LD_VAR 0 4
35249: PPUSH
35250: LD_VAR 0 5
35254: PUSH
35255: LD_INT 1
35257: ARRAY
35258: PPUSH
35259: CALL_OW 248
35263: PPUSH
35264: LD_INT 0
35266: PPUSH
35267: CALL 37292 0 6
35271: ST_TO_ADDR
// if not hexes then
35272: LD_VAR 0 14
35276: NOT
35277: IFFALSE 35281
// exit ;
35279: GO 36039
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35281: LD_ADDR_VAR 0 17
35285: PUSH
35286: LD_VAR 0 5
35290: PPUSH
35291: LD_INT 22
35293: PUSH
35294: LD_VAR 0 13
35298: PPUSH
35299: CALL_OW 255
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 30
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 30
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PPUSH
35340: CALL_OW 72
35344: ST_TO_ADDR
// for i = 1 to hexes do
35345: LD_ADDR_VAR 0 9
35349: PUSH
35350: DOUBLE
35351: LD_INT 1
35353: DEC
35354: ST_TO_ADDR
35355: LD_VAR 0 14
35359: PUSH
35360: FOR_TO
35361: IFFALSE 36037
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35363: LD_ADDR_VAR 0 13
35367: PUSH
35368: LD_VAR 0 14
35372: PUSH
35373: LD_VAR 0 9
35377: ARRAY
35378: PUSH
35379: LD_INT 1
35381: ARRAY
35382: PPUSH
35383: LD_VAR 0 14
35387: PUSH
35388: LD_VAR 0 9
35392: ARRAY
35393: PUSH
35394: LD_INT 2
35396: ARRAY
35397: PPUSH
35398: CALL_OW 428
35402: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35403: LD_VAR 0 14
35407: PUSH
35408: LD_VAR 0 9
35412: ARRAY
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: PPUSH
35418: LD_VAR 0 14
35422: PUSH
35423: LD_VAR 0 9
35427: ARRAY
35428: PUSH
35429: LD_INT 2
35431: ARRAY
35432: PPUSH
35433: CALL_OW 351
35437: PUSH
35438: LD_VAR 0 14
35442: PUSH
35443: LD_VAR 0 9
35447: ARRAY
35448: PUSH
35449: LD_INT 1
35451: ARRAY
35452: PPUSH
35453: LD_VAR 0 14
35457: PUSH
35458: LD_VAR 0 9
35462: ARRAY
35463: PUSH
35464: LD_INT 2
35466: ARRAY
35467: PPUSH
35468: CALL_OW 488
35472: NOT
35473: OR
35474: PUSH
35475: LD_VAR 0 13
35479: PPUSH
35480: CALL_OW 247
35484: PUSH
35485: LD_INT 3
35487: EQUAL
35488: OR
35489: IFFALSE 35495
// exit ;
35491: POP
35492: POP
35493: GO 36039
// if not tmp then
35495: LD_VAR 0 13
35499: NOT
35500: IFFALSE 35504
// continue ;
35502: GO 35360
// result := true ;
35504: LD_ADDR_VAR 0 8
35508: PUSH
35509: LD_INT 1
35511: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35512: LD_VAR 0 6
35516: PUSH
35517: LD_VAR 0 13
35521: PPUSH
35522: CALL_OW 247
35526: PUSH
35527: LD_INT 2
35529: EQUAL
35530: AND
35531: PUSH
35532: LD_VAR 0 13
35536: PPUSH
35537: CALL_OW 263
35541: PUSH
35542: LD_INT 1
35544: EQUAL
35545: AND
35546: IFFALSE 35710
// begin if IsDrivenBy ( tmp ) then
35548: LD_VAR 0 13
35552: PPUSH
35553: CALL_OW 311
35557: IFFALSE 35561
// continue ;
35559: GO 35360
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35561: LD_VAR 0 6
35565: PPUSH
35566: LD_INT 3
35568: PUSH
35569: LD_INT 60
35571: PUSH
35572: EMPTY
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: LD_INT 55
35584: PUSH
35585: EMPTY
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: CALL_OW 72
35600: IFFALSE 35708
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35602: LD_ADDR_VAR 0 18
35606: PUSH
35607: LD_VAR 0 6
35611: PPUSH
35612: LD_INT 3
35614: PUSH
35615: LD_INT 60
35617: PUSH
35618: EMPTY
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 3
35627: PUSH
35628: LD_INT 55
35630: PUSH
35631: EMPTY
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PPUSH
35642: CALL_OW 72
35646: PUSH
35647: LD_INT 1
35649: ARRAY
35650: ST_TO_ADDR
// if IsInUnit ( driver ) then
35651: LD_VAR 0 18
35655: PPUSH
35656: CALL_OW 310
35660: IFFALSE 35671
// ComExit ( driver ) ;
35662: LD_VAR 0 18
35666: PPUSH
35667: CALL 61234 0 1
// AddComEnterUnit ( driver , tmp ) ;
35671: LD_VAR 0 18
35675: PPUSH
35676: LD_VAR 0 13
35680: PPUSH
35681: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35685: LD_VAR 0 18
35689: PPUSH
35690: LD_VAR 0 7
35694: PPUSH
35695: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35699: LD_VAR 0 18
35703: PPUSH
35704: CALL_OW 181
// end ; continue ;
35708: GO 35360
// end ; if not cleaners or not tmp in cleaners then
35710: LD_VAR 0 6
35714: NOT
35715: PUSH
35716: LD_VAR 0 13
35720: PUSH
35721: LD_VAR 0 6
35725: IN
35726: NOT
35727: OR
35728: IFFALSE 36035
// begin if dep then
35730: LD_VAR 0 17
35734: IFFALSE 35870
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35736: LD_ADDR_VAR 0 16
35740: PUSH
35741: LD_VAR 0 17
35745: PUSH
35746: LD_INT 1
35748: ARRAY
35749: PPUSH
35750: CALL_OW 250
35754: PPUSH
35755: LD_VAR 0 17
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PPUSH
35764: CALL_OW 254
35768: PPUSH
35769: LD_INT 5
35771: PPUSH
35772: CALL_OW 272
35776: PUSH
35777: LD_VAR 0 17
35781: PUSH
35782: LD_INT 1
35784: ARRAY
35785: PPUSH
35786: CALL_OW 251
35790: PPUSH
35791: LD_VAR 0 17
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: CALL_OW 254
35804: PPUSH
35805: LD_INT 5
35807: PPUSH
35808: CALL_OW 273
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35817: LD_VAR 0 16
35821: PUSH
35822: LD_INT 1
35824: ARRAY
35825: PPUSH
35826: LD_VAR 0 16
35830: PUSH
35831: LD_INT 2
35833: ARRAY
35834: PPUSH
35835: CALL_OW 488
35839: IFFALSE 35870
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35841: LD_VAR 0 13
35845: PPUSH
35846: LD_VAR 0 16
35850: PUSH
35851: LD_INT 1
35853: ARRAY
35854: PPUSH
35855: LD_VAR 0 16
35859: PUSH
35860: LD_INT 2
35862: ARRAY
35863: PPUSH
35864: CALL_OW 111
// continue ;
35868: GO 35360
// end ; end ; r := GetDir ( tmp ) ;
35870: LD_ADDR_VAR 0 15
35874: PUSH
35875: LD_VAR 0 13
35879: PPUSH
35880: CALL_OW 254
35884: ST_TO_ADDR
// if r = 5 then
35885: LD_VAR 0 15
35889: PUSH
35890: LD_INT 5
35892: EQUAL
35893: IFFALSE 35903
// r := 0 ;
35895: LD_ADDR_VAR 0 15
35899: PUSH
35900: LD_INT 0
35902: ST_TO_ADDR
// for j = r to 5 do
35903: LD_ADDR_VAR 0 10
35907: PUSH
35908: DOUBLE
35909: LD_VAR 0 15
35913: DEC
35914: ST_TO_ADDR
35915: LD_INT 5
35917: PUSH
35918: FOR_TO
35919: IFFALSE 36033
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35921: LD_ADDR_VAR 0 11
35925: PUSH
35926: LD_VAR 0 13
35930: PPUSH
35931: CALL_OW 250
35935: PPUSH
35936: LD_VAR 0 10
35940: PPUSH
35941: LD_INT 2
35943: PPUSH
35944: CALL_OW 272
35948: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35949: LD_ADDR_VAR 0 12
35953: PUSH
35954: LD_VAR 0 13
35958: PPUSH
35959: CALL_OW 251
35963: PPUSH
35964: LD_VAR 0 10
35968: PPUSH
35969: LD_INT 2
35971: PPUSH
35972: CALL_OW 273
35976: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35977: LD_VAR 0 11
35981: PPUSH
35982: LD_VAR 0 12
35986: PPUSH
35987: CALL_OW 488
35991: PUSH
35992: LD_VAR 0 11
35996: PPUSH
35997: LD_VAR 0 12
36001: PPUSH
36002: CALL_OW 428
36006: NOT
36007: AND
36008: IFFALSE 36031
// begin ComMoveXY ( tmp , _x , _y ) ;
36010: LD_VAR 0 13
36014: PPUSH
36015: LD_VAR 0 11
36019: PPUSH
36020: LD_VAR 0 12
36024: PPUSH
36025: CALL_OW 111
// break ;
36029: GO 36033
// end ; end ;
36031: GO 35918
36033: POP
36034: POP
// end ; end ;
36035: GO 35360
36037: POP
36038: POP
// end ;
36039: LD_VAR 0 8
36043: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36044: LD_INT 0
36046: PPUSH
// result := true ;
36047: LD_ADDR_VAR 0 3
36051: PUSH
36052: LD_INT 1
36054: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36055: LD_VAR 0 2
36059: PUSH
36060: LD_INT 24
36062: DOUBLE
36063: EQUAL
36064: IFTRUE 36074
36066: LD_INT 33
36068: DOUBLE
36069: EQUAL
36070: IFTRUE 36074
36072: GO 36099
36074: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_INT 32
36082: PPUSH
36083: LD_VAR 0 1
36087: PPUSH
36088: CALL_OW 321
36092: PUSH
36093: LD_INT 2
36095: EQUAL
36096: ST_TO_ADDR
36097: GO 36415
36099: LD_INT 20
36101: DOUBLE
36102: EQUAL
36103: IFTRUE 36107
36105: GO 36132
36107: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_INT 6
36115: PPUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 321
36125: PUSH
36126: LD_INT 2
36128: EQUAL
36129: ST_TO_ADDR
36130: GO 36415
36132: LD_INT 22
36134: DOUBLE
36135: EQUAL
36136: IFTRUE 36146
36138: LD_INT 36
36140: DOUBLE
36141: EQUAL
36142: IFTRUE 36146
36144: GO 36171
36146: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36147: LD_ADDR_VAR 0 3
36151: PUSH
36152: LD_INT 15
36154: PPUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 321
36164: PUSH
36165: LD_INT 2
36167: EQUAL
36168: ST_TO_ADDR
36169: GO 36415
36171: LD_INT 30
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36179
36177: GO 36204
36179: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36180: LD_ADDR_VAR 0 3
36184: PUSH
36185: LD_INT 20
36187: PPUSH
36188: LD_VAR 0 1
36192: PPUSH
36193: CALL_OW 321
36197: PUSH
36198: LD_INT 2
36200: EQUAL
36201: ST_TO_ADDR
36202: GO 36415
36204: LD_INT 28
36206: DOUBLE
36207: EQUAL
36208: IFTRUE 36218
36210: LD_INT 21
36212: DOUBLE
36213: EQUAL
36214: IFTRUE 36218
36216: GO 36243
36218: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36219: LD_ADDR_VAR 0 3
36223: PUSH
36224: LD_INT 21
36226: PPUSH
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL_OW 321
36236: PUSH
36237: LD_INT 2
36239: EQUAL
36240: ST_TO_ADDR
36241: GO 36415
36243: LD_INT 16
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36276
36251: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 84
36259: PPUSH
36260: LD_VAR 0 1
36264: PPUSH
36265: CALL_OW 321
36269: PUSH
36270: LD_INT 2
36272: EQUAL
36273: ST_TO_ADDR
36274: GO 36415
36276: LD_INT 19
36278: DOUBLE
36279: EQUAL
36280: IFTRUE 36290
36282: LD_INT 23
36284: DOUBLE
36285: EQUAL
36286: IFTRUE 36290
36288: GO 36315
36290: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36291: LD_ADDR_VAR 0 3
36295: PUSH
36296: LD_INT 83
36298: PPUSH
36299: LD_VAR 0 1
36303: PPUSH
36304: CALL_OW 321
36308: PUSH
36309: LD_INT 2
36311: EQUAL
36312: ST_TO_ADDR
36313: GO 36415
36315: LD_INT 17
36317: DOUBLE
36318: EQUAL
36319: IFTRUE 36323
36321: GO 36348
36323: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36324: LD_ADDR_VAR 0 3
36328: PUSH
36329: LD_INT 39
36331: PPUSH
36332: LD_VAR 0 1
36336: PPUSH
36337: CALL_OW 321
36341: PUSH
36342: LD_INT 2
36344: EQUAL
36345: ST_TO_ADDR
36346: GO 36415
36348: LD_INT 18
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36356
36354: GO 36381
36356: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36357: LD_ADDR_VAR 0 3
36361: PUSH
36362: LD_INT 40
36364: PPUSH
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 321
36374: PUSH
36375: LD_INT 2
36377: EQUAL
36378: ST_TO_ADDR
36379: GO 36415
36381: LD_INT 27
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36414
36389: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36390: LD_ADDR_VAR 0 3
36394: PUSH
36395: LD_INT 35
36397: PPUSH
36398: LD_VAR 0 1
36402: PPUSH
36403: CALL_OW 321
36407: PUSH
36408: LD_INT 2
36410: EQUAL
36411: ST_TO_ADDR
36412: GO 36415
36414: POP
// end ;
36415: LD_VAR 0 3
36419: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36420: LD_INT 0
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
// result := false ;
36433: LD_ADDR_VAR 0 6
36437: PUSH
36438: LD_INT 0
36440: ST_TO_ADDR
// if btype = b_depot then
36441: LD_VAR 0 2
36445: PUSH
36446: LD_INT 0
36448: EQUAL
36449: IFFALSE 36461
// begin result := true ;
36451: LD_ADDR_VAR 0 6
36455: PUSH
36456: LD_INT 1
36458: ST_TO_ADDR
// exit ;
36459: GO 37287
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36461: LD_VAR 0 1
36465: NOT
36466: PUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 266
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: IN
36487: NOT
36488: OR
36489: PUSH
36490: LD_VAR 0 2
36494: NOT
36495: OR
36496: PUSH
36497: LD_VAR 0 5
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: LD_INT 3
36513: PUSH
36514: LD_INT 4
36516: PUSH
36517: LD_INT 5
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: IN
36528: NOT
36529: OR
36530: PUSH
36531: LD_VAR 0 3
36535: PPUSH
36536: LD_VAR 0 4
36540: PPUSH
36541: CALL_OW 488
36545: NOT
36546: OR
36547: IFFALSE 36551
// exit ;
36549: GO 37287
// side := GetSide ( depot ) ;
36551: LD_ADDR_VAR 0 9
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 255
36565: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36566: LD_VAR 0 9
36570: PPUSH
36571: LD_VAR 0 2
36575: PPUSH
36576: CALL 36044 0 2
36580: NOT
36581: IFFALSE 36585
// exit ;
36583: GO 37287
// pom := GetBase ( depot ) ;
36585: LD_ADDR_VAR 0 10
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 274
36599: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36600: LD_ADDR_VAR 0 11
36604: PUSH
36605: LD_VAR 0 2
36609: PPUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 248
36619: PPUSH
36620: CALL_OW 450
36624: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36625: LD_VAR 0 10
36629: PPUSH
36630: LD_INT 1
36632: PPUSH
36633: CALL_OW 275
36637: PUSH
36638: LD_VAR 0 11
36642: PUSH
36643: LD_INT 1
36645: ARRAY
36646: GREATEREQUAL
36647: PUSH
36648: LD_VAR 0 10
36652: PPUSH
36653: LD_INT 2
36655: PPUSH
36656: CALL_OW 275
36660: PUSH
36661: LD_VAR 0 11
36665: PUSH
36666: LD_INT 2
36668: ARRAY
36669: GREATEREQUAL
36670: AND
36671: PUSH
36672: LD_VAR 0 10
36676: PPUSH
36677: LD_INT 3
36679: PPUSH
36680: CALL_OW 275
36684: PUSH
36685: LD_VAR 0 11
36689: PUSH
36690: LD_INT 3
36692: ARRAY
36693: GREATEREQUAL
36694: AND
36695: NOT
36696: IFFALSE 36700
// exit ;
36698: GO 37287
// if GetBType ( depot ) = b_depot then
36700: LD_VAR 0 1
36704: PPUSH
36705: CALL_OW 266
36709: PUSH
36710: LD_INT 0
36712: EQUAL
36713: IFFALSE 36725
// dist := 28 else
36715: LD_ADDR_VAR 0 14
36719: PUSH
36720: LD_INT 28
36722: ST_TO_ADDR
36723: GO 36733
// dist := 36 ;
36725: LD_ADDR_VAR 0 14
36729: PUSH
36730: LD_INT 36
36732: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36733: LD_VAR 0 1
36737: PPUSH
36738: LD_VAR 0 3
36742: PPUSH
36743: LD_VAR 0 4
36747: PPUSH
36748: CALL_OW 297
36752: PUSH
36753: LD_VAR 0 14
36757: GREATER
36758: IFFALSE 36762
// exit ;
36760: GO 37287
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36762: LD_ADDR_VAR 0 12
36766: PUSH
36767: LD_VAR 0 2
36771: PPUSH
36772: LD_VAR 0 3
36776: PPUSH
36777: LD_VAR 0 4
36781: PPUSH
36782: LD_VAR 0 5
36786: PPUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 248
36796: PPUSH
36797: LD_INT 0
36799: PPUSH
36800: CALL 37292 0 6
36804: ST_TO_ADDR
// if not hexes then
36805: LD_VAR 0 12
36809: NOT
36810: IFFALSE 36814
// exit ;
36812: GO 37287
// hex := GetHexInfo ( x , y ) ;
36814: LD_ADDR_VAR 0 15
36818: PUSH
36819: LD_VAR 0 3
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: CALL_OW 546
36833: ST_TO_ADDR
// if hex [ 1 ] then
36834: LD_VAR 0 15
36838: PUSH
36839: LD_INT 1
36841: ARRAY
36842: IFFALSE 36846
// exit ;
36844: GO 37287
// height := hex [ 2 ] ;
36846: LD_ADDR_VAR 0 13
36850: PUSH
36851: LD_VAR 0 15
36855: PUSH
36856: LD_INT 2
36858: ARRAY
36859: ST_TO_ADDR
// for i = 1 to hexes do
36860: LD_ADDR_VAR 0 7
36864: PUSH
36865: DOUBLE
36866: LD_INT 1
36868: DEC
36869: ST_TO_ADDR
36870: LD_VAR 0 12
36874: PUSH
36875: FOR_TO
36876: IFFALSE 37206
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36878: LD_VAR 0 12
36882: PUSH
36883: LD_VAR 0 7
36887: ARRAY
36888: PUSH
36889: LD_INT 1
36891: ARRAY
36892: PPUSH
36893: LD_VAR 0 12
36897: PUSH
36898: LD_VAR 0 7
36902: ARRAY
36903: PUSH
36904: LD_INT 2
36906: ARRAY
36907: PPUSH
36908: CALL_OW 488
36912: NOT
36913: PUSH
36914: LD_VAR 0 12
36918: PUSH
36919: LD_VAR 0 7
36923: ARRAY
36924: PUSH
36925: LD_INT 1
36927: ARRAY
36928: PPUSH
36929: LD_VAR 0 12
36933: PUSH
36934: LD_VAR 0 7
36938: ARRAY
36939: PUSH
36940: LD_INT 2
36942: ARRAY
36943: PPUSH
36944: CALL_OW 428
36948: PUSH
36949: LD_INT 0
36951: GREATER
36952: OR
36953: PUSH
36954: LD_VAR 0 12
36958: PUSH
36959: LD_VAR 0 7
36963: ARRAY
36964: PUSH
36965: LD_INT 1
36967: ARRAY
36968: PPUSH
36969: LD_VAR 0 12
36973: PUSH
36974: LD_VAR 0 7
36978: ARRAY
36979: PUSH
36980: LD_INT 2
36982: ARRAY
36983: PPUSH
36984: CALL_OW 351
36988: OR
36989: IFFALSE 36995
// exit ;
36991: POP
36992: POP
36993: GO 37287
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36995: LD_ADDR_VAR 0 8
36999: PUSH
37000: LD_VAR 0 12
37004: PUSH
37005: LD_VAR 0 7
37009: ARRAY
37010: PUSH
37011: LD_INT 1
37013: ARRAY
37014: PPUSH
37015: LD_VAR 0 12
37019: PUSH
37020: LD_VAR 0 7
37024: ARRAY
37025: PUSH
37026: LD_INT 2
37028: ARRAY
37029: PPUSH
37030: CALL_OW 546
37034: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37035: LD_VAR 0 8
37039: PUSH
37040: LD_INT 1
37042: ARRAY
37043: PUSH
37044: LD_VAR 0 8
37048: PUSH
37049: LD_INT 2
37051: ARRAY
37052: PUSH
37053: LD_VAR 0 13
37057: PUSH
37058: LD_INT 2
37060: PLUS
37061: GREATER
37062: OR
37063: PUSH
37064: LD_VAR 0 8
37068: PUSH
37069: LD_INT 2
37071: ARRAY
37072: PUSH
37073: LD_VAR 0 13
37077: PUSH
37078: LD_INT 2
37080: MINUS
37081: LESS
37082: OR
37083: PUSH
37084: LD_VAR 0 8
37088: PUSH
37089: LD_INT 3
37091: ARRAY
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 8
37098: PUSH
37099: LD_INT 9
37101: PUSH
37102: LD_INT 10
37104: PUSH
37105: LD_INT 11
37107: PUSH
37108: LD_INT 12
37110: PUSH
37111: LD_INT 13
37113: PUSH
37114: LD_INT 16
37116: PUSH
37117: LD_INT 17
37119: PUSH
37120: LD_INT 18
37122: PUSH
37123: LD_INT 19
37125: PUSH
37126: LD_INT 20
37128: PUSH
37129: LD_INT 21
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: IN
37147: NOT
37148: OR
37149: PUSH
37150: LD_VAR 0 8
37154: PUSH
37155: LD_INT 5
37157: ARRAY
37158: NOT
37159: OR
37160: PUSH
37161: LD_VAR 0 8
37165: PUSH
37166: LD_INT 6
37168: ARRAY
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 2
37175: PUSH
37176: LD_INT 7
37178: PUSH
37179: LD_INT 9
37181: PUSH
37182: LD_INT 10
37184: PUSH
37185: LD_INT 11
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: IN
37196: NOT
37197: OR
37198: IFFALSE 37204
// exit ;
37200: POP
37201: POP
37202: GO 37287
// end ;
37204: GO 36875
37206: POP
37207: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37208: LD_VAR 0 9
37212: PPUSH
37213: LD_VAR 0 3
37217: PPUSH
37218: LD_VAR 0 4
37222: PPUSH
37223: LD_INT 20
37225: PPUSH
37226: CALL 29210 0 4
37230: PUSH
37231: LD_INT 4
37233: ARRAY
37234: IFFALSE 37238
// exit ;
37236: GO 37287
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37238: LD_VAR 0 2
37242: PUSH
37243: LD_INT 29
37245: PUSH
37246: LD_INT 30
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: IN
37253: PUSH
37254: LD_VAR 0 3
37258: PPUSH
37259: LD_VAR 0 4
37263: PPUSH
37264: LD_VAR 0 9
37268: PPUSH
37269: CALL_OW 440
37273: NOT
37274: AND
37275: IFFALSE 37279
// exit ;
37277: GO 37287
// result := true ;
37279: LD_ADDR_VAR 0 6
37283: PUSH
37284: LD_INT 1
37286: ST_TO_ADDR
// end ;
37287: LD_VAR 0 6
37291: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37292: LD_INT 0
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
37306: PPUSH
37307: PPUSH
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
37312: PPUSH
37313: PPUSH
37314: PPUSH
37315: PPUSH
37316: PPUSH
37317: PPUSH
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
37322: PPUSH
37323: PPUSH
37324: PPUSH
37325: PPUSH
37326: PPUSH
37327: PPUSH
37328: PPUSH
37329: PPUSH
37330: PPUSH
37331: PPUSH
37332: PPUSH
37333: PPUSH
37334: PPUSH
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
// result = [ ] ;
37352: LD_ADDR_VAR 0 7
37356: PUSH
37357: EMPTY
37358: ST_TO_ADDR
// temp_list = [ ] ;
37359: LD_ADDR_VAR 0 9
37363: PUSH
37364: EMPTY
37365: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37366: LD_VAR 0 4
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 3
37382: PUSH
37383: LD_INT 4
37385: PUSH
37386: LD_INT 5
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: IN
37397: NOT
37398: PUSH
37399: LD_VAR 0 1
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: IN
37414: PUSH
37415: LD_VAR 0 5
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: LD_INT 3
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: IN
37434: NOT
37435: AND
37436: OR
37437: IFFALSE 37441
// exit ;
37439: GO 55832
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37441: LD_VAR 0 1
37445: PUSH
37446: LD_INT 6
37448: PUSH
37449: LD_INT 7
37451: PUSH
37452: LD_INT 8
37454: PUSH
37455: LD_INT 13
37457: PUSH
37458: LD_INT 12
37460: PUSH
37461: LD_INT 15
37463: PUSH
37464: LD_INT 11
37466: PUSH
37467: LD_INT 14
37469: PUSH
37470: LD_INT 10
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: IN
37484: IFFALSE 37494
// btype = b_lab ;
37486: LD_ADDR_VAR 0 1
37490: PUSH
37491: LD_INT 6
37493: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37494: LD_VAR 0 6
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: IN
37513: NOT
37514: PUSH
37515: LD_VAR 0 1
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: LD_INT 6
37534: PUSH
37535: LD_INT 36
37537: PUSH
37538: LD_INT 4
37540: PUSH
37541: LD_INT 5
37543: PUSH
37544: LD_INT 31
37546: PUSH
37547: LD_INT 32
37549: PUSH
37550: LD_INT 33
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: IN
37566: NOT
37567: PUSH
37568: LD_VAR 0 6
37572: PUSH
37573: LD_INT 1
37575: EQUAL
37576: AND
37577: OR
37578: PUSH
37579: LD_VAR 0 1
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: IN
37594: NOT
37595: PUSH
37596: LD_VAR 0 6
37600: PUSH
37601: LD_INT 2
37603: EQUAL
37604: AND
37605: OR
37606: IFFALSE 37616
// mode = 0 ;
37608: LD_ADDR_VAR 0 6
37612: PUSH
37613: LD_INT 0
37615: ST_TO_ADDR
// case mode of 0 :
37616: LD_VAR 0 6
37620: PUSH
37621: LD_INT 0
37623: DOUBLE
37624: EQUAL
37625: IFTRUE 37629
37627: GO 49082
37629: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37630: LD_ADDR_VAR 0 11
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: LD_INT 2
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 3
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 3
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37823: LD_ADDR_VAR 0 12
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: NEG
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 3
37991: NEG
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38019: LD_ADDR_VAR 0 13
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: NEG
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 3
38178: NEG
38179: PUSH
38180: LD_INT 2
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 3
38190: NEG
38191: PUSH
38192: LD_INT 3
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38218: LD_ADDR_VAR 0 14
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 3
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38414: LD_ADDR_VAR 0 15
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38607: LD_ADDR_VAR 0 16
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 1
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 3
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 3
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38800: LD_ADDR_VAR 0 17
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 0
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 2
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39030: LD_ADDR_VAR 0 18
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39260: LD_ADDR_VAR 0 19
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 2
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39490: LD_ADDR_VAR 0 20
39494: PUSH
39495: LD_INT 0
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 2
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39720: LD_ADDR_VAR 0 21
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39950: LD_ADDR_VAR 0 22
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40180: LD_ADDR_VAR 0 23
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: LD_INT 3
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 3
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40460: LD_ADDR_VAR 0 24
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 3
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40736: LD_ADDR_VAR 0 25
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: LD_INT 2
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 3
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 3
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41010: LD_ADDR_VAR 0 26
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 2
41209: NEG
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41286: LD_ADDR_VAR 0 27
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: LD_INT 2
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 2
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 3
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 3
41531: NEG
41532: PUSH
41533: LD_INT 2
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41566: LD_ADDR_VAR 0 28
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 3
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 3
41801: NEG
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 3
41813: NEG
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41848: LD_ADDR_VAR 0 29
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 3
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: LD_INT 2
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42127: LD_ADDR_VAR 0 30
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 2
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 2
42293: NEG
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42405: LD_ADDR_VAR 0 31
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 1
42474: NEG
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 2
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: LD_INT 2
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 2
42594: NEG
42595: PUSH
42596: LD_INT 3
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 3
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42683: LD_ADDR_VAR 0 32
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 1
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 2
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: LD_INT 3
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42961: LD_ADDR_VAR 0 33
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 3
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: LD_INT 3
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 3
43205: NEG
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43240: LD_ADDR_VAR 0 34
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 3
43485: NEG
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43520: LD_ADDR_VAR 0 35
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43632: LD_ADDR_VAR 0 36
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43744: LD_ADDR_VAR 0 37
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43856: LD_ADDR_VAR 0 38
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43968: LD_ADDR_VAR 0 39
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44080: LD_ADDR_VAR 0 40
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44192: LD_ADDR_VAR 0 41
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: NEG
44383: PUSH
44384: LD_INT 3
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: NEG
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 3
44489: NEG
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 3
44501: NEG
44502: PUSH
44503: LD_INT 3
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44542: LD_ADDR_VAR 0 42
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 2
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: NEG
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: LD_INT 2
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 3
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 3
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 3
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 3
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 3
44839: NEG
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 3
44851: NEG
44852: PUSH
44853: LD_INT 3
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44892: LD_ADDR_VAR 0 43
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 2
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: LD_INT 1
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 3
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 3
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 1
45118: NEG
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 3
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 3
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 2
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 3
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45240: LD_ADDR_VAR 0 44
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 3
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 3
45473: PUSH
45474: LD_INT 2
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: LD_INT 3
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 3
45514: NEG
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45590: LD_ADDR_VAR 0 45
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 3
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 3
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 3
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 3
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 3
45899: NEG
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45940: LD_ADDR_VAR 0 46
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 2
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: LD_INT 3
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 3
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 3
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46288: LD_ADDR_VAR 0 47
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46439: LD_ADDR_VAR 0 48
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46586: LD_ADDR_VAR 0 49
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46730: LD_ADDR_VAR 0 50
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46874: LD_ADDR_VAR 0 51
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: NEG
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47021: LD_ADDR_VAR 0 52
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47172: LD_ADDR_VAR 0 53
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47402: LD_ADDR_VAR 0 54
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 2
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47632: LD_ADDR_VAR 0 55
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 0
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 0
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47862: LD_ADDR_VAR 0 56
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: LD_INT 2
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: NEG
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48092: LD_ADDR_VAR 0 57
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48322: LD_ADDR_VAR 0 58
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48552: LD_ADDR_VAR 0 59
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48640: LD_ADDR_VAR 0 60
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48728: LD_ADDR_VAR 0 61
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48816: LD_ADDR_VAR 0 62
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48904: LD_ADDR_VAR 0 63
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48992: LD_ADDR_VAR 0 64
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// end ; 1 :
49080: GO 54977
49082: LD_INT 1
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49090
49088: GO 51713
49090: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49091: LD_ADDR_VAR 0 11
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49135: LD_ADDR_VAR 0 12
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49176: LD_ADDR_VAR 0 13
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49216: LD_ADDR_VAR 0 14
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49257: LD_ADDR_VAR 0 15
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49301: LD_ADDR_VAR 0 16
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: LD_INT 3
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49347: LD_ADDR_VAR 0 17
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 3
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49391: LD_ADDR_VAR 0 18
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49432: LD_ADDR_VAR 0 19
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49472: LD_ADDR_VAR 0 20
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49513: LD_ADDR_VAR 0 21
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49557: LD_ADDR_VAR 0 22
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49603: LD_ADDR_VAR 0 23
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 4
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49647: LD_ADDR_VAR 0 24
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 4
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49688: LD_ADDR_VAR 0 25
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: LD_INT 3
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 4
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 4
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49728: LD_ADDR_VAR 0 26
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 3
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49769: LD_ADDR_VAR 0 27
49773: PUSH
49774: LD_INT 3
49776: NEG
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 4
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49813: LD_ADDR_VAR 0 28
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: LD_INT 4
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 4
49844: NEG
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49859: LD_ADDR_VAR 0 29
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: LD_INT 3
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 4
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 4
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 5
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 5
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 4
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 6
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 6
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 5
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50014: LD_ADDR_VAR 0 30
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 3
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 4
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 4
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 5
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 5
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 5
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 6
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 6
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50157: LD_ADDR_VAR 0 31
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: PUSH
50175: LD_INT 3
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: LD_INT 3
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 4
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 4
50204: PUSH
50205: LD_INT 4
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 4
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 5
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 5
50234: PUSH
50235: LD_INT 5
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 4
50244: PUSH
50245: LD_INT 5
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 6
50254: PUSH
50255: LD_INT 5
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 6
50264: PUSH
50265: LD_INT 6
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 5
50274: PUSH
50275: LD_INT 6
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50296: LD_ADDR_VAR 0 32
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: LD_INT 3
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 3
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 4
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 4
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: LD_INT 5
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 5
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 4
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: PUSH
50397: LD_INT 6
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: LD_INT 6
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: LD_INT 5
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50439: LD_ADDR_VAR 0 33
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 3
50457: NEG
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 3
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 4
50491: NEG
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 4
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 4
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 5
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 5
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 5
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 6
50559: NEG
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 6
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50594: LD_ADDR_VAR 0 34
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: LD_INT 3
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: LD_INT 4
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 4
50649: NEG
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 4
50661: NEG
50662: PUSH
50663: LD_INT 4
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 4
50673: NEG
50674: PUSH
50675: LD_INT 5
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 5
50685: NEG
50686: PUSH
50687: LD_INT 4
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 5
50697: NEG
50698: PUSH
50699: LD_INT 5
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 5
50709: NEG
50710: PUSH
50711: LD_INT 6
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 6
50721: NEG
50722: PUSH
50723: LD_INT 5
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 6
50733: NEG
50734: PUSH
50735: LD_INT 6
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50757: LD_ADDR_VAR 0 41
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 2
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50801: LD_ADDR_VAR 0 42
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50842: LD_ADDR_VAR 0 43
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50882: LD_ADDR_VAR 0 44
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50923: LD_ADDR_VAR 0 45
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: NEG
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50967: LD_ADDR_VAR 0 46
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: LD_INT 2
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 3
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51013: LD_ADDR_VAR 0 47
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51046: LD_ADDR_VAR 0 48
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51077: LD_ADDR_VAR 0 49
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 1
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51106: LD_ADDR_VAR 0 50
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51135: LD_ADDR_VAR 0 51
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 2
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51166: LD_ADDR_VAR 0 52
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51199: LD_ADDR_VAR 0 53
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51243: LD_ADDR_VAR 0 54
51247: PUSH
51248: LD_INT 2
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: LIST
51283: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51284: LD_ADDR_VAR 0 55
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51324: LD_ADDR_VAR 0 56
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 3
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 3
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51365: LD_ADDR_VAR 0 57
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 3
51394: NEG
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51409: LD_ADDR_VAR 0 58
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 3
51428: NEG
51429: PUSH
51430: LD_INT 2
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51455: LD_ADDR_VAR 0 59
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51499: LD_ADDR_VAR 0 60
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51540: LD_ADDR_VAR 0 61
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51580: LD_ADDR_VAR 0 62
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51621: LD_ADDR_VAR 0 63
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51665: LD_ADDR_VAR 0 64
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: ST_TO_ADDR
// end ; 2 :
51711: GO 54977
51713: LD_INT 2
51715: DOUBLE
51716: EQUAL
51717: IFTRUE 51721
51719: GO 54976
51721: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51722: LD_ADDR_VAR 0 29
51726: PUSH
51727: LD_INT 4
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 4
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 5
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 5
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 4
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 3
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 3
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: LD_INT 2
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 5
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 4
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: PUSH
51853: LD_INT 4
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: PUSH
51863: LD_INT 4
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 3
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 4
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 4
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 4
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 5
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 5
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 4
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 3
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 5
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: NEG
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 4
52061: NEG
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 4
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 4
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 4
52119: NEG
52120: PUSH
52121: LD_INT 5
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: LD_INT 4
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 3
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 4
52155: NEG
52156: PUSH
52157: LD_INT 3
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 5
52167: NEG
52168: PUSH
52169: LD_INT 4
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 5
52179: NEG
52180: PUSH
52181: LD_INT 5
52183: NEG
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: LD_INT 5
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 5
52203: NEG
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52260: LD_ADDR_VAR 0 30
52264: PUSH
52265: LD_INT 4
52267: PUSH
52268: LD_INT 4
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 4
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 5
52287: PUSH
52288: LD_INT 4
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 5
52297: PUSH
52298: LD_INT 5
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 4
52307: PUSH
52308: LD_INT 5
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 3
52317: PUSH
52318: LD_INT 4
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: LD_INT 3
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 5
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 5
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 3
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 4
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 4
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 4
52450: NEG
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 4
52461: NEG
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: NEG
52485: PUSH
52486: LD_INT 1
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 4
52495: NEG
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 5
52506: NEG
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 5
52517: NEG
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 5
52529: NEG
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: NEG
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 3
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: LD_INT 4
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: LD_INT 3
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 4
52612: NEG
52613: PUSH
52614: LD_INT 3
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 4
52624: NEG
52625: PUSH
52626: LD_INT 4
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: NEG
52637: PUSH
52638: LD_INT 4
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 4
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 4
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 5
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 4
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 3
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 4
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 5
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 2
52750: NEG
52751: PUSH
52752: LD_INT 5
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52807: LD_ADDR_VAR 0 31
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 4
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 3
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 4
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 0
52854: PUSH
52855: LD_INT 5
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 5
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 3
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 3
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 4
52963: NEG
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 4
52974: NEG
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 4
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 2
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 4
53009: NEG
53010: PUSH
53011: LD_INT 4
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 4
53021: NEG
53022: PUSH
53023: LD_INT 5
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: LD_INT 4
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 3
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 4
53057: NEG
53058: PUSH
53059: LD_INT 3
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 5
53069: NEG
53070: PUSH
53071: LD_INT 4
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 5
53081: NEG
53082: PUSH
53083: LD_INT 5
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: NEG
53094: PUSH
53095: LD_INT 5
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 5
53105: NEG
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 0
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 4
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: LD_INT 3
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: LD_INT 2
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 3
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 4
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 4
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 4
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 5
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 5
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 4
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 3
53291: PUSH
53292: LD_INT 2
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 5
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53357: LD_ADDR_VAR 0 32
53361: PUSH
53362: LD_INT 4
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 4
53409: NEG
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 5
53420: NEG
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 5
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 5
53443: NEG
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: LD_INT 4
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: NEG
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 4
53526: NEG
53527: PUSH
53528: LD_INT 3
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 4
53538: NEG
53539: PUSH
53540: LD_INT 4
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 4
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 4
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: LD_INT 5
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 4
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 3
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 3
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 4
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: LD_INT 5
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 5
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 4
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 4
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: LD_INT 4
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 5
53799: PUSH
53800: LD_INT 5
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 4
53809: PUSH
53810: LD_INT 5
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 4
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 5
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: LD_INT 5
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53904: LD_ADDR_VAR 0 33
53908: PUSH
53909: LD_INT 4
53911: NEG
53912: PUSH
53913: LD_INT 4
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 4
53923: NEG
53924: PUSH
53925: LD_INT 5
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 3
53935: NEG
53936: PUSH
53937: LD_INT 4
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: LD_INT 3
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 4
53959: NEG
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 5
53971: NEG
53972: PUSH
53973: LD_INT 4
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 5
53983: NEG
53984: PUSH
53985: LD_INT 5
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: LD_INT 5
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 5
54007: NEG
54008: PUSH
54009: LD_INT 3
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 4
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 3
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 4
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 5
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 5
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 4
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 3
54193: PUSH
54194: LD_INT 2
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 5
54204: PUSH
54205: LD_INT 2
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 4
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: LD_INT 4
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 3
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 4
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: LD_INT 4
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 4
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 4
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 5
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 5
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 4
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 5
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54442: LD_ADDR_VAR 0 34
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 4
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 5
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 4
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 4
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 5
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 5
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 4
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 3
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 4
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 4
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 5
54664: PUSH
54665: LD_INT 4
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 5
54674: PUSH
54675: LD_INT 5
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 4
54684: PUSH
54685: LD_INT 5
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 3
54694: PUSH
54695: LD_INT 4
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: PUSH
54705: LD_INT 3
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 5
54714: PUSH
54715: LD_INT 3
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 3
54724: PUSH
54725: LD_INT 5
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 4
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: NEG
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 4
54827: NEG
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 4
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 3
54850: NEG
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 4
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 5
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 5
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 5
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 3
54918: NEG
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: ST_TO_ADDR
// end ; end ;
54974: GO 54977
54976: POP
// case btype of b_depot , b_warehouse :
54977: LD_VAR 0 1
54981: PUSH
54982: LD_INT 0
54984: DOUBLE
54985: EQUAL
54986: IFTRUE 54996
54988: LD_INT 1
54990: DOUBLE
54991: EQUAL
54992: IFTRUE 54996
54994: GO 55197
54996: POP
// case nation of nation_american :
54997: LD_VAR 0 5
55001: PUSH
55002: LD_INT 1
55004: DOUBLE
55005: EQUAL
55006: IFTRUE 55010
55008: GO 55066
55010: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55011: LD_ADDR_VAR 0 9
55015: PUSH
55016: LD_VAR 0 11
55020: PUSH
55021: LD_VAR 0 12
55025: PUSH
55026: LD_VAR 0 13
55030: PUSH
55031: LD_VAR 0 14
55035: PUSH
55036: LD_VAR 0 15
55040: PUSH
55041: LD_VAR 0 16
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: PUSH
55054: LD_VAR 0 4
55058: PUSH
55059: LD_INT 1
55061: PLUS
55062: ARRAY
55063: ST_TO_ADDR
55064: GO 55195
55066: LD_INT 2
55068: DOUBLE
55069: EQUAL
55070: IFTRUE 55074
55072: GO 55130
55074: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55075: LD_ADDR_VAR 0 9
55079: PUSH
55080: LD_VAR 0 17
55084: PUSH
55085: LD_VAR 0 18
55089: PUSH
55090: LD_VAR 0 19
55094: PUSH
55095: LD_VAR 0 20
55099: PUSH
55100: LD_VAR 0 21
55104: PUSH
55105: LD_VAR 0 22
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: PUSH
55118: LD_VAR 0 4
55122: PUSH
55123: LD_INT 1
55125: PLUS
55126: ARRAY
55127: ST_TO_ADDR
55128: GO 55195
55130: LD_INT 3
55132: DOUBLE
55133: EQUAL
55134: IFTRUE 55138
55136: GO 55194
55138: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55139: LD_ADDR_VAR 0 9
55143: PUSH
55144: LD_VAR 0 23
55148: PUSH
55149: LD_VAR 0 24
55153: PUSH
55154: LD_VAR 0 25
55158: PUSH
55159: LD_VAR 0 26
55163: PUSH
55164: LD_VAR 0 27
55168: PUSH
55169: LD_VAR 0 28
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: PUSH
55182: LD_VAR 0 4
55186: PUSH
55187: LD_INT 1
55189: PLUS
55190: ARRAY
55191: ST_TO_ADDR
55192: GO 55195
55194: POP
55195: GO 55750
55197: LD_INT 2
55199: DOUBLE
55200: EQUAL
55201: IFTRUE 55211
55203: LD_INT 3
55205: DOUBLE
55206: EQUAL
55207: IFTRUE 55211
55209: GO 55267
55211: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55212: LD_ADDR_VAR 0 9
55216: PUSH
55217: LD_VAR 0 29
55221: PUSH
55222: LD_VAR 0 30
55226: PUSH
55227: LD_VAR 0 31
55231: PUSH
55232: LD_VAR 0 32
55236: PUSH
55237: LD_VAR 0 33
55241: PUSH
55242: LD_VAR 0 34
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: PUSH
55255: LD_VAR 0 4
55259: PUSH
55260: LD_INT 1
55262: PLUS
55263: ARRAY
55264: ST_TO_ADDR
55265: GO 55750
55267: LD_INT 16
55269: DOUBLE
55270: EQUAL
55271: IFTRUE 55329
55273: LD_INT 17
55275: DOUBLE
55276: EQUAL
55277: IFTRUE 55329
55279: LD_INT 18
55281: DOUBLE
55282: EQUAL
55283: IFTRUE 55329
55285: LD_INT 19
55287: DOUBLE
55288: EQUAL
55289: IFTRUE 55329
55291: LD_INT 22
55293: DOUBLE
55294: EQUAL
55295: IFTRUE 55329
55297: LD_INT 20
55299: DOUBLE
55300: EQUAL
55301: IFTRUE 55329
55303: LD_INT 21
55305: DOUBLE
55306: EQUAL
55307: IFTRUE 55329
55309: LD_INT 23
55311: DOUBLE
55312: EQUAL
55313: IFTRUE 55329
55315: LD_INT 24
55317: DOUBLE
55318: EQUAL
55319: IFTRUE 55329
55321: LD_INT 25
55323: DOUBLE
55324: EQUAL
55325: IFTRUE 55329
55327: GO 55385
55329: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55330: LD_ADDR_VAR 0 9
55334: PUSH
55335: LD_VAR 0 35
55339: PUSH
55340: LD_VAR 0 36
55344: PUSH
55345: LD_VAR 0 37
55349: PUSH
55350: LD_VAR 0 38
55354: PUSH
55355: LD_VAR 0 39
55359: PUSH
55360: LD_VAR 0 40
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: PUSH
55373: LD_VAR 0 4
55377: PUSH
55378: LD_INT 1
55380: PLUS
55381: ARRAY
55382: ST_TO_ADDR
55383: GO 55750
55385: LD_INT 6
55387: DOUBLE
55388: EQUAL
55389: IFTRUE 55441
55391: LD_INT 7
55393: DOUBLE
55394: EQUAL
55395: IFTRUE 55441
55397: LD_INT 8
55399: DOUBLE
55400: EQUAL
55401: IFTRUE 55441
55403: LD_INT 13
55405: DOUBLE
55406: EQUAL
55407: IFTRUE 55441
55409: LD_INT 12
55411: DOUBLE
55412: EQUAL
55413: IFTRUE 55441
55415: LD_INT 15
55417: DOUBLE
55418: EQUAL
55419: IFTRUE 55441
55421: LD_INT 11
55423: DOUBLE
55424: EQUAL
55425: IFTRUE 55441
55427: LD_INT 14
55429: DOUBLE
55430: EQUAL
55431: IFTRUE 55441
55433: LD_INT 10
55435: DOUBLE
55436: EQUAL
55437: IFTRUE 55441
55439: GO 55497
55441: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55442: LD_ADDR_VAR 0 9
55446: PUSH
55447: LD_VAR 0 41
55451: PUSH
55452: LD_VAR 0 42
55456: PUSH
55457: LD_VAR 0 43
55461: PUSH
55462: LD_VAR 0 44
55466: PUSH
55467: LD_VAR 0 45
55471: PUSH
55472: LD_VAR 0 46
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: PUSH
55485: LD_VAR 0 4
55489: PUSH
55490: LD_INT 1
55492: PLUS
55493: ARRAY
55494: ST_TO_ADDR
55495: GO 55750
55497: LD_INT 36
55499: DOUBLE
55500: EQUAL
55501: IFTRUE 55505
55503: GO 55561
55505: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55506: LD_ADDR_VAR 0 9
55510: PUSH
55511: LD_VAR 0 47
55515: PUSH
55516: LD_VAR 0 48
55520: PUSH
55521: LD_VAR 0 49
55525: PUSH
55526: LD_VAR 0 50
55530: PUSH
55531: LD_VAR 0 51
55535: PUSH
55536: LD_VAR 0 52
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: PUSH
55549: LD_VAR 0 4
55553: PUSH
55554: LD_INT 1
55556: PLUS
55557: ARRAY
55558: ST_TO_ADDR
55559: GO 55750
55561: LD_INT 4
55563: DOUBLE
55564: EQUAL
55565: IFTRUE 55587
55567: LD_INT 5
55569: DOUBLE
55570: EQUAL
55571: IFTRUE 55587
55573: LD_INT 34
55575: DOUBLE
55576: EQUAL
55577: IFTRUE 55587
55579: LD_INT 37
55581: DOUBLE
55582: EQUAL
55583: IFTRUE 55587
55585: GO 55643
55587: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55588: LD_ADDR_VAR 0 9
55592: PUSH
55593: LD_VAR 0 53
55597: PUSH
55598: LD_VAR 0 54
55602: PUSH
55603: LD_VAR 0 55
55607: PUSH
55608: LD_VAR 0 56
55612: PUSH
55613: LD_VAR 0 57
55617: PUSH
55618: LD_VAR 0 58
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: PUSH
55631: LD_VAR 0 4
55635: PUSH
55636: LD_INT 1
55638: PLUS
55639: ARRAY
55640: ST_TO_ADDR
55641: GO 55750
55643: LD_INT 31
55645: DOUBLE
55646: EQUAL
55647: IFTRUE 55693
55649: LD_INT 32
55651: DOUBLE
55652: EQUAL
55653: IFTRUE 55693
55655: LD_INT 33
55657: DOUBLE
55658: EQUAL
55659: IFTRUE 55693
55661: LD_INT 27
55663: DOUBLE
55664: EQUAL
55665: IFTRUE 55693
55667: LD_INT 26
55669: DOUBLE
55670: EQUAL
55671: IFTRUE 55693
55673: LD_INT 28
55675: DOUBLE
55676: EQUAL
55677: IFTRUE 55693
55679: LD_INT 29
55681: DOUBLE
55682: EQUAL
55683: IFTRUE 55693
55685: LD_INT 30
55687: DOUBLE
55688: EQUAL
55689: IFTRUE 55693
55691: GO 55749
55693: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55694: LD_ADDR_VAR 0 9
55698: PUSH
55699: LD_VAR 0 59
55703: PUSH
55704: LD_VAR 0 60
55708: PUSH
55709: LD_VAR 0 61
55713: PUSH
55714: LD_VAR 0 62
55718: PUSH
55719: LD_VAR 0 63
55723: PUSH
55724: LD_VAR 0 64
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: PUSH
55737: LD_VAR 0 4
55741: PUSH
55742: LD_INT 1
55744: PLUS
55745: ARRAY
55746: ST_TO_ADDR
55747: GO 55750
55749: POP
// temp_list2 = [ ] ;
55750: LD_ADDR_VAR 0 10
55754: PUSH
55755: EMPTY
55756: ST_TO_ADDR
// for i in temp_list do
55757: LD_ADDR_VAR 0 8
55761: PUSH
55762: LD_VAR 0 9
55766: PUSH
55767: FOR_IN
55768: IFFALSE 55820
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55770: LD_ADDR_VAR 0 10
55774: PUSH
55775: LD_VAR 0 10
55779: PUSH
55780: LD_VAR 0 8
55784: PUSH
55785: LD_INT 1
55787: ARRAY
55788: PUSH
55789: LD_VAR 0 2
55793: PLUS
55794: PUSH
55795: LD_VAR 0 8
55799: PUSH
55800: LD_INT 2
55802: ARRAY
55803: PUSH
55804: LD_VAR 0 3
55808: PLUS
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: EMPTY
55815: LIST
55816: ADD
55817: ST_TO_ADDR
55818: GO 55767
55820: POP
55821: POP
// result = temp_list2 ;
55822: LD_ADDR_VAR 0 7
55826: PUSH
55827: LD_VAR 0 10
55831: ST_TO_ADDR
// end ;
55832: LD_VAR 0 7
55836: RET
// export function EnemyInRange ( unit , dist ) ; begin
55837: LD_INT 0
55839: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55840: LD_ADDR_VAR 0 3
55844: PUSH
55845: LD_VAR 0 1
55849: PPUSH
55850: CALL_OW 255
55854: PPUSH
55855: LD_VAR 0 1
55859: PPUSH
55860: CALL_OW 250
55864: PPUSH
55865: LD_VAR 0 1
55869: PPUSH
55870: CALL_OW 251
55874: PPUSH
55875: LD_VAR 0 2
55879: PPUSH
55880: CALL 29210 0 4
55884: PUSH
55885: LD_INT 4
55887: ARRAY
55888: ST_TO_ADDR
// end ;
55889: LD_VAR 0 3
55893: RET
// export function PlayerSeeMe ( unit ) ; begin
55894: LD_INT 0
55896: PPUSH
// result := See ( your_side , unit ) ;
55897: LD_ADDR_VAR 0 2
55901: PUSH
55902: LD_OWVAR 2
55906: PPUSH
55907: LD_VAR 0 1
55911: PPUSH
55912: CALL_OW 292
55916: ST_TO_ADDR
// end ;
55917: LD_VAR 0 2
55921: RET
// export function ReverseDir ( unit ) ; begin
55922: LD_INT 0
55924: PPUSH
// if not unit then
55925: LD_VAR 0 1
55929: NOT
55930: IFFALSE 55934
// exit ;
55932: GO 55957
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55934: LD_ADDR_VAR 0 2
55938: PUSH
55939: LD_VAR 0 1
55943: PPUSH
55944: CALL_OW 254
55948: PUSH
55949: LD_INT 3
55951: PLUS
55952: PUSH
55953: LD_INT 6
55955: MOD
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 2
55961: RET
// export function ReverseArray ( array ) ; var i ; begin
55962: LD_INT 0
55964: PPUSH
55965: PPUSH
// if not array then
55966: LD_VAR 0 1
55970: NOT
55971: IFFALSE 55975
// exit ;
55973: GO 56030
// result := [ ] ;
55975: LD_ADDR_VAR 0 2
55979: PUSH
55980: EMPTY
55981: ST_TO_ADDR
// for i := array downto 1 do
55982: LD_ADDR_VAR 0 3
55986: PUSH
55987: DOUBLE
55988: LD_VAR 0 1
55992: INC
55993: ST_TO_ADDR
55994: LD_INT 1
55996: PUSH
55997: FOR_DOWNTO
55998: IFFALSE 56028
// result := Join ( result , array [ i ] ) ;
56000: LD_ADDR_VAR 0 2
56004: PUSH
56005: LD_VAR 0 2
56009: PPUSH
56010: LD_VAR 0 1
56014: PUSH
56015: LD_VAR 0 3
56019: ARRAY
56020: PPUSH
56021: CALL 60836 0 2
56025: ST_TO_ADDR
56026: GO 55997
56028: POP
56029: POP
// end ;
56030: LD_VAR 0 2
56034: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56035: LD_INT 0
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
// if not unit or not hexes then
56043: LD_VAR 0 1
56047: NOT
56048: PUSH
56049: LD_VAR 0 2
56053: NOT
56054: OR
56055: IFFALSE 56059
// exit ;
56057: GO 56182
// dist := 9999 ;
56059: LD_ADDR_VAR 0 5
56063: PUSH
56064: LD_INT 9999
56066: ST_TO_ADDR
// for i = 1 to hexes do
56067: LD_ADDR_VAR 0 4
56071: PUSH
56072: DOUBLE
56073: LD_INT 1
56075: DEC
56076: ST_TO_ADDR
56077: LD_VAR 0 2
56081: PUSH
56082: FOR_TO
56083: IFFALSE 56170
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56085: LD_ADDR_VAR 0 6
56089: PUSH
56090: LD_VAR 0 1
56094: PPUSH
56095: LD_VAR 0 2
56099: PUSH
56100: LD_VAR 0 4
56104: ARRAY
56105: PUSH
56106: LD_INT 1
56108: ARRAY
56109: PPUSH
56110: LD_VAR 0 2
56114: PUSH
56115: LD_VAR 0 4
56119: ARRAY
56120: PUSH
56121: LD_INT 2
56123: ARRAY
56124: PPUSH
56125: CALL_OW 297
56129: ST_TO_ADDR
// if tdist < dist then
56130: LD_VAR 0 6
56134: PUSH
56135: LD_VAR 0 5
56139: LESS
56140: IFFALSE 56168
// begin hex := hexes [ i ] ;
56142: LD_ADDR_VAR 0 8
56146: PUSH
56147: LD_VAR 0 2
56151: PUSH
56152: LD_VAR 0 4
56156: ARRAY
56157: ST_TO_ADDR
// dist := tdist ;
56158: LD_ADDR_VAR 0 5
56162: PUSH
56163: LD_VAR 0 6
56167: ST_TO_ADDR
// end ; end ;
56168: GO 56082
56170: POP
56171: POP
// result := hex ;
56172: LD_ADDR_VAR 0 3
56176: PUSH
56177: LD_VAR 0 8
56181: ST_TO_ADDR
// end ;
56182: LD_VAR 0 3
56186: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56187: LD_INT 0
56189: PPUSH
56190: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56191: LD_VAR 0 1
56195: NOT
56196: PUSH
56197: LD_VAR 0 1
56201: PUSH
56202: LD_INT 21
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 23
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PPUSH
56226: CALL_OW 69
56230: IN
56231: NOT
56232: OR
56233: IFFALSE 56237
// exit ;
56235: GO 56284
// for i = 1 to 3 do
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: DOUBLE
56243: LD_INT 1
56245: DEC
56246: ST_TO_ADDR
56247: LD_INT 3
56249: PUSH
56250: FOR_TO
56251: IFFALSE 56282
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56253: LD_VAR 0 1
56257: PPUSH
56258: CALL_OW 250
56262: PPUSH
56263: LD_VAR 0 1
56267: PPUSH
56268: CALL_OW 251
56272: PPUSH
56273: LD_INT 1
56275: PPUSH
56276: CALL_OW 453
56280: GO 56250
56282: POP
56283: POP
// end ;
56284: LD_VAR 0 2
56288: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56289: LD_INT 0
56291: PPUSH
56292: PPUSH
56293: PPUSH
56294: PPUSH
56295: PPUSH
56296: PPUSH
// if not unit or not enemy_unit then
56297: LD_VAR 0 1
56301: NOT
56302: PUSH
56303: LD_VAR 0 2
56307: NOT
56308: OR
56309: IFFALSE 56313
// exit ;
56311: GO 56780
// if GetLives ( i ) < 250 then
56313: LD_VAR 0 4
56317: PPUSH
56318: CALL_OW 256
56322: PUSH
56323: LD_INT 250
56325: LESS
56326: IFFALSE 56339
// begin ComAutodestruct ( i ) ;
56328: LD_VAR 0 4
56332: PPUSH
56333: CALL 56187 0 1
// exit ;
56337: GO 56780
// end ; x := GetX ( enemy_unit ) ;
56339: LD_ADDR_VAR 0 7
56343: PUSH
56344: LD_VAR 0 2
56348: PPUSH
56349: CALL_OW 250
56353: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56354: LD_ADDR_VAR 0 8
56358: PUSH
56359: LD_VAR 0 2
56363: PPUSH
56364: CALL_OW 251
56368: ST_TO_ADDR
// if not x or not y then
56369: LD_VAR 0 7
56373: NOT
56374: PUSH
56375: LD_VAR 0 8
56379: NOT
56380: OR
56381: IFFALSE 56385
// exit ;
56383: GO 56780
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56385: LD_ADDR_VAR 0 6
56389: PUSH
56390: LD_VAR 0 7
56394: PPUSH
56395: LD_INT 0
56397: PPUSH
56398: LD_INT 4
56400: PPUSH
56401: CALL_OW 272
56405: PUSH
56406: LD_VAR 0 8
56410: PPUSH
56411: LD_INT 0
56413: PPUSH
56414: LD_INT 4
56416: PPUSH
56417: CALL_OW 273
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_VAR 0 7
56430: PPUSH
56431: LD_INT 1
56433: PPUSH
56434: LD_INT 4
56436: PPUSH
56437: CALL_OW 272
56441: PUSH
56442: LD_VAR 0 8
56446: PPUSH
56447: LD_INT 1
56449: PPUSH
56450: LD_INT 4
56452: PPUSH
56453: CALL_OW 273
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 7
56466: PPUSH
56467: LD_INT 2
56469: PPUSH
56470: LD_INT 4
56472: PPUSH
56473: CALL_OW 272
56477: PUSH
56478: LD_VAR 0 8
56482: PPUSH
56483: LD_INT 2
56485: PPUSH
56486: LD_INT 4
56488: PPUSH
56489: CALL_OW 273
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_VAR 0 7
56502: PPUSH
56503: LD_INT 3
56505: PPUSH
56506: LD_INT 4
56508: PPUSH
56509: CALL_OW 272
56513: PUSH
56514: LD_VAR 0 8
56518: PPUSH
56519: LD_INT 3
56521: PPUSH
56522: LD_INT 4
56524: PPUSH
56525: CALL_OW 273
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_VAR 0 7
56538: PPUSH
56539: LD_INT 4
56541: PPUSH
56542: LD_INT 4
56544: PPUSH
56545: CALL_OW 272
56549: PUSH
56550: LD_VAR 0 8
56554: PPUSH
56555: LD_INT 4
56557: PPUSH
56558: LD_INT 4
56560: PPUSH
56561: CALL_OW 273
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_VAR 0 7
56574: PPUSH
56575: LD_INT 5
56577: PPUSH
56578: LD_INT 4
56580: PPUSH
56581: CALL_OW 272
56585: PUSH
56586: LD_VAR 0 8
56590: PPUSH
56591: LD_INT 5
56593: PPUSH
56594: LD_INT 4
56596: PPUSH
56597: CALL_OW 273
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// for i = tmp downto 1 do
56614: LD_ADDR_VAR 0 4
56618: PUSH
56619: DOUBLE
56620: LD_VAR 0 6
56624: INC
56625: ST_TO_ADDR
56626: LD_INT 1
56628: PUSH
56629: FOR_DOWNTO
56630: IFFALSE 56731
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56632: LD_VAR 0 6
56636: PUSH
56637: LD_VAR 0 4
56641: ARRAY
56642: PUSH
56643: LD_INT 1
56645: ARRAY
56646: PPUSH
56647: LD_VAR 0 6
56651: PUSH
56652: LD_VAR 0 4
56656: ARRAY
56657: PUSH
56658: LD_INT 2
56660: ARRAY
56661: PPUSH
56662: CALL_OW 488
56666: NOT
56667: PUSH
56668: LD_VAR 0 6
56672: PUSH
56673: LD_VAR 0 4
56677: ARRAY
56678: PUSH
56679: LD_INT 1
56681: ARRAY
56682: PPUSH
56683: LD_VAR 0 6
56687: PUSH
56688: LD_VAR 0 4
56692: ARRAY
56693: PUSH
56694: LD_INT 2
56696: ARRAY
56697: PPUSH
56698: CALL_OW 428
56702: PUSH
56703: LD_INT 0
56705: NONEQUAL
56706: OR
56707: IFFALSE 56729
// tmp := Delete ( tmp , i ) ;
56709: LD_ADDR_VAR 0 6
56713: PUSH
56714: LD_VAR 0 6
56718: PPUSH
56719: LD_VAR 0 4
56723: PPUSH
56724: CALL_OW 3
56728: ST_TO_ADDR
56729: GO 56629
56731: POP
56732: POP
// j := GetClosestHex ( unit , tmp ) ;
56733: LD_ADDR_VAR 0 5
56737: PUSH
56738: LD_VAR 0 1
56742: PPUSH
56743: LD_VAR 0 6
56747: PPUSH
56748: CALL 56035 0 2
56752: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56753: LD_VAR 0 1
56757: PPUSH
56758: LD_VAR 0 5
56762: PUSH
56763: LD_INT 1
56765: ARRAY
56766: PPUSH
56767: LD_VAR 0 5
56771: PUSH
56772: LD_INT 2
56774: ARRAY
56775: PPUSH
56776: CALL_OW 111
// end ;
56780: LD_VAR 0 3
56784: RET
// export function PrepareApemanSoldier ( ) ; begin
56785: LD_INT 0
56787: PPUSH
// uc_nation := 0 ;
56788: LD_ADDR_OWVAR 21
56792: PUSH
56793: LD_INT 0
56795: ST_TO_ADDR
// hc_sex := sex_male ;
56796: LD_ADDR_OWVAR 27
56800: PUSH
56801: LD_INT 1
56803: ST_TO_ADDR
// hc_name :=  ;
56804: LD_ADDR_OWVAR 26
56808: PUSH
56809: LD_STRING 
56811: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56812: LD_ADDR_OWVAR 28
56816: PUSH
56817: LD_INT 15
56819: ST_TO_ADDR
// hc_gallery :=  ;
56820: LD_ADDR_OWVAR 33
56824: PUSH
56825: LD_STRING 
56827: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56828: LD_ADDR_OWVAR 31
56832: PUSH
56833: LD_INT 0
56835: PPUSH
56836: LD_INT 3
56838: PPUSH
56839: CALL_OW 12
56843: PUSH
56844: LD_INT 0
56846: PPUSH
56847: LD_INT 3
56849: PPUSH
56850: CALL_OW 12
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56867: LD_ADDR_OWVAR 29
56871: PUSH
56872: LD_INT 12
56874: PUSH
56875: LD_INT 12
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: ST_TO_ADDR
// end ;
56882: LD_VAR 0 1
56886: RET
// export function PrepareApemanEngineer ( ) ; begin
56887: LD_INT 0
56889: PPUSH
// uc_nation := 0 ;
56890: LD_ADDR_OWVAR 21
56894: PUSH
56895: LD_INT 0
56897: ST_TO_ADDR
// hc_sex := sex_male ;
56898: LD_ADDR_OWVAR 27
56902: PUSH
56903: LD_INT 1
56905: ST_TO_ADDR
// hc_name :=  ;
56906: LD_ADDR_OWVAR 26
56910: PUSH
56911: LD_STRING 
56913: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56914: LD_ADDR_OWVAR 28
56918: PUSH
56919: LD_INT 16
56921: ST_TO_ADDR
// hc_gallery :=  ;
56922: LD_ADDR_OWVAR 33
56926: PUSH
56927: LD_STRING 
56929: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56930: LD_ADDR_OWVAR 31
56934: PUSH
56935: LD_INT 0
56937: PPUSH
56938: LD_INT 3
56940: PPUSH
56941: CALL_OW 12
56945: PUSH
56946: LD_INT 0
56948: PPUSH
56949: LD_INT 3
56951: PPUSH
56952: CALL_OW 12
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56969: LD_ADDR_OWVAR 29
56973: PUSH
56974: LD_INT 12
56976: PUSH
56977: LD_INT 12
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// end ;
56984: LD_VAR 0 1
56988: RET
// export function PrepareApeman ( agressivity ) ; begin
56989: LD_INT 0
56991: PPUSH
// uc_side := 0 ;
56992: LD_ADDR_OWVAR 20
56996: PUSH
56997: LD_INT 0
56999: ST_TO_ADDR
// uc_nation := 0 ;
57000: LD_ADDR_OWVAR 21
57004: PUSH
57005: LD_INT 0
57007: ST_TO_ADDR
// hc_sex := sex_male ;
57008: LD_ADDR_OWVAR 27
57012: PUSH
57013: LD_INT 1
57015: ST_TO_ADDR
// hc_class := class_apeman ;
57016: LD_ADDR_OWVAR 28
57020: PUSH
57021: LD_INT 12
57023: ST_TO_ADDR
// hc_gallery :=  ;
57024: LD_ADDR_OWVAR 33
57028: PUSH
57029: LD_STRING 
57031: ST_TO_ADDR
// hc_name :=  ;
57032: LD_ADDR_OWVAR 26
57036: PUSH
57037: LD_STRING 
57039: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57040: LD_ADDR_OWVAR 29
57044: PUSH
57045: LD_INT 12
57047: PUSH
57048: LD_INT 12
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// if agressivity = 0 then
57055: LD_VAR 0 1
57059: PUSH
57060: LD_INT 0
57062: EQUAL
57063: IFFALSE 57075
// hc_agressivity := 0 else
57065: LD_ADDR_OWVAR 35
57069: PUSH
57070: LD_INT 0
57072: ST_TO_ADDR
57073: GO 57096
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57075: LD_ADDR_OWVAR 35
57079: PUSH
57080: LD_VAR 0 1
57084: NEG
57085: PPUSH
57086: LD_VAR 0 1
57090: PPUSH
57091: CALL_OW 12
57095: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57096: LD_ADDR_OWVAR 31
57100: PUSH
57101: LD_INT 0
57103: PPUSH
57104: LD_INT 3
57106: PPUSH
57107: CALL_OW 12
57111: PUSH
57112: LD_INT 0
57114: PPUSH
57115: LD_INT 3
57117: PPUSH
57118: CALL_OW 12
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: ST_TO_ADDR
// end ;
57135: LD_VAR 0 2
57139: RET
// export function PrepareTiger ( agressivity ) ; begin
57140: LD_INT 0
57142: PPUSH
// uc_side := 0 ;
57143: LD_ADDR_OWVAR 20
57147: PUSH
57148: LD_INT 0
57150: ST_TO_ADDR
// uc_nation := 0 ;
57151: LD_ADDR_OWVAR 21
57155: PUSH
57156: LD_INT 0
57158: ST_TO_ADDR
// InitHc ;
57159: CALL_OW 19
// hc_class := class_tiger ;
57163: LD_ADDR_OWVAR 28
57167: PUSH
57168: LD_INT 14
57170: ST_TO_ADDR
// hc_gallery :=  ;
57171: LD_ADDR_OWVAR 33
57175: PUSH
57176: LD_STRING 
57178: ST_TO_ADDR
// hc_name :=  ;
57179: LD_ADDR_OWVAR 26
57183: PUSH
57184: LD_STRING 
57186: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57187: LD_ADDR_OWVAR 35
57191: PUSH
57192: LD_VAR 0 1
57196: NEG
57197: PPUSH
57198: LD_VAR 0 1
57202: PPUSH
57203: CALL_OW 12
57207: ST_TO_ADDR
// end ;
57208: LD_VAR 0 2
57212: RET
// export function PrepareEnchidna ( ) ; begin
57213: LD_INT 0
57215: PPUSH
// uc_side := 0 ;
57216: LD_ADDR_OWVAR 20
57220: PUSH
57221: LD_INT 0
57223: ST_TO_ADDR
// uc_nation := 0 ;
57224: LD_ADDR_OWVAR 21
57228: PUSH
57229: LD_INT 0
57231: ST_TO_ADDR
// InitHc ;
57232: CALL_OW 19
// hc_class := class_baggie ;
57236: LD_ADDR_OWVAR 28
57240: PUSH
57241: LD_INT 13
57243: ST_TO_ADDR
// hc_gallery :=  ;
57244: LD_ADDR_OWVAR 33
57248: PUSH
57249: LD_STRING 
57251: ST_TO_ADDR
// hc_name :=  ;
57252: LD_ADDR_OWVAR 26
57256: PUSH
57257: LD_STRING 
57259: ST_TO_ADDR
// end ;
57260: LD_VAR 0 1
57264: RET
// export function PrepareFrog ( ) ; begin
57265: LD_INT 0
57267: PPUSH
// uc_side := 0 ;
57268: LD_ADDR_OWVAR 20
57272: PUSH
57273: LD_INT 0
57275: ST_TO_ADDR
// uc_nation := 0 ;
57276: LD_ADDR_OWVAR 21
57280: PUSH
57281: LD_INT 0
57283: ST_TO_ADDR
// InitHc ;
57284: CALL_OW 19
// hc_class := class_frog ;
57288: LD_ADDR_OWVAR 28
57292: PUSH
57293: LD_INT 19
57295: ST_TO_ADDR
// hc_gallery :=  ;
57296: LD_ADDR_OWVAR 33
57300: PUSH
57301: LD_STRING 
57303: ST_TO_ADDR
// hc_name :=  ;
57304: LD_ADDR_OWVAR 26
57308: PUSH
57309: LD_STRING 
57311: ST_TO_ADDR
// end ;
57312: LD_VAR 0 1
57316: RET
// export function PrepareFish ( ) ; begin
57317: LD_INT 0
57319: PPUSH
// uc_side := 0 ;
57320: LD_ADDR_OWVAR 20
57324: PUSH
57325: LD_INT 0
57327: ST_TO_ADDR
// uc_nation := 0 ;
57328: LD_ADDR_OWVAR 21
57332: PUSH
57333: LD_INT 0
57335: ST_TO_ADDR
// InitHc ;
57336: CALL_OW 19
// hc_class := class_fish ;
57340: LD_ADDR_OWVAR 28
57344: PUSH
57345: LD_INT 20
57347: ST_TO_ADDR
// hc_gallery :=  ;
57348: LD_ADDR_OWVAR 33
57352: PUSH
57353: LD_STRING 
57355: ST_TO_ADDR
// hc_name :=  ;
57356: LD_ADDR_OWVAR 26
57360: PUSH
57361: LD_STRING 
57363: ST_TO_ADDR
// end ;
57364: LD_VAR 0 1
57368: RET
// export function PrepareBird ( ) ; begin
57369: LD_INT 0
57371: PPUSH
// uc_side := 0 ;
57372: LD_ADDR_OWVAR 20
57376: PUSH
57377: LD_INT 0
57379: ST_TO_ADDR
// uc_nation := 0 ;
57380: LD_ADDR_OWVAR 21
57384: PUSH
57385: LD_INT 0
57387: ST_TO_ADDR
// InitHc ;
57388: CALL_OW 19
// hc_class := class_phororhacos ;
57392: LD_ADDR_OWVAR 28
57396: PUSH
57397: LD_INT 18
57399: ST_TO_ADDR
// hc_gallery :=  ;
57400: LD_ADDR_OWVAR 33
57404: PUSH
57405: LD_STRING 
57407: ST_TO_ADDR
// hc_name :=  ;
57408: LD_ADDR_OWVAR 26
57412: PUSH
57413: LD_STRING 
57415: ST_TO_ADDR
// end ;
57416: LD_VAR 0 1
57420: RET
// export function PrepareHorse ( ) ; begin
57421: LD_INT 0
57423: PPUSH
// uc_side := 0 ;
57424: LD_ADDR_OWVAR 20
57428: PUSH
57429: LD_INT 0
57431: ST_TO_ADDR
// uc_nation := 0 ;
57432: LD_ADDR_OWVAR 21
57436: PUSH
57437: LD_INT 0
57439: ST_TO_ADDR
// InitHc ;
57440: CALL_OW 19
// hc_class := class_horse ;
57444: LD_ADDR_OWVAR 28
57448: PUSH
57449: LD_INT 21
57451: ST_TO_ADDR
// hc_gallery :=  ;
57452: LD_ADDR_OWVAR 33
57456: PUSH
57457: LD_STRING 
57459: ST_TO_ADDR
// hc_name :=  ;
57460: LD_ADDR_OWVAR 26
57464: PUSH
57465: LD_STRING 
57467: ST_TO_ADDR
// end ;
57468: LD_VAR 0 1
57472: RET
// export function PrepareMastodont ( ) ; begin
57473: LD_INT 0
57475: PPUSH
// uc_side := 0 ;
57476: LD_ADDR_OWVAR 20
57480: PUSH
57481: LD_INT 0
57483: ST_TO_ADDR
// uc_nation := 0 ;
57484: LD_ADDR_OWVAR 21
57488: PUSH
57489: LD_INT 0
57491: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57492: LD_ADDR_OWVAR 37
57496: PUSH
57497: LD_INT 31
57499: ST_TO_ADDR
// vc_control := control_rider ;
57500: LD_ADDR_OWVAR 38
57504: PUSH
57505: LD_INT 4
57507: ST_TO_ADDR
// end ;
57508: LD_VAR 0 1
57512: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57513: LD_INT 0
57515: PPUSH
57516: PPUSH
57517: PPUSH
// uc_side = 0 ;
57518: LD_ADDR_OWVAR 20
57522: PUSH
57523: LD_INT 0
57525: ST_TO_ADDR
// uc_nation = 0 ;
57526: LD_ADDR_OWVAR 21
57530: PUSH
57531: LD_INT 0
57533: ST_TO_ADDR
// InitHc_All ( ) ;
57534: CALL_OW 584
// InitVc ;
57538: CALL_OW 20
// if mastodonts then
57542: LD_VAR 0 6
57546: IFFALSE 57613
// for i = 1 to mastodonts do
57548: LD_ADDR_VAR 0 11
57552: PUSH
57553: DOUBLE
57554: LD_INT 1
57556: DEC
57557: ST_TO_ADDR
57558: LD_VAR 0 6
57562: PUSH
57563: FOR_TO
57564: IFFALSE 57611
// begin vc_chassis := 31 ;
57566: LD_ADDR_OWVAR 37
57570: PUSH
57571: LD_INT 31
57573: ST_TO_ADDR
// vc_control := control_rider ;
57574: LD_ADDR_OWVAR 38
57578: PUSH
57579: LD_INT 4
57581: ST_TO_ADDR
// animal := CreateVehicle ;
57582: LD_ADDR_VAR 0 12
57586: PUSH
57587: CALL_OW 45
57591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57592: LD_VAR 0 12
57596: PPUSH
57597: LD_VAR 0 8
57601: PPUSH
57602: LD_INT 0
57604: PPUSH
57605: CALL 59741 0 3
// end ;
57609: GO 57563
57611: POP
57612: POP
// if horses then
57613: LD_VAR 0 5
57617: IFFALSE 57684
// for i = 1 to horses do
57619: LD_ADDR_VAR 0 11
57623: PUSH
57624: DOUBLE
57625: LD_INT 1
57627: DEC
57628: ST_TO_ADDR
57629: LD_VAR 0 5
57633: PUSH
57634: FOR_TO
57635: IFFALSE 57682
// begin hc_class := 21 ;
57637: LD_ADDR_OWVAR 28
57641: PUSH
57642: LD_INT 21
57644: ST_TO_ADDR
// hc_gallery :=  ;
57645: LD_ADDR_OWVAR 33
57649: PUSH
57650: LD_STRING 
57652: ST_TO_ADDR
// animal := CreateHuman ;
57653: LD_ADDR_VAR 0 12
57657: PUSH
57658: CALL_OW 44
57662: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57663: LD_VAR 0 12
57667: PPUSH
57668: LD_VAR 0 8
57672: PPUSH
57673: LD_INT 0
57675: PPUSH
57676: CALL 59741 0 3
// end ;
57680: GO 57634
57682: POP
57683: POP
// if birds then
57684: LD_VAR 0 1
57688: IFFALSE 57755
// for i = 1 to birds do
57690: LD_ADDR_VAR 0 11
57694: PUSH
57695: DOUBLE
57696: LD_INT 1
57698: DEC
57699: ST_TO_ADDR
57700: LD_VAR 0 1
57704: PUSH
57705: FOR_TO
57706: IFFALSE 57753
// begin hc_class := 18 ;
57708: LD_ADDR_OWVAR 28
57712: PUSH
57713: LD_INT 18
57715: ST_TO_ADDR
// hc_gallery =  ;
57716: LD_ADDR_OWVAR 33
57720: PUSH
57721: LD_STRING 
57723: ST_TO_ADDR
// animal := CreateHuman ;
57724: LD_ADDR_VAR 0 12
57728: PUSH
57729: CALL_OW 44
57733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57734: LD_VAR 0 12
57738: PPUSH
57739: LD_VAR 0 8
57743: PPUSH
57744: LD_INT 0
57746: PPUSH
57747: CALL 59741 0 3
// end ;
57751: GO 57705
57753: POP
57754: POP
// if tigers then
57755: LD_VAR 0 2
57759: IFFALSE 57843
// for i = 1 to tigers do
57761: LD_ADDR_VAR 0 11
57765: PUSH
57766: DOUBLE
57767: LD_INT 1
57769: DEC
57770: ST_TO_ADDR
57771: LD_VAR 0 2
57775: PUSH
57776: FOR_TO
57777: IFFALSE 57841
// begin hc_class = class_tiger ;
57779: LD_ADDR_OWVAR 28
57783: PUSH
57784: LD_INT 14
57786: ST_TO_ADDR
// hc_gallery =  ;
57787: LD_ADDR_OWVAR 33
57791: PUSH
57792: LD_STRING 
57794: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57795: LD_ADDR_OWVAR 35
57799: PUSH
57800: LD_INT 7
57802: NEG
57803: PPUSH
57804: LD_INT 7
57806: PPUSH
57807: CALL_OW 12
57811: ST_TO_ADDR
// animal := CreateHuman ;
57812: LD_ADDR_VAR 0 12
57816: PUSH
57817: CALL_OW 44
57821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57822: LD_VAR 0 12
57826: PPUSH
57827: LD_VAR 0 8
57831: PPUSH
57832: LD_INT 0
57834: PPUSH
57835: CALL 59741 0 3
// end ;
57839: GO 57776
57841: POP
57842: POP
// if apemans then
57843: LD_VAR 0 3
57847: IFFALSE 57970
// for i = 1 to apemans do
57849: LD_ADDR_VAR 0 11
57853: PUSH
57854: DOUBLE
57855: LD_INT 1
57857: DEC
57858: ST_TO_ADDR
57859: LD_VAR 0 3
57863: PUSH
57864: FOR_TO
57865: IFFALSE 57968
// begin hc_class = class_apeman ;
57867: LD_ADDR_OWVAR 28
57871: PUSH
57872: LD_INT 12
57874: ST_TO_ADDR
// hc_gallery =  ;
57875: LD_ADDR_OWVAR 33
57879: PUSH
57880: LD_STRING 
57882: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57883: LD_ADDR_OWVAR 35
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PPUSH
57892: LD_INT 2
57894: PPUSH
57895: CALL_OW 12
57899: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57900: LD_ADDR_OWVAR 31
57904: PUSH
57905: LD_INT 1
57907: PPUSH
57908: LD_INT 3
57910: PPUSH
57911: CALL_OW 12
57915: PUSH
57916: LD_INT 1
57918: PPUSH
57919: LD_INT 3
57921: PPUSH
57922: CALL_OW 12
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
// animal := CreateHuman ;
57939: LD_ADDR_VAR 0 12
57943: PUSH
57944: CALL_OW 44
57948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57949: LD_VAR 0 12
57953: PPUSH
57954: LD_VAR 0 8
57958: PPUSH
57959: LD_INT 0
57961: PPUSH
57962: CALL 59741 0 3
// end ;
57966: GO 57864
57968: POP
57969: POP
// if enchidnas then
57970: LD_VAR 0 4
57974: IFFALSE 58041
// for i = 1 to enchidnas do
57976: LD_ADDR_VAR 0 11
57980: PUSH
57981: DOUBLE
57982: LD_INT 1
57984: DEC
57985: ST_TO_ADDR
57986: LD_VAR 0 4
57990: PUSH
57991: FOR_TO
57992: IFFALSE 58039
// begin hc_class = 13 ;
57994: LD_ADDR_OWVAR 28
57998: PUSH
57999: LD_INT 13
58001: ST_TO_ADDR
// hc_gallery =  ;
58002: LD_ADDR_OWVAR 33
58006: PUSH
58007: LD_STRING 
58009: ST_TO_ADDR
// animal := CreateHuman ;
58010: LD_ADDR_VAR 0 12
58014: PUSH
58015: CALL_OW 44
58019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58020: LD_VAR 0 12
58024: PPUSH
58025: LD_VAR 0 8
58029: PPUSH
58030: LD_INT 0
58032: PPUSH
58033: CALL 59741 0 3
// end ;
58037: GO 57991
58039: POP
58040: POP
// if fishes then
58041: LD_VAR 0 7
58045: IFFALSE 58112
// for i = 1 to fishes do
58047: LD_ADDR_VAR 0 11
58051: PUSH
58052: DOUBLE
58053: LD_INT 1
58055: DEC
58056: ST_TO_ADDR
58057: LD_VAR 0 7
58061: PUSH
58062: FOR_TO
58063: IFFALSE 58110
// begin hc_class = 20 ;
58065: LD_ADDR_OWVAR 28
58069: PUSH
58070: LD_INT 20
58072: ST_TO_ADDR
// hc_gallery =  ;
58073: LD_ADDR_OWVAR 33
58077: PUSH
58078: LD_STRING 
58080: ST_TO_ADDR
// animal := CreateHuman ;
58081: LD_ADDR_VAR 0 12
58085: PUSH
58086: CALL_OW 44
58090: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58091: LD_VAR 0 12
58095: PPUSH
58096: LD_VAR 0 9
58100: PPUSH
58101: LD_INT 0
58103: PPUSH
58104: CALL 59741 0 3
// end ;
58108: GO 58062
58110: POP
58111: POP
// end ;
58112: LD_VAR 0 10
58116: RET
// export function WantHeal ( sci , unit ) ; begin
58117: LD_INT 0
58119: PPUSH
// if GetTaskList ( sci ) > 0 then
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 437
58129: PUSH
58130: LD_INT 0
58132: GREATER
58133: IFFALSE 58203
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58135: LD_VAR 0 1
58139: PPUSH
58140: CALL_OW 437
58144: PUSH
58145: LD_INT 1
58147: ARRAY
58148: PUSH
58149: LD_INT 1
58151: ARRAY
58152: PUSH
58153: LD_STRING l
58155: EQUAL
58156: PUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 437
58166: PUSH
58167: LD_INT 1
58169: ARRAY
58170: PUSH
58171: LD_INT 4
58173: ARRAY
58174: PUSH
58175: LD_VAR 0 2
58179: EQUAL
58180: AND
58181: IFFALSE 58193
// result := true else
58183: LD_ADDR_VAR 0 3
58187: PUSH
58188: LD_INT 1
58190: ST_TO_ADDR
58191: GO 58201
// result := false ;
58193: LD_ADDR_VAR 0 3
58197: PUSH
58198: LD_INT 0
58200: ST_TO_ADDR
// end else
58201: GO 58211
// result := false ;
58203: LD_ADDR_VAR 0 3
58207: PUSH
58208: LD_INT 0
58210: ST_TO_ADDR
// end ;
58211: LD_VAR 0 3
58215: RET
// export function HealTarget ( sci ) ; begin
58216: LD_INT 0
58218: PPUSH
// if not sci then
58219: LD_VAR 0 1
58223: NOT
58224: IFFALSE 58228
// exit ;
58226: GO 58293
// result := 0 ;
58228: LD_ADDR_VAR 0 2
58232: PUSH
58233: LD_INT 0
58235: ST_TO_ADDR
// if GetTaskList ( sci ) then
58236: LD_VAR 0 1
58240: PPUSH
58241: CALL_OW 437
58245: IFFALSE 58293
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58247: LD_VAR 0 1
58251: PPUSH
58252: CALL_OW 437
58256: PUSH
58257: LD_INT 1
58259: ARRAY
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: PUSH
58265: LD_STRING l
58267: EQUAL
58268: IFFALSE 58293
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58270: LD_ADDR_VAR 0 2
58274: PUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: CALL_OW 437
58284: PUSH
58285: LD_INT 1
58287: ARRAY
58288: PUSH
58289: LD_INT 4
58291: ARRAY
58292: ST_TO_ADDR
// end ;
58293: LD_VAR 0 2
58297: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58298: LD_INT 0
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
// if not base_units then
58304: LD_VAR 0 1
58308: NOT
58309: IFFALSE 58313
// exit ;
58311: GO 58400
// result := false ;
58313: LD_ADDR_VAR 0 2
58317: PUSH
58318: LD_INT 0
58320: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58321: LD_ADDR_VAR 0 5
58325: PUSH
58326: LD_VAR 0 1
58330: PPUSH
58331: LD_INT 21
58333: PUSH
58334: LD_INT 3
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PPUSH
58341: CALL_OW 72
58345: ST_TO_ADDR
// if not tmp then
58346: LD_VAR 0 5
58350: NOT
58351: IFFALSE 58355
// exit ;
58353: GO 58400
// for i in tmp do
58355: LD_ADDR_VAR 0 3
58359: PUSH
58360: LD_VAR 0 5
58364: PUSH
58365: FOR_IN
58366: IFFALSE 58398
// begin result := EnemyInRange ( i , 22 ) ;
58368: LD_ADDR_VAR 0 2
58372: PUSH
58373: LD_VAR 0 3
58377: PPUSH
58378: LD_INT 22
58380: PPUSH
58381: CALL 55837 0 2
58385: ST_TO_ADDR
// if result then
58386: LD_VAR 0 2
58390: IFFALSE 58396
// exit ;
58392: POP
58393: POP
58394: GO 58400
// end ;
58396: GO 58365
58398: POP
58399: POP
// end ;
58400: LD_VAR 0 2
58404: RET
// export function FilterByTag ( units , tag ) ; begin
58405: LD_INT 0
58407: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58408: LD_ADDR_VAR 0 3
58412: PUSH
58413: LD_VAR 0 1
58417: PPUSH
58418: LD_INT 120
58420: PUSH
58421: LD_VAR 0 2
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PPUSH
58430: CALL_OW 72
58434: ST_TO_ADDR
// end ;
58435: LD_VAR 0 3
58439: RET
// export function IsDriver ( un ) ; begin
58440: LD_INT 0
58442: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58443: LD_ADDR_VAR 0 2
58447: PUSH
58448: LD_VAR 0 1
58452: PUSH
58453: LD_INT 55
58455: PUSH
58456: EMPTY
58457: LIST
58458: PPUSH
58459: CALL_OW 69
58463: IN
58464: ST_TO_ADDR
// end ;
58465: LD_VAR 0 2
58469: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58470: LD_INT 0
58472: PPUSH
58473: PPUSH
// list := [ ] ;
58474: LD_ADDR_VAR 0 5
58478: PUSH
58479: EMPTY
58480: ST_TO_ADDR
// case d of 0 :
58481: LD_VAR 0 3
58485: PUSH
58486: LD_INT 0
58488: DOUBLE
58489: EQUAL
58490: IFTRUE 58494
58492: GO 58627
58494: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58495: LD_ADDR_VAR 0 5
58499: PUSH
58500: LD_VAR 0 1
58504: PUSH
58505: LD_INT 4
58507: MINUS
58508: PUSH
58509: LD_VAR 0 2
58513: PUSH
58514: LD_INT 4
58516: MINUS
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: PUSH
58526: LD_VAR 0 1
58530: PUSH
58531: LD_INT 3
58533: MINUS
58534: PUSH
58535: LD_VAR 0 2
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: PUSH
58548: LD_VAR 0 1
58552: PUSH
58553: LD_INT 4
58555: PLUS
58556: PUSH
58557: LD_VAR 0 2
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: LIST
58569: PUSH
58570: LD_VAR 0 1
58574: PUSH
58575: LD_INT 3
58577: PLUS
58578: PUSH
58579: LD_VAR 0 2
58583: PUSH
58584: LD_INT 3
58586: PLUS
58587: PUSH
58588: LD_INT 5
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: PUSH
58596: LD_VAR 0 1
58600: PUSH
58601: LD_VAR 0 2
58605: PUSH
58606: LD_INT 4
58608: PLUS
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: LIST
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: ST_TO_ADDR
// end ; 1 :
58625: GO 59325
58627: LD_INT 1
58629: DOUBLE
58630: EQUAL
58631: IFTRUE 58635
58633: GO 58768
58635: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58636: LD_ADDR_VAR 0 5
58640: PUSH
58641: LD_VAR 0 1
58645: PUSH
58646: LD_VAR 0 2
58650: PUSH
58651: LD_INT 4
58653: MINUS
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: LIST
58662: PUSH
58663: LD_VAR 0 1
58667: PUSH
58668: LD_INT 3
58670: MINUS
58671: PUSH
58672: LD_VAR 0 2
58676: PUSH
58677: LD_INT 3
58679: MINUS
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: PUSH
58689: LD_VAR 0 1
58693: PUSH
58694: LD_INT 4
58696: MINUS
58697: PUSH
58698: LD_VAR 0 2
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: PUSH
58711: LD_VAR 0 1
58715: PUSH
58716: LD_VAR 0 2
58720: PUSH
58721: LD_INT 3
58723: PLUS
58724: PUSH
58725: LD_INT 0
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: PUSH
58733: LD_VAR 0 1
58737: PUSH
58738: LD_INT 4
58740: PLUS
58741: PUSH
58742: LD_VAR 0 2
58746: PUSH
58747: LD_INT 4
58749: PLUS
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: ST_TO_ADDR
// end ; 2 :
58766: GO 59325
58768: LD_INT 2
58770: DOUBLE
58771: EQUAL
58772: IFTRUE 58776
58774: GO 58905
58776: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58777: LD_ADDR_VAR 0 5
58781: PUSH
58782: LD_VAR 0 1
58786: PUSH
58787: LD_VAR 0 2
58791: PUSH
58792: LD_INT 3
58794: MINUS
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: LIST
58803: PUSH
58804: LD_VAR 0 1
58808: PUSH
58809: LD_INT 4
58811: PLUS
58812: PUSH
58813: LD_VAR 0 2
58817: PUSH
58818: LD_INT 4
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: LIST
58825: PUSH
58826: LD_VAR 0 1
58830: PUSH
58831: LD_VAR 0 2
58835: PUSH
58836: LD_INT 4
58838: PLUS
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: LIST
58847: PUSH
58848: LD_VAR 0 1
58852: PUSH
58853: LD_INT 3
58855: MINUS
58856: PUSH
58857: LD_VAR 0 2
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: PUSH
58870: LD_VAR 0 1
58874: PUSH
58875: LD_INT 4
58877: MINUS
58878: PUSH
58879: LD_VAR 0 2
58883: PUSH
58884: LD_INT 4
58886: MINUS
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: ST_TO_ADDR
// end ; 3 :
58903: GO 59325
58905: LD_INT 3
58907: DOUBLE
58908: EQUAL
58909: IFTRUE 58913
58911: GO 59046
58913: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58914: LD_ADDR_VAR 0 5
58918: PUSH
58919: LD_VAR 0 1
58923: PUSH
58924: LD_INT 3
58926: PLUS
58927: PUSH
58928: LD_VAR 0 2
58932: PUSH
58933: LD_INT 4
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: LIST
58940: PUSH
58941: LD_VAR 0 1
58945: PUSH
58946: LD_INT 4
58948: PLUS
58949: PUSH
58950: LD_VAR 0 2
58954: PUSH
58955: LD_INT 4
58957: PLUS
58958: PUSH
58959: LD_INT 5
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: PUSH
58967: LD_VAR 0 1
58971: PUSH
58972: LD_INT 4
58974: MINUS
58975: PUSH
58976: LD_VAR 0 2
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: PUSH
58989: LD_VAR 0 1
58993: PUSH
58994: LD_VAR 0 2
58998: PUSH
58999: LD_INT 4
59001: MINUS
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: LIST
59010: PUSH
59011: LD_VAR 0 1
59015: PUSH
59016: LD_INT 3
59018: MINUS
59019: PUSH
59020: LD_VAR 0 2
59024: PUSH
59025: LD_INT 3
59027: MINUS
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: ST_TO_ADDR
// end ; 4 :
59044: GO 59325
59046: LD_INT 4
59048: DOUBLE
59049: EQUAL
59050: IFTRUE 59054
59052: GO 59187
59054: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59055: LD_ADDR_VAR 0 5
59059: PUSH
59060: LD_VAR 0 1
59064: PUSH
59065: LD_VAR 0 2
59069: PUSH
59070: LD_INT 4
59072: PLUS
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: LIST
59081: PUSH
59082: LD_VAR 0 1
59086: PUSH
59087: LD_INT 3
59089: PLUS
59090: PUSH
59091: LD_VAR 0 2
59095: PUSH
59096: LD_INT 3
59098: PLUS
59099: PUSH
59100: LD_INT 5
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: PUSH
59108: LD_VAR 0 1
59112: PUSH
59113: LD_INT 4
59115: PLUS
59116: PUSH
59117: LD_VAR 0 2
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: PUSH
59130: LD_VAR 0 1
59134: PUSH
59135: LD_VAR 0 2
59139: PUSH
59140: LD_INT 3
59142: MINUS
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: PUSH
59152: LD_VAR 0 1
59156: PUSH
59157: LD_INT 4
59159: MINUS
59160: PUSH
59161: LD_VAR 0 2
59165: PUSH
59166: LD_INT 4
59168: MINUS
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// end ; 5 :
59185: GO 59325
59187: LD_INT 5
59189: DOUBLE
59190: EQUAL
59191: IFTRUE 59195
59193: GO 59324
59195: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59196: LD_ADDR_VAR 0 5
59200: PUSH
59201: LD_VAR 0 1
59205: PUSH
59206: LD_INT 4
59208: MINUS
59209: PUSH
59210: LD_VAR 0 2
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: PUSH
59223: LD_VAR 0 1
59227: PUSH
59228: LD_VAR 0 2
59232: PUSH
59233: LD_INT 4
59235: MINUS
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: PUSH
59245: LD_VAR 0 1
59249: PUSH
59250: LD_INT 4
59252: PLUS
59253: PUSH
59254: LD_VAR 0 2
59258: PUSH
59259: LD_INT 4
59261: PLUS
59262: PUSH
59263: LD_INT 5
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: LIST
59270: PUSH
59271: LD_VAR 0 1
59275: PUSH
59276: LD_INT 3
59278: PLUS
59279: PUSH
59280: LD_VAR 0 2
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: PUSH
59293: LD_VAR 0 1
59297: PUSH
59298: LD_VAR 0 2
59302: PUSH
59303: LD_INT 3
59305: PLUS
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// end ; end ;
59322: GO 59325
59324: POP
// result := list ;
59325: LD_ADDR_VAR 0 4
59329: PUSH
59330: LD_VAR 0 5
59334: ST_TO_ADDR
// end ;
59335: LD_VAR 0 4
59339: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59340: LD_INT 0
59342: PPUSH
59343: PPUSH
59344: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59345: LD_VAR 0 1
59349: NOT
59350: PUSH
59351: LD_VAR 0 2
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: LD_INT 3
59364: PUSH
59365: LD_INT 4
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: IN
59374: NOT
59375: OR
59376: IFFALSE 59380
// exit ;
59378: GO 59463
// tmp := [ ] ;
59380: LD_ADDR_VAR 0 5
59384: PUSH
59385: EMPTY
59386: ST_TO_ADDR
// for i in units do
59387: LD_ADDR_VAR 0 4
59391: PUSH
59392: LD_VAR 0 1
59396: PUSH
59397: FOR_IN
59398: IFFALSE 59432
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59400: LD_ADDR_VAR 0 5
59404: PUSH
59405: LD_VAR 0 5
59409: PPUSH
59410: LD_VAR 0 4
59414: PPUSH
59415: LD_VAR 0 2
59419: PPUSH
59420: CALL_OW 259
59424: PPUSH
59425: CALL 60836 0 2
59429: ST_TO_ADDR
59430: GO 59397
59432: POP
59433: POP
// if not tmp then
59434: LD_VAR 0 5
59438: NOT
59439: IFFALSE 59443
// exit ;
59441: GO 59463
// result := SortListByListDesc ( units , tmp ) ;
59443: LD_ADDR_VAR 0 3
59447: PUSH
59448: LD_VAR 0 1
59452: PPUSH
59453: LD_VAR 0 5
59457: PPUSH
59458: CALL_OW 77
59462: ST_TO_ADDR
// end ;
59463: LD_VAR 0 3
59467: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59468: LD_INT 0
59470: PPUSH
59471: PPUSH
59472: PPUSH
// result := false ;
59473: LD_ADDR_VAR 0 3
59477: PUSH
59478: LD_INT 0
59480: ST_TO_ADDR
// if not building then
59481: LD_VAR 0 2
59485: NOT
59486: IFFALSE 59490
// exit ;
59488: GO 59628
// x := GetX ( building ) ;
59490: LD_ADDR_VAR 0 4
59494: PUSH
59495: LD_VAR 0 2
59499: PPUSH
59500: CALL_OW 250
59504: ST_TO_ADDR
// y := GetY ( building ) ;
59505: LD_ADDR_VAR 0 5
59509: PUSH
59510: LD_VAR 0 2
59514: PPUSH
59515: CALL_OW 251
59519: ST_TO_ADDR
// if not x or not y then
59520: LD_VAR 0 4
59524: NOT
59525: PUSH
59526: LD_VAR 0 5
59530: NOT
59531: OR
59532: IFFALSE 59536
// exit ;
59534: GO 59628
// if GetTaskList ( unit ) then
59536: LD_VAR 0 1
59540: PPUSH
59541: CALL_OW 437
59545: IFFALSE 59628
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59547: LD_STRING e
59549: PUSH
59550: LD_VAR 0 1
59554: PPUSH
59555: CALL_OW 437
59559: PUSH
59560: LD_INT 1
59562: ARRAY
59563: PUSH
59564: LD_INT 1
59566: ARRAY
59567: EQUAL
59568: PUSH
59569: LD_VAR 0 4
59573: PUSH
59574: LD_VAR 0 1
59578: PPUSH
59579: CALL_OW 437
59583: PUSH
59584: LD_INT 1
59586: ARRAY
59587: PUSH
59588: LD_INT 2
59590: ARRAY
59591: EQUAL
59592: AND
59593: PUSH
59594: LD_VAR 0 5
59598: PUSH
59599: LD_VAR 0 1
59603: PPUSH
59604: CALL_OW 437
59608: PUSH
59609: LD_INT 1
59611: ARRAY
59612: PUSH
59613: LD_INT 3
59615: ARRAY
59616: EQUAL
59617: AND
59618: IFFALSE 59628
// result := true end ;
59620: LD_ADDR_VAR 0 3
59624: PUSH
59625: LD_INT 1
59627: ST_TO_ADDR
// end ;
59628: LD_VAR 0 3
59632: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59633: LD_INT 0
59635: PPUSH
// result := false ;
59636: LD_ADDR_VAR 0 4
59640: PUSH
59641: LD_INT 0
59643: ST_TO_ADDR
// if GetTaskList ( unit ) then
59644: LD_VAR 0 1
59648: PPUSH
59649: CALL_OW 437
59653: IFFALSE 59736
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59655: LD_STRING M
59657: PUSH
59658: LD_VAR 0 1
59662: PPUSH
59663: CALL_OW 437
59667: PUSH
59668: LD_INT 1
59670: ARRAY
59671: PUSH
59672: LD_INT 1
59674: ARRAY
59675: EQUAL
59676: PUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_VAR 0 1
59686: PPUSH
59687: CALL_OW 437
59691: PUSH
59692: LD_INT 1
59694: ARRAY
59695: PUSH
59696: LD_INT 2
59698: ARRAY
59699: EQUAL
59700: AND
59701: PUSH
59702: LD_VAR 0 3
59706: PUSH
59707: LD_VAR 0 1
59711: PPUSH
59712: CALL_OW 437
59716: PUSH
59717: LD_INT 1
59719: ARRAY
59720: PUSH
59721: LD_INT 3
59723: ARRAY
59724: EQUAL
59725: AND
59726: IFFALSE 59736
// result := true ;
59728: LD_ADDR_VAR 0 4
59732: PUSH
59733: LD_INT 1
59735: ST_TO_ADDR
// end ; end ;
59736: LD_VAR 0 4
59740: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59741: LD_INT 0
59743: PPUSH
59744: PPUSH
59745: PPUSH
59746: PPUSH
// if not unit or not area then
59747: LD_VAR 0 1
59751: NOT
59752: PUSH
59753: LD_VAR 0 2
59757: NOT
59758: OR
59759: IFFALSE 59763
// exit ;
59761: GO 59939
// tmp := AreaToList ( area , i ) ;
59763: LD_ADDR_VAR 0 6
59767: PUSH
59768: LD_VAR 0 2
59772: PPUSH
59773: LD_VAR 0 5
59777: PPUSH
59778: CALL_OW 517
59782: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59783: LD_ADDR_VAR 0 5
59787: PUSH
59788: DOUBLE
59789: LD_INT 1
59791: DEC
59792: ST_TO_ADDR
59793: LD_VAR 0 6
59797: PUSH
59798: LD_INT 1
59800: ARRAY
59801: PUSH
59802: FOR_TO
59803: IFFALSE 59937
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59805: LD_ADDR_VAR 0 7
59809: PUSH
59810: LD_VAR 0 6
59814: PUSH
59815: LD_INT 1
59817: ARRAY
59818: PUSH
59819: LD_VAR 0 5
59823: ARRAY
59824: PUSH
59825: LD_VAR 0 6
59829: PUSH
59830: LD_INT 2
59832: ARRAY
59833: PUSH
59834: LD_VAR 0 5
59838: ARRAY
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59844: LD_INT 92
59846: PUSH
59847: LD_VAR 0 7
59851: PUSH
59852: LD_INT 1
59854: ARRAY
59855: PUSH
59856: LD_VAR 0 7
59860: PUSH
59861: LD_INT 2
59863: ARRAY
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: PPUSH
59874: CALL_OW 69
59878: PUSH
59879: LD_INT 0
59881: EQUAL
59882: IFFALSE 59935
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59884: LD_VAR 0 1
59888: PPUSH
59889: LD_VAR 0 7
59893: PUSH
59894: LD_INT 1
59896: ARRAY
59897: PPUSH
59898: LD_VAR 0 7
59902: PUSH
59903: LD_INT 2
59905: ARRAY
59906: PPUSH
59907: LD_VAR 0 3
59911: PPUSH
59912: CALL_OW 48
// result := IsPlaced ( unit ) ;
59916: LD_ADDR_VAR 0 4
59920: PUSH
59921: LD_VAR 0 1
59925: PPUSH
59926: CALL_OW 305
59930: ST_TO_ADDR
// exit ;
59931: POP
59932: POP
59933: GO 59939
// end ; end ;
59935: GO 59802
59937: POP
59938: POP
// end ;
59939: LD_VAR 0 4
59943: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59944: LD_INT 0
59946: PPUSH
59947: PPUSH
59948: PPUSH
// if not side or side > 8 then
59949: LD_VAR 0 1
59953: NOT
59954: PUSH
59955: LD_VAR 0 1
59959: PUSH
59960: LD_INT 8
59962: GREATER
59963: OR
59964: IFFALSE 59968
// exit ;
59966: GO 60155
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59968: LD_ADDR_VAR 0 4
59972: PUSH
59973: LD_INT 22
59975: PUSH
59976: LD_VAR 0 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 21
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PPUSH
59999: CALL_OW 69
60003: ST_TO_ADDR
// if not tmp then
60004: LD_VAR 0 4
60008: NOT
60009: IFFALSE 60013
// exit ;
60011: GO 60155
// enable_addtolog := true ;
60013: LD_ADDR_OWVAR 81
60017: PUSH
60018: LD_INT 1
60020: ST_TO_ADDR
// AddToLog ( [ ) ;
60021: LD_STRING [
60023: PPUSH
60024: CALL_OW 561
// for i in tmp do
60028: LD_ADDR_VAR 0 3
60032: PUSH
60033: LD_VAR 0 4
60037: PUSH
60038: FOR_IN
60039: IFFALSE 60146
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60041: LD_STRING [
60043: PUSH
60044: LD_VAR 0 3
60048: PPUSH
60049: CALL_OW 266
60053: STR
60054: PUSH
60055: LD_STRING , 
60057: STR
60058: PUSH
60059: LD_VAR 0 3
60063: PPUSH
60064: CALL_OW 250
60068: STR
60069: PUSH
60070: LD_STRING , 
60072: STR
60073: PUSH
60074: LD_VAR 0 3
60078: PPUSH
60079: CALL_OW 251
60083: STR
60084: PUSH
60085: LD_STRING , 
60087: STR
60088: PUSH
60089: LD_VAR 0 3
60093: PPUSH
60094: CALL_OW 254
60098: STR
60099: PUSH
60100: LD_STRING , 
60102: STR
60103: PUSH
60104: LD_VAR 0 3
60108: PPUSH
60109: LD_INT 1
60111: PPUSH
60112: CALL_OW 268
60116: STR
60117: PUSH
60118: LD_STRING , 
60120: STR
60121: PUSH
60122: LD_VAR 0 3
60126: PPUSH
60127: LD_INT 2
60129: PPUSH
60130: CALL_OW 268
60134: STR
60135: PUSH
60136: LD_STRING ],
60138: STR
60139: PPUSH
60140: CALL_OW 561
// end ;
60144: GO 60038
60146: POP
60147: POP
// AddToLog ( ]; ) ;
60148: LD_STRING ];
60150: PPUSH
60151: CALL_OW 561
// end ;
60155: LD_VAR 0 2
60159: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60160: LD_INT 0
60162: PPUSH
60163: PPUSH
60164: PPUSH
60165: PPUSH
60166: PPUSH
// if not area or not rate or not max then
60167: LD_VAR 0 1
60171: NOT
60172: PUSH
60173: LD_VAR 0 2
60177: NOT
60178: OR
60179: PUSH
60180: LD_VAR 0 4
60184: NOT
60185: OR
60186: IFFALSE 60190
// exit ;
60188: GO 60379
// while 1 do
60190: LD_INT 1
60192: IFFALSE 60379
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60194: LD_ADDR_VAR 0 9
60198: PUSH
60199: LD_VAR 0 1
60203: PPUSH
60204: LD_INT 1
60206: PPUSH
60207: CALL_OW 287
60211: PUSH
60212: LD_INT 10
60214: MUL
60215: ST_TO_ADDR
// r := rate / 10 ;
60216: LD_ADDR_VAR 0 7
60220: PUSH
60221: LD_VAR 0 2
60225: PUSH
60226: LD_INT 10
60228: DIVREAL
60229: ST_TO_ADDR
// time := 1 1$00 ;
60230: LD_ADDR_VAR 0 8
60234: PUSH
60235: LD_INT 2100
60237: ST_TO_ADDR
// if amount < min then
60238: LD_VAR 0 9
60242: PUSH
60243: LD_VAR 0 3
60247: LESS
60248: IFFALSE 60266
// r := r * 2 else
60250: LD_ADDR_VAR 0 7
60254: PUSH
60255: LD_VAR 0 7
60259: PUSH
60260: LD_INT 2
60262: MUL
60263: ST_TO_ADDR
60264: GO 60292
// if amount > max then
60266: LD_VAR 0 9
60270: PUSH
60271: LD_VAR 0 4
60275: GREATER
60276: IFFALSE 60292
// r := r / 2 ;
60278: LD_ADDR_VAR 0 7
60282: PUSH
60283: LD_VAR 0 7
60287: PUSH
60288: LD_INT 2
60290: DIVREAL
60291: ST_TO_ADDR
// time := time / r ;
60292: LD_ADDR_VAR 0 8
60296: PUSH
60297: LD_VAR 0 8
60301: PUSH
60302: LD_VAR 0 7
60306: DIVREAL
60307: ST_TO_ADDR
// if time < 0 then
60308: LD_VAR 0 8
60312: PUSH
60313: LD_INT 0
60315: LESS
60316: IFFALSE 60333
// time := time * - 1 ;
60318: LD_ADDR_VAR 0 8
60322: PUSH
60323: LD_VAR 0 8
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: MUL
60332: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60333: LD_VAR 0 8
60337: PUSH
60338: LD_INT 35
60340: PPUSH
60341: LD_INT 875
60343: PPUSH
60344: CALL_OW 12
60348: PLUS
60349: PPUSH
60350: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60354: LD_INT 1
60356: PPUSH
60357: LD_INT 5
60359: PPUSH
60360: CALL_OW 12
60364: PPUSH
60365: LD_VAR 0 1
60369: PPUSH
60370: LD_INT 1
60372: PPUSH
60373: CALL_OW 55
// end ;
60377: GO 60190
// end ;
60379: LD_VAR 0 5
60383: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60384: LD_INT 0
60386: PPUSH
60387: PPUSH
60388: PPUSH
60389: PPUSH
60390: PPUSH
60391: PPUSH
60392: PPUSH
60393: PPUSH
// if not turrets or not factories then
60394: LD_VAR 0 1
60398: NOT
60399: PUSH
60400: LD_VAR 0 2
60404: NOT
60405: OR
60406: IFFALSE 60410
// exit ;
60408: GO 60717
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60410: LD_ADDR_VAR 0 10
60414: PUSH
60415: LD_INT 5
60417: PUSH
60418: LD_INT 6
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: LD_INT 4
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: PUSH
60438: LD_INT 5
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 24
60452: PUSH
60453: LD_INT 25
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 23
60462: PUSH
60463: LD_INT 27
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 42
60476: PUSH
60477: LD_INT 43
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 44
60486: PUSH
60487: LD_INT 46
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 45
60496: PUSH
60497: LD_INT 47
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: ST_TO_ADDR
// result := [ ] ;
60514: LD_ADDR_VAR 0 3
60518: PUSH
60519: EMPTY
60520: ST_TO_ADDR
// for i in turrets do
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: LD_VAR 0 1
60530: PUSH
60531: FOR_IN
60532: IFFALSE 60715
// begin nat := GetNation ( i ) ;
60534: LD_ADDR_VAR 0 7
60538: PUSH
60539: LD_VAR 0 4
60543: PPUSH
60544: CALL_OW 248
60548: ST_TO_ADDR
// weapon := 0 ;
60549: LD_ADDR_VAR 0 8
60553: PUSH
60554: LD_INT 0
60556: ST_TO_ADDR
// if not nat then
60557: LD_VAR 0 7
60561: NOT
60562: IFFALSE 60566
// continue ;
60564: GO 60531
// for j in list [ nat ] do
60566: LD_ADDR_VAR 0 5
60570: PUSH
60571: LD_VAR 0 10
60575: PUSH
60576: LD_VAR 0 7
60580: ARRAY
60581: PUSH
60582: FOR_IN
60583: IFFALSE 60624
// if GetBWeapon ( i ) = j [ 1 ] then
60585: LD_VAR 0 4
60589: PPUSH
60590: CALL_OW 269
60594: PUSH
60595: LD_VAR 0 5
60599: PUSH
60600: LD_INT 1
60602: ARRAY
60603: EQUAL
60604: IFFALSE 60622
// begin weapon := j [ 2 ] ;
60606: LD_ADDR_VAR 0 8
60610: PUSH
60611: LD_VAR 0 5
60615: PUSH
60616: LD_INT 2
60618: ARRAY
60619: ST_TO_ADDR
// break ;
60620: GO 60624
// end ;
60622: GO 60582
60624: POP
60625: POP
// if not weapon then
60626: LD_VAR 0 8
60630: NOT
60631: IFFALSE 60635
// continue ;
60633: GO 60531
// for k in factories do
60635: LD_ADDR_VAR 0 6
60639: PUSH
60640: LD_VAR 0 2
60644: PUSH
60645: FOR_IN
60646: IFFALSE 60711
// begin weapons := AvailableWeaponList ( k ) ;
60648: LD_ADDR_VAR 0 9
60652: PUSH
60653: LD_VAR 0 6
60657: PPUSH
60658: CALL_OW 478
60662: ST_TO_ADDR
// if not weapons then
60663: LD_VAR 0 9
60667: NOT
60668: IFFALSE 60672
// continue ;
60670: GO 60645
// if weapon in weapons then
60672: LD_VAR 0 8
60676: PUSH
60677: LD_VAR 0 9
60681: IN
60682: IFFALSE 60709
// begin result := [ i , weapon ] ;
60684: LD_ADDR_VAR 0 3
60688: PUSH
60689: LD_VAR 0 4
60693: PUSH
60694: LD_VAR 0 8
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: ST_TO_ADDR
// exit ;
60703: POP
60704: POP
60705: POP
60706: POP
60707: GO 60717
// end ; end ;
60709: GO 60645
60711: POP
60712: POP
// end ;
60713: GO 60531
60715: POP
60716: POP
// end ;
60717: LD_VAR 0 3
60721: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60722: LD_INT 0
60724: PPUSH
// if not side or side > 8 then
60725: LD_VAR 0 3
60729: NOT
60730: PUSH
60731: LD_VAR 0 3
60735: PUSH
60736: LD_INT 8
60738: GREATER
60739: OR
60740: IFFALSE 60744
// exit ;
60742: GO 60803
// if not range then
60744: LD_VAR 0 4
60748: NOT
60749: IFFALSE 60760
// range := - 12 ;
60751: LD_ADDR_VAR 0 4
60755: PUSH
60756: LD_INT 12
60758: NEG
60759: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60760: LD_VAR 0 1
60764: PPUSH
60765: LD_VAR 0 2
60769: PPUSH
60770: LD_VAR 0 3
60774: PPUSH
60775: LD_VAR 0 4
60779: PPUSH
60780: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60784: LD_VAR 0 1
60788: PPUSH
60789: LD_VAR 0 2
60793: PPUSH
60794: LD_VAR 0 3
60798: PPUSH
60799: CALL_OW 331
// end ;
60803: LD_VAR 0 5
60807: RET
// export function Video ( mode ) ; begin
60808: LD_INT 0
60810: PPUSH
// ingame_video = mode ;
60811: LD_ADDR_OWVAR 52
60815: PUSH
60816: LD_VAR 0 1
60820: ST_TO_ADDR
// interface_hidden = mode ;
60821: LD_ADDR_OWVAR 54
60825: PUSH
60826: LD_VAR 0 1
60830: ST_TO_ADDR
// end ;
60831: LD_VAR 0 2
60835: RET
// export function Join ( array , element ) ; begin
60836: LD_INT 0
60838: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60839: LD_ADDR_VAR 0 3
60843: PUSH
60844: LD_VAR 0 1
60848: PPUSH
60849: LD_VAR 0 1
60853: PUSH
60854: LD_INT 1
60856: PLUS
60857: PPUSH
60858: LD_VAR 0 2
60862: PPUSH
60863: CALL_OW 1
60867: ST_TO_ADDR
// end ;
60868: LD_VAR 0 3
60872: RET
// export function JoinUnion ( array , element ) ; begin
60873: LD_INT 0
60875: PPUSH
// result := array union element ;
60876: LD_ADDR_VAR 0 3
60880: PUSH
60881: LD_VAR 0 1
60885: PUSH
60886: LD_VAR 0 2
60890: UNION
60891: ST_TO_ADDR
// end ;
60892: LD_VAR 0 3
60896: RET
// export function GetBehemoths ( side ) ; begin
60897: LD_INT 0
60899: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60900: LD_ADDR_VAR 0 2
60904: PUSH
60905: LD_INT 22
60907: PUSH
60908: LD_VAR 0 1
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 31
60919: PUSH
60920: LD_INT 25
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PPUSH
60931: CALL_OW 69
60935: ST_TO_ADDR
// end ;
60936: LD_VAR 0 2
60940: RET
// export function Shuffle ( array ) ; var i , index ; begin
60941: LD_INT 0
60943: PPUSH
60944: PPUSH
60945: PPUSH
// result := [ ] ;
60946: LD_ADDR_VAR 0 2
60950: PUSH
60951: EMPTY
60952: ST_TO_ADDR
// if not array then
60953: LD_VAR 0 1
60957: NOT
60958: IFFALSE 60962
// exit ;
60960: GO 61061
// Randomize ;
60962: CALL_OW 10
// for i = array downto 1 do
60966: LD_ADDR_VAR 0 3
60970: PUSH
60971: DOUBLE
60972: LD_VAR 0 1
60976: INC
60977: ST_TO_ADDR
60978: LD_INT 1
60980: PUSH
60981: FOR_DOWNTO
60982: IFFALSE 61059
// begin index := rand ( 1 , array ) ;
60984: LD_ADDR_VAR 0 4
60988: PUSH
60989: LD_INT 1
60991: PPUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 12
61001: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61002: LD_ADDR_VAR 0 2
61006: PUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: LD_VAR 0 2
61016: PUSH
61017: LD_INT 1
61019: PLUS
61020: PPUSH
61021: LD_VAR 0 1
61025: PUSH
61026: LD_VAR 0 4
61030: ARRAY
61031: PPUSH
61032: CALL_OW 2
61036: ST_TO_ADDR
// array := Delete ( array , index ) ;
61037: LD_ADDR_VAR 0 1
61041: PUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_VAR 0 4
61051: PPUSH
61052: CALL_OW 3
61056: ST_TO_ADDR
// end ;
61057: GO 60981
61059: POP
61060: POP
// end ;
61061: LD_VAR 0 2
61065: RET
// export function GetBaseMaterials ( base ) ; begin
61066: LD_INT 0
61068: PPUSH
// result := [ 0 , 0 , 0 ] ;
61069: LD_ADDR_VAR 0 2
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: ST_TO_ADDR
// if not base then
61088: LD_VAR 0 1
61092: NOT
61093: IFFALSE 61097
// exit ;
61095: GO 61146
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61097: LD_ADDR_VAR 0 2
61101: PUSH
61102: LD_VAR 0 1
61106: PPUSH
61107: LD_INT 1
61109: PPUSH
61110: CALL_OW 275
61114: PUSH
61115: LD_VAR 0 1
61119: PPUSH
61120: LD_INT 2
61122: PPUSH
61123: CALL_OW 275
61127: PUSH
61128: LD_VAR 0 1
61132: PPUSH
61133: LD_INT 3
61135: PPUSH
61136: CALL_OW 275
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: ST_TO_ADDR
// end ;
61146: LD_VAR 0 2
61150: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61151: LD_INT 0
61153: PPUSH
61154: PPUSH
// result := array ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 1
61164: ST_TO_ADDR
// if size >= result then
61165: LD_VAR 0 2
61169: PUSH
61170: LD_VAR 0 3
61174: GREATEREQUAL
61175: IFFALSE 61179
// exit ;
61177: GO 61229
// if size then
61179: LD_VAR 0 2
61183: IFFALSE 61229
// for i := array downto size do
61185: LD_ADDR_VAR 0 4
61189: PUSH
61190: DOUBLE
61191: LD_VAR 0 1
61195: INC
61196: ST_TO_ADDR
61197: LD_VAR 0 2
61201: PUSH
61202: FOR_DOWNTO
61203: IFFALSE 61227
// result := Delete ( result , result ) ;
61205: LD_ADDR_VAR 0 3
61209: PUSH
61210: LD_VAR 0 3
61214: PPUSH
61215: LD_VAR 0 3
61219: PPUSH
61220: CALL_OW 3
61224: ST_TO_ADDR
61225: GO 61202
61227: POP
61228: POP
// end ;
61229: LD_VAR 0 3
61233: RET
// export function ComExit ( unit ) ; var tmp ; begin
61234: LD_INT 0
61236: PPUSH
61237: PPUSH
// if not IsInUnit ( unit ) then
61238: LD_VAR 0 1
61242: PPUSH
61243: CALL_OW 310
61247: NOT
61248: IFFALSE 61252
// exit ;
61250: GO 61312
// tmp := IsInUnit ( unit ) ;
61252: LD_ADDR_VAR 0 3
61256: PUSH
61257: LD_VAR 0 1
61261: PPUSH
61262: CALL_OW 310
61266: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61267: LD_VAR 0 3
61271: PPUSH
61272: CALL_OW 247
61276: PUSH
61277: LD_INT 2
61279: EQUAL
61280: IFFALSE 61293
// ComExitVehicle ( unit ) else
61282: LD_VAR 0 1
61286: PPUSH
61287: CALL_OW 121
61291: GO 61302
// ComExitBuilding ( unit ) ;
61293: LD_VAR 0 1
61297: PPUSH
61298: CALL_OW 122
// result := tmp ;
61302: LD_ADDR_VAR 0 2
61306: PUSH
61307: LD_VAR 0 3
61311: ST_TO_ADDR
// end ;
61312: LD_VAR 0 2
61316: RET
// export function ComExitAll ( units ) ; var i ; begin
61317: LD_INT 0
61319: PPUSH
61320: PPUSH
// if not units then
61321: LD_VAR 0 1
61325: NOT
61326: IFFALSE 61330
// exit ;
61328: GO 61356
// for i in units do
61330: LD_ADDR_VAR 0 3
61334: PUSH
61335: LD_VAR 0 1
61339: PUSH
61340: FOR_IN
61341: IFFALSE 61354
// ComExit ( i ) ;
61343: LD_VAR 0 3
61347: PPUSH
61348: CALL 61234 0 1
61352: GO 61340
61354: POP
61355: POP
// end ;
61356: LD_VAR 0 2
61360: RET
// export function ResetHc ; begin
61361: LD_INT 0
61363: PPUSH
// InitHc ;
61364: CALL_OW 19
// hc_importance := 0 ;
61368: LD_ADDR_OWVAR 32
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// end ;
61376: LD_VAR 0 1
61380: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61381: LD_INT 0
61383: PPUSH
61384: PPUSH
61385: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61386: LD_ADDR_VAR 0 6
61390: PUSH
61391: LD_VAR 0 1
61395: PUSH
61396: LD_VAR 0 3
61400: PLUS
61401: PUSH
61402: LD_INT 2
61404: DIV
61405: ST_TO_ADDR
// if _x < 0 then
61406: LD_VAR 0 6
61410: PUSH
61411: LD_INT 0
61413: LESS
61414: IFFALSE 61431
// _x := _x * - 1 ;
61416: LD_ADDR_VAR 0 6
61420: PUSH
61421: LD_VAR 0 6
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: MUL
61430: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61431: LD_ADDR_VAR 0 7
61435: PUSH
61436: LD_VAR 0 2
61440: PUSH
61441: LD_VAR 0 4
61445: PLUS
61446: PUSH
61447: LD_INT 2
61449: DIV
61450: ST_TO_ADDR
// if _y < 0 then
61451: LD_VAR 0 7
61455: PUSH
61456: LD_INT 0
61458: LESS
61459: IFFALSE 61476
// _y := _y * - 1 ;
61461: LD_ADDR_VAR 0 7
61465: PUSH
61466: LD_VAR 0 7
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: MUL
61475: ST_TO_ADDR
// result := [ _x , _y ] ;
61476: LD_ADDR_VAR 0 5
61480: PUSH
61481: LD_VAR 0 6
61485: PUSH
61486: LD_VAR 0 7
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: ST_TO_ADDR
// end ;
61495: LD_VAR 0 5
61499: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61500: LD_INT 0
61502: PPUSH
61503: PPUSH
61504: PPUSH
61505: PPUSH
// task := GetTaskList ( unit ) ;
61506: LD_ADDR_VAR 0 7
61510: PUSH
61511: LD_VAR 0 1
61515: PPUSH
61516: CALL_OW 437
61520: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61521: LD_VAR 0 7
61525: NOT
61526: PUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: LD_VAR 0 2
61536: PPUSH
61537: CALL_OW 308
61541: NOT
61542: AND
61543: IFFALSE 61547
// exit ;
61545: GO 61665
// if IsInArea ( unit , area ) then
61547: LD_VAR 0 1
61551: PPUSH
61552: LD_VAR 0 2
61556: PPUSH
61557: CALL_OW 308
61561: IFFALSE 61579
// begin ComMoveToArea ( unit , goAway ) ;
61563: LD_VAR 0 1
61567: PPUSH
61568: LD_VAR 0 3
61572: PPUSH
61573: CALL_OW 113
// exit ;
61577: GO 61665
// end ; if task [ 1 ] [ 1 ] <> M then
61579: LD_VAR 0 7
61583: PUSH
61584: LD_INT 1
61586: ARRAY
61587: PUSH
61588: LD_INT 1
61590: ARRAY
61591: PUSH
61592: LD_STRING M
61594: NONEQUAL
61595: IFFALSE 61599
// exit ;
61597: GO 61665
// x := task [ 1 ] [ 2 ] ;
61599: LD_ADDR_VAR 0 5
61603: PUSH
61604: LD_VAR 0 7
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PUSH
61613: LD_INT 2
61615: ARRAY
61616: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61617: LD_ADDR_VAR 0 6
61621: PUSH
61622: LD_VAR 0 7
61626: PUSH
61627: LD_INT 1
61629: ARRAY
61630: PUSH
61631: LD_INT 3
61633: ARRAY
61634: ST_TO_ADDR
// if InArea ( x , y , area ) then
61635: LD_VAR 0 5
61639: PPUSH
61640: LD_VAR 0 6
61644: PPUSH
61645: LD_VAR 0 2
61649: PPUSH
61650: CALL_OW 309
61654: IFFALSE 61665
// ComStop ( unit ) ;
61656: LD_VAR 0 1
61660: PPUSH
61661: CALL_OW 141
// end ;
61665: LD_VAR 0 4
61669: RET
// export function Abs ( value ) ; begin
61670: LD_INT 0
61672: PPUSH
// result := value ;
61673: LD_ADDR_VAR 0 2
61677: PUSH
61678: LD_VAR 0 1
61682: ST_TO_ADDR
// if value < 0 then
61683: LD_VAR 0 1
61687: PUSH
61688: LD_INT 0
61690: LESS
61691: IFFALSE 61708
// result := value * - 1 ;
61693: LD_ADDR_VAR 0 2
61697: PUSH
61698: LD_VAR 0 1
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: MUL
61707: ST_TO_ADDR
// end ;
61708: LD_VAR 0 2
61712: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61713: LD_INT 0
61715: PPUSH
61716: PPUSH
61717: PPUSH
61718: PPUSH
61719: PPUSH
61720: PPUSH
61721: PPUSH
61722: PPUSH
// if not unit or not building then
61723: LD_VAR 0 1
61727: NOT
61728: PUSH
61729: LD_VAR 0 2
61733: NOT
61734: OR
61735: IFFALSE 61739
// exit ;
61737: GO 61965
// x := GetX ( building ) ;
61739: LD_ADDR_VAR 0 4
61743: PUSH
61744: LD_VAR 0 2
61748: PPUSH
61749: CALL_OW 250
61753: ST_TO_ADDR
// y := GetY ( building ) ;
61754: LD_ADDR_VAR 0 6
61758: PUSH
61759: LD_VAR 0 2
61763: PPUSH
61764: CALL_OW 251
61768: ST_TO_ADDR
// d := GetDir ( building ) ;
61769: LD_ADDR_VAR 0 8
61773: PUSH
61774: LD_VAR 0 2
61778: PPUSH
61779: CALL_OW 254
61783: ST_TO_ADDR
// r := 4 ;
61784: LD_ADDR_VAR 0 9
61788: PUSH
61789: LD_INT 4
61791: ST_TO_ADDR
// for i := 1 to 5 do
61792: LD_ADDR_VAR 0 10
61796: PUSH
61797: DOUBLE
61798: LD_INT 1
61800: DEC
61801: ST_TO_ADDR
61802: LD_INT 5
61804: PUSH
61805: FOR_TO
61806: IFFALSE 61963
// begin _x := ShiftX ( x , d , r + i ) ;
61808: LD_ADDR_VAR 0 5
61812: PUSH
61813: LD_VAR 0 4
61817: PPUSH
61818: LD_VAR 0 8
61822: PPUSH
61823: LD_VAR 0 9
61827: PUSH
61828: LD_VAR 0 10
61832: PLUS
61833: PPUSH
61834: CALL_OW 272
61838: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61839: LD_ADDR_VAR 0 7
61843: PUSH
61844: LD_VAR 0 6
61848: PPUSH
61849: LD_VAR 0 8
61853: PPUSH
61854: LD_VAR 0 9
61858: PUSH
61859: LD_VAR 0 10
61863: PLUS
61864: PPUSH
61865: CALL_OW 273
61869: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61870: LD_VAR 0 5
61874: PPUSH
61875: LD_VAR 0 7
61879: PPUSH
61880: CALL_OW 488
61884: PUSH
61885: LD_VAR 0 5
61889: PPUSH
61890: LD_VAR 0 7
61894: PPUSH
61895: CALL_OW 428
61899: PPUSH
61900: CALL_OW 247
61904: PUSH
61905: LD_INT 3
61907: PUSH
61908: LD_INT 2
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: IN
61915: NOT
61916: AND
61917: IFFALSE 61961
// begin ComMoveXY ( unit , _x , _y ) ;
61919: LD_VAR 0 1
61923: PPUSH
61924: LD_VAR 0 5
61928: PPUSH
61929: LD_VAR 0 7
61933: PPUSH
61934: CALL_OW 111
// result := [ _x , _y ] ;
61938: LD_ADDR_VAR 0 3
61942: PUSH
61943: LD_VAR 0 5
61947: PUSH
61948: LD_VAR 0 7
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: ST_TO_ADDR
// exit ;
61957: POP
61958: POP
61959: GO 61965
// end ; end ;
61961: GO 61805
61963: POP
61964: POP
// end ;
61965: LD_VAR 0 3
61969: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61970: LD_INT 0
61972: PPUSH
61973: PPUSH
61974: PPUSH
// result := 0 ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_INT 0
61982: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61983: LD_VAR 0 1
61987: PUSH
61988: LD_INT 0
61990: LESS
61991: PUSH
61992: LD_VAR 0 1
61996: PUSH
61997: LD_INT 8
61999: GREATER
62000: OR
62001: PUSH
62002: LD_VAR 0 2
62006: PUSH
62007: LD_INT 0
62009: LESS
62010: OR
62011: PUSH
62012: LD_VAR 0 2
62016: PUSH
62017: LD_INT 8
62019: GREATER
62020: OR
62021: IFFALSE 62025
// exit ;
62023: GO 62100
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62025: LD_ADDR_VAR 0 4
62029: PUSH
62030: LD_INT 22
62032: PUSH
62033: LD_VAR 0 2
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PPUSH
62042: CALL_OW 69
62046: PUSH
62047: FOR_IN
62048: IFFALSE 62098
// begin un := UnitShoot ( i ) ;
62050: LD_ADDR_VAR 0 5
62054: PUSH
62055: LD_VAR 0 4
62059: PPUSH
62060: CALL_OW 504
62064: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62065: LD_VAR 0 5
62069: PPUSH
62070: CALL_OW 255
62074: PUSH
62075: LD_VAR 0 1
62079: EQUAL
62080: IFFALSE 62096
// begin result := un ;
62082: LD_ADDR_VAR 0 3
62086: PUSH
62087: LD_VAR 0 5
62091: ST_TO_ADDR
// exit ;
62092: POP
62093: POP
62094: GO 62100
// end ; end ;
62096: GO 62047
62098: POP
62099: POP
// end ;
62100: LD_VAR 0 3
62104: RET
// export function GetCargoBay ( units ) ; begin
62105: LD_INT 0
62107: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62108: LD_ADDR_VAR 0 2
62112: PUSH
62113: LD_VAR 0 1
62117: PPUSH
62118: LD_INT 2
62120: PUSH
62121: LD_INT 34
62123: PUSH
62124: LD_INT 12
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 34
62133: PUSH
62134: LD_INT 51
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 34
62143: PUSH
62144: LD_INT 32
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 34
62153: PUSH
62154: LD_INT 89
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: PPUSH
62168: CALL_OW 72
62172: ST_TO_ADDR
// end ;
62173: LD_VAR 0 2
62177: RET
// export function Negate ( value ) ; begin
62178: LD_INT 0
62180: PPUSH
// result := not value ;
62181: LD_ADDR_VAR 0 2
62185: PUSH
62186: LD_VAR 0 1
62190: NOT
62191: ST_TO_ADDR
// end ;
62192: LD_VAR 0 2
62196: RET
// export function Inc ( value ) ; begin
62197: LD_INT 0
62199: PPUSH
// result := value + 1 ;
62200: LD_ADDR_VAR 0 2
62204: PUSH
62205: LD_VAR 0 1
62209: PUSH
62210: LD_INT 1
62212: PLUS
62213: ST_TO_ADDR
// end ;
62214: LD_VAR 0 2
62218: RET
// export function Dec ( value ) ; begin
62219: LD_INT 0
62221: PPUSH
// result := value - 1 ;
62222: LD_ADDR_VAR 0 2
62226: PUSH
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 1
62234: MINUS
62235: ST_TO_ADDR
// end ;
62236: LD_VAR 0 2
62240: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62241: LD_INT 0
62243: PPUSH
62244: PPUSH
62245: PPUSH
62246: PPUSH
62247: PPUSH
62248: PPUSH
62249: PPUSH
62250: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62251: LD_VAR 0 1
62255: PPUSH
62256: LD_VAR 0 2
62260: PPUSH
62261: CALL_OW 488
62265: NOT
62266: PUSH
62267: LD_VAR 0 3
62271: PPUSH
62272: LD_VAR 0 4
62276: PPUSH
62277: CALL_OW 488
62281: NOT
62282: OR
62283: IFFALSE 62296
// begin result := - 1 ;
62285: LD_ADDR_VAR 0 5
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: ST_TO_ADDR
// exit ;
62294: GO 62531
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62296: LD_ADDR_VAR 0 12
62300: PUSH
62301: LD_VAR 0 1
62305: PPUSH
62306: LD_VAR 0 2
62310: PPUSH
62311: LD_VAR 0 3
62315: PPUSH
62316: LD_VAR 0 4
62320: PPUSH
62321: CALL 61381 0 4
62325: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62326: LD_ADDR_VAR 0 11
62330: PUSH
62331: LD_VAR 0 1
62335: PPUSH
62336: LD_VAR 0 2
62340: PPUSH
62341: LD_VAR 0 12
62345: PUSH
62346: LD_INT 1
62348: ARRAY
62349: PPUSH
62350: LD_VAR 0 12
62354: PUSH
62355: LD_INT 2
62357: ARRAY
62358: PPUSH
62359: CALL_OW 298
62363: ST_TO_ADDR
// distance := 9999 ;
62364: LD_ADDR_VAR 0 10
62368: PUSH
62369: LD_INT 9999
62371: ST_TO_ADDR
// for i := 0 to 5 do
62372: LD_ADDR_VAR 0 6
62376: PUSH
62377: DOUBLE
62378: LD_INT 0
62380: DEC
62381: ST_TO_ADDR
62382: LD_INT 5
62384: PUSH
62385: FOR_TO
62386: IFFALSE 62529
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62388: LD_ADDR_VAR 0 7
62392: PUSH
62393: LD_VAR 0 1
62397: PPUSH
62398: LD_VAR 0 6
62402: PPUSH
62403: LD_VAR 0 11
62407: PPUSH
62408: CALL_OW 272
62412: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62413: LD_ADDR_VAR 0 8
62417: PUSH
62418: LD_VAR 0 2
62422: PPUSH
62423: LD_VAR 0 6
62427: PPUSH
62428: LD_VAR 0 11
62432: PPUSH
62433: CALL_OW 273
62437: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62438: LD_VAR 0 7
62442: PPUSH
62443: LD_VAR 0 8
62447: PPUSH
62448: CALL_OW 488
62452: NOT
62453: IFFALSE 62457
// continue ;
62455: GO 62385
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62457: LD_ADDR_VAR 0 9
62461: PUSH
62462: LD_VAR 0 12
62466: PUSH
62467: LD_INT 1
62469: ARRAY
62470: PPUSH
62471: LD_VAR 0 12
62475: PUSH
62476: LD_INT 2
62478: ARRAY
62479: PPUSH
62480: LD_VAR 0 7
62484: PPUSH
62485: LD_VAR 0 8
62489: PPUSH
62490: CALL_OW 298
62494: ST_TO_ADDR
// if tmp < distance then
62495: LD_VAR 0 9
62499: PUSH
62500: LD_VAR 0 10
62504: LESS
62505: IFFALSE 62527
// begin result := i ;
62507: LD_ADDR_VAR 0 5
62511: PUSH
62512: LD_VAR 0 6
62516: ST_TO_ADDR
// distance := tmp ;
62517: LD_ADDR_VAR 0 10
62521: PUSH
62522: LD_VAR 0 9
62526: ST_TO_ADDR
// end ; end ;
62527: GO 62385
62529: POP
62530: POP
// end ;
62531: LD_VAR 0 5
62535: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62536: LD_INT 0
62538: PPUSH
62539: PPUSH
// if not driver or not IsInUnit ( driver ) then
62540: LD_VAR 0 1
62544: NOT
62545: PUSH
62546: LD_VAR 0 1
62550: PPUSH
62551: CALL_OW 310
62555: NOT
62556: OR
62557: IFFALSE 62561
// exit ;
62559: GO 62651
// vehicle := IsInUnit ( driver ) ;
62561: LD_ADDR_VAR 0 3
62565: PUSH
62566: LD_VAR 0 1
62570: PPUSH
62571: CALL_OW 310
62575: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62576: LD_VAR 0 1
62580: PPUSH
62581: LD_STRING \
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: LD_INT 0
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: PUSH
62611: LD_STRING E
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_VAR 0 3
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PPUSH
62647: CALL_OW 446
// end ;
62651: LD_VAR 0 2
62655: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62656: LD_INT 0
62658: PPUSH
62659: PPUSH
// if not driver or not IsInUnit ( driver ) then
62660: LD_VAR 0 1
62664: NOT
62665: PUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: CALL_OW 310
62675: NOT
62676: OR
62677: IFFALSE 62681
// exit ;
62679: GO 62771
// vehicle := IsInUnit ( driver ) ;
62681: LD_ADDR_VAR 0 3
62685: PUSH
62686: LD_VAR 0 1
62690: PPUSH
62691: CALL_OW 310
62695: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62696: LD_VAR 0 1
62700: PPUSH
62701: LD_STRING \
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: PUSH
62731: LD_STRING E
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: LD_VAR 0 3
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PPUSH
62767: CALL_OW 447
// end ;
62771: LD_VAR 0 2
62775: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62776: LD_INT 0
62778: PPUSH
62779: PPUSH
62780: PPUSH
// tmp := [ ] ;
62781: LD_ADDR_VAR 0 5
62785: PUSH
62786: EMPTY
62787: ST_TO_ADDR
// for i in units do
62788: LD_ADDR_VAR 0 4
62792: PUSH
62793: LD_VAR 0 1
62797: PUSH
62798: FOR_IN
62799: IFFALSE 62837
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62801: LD_ADDR_VAR 0 5
62805: PUSH
62806: LD_VAR 0 5
62810: PPUSH
62811: LD_VAR 0 5
62815: PUSH
62816: LD_INT 1
62818: PLUS
62819: PPUSH
62820: LD_VAR 0 4
62824: PPUSH
62825: CALL_OW 256
62829: PPUSH
62830: CALL_OW 2
62834: ST_TO_ADDR
62835: GO 62798
62837: POP
62838: POP
// if not tmp then
62839: LD_VAR 0 5
62843: NOT
62844: IFFALSE 62848
// exit ;
62846: GO 62896
// if asc then
62848: LD_VAR 0 2
62852: IFFALSE 62876
// result := SortListByListAsc ( units , tmp ) else
62854: LD_ADDR_VAR 0 3
62858: PUSH
62859: LD_VAR 0 1
62863: PPUSH
62864: LD_VAR 0 5
62868: PPUSH
62869: CALL_OW 76
62873: ST_TO_ADDR
62874: GO 62896
// result := SortListByListDesc ( units , tmp ) ;
62876: LD_ADDR_VAR 0 3
62880: PUSH
62881: LD_VAR 0 1
62885: PPUSH
62886: LD_VAR 0 5
62890: PPUSH
62891: CALL_OW 77
62895: ST_TO_ADDR
// end ;
62896: LD_VAR 0 3
62900: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62901: LD_INT 0
62903: PPUSH
62904: PPUSH
// task := GetTaskList ( mech ) ;
62905: LD_ADDR_VAR 0 4
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 437
62919: ST_TO_ADDR
// if not task then
62920: LD_VAR 0 4
62924: NOT
62925: IFFALSE 62929
// exit ;
62927: GO 62971
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62929: LD_ADDR_VAR 0 3
62933: PUSH
62934: LD_VAR 0 4
62938: PUSH
62939: LD_INT 1
62941: ARRAY
62942: PUSH
62943: LD_INT 1
62945: ARRAY
62946: PUSH
62947: LD_STRING r
62949: EQUAL
62950: PUSH
62951: LD_VAR 0 4
62955: PUSH
62956: LD_INT 1
62958: ARRAY
62959: PUSH
62960: LD_INT 4
62962: ARRAY
62963: PUSH
62964: LD_VAR 0 2
62968: EQUAL
62969: AND
62970: ST_TO_ADDR
// end ;
62971: LD_VAR 0 3
62975: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62976: LD_INT 0
62978: PPUSH
// SetDir ( unit , d ) ;
62979: LD_VAR 0 1
62983: PPUSH
62984: LD_VAR 0 4
62988: PPUSH
62989: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
62993: LD_ADDR_VAR 0 6
62997: PUSH
62998: LD_VAR 0 1
63002: PPUSH
63003: LD_VAR 0 2
63007: PPUSH
63008: LD_VAR 0 3
63012: PPUSH
63013: LD_VAR 0 5
63017: PPUSH
63018: CALL_OW 48
63022: ST_TO_ADDR
// end ;
63023: LD_VAR 0 6
63027: RET
// export function ToNaturalNumber ( number ) ; begin
63028: LD_INT 0
63030: PPUSH
// result := number div 1 ;
63031: LD_ADDR_VAR 0 2
63035: PUSH
63036: LD_VAR 0 1
63040: PUSH
63041: LD_INT 1
63043: DIV
63044: ST_TO_ADDR
// if number < 0 then
63045: LD_VAR 0 1
63049: PUSH
63050: LD_INT 0
63052: LESS
63053: IFFALSE 63063
// result := 0 ;
63055: LD_ADDR_VAR 0 2
63059: PUSH
63060: LD_INT 0
63062: ST_TO_ADDR
// end ;
63063: LD_VAR 0 2
63067: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
63068: LD_INT 0
63070: PPUSH
63071: PPUSH
63072: PPUSH
// if not buildings then
63073: LD_VAR 0 1
63077: NOT
63078: IFFALSE 63082
// exit ;
63080: GO 63197
// tmp := [ ] ;
63082: LD_ADDR_VAR 0 5
63086: PUSH
63087: EMPTY
63088: ST_TO_ADDR
// for b in buildings do
63089: LD_ADDR_VAR 0 4
63093: PUSH
63094: LD_VAR 0 1
63098: PUSH
63099: FOR_IN
63100: IFFALSE 63138
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
63102: LD_ADDR_VAR 0 5
63106: PUSH
63107: LD_VAR 0 5
63111: PPUSH
63112: LD_VAR 0 5
63116: PUSH
63117: LD_INT 1
63119: PLUS
63120: PPUSH
63121: LD_VAR 0 4
63125: PPUSH
63126: CALL_OW 266
63130: PPUSH
63131: CALL_OW 1
63135: ST_TO_ADDR
63136: GO 63099
63138: POP
63139: POP
// if not tmp then
63140: LD_VAR 0 5
63144: NOT
63145: IFFALSE 63149
// exit ;
63147: GO 63197
// if asc then
63149: LD_VAR 0 2
63153: IFFALSE 63177
// result := SortListByListAsc ( buildings , tmp ) else
63155: LD_ADDR_VAR 0 3
63159: PUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: LD_VAR 0 5
63169: PPUSH
63170: CALL_OW 76
63174: ST_TO_ADDR
63175: GO 63197
// result := SortListByListDesc ( buildings , tmp ) ;
63177: LD_ADDR_VAR 0 3
63181: PUSH
63182: LD_VAR 0 1
63186: PPUSH
63187: LD_VAR 0 5
63191: PPUSH
63192: CALL_OW 77
63196: ST_TO_ADDR
// end ;
63197: LD_VAR 0 3
63201: RET
// export function SortByClass ( units , class ) ; var un ; begin
63202: LD_INT 0
63204: PPUSH
63205: PPUSH
// if not units or not class then
63206: LD_VAR 0 1
63210: NOT
63211: PUSH
63212: LD_VAR 0 2
63216: NOT
63217: OR
63218: IFFALSE 63222
// exit ;
63220: GO 63317
// result := [ ] ;
63222: LD_ADDR_VAR 0 3
63226: PUSH
63227: EMPTY
63228: ST_TO_ADDR
// for un in units do
63229: LD_ADDR_VAR 0 4
63233: PUSH
63234: LD_VAR 0 1
63238: PUSH
63239: FOR_IN
63240: IFFALSE 63315
// if GetClass ( un ) = class then
63242: LD_VAR 0 4
63246: PPUSH
63247: CALL_OW 257
63251: PUSH
63252: LD_VAR 0 2
63256: EQUAL
63257: IFFALSE 63284
// result := Insert ( result , 1 , un ) else
63259: LD_ADDR_VAR 0 3
63263: PUSH
63264: LD_VAR 0 3
63268: PPUSH
63269: LD_INT 1
63271: PPUSH
63272: LD_VAR 0 4
63276: PPUSH
63277: CALL_OW 2
63281: ST_TO_ADDR
63282: GO 63313
// result := Replace ( result , result + 1 , un ) ;
63284: LD_ADDR_VAR 0 3
63288: PUSH
63289: LD_VAR 0 3
63293: PPUSH
63294: LD_VAR 0 3
63298: PUSH
63299: LD_INT 1
63301: PLUS
63302: PPUSH
63303: LD_VAR 0 4
63307: PPUSH
63308: CALL_OW 1
63312: ST_TO_ADDR
63313: GO 63239
63315: POP
63316: POP
// end ;
63317: LD_VAR 0 3
63321: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63322: LD_INT 0
63324: PPUSH
63325: PPUSH
63326: PPUSH
63327: PPUSH
63328: PPUSH
63329: PPUSH
63330: PPUSH
// result := [ ] ;
63331: LD_ADDR_VAR 0 4
63335: PUSH
63336: EMPTY
63337: ST_TO_ADDR
// if x - r < 0 then
63338: LD_VAR 0 1
63342: PUSH
63343: LD_VAR 0 3
63347: MINUS
63348: PUSH
63349: LD_INT 0
63351: LESS
63352: IFFALSE 63364
// min_x := 0 else
63354: LD_ADDR_VAR 0 8
63358: PUSH
63359: LD_INT 0
63361: ST_TO_ADDR
63362: GO 63380
// min_x := x - r ;
63364: LD_ADDR_VAR 0 8
63368: PUSH
63369: LD_VAR 0 1
63373: PUSH
63374: LD_VAR 0 3
63378: MINUS
63379: ST_TO_ADDR
// if y - r < 0 then
63380: LD_VAR 0 2
63384: PUSH
63385: LD_VAR 0 3
63389: MINUS
63390: PUSH
63391: LD_INT 0
63393: LESS
63394: IFFALSE 63406
// min_y := 0 else
63396: LD_ADDR_VAR 0 7
63400: PUSH
63401: LD_INT 0
63403: ST_TO_ADDR
63404: GO 63422
// min_y := y - r ;
63406: LD_ADDR_VAR 0 7
63410: PUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_VAR 0 3
63420: MINUS
63421: ST_TO_ADDR
// max_x := x + r ;
63422: LD_ADDR_VAR 0 9
63426: PUSH
63427: LD_VAR 0 1
63431: PUSH
63432: LD_VAR 0 3
63436: PLUS
63437: ST_TO_ADDR
// max_y := y + r ;
63438: LD_ADDR_VAR 0 10
63442: PUSH
63443: LD_VAR 0 2
63447: PUSH
63448: LD_VAR 0 3
63452: PLUS
63453: ST_TO_ADDR
// for _x = min_x to max_x do
63454: LD_ADDR_VAR 0 5
63458: PUSH
63459: DOUBLE
63460: LD_VAR 0 8
63464: DEC
63465: ST_TO_ADDR
63466: LD_VAR 0 9
63470: PUSH
63471: FOR_TO
63472: IFFALSE 63573
// for _y = min_y to max_y do
63474: LD_ADDR_VAR 0 6
63478: PUSH
63479: DOUBLE
63480: LD_VAR 0 7
63484: DEC
63485: ST_TO_ADDR
63486: LD_VAR 0 10
63490: PUSH
63491: FOR_TO
63492: IFFALSE 63569
// begin if not ValidHex ( _x , _y ) then
63494: LD_VAR 0 5
63498: PPUSH
63499: LD_VAR 0 6
63503: PPUSH
63504: CALL_OW 488
63508: NOT
63509: IFFALSE 63513
// continue ;
63511: GO 63491
// if GetResourceTypeXY ( _x , _y ) then
63513: LD_VAR 0 5
63517: PPUSH
63518: LD_VAR 0 6
63522: PPUSH
63523: CALL_OW 283
63527: IFFALSE 63567
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63529: LD_ADDR_VAR 0 4
63533: PUSH
63534: LD_VAR 0 4
63538: PPUSH
63539: LD_VAR 0 4
63543: PUSH
63544: LD_INT 1
63546: PLUS
63547: PPUSH
63548: LD_VAR 0 5
63552: PUSH
63553: LD_VAR 0 6
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PPUSH
63562: CALL_OW 1
63566: ST_TO_ADDR
// end ;
63567: GO 63491
63569: POP
63570: POP
63571: GO 63471
63573: POP
63574: POP
// end ;
63575: LD_VAR 0 4
63579: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63580: LD_INT 0
63582: PPUSH
63583: PPUSH
63584: PPUSH
63585: PPUSH
63586: PPUSH
63587: PPUSH
63588: PPUSH
63589: PPUSH
// if not units then
63590: LD_VAR 0 1
63594: NOT
63595: IFFALSE 63599
// exit ;
63597: GO 64127
// result := UnitFilter ( units , [ f_ok ] ) ;
63599: LD_ADDR_VAR 0 3
63603: PUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: LD_INT 50
63611: PUSH
63612: EMPTY
63613: LIST
63614: PPUSH
63615: CALL_OW 72
63619: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63620: LD_ADDR_VAR 0 8
63624: PUSH
63625: LD_VAR 0 1
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: PPUSH
63634: CALL_OW 255
63638: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63639: LD_ADDR_VAR 0 10
63643: PUSH
63644: LD_INT 29
63646: PUSH
63647: LD_INT 91
63649: PUSH
63650: LD_INT 49
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: LIST
63657: ST_TO_ADDR
// if not result then
63658: LD_VAR 0 3
63662: NOT
63663: IFFALSE 63667
// exit ;
63665: GO 64127
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63667: LD_ADDR_VAR 0 5
63671: PUSH
63672: LD_INT 81
63674: PUSH
63675: LD_VAR 0 8
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PPUSH
63684: CALL_OW 69
63688: ST_TO_ADDR
// for i in result do
63689: LD_ADDR_VAR 0 4
63693: PUSH
63694: LD_VAR 0 3
63698: PUSH
63699: FOR_IN
63700: IFFALSE 64125
// begin tag := GetTag ( i ) + 1 ;
63702: LD_ADDR_VAR 0 9
63706: PUSH
63707: LD_VAR 0 4
63711: PPUSH
63712: CALL_OW 110
63716: PUSH
63717: LD_INT 1
63719: PLUS
63720: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
63721: LD_ADDR_VAR 0 7
63725: PUSH
63726: LD_VAR 0 4
63730: PPUSH
63731: CALL_OW 250
63735: PPUSH
63736: LD_VAR 0 4
63740: PPUSH
63741: CALL_OW 251
63745: PPUSH
63746: LD_INT 4
63748: PPUSH
63749: CALL 63322 0 3
63753: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
63754: LD_VAR 0 4
63758: PPUSH
63759: CALL_OW 247
63763: PUSH
63764: LD_INT 2
63766: EQUAL
63767: PUSH
63768: LD_VAR 0 7
63772: PUSH
63773: LD_INT 2
63775: GREATER
63776: AND
63777: PUSH
63778: LD_VAR 0 4
63782: PPUSH
63783: CALL_OW 264
63787: PUSH
63788: LD_VAR 0 10
63792: IN
63793: NOT
63794: AND
63795: IFFALSE 63834
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63797: LD_VAR 0 4
63801: PPUSH
63802: LD_VAR 0 7
63806: PUSH
63807: LD_INT 1
63809: ARRAY
63810: PUSH
63811: LD_INT 1
63813: ARRAY
63814: PPUSH
63815: LD_VAR 0 7
63819: PUSH
63820: LD_INT 1
63822: ARRAY
63823: PUSH
63824: LD_INT 2
63826: ARRAY
63827: PPUSH
63828: CALL_OW 116
63832: GO 64123
// if path > tag then
63834: LD_VAR 0 2
63838: PUSH
63839: LD_VAR 0 9
63843: GREATER
63844: IFFALSE 64052
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63846: LD_ADDR_VAR 0 6
63850: PUSH
63851: LD_VAR 0 5
63855: PPUSH
63856: LD_INT 91
63858: PUSH
63859: LD_VAR 0 4
63863: PUSH
63864: LD_INT 8
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: LIST
63871: PPUSH
63872: CALL_OW 72
63876: ST_TO_ADDR
// if nearEnemy then
63877: LD_VAR 0 6
63881: IFFALSE 63950
// begin if GetWeapon ( i ) = ru_time_lapser then
63883: LD_VAR 0 4
63887: PPUSH
63888: CALL_OW 264
63892: PUSH
63893: LD_INT 49
63895: EQUAL
63896: IFFALSE 63924
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63898: LD_VAR 0 4
63902: PPUSH
63903: LD_VAR 0 6
63907: PPUSH
63908: LD_VAR 0 4
63912: PPUSH
63913: CALL_OW 74
63917: PPUSH
63918: CALL_OW 112
63922: GO 63948
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63924: LD_VAR 0 4
63928: PPUSH
63929: LD_VAR 0 6
63933: PPUSH
63934: LD_VAR 0 4
63938: PPUSH
63939: CALL_OW 74
63943: PPUSH
63944: CALL 65198 0 2
// end else
63948: GO 64050
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63950: LD_VAR 0 4
63954: PPUSH
63955: LD_VAR 0 2
63959: PUSH
63960: LD_VAR 0 9
63964: ARRAY
63965: PUSH
63966: LD_INT 1
63968: ARRAY
63969: PPUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_VAR 0 9
63979: ARRAY
63980: PUSH
63981: LD_INT 2
63983: ARRAY
63984: PPUSH
63985: CALL_OW 297
63989: PUSH
63990: LD_INT 6
63992: GREATER
63993: IFFALSE 64036
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63995: LD_VAR 0 4
63999: PPUSH
64000: LD_VAR 0 2
64004: PUSH
64005: LD_VAR 0 9
64009: ARRAY
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: PPUSH
64015: LD_VAR 0 2
64019: PUSH
64020: LD_VAR 0 9
64024: ARRAY
64025: PUSH
64026: LD_INT 2
64028: ARRAY
64029: PPUSH
64030: CALL_OW 114
64034: GO 64050
// SetTag ( i , tag ) ;
64036: LD_VAR 0 4
64040: PPUSH
64041: LD_VAR 0 9
64045: PPUSH
64046: CALL_OW 109
// end else
64050: GO 64123
// if enemy then
64052: LD_VAR 0 5
64056: IFFALSE 64123
// begin if GetWeapon ( i ) = ru_time_lapser then
64058: LD_VAR 0 4
64062: PPUSH
64063: CALL_OW 264
64067: PUSH
64068: LD_INT 49
64070: EQUAL
64071: IFFALSE 64099
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64073: LD_VAR 0 4
64077: PPUSH
64078: LD_VAR 0 5
64082: PPUSH
64083: LD_VAR 0 4
64087: PPUSH
64088: CALL_OW 74
64092: PPUSH
64093: CALL_OW 112
64097: GO 64123
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64099: LD_VAR 0 4
64103: PPUSH
64104: LD_VAR 0 5
64108: PPUSH
64109: LD_VAR 0 4
64113: PPUSH
64114: CALL_OW 74
64118: PPUSH
64119: CALL 65198 0 2
// end ; end ;
64123: GO 63699
64125: POP
64126: POP
// end ;
64127: LD_VAR 0 3
64131: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64132: LD_INT 0
64134: PPUSH
64135: PPUSH
64136: PPUSH
// if not unit or IsInUnit ( unit ) then
64137: LD_VAR 0 1
64141: NOT
64142: PUSH
64143: LD_VAR 0 1
64147: PPUSH
64148: CALL_OW 310
64152: OR
64153: IFFALSE 64157
// exit ;
64155: GO 64248
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64157: LD_ADDR_VAR 0 4
64161: PUSH
64162: LD_VAR 0 1
64166: PPUSH
64167: CALL_OW 250
64171: PPUSH
64172: LD_VAR 0 2
64176: PPUSH
64177: LD_INT 1
64179: PPUSH
64180: CALL_OW 272
64184: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64185: LD_ADDR_VAR 0 5
64189: PUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 251
64199: PPUSH
64200: LD_VAR 0 2
64204: PPUSH
64205: LD_INT 1
64207: PPUSH
64208: CALL_OW 273
64212: ST_TO_ADDR
// if ValidHex ( x , y ) then
64213: LD_VAR 0 4
64217: PPUSH
64218: LD_VAR 0 5
64222: PPUSH
64223: CALL_OW 488
64227: IFFALSE 64248
// ComTurnXY ( unit , x , y ) ;
64229: LD_VAR 0 1
64233: PPUSH
64234: LD_VAR 0 4
64238: PPUSH
64239: LD_VAR 0 5
64243: PPUSH
64244: CALL_OW 118
// end ;
64248: LD_VAR 0 3
64252: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64253: LD_INT 0
64255: PPUSH
64256: PPUSH
// result := false ;
64257: LD_ADDR_VAR 0 3
64261: PUSH
64262: LD_INT 0
64264: ST_TO_ADDR
// if not units then
64265: LD_VAR 0 2
64269: NOT
64270: IFFALSE 64274
// exit ;
64272: GO 64319
// for i in units do
64274: LD_ADDR_VAR 0 4
64278: PUSH
64279: LD_VAR 0 2
64283: PUSH
64284: FOR_IN
64285: IFFALSE 64317
// if See ( side , i ) then
64287: LD_VAR 0 1
64291: PPUSH
64292: LD_VAR 0 4
64296: PPUSH
64297: CALL_OW 292
64301: IFFALSE 64315
// begin result := true ;
64303: LD_ADDR_VAR 0 3
64307: PUSH
64308: LD_INT 1
64310: ST_TO_ADDR
// exit ;
64311: POP
64312: POP
64313: GO 64319
// end ;
64315: GO 64284
64317: POP
64318: POP
// end ;
64319: LD_VAR 0 3
64323: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64324: LD_INT 0
64326: PPUSH
64327: PPUSH
64328: PPUSH
64329: PPUSH
// if not unit or not points then
64330: LD_VAR 0 1
64334: NOT
64335: PUSH
64336: LD_VAR 0 2
64340: NOT
64341: OR
64342: IFFALSE 64346
// exit ;
64344: GO 64436
// dist := 99999 ;
64346: LD_ADDR_VAR 0 5
64350: PUSH
64351: LD_INT 99999
64353: ST_TO_ADDR
// for i in points do
64354: LD_ADDR_VAR 0 4
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: FOR_IN
64365: IFFALSE 64434
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64367: LD_ADDR_VAR 0 6
64371: PUSH
64372: LD_VAR 0 1
64376: PPUSH
64377: LD_VAR 0 4
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PPUSH
64386: LD_VAR 0 4
64390: PUSH
64391: LD_INT 2
64393: ARRAY
64394: PPUSH
64395: CALL_OW 297
64399: ST_TO_ADDR
// if tmpDist < dist then
64400: LD_VAR 0 6
64404: PUSH
64405: LD_VAR 0 5
64409: LESS
64410: IFFALSE 64432
// begin result := i ;
64412: LD_ADDR_VAR 0 3
64416: PUSH
64417: LD_VAR 0 4
64421: ST_TO_ADDR
// dist := tmpDist ;
64422: LD_ADDR_VAR 0 5
64426: PUSH
64427: LD_VAR 0 6
64431: ST_TO_ADDR
// end ; end ;
64432: GO 64364
64434: POP
64435: POP
// end ;
64436: LD_VAR 0 3
64440: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64441: LD_INT 0
64443: PPUSH
// uc_side := side ;
64444: LD_ADDR_OWVAR 20
64448: PUSH
64449: LD_VAR 0 1
64453: ST_TO_ADDR
// uc_nation := 3 ;
64454: LD_ADDR_OWVAR 21
64458: PUSH
64459: LD_INT 3
64461: ST_TO_ADDR
// vc_chassis := 25 ;
64462: LD_ADDR_OWVAR 37
64466: PUSH
64467: LD_INT 25
64469: ST_TO_ADDR
// vc_engine := engine_siberite ;
64470: LD_ADDR_OWVAR 39
64474: PUSH
64475: LD_INT 3
64477: ST_TO_ADDR
// vc_control := control_computer ;
64478: LD_ADDR_OWVAR 38
64482: PUSH
64483: LD_INT 3
64485: ST_TO_ADDR
// vc_weapon := 59 ;
64486: LD_ADDR_OWVAR 40
64490: PUSH
64491: LD_INT 59
64493: ST_TO_ADDR
// result := CreateVehicle ;
64494: LD_ADDR_VAR 0 5
64498: PUSH
64499: CALL_OW 45
64503: ST_TO_ADDR
// SetDir ( result , d ) ;
64504: LD_VAR 0 5
64508: PPUSH
64509: LD_VAR 0 4
64513: PPUSH
64514: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64518: LD_VAR 0 5
64522: PPUSH
64523: LD_VAR 0 2
64527: PPUSH
64528: LD_VAR 0 3
64532: PPUSH
64533: LD_INT 0
64535: PPUSH
64536: CALL_OW 48
// end ;
64540: LD_VAR 0 5
64544: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64545: LD_INT 0
64547: PPUSH
64548: PPUSH
64549: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64550: LD_ADDR_VAR 0 2
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64573: LD_VAR 0 1
64577: NOT
64578: PUSH
64579: LD_VAR 0 1
64583: PPUSH
64584: CALL_OW 264
64588: PUSH
64589: LD_INT 12
64591: PUSH
64592: LD_INT 51
64594: PUSH
64595: LD_INT 32
64597: PUSH
64598: LD_INT 89
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: IN
64607: NOT
64608: OR
64609: IFFALSE 64613
// exit ;
64611: GO 64711
// for i := 1 to 3 do
64613: LD_ADDR_VAR 0 3
64617: PUSH
64618: DOUBLE
64619: LD_INT 1
64621: DEC
64622: ST_TO_ADDR
64623: LD_INT 3
64625: PUSH
64626: FOR_TO
64627: IFFALSE 64709
// begin tmp := GetCargo ( cargo , i ) ;
64629: LD_ADDR_VAR 0 4
64633: PUSH
64634: LD_VAR 0 1
64638: PPUSH
64639: LD_VAR 0 3
64643: PPUSH
64644: CALL_OW 289
64648: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64649: LD_ADDR_VAR 0 2
64653: PUSH
64654: LD_VAR 0 2
64658: PPUSH
64659: LD_VAR 0 3
64663: PPUSH
64664: LD_VAR 0 4
64668: PPUSH
64669: CALL_OW 1
64673: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64674: LD_ADDR_VAR 0 2
64678: PUSH
64679: LD_VAR 0 2
64683: PPUSH
64684: LD_INT 4
64686: PPUSH
64687: LD_VAR 0 2
64691: PUSH
64692: LD_INT 4
64694: ARRAY
64695: PUSH
64696: LD_VAR 0 4
64700: PLUS
64701: PPUSH
64702: CALL_OW 1
64706: ST_TO_ADDR
// end ;
64707: GO 64626
64709: POP
64710: POP
// end ;
64711: LD_VAR 0 2
64715: RET
// export function Length ( array ) ; begin
64716: LD_INT 0
64718: PPUSH
// result := array + 0 ;
64719: LD_ADDR_VAR 0 2
64723: PUSH
64724: LD_VAR 0 1
64728: PUSH
64729: LD_INT 0
64731: PLUS
64732: ST_TO_ADDR
// end ;
64733: LD_VAR 0 2
64737: RET
// export function PrepareArray ( array ) ; begin
64738: LD_INT 0
64740: PPUSH
// result := array diff 0 ;
64741: LD_ADDR_VAR 0 2
64745: PUSH
64746: LD_VAR 0 1
64750: PUSH
64751: LD_INT 0
64753: DIFF
64754: ST_TO_ADDR
// if not result [ 1 ] then
64755: LD_VAR 0 2
64759: PUSH
64760: LD_INT 1
64762: ARRAY
64763: NOT
64764: IFFALSE 64784
// result := Delete ( result , 1 ) ;
64766: LD_ADDR_VAR 0 2
64770: PUSH
64771: LD_VAR 0 2
64775: PPUSH
64776: LD_INT 1
64778: PPUSH
64779: CALL_OW 3
64783: ST_TO_ADDR
// end ;
64784: LD_VAR 0 2
64788: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64789: LD_INT 0
64791: PPUSH
64792: PPUSH
64793: PPUSH
64794: PPUSH
// sibRocketRange := 25 ;
64795: LD_ADDR_VAR 0 6
64799: PUSH
64800: LD_INT 25
64802: ST_TO_ADDR
// result := false ;
64803: LD_ADDR_VAR 0 4
64807: PUSH
64808: LD_INT 0
64810: ST_TO_ADDR
// for i := 0 to 5 do
64811: LD_ADDR_VAR 0 5
64815: PUSH
64816: DOUBLE
64817: LD_INT 0
64819: DEC
64820: ST_TO_ADDR
64821: LD_INT 5
64823: PUSH
64824: FOR_TO
64825: IFFALSE 64892
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64827: LD_VAR 0 1
64831: PPUSH
64832: LD_VAR 0 5
64836: PPUSH
64837: LD_VAR 0 6
64841: PPUSH
64842: CALL_OW 272
64846: PPUSH
64847: LD_VAR 0 2
64851: PPUSH
64852: LD_VAR 0 5
64856: PPUSH
64857: LD_VAR 0 6
64861: PPUSH
64862: CALL_OW 273
64866: PPUSH
64867: LD_VAR 0 3
64871: PPUSH
64872: CALL_OW 309
64876: IFFALSE 64890
// begin result := true ;
64878: LD_ADDR_VAR 0 4
64882: PUSH
64883: LD_INT 1
64885: ST_TO_ADDR
// exit ;
64886: POP
64887: POP
64888: GO 64894
// end ;
64890: GO 64824
64892: POP
64893: POP
// end ;
64894: LD_VAR 0 4
64898: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64899: LD_INT 0
64901: PPUSH
64902: PPUSH
64903: PPUSH
// if btype = b_depot then
64904: LD_VAR 0 2
64908: PUSH
64909: LD_INT 0
64911: EQUAL
64912: IFFALSE 64924
// begin result := true ;
64914: LD_ADDR_VAR 0 3
64918: PUSH
64919: LD_INT 1
64921: ST_TO_ADDR
// exit ;
64922: GO 65040
// end ; pom := GetBase ( depot ) ;
64924: LD_ADDR_VAR 0 4
64928: PUSH
64929: LD_VAR 0 1
64933: PPUSH
64934: CALL_OW 274
64938: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64939: LD_ADDR_VAR 0 5
64943: PUSH
64944: LD_VAR 0 2
64948: PPUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: CALL_OW 248
64958: PPUSH
64959: CALL_OW 450
64963: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64964: LD_ADDR_VAR 0 3
64968: PUSH
64969: LD_VAR 0 4
64973: PPUSH
64974: LD_INT 1
64976: PPUSH
64977: CALL_OW 275
64981: PUSH
64982: LD_VAR 0 5
64986: PUSH
64987: LD_INT 1
64989: ARRAY
64990: GREATEREQUAL
64991: PUSH
64992: LD_VAR 0 4
64996: PPUSH
64997: LD_INT 2
64999: PPUSH
65000: CALL_OW 275
65004: PUSH
65005: LD_VAR 0 5
65009: PUSH
65010: LD_INT 2
65012: ARRAY
65013: GREATEREQUAL
65014: AND
65015: PUSH
65016: LD_VAR 0 4
65020: PPUSH
65021: LD_INT 3
65023: PPUSH
65024: CALL_OW 275
65028: PUSH
65029: LD_VAR 0 5
65033: PUSH
65034: LD_INT 3
65036: ARRAY
65037: GREATEREQUAL
65038: AND
65039: ST_TO_ADDR
// end ;
65040: LD_VAR 0 3
65044: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65045: LD_INT 0
65047: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65048: LD_VAR 0 1
65052: PPUSH
65053: LD_VAR 0 2
65057: PPUSH
65058: LD_INT 0
65060: PPUSH
65061: LD_INT 0
65063: PPUSH
65064: LD_INT 1
65066: PPUSH
65067: LD_INT 0
65069: PPUSH
65070: CALL_OW 587
// end ;
65074: LD_VAR 0 3
65078: RET
// export function CenterOnNow ( unit ) ; begin
65079: LD_INT 0
65081: PPUSH
// result := IsInUnit ( unit ) ;
65082: LD_ADDR_VAR 0 2
65086: PUSH
65087: LD_VAR 0 1
65091: PPUSH
65092: CALL_OW 310
65096: ST_TO_ADDR
// if not result then
65097: LD_VAR 0 2
65101: NOT
65102: IFFALSE 65114
// result := unit ;
65104: LD_ADDR_VAR 0 2
65108: PUSH
65109: LD_VAR 0 1
65113: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65114: LD_VAR 0 1
65118: PPUSH
65119: CALL_OW 87
// end ;
65123: LD_VAR 0 2
65127: RET
// export function ComMoveHex ( unit , hex ) ; begin
65128: LD_INT 0
65130: PPUSH
// if not hex then
65131: LD_VAR 0 2
65135: NOT
65136: IFFALSE 65140
// exit ;
65138: GO 65193
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65140: LD_VAR 0 2
65144: PUSH
65145: LD_INT 1
65147: ARRAY
65148: PPUSH
65149: LD_VAR 0 2
65153: PUSH
65154: LD_INT 2
65156: ARRAY
65157: PPUSH
65158: CALL_OW 428
65162: IFFALSE 65166
// exit ;
65164: GO 65193
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65166: LD_VAR 0 1
65170: PPUSH
65171: LD_VAR 0 2
65175: PUSH
65176: LD_INT 1
65178: ARRAY
65179: PPUSH
65180: LD_VAR 0 2
65184: PUSH
65185: LD_INT 2
65187: ARRAY
65188: PPUSH
65189: CALL_OW 111
// end ;
65193: LD_VAR 0 3
65197: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65198: LD_INT 0
65200: PPUSH
65201: PPUSH
65202: PPUSH
// if not unit or not enemy then
65203: LD_VAR 0 1
65207: NOT
65208: PUSH
65209: LD_VAR 0 2
65213: NOT
65214: OR
65215: IFFALSE 65219
// exit ;
65217: GO 65343
// x := GetX ( enemy ) ;
65219: LD_ADDR_VAR 0 4
65223: PUSH
65224: LD_VAR 0 2
65228: PPUSH
65229: CALL_OW 250
65233: ST_TO_ADDR
// y := GetY ( enemy ) ;
65234: LD_ADDR_VAR 0 5
65238: PUSH
65239: LD_VAR 0 2
65243: PPUSH
65244: CALL_OW 251
65248: ST_TO_ADDR
// if ValidHex ( x , y ) then
65249: LD_VAR 0 4
65253: PPUSH
65254: LD_VAR 0 5
65258: PPUSH
65259: CALL_OW 488
65263: IFFALSE 65343
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
65265: LD_VAR 0 2
65269: PPUSH
65270: CALL_OW 247
65274: PUSH
65275: LD_INT 3
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: IN
65285: PUSH
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 255
65295: PPUSH
65296: LD_VAR 0 2
65300: PPUSH
65301: CALL_OW 292
65305: OR
65306: IFFALSE 65324
// ComAttackUnit ( unit , enemy ) else
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_VAR 0 2
65317: PPUSH
65318: CALL_OW 115
65322: GO 65343
// ComAgressiveMove ( unit , x , y ) ;
65324: LD_VAR 0 1
65328: PPUSH
65329: LD_VAR 0 4
65333: PPUSH
65334: LD_VAR 0 5
65338: PPUSH
65339: CALL_OW 114
// end ;
65343: LD_VAR 0 3
65347: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
65348: LD_INT 0
65350: PPUSH
65351: PPUSH
65352: PPUSH
// list := AreaToList ( area , 0 ) ;
65353: LD_ADDR_VAR 0 5
65357: PUSH
65358: LD_VAR 0 1
65362: PPUSH
65363: LD_INT 0
65365: PPUSH
65366: CALL_OW 517
65370: ST_TO_ADDR
// if not list then
65371: LD_VAR 0 5
65375: NOT
65376: IFFALSE 65380
// exit ;
65378: GO 65510
// if all then
65380: LD_VAR 0 2
65384: IFFALSE 65472
// begin for i := 1 to list [ 1 ] do
65386: LD_ADDR_VAR 0 4
65390: PUSH
65391: DOUBLE
65392: LD_INT 1
65394: DEC
65395: ST_TO_ADDR
65396: LD_VAR 0 5
65400: PUSH
65401: LD_INT 1
65403: ARRAY
65404: PUSH
65405: FOR_TO
65406: IFFALSE 65468
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
65408: LD_ADDR_VAR 0 3
65412: PUSH
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_VAR 0 3
65422: PUSH
65423: LD_INT 1
65425: PLUS
65426: PPUSH
65427: LD_VAR 0 5
65431: PUSH
65432: LD_INT 1
65434: ARRAY
65435: PUSH
65436: LD_VAR 0 4
65440: ARRAY
65441: PUSH
65442: LD_VAR 0 5
65446: PUSH
65447: LD_INT 2
65449: ARRAY
65450: PUSH
65451: LD_VAR 0 4
65455: ARRAY
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PPUSH
65461: CALL_OW 1
65465: ST_TO_ADDR
65466: GO 65405
65468: POP
65469: POP
// exit ;
65470: GO 65510
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
65472: LD_ADDR_VAR 0 3
65476: PUSH
65477: LD_VAR 0 5
65481: PUSH
65482: LD_INT 1
65484: ARRAY
65485: PUSH
65486: LD_INT 1
65488: ARRAY
65489: PUSH
65490: LD_VAR 0 5
65494: PUSH
65495: LD_INT 2
65497: ARRAY
65498: PUSH
65499: LD_INT 1
65501: ARRAY
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: EMPTY
65508: LIST
65509: ST_TO_ADDR
// end ;
65510: LD_VAR 0 3
65514: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
65515: LD_INT 0
65517: PPUSH
65518: PPUSH
// list := AreaToList ( area , 0 ) ;
65519: LD_ADDR_VAR 0 4
65523: PUSH
65524: LD_VAR 0 1
65528: PPUSH
65529: LD_INT 0
65531: PPUSH
65532: CALL_OW 517
65536: ST_TO_ADDR
// if not list then
65537: LD_VAR 0 4
65541: NOT
65542: IFFALSE 65546
// exit ;
65544: GO 65587
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
65546: LD_ADDR_VAR 0 3
65550: PUSH
65551: LD_VAR 0 4
65555: PUSH
65556: LD_INT 1
65558: ARRAY
65559: PUSH
65560: LD_INT 1
65562: ARRAY
65563: PUSH
65564: LD_VAR 0 4
65568: PUSH
65569: LD_INT 2
65571: ARRAY
65572: PUSH
65573: LD_INT 1
65575: ARRAY
65576: PUSH
65577: LD_VAR 0 2
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: ST_TO_ADDR
// end ;
65587: LD_VAR 0 3
65591: RET
// export function First ( array ) ; begin
65592: LD_INT 0
65594: PPUSH
// if not array then
65595: LD_VAR 0 1
65599: NOT
65600: IFFALSE 65604
// exit ;
65602: GO 65618
// result := array [ 1 ] ;
65604: LD_ADDR_VAR 0 2
65608: PUSH
65609: LD_VAR 0 1
65613: PUSH
65614: LD_INT 1
65616: ARRAY
65617: ST_TO_ADDR
// end ;
65618: LD_VAR 0 2
65622: RET
// export function Last ( array ) ; begin
65623: LD_INT 0
65625: PPUSH
// if not array then
65626: LD_VAR 0 1
65630: NOT
65631: IFFALSE 65635
// exit ;
65633: GO 65651
// result := array [ array ] ;
65635: LD_ADDR_VAR 0 2
65639: PUSH
65640: LD_VAR 0 1
65644: PUSH
65645: LD_VAR 0 1
65649: ARRAY
65650: ST_TO_ADDR
// end ;
65651: LD_VAR 0 2
65655: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65656: LD_INT 0
65658: PPUSH
65659: PPUSH
// result := [ ] ;
65660: LD_ADDR_VAR 0 5
65664: PUSH
65665: EMPTY
65666: ST_TO_ADDR
// if not array then
65667: LD_VAR 0 1
65671: NOT
65672: IFFALSE 65676
// exit ;
65674: GO 65788
// for i := 1 to array do
65676: LD_ADDR_VAR 0 6
65680: PUSH
65681: DOUBLE
65682: LD_INT 1
65684: DEC
65685: ST_TO_ADDR
65686: LD_VAR 0 1
65690: PUSH
65691: FOR_TO
65692: IFFALSE 65786
// if array [ i ] [ index ] = value then
65694: LD_VAR 0 1
65698: PUSH
65699: LD_VAR 0 6
65703: ARRAY
65704: PUSH
65705: LD_VAR 0 2
65709: ARRAY
65710: PUSH
65711: LD_VAR 0 3
65715: EQUAL
65716: IFFALSE 65784
// begin if indexColumn then
65718: LD_VAR 0 4
65722: IFFALSE 65758
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65724: LD_ADDR_VAR 0 5
65728: PUSH
65729: LD_VAR 0 5
65733: PPUSH
65734: LD_VAR 0 1
65738: PUSH
65739: LD_VAR 0 6
65743: ARRAY
65744: PUSH
65745: LD_VAR 0 4
65749: ARRAY
65750: PPUSH
65751: CALL 60836 0 2
65755: ST_TO_ADDR
65756: GO 65784
// result := Join ( result , array [ i ] ) ;
65758: LD_ADDR_VAR 0 5
65762: PUSH
65763: LD_VAR 0 5
65767: PPUSH
65768: LD_VAR 0 1
65772: PUSH
65773: LD_VAR 0 6
65777: ARRAY
65778: PPUSH
65779: CALL 60836 0 2
65783: ST_TO_ADDR
// end ;
65784: GO 65691
65786: POP
65787: POP
// end ;
65788: LD_VAR 0 5
65792: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65793: LD_INT 0
65795: PPUSH
// if not vehicles or not parkingPoint then
65796: LD_VAR 0 1
65800: NOT
65801: PUSH
65802: LD_VAR 0 2
65806: NOT
65807: OR
65808: IFFALSE 65812
// exit ;
65810: GO 65910
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65812: LD_ADDR_VAR 0 1
65816: PUSH
65817: LD_VAR 0 1
65821: PPUSH
65822: LD_INT 50
65824: PUSH
65825: EMPTY
65826: LIST
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: LD_INT 92
65833: PUSH
65834: LD_VAR 0 2
65838: PUSH
65839: LD_INT 1
65841: ARRAY
65842: PUSH
65843: LD_VAR 0 2
65847: PUSH
65848: LD_INT 2
65850: ARRAY
65851: PUSH
65852: LD_INT 8
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PPUSH
65869: CALL_OW 72
65873: ST_TO_ADDR
// if not vehicles then
65874: LD_VAR 0 1
65878: NOT
65879: IFFALSE 65883
// exit ;
65881: GO 65910
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65883: LD_VAR 0 1
65887: PPUSH
65888: LD_VAR 0 2
65892: PUSH
65893: LD_INT 1
65895: ARRAY
65896: PPUSH
65897: LD_VAR 0 2
65901: PUSH
65902: LD_INT 2
65904: ARRAY
65905: PPUSH
65906: CALL_OW 111
// end ;
65910: LD_VAR 0 3
65914: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65915: LD_INT 0
65917: PPUSH
65918: PPUSH
65919: PPUSH
// if not side or not area then
65920: LD_VAR 0 1
65924: NOT
65925: PUSH
65926: LD_VAR 0 2
65930: NOT
65931: OR
65932: IFFALSE 65936
// exit ;
65934: GO 66055
// tmp := AreaToList ( area , 0 ) ;
65936: LD_ADDR_VAR 0 5
65940: PUSH
65941: LD_VAR 0 2
65945: PPUSH
65946: LD_INT 0
65948: PPUSH
65949: CALL_OW 517
65953: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65954: LD_ADDR_VAR 0 4
65958: PUSH
65959: DOUBLE
65960: LD_INT 1
65962: DEC
65963: ST_TO_ADDR
65964: LD_VAR 0 5
65968: PUSH
65969: LD_INT 1
65971: ARRAY
65972: PUSH
65973: FOR_TO
65974: IFFALSE 66053
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65976: LD_VAR 0 5
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: PUSH
65985: LD_VAR 0 4
65989: ARRAY
65990: PPUSH
65991: LD_VAR 0 5
65995: PUSH
65996: LD_INT 2
65998: ARRAY
65999: PUSH
66000: LD_VAR 0 4
66004: ARRAY
66005: PPUSH
66006: CALL_OW 351
66010: IFFALSE 66051
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
66012: LD_VAR 0 5
66016: PUSH
66017: LD_INT 1
66019: ARRAY
66020: PUSH
66021: LD_VAR 0 4
66025: ARRAY
66026: PPUSH
66027: LD_VAR 0 5
66031: PUSH
66032: LD_INT 2
66034: ARRAY
66035: PUSH
66036: LD_VAR 0 4
66040: ARRAY
66041: PPUSH
66042: LD_VAR 0 1
66046: PPUSH
66047: CALL_OW 244
// end ;
66051: GO 65973
66053: POP
66054: POP
// end ;
66055: LD_VAR 0 3
66059: RET
