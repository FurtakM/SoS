// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 281
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: IFFALSE 159
 141: PUSH
 142: LD_VAR 0 3
 146: PUSH
 147: LD_INT 1
 149: ARRAY
 150: PUSH
 151: LD_INT 1
 153: ARRAY
 154: PUSH
 155: LD_STRING p
 157: NONEQUAL
 158: AND
 159: IFFALSE 175
// begin SetTag ( i , 0 ) ;
 161: LD_VAR 0 1
 165: PPUSH
 166: LD_INT 0
 168: PPUSH
 169: CALL_OW 109
// continue ;
 173: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 175: LD_VAR 0 1
 179: PPUSH
 180: CALL_OW 110
 184: PUSH
 185: LD_INT 1
 187: NONEQUAL
 188: IFFALSE 208
 190: PUSH
 191: LD_VAR 0 3
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_INT 1
 202: ARRAY
 203: PUSH
 204: LD_STRING p
 206: EQUAL
 207: AND
 208: IFFALSE 279
// begin SetTag ( i , 1 ) ;
 210: LD_VAR 0 1
 214: PPUSH
 215: LD_INT 1
 217: PPUSH
 218: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 222: LD_INT 1
 224: PPUSH
 225: LD_VAR 0 1
 229: PPUSH
 230: LD_VAR 0 3
 234: PUSH
 235: LD_INT 1
 237: ARRAY
 238: PUSH
 239: LD_INT 2
 241: ARRAY
 242: PPUSH
 243: LD_VAR 0 3
 247: PUSH
 248: LD_INT 1
 250: ARRAY
 251: PUSH
 252: LD_INT 3
 254: ARRAY
 255: PPUSH
 256: LD_VAR 0 3
 260: PUSH
 261: LD_INT 1
 263: ARRAY
 264: PUSH
 265: LD_INT 4
 267: ARRAY
 268: PPUSH
 269: LD_INT 0
 271: PPUSH
 272: LD_INT 0
 274: PPUSH
 275: CALL_OW 595
// end ; end ;
 279: GO 87
 281: POP
 282: POP
// until mineCounter = 0 ;
 283: LD_EXP 1
 287: PUSH
 288: LD_INT 0
 290: EQUAL
 291: IFFALSE 16
// end ;
 293: PPOPN 3
 295: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 296: LD_VAR 0 1
 300: PUSH
 301: LD_INT 1
 303: EQUAL
 304: IFFALSE 394
// begin repeat wait ( 0 0$1 ) ;
 306: LD_INT 35
 308: PPUSH
 309: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 313: LD_VAR 0 3
 317: PPUSH
 318: LD_VAR 0 4
 322: PPUSH
 323: CALL_OW 458
 327: IFTRUE 355
 329: PUSH
 330: LD_VAR 0 5
 334: PPUSH
 335: CALL_OW 250
 339: PPUSH
 340: LD_VAR 0 5
 344: PPUSH
 345: CALL_OW 251
 349: PPUSH
 350: CALL 397 0 2
 354: OR
 355: IFFALSE 359
// break ;
 357: GO 380
// if GetTag ( p1 ) <> 1 then
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 110
 368: PUSH
 369: LD_INT 1
 371: NONEQUAL
 372: IFFALSE 376
// exit ;
 374: GO 394
// until false ;
 376: LD_INT 0
 378: IFFALSE 306
// mineCounter := mineCounter - 1 ;
 380: LD_ADDR_EXP 1
 384: PUSH
 385: LD_EXP 1
 389: PUSH
 390: LD_INT 1
 392: MINUS
 393: ST_TO_ADDR
// end ; end ;
 394: PPOPN 7
 396: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 397: LD_INT 0
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// for _d := 0 to 5 do
 403: LD_ADDR_VAR 0 6
 407: PUSH
 408: DOUBLE
 409: LD_INT 0
 411: DEC
 412: ST_TO_ADDR
 413: LD_INT 5
 415: PUSH
 416: FOR_TO
 417: IFFALSE 525
// for _x := - 3 to 3 do
 419: LD_ADDR_VAR 0 4
 423: PUSH
 424: DOUBLE
 425: LD_INT 3
 427: NEG
 428: DEC
 429: ST_TO_ADDR
 430: LD_INT 3
 432: PUSH
 433: FOR_TO
 434: IFFALSE 521
// for _y := - 3 to 3 do
 436: LD_ADDR_VAR 0 5
 440: PUSH
 441: DOUBLE
 442: LD_INT 3
 444: NEG
 445: DEC
 446: ST_TO_ADDR
 447: LD_INT 3
 449: PUSH
 450: FOR_TO
 451: IFFALSE 517
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 453: LD_VAR 0 1
 457: PPUSH
 458: LD_VAR 0 6
 462: PPUSH
 463: LD_VAR 0 4
 467: PPUSH
 468: CALL_OW 272
 472: PPUSH
 473: LD_VAR 0 2
 477: PPUSH
 478: LD_VAR 0 6
 482: PPUSH
 483: LD_VAR 0 5
 487: PPUSH
 488: CALL_OW 273
 492: PPUSH
 493: CALL_OW 458
 497: IFFALSE 515
// begin result := true ;
 499: LD_ADDR_VAR 0 3
 503: PUSH
 504: LD_INT 1
 506: ST_TO_ADDR
// exit ;
 507: POP
 508: POP
 509: POP
 510: POP
 511: POP
 512: POP
 513: GO 527
// end ;
 515: GO 450
 517: POP
 518: POP
 519: GO 433
 521: POP
 522: POP
 523: GO 416
 525: POP
 526: POP
// end ;
 527: LD_VAR 0 3
 531: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 532: GO 534
 534: DISABLE
 535: LD_INT 0
 537: PPUSH
 538: PPUSH
 539: PPUSH
 540: PPUSH
 541: PPUSH
 542: PPUSH
 543: PPUSH
 544: PPUSH
 545: PPUSH
// begin x := 23 ;
 546: LD_ADDR_VAR 0 2
 550: PUSH
 551: LD_INT 23
 553: ST_TO_ADDR
// y := 19 ;
 554: LD_ADDR_VAR 0 3
 558: PUSH
 559: LD_INT 19
 561: ST_TO_ADDR
// uc_side := 8 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 8
 569: ST_TO_ADDR
// uc_nation := 1 ;
 570: LD_ADDR_OWVAR 21
 574: PUSH
 575: LD_INT 1
 577: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 578: LD_INT 0
 580: PPUSH
 581: LD_INT 1
 583: PPUSH
 584: CALL_OW 381
// for _r := 1 to 6 do
 588: LD_ADDR_VAR 0 4
 592: PUSH
 593: DOUBLE
 594: LD_INT 1
 596: DEC
 597: ST_TO_ADDR
 598: LD_INT 6
 600: PUSH
 601: FOR_TO
 602: IFFALSE 754
// begin for _x := - _r to _r do
 604: LD_ADDR_VAR 0 5
 608: PUSH
 609: DOUBLE
 610: LD_VAR 0 4
 614: NEG
 615: DEC
 616: ST_TO_ADDR
 617: LD_VAR 0 4
 621: PUSH
 622: FOR_TO
 623: IFFALSE 750
// for _y := - _r to _r do
 625: LD_ADDR_VAR 0 6
 629: PUSH
 630: DOUBLE
 631: LD_VAR 0 4
 635: NEG
 636: DEC
 637: ST_TO_ADDR
 638: LD_VAR 0 4
 642: PUSH
 643: FOR_TO
 644: IFFALSE 746
// begin __x := x + _x ;
 646: LD_ADDR_VAR 0 8
 650: PUSH
 651: LD_VAR 0 2
 655: PUSH
 656: LD_VAR 0 5
 660: PLUS
 661: ST_TO_ADDR
// __y := y + _y ;
 662: LD_ADDR_VAR 0 9
 666: PUSH
 667: LD_VAR 0 3
 671: PUSH
 672: LD_VAR 0 6
 676: PLUS
 677: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 678: LD_VAR 0 8
 682: PPUSH
 683: LD_VAR 0 9
 687: PPUSH
 688: CALL_OW 428
 692: IFFALSE 696
// continue ;
 694: GO 643
// wait ( 1 ) ;
 696: LD_INT 1
 698: PPUSH
 699: CALL_OW 67
// un := CreateHuman ;
 703: LD_ADDR_VAR 0 1
 707: PUSH
 708: CALL_OW 44
 712: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 713: LD_VAR 0 1
 717: PPUSH
 718: LD_VAR 0 8
 722: PPUSH
 723: LD_VAR 0 9
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 48
// ComHold ( un ) ;
 735: LD_VAR 0 1
 739: PPUSH
 740: CALL_OW 140
// end ;
 744: GO 643
 746: POP
 747: POP
 748: GO 622
 750: POP
 751: POP
// end ;
 752: GO 601
 754: POP
 755: POP
// end ;
 756: PPOPN 9
 758: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 759: LD_INT 0
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
 766: PPUSH
 767: PPUSH
 768: PPUSH
 769: PPUSH
 770: PPUSH
 771: PPUSH
// enemySkilllevel := 2 ;
 772: LD_ADDR_VAR 0 16
 776: PUSH
 777: LD_INT 2
 779: ST_TO_ADDR
// uc_side := 1 ;
 780: LD_ADDR_OWVAR 20
 784: PUSH
 785: LD_INT 1
 787: ST_TO_ADDR
// uc_nation := 1 ;
 788: LD_ADDR_OWVAR 21
 792: PUSH
 793: LD_INT 1
 795: ST_TO_ADDR
// hc_name :=  ;
 796: LD_ADDR_OWVAR 26
 800: PUSH
 801: LD_STRING 
 803: ST_TO_ADDR
// hc_gallery :=  ;
 804: LD_ADDR_OWVAR 33
 808: PUSH
 809: LD_STRING 
 811: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 812: LD_ADDR_VAR 0 8
 816: PUSH
 817: DOUBLE
 818: LD_INT 1
 820: DEC
 821: ST_TO_ADDR
 822: LD_VAR 0 1
 826: PUSH
 827: FOR_TO
 828: IFFALSE 903
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 830: LD_INT 0
 832: PPUSH
 833: LD_VAR 0 16
 837: PPUSH
 838: CALL_OW 381
// un = CreateHuman ;
 842: LD_ADDR_VAR 0 9
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 852: LD_ADDR_VAR 0 17
 856: PUSH
 857: LD_VAR 0 17
 861: PUSH
 862: LD_VAR 0 9
 866: ADD
 867: ST_TO_ADDR
// sols := sols ^ un ;
 868: LD_ADDR_VAR 0 12
 872: PUSH
 873: LD_VAR 0 12
 877: PUSH
 878: LD_VAR 0 9
 882: ADD
 883: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 884: LD_VAR 0 9
 888: PPUSH
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 0
 896: PPUSH
 897: CALL_OW 49
// end ;
 901: GO 827
 903: POP
 904: POP
// for i := 1 to engsAmount do
 905: LD_ADDR_VAR 0 8
 909: PUSH
 910: DOUBLE
 911: LD_INT 1
 913: DEC
 914: ST_TO_ADDR
 915: LD_VAR 0 2
 919: PUSH
 920: FOR_TO
 921: IFFALSE 996
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 923: LD_INT 0
 925: PPUSH
 926: LD_VAR 0 16
 930: PPUSH
 931: CALL_OW 382
// un = CreateHuman ;
 935: LD_ADDR_VAR 0 9
 939: PUSH
 940: CALL_OW 44
 944: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 945: LD_ADDR_VAR 0 17
 949: PUSH
 950: LD_VAR 0 17
 954: PUSH
 955: LD_VAR 0 9
 959: ADD
 960: ST_TO_ADDR
// engs := engs ^ un ;
 961: LD_ADDR_VAR 0 13
 965: PUSH
 966: LD_VAR 0 13
 970: PUSH
 971: LD_VAR 0 9
 975: ADD
 976: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 977: LD_VAR 0 9
 981: PPUSH
 982: LD_VAR 0 6
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: GO 920
 996: POP
 997: POP
// for i := 1 to mechsAmount do
 998: LD_ADDR_VAR 0 8
1002: PUSH
1003: DOUBLE
1004: LD_INT 1
1006: DEC
1007: ST_TO_ADDR
1008: LD_VAR 0 3
1012: PUSH
1013: FOR_TO
1014: IFFALSE 1089
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1016: LD_INT 0
1018: PPUSH
1019: LD_VAR 0 16
1023: PPUSH
1024: CALL_OW 382
// un = CreateHuman ;
1028: LD_ADDR_VAR 0 9
1032: PUSH
1033: CALL_OW 44
1037: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1038: LD_ADDR_VAR 0 17
1042: PUSH
1043: LD_VAR 0 17
1047: PUSH
1048: LD_VAR 0 9
1052: ADD
1053: ST_TO_ADDR
// engs := engs ^ un ;
1054: LD_ADDR_VAR 0 13
1058: PUSH
1059: LD_VAR 0 13
1063: PUSH
1064: LD_VAR 0 9
1068: ADD
1069: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1070: LD_VAR 0 9
1074: PPUSH
1075: LD_VAR 0 6
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// end ;
1087: GO 1013
1089: POP
1090: POP
// for i := 1 to scientistsAmount do
1091: LD_ADDR_VAR 0 8
1095: PUSH
1096: DOUBLE
1097: LD_INT 1
1099: DEC
1100: ST_TO_ADDR
1101: LD_VAR 0 4
1105: PUSH
1106: FOR_TO
1107: IFFALSE 1182
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1109: LD_INT 0
1111: PPUSH
1112: LD_VAR 0 16
1116: PPUSH
1117: CALL_OW 383
// un = CreateHuman ;
1121: LD_ADDR_VAR 0 9
1125: PUSH
1126: CALL_OW 44
1130: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1131: LD_ADDR_VAR 0 17
1135: PUSH
1136: LD_VAR 0 17
1140: PUSH
1141: LD_VAR 0 9
1145: ADD
1146: ST_TO_ADDR
// mechs := mechs ^ un ;
1147: LD_ADDR_VAR 0 14
1151: PUSH
1152: LD_VAR 0 14
1156: PUSH
1157: LD_VAR 0 9
1161: ADD
1162: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1163: LD_VAR 0 9
1167: PPUSH
1168: LD_VAR 0 6
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 49
// end ;
1180: GO 1106
1182: POP
1183: POP
// for i := 1 to vehiclesAmount do
1184: LD_ADDR_VAR 0 8
1188: PUSH
1189: DOUBLE
1190: LD_INT 1
1192: DEC
1193: ST_TO_ADDR
1194: LD_VAR 0 5
1198: PUSH
1199: FOR_TO
1200: IFFALSE 1366
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1202: LD_ADDR_OWVAR 40
1206: PUSH
1207: LD_INT 2
1209: PUSH
1210: LD_INT 4
1212: PUSH
1213: LD_INT 3
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 1
1223: PPUSH
1224: LD_INT 3
1226: PPUSH
1227: CALL_OW 12
1231: ARRAY
1232: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1233: LD_ADDR_OWVAR 37
1237: PUSH
1238: LD_INT 3
1240: ST_TO_ADDR
// vc_control = control_manual ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_engine = engine_combustion ;
1249: LD_ADDR_OWVAR 39
1253: PUSH
1254: LD_INT 1
1256: ST_TO_ADDR
// veh = CreateVehicle ;
1257: LD_ADDR_VAR 0 10
1261: PUSH
1262: CALL_OW 45
1266: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1267: LD_ADDR_VAR 0 17
1271: PUSH
1272: LD_VAR 0 17
1276: PUSH
1277: LD_VAR 0 10
1281: ADD
1282: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1283: LD_VAR 0 10
1287: PPUSH
1288: LD_VAR 0 6
1292: PPUSH
1293: LD_INT 0
1295: PPUSH
1296: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1300: LD_INT 0
1302: PPUSH
1303: LD_VAR 0 16
1307: PPUSH
1308: CALL_OW 383
// un = CreateHuman ;
1312: LD_ADDR_VAR 0 9
1316: PUSH
1317: CALL_OW 44
1321: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1322: LD_ADDR_VAR 0 17
1326: PUSH
1327: LD_VAR 0 17
1331: PUSH
1332: LD_VAR 0 9
1336: ADD
1337: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1338: LD_VAR 0 9
1342: PPUSH
1343: LD_VAR 0 10
1347: PPUSH
1348: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1352: LD_VAR 0 10
1356: PPUSH
1357: LD_INT 100
1359: PPUSH
1360: CALL_OW 240
// end ;
1364: GO 1199
1366: POP
1367: POP
// end ; end_of_file
1368: LD_VAR 0 7
1372: RET
// export globalGameSaveCounter ; every 0 0$1 do
1373: GO 1375
1375: DISABLE
// begin enable ;
1376: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1377: LD_STRING updateTimer(
1379: PUSH
1380: LD_OWVAR 1
1384: STR
1385: PUSH
1386: LD_STRING );
1388: STR
1389: PPUSH
1390: CALL_OW 559
// end ;
1394: END
// every 0 0$1 do
1395: GO 1397
1397: DISABLE
// begin globalGameSaveCounter := 0 ;
1398: LD_ADDR_EXP 2
1402: PUSH
1403: LD_INT 0
1405: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1406: LD_STRING setGameSaveCounter(0)
1408: PPUSH
1409: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1413: LD_STRING initStreamRollete();
1415: PPUSH
1416: CALL_OW 559
// InitStreamMode ;
1420: CALL 2772 0 0
// DefineStreamItems ( false ) ;
1424: LD_INT 0
1426: PPUSH
1427: CALL 3236 0 1
// end ;
1431: END
// export function SOS_MapStart ( ) ; begin
1432: LD_INT 0
1434: PPUSH
// if streamModeActive then
1435: LD_EXP 3
1439: IFFALSE 1448
// DefineStreamItems ( true ) ;
1441: LD_INT 1
1443: PPUSH
1444: CALL 3236 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
1448: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
1450: PPUSH
1451: CALL_OW 559
// UpdateLuaVariables ( ) ;
1455: CALL 1472 0 0
// UpdateFactoryWaypoints ( ) ;
1459: CALL 16358 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1463: CALL 16610 0 0
// end ;
1467: LD_VAR 0 1
1471: RET
// function UpdateLuaVariables ( ) ; begin
1472: LD_INT 0
1474: PPUSH
// if globalGameSaveCounter then
1475: LD_EXP 2
1479: IFFALSE 1513
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1481: LD_ADDR_EXP 2
1485: PUSH
1486: LD_EXP 2
1490: PPUSH
1491: CALL 63762 0 1
1495: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1496: LD_STRING setGameSaveCounter(
1498: PUSH
1499: LD_EXP 2
1503: STR
1504: PUSH
1505: LD_STRING )
1507: STR
1508: PPUSH
1509: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1513: LD_STRING setGameDifficulty(
1515: PUSH
1516: LD_OWVAR 67
1520: STR
1521: PUSH
1522: LD_STRING )
1524: STR
1525: PPUSH
1526: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
1530: LD_STRING displayDifficulty(
1532: PUSH
1533: LD_OWVAR 67
1537: STR
1538: PUSH
1539: LD_STRING )
1541: STR
1542: PPUSH
1543: CALL_OW 559
// end ;
1547: LD_VAR 0 1
1551: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1552: LD_INT 0
1554: PPUSH
// if p2 = stream_mode then
1555: LD_VAR 0 2
1559: PUSH
1560: LD_INT 100
1562: EQUAL
1563: IFFALSE 2566
// begin if not StreamModeActive then
1565: LD_EXP 3
1569: NOT
1570: IFFALSE 1580
// StreamModeActive := true ;
1572: LD_ADDR_EXP 3
1576: PUSH
1577: LD_INT 1
1579: ST_TO_ADDR
// if p3 = 0 then
1580: LD_VAR 0 3
1584: PUSH
1585: LD_INT 0
1587: EQUAL
1588: IFFALSE 1594
// InitStreamMode ;
1590: CALL 2772 0 0
// if p3 = 1 then
1594: LD_VAR 0 3
1598: PUSH
1599: LD_INT 1
1601: EQUAL
1602: IFFALSE 1612
// sRocket := true ;
1604: LD_ADDR_EXP 8
1608: PUSH
1609: LD_INT 1
1611: ST_TO_ADDR
// if p3 = 2 then
1612: LD_VAR 0 3
1616: PUSH
1617: LD_INT 2
1619: EQUAL
1620: IFFALSE 1630
// sSpeed := true ;
1622: LD_ADDR_EXP 7
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// if p3 = 3 then
1630: LD_VAR 0 3
1634: PUSH
1635: LD_INT 3
1637: EQUAL
1638: IFFALSE 1648
// sEngine := true ;
1640: LD_ADDR_EXP 9
1644: PUSH
1645: LD_INT 1
1647: ST_TO_ADDR
// if p3 = 4 then
1648: LD_VAR 0 3
1652: PUSH
1653: LD_INT 4
1655: EQUAL
1656: IFFALSE 1666
// sSpec := true ;
1658: LD_ADDR_EXP 6
1662: PUSH
1663: LD_INT 1
1665: ST_TO_ADDR
// if p3 = 5 then
1666: LD_VAR 0 3
1670: PUSH
1671: LD_INT 5
1673: EQUAL
1674: IFFALSE 1684
// sLevel := true ;
1676: LD_ADDR_EXP 10
1680: PUSH
1681: LD_INT 1
1683: ST_TO_ADDR
// if p3 = 6 then
1684: LD_VAR 0 3
1688: PUSH
1689: LD_INT 6
1691: EQUAL
1692: IFFALSE 1702
// sArmoury := true ;
1694: LD_ADDR_EXP 11
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// if p3 = 7 then
1702: LD_VAR 0 3
1706: PUSH
1707: LD_INT 7
1709: EQUAL
1710: IFFALSE 1720
// sRadar := true ;
1712: LD_ADDR_EXP 12
1716: PUSH
1717: LD_INT 1
1719: ST_TO_ADDR
// if p3 = 8 then
1720: LD_VAR 0 3
1724: PUSH
1725: LD_INT 8
1727: EQUAL
1728: IFFALSE 1738
// sBunker := true ;
1730: LD_ADDR_EXP 13
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// if p3 = 9 then
1738: LD_VAR 0 3
1742: PUSH
1743: LD_INT 9
1745: EQUAL
1746: IFFALSE 1756
// sHack := true ;
1748: LD_ADDR_EXP 14
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// if p3 = 10 then
1756: LD_VAR 0 3
1760: PUSH
1761: LD_INT 10
1763: EQUAL
1764: IFFALSE 1774
// sFire := true ;
1766: LD_ADDR_EXP 15
1770: PUSH
1771: LD_INT 1
1773: ST_TO_ADDR
// if p3 = 11 then
1774: LD_VAR 0 3
1778: PUSH
1779: LD_INT 11
1781: EQUAL
1782: IFFALSE 1792
// sRefresh := true ;
1784: LD_ADDR_EXP 16
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// if p3 = 12 then
1792: LD_VAR 0 3
1796: PUSH
1797: LD_INT 12
1799: EQUAL
1800: IFFALSE 1810
// sExp := true ;
1802: LD_ADDR_EXP 17
1806: PUSH
1807: LD_INT 1
1809: ST_TO_ADDR
// if p3 = 13 then
1810: LD_VAR 0 3
1814: PUSH
1815: LD_INT 13
1817: EQUAL
1818: IFFALSE 1828
// sDepot := true ;
1820: LD_ADDR_EXP 18
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// if p3 = 14 then
1828: LD_VAR 0 3
1832: PUSH
1833: LD_INT 14
1835: EQUAL
1836: IFFALSE 1846
// sFlag := true ;
1838: LD_ADDR_EXP 19
1842: PUSH
1843: LD_INT 1
1845: ST_TO_ADDR
// if p3 = 15 then
1846: LD_VAR 0 3
1850: PUSH
1851: LD_INT 15
1853: EQUAL
1854: IFFALSE 1864
// sKamikadze := true ;
1856: LD_ADDR_EXP 27
1860: PUSH
1861: LD_INT 1
1863: ST_TO_ADDR
// if p3 = 16 then
1864: LD_VAR 0 3
1868: PUSH
1869: LD_INT 16
1871: EQUAL
1872: IFFALSE 1882
// sTroll := true ;
1874: LD_ADDR_EXP 28
1878: PUSH
1879: LD_INT 1
1881: ST_TO_ADDR
// if p3 = 17 then
1882: LD_VAR 0 3
1886: PUSH
1887: LD_INT 17
1889: EQUAL
1890: IFFALSE 1900
// sSlow := true ;
1892: LD_ADDR_EXP 29
1896: PUSH
1897: LD_INT 1
1899: ST_TO_ADDR
// if p3 = 18 then
1900: LD_VAR 0 3
1904: PUSH
1905: LD_INT 18
1907: EQUAL
1908: IFFALSE 1918
// sLack := true ;
1910: LD_ADDR_EXP 30
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// if p3 = 19 then
1918: LD_VAR 0 3
1922: PUSH
1923: LD_INT 19
1925: EQUAL
1926: IFFALSE 1936
// sTank := true ;
1928: LD_ADDR_EXP 32
1932: PUSH
1933: LD_INT 1
1935: ST_TO_ADDR
// if p3 = 20 then
1936: LD_VAR 0 3
1940: PUSH
1941: LD_INT 20
1943: EQUAL
1944: IFFALSE 1954
// sRemote := true ;
1946: LD_ADDR_EXP 33
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// if p3 = 21 then
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 21
1961: EQUAL
1962: IFFALSE 1972
// sPowell := true ;
1964: LD_ADDR_EXP 34
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// if p3 = 22 then
1972: LD_VAR 0 3
1976: PUSH
1977: LD_INT 22
1979: EQUAL
1980: IFFALSE 1990
// sTeleport := true ;
1982: LD_ADDR_EXP 37
1986: PUSH
1987: LD_INT 1
1989: ST_TO_ADDR
// if p3 = 23 then
1990: LD_VAR 0 3
1994: PUSH
1995: LD_INT 23
1997: EQUAL
1998: IFFALSE 2008
// sOilTower := true ;
2000: LD_ADDR_EXP 39
2004: PUSH
2005: LD_INT 1
2007: ST_TO_ADDR
// if p3 = 24 then
2008: LD_VAR 0 3
2012: PUSH
2013: LD_INT 24
2015: EQUAL
2016: IFFALSE 2026
// sShovel := true ;
2018: LD_ADDR_EXP 40
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// if p3 = 25 then
2026: LD_VAR 0 3
2030: PUSH
2031: LD_INT 25
2033: EQUAL
2034: IFFALSE 2044
// sSheik := true ;
2036: LD_ADDR_EXP 41
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// if p3 = 26 then
2044: LD_VAR 0 3
2048: PUSH
2049: LD_INT 26
2051: EQUAL
2052: IFFALSE 2062
// sEarthquake := true ;
2054: LD_ADDR_EXP 43
2058: PUSH
2059: LD_INT 1
2061: ST_TO_ADDR
// if p3 = 27 then
2062: LD_VAR 0 3
2066: PUSH
2067: LD_INT 27
2069: EQUAL
2070: IFFALSE 2080
// sAI := true ;
2072: LD_ADDR_EXP 44
2076: PUSH
2077: LD_INT 1
2079: ST_TO_ADDR
// if p3 = 28 then
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 28
2087: EQUAL
2088: IFFALSE 2098
// sCargo := true ;
2090: LD_ADDR_EXP 47
2094: PUSH
2095: LD_INT 1
2097: ST_TO_ADDR
// if p3 = 29 then
2098: LD_VAR 0 3
2102: PUSH
2103: LD_INT 29
2105: EQUAL
2106: IFFALSE 2116
// sDLaser := true ;
2108: LD_ADDR_EXP 48
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// if p3 = 30 then
2116: LD_VAR 0 3
2120: PUSH
2121: LD_INT 30
2123: EQUAL
2124: IFFALSE 2134
// sExchange := true ;
2126: LD_ADDR_EXP 49
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// if p3 = 31 then
2134: LD_VAR 0 3
2138: PUSH
2139: LD_INT 31
2141: EQUAL
2142: IFFALSE 2152
// sFac := true ;
2144: LD_ADDR_EXP 50
2148: PUSH
2149: LD_INT 1
2151: ST_TO_ADDR
// if p3 = 32 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 32
2159: EQUAL
2160: IFFALSE 2170
// sPower := true ;
2162: LD_ADDR_EXP 51
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 33 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 33
2177: EQUAL
2178: IFFALSE 2188
// sRandom := true ;
2180: LD_ADDR_EXP 52
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 34 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 34
2195: EQUAL
2196: IFFALSE 2206
// sShield := true ;
2198: LD_ADDR_EXP 53
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 35 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 35
2213: EQUAL
2214: IFFALSE 2224
// sTime := true ;
2216: LD_ADDR_EXP 54
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 36 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 36
2231: EQUAL
2232: IFFALSE 2242
// sTools := true ;
2234: LD_ADDR_EXP 55
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 101 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 101
2249: EQUAL
2250: IFFALSE 2260
// sSold := true ;
2252: LD_ADDR_EXP 20
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 102 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 102
2267: EQUAL
2268: IFFALSE 2278
// sDiff := true ;
2270: LD_ADDR_EXP 21
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 103 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 103
2285: EQUAL
2286: IFFALSE 2296
// sFog := true ;
2288: LD_ADDR_EXP 24
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 104 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 104
2303: EQUAL
2304: IFFALSE 2314
// sReset := true ;
2306: LD_ADDR_EXP 25
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 105 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 105
2321: EQUAL
2322: IFFALSE 2332
// sSun := true ;
2324: LD_ADDR_EXP 26
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 106 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 106
2339: EQUAL
2340: IFFALSE 2350
// sTiger := true ;
2342: LD_ADDR_EXP 22
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// if p3 = 107 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 107
2357: EQUAL
2358: IFFALSE 2368
// sBomb := true ;
2360: LD_ADDR_EXP 23
2364: PUSH
2365: LD_INT 1
2367: ST_TO_ADDR
// if p3 = 108 then
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 108
2375: EQUAL
2376: IFFALSE 2386
// sWound := true ;
2378: LD_ADDR_EXP 31
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// if p3 = 109 then
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 109
2393: EQUAL
2394: IFFALSE 2404
// sBetray := true ;
2396: LD_ADDR_EXP 35
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// if p3 = 110 then
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 110
2411: EQUAL
2412: IFFALSE 2422
// sContamin := true ;
2414: LD_ADDR_EXP 36
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// if p3 = 111 then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 111
2429: EQUAL
2430: IFFALSE 2440
// sOil := true ;
2432: LD_ADDR_EXP 38
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// if p3 = 112 then
2440: LD_VAR 0 3
2444: PUSH
2445: LD_INT 112
2447: EQUAL
2448: IFFALSE 2458
// sStu := true ;
2450: LD_ADDR_EXP 42
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// if p3 = 113 then
2458: LD_VAR 0 3
2462: PUSH
2463: LD_INT 113
2465: EQUAL
2466: IFFALSE 2476
// sBazooka := true ;
2468: LD_ADDR_EXP 45
2472: PUSH
2473: LD_INT 1
2475: ST_TO_ADDR
// if p3 = 114 then
2476: LD_VAR 0 3
2480: PUSH
2481: LD_INT 114
2483: EQUAL
2484: IFFALSE 2494
// sMortar := true ;
2486: LD_ADDR_EXP 46
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// if p3 = 115 then
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 115
2501: EQUAL
2502: IFFALSE 2512
// sRanger := true ;
2504: LD_ADDR_EXP 56
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// if p3 = 116 then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 116
2519: EQUAL
2520: IFFALSE 2530
// sComputer := true ;
2522: LD_ADDR_EXP 57
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// if p3 = 117 then
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 117
2537: EQUAL
2538: IFFALSE 2548
// s30 := true ;
2540: LD_ADDR_EXP 58
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// if p3 = 118 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 118
2555: EQUAL
2556: IFFALSE 2566
// s60 := true ;
2558: LD_ADDR_EXP 59
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// end ; if p2 = hack_mode then
2566: LD_VAR 0 2
2570: PUSH
2571: LD_INT 101
2573: EQUAL
2574: IFFALSE 2702
// begin case p3 of 1 :
2576: LD_VAR 0 3
2580: PUSH
2581: LD_INT 1
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2596
2589: POP
// hHackUnlimitedResources ; 2 :
2590: CALL 14965 0 0
2594: GO 2702
2596: LD_INT 2
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2611
2604: POP
// hHackSetLevel10 ; 3 :
2605: CALL 15098 0 0
2609: GO 2702
2611: LD_INT 3
2613: DOUBLE
2614: EQUAL
2615: IFTRUE 2619
2617: GO 2626
2619: POP
// hHackSetLevel10YourUnits ; 4 :
2620: CALL 15183 0 0
2624: GO 2702
2626: LD_INT 4
2628: DOUBLE
2629: EQUAL
2630: IFTRUE 2634
2632: GO 2641
2634: POP
// hHackInvincible ; 5 :
2635: CALL 15631 0 0
2639: GO 2702
2641: LD_INT 5
2643: DOUBLE
2644: EQUAL
2645: IFTRUE 2649
2647: GO 2656
2649: POP
// hHackInvisible ; 6 :
2650: CALL 15742 0 0
2654: GO 2702
2656: LD_INT 6
2658: DOUBLE
2659: EQUAL
2660: IFTRUE 2664
2662: GO 2671
2664: POP
// hHackChangeYourSide ; 7 :
2665: CALL 15799 0 0
2669: GO 2702
2671: LD_INT 7
2673: DOUBLE
2674: EQUAL
2675: IFTRUE 2679
2677: GO 2686
2679: POP
// hHackChangeUnitSide ; 8 :
2680: CALL 15841 0 0
2684: GO 2702
2686: LD_INT 8
2688: DOUBLE
2689: EQUAL
2690: IFTRUE 2694
2692: GO 2701
2694: POP
// hHackFog ; end ;
2695: CALL 15942 0 0
2699: GO 2702
2701: POP
// end ; if p2 = game_save_mode then
2702: LD_VAR 0 2
2706: PUSH
2707: LD_INT 102
2709: EQUAL
2710: IFFALSE 2767
// begin if p3 = 1 then
2712: LD_VAR 0 3
2716: PUSH
2717: LD_INT 1
2719: EQUAL
2720: IFFALSE 2732
// globalGameSaveCounter := p4 ;
2722: LD_ADDR_EXP 2
2726: PUSH
2727: LD_VAR 0 4
2731: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2732: LD_VAR 0 3
2736: PUSH
2737: LD_INT 2
2739: EQUAL
2740: IFFALSE 2748
2742: PUSH
2743: LD_EXP 2
2747: AND
2748: IFFALSE 2767
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2750: LD_STRING setGameSaveCounter(
2752: PUSH
2753: LD_EXP 2
2757: STR
2758: PUSH
2759: LD_STRING )
2761: STR
2762: PPUSH
2763: CALL_OW 559
// end ; end ;
2767: LD_VAR 0 7
2771: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2772: LD_INT 0
2774: PPUSH
// streamModeActive := false ;
2775: LD_ADDR_EXP 3
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// normalCounter := 36 ;
2783: LD_ADDR_EXP 4
2787: PUSH
2788: LD_INT 36
2790: ST_TO_ADDR
// hardcoreCounter := 18 ;
2791: LD_ADDR_EXP 5
2795: PUSH
2796: LD_INT 18
2798: ST_TO_ADDR
// sRocket := false ;
2799: LD_ADDR_EXP 8
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sSpeed := false ;
2807: LD_ADDR_EXP 7
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sEngine := false ;
2815: LD_ADDR_EXP 9
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sSpec := false ;
2823: LD_ADDR_EXP 6
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sLevel := false ;
2831: LD_ADDR_EXP 10
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sArmoury := false ;
2839: LD_ADDR_EXP 11
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sRadar := false ;
2847: LD_ADDR_EXP 12
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sBunker := false ;
2855: LD_ADDR_EXP 13
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sHack := false ;
2863: LD_ADDR_EXP 14
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sFire := false ;
2871: LD_ADDR_EXP 15
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sRefresh := false ;
2879: LD_ADDR_EXP 16
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sExp := false ;
2887: LD_ADDR_EXP 17
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// sDepot := false ;
2895: LD_ADDR_EXP 18
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// sFlag := false ;
2903: LD_ADDR_EXP 19
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// sKamikadze := false ;
2911: LD_ADDR_EXP 27
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// sTroll := false ;
2919: LD_ADDR_EXP 28
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// sSlow := false ;
2927: LD_ADDR_EXP 29
2931: PUSH
2932: LD_INT 0
2934: ST_TO_ADDR
// sLack := false ;
2935: LD_ADDR_EXP 30
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// sTank := false ;
2943: LD_ADDR_EXP 32
2947: PUSH
2948: LD_INT 0
2950: ST_TO_ADDR
// sRemote := false ;
2951: LD_ADDR_EXP 33
2955: PUSH
2956: LD_INT 0
2958: ST_TO_ADDR
// sPowell := false ;
2959: LD_ADDR_EXP 34
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// sTeleport := false ;
2967: LD_ADDR_EXP 37
2971: PUSH
2972: LD_INT 0
2974: ST_TO_ADDR
// sOilTower := false ;
2975: LD_ADDR_EXP 39
2979: PUSH
2980: LD_INT 0
2982: ST_TO_ADDR
// sShovel := false ;
2983: LD_ADDR_EXP 40
2987: PUSH
2988: LD_INT 0
2990: ST_TO_ADDR
// sSheik := false ;
2991: LD_ADDR_EXP 41
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// sEarthquake := false ;
2999: LD_ADDR_EXP 43
3003: PUSH
3004: LD_INT 0
3006: ST_TO_ADDR
// sAI := false ;
3007: LD_ADDR_EXP 44
3011: PUSH
3012: LD_INT 0
3014: ST_TO_ADDR
// sCargo := false ;
3015: LD_ADDR_EXP 47
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// sDLaser := false ;
3023: LD_ADDR_EXP 48
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// sExchange := false ;
3031: LD_ADDR_EXP 49
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// sFac := false ;
3039: LD_ADDR_EXP 50
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// sPower := false ;
3047: LD_ADDR_EXP 51
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// sRandom := false ;
3055: LD_ADDR_EXP 52
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// sShield := false ;
3063: LD_ADDR_EXP 53
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// sTime := false ;
3071: LD_ADDR_EXP 54
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// sTools := false ;
3079: LD_ADDR_EXP 55
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// sSold := false ;
3087: LD_ADDR_EXP 20
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// sDiff := false ;
3095: LD_ADDR_EXP 21
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// sFog := false ;
3103: LD_ADDR_EXP 24
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// sReset := false ;
3111: LD_ADDR_EXP 25
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// sSun := false ;
3119: LD_ADDR_EXP 26
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// sTiger := false ;
3127: LD_ADDR_EXP 22
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// sBomb := false ;
3135: LD_ADDR_EXP 23
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// sWound := false ;
3143: LD_ADDR_EXP 31
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// sBetray := false ;
3151: LD_ADDR_EXP 35
3155: PUSH
3156: LD_INT 0
3158: ST_TO_ADDR
// sContamin := false ;
3159: LD_ADDR_EXP 36
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// sOil := false ;
3167: LD_ADDR_EXP 38
3171: PUSH
3172: LD_INT 0
3174: ST_TO_ADDR
// sStu := false ;
3175: LD_ADDR_EXP 42
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// sBazooka := false ;
3183: LD_ADDR_EXP 45
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// sMortar := false ;
3191: LD_ADDR_EXP 46
3195: PUSH
3196: LD_INT 0
3198: ST_TO_ADDR
// sRanger := false ;
3199: LD_ADDR_EXP 56
3203: PUSH
3204: LD_INT 0
3206: ST_TO_ADDR
// sComputer := false ;
3207: LD_ADDR_EXP 57
3211: PUSH
3212: LD_INT 0
3214: ST_TO_ADDR
// s30 := false ;
3215: LD_ADDR_EXP 58
3219: PUSH
3220: LD_INT 0
3222: ST_TO_ADDR
// s60 := false ;
3223: LD_ADDR_EXP 59
3227: PUSH
3228: LD_INT 0
3230: ST_TO_ADDR
// end ;
3231: LD_VAR 0 1
3235: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3236: LD_INT 0
3238: PPUSH
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
3244: PPUSH
// result := [ ] ;
3245: LD_ADDR_VAR 0 2
3249: PUSH
3250: EMPTY
3251: ST_TO_ADDR
// if campaign_id = 1 then
3252: LD_OWVAR 69
3256: PUSH
3257: LD_INT 1
3259: EQUAL
3260: IFFALSE 6426
// begin case mission_number of 1 :
3262: LD_OWVAR 70
3266: PUSH
3267: LD_INT 1
3269: DOUBLE
3270: EQUAL
3271: IFTRUE 3275
3273: GO 3351
3275: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3276: LD_ADDR_VAR 0 2
3280: PUSH
3281: LD_INT 2
3283: PUSH
3284: LD_INT 4
3286: PUSH
3287: LD_INT 11
3289: PUSH
3290: LD_INT 12
3292: PUSH
3293: LD_INT 15
3295: PUSH
3296: LD_INT 16
3298: PUSH
3299: LD_INT 22
3301: PUSH
3302: LD_INT 23
3304: PUSH
3305: LD_INT 26
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: PUSH
3319: LD_INT 101
3321: PUSH
3322: LD_INT 102
3324: PUSH
3325: LD_INT 106
3327: PUSH
3328: LD_INT 116
3330: PUSH
3331: LD_INT 117
3333: PUSH
3334: LD_INT 118
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: ST_TO_ADDR
3349: GO 6424
3351: LD_INT 2
3353: DOUBLE
3354: EQUAL
3355: IFTRUE 3359
3357: GO 3443
3359: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3360: LD_ADDR_VAR 0 2
3364: PUSH
3365: LD_INT 2
3367: PUSH
3368: LD_INT 4
3370: PUSH
3371: LD_INT 11
3373: PUSH
3374: LD_INT 12
3376: PUSH
3377: LD_INT 15
3379: PUSH
3380: LD_INT 16
3382: PUSH
3383: LD_INT 22
3385: PUSH
3386: LD_INT 23
3388: PUSH
3389: LD_INT 26
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PUSH
3403: LD_INT 101
3405: PUSH
3406: LD_INT 102
3408: PUSH
3409: LD_INT 105
3411: PUSH
3412: LD_INT 106
3414: PUSH
3415: LD_INT 108
3417: PUSH
3418: LD_INT 116
3420: PUSH
3421: LD_INT 117
3423: PUSH
3424: LD_INT 118
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: ST_TO_ADDR
3441: GO 6424
3443: LD_INT 3
3445: DOUBLE
3446: EQUAL
3447: IFTRUE 3451
3449: GO 3539
3451: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: LD_INT 2
3459: PUSH
3460: LD_INT 4
3462: PUSH
3463: LD_INT 5
3465: PUSH
3466: LD_INT 11
3468: PUSH
3469: LD_INT 12
3471: PUSH
3472: LD_INT 15
3474: PUSH
3475: LD_INT 16
3477: PUSH
3478: LD_INT 22
3480: PUSH
3481: LD_INT 26
3483: PUSH
3484: LD_INT 36
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 101
3501: PUSH
3502: LD_INT 102
3504: PUSH
3505: LD_INT 105
3507: PUSH
3508: LD_INT 106
3510: PUSH
3511: LD_INT 108
3513: PUSH
3514: LD_INT 116
3516: PUSH
3517: LD_INT 117
3519: PUSH
3520: LD_INT 118
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: ST_TO_ADDR
3537: GO 6424
3539: LD_INT 4
3541: DOUBLE
3542: EQUAL
3543: IFTRUE 3547
3545: GO 3643
3547: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: LD_INT 2
3555: PUSH
3556: LD_INT 4
3558: PUSH
3559: LD_INT 5
3561: PUSH
3562: LD_INT 8
3564: PUSH
3565: LD_INT 11
3567: PUSH
3568: LD_INT 12
3570: PUSH
3571: LD_INT 15
3573: PUSH
3574: LD_INT 16
3576: PUSH
3577: LD_INT 22
3579: PUSH
3580: LD_INT 23
3582: PUSH
3583: LD_INT 26
3585: PUSH
3586: LD_INT 36
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 101
3605: PUSH
3606: LD_INT 102
3608: PUSH
3609: LD_INT 105
3611: PUSH
3612: LD_INT 106
3614: PUSH
3615: LD_INT 108
3617: PUSH
3618: LD_INT 116
3620: PUSH
3621: LD_INT 117
3623: PUSH
3624: LD_INT 118
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: ST_TO_ADDR
3641: GO 6424
3643: LD_INT 5
3645: DOUBLE
3646: EQUAL
3647: IFTRUE 3651
3649: GO 3763
3651: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: LD_INT 2
3659: PUSH
3660: LD_INT 4
3662: PUSH
3663: LD_INT 5
3665: PUSH
3666: LD_INT 6
3668: PUSH
3669: LD_INT 8
3671: PUSH
3672: LD_INT 11
3674: PUSH
3675: LD_INT 12
3677: PUSH
3678: LD_INT 15
3680: PUSH
3681: LD_INT 16
3683: PUSH
3684: LD_INT 22
3686: PUSH
3687: LD_INT 23
3689: PUSH
3690: LD_INT 25
3692: PUSH
3693: LD_INT 26
3695: PUSH
3696: LD_INT 36
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: PUSH
3715: LD_INT 101
3717: PUSH
3718: LD_INT 102
3720: PUSH
3721: LD_INT 105
3723: PUSH
3724: LD_INT 106
3726: PUSH
3727: LD_INT 108
3729: PUSH
3730: LD_INT 109
3732: PUSH
3733: LD_INT 112
3735: PUSH
3736: LD_INT 116
3738: PUSH
3739: LD_INT 117
3741: PUSH
3742: LD_INT 118
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: ST_TO_ADDR
3761: GO 6424
3763: LD_INT 6
3765: DOUBLE
3766: EQUAL
3767: IFTRUE 3771
3769: GO 3903
3771: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3772: LD_ADDR_VAR 0 2
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: LD_INT 4
3782: PUSH
3783: LD_INT 5
3785: PUSH
3786: LD_INT 6
3788: PUSH
3789: LD_INT 8
3791: PUSH
3792: LD_INT 11
3794: PUSH
3795: LD_INT 12
3797: PUSH
3798: LD_INT 15
3800: PUSH
3801: LD_INT 16
3803: PUSH
3804: LD_INT 20
3806: PUSH
3807: LD_INT 21
3809: PUSH
3810: LD_INT 22
3812: PUSH
3813: LD_INT 23
3815: PUSH
3816: LD_INT 25
3818: PUSH
3819: LD_INT 26
3821: PUSH
3822: LD_INT 30
3824: PUSH
3825: LD_INT 31
3827: PUSH
3828: LD_INT 32
3830: PUSH
3831: LD_INT 36
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 101
3857: PUSH
3858: LD_INT 102
3860: PUSH
3861: LD_INT 105
3863: PUSH
3864: LD_INT 106
3866: PUSH
3867: LD_INT 108
3869: PUSH
3870: LD_INT 109
3872: PUSH
3873: LD_INT 112
3875: PUSH
3876: LD_INT 116
3878: PUSH
3879: LD_INT 117
3881: PUSH
3882: LD_INT 118
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: ST_TO_ADDR
3901: GO 6424
3903: LD_INT 7
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 4023
3911: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3912: LD_ADDR_VAR 0 2
3916: PUSH
3917: LD_INT 2
3919: PUSH
3920: LD_INT 4
3922: PUSH
3923: LD_INT 5
3925: PUSH
3926: LD_INT 7
3928: PUSH
3929: LD_INT 11
3931: PUSH
3932: LD_INT 12
3934: PUSH
3935: LD_INT 15
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 20
3943: PUSH
3944: LD_INT 21
3946: PUSH
3947: LD_INT 22
3949: PUSH
3950: LD_INT 23
3952: PUSH
3953: LD_INT 25
3955: PUSH
3956: LD_INT 26
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: PUSH
3975: LD_INT 101
3977: PUSH
3978: LD_INT 102
3980: PUSH
3981: LD_INT 103
3983: PUSH
3984: LD_INT 105
3986: PUSH
3987: LD_INT 106
3989: PUSH
3990: LD_INT 108
3992: PUSH
3993: LD_INT 112
3995: PUSH
3996: LD_INT 116
3998: PUSH
3999: LD_INT 117
4001: PUSH
4002: LD_INT 118
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: ST_TO_ADDR
4021: GO 6424
4023: LD_INT 8
4025: DOUBLE
4026: EQUAL
4027: IFTRUE 4031
4029: GO 4171
4031: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_INT 2
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: LD_INT 5
4045: PUSH
4046: LD_INT 6
4048: PUSH
4049: LD_INT 7
4051: PUSH
4052: LD_INT 8
4054: PUSH
4055: LD_INT 11
4057: PUSH
4058: LD_INT 12
4060: PUSH
4061: LD_INT 15
4063: PUSH
4064: LD_INT 16
4066: PUSH
4067: LD_INT 20
4069: PUSH
4070: LD_INT 21
4072: PUSH
4073: LD_INT 22
4075: PUSH
4076: LD_INT 23
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 26
4084: PUSH
4085: LD_INT 30
4087: PUSH
4088: LD_INT 31
4090: PUSH
4091: LD_INT 32
4093: PUSH
4094: LD_INT 36
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: PUSH
4119: LD_INT 101
4121: PUSH
4122: LD_INT 102
4124: PUSH
4125: LD_INT 103
4127: PUSH
4128: LD_INT 105
4130: PUSH
4131: LD_INT 106
4133: PUSH
4134: LD_INT 108
4136: PUSH
4137: LD_INT 109
4139: PUSH
4140: LD_INT 112
4142: PUSH
4143: LD_INT 116
4145: PUSH
4146: LD_INT 117
4148: PUSH
4149: LD_INT 118
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: EMPTY
4166: LIST
4167: LIST
4168: ST_TO_ADDR
4169: GO 6424
4171: LD_INT 9
4173: DOUBLE
4174: EQUAL
4175: IFTRUE 4179
4177: GO 4327
4179: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4180: LD_ADDR_VAR 0 2
4184: PUSH
4185: LD_INT 2
4187: PUSH
4188: LD_INT 4
4190: PUSH
4191: LD_INT 5
4193: PUSH
4194: LD_INT 6
4196: PUSH
4197: LD_INT 7
4199: PUSH
4200: LD_INT 8
4202: PUSH
4203: LD_INT 11
4205: PUSH
4206: LD_INT 12
4208: PUSH
4209: LD_INT 15
4211: PUSH
4212: LD_INT 16
4214: PUSH
4215: LD_INT 20
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_INT 23
4226: PUSH
4227: LD_INT 25
4229: PUSH
4230: LD_INT 26
4232: PUSH
4233: LD_INT 28
4235: PUSH
4236: LD_INT 30
4238: PUSH
4239: LD_INT 31
4241: PUSH
4242: LD_INT 32
4244: PUSH
4245: LD_INT 36
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 101
4273: PUSH
4274: LD_INT 102
4276: PUSH
4277: LD_INT 103
4279: PUSH
4280: LD_INT 105
4282: PUSH
4283: LD_INT 106
4285: PUSH
4286: LD_INT 108
4288: PUSH
4289: LD_INT 109
4291: PUSH
4292: LD_INT 112
4294: PUSH
4295: LD_INT 114
4297: PUSH
4298: LD_INT 116
4300: PUSH
4301: LD_INT 117
4303: PUSH
4304: LD_INT 118
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: ST_TO_ADDR
4325: GO 6424
4327: LD_INT 10
4329: DOUBLE
4330: EQUAL
4331: IFTRUE 4335
4333: GO 4531
4335: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4336: LD_ADDR_VAR 0 2
4340: PUSH
4341: LD_INT 2
4343: PUSH
4344: LD_INT 4
4346: PUSH
4347: LD_INT 5
4349: PUSH
4350: LD_INT 6
4352: PUSH
4353: LD_INT 7
4355: PUSH
4356: LD_INT 8
4358: PUSH
4359: LD_INT 9
4361: PUSH
4362: LD_INT 10
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: LD_INT 13
4373: PUSH
4374: LD_INT 14
4376: PUSH
4377: LD_INT 15
4379: PUSH
4380: LD_INT 16
4382: PUSH
4383: LD_INT 17
4385: PUSH
4386: LD_INT 18
4388: PUSH
4389: LD_INT 19
4391: PUSH
4392: LD_INT 20
4394: PUSH
4395: LD_INT 21
4397: PUSH
4398: LD_INT 22
4400: PUSH
4401: LD_INT 23
4403: PUSH
4404: LD_INT 24
4406: PUSH
4407: LD_INT 25
4409: PUSH
4410: LD_INT 26
4412: PUSH
4413: LD_INT 28
4415: PUSH
4416: LD_INT 30
4418: PUSH
4419: LD_INT 31
4421: PUSH
4422: LD_INT 32
4424: PUSH
4425: LD_INT 36
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: PUSH
4459: LD_INT 101
4461: PUSH
4462: LD_INT 102
4464: PUSH
4465: LD_INT 103
4467: PUSH
4468: LD_INT 104
4470: PUSH
4471: LD_INT 105
4473: PUSH
4474: LD_INT 106
4476: PUSH
4477: LD_INT 107
4479: PUSH
4480: LD_INT 108
4482: PUSH
4483: LD_INT 109
4485: PUSH
4486: LD_INT 110
4488: PUSH
4489: LD_INT 111
4491: PUSH
4492: LD_INT 112
4494: PUSH
4495: LD_INT 114
4497: PUSH
4498: LD_INT 116
4500: PUSH
4501: LD_INT 117
4503: PUSH
4504: LD_INT 118
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: ST_TO_ADDR
4529: GO 6424
4531: LD_INT 11
4533: DOUBLE
4534: EQUAL
4535: IFTRUE 4539
4537: GO 4743
4539: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4540: LD_ADDR_VAR 0 2
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 3
4550: PUSH
4551: LD_INT 4
4553: PUSH
4554: LD_INT 5
4556: PUSH
4557: LD_INT 6
4559: PUSH
4560: LD_INT 7
4562: PUSH
4563: LD_INT 8
4565: PUSH
4566: LD_INT 9
4568: PUSH
4569: LD_INT 10
4571: PUSH
4572: LD_INT 11
4574: PUSH
4575: LD_INT 12
4577: PUSH
4578: LD_INT 13
4580: PUSH
4581: LD_INT 14
4583: PUSH
4584: LD_INT 15
4586: PUSH
4587: LD_INT 16
4589: PUSH
4590: LD_INT 17
4592: PUSH
4593: LD_INT 18
4595: PUSH
4596: LD_INT 19
4598: PUSH
4599: LD_INT 20
4601: PUSH
4602: LD_INT 21
4604: PUSH
4605: LD_INT 22
4607: PUSH
4608: LD_INT 23
4610: PUSH
4611: LD_INT 24
4613: PUSH
4614: LD_INT 25
4616: PUSH
4617: LD_INT 26
4619: PUSH
4620: LD_INT 28
4622: PUSH
4623: LD_INT 30
4625: PUSH
4626: LD_INT 31
4628: PUSH
4629: LD_INT 32
4631: PUSH
4632: LD_INT 34
4634: PUSH
4635: LD_INT 36
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 101
4673: PUSH
4674: LD_INT 102
4676: PUSH
4677: LD_INT 103
4679: PUSH
4680: LD_INT 104
4682: PUSH
4683: LD_INT 105
4685: PUSH
4686: LD_INT 106
4688: PUSH
4689: LD_INT 107
4691: PUSH
4692: LD_INT 108
4694: PUSH
4695: LD_INT 109
4697: PUSH
4698: LD_INT 110
4700: PUSH
4701: LD_INT 111
4703: PUSH
4704: LD_INT 112
4706: PUSH
4707: LD_INT 114
4709: PUSH
4710: LD_INT 116
4712: PUSH
4713: LD_INT 117
4715: PUSH
4716: LD_INT 118
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: ST_TO_ADDR
4741: GO 6424
4743: LD_INT 12
4745: DOUBLE
4746: EQUAL
4747: IFTRUE 4751
4749: GO 4971
4751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4752: LD_ADDR_VAR 0 2
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: LD_INT 2
4762: PUSH
4763: LD_INT 3
4765: PUSH
4766: LD_INT 4
4768: PUSH
4769: LD_INT 5
4771: PUSH
4772: LD_INT 6
4774: PUSH
4775: LD_INT 7
4777: PUSH
4778: LD_INT 8
4780: PUSH
4781: LD_INT 9
4783: PUSH
4784: LD_INT 10
4786: PUSH
4787: LD_INT 11
4789: PUSH
4790: LD_INT 12
4792: PUSH
4793: LD_INT 13
4795: PUSH
4796: LD_INT 14
4798: PUSH
4799: LD_INT 15
4801: PUSH
4802: LD_INT 16
4804: PUSH
4805: LD_INT 17
4807: PUSH
4808: LD_INT 18
4810: PUSH
4811: LD_INT 19
4813: PUSH
4814: LD_INT 20
4816: PUSH
4817: LD_INT 21
4819: PUSH
4820: LD_INT 22
4822: PUSH
4823: LD_INT 23
4825: PUSH
4826: LD_INT 24
4828: PUSH
4829: LD_INT 25
4831: PUSH
4832: LD_INT 26
4834: PUSH
4835: LD_INT 27
4837: PUSH
4838: LD_INT 28
4840: PUSH
4841: LD_INT 30
4843: PUSH
4844: LD_INT 31
4846: PUSH
4847: LD_INT 32
4849: PUSH
4850: LD_INT 33
4852: PUSH
4853: LD_INT 34
4855: PUSH
4856: LD_INT 36
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 101
4897: PUSH
4898: LD_INT 102
4900: PUSH
4901: LD_INT 103
4903: PUSH
4904: LD_INT 104
4906: PUSH
4907: LD_INT 105
4909: PUSH
4910: LD_INT 106
4912: PUSH
4913: LD_INT 107
4915: PUSH
4916: LD_INT 108
4918: PUSH
4919: LD_INT 109
4921: PUSH
4922: LD_INT 110
4924: PUSH
4925: LD_INT 111
4927: PUSH
4928: LD_INT 112
4930: PUSH
4931: LD_INT 113
4933: PUSH
4934: LD_INT 114
4936: PUSH
4937: LD_INT 116
4939: PUSH
4940: LD_INT 117
4942: PUSH
4943: LD_INT 118
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: ST_TO_ADDR
4969: GO 6424
4971: LD_INT 13
4973: DOUBLE
4974: EQUAL
4975: IFTRUE 4979
4977: GO 5187
4979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4980: LD_ADDR_VAR 0 2
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: LD_INT 2
4990: PUSH
4991: LD_INT 3
4993: PUSH
4994: LD_INT 4
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: LD_INT 8
5002: PUSH
5003: LD_INT 9
5005: PUSH
5006: LD_INT 10
5008: PUSH
5009: LD_INT 11
5011: PUSH
5012: LD_INT 12
5014: PUSH
5015: LD_INT 14
5017: PUSH
5018: LD_INT 15
5020: PUSH
5021: LD_INT 16
5023: PUSH
5024: LD_INT 17
5026: PUSH
5027: LD_INT 18
5029: PUSH
5030: LD_INT 19
5032: PUSH
5033: LD_INT 20
5035: PUSH
5036: LD_INT 21
5038: PUSH
5039: LD_INT 22
5041: PUSH
5042: LD_INT 23
5044: PUSH
5045: LD_INT 24
5047: PUSH
5048: LD_INT 25
5050: PUSH
5051: LD_INT 26
5053: PUSH
5054: LD_INT 27
5056: PUSH
5057: LD_INT 28
5059: PUSH
5060: LD_INT 30
5062: PUSH
5063: LD_INT 31
5065: PUSH
5066: LD_INT 32
5068: PUSH
5069: LD_INT 33
5071: PUSH
5072: LD_INT 34
5074: PUSH
5075: LD_INT 36
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 101
5113: PUSH
5114: LD_INT 102
5116: PUSH
5117: LD_INT 103
5119: PUSH
5120: LD_INT 104
5122: PUSH
5123: LD_INT 105
5125: PUSH
5126: LD_INT 106
5128: PUSH
5129: LD_INT 107
5131: PUSH
5132: LD_INT 108
5134: PUSH
5135: LD_INT 109
5137: PUSH
5138: LD_INT 110
5140: PUSH
5141: LD_INT 111
5143: PUSH
5144: LD_INT 112
5146: PUSH
5147: LD_INT 113
5149: PUSH
5150: LD_INT 114
5152: PUSH
5153: LD_INT 116
5155: PUSH
5156: LD_INT 117
5158: PUSH
5159: LD_INT 118
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: ST_TO_ADDR
5185: GO 6424
5187: LD_INT 14
5189: DOUBLE
5190: EQUAL
5191: IFTRUE 5195
5193: GO 5419
5195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5196: LD_ADDR_VAR 0 2
5200: PUSH
5201: LD_INT 1
5203: PUSH
5204: LD_INT 2
5206: PUSH
5207: LD_INT 3
5209: PUSH
5210: LD_INT 4
5212: PUSH
5213: LD_INT 5
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: LD_INT 7
5221: PUSH
5222: LD_INT 8
5224: PUSH
5225: LD_INT 9
5227: PUSH
5228: LD_INT 10
5230: PUSH
5231: LD_INT 11
5233: PUSH
5234: LD_INT 12
5236: PUSH
5237: LD_INT 13
5239: PUSH
5240: LD_INT 14
5242: PUSH
5243: LD_INT 15
5245: PUSH
5246: LD_INT 16
5248: PUSH
5249: LD_INT 17
5251: PUSH
5252: LD_INT 18
5254: PUSH
5255: LD_INT 19
5257: PUSH
5258: LD_INT 20
5260: PUSH
5261: LD_INT 21
5263: PUSH
5264: LD_INT 22
5266: PUSH
5267: LD_INT 23
5269: PUSH
5270: LD_INT 24
5272: PUSH
5273: LD_INT 25
5275: PUSH
5276: LD_INT 26
5278: PUSH
5279: LD_INT 27
5281: PUSH
5282: LD_INT 28
5284: PUSH
5285: LD_INT 29
5287: PUSH
5288: LD_INT 30
5290: PUSH
5291: LD_INT 31
5293: PUSH
5294: LD_INT 32
5296: PUSH
5297: LD_INT 33
5299: PUSH
5300: LD_INT 34
5302: PUSH
5303: LD_INT 36
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: LD_INT 101
5345: PUSH
5346: LD_INT 102
5348: PUSH
5349: LD_INT 103
5351: PUSH
5352: LD_INT 104
5354: PUSH
5355: LD_INT 105
5357: PUSH
5358: LD_INT 106
5360: PUSH
5361: LD_INT 107
5363: PUSH
5364: LD_INT 108
5366: PUSH
5367: LD_INT 109
5369: PUSH
5370: LD_INT 110
5372: PUSH
5373: LD_INT 111
5375: PUSH
5376: LD_INT 112
5378: PUSH
5379: LD_INT 113
5381: PUSH
5382: LD_INT 114
5384: PUSH
5385: LD_INT 116
5387: PUSH
5388: LD_INT 117
5390: PUSH
5391: LD_INT 118
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: ST_TO_ADDR
5417: GO 6424
5419: LD_INT 15
5421: DOUBLE
5422: EQUAL
5423: IFTRUE 5427
5425: GO 5651
5427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: LD_INT 1
5435: PUSH
5436: LD_INT 2
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: LD_INT 4
5444: PUSH
5445: LD_INT 5
5447: PUSH
5448: LD_INT 6
5450: PUSH
5451: LD_INT 7
5453: PUSH
5454: LD_INT 8
5456: PUSH
5457: LD_INT 9
5459: PUSH
5460: LD_INT 10
5462: PUSH
5463: LD_INT 11
5465: PUSH
5466: LD_INT 12
5468: PUSH
5469: LD_INT 13
5471: PUSH
5472: LD_INT 14
5474: PUSH
5475: LD_INT 15
5477: PUSH
5478: LD_INT 16
5480: PUSH
5481: LD_INT 17
5483: PUSH
5484: LD_INT 18
5486: PUSH
5487: LD_INT 19
5489: PUSH
5490: LD_INT 20
5492: PUSH
5493: LD_INT 21
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 23
5501: PUSH
5502: LD_INT 24
5504: PUSH
5505: LD_INT 25
5507: PUSH
5508: LD_INT 26
5510: PUSH
5511: LD_INT 27
5513: PUSH
5514: LD_INT 28
5516: PUSH
5517: LD_INT 29
5519: PUSH
5520: LD_INT 30
5522: PUSH
5523: LD_INT 31
5525: PUSH
5526: LD_INT 32
5528: PUSH
5529: LD_INT 33
5531: PUSH
5532: LD_INT 34
5534: PUSH
5535: LD_INT 36
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 101
5577: PUSH
5578: LD_INT 102
5580: PUSH
5581: LD_INT 103
5583: PUSH
5584: LD_INT 104
5586: PUSH
5587: LD_INT 105
5589: PUSH
5590: LD_INT 106
5592: PUSH
5593: LD_INT 107
5595: PUSH
5596: LD_INT 108
5598: PUSH
5599: LD_INT 109
5601: PUSH
5602: LD_INT 110
5604: PUSH
5605: LD_INT 111
5607: PUSH
5608: LD_INT 112
5610: PUSH
5611: LD_INT 113
5613: PUSH
5614: LD_INT 114
5616: PUSH
5617: LD_INT 116
5619: PUSH
5620: LD_INT 117
5622: PUSH
5623: LD_INT 118
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: ST_TO_ADDR
5649: GO 6424
5651: LD_INT 16
5653: DOUBLE
5654: EQUAL
5655: IFTRUE 5659
5657: GO 5795
5659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5660: LD_ADDR_VAR 0 2
5664: PUSH
5665: LD_INT 2
5667: PUSH
5668: LD_INT 4
5670: PUSH
5671: LD_INT 5
5673: PUSH
5674: LD_INT 7
5676: PUSH
5677: LD_INT 11
5679: PUSH
5680: LD_INT 12
5682: PUSH
5683: LD_INT 15
5685: PUSH
5686: LD_INT 16
5688: PUSH
5689: LD_INT 20
5691: PUSH
5692: LD_INT 21
5694: PUSH
5695: LD_INT 22
5697: PUSH
5698: LD_INT 23
5700: PUSH
5701: LD_INT 25
5703: PUSH
5704: LD_INT 26
5706: PUSH
5707: LD_INT 30
5709: PUSH
5710: LD_INT 31
5712: PUSH
5713: LD_INT 32
5715: PUSH
5716: LD_INT 33
5718: PUSH
5719: LD_INT 34
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 101
5745: PUSH
5746: LD_INT 102
5748: PUSH
5749: LD_INT 103
5751: PUSH
5752: LD_INT 106
5754: PUSH
5755: LD_INT 108
5757: PUSH
5758: LD_INT 112
5760: PUSH
5761: LD_INT 113
5763: PUSH
5764: LD_INT 114
5766: PUSH
5767: LD_INT 116
5769: PUSH
5770: LD_INT 117
5772: PUSH
5773: LD_INT 118
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: ST_TO_ADDR
5793: GO 6424
5795: LD_INT 17
5797: DOUBLE
5798: EQUAL
5799: IFTRUE 5803
5801: GO 6027
5803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5804: LD_ADDR_VAR 0 2
5808: PUSH
5809: LD_INT 1
5811: PUSH
5812: LD_INT 2
5814: PUSH
5815: LD_INT 3
5817: PUSH
5818: LD_INT 4
5820: PUSH
5821: LD_INT 5
5823: PUSH
5824: LD_INT 6
5826: PUSH
5827: LD_INT 7
5829: PUSH
5830: LD_INT 8
5832: PUSH
5833: LD_INT 9
5835: PUSH
5836: LD_INT 10
5838: PUSH
5839: LD_INT 11
5841: PUSH
5842: LD_INT 12
5844: PUSH
5845: LD_INT 13
5847: PUSH
5848: LD_INT 14
5850: PUSH
5851: LD_INT 15
5853: PUSH
5854: LD_INT 16
5856: PUSH
5857: LD_INT 17
5859: PUSH
5860: LD_INT 18
5862: PUSH
5863: LD_INT 19
5865: PUSH
5866: LD_INT 20
5868: PUSH
5869: LD_INT 21
5871: PUSH
5872: LD_INT 22
5874: PUSH
5875: LD_INT 23
5877: PUSH
5878: LD_INT 24
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 26
5886: PUSH
5887: LD_INT 27
5889: PUSH
5890: LD_INT 28
5892: PUSH
5893: LD_INT 29
5895: PUSH
5896: LD_INT 30
5898: PUSH
5899: LD_INT 31
5901: PUSH
5902: LD_INT 32
5904: PUSH
5905: LD_INT 33
5907: PUSH
5908: LD_INT 34
5910: PUSH
5911: LD_INT 36
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 101
5953: PUSH
5954: LD_INT 102
5956: PUSH
5957: LD_INT 103
5959: PUSH
5960: LD_INT 104
5962: PUSH
5963: LD_INT 105
5965: PUSH
5966: LD_INT 106
5968: PUSH
5969: LD_INT 107
5971: PUSH
5972: LD_INT 108
5974: PUSH
5975: LD_INT 109
5977: PUSH
5978: LD_INT 110
5980: PUSH
5981: LD_INT 111
5983: PUSH
5984: LD_INT 112
5986: PUSH
5987: LD_INT 113
5989: PUSH
5990: LD_INT 114
5992: PUSH
5993: LD_INT 116
5995: PUSH
5996: LD_INT 117
5998: PUSH
5999: LD_INT 118
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: ST_TO_ADDR
6025: GO 6424
6027: LD_INT 18
6029: DOUBLE
6030: EQUAL
6031: IFTRUE 6035
6033: GO 6183
6035: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_INT 2
6043: PUSH
6044: LD_INT 4
6046: PUSH
6047: LD_INT 5
6049: PUSH
6050: LD_INT 7
6052: PUSH
6053: LD_INT 11
6055: PUSH
6056: LD_INT 12
6058: PUSH
6059: LD_INT 15
6061: PUSH
6062: LD_INT 16
6064: PUSH
6065: LD_INT 20
6067: PUSH
6068: LD_INT 21
6070: PUSH
6071: LD_INT 22
6073: PUSH
6074: LD_INT 23
6076: PUSH
6077: LD_INT 25
6079: PUSH
6080: LD_INT 26
6082: PUSH
6083: LD_INT 30
6085: PUSH
6086: LD_INT 31
6088: PUSH
6089: LD_INT 32
6091: PUSH
6092: LD_INT 33
6094: PUSH
6095: LD_INT 34
6097: PUSH
6098: LD_INT 35
6100: PUSH
6101: LD_INT 36
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 101
6129: PUSH
6130: LD_INT 102
6132: PUSH
6133: LD_INT 103
6135: PUSH
6136: LD_INT 106
6138: PUSH
6139: LD_INT 108
6141: PUSH
6142: LD_INT 112
6144: PUSH
6145: LD_INT 113
6147: PUSH
6148: LD_INT 114
6150: PUSH
6151: LD_INT 115
6153: PUSH
6154: LD_INT 116
6156: PUSH
6157: LD_INT 117
6159: PUSH
6160: LD_INT 118
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: ST_TO_ADDR
6181: GO 6424
6183: LD_INT 19
6185: DOUBLE
6186: EQUAL
6187: IFTRUE 6191
6189: GO 6423
6191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6192: LD_ADDR_VAR 0 2
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: LD_INT 2
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: LD_INT 4
6208: PUSH
6209: LD_INT 5
6211: PUSH
6212: LD_INT 6
6214: PUSH
6215: LD_INT 7
6217: PUSH
6218: LD_INT 8
6220: PUSH
6221: LD_INT 9
6223: PUSH
6224: LD_INT 10
6226: PUSH
6227: LD_INT 11
6229: PUSH
6230: LD_INT 12
6232: PUSH
6233: LD_INT 13
6235: PUSH
6236: LD_INT 14
6238: PUSH
6239: LD_INT 15
6241: PUSH
6242: LD_INT 16
6244: PUSH
6245: LD_INT 17
6247: PUSH
6248: LD_INT 18
6250: PUSH
6251: LD_INT 19
6253: PUSH
6254: LD_INT 20
6256: PUSH
6257: LD_INT 21
6259: PUSH
6260: LD_INT 22
6262: PUSH
6263: LD_INT 23
6265: PUSH
6266: LD_INT 24
6268: PUSH
6269: LD_INT 25
6271: PUSH
6272: LD_INT 26
6274: PUSH
6275: LD_INT 27
6277: PUSH
6278: LD_INT 28
6280: PUSH
6281: LD_INT 29
6283: PUSH
6284: LD_INT 30
6286: PUSH
6287: LD_INT 31
6289: PUSH
6290: LD_INT 32
6292: PUSH
6293: LD_INT 33
6295: PUSH
6296: LD_INT 34
6298: PUSH
6299: LD_INT 35
6301: PUSH
6302: LD_INT 36
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: PUSH
6343: LD_INT 101
6345: PUSH
6346: LD_INT 102
6348: PUSH
6349: LD_INT 103
6351: PUSH
6352: LD_INT 104
6354: PUSH
6355: LD_INT 105
6357: PUSH
6358: LD_INT 106
6360: PUSH
6361: LD_INT 107
6363: PUSH
6364: LD_INT 108
6366: PUSH
6367: LD_INT 109
6369: PUSH
6370: LD_INT 110
6372: PUSH
6373: LD_INT 111
6375: PUSH
6376: LD_INT 112
6378: PUSH
6379: LD_INT 113
6381: PUSH
6382: LD_INT 114
6384: PUSH
6385: LD_INT 115
6387: PUSH
6388: LD_INT 116
6390: PUSH
6391: LD_INT 117
6393: PUSH
6394: LD_INT 118
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: ST_TO_ADDR
6421: GO 6424
6423: POP
// end else
6424: GO 6655
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: LD_INT 3
6439: PUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 5
6445: PUSH
6446: LD_INT 6
6448: PUSH
6449: LD_INT 7
6451: PUSH
6452: LD_INT 8
6454: PUSH
6455: LD_INT 9
6457: PUSH
6458: LD_INT 10
6460: PUSH
6461: LD_INT 11
6463: PUSH
6464: LD_INT 12
6466: PUSH
6467: LD_INT 13
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: LD_INT 15
6475: PUSH
6476: LD_INT 16
6478: PUSH
6479: LD_INT 17
6481: PUSH
6482: LD_INT 18
6484: PUSH
6485: LD_INT 19
6487: PUSH
6488: LD_INT 20
6490: PUSH
6491: LD_INT 21
6493: PUSH
6494: LD_INT 22
6496: PUSH
6497: LD_INT 23
6499: PUSH
6500: LD_INT 24
6502: PUSH
6503: LD_INT 25
6505: PUSH
6506: LD_INT 26
6508: PUSH
6509: LD_INT 27
6511: PUSH
6512: LD_INT 28
6514: PUSH
6515: LD_INT 29
6517: PUSH
6518: LD_INT 30
6520: PUSH
6521: LD_INT 31
6523: PUSH
6524: LD_INT 32
6526: PUSH
6527: LD_INT 33
6529: PUSH
6530: LD_INT 34
6532: PUSH
6533: LD_INT 35
6535: PUSH
6536: LD_INT 36
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 101
6579: PUSH
6580: LD_INT 102
6582: PUSH
6583: LD_INT 103
6585: PUSH
6586: LD_INT 104
6588: PUSH
6589: LD_INT 105
6591: PUSH
6592: LD_INT 106
6594: PUSH
6595: LD_INT 107
6597: PUSH
6598: LD_INT 108
6600: PUSH
6601: LD_INT 109
6603: PUSH
6604: LD_INT 110
6606: PUSH
6607: LD_INT 111
6609: PUSH
6610: LD_INT 112
6612: PUSH
6613: LD_INT 113
6615: PUSH
6616: LD_INT 114
6618: PUSH
6619: LD_INT 115
6621: PUSH
6622: LD_INT 116
6624: PUSH
6625: LD_INT 117
6627: PUSH
6628: LD_INT 118
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: ST_TO_ADDR
// if result then
6655: LD_VAR 0 2
6659: IFFALSE 7445
// begin normal :=  ;
6661: LD_ADDR_VAR 0 5
6665: PUSH
6666: LD_STRING 
6668: ST_TO_ADDR
// hardcore :=  ;
6669: LD_ADDR_VAR 0 6
6673: PUSH
6674: LD_STRING 
6676: ST_TO_ADDR
// active :=  ;
6677: LD_ADDR_VAR 0 7
6681: PUSH
6682: LD_STRING 
6684: ST_TO_ADDR
// for i = 1 to normalCounter do
6685: LD_ADDR_VAR 0 8
6689: PUSH
6690: DOUBLE
6691: LD_INT 1
6693: DEC
6694: ST_TO_ADDR
6695: LD_EXP 4
6699: PUSH
6700: FOR_TO
6701: IFFALSE 6802
// begin tmp := 0 ;
6703: LD_ADDR_VAR 0 3
6707: PUSH
6708: LD_STRING 0
6710: ST_TO_ADDR
// if result [ 1 ] then
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: ARRAY
6719: IFFALSE 6784
// if result [ 1 ] [ 1 ] = i then
6721: LD_VAR 0 2
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PUSH
6730: LD_INT 1
6732: ARRAY
6733: PUSH
6734: LD_VAR 0 8
6738: EQUAL
6739: IFFALSE 6784
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6741: LD_ADDR_VAR 0 2
6745: PUSH
6746: LD_VAR 0 2
6750: PPUSH
6751: LD_INT 1
6753: PPUSH
6754: LD_VAR 0 2
6758: PUSH
6759: LD_INT 1
6761: ARRAY
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: CALL_OW 3
6770: PPUSH
6771: CALL_OW 1
6775: ST_TO_ADDR
// tmp := 1 ;
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_STRING 1
6783: ST_TO_ADDR
// end ; normal := normal & tmp ;
6784: LD_ADDR_VAR 0 5
6788: PUSH
6789: LD_VAR 0 5
6793: PUSH
6794: LD_VAR 0 3
6798: STR
6799: ST_TO_ADDR
// end ;
6800: GO 6700
6802: POP
6803: POP
// for i = 1 to hardcoreCounter do
6804: LD_ADDR_VAR 0 8
6808: PUSH
6809: DOUBLE
6810: LD_INT 1
6812: DEC
6813: ST_TO_ADDR
6814: LD_EXP 5
6818: PUSH
6819: FOR_TO
6820: IFFALSE 6925
// begin tmp := 0 ;
6822: LD_ADDR_VAR 0 3
6826: PUSH
6827: LD_STRING 0
6829: ST_TO_ADDR
// if result [ 2 ] then
6830: LD_VAR 0 2
6834: PUSH
6835: LD_INT 2
6837: ARRAY
6838: IFFALSE 6907
// if result [ 2 ] [ 1 ] = 100 + i then
6840: LD_VAR 0 2
6844: PUSH
6845: LD_INT 2
6847: ARRAY
6848: PUSH
6849: LD_INT 1
6851: ARRAY
6852: PUSH
6853: LD_INT 100
6855: PUSH
6856: LD_VAR 0 8
6860: PLUS
6861: EQUAL
6862: IFFALSE 6907
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6864: LD_ADDR_VAR 0 2
6868: PUSH
6869: LD_VAR 0 2
6873: PPUSH
6874: LD_INT 2
6876: PPUSH
6877: LD_VAR 0 2
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: CALL_OW 3
6893: PPUSH
6894: CALL_OW 1
6898: ST_TO_ADDR
// tmp := 1 ;
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: LD_STRING 1
6906: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6907: LD_ADDR_VAR 0 6
6911: PUSH
6912: LD_VAR 0 6
6916: PUSH
6917: LD_VAR 0 3
6921: STR
6922: ST_TO_ADDR
// end ;
6923: GO 6819
6925: POP
6926: POP
// if isGameLoad then
6927: LD_VAR 0 1
6931: IFFALSE 7406
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: LD_EXP 8
6942: PUSH
6943: LD_EXP 7
6947: PUSH
6948: LD_EXP 9
6952: PUSH
6953: LD_EXP 6
6957: PUSH
6958: LD_EXP 10
6962: PUSH
6963: LD_EXP 11
6967: PUSH
6968: LD_EXP 12
6972: PUSH
6973: LD_EXP 13
6977: PUSH
6978: LD_EXP 14
6982: PUSH
6983: LD_EXP 15
6987: PUSH
6988: LD_EXP 16
6992: PUSH
6993: LD_EXP 17
6997: PUSH
6998: LD_EXP 18
7002: PUSH
7003: LD_EXP 19
7007: PUSH
7008: LD_EXP 27
7012: PUSH
7013: LD_EXP 28
7017: PUSH
7018: LD_EXP 29
7022: PUSH
7023: LD_EXP 30
7027: PUSH
7028: LD_EXP 32
7032: PUSH
7033: LD_EXP 33
7037: PUSH
7038: LD_EXP 34
7042: PUSH
7043: LD_EXP 37
7047: PUSH
7048: LD_EXP 39
7052: PUSH
7053: LD_EXP 40
7057: PUSH
7058: LD_EXP 41
7062: PUSH
7063: LD_EXP 43
7067: PUSH
7068: LD_EXP 44
7072: PUSH
7073: LD_EXP 47
7077: PUSH
7078: LD_EXP 48
7082: PUSH
7083: LD_EXP 49
7087: PUSH
7088: LD_EXP 50
7092: PUSH
7093: LD_EXP 51
7097: PUSH
7098: LD_EXP 52
7102: PUSH
7103: LD_EXP 53
7107: PUSH
7108: LD_EXP 54
7112: PUSH
7113: LD_EXP 55
7117: PUSH
7118: LD_EXP 20
7122: PUSH
7123: LD_EXP 21
7127: PUSH
7128: LD_EXP 24
7132: PUSH
7133: LD_EXP 25
7137: PUSH
7138: LD_EXP 26
7142: PUSH
7143: LD_EXP 22
7147: PUSH
7148: LD_EXP 23
7152: PUSH
7153: LD_EXP 31
7157: PUSH
7158: LD_EXP 35
7162: PUSH
7163: LD_EXP 36
7167: PUSH
7168: LD_EXP 38
7172: PUSH
7173: LD_EXP 42
7177: PUSH
7178: LD_EXP 45
7182: PUSH
7183: LD_EXP 46
7187: PUSH
7188: LD_EXP 56
7192: PUSH
7193: LD_EXP 57
7197: PUSH
7198: LD_EXP 58
7202: PUSH
7203: LD_EXP 59
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
// tmp :=  ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_STRING 
7271: ST_TO_ADDR
// for i = 1 to normalCounter do
7272: LD_ADDR_VAR 0 8
7276: PUSH
7277: DOUBLE
7278: LD_INT 1
7280: DEC
7281: ST_TO_ADDR
7282: LD_EXP 4
7286: PUSH
7287: FOR_TO
7288: IFFALSE 7324
// begin if flags [ i ] then
7290: LD_VAR 0 4
7294: PUSH
7295: LD_VAR 0 8
7299: ARRAY
7300: IFFALSE 7322
// tmp := tmp & i & ; ;
7302: LD_ADDR_VAR 0 3
7306: PUSH
7307: LD_VAR 0 3
7311: PUSH
7312: LD_VAR 0 8
7316: STR
7317: PUSH
7318: LD_STRING ;
7320: STR
7321: ST_TO_ADDR
// end ;
7322: GO 7287
7324: POP
7325: POP
// for i = 1 to hardcoreCounter do
7326: LD_ADDR_VAR 0 8
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_EXP 5
7340: PUSH
7341: FOR_TO
7342: IFFALSE 7388
// begin if flags [ normalCounter + i ] then
7344: LD_VAR 0 4
7348: PUSH
7349: LD_EXP 4
7353: PUSH
7354: LD_VAR 0 8
7358: PLUS
7359: ARRAY
7360: IFFALSE 7386
// tmp := tmp & ( 100 + i ) & ; ;
7362: LD_ADDR_VAR 0 3
7366: PUSH
7367: LD_VAR 0 3
7371: PUSH
7372: LD_INT 100
7374: PUSH
7375: LD_VAR 0 8
7379: PLUS
7380: STR
7381: PUSH
7382: LD_STRING ;
7384: STR
7385: ST_TO_ADDR
// end ;
7386: GO 7341
7388: POP
7389: POP
// if tmp then
7390: LD_VAR 0 3
7394: IFFALSE 7406
// active := tmp ;
7396: LD_ADDR_VAR 0 7
7400: PUSH
7401: LD_VAR 0 3
7405: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7406: LD_STRING getStreamItemsFromMission("
7408: PUSH
7409: LD_VAR 0 5
7413: STR
7414: PUSH
7415: LD_STRING ","
7417: STR
7418: PUSH
7419: LD_VAR 0 6
7423: STR
7424: PUSH
7425: LD_STRING ","
7427: STR
7428: PUSH
7429: LD_VAR 0 7
7433: STR
7434: PUSH
7435: LD_STRING ")
7437: STR
7438: PPUSH
7439: CALL_OW 559
// end else
7443: GO 7452
// ToLua ( getStreamItemsFromMission("","","") ) ;
7445: LD_STRING getStreamItemsFromMission("","","")
7447: PPUSH
7448: CALL_OW 559
// end ;
7452: LD_VAR 0 2
7456: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7457: LD_EXP 3
7461: IFFALSE 7469
7463: PUSH
7464: LD_EXP 8
7468: AND
7469: IFFALSE 7593
7471: GO 7473
7473: DISABLE
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
// begin enable ;
7478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7479: LD_ADDR_VAR 0 2
7483: PUSH
7484: LD_INT 22
7486: PUSH
7487: LD_OWVAR 2
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 34
7501: PUSH
7502: LD_INT 7
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 34
7511: PUSH
7512: LD_INT 45
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 34
7521: PUSH
7522: LD_INT 28
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 34
7531: PUSH
7532: LD_INT 47
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PPUSH
7550: CALL_OW 69
7554: ST_TO_ADDR
// if not tmp then
7555: LD_VAR 0 2
7559: NOT
7560: IFFALSE 7564
// exit ;
7562: GO 7593
// for i in tmp do
7564: LD_ADDR_VAR 0 1
7568: PUSH
7569: LD_VAR 0 2
7573: PUSH
7574: FOR_IN
7575: IFFALSE 7591
// begin SetLives ( i , 0 ) ;
7577: LD_VAR 0 1
7581: PPUSH
7582: LD_INT 0
7584: PPUSH
7585: CALL_OW 234
// end ;
7589: GO 7574
7591: POP
7592: POP
// end ;
7593: PPOPN 2
7595: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7596: LD_EXP 3
7600: IFFALSE 7608
7602: PUSH
7603: LD_EXP 9
7607: AND
7608: IFFALSE 7692
7610: GO 7612
7612: DISABLE
7613: LD_INT 0
7615: PPUSH
7616: PPUSH
// begin enable ;
7617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: LD_INT 22
7625: PUSH
7626: LD_OWVAR 2
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 32
7637: PUSH
7638: LD_INT 3
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: ST_TO_ADDR
// if not tmp then
7654: LD_VAR 0 2
7658: NOT
7659: IFFALSE 7663
// exit ;
7661: GO 7692
// for i in tmp do
7663: LD_ADDR_VAR 0 1
7667: PUSH
7668: LD_VAR 0 2
7672: PUSH
7673: FOR_IN
7674: IFFALSE 7690
// begin SetLives ( i , 0 ) ;
7676: LD_VAR 0 1
7680: PPUSH
7681: LD_INT 0
7683: PPUSH
7684: CALL_OW 234
// end ;
7688: GO 7673
7690: POP
7691: POP
// end ;
7692: PPOPN 2
7694: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7695: LD_EXP 3
7699: IFFALSE 7707
7701: PUSH
7702: LD_EXP 6
7706: AND
7707: IFFALSE 7800
7709: GO 7711
7711: DISABLE
7712: LD_INT 0
7714: PPUSH
// begin enable ;
7715: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7716: LD_ADDR_VAR 0 1
7720: PUSH
7721: LD_INT 22
7723: PUSH
7724: LD_OWVAR 2
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 2
7735: PUSH
7736: LD_INT 25
7738: PUSH
7739: LD_INT 5
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 25
7748: PUSH
7749: LD_INT 9
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 25
7758: PUSH
7759: LD_INT 8
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: PUSH
7781: FOR_IN
7782: IFFALSE 7798
// begin SetClass ( i , 1 ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: LD_INT 1
7791: PPUSH
7792: CALL_OW 336
// end ;
7796: GO 7781
7798: POP
7799: POP
// end ;
7800: PPOPN 1
7802: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7803: LD_EXP 3
7807: IFFALSE 7815
7809: PUSH
7810: LD_EXP 7
7814: AND
7815: IFFALSE 7827
7817: PUSH
7818: LD_OWVAR 65
7822: PUSH
7823: LD_INT 7
7825: LESS
7826: AND
7827: IFFALSE 7841
7829: GO 7831
7831: DISABLE
// begin enable ;
7832: ENABLE
// game_speed := 7 ;
7833: LD_ADDR_OWVAR 65
7837: PUSH
7838: LD_INT 7
7840: ST_TO_ADDR
// end ;
7841: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7842: LD_EXP 3
7846: IFFALSE 7854
7848: PUSH
7849: LD_EXP 10
7853: AND
7854: IFFALSE 8056
7856: GO 7858
7858: DISABLE
7859: LD_INT 0
7861: PPUSH
7862: PPUSH
7863: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7864: LD_ADDR_VAR 0 3
7868: PUSH
7869: LD_INT 81
7871: PUSH
7872: LD_OWVAR 2
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 21
7883: PUSH
7884: LD_INT 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PPUSH
7895: CALL_OW 69
7899: ST_TO_ADDR
// if not tmp then
7900: LD_VAR 0 3
7904: NOT
7905: IFFALSE 7909
// exit ;
7907: GO 8056
// if tmp > 5 then
7909: LD_VAR 0 3
7913: PUSH
7914: LD_INT 5
7916: GREATER
7917: IFFALSE 7929
// k := 5 else
7919: LD_ADDR_VAR 0 2
7923: PUSH
7924: LD_INT 5
7926: ST_TO_ADDR
7927: GO 7939
// k := tmp ;
7929: LD_ADDR_VAR 0 2
7933: PUSH
7934: LD_VAR 0 3
7938: ST_TO_ADDR
// for i := 1 to k do
7939: LD_ADDR_VAR 0 1
7943: PUSH
7944: DOUBLE
7945: LD_INT 1
7947: DEC
7948: ST_TO_ADDR
7949: LD_VAR 0 2
7953: PUSH
7954: FOR_TO
7955: IFFALSE 8054
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7957: LD_VAR 0 3
7961: PUSH
7962: LD_VAR 0 1
7966: ARRAY
7967: PPUSH
7968: LD_VAR 0 1
7972: PUSH
7973: LD_INT 4
7975: MOD
7976: PUSH
7977: LD_INT 1
7979: PLUS
7980: PPUSH
7981: CALL_OW 259
7985: PUSH
7986: LD_INT 10
7988: LESS
7989: IFFALSE 8052
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7991: LD_VAR 0 3
7995: PUSH
7996: LD_VAR 0 1
8000: ARRAY
8001: PPUSH
8002: LD_VAR 0 1
8006: PUSH
8007: LD_INT 4
8009: MOD
8010: PUSH
8011: LD_INT 1
8013: PLUS
8014: PPUSH
8015: LD_VAR 0 3
8019: PUSH
8020: LD_VAR 0 1
8024: ARRAY
8025: PPUSH
8026: LD_VAR 0 1
8030: PUSH
8031: LD_INT 4
8033: MOD
8034: PUSH
8035: LD_INT 1
8037: PLUS
8038: PPUSH
8039: CALL_OW 259
8043: PUSH
8044: LD_INT 1
8046: PLUS
8047: PPUSH
8048: CALL_OW 237
8052: GO 7954
8054: POP
8055: POP
// end ;
8056: PPOPN 3
8058: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8059: LD_EXP 3
8063: IFFALSE 8071
8065: PUSH
8066: LD_EXP 11
8070: AND
8071: IFFALSE 8091
8073: GO 8075
8075: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8076: LD_INT 4
8078: PPUSH
8079: LD_OWVAR 2
8083: PPUSH
8084: LD_INT 0
8086: PPUSH
8087: CALL_OW 324
8091: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8092: LD_EXP 3
8096: IFFALSE 8104
8098: PUSH
8099: LD_EXP 40
8103: AND
8104: IFFALSE 8124
8106: GO 8108
8108: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8109: LD_INT 19
8111: PPUSH
8112: LD_OWVAR 2
8116: PPUSH
8117: LD_INT 0
8119: PPUSH
8120: CALL_OW 324
8124: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8125: LD_EXP 3
8129: IFFALSE 8137
8131: PUSH
8132: LD_EXP 12
8136: AND
8137: IFFALSE 8239
8139: GO 8141
8141: DISABLE
8142: LD_INT 0
8144: PPUSH
8145: PPUSH
// begin enable ;
8146: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8147: LD_ADDR_VAR 0 2
8151: PUSH
8152: LD_INT 22
8154: PUSH
8155: LD_OWVAR 2
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: LD_INT 34
8169: PUSH
8170: LD_INT 11
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 34
8179: PUSH
8180: LD_INT 30
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PPUSH
8196: CALL_OW 69
8200: ST_TO_ADDR
// if not tmp then
8201: LD_VAR 0 2
8205: NOT
8206: IFFALSE 8210
// exit ;
8208: GO 8239
// for i in tmp do
8210: LD_ADDR_VAR 0 1
8214: PUSH
8215: LD_VAR 0 2
8219: PUSH
8220: FOR_IN
8221: IFFALSE 8237
// begin SetLives ( i , 0 ) ;
8223: LD_VAR 0 1
8227: PPUSH
8228: LD_INT 0
8230: PPUSH
8231: CALL_OW 234
// end ;
8235: GO 8220
8237: POP
8238: POP
// end ;
8239: PPOPN 2
8241: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8242: LD_EXP 3
8246: IFFALSE 8254
8248: PUSH
8249: LD_EXP 13
8253: AND
8254: IFFALSE 8274
8256: GO 8258
8258: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8259: LD_INT 32
8261: PPUSH
8262: LD_OWVAR 2
8266: PPUSH
8267: LD_INT 0
8269: PPUSH
8270: CALL_OW 324
8274: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8275: LD_EXP 3
8279: IFFALSE 8287
8281: PUSH
8282: LD_EXP 14
8286: AND
8287: IFFALSE 8470
8289: GO 8291
8291: DISABLE
8292: LD_INT 0
8294: PPUSH
8295: PPUSH
8296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8297: LD_ADDR_VAR 0 2
8301: PUSH
8302: LD_INT 22
8304: PUSH
8305: LD_OWVAR 2
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 33
8316: PUSH
8317: LD_INT 3
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 69
8332: ST_TO_ADDR
// if not tmp then
8333: LD_VAR 0 2
8337: NOT
8338: IFFALSE 8342
// exit ;
8340: GO 8470
// side := 0 ;
8342: LD_ADDR_VAR 0 3
8346: PUSH
8347: LD_INT 0
8349: ST_TO_ADDR
// for i := 1 to 8 do
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: DOUBLE
8356: LD_INT 1
8358: DEC
8359: ST_TO_ADDR
8360: LD_INT 8
8362: PUSH
8363: FOR_TO
8364: IFFALSE 8414
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8366: LD_OWVAR 2
8370: PUSH
8371: LD_VAR 0 1
8375: NONEQUAL
8376: IFFALSE 8398
8378: PUSH
8379: LD_OWVAR 2
8383: PPUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 81
8393: PUSH
8394: LD_INT 2
8396: EQUAL
8397: AND
8398: IFFALSE 8412
// begin side := i ;
8400: LD_ADDR_VAR 0 3
8404: PUSH
8405: LD_VAR 0 1
8409: ST_TO_ADDR
// break ;
8410: GO 8414
// end ;
8412: GO 8363
8414: POP
8415: POP
// if not side then
8416: LD_VAR 0 3
8420: NOT
8421: IFFALSE 8425
// exit ;
8423: GO 8470
// for i := 1 to tmp do
8425: LD_ADDR_VAR 0 1
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_VAR 0 2
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8468
// if Prob ( 60 ) then
8443: LD_INT 60
8445: PPUSH
8446: CALL_OW 13
8450: IFFALSE 8466
// SetSide ( i , side ) ;
8452: LD_VAR 0 1
8456: PPUSH
8457: LD_VAR 0 3
8461: PPUSH
8462: CALL_OW 235
8466: GO 8440
8468: POP
8469: POP
// end ;
8470: PPOPN 3
8472: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8473: LD_EXP 3
8477: IFFALSE 8485
8479: PUSH
8480: LD_EXP 16
8484: AND
8485: IFFALSE 8604
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8493: LD_ADDR_VAR 0 1
8497: PUSH
8498: LD_INT 22
8500: PUSH
8501: LD_OWVAR 2
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 3
8522: PUSH
8523: LD_INT 23
8525: PUSH
8526: LD_INT 0
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: PPUSH
8542: CALL_OW 69
8546: PUSH
8547: FOR_IN
8548: IFFALSE 8602
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8550: LD_VAR 0 1
8554: PPUSH
8555: CALL_OW 257
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 4
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: IN
8578: IFFALSE 8600
// SetClass ( un , rand ( 1 , 4 ) ) ;
8580: LD_VAR 0 1
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_INT 4
8590: PPUSH
8591: CALL_OW 12
8595: PPUSH
8596: CALL_OW 336
8600: GO 8547
8602: POP
8603: POP
// end ;
8604: PPOPN 1
8606: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8607: LD_EXP 3
8611: IFFALSE 8619
8613: PUSH
8614: LD_EXP 15
8618: AND
8619: IFFALSE 8698
8621: GO 8623
8623: DISABLE
8624: LD_INT 0
8626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8627: LD_ADDR_VAR 0 1
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_OWVAR 2
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 21
8646: PUSH
8647: LD_INT 3
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PPUSH
8658: CALL_OW 69
8662: ST_TO_ADDR
// if not tmp then
8663: LD_VAR 0 1
8667: NOT
8668: IFFALSE 8672
// exit ;
8670: GO 8698
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8672: LD_VAR 0 1
8676: PUSH
8677: LD_INT 1
8679: PPUSH
8680: LD_VAR 0 1
8684: PPUSH
8685: CALL_OW 12
8689: ARRAY
8690: PPUSH
8691: LD_INT 100
8693: PPUSH
8694: CALL_OW 234
// end ;
8698: PPOPN 1
8700: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8701: LD_EXP 3
8705: IFFALSE 8713
8707: PUSH
8708: LD_EXP 17
8712: AND
8713: IFFALSE 8811
8715: GO 8717
8717: DISABLE
8718: LD_INT 0
8720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8721: LD_ADDR_VAR 0 1
8725: PUSH
8726: LD_INT 22
8728: PUSH
8729: LD_OWVAR 2
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: LD_INT 21
8740: PUSH
8741: LD_INT 1
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: ST_TO_ADDR
// if not tmp then
8757: LD_VAR 0 1
8761: NOT
8762: IFFALSE 8766
// exit ;
8764: GO 8811
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8766: LD_VAR 0 1
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 1
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 4
8790: PPUSH
8791: CALL_OW 12
8795: PPUSH
8796: LD_INT 3000
8798: PPUSH
8799: LD_INT 9000
8801: PPUSH
8802: CALL_OW 12
8806: PPUSH
8807: CALL_OW 492
// end ;
8811: PPOPN 1
8813: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8814: LD_EXP 3
8818: IFFALSE 8826
8820: PUSH
8821: LD_EXP 18
8825: AND
8826: IFFALSE 8846
8828: GO 8830
8830: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8831: LD_INT 1
8833: PPUSH
8834: LD_OWVAR 2
8838: PPUSH
8839: LD_INT 0
8841: PPUSH
8842: CALL_OW 324
8846: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8847: LD_EXP 3
8851: IFFALSE 8859
8853: PUSH
8854: LD_EXP 19
8858: AND
8859: IFFALSE 8942
8861: GO 8863
8863: DISABLE
8864: LD_INT 0
8866: PPUSH
8867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_OWVAR 2
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 21
8887: PUSH
8888: LD_INT 3
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 69
8903: ST_TO_ADDR
// if not tmp then
8904: LD_VAR 0 2
8908: NOT
8909: IFFALSE 8913
// exit ;
8911: GO 8942
// for i in tmp do
8913: LD_ADDR_VAR 0 1
8917: PUSH
8918: LD_VAR 0 2
8922: PUSH
8923: FOR_IN
8924: IFFALSE 8940
// SetBLevel ( i , 10 ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_INT 10
8933: PPUSH
8934: CALL_OW 241
8938: GO 8923
8940: POP
8941: POP
// end ;
8942: PPOPN 2
8944: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8945: LD_EXP 3
8949: IFFALSE 8957
8951: PUSH
8952: LD_EXP 20
8956: AND
8957: IFFALSE 9068
8959: GO 8961
8961: DISABLE
8962: LD_INT 0
8964: PPUSH
8965: PPUSH
8966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8967: LD_ADDR_VAR 0 3
8971: PUSH
8972: LD_INT 22
8974: PUSH
8975: LD_OWVAR 2
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: LD_INT 25
8986: PUSH
8987: LD_INT 1
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 69
9002: ST_TO_ADDR
// if not tmp then
9003: LD_VAR 0 3
9007: NOT
9008: IFFALSE 9012
// exit ;
9010: GO 9068
// un := tmp [ rand ( 1 , tmp ) ] ;
9012: LD_ADDR_VAR 0 2
9016: PUSH
9017: LD_VAR 0 3
9021: PUSH
9022: LD_INT 1
9024: PPUSH
9025: LD_VAR 0 3
9029: PPUSH
9030: CALL_OW 12
9034: ARRAY
9035: ST_TO_ADDR
// if Crawls ( un ) then
9036: LD_VAR 0 2
9040: PPUSH
9041: CALL_OW 318
9045: IFFALSE 9056
// ComWalk ( un ) ;
9047: LD_VAR 0 2
9051: PPUSH
9052: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9056: LD_VAR 0 2
9060: PPUSH
9061: LD_INT 5
9063: PPUSH
9064: CALL_OW 336
// end ;
9068: PPOPN 3
9070: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9071: LD_EXP 3
9075: IFFALSE 9083
9077: PUSH
9078: LD_EXP 21
9082: AND
9083: IFFALSE 9095
9085: PUSH
9086: LD_OWVAR 67
9090: PUSH
9091: LD_INT 4
9093: LESS
9094: AND
9095: IFFALSE 9114
9097: GO 9099
9099: DISABLE
// begin Difficulty := Difficulty + 1 ;
9100: LD_ADDR_OWVAR 67
9104: PUSH
9105: LD_OWVAR 67
9109: PUSH
9110: LD_INT 1
9112: PLUS
9113: ST_TO_ADDR
// end ;
9114: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9115: LD_EXP 3
9119: IFFALSE 9127
9121: PUSH
9122: LD_EXP 22
9126: AND
9127: IFFALSE 9230
9129: GO 9131
9131: DISABLE
9132: LD_INT 0
9134: PPUSH
// begin for i := 1 to 5 do
9135: LD_ADDR_VAR 0 1
9139: PUSH
9140: DOUBLE
9141: LD_INT 1
9143: DEC
9144: ST_TO_ADDR
9145: LD_INT 5
9147: PUSH
9148: FOR_TO
9149: IFFALSE 9228
// begin uc_nation := nation_nature ;
9151: LD_ADDR_OWVAR 21
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// uc_side := 0 ;
9159: LD_ADDR_OWVAR 20
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9167: LD_ADDR_OWVAR 29
9171: PUSH
9172: LD_INT 12
9174: PUSH
9175: LD_INT 12
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: ST_TO_ADDR
// hc_agressivity := 20 ;
9182: LD_ADDR_OWVAR 35
9186: PUSH
9187: LD_INT 20
9189: ST_TO_ADDR
// hc_class := class_tiger ;
9190: LD_ADDR_OWVAR 28
9194: PUSH
9195: LD_INT 14
9197: ST_TO_ADDR
// hc_gallery :=  ;
9198: LD_ADDR_OWVAR 33
9202: PUSH
9203: LD_STRING 
9205: ST_TO_ADDR
// hc_name :=  ;
9206: LD_ADDR_OWVAR 26
9210: PUSH
9211: LD_STRING 
9213: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9214: CALL_OW 44
9218: PPUSH
9219: LD_INT 0
9221: PPUSH
9222: CALL_OW 51
// end ;
9226: GO 9148
9228: POP
9229: POP
// end ;
9230: PPOPN 1
9232: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9233: LD_EXP 3
9237: IFFALSE 9245
9239: PUSH
9240: LD_EXP 23
9244: AND
9245: IFFALSE 9254
9247: GO 9249
9249: DISABLE
// StreamSibBomb ;
9250: CALL 9255 0 0
9254: END
// export function StreamSibBomb ; var i , x , y ; begin
9255: LD_INT 0
9257: PPUSH
9258: PPUSH
9259: PPUSH
9260: PPUSH
// result := false ;
9261: LD_ADDR_VAR 0 1
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// for i := 1 to 16 do
9269: LD_ADDR_VAR 0 2
9273: PUSH
9274: DOUBLE
9275: LD_INT 1
9277: DEC
9278: ST_TO_ADDR
9279: LD_INT 16
9281: PUSH
9282: FOR_TO
9283: IFFALSE 9482
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9285: LD_ADDR_VAR 0 3
9289: PUSH
9290: LD_INT 10
9292: PUSH
9293: LD_INT 20
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 40
9301: PUSH
9302: LD_INT 50
9304: PUSH
9305: LD_INT 60
9307: PUSH
9308: LD_INT 70
9310: PUSH
9311: LD_INT 80
9313: PUSH
9314: LD_INT 90
9316: PUSH
9317: LD_INT 100
9319: PUSH
9320: LD_INT 110
9322: PUSH
9323: LD_INT 120
9325: PUSH
9326: LD_INT 130
9328: PUSH
9329: LD_INT 140
9331: PUSH
9332: LD_INT 150
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 1
9354: PPUSH
9355: LD_INT 15
9357: PPUSH
9358: CALL_OW 12
9362: ARRAY
9363: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9364: LD_ADDR_VAR 0 4
9368: PUSH
9369: LD_INT 10
9371: PUSH
9372: LD_INT 20
9374: PUSH
9375: LD_INT 30
9377: PUSH
9378: LD_INT 40
9380: PUSH
9381: LD_INT 50
9383: PUSH
9384: LD_INT 60
9386: PUSH
9387: LD_INT 70
9389: PUSH
9390: LD_INT 80
9392: PUSH
9393: LD_INT 90
9395: PUSH
9396: LD_INT 100
9398: PUSH
9399: LD_INT 110
9401: PUSH
9402: LD_INT 120
9404: PUSH
9405: LD_INT 130
9407: PUSH
9408: LD_INT 140
9410: PUSH
9411: LD_INT 150
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_INT 15
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// if ValidHex ( x , y ) then
9443: LD_VAR 0 3
9447: PPUSH
9448: LD_VAR 0 4
9452: PPUSH
9453: CALL_OW 488
9457: IFFALSE 9480
// begin result := [ x , y ] ;
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_VAR 0 3
9468: PUSH
9469: LD_VAR 0 4
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: ST_TO_ADDR
// break ;
9478: GO 9482
// end ; end ;
9480: GO 9282
9482: POP
9483: POP
// if result then
9484: LD_VAR 0 1
9488: IFFALSE 9548
// begin ToLua ( playSibBomb() ) ;
9490: LD_STRING playSibBomb()
9492: PPUSH
9493: CALL_OW 559
// wait ( 0 0$14 ) ;
9497: LD_INT 490
9499: PPUSH
9500: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9504: LD_VAR 0 1
9508: PUSH
9509: LD_INT 1
9511: ARRAY
9512: PPUSH
9513: LD_VAR 0 1
9517: PUSH
9518: LD_INT 2
9520: ARRAY
9521: PPUSH
9522: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9526: LD_VAR 0 1
9530: PUSH
9531: LD_INT 1
9533: ARRAY
9534: PPUSH
9535: LD_VAR 0 1
9539: PUSH
9540: LD_INT 2
9542: ARRAY
9543: PPUSH
9544: CALL_OW 429
// end ; end ;
9548: LD_VAR 0 1
9552: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9553: LD_EXP 3
9557: IFFALSE 9565
9559: PUSH
9560: LD_EXP 25
9564: AND
9565: IFFALSE 9577
9567: GO 9569
9569: DISABLE
// YouLost (  ) ;
9570: LD_STRING 
9572: PPUSH
9573: CALL_OW 104
9577: END
// every 0 0$1 trigger StreamModeActive and sFog do
9578: LD_EXP 3
9582: IFFALSE 9590
9584: PUSH
9585: LD_EXP 24
9589: AND
9590: IFFALSE 9604
9592: GO 9594
9594: DISABLE
// FogOff ( your_side ) ;
9595: LD_OWVAR 2
9599: PPUSH
9600: CALL_OW 344
9604: END
// every 0 0$1 trigger StreamModeActive and sSun do
9605: LD_EXP 3
9609: IFFALSE 9617
9611: PUSH
9612: LD_EXP 26
9616: AND
9617: IFFALSE 9645
9619: GO 9621
9621: DISABLE
// begin solar_recharge_percent := 0 ;
9622: LD_ADDR_OWVAR 79
9626: PUSH
9627: LD_INT 0
9629: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9630: LD_INT 10500
9632: PPUSH
9633: CALL_OW 67
// solar_recharge_percent := 100 ;
9637: LD_ADDR_OWVAR 79
9641: PUSH
9642: LD_INT 100
9644: ST_TO_ADDR
// end ;
9645: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9646: LD_EXP 3
9650: IFFALSE 9658
9652: PUSH
9653: LD_EXP 27
9657: AND
9658: IFFALSE 9897
9660: GO 9662
9662: DISABLE
9663: LD_INT 0
9665: PPUSH
9666: PPUSH
9667: PPUSH
// begin tmp := [ ] ;
9668: LD_ADDR_VAR 0 3
9672: PUSH
9673: EMPTY
9674: ST_TO_ADDR
// for i := 1 to 6 do
9675: LD_ADDR_VAR 0 1
9679: PUSH
9680: DOUBLE
9681: LD_INT 1
9683: DEC
9684: ST_TO_ADDR
9685: LD_INT 6
9687: PUSH
9688: FOR_TO
9689: IFFALSE 9794
// begin uc_nation := nation_nature ;
9691: LD_ADDR_OWVAR 21
9695: PUSH
9696: LD_INT 0
9698: ST_TO_ADDR
// uc_side := 0 ;
9699: LD_ADDR_OWVAR 20
9703: PUSH
9704: LD_INT 0
9706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9707: LD_ADDR_OWVAR 29
9711: PUSH
9712: LD_INT 12
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: ST_TO_ADDR
// hc_agressivity := 20 ;
9722: LD_ADDR_OWVAR 35
9726: PUSH
9727: LD_INT 20
9729: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9730: LD_ADDR_OWVAR 28
9734: PUSH
9735: LD_INT 17
9737: ST_TO_ADDR
// hc_gallery :=  ;
9738: LD_ADDR_OWVAR 33
9742: PUSH
9743: LD_STRING 
9745: ST_TO_ADDR
// hc_name :=  ;
9746: LD_ADDR_OWVAR 26
9750: PUSH
9751: LD_STRING 
9753: ST_TO_ADDR
// un := CreateHuman ;
9754: LD_ADDR_VAR 0 2
9758: PUSH
9759: CALL_OW 44
9763: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9764: LD_VAR 0 2
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: CALL_OW 51
// tmp := tmp ^ un ;
9776: LD_ADDR_VAR 0 3
9780: PUSH
9781: LD_VAR 0 3
9785: PUSH
9786: LD_VAR 0 2
9790: ADD
9791: ST_TO_ADDR
// end ;
9792: GO 9688
9794: POP
9795: POP
// repeat wait ( 0 0$1 ) ;
9796: LD_INT 35
9798: PPUSH
9799: CALL_OW 67
// for un in tmp do
9803: LD_ADDR_VAR 0 2
9807: PUSH
9808: LD_VAR 0 3
9812: PUSH
9813: FOR_IN
9814: IFFALSE 9888
// begin if IsDead ( un ) then
9816: LD_VAR 0 2
9820: PPUSH
9821: CALL_OW 301
9825: IFFALSE 9845
// begin tmp := tmp diff un ;
9827: LD_ADDR_VAR 0 3
9831: PUSH
9832: LD_VAR 0 3
9836: PUSH
9837: LD_VAR 0 2
9841: DIFF
9842: ST_TO_ADDR
// continue ;
9843: GO 9813
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9845: LD_VAR 0 2
9849: PPUSH
9850: LD_INT 3
9852: PUSH
9853: LD_INT 22
9855: PUSH
9856: LD_INT 0
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 69
9871: PPUSH
9872: LD_VAR 0 2
9876: PPUSH
9877: CALL_OW 74
9881: PPUSH
9882: CALL_OW 115
// end ;
9886: GO 9813
9888: POP
9889: POP
// until not tmp ;
9890: LD_VAR 0 3
9894: NOT
9895: IFFALSE 9796
// end ;
9897: PPOPN 3
9899: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9900: LD_EXP 3
9904: IFFALSE 9912
9906: PUSH
9907: LD_EXP 28
9911: AND
9912: IFFALSE 9966
9914: GO 9916
9916: DISABLE
// begin ToLua ( displayTroll(); ) ;
9917: LD_STRING displayTroll();
9919: PPUSH
9920: CALL_OW 559
// wait ( 3 3$00 ) ;
9924: LD_INT 6300
9926: PPUSH
9927: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9931: LD_STRING hideTroll();
9933: PPUSH
9934: CALL_OW 559
// wait ( 1 1$00 ) ;
9938: LD_INT 2100
9940: PPUSH
9941: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9945: LD_STRING displayTroll();
9947: PPUSH
9948: CALL_OW 559
// wait ( 1 1$00 ) ;
9952: LD_INT 2100
9954: PPUSH
9955: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9959: LD_STRING hideTroll();
9961: PPUSH
9962: CALL_OW 559
// end ;
9966: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9967: LD_EXP 3
9971: IFFALSE 9979
9973: PUSH
9974: LD_EXP 29
9978: AND
9979: IFFALSE 10042
9981: GO 9983
9983: DISABLE
9984: LD_INT 0
9986: PPUSH
// begin p := 0 ;
9987: LD_ADDR_VAR 0 1
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// repeat game_speed := 1 ;
9995: LD_ADDR_OWVAR 65
9999: PUSH
10000: LD_INT 1
10002: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10003: LD_INT 35
10005: PPUSH
10006: CALL_OW 67
// p := p + 1 ;
10010: LD_ADDR_VAR 0 1
10014: PUSH
10015: LD_VAR 0 1
10019: PUSH
10020: LD_INT 1
10022: PLUS
10023: ST_TO_ADDR
// until p >= 60 ;
10024: LD_VAR 0 1
10028: PUSH
10029: LD_INT 60
10031: GREATEREQUAL
10032: IFFALSE 9995
// game_speed := 4 ;
10034: LD_ADDR_OWVAR 65
10038: PUSH
10039: LD_INT 4
10041: ST_TO_ADDR
// end ;
10042: PPOPN 1
10044: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10045: LD_EXP 3
10049: IFFALSE 10057
10051: PUSH
10052: LD_EXP 30
10056: AND
10057: IFFALSE 10203
10059: GO 10061
10061: DISABLE
10062: LD_INT 0
10064: PPUSH
10065: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10066: LD_ADDR_VAR 0 1
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_OWVAR 2
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 0
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PPUSH
10115: CALL_OW 69
10119: ST_TO_ADDR
// if not depot then
10120: LD_VAR 0 1
10124: NOT
10125: IFFALSE 10129
// exit ;
10127: GO 10203
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10129: LD_ADDR_VAR 0 2
10133: PUSH
10134: LD_VAR 0 1
10138: PUSH
10139: LD_INT 1
10141: PPUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 12
10151: ARRAY
10152: PPUSH
10153: CALL_OW 274
10157: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10158: LD_VAR 0 2
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: LD_INT 0
10168: PPUSH
10169: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10173: LD_VAR 0 2
10177: PPUSH
10178: LD_INT 2
10180: PPUSH
10181: LD_INT 0
10183: PPUSH
10184: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10188: LD_VAR 0 2
10192: PPUSH
10193: LD_INT 3
10195: PPUSH
10196: LD_INT 0
10198: PPUSH
10199: CALL_OW 277
// end ;
10203: PPOPN 2
10205: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10206: LD_EXP 3
10210: IFFALSE 10218
10212: PUSH
10213: LD_EXP 31
10217: AND
10218: IFFALSE 10315
10220: GO 10222
10222: DISABLE
10223: LD_INT 0
10225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10226: LD_ADDR_VAR 0 1
10230: PUSH
10231: LD_INT 22
10233: PUSH
10234: LD_OWVAR 2
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 21
10245: PUSH
10246: LD_INT 1
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 3
10255: PUSH
10256: LD_INT 23
10258: PUSH
10259: LD_INT 0
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: ST_TO_ADDR
// if not tmp then
10280: LD_VAR 0 1
10284: NOT
10285: IFFALSE 10289
// exit ;
10287: GO 10315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10289: LD_VAR 0 1
10293: PUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 12
10306: ARRAY
10307: PPUSH
10308: LD_INT 200
10310: PPUSH
10311: CALL_OW 234
// end ;
10315: PPOPN 1
10317: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10318: LD_EXP 3
10322: IFFALSE 10330
10324: PUSH
10325: LD_EXP 32
10329: AND
10330: IFFALSE 10409
10332: GO 10334
10334: DISABLE
10335: LD_INT 0
10337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_OWVAR 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 2
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PPUSH
10369: CALL_OW 69
10373: ST_TO_ADDR
// if not tmp then
10374: LD_VAR 0 1
10378: NOT
10379: IFFALSE 10383
// exit ;
10381: GO 10409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10383: LD_VAR 0 1
10387: PUSH
10388: LD_INT 1
10390: PPUSH
10391: LD_VAR 0 1
10395: PPUSH
10396: CALL_OW 12
10400: ARRAY
10401: PPUSH
10402: LD_INT 60
10404: PPUSH
10405: CALL_OW 234
// end ;
10409: PPOPN 1
10411: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10412: LD_EXP 3
10416: IFFALSE 10424
10418: PUSH
10419: LD_EXP 33
10423: AND
10424: IFFALSE 10523
10426: GO 10428
10428: DISABLE
10429: LD_INT 0
10431: PPUSH
10432: PPUSH
// begin enable ;
10433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10434: LD_ADDR_VAR 0 1
10438: PUSH
10439: LD_INT 22
10441: PUSH
10442: LD_OWVAR 2
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 61
10453: PUSH
10454: EMPTY
10455: LIST
10456: PUSH
10457: LD_INT 33
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 69
10476: ST_TO_ADDR
// if not tmp then
10477: LD_VAR 0 1
10481: NOT
10482: IFFALSE 10486
// exit ;
10484: GO 10523
// for i in tmp do
10486: LD_ADDR_VAR 0 2
10490: PUSH
10491: LD_VAR 0 1
10495: PUSH
10496: FOR_IN
10497: IFFALSE 10521
// if IsControledBy ( i ) then
10499: LD_VAR 0 2
10503: PPUSH
10504: CALL_OW 312
10508: IFFALSE 10519
// ComUnlink ( i ) ;
10510: LD_VAR 0 2
10514: PPUSH
10515: CALL_OW 136
10519: GO 10496
10521: POP
10522: POP
// end ;
10523: PPOPN 2
10525: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10526: LD_EXP 3
10530: IFFALSE 10538
10532: PUSH
10533: LD_EXP 34
10537: AND
10538: IFFALSE 10678
10540: GO 10542
10542: DISABLE
10543: LD_INT 0
10545: PPUSH
10546: PPUSH
// begin ToLua ( displayPowell(); ) ;
10547: LD_STRING displayPowell();
10549: PPUSH
10550: CALL_OW 559
// uc_side := 0 ;
10554: LD_ADDR_OWVAR 20
10558: PUSH
10559: LD_INT 0
10561: ST_TO_ADDR
// uc_nation := 2 ;
10562: LD_ADDR_OWVAR 21
10566: PUSH
10567: LD_INT 2
10569: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10570: LD_ADDR_OWVAR 37
10574: PUSH
10575: LD_INT 14
10577: ST_TO_ADDR
// vc_engine := engine_siberite ;
10578: LD_ADDR_OWVAR 39
10582: PUSH
10583: LD_INT 3
10585: ST_TO_ADDR
// vc_control := control_apeman ;
10586: LD_ADDR_OWVAR 38
10590: PUSH
10591: LD_INT 5
10593: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10594: LD_ADDR_OWVAR 40
10598: PUSH
10599: LD_INT 29
10601: ST_TO_ADDR
// un := CreateVehicle ;
10602: LD_ADDR_VAR 0 2
10606: PUSH
10607: CALL_OW 45
10611: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10612: LD_VAR 0 2
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10624: LD_INT 35
10626: PPUSH
10627: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10631: LD_VAR 0 2
10635: PPUSH
10636: LD_INT 22
10638: PUSH
10639: LD_OWVAR 2
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 69
10652: PPUSH
10653: LD_VAR 0 2
10657: PPUSH
10658: CALL_OW 74
10662: PPUSH
10663: CALL_OW 115
// until IsDead ( un ) ;
10667: LD_VAR 0 2
10671: PPUSH
10672: CALL_OW 301
10676: IFFALSE 10624
// end ;
10678: PPOPN 2
10680: END
// every 0 0$1 trigger StreamModeActive and sStu do
10681: LD_EXP 3
10685: IFFALSE 10693
10687: PUSH
10688: LD_EXP 42
10692: AND
10693: IFFALSE 10709
10695: GO 10697
10697: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10698: LD_STRING displayStucuk();
10700: PPUSH
10701: CALL_OW 559
// ResetFog ;
10705: CALL_OW 335
// end ;
10709: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10710: LD_EXP 3
10714: IFFALSE 10722
10716: PUSH
10717: LD_EXP 35
10721: AND
10722: IFFALSE 10863
10724: GO 10726
10726: DISABLE
10727: LD_INT 0
10729: PPUSH
10730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10731: LD_ADDR_VAR 0 2
10735: PUSH
10736: LD_INT 22
10738: PUSH
10739: LD_OWVAR 2
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 21
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 69
10766: ST_TO_ADDR
// if not tmp then
10767: LD_VAR 0 2
10771: NOT
10772: IFFALSE 10776
// exit ;
10774: GO 10863
// un := tmp [ rand ( 1 , tmp ) ] ;
10776: LD_ADDR_VAR 0 1
10780: PUSH
10781: LD_VAR 0 2
10785: PUSH
10786: LD_INT 1
10788: PPUSH
10789: LD_VAR 0 2
10793: PPUSH
10794: CALL_OW 12
10798: ARRAY
10799: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10800: LD_VAR 0 1
10804: PPUSH
10805: LD_INT 0
10807: PPUSH
10808: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: LD_OWVAR 3
10821: PUSH
10822: LD_VAR 0 1
10826: DIFF
10827: PPUSH
10828: LD_VAR 0 1
10832: PPUSH
10833: CALL_OW 74
10837: PPUSH
10838: CALL_OW 115
// wait ( 0 0$20 ) ;
10842: LD_INT 700
10844: PPUSH
10845: CALL_OW 67
// SetSide ( un , your_side ) ;
10849: LD_VAR 0 1
10853: PPUSH
10854: LD_OWVAR 2
10858: PPUSH
10859: CALL_OW 235
// end ;
10863: PPOPN 2
10865: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10866: LD_EXP 3
10870: IFFALSE 10878
10872: PUSH
10873: LD_EXP 36
10877: AND
10878: IFFALSE 10984
10880: GO 10882
10882: DISABLE
10883: LD_INT 0
10885: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10886: LD_ADDR_VAR 0 1
10890: PUSH
10891: LD_INT 22
10893: PUSH
10894: LD_OWVAR 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 2
10905: PUSH
10906: LD_INT 30
10908: PUSH
10909: LD_INT 0
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 30
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 69
10939: ST_TO_ADDR
// if not depot then
10940: LD_VAR 0 1
10944: NOT
10945: IFFALSE 10949
// exit ;
10947: GO 10984
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10949: LD_VAR 0 1
10953: PUSH
10954: LD_INT 1
10956: ARRAY
10957: PPUSH
10958: CALL_OW 250
10962: PPUSH
10963: LD_VAR 0 1
10967: PUSH
10968: LD_INT 1
10970: ARRAY
10971: PPUSH
10972: CALL_OW 251
10976: PPUSH
10977: LD_INT 70
10979: PPUSH
10980: CALL_OW 495
// end ;
10984: PPOPN 1
10986: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10987: LD_EXP 3
10991: IFFALSE 10999
10993: PUSH
10994: LD_EXP 37
10998: AND
10999: IFFALSE 11210
11001: GO 11003
11003: DISABLE
11004: LD_INT 0
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11011: LD_ADDR_VAR 0 5
11015: PUSH
11016: LD_INT 22
11018: PUSH
11019: LD_OWVAR 2
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 21
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 69
11046: ST_TO_ADDR
// if not tmp then
11047: LD_VAR 0 5
11051: NOT
11052: IFFALSE 11056
// exit ;
11054: GO 11210
// for i in tmp do
11056: LD_ADDR_VAR 0 1
11060: PUSH
11061: LD_VAR 0 5
11065: PUSH
11066: FOR_IN
11067: IFFALSE 11208
// begin d := rand ( 0 , 5 ) ;
11069: LD_ADDR_VAR 0 4
11073: PUSH
11074: LD_INT 0
11076: PPUSH
11077: LD_INT 5
11079: PPUSH
11080: CALL_OW 12
11084: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11085: LD_ADDR_VAR 0 2
11089: PUSH
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 250
11099: PPUSH
11100: LD_VAR 0 4
11104: PPUSH
11105: LD_INT 3
11107: PPUSH
11108: LD_INT 12
11110: PPUSH
11111: CALL_OW 12
11115: PPUSH
11116: CALL_OW 272
11120: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11121: LD_ADDR_VAR 0 3
11125: PUSH
11126: LD_VAR 0 1
11130: PPUSH
11131: CALL_OW 251
11135: PPUSH
11136: LD_VAR 0 4
11140: PPUSH
11141: LD_INT 3
11143: PPUSH
11144: LD_INT 12
11146: PPUSH
11147: CALL_OW 12
11151: PPUSH
11152: CALL_OW 273
11156: ST_TO_ADDR
// if ValidHex ( x , y ) then
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_VAR 0 3
11166: PPUSH
11167: CALL_OW 488
11171: IFFALSE 11206
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11173: LD_VAR 0 1
11177: PPUSH
11178: LD_VAR 0 2
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 3
11190: PPUSH
11191: LD_INT 6
11193: PPUSH
11194: CALL_OW 12
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 483
// end ;
11206: GO 11066
11208: POP
11209: POP
// end ;
11210: PPOPN 5
11212: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11213: LD_EXP 3
11217: IFFALSE 11225
11219: PUSH
11220: LD_EXP 38
11224: AND
11225: IFFALSE 11319
11227: GO 11229
11229: DISABLE
11230: LD_INT 0
11232: PPUSH
11233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11234: LD_ADDR_VAR 0 2
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_OWVAR 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 32
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 21
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: ST_TO_ADDR
// if not tmp then
11281: LD_VAR 0 2
11285: NOT
11286: IFFALSE 11290
// exit ;
11288: GO 11319
// for i in tmp do
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: LD_VAR 0 2
11299: PUSH
11300: FOR_IN
11301: IFFALSE 11317
// SetFuel ( i , 0 ) ;
11303: LD_VAR 0 1
11307: PPUSH
11308: LD_INT 0
11310: PPUSH
11311: CALL_OW 240
11315: GO 11300
11317: POP
11318: POP
// end ;
11319: PPOPN 2
11321: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11322: LD_EXP 3
11326: IFFALSE 11334
11328: PUSH
11329: LD_EXP 39
11333: AND
11334: IFFALSE 11400
11336: GO 11338
11338: DISABLE
11339: LD_INT 0
11341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11342: LD_ADDR_VAR 0 1
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_OWVAR 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 30
11361: PUSH
11362: LD_INT 29
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PPUSH
11373: CALL_OW 69
11377: ST_TO_ADDR
// if not tmp then
11378: LD_VAR 0 1
11382: NOT
11383: IFFALSE 11387
// exit ;
11385: GO 11400
// DestroyUnit ( tmp [ 1 ] ) ;
11387: LD_VAR 0 1
11391: PUSH
11392: LD_INT 1
11394: ARRAY
11395: PPUSH
11396: CALL_OW 65
// end ;
11400: PPOPN 1
11402: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11403: LD_EXP 3
11407: IFFALSE 11415
11409: PUSH
11410: LD_EXP 41
11414: AND
11415: IFFALSE 11544
11417: GO 11419
11419: DISABLE
11420: LD_INT 0
11422: PPUSH
// begin uc_side := 0 ;
11423: LD_ADDR_OWVAR 20
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// uc_nation := nation_arabian ;
11431: LD_ADDR_OWVAR 21
11435: PUSH
11436: LD_INT 2
11438: ST_TO_ADDR
// hc_gallery :=  ;
11439: LD_ADDR_OWVAR 33
11443: PUSH
11444: LD_STRING 
11446: ST_TO_ADDR
// hc_name :=  ;
11447: LD_ADDR_OWVAR 26
11451: PUSH
11452: LD_STRING 
11454: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11455: LD_INT 1
11457: PPUSH
11458: LD_INT 11
11460: PPUSH
11461: LD_INT 10
11463: PPUSH
11464: CALL_OW 380
// un := CreateHuman ;
11468: LD_ADDR_VAR 0 1
11472: PUSH
11473: CALL_OW 44
11477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11478: LD_VAR 0 1
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11490: LD_INT 35
11492: PPUSH
11493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_INT 22
11504: PUSH
11505: LD_OWVAR 2
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PPUSH
11514: CALL_OW 69
11518: PPUSH
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 74
11528: PPUSH
11529: CALL_OW 115
// until IsDead ( un ) ;
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 301
11542: IFFALSE 11490
// end ;
11544: PPOPN 1
11546: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11547: LD_EXP 3
11551: IFFALSE 11559
11553: PUSH
11554: LD_EXP 43
11558: AND
11559: IFFALSE 11571
11561: GO 11563
11563: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11564: LD_STRING earthquake(getX(game), 0, 32)
11566: PPUSH
11567: CALL_OW 559
11571: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11572: LD_EXP 3
11576: IFFALSE 11584
11578: PUSH
11579: LD_EXP 44
11583: AND
11584: IFFALSE 11675
11586: GO 11588
11588: DISABLE
11589: LD_INT 0
11591: PPUSH
// begin enable ;
11592: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11593: LD_ADDR_VAR 0 1
11597: PUSH
11598: LD_INT 22
11600: PUSH
11601: LD_OWVAR 2
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 33
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: PPUSH
11635: CALL_OW 69
11639: ST_TO_ADDR
// if not tmp then
11640: LD_VAR 0 1
11644: NOT
11645: IFFALSE 11649
// exit ;
11647: GO 11675
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11649: LD_VAR 0 1
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_VAR 0 1
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 234
// end ;
11675: PPOPN 1
11677: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11678: LD_EXP 3
11682: IFFALSE 11690
11684: PUSH
11685: LD_EXP 45
11689: AND
11690: IFFALSE 11831
11692: GO 11694
11694: DISABLE
11695: LD_INT 0
11697: PPUSH
11698: PPUSH
11699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_INT 22
11707: PUSH
11708: LD_OWVAR 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 25
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PPUSH
11731: CALL_OW 69
11735: ST_TO_ADDR
// if not tmp then
11736: LD_VAR 0 3
11740: NOT
11741: IFFALSE 11745
// exit ;
11743: GO 11831
// un := tmp [ rand ( 1 , tmp ) ] ;
11745: LD_ADDR_VAR 0 2
11749: PUSH
11750: LD_VAR 0 3
11754: PUSH
11755: LD_INT 1
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: CALL_OW 12
11767: ARRAY
11768: ST_TO_ADDR
// if Crawls ( un ) then
11769: LD_VAR 0 2
11773: PPUSH
11774: CALL_OW 318
11778: IFFALSE 11789
// ComWalk ( un ) ;
11780: LD_VAR 0 2
11784: PPUSH
11785: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11789: LD_VAR 0 2
11793: PPUSH
11794: LD_INT 9
11796: PPUSH
11797: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11801: LD_INT 28
11803: PPUSH
11804: LD_OWVAR 2
11808: PPUSH
11809: LD_INT 2
11811: PPUSH
11812: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11816: LD_INT 29
11818: PPUSH
11819: LD_OWVAR 2
11823: PPUSH
11824: LD_INT 2
11826: PPUSH
11827: CALL_OW 322
// end ;
11831: PPOPN 3
11833: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11834: LD_EXP 3
11838: IFFALSE 11846
11840: PUSH
11841: LD_EXP 46
11845: AND
11846: IFFALSE 11957
11848: GO 11850
11850: DISABLE
11851: LD_INT 0
11853: PPUSH
11854: PPUSH
11855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11856: LD_ADDR_VAR 0 3
11860: PUSH
11861: LD_INT 22
11863: PUSH
11864: LD_OWVAR 2
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 25
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: ST_TO_ADDR
// if not tmp then
11892: LD_VAR 0 3
11896: NOT
11897: IFFALSE 11901
// exit ;
11899: GO 11957
// un := tmp [ rand ( 1 , tmp ) ] ;
11901: LD_ADDR_VAR 0 2
11905: PUSH
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 1
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: CALL_OW 12
11923: ARRAY
11924: ST_TO_ADDR
// if Crawls ( un ) then
11925: LD_VAR 0 2
11929: PPUSH
11930: CALL_OW 318
11934: IFFALSE 11945
// ComWalk ( un ) ;
11936: LD_VAR 0 2
11940: PPUSH
11941: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11945: LD_VAR 0 2
11949: PPUSH
11950: LD_INT 8
11952: PPUSH
11953: CALL_OW 336
// end ;
11957: PPOPN 3
11959: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11960: LD_EXP 3
11964: IFFALSE 11972
11966: PUSH
11967: LD_EXP 47
11971: AND
11972: IFFALSE 12116
11974: GO 11976
11976: DISABLE
11977: LD_INT 0
11979: PPUSH
11980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11981: LD_ADDR_VAR 0 2
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_OWVAR 2
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 21
12000: PUSH
12001: LD_INT 2
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 2
12010: PUSH
12011: LD_INT 34
12013: PUSH
12014: LD_INT 12
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 34
12023: PUSH
12024: LD_INT 51
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 34
12033: PUSH
12034: LD_INT 32
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: ST_TO_ADDR
// if not tmp then
12057: LD_VAR 0 2
12061: NOT
12062: IFFALSE 12066
// exit ;
12064: GO 12116
// for i in tmp do
12066: LD_ADDR_VAR 0 1
12070: PUSH
12071: LD_VAR 0 2
12075: PUSH
12076: FOR_IN
12077: IFFALSE 12114
// if GetCargo ( i , mat_artifact ) = 0 then
12079: LD_VAR 0 1
12083: PPUSH
12084: LD_INT 4
12086: PPUSH
12087: CALL_OW 289
12091: PUSH
12092: LD_INT 0
12094: EQUAL
12095: IFFALSE 12112
// SetCargo ( i , mat_siberit , 100 ) ;
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_INT 3
12104: PPUSH
12105: LD_INT 100
12107: PPUSH
12108: CALL_OW 290
12112: GO 12076
12114: POP
12115: POP
// end ;
12116: PPOPN 2
12118: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12119: LD_EXP 3
12123: IFFALSE 12131
12125: PUSH
12126: LD_EXP 48
12130: AND
12131: IFFALSE 12314
12133: GO 12135
12135: DISABLE
12136: LD_INT 0
12138: PPUSH
12139: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12140: LD_ADDR_VAR 0 2
12144: PUSH
12145: LD_INT 22
12147: PUSH
12148: LD_OWVAR 2
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: ST_TO_ADDR
// if not tmp then
12162: LD_VAR 0 2
12166: NOT
12167: IFFALSE 12171
// exit ;
12169: GO 12314
// for i := 1 to 2 do
12171: LD_ADDR_VAR 0 1
12175: PUSH
12176: DOUBLE
12177: LD_INT 1
12179: DEC
12180: ST_TO_ADDR
12181: LD_INT 2
12183: PUSH
12184: FOR_TO
12185: IFFALSE 12312
// begin uc_side := your_side ;
12187: LD_ADDR_OWVAR 20
12191: PUSH
12192: LD_OWVAR 2
12196: ST_TO_ADDR
// uc_nation := nation_american ;
12197: LD_ADDR_OWVAR 21
12201: PUSH
12202: LD_INT 1
12204: ST_TO_ADDR
// vc_chassis := us_morphling ;
12205: LD_ADDR_OWVAR 37
12209: PUSH
12210: LD_INT 5
12212: ST_TO_ADDR
// vc_engine := engine_siberite ;
12213: LD_ADDR_OWVAR 39
12217: PUSH
12218: LD_INT 3
12220: ST_TO_ADDR
// vc_control := control_computer ;
12221: LD_ADDR_OWVAR 38
12225: PUSH
12226: LD_INT 3
12228: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12229: LD_ADDR_OWVAR 40
12233: PUSH
12234: LD_INT 10
12236: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12237: LD_VAR 0 2
12241: PUSH
12242: LD_INT 1
12244: ARRAY
12245: PPUSH
12246: CALL_OW 310
12250: NOT
12251: IFFALSE 12298
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12253: CALL_OW 45
12257: PPUSH
12258: LD_VAR 0 2
12262: PUSH
12263: LD_INT 1
12265: ARRAY
12266: PPUSH
12267: CALL_OW 250
12271: PPUSH
12272: LD_VAR 0 2
12276: PUSH
12277: LD_INT 1
12279: ARRAY
12280: PPUSH
12281: CALL_OW 251
12285: PPUSH
12286: LD_INT 12
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 50
12296: GO 12310
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12298: CALL_OW 45
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 51
// end ;
12310: GO 12184
12312: POP
12313: POP
// end ;
12314: PPOPN 2
12316: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12317: LD_EXP 3
12321: IFFALSE 12329
12323: PUSH
12324: LD_EXP 49
12328: AND
12329: IFFALSE 12551
12331: GO 12333
12333: DISABLE
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12342: LD_ADDR_VAR 0 6
12346: PUSH
12347: LD_INT 22
12349: PUSH
12350: LD_OWVAR 2
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 21
12361: PUSH
12362: LD_INT 1
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 3
12371: PUSH
12372: LD_INT 23
12374: PUSH
12375: LD_INT 0
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 69
12395: ST_TO_ADDR
// if not tmp then
12396: LD_VAR 0 6
12400: NOT
12401: IFFALSE 12405
// exit ;
12403: GO 12551
// s1 := rand ( 1 , 4 ) ;
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_INT 1
12412: PPUSH
12413: LD_INT 4
12415: PPUSH
12416: CALL_OW 12
12420: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12421: LD_ADDR_VAR 0 4
12425: PUSH
12426: LD_VAR 0 6
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: PPUSH
12435: LD_VAR 0 2
12439: PPUSH
12440: CALL_OW 259
12444: ST_TO_ADDR
// if s1 = 1 then
12445: LD_VAR 0 2
12449: PUSH
12450: LD_INT 1
12452: EQUAL
12453: IFFALSE 12473
// s2 := rand ( 2 , 4 ) else
12455: LD_ADDR_VAR 0 3
12459: PUSH
12460: LD_INT 2
12462: PPUSH
12463: LD_INT 4
12465: PPUSH
12466: CALL_OW 12
12470: ST_TO_ADDR
12471: GO 12481
// s2 := 1 ;
12473: LD_ADDR_VAR 0 3
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12481: LD_ADDR_VAR 0 5
12485: PUSH
12486: LD_VAR 0 6
12490: PUSH
12491: LD_INT 1
12493: ARRAY
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: CALL_OW 259
12504: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12505: LD_VAR 0 6
12509: PUSH
12510: LD_INT 1
12512: ARRAY
12513: PPUSH
12514: LD_VAR 0 2
12518: PPUSH
12519: LD_VAR 0 5
12523: PPUSH
12524: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12528: LD_VAR 0 6
12532: PUSH
12533: LD_INT 1
12535: ARRAY
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_VAR 0 4
12546: PPUSH
12547: CALL_OW 237
// end ;
12551: PPOPN 6
12553: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12554: LD_EXP 3
12558: IFFALSE 12566
12560: PUSH
12561: LD_EXP 50
12565: AND
12566: IFFALSE 12645
12568: GO 12570
12570: DISABLE
12571: LD_INT 0
12573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12574: LD_ADDR_VAR 0 1
12578: PUSH
12579: LD_INT 22
12581: PUSH
12582: LD_OWVAR 2
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// if not tmp then
12610: LD_VAR 0 1
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12645
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12619: LD_VAR 0 1
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 1
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: CALL_OW 234
// end ;
12645: PPOPN 1
12647: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12648: LD_EXP 3
12652: IFFALSE 12660
12654: PUSH
12655: LD_EXP 51
12659: AND
12660: IFFALSE 12772
12662: GO 12664
12664: DISABLE
12665: LD_INT 0
12667: PPUSH
12668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12669: LD_ADDR_VAR 0 2
12673: PUSH
12674: LD_INT 22
12676: PUSH
12677: LD_OWVAR 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: LD_INT 30
12691: PUSH
12692: LD_INT 27
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 30
12701: PUSH
12702: LD_INT 26
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 30
12711: PUSH
12712: LD_INT 28
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PPUSH
12729: CALL_OW 69
12733: ST_TO_ADDR
// if not tmp then
12734: LD_VAR 0 2
12738: NOT
12739: IFFALSE 12743
// exit ;
12741: GO 12772
// for i in tmp do
12743: LD_ADDR_VAR 0 1
12747: PUSH
12748: LD_VAR 0 2
12752: PUSH
12753: FOR_IN
12754: IFFALSE 12770
// SetLives ( i , 1 ) ;
12756: LD_VAR 0 1
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 234
12768: GO 12753
12770: POP
12771: POP
// end ;
12772: PPOPN 2
12774: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12775: LD_EXP 3
12779: IFFALSE 12787
12781: PUSH
12782: LD_EXP 52
12786: AND
12787: IFFALSE 13074
12789: GO 12791
12791: DISABLE
12792: LD_INT 0
12794: PPUSH
12795: PPUSH
12796: PPUSH
// begin i := rand ( 1 , 7 ) ;
12797: LD_ADDR_VAR 0 1
12801: PUSH
12802: LD_INT 1
12804: PPUSH
12805: LD_INT 7
12807: PPUSH
12808: CALL_OW 12
12812: ST_TO_ADDR
// case i of 1 :
12813: LD_VAR 0 1
12817: PUSH
12818: LD_INT 1
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12826
12824: GO 12836
12826: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12827: LD_STRING earthquake(getX(game), 0, 32)
12829: PPUSH
12830: CALL_OW 559
12834: GO 13074
12836: LD_INT 2
12838: DOUBLE
12839: EQUAL
12840: IFTRUE 12844
12842: GO 12858
12844: POP
// begin ToLua ( displayStucuk(); ) ;
12845: LD_STRING displayStucuk();
12847: PPUSH
12848: CALL_OW 559
// ResetFog ;
12852: CALL_OW 335
// end ; 3 :
12856: GO 13074
12858: LD_INT 3
12860: DOUBLE
12861: EQUAL
12862: IFTRUE 12866
12864: GO 12970
12866: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: LD_INT 22
12874: PUSH
12875: LD_OWVAR 2
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 25
12886: PUSH
12887: LD_INT 1
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: ST_TO_ADDR
// if not tmp then
12903: LD_VAR 0 2
12907: NOT
12908: IFFALSE 12912
// exit ;
12910: GO 13074
// un := tmp [ rand ( 1 , tmp ) ] ;
12912: LD_ADDR_VAR 0 3
12916: PUSH
12917: LD_VAR 0 2
12921: PUSH
12922: LD_INT 1
12924: PPUSH
12925: LD_VAR 0 2
12929: PPUSH
12930: CALL_OW 12
12934: ARRAY
12935: ST_TO_ADDR
// if Crawls ( un ) then
12936: LD_VAR 0 3
12940: PPUSH
12941: CALL_OW 318
12945: IFFALSE 12956
// ComWalk ( un ) ;
12947: LD_VAR 0 3
12951: PPUSH
12952: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_INT 8
12963: PPUSH
12964: CALL_OW 336
// end ; 4 :
12968: GO 13074
12970: LD_INT 4
12972: DOUBLE
12973: EQUAL
12974: IFTRUE 12978
12976: GO 13052
12978: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12979: LD_ADDR_VAR 0 2
12983: PUSH
12984: LD_INT 22
12986: PUSH
12987: LD_OWVAR 2
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 30
12998: PUSH
12999: LD_INT 29
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 69
13014: ST_TO_ADDR
// if not tmp then
13015: LD_VAR 0 2
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13074
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13024: LD_VAR 0 2
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13037: LD_VAR 0 2
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PPUSH
13046: CALL_OW 65
// end ; 5 .. 7 :
13050: GO 13074
13052: LD_INT 5
13054: DOUBLE
13055: GREATEREQUAL
13056: IFFALSE 13064
13058: LD_INT 7
13060: DOUBLE
13061: LESSEQUAL
13062: IFTRUE 13066
13064: GO 13073
13066: POP
// StreamSibBomb ; end ;
13067: CALL 9255 0 0
13071: GO 13074
13073: POP
// end ;
13074: PPOPN 3
13076: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13077: LD_EXP 3
13081: IFFALSE 13089
13083: PUSH
13084: LD_EXP 53
13088: AND
13089: IFFALSE 13245
13091: GO 13093
13093: DISABLE
13094: LD_INT 0
13096: PPUSH
13097: PPUSH
13098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13099: LD_ADDR_VAR 0 2
13103: PUSH
13104: LD_INT 81
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: LD_INT 21
13121: PUSH
13122: LD_INT 1
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 21
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PPUSH
13148: CALL_OW 69
13152: ST_TO_ADDR
// if not tmp then
13153: LD_VAR 0 2
13157: NOT
13158: IFFALSE 13162
// exit ;
13160: GO 13245
// p := 0 ;
13162: LD_ADDR_VAR 0 3
13166: PUSH
13167: LD_INT 0
13169: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13170: LD_INT 35
13172: PPUSH
13173: CALL_OW 67
// p := p + 1 ;
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_VAR 0 3
13186: PUSH
13187: LD_INT 1
13189: PLUS
13190: ST_TO_ADDR
// for i in tmp do
13191: LD_ADDR_VAR 0 1
13195: PUSH
13196: LD_VAR 0 2
13200: PUSH
13201: FOR_IN
13202: IFFALSE 13233
// if GetLives ( i ) < 1000 then
13204: LD_VAR 0 1
13208: PPUSH
13209: CALL_OW 256
13213: PUSH
13214: LD_INT 1000
13216: LESS
13217: IFFALSE 13231
// SetLives ( i , 1000 ) ;
13219: LD_VAR 0 1
13223: PPUSH
13224: LD_INT 1000
13226: PPUSH
13227: CALL_OW 234
13231: GO 13201
13233: POP
13234: POP
// until p > 20 ;
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 20
13242: GREATER
13243: IFFALSE 13170
// end ;
13245: PPOPN 3
13247: END
// every 0 0$1 trigger StreamModeActive and sTime do
13248: LD_EXP 3
13252: IFFALSE 13260
13254: PUSH
13255: LD_EXP 54
13259: AND
13260: IFFALSE 13295
13262: GO 13264
13264: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13265: LD_INT 28
13267: PPUSH
13268: LD_OWVAR 2
13272: PPUSH
13273: LD_INT 2
13275: PPUSH
13276: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13280: LD_INT 30
13282: PPUSH
13283: LD_OWVAR 2
13287: PPUSH
13288: LD_INT 2
13290: PPUSH
13291: CALL_OW 322
// end ;
13295: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13296: LD_EXP 3
13300: IFFALSE 13308
13302: PUSH
13303: LD_EXP 55
13307: AND
13308: IFFALSE 13429
13310: GO 13312
13312: DISABLE
13313: LD_INT 0
13315: PPUSH
13316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13317: LD_ADDR_VAR 0 2
13321: PUSH
13322: LD_INT 22
13324: PUSH
13325: LD_OWVAR 2
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 21
13336: PUSH
13337: LD_INT 1
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 3
13346: PUSH
13347: LD_INT 23
13349: PUSH
13350: LD_INT 0
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: ST_TO_ADDR
// if not tmp then
13371: LD_VAR 0 2
13375: NOT
13376: IFFALSE 13380
// exit ;
13378: GO 13429
// for i in tmp do
13380: LD_ADDR_VAR 0 1
13384: PUSH
13385: LD_VAR 0 2
13389: PUSH
13390: FOR_IN
13391: IFFALSE 13427
// begin if Crawls ( i ) then
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 318
13402: IFFALSE 13413
// ComWalk ( i ) ;
13404: LD_VAR 0 1
13408: PPUSH
13409: CALL_OW 138
// SetClass ( i , 2 ) ;
13413: LD_VAR 0 1
13417: PPUSH
13418: LD_INT 2
13420: PPUSH
13421: CALL_OW 336
// end ;
13425: GO 13390
13427: POP
13428: POP
// end ;
13429: PPOPN 2
13431: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13432: LD_EXP 3
13436: IFFALSE 13444
13438: PUSH
13439: LD_EXP 56
13443: AND
13444: IFFALSE 13734
13446: GO 13448
13448: DISABLE
13449: LD_INT 0
13451: PPUSH
13452: PPUSH
13453: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13454: LD_OWVAR 2
13458: PPUSH
13459: LD_INT 9
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13472: LD_INT 9
13474: PPUSH
13475: LD_OWVAR 2
13479: PPUSH
13480: CALL_OW 343
// uc_side := 9 ;
13484: LD_ADDR_OWVAR 20
13488: PUSH
13489: LD_INT 9
13491: ST_TO_ADDR
// uc_nation := 2 ;
13492: LD_ADDR_OWVAR 21
13496: PUSH
13497: LD_INT 2
13499: ST_TO_ADDR
// hc_name := Dark Warrior ;
13500: LD_ADDR_OWVAR 26
13504: PUSH
13505: LD_STRING Dark Warrior
13507: ST_TO_ADDR
// hc_gallery :=  ;
13508: LD_ADDR_OWVAR 33
13512: PUSH
13513: LD_STRING 
13515: ST_TO_ADDR
// hc_noskilllimit := true ;
13516: LD_ADDR_OWVAR 76
13520: PUSH
13521: LD_INT 1
13523: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13524: LD_ADDR_OWVAR 31
13528: PUSH
13529: LD_INT 30
13531: PUSH
13532: LD_INT 30
13534: PUSH
13535: LD_INT 30
13537: PUSH
13538: LD_INT 30
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: ST_TO_ADDR
// un := CreateHuman ;
13547: LD_ADDR_VAR 0 3
13551: PUSH
13552: CALL_OW 44
13556: ST_TO_ADDR
// hc_noskilllimit := false ;
13557: LD_ADDR_OWVAR 76
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 51
// ToLua ( playRanger() ) ;
13577: LD_STRING playRanger()
13579: PPUSH
13580: CALL_OW 559
// p := 0 ;
13584: LD_ADDR_VAR 0 2
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13592: LD_INT 35
13594: PPUSH
13595: CALL_OW 67
// p := p + 1 ;
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: LD_VAR 0 2
13608: PUSH
13609: LD_INT 1
13611: PLUS
13612: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13613: LD_VAR 0 3
13617: PPUSH
13618: CALL_OW 256
13622: PUSH
13623: LD_INT 1000
13625: LESS
13626: IFFALSE 13640
// SetLives ( un , 1000 ) ;
13628: LD_VAR 0 3
13632: PPUSH
13633: LD_INT 1000
13635: PPUSH
13636: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 81
13647: PUSH
13648: LD_OWVAR 2
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 91
13659: PUSH
13660: LD_VAR 0 3
13664: PUSH
13665: LD_INT 30
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PPUSH
13677: CALL_OW 69
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: CALL_OW 74
13691: PPUSH
13692: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13696: LD_VAR 0 2
13700: PUSH
13701: LD_INT 80
13703: GREATER
13704: IFTRUE 13717
13706: PUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: CALL_OW 301
13716: OR
13717: IFFALSE 13592
// if un then
13719: LD_VAR 0 3
13723: IFFALSE 13734
// RemoveUnit ( un ) ;
13725: LD_VAR 0 3
13729: PPUSH
13730: CALL_OW 64
// end ;
13734: PPOPN 3
13736: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13737: LD_EXP 57
13741: IFFALSE 13857
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
13749: PPUSH
13750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: LD_INT 81
13758: PUSH
13759: LD_OWVAR 2
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 21
13770: PUSH
13771: LD_INT 1
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: CALL_OW 69
13786: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13787: LD_STRING playComputer()
13789: PPUSH
13790: CALL_OW 559
// if not tmp then
13794: LD_VAR 0 2
13798: NOT
13799: IFFALSE 13803
// exit ;
13801: GO 13857
// for i in tmp do
13803: LD_ADDR_VAR 0 1
13807: PUSH
13808: LD_VAR 0 2
13812: PUSH
13813: FOR_IN
13814: IFFALSE 13855
// for j := 1 to 4 do
13816: LD_ADDR_VAR 0 3
13820: PUSH
13821: DOUBLE
13822: LD_INT 1
13824: DEC
13825: ST_TO_ADDR
13826: LD_INT 4
13828: PUSH
13829: FOR_TO
13830: IFFALSE 13851
// SetSkill ( i , j , 10 ) ;
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_VAR 0 3
13841: PPUSH
13842: LD_INT 10
13844: PPUSH
13845: CALL_OW 237
13849: GO 13829
13851: POP
13852: POP
13853: GO 13813
13855: POP
13856: POP
// end ;
13857: PPOPN 3
13859: END
// every 0 0$1 trigger s30 do var i , tmp ;
13860: LD_EXP 58
13864: IFFALSE 13933
13866: GO 13868
13868: DISABLE
13869: LD_INT 0
13871: PPUSH
13872: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13873: LD_ADDR_VAR 0 2
13877: PUSH
13878: LD_INT 22
13880: PUSH
13881: LD_OWVAR 2
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PPUSH
13890: CALL_OW 69
13894: ST_TO_ADDR
// if not tmp then
13895: LD_VAR 0 2
13899: NOT
13900: IFFALSE 13904
// exit ;
13902: GO 13933
// for i in tmp do
13904: LD_ADDR_VAR 0 1
13908: PUSH
13909: LD_VAR 0 2
13913: PUSH
13914: FOR_IN
13915: IFFALSE 13931
// SetLives ( i , 300 ) ;
13917: LD_VAR 0 1
13921: PPUSH
13922: LD_INT 300
13924: PPUSH
13925: CALL_OW 234
13929: GO 13914
13931: POP
13932: POP
// end ;
13933: PPOPN 2
13935: END
// every 0 0$1 trigger s60 do var i , tmp ;
13936: LD_EXP 59
13940: IFFALSE 14009
13942: GO 13944
13944: DISABLE
13945: LD_INT 0
13947: PPUSH
13948: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_INT 22
13956: PUSH
13957: LD_OWVAR 2
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 69
13970: ST_TO_ADDR
// if not tmp then
13971: LD_VAR 0 2
13975: NOT
13976: IFFALSE 13980
// exit ;
13978: GO 14009
// for i in tmp do
13980: LD_ADDR_VAR 0 1
13984: PUSH
13985: LD_VAR 0 2
13989: PUSH
13990: FOR_IN
13991: IFFALSE 14007
// SetLives ( i , 600 ) ;
13993: LD_VAR 0 1
13997: PPUSH
13998: LD_INT 600
14000: PPUSH
14001: CALL_OW 234
14005: GO 13990
14007: POP
14008: POP
// end ;
14009: PPOPN 2
14011: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14012: LD_INT 0
14014: PPUSH
// case cmd of 301 :
14015: LD_VAR 0 1
14019: PUSH
14020: LD_INT 301
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14060
14028: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14029: LD_VAR 0 6
14033: PPUSH
14034: LD_VAR 0 7
14038: PPUSH
14039: LD_VAR 0 8
14043: PPUSH
14044: LD_VAR 0 4
14048: PPUSH
14049: LD_VAR 0 5
14053: PPUSH
14054: CALL 15273 0 5
14058: GO 14181
14060: LD_INT 302
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14105
14068: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14069: LD_VAR 0 6
14073: PPUSH
14074: LD_VAR 0 7
14078: PPUSH
14079: LD_VAR 0 8
14083: PPUSH
14084: LD_VAR 0 9
14088: PPUSH
14089: LD_VAR 0 4
14093: PPUSH
14094: LD_VAR 0 5
14098: PPUSH
14099: CALL 15364 0 6
14103: GO 14181
14105: LD_INT 303
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14150
14113: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14114: LD_VAR 0 6
14118: PPUSH
14119: LD_VAR 0 7
14123: PPUSH
14124: LD_VAR 0 8
14128: PPUSH
14129: LD_VAR 0 9
14133: PPUSH
14134: LD_VAR 0 4
14138: PPUSH
14139: LD_VAR 0 5
14143: PPUSH
14144: CALL 14186 0 6
14148: GO 14181
14150: LD_INT 304
14152: DOUBLE
14153: EQUAL
14154: IFTRUE 14158
14156: GO 14180
14158: POP
// hHackTeleport ( unit , x , y ) ; end ;
14159: LD_VAR 0 2
14163: PPUSH
14164: LD_VAR 0 4
14168: PPUSH
14169: LD_VAR 0 5
14173: PPUSH
14174: CALL 15957 0 3
14178: GO 14181
14180: POP
// end ;
14181: LD_VAR 0 12
14185: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14186: LD_INT 0
14188: PPUSH
14189: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14190: LD_VAR 0 1
14194: PUSH
14195: LD_INT 1
14197: LESS
14198: IFTRUE 14210
14200: PUSH
14201: LD_VAR 0 1
14205: PUSH
14206: LD_INT 3
14208: GREATER
14209: OR
14210: IFTRUE 14228
14212: PUSH
14213: LD_VAR 0 5
14217: PPUSH
14218: LD_VAR 0 6
14222: PPUSH
14223: CALL_OW 428
14227: OR
14228: IFFALSE 14232
// exit ;
14230: GO 14960
// uc_side := your_side ;
14232: LD_ADDR_OWVAR 20
14236: PUSH
14237: LD_OWVAR 2
14241: ST_TO_ADDR
// uc_nation := nation ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_VAR 0 1
14251: ST_TO_ADDR
// bc_level = 1 ;
14252: LD_ADDR_OWVAR 43
14256: PUSH
14257: LD_INT 1
14259: ST_TO_ADDR
// case btype of 1 :
14260: LD_VAR 0 2
14264: PUSH
14265: LD_INT 1
14267: DOUBLE
14268: EQUAL
14269: IFTRUE 14273
14271: GO 14284
14273: POP
// bc_type := b_depot ; 2 :
14274: LD_ADDR_OWVAR 42
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
14282: GO 14904
14284: LD_INT 2
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14303
14292: POP
// bc_type := b_warehouse ; 3 :
14293: LD_ADDR_OWVAR 42
14297: PUSH
14298: LD_INT 1
14300: ST_TO_ADDR
14301: GO 14904
14303: LD_INT 3
14305: DOUBLE
14306: EQUAL
14307: IFTRUE 14311
14309: GO 14322
14311: POP
// bc_type := b_lab ; 4 .. 9 :
14312: LD_ADDR_OWVAR 42
14316: PUSH
14317: LD_INT 6
14319: ST_TO_ADDR
14320: GO 14904
14322: LD_INT 4
14324: DOUBLE
14325: GREATEREQUAL
14326: IFFALSE 14334
14328: LD_INT 9
14330: DOUBLE
14331: LESSEQUAL
14332: IFTRUE 14336
14334: GO 14396
14336: POP
// begin bc_type := b_lab_half ;
14337: LD_ADDR_OWVAR 42
14341: PUSH
14342: LD_INT 7
14344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14345: LD_ADDR_OWVAR 44
14349: PUSH
14350: LD_INT 10
14352: PUSH
14353: LD_INT 11
14355: PUSH
14356: LD_INT 12
14358: PUSH
14359: LD_INT 15
14361: PUSH
14362: LD_INT 14
14364: PUSH
14365: LD_INT 13
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: LD_VAR 0 2
14380: PUSH
14381: LD_INT 3
14383: MINUS
14384: ARRAY
14385: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14386: LD_ADDR_OWVAR 45
14390: PUSH
14391: LD_INT 9
14393: ST_TO_ADDR
// end ; 10 .. 13 :
14394: GO 14904
14396: LD_INT 10
14398: DOUBLE
14399: GREATEREQUAL
14400: IFFALSE 14408
14402: LD_INT 13
14404: DOUBLE
14405: LESSEQUAL
14406: IFTRUE 14410
14408: GO 14487
14410: POP
// begin bc_type := b_lab_full ;
14411: LD_ADDR_OWVAR 42
14415: PUSH
14416: LD_INT 8
14418: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14419: LD_ADDR_OWVAR 44
14423: PUSH
14424: LD_INT 10
14426: PUSH
14427: LD_INT 12
14429: PUSH
14430: LD_INT 14
14432: PUSH
14433: LD_INT 13
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: LD_VAR 0 2
14446: PUSH
14447: LD_INT 9
14449: MINUS
14450: ARRAY
14451: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14452: LD_ADDR_OWVAR 45
14456: PUSH
14457: LD_INT 11
14459: PUSH
14460: LD_INT 15
14462: PUSH
14463: LD_INT 12
14465: PUSH
14466: LD_INT 15
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: PUSH
14475: LD_VAR 0 2
14479: PUSH
14480: LD_INT 9
14482: MINUS
14483: ARRAY
14484: ST_TO_ADDR
// end ; 14 :
14485: GO 14904
14487: LD_INT 14
14489: DOUBLE
14490: EQUAL
14491: IFTRUE 14495
14493: GO 14506
14495: POP
// bc_type := b_workshop ; 15 :
14496: LD_ADDR_OWVAR 42
14500: PUSH
14501: LD_INT 2
14503: ST_TO_ADDR
14504: GO 14904
14506: LD_INT 15
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14525
14514: POP
// bc_type := b_factory ; 16 :
14515: LD_ADDR_OWVAR 42
14519: PUSH
14520: LD_INT 3
14522: ST_TO_ADDR
14523: GO 14904
14525: LD_INT 16
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14544
14533: POP
// bc_type := b_ext_gun ; 17 :
14534: LD_ADDR_OWVAR 42
14538: PUSH
14539: LD_INT 17
14541: ST_TO_ADDR
14542: GO 14904
14544: LD_INT 17
14546: DOUBLE
14547: EQUAL
14548: IFTRUE 14552
14550: GO 14580
14552: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14553: LD_ADDR_OWVAR 42
14557: PUSH
14558: LD_INT 19
14560: PUSH
14561: LD_INT 23
14563: PUSH
14564: LD_INT 19
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: LD_VAR 0 1
14576: ARRAY
14577: ST_TO_ADDR
14578: GO 14904
14580: LD_INT 18
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14599
14588: POP
// bc_type := b_ext_radar ; 19 :
14589: LD_ADDR_OWVAR 42
14593: PUSH
14594: LD_INT 20
14596: ST_TO_ADDR
14597: GO 14904
14599: LD_INT 19
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14618
14607: POP
// bc_type := b_ext_radio ; 20 :
14608: LD_ADDR_OWVAR 42
14612: PUSH
14613: LD_INT 22
14615: ST_TO_ADDR
14616: GO 14904
14618: LD_INT 20
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14637
14626: POP
// bc_type := b_ext_siberium ; 21 :
14627: LD_ADDR_OWVAR 42
14631: PUSH
14632: LD_INT 21
14634: ST_TO_ADDR
14635: GO 14904
14637: LD_INT 21
14639: DOUBLE
14640: EQUAL
14641: IFTRUE 14645
14643: GO 14656
14645: POP
// bc_type := b_ext_computer ; 22 :
14646: LD_ADDR_OWVAR 42
14650: PUSH
14651: LD_INT 24
14653: ST_TO_ADDR
14654: GO 14904
14656: LD_INT 22
14658: DOUBLE
14659: EQUAL
14660: IFTRUE 14664
14662: GO 14675
14664: POP
// bc_type := b_ext_track ; 23 :
14665: LD_ADDR_OWVAR 42
14669: PUSH
14670: LD_INT 16
14672: ST_TO_ADDR
14673: GO 14904
14675: LD_INT 23
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14683
14681: GO 14694
14683: POP
// bc_type := b_ext_laser ; 24 :
14684: LD_ADDR_OWVAR 42
14688: PUSH
14689: LD_INT 25
14691: ST_TO_ADDR
14692: GO 14904
14694: LD_INT 24
14696: DOUBLE
14697: EQUAL
14698: IFTRUE 14702
14700: GO 14713
14702: POP
// bc_type := b_control_tower ; 25 :
14703: LD_ADDR_OWVAR 42
14707: PUSH
14708: LD_INT 36
14710: ST_TO_ADDR
14711: GO 14904
14713: LD_INT 25
14715: DOUBLE
14716: EQUAL
14717: IFTRUE 14721
14719: GO 14732
14721: POP
// bc_type := b_breastwork ; 26 :
14722: LD_ADDR_OWVAR 42
14726: PUSH
14727: LD_INT 31
14729: ST_TO_ADDR
14730: GO 14904
14732: LD_INT 26
14734: DOUBLE
14735: EQUAL
14736: IFTRUE 14740
14738: GO 14751
14740: POP
// bc_type := b_bunker ; 27 :
14741: LD_ADDR_OWVAR 42
14745: PUSH
14746: LD_INT 32
14748: ST_TO_ADDR
14749: GO 14904
14751: LD_INT 27
14753: DOUBLE
14754: EQUAL
14755: IFTRUE 14759
14757: GO 14770
14759: POP
// bc_type := b_turret ; 28 :
14760: LD_ADDR_OWVAR 42
14764: PUSH
14765: LD_INT 33
14767: ST_TO_ADDR
14768: GO 14904
14770: LD_INT 28
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14789
14778: POP
// bc_type := b_armoury ; 29 :
14779: LD_ADDR_OWVAR 42
14783: PUSH
14784: LD_INT 4
14786: ST_TO_ADDR
14787: GO 14904
14789: LD_INT 29
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 14808
14797: POP
// bc_type := b_barracks ; 30 :
14798: LD_ADDR_OWVAR 42
14802: PUSH
14803: LD_INT 5
14805: ST_TO_ADDR
14806: GO 14904
14808: LD_INT 30
14810: DOUBLE
14811: EQUAL
14812: IFTRUE 14816
14814: GO 14827
14816: POP
// bc_type := b_solar_power ; 31 :
14817: LD_ADDR_OWVAR 42
14821: PUSH
14822: LD_INT 27
14824: ST_TO_ADDR
14825: GO 14904
14827: LD_INT 31
14829: DOUBLE
14830: EQUAL
14831: IFTRUE 14835
14833: GO 14846
14835: POP
// bc_type := b_oil_power ; 32 :
14836: LD_ADDR_OWVAR 42
14840: PUSH
14841: LD_INT 26
14843: ST_TO_ADDR
14844: GO 14904
14846: LD_INT 32
14848: DOUBLE
14849: EQUAL
14850: IFTRUE 14854
14852: GO 14865
14854: POP
// bc_type := b_siberite_power ; 33 :
14855: LD_ADDR_OWVAR 42
14859: PUSH
14860: LD_INT 28
14862: ST_TO_ADDR
14863: GO 14904
14865: LD_INT 33
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14884
14873: POP
// bc_type := b_oil_mine ; 34 :
14874: LD_ADDR_OWVAR 42
14878: PUSH
14879: LD_INT 29
14881: ST_TO_ADDR
14882: GO 14904
14884: LD_INT 34
14886: DOUBLE
14887: EQUAL
14888: IFTRUE 14892
14890: GO 14903
14892: POP
// bc_type := b_siberite_mine ; end ;
14893: LD_ADDR_OWVAR 42
14897: PUSH
14898: LD_INT 30
14900: ST_TO_ADDR
14901: GO 14904
14903: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14904: LD_ADDR_VAR 0 8
14908: PUSH
14909: LD_VAR 0 5
14913: PPUSH
14914: LD_VAR 0 6
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: CALL_OW 47
14928: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14929: LD_OWVAR 42
14933: PUSH
14934: LD_INT 32
14936: PUSH
14937: LD_INT 33
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: IN
14944: IFFALSE 14960
// PlaceWeaponTurret ( b , weapon ) ;
14946: LD_VAR 0 8
14950: PPUSH
14951: LD_VAR 0 4
14955: PPUSH
14956: CALL_OW 431
// end ;
14960: LD_VAR 0 7
14964: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14965: LD_INT 0
14967: PPUSH
14968: PPUSH
14969: PPUSH
14970: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14971: LD_ADDR_VAR 0 4
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_OWVAR 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: LD_INT 30
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 30
15003: PUSH
15004: LD_INT 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: ST_TO_ADDR
// if not tmp then
15025: LD_VAR 0 4
15029: NOT
15030: IFFALSE 15034
// exit ;
15032: GO 15093
// for i in tmp do
15034: LD_ADDR_VAR 0 2
15038: PUSH
15039: LD_VAR 0 4
15043: PUSH
15044: FOR_IN
15045: IFFALSE 15091
// for j = 1 to 3 do
15047: LD_ADDR_VAR 0 3
15051: PUSH
15052: DOUBLE
15053: LD_INT 1
15055: DEC
15056: ST_TO_ADDR
15057: LD_INT 3
15059: PUSH
15060: FOR_TO
15061: IFFALSE 15087
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15063: LD_VAR 0 2
15067: PPUSH
15068: CALL_OW 274
15072: PPUSH
15073: LD_VAR 0 3
15077: PPUSH
15078: LD_INT 99999
15080: PPUSH
15081: CALL_OW 277
15085: GO 15060
15087: POP
15088: POP
15089: GO 15044
15091: POP
15092: POP
// end ;
15093: LD_VAR 0 1
15097: RET
// export function hHackSetLevel10 ; var i , j ; begin
15098: LD_INT 0
15100: PPUSH
15101: PPUSH
15102: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15103: LD_ADDR_VAR 0 2
15107: PUSH
15108: LD_INT 21
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: PUSH
15123: FOR_IN
15124: IFFALSE 15176
// if IsSelected ( i ) then
15126: LD_VAR 0 2
15130: PPUSH
15131: CALL_OW 306
15135: IFFALSE 15174
// begin for j := 1 to 4 do
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: DOUBLE
15143: LD_INT 1
15145: DEC
15146: ST_TO_ADDR
15147: LD_INT 4
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15172
// SetSkill ( i , j , 10 ) ;
15153: LD_VAR 0 2
15157: PPUSH
15158: LD_VAR 0 3
15162: PPUSH
15163: LD_INT 10
15165: PPUSH
15166: CALL_OW 237
15170: GO 15150
15172: POP
15173: POP
// end ;
15174: GO 15123
15176: POP
15177: POP
// end ;
15178: LD_VAR 0 1
15182: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15183: LD_INT 0
15185: PPUSH
15186: PPUSH
15187: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15188: LD_ADDR_VAR 0 2
15192: PUSH
15193: LD_INT 22
15195: PUSH
15196: LD_OWVAR 2
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 21
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: PUSH
15224: FOR_IN
15225: IFFALSE 15266
// begin for j := 1 to 4 do
15227: LD_ADDR_VAR 0 3
15231: PUSH
15232: DOUBLE
15233: LD_INT 1
15235: DEC
15236: ST_TO_ADDR
15237: LD_INT 4
15239: PUSH
15240: FOR_TO
15241: IFFALSE 15262
// SetSkill ( i , j , 10 ) ;
15243: LD_VAR 0 2
15247: PPUSH
15248: LD_VAR 0 3
15252: PPUSH
15253: LD_INT 10
15255: PPUSH
15256: CALL_OW 237
15260: GO 15240
15262: POP
15263: POP
// end ;
15264: GO 15224
15266: POP
15267: POP
// end ;
15268: LD_VAR 0 1
15272: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15273: LD_INT 0
15275: PPUSH
// uc_side := your_side ;
15276: LD_ADDR_OWVAR 20
15280: PUSH
15281: LD_OWVAR 2
15285: ST_TO_ADDR
// uc_nation := nation ;
15286: LD_ADDR_OWVAR 21
15290: PUSH
15291: LD_VAR 0 1
15295: ST_TO_ADDR
// InitHc ;
15296: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15300: LD_INT 0
15302: PPUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15317: LD_VAR 0 4
15321: PPUSH
15322: LD_VAR 0 5
15326: PPUSH
15327: CALL_OW 428
15331: PUSH
15332: LD_INT 0
15334: EQUAL
15335: IFFALSE 15359
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15337: CALL_OW 44
15341: PPUSH
15342: LD_VAR 0 4
15346: PPUSH
15347: LD_VAR 0 5
15351: PPUSH
15352: LD_INT 1
15354: PPUSH
15355: CALL_OW 48
// end ;
15359: LD_VAR 0 6
15363: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15364: LD_INT 0
15366: PPUSH
15367: PPUSH
// uc_side := your_side ;
15368: LD_ADDR_OWVAR 20
15372: PUSH
15373: LD_OWVAR 2
15377: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15378: LD_VAR 0 1
15382: PUSH
15383: LD_INT 1
15385: PUSH
15386: LD_INT 2
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: LD_INT 4
15394: PUSH
15395: LD_INT 5
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: IN
15405: IFFALSE 15417
// uc_nation := nation_american else
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
15415: GO 15460
// if chassis in [ 11 , 12 , 13 , 14 ] then
15417: LD_VAR 0 1
15421: PUSH
15422: LD_INT 11
15424: PUSH
15425: LD_INT 12
15427: PUSH
15428: LD_INT 13
15430: PUSH
15431: LD_INT 14
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: IN
15440: IFFALSE 15452
// uc_nation := nation_arabian else
15442: LD_ADDR_OWVAR 21
15446: PUSH
15447: LD_INT 2
15449: ST_TO_ADDR
15450: GO 15460
// uc_nation := nation_russian ;
15452: LD_ADDR_OWVAR 21
15456: PUSH
15457: LD_INT 3
15459: ST_TO_ADDR
// vc_chassis := chassis ;
15460: LD_ADDR_OWVAR 37
15464: PUSH
15465: LD_VAR 0 1
15469: ST_TO_ADDR
// vc_engine := engine ;
15470: LD_ADDR_OWVAR 39
15474: PUSH
15475: LD_VAR 0 2
15479: ST_TO_ADDR
// vc_control := control ;
15480: LD_ADDR_OWVAR 38
15484: PUSH
15485: LD_VAR 0 3
15489: ST_TO_ADDR
// vc_weapon := weapon ;
15490: LD_ADDR_OWVAR 40
15494: PUSH
15495: LD_VAR 0 4
15499: ST_TO_ADDR
// un := CreateVehicle ;
15500: LD_ADDR_VAR 0 8
15504: PUSH
15505: CALL_OW 45
15509: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15510: LD_VAR 0 8
15514: PPUSH
15515: LD_INT 0
15517: PPUSH
15518: LD_INT 5
15520: PPUSH
15521: CALL_OW 12
15525: PPUSH
15526: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15530: LD_VAR 0 8
15534: PPUSH
15535: LD_VAR 0 5
15539: PPUSH
15540: LD_VAR 0 6
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 48
// end ;
15552: LD_VAR 0 7
15556: RET
// export hInvincible ; every 1 do
15557: GO 15559
15559: DISABLE
// hInvincible := [ ] ;
15560: LD_ADDR_EXP 60
15564: PUSH
15565: EMPTY
15566: ST_TO_ADDR
15567: END
// every 10 do var i ;
15568: GO 15570
15570: DISABLE
15571: LD_INT 0
15573: PPUSH
// begin enable ;
15574: ENABLE
// if not hInvincible then
15575: LD_EXP 60
15579: NOT
15580: IFFALSE 15584
// exit ;
15582: GO 15628
// for i in hInvincible do
15584: LD_ADDR_VAR 0 1
15588: PUSH
15589: LD_EXP 60
15593: PUSH
15594: FOR_IN
15595: IFFALSE 15626
// if GetLives ( i ) < 1000 then
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 256
15606: PUSH
15607: LD_INT 1000
15609: LESS
15610: IFFALSE 15624
// SetLives ( i , 1000 ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: LD_INT 1000
15619: PPUSH
15620: CALL_OW 234
15624: GO 15594
15626: POP
15627: POP
// end ;
15628: PPOPN 1
15630: END
// export function hHackInvincible ; var i ; begin
15631: LD_INT 0
15633: PPUSH
15634: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15635: LD_ADDR_VAR 0 2
15639: PUSH
15640: LD_INT 2
15642: PUSH
15643: LD_INT 21
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 21
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: LIST
15667: PPUSH
15668: CALL_OW 69
15672: PUSH
15673: FOR_IN
15674: IFFALSE 15735
// if IsSelected ( i ) then
15676: LD_VAR 0 2
15680: PPUSH
15681: CALL_OW 306
15685: IFFALSE 15733
// begin if i in hInvincible then
15687: LD_VAR 0 2
15691: PUSH
15692: LD_EXP 60
15696: IN
15697: IFFALSE 15717
// hInvincible := hInvincible diff i else
15699: LD_ADDR_EXP 60
15703: PUSH
15704: LD_EXP 60
15708: PUSH
15709: LD_VAR 0 2
15713: DIFF
15714: ST_TO_ADDR
15715: GO 15733
// hInvincible := hInvincible union i ;
15717: LD_ADDR_EXP 60
15721: PUSH
15722: LD_EXP 60
15726: PUSH
15727: LD_VAR 0 2
15731: UNION
15732: ST_TO_ADDR
// end ;
15733: GO 15673
15735: POP
15736: POP
// end ;
15737: LD_VAR 0 1
15741: RET
// export function hHackInvisible ; var i , j ; begin
15742: LD_INT 0
15744: PPUSH
15745: PPUSH
15746: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15747: LD_ADDR_VAR 0 2
15751: PUSH
15752: LD_INT 21
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 69
15766: PUSH
15767: FOR_IN
15768: IFFALSE 15792
// if IsSelected ( i ) then
15770: LD_VAR 0 2
15774: PPUSH
15775: CALL_OW 306
15779: IFFALSE 15790
// ComForceInvisible ( i ) ;
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 496
15790: GO 15767
15792: POP
15793: POP
// end ;
15794: LD_VAR 0 1
15798: RET
// export function hHackChangeYourSide ; begin
15799: LD_INT 0
15801: PPUSH
// if your_side = 8 then
15802: LD_OWVAR 2
15806: PUSH
15807: LD_INT 8
15809: EQUAL
15810: IFFALSE 15822
// your_side := 0 else
15812: LD_ADDR_OWVAR 2
15816: PUSH
15817: LD_INT 0
15819: ST_TO_ADDR
15820: GO 15836
// your_side := your_side + 1 ;
15822: LD_ADDR_OWVAR 2
15826: PUSH
15827: LD_OWVAR 2
15831: PUSH
15832: LD_INT 1
15834: PLUS
15835: ST_TO_ADDR
// end ;
15836: LD_VAR 0 1
15840: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
15845: PPUSH
// for i in all_units do
15846: LD_ADDR_VAR 0 2
15850: PUSH
15851: LD_OWVAR 3
15855: PUSH
15856: FOR_IN
15857: IFFALSE 15935
// if IsSelected ( i ) then
15859: LD_VAR 0 2
15863: PPUSH
15864: CALL_OW 306
15868: IFFALSE 15933
// begin j := GetSide ( i ) ;
15870: LD_ADDR_VAR 0 3
15874: PUSH
15875: LD_VAR 0 2
15879: PPUSH
15880: CALL_OW 255
15884: ST_TO_ADDR
// if j = 8 then
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 8
15892: EQUAL
15893: IFFALSE 15905
// j := 0 else
15895: LD_ADDR_VAR 0 3
15899: PUSH
15900: LD_INT 0
15902: ST_TO_ADDR
15903: GO 15919
// j := j + 1 ;
15905: LD_ADDR_VAR 0 3
15909: PUSH
15910: LD_VAR 0 3
15914: PUSH
15915: LD_INT 1
15917: PLUS
15918: ST_TO_ADDR
// SetSide ( i , j ) ;
15919: LD_VAR 0 2
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: CALL_OW 235
// end ;
15933: GO 15856
15935: POP
15936: POP
// end ;
15937: LD_VAR 0 1
15941: RET
// export function hHackFog ; begin
15942: LD_INT 0
15944: PPUSH
// FogOff ( true ) ;
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 344
// end ;
15952: LD_VAR 0 1
15956: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15957: LD_INT 0
15959: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15960: LD_VAR 0 1
15964: PPUSH
15965: LD_VAR 0 2
15969: PPUSH
15970: LD_VAR 0 3
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 483
// CenterOnXY ( x , y ) ;
15985: LD_VAR 0 2
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: CALL_OW 84
// end ;
15999: LD_VAR 0 4
16003: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16004: LD_INT 0
16006: PPUSH
16007: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16008: LD_VAR 0 1
16012: NOT
16013: IFTRUE 16032
16015: PUSH
16016: LD_VAR 0 2
16020: PPUSH
16021: LD_VAR 0 3
16025: PPUSH
16026: CALL_OW 488
16030: NOT
16031: OR
16032: IFTRUE 16067
16034: PUSH
16035: LD_VAR 0 1
16039: PPUSH
16040: CALL_OW 266
16044: PUSH
16045: LD_INT 3
16047: NONEQUAL
16048: IFFALSE 16066
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 247
16060: PUSH
16061: LD_INT 1
16063: EQUAL
16064: NOT
16065: AND
16066: OR
16067: IFFALSE 16071
// exit ;
16069: GO 16353
// if GetType ( factory ) = unit_human then
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 247
16080: PUSH
16081: LD_INT 1
16083: EQUAL
16084: IFFALSE 16101
// factory := IsInUnit ( factory ) ;
16086: LD_ADDR_VAR 0 1
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 310
16100: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16101: LD_VAR 0 1
16105: PPUSH
16106: CALL_OW 266
16110: PUSH
16111: LD_INT 3
16113: NONEQUAL
16114: IFFALSE 16118
// exit ;
16116: GO 16353
// for i := 1 to Count ( factoryWaypoints ) do
16118: LD_ADDR_VAR 0 5
16122: PUSH
16123: DOUBLE
16124: LD_INT 1
16126: DEC
16127: ST_TO_ADDR
16128: LD_EXP 61
16132: PPUSH
16133: CALL 26413 0 1
16137: PUSH
16138: FOR_TO
16139: IFFALSE 16301
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16141: LD_VAR 0 2
16145: PPUSH
16146: LD_VAR 0 3
16150: PPUSH
16151: CALL_OW 428
16155: PUSH
16156: LD_EXP 61
16160: PUSH
16161: LD_VAR 0 5
16165: ARRAY
16166: PUSH
16167: LD_INT 2
16169: ARRAY
16170: EQUAL
16171: IFFALSE 16203
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16173: LD_ADDR_EXP 61
16177: PUSH
16178: LD_EXP 61
16182: PPUSH
16183: LD_VAR 0 5
16187: PPUSH
16188: CALL_OW 3
16192: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16193: CALL 16358 0 0
// exit ;
16197: POP
16198: POP
16199: GO 16353
// end else
16201: GO 16299
// if factory = factoryWaypoints [ i ] [ 2 ] then
16203: LD_VAR 0 1
16207: PUSH
16208: LD_EXP 61
16212: PUSH
16213: LD_VAR 0 5
16217: ARRAY
16218: PUSH
16219: LD_INT 2
16221: ARRAY
16222: EQUAL
16223: IFFALSE 16299
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16225: LD_ADDR_EXP 61
16229: PUSH
16230: LD_EXP 61
16234: PPUSH
16235: LD_VAR 0 5
16239: PPUSH
16240: CALL_OW 3
16244: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16245: LD_ADDR_EXP 61
16249: PUSH
16250: LD_EXP 61
16254: PPUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: CALL_OW 255
16264: PUSH
16265: LD_VAR 0 1
16269: PUSH
16270: LD_VAR 0 2
16274: PUSH
16275: LD_VAR 0 3
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL 62389 0 2
16290: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16291: CALL 16358 0 0
// exit ;
16295: POP
16296: POP
16297: GO 16353
// end ; end ;
16299: GO 16138
16301: POP
16302: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16303: LD_ADDR_EXP 61
16307: PUSH
16308: LD_EXP 61
16312: PPUSH
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 255
16322: PUSH
16323: LD_VAR 0 1
16327: PUSH
16328: LD_VAR 0 2
16332: PUSH
16333: LD_VAR 0 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: PPUSH
16344: CALL 62389 0 2
16348: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16349: CALL 16358 0 0
// end ;
16353: LD_VAR 0 4
16357: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16358: LD_INT 0
16360: PPUSH
16361: PPUSH
16362: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16363: LD_STRING resetFactoryWaypoint();
16365: PPUSH
16366: CALL_OW 559
// if factoryWaypoints then
16370: LD_EXP 61
16374: IFFALSE 16495
// begin list := factoryWaypoints ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_EXP 61
16385: ST_TO_ADDR
// for i := 1 to list do
16386: LD_ADDR_VAR 0 2
16390: PUSH
16391: DOUBLE
16392: LD_INT 1
16394: DEC
16395: ST_TO_ADDR
16396: LD_VAR 0 3
16400: PUSH
16401: FOR_TO
16402: IFFALSE 16493
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16404: LD_STRING setFactoryWaypointXY(
16406: PUSH
16407: LD_VAR 0 3
16411: PUSH
16412: LD_VAR 0 2
16416: ARRAY
16417: PUSH
16418: LD_INT 1
16420: ARRAY
16421: STR
16422: PUSH
16423: LD_STRING ,
16425: STR
16426: PUSH
16427: LD_VAR 0 3
16431: PUSH
16432: LD_VAR 0 2
16436: ARRAY
16437: PUSH
16438: LD_INT 2
16440: ARRAY
16441: STR
16442: PUSH
16443: LD_STRING ,
16445: STR
16446: PUSH
16447: LD_VAR 0 3
16451: PUSH
16452: LD_VAR 0 2
16456: ARRAY
16457: PUSH
16458: LD_INT 3
16460: ARRAY
16461: STR
16462: PUSH
16463: LD_STRING ,
16465: STR
16466: PUSH
16467: LD_VAR 0 3
16471: PUSH
16472: LD_VAR 0 2
16476: ARRAY
16477: PUSH
16478: LD_INT 4
16480: ARRAY
16481: STR
16482: PUSH
16483: LD_STRING )
16485: STR
16486: PPUSH
16487: CALL_OW 559
16491: GO 16401
16493: POP
16494: POP
// end ; end ;
16495: LD_VAR 0 1
16499: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16500: LD_INT 0
16502: PPUSH
// if HexInfo ( x , y ) = warehouse then
16503: LD_VAR 0 2
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: CALL_OW 428
16517: PUSH
16518: LD_VAR 0 1
16522: EQUAL
16523: IFFALSE 16550
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16525: LD_ADDR_EXP 63
16529: PUSH
16530: LD_EXP 63
16534: PPUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 1
16547: ST_TO_ADDR
16548: GO 16601
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16550: LD_ADDR_EXP 63
16554: PUSH
16555: LD_EXP 63
16559: PPUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 255
16574: PUSH
16575: LD_VAR 0 1
16579: PUSH
16580: LD_VAR 0 2
16584: PUSH
16585: LD_VAR 0 3
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: PPUSH
16596: CALL_OW 1
16600: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16601: CALL 16610 0 0
// end ;
16605: LD_VAR 0 4
16609: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16610: LD_INT 0
16612: PPUSH
16613: PPUSH
16614: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16615: LD_STRING resetWarehouseGatheringPoints();
16617: PPUSH
16618: CALL_OW 559
// if warehouseGatheringPoints then
16622: LD_EXP 63
16626: IFFALSE 16752
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16628: LD_ADDR_VAR 0 3
16632: PUSH
16633: LD_EXP 63
16637: PPUSH
16638: CALL 66323 0 1
16642: ST_TO_ADDR
// for i := 1 to list do
16643: LD_ADDR_VAR 0 2
16647: PUSH
16648: DOUBLE
16649: LD_INT 1
16651: DEC
16652: ST_TO_ADDR
16653: LD_VAR 0 3
16657: PUSH
16658: FOR_TO
16659: IFFALSE 16750
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16661: LD_STRING setWarehouseGatheringPointXY(
16663: PUSH
16664: LD_VAR 0 3
16668: PUSH
16669: LD_VAR 0 2
16673: ARRAY
16674: PUSH
16675: LD_INT 1
16677: ARRAY
16678: STR
16679: PUSH
16680: LD_STRING ,
16682: STR
16683: PUSH
16684: LD_VAR 0 3
16688: PUSH
16689: LD_VAR 0 2
16693: ARRAY
16694: PUSH
16695: LD_INT 2
16697: ARRAY
16698: STR
16699: PUSH
16700: LD_STRING ,
16702: STR
16703: PUSH
16704: LD_VAR 0 3
16708: PUSH
16709: LD_VAR 0 2
16713: ARRAY
16714: PUSH
16715: LD_INT 3
16717: ARRAY
16718: STR
16719: PUSH
16720: LD_STRING ,
16722: STR
16723: PUSH
16724: LD_VAR 0 3
16728: PUSH
16729: LD_VAR 0 2
16733: ARRAY
16734: PUSH
16735: LD_INT 4
16737: ARRAY
16738: STR
16739: PUSH
16740: LD_STRING )
16742: STR
16743: PPUSH
16744: CALL_OW 559
16748: GO 16658
16750: POP
16751: POP
// end ; end ;
16752: LD_VAR 0 1
16756: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16757: LD_EXP 63
16761: IFFALSE 17456
16763: GO 16765
16765: DISABLE
16766: LD_INT 0
16768: PPUSH
16769: PPUSH
16770: PPUSH
16771: PPUSH
16772: PPUSH
16773: PPUSH
16774: PPUSH
16775: PPUSH
16776: PPUSH
// begin enable ;
16777: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16778: LD_ADDR_VAR 0 3
16782: PUSH
16783: LD_EXP 63
16787: PPUSH
16788: CALL 66323 0 1
16792: ST_TO_ADDR
// if not list then
16793: LD_VAR 0 3
16797: NOT
16798: IFFALSE 16802
// exit ;
16800: GO 17456
// for i := 1 to list do
16802: LD_ADDR_VAR 0 1
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_VAR 0 3
16816: PUSH
16817: FOR_TO
16818: IFFALSE 17454
// begin depot := list [ i ] [ 2 ] ;
16820: LD_ADDR_VAR 0 8
16824: PUSH
16825: LD_VAR 0 3
16829: PUSH
16830: LD_VAR 0 1
16834: ARRAY
16835: PUSH
16836: LD_INT 2
16838: ARRAY
16839: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16840: LD_ADDR_VAR 0 5
16844: PUSH
16845: LD_VAR 0 3
16849: PUSH
16850: LD_VAR 0 1
16854: ARRAY
16855: PUSH
16856: LD_INT 1
16858: ARRAY
16859: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16860: LD_VAR 0 8
16864: PPUSH
16865: CALL_OW 301
16869: IFTRUE 16888
16871: PUSH
16872: LD_VAR 0 5
16876: PUSH
16877: LD_VAR 0 8
16881: PPUSH
16882: CALL_OW 255
16886: NONEQUAL
16887: OR
16888: IFFALSE 16917
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16890: LD_ADDR_EXP 63
16894: PUSH
16895: LD_EXP 63
16899: PPUSH
16900: LD_VAR 0 8
16904: PPUSH
16905: LD_INT 0
16907: PPUSH
16908: CALL_OW 1
16912: ST_TO_ADDR
// exit ;
16913: POP
16914: POP
16915: GO 17456
// end ; x := list [ i ] [ 3 ] ;
16917: LD_ADDR_VAR 0 6
16921: PUSH
16922: LD_VAR 0 3
16926: PUSH
16927: LD_VAR 0 1
16931: ARRAY
16932: PUSH
16933: LD_INT 3
16935: ARRAY
16936: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16937: LD_ADDR_VAR 0 7
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 1
16951: ARRAY
16952: PUSH
16953: LD_INT 4
16955: ARRAY
16956: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16957: LD_ADDR_VAR 0 9
16961: PUSH
16962: LD_VAR 0 6
16966: PPUSH
16967: LD_VAR 0 7
16971: PPUSH
16972: LD_INT 16
16974: PPUSH
16975: CALL 64897 0 3
16979: ST_TO_ADDR
// if not cratesNearbyPoint then
16980: LD_VAR 0 9
16984: NOT
16985: IFFALSE 16991
// exit ;
16987: POP
16988: POP
16989: GO 17456
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16991: LD_ADDR_VAR 0 4
16995: PUSH
16996: LD_INT 22
16998: PUSH
16999: LD_VAR 0 5
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 3
17010: PUSH
17011: LD_INT 60
17013: PUSH
17014: EMPTY
17015: LIST
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 91
17023: PUSH
17024: LD_VAR 0 8
17028: PUSH
17029: LD_INT 6
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 2
17039: PUSH
17040: LD_INT 25
17042: PUSH
17043: LD_INT 2
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 25
17052: PUSH
17053: LD_INT 16
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: PPUSH
17071: CALL_OW 69
17075: PUSH
17076: LD_VAR 0 8
17080: PPUSH
17081: CALL_OW 313
17085: PPUSH
17086: LD_INT 3
17088: PUSH
17089: LD_INT 60
17091: PUSH
17092: EMPTY
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: LD_INT 25
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 25
17114: PUSH
17115: LD_INT 16
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PPUSH
17131: CALL_OW 72
17135: UNION
17136: ST_TO_ADDR
// if tmp then
17137: LD_VAR 0 4
17141: IFFALSE 17221
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17143: LD_ADDR_VAR 0 4
17147: PUSH
17148: LD_VAR 0 4
17152: PPUSH
17153: LD_INT 3
17155: PPUSH
17156: CALL 62704 0 2
17160: ST_TO_ADDR
// for j in tmp do
17161: LD_ADDR_VAR 0 2
17165: PUSH
17166: LD_VAR 0 4
17170: PUSH
17171: FOR_IN
17172: IFFALSE 17215
// begin if IsInUnit ( j ) then
17174: LD_VAR 0 2
17178: PPUSH
17179: CALL_OW 310
17183: IFFALSE 17194
// ComExit ( j ) ;
17185: LD_VAR 0 2
17189: PPUSH
17190: CALL 62787 0 1
// AddComCollect ( j , x , y ) ;
17194: LD_VAR 0 2
17198: PPUSH
17199: LD_VAR 0 6
17203: PPUSH
17204: LD_VAR 0 7
17208: PPUSH
17209: CALL_OW 177
// end ;
17213: GO 17171
17215: POP
17216: POP
// exit ;
17217: POP
17218: POP
17219: GO 17456
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17221: LD_ADDR_VAR 0 4
17225: PUSH
17226: LD_INT 22
17228: PUSH
17229: LD_VAR 0 5
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 91
17240: PUSH
17241: LD_VAR 0 8
17245: PUSH
17246: LD_INT 8
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: LD_INT 34
17259: PUSH
17260: LD_INT 12
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 34
17269: PUSH
17270: LD_INT 51
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 34
17279: PUSH
17280: LD_INT 32
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 34
17289: PUSH
17290: LD_INT 89
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: LIST
17308: PPUSH
17309: CALL_OW 69
17313: ST_TO_ADDR
// if tmp then
17314: LD_VAR 0 4
17318: IFFALSE 17452
// begin for j in tmp do
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_VAR 0 4
17329: PUSH
17330: FOR_IN
17331: IFFALSE 17450
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 262
17342: PUSH
17343: LD_INT 3
17345: EQUAL
17346: IFTRUE 17363
17348: PUSH
17349: LD_VAR 0 2
17353: PPUSH
17354: CALL_OW 261
17358: PUSH
17359: LD_INT 20
17361: GREATER
17362: OR
17363: IFFALSE 17377
17365: PUSH
17366: LD_VAR 0 2
17370: PPUSH
17371: CALL_OW 314
17375: NOT
17376: AND
17377: IFFALSE 17407
17379: PUSH
17380: LD_VAR 0 2
17384: PPUSH
17385: CALL_OW 263
17389: PUSH
17390: LD_INT 1
17392: NONEQUAL
17393: IFTRUE 17406
17395: PUSH
17396: LD_VAR 0 2
17400: PPUSH
17401: CALL_OW 311
17405: OR
17406: AND
17407: IFFALSE 17448
// begin ComCollect ( j , x , y ) ;
17409: LD_VAR 0 2
17413: PPUSH
17414: LD_VAR 0 6
17418: PPUSH
17419: LD_VAR 0 7
17423: PPUSH
17424: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17428: LD_VAR 0 2
17432: PPUSH
17433: LD_VAR 0 8
17437: PPUSH
17438: CALL_OW 172
// exit ;
17442: POP
17443: POP
17444: POP
17445: POP
17446: GO 17456
// end ;
17448: GO 17330
17450: POP
17451: POP
// end ; end ;
17452: GO 16817
17454: POP
17455: POP
// end ; end_of_file
17456: PPOPN 9
17458: END
// export function SOS_UnitDestroyed ( un ) ; begin
17459: LD_INT 0
17461: PPUSH
// ComRadiation ( un ) ;
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL 18629 0 1
// end ;
17471: LD_VAR 0 2
17475: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17476: LD_INT 0
17478: PPUSH
// ComRadiation ( un ) ;
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL 18629 0 1
// end ;
17488: LD_VAR 0 2
17492: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17493: LD_INT 0
17495: PPUSH
// end ;
17496: LD_VAR 0 4
17500: RET
// export function SOS_Command ( cmd ) ; begin
17501: LD_INT 0
17503: PPUSH
// end ;
17504: LD_VAR 0 2
17508: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17509: LD_INT 0
17511: PPUSH
// end ;
17512: LD_VAR 0 6
17516: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
17517: LD_INT 0
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
// if not vehicle or not factory then
17524: LD_VAR 0 1
17528: NOT
17529: IFTRUE 17538
17531: PUSH
17532: LD_VAR 0 2
17536: NOT
17537: OR
17538: IFFALSE 17542
// exit ;
17540: GO 18204
// weapon := GetWeapon ( vehicle ) ;
17542: LD_ADDR_VAR 0 7
17546: PUSH
17547: LD_VAR 0 1
17551: PPUSH
17552: CALL_OW 264
17556: ST_TO_ADDR
// if weapon = ar_miner then
17557: LD_VAR 0 7
17561: PUSH
17562: LD_INT 81
17564: EQUAL
17565: IFFALSE 17622
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
17567: LD_ADDR_EXP 72
17571: PUSH
17572: LD_EXP 72
17576: PPUSH
17577: LD_EXP 72
17581: PUSH
17582: LD_INT 1
17584: PLUS
17585: PPUSH
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL_OW 1
17595: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17596: LD_ADDR_EXP 73
17600: PUSH
17601: LD_EXP 73
17605: PPUSH
17606: LD_EXP 73
17610: PUSH
17611: LD_INT 1
17613: PLUS
17614: PPUSH
17615: EMPTY
17616: PPUSH
17617: CALL_OW 1
17621: ST_TO_ADDR
// end ; if not factoryWaypoints then
17622: LD_EXP 61
17626: NOT
17627: IFFALSE 17631
// exit ;
17629: GO 18204
// for i := 1 to Count ( factoryWaypoints ) do
17631: LD_ADDR_VAR 0 4
17635: PUSH
17636: DOUBLE
17637: LD_INT 1
17639: DEC
17640: ST_TO_ADDR
17641: LD_EXP 61
17645: PPUSH
17646: CALL 26413 0 1
17650: PUSH
17651: FOR_TO
17652: IFFALSE 18202
// if factoryWaypoints [ i ] [ 2 ] = factory then
17654: LD_EXP 61
17658: PUSH
17659: LD_VAR 0 4
17663: ARRAY
17664: PUSH
17665: LD_INT 2
17667: ARRAY
17668: PUSH
17669: LD_VAR 0 2
17673: EQUAL
17674: IFFALSE 18200
// begin if GetControl ( vehicle ) = control_manual then
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 263
17685: PUSH
17686: LD_INT 1
17688: EQUAL
17689: IFFALSE 18053
// begin driver := IsDrivenBy ( vehicle ) ;
17691: LD_ADDR_VAR 0 5
17695: PUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: CALL_OW 311
17705: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
17706: LD_VAR 0 5
17710: PUSH
17711: LD_EXP 62
17715: IN
17716: IFTRUE 17730
17718: PUSH
17719: LD_VAR 0 1
17723: PUSH
17724: LD_EXP 62
17728: IN
17729: OR
17730: IFFALSE 17736
// exit ;
17732: POP
17733: POP
17734: GO 18204
// if not HasTask ( driver ) then
17736: LD_VAR 0 5
17740: PPUSH
17741: CALL_OW 314
17745: NOT
17746: IFFALSE 18051
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
17748: LD_ADDR_EXP 62
17752: PUSH
17753: LD_EXP 62
17757: PPUSH
17758: LD_VAR 0 5
17762: PPUSH
17763: CALL 62389 0 2
17767: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
17768: LD_ADDR_EXP 62
17772: PUSH
17773: LD_EXP 62
17777: PPUSH
17778: LD_VAR 0 1
17782: PPUSH
17783: CALL 62389 0 2
17787: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17788: LD_ADDR_VAR 0 6
17792: PUSH
17793: LD_EXP 61
17797: PUSH
17798: LD_VAR 0 4
17802: ARRAY
17803: PUSH
17804: LD_INT 3
17806: ARRAY
17807: PPUSH
17808: LD_EXP 61
17812: PUSH
17813: LD_VAR 0 4
17817: ARRAY
17818: PUSH
17819: LD_INT 4
17821: ARRAY
17822: PPUSH
17823: CALL_OW 428
17827: ST_TO_ADDR
// if hex then
17828: LD_VAR 0 6
17832: IFFALSE 17850
// ComMoveUnit ( driver , hex ) else
17834: LD_VAR 0 5
17838: PPUSH
17839: LD_VAR 0 6
17843: PPUSH
17844: CALL_OW 112
17848: GO 17934
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
17850: LD_VAR 0 1
17854: PPUSH
17855: LD_EXP 61
17859: PUSH
17860: LD_VAR 0 4
17864: ARRAY
17865: PUSH
17866: LD_INT 3
17868: ARRAY
17869: PPUSH
17870: LD_EXP 61
17874: PUSH
17875: LD_VAR 0 4
17879: ARRAY
17880: PUSH
17881: LD_INT 4
17883: ARRAY
17884: PPUSH
17885: CALL_OW 297
17889: PUSH
17890: LD_INT 0
17892: GREATER
17893: IFFALSE 17934
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17895: LD_VAR 0 5
17899: PPUSH
17900: LD_EXP 61
17904: PUSH
17905: LD_VAR 0 4
17909: ARRAY
17910: PUSH
17911: LD_INT 3
17913: ARRAY
17914: PPUSH
17915: LD_EXP 61
17919: PUSH
17920: LD_VAR 0 4
17924: ARRAY
17925: PUSH
17926: LD_INT 4
17928: ARRAY
17929: PPUSH
17930: CALL_OW 111
// AddComExitVehicle ( driver ) ;
17934: LD_VAR 0 5
17938: PPUSH
17939: CALL_OW 181
// if Multiplayer then
17943: LD_OWVAR 4
17947: IFFALSE 17996
// begin repeat wait ( 10 ) ;
17949: LD_INT 10
17951: PPUSH
17952: CALL_OW 67
// until not IsInUnit ( driver ) ;
17956: LD_VAR 0 5
17960: PPUSH
17961: CALL_OW 310
17965: NOT
17966: IFFALSE 17949
// if not HasTask ( driver ) then
17968: LD_VAR 0 5
17972: PPUSH
17973: CALL_OW 314
17977: NOT
17978: IFFALSE 17994
// ComEnterUnit ( driver , factory ) ;
17980: LD_VAR 0 5
17984: PPUSH
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 120
// end else
17994: GO 18010
// AddComEnterUnit ( driver , factory ) ;
17996: LD_VAR 0 5
18000: PPUSH
18001: LD_VAR 0 2
18005: PPUSH
18006: CALL_OW 180
// wait ( 0 0$1 ) ;
18010: LD_INT 35
18012: PPUSH
18013: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18017: LD_ADDR_EXP 62
18021: PUSH
18022: LD_EXP 62
18026: PUSH
18027: LD_VAR 0 5
18031: DIFF
18032: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18033: LD_ADDR_EXP 62
18037: PUSH
18038: LD_EXP 62
18042: PUSH
18043: LD_VAR 0 1
18047: DIFF
18048: ST_TO_ADDR
// break ;
18049: GO 18202
// end ; end else
18051: GO 18200
// if GetControl ( vehicle ) = control_remote then
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 263
18062: PUSH
18063: LD_INT 2
18065: EQUAL
18066: IFFALSE 18152
// begin wait ( 0 0$2 ) ;
18068: LD_INT 70
18070: PPUSH
18071: CALL_OW 67
// repeat wait ( 10 ) ;
18075: LD_INT 10
18077: PPUSH
18078: CALL_OW 67
// Connect ( vehicle ) ;
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL 32691 0 1
// until IsControledBy ( vehicle ) ;
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 312
18100: IFFALSE 18075
// wait ( 10 ) ;
18102: LD_INT 10
18104: PPUSH
18105: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18109: LD_VAR 0 1
18113: PPUSH
18114: LD_EXP 61
18118: PUSH
18119: LD_VAR 0 4
18123: ARRAY
18124: PUSH
18125: LD_INT 3
18127: ARRAY
18128: PPUSH
18129: LD_EXP 61
18133: PUSH
18134: LD_VAR 0 4
18138: ARRAY
18139: PUSH
18140: LD_INT 4
18142: ARRAY
18143: PPUSH
18144: CALL_OW 111
// break ;
18148: GO 18202
// end else
18150: GO 18200
// begin wait ( 0 0$3 ) ;
18152: LD_INT 105
18154: PPUSH
18155: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18159: LD_VAR 0 1
18163: PPUSH
18164: LD_EXP 61
18168: PUSH
18169: LD_VAR 0 4
18173: ARRAY
18174: PUSH
18175: LD_INT 3
18177: ARRAY
18178: PPUSH
18179: LD_EXP 61
18183: PUSH
18184: LD_VAR 0 4
18188: ARRAY
18189: PUSH
18190: LD_INT 4
18192: ARRAY
18193: PPUSH
18194: CALL_OW 111
// break ;
18198: GO 18202
// end ; end ;
18200: GO 17651
18202: POP
18203: POP
// end ;
18204: LD_VAR 0 3
18208: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18209: LD_INT 0
18211: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18212: LD_VAR 0 1
18216: PUSH
18217: LD_INT 250
18219: EQUAL
18220: IFFALSE 18237
18222: PUSH
18223: LD_VAR 0 2
18227: PPUSH
18228: CALL_OW 264
18232: PUSH
18233: LD_INT 81
18235: EQUAL
18236: AND
18237: IFFALSE 18258
// MinerPlaceMine ( unit , x , y ) ;
18239: LD_VAR 0 2
18243: PPUSH
18244: LD_VAR 0 4
18248: PPUSH
18249: LD_VAR 0 5
18253: PPUSH
18254: CALL 21604 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18258: LD_VAR 0 1
18262: PUSH
18263: LD_INT 251
18265: EQUAL
18266: IFFALSE 18283
18268: PUSH
18269: LD_VAR 0 2
18273: PPUSH
18274: CALL_OW 264
18278: PUSH
18279: LD_INT 81
18281: EQUAL
18282: AND
18283: IFFALSE 18304
// MinerDetonateMine ( unit , x , y ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_VAR 0 5
18299: PPUSH
18300: CALL 22011 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18304: LD_VAR 0 1
18308: PUSH
18309: LD_INT 252
18311: EQUAL
18312: IFFALSE 18329
18314: PUSH
18315: LD_VAR 0 2
18319: PPUSH
18320: CALL_OW 264
18324: PUSH
18325: LD_INT 81
18327: EQUAL
18328: AND
18329: IFFALSE 18350
// MinerCreateMinefield ( unit , x , y ) ;
18331: LD_VAR 0 2
18335: PPUSH
18336: LD_VAR 0 4
18340: PPUSH
18341: LD_VAR 0 5
18345: PPUSH
18346: CALL 22243 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18350: LD_VAR 0 1
18354: PUSH
18355: LD_INT 253
18357: EQUAL
18358: IFFALSE 18375
18360: PUSH
18361: LD_VAR 0 2
18365: PPUSH
18366: CALL_OW 257
18370: PUSH
18371: LD_INT 5
18373: EQUAL
18374: AND
18375: IFFALSE 18396
// ComBinocular ( unit , x , y ) ;
18377: LD_VAR 0 2
18381: PPUSH
18382: LD_VAR 0 4
18386: PPUSH
18387: LD_VAR 0 5
18391: PPUSH
18392: CALL 22618 0 3
// if selectedUnit then
18396: LD_VAR 0 3
18400: IFFALSE 18460
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18402: LD_VAR 0 1
18406: PUSH
18407: LD_INT 254
18409: EQUAL
18410: IFFALSE 18427
18412: PUSH
18413: LD_VAR 0 2
18417: PPUSH
18418: CALL_OW 264
18422: PUSH
18423: LD_INT 99
18425: EQUAL
18426: AND
18427: IFFALSE 18444
18429: PUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: CALL_OW 263
18439: PUSH
18440: LD_INT 3
18442: EQUAL
18443: AND
18444: IFFALSE 18460
// HackDestroyVehicle ( unit , selectedUnit ) ;
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: CALL 20794 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18460: LD_VAR 0 1
18464: PUSH
18465: LD_INT 255
18467: EQUAL
18468: IFFALSE 18492
18470: PUSH
18471: LD_VAR 0 2
18475: PPUSH
18476: CALL_OW 264
18480: PUSH
18481: LD_INT 14
18483: PUSH
18484: LD_INT 53
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: IN
18491: AND
18492: IFFALSE 18510
18494: PUSH
18495: LD_VAR 0 4
18499: PPUSH
18500: LD_VAR 0 5
18504: PPUSH
18505: CALL_OW 488
18509: AND
18510: IFFALSE 18534
// CutTreeXYR ( unit , x , y , 12 ) ;
18512: LD_VAR 0 2
18516: PPUSH
18517: LD_VAR 0 4
18521: PPUSH
18522: LD_VAR 0 5
18526: PPUSH
18527: LD_INT 12
18529: PPUSH
18530: CALL 18725 0 4
// if cmd = 256 then
18534: LD_VAR 0 1
18538: PUSH
18539: LD_INT 256
18541: EQUAL
18542: IFFALSE 18563
// SetFactoryWaypoint ( unit , x , y ) ;
18544: LD_VAR 0 2
18548: PPUSH
18549: LD_VAR 0 4
18553: PPUSH
18554: LD_VAR 0 5
18558: PPUSH
18559: CALL 16004 0 3
// if cmd = 257 then
18563: LD_VAR 0 1
18567: PUSH
18568: LD_INT 257
18570: EQUAL
18571: IFFALSE 18592
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18573: LD_VAR 0 2
18577: PPUSH
18578: LD_VAR 0 4
18582: PPUSH
18583: LD_VAR 0 5
18587: PPUSH
18588: CALL 16500 0 3
// if cmd = 258 then
18592: LD_VAR 0 1
18596: PUSH
18597: LD_INT 258
18599: EQUAL
18600: IFFALSE 18624
// BurnTreeXYR ( unit , x , y , 8 ) ;
18602: LD_VAR 0 2
18606: PPUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: LD_VAR 0 5
18616: PPUSH
18617: LD_INT 8
18619: PPUSH
18620: CALL 19147 0 4
// end ;
18624: LD_VAR 0 6
18628: RET
// export function ComRadiation ( un ) ; var eff ; begin
18629: LD_INT 0
18631: PPUSH
18632: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18633: LD_VAR 0 1
18637: PPUSH
18638: CALL_OW 264
18642: PUSH
18643: LD_INT 91
18645: NONEQUAL
18646: IFFALSE 18650
// exit ;
18648: GO 18720
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18650: LD_INT 68
18652: PPUSH
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL_OW 255
18662: PPUSH
18663: CALL_OW 321
18667: PUSH
18668: LD_INT 2
18670: EQUAL
18671: IFFALSE 18683
// eff := 50 else
18673: LD_ADDR_VAR 0 3
18677: PUSH
18678: LD_INT 50
18680: ST_TO_ADDR
18681: GO 18691
// eff := 25 ;
18683: LD_ADDR_VAR 0 3
18687: PUSH
18688: LD_INT 25
18690: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18691: LD_VAR 0 1
18695: PPUSH
18696: CALL_OW 250
18700: PPUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 251
18710: PPUSH
18711: LD_VAR 0 3
18715: PPUSH
18716: CALL_OW 495
// end ;
18720: LD_VAR 0 2
18724: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18725: LD_INT 0
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
18731: PPUSH
18732: PPUSH
18733: PPUSH
18734: PPUSH
18735: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18736: LD_VAR 0 1
18740: PPUSH
18741: CALL_OW 302
18745: NOT
18746: IFTRUE 18765
18748: PUSH
18749: LD_VAR 0 2
18753: PPUSH
18754: LD_VAR 0 3
18758: PPUSH
18759: CALL_OW 488
18763: NOT
18764: OR
18765: IFTRUE 18774
18767: PUSH
18768: LD_VAR 0 4
18772: NOT
18773: OR
18774: IFFALSE 18778
// exit ;
18776: GO 19142
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 437
18787: PPUSH
18788: CALL 26413 0 1
18792: PUSH
18793: LD_INT 10
18795: GREATER
18796: IFFALSE 18800
// exit ;
18798: GO 19142
// list := [ ] ;
18800: LD_ADDR_VAR 0 13
18804: PUSH
18805: EMPTY
18806: ST_TO_ADDR
// if x - r < 0 then
18807: LD_VAR 0 2
18811: PUSH
18812: LD_VAR 0 4
18816: MINUS
18817: PUSH
18818: LD_INT 0
18820: LESS
18821: IFFALSE 18833
// min_x := 0 else
18823: LD_ADDR_VAR 0 7
18827: PUSH
18828: LD_INT 0
18830: ST_TO_ADDR
18831: GO 18849
// min_x := x - r ;
18833: LD_ADDR_VAR 0 7
18837: PUSH
18838: LD_VAR 0 2
18842: PUSH
18843: LD_VAR 0 4
18847: MINUS
18848: ST_TO_ADDR
// if y - r < 0 then
18849: LD_VAR 0 3
18853: PUSH
18854: LD_VAR 0 4
18858: MINUS
18859: PUSH
18860: LD_INT 0
18862: LESS
18863: IFFALSE 18875
// min_y := 0 else
18865: LD_ADDR_VAR 0 8
18869: PUSH
18870: LD_INT 0
18872: ST_TO_ADDR
18873: GO 18891
// min_y := y - r ;
18875: LD_ADDR_VAR 0 8
18879: PUSH
18880: LD_VAR 0 3
18884: PUSH
18885: LD_VAR 0 4
18889: MINUS
18890: ST_TO_ADDR
// max_x := x + r ;
18891: LD_ADDR_VAR 0 9
18895: PUSH
18896: LD_VAR 0 2
18900: PUSH
18901: LD_VAR 0 4
18905: PLUS
18906: ST_TO_ADDR
// max_y := y + r ;
18907: LD_ADDR_VAR 0 10
18911: PUSH
18912: LD_VAR 0 3
18916: PUSH
18917: LD_VAR 0 4
18921: PLUS
18922: ST_TO_ADDR
// for _x = min_x to max_x do
18923: LD_ADDR_VAR 0 11
18927: PUSH
18928: DOUBLE
18929: LD_VAR 0 7
18933: DEC
18934: ST_TO_ADDR
18935: LD_VAR 0 9
18939: PUSH
18940: FOR_TO
18941: IFFALSE 19060
// for _y = min_y to max_y do
18943: LD_ADDR_VAR 0 12
18947: PUSH
18948: DOUBLE
18949: LD_VAR 0 8
18953: DEC
18954: ST_TO_ADDR
18955: LD_VAR 0 10
18959: PUSH
18960: FOR_TO
18961: IFFALSE 19056
// begin if not ValidHex ( _x , _y ) then
18963: LD_VAR 0 11
18967: PPUSH
18968: LD_VAR 0 12
18972: PPUSH
18973: CALL_OW 488
18977: NOT
18978: IFFALSE 18982
// continue ;
18980: GO 18960
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18982: LD_VAR 0 11
18986: PPUSH
18987: LD_VAR 0 12
18991: PPUSH
18992: CALL_OW 351
18996: IFFALSE 19014
18998: PUSH
18999: LD_VAR 0 11
19003: PPUSH
19004: LD_VAR 0 12
19008: PPUSH
19009: CALL_OW 554
19013: AND
19014: IFFALSE 19054
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19016: LD_ADDR_VAR 0 13
19020: PUSH
19021: LD_VAR 0 13
19025: PPUSH
19026: LD_VAR 0 13
19030: PUSH
19031: LD_INT 1
19033: PLUS
19034: PPUSH
19035: LD_VAR 0 11
19039: PUSH
19040: LD_VAR 0 12
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 2
19053: ST_TO_ADDR
// end ;
19054: GO 18960
19056: POP
19057: POP
19058: GO 18940
19060: POP
19061: POP
// if not list then
19062: LD_VAR 0 13
19066: NOT
19067: IFFALSE 19071
// exit ;
19069: GO 19142
// for i in list do
19071: LD_ADDR_VAR 0 6
19075: PUSH
19076: LD_VAR 0 13
19080: PUSH
19081: FOR_IN
19082: IFFALSE 19140
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19084: LD_VAR 0 1
19088: PPUSH
19089: LD_STRING M
19091: PUSH
19092: LD_VAR 0 6
19096: PUSH
19097: LD_INT 1
19099: ARRAY
19100: PUSH
19101: LD_VAR 0 6
19105: PUSH
19106: LD_INT 2
19108: ARRAY
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: LD_INT 0
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: PPUSH
19134: CALL_OW 447
19138: GO 19081
19140: POP
19141: POP
// end ;
19142: LD_VAR 0 5
19146: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19147: LD_INT 0
19149: PPUSH
19150: PPUSH
19151: PPUSH
19152: PPUSH
19153: PPUSH
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
19158: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19159: LD_VAR 0 1
19163: PPUSH
19164: CALL_OW 302
19168: NOT
19169: IFTRUE 19188
19171: PUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: CALL_OW 488
19186: NOT
19187: OR
19188: IFTRUE 19197
19190: PUSH
19191: LD_VAR 0 4
19195: NOT
19196: OR
19197: IFFALSE 19201
// exit ;
19199: GO 19740
// if Count ( GetTaskList ( flame ) ) > 10 then
19201: LD_VAR 0 1
19205: PPUSH
19206: CALL_OW 437
19210: PPUSH
19211: CALL 26413 0 1
19215: PUSH
19216: LD_INT 10
19218: GREATER
19219: IFFALSE 19223
// exit ;
19221: GO 19740
// list := [ ] ;
19223: LD_ADDR_VAR 0 13
19227: PUSH
19228: EMPTY
19229: ST_TO_ADDR
// if x - r < 0 then
19230: LD_VAR 0 2
19234: PUSH
19235: LD_VAR 0 4
19239: MINUS
19240: PUSH
19241: LD_INT 0
19243: LESS
19244: IFFALSE 19256
// min_x := 0 else
19246: LD_ADDR_VAR 0 7
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
19254: GO 19272
// min_x := x - r ;
19256: LD_ADDR_VAR 0 7
19260: PUSH
19261: LD_VAR 0 2
19265: PUSH
19266: LD_VAR 0 4
19270: MINUS
19271: ST_TO_ADDR
// if y - r < 0 then
19272: LD_VAR 0 3
19276: PUSH
19277: LD_VAR 0 4
19281: MINUS
19282: PUSH
19283: LD_INT 0
19285: LESS
19286: IFFALSE 19298
// min_y := 0 else
19288: LD_ADDR_VAR 0 8
19292: PUSH
19293: LD_INT 0
19295: ST_TO_ADDR
19296: GO 19314
// min_y := y - r ;
19298: LD_ADDR_VAR 0 8
19302: PUSH
19303: LD_VAR 0 3
19307: PUSH
19308: LD_VAR 0 4
19312: MINUS
19313: ST_TO_ADDR
// max_x := x + r ;
19314: LD_ADDR_VAR 0 9
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: LD_VAR 0 4
19328: PLUS
19329: ST_TO_ADDR
// max_y := y + r ;
19330: LD_ADDR_VAR 0 10
19334: PUSH
19335: LD_VAR 0 3
19339: PUSH
19340: LD_VAR 0 4
19344: PLUS
19345: ST_TO_ADDR
// for _x = min_x to max_x do
19346: LD_ADDR_VAR 0 11
19350: PUSH
19351: DOUBLE
19352: LD_VAR 0 7
19356: DEC
19357: ST_TO_ADDR
19358: LD_VAR 0 9
19362: PUSH
19363: FOR_TO
19364: IFFALSE 19483
// for _y = min_y to max_y do
19366: LD_ADDR_VAR 0 12
19370: PUSH
19371: DOUBLE
19372: LD_VAR 0 8
19376: DEC
19377: ST_TO_ADDR
19378: LD_VAR 0 10
19382: PUSH
19383: FOR_TO
19384: IFFALSE 19479
// begin if not ValidHex ( _x , _y ) then
19386: LD_VAR 0 11
19390: PPUSH
19391: LD_VAR 0 12
19395: PPUSH
19396: CALL_OW 488
19400: NOT
19401: IFFALSE 19405
// continue ;
19403: GO 19383
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19405: LD_VAR 0 11
19409: PPUSH
19410: LD_VAR 0 12
19414: PPUSH
19415: CALL_OW 351
19419: IFFALSE 19437
19421: PUSH
19422: LD_VAR 0 11
19426: PPUSH
19427: LD_VAR 0 12
19431: PPUSH
19432: CALL_OW 554
19436: AND
19437: IFFALSE 19477
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19439: LD_ADDR_VAR 0 13
19443: PUSH
19444: LD_VAR 0 13
19448: PPUSH
19449: LD_VAR 0 13
19453: PUSH
19454: LD_INT 1
19456: PLUS
19457: PPUSH
19458: LD_VAR 0 11
19462: PUSH
19463: LD_VAR 0 12
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: CALL_OW 2
19476: ST_TO_ADDR
// end ;
19477: GO 19383
19479: POP
19480: POP
19481: GO 19363
19483: POP
19484: POP
// if not list then
19485: LD_VAR 0 13
19489: NOT
19490: IFFALSE 19494
// exit ;
19492: GO 19740
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19494: LD_ADDR_VAR 0 13
19498: PUSH
19499: LD_VAR 0 1
19503: PPUSH
19504: LD_VAR 0 13
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL 29819 0 4
19519: ST_TO_ADDR
// ComStop ( flame ) ;
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 141
// for i in list do
19529: LD_ADDR_VAR 0 6
19533: PUSH
19534: LD_VAR 0 13
19538: PUSH
19539: FOR_IN
19540: IFFALSE 19571
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19542: LD_VAR 0 1
19546: PPUSH
19547: LD_VAR 0 6
19551: PUSH
19552: LD_INT 1
19554: ARRAY
19555: PPUSH
19556: LD_VAR 0 6
19560: PUSH
19561: LD_INT 2
19563: ARRAY
19564: PPUSH
19565: CALL_OW 176
19569: GO 19539
19571: POP
19572: POP
// repeat wait ( 0 0$1 ) ;
19573: LD_INT 35
19575: PPUSH
19576: CALL_OW 67
// task := GetTaskList ( flame ) ;
19580: LD_ADDR_VAR 0 14
19584: PUSH
19585: LD_VAR 0 1
19589: PPUSH
19590: CALL_OW 437
19594: ST_TO_ADDR
// if not task then
19595: LD_VAR 0 14
19599: NOT
19600: IFFALSE 19604
// exit ;
19602: GO 19740
// if task [ 1 ] [ 1 ] <> | then
19604: LD_VAR 0 14
19608: PUSH
19609: LD_INT 1
19611: ARRAY
19612: PUSH
19613: LD_INT 1
19615: ARRAY
19616: PUSH
19617: LD_STRING |
19619: NONEQUAL
19620: IFFALSE 19624
// exit ;
19622: GO 19740
// _x := task [ 1 ] [ 2 ] ;
19624: LD_ADDR_VAR 0 11
19628: PUSH
19629: LD_VAR 0 14
19633: PUSH
19634: LD_INT 1
19636: ARRAY
19637: PUSH
19638: LD_INT 2
19640: ARRAY
19641: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19642: LD_ADDR_VAR 0 12
19646: PUSH
19647: LD_VAR 0 14
19651: PUSH
19652: LD_INT 1
19654: ARRAY
19655: PUSH
19656: LD_INT 3
19658: ARRAY
19659: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19660: LD_VAR 0 11
19664: PPUSH
19665: LD_VAR 0 12
19669: PPUSH
19670: CALL_OW 351
19674: NOT
19675: IFTRUE 19694
19677: PUSH
19678: LD_VAR 0 11
19682: PPUSH
19683: LD_VAR 0 12
19687: PPUSH
19688: CALL_OW 554
19692: NOT
19693: OR
19694: IFFALSE 19728
// begin task := Delete ( task , 1 ) ;
19696: LD_ADDR_VAR 0 14
19700: PUSH
19701: LD_VAR 0 14
19705: PPUSH
19706: LD_INT 1
19708: PPUSH
19709: CALL_OW 3
19713: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19714: LD_VAR 0 1
19718: PPUSH
19719: LD_VAR 0 14
19723: PPUSH
19724: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 314
19737: NOT
19738: IFFALSE 19573
// end ;
19740: LD_VAR 0 5
19744: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19745: LD_EXP 65
19749: NOT
19750: IFFALSE 19800
19752: GO 19754
19754: DISABLE
// begin initHack := true ;
19755: LD_ADDR_EXP 65
19759: PUSH
19760: LD_INT 1
19762: ST_TO_ADDR
// hackTanks := [ ] ;
19763: LD_ADDR_EXP 66
19767: PUSH
19768: EMPTY
19769: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19770: LD_ADDR_EXP 67
19774: PUSH
19775: EMPTY
19776: ST_TO_ADDR
// hackLimit := 3 ;
19777: LD_ADDR_EXP 68
19781: PUSH
19782: LD_INT 3
19784: ST_TO_ADDR
// hackDist := 12 ;
19785: LD_ADDR_EXP 69
19789: PUSH
19790: LD_INT 12
19792: ST_TO_ADDR
// hackCounter := [ ] ;
19793: LD_ADDR_EXP 70
19797: PUSH
19798: EMPTY
19799: ST_TO_ADDR
// end ;
19800: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19801: LD_EXP 65
19805: IFFALSE 19823
19807: PUSH
19808: LD_INT 34
19810: PUSH
19811: LD_INT 99
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PPUSH
19818: CALL_OW 69
19822: AND
19823: IFFALSE 20076
19825: GO 19827
19827: DISABLE
19828: LD_INT 0
19830: PPUSH
19831: PPUSH
// begin enable ;
19832: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19833: LD_ADDR_VAR 0 1
19837: PUSH
19838: LD_INT 34
19840: PUSH
19841: LD_INT 99
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PPUSH
19848: CALL_OW 69
19852: PUSH
19853: FOR_IN
19854: IFFALSE 20074
// begin if not i in hackTanks then
19856: LD_VAR 0 1
19860: PUSH
19861: LD_EXP 66
19865: IN
19866: NOT
19867: IFFALSE 19950
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19869: LD_ADDR_EXP 66
19873: PUSH
19874: LD_EXP 66
19878: PPUSH
19879: LD_EXP 66
19883: PUSH
19884: LD_INT 1
19886: PLUS
19887: PPUSH
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 1
19897: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19898: LD_ADDR_EXP 67
19902: PUSH
19903: LD_EXP 67
19907: PPUSH
19908: LD_EXP 67
19912: PUSH
19913: LD_INT 1
19915: PLUS
19916: PPUSH
19917: EMPTY
19918: PPUSH
19919: CALL_OW 1
19923: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19924: LD_ADDR_EXP 70
19928: PUSH
19929: LD_EXP 70
19933: PPUSH
19934: LD_EXP 70
19938: PUSH
19939: LD_INT 1
19941: PLUS
19942: PPUSH
19943: EMPTY
19944: PPUSH
19945: CALL_OW 1
19949: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19950: LD_VAR 0 1
19954: PPUSH
19955: CALL_OW 302
19959: NOT
19960: IFFALSE 19973
// begin HackUnlinkAll ( i ) ;
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL 20079 0 1
// continue ;
19971: GO 19853
// end ; HackCheckCapturedStatus ( i ) ;
19973: LD_VAR 0 1
19977: PPUSH
19978: CALL 20524 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19982: LD_ADDR_VAR 0 2
19986: PUSH
19987: LD_INT 81
19989: PUSH
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 255
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 33
20006: PUSH
20007: LD_INT 3
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 91
20016: PUSH
20017: LD_VAR 0 1
20021: PUSH
20022: LD_EXP 69
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 50
20034: PUSH
20035: EMPTY
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: PPUSH
20044: CALL_OW 69
20048: ST_TO_ADDR
// if not tmp then
20049: LD_VAR 0 2
20053: NOT
20054: IFFALSE 20058
// continue ;
20056: GO 19853
// HackLink ( i , tmp ) ;
20058: LD_VAR 0 1
20062: PPUSH
20063: LD_VAR 0 2
20067: PPUSH
20068: CALL 20215 0 2
// end ;
20072: GO 19853
20074: POP
20075: POP
// end ;
20076: PPOPN 2
20078: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20079: LD_INT 0
20081: PPUSH
20082: PPUSH
20083: PPUSH
// if not hack in hackTanks then
20084: LD_VAR 0 1
20088: PUSH
20089: LD_EXP 66
20093: IN
20094: NOT
20095: IFFALSE 20099
// exit ;
20097: GO 20210
// index := GetElementIndex ( hackTanks , hack ) ;
20099: LD_ADDR_VAR 0 4
20103: PUSH
20104: LD_EXP 66
20108: PPUSH
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL 29114 0 2
20118: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20119: LD_EXP 67
20123: PUSH
20124: LD_VAR 0 4
20128: ARRAY
20129: IFFALSE 20210
// begin for i in hackTanksCaptured [ index ] do
20131: LD_ADDR_VAR 0 3
20135: PUSH
20136: LD_EXP 67
20140: PUSH
20141: LD_VAR 0 4
20145: ARRAY
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20174
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 1
20157: ARRAY
20158: PPUSH
20159: LD_VAR 0 3
20163: PUSH
20164: LD_INT 2
20166: ARRAY
20167: PPUSH
20168: CALL_OW 235
20172: GO 20147
20174: POP
20175: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20176: LD_ADDR_EXP 67
20180: PUSH
20181: LD_EXP 67
20185: PPUSH
20186: LD_VAR 0 4
20190: PPUSH
20191: EMPTY
20192: PPUSH
20193: CALL_OW 1
20197: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20198: LD_VAR 0 1
20202: PPUSH
20203: LD_INT 0
20205: PPUSH
20206: CALL_OW 505
// end ; end ;
20210: LD_VAR 0 2
20214: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20215: LD_INT 0
20217: PPUSH
20218: PPUSH
20219: PPUSH
// if not hack in hackTanks or not vehicles then
20220: LD_VAR 0 1
20224: PUSH
20225: LD_EXP 66
20229: IN
20230: NOT
20231: IFTRUE 20240
20233: PUSH
20234: LD_VAR 0 2
20238: NOT
20239: OR
20240: IFFALSE 20244
// exit ;
20242: GO 20519
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20244: LD_ADDR_VAR 0 2
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: LD_VAR 0 2
20258: PPUSH
20259: LD_INT 1
20261: PPUSH
20262: LD_INT 1
20264: PPUSH
20265: CALL 29766 0 4
20269: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20270: LD_ADDR_VAR 0 5
20274: PUSH
20275: LD_EXP 66
20279: PPUSH
20280: LD_VAR 0 1
20284: PPUSH
20285: CALL 29114 0 2
20289: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20290: LD_EXP 67
20294: PUSH
20295: LD_VAR 0 5
20299: ARRAY
20300: PUSH
20301: LD_EXP 68
20305: LESS
20306: IFFALSE 20495
// begin for i := 1 to vehicles do
20308: LD_ADDR_VAR 0 4
20312: PUSH
20313: DOUBLE
20314: LD_INT 1
20316: DEC
20317: ST_TO_ADDR
20318: LD_VAR 0 2
20322: PUSH
20323: FOR_TO
20324: IFFALSE 20493
// begin if hackTanksCaptured [ index ] = hackLimit then
20326: LD_EXP 67
20330: PUSH
20331: LD_VAR 0 5
20335: ARRAY
20336: PUSH
20337: LD_EXP 68
20341: EQUAL
20342: IFFALSE 20346
// break ;
20344: GO 20493
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20346: LD_ADDR_EXP 70
20350: PUSH
20351: LD_EXP 70
20355: PPUSH
20356: LD_VAR 0 5
20360: PPUSH
20361: LD_EXP 70
20365: PUSH
20366: LD_VAR 0 5
20370: ARRAY
20371: PUSH
20372: LD_INT 1
20374: PLUS
20375: PPUSH
20376: CALL_OW 1
20380: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20381: LD_ADDR_EXP 67
20385: PUSH
20386: LD_EXP 67
20390: PPUSH
20391: LD_VAR 0 5
20395: PUSH
20396: LD_EXP 67
20400: PUSH
20401: LD_VAR 0 5
20405: ARRAY
20406: PUSH
20407: LD_INT 1
20409: PLUS
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PPUSH
20415: LD_VAR 0 2
20419: PUSH
20420: LD_VAR 0 4
20424: ARRAY
20425: PUSH
20426: LD_VAR 0 2
20430: PUSH
20431: LD_VAR 0 4
20435: ARRAY
20436: PPUSH
20437: CALL_OW 255
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PPUSH
20446: CALL 29331 0 3
20450: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20451: LD_VAR 0 2
20455: PUSH
20456: LD_VAR 0 4
20460: ARRAY
20461: PPUSH
20462: LD_VAR 0 1
20466: PPUSH
20467: CALL_OW 255
20471: PPUSH
20472: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20476: LD_VAR 0 2
20480: PUSH
20481: LD_VAR 0 4
20485: ARRAY
20486: PPUSH
20487: CALL_OW 141
// end ;
20491: GO 20323
20493: POP
20494: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20495: LD_VAR 0 1
20499: PPUSH
20500: LD_EXP 67
20504: PUSH
20505: LD_VAR 0 5
20509: ARRAY
20510: PUSH
20511: LD_INT 0
20513: PLUS
20514: PPUSH
20515: CALL_OW 505
// end ;
20519: LD_VAR 0 3
20523: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
// if not hack in hackTanks then
20530: LD_VAR 0 1
20534: PUSH
20535: LD_EXP 66
20539: IN
20540: NOT
20541: IFFALSE 20545
// exit ;
20543: GO 20789
// index := GetElementIndex ( hackTanks , hack ) ;
20545: LD_ADDR_VAR 0 4
20549: PUSH
20550: LD_EXP 66
20554: PPUSH
20555: LD_VAR 0 1
20559: PPUSH
20560: CALL 29114 0 2
20564: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: DOUBLE
20571: LD_EXP 67
20575: PUSH
20576: LD_VAR 0 4
20580: ARRAY
20581: INC
20582: ST_TO_ADDR
20583: LD_INT 1
20585: PUSH
20586: FOR_DOWNTO
20587: IFFALSE 20763
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20589: LD_ADDR_VAR 0 5
20593: PUSH
20594: LD_EXP 67
20598: PUSH
20599: LD_VAR 0 4
20603: ARRAY
20604: PUSH
20605: LD_VAR 0 3
20609: ARRAY
20610: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20611: LD_VAR 0 5
20615: PUSH
20616: LD_INT 1
20618: ARRAY
20619: PPUSH
20620: CALL_OW 302
20624: NOT
20625: IFTRUE 20653
20627: PUSH
20628: LD_VAR 0 5
20632: PUSH
20633: LD_INT 1
20635: ARRAY
20636: PPUSH
20637: CALL_OW 255
20641: PUSH
20642: LD_VAR 0 1
20646: PPUSH
20647: CALL_OW 255
20651: NONEQUAL
20652: OR
20653: IFFALSE 20761
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20655: LD_VAR 0 5
20659: PUSH
20660: LD_INT 1
20662: ARRAY
20663: PPUSH
20664: CALL_OW 305
20668: IFFALSE 20696
20670: PUSH
20671: LD_VAR 0 5
20675: PUSH
20676: LD_INT 1
20678: ARRAY
20679: PPUSH
20680: CALL_OW 255
20684: PUSH
20685: LD_VAR 0 1
20689: PPUSH
20690: CALL_OW 255
20694: EQUAL
20695: AND
20696: IFFALSE 20720
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20698: LD_VAR 0 5
20702: PUSH
20703: LD_INT 1
20705: ARRAY
20706: PPUSH
20707: LD_VAR 0 5
20711: PUSH
20712: LD_INT 2
20714: ARRAY
20715: PPUSH
20716: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20720: LD_ADDR_EXP 67
20724: PUSH
20725: LD_EXP 67
20729: PPUSH
20730: LD_VAR 0 4
20734: PPUSH
20735: LD_EXP 67
20739: PUSH
20740: LD_VAR 0 4
20744: ARRAY
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: CALL_OW 3
20755: PPUSH
20756: CALL_OW 1
20760: ST_TO_ADDR
// end ; end ;
20761: GO 20586
20763: POP
20764: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: LD_EXP 67
20774: PUSH
20775: LD_VAR 0 4
20779: ARRAY
20780: PUSH
20781: LD_INT 0
20783: PLUS
20784: PPUSH
20785: CALL_OW 505
// end ;
20789: LD_VAR 0 2
20793: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20794: LD_INT 0
20796: PPUSH
20797: PPUSH
20798: PPUSH
20799: PPUSH
// if not hack in hackTanks then
20800: LD_VAR 0 1
20804: PUSH
20805: LD_EXP 66
20809: IN
20810: NOT
20811: IFFALSE 20815
// exit ;
20813: GO 20900
// index := GetElementIndex ( hackTanks , hack ) ;
20815: LD_ADDR_VAR 0 5
20819: PUSH
20820: LD_EXP 66
20824: PPUSH
20825: LD_VAR 0 1
20829: PPUSH
20830: CALL 29114 0 2
20834: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20835: LD_ADDR_VAR 0 4
20839: PUSH
20840: DOUBLE
20841: LD_INT 1
20843: DEC
20844: ST_TO_ADDR
20845: LD_EXP 67
20849: PUSH
20850: LD_VAR 0 5
20854: ARRAY
20855: PUSH
20856: FOR_TO
20857: IFFALSE 20898
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20859: LD_EXP 67
20863: PUSH
20864: LD_VAR 0 5
20868: ARRAY
20869: PUSH
20870: LD_VAR 0 4
20874: ARRAY
20875: PUSH
20876: LD_INT 1
20878: ARRAY
20879: PUSH
20880: LD_VAR 0 2
20884: EQUAL
20885: IFFALSE 20896
// KillUnit ( vehicle ) ;
20887: LD_VAR 0 2
20891: PPUSH
20892: CALL_OW 66
20896: GO 20856
20898: POP
20899: POP
// end ;
20900: LD_VAR 0 3
20904: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
20905: LD_EXP 71
20909: NOT
20910: IFFALSE 21043
20912: GO 20914
20914: DISABLE
20915: LD_INT 0
20917: PPUSH
// begin initMiner := true ;
20918: LD_ADDR_EXP 71
20922: PUSH
20923: LD_INT 1
20925: ST_TO_ADDR
// minersList := [ ] ;
20926: LD_ADDR_EXP 72
20930: PUSH
20931: EMPTY
20932: ST_TO_ADDR
// minerMinesList := [ ] ;
20933: LD_ADDR_EXP 73
20937: PUSH
20938: EMPTY
20939: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
20940: LD_ADDR_EXP 74
20944: PUSH
20945: LD_INT 10
20947: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20948: LD_ADDR_VAR 0 1
20952: PUSH
20953: LD_INT 34
20955: PUSH
20956: LD_INT 81
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 69
20967: PUSH
20968: FOR_IN
20969: IFFALSE 21041
// begin if not i in minersList then
20971: LD_VAR 0 1
20975: PUSH
20976: LD_EXP 72
20980: IN
20981: NOT
20982: IFFALSE 21039
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20984: LD_ADDR_EXP 72
20988: PUSH
20989: LD_EXP 72
20993: PPUSH
20994: LD_EXP 72
20998: PUSH
20999: LD_INT 1
21001: PLUS
21002: PPUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 1
21012: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21013: LD_ADDR_EXP 73
21017: PUSH
21018: LD_EXP 73
21022: PPUSH
21023: LD_EXP 73
21027: PUSH
21028: LD_INT 1
21030: PLUS
21031: PPUSH
21032: EMPTY
21033: PPUSH
21034: CALL_OW 1
21038: ST_TO_ADDR
// end end ;
21039: GO 20968
21041: POP
21042: POP
// end ;
21043: PPOPN 1
21045: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
21046: LD_EXP 71
21050: IFFALSE 21081
21052: PUSH
21053: LD_EXP 73
21057: PPUSH
21058: CALL 26413 0 1
21062: IFTRUE 21080
21064: PUSH
21065: LD_INT 34
21067: PUSH
21068: LD_INT 81
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 69
21079: OR
21080: AND
21081: IFFALSE 21601
21083: GO 21085
21085: DISABLE
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
21090: PPUSH
21091: PPUSH
// begin enable ;
21092: ENABLE
// for i := minerMinesList downto 1 do
21093: LD_ADDR_VAR 0 1
21097: PUSH
21098: DOUBLE
21099: LD_EXP 73
21103: INC
21104: ST_TO_ADDR
21105: LD_INT 1
21107: PUSH
21108: FOR_DOWNTO
21109: IFFALSE 21599
// begin side := GetSide ( minersList [ i ] ) ;
21111: LD_ADDR_VAR 0 3
21115: PUSH
21116: LD_EXP 72
21120: PUSH
21121: LD_VAR 0 1
21125: ARRAY
21126: PPUSH
21127: CALL_OW 255
21131: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
21132: LD_EXP 72
21136: PUSH
21137: LD_VAR 0 1
21141: ARRAY
21142: PPUSH
21143: CALL_OW 300
21147: IFFALSE 21168
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_OWVAR 2
21159: PUSH
21160: LD_INT 9
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: IN
21167: AND
21168: IFFALSE 21201
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
21170: LD_EXP 72
21174: PUSH
21175: LD_VAR 0 1
21179: ARRAY
21180: PPUSH
21181: LD_EXP 73
21185: PUSH
21186: LD_VAR 0 1
21190: ARRAY
21191: PPUSH
21192: CALL 26413 0 1
21196: PPUSH
21197: CALL_OW 505
// if not minerMinesList [ i ] then
21201: LD_EXP 73
21205: PUSH
21206: LD_VAR 0 1
21210: ARRAY
21211: NOT
21212: IFFALSE 21216
// continue ;
21214: GO 21108
// for j := minerMinesList [ i ] downto 1 do
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: DOUBLE
21222: LD_EXP 73
21226: PUSH
21227: LD_VAR 0 1
21231: ARRAY
21232: INC
21233: ST_TO_ADDR
21234: LD_INT 1
21236: PUSH
21237: FOR_DOWNTO
21238: IFFALSE 21595
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
21240: LD_EXP 72
21244: PUSH
21245: LD_VAR 0 1
21249: ARRAY
21250: PPUSH
21251: CALL_OW 301
21255: IFTRUE 21275
21257: PUSH
21258: LD_EXP 72
21262: PUSH
21263: LD_VAR 0 1
21267: ARRAY
21268: PPUSH
21269: CALL_OW 305
21273: NOT
21274: OR
21275: IFFALSE 21366
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21277: LD_EXP 73
21281: PUSH
21282: LD_VAR 0 1
21286: ARRAY
21287: PUSH
21288: LD_VAR 0 2
21292: ARRAY
21293: PUSH
21294: LD_INT 1
21296: ARRAY
21297: PPUSH
21298: LD_EXP 73
21302: PUSH
21303: LD_VAR 0 1
21307: ARRAY
21308: PUSH
21309: LD_VAR 0 2
21313: ARRAY
21314: PUSH
21315: LD_INT 2
21317: ARRAY
21318: PPUSH
21319: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21323: LD_ADDR_EXP 73
21327: PUSH
21328: LD_EXP 73
21332: PPUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: LD_EXP 73
21342: PUSH
21343: LD_VAR 0 1
21347: ARRAY
21348: PPUSH
21349: LD_VAR 0 2
21353: PPUSH
21354: CALL_OW 3
21358: PPUSH
21359: CALL_OW 1
21363: ST_TO_ADDR
// continue ;
21364: GO 21237
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21366: LD_ADDR_VAR 0 4
21370: PUSH
21371: LD_EXP 73
21375: PUSH
21376: LD_VAR 0 1
21380: ARRAY
21381: PUSH
21382: LD_VAR 0 2
21386: ARRAY
21387: PUSH
21388: LD_INT 1
21390: ARRAY
21391: PPUSH
21392: LD_EXP 73
21396: PUSH
21397: LD_VAR 0 1
21401: ARRAY
21402: PUSH
21403: LD_VAR 0 2
21407: ARRAY
21408: PUSH
21409: LD_INT 2
21411: ARRAY
21412: PPUSH
21413: CALL_OW 428
21417: ST_TO_ADDR
// if not tmp then
21418: LD_VAR 0 4
21422: NOT
21423: IFFALSE 21427
// continue ;
21425: GO 21237
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21427: LD_VAR 0 4
21431: PUSH
21432: LD_INT 81
21434: PUSH
21435: LD_VAR 0 3
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PPUSH
21444: CALL_OW 69
21448: IN
21449: IFFALSE 21499
21451: PUSH
21452: LD_EXP 73
21456: PUSH
21457: LD_VAR 0 1
21461: ARRAY
21462: PUSH
21463: LD_VAR 0 2
21467: ARRAY
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: PPUSH
21473: LD_EXP 73
21477: PUSH
21478: LD_VAR 0 1
21482: ARRAY
21483: PUSH
21484: LD_VAR 0 2
21488: ARRAY
21489: PUSH
21490: LD_INT 2
21492: ARRAY
21493: PPUSH
21494: CALL_OW 458
21498: AND
21499: IFFALSE 21593
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21501: LD_EXP 73
21505: PUSH
21506: LD_VAR 0 1
21510: ARRAY
21511: PUSH
21512: LD_VAR 0 2
21516: ARRAY
21517: PUSH
21518: LD_INT 1
21520: ARRAY
21521: PPUSH
21522: LD_EXP 73
21526: PUSH
21527: LD_VAR 0 1
21531: ARRAY
21532: PUSH
21533: LD_VAR 0 2
21537: ARRAY
21538: PUSH
21539: LD_INT 2
21541: ARRAY
21542: PPUSH
21543: LD_VAR 0 3
21547: PPUSH
21548: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21552: LD_ADDR_EXP 73
21556: PUSH
21557: LD_EXP 73
21561: PPUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: LD_EXP 73
21571: PUSH
21572: LD_VAR 0 1
21576: ARRAY
21577: PPUSH
21578: LD_VAR 0 2
21582: PPUSH
21583: CALL_OW 3
21587: PPUSH
21588: CALL_OW 1
21592: ST_TO_ADDR
// end ; end ;
21593: GO 21237
21595: POP
21596: POP
// end ;
21597: GO 21108
21599: POP
21600: POP
// end ;
21601: PPOPN 4
21603: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
21604: LD_INT 0
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
// result := false ;
21610: LD_ADDR_VAR 0 4
21614: PUSH
21615: LD_INT 0
21617: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21618: LD_VAR 0 1
21622: PPUSH
21623: CALL_OW 264
21627: PUSH
21628: LD_INT 81
21630: EQUAL
21631: NOT
21632: IFFALSE 21636
// exit ;
21634: GO 22006
// side := GetSide ( unit ) ;
21636: LD_ADDR_VAR 0 6
21640: PUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 255
21650: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
21651: LD_ADDR_VAR 0 5
21655: PUSH
21656: LD_EXP 72
21660: PPUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL 29114 0 2
21670: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21671: LD_EXP 73
21675: PUSH
21676: LD_VAR 0 5
21680: ARRAY
21681: PUSH
21682: LD_EXP 74
21686: GREATEREQUAL
21687: IFFALSE 21691
// exit ;
21689: GO 22006
// ComMoveXY ( unit , x , y ) ;
21691: LD_VAR 0 1
21695: PPUSH
21696: LD_VAR 0 2
21700: PPUSH
21701: LD_VAR 0 3
21705: PPUSH
21706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21710: LD_INT 35
21712: PPUSH
21713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21717: LD_VAR 0 1
21721: PPUSH
21722: LD_VAR 0 2
21726: PPUSH
21727: LD_VAR 0 3
21731: PPUSH
21732: CALL 61170 0 3
21736: NOT
21737: IFFALSE 21750
21739: PUSH
21740: LD_VAR 0 1
21744: PPUSH
21745: CALL_OW 314
21749: AND
21750: IFFALSE 21754
// exit ;
21752: GO 22006
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21754: LD_VAR 0 2
21758: PPUSH
21759: LD_VAR 0 3
21763: PPUSH
21764: CALL_OW 428
21768: PUSH
21769: LD_VAR 0 1
21773: EQUAL
21774: IFFALSE 21788
21776: PUSH
21777: LD_VAR 0 1
21781: PPUSH
21782: CALL_OW 314
21786: NOT
21787: AND
21788: IFFALSE 21710
// if MineAtPos ( x , y ) then
21790: LD_VAR 0 2
21794: PPUSH
21795: LD_VAR 0 3
21799: PPUSH
21800: CALL_OW 458
21804: IFFALSE 21808
// exit ;
21806: GO 22006
// if your_side = side then
21808: LD_OWVAR 2
21812: PUSH
21813: LD_VAR 0 6
21817: EQUAL
21818: IFFALSE 21837
// PlaySoundXY ( x , y , PlantMine ) ;
21820: LD_VAR 0 2
21824: PPUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: LD_STRING PlantMine
21832: PPUSH
21833: CALL_OW 366
// repeat wait ( 1 ) ;
21837: LD_INT 1
21839: PPUSH
21840: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
21844: LD_VAR 0 2
21848: PPUSH
21849: LD_VAR 0 3
21853: PPUSH
21854: LD_VAR 0 6
21858: PPUSH
21859: LD_INT 0
21861: PPUSH
21862: CALL_OW 454
21866: IFFALSE 21837
// if MineAtPos ( x , y ) then
21868: LD_VAR 0 2
21872: PPUSH
21873: LD_VAR 0 3
21877: PPUSH
21878: CALL_OW 458
21882: IFFALSE 21998
// begin for i in minerMinesList [ index ] do
21884: LD_ADDR_VAR 0 7
21888: PUSH
21889: LD_EXP 73
21893: PUSH
21894: LD_VAR 0 5
21898: ARRAY
21899: PUSH
21900: FOR_IN
21901: IFFALSE 21943
// if i [ 1 ] = x and i [ 2 ] = y then
21903: LD_VAR 0 7
21907: PUSH
21908: LD_INT 1
21910: ARRAY
21911: PUSH
21912: LD_VAR 0 2
21916: EQUAL
21917: IFFALSE 21935
21919: PUSH
21920: LD_VAR 0 7
21924: PUSH
21925: LD_INT 2
21927: ARRAY
21928: PUSH
21929: LD_VAR 0 3
21933: EQUAL
21934: AND
21935: IFFALSE 21941
// exit ;
21937: POP
21938: POP
21939: GO 22006
21941: GO 21900
21943: POP
21944: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21945: LD_ADDR_EXP 73
21949: PUSH
21950: LD_EXP 73
21954: PPUSH
21955: LD_VAR 0 5
21959: PUSH
21960: LD_EXP 73
21964: PUSH
21965: LD_VAR 0 5
21969: ARRAY
21970: PUSH
21971: LD_INT 1
21973: PLUS
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PPUSH
21979: LD_VAR 0 2
21983: PUSH
21984: LD_VAR 0 3
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PPUSH
21993: CALL 29331 0 3
21997: ST_TO_ADDR
// end ; result := true ;
21998: LD_ADDR_VAR 0 4
22002: PUSH
22003: LD_INT 1
22005: ST_TO_ADDR
// end ;
22006: LD_VAR 0 4
22010: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22011: LD_INT 0
22013: PPUSH
22014: PPUSH
22015: PPUSH
// if not unit in minersList then
22016: LD_VAR 0 1
22020: PUSH
22021: LD_EXP 72
22025: IN
22026: NOT
22027: IFFALSE 22031
// exit ;
22029: GO 22238
// index := GetElementIndex ( minersList , unit ) ;
22031: LD_ADDR_VAR 0 6
22035: PUSH
22036: LD_EXP 72
22040: PPUSH
22041: LD_VAR 0 1
22045: PPUSH
22046: CALL 29114 0 2
22050: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22051: LD_ADDR_VAR 0 5
22055: PUSH
22056: DOUBLE
22057: LD_EXP 73
22061: PUSH
22062: LD_VAR 0 6
22066: ARRAY
22067: INC
22068: ST_TO_ADDR
22069: LD_INT 1
22071: PUSH
22072: FOR_DOWNTO
22073: IFFALSE 22236
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22075: LD_EXP 73
22079: PUSH
22080: LD_VAR 0 6
22084: ARRAY
22085: PUSH
22086: LD_VAR 0 5
22090: ARRAY
22091: PUSH
22092: LD_INT 1
22094: ARRAY
22095: PPUSH
22096: LD_EXP 73
22100: PUSH
22101: LD_VAR 0 6
22105: ARRAY
22106: PUSH
22107: LD_VAR 0 5
22111: ARRAY
22112: PUSH
22113: LD_INT 2
22115: ARRAY
22116: PPUSH
22117: LD_VAR 0 2
22121: PPUSH
22122: LD_VAR 0 3
22126: PPUSH
22127: CALL_OW 298
22131: PUSH
22132: LD_INT 6
22134: LESS
22135: IFFALSE 22234
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22137: LD_EXP 73
22141: PUSH
22142: LD_VAR 0 6
22146: ARRAY
22147: PUSH
22148: LD_VAR 0 5
22152: ARRAY
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: PPUSH
22158: LD_EXP 73
22162: PUSH
22163: LD_VAR 0 6
22167: ARRAY
22168: PUSH
22169: LD_VAR 0 5
22173: ARRAY
22174: PUSH
22175: LD_INT 2
22177: ARRAY
22178: PPUSH
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 255
22188: PPUSH
22189: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22193: LD_ADDR_EXP 73
22197: PUSH
22198: LD_EXP 73
22202: PPUSH
22203: LD_VAR 0 6
22207: PPUSH
22208: LD_EXP 73
22212: PUSH
22213: LD_VAR 0 6
22217: ARRAY
22218: PPUSH
22219: LD_VAR 0 5
22223: PPUSH
22224: CALL_OW 3
22228: PPUSH
22229: CALL_OW 1
22233: ST_TO_ADDR
// end ; end ;
22234: GO 22072
22236: POP
22237: POP
// end ;
22238: LD_VAR 0 4
22242: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22243: LD_INT 0
22245: PPUSH
22246: PPUSH
22247: PPUSH
22248: PPUSH
22249: PPUSH
22250: PPUSH
22251: PPUSH
22252: PPUSH
22253: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22254: LD_VAR 0 1
22258: PPUSH
22259: CALL_OW 264
22263: PUSH
22264: LD_INT 81
22266: EQUAL
22267: NOT
22268: IFTRUE 22283
22270: PUSH
22271: LD_VAR 0 1
22275: PUSH
22276: LD_EXP 72
22280: IN
22281: NOT
22282: OR
22283: IFFALSE 22287
// exit ;
22285: GO 22613
// index := GetElementIndex ( minersList , unit ) ;
22287: LD_ADDR_VAR 0 6
22291: PUSH
22292: LD_EXP 72
22296: PPUSH
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL 29114 0 2
22306: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22307: LD_ADDR_VAR 0 8
22311: PUSH
22312: LD_EXP 74
22316: PUSH
22317: LD_EXP 73
22321: PUSH
22322: LD_VAR 0 6
22326: ARRAY
22327: MINUS
22328: ST_TO_ADDR
// if not minesFreeAmount then
22329: LD_VAR 0 8
22333: NOT
22334: IFFALSE 22338
// exit ;
22336: GO 22613
// tmp := [ ] ;
22338: LD_ADDR_VAR 0 7
22342: PUSH
22343: EMPTY
22344: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22345: LD_ADDR_VAR 0 5
22349: PUSH
22350: DOUBLE
22351: LD_INT 1
22353: DEC
22354: ST_TO_ADDR
22355: LD_VAR 0 8
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22560
// begin _d := rand ( 0 , 5 ) ;
22363: LD_ADDR_VAR 0 11
22367: PUSH
22368: LD_INT 0
22370: PPUSH
22371: LD_INT 5
22373: PPUSH
22374: CALL_OW 12
22378: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22379: LD_ADDR_VAR 0 12
22383: PUSH
22384: LD_INT 2
22386: PPUSH
22387: LD_INT 6
22389: PPUSH
22390: CALL_OW 12
22394: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22395: LD_ADDR_VAR 0 9
22399: PUSH
22400: LD_VAR 0 2
22404: PPUSH
22405: LD_VAR 0 11
22409: PPUSH
22410: LD_VAR 0 12
22414: PPUSH
22415: CALL_OW 272
22419: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22420: LD_ADDR_VAR 0 10
22424: PUSH
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_VAR 0 11
22434: PPUSH
22435: LD_VAR 0 12
22439: PPUSH
22440: CALL_OW 273
22444: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22445: LD_VAR 0 9
22449: PPUSH
22450: LD_VAR 0 10
22454: PPUSH
22455: CALL_OW 488
22459: IFFALSE 22483
22461: PUSH
22462: LD_VAR 0 9
22466: PUSH
22467: LD_VAR 0 10
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_VAR 0 7
22480: IN
22481: NOT
22482: AND
22483: IFFALSE 22502
22485: PUSH
22486: LD_VAR 0 9
22490: PPUSH
22491: LD_VAR 0 10
22495: PPUSH
22496: CALL_OW 458
22500: NOT
22501: AND
22502: IFFALSE 22544
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22504: LD_ADDR_VAR 0 7
22508: PUSH
22509: LD_VAR 0 7
22513: PPUSH
22514: LD_VAR 0 7
22518: PUSH
22519: LD_INT 1
22521: PLUS
22522: PPUSH
22523: LD_VAR 0 9
22527: PUSH
22528: LD_VAR 0 10
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PPUSH
22537: CALL_OW 1
22541: ST_TO_ADDR
22542: GO 22558
// i := i - 1 ;
22544: LD_ADDR_VAR 0 5
22548: PUSH
22549: LD_VAR 0 5
22553: PUSH
22554: LD_INT 1
22556: MINUS
22557: ST_TO_ADDR
// end ;
22558: GO 22360
22560: POP
22561: POP
// for i in tmp do
22562: LD_ADDR_VAR 0 5
22566: PUSH
22567: LD_VAR 0 7
22571: PUSH
22572: FOR_IN
22573: IFFALSE 22611
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22575: LD_VAR 0 1
22579: PPUSH
22580: LD_VAR 0 5
22584: PUSH
22585: LD_INT 1
22587: ARRAY
22588: PPUSH
22589: LD_VAR 0 5
22593: PUSH
22594: LD_INT 2
22596: ARRAY
22597: PPUSH
22598: CALL 21604 0 3
22602: NOT
22603: IFFALSE 22609
// exit ;
22605: POP
22606: POP
22607: GO 22613
22609: GO 22572
22611: POP
22612: POP
// end ;
22613: LD_VAR 0 4
22617: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
22623: PPUSH
22624: PPUSH
22625: PPUSH
22626: PPUSH
22627: PPUSH
22628: PPUSH
// if GetClass ( unit ) <> class_sniper then
22629: LD_VAR 0 1
22633: PPUSH
22634: CALL_OW 257
22638: PUSH
22639: LD_INT 5
22641: NONEQUAL
22642: IFFALSE 22646
// exit ;
22644: GO 23116
// dist := 8 ;
22646: LD_ADDR_VAR 0 5
22650: PUSH
22651: LD_INT 8
22653: ST_TO_ADDR
// viewRange := 12 ;
22654: LD_ADDR_VAR 0 8
22658: PUSH
22659: LD_INT 12
22661: ST_TO_ADDR
// side := GetSide ( unit ) ;
22662: LD_ADDR_VAR 0 6
22666: PUSH
22667: LD_VAR 0 1
22671: PPUSH
22672: CALL_OW 255
22676: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22677: LD_INT 61
22679: PPUSH
22680: LD_VAR 0 6
22684: PPUSH
22685: CALL_OW 321
22689: PUSH
22690: LD_INT 2
22692: EQUAL
22693: IFFALSE 22703
// viewRange := 16 ;
22695: LD_ADDR_VAR 0 8
22699: PUSH
22700: LD_INT 16
22702: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22703: LD_VAR 0 1
22707: PPUSH
22708: LD_VAR 0 2
22712: PPUSH
22713: LD_VAR 0 3
22717: PPUSH
22718: CALL_OW 297
22722: PUSH
22723: LD_VAR 0 5
22727: GREATER
22728: IFFALSE 22807
// begin ComMoveXY ( unit , x , y ) ;
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_VAR 0 2
22739: PPUSH
22740: LD_VAR 0 3
22744: PPUSH
22745: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22749: LD_INT 35
22751: PPUSH
22752: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22756: LD_VAR 0 1
22760: PPUSH
22761: LD_VAR 0 2
22765: PPUSH
22766: LD_VAR 0 3
22770: PPUSH
22771: CALL 61170 0 3
22775: NOT
22776: IFFALSE 22780
// exit ;
22778: GO 23116
// until GetDistUnitXY ( unit , x , y ) < dist ;
22780: LD_VAR 0 1
22784: PPUSH
22785: LD_VAR 0 2
22789: PPUSH
22790: LD_VAR 0 3
22794: PPUSH
22795: CALL_OW 297
22799: PUSH
22800: LD_VAR 0 5
22804: LESS
22805: IFFALSE 22749
// end ; ComTurnXY ( unit , x , y ) ;
22807: LD_VAR 0 1
22811: PPUSH
22812: LD_VAR 0 2
22816: PPUSH
22817: LD_VAR 0 3
22821: PPUSH
22822: CALL_OW 118
// repeat if Multiplayer then
22826: LD_OWVAR 4
22830: IFFALSE 22841
// wait ( 35 ) else
22832: LD_INT 35
22834: PPUSH
22835: CALL_OW 67
22839: GO 22848
// wait ( 5 ) ;
22841: LD_INT 5
22843: PPUSH
22844: CALL_OW 67
// _d := GetDir ( unit ) ;
22848: LD_ADDR_VAR 0 11
22852: PUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 254
22862: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
22863: LD_ADDR_VAR 0 7
22867: PUSH
22868: LD_VAR 0 1
22872: PPUSH
22873: CALL_OW 250
22877: PPUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL_OW 251
22887: PPUSH
22888: LD_VAR 0 2
22892: PPUSH
22893: LD_VAR 0 3
22897: PPUSH
22898: CALL 63806 0 4
22902: ST_TO_ADDR
// until dir = _d ;
22903: LD_VAR 0 7
22907: PUSH
22908: LD_VAR 0 11
22912: EQUAL
22913: IFFALSE 22826
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
22915: LD_ADDR_VAR 0 9
22919: PUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 250
22929: PPUSH
22930: LD_VAR 0 7
22934: PPUSH
22935: LD_VAR 0 5
22939: PPUSH
22940: CALL_OW 272
22944: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
22945: LD_ADDR_VAR 0 10
22949: PUSH
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 251
22959: PPUSH
22960: LD_VAR 0 7
22964: PPUSH
22965: LD_VAR 0 5
22969: PPUSH
22970: CALL_OW 273
22974: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22975: LD_VAR 0 9
22979: PPUSH
22980: LD_VAR 0 10
22984: PPUSH
22985: CALL_OW 488
22989: NOT
22990: IFFALSE 22994
// exit ;
22992: GO 23116
// ComAnimCustom ( unit , 1 ) ;
22994: LD_VAR 0 1
22998: PPUSH
22999: LD_INT 1
23001: PPUSH
23002: CALL_OW 592
// p := 0 ;
23006: LD_ADDR_VAR 0 12
23010: PUSH
23011: LD_INT 0
23013: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23014: LD_VAR 0 9
23018: PPUSH
23019: LD_VAR 0 10
23023: PPUSH
23024: LD_VAR 0 6
23028: PPUSH
23029: LD_VAR 0 8
23033: PPUSH
23034: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23038: LD_INT 35
23040: PPUSH
23041: CALL_OW 67
// p := Inc ( p ) ;
23045: LD_ADDR_VAR 0 12
23049: PUSH
23050: LD_VAR 0 12
23054: PPUSH
23055: CALL 63762 0 1
23059: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23060: LD_VAR 0 12
23064: PUSH
23065: LD_INT 3
23067: EQUAL
23068: IFTRUE 23082
23070: PUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 302
23080: NOT
23081: OR
23082: IFTRUE 23095
23084: PUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: CALL_OW 301
23094: OR
23095: IFFALSE 23038
// RemoveSeeing ( _x , _y , side ) ;
23097: LD_VAR 0 9
23101: PPUSH
23102: LD_VAR 0 10
23106: PPUSH
23107: LD_VAR 0 6
23111: PPUSH
23112: CALL_OW 331
// end ;
23116: LD_VAR 0 4
23120: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23121: LD_INT 0
23123: PPUSH
23124: PPUSH
23125: PPUSH
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
23133: PPUSH
// if not unit then
23134: LD_VAR 0 1
23138: NOT
23139: IFFALSE 23143
// exit ;
23141: GO 23414
// side := GetSide ( unit ) ;
23143: LD_ADDR_VAR 0 3
23147: PUSH
23148: LD_VAR 0 1
23152: PPUSH
23153: CALL_OW 255
23157: ST_TO_ADDR
// x := GetX ( unit ) ;
23158: LD_ADDR_VAR 0 5
23162: PUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 250
23172: ST_TO_ADDR
// y := GetY ( unit ) ;
23173: LD_ADDR_VAR 0 6
23177: PUSH
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 251
23187: ST_TO_ADDR
// r := 8 ;
23188: LD_ADDR_VAR 0 4
23192: PUSH
23193: LD_INT 8
23195: ST_TO_ADDR
// if x - r < 0 then
23196: LD_VAR 0 5
23200: PUSH
23201: LD_VAR 0 4
23205: MINUS
23206: PUSH
23207: LD_INT 0
23209: LESS
23210: IFFALSE 23222
// min_x := 0 else
23212: LD_ADDR_VAR 0 7
23216: PUSH
23217: LD_INT 0
23219: ST_TO_ADDR
23220: GO 23238
// min_x := x - r ;
23222: LD_ADDR_VAR 0 7
23226: PUSH
23227: LD_VAR 0 5
23231: PUSH
23232: LD_VAR 0 4
23236: MINUS
23237: ST_TO_ADDR
// if y - r < 0 then
23238: LD_VAR 0 6
23242: PUSH
23243: LD_VAR 0 4
23247: MINUS
23248: PUSH
23249: LD_INT 0
23251: LESS
23252: IFFALSE 23264
// min_y := 0 else
23254: LD_ADDR_VAR 0 8
23258: PUSH
23259: LD_INT 0
23261: ST_TO_ADDR
23262: GO 23280
// min_y := y - r ;
23264: LD_ADDR_VAR 0 8
23268: PUSH
23269: LD_VAR 0 6
23273: PUSH
23274: LD_VAR 0 4
23278: MINUS
23279: ST_TO_ADDR
// max_x := x + r ;
23280: LD_ADDR_VAR 0 9
23284: PUSH
23285: LD_VAR 0 5
23289: PUSH
23290: LD_VAR 0 4
23294: PLUS
23295: ST_TO_ADDR
// max_y := y + r ;
23296: LD_ADDR_VAR 0 10
23300: PUSH
23301: LD_VAR 0 6
23305: PUSH
23306: LD_VAR 0 4
23310: PLUS
23311: ST_TO_ADDR
// for _x = min_x to max_x do
23312: LD_ADDR_VAR 0 11
23316: PUSH
23317: DOUBLE
23318: LD_VAR 0 7
23322: DEC
23323: ST_TO_ADDR
23324: LD_VAR 0 9
23328: PUSH
23329: FOR_TO
23330: IFFALSE 23412
// for _y = min_y to max_y do
23332: LD_ADDR_VAR 0 12
23336: PUSH
23337: DOUBLE
23338: LD_VAR 0 8
23342: DEC
23343: ST_TO_ADDR
23344: LD_VAR 0 10
23348: PUSH
23349: FOR_TO
23350: IFFALSE 23408
// begin if not ValidHex ( _x , _y ) then
23352: LD_VAR 0 11
23356: PPUSH
23357: LD_VAR 0 12
23361: PPUSH
23362: CALL_OW 488
23366: NOT
23367: IFFALSE 23371
// continue ;
23369: GO 23349
// if MineAtPos ( _x , _y ) then
23371: LD_VAR 0 11
23375: PPUSH
23376: LD_VAR 0 12
23380: PPUSH
23381: CALL_OW 458
23385: IFFALSE 23406
// ViewMineAtPos ( _x , _y , side ) ;
23387: LD_VAR 0 11
23391: PPUSH
23392: LD_VAR 0 12
23396: PPUSH
23397: LD_VAR 0 3
23401: PPUSH
23402: CALL_OW 457
// end ;
23406: GO 23349
23408: POP
23409: POP
23410: GO 23329
23412: POP
23413: POP
// end ;
23414: LD_VAR 0 2
23418: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
23419: LD_INT 0
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
23426: PPUSH
23427: PPUSH
// if not units then
23428: LD_VAR 0 1
23432: NOT
23433: IFFALSE 23437
// exit ;
23435: GO 23901
// scaners := [ ] ;
23437: LD_ADDR_VAR 0 6
23441: PUSH
23442: EMPTY
23443: ST_TO_ADDR
// for i in units do
23444: LD_ADDR_VAR 0 3
23448: PUSH
23449: LD_VAR 0 1
23453: PUSH
23454: FOR_IN
23455: IFFALSE 23612
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
23457: LD_VAR 0 3
23461: PPUSH
23462: CALL_OW 264
23466: PUSH
23467: LD_INT 11
23469: NONEQUAL
23470: IFTRUE 23484
23472: PUSH
23473: LD_VAR 0 3
23477: PPUSH
23478: CALL_OW 302
23482: NOT
23483: OR
23484: IFTRUE 23501
23486: PUSH
23487: LD_VAR 0 3
23491: PPUSH
23492: CALL_OW 110
23496: PUSH
23497: LD_INT 502
23499: EQUAL
23500: OR
23501: IFFALSE 23505
// continue ;
23503: GO 23454
// ComStop ( i ) ;
23505: LD_VAR 0 3
23509: PPUSH
23510: CALL_OW 141
// x := GetX ( i ) ;
23514: LD_ADDR_VAR 0 4
23518: PUSH
23519: LD_VAR 0 3
23523: PPUSH
23524: CALL_OW 250
23528: ST_TO_ADDR
// y := GetY ( i ) ;
23529: LD_ADDR_VAR 0 5
23533: PUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: CALL_OW 251
23543: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23544: LD_VAR 0 3
23548: PPUSH
23549: CALL_OW 255
23553: PUSH
23554: LD_OWVAR 2
23558: EQUAL
23559: IFFALSE 23578
// PlaySoundXY ( x , y , mineDetector ) ;
23561: LD_VAR 0 4
23565: PPUSH
23566: LD_VAR 0 5
23570: PPUSH
23571: LD_STRING mineDetector
23573: PPUSH
23574: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23578: LD_ADDR_VAR 0 6
23582: PUSH
23583: LD_VAR 0 6
23587: PPUSH
23588: LD_VAR 0 3
23592: PPUSH
23593: CALL 62389 0 2
23597: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
23598: LD_VAR 0 3
23602: PPUSH
23603: LD_INT 502
23605: PPUSH
23606: CALL_OW 109
// end ;
23610: GO 23454
23612: POP
23613: POP
// if not scaners then
23614: LD_VAR 0 6
23618: NOT
23619: IFFALSE 23623
// exit ;
23621: GO 23901
// wait ( 3 ) ;
23623: LD_INT 3
23625: PPUSH
23626: CALL_OW 67
// timer := 6 ;
23630: LD_ADDR_VAR 0 7
23634: PUSH
23635: LD_INT 6
23637: ST_TO_ADDR
// repeat for i in scaners do
23638: LD_ADDR_VAR 0 3
23642: PUSH
23643: LD_VAR 0 6
23647: PUSH
23648: FOR_IN
23649: IFFALSE 23799
// begin side := GetSide ( i ) ;
23651: LD_ADDR_VAR 0 8
23655: PUSH
23656: LD_VAR 0 3
23660: PPUSH
23661: CALL_OW 255
23665: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
23666: LD_VAR 0 3
23670: PPUSH
23671: CALL_OW 302
23675: NOT
23676: IFTRUE 23689
23678: PUSH
23679: LD_VAR 0 3
23683: PPUSH
23684: CALL_OW 314
23688: OR
23689: IFTRUE 23720
23691: PUSH
23692: LD_VAR 0 3
23696: PPUSH
23697: CALL_OW 263
23701: PUSH
23702: LD_INT 1
23704: EQUAL
23705: IFFALSE 23719
23707: PUSH
23708: LD_VAR 0 3
23712: PPUSH
23713: CALL_OW 311
23717: NOT
23718: AND
23719: OR
23720: IFFALSE 23764
// begin SetUnitDisplayNumber ( i , 0 ) ;
23722: LD_VAR 0 3
23726: PPUSH
23727: LD_INT 0
23729: PPUSH
23730: CALL_OW 505
// SetTag ( i , 0 ) ;
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 0
23741: PPUSH
23742: CALL_OW 109
// scaners := scaners diff i ;
23746: LD_ADDR_VAR 0 6
23750: PUSH
23751: LD_VAR 0 6
23755: PUSH
23756: LD_VAR 0 3
23760: DIFF
23761: ST_TO_ADDR
// continue ;
23762: GO 23648
// end ; if side in [ your_side , 9 ] then
23764: LD_VAR 0 8
23768: PUSH
23769: LD_OWVAR 2
23773: PUSH
23774: LD_INT 9
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: IN
23781: IFFALSE 23797
// SetUnitDisplayNumber ( i , timer ) ;
23783: LD_VAR 0 3
23787: PPUSH
23788: LD_VAR 0 7
23792: PPUSH
23793: CALL_OW 505
// end ;
23797: GO 23648
23799: POP
23800: POP
// if not scaners then
23801: LD_VAR 0 6
23805: NOT
23806: IFFALSE 23810
// exit ;
23808: GO 23901
// timer := Dec ( timer ) ;
23810: LD_ADDR_VAR 0 7
23814: PUSH
23815: LD_VAR 0 7
23819: PPUSH
23820: CALL 63784 0 1
23824: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23825: LD_INT 35
23827: PPUSH
23828: CALL_OW 67
// until timer = 0 ;
23832: LD_VAR 0 7
23836: PUSH
23837: LD_INT 0
23839: EQUAL
23840: IFFALSE 23638
// if not scaners then
23842: LD_VAR 0 6
23846: NOT
23847: IFFALSE 23851
// exit ;
23849: GO 23901
// for i in scaners do
23851: LD_ADDR_VAR 0 3
23855: PUSH
23856: LD_VAR 0 6
23860: PUSH
23861: FOR_IN
23862: IFFALSE 23899
// begin SetUnitDisplayNumber ( i , 0 ) ;
23864: LD_VAR 0 3
23868: PPUSH
23869: LD_INT 0
23871: PPUSH
23872: CALL_OW 505
// SetTag ( i , 0 ) ;
23876: LD_VAR 0 3
23880: PPUSH
23881: LD_INT 0
23883: PPUSH
23884: CALL_OW 109
// RevealDetectorMine ( i ) ;
23888: LD_VAR 0 3
23892: PPUSH
23893: CALL 23121 0 1
// end ;
23897: GO 23861
23899: POP
23900: POP
// end ;
23901: LD_VAR 0 2
23905: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
23906: LD_INT 0
23908: PPUSH
// if p1 = mine_detector_mode then
23909: LD_VAR 0 2
23913: PUSH
23914: LD_INT 103
23916: EQUAL
23917: IFFALSE 23928
// DetectMine ( units ) ;
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL 23419 0 1
// end ; end_of_file
23928: LD_VAR 0 7
23932: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
23933: LD_VAR 0 1
23937: PPUSH
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_VAR 0 3
23947: PPUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: LD_VAR 0 5
23957: PPUSH
23958: LD_VAR 0 6
23962: PPUSH
23963: CALL 1552 0 6
// end ;
23967: PPOPN 6
23969: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
23970: LD_INT 0
23972: PPUSH
// begin if not units then
23973: LD_VAR 0 1
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24016
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
23982: LD_VAR 0 1
23986: PPUSH
23987: LD_VAR 0 2
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_VAR 0 4
24001: PPUSH
24002: LD_VAR 0 5
24006: PPUSH
24007: LD_VAR 0 6
24011: PPUSH
24012: CALL 23906 0 6
// end ;
24016: PPOPN 7
24018: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
24019: CALL 1432 0 0
// end ; end_of_file
24023: PPOPN 1
24025: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
24026: LD_VAR 0 1
24030: PUSH
24031: LD_INT 200
24033: DOUBLE
24034: GREATEREQUAL
24035: IFFALSE 24043
24037: LD_INT 299
24039: DOUBLE
24040: LESSEQUAL
24041: IFTRUE 24045
24043: GO 24077
24045: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
24046: LD_VAR 0 1
24050: PPUSH
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 3
24060: PPUSH
24061: LD_VAR 0 4
24065: PPUSH
24066: LD_VAR 0 5
24070: PPUSH
24071: CALL 18209 0 5
24075: GO 24154
24077: LD_INT 300
24079: DOUBLE
24080: GREATEREQUAL
24081: IFFALSE 24089
24083: LD_INT 399
24085: DOUBLE
24086: LESSEQUAL
24087: IFTRUE 24091
24089: GO 24153
24091: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
24092: LD_VAR 0 1
24096: PPUSH
24097: LD_VAR 0 2
24101: PPUSH
24102: LD_VAR 0 3
24106: PPUSH
24107: LD_VAR 0 4
24111: PPUSH
24112: LD_VAR 0 5
24116: PPUSH
24117: LD_VAR 0 6
24121: PPUSH
24122: LD_VAR 0 7
24126: PPUSH
24127: LD_VAR 0 8
24131: PPUSH
24132: LD_VAR 0 9
24136: PPUSH
24137: LD_VAR 0 10
24141: PPUSH
24142: LD_VAR 0 11
24146: PPUSH
24147: CALL 14012 0 11
24151: GO 24154
24153: POP
// end ;
24154: PPOPN 11
24156: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
24157: LD_VAR 0 1
24161: PPUSH
24162: LD_VAR 0 2
24166: PPUSH
24167: LD_VAR 0 3
24171: PPUSH
24172: LD_VAR 0 4
24176: PPUSH
24177: LD_VAR 0 5
24181: PPUSH
24182: CALL 17509 0 5
// end ; end_of_file
24186: PPOPN 5
24188: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24189: LD_INT 0
24191: PPUSH
24192: PPUSH
// if exist_mode then
24193: LD_VAR 0 2
24197: IFFALSE 24243
// begin unit := CreateCharacter ( prefix & ident ) ;
24199: LD_ADDR_VAR 0 5
24203: PUSH
24204: LD_VAR 0 3
24208: PUSH
24209: LD_VAR 0 1
24213: STR
24214: PPUSH
24215: CALL_OW 34
24219: ST_TO_ADDR
// if unit then
24220: LD_VAR 0 5
24224: IFFALSE 24241
// DeleteCharacters ( prefix & ident ) ;
24226: LD_VAR 0 3
24230: PUSH
24231: LD_VAR 0 1
24235: STR
24236: PPUSH
24237: CALL_OW 40
// end else
24241: GO 24258
// unit := NewCharacter ( ident ) ;
24243: LD_ADDR_VAR 0 5
24247: PUSH
24248: LD_VAR 0 1
24252: PPUSH
24253: CALL_OW 25
24257: ST_TO_ADDR
// result := unit ;
24258: LD_ADDR_VAR 0 4
24262: PUSH
24263: LD_VAR 0 5
24267: ST_TO_ADDR
// end ;
24268: LD_VAR 0 4
24272: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24273: LD_INT 0
24275: PPUSH
24276: PPUSH
// if exist_mode then
24277: LD_VAR 0 2
24281: IFFALSE 24306
// unit := CreateCharacter ( prefix & ident ) else
24283: LD_ADDR_VAR 0 5
24287: PUSH
24288: LD_VAR 0 3
24292: PUSH
24293: LD_VAR 0 1
24297: STR
24298: PPUSH
24299: CALL_OW 34
24303: ST_TO_ADDR
24304: GO 24321
// unit := NewCharacter ( ident ) ;
24306: LD_ADDR_VAR 0 5
24310: PUSH
24311: LD_VAR 0 1
24315: PPUSH
24316: CALL_OW 25
24320: ST_TO_ADDR
// result := unit ;
24321: LD_ADDR_VAR 0 4
24325: PUSH
24326: LD_VAR 0 5
24330: ST_TO_ADDR
// end ;
24331: LD_VAR 0 4
24335: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24336: LD_INT 0
24338: PPUSH
24339: PPUSH
// if not side or not nation then
24340: LD_VAR 0 1
24344: NOT
24345: IFTRUE 24354
24347: PUSH
24348: LD_VAR 0 2
24352: NOT
24353: OR
24354: IFFALSE 24358
// exit ;
24356: GO 25152
// case nation of nation_american :
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 1
24365: DOUBLE
24366: EQUAL
24367: IFTRUE 24371
24369: GO 24593
24371: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24372: LD_ADDR_VAR 0 4
24376: PUSH
24377: LD_INT 35
24379: PUSH
24380: LD_INT 45
24382: PUSH
24383: LD_INT 46
24385: PUSH
24386: LD_INT 47
24388: PUSH
24389: LD_INT 82
24391: PUSH
24392: LD_INT 83
24394: PUSH
24395: LD_INT 84
24397: PUSH
24398: LD_INT 85
24400: PUSH
24401: LD_INT 86
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 6
24412: PUSH
24413: LD_INT 15
24415: PUSH
24416: LD_INT 16
24418: PUSH
24419: LD_INT 7
24421: PUSH
24422: LD_INT 12
24424: PUSH
24425: LD_INT 13
24427: PUSH
24428: LD_INT 10
24430: PUSH
24431: LD_INT 14
24433: PUSH
24434: LD_INT 20
24436: PUSH
24437: LD_INT 21
24439: PUSH
24440: LD_INT 22
24442: PUSH
24443: LD_INT 25
24445: PUSH
24446: LD_INT 32
24448: PUSH
24449: LD_INT 27
24451: PUSH
24452: LD_INT 36
24454: PUSH
24455: LD_INT 69
24457: PUSH
24458: LD_INT 39
24460: PUSH
24461: LD_INT 34
24463: PUSH
24464: LD_INT 40
24466: PUSH
24467: LD_INT 48
24469: PUSH
24470: LD_INT 49
24472: PUSH
24473: LD_INT 50
24475: PUSH
24476: LD_INT 51
24478: PUSH
24479: LD_INT 52
24481: PUSH
24482: LD_INT 53
24484: PUSH
24485: LD_INT 54
24487: PUSH
24488: LD_INT 55
24490: PUSH
24491: LD_INT 56
24493: PUSH
24494: LD_INT 57
24496: PUSH
24497: LD_INT 58
24499: PUSH
24500: LD_INT 59
24502: PUSH
24503: LD_INT 60
24505: PUSH
24506: LD_INT 61
24508: PUSH
24509: LD_INT 62
24511: PUSH
24512: LD_INT 80
24514: PUSH
24515: LD_INT 82
24517: PUSH
24518: LD_INT 83
24520: PUSH
24521: LD_INT 84
24523: PUSH
24524: LD_INT 85
24526: PUSH
24527: LD_INT 86
24529: PUSH
24530: LD_INT 90
24532: PUSH
24533: LD_INT 93
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: ST_TO_ADDR
24591: GO 25074
24593: LD_INT 2
24595: DOUBLE
24596: EQUAL
24597: IFTRUE 24601
24599: GO 24835
24601: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24602: LD_ADDR_VAR 0 4
24606: PUSH
24607: LD_INT 35
24609: PUSH
24610: LD_INT 45
24612: PUSH
24613: LD_INT 46
24615: PUSH
24616: LD_INT 47
24618: PUSH
24619: LD_INT 82
24621: PUSH
24622: LD_INT 83
24624: PUSH
24625: LD_INT 84
24627: PUSH
24628: LD_INT 85
24630: PUSH
24631: LD_INT 87
24633: PUSH
24634: LD_INT 70
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: LD_INT 11
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 4
24648: PUSH
24649: LD_INT 5
24651: PUSH
24652: LD_INT 6
24654: PUSH
24655: LD_INT 15
24657: PUSH
24658: LD_INT 18
24660: PUSH
24661: LD_INT 7
24663: PUSH
24664: LD_INT 17
24666: PUSH
24667: LD_INT 8
24669: PUSH
24670: LD_INT 20
24672: PUSH
24673: LD_INT 21
24675: PUSH
24676: LD_INT 22
24678: PUSH
24679: LD_INT 72
24681: PUSH
24682: LD_INT 26
24684: PUSH
24685: LD_INT 69
24687: PUSH
24688: LD_INT 39
24690: PUSH
24691: LD_INT 40
24693: PUSH
24694: LD_INT 41
24696: PUSH
24697: LD_INT 42
24699: PUSH
24700: LD_INT 43
24702: PUSH
24703: LD_INT 48
24705: PUSH
24706: LD_INT 49
24708: PUSH
24709: LD_INT 50
24711: PUSH
24712: LD_INT 51
24714: PUSH
24715: LD_INT 52
24717: PUSH
24718: LD_INT 53
24720: PUSH
24721: LD_INT 54
24723: PUSH
24724: LD_INT 55
24726: PUSH
24727: LD_INT 56
24729: PUSH
24730: LD_INT 60
24732: PUSH
24733: LD_INT 61
24735: PUSH
24736: LD_INT 62
24738: PUSH
24739: LD_INT 66
24741: PUSH
24742: LD_INT 67
24744: PUSH
24745: LD_INT 68
24747: PUSH
24748: LD_INT 81
24750: PUSH
24751: LD_INT 82
24753: PUSH
24754: LD_INT 83
24756: PUSH
24757: LD_INT 84
24759: PUSH
24760: LD_INT 85
24762: PUSH
24763: LD_INT 87
24765: PUSH
24766: LD_INT 88
24768: PUSH
24769: LD_INT 92
24771: PUSH
24772: LD_INT 94
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: ST_TO_ADDR
24833: GO 25074
24835: LD_INT 3
24837: DOUBLE
24838: EQUAL
24839: IFTRUE 24843
24841: GO 25073
24843: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24844: LD_ADDR_VAR 0 4
24848: PUSH
24849: LD_INT 46
24851: PUSH
24852: LD_INT 47
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 82
24863: PUSH
24864: LD_INT 83
24866: PUSH
24867: LD_INT 84
24869: PUSH
24870: LD_INT 85
24872: PUSH
24873: LD_INT 86
24875: PUSH
24876: LD_INT 11
24878: PUSH
24879: LD_INT 9
24881: PUSH
24882: LD_INT 20
24884: PUSH
24885: LD_INT 19
24887: PUSH
24888: LD_INT 21
24890: PUSH
24891: LD_INT 24
24893: PUSH
24894: LD_INT 22
24896: PUSH
24897: LD_INT 25
24899: PUSH
24900: LD_INT 28
24902: PUSH
24903: LD_INT 29
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 31
24911: PUSH
24912: LD_INT 37
24914: PUSH
24915: LD_INT 38
24917: PUSH
24918: LD_INT 32
24920: PUSH
24921: LD_INT 27
24923: PUSH
24924: LD_INT 33
24926: PUSH
24927: LD_INT 69
24929: PUSH
24930: LD_INT 39
24932: PUSH
24933: LD_INT 34
24935: PUSH
24936: LD_INT 40
24938: PUSH
24939: LD_INT 71
24941: PUSH
24942: LD_INT 23
24944: PUSH
24945: LD_INT 44
24947: PUSH
24948: LD_INT 48
24950: PUSH
24951: LD_INT 49
24953: PUSH
24954: LD_INT 50
24956: PUSH
24957: LD_INT 51
24959: PUSH
24960: LD_INT 52
24962: PUSH
24963: LD_INT 53
24965: PUSH
24966: LD_INT 54
24968: PUSH
24969: LD_INT 55
24971: PUSH
24972: LD_INT 56
24974: PUSH
24975: LD_INT 57
24977: PUSH
24978: LD_INT 58
24980: PUSH
24981: LD_INT 59
24983: PUSH
24984: LD_INT 63
24986: PUSH
24987: LD_INT 64
24989: PUSH
24990: LD_INT 65
24992: PUSH
24993: LD_INT 82
24995: PUSH
24996: LD_INT 83
24998: PUSH
24999: LD_INT 84
25001: PUSH
25002: LD_INT 85
25004: PUSH
25005: LD_INT 86
25007: PUSH
25008: LD_INT 89
25010: PUSH
25011: LD_INT 91
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: ST_TO_ADDR
25071: GO 25074
25073: POP
// if state > - 1 and state < 3 then
25074: LD_VAR 0 3
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: GREATER
25083: IFFALSE 25095
25085: PUSH
25086: LD_VAR 0 3
25090: PUSH
25091: LD_INT 3
25093: LESS
25094: AND
25095: IFFALSE 25152
// for i in result do
25097: LD_ADDR_VAR 0 5
25101: PUSH
25102: LD_VAR 0 4
25106: PUSH
25107: FOR_IN
25108: IFFALSE 25150
// if GetTech ( i , side ) <> state then
25110: LD_VAR 0 5
25114: PPUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL_OW 321
25124: PUSH
25125: LD_VAR 0 3
25129: NONEQUAL
25130: IFFALSE 25148
// result := result diff i ;
25132: LD_ADDR_VAR 0 4
25136: PUSH
25137: LD_VAR 0 4
25141: PUSH
25142: LD_VAR 0 5
25146: DIFF
25147: ST_TO_ADDR
25148: GO 25107
25150: POP
25151: POP
// end ;
25152: LD_VAR 0 4
25156: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25157: LD_INT 0
25159: PPUSH
25160: PPUSH
25161: PPUSH
// result := true ;
25162: LD_ADDR_VAR 0 3
25166: PUSH
25167: LD_INT 1
25169: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25170: LD_ADDR_VAR 0 5
25174: PUSH
25175: LD_VAR 0 2
25179: PPUSH
25180: CALL_OW 480
25184: ST_TO_ADDR
// if not tmp then
25185: LD_VAR 0 5
25189: NOT
25190: IFFALSE 25194
// exit ;
25192: GO 25243
// for i in tmp do
25194: LD_ADDR_VAR 0 4
25198: PUSH
25199: LD_VAR 0 5
25203: PUSH
25204: FOR_IN
25205: IFFALSE 25241
// if GetTech ( i , side ) <> state_researched then
25207: LD_VAR 0 4
25211: PPUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 321
25221: PUSH
25222: LD_INT 2
25224: NONEQUAL
25225: IFFALSE 25239
// begin result := false ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_INT 0
25234: ST_TO_ADDR
// exit ;
25235: POP
25236: POP
25237: GO 25243
// end ;
25239: GO 25204
25241: POP
25242: POP
// end ;
25243: LD_VAR 0 3
25247: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25263: LD_VAR 0 1
25267: NOT
25268: IFTRUE 25285
25270: PUSH
25271: LD_VAR 0 1
25275: PPUSH
25276: CALL_OW 257
25280: PUSH
25281: LD_INT 9
25283: NONEQUAL
25284: OR
25285: IFFALSE 25289
// exit ;
25287: GO 25868
// side := GetSide ( unit ) ;
25289: LD_ADDR_VAR 0 9
25293: PUSH
25294: LD_VAR 0 1
25298: PPUSH
25299: CALL_OW 255
25303: ST_TO_ADDR
// tech_space := tech_spacanom ;
25304: LD_ADDR_VAR 0 12
25308: PUSH
25309: LD_INT 29
25311: ST_TO_ADDR
// tech_time := tech_taurad ;
25312: LD_ADDR_VAR 0 13
25316: PUSH
25317: LD_INT 28
25319: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25320: LD_ADDR_VAR 0 11
25324: PUSH
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 310
25334: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25335: LD_VAR 0 11
25339: PPUSH
25340: CALL_OW 247
25344: PUSH
25345: LD_INT 2
25347: EQUAL
25348: IFFALSE 25352
// exit ;
25350: GO 25868
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25352: LD_ADDR_VAR 0 8
25356: PUSH
25357: LD_INT 81
25359: PUSH
25360: LD_VAR 0 9
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 3
25371: PUSH
25372: LD_INT 21
25374: PUSH
25375: LD_INT 3
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 8
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25868
// if in_unit then
25404: LD_VAR 0 11
25408: IFFALSE 25432
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25410: LD_ADDR_VAR 0 10
25414: PUSH
25415: LD_VAR 0 8
25419: PPUSH
25420: LD_VAR 0 11
25424: PPUSH
25425: CALL_OW 74
25429: ST_TO_ADDR
25430: GO 25452
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25432: LD_ADDR_VAR 0 10
25436: PUSH
25437: LD_VAR 0 8
25441: PPUSH
25442: LD_VAR 0 1
25446: PPUSH
25447: CALL_OW 74
25451: ST_TO_ADDR
// if not enemy then
25452: LD_VAR 0 10
25456: NOT
25457: IFFALSE 25461
// exit ;
25459: GO 25868
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25461: LD_VAR 0 11
25465: IFFALSE 25487
25467: PUSH
25468: LD_VAR 0 11
25472: PPUSH
25473: LD_VAR 0 10
25477: PPUSH
25478: CALL_OW 296
25482: PUSH
25483: LD_INT 13
25485: GREATER
25486: AND
25487: IFTRUE 25509
25489: PUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: LD_VAR 0 10
25499: PPUSH
25500: CALL_OW 296
25504: PUSH
25505: LD_INT 12
25507: GREATER
25508: OR
25509: IFFALSE 25513
// exit ;
25511: GO 25868
// missile := [ 1 ] ;
25513: LD_ADDR_VAR 0 14
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: EMPTY
25522: LIST
25523: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25524: LD_VAR 0 9
25528: PPUSH
25529: LD_VAR 0 12
25533: PPUSH
25534: CALL_OW 325
25538: IFFALSE 25567
// missile := Replace ( missile , missile + 1 , 2 ) ;
25540: LD_ADDR_VAR 0 14
25544: PUSH
25545: LD_VAR 0 14
25549: PPUSH
25550: LD_VAR 0 14
25554: PUSH
25555: LD_INT 1
25557: PLUS
25558: PPUSH
25559: LD_INT 2
25561: PPUSH
25562: CALL_OW 1
25566: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25567: LD_VAR 0 9
25571: PPUSH
25572: LD_VAR 0 13
25576: PPUSH
25577: CALL_OW 325
25581: IFFALSE 25605
25583: PUSH
25584: LD_VAR 0 10
25588: PPUSH
25589: CALL_OW 255
25593: PPUSH
25594: LD_VAR 0 13
25598: PPUSH
25599: CALL_OW 325
25603: NOT
25604: AND
25605: IFFALSE 25634
// missile := Replace ( missile , missile + 1 , 3 ) ;
25607: LD_ADDR_VAR 0 14
25611: PUSH
25612: LD_VAR 0 14
25616: PPUSH
25617: LD_VAR 0 14
25621: PUSH
25622: LD_INT 1
25624: PLUS
25625: PPUSH
25626: LD_INT 3
25628: PPUSH
25629: CALL_OW 1
25633: ST_TO_ADDR
// if missile < 2 then
25634: LD_VAR 0 14
25638: PUSH
25639: LD_INT 2
25641: LESS
25642: IFFALSE 25646
// exit ;
25644: GO 25868
// x := GetX ( enemy ) ;
25646: LD_ADDR_VAR 0 4
25650: PUSH
25651: LD_VAR 0 10
25655: PPUSH
25656: CALL_OW 250
25660: ST_TO_ADDR
// y := GetY ( enemy ) ;
25661: LD_ADDR_VAR 0 5
25665: PUSH
25666: LD_VAR 0 10
25670: PPUSH
25671: CALL_OW 251
25675: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25676: LD_ADDR_VAR 0 6
25680: PUSH
25681: LD_VAR 0 4
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PPUSH
25690: LD_INT 1
25692: PPUSH
25693: CALL_OW 12
25697: PLUS
25698: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25699: LD_ADDR_VAR 0 7
25703: PUSH
25704: LD_VAR 0 5
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PPUSH
25713: LD_INT 1
25715: PPUSH
25716: CALL_OW 12
25720: PLUS
25721: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25722: LD_VAR 0 6
25726: PPUSH
25727: LD_VAR 0 7
25731: PPUSH
25732: CALL_OW 488
25736: NOT
25737: IFFALSE 25759
// begin _x := x ;
25739: LD_ADDR_VAR 0 6
25743: PUSH
25744: LD_VAR 0 4
25748: ST_TO_ADDR
// _y := y ;
25749: LD_ADDR_VAR 0 7
25753: PUSH
25754: LD_VAR 0 5
25758: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25759: LD_ADDR_VAR 0 3
25763: PUSH
25764: LD_INT 1
25766: PPUSH
25767: LD_VAR 0 14
25771: PPUSH
25772: CALL_OW 12
25776: ST_TO_ADDR
// case i of 1 :
25777: LD_VAR 0 3
25781: PUSH
25782: LD_INT 1
25784: DOUBLE
25785: EQUAL
25786: IFTRUE 25790
25788: GO 25807
25790: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25791: LD_VAR 0 1
25795: PPUSH
25796: LD_VAR 0 10
25800: PPUSH
25801: CALL_OW 115
25805: GO 25868
25807: LD_INT 2
25809: DOUBLE
25810: EQUAL
25811: IFTRUE 25815
25813: GO 25837
25815: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25816: LD_VAR 0 1
25820: PPUSH
25821: LD_VAR 0 6
25825: PPUSH
25826: LD_VAR 0 7
25830: PPUSH
25831: CALL_OW 153
25835: GO 25868
25837: LD_INT 3
25839: DOUBLE
25840: EQUAL
25841: IFTRUE 25845
25843: GO 25867
25845: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25846: LD_VAR 0 1
25850: PPUSH
25851: LD_VAR 0 6
25855: PPUSH
25856: LD_VAR 0 7
25860: PPUSH
25861: CALL_OW 154
25865: GO 25868
25867: POP
// end ;
25868: LD_VAR 0 2
25872: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25873: LD_INT 0
25875: PPUSH
25876: PPUSH
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
// if not unit or not building then
25881: LD_VAR 0 1
25885: NOT
25886: IFTRUE 25895
25888: PUSH
25889: LD_VAR 0 2
25893: NOT
25894: OR
25895: IFFALSE 25899
// exit ;
25897: GO 26057
// x := GetX ( building ) ;
25899: LD_ADDR_VAR 0 5
25903: PUSH
25904: LD_VAR 0 2
25908: PPUSH
25909: CALL_OW 250
25913: ST_TO_ADDR
// y := GetY ( building ) ;
25914: LD_ADDR_VAR 0 6
25918: PUSH
25919: LD_VAR 0 2
25923: PPUSH
25924: CALL_OW 251
25928: ST_TO_ADDR
// for i := 0 to 5 do
25929: LD_ADDR_VAR 0 4
25933: PUSH
25934: DOUBLE
25935: LD_INT 0
25937: DEC
25938: ST_TO_ADDR
25939: LD_INT 5
25941: PUSH
25942: FOR_TO
25943: IFFALSE 26055
// begin _x := ShiftX ( x , i , 3 ) ;
25945: LD_ADDR_VAR 0 7
25949: PUSH
25950: LD_VAR 0 5
25954: PPUSH
25955: LD_VAR 0 4
25959: PPUSH
25960: LD_INT 3
25962: PPUSH
25963: CALL_OW 272
25967: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25968: LD_ADDR_VAR 0 8
25972: PUSH
25973: LD_VAR 0 6
25977: PPUSH
25978: LD_VAR 0 4
25982: PPUSH
25983: LD_INT 3
25985: PPUSH
25986: CALL_OW 273
25990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25991: LD_VAR 0 7
25995: PPUSH
25996: LD_VAR 0 8
26000: PPUSH
26001: CALL_OW 488
26005: NOT
26006: IFFALSE 26010
// continue ;
26008: GO 25942
// if HexInfo ( _x , _y ) = 0 then
26010: LD_VAR 0 7
26014: PPUSH
26015: LD_VAR 0 8
26019: PPUSH
26020: CALL_OW 428
26024: PUSH
26025: LD_INT 0
26027: EQUAL
26028: IFFALSE 26053
// begin ComMoveXY ( unit , _x , _y ) ;
26030: LD_VAR 0 1
26034: PPUSH
26035: LD_VAR 0 7
26039: PPUSH
26040: LD_VAR 0 8
26044: PPUSH
26045: CALL_OW 111
// exit ;
26049: POP
26050: POP
26051: GO 26057
// end ; end ;
26053: GO 25942
26055: POP
26056: POP
// end ;
26057: LD_VAR 0 3
26061: RET
// export function ScanBase ( side , base_area ) ; begin
26062: LD_INT 0
26064: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26065: LD_ADDR_VAR 0 3
26069: PUSH
26070: LD_VAR 0 2
26074: PPUSH
26075: LD_INT 81
26077: PUSH
26078: LD_VAR 0 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PPUSH
26087: CALL_OW 70
26091: ST_TO_ADDR
// end ;
26092: LD_VAR 0 3
26096: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26097: LD_INT 0
26099: PPUSH
26100: PPUSH
26101: PPUSH
26102: PPUSH
// result := false ;
26103: LD_ADDR_VAR 0 2
26107: PUSH
26108: LD_INT 0
26110: ST_TO_ADDR
// side := GetSide ( unit ) ;
26111: LD_ADDR_VAR 0 3
26115: PUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 255
26125: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26126: LD_ADDR_VAR 0 4
26130: PUSH
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 248
26140: ST_TO_ADDR
// case nat of 1 :
26141: LD_VAR 0 4
26145: PUSH
26146: LD_INT 1
26148: DOUBLE
26149: EQUAL
26150: IFTRUE 26154
26152: GO 26165
26154: POP
// tech := tech_lassight ; 2 :
26155: LD_ADDR_VAR 0 5
26159: PUSH
26160: LD_INT 12
26162: ST_TO_ADDR
26163: GO 26204
26165: LD_INT 2
26167: DOUBLE
26168: EQUAL
26169: IFTRUE 26173
26171: GO 26184
26173: POP
// tech := tech_mortar ; 3 :
26174: LD_ADDR_VAR 0 5
26178: PUSH
26179: LD_INT 41
26181: ST_TO_ADDR
26182: GO 26204
26184: LD_INT 3
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26203
26192: POP
// tech := tech_bazooka ; end ;
26193: LD_ADDR_VAR 0 5
26197: PUSH
26198: LD_INT 44
26200: ST_TO_ADDR
26201: GO 26204
26203: POP
// if Researched ( side , tech ) then
26204: LD_VAR 0 3
26208: PPUSH
26209: LD_VAR 0 5
26213: PPUSH
26214: CALL_OW 325
26218: IFFALSE 26245
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: LD_INT 5
26227: PUSH
26228: LD_INT 8
26230: PUSH
26231: LD_INT 9
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: PUSH
26239: LD_VAR 0 4
26243: ARRAY
26244: ST_TO_ADDR
// end ;
26245: LD_VAR 0 2
26249: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26250: LD_INT 0
26252: PPUSH
26253: PPUSH
26254: PPUSH
// if not mines then
26255: LD_VAR 0 2
26259: NOT
26260: IFFALSE 26264
// exit ;
26262: GO 26408
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26264: LD_ADDR_VAR 0 5
26268: PUSH
26269: LD_INT 81
26271: PUSH
26272: LD_VAR 0 1
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 3
26283: PUSH
26284: LD_INT 21
26286: PUSH
26287: LD_INT 3
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 69
26306: ST_TO_ADDR
// for i in mines do
26307: LD_ADDR_VAR 0 4
26311: PUSH
26312: LD_VAR 0 2
26316: PUSH
26317: FOR_IN
26318: IFFALSE 26406
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26320: LD_VAR 0 4
26324: PUSH
26325: LD_INT 1
26327: ARRAY
26328: PPUSH
26329: LD_VAR 0 4
26333: PUSH
26334: LD_INT 2
26336: ARRAY
26337: PPUSH
26338: CALL_OW 458
26342: NOT
26343: IFFALSE 26347
// continue ;
26345: GO 26317
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26347: LD_VAR 0 4
26351: PUSH
26352: LD_INT 1
26354: ARRAY
26355: PPUSH
26356: LD_VAR 0 4
26360: PUSH
26361: LD_INT 2
26363: ARRAY
26364: PPUSH
26365: CALL_OW 428
26369: PUSH
26370: LD_VAR 0 5
26374: IN
26375: IFFALSE 26404
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26377: LD_VAR 0 4
26381: PUSH
26382: LD_INT 1
26384: ARRAY
26385: PPUSH
26386: LD_VAR 0 4
26390: PUSH
26391: LD_INT 2
26393: ARRAY
26394: PPUSH
26395: LD_VAR 0 1
26399: PPUSH
26400: CALL_OW 456
// end ;
26404: GO 26317
26406: POP
26407: POP
// end ;
26408: LD_VAR 0 3
26412: RET
// export function Count ( array ) ; begin
26413: LD_INT 0
26415: PPUSH
// result := array + 0 ;
26416: LD_ADDR_VAR 0 2
26420: PUSH
26421: LD_VAR 0 1
26425: PUSH
26426: LD_INT 0
26428: PLUS
26429: ST_TO_ADDR
// end ;
26430: LD_VAR 0 2
26434: RET
// export function IsEmpty ( building ) ; begin
26435: LD_INT 0
26437: PPUSH
// if not building then
26438: LD_VAR 0 1
26442: NOT
26443: IFFALSE 26447
// exit ;
26445: GO 26490
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_VAR 0 1
26456: PUSH
26457: LD_INT 22
26459: PUSH
26460: LD_VAR 0 1
26464: PPUSH
26465: CALL_OW 255
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 58
26476: PUSH
26477: EMPTY
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PPUSH
26484: CALL_OW 69
26488: IN
26489: ST_TO_ADDR
// end ;
26490: LD_VAR 0 2
26494: RET
// export function IsNotFull ( building ) ; var places ; begin
26495: LD_INT 0
26497: PPUSH
26498: PPUSH
// if not building then
26499: LD_VAR 0 1
26503: NOT
26504: IFFALSE 26508
// exit ;
26506: GO 26536
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26508: LD_ADDR_VAR 0 2
26512: PUSH
26513: LD_VAR 0 1
26517: PPUSH
26518: LD_INT 3
26520: PUSH
26521: LD_INT 62
26523: PUSH
26524: EMPTY
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PPUSH
26531: CALL_OW 72
26535: ST_TO_ADDR
// end ;
26536: LD_VAR 0 2
26540: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26541: LD_INT 0
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
// tmp := [ ] ;
26547: LD_ADDR_VAR 0 3
26551: PUSH
26552: EMPTY
26553: ST_TO_ADDR
// list := [ ] ;
26554: LD_ADDR_VAR 0 5
26558: PUSH
26559: EMPTY
26560: ST_TO_ADDR
// for i = 16 to 25 do
26561: LD_ADDR_VAR 0 4
26565: PUSH
26566: DOUBLE
26567: LD_INT 16
26569: DEC
26570: ST_TO_ADDR
26571: LD_INT 25
26573: PUSH
26574: FOR_TO
26575: IFFALSE 26648
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_INT 22
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: CALL_OW 255
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 91
26606: PUSH
26607: LD_VAR 0 1
26611: PUSH
26612: LD_INT 6
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 30
26622: PUSH
26623: LD_VAR 0 4
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: PPUSH
26640: CALL_OW 69
26644: ADD
26645: ST_TO_ADDR
26646: GO 26574
26648: POP
26649: POP
// for i = 1 to tmp do
26650: LD_ADDR_VAR 0 4
26654: PUSH
26655: DOUBLE
26656: LD_INT 1
26658: DEC
26659: ST_TO_ADDR
26660: LD_VAR 0 3
26664: PUSH
26665: FOR_TO
26666: IFFALSE 26754
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26668: LD_ADDR_VAR 0 5
26672: PUSH
26673: LD_VAR 0 5
26677: PUSH
26678: LD_VAR 0 3
26682: PUSH
26683: LD_VAR 0 4
26687: ARRAY
26688: PPUSH
26689: CALL_OW 266
26693: PUSH
26694: LD_VAR 0 3
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: PPUSH
26705: CALL_OW 250
26709: PUSH
26710: LD_VAR 0 3
26714: PUSH
26715: LD_VAR 0 4
26719: ARRAY
26720: PPUSH
26721: CALL_OW 251
26725: PUSH
26726: LD_VAR 0 3
26730: PUSH
26731: LD_VAR 0 4
26735: ARRAY
26736: PPUSH
26737: CALL_OW 254
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: PUSH
26748: EMPTY
26749: LIST
26750: ADD
26751: ST_TO_ADDR
26752: GO 26665
26754: POP
26755: POP
// result := list ;
26756: LD_ADDR_VAR 0 2
26760: PUSH
26761: LD_VAR 0 5
26765: ST_TO_ADDR
// end ;
26766: LD_VAR 0 2
26770: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26771: LD_INT 0
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
// if not factory then
26780: LD_VAR 0 1
26784: NOT
26785: IFFALSE 26789
// exit ;
26787: GO 27392
// if control = control_apeman then
26789: LD_VAR 0 4
26793: PUSH
26794: LD_INT 5
26796: EQUAL
26797: IFFALSE 26906
// begin tmp := UnitsInside ( factory ) ;
26799: LD_ADDR_VAR 0 8
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 313
26813: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26814: LD_VAR 0 8
26818: PPUSH
26819: LD_INT 25
26821: PUSH
26822: LD_INT 12
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PPUSH
26829: CALL_OW 72
26833: NOT
26834: IFFALSE 26844
// control := control_manual ;
26836: LD_ADDR_VAR 0 4
26840: PUSH
26841: LD_INT 1
26843: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26844: LD_ADDR_VAR 0 8
26848: PUSH
26849: LD_VAR 0 1
26853: PPUSH
26854: CALL 26541 0 1
26858: ST_TO_ADDR
// if tmp then
26859: LD_VAR 0 8
26863: IFFALSE 26906
// begin for i in tmp do
26865: LD_ADDR_VAR 0 7
26869: PUSH
26870: LD_VAR 0 8
26874: PUSH
26875: FOR_IN
26876: IFFALSE 26904
// if i [ 1 ] = b_ext_radio then
26878: LD_VAR 0 7
26882: PUSH
26883: LD_INT 1
26885: ARRAY
26886: PUSH
26887: LD_INT 22
26889: EQUAL
26890: IFFALSE 26902
// begin control := control_remote ;
26892: LD_ADDR_VAR 0 4
26896: PUSH
26897: LD_INT 2
26899: ST_TO_ADDR
// break ;
26900: GO 26904
// end ;
26902: GO 26875
26904: POP
26905: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_VAR 0 2
26915: PPUSH
26916: LD_VAR 0 3
26920: PPUSH
26921: LD_VAR 0 4
26925: PPUSH
26926: LD_VAR 0 5
26930: PPUSH
26931: CALL_OW 448
26935: IFFALSE 26970
// begin result := [ chassis , engine , control , weapon ] ;
26937: LD_ADDR_VAR 0 6
26941: PUSH
26942: LD_VAR 0 2
26946: PUSH
26947: LD_VAR 0 3
26951: PUSH
26952: LD_VAR 0 4
26956: PUSH
26957: LD_VAR 0 5
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: ST_TO_ADDR
// exit ;
26968: GO 27392
// end ; _chassis := AvailableChassisList ( factory ) ;
26970: LD_ADDR_VAR 0 9
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 475
26984: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26985: LD_ADDR_VAR 0 11
26989: PUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 476
26999: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27000: LD_ADDR_VAR 0 12
27004: PUSH
27005: LD_VAR 0 1
27009: PPUSH
27010: CALL_OW 477
27014: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27015: LD_ADDR_VAR 0 10
27019: PUSH
27020: LD_VAR 0 1
27024: PPUSH
27025: CALL_OW 478
27029: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27030: LD_VAR 0 9
27034: NOT
27035: IFTRUE 27044
27037: PUSH
27038: LD_VAR 0 11
27042: NOT
27043: OR
27044: IFTRUE 27053
27046: PUSH
27047: LD_VAR 0 12
27051: NOT
27052: OR
27053: IFTRUE 27062
27055: PUSH
27056: LD_VAR 0 10
27060: NOT
27061: OR
27062: IFFALSE 27097
// begin result := [ chassis , engine , control , weapon ] ;
27064: LD_ADDR_VAR 0 6
27068: PUSH
27069: LD_VAR 0 2
27073: PUSH
27074: LD_VAR 0 3
27078: PUSH
27079: LD_VAR 0 4
27083: PUSH
27084: LD_VAR 0 5
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: ST_TO_ADDR
// exit ;
27095: GO 27392
// end ; if not chassis in _chassis then
27097: LD_VAR 0 2
27101: PUSH
27102: LD_VAR 0 9
27106: IN
27107: NOT
27108: IFFALSE 27134
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27110: LD_ADDR_VAR 0 2
27114: PUSH
27115: LD_VAR 0 9
27119: PUSH
27120: LD_INT 1
27122: PPUSH
27123: LD_VAR 0 9
27127: PPUSH
27128: CALL_OW 12
27132: ARRAY
27133: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27134: LD_VAR 0 2
27138: PPUSH
27139: LD_VAR 0 3
27143: PPUSH
27144: CALL 27397 0 2
27148: NOT
27149: IFFALSE 27210
// repeat engine := _engine [ 1 ] ;
27151: LD_ADDR_VAR 0 3
27155: PUSH
27156: LD_VAR 0 11
27160: PUSH
27161: LD_INT 1
27163: ARRAY
27164: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27165: LD_ADDR_VAR 0 11
27169: PUSH
27170: LD_VAR 0 11
27174: PPUSH
27175: LD_INT 1
27177: PPUSH
27178: CALL_OW 3
27182: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27183: LD_VAR 0 2
27187: PPUSH
27188: LD_VAR 0 3
27192: PPUSH
27193: CALL 27397 0 2
27197: IFTRUE 27208
27199: PUSH
27200: LD_VAR 0 11
27204: PUSH
27205: EMPTY
27206: EQUAL
27207: OR
27208: IFFALSE 27151
// if not control in _control then
27210: LD_VAR 0 4
27214: PUSH
27215: LD_VAR 0 12
27219: IN
27220: NOT
27221: IFFALSE 27247
// control := _control [ rand ( 1 , _control ) ] ;
27223: LD_ADDR_VAR 0 4
27227: PUSH
27228: LD_VAR 0 12
27232: PUSH
27233: LD_INT 1
27235: PPUSH
27236: LD_VAR 0 12
27240: PPUSH
27241: CALL_OW 12
27245: ARRAY
27246: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27247: LD_VAR 0 2
27251: PPUSH
27252: LD_VAR 0 5
27256: PPUSH
27257: CALL 27619 0 2
27261: NOT
27262: IFFALSE 27323
// repeat weapon := _weapon [ 1 ] ;
27264: LD_ADDR_VAR 0 5
27268: PUSH
27269: LD_VAR 0 10
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27278: LD_ADDR_VAR 0 10
27282: PUSH
27283: LD_VAR 0 10
27287: PPUSH
27288: LD_INT 1
27290: PPUSH
27291: CALL_OW 3
27295: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27296: LD_VAR 0 2
27300: PPUSH
27301: LD_VAR 0 5
27305: PPUSH
27306: CALL 27619 0 2
27310: IFTRUE 27321
27312: PUSH
27313: LD_VAR 0 10
27317: PUSH
27318: EMPTY
27319: EQUAL
27320: OR
27321: IFFALSE 27264
// result := [ ] ;
27323: LD_ADDR_VAR 0 6
27327: PUSH
27328: EMPTY
27329: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27330: LD_VAR 0 1
27334: PPUSH
27335: LD_VAR 0 2
27339: PPUSH
27340: LD_VAR 0 3
27344: PPUSH
27345: LD_VAR 0 4
27349: PPUSH
27350: LD_VAR 0 5
27354: PPUSH
27355: CALL_OW 448
27359: IFFALSE 27392
// result := [ chassis , engine , control , weapon ] ;
27361: LD_ADDR_VAR 0 6
27365: PUSH
27366: LD_VAR 0 2
27370: PUSH
27371: LD_VAR 0 3
27375: PUSH
27376: LD_VAR 0 4
27380: PUSH
27381: LD_VAR 0 5
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: ST_TO_ADDR
// end ;
27392: LD_VAR 0 6
27396: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27397: LD_INT 0
27399: PPUSH
// if not chassis or not engine then
27400: LD_VAR 0 1
27404: NOT
27405: IFTRUE 27414
27407: PUSH
27408: LD_VAR 0 2
27412: NOT
27413: OR
27414: IFFALSE 27418
// exit ;
27416: GO 27614
// case engine of engine_solar :
27418: LD_VAR 0 2
27422: PUSH
27423: LD_INT 2
27425: DOUBLE
27426: EQUAL
27427: IFTRUE 27431
27429: GO 27469
27431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27432: LD_ADDR_VAR 0 3
27436: PUSH
27437: LD_INT 11
27439: PUSH
27440: LD_INT 12
27442: PUSH
27443: LD_INT 13
27445: PUSH
27446: LD_INT 14
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 2
27454: PUSH
27455: LD_INT 3
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: ST_TO_ADDR
27467: GO 27598
27469: LD_INT 1
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27477
27475: GO 27539
27477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27478: LD_ADDR_VAR 0 3
27482: PUSH
27483: LD_INT 11
27485: PUSH
27486: LD_INT 12
27488: PUSH
27489: LD_INT 13
27491: PUSH
27492: LD_INT 14
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 3
27503: PUSH
27504: LD_INT 4
27506: PUSH
27507: LD_INT 5
27509: PUSH
27510: LD_INT 21
27512: PUSH
27513: LD_INT 23
27515: PUSH
27516: LD_INT 22
27518: PUSH
27519: LD_INT 24
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
27537: GO 27598
27539: LD_INT 3
27541: DOUBLE
27542: EQUAL
27543: IFTRUE 27547
27545: GO 27597
27547: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27548: LD_ADDR_VAR 0 3
27552: PUSH
27553: LD_INT 13
27555: PUSH
27556: LD_INT 14
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 3
27564: PUSH
27565: LD_INT 4
27567: PUSH
27568: LD_INT 5
27570: PUSH
27571: LD_INT 21
27573: PUSH
27574: LD_INT 22
27576: PUSH
27577: LD_INT 23
27579: PUSH
27580: LD_INT 24
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
27595: GO 27598
27597: POP
// result := ( chassis in result ) ;
27598: LD_ADDR_VAR 0 3
27602: PUSH
27603: LD_VAR 0 1
27607: PUSH
27608: LD_VAR 0 3
27612: IN
27613: ST_TO_ADDR
// end ;
27614: LD_VAR 0 3
27618: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27619: LD_INT 0
27621: PPUSH
// if not chassis or not weapon then
27622: LD_VAR 0 1
27626: NOT
27627: IFTRUE 27636
27629: PUSH
27630: LD_VAR 0 2
27634: NOT
27635: OR
27636: IFFALSE 27640
// exit ;
27638: GO 28734
// case weapon of us_machine_gun :
27640: LD_VAR 0 2
27644: PUSH
27645: LD_INT 2
27647: DOUBLE
27648: EQUAL
27649: IFTRUE 27653
27651: GO 27683
27653: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 4
27670: PUSH
27671: LD_INT 5
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: ST_TO_ADDR
27681: GO 28718
27683: LD_INT 3
27685: DOUBLE
27686: EQUAL
27687: IFTRUE 27691
27689: GO 27721
27691: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27692: LD_ADDR_VAR 0 3
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: LD_INT 3
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
27719: GO 28718
27721: LD_INT 11
27723: DOUBLE
27724: EQUAL
27725: IFTRUE 27729
27727: GO 27759
27729: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27730: LD_ADDR_VAR 0 3
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 2
27740: PUSH
27741: LD_INT 3
27743: PUSH
27744: LD_INT 4
27746: PUSH
27747: LD_INT 5
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: ST_TO_ADDR
27757: GO 28718
27759: LD_INT 4
27761: DOUBLE
27762: EQUAL
27763: IFTRUE 27767
27765: GO 27793
27767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: LD_INT 3
27778: PUSH
27779: LD_INT 4
27781: PUSH
27782: LD_INT 5
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: ST_TO_ADDR
27791: GO 28718
27793: LD_INT 5
27795: DOUBLE
27796: EQUAL
27797: IFTRUE 27801
27799: GO 27827
27801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 3
27812: PUSH
27813: LD_INT 4
27815: PUSH
27816: LD_INT 5
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
27825: GO 28718
27827: LD_INT 9
27829: DOUBLE
27830: EQUAL
27831: IFTRUE 27835
27833: GO 27861
27835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27836: LD_ADDR_VAR 0 3
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 4
27849: PUSH
27850: LD_INT 5
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
27859: GO 28718
27861: LD_INT 7
27863: DOUBLE
27864: EQUAL
27865: IFTRUE 27869
27867: GO 27895
27869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27870: LD_ADDR_VAR 0 3
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: LD_INT 3
27880: PUSH
27881: LD_INT 4
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: ST_TO_ADDR
27893: GO 28718
27895: LD_INT 12
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27903
27901: GO 27929
27903: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27904: LD_ADDR_VAR 0 3
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: LD_INT 4
27917: PUSH
27918: LD_INT 5
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: ST_TO_ADDR
27927: GO 28718
27929: LD_INT 13
27931: DOUBLE
27932: EQUAL
27933: IFTRUE 27937
27935: GO 27963
27937: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27938: LD_ADDR_VAR 0 3
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: LD_INT 4
27951: PUSH
27952: LD_INT 5
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: ST_TO_ADDR
27961: GO 28718
27963: LD_INT 14
27965: DOUBLE
27966: EQUAL
27967: IFTRUE 27971
27969: GO 27989
27971: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27972: LD_ADDR_VAR 0 3
27976: PUSH
27977: LD_INT 4
27979: PUSH
27980: LD_INT 5
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: ST_TO_ADDR
27987: GO 28718
27989: LD_INT 6
27991: DOUBLE
27992: EQUAL
27993: IFTRUE 27997
27995: GO 28015
27997: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: LD_INT 4
28005: PUSH
28006: LD_INT 5
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: ST_TO_ADDR
28013: GO 28718
28015: LD_INT 10
28017: DOUBLE
28018: EQUAL
28019: IFTRUE 28023
28021: GO 28041
28023: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_INT 4
28031: PUSH
28032: LD_INT 5
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: ST_TO_ADDR
28039: GO 28718
28041: LD_INT 22
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28075
28049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28050: LD_ADDR_VAR 0 3
28054: PUSH
28055: LD_INT 11
28057: PUSH
28058: LD_INT 12
28060: PUSH
28061: LD_INT 13
28063: PUSH
28064: LD_INT 14
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
28073: GO 28718
28075: LD_INT 23
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28109
28083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 11
28091: PUSH
28092: LD_INT 12
28094: PUSH
28095: LD_INT 13
28097: PUSH
28098: LD_INT 14
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: ST_TO_ADDR
28107: GO 28718
28109: LD_INT 24
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28117
28115: GO 28143
28117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28118: LD_ADDR_VAR 0 3
28122: PUSH
28123: LD_INT 11
28125: PUSH
28126: LD_INT 12
28128: PUSH
28129: LD_INT 13
28131: PUSH
28132: LD_INT 14
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: ST_TO_ADDR
28141: GO 28718
28143: LD_INT 30
28145: DOUBLE
28146: EQUAL
28147: IFTRUE 28151
28149: GO 28177
28151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_INT 11
28159: PUSH
28160: LD_INT 12
28162: PUSH
28163: LD_INT 13
28165: PUSH
28166: LD_INT 14
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
28175: GO 28718
28177: LD_INT 25
28179: DOUBLE
28180: EQUAL
28181: IFTRUE 28185
28183: GO 28203
28185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28186: LD_ADDR_VAR 0 3
28190: PUSH
28191: LD_INT 13
28193: PUSH
28194: LD_INT 14
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: ST_TO_ADDR
28201: GO 28718
28203: LD_INT 27
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28229
28211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28212: LD_ADDR_VAR 0 3
28216: PUSH
28217: LD_INT 13
28219: PUSH
28220: LD_INT 14
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: ST_TO_ADDR
28227: GO 28718
28229: LD_INT 92
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28263
28237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 11
28245: PUSH
28246: LD_INT 12
28248: PUSH
28249: LD_INT 13
28251: PUSH
28252: LD_INT 14
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: ST_TO_ADDR
28261: GO 28718
28263: LD_INT 28
28265: DOUBLE
28266: EQUAL
28267: IFTRUE 28271
28269: GO 28289
28271: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28272: LD_ADDR_VAR 0 3
28276: PUSH
28277: LD_INT 13
28279: PUSH
28280: LD_INT 14
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: ST_TO_ADDR
28287: GO 28718
28289: LD_INT 29
28291: DOUBLE
28292: EQUAL
28293: IFTRUE 28297
28295: GO 28315
28297: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28298: LD_ADDR_VAR 0 3
28302: PUSH
28303: LD_INT 13
28305: PUSH
28306: LD_INT 14
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: ST_TO_ADDR
28313: GO 28718
28315: LD_INT 31
28317: DOUBLE
28318: EQUAL
28319: IFTRUE 28323
28321: GO 28341
28323: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_INT 13
28331: PUSH
28332: LD_INT 14
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: ST_TO_ADDR
28339: GO 28718
28341: LD_INT 26
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28367
28349: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28350: LD_ADDR_VAR 0 3
28354: PUSH
28355: LD_INT 13
28357: PUSH
28358: LD_INT 14
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: ST_TO_ADDR
28365: GO 28718
28367: LD_INT 42
28369: DOUBLE
28370: EQUAL
28371: IFTRUE 28375
28373: GO 28401
28375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28376: LD_ADDR_VAR 0 3
28380: PUSH
28381: LD_INT 21
28383: PUSH
28384: LD_INT 22
28386: PUSH
28387: LD_INT 23
28389: PUSH
28390: LD_INT 24
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: ST_TO_ADDR
28399: GO 28718
28401: LD_INT 43
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28435
28409: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28410: LD_ADDR_VAR 0 3
28414: PUSH
28415: LD_INT 21
28417: PUSH
28418: LD_INT 22
28420: PUSH
28421: LD_INT 23
28423: PUSH
28424: LD_INT 24
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
28433: GO 28718
28435: LD_INT 44
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28469
28443: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28444: LD_ADDR_VAR 0 3
28448: PUSH
28449: LD_INT 21
28451: PUSH
28452: LD_INT 22
28454: PUSH
28455: LD_INT 23
28457: PUSH
28458: LD_INT 24
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
28467: GO 28718
28469: LD_INT 45
28471: DOUBLE
28472: EQUAL
28473: IFTRUE 28477
28475: GO 28503
28477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28478: LD_ADDR_VAR 0 3
28482: PUSH
28483: LD_INT 21
28485: PUSH
28486: LD_INT 22
28488: PUSH
28489: LD_INT 23
28491: PUSH
28492: LD_INT 24
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: ST_TO_ADDR
28501: GO 28718
28503: LD_INT 49
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28537
28511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_INT 21
28519: PUSH
28520: LD_INT 22
28522: PUSH
28523: LD_INT 23
28525: PUSH
28526: LD_INT 24
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
28535: GO 28718
28537: LD_INT 51
28539: DOUBLE
28540: EQUAL
28541: IFTRUE 28545
28543: GO 28571
28545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28546: LD_ADDR_VAR 0 3
28550: PUSH
28551: LD_INT 21
28553: PUSH
28554: LD_INT 22
28556: PUSH
28557: LD_INT 23
28559: PUSH
28560: LD_INT 24
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
28569: GO 28718
28571: LD_INT 52
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28579
28577: GO 28605
28579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28580: LD_ADDR_VAR 0 3
28584: PUSH
28585: LD_INT 21
28587: PUSH
28588: LD_INT 22
28590: PUSH
28591: LD_INT 23
28593: PUSH
28594: LD_INT 24
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
28603: GO 28718
28605: LD_INT 53
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28631
28613: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 23
28621: PUSH
28622: LD_INT 24
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: ST_TO_ADDR
28629: GO 28718
28631: LD_INT 46
28633: DOUBLE
28634: EQUAL
28635: IFTRUE 28639
28637: GO 28657
28639: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: LD_INT 23
28647: PUSH
28648: LD_INT 24
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: ST_TO_ADDR
28655: GO 28718
28657: LD_INT 47
28659: DOUBLE
28660: EQUAL
28661: IFTRUE 28665
28663: GO 28683
28665: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
28666: LD_ADDR_VAR 0 3
28670: PUSH
28671: LD_INT 23
28673: PUSH
28674: LD_INT 24
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: ST_TO_ADDR
28681: GO 28718
28683: LD_INT 98
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28717
28691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28692: LD_ADDR_VAR 0 3
28696: PUSH
28697: LD_INT 21
28699: PUSH
28700: LD_INT 22
28702: PUSH
28703: LD_INT 23
28705: PUSH
28706: LD_INT 24
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
28715: GO 28718
28717: POP
// result := ( chassis in result ) ;
28718: LD_ADDR_VAR 0 3
28722: PUSH
28723: LD_VAR 0 1
28727: PUSH
28728: LD_VAR 0 3
28732: IN
28733: ST_TO_ADDR
// end ;
28734: LD_VAR 0 3
28738: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28739: LD_INT 0
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
28746: PPUSH
28747: PPUSH
// result := array ;
28748: LD_ADDR_VAR 0 5
28752: PUSH
28753: LD_VAR 0 1
28757: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28758: LD_VAR 0 1
28762: NOT
28763: IFTRUE 28772
28765: PUSH
28766: LD_VAR 0 2
28770: NOT
28771: OR
28772: IFTRUE 28781
28774: PUSH
28775: LD_VAR 0 3
28779: NOT
28780: OR
28781: IFTRUE 28795
28783: PUSH
28784: LD_VAR 0 2
28788: PUSH
28789: LD_VAR 0 1
28793: GREATER
28794: OR
28795: IFTRUE 28809
28797: PUSH
28798: LD_VAR 0 3
28802: PUSH
28803: LD_VAR 0 1
28807: GREATER
28808: OR
28809: IFFALSE 28813
// exit ;
28811: GO 29109
// if direction then
28813: LD_VAR 0 4
28817: IFFALSE 28881
// begin d := 1 ;
28819: LD_ADDR_VAR 0 9
28823: PUSH
28824: LD_INT 1
28826: ST_TO_ADDR
// if i_from > i_to then
28827: LD_VAR 0 2
28831: PUSH
28832: LD_VAR 0 3
28836: GREATER
28837: IFFALSE 28863
// length := ( array - i_from ) + i_to else
28839: LD_ADDR_VAR 0 11
28843: PUSH
28844: LD_VAR 0 1
28848: PUSH
28849: LD_VAR 0 2
28853: MINUS
28854: PUSH
28855: LD_VAR 0 3
28859: PLUS
28860: ST_TO_ADDR
28861: GO 28879
// length := i_to - i_from ;
28863: LD_ADDR_VAR 0 11
28867: PUSH
28868: LD_VAR 0 3
28872: PUSH
28873: LD_VAR 0 2
28877: MINUS
28878: ST_TO_ADDR
// end else
28879: GO 28942
// begin d := - 1 ;
28881: LD_ADDR_VAR 0 9
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: ST_TO_ADDR
// if i_from > i_to then
28890: LD_VAR 0 2
28894: PUSH
28895: LD_VAR 0 3
28899: GREATER
28900: IFFALSE 28920
// length := i_from - i_to else
28902: LD_ADDR_VAR 0 11
28906: PUSH
28907: LD_VAR 0 2
28911: PUSH
28912: LD_VAR 0 3
28916: MINUS
28917: ST_TO_ADDR
28918: GO 28942
// length := ( array - i_to ) + i_from ;
28920: LD_ADDR_VAR 0 11
28924: PUSH
28925: LD_VAR 0 1
28929: PUSH
28930: LD_VAR 0 3
28934: MINUS
28935: PUSH
28936: LD_VAR 0 2
28940: PLUS
28941: ST_TO_ADDR
// end ; if not length then
28942: LD_VAR 0 11
28946: NOT
28947: IFFALSE 28951
// exit ;
28949: GO 29109
// tmp := array ;
28951: LD_ADDR_VAR 0 10
28955: PUSH
28956: LD_VAR 0 1
28960: ST_TO_ADDR
// for i = 1 to length do
28961: LD_ADDR_VAR 0 6
28965: PUSH
28966: DOUBLE
28967: LD_INT 1
28969: DEC
28970: ST_TO_ADDR
28971: LD_VAR 0 11
28975: PUSH
28976: FOR_TO
28977: IFFALSE 29097
// begin for j = 1 to array do
28979: LD_ADDR_VAR 0 7
28983: PUSH
28984: DOUBLE
28985: LD_INT 1
28987: DEC
28988: ST_TO_ADDR
28989: LD_VAR 0 1
28993: PUSH
28994: FOR_TO
28995: IFFALSE 29083
// begin k := j + d ;
28997: LD_ADDR_VAR 0 8
29001: PUSH
29002: LD_VAR 0 7
29006: PUSH
29007: LD_VAR 0 9
29011: PLUS
29012: ST_TO_ADDR
// if k > array then
29013: LD_VAR 0 8
29017: PUSH
29018: LD_VAR 0 1
29022: GREATER
29023: IFFALSE 29033
// k := 1 ;
29025: LD_ADDR_VAR 0 8
29029: PUSH
29030: LD_INT 1
29032: ST_TO_ADDR
// if not k then
29033: LD_VAR 0 8
29037: NOT
29038: IFFALSE 29050
// k := array ;
29040: LD_ADDR_VAR 0 8
29044: PUSH
29045: LD_VAR 0 1
29049: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29050: LD_ADDR_VAR 0 10
29054: PUSH
29055: LD_VAR 0 10
29059: PPUSH
29060: LD_VAR 0 8
29064: PPUSH
29065: LD_VAR 0 1
29069: PUSH
29070: LD_VAR 0 7
29074: ARRAY
29075: PPUSH
29076: CALL_OW 1
29080: ST_TO_ADDR
// end ;
29081: GO 28994
29083: POP
29084: POP
// array := tmp ;
29085: LD_ADDR_VAR 0 1
29089: PUSH
29090: LD_VAR 0 10
29094: ST_TO_ADDR
// end ;
29095: GO 28976
29097: POP
29098: POP
// result := array ;
29099: LD_ADDR_VAR 0 5
29103: PUSH
29104: LD_VAR 0 1
29108: ST_TO_ADDR
// end ;
29109: LD_VAR 0 5
29113: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29114: LD_INT 0
29116: PPUSH
29117: PPUSH
// result := 0 ;
29118: LD_ADDR_VAR 0 3
29122: PUSH
29123: LD_INT 0
29125: ST_TO_ADDR
// if not array or not value in array then
29126: LD_VAR 0 1
29130: NOT
29131: IFTRUE 29146
29133: PUSH
29134: LD_VAR 0 2
29138: PUSH
29139: LD_VAR 0 1
29143: IN
29144: NOT
29145: OR
29146: IFFALSE 29150
// exit ;
29148: GO 29204
// for i = 1 to array do
29150: LD_ADDR_VAR 0 4
29154: PUSH
29155: DOUBLE
29156: LD_INT 1
29158: DEC
29159: ST_TO_ADDR
29160: LD_VAR 0 1
29164: PUSH
29165: FOR_TO
29166: IFFALSE 29202
// if value = array [ i ] then
29168: LD_VAR 0 2
29172: PUSH
29173: LD_VAR 0 1
29177: PUSH
29178: LD_VAR 0 4
29182: ARRAY
29183: EQUAL
29184: IFFALSE 29200
// begin result := i ;
29186: LD_ADDR_VAR 0 3
29190: PUSH
29191: LD_VAR 0 4
29195: ST_TO_ADDR
// exit ;
29196: POP
29197: POP
29198: GO 29204
// end ;
29200: GO 29165
29202: POP
29203: POP
// end ;
29204: LD_VAR 0 3
29208: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29209: LD_INT 0
29211: PPUSH
// vc_chassis := chassis ;
29212: LD_ADDR_OWVAR 37
29216: PUSH
29217: LD_VAR 0 1
29221: ST_TO_ADDR
// vc_engine := engine ;
29222: LD_ADDR_OWVAR 39
29226: PUSH
29227: LD_VAR 0 2
29231: ST_TO_ADDR
// vc_control := control ;
29232: LD_ADDR_OWVAR 38
29236: PUSH
29237: LD_VAR 0 3
29241: ST_TO_ADDR
// vc_weapon := weapon ;
29242: LD_ADDR_OWVAR 40
29246: PUSH
29247: LD_VAR 0 4
29251: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29252: LD_ADDR_OWVAR 41
29256: PUSH
29257: LD_VAR 0 5
29261: ST_TO_ADDR
// end ;
29262: LD_VAR 0 6
29266: RET
// export function WantPlant ( unit ) ; var task ; begin
29267: LD_INT 0
29269: PPUSH
29270: PPUSH
// result := false ;
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: LD_INT 0
29278: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29279: LD_ADDR_VAR 0 3
29283: PUSH
29284: LD_VAR 0 1
29288: PPUSH
29289: CALL_OW 437
29293: ST_TO_ADDR
// if task then
29294: LD_VAR 0 3
29298: IFFALSE 29326
// if task [ 1 ] [ 1 ] = p then
29300: LD_VAR 0 3
29304: PUSH
29305: LD_INT 1
29307: ARRAY
29308: PUSH
29309: LD_INT 1
29311: ARRAY
29312: PUSH
29313: LD_STRING p
29315: EQUAL
29316: IFFALSE 29326
// result := true ;
29318: LD_ADDR_VAR 0 2
29322: PUSH
29323: LD_INT 1
29325: ST_TO_ADDR
// end ;
29326: LD_VAR 0 2
29330: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29331: LD_INT 0
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
// if pos < 1 then
29337: LD_VAR 0 2
29341: PUSH
29342: LD_INT 1
29344: LESS
29345: IFFALSE 29349
// exit ;
29347: GO 29652
// if pos = 1 then
29349: LD_VAR 0 2
29353: PUSH
29354: LD_INT 1
29356: EQUAL
29357: IFFALSE 29390
// result := Replace ( arr , pos [ 1 ] , value ) else
29359: LD_ADDR_VAR 0 4
29363: PUSH
29364: LD_VAR 0 1
29368: PPUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_INT 1
29376: ARRAY
29377: PPUSH
29378: LD_VAR 0 3
29382: PPUSH
29383: CALL_OW 1
29387: ST_TO_ADDR
29388: GO 29652
// begin tmp := arr ;
29390: LD_ADDR_VAR 0 6
29394: PUSH
29395: LD_VAR 0 1
29399: ST_TO_ADDR
// s_arr := [ tmp ] ;
29400: LD_ADDR_VAR 0 7
29404: PUSH
29405: LD_VAR 0 6
29409: PUSH
29410: EMPTY
29411: LIST
29412: ST_TO_ADDR
// for i = 1 to pos - 1 do
29413: LD_ADDR_VAR 0 5
29417: PUSH
29418: DOUBLE
29419: LD_INT 1
29421: DEC
29422: ST_TO_ADDR
29423: LD_VAR 0 2
29427: PUSH
29428: LD_INT 1
29430: MINUS
29431: PUSH
29432: FOR_TO
29433: IFFALSE 29478
// begin tmp := tmp [ pos [ i ] ] ;
29435: LD_ADDR_VAR 0 6
29439: PUSH
29440: LD_VAR 0 6
29444: PUSH
29445: LD_VAR 0 2
29449: PUSH
29450: LD_VAR 0 5
29454: ARRAY
29455: ARRAY
29456: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29457: LD_ADDR_VAR 0 7
29461: PUSH
29462: LD_VAR 0 7
29466: PUSH
29467: LD_VAR 0 6
29471: PUSH
29472: EMPTY
29473: LIST
29474: ADD
29475: ST_TO_ADDR
// end ;
29476: GO 29432
29478: POP
29479: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29480: LD_ADDR_VAR 0 6
29484: PUSH
29485: LD_VAR 0 6
29489: PPUSH
29490: LD_VAR 0 2
29494: PUSH
29495: LD_VAR 0 2
29499: ARRAY
29500: PPUSH
29501: LD_VAR 0 3
29505: PPUSH
29506: CALL_OW 1
29510: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29511: LD_ADDR_VAR 0 7
29515: PUSH
29516: LD_VAR 0 7
29520: PPUSH
29521: LD_VAR 0 7
29525: PPUSH
29526: LD_VAR 0 6
29530: PPUSH
29531: CALL_OW 1
29535: ST_TO_ADDR
// for i = s_arr downto 2 do
29536: LD_ADDR_VAR 0 5
29540: PUSH
29541: DOUBLE
29542: LD_VAR 0 7
29546: INC
29547: ST_TO_ADDR
29548: LD_INT 2
29550: PUSH
29551: FOR_DOWNTO
29552: IFFALSE 29636
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29554: LD_ADDR_VAR 0 6
29558: PUSH
29559: LD_VAR 0 7
29563: PUSH
29564: LD_VAR 0 5
29568: PUSH
29569: LD_INT 1
29571: MINUS
29572: ARRAY
29573: PPUSH
29574: LD_VAR 0 2
29578: PUSH
29579: LD_VAR 0 5
29583: PUSH
29584: LD_INT 1
29586: MINUS
29587: ARRAY
29588: PPUSH
29589: LD_VAR 0 7
29593: PUSH
29594: LD_VAR 0 5
29598: ARRAY
29599: PPUSH
29600: CALL_OW 1
29604: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29605: LD_ADDR_VAR 0 7
29609: PUSH
29610: LD_VAR 0 7
29614: PPUSH
29615: LD_VAR 0 5
29619: PUSH
29620: LD_INT 1
29622: MINUS
29623: PPUSH
29624: LD_VAR 0 6
29628: PPUSH
29629: CALL_OW 1
29633: ST_TO_ADDR
// end ;
29634: GO 29551
29636: POP
29637: POP
// result := s_arr [ 1 ] ;
29638: LD_ADDR_VAR 0 4
29642: PUSH
29643: LD_VAR 0 7
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: ST_TO_ADDR
// end ; end ;
29652: LD_VAR 0 4
29656: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29657: LD_INT 0
29659: PPUSH
29660: PPUSH
// if not list then
29661: LD_VAR 0 1
29665: NOT
29666: IFFALSE 29670
// exit ;
29668: GO 29761
// i := list [ pos1 ] ;
29670: LD_ADDR_VAR 0 5
29674: PUSH
29675: LD_VAR 0 1
29679: PUSH
29680: LD_VAR 0 2
29684: ARRAY
29685: ST_TO_ADDR
// if not i then
29686: LD_VAR 0 5
29690: NOT
29691: IFFALSE 29695
// exit ;
29693: GO 29761
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29695: LD_ADDR_VAR 0 1
29699: PUSH
29700: LD_VAR 0 1
29704: PPUSH
29705: LD_VAR 0 2
29709: PPUSH
29710: LD_VAR 0 1
29714: PUSH
29715: LD_VAR 0 3
29719: ARRAY
29720: PPUSH
29721: CALL_OW 1
29725: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29726: LD_ADDR_VAR 0 1
29730: PUSH
29731: LD_VAR 0 1
29735: PPUSH
29736: LD_VAR 0 3
29740: PPUSH
29741: LD_VAR 0 5
29745: PPUSH
29746: CALL_OW 1
29750: ST_TO_ADDR
// result := list ;
29751: LD_ADDR_VAR 0 4
29755: PUSH
29756: LD_VAR 0 1
29760: ST_TO_ADDR
// end ;
29761: LD_VAR 0 4
29765: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29766: LD_INT 0
29768: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29769: LD_ADDR_VAR 0 5
29773: PUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 250
29783: PPUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 251
29793: PPUSH
29794: LD_VAR 0 2
29798: PPUSH
29799: LD_VAR 0 3
29803: PPUSH
29804: LD_VAR 0 4
29808: PPUSH
29809: CALL 30191 0 5
29813: ST_TO_ADDR
// end ;
29814: LD_VAR 0 5
29818: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29819: LD_INT 0
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
// if not list or not unit then
29825: LD_VAR 0 2
29829: NOT
29830: IFTRUE 29839
29832: PUSH
29833: LD_VAR 0 1
29837: NOT
29838: OR
29839: IFFALSE 29843
// exit ;
29841: GO 30186
// result := [ ] ;
29843: LD_ADDR_VAR 0 5
29847: PUSH
29848: EMPTY
29849: ST_TO_ADDR
// for i in list do
29850: LD_ADDR_VAR 0 6
29854: PUSH
29855: LD_VAR 0 2
29859: PUSH
29860: FOR_IN
29861: IFFALSE 30079
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29863: LD_ADDR_VAR 0 8
29867: PUSH
29868: LD_VAR 0 1
29872: PPUSH
29873: LD_VAR 0 6
29877: PUSH
29878: LD_INT 1
29880: ARRAY
29881: PPUSH
29882: LD_VAR 0 6
29886: PUSH
29887: LD_INT 2
29889: ARRAY
29890: PPUSH
29891: CALL_OW 297
29895: ST_TO_ADDR
// if not Count ( result ) then
29896: LD_VAR 0 5
29900: PPUSH
29901: CALL 26413 0 1
29905: NOT
29906: IFFALSE 29939
// begin result := Join ( result , [ i , tmp ] ) ;
29908: LD_ADDR_VAR 0 5
29912: PUSH
29913: LD_VAR 0 5
29917: PPUSH
29918: LD_VAR 0 6
29922: PUSH
29923: LD_VAR 0 8
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PPUSH
29932: CALL 62389 0 2
29936: ST_TO_ADDR
// continue ;
29937: GO 29860
// end ; if result [ result ] [ 2 ] <= tmp then
29939: LD_VAR 0 5
29943: PUSH
29944: LD_VAR 0 5
29948: ARRAY
29949: PUSH
29950: LD_INT 2
29952: ARRAY
29953: PUSH
29954: LD_VAR 0 8
29958: LESSEQUAL
29959: IFFALSE 29992
// result := Join ( result , [ i , tmp ] ) else
29961: LD_ADDR_VAR 0 5
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_VAR 0 6
29975: PUSH
29976: LD_VAR 0 8
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL 62389 0 2
29989: ST_TO_ADDR
29990: GO 30077
// begin for j := 1 to Count ( result ) do
29992: LD_ADDR_VAR 0 7
29996: PUSH
29997: DOUBLE
29998: LD_INT 1
30000: DEC
30001: ST_TO_ADDR
30002: LD_VAR 0 5
30006: PPUSH
30007: CALL 26413 0 1
30011: PUSH
30012: FOR_TO
30013: IFFALSE 30075
// begin if tmp < result [ j ] [ 2 ] then
30015: LD_VAR 0 8
30019: PUSH
30020: LD_VAR 0 5
30024: PUSH
30025: LD_VAR 0 7
30029: ARRAY
30030: PUSH
30031: LD_INT 2
30033: ARRAY
30034: LESS
30035: IFFALSE 30073
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30037: LD_ADDR_VAR 0 5
30041: PUSH
30042: LD_VAR 0 5
30046: PPUSH
30047: LD_VAR 0 7
30051: PPUSH
30052: LD_VAR 0 6
30056: PUSH
30057: LD_VAR 0 8
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL_OW 2
30070: ST_TO_ADDR
// break ;
30071: GO 30075
// end ; end ;
30073: GO 30012
30075: POP
30076: POP
// end ; end ;
30077: GO 29860
30079: POP
30080: POP
// if result and not asc then
30081: LD_VAR 0 5
30085: IFFALSE 30094
30087: PUSH
30088: LD_VAR 0 3
30092: NOT
30093: AND
30094: IFFALSE 30111
// result := ReverseArray ( result ) ;
30096: LD_ADDR_VAR 0 5
30100: PUSH
30101: LD_VAR 0 5
30105: PPUSH
30106: CALL 57469 0 1
30110: ST_TO_ADDR
// tmp := [ ] ;
30111: LD_ADDR_VAR 0 8
30115: PUSH
30116: EMPTY
30117: ST_TO_ADDR
// if mode then
30118: LD_VAR 0 4
30122: IFFALSE 30186
// begin for i := 1 to result do
30124: LD_ADDR_VAR 0 6
30128: PUSH
30129: DOUBLE
30130: LD_INT 1
30132: DEC
30133: ST_TO_ADDR
30134: LD_VAR 0 5
30138: PUSH
30139: FOR_TO
30140: IFFALSE 30174
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30142: LD_ADDR_VAR 0 8
30146: PUSH
30147: LD_VAR 0 8
30151: PPUSH
30152: LD_VAR 0 5
30156: PUSH
30157: LD_VAR 0 6
30161: ARRAY
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: CALL 62389 0 2
30171: ST_TO_ADDR
30172: GO 30139
30174: POP
30175: POP
// result := tmp ;
30176: LD_ADDR_VAR 0 5
30180: PUSH
30181: LD_VAR 0 8
30185: ST_TO_ADDR
// end ; end ;
30186: LD_VAR 0 5
30190: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
// if not list then
30197: LD_VAR 0 3
30201: NOT
30202: IFFALSE 30206
// exit ;
30204: GO 30596
// result := [ ] ;
30206: LD_ADDR_VAR 0 6
30210: PUSH
30211: EMPTY
30212: ST_TO_ADDR
// for i in list do
30213: LD_ADDR_VAR 0 7
30217: PUSH
30218: LD_VAR 0 3
30222: PUSH
30223: FOR_IN
30224: IFFALSE 30426
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30226: LD_ADDR_VAR 0 9
30230: PUSH
30231: LD_VAR 0 7
30235: PPUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: LD_VAR 0 2
30245: PPUSH
30246: CALL_OW 297
30250: ST_TO_ADDR
// if not result then
30251: LD_VAR 0 6
30255: NOT
30256: IFFALSE 30282
// result := [ [ i , tmp ] ] else
30258: LD_ADDR_VAR 0 6
30262: PUSH
30263: LD_VAR 0 7
30267: PUSH
30268: LD_VAR 0 9
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: EMPTY
30278: LIST
30279: ST_TO_ADDR
30280: GO 30424
// begin if result [ result ] [ 2 ] <= tmp then
30282: LD_VAR 0 6
30286: PUSH
30287: LD_VAR 0 6
30291: ARRAY
30292: PUSH
30293: LD_INT 2
30295: ARRAY
30296: PUSH
30297: LD_VAR 0 9
30301: LESSEQUAL
30302: IFFALSE 30344
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30304: LD_ADDR_VAR 0 6
30308: PUSH
30309: LD_VAR 0 6
30313: PPUSH
30314: LD_VAR 0 6
30318: PUSH
30319: LD_INT 1
30321: PLUS
30322: PPUSH
30323: LD_VAR 0 7
30327: PUSH
30328: LD_VAR 0 9
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PPUSH
30337: CALL_OW 2
30341: ST_TO_ADDR
30342: GO 30424
// for j := 1 to result do
30344: LD_ADDR_VAR 0 8
30348: PUSH
30349: DOUBLE
30350: LD_INT 1
30352: DEC
30353: ST_TO_ADDR
30354: LD_VAR 0 6
30358: PUSH
30359: FOR_TO
30360: IFFALSE 30422
// begin if tmp < result [ j ] [ 2 ] then
30362: LD_VAR 0 9
30366: PUSH
30367: LD_VAR 0 6
30371: PUSH
30372: LD_VAR 0 8
30376: ARRAY
30377: PUSH
30378: LD_INT 2
30380: ARRAY
30381: LESS
30382: IFFALSE 30420
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30384: LD_ADDR_VAR 0 6
30388: PUSH
30389: LD_VAR 0 6
30393: PPUSH
30394: LD_VAR 0 8
30398: PPUSH
30399: LD_VAR 0 7
30403: PUSH
30404: LD_VAR 0 9
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PPUSH
30413: CALL_OW 2
30417: ST_TO_ADDR
// break ;
30418: GO 30422
// end ; end ;
30420: GO 30359
30422: POP
30423: POP
// end ; end ;
30424: GO 30223
30426: POP
30427: POP
// if result and not asc then
30428: LD_VAR 0 6
30432: IFFALSE 30441
30434: PUSH
30435: LD_VAR 0 4
30439: NOT
30440: AND
30441: IFFALSE 30516
// begin tmp := result ;
30443: LD_ADDR_VAR 0 9
30447: PUSH
30448: LD_VAR 0 6
30452: ST_TO_ADDR
// for i = tmp downto 1 do
30453: LD_ADDR_VAR 0 7
30457: PUSH
30458: DOUBLE
30459: LD_VAR 0 9
30463: INC
30464: ST_TO_ADDR
30465: LD_INT 1
30467: PUSH
30468: FOR_DOWNTO
30469: IFFALSE 30514
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30471: LD_ADDR_VAR 0 6
30475: PUSH
30476: LD_VAR 0 6
30480: PPUSH
30481: LD_VAR 0 9
30485: PUSH
30486: LD_VAR 0 7
30490: MINUS
30491: PUSH
30492: LD_INT 1
30494: PLUS
30495: PPUSH
30496: LD_VAR 0 9
30500: PUSH
30501: LD_VAR 0 7
30505: ARRAY
30506: PPUSH
30507: CALL_OW 1
30511: ST_TO_ADDR
30512: GO 30468
30514: POP
30515: POP
// end ; tmp := [ ] ;
30516: LD_ADDR_VAR 0 9
30520: PUSH
30521: EMPTY
30522: ST_TO_ADDR
// if mode then
30523: LD_VAR 0 5
30527: IFFALSE 30596
// begin for i = 1 to result do
30529: LD_ADDR_VAR 0 7
30533: PUSH
30534: DOUBLE
30535: LD_INT 1
30537: DEC
30538: ST_TO_ADDR
30539: LD_VAR 0 6
30543: PUSH
30544: FOR_TO
30545: IFFALSE 30584
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30547: LD_ADDR_VAR 0 9
30551: PUSH
30552: LD_VAR 0 9
30556: PPUSH
30557: LD_VAR 0 7
30561: PPUSH
30562: LD_VAR 0 6
30566: PUSH
30567: LD_VAR 0 7
30571: ARRAY
30572: PUSH
30573: LD_INT 1
30575: ARRAY
30576: PPUSH
30577: CALL_OW 1
30581: ST_TO_ADDR
30582: GO 30544
30584: POP
30585: POP
// result := tmp ;
30586: LD_ADDR_VAR 0 6
30590: PUSH
30591: LD_VAR 0 9
30595: ST_TO_ADDR
// end ; end ;
30596: LD_VAR 0 6
30600: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30601: LD_INT 0
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30609: LD_ADDR_VAR 0 5
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: ST_TO_ADDR
// if not x or not y then
30631: LD_VAR 0 2
30635: NOT
30636: IFTRUE 30645
30638: PUSH
30639: LD_VAR 0 3
30643: NOT
30644: OR
30645: IFFALSE 30649
// exit ;
30647: GO 32305
// if not range then
30649: LD_VAR 0 4
30653: NOT
30654: IFFALSE 30664
// range := 10 ;
30656: LD_ADDR_VAR 0 4
30660: PUSH
30661: LD_INT 10
30663: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30664: LD_ADDR_VAR 0 8
30668: PUSH
30669: LD_INT 81
30671: PUSH
30672: LD_VAR 0 1
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 92
30683: PUSH
30684: LD_VAR 0 2
30688: PUSH
30689: LD_VAR 0 3
30693: PUSH
30694: LD_VAR 0 4
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 21
30710: PUSH
30711: LD_INT 3
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: LIST
30726: PPUSH
30727: CALL_OW 69
30731: ST_TO_ADDR
// if not tmp then
30732: LD_VAR 0 8
30736: NOT
30737: IFFALSE 30741
// exit ;
30739: GO 32305
// for i in tmp do
30741: LD_ADDR_VAR 0 6
30745: PUSH
30746: LD_VAR 0 8
30750: PUSH
30751: FOR_IN
30752: IFFALSE 32280
// begin points := [ 0 , 0 , 0 ] ;
30754: LD_ADDR_VAR 0 9
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: LIST
30772: ST_TO_ADDR
// bpoints := 1 ;
30773: LD_ADDR_VAR 0 10
30777: PUSH
30778: LD_INT 1
30780: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30781: LD_VAR 0 6
30785: PPUSH
30786: CALL_OW 247
30790: PUSH
30791: LD_INT 1
30793: DOUBLE
30794: EQUAL
30795: IFTRUE 30799
30797: GO 31381
30799: POP
// begin if GetClass ( i ) = 1 then
30800: LD_VAR 0 6
30804: PPUSH
30805: CALL_OW 257
30809: PUSH
30810: LD_INT 1
30812: EQUAL
30813: IFFALSE 30834
// points := [ 10 , 5 , 3 ] ;
30815: LD_ADDR_VAR 0 9
30819: PUSH
30820: LD_INT 10
30822: PUSH
30823: LD_INT 5
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30834: LD_VAR 0 6
30838: PPUSH
30839: CALL_OW 257
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 3
30849: PUSH
30850: LD_INT 4
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: IN
30858: IFFALSE 30879
// points := [ 3 , 2 , 1 ] ;
30860: LD_ADDR_VAR 0 9
30864: PUSH
30865: LD_INT 3
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30879: LD_VAR 0 6
30883: PPUSH
30884: CALL_OW 257
30888: PUSH
30889: LD_INT 5
30891: EQUAL
30892: IFFALSE 30913
// points := [ 130 , 5 , 2 ] ;
30894: LD_ADDR_VAR 0 9
30898: PUSH
30899: LD_INT 130
30901: PUSH
30902: LD_INT 5
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30913: LD_VAR 0 6
30917: PPUSH
30918: CALL_OW 257
30922: PUSH
30923: LD_INT 8
30925: EQUAL
30926: IFFALSE 30947
// points := [ 35 , 35 , 30 ] ;
30928: LD_ADDR_VAR 0 9
30932: PUSH
30933: LD_INT 35
30935: PUSH
30936: LD_INT 35
30938: PUSH
30939: LD_INT 30
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: LIST
30946: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30947: LD_VAR 0 6
30951: PPUSH
30952: CALL_OW 257
30956: PUSH
30957: LD_INT 9
30959: EQUAL
30960: IFFALSE 30981
// points := [ 20 , 55 , 40 ] ;
30962: LD_ADDR_VAR 0 9
30966: PUSH
30967: LD_INT 20
30969: PUSH
30970: LD_INT 55
30972: PUSH
30973: LD_INT 40
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30981: LD_VAR 0 6
30985: PPUSH
30986: CALL_OW 257
30990: PUSH
30991: LD_INT 12
30993: PUSH
30994: LD_INT 16
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: IN
31001: IFFALSE 31022
// points := [ 5 , 3 , 2 ] ;
31003: LD_ADDR_VAR 0 9
31007: PUSH
31008: LD_INT 5
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31022: LD_VAR 0 6
31026: PPUSH
31027: CALL_OW 257
31031: PUSH
31032: LD_INT 17
31034: EQUAL
31035: IFFALSE 31056
// points := [ 100 , 50 , 75 ] ;
31037: LD_ADDR_VAR 0 9
31041: PUSH
31042: LD_INT 100
31044: PUSH
31045: LD_INT 50
31047: PUSH
31048: LD_INT 75
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31056: LD_VAR 0 6
31060: PPUSH
31061: CALL_OW 257
31065: PUSH
31066: LD_INT 15
31068: EQUAL
31069: IFFALSE 31090
// points := [ 10 , 5 , 3 ] ;
31071: LD_ADDR_VAR 0 9
31075: PUSH
31076: LD_INT 10
31078: PUSH
31079: LD_INT 5
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31090: LD_VAR 0 6
31094: PPUSH
31095: CALL_OW 257
31099: PUSH
31100: LD_INT 14
31102: EQUAL
31103: IFFALSE 31124
// points := [ 10 , 0 , 0 ] ;
31105: LD_ADDR_VAR 0 9
31109: PUSH
31110: LD_INT 10
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31124: LD_VAR 0 6
31128: PPUSH
31129: CALL_OW 257
31133: PUSH
31134: LD_INT 11
31136: EQUAL
31137: IFFALSE 31158
// points := [ 30 , 10 , 5 ] ;
31139: LD_ADDR_VAR 0 9
31143: PUSH
31144: LD_INT 30
31146: PUSH
31147: LD_INT 10
31149: PUSH
31150: LD_INT 5
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: LIST
31157: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31158: LD_VAR 0 1
31162: PPUSH
31163: LD_INT 5
31165: PPUSH
31166: CALL_OW 321
31170: PUSH
31171: LD_INT 2
31173: EQUAL
31174: IFFALSE 31191
// bpoints := bpoints * 1.8 ;
31176: LD_ADDR_VAR 0 10
31180: PUSH
31181: LD_VAR 0 10
31185: PUSH
31186: LD_REAL  1.80000000000000E+0000
31189: MUL
31190: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31191: LD_VAR 0 6
31195: PPUSH
31196: CALL_OW 257
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: LD_INT 4
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: IN
31219: IFFALSE 31239
31221: PUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: LD_INT 51
31229: PPUSH
31230: CALL_OW 321
31234: PUSH
31235: LD_INT 2
31237: EQUAL
31238: AND
31239: IFFALSE 31256
// bpoints := bpoints * 1.2 ;
31241: LD_ADDR_VAR 0 10
31245: PUSH
31246: LD_VAR 0 10
31250: PUSH
31251: LD_REAL  1.20000000000000E+0000
31254: MUL
31255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31256: LD_VAR 0 6
31260: PPUSH
31261: CALL_OW 257
31265: PUSH
31266: LD_INT 5
31268: PUSH
31269: LD_INT 7
31271: PUSH
31272: LD_INT 9
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: IN
31280: IFFALSE 31300
31282: PUSH
31283: LD_VAR 0 1
31287: PPUSH
31288: LD_INT 52
31290: PPUSH
31291: CALL_OW 321
31295: PUSH
31296: LD_INT 2
31298: EQUAL
31299: AND
31300: IFFALSE 31317
// bpoints := bpoints * 1.5 ;
31302: LD_ADDR_VAR 0 10
31306: PUSH
31307: LD_VAR 0 10
31311: PUSH
31312: LD_REAL  1.50000000000000E+0000
31315: MUL
31316: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31317: LD_VAR 0 1
31321: PPUSH
31322: LD_INT 66
31324: PPUSH
31325: CALL_OW 321
31329: PUSH
31330: LD_INT 2
31332: EQUAL
31333: IFFALSE 31350
// bpoints := bpoints * 1.1 ;
31335: LD_ADDR_VAR 0 10
31339: PUSH
31340: LD_VAR 0 10
31344: PUSH
31345: LD_REAL  1.10000000000000E+0000
31348: MUL
31349: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31350: LD_ADDR_VAR 0 10
31354: PUSH
31355: LD_VAR 0 10
31359: PUSH
31360: LD_VAR 0 6
31364: PPUSH
31365: LD_INT 1
31367: PPUSH
31368: CALL_OW 259
31372: PUSH
31373: LD_REAL  1.15000000000000E+0000
31376: MUL
31377: MUL
31378: ST_TO_ADDR
// end ; unit_vehicle :
31379: GO 32209
31381: LD_INT 2
31383: DOUBLE
31384: EQUAL
31385: IFTRUE 31389
31387: GO 32197
31389: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31390: LD_VAR 0 6
31394: PPUSH
31395: CALL_OW 264
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: LD_INT 42
31405: PUSH
31406: LD_INT 24
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: LIST
31413: IN
31414: IFFALSE 31435
// points := [ 25 , 5 , 3 ] ;
31416: LD_ADDR_VAR 0 9
31420: PUSH
31421: LD_INT 25
31423: PUSH
31424: LD_INT 5
31426: PUSH
31427: LD_INT 3
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31435: LD_VAR 0 6
31439: PPUSH
31440: CALL_OW 264
31444: PUSH
31445: LD_INT 4
31447: PUSH
31448: LD_INT 43
31450: PUSH
31451: LD_INT 25
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: IN
31459: IFFALSE 31480
// points := [ 40 , 15 , 5 ] ;
31461: LD_ADDR_VAR 0 9
31465: PUSH
31466: LD_INT 40
31468: PUSH
31469: LD_INT 15
31471: PUSH
31472: LD_INT 5
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31480: LD_VAR 0 6
31484: PPUSH
31485: CALL_OW 264
31489: PUSH
31490: LD_INT 3
31492: PUSH
31493: LD_INT 23
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: IN
31500: IFFALSE 31521
// points := [ 7 , 25 , 8 ] ;
31502: LD_ADDR_VAR 0 9
31506: PUSH
31507: LD_INT 7
31509: PUSH
31510: LD_INT 25
31512: PUSH
31513: LD_INT 8
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31521: LD_VAR 0 6
31525: PPUSH
31526: CALL_OW 264
31530: PUSH
31531: LD_INT 5
31533: PUSH
31534: LD_INT 27
31536: PUSH
31537: LD_INT 44
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: LIST
31544: IN
31545: IFFALSE 31566
// points := [ 14 , 50 , 16 ] ;
31547: LD_ADDR_VAR 0 9
31551: PUSH
31552: LD_INT 14
31554: PUSH
31555: LD_INT 50
31557: PUSH
31558: LD_INT 16
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: LIST
31565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31566: LD_VAR 0 6
31570: PPUSH
31571: CALL_OW 264
31575: PUSH
31576: LD_INT 6
31578: PUSH
31579: LD_INT 46
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: IN
31586: IFFALSE 31607
// points := [ 32 , 120 , 70 ] ;
31588: LD_ADDR_VAR 0 9
31592: PUSH
31593: LD_INT 32
31595: PUSH
31596: LD_INT 120
31598: PUSH
31599: LD_INT 70
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31607: LD_VAR 0 6
31611: PPUSH
31612: CALL_OW 264
31616: PUSH
31617: LD_INT 7
31619: PUSH
31620: LD_INT 28
31622: PUSH
31623: LD_INT 45
31625: PUSH
31626: LD_INT 92
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: IN
31635: IFFALSE 31656
// points := [ 35 , 20 , 45 ] ;
31637: LD_ADDR_VAR 0 9
31641: PUSH
31642: LD_INT 35
31644: PUSH
31645: LD_INT 20
31647: PUSH
31648: LD_INT 45
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: LIST
31655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31656: LD_VAR 0 6
31660: PPUSH
31661: CALL_OW 264
31665: PUSH
31666: LD_INT 47
31668: PUSH
31669: EMPTY
31670: LIST
31671: IN
31672: IFFALSE 31693
// points := [ 67 , 45 , 75 ] ;
31674: LD_ADDR_VAR 0 9
31678: PUSH
31679: LD_INT 67
31681: PUSH
31682: LD_INT 45
31684: PUSH
31685: LD_INT 75
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31693: LD_VAR 0 6
31697: PPUSH
31698: CALL_OW 264
31702: PUSH
31703: LD_INT 26
31705: PUSH
31706: EMPTY
31707: LIST
31708: IN
31709: IFFALSE 31730
// points := [ 120 , 30 , 80 ] ;
31711: LD_ADDR_VAR 0 9
31715: PUSH
31716: LD_INT 120
31718: PUSH
31719: LD_INT 30
31721: PUSH
31722: LD_INT 80
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31730: LD_VAR 0 6
31734: PPUSH
31735: CALL_OW 264
31739: PUSH
31740: LD_INT 22
31742: PUSH
31743: EMPTY
31744: LIST
31745: IN
31746: IFFALSE 31767
// points := [ 40 , 1 , 1 ] ;
31748: LD_ADDR_VAR 0 9
31752: PUSH
31753: LD_INT 40
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31767: LD_VAR 0 6
31771: PPUSH
31772: CALL_OW 264
31776: PUSH
31777: LD_INT 29
31779: PUSH
31780: EMPTY
31781: LIST
31782: IN
31783: IFFALSE 31804
// points := [ 70 , 200 , 400 ] ;
31785: LD_ADDR_VAR 0 9
31789: PUSH
31790: LD_INT 70
31792: PUSH
31793: LD_INT 200
31795: PUSH
31796: LD_INT 400
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31804: LD_VAR 0 6
31808: PPUSH
31809: CALL_OW 264
31813: PUSH
31814: LD_INT 14
31816: PUSH
31817: LD_INT 53
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: IN
31824: IFFALSE 31845
// points := [ 40 , 10 , 20 ] ;
31826: LD_ADDR_VAR 0 9
31830: PUSH
31831: LD_INT 40
31833: PUSH
31834: LD_INT 10
31836: PUSH
31837: LD_INT 20
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: LIST
31844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31845: LD_VAR 0 6
31849: PPUSH
31850: CALL_OW 264
31854: PUSH
31855: LD_INT 9
31857: PUSH
31858: EMPTY
31859: LIST
31860: IN
31861: IFFALSE 31882
// points := [ 5 , 70 , 20 ] ;
31863: LD_ADDR_VAR 0 9
31867: PUSH
31868: LD_INT 5
31870: PUSH
31871: LD_INT 70
31873: PUSH
31874: LD_INT 20
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31882: LD_VAR 0 6
31886: PPUSH
31887: CALL_OW 264
31891: PUSH
31892: LD_INT 10
31894: PUSH
31895: EMPTY
31896: LIST
31897: IN
31898: IFFALSE 31919
// points := [ 35 , 110 , 70 ] ;
31900: LD_ADDR_VAR 0 9
31904: PUSH
31905: LD_INT 35
31907: PUSH
31908: LD_INT 110
31910: PUSH
31911: LD_INT 70
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31919: LD_VAR 0 6
31923: PPUSH
31924: CALL_OW 265
31928: PUSH
31929: LD_INT 25
31931: EQUAL
31932: IFFALSE 31953
// points := [ 80 , 65 , 100 ] ;
31934: LD_ADDR_VAR 0 9
31938: PUSH
31939: LD_INT 80
31941: PUSH
31942: LD_INT 65
31944: PUSH
31945: LD_INT 100
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31953: LD_VAR 0 6
31957: PPUSH
31958: CALL_OW 263
31962: PUSH
31963: LD_INT 1
31965: EQUAL
31966: IFFALSE 32001
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31968: LD_ADDR_VAR 0 10
31972: PUSH
31973: LD_VAR 0 10
31977: PUSH
31978: LD_VAR 0 6
31982: PPUSH
31983: CALL_OW 311
31987: PPUSH
31988: LD_INT 3
31990: PPUSH
31991: CALL_OW 259
31995: PUSH
31996: LD_INT 4
31998: MUL
31999: MUL
32000: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32001: LD_VAR 0 6
32005: PPUSH
32006: CALL_OW 263
32010: PUSH
32011: LD_INT 2
32013: EQUAL
32014: IFFALSE 32065
// begin j := IsControledBy ( i ) ;
32016: LD_ADDR_VAR 0 7
32020: PUSH
32021: LD_VAR 0 6
32025: PPUSH
32026: CALL_OW 312
32030: ST_TO_ADDR
// if j then
32031: LD_VAR 0 7
32035: IFFALSE 32065
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32037: LD_ADDR_VAR 0 10
32041: PUSH
32042: LD_VAR 0 10
32046: PUSH
32047: LD_VAR 0 7
32051: PPUSH
32052: LD_INT 3
32054: PPUSH
32055: CALL_OW 259
32059: PUSH
32060: LD_INT 3
32062: MUL
32063: MUL
32064: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32065: LD_VAR 0 6
32069: PPUSH
32070: CALL_OW 264
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: LD_INT 6
32080: PUSH
32081: LD_INT 46
32083: PUSH
32084: LD_INT 44
32086: PUSH
32087: LD_INT 47
32089: PUSH
32090: LD_INT 45
32092: PUSH
32093: LD_INT 28
32095: PUSH
32096: LD_INT 7
32098: PUSH
32099: LD_INT 27
32101: PUSH
32102: LD_INT 29
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: IN
32117: IFFALSE 32137
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: LD_INT 52
32127: PPUSH
32128: CALL_OW 321
32132: PUSH
32133: LD_INT 2
32135: EQUAL
32136: AND
32137: IFFALSE 32154
// bpoints := bpoints * 1.2 ;
32139: LD_ADDR_VAR 0 10
32143: PUSH
32144: LD_VAR 0 10
32148: PUSH
32149: LD_REAL  1.20000000000000E+0000
32152: MUL
32153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32154: LD_VAR 0 6
32158: PPUSH
32159: CALL_OW 264
32163: PUSH
32164: LD_INT 6
32166: PUSH
32167: LD_INT 46
32169: PUSH
32170: LD_INT 47
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: IN
32178: IFFALSE 32195
// bpoints := bpoints * 1.2 ;
32180: LD_ADDR_VAR 0 10
32184: PUSH
32185: LD_VAR 0 10
32189: PUSH
32190: LD_REAL  1.20000000000000E+0000
32193: MUL
32194: ST_TO_ADDR
// end ; unit_building :
32195: GO 32209
32197: LD_INT 3
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32208
32205: POP
// ; end ;
32206: GO 32209
32208: POP
// for j = 1 to 3 do
32209: LD_ADDR_VAR 0 7
32213: PUSH
32214: DOUBLE
32215: LD_INT 1
32217: DEC
32218: ST_TO_ADDR
32219: LD_INT 3
32221: PUSH
32222: FOR_TO
32223: IFFALSE 32276
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32225: LD_ADDR_VAR 0 5
32229: PUSH
32230: LD_VAR 0 5
32234: PPUSH
32235: LD_VAR 0 7
32239: PPUSH
32240: LD_VAR 0 5
32244: PUSH
32245: LD_VAR 0 7
32249: ARRAY
32250: PUSH
32251: LD_VAR 0 9
32255: PUSH
32256: LD_VAR 0 7
32260: ARRAY
32261: PUSH
32262: LD_VAR 0 10
32266: MUL
32267: PLUS
32268: PPUSH
32269: CALL_OW 1
32273: ST_TO_ADDR
32274: GO 32222
32276: POP
32277: POP
// end ;
32278: GO 30751
32280: POP
32281: POP
// result := Replace ( result , 4 , tmp ) ;
32282: LD_ADDR_VAR 0 5
32286: PUSH
32287: LD_VAR 0 5
32291: PPUSH
32292: LD_INT 4
32294: PPUSH
32295: LD_VAR 0 8
32299: PPUSH
32300: CALL_OW 1
32304: ST_TO_ADDR
// end ;
32305: LD_VAR 0 5
32309: RET
// export function DangerAtRange ( unit , range ) ; begin
32310: LD_INT 0
32312: PPUSH
// if not unit then
32313: LD_VAR 0 1
32317: NOT
32318: IFFALSE 32322
// exit ;
32320: GO 32367
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_VAR 0 1
32331: PPUSH
32332: CALL_OW 255
32336: PPUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: CALL_OW 250
32346: PPUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 251
32356: PPUSH
32357: LD_VAR 0 2
32361: PPUSH
32362: CALL 30601 0 4
32366: ST_TO_ADDR
// end ;
32367: LD_VAR 0 3
32371: RET
// export function DangerInArea ( side , area ) ; begin
32372: LD_INT 0
32374: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32375: LD_ADDR_VAR 0 3
32379: PUSH
32380: LD_VAR 0 2
32384: PPUSH
32385: LD_INT 81
32387: PUSH
32388: LD_VAR 0 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PPUSH
32397: CALL_OW 70
32401: ST_TO_ADDR
// end ;
32402: LD_VAR 0 3
32406: RET
// export function IsExtension ( b ) ; begin
32407: LD_INT 0
32409: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32410: LD_ADDR_VAR 0 2
32414: PUSH
32415: LD_VAR 0 1
32419: PUSH
32420: LD_INT 23
32422: PUSH
32423: LD_INT 20
32425: PUSH
32426: LD_INT 22
32428: PUSH
32429: LD_INT 17
32431: PUSH
32432: LD_INT 24
32434: PUSH
32435: LD_INT 21
32437: PUSH
32438: LD_INT 19
32440: PUSH
32441: LD_INT 16
32443: PUSH
32444: LD_INT 25
32446: PUSH
32447: LD_INT 18
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: IN
32462: ST_TO_ADDR
// end ;
32463: LD_VAR 0 2
32467: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32468: LD_INT 0
32470: PPUSH
32471: PPUSH
32472: PPUSH
// result := [ ] ;
32473: LD_ADDR_VAR 0 4
32477: PUSH
32478: EMPTY
32479: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32480: LD_ADDR_VAR 0 5
32484: PUSH
32485: LD_VAR 0 2
32489: PPUSH
32490: LD_INT 21
32492: PUSH
32493: LD_INT 3
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PPUSH
32500: CALL_OW 70
32504: ST_TO_ADDR
// if not tmp then
32505: LD_VAR 0 5
32509: NOT
32510: IFFALSE 32514
// exit ;
32512: GO 32578
// if checkLink then
32514: LD_VAR 0 3
32518: IFFALSE 32568
// begin for i in tmp do
32520: LD_ADDR_VAR 0 6
32524: PUSH
32525: LD_VAR 0 5
32529: PUSH
32530: FOR_IN
32531: IFFALSE 32566
// if GetBase ( i ) <> base then
32533: LD_VAR 0 6
32537: PPUSH
32538: CALL_OW 274
32542: PUSH
32543: LD_VAR 0 1
32547: NONEQUAL
32548: IFFALSE 32564
// ComLinkToBase ( base , i ) ;
32550: LD_VAR 0 1
32554: PPUSH
32555: LD_VAR 0 6
32559: PPUSH
32560: CALL_OW 169
32564: GO 32530
32566: POP
32567: POP
// end ; result := tmp ;
32568: LD_ADDR_VAR 0 4
32572: PUSH
32573: LD_VAR 0 5
32577: ST_TO_ADDR
// end ;
32578: LD_VAR 0 4
32582: RET
// export function ComComplete ( units , b ) ; var i ; begin
32583: LD_INT 0
32585: PPUSH
32586: PPUSH
// if not units then
32587: LD_VAR 0 1
32591: NOT
32592: IFFALSE 32596
// exit ;
32594: GO 32686
// for i in units do
32596: LD_ADDR_VAR 0 4
32600: PUSH
32601: LD_VAR 0 1
32605: PUSH
32606: FOR_IN
32607: IFFALSE 32684
// if BuildingStatus ( b ) = bs_build then
32609: LD_VAR 0 2
32613: PPUSH
32614: CALL_OW 461
32618: PUSH
32619: LD_INT 1
32621: EQUAL
32622: IFFALSE 32682
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32624: LD_VAR 0 4
32628: PPUSH
32629: LD_STRING h
32631: PUSH
32632: LD_VAR 0 2
32636: PPUSH
32637: CALL_OW 250
32641: PUSH
32642: LD_VAR 0 2
32646: PPUSH
32647: CALL_OW 251
32651: PUSH
32652: LD_VAR 0 2
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: PUSH
32675: EMPTY
32676: LIST
32677: PPUSH
32678: CALL_OW 446
32682: GO 32606
32684: POP
32685: POP
// end ;
32686: LD_VAR 0 3
32690: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32691: LD_INT 0
32693: PPUSH
32694: PPUSH
32695: PPUSH
32696: PPUSH
32697: PPUSH
32698: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32699: LD_VAR 0 1
32703: NOT
32704: IFTRUE 32721
32706: PUSH
32707: LD_VAR 0 1
32711: PPUSH
32712: CALL_OW 263
32716: PUSH
32717: LD_INT 2
32719: NONEQUAL
32720: OR
32721: IFFALSE 32725
// exit ;
32723: GO 33041
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32725: LD_ADDR_VAR 0 6
32729: PUSH
32730: LD_INT 22
32732: PUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 255
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 30
32752: PUSH
32753: LD_INT 36
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 34
32762: PUSH
32763: LD_INT 31
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PPUSH
32779: CALL_OW 69
32783: ST_TO_ADDR
// if not tmp then
32784: LD_VAR 0 6
32788: NOT
32789: IFFALSE 32793
// exit ;
32791: GO 33041
// result := [ ] ;
32793: LD_ADDR_VAR 0 2
32797: PUSH
32798: EMPTY
32799: ST_TO_ADDR
// for i in tmp do
32800: LD_ADDR_VAR 0 3
32804: PUSH
32805: LD_VAR 0 6
32809: PUSH
32810: FOR_IN
32811: IFFALSE 32882
// begin t := UnitsInside ( i ) ;
32813: LD_ADDR_VAR 0 4
32817: PUSH
32818: LD_VAR 0 3
32822: PPUSH
32823: CALL_OW 313
32827: ST_TO_ADDR
// if t then
32828: LD_VAR 0 4
32832: IFFALSE 32880
// for j in t do
32834: LD_ADDR_VAR 0 7
32838: PUSH
32839: LD_VAR 0 4
32843: PUSH
32844: FOR_IN
32845: IFFALSE 32878
// result := Replace ( result , result + 1 , j ) ;
32847: LD_ADDR_VAR 0 2
32851: PUSH
32852: LD_VAR 0 2
32856: PPUSH
32857: LD_VAR 0 2
32861: PUSH
32862: LD_INT 1
32864: PLUS
32865: PPUSH
32866: LD_VAR 0 7
32870: PPUSH
32871: CALL_OW 1
32875: ST_TO_ADDR
32876: GO 32844
32878: POP
32879: POP
// end ;
32880: GO 32810
32882: POP
32883: POP
// if not result then
32884: LD_VAR 0 2
32888: NOT
32889: IFFALSE 32893
// exit ;
32891: GO 33041
// mech := result [ 1 ] ;
32893: LD_ADDR_VAR 0 5
32897: PUSH
32898: LD_VAR 0 2
32902: PUSH
32903: LD_INT 1
32905: ARRAY
32906: ST_TO_ADDR
// if result > 1 then
32907: LD_VAR 0 2
32911: PUSH
32912: LD_INT 1
32914: GREATER
32915: IFFALSE 33027
// begin for i = 2 to result do
32917: LD_ADDR_VAR 0 3
32921: PUSH
32922: DOUBLE
32923: LD_INT 2
32925: DEC
32926: ST_TO_ADDR
32927: LD_VAR 0 2
32931: PUSH
32932: FOR_TO
32933: IFFALSE 33025
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32935: LD_ADDR_VAR 0 4
32939: PUSH
32940: LD_VAR 0 2
32944: PUSH
32945: LD_VAR 0 3
32949: ARRAY
32950: PPUSH
32951: LD_INT 3
32953: PPUSH
32954: CALL_OW 259
32958: PUSH
32959: LD_VAR 0 2
32963: PUSH
32964: LD_VAR 0 3
32968: ARRAY
32969: PPUSH
32970: CALL_OW 432
32974: MINUS
32975: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32976: LD_VAR 0 4
32980: PUSH
32981: LD_VAR 0 5
32985: PPUSH
32986: LD_INT 3
32988: PPUSH
32989: CALL_OW 259
32993: PUSH
32994: LD_VAR 0 5
32998: PPUSH
32999: CALL_OW 432
33003: MINUS
33004: GREATEREQUAL
33005: IFFALSE 33023
// mech := result [ i ] ;
33007: LD_ADDR_VAR 0 5
33011: PUSH
33012: LD_VAR 0 2
33016: PUSH
33017: LD_VAR 0 3
33021: ARRAY
33022: ST_TO_ADDR
// end ;
33023: GO 32932
33025: POP
33026: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33027: LD_VAR 0 1
33031: PPUSH
33032: LD_VAR 0 5
33036: PPUSH
33037: CALL_OW 135
// end ;
33041: LD_VAR 0 2
33045: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33046: LD_INT 0
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
33055: PPUSH
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
33060: PPUSH
// result := [ ] ;
33061: LD_ADDR_VAR 0 7
33065: PUSH
33066: EMPTY
33067: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33068: LD_VAR 0 1
33072: PPUSH
33073: CALL_OW 266
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: IN
33088: NOT
33089: IFFALSE 33093
// exit ;
33091: GO 34733
// if name then
33093: LD_VAR 0 3
33097: IFFALSE 33113
// SetBName ( base_dep , name ) ;
33099: LD_VAR 0 1
33103: PPUSH
33104: LD_VAR 0 3
33108: PPUSH
33109: CALL_OW 500
// base := GetBase ( base_dep ) ;
33113: LD_ADDR_VAR 0 15
33117: PUSH
33118: LD_VAR 0 1
33122: PPUSH
33123: CALL_OW 274
33127: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33128: LD_ADDR_VAR 0 16
33132: PUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 255
33142: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33143: LD_ADDR_VAR 0 17
33147: PUSH
33148: LD_VAR 0 1
33152: PPUSH
33153: CALL_OW 248
33157: ST_TO_ADDR
// if sources then
33158: LD_VAR 0 5
33162: IFFALSE 33209
// for i = 1 to 3 do
33164: LD_ADDR_VAR 0 8
33168: PUSH
33169: DOUBLE
33170: LD_INT 1
33172: DEC
33173: ST_TO_ADDR
33174: LD_INT 3
33176: PUSH
33177: FOR_TO
33178: IFFALSE 33207
// AddResourceType ( base , i , sources [ i ] ) ;
33180: LD_VAR 0 15
33184: PPUSH
33185: LD_VAR 0 8
33189: PPUSH
33190: LD_VAR 0 5
33194: PUSH
33195: LD_VAR 0 8
33199: ARRAY
33200: PPUSH
33201: CALL_OW 276
33205: GO 33177
33207: POP
33208: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33209: LD_ADDR_VAR 0 18
33213: PUSH
33214: LD_VAR 0 15
33218: PPUSH
33219: LD_VAR 0 2
33223: PPUSH
33224: LD_INT 1
33226: PPUSH
33227: CALL 32468 0 3
33231: ST_TO_ADDR
// InitHc ;
33232: CALL_OW 19
// InitUc ;
33236: CALL_OW 18
// uc_side := side ;
33240: LD_ADDR_OWVAR 20
33244: PUSH
33245: LD_VAR 0 16
33249: ST_TO_ADDR
// uc_nation := nation ;
33250: LD_ADDR_OWVAR 21
33254: PUSH
33255: LD_VAR 0 17
33259: ST_TO_ADDR
// if buildings then
33260: LD_VAR 0 18
33264: IFFALSE 34592
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33266: LD_ADDR_VAR 0 19
33270: PUSH
33271: LD_VAR 0 18
33275: PPUSH
33276: LD_INT 2
33278: PUSH
33279: LD_INT 30
33281: PUSH
33282: LD_INT 29
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 30
33291: PUSH
33292: LD_INT 30
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: PPUSH
33304: CALL_OW 72
33308: ST_TO_ADDR
// if tmp then
33309: LD_VAR 0 19
33313: IFFALSE 33361
// for i in tmp do
33315: LD_ADDR_VAR 0 8
33319: PUSH
33320: LD_VAR 0 19
33324: PUSH
33325: FOR_IN
33326: IFFALSE 33359
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33328: LD_VAR 0 8
33332: PPUSH
33333: CALL_OW 250
33337: PPUSH
33338: LD_VAR 0 8
33342: PPUSH
33343: CALL_OW 251
33347: PPUSH
33348: LD_VAR 0 16
33352: PPUSH
33353: CALL_OW 441
33357: GO 33325
33359: POP
33360: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33361: LD_VAR 0 18
33365: PPUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 30
33371: PUSH
33372: LD_INT 32
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 30
33381: PUSH
33382: LD_INT 33
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: PPUSH
33394: CALL_OW 72
33398: IFFALSE 33486
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33400: LD_ADDR_VAR 0 8
33404: PUSH
33405: LD_VAR 0 18
33409: PPUSH
33410: LD_INT 2
33412: PUSH
33413: LD_INT 30
33415: PUSH
33416: LD_INT 32
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 30
33425: PUSH
33426: LD_INT 33
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: PPUSH
33438: CALL_OW 72
33442: PUSH
33443: FOR_IN
33444: IFFALSE 33484
// begin if not GetBWeapon ( i ) then
33446: LD_VAR 0 8
33450: PPUSH
33451: CALL_OW 269
33455: NOT
33456: IFFALSE 33482
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33458: LD_VAR 0 8
33462: PPUSH
33463: LD_VAR 0 8
33467: PPUSH
33468: LD_VAR 0 2
33472: PPUSH
33473: CALL 34738 0 2
33477: PPUSH
33478: CALL_OW 431
// end ;
33482: GO 33443
33484: POP
33485: POP
// end ; for i = 1 to personel do
33486: LD_ADDR_VAR 0 8
33490: PUSH
33491: DOUBLE
33492: LD_INT 1
33494: DEC
33495: ST_TO_ADDR
33496: LD_VAR 0 6
33500: PUSH
33501: FOR_TO
33502: IFFALSE 34572
// begin if i > 4 then
33504: LD_VAR 0 8
33508: PUSH
33509: LD_INT 4
33511: GREATER
33512: IFFALSE 33516
// break ;
33514: GO 34572
// case i of 1 :
33516: LD_VAR 0 8
33520: PUSH
33521: LD_INT 1
33523: DOUBLE
33524: EQUAL
33525: IFTRUE 33529
33527: GO 33609
33529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33530: LD_ADDR_VAR 0 12
33534: PUSH
33535: LD_VAR 0 18
33539: PPUSH
33540: LD_INT 22
33542: PUSH
33543: LD_VAR 0 16
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 58
33554: PUSH
33555: EMPTY
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: LD_INT 30
33563: PUSH
33564: LD_INT 32
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 30
33573: PUSH
33574: LD_INT 4
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 30
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: PPUSH
33602: CALL_OW 72
33606: ST_TO_ADDR
33607: GO 33831
33609: LD_INT 2
33611: DOUBLE
33612: EQUAL
33613: IFTRUE 33617
33615: GO 33679
33617: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33618: LD_ADDR_VAR 0 12
33622: PUSH
33623: LD_VAR 0 18
33627: PPUSH
33628: LD_INT 22
33630: PUSH
33631: LD_VAR 0 16
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 30
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 30
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PPUSH
33672: CALL_OW 72
33676: ST_TO_ADDR
33677: GO 33831
33679: LD_INT 3
33681: DOUBLE
33682: EQUAL
33683: IFTRUE 33687
33685: GO 33749
33687: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33688: LD_ADDR_VAR 0 12
33692: PUSH
33693: LD_VAR 0 18
33697: PPUSH
33698: LD_INT 22
33700: PUSH
33701: LD_VAR 0 16
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: LD_INT 30
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 30
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: LIST
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PPUSH
33742: CALL_OW 72
33746: ST_TO_ADDR
33747: GO 33831
33749: LD_INT 4
33751: DOUBLE
33752: EQUAL
33753: IFTRUE 33757
33755: GO 33830
33757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33758: LD_ADDR_VAR 0 12
33762: PUSH
33763: LD_VAR 0 18
33767: PPUSH
33768: LD_INT 22
33770: PUSH
33771: LD_VAR 0 16
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: LD_INT 30
33785: PUSH
33786: LD_INT 6
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 30
33795: PUSH
33796: LD_INT 7
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 30
33805: PUSH
33806: LD_INT 8
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PPUSH
33823: CALL_OW 72
33827: ST_TO_ADDR
33828: GO 33831
33830: POP
// if i = 1 then
33831: LD_VAR 0 8
33835: PUSH
33836: LD_INT 1
33838: EQUAL
33839: IFFALSE 33950
// begin tmp := [ ] ;
33841: LD_ADDR_VAR 0 19
33845: PUSH
33846: EMPTY
33847: ST_TO_ADDR
// for j in f do
33848: LD_ADDR_VAR 0 9
33852: PUSH
33853: LD_VAR 0 12
33857: PUSH
33858: FOR_IN
33859: IFFALSE 33932
// if GetBType ( j ) = b_bunker then
33861: LD_VAR 0 9
33865: PPUSH
33866: CALL_OW 266
33870: PUSH
33871: LD_INT 32
33873: EQUAL
33874: IFFALSE 33901
// tmp := Insert ( tmp , 1 , j ) else
33876: LD_ADDR_VAR 0 19
33880: PUSH
33881: LD_VAR 0 19
33885: PPUSH
33886: LD_INT 1
33888: PPUSH
33889: LD_VAR 0 9
33893: PPUSH
33894: CALL_OW 2
33898: ST_TO_ADDR
33899: GO 33930
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33901: LD_ADDR_VAR 0 19
33905: PUSH
33906: LD_VAR 0 19
33910: PPUSH
33911: LD_VAR 0 19
33915: PUSH
33916: LD_INT 1
33918: PLUS
33919: PPUSH
33920: LD_VAR 0 9
33924: PPUSH
33925: CALL_OW 2
33929: ST_TO_ADDR
33930: GO 33858
33932: POP
33933: POP
// if tmp then
33934: LD_VAR 0 19
33938: IFFALSE 33950
// f := tmp ;
33940: LD_ADDR_VAR 0 12
33944: PUSH
33945: LD_VAR 0 19
33949: ST_TO_ADDR
// end ; x := personel [ i ] ;
33950: LD_ADDR_VAR 0 13
33954: PUSH
33955: LD_VAR 0 6
33959: PUSH
33960: LD_VAR 0 8
33964: ARRAY
33965: ST_TO_ADDR
// if x = - 1 then
33966: LD_VAR 0 13
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: EQUAL
33975: IFFALSE 34186
// begin for j in f do
33977: LD_ADDR_VAR 0 9
33981: PUSH
33982: LD_VAR 0 12
33986: PUSH
33987: FOR_IN
33988: IFFALSE 34182
// repeat InitHc ;
33990: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33994: LD_VAR 0 9
33998: PPUSH
33999: CALL_OW 266
34003: PUSH
34004: LD_INT 5
34006: EQUAL
34007: IFFALSE 34077
// begin if UnitsInside ( j ) < 3 then
34009: LD_VAR 0 9
34013: PPUSH
34014: CALL_OW 313
34018: PUSH
34019: LD_INT 3
34021: LESS
34022: IFFALSE 34058
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34024: LD_INT 0
34026: PPUSH
34027: LD_INT 5
34029: PUSH
34030: LD_INT 8
34032: PUSH
34033: LD_INT 9
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: PUSH
34041: LD_VAR 0 17
34045: ARRAY
34046: PPUSH
34047: LD_VAR 0 4
34051: PPUSH
34052: CALL_OW 380
34056: GO 34075
// PrepareHuman ( false , i , skill ) ;
34058: LD_INT 0
34060: PPUSH
34061: LD_VAR 0 8
34065: PPUSH
34066: LD_VAR 0 4
34070: PPUSH
34071: CALL_OW 380
// end else
34075: GO 34094
// PrepareHuman ( false , i , skill ) ;
34077: LD_INT 0
34079: PPUSH
34080: LD_VAR 0 8
34084: PPUSH
34085: LD_VAR 0 4
34089: PPUSH
34090: CALL_OW 380
// un := CreateHuman ;
34094: LD_ADDR_VAR 0 14
34098: PUSH
34099: CALL_OW 44
34103: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34104: LD_ADDR_VAR 0 7
34108: PUSH
34109: LD_VAR 0 7
34113: PPUSH
34114: LD_INT 1
34116: PPUSH
34117: LD_VAR 0 14
34121: PPUSH
34122: CALL_OW 2
34126: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34127: LD_VAR 0 14
34131: PPUSH
34132: LD_VAR 0 9
34136: PPUSH
34137: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34141: LD_VAR 0 9
34145: PPUSH
34146: CALL_OW 313
34150: PUSH
34151: LD_INT 6
34153: EQUAL
34154: IFTRUE 34178
34156: PUSH
34157: LD_VAR 0 9
34161: PPUSH
34162: CALL_OW 266
34166: PUSH
34167: LD_INT 32
34169: PUSH
34170: LD_INT 31
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: IN
34177: OR
34178: IFFALSE 33990
34180: GO 33987
34182: POP
34183: POP
// end else
34184: GO 34570
// for j = 1 to x do
34186: LD_ADDR_VAR 0 9
34190: PUSH
34191: DOUBLE
34192: LD_INT 1
34194: DEC
34195: ST_TO_ADDR
34196: LD_VAR 0 13
34200: PUSH
34201: FOR_TO
34202: IFFALSE 34568
// begin InitHc ;
34204: CALL_OW 19
// if not f then
34208: LD_VAR 0 12
34212: NOT
34213: IFFALSE 34302
// begin PrepareHuman ( false , i , skill ) ;
34215: LD_INT 0
34217: PPUSH
34218: LD_VAR 0 8
34222: PPUSH
34223: LD_VAR 0 4
34227: PPUSH
34228: CALL_OW 380
// un := CreateHuman ;
34232: LD_ADDR_VAR 0 14
34236: PUSH
34237: CALL_OW 44
34241: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34242: LD_ADDR_VAR 0 7
34246: PUSH
34247: LD_VAR 0 7
34251: PPUSH
34252: LD_INT 1
34254: PPUSH
34255: LD_VAR 0 14
34259: PPUSH
34260: CALL_OW 2
34264: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34265: LD_VAR 0 14
34269: PPUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: CALL_OW 250
34279: PPUSH
34280: LD_VAR 0 1
34284: PPUSH
34285: CALL_OW 251
34289: PPUSH
34290: LD_INT 10
34292: PPUSH
34293: LD_INT 0
34295: PPUSH
34296: CALL_OW 50
// continue ;
34300: GO 34201
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34302: LD_VAR 0 12
34306: PUSH
34307: LD_INT 1
34309: ARRAY
34310: PPUSH
34311: CALL_OW 313
34315: IFFALSE 34343
34317: PUSH
34318: LD_VAR 0 12
34322: PUSH
34323: LD_INT 1
34325: ARRAY
34326: PPUSH
34327: CALL_OW 266
34331: PUSH
34332: LD_INT 32
34334: PUSH
34335: LD_INT 31
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: IN
34342: AND
34343: IFTRUE 34364
34345: PUSH
34346: LD_VAR 0 12
34350: PUSH
34351: LD_INT 1
34353: ARRAY
34354: PPUSH
34355: CALL_OW 313
34359: PUSH
34360: LD_INT 6
34362: EQUAL
34363: OR
34364: IFFALSE 34384
// f := Delete ( f , 1 ) ;
34366: LD_ADDR_VAR 0 12
34370: PUSH
34371: LD_VAR 0 12
34375: PPUSH
34376: LD_INT 1
34378: PPUSH
34379: CALL_OW 3
34383: ST_TO_ADDR
// if not f then
34384: LD_VAR 0 12
34388: NOT
34389: IFFALSE 34407
// begin x := x + 2 ;
34391: LD_ADDR_VAR 0 13
34395: PUSH
34396: LD_VAR 0 13
34400: PUSH
34401: LD_INT 2
34403: PLUS
34404: ST_TO_ADDR
// continue ;
34405: GO 34201
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34407: LD_VAR 0 12
34411: PUSH
34412: LD_INT 1
34414: ARRAY
34415: PPUSH
34416: CALL_OW 266
34420: PUSH
34421: LD_INT 5
34423: EQUAL
34424: IFFALSE 34498
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34426: LD_VAR 0 12
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: PPUSH
34435: CALL_OW 313
34439: PUSH
34440: LD_INT 3
34442: LESS
34443: IFFALSE 34479
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34445: LD_INT 0
34447: PPUSH
34448: LD_INT 5
34450: PUSH
34451: LD_INT 8
34453: PUSH
34454: LD_INT 9
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: PUSH
34462: LD_VAR 0 17
34466: ARRAY
34467: PPUSH
34468: LD_VAR 0 4
34472: PPUSH
34473: CALL_OW 380
34477: GO 34496
// PrepareHuman ( false , i , skill ) ;
34479: LD_INT 0
34481: PPUSH
34482: LD_VAR 0 8
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: CALL_OW 380
// end else
34496: GO 34515
// PrepareHuman ( false , i , skill ) ;
34498: LD_INT 0
34500: PPUSH
34501: LD_VAR 0 8
34505: PPUSH
34506: LD_VAR 0 4
34510: PPUSH
34511: CALL_OW 380
// un := CreateHuman ;
34515: LD_ADDR_VAR 0 14
34519: PUSH
34520: CALL_OW 44
34524: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34525: LD_ADDR_VAR 0 7
34529: PUSH
34530: LD_VAR 0 7
34534: PPUSH
34535: LD_INT 1
34537: PPUSH
34538: LD_VAR 0 14
34542: PPUSH
34543: CALL_OW 2
34547: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34548: LD_VAR 0 14
34552: PPUSH
34553: LD_VAR 0 12
34557: PUSH
34558: LD_INT 1
34560: ARRAY
34561: PPUSH
34562: CALL_OW 52
// end ;
34566: GO 34201
34568: POP
34569: POP
// end ;
34570: GO 33501
34572: POP
34573: POP
// result := result ^ buildings ;
34574: LD_ADDR_VAR 0 7
34578: PUSH
34579: LD_VAR 0 7
34583: PUSH
34584: LD_VAR 0 18
34588: ADD
34589: ST_TO_ADDR
// end else
34590: GO 34733
// begin for i = 1 to personel do
34592: LD_ADDR_VAR 0 8
34596: PUSH
34597: DOUBLE
34598: LD_INT 1
34600: DEC
34601: ST_TO_ADDR
34602: LD_VAR 0 6
34606: PUSH
34607: FOR_TO
34608: IFFALSE 34731
// begin if i > 4 then
34610: LD_VAR 0 8
34614: PUSH
34615: LD_INT 4
34617: GREATER
34618: IFFALSE 34622
// break ;
34620: GO 34731
// x := personel [ i ] ;
34622: LD_ADDR_VAR 0 13
34626: PUSH
34627: LD_VAR 0 6
34631: PUSH
34632: LD_VAR 0 8
34636: ARRAY
34637: ST_TO_ADDR
// if x = - 1 then
34638: LD_VAR 0 13
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: EQUAL
34647: IFFALSE 34651
// continue ;
34649: GO 34607
// PrepareHuman ( false , i , skill ) ;
34651: LD_INT 0
34653: PPUSH
34654: LD_VAR 0 8
34658: PPUSH
34659: LD_VAR 0 4
34663: PPUSH
34664: CALL_OW 380
// un := CreateHuman ;
34668: LD_ADDR_VAR 0 14
34672: PUSH
34673: CALL_OW 44
34677: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34678: LD_VAR 0 14
34682: PPUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 250
34692: PPUSH
34693: LD_VAR 0 1
34697: PPUSH
34698: CALL_OW 251
34702: PPUSH
34703: LD_INT 10
34705: PPUSH
34706: LD_INT 0
34708: PPUSH
34709: CALL_OW 50
// result := result ^ un ;
34713: LD_ADDR_VAR 0 7
34717: PUSH
34718: LD_VAR 0 7
34722: PUSH
34723: LD_VAR 0 14
34727: ADD
34728: ST_TO_ADDR
// end ;
34729: GO 34607
34731: POP
34732: POP
// end ; end ;
34733: LD_VAR 0 7
34737: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34738: LD_INT 0
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
34747: PPUSH
34748: PPUSH
34749: PPUSH
34750: PPUSH
34751: PPUSH
34752: PPUSH
34753: PPUSH
34754: PPUSH
34755: PPUSH
// result := false ;
34756: LD_ADDR_VAR 0 3
34760: PUSH
34761: LD_INT 0
34763: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34764: LD_VAR 0 1
34768: NOT
34769: IFTRUE 34794
34771: PUSH
34772: LD_VAR 0 1
34776: PPUSH
34777: CALL_OW 266
34781: PUSH
34782: LD_INT 32
34784: PUSH
34785: LD_INT 33
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: IN
34792: NOT
34793: OR
34794: IFFALSE 34798
// exit ;
34796: GO 35933
// nat := GetNation ( tower ) ;
34798: LD_ADDR_VAR 0 12
34802: PUSH
34803: LD_VAR 0 1
34807: PPUSH
34808: CALL_OW 248
34812: ST_TO_ADDR
// side := GetSide ( tower ) ;
34813: LD_ADDR_VAR 0 16
34817: PUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL_OW 255
34827: ST_TO_ADDR
// x := GetX ( tower ) ;
34828: LD_ADDR_VAR 0 10
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 250
34842: ST_TO_ADDR
// y := GetY ( tower ) ;
34843: LD_ADDR_VAR 0 11
34847: PUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: CALL_OW 251
34857: ST_TO_ADDR
// if not x or not y then
34858: LD_VAR 0 10
34862: NOT
34863: IFTRUE 34872
34865: PUSH
34866: LD_VAR 0 11
34870: NOT
34871: OR
34872: IFFALSE 34876
// exit ;
34874: GO 35933
// weapon := 0 ;
34876: LD_ADDR_VAR 0 18
34880: PUSH
34881: LD_INT 0
34883: ST_TO_ADDR
// fac_list := [ ] ;
34884: LD_ADDR_VAR 0 17
34888: PUSH
34889: EMPTY
34890: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34891: LD_ADDR_VAR 0 6
34895: PUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 274
34905: PPUSH
34906: LD_VAR 0 2
34910: PPUSH
34911: LD_INT 0
34913: PPUSH
34914: CALL 32468 0 3
34918: PPUSH
34919: LD_INT 30
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PPUSH
34929: CALL_OW 72
34933: ST_TO_ADDR
// if not factories then
34934: LD_VAR 0 6
34938: NOT
34939: IFFALSE 34943
// exit ;
34941: GO 35933
// for i in factories do
34943: LD_ADDR_VAR 0 8
34947: PUSH
34948: LD_VAR 0 6
34952: PUSH
34953: FOR_IN
34954: IFFALSE 34979
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34956: LD_ADDR_VAR 0 17
34960: PUSH
34961: LD_VAR 0 17
34965: PUSH
34966: LD_VAR 0 8
34970: PPUSH
34971: CALL_OW 478
34975: UNION
34976: ST_TO_ADDR
34977: GO 34953
34979: POP
34980: POP
// if not fac_list then
34981: LD_VAR 0 17
34985: NOT
34986: IFFALSE 34990
// exit ;
34988: GO 35933
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34990: LD_ADDR_VAR 0 5
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: LD_INT 5
35000: PUSH
35001: LD_INT 9
35003: PUSH
35004: LD_INT 10
35006: PUSH
35007: LD_INT 6
35009: PUSH
35010: LD_INT 7
35012: PUSH
35013: LD_INT 11
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 27
35027: PUSH
35028: LD_INT 28
35030: PUSH
35031: LD_INT 26
35033: PUSH
35034: LD_INT 30
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 43
35045: PUSH
35046: LD_INT 44
35048: PUSH
35049: LD_INT 46
35051: PUSH
35052: LD_INT 45
35054: PUSH
35055: LD_INT 47
35057: PUSH
35058: LD_INT 49
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: PUSH
35074: LD_VAR 0 12
35078: ARRAY
35079: ST_TO_ADDR
// list := list isect fac_list ;
35080: LD_ADDR_VAR 0 5
35084: PUSH
35085: LD_VAR 0 5
35089: PUSH
35090: LD_VAR 0 17
35094: ISECT
35095: ST_TO_ADDR
// if not list then
35096: LD_VAR 0 5
35100: NOT
35101: IFFALSE 35105
// exit ;
35103: GO 35933
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35105: LD_VAR 0 12
35109: PUSH
35110: LD_INT 3
35112: EQUAL
35113: IFFALSE 35125
35115: PUSH
35116: LD_INT 49
35118: PUSH
35119: LD_VAR 0 5
35123: IN
35124: AND
35125: IFFALSE 35145
35127: PUSH
35128: LD_INT 31
35130: PPUSH
35131: LD_VAR 0 16
35135: PPUSH
35136: CALL_OW 321
35140: PUSH
35141: LD_INT 2
35143: EQUAL
35144: AND
35145: IFFALSE 35205
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35147: LD_INT 22
35149: PUSH
35150: LD_VAR 0 16
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 35
35161: PUSH
35162: LD_INT 49
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 91
35171: PUSH
35172: LD_VAR 0 1
35176: PUSH
35177: LD_INT 10
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: PPUSH
35190: CALL_OW 69
35194: NOT
35195: IFFALSE 35205
// weapon := ru_time_lapser ;
35197: LD_ADDR_VAR 0 18
35201: PUSH
35202: LD_INT 49
35204: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35205: LD_VAR 0 12
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: IN
35220: IFFALSE 35244
35222: PUSH
35223: LD_INT 11
35225: PUSH
35226: LD_VAR 0 5
35230: IN
35231: IFTRUE 35243
35233: PUSH
35234: LD_INT 30
35236: PUSH
35237: LD_VAR 0 5
35241: IN
35242: OR
35243: AND
35244: IFFALSE 35264
35246: PUSH
35247: LD_INT 6
35249: PPUSH
35250: LD_VAR 0 16
35254: PPUSH
35255: CALL_OW 321
35259: PUSH
35260: LD_INT 2
35262: EQUAL
35263: AND
35264: IFFALSE 35431
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35266: LD_INT 22
35268: PUSH
35269: LD_VAR 0 16
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 35
35283: PUSH
35284: LD_INT 11
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 35
35293: PUSH
35294: LD_INT 30
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 91
35308: PUSH
35309: LD_VAR 0 1
35313: PUSH
35314: LD_INT 18
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: LIST
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: PPUSH
35327: CALL_OW 69
35331: NOT
35332: IFFALSE 35408
35334: PUSH
35335: LD_INT 22
35337: PUSH
35338: LD_VAR 0 16
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 30
35352: PUSH
35353: LD_INT 32
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 30
35362: PUSH
35363: LD_INT 33
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 91
35377: PUSH
35378: LD_VAR 0 1
35382: PUSH
35383: LD_INT 12
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: LIST
35395: PUSH
35396: EMPTY
35397: LIST
35398: PPUSH
35399: CALL_OW 69
35403: PUSH
35404: LD_INT 2
35406: GREATER
35407: AND
35408: IFFALSE 35431
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35410: LD_ADDR_VAR 0 18
35414: PUSH
35415: LD_INT 11
35417: PUSH
35418: LD_INT 30
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_VAR 0 12
35429: ARRAY
35430: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35431: LD_VAR 0 18
35435: NOT
35436: IFFALSE 35456
35438: PUSH
35439: LD_INT 40
35441: PPUSH
35442: LD_VAR 0 16
35446: PPUSH
35447: CALL_OW 321
35451: PUSH
35452: LD_INT 2
35454: EQUAL
35455: AND
35456: IFFALSE 35492
35458: PUSH
35459: LD_INT 7
35461: PUSH
35462: LD_VAR 0 5
35466: IN
35467: IFTRUE 35479
35469: PUSH
35470: LD_INT 28
35472: PUSH
35473: LD_VAR 0 5
35477: IN
35478: OR
35479: IFTRUE 35491
35481: PUSH
35482: LD_INT 45
35484: PUSH
35485: LD_VAR 0 5
35489: IN
35490: OR
35491: AND
35492: IFFALSE 35746
// begin hex := GetHexInfo ( x , y ) ;
35494: LD_ADDR_VAR 0 4
35498: PUSH
35499: LD_VAR 0 10
35503: PPUSH
35504: LD_VAR 0 11
35508: PPUSH
35509: CALL_OW 546
35513: ST_TO_ADDR
// if hex [ 1 ] then
35514: LD_VAR 0 4
35518: PUSH
35519: LD_INT 1
35521: ARRAY
35522: IFFALSE 35526
// exit ;
35524: GO 35933
// height := hex [ 2 ] ;
35526: LD_ADDR_VAR 0 15
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: LD_INT 2
35538: ARRAY
35539: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35540: LD_ADDR_VAR 0 14
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: LD_INT 5
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: ST_TO_ADDR
// for i in tmp do
35563: LD_ADDR_VAR 0 8
35567: PUSH
35568: LD_VAR 0 14
35572: PUSH
35573: FOR_IN
35574: IFFALSE 35744
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35576: LD_ADDR_VAR 0 9
35580: PUSH
35581: LD_VAR 0 10
35585: PPUSH
35586: LD_VAR 0 8
35590: PPUSH
35591: LD_INT 5
35593: PPUSH
35594: CALL_OW 272
35598: PUSH
35599: LD_VAR 0 11
35603: PPUSH
35604: LD_VAR 0 8
35608: PPUSH
35609: LD_INT 5
35611: PPUSH
35612: CALL_OW 273
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35621: LD_VAR 0 9
35625: PUSH
35626: LD_INT 1
35628: ARRAY
35629: PPUSH
35630: LD_VAR 0 9
35634: PUSH
35635: LD_INT 2
35637: ARRAY
35638: PPUSH
35639: CALL_OW 488
35643: IFFALSE 35742
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35645: LD_ADDR_VAR 0 4
35649: PUSH
35650: LD_VAR 0 9
35654: PUSH
35655: LD_INT 1
35657: ARRAY
35658: PPUSH
35659: LD_VAR 0 9
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: PPUSH
35668: CALL_OW 546
35672: ST_TO_ADDR
// if hex [ 1 ] then
35673: LD_VAR 0 4
35677: PUSH
35678: LD_INT 1
35680: ARRAY
35681: IFFALSE 35685
// continue ;
35683: GO 35573
// h := hex [ 2 ] ;
35685: LD_ADDR_VAR 0 13
35689: PUSH
35690: LD_VAR 0 4
35694: PUSH
35695: LD_INT 2
35697: ARRAY
35698: ST_TO_ADDR
// if h + 7 < height then
35699: LD_VAR 0 13
35703: PUSH
35704: LD_INT 7
35706: PLUS
35707: PUSH
35708: LD_VAR 0 15
35712: LESS
35713: IFFALSE 35742
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35715: LD_ADDR_VAR 0 18
35719: PUSH
35720: LD_INT 7
35722: PUSH
35723: LD_INT 28
35725: PUSH
35726: LD_INT 45
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: LIST
35733: PUSH
35734: LD_VAR 0 12
35738: ARRAY
35739: ST_TO_ADDR
// break ;
35740: GO 35744
// end ; end ; end ;
35742: GO 35573
35744: POP
35745: POP
// end ; if not weapon then
35746: LD_VAR 0 18
35750: NOT
35751: IFFALSE 35811
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35753: LD_ADDR_VAR 0 5
35757: PUSH
35758: LD_VAR 0 5
35762: PUSH
35763: LD_INT 11
35765: PUSH
35766: LD_INT 30
35768: PUSH
35769: LD_INT 49
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: DIFF
35777: ST_TO_ADDR
// if not list then
35778: LD_VAR 0 5
35782: NOT
35783: IFFALSE 35787
// exit ;
35785: GO 35933
// weapon := list [ rand ( 1 , list ) ] ;
35787: LD_ADDR_VAR 0 18
35791: PUSH
35792: LD_VAR 0 5
35796: PUSH
35797: LD_INT 1
35799: PPUSH
35800: LD_VAR 0 5
35804: PPUSH
35805: CALL_OW 12
35809: ARRAY
35810: ST_TO_ADDR
// end ; if weapon then
35811: LD_VAR 0 18
35815: IFFALSE 35933
// begin tmp := CostOfWeapon ( weapon ) ;
35817: LD_ADDR_VAR 0 14
35821: PUSH
35822: LD_VAR 0 18
35826: PPUSH
35827: CALL_OW 451
35831: ST_TO_ADDR
// j := GetBase ( tower ) ;
35832: LD_ADDR_VAR 0 9
35836: PUSH
35837: LD_VAR 0 1
35841: PPUSH
35842: CALL_OW 274
35846: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35847: LD_VAR 0 9
35851: PPUSH
35852: LD_INT 1
35854: PPUSH
35855: CALL_OW 275
35859: PUSH
35860: LD_VAR 0 14
35864: PUSH
35865: LD_INT 1
35867: ARRAY
35868: GREATEREQUAL
35869: IFFALSE 35895
35871: PUSH
35872: LD_VAR 0 9
35876: PPUSH
35877: LD_INT 2
35879: PPUSH
35880: CALL_OW 275
35884: PUSH
35885: LD_VAR 0 14
35889: PUSH
35890: LD_INT 2
35892: ARRAY
35893: GREATEREQUAL
35894: AND
35895: IFFALSE 35921
35897: PUSH
35898: LD_VAR 0 9
35902: PPUSH
35903: LD_INT 3
35905: PPUSH
35906: CALL_OW 275
35910: PUSH
35911: LD_VAR 0 14
35915: PUSH
35916: LD_INT 3
35918: ARRAY
35919: GREATEREQUAL
35920: AND
35921: IFFALSE 35933
// result := weapon ;
35923: LD_ADDR_VAR 0 3
35927: PUSH
35928: LD_VAR 0 18
35932: ST_TO_ADDR
// end ; end ;
35933: LD_VAR 0 3
35937: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35938: LD_INT 0
35940: PPUSH
35941: PPUSH
// result := true ;
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_INT 1
35949: ST_TO_ADDR
// if array1 = array2 then
35950: LD_VAR 0 1
35954: PUSH
35955: LD_VAR 0 2
35959: EQUAL
35960: IFFALSE 36020
// begin for i = 1 to array1 do
35962: LD_ADDR_VAR 0 4
35966: PUSH
35967: DOUBLE
35968: LD_INT 1
35970: DEC
35971: ST_TO_ADDR
35972: LD_VAR 0 1
35976: PUSH
35977: FOR_TO
35978: IFFALSE 36016
// if array1 [ i ] <> array2 [ i ] then
35980: LD_VAR 0 1
35984: PUSH
35985: LD_VAR 0 4
35989: ARRAY
35990: PUSH
35991: LD_VAR 0 2
35995: PUSH
35996: LD_VAR 0 4
36000: ARRAY
36001: NONEQUAL
36002: IFFALSE 36014
// begin result := false ;
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_INT 0
36011: ST_TO_ADDR
// break ;
36012: GO 36016
// end ;
36014: GO 35977
36016: POP
36017: POP
// end else
36018: GO 36028
// result := false ;
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_INT 0
36027: ST_TO_ADDR
// end ;
36028: LD_VAR 0 3
36032: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36033: LD_INT 0
36035: PPUSH
36036: PPUSH
// if not array1 or not array2 then
36037: LD_VAR 0 1
36041: NOT
36042: IFTRUE 36051
36044: PUSH
36045: LD_VAR 0 2
36049: NOT
36050: OR
36051: IFFALSE 36055
// exit ;
36053: GO 36119
// result := true ;
36055: LD_ADDR_VAR 0 3
36059: PUSH
36060: LD_INT 1
36062: ST_TO_ADDR
// for i = 1 to array1 do
36063: LD_ADDR_VAR 0 4
36067: PUSH
36068: DOUBLE
36069: LD_INT 1
36071: DEC
36072: ST_TO_ADDR
36073: LD_VAR 0 1
36077: PUSH
36078: FOR_TO
36079: IFFALSE 36117
// if array1 [ i ] <> array2 [ i ] then
36081: LD_VAR 0 1
36085: PUSH
36086: LD_VAR 0 4
36090: ARRAY
36091: PUSH
36092: LD_VAR 0 2
36096: PUSH
36097: LD_VAR 0 4
36101: ARRAY
36102: NONEQUAL
36103: IFFALSE 36115
// begin result := false ;
36105: LD_ADDR_VAR 0 3
36109: PUSH
36110: LD_INT 0
36112: ST_TO_ADDR
// break ;
36113: GO 36117
// end ;
36115: GO 36078
36117: POP
36118: POP
// end ;
36119: LD_VAR 0 3
36123: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36124: LD_INT 0
36126: PPUSH
36127: PPUSH
36128: PPUSH
// pom := GetBase ( fac ) ;
36129: LD_ADDR_VAR 0 5
36133: PUSH
36134: LD_VAR 0 1
36138: PPUSH
36139: CALL_OW 274
36143: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36144: LD_ADDR_VAR 0 4
36148: PUSH
36149: LD_VAR 0 2
36153: PUSH
36154: LD_INT 1
36156: ARRAY
36157: PPUSH
36158: LD_VAR 0 2
36162: PUSH
36163: LD_INT 2
36165: ARRAY
36166: PPUSH
36167: LD_VAR 0 2
36171: PUSH
36172: LD_INT 3
36174: ARRAY
36175: PPUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_INT 4
36183: ARRAY
36184: PPUSH
36185: CALL_OW 449
36189: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36190: LD_ADDR_VAR 0 3
36194: PUSH
36195: LD_VAR 0 5
36199: PPUSH
36200: LD_INT 1
36202: PPUSH
36203: CALL_OW 275
36207: PUSH
36208: LD_VAR 0 4
36212: PUSH
36213: LD_INT 1
36215: ARRAY
36216: GREATEREQUAL
36217: IFFALSE 36243
36219: PUSH
36220: LD_VAR 0 5
36224: PPUSH
36225: LD_INT 2
36227: PPUSH
36228: CALL_OW 275
36232: PUSH
36233: LD_VAR 0 4
36237: PUSH
36238: LD_INT 2
36240: ARRAY
36241: GREATEREQUAL
36242: AND
36243: IFFALSE 36269
36245: PUSH
36246: LD_VAR 0 5
36250: PPUSH
36251: LD_INT 3
36253: PPUSH
36254: CALL_OW 275
36258: PUSH
36259: LD_VAR 0 4
36263: PUSH
36264: LD_INT 3
36266: ARRAY
36267: GREATEREQUAL
36268: AND
36269: ST_TO_ADDR
// end ;
36270: LD_VAR 0 3
36274: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36275: LD_INT 0
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
// pom := GetBase ( building ) ;
36281: LD_ADDR_VAR 0 3
36285: PUSH
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 274
36295: ST_TO_ADDR
// if not pom then
36296: LD_VAR 0 3
36300: NOT
36301: IFFALSE 36305
// exit ;
36303: GO 36479
// btype := GetBType ( building ) ;
36305: LD_ADDR_VAR 0 5
36309: PUSH
36310: LD_VAR 0 1
36314: PPUSH
36315: CALL_OW 266
36319: ST_TO_ADDR
// if btype = b_armoury then
36320: LD_VAR 0 5
36324: PUSH
36325: LD_INT 4
36327: EQUAL
36328: IFFALSE 36338
// btype := b_barracks ;
36330: LD_ADDR_VAR 0 5
36334: PUSH
36335: LD_INT 5
36337: ST_TO_ADDR
// if btype = b_depot then
36338: LD_VAR 0 5
36342: PUSH
36343: LD_INT 0
36345: EQUAL
36346: IFFALSE 36356
// btype := b_warehouse ;
36348: LD_ADDR_VAR 0 5
36352: PUSH
36353: LD_INT 1
36355: ST_TO_ADDR
// if btype = b_workshop then
36356: LD_VAR 0 5
36360: PUSH
36361: LD_INT 2
36363: EQUAL
36364: IFFALSE 36374
// btype := b_factory ;
36366: LD_ADDR_VAR 0 5
36370: PUSH
36371: LD_INT 3
36373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36374: LD_ADDR_VAR 0 4
36378: PUSH
36379: LD_VAR 0 5
36383: PPUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 248
36393: PPUSH
36394: CALL_OW 450
36398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36399: LD_ADDR_VAR 0 2
36403: PUSH
36404: LD_VAR 0 3
36408: PPUSH
36409: LD_INT 1
36411: PPUSH
36412: CALL_OW 275
36416: PUSH
36417: LD_VAR 0 4
36421: PUSH
36422: LD_INT 1
36424: ARRAY
36425: GREATEREQUAL
36426: IFFALSE 36452
36428: PUSH
36429: LD_VAR 0 3
36433: PPUSH
36434: LD_INT 2
36436: PPUSH
36437: CALL_OW 275
36441: PUSH
36442: LD_VAR 0 4
36446: PUSH
36447: LD_INT 2
36449: ARRAY
36450: GREATEREQUAL
36451: AND
36452: IFFALSE 36478
36454: PUSH
36455: LD_VAR 0 3
36459: PPUSH
36460: LD_INT 3
36462: PPUSH
36463: CALL_OW 275
36467: PUSH
36468: LD_VAR 0 4
36472: PUSH
36473: LD_INT 3
36475: ARRAY
36476: GREATEREQUAL
36477: AND
36478: ST_TO_ADDR
// end ;
36479: LD_VAR 0 2
36483: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36484: LD_INT 0
36486: PPUSH
36487: PPUSH
36488: PPUSH
// pom := GetBase ( building ) ;
36489: LD_ADDR_VAR 0 4
36493: PUSH
36494: LD_VAR 0 1
36498: PPUSH
36499: CALL_OW 274
36503: ST_TO_ADDR
// if not pom then
36504: LD_VAR 0 4
36508: NOT
36509: IFFALSE 36513
// exit ;
36511: GO 36618
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36513: LD_ADDR_VAR 0 5
36517: PUSH
36518: LD_VAR 0 2
36522: PPUSH
36523: LD_VAR 0 1
36527: PPUSH
36528: CALL_OW 248
36532: PPUSH
36533: CALL_OW 450
36537: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36538: LD_ADDR_VAR 0 3
36542: PUSH
36543: LD_VAR 0 4
36547: PPUSH
36548: LD_INT 1
36550: PPUSH
36551: CALL_OW 275
36555: PUSH
36556: LD_VAR 0 5
36560: PUSH
36561: LD_INT 1
36563: ARRAY
36564: GREATEREQUAL
36565: IFFALSE 36591
36567: PUSH
36568: LD_VAR 0 4
36572: PPUSH
36573: LD_INT 2
36575: PPUSH
36576: CALL_OW 275
36580: PUSH
36581: LD_VAR 0 5
36585: PUSH
36586: LD_INT 2
36588: ARRAY
36589: GREATEREQUAL
36590: AND
36591: IFFALSE 36617
36593: PUSH
36594: LD_VAR 0 4
36598: PPUSH
36599: LD_INT 3
36601: PPUSH
36602: CALL_OW 275
36606: PUSH
36607: LD_VAR 0 5
36611: PUSH
36612: LD_INT 3
36614: ARRAY
36615: GREATEREQUAL
36616: AND
36617: ST_TO_ADDR
// end ;
36618: LD_VAR 0 3
36622: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36623: LD_INT 0
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
36630: PPUSH
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
// result := false ;
36636: LD_ADDR_VAR 0 8
36640: PUSH
36641: LD_INT 0
36643: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36644: LD_VAR 0 5
36648: NOT
36649: IFTRUE 36658
36651: PUSH
36652: LD_VAR 0 1
36656: NOT
36657: OR
36658: IFTRUE 36667
36660: PUSH
36661: LD_VAR 0 2
36665: NOT
36666: OR
36667: IFTRUE 36676
36669: PUSH
36670: LD_VAR 0 3
36674: NOT
36675: OR
36676: IFFALSE 36680
// exit ;
36678: GO 37506
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36680: LD_ADDR_VAR 0 14
36684: PUSH
36685: LD_VAR 0 1
36689: PPUSH
36690: LD_VAR 0 2
36694: PPUSH
36695: LD_VAR 0 3
36699: PPUSH
36700: LD_VAR 0 4
36704: PPUSH
36705: LD_VAR 0 5
36709: PUSH
36710: LD_INT 1
36712: ARRAY
36713: PPUSH
36714: CALL_OW 248
36718: PPUSH
36719: LD_INT 0
36721: PPUSH
36722: CALL 38787 0 6
36726: ST_TO_ADDR
// if not hexes then
36727: LD_VAR 0 14
36731: NOT
36732: IFFALSE 36736
// exit ;
36734: GO 37506
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36736: LD_ADDR_VAR 0 17
36740: PUSH
36741: LD_VAR 0 5
36745: PPUSH
36746: LD_INT 22
36748: PUSH
36749: LD_VAR 0 13
36753: PPUSH
36754: CALL_OW 255
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 30
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 30
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PPUSH
36795: CALL_OW 72
36799: ST_TO_ADDR
// for i = 1 to hexes do
36800: LD_ADDR_VAR 0 9
36804: PUSH
36805: DOUBLE
36806: LD_INT 1
36808: DEC
36809: ST_TO_ADDR
36810: LD_VAR 0 14
36814: PUSH
36815: FOR_TO
36816: IFFALSE 37504
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36818: LD_ADDR_VAR 0 13
36822: PUSH
36823: LD_VAR 0 14
36827: PUSH
36828: LD_VAR 0 9
36832: ARRAY
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: LD_VAR 0 14
36842: PUSH
36843: LD_VAR 0 9
36847: ARRAY
36848: PUSH
36849: LD_INT 2
36851: ARRAY
36852: PPUSH
36853: CALL_OW 428
36857: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36858: LD_VAR 0 14
36862: PUSH
36863: LD_VAR 0 9
36867: ARRAY
36868: PUSH
36869: LD_INT 1
36871: ARRAY
36872: PPUSH
36873: LD_VAR 0 14
36877: PUSH
36878: LD_VAR 0 9
36882: ARRAY
36883: PUSH
36884: LD_INT 2
36886: ARRAY
36887: PPUSH
36888: CALL_OW 351
36892: IFTRUE 36931
36894: PUSH
36895: LD_VAR 0 14
36899: PUSH
36900: LD_VAR 0 9
36904: ARRAY
36905: PUSH
36906: LD_INT 1
36908: ARRAY
36909: PPUSH
36910: LD_VAR 0 14
36914: PUSH
36915: LD_VAR 0 9
36919: ARRAY
36920: PUSH
36921: LD_INT 2
36923: ARRAY
36924: PPUSH
36925: CALL_OW 488
36929: NOT
36930: OR
36931: IFTRUE 36948
36933: PUSH
36934: LD_VAR 0 13
36938: PPUSH
36939: CALL_OW 247
36943: PUSH
36944: LD_INT 3
36946: EQUAL
36947: OR
36948: IFFALSE 36954
// exit ;
36950: POP
36951: POP
36952: GO 37506
// if not tmp then
36954: LD_VAR 0 13
36958: NOT
36959: IFFALSE 36963
// continue ;
36961: GO 36815
// result := true ;
36963: LD_ADDR_VAR 0 8
36967: PUSH
36968: LD_INT 1
36970: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36971: LD_VAR 0 6
36975: IFFALSE 36992
36977: PUSH
36978: LD_VAR 0 13
36982: PPUSH
36983: CALL_OW 247
36987: PUSH
36988: LD_INT 2
36990: EQUAL
36991: AND
36992: IFFALSE 37009
36994: PUSH
36995: LD_VAR 0 13
36999: PPUSH
37000: CALL_OW 263
37004: PUSH
37005: LD_INT 1
37007: EQUAL
37008: AND
37009: IFFALSE 37173
// begin if IsDrivenBy ( tmp ) then
37011: LD_VAR 0 13
37015: PPUSH
37016: CALL_OW 311
37020: IFFALSE 37024
// continue ;
37022: GO 36815
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37024: LD_VAR 0 6
37028: PPUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 60
37034: PUSH
37035: EMPTY
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 3
37044: PUSH
37045: LD_INT 55
37047: PUSH
37048: EMPTY
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PPUSH
37059: CALL_OW 72
37063: IFFALSE 37171
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37065: LD_ADDR_VAR 0 18
37069: PUSH
37070: LD_VAR 0 6
37074: PPUSH
37075: LD_INT 3
37077: PUSH
37078: LD_INT 60
37080: PUSH
37081: EMPTY
37082: LIST
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 3
37090: PUSH
37091: LD_INT 55
37093: PUSH
37094: EMPTY
37095: LIST
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PPUSH
37105: CALL_OW 72
37109: PUSH
37110: LD_INT 1
37112: ARRAY
37113: ST_TO_ADDR
// if IsInUnit ( driver ) then
37114: LD_VAR 0 18
37118: PPUSH
37119: CALL_OW 310
37123: IFFALSE 37134
// ComExit ( driver ) ;
37125: LD_VAR 0 18
37129: PPUSH
37130: CALL 62787 0 1
// AddComEnterUnit ( driver , tmp ) ;
37134: LD_VAR 0 18
37138: PPUSH
37139: LD_VAR 0 13
37143: PPUSH
37144: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37148: LD_VAR 0 18
37152: PPUSH
37153: LD_VAR 0 7
37157: PPUSH
37158: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37162: LD_VAR 0 18
37166: PPUSH
37167: CALL_OW 181
// end ; continue ;
37171: GO 36815
// end ; if not cleaners or not tmp in cleaners then
37173: LD_VAR 0 6
37177: NOT
37178: IFTRUE 37193
37180: PUSH
37181: LD_VAR 0 13
37185: PUSH
37186: LD_VAR 0 6
37190: IN
37191: NOT
37192: OR
37193: IFFALSE 37502
// begin if dep then
37195: LD_VAR 0 17
37199: IFFALSE 37335
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37201: LD_ADDR_VAR 0 16
37205: PUSH
37206: LD_VAR 0 17
37210: PUSH
37211: LD_INT 1
37213: ARRAY
37214: PPUSH
37215: CALL_OW 250
37219: PPUSH
37220: LD_VAR 0 17
37224: PUSH
37225: LD_INT 1
37227: ARRAY
37228: PPUSH
37229: CALL_OW 254
37233: PPUSH
37234: LD_INT 5
37236: PPUSH
37237: CALL_OW 272
37241: PUSH
37242: LD_VAR 0 17
37246: PUSH
37247: LD_INT 1
37249: ARRAY
37250: PPUSH
37251: CALL_OW 251
37255: PPUSH
37256: LD_VAR 0 17
37260: PUSH
37261: LD_INT 1
37263: ARRAY
37264: PPUSH
37265: CALL_OW 254
37269: PPUSH
37270: LD_INT 5
37272: PPUSH
37273: CALL_OW 273
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37282: LD_VAR 0 16
37286: PUSH
37287: LD_INT 1
37289: ARRAY
37290: PPUSH
37291: LD_VAR 0 16
37295: PUSH
37296: LD_INT 2
37298: ARRAY
37299: PPUSH
37300: CALL_OW 488
37304: IFFALSE 37335
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37306: LD_VAR 0 13
37310: PPUSH
37311: LD_VAR 0 16
37315: PUSH
37316: LD_INT 1
37318: ARRAY
37319: PPUSH
37320: LD_VAR 0 16
37324: PUSH
37325: LD_INT 2
37327: ARRAY
37328: PPUSH
37329: CALL_OW 111
// continue ;
37333: GO 36815
// end ; end ; r := GetDir ( tmp ) ;
37335: LD_ADDR_VAR 0 15
37339: PUSH
37340: LD_VAR 0 13
37344: PPUSH
37345: CALL_OW 254
37349: ST_TO_ADDR
// if r = 5 then
37350: LD_VAR 0 15
37354: PUSH
37355: LD_INT 5
37357: EQUAL
37358: IFFALSE 37368
// r := 0 ;
37360: LD_ADDR_VAR 0 15
37364: PUSH
37365: LD_INT 0
37367: ST_TO_ADDR
// for j = r to 5 do
37368: LD_ADDR_VAR 0 10
37372: PUSH
37373: DOUBLE
37374: LD_VAR 0 15
37378: DEC
37379: ST_TO_ADDR
37380: LD_INT 5
37382: PUSH
37383: FOR_TO
37384: IFFALSE 37500
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37386: LD_ADDR_VAR 0 11
37390: PUSH
37391: LD_VAR 0 13
37395: PPUSH
37396: CALL_OW 250
37400: PPUSH
37401: LD_VAR 0 10
37405: PPUSH
37406: LD_INT 2
37408: PPUSH
37409: CALL_OW 272
37413: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37414: LD_ADDR_VAR 0 12
37418: PUSH
37419: LD_VAR 0 13
37423: PPUSH
37424: CALL_OW 251
37428: PPUSH
37429: LD_VAR 0 10
37433: PPUSH
37434: LD_INT 2
37436: PPUSH
37437: CALL_OW 273
37441: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37442: LD_VAR 0 11
37446: PPUSH
37447: LD_VAR 0 12
37451: PPUSH
37452: CALL_OW 488
37456: IFFALSE 37475
37458: PUSH
37459: LD_VAR 0 11
37463: PPUSH
37464: LD_VAR 0 12
37468: PPUSH
37469: CALL_OW 428
37473: NOT
37474: AND
37475: IFFALSE 37498
// begin ComMoveXY ( tmp , _x , _y ) ;
37477: LD_VAR 0 13
37481: PPUSH
37482: LD_VAR 0 11
37486: PPUSH
37487: LD_VAR 0 12
37491: PPUSH
37492: CALL_OW 111
// break ;
37496: GO 37500
// end ; end ;
37498: GO 37383
37500: POP
37501: POP
// end ; end ;
37502: GO 36815
37504: POP
37505: POP
// end ;
37506: LD_VAR 0 8
37510: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37511: LD_INT 0
37513: PPUSH
// result := true ;
37514: LD_ADDR_VAR 0 3
37518: PUSH
37519: LD_INT 1
37521: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37522: LD_VAR 0 2
37526: PUSH
37527: LD_INT 24
37529: DOUBLE
37530: EQUAL
37531: IFTRUE 37541
37533: LD_INT 33
37535: DOUBLE
37536: EQUAL
37537: IFTRUE 37541
37539: GO 37566
37541: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37542: LD_ADDR_VAR 0 3
37546: PUSH
37547: LD_INT 32
37549: PPUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 321
37559: PUSH
37560: LD_INT 2
37562: EQUAL
37563: ST_TO_ADDR
37564: GO 37882
37566: LD_INT 20
37568: DOUBLE
37569: EQUAL
37570: IFTRUE 37574
37572: GO 37599
37574: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37575: LD_ADDR_VAR 0 3
37579: PUSH
37580: LD_INT 6
37582: PPUSH
37583: LD_VAR 0 1
37587: PPUSH
37588: CALL_OW 321
37592: PUSH
37593: LD_INT 2
37595: EQUAL
37596: ST_TO_ADDR
37597: GO 37882
37599: LD_INT 22
37601: DOUBLE
37602: EQUAL
37603: IFTRUE 37613
37605: LD_INT 36
37607: DOUBLE
37608: EQUAL
37609: IFTRUE 37613
37611: GO 37638
37613: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37614: LD_ADDR_VAR 0 3
37618: PUSH
37619: LD_INT 15
37621: PPUSH
37622: LD_VAR 0 1
37626: PPUSH
37627: CALL_OW 321
37631: PUSH
37632: LD_INT 2
37634: EQUAL
37635: ST_TO_ADDR
37636: GO 37882
37638: LD_INT 30
37640: DOUBLE
37641: EQUAL
37642: IFTRUE 37646
37644: GO 37671
37646: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37647: LD_ADDR_VAR 0 3
37651: PUSH
37652: LD_INT 20
37654: PPUSH
37655: LD_VAR 0 1
37659: PPUSH
37660: CALL_OW 321
37664: PUSH
37665: LD_INT 2
37667: EQUAL
37668: ST_TO_ADDR
37669: GO 37882
37671: LD_INT 28
37673: DOUBLE
37674: EQUAL
37675: IFTRUE 37685
37677: LD_INT 21
37679: DOUBLE
37680: EQUAL
37681: IFTRUE 37685
37683: GO 37710
37685: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_INT 21
37693: PPUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 321
37703: PUSH
37704: LD_INT 2
37706: EQUAL
37707: ST_TO_ADDR
37708: GO 37882
37710: LD_INT 16
37712: DOUBLE
37713: EQUAL
37714: IFTRUE 37718
37716: GO 37743
37718: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37719: LD_ADDR_VAR 0 3
37723: PUSH
37724: LD_INT 84
37726: PPUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: CALL_OW 321
37736: PUSH
37737: LD_INT 2
37739: EQUAL
37740: ST_TO_ADDR
37741: GO 37882
37743: LD_INT 19
37745: DOUBLE
37746: EQUAL
37747: IFTRUE 37757
37749: LD_INT 23
37751: DOUBLE
37752: EQUAL
37753: IFTRUE 37757
37755: GO 37782
37757: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37758: LD_ADDR_VAR 0 3
37762: PUSH
37763: LD_INT 83
37765: PPUSH
37766: LD_VAR 0 1
37770: PPUSH
37771: CALL_OW 321
37775: PUSH
37776: LD_INT 2
37778: EQUAL
37779: ST_TO_ADDR
37780: GO 37882
37782: LD_INT 17
37784: DOUBLE
37785: EQUAL
37786: IFTRUE 37790
37788: GO 37815
37790: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37791: LD_ADDR_VAR 0 3
37795: PUSH
37796: LD_INT 39
37798: PPUSH
37799: LD_VAR 0 1
37803: PPUSH
37804: CALL_OW 321
37808: PUSH
37809: LD_INT 2
37811: EQUAL
37812: ST_TO_ADDR
37813: GO 37882
37815: LD_INT 18
37817: DOUBLE
37818: EQUAL
37819: IFTRUE 37823
37821: GO 37848
37823: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37824: LD_ADDR_VAR 0 3
37828: PUSH
37829: LD_INT 40
37831: PPUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: CALL_OW 321
37841: PUSH
37842: LD_INT 2
37844: EQUAL
37845: ST_TO_ADDR
37846: GO 37882
37848: LD_INT 27
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37881
37856: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_INT 35
37864: PPUSH
37865: LD_VAR 0 1
37869: PPUSH
37870: CALL_OW 321
37874: PUSH
37875: LD_INT 2
37877: EQUAL
37878: ST_TO_ADDR
37879: GO 37882
37881: POP
// end ;
37882: LD_VAR 0 3
37886: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37887: LD_INT 0
37889: PPUSH
37890: PPUSH
37891: PPUSH
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
// result := false ;
37900: LD_ADDR_VAR 0 6
37904: PUSH
37905: LD_INT 0
37907: ST_TO_ADDR
// if btype = b_depot then
37908: LD_VAR 0 2
37912: PUSH
37913: LD_INT 0
37915: EQUAL
37916: IFFALSE 37928
// begin result := true ;
37918: LD_ADDR_VAR 0 6
37922: PUSH
37923: LD_INT 1
37925: ST_TO_ADDR
// exit ;
37926: GO 38782
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37928: LD_VAR 0 1
37932: NOT
37933: IFTRUE 37958
37935: PUSH
37936: LD_VAR 0 1
37940: PPUSH
37941: CALL_OW 266
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: IN
37956: NOT
37957: OR
37958: IFTRUE 37967
37960: PUSH
37961: LD_VAR 0 2
37965: NOT
37966: OR
37967: IFTRUE 38003
37969: PUSH
37970: LD_VAR 0 5
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: LD_INT 4
37989: PUSH
37990: LD_INT 5
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: IN
38001: NOT
38002: OR
38003: IFTRUE 38022
38005: PUSH
38006: LD_VAR 0 3
38010: PPUSH
38011: LD_VAR 0 4
38015: PPUSH
38016: CALL_OW 488
38020: NOT
38021: OR
38022: IFFALSE 38026
// exit ;
38024: GO 38782
// side := GetSide ( depot ) ;
38026: LD_ADDR_VAR 0 9
38030: PUSH
38031: LD_VAR 0 1
38035: PPUSH
38036: CALL_OW 255
38040: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38041: LD_VAR 0 9
38045: PPUSH
38046: LD_VAR 0 2
38050: PPUSH
38051: CALL 37511 0 2
38055: NOT
38056: IFFALSE 38060
// exit ;
38058: GO 38782
// pom := GetBase ( depot ) ;
38060: LD_ADDR_VAR 0 10
38064: PUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL_OW 274
38074: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38075: LD_ADDR_VAR 0 11
38079: PUSH
38080: LD_VAR 0 2
38084: PPUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 248
38094: PPUSH
38095: CALL_OW 450
38099: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38100: LD_VAR 0 10
38104: PPUSH
38105: LD_INT 1
38107: PPUSH
38108: CALL_OW 275
38112: PUSH
38113: LD_VAR 0 11
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: GREATEREQUAL
38122: IFFALSE 38148
38124: PUSH
38125: LD_VAR 0 10
38129: PPUSH
38130: LD_INT 2
38132: PPUSH
38133: CALL_OW 275
38137: PUSH
38138: LD_VAR 0 11
38142: PUSH
38143: LD_INT 2
38145: ARRAY
38146: GREATEREQUAL
38147: AND
38148: IFFALSE 38174
38150: PUSH
38151: LD_VAR 0 10
38155: PPUSH
38156: LD_INT 3
38158: PPUSH
38159: CALL_OW 275
38163: PUSH
38164: LD_VAR 0 11
38168: PUSH
38169: LD_INT 3
38171: ARRAY
38172: GREATEREQUAL
38173: AND
38174: NOT
38175: IFFALSE 38179
// exit ;
38177: GO 38782
// if GetBType ( depot ) = b_depot then
38179: LD_VAR 0 1
38183: PPUSH
38184: CALL_OW 266
38188: PUSH
38189: LD_INT 0
38191: EQUAL
38192: IFFALSE 38204
// dist := 28 else
38194: LD_ADDR_VAR 0 14
38198: PUSH
38199: LD_INT 28
38201: ST_TO_ADDR
38202: GO 38212
// dist := 36 ;
38204: LD_ADDR_VAR 0 14
38208: PUSH
38209: LD_INT 36
38211: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38212: LD_VAR 0 1
38216: PPUSH
38217: LD_VAR 0 3
38221: PPUSH
38222: LD_VAR 0 4
38226: PPUSH
38227: CALL_OW 297
38231: PUSH
38232: LD_VAR 0 14
38236: GREATER
38237: IFFALSE 38241
// exit ;
38239: GO 38782
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38241: LD_ADDR_VAR 0 12
38245: PUSH
38246: LD_VAR 0 2
38250: PPUSH
38251: LD_VAR 0 3
38255: PPUSH
38256: LD_VAR 0 4
38260: PPUSH
38261: LD_VAR 0 5
38265: PPUSH
38266: LD_VAR 0 1
38270: PPUSH
38271: CALL_OW 248
38275: PPUSH
38276: LD_INT 0
38278: PPUSH
38279: CALL 38787 0 6
38283: ST_TO_ADDR
// if not hexes then
38284: LD_VAR 0 12
38288: NOT
38289: IFFALSE 38293
// exit ;
38291: GO 38782
// hex := GetHexInfo ( x , y ) ;
38293: LD_ADDR_VAR 0 15
38297: PUSH
38298: LD_VAR 0 3
38302: PPUSH
38303: LD_VAR 0 4
38307: PPUSH
38308: CALL_OW 546
38312: ST_TO_ADDR
// if hex [ 1 ] then
38313: LD_VAR 0 15
38317: PUSH
38318: LD_INT 1
38320: ARRAY
38321: IFFALSE 38325
// exit ;
38323: GO 38782
// height := hex [ 2 ] ;
38325: LD_ADDR_VAR 0 13
38329: PUSH
38330: LD_VAR 0 15
38334: PUSH
38335: LD_INT 2
38337: ARRAY
38338: ST_TO_ADDR
// for i = 1 to hexes do
38339: LD_ADDR_VAR 0 7
38343: PUSH
38344: DOUBLE
38345: LD_INT 1
38347: DEC
38348: ST_TO_ADDR
38349: LD_VAR 0 12
38353: PUSH
38354: FOR_TO
38355: IFFALSE 38699
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38357: LD_VAR 0 12
38361: PUSH
38362: LD_VAR 0 7
38366: ARRAY
38367: PUSH
38368: LD_INT 1
38370: ARRAY
38371: PPUSH
38372: LD_VAR 0 12
38376: PUSH
38377: LD_VAR 0 7
38381: ARRAY
38382: PUSH
38383: LD_INT 2
38385: ARRAY
38386: PPUSH
38387: CALL_OW 488
38391: NOT
38392: IFTRUE 38434
38394: PUSH
38395: LD_VAR 0 12
38399: PUSH
38400: LD_VAR 0 7
38404: ARRAY
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: PPUSH
38410: LD_VAR 0 12
38414: PUSH
38415: LD_VAR 0 7
38419: ARRAY
38420: PUSH
38421: LD_INT 2
38423: ARRAY
38424: PPUSH
38425: CALL_OW 428
38429: PUSH
38430: LD_INT 0
38432: GREATER
38433: OR
38434: IFTRUE 38472
38436: PUSH
38437: LD_VAR 0 12
38441: PUSH
38442: LD_VAR 0 7
38446: ARRAY
38447: PUSH
38448: LD_INT 1
38450: ARRAY
38451: PPUSH
38452: LD_VAR 0 12
38456: PUSH
38457: LD_VAR 0 7
38461: ARRAY
38462: PUSH
38463: LD_INT 2
38465: ARRAY
38466: PPUSH
38467: CALL_OW 351
38471: OR
38472: IFFALSE 38478
// exit ;
38474: POP
38475: POP
38476: GO 38782
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38478: LD_ADDR_VAR 0 8
38482: PUSH
38483: LD_VAR 0 12
38487: PUSH
38488: LD_VAR 0 7
38492: ARRAY
38493: PUSH
38494: LD_INT 1
38496: ARRAY
38497: PPUSH
38498: LD_VAR 0 12
38502: PUSH
38503: LD_VAR 0 7
38507: ARRAY
38508: PUSH
38509: LD_INT 2
38511: ARRAY
38512: PPUSH
38513: CALL_OW 546
38517: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38518: LD_VAR 0 8
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: IFTRUE 38548
38528: PUSH
38529: LD_VAR 0 8
38533: PUSH
38534: LD_INT 2
38536: ARRAY
38537: PUSH
38538: LD_VAR 0 13
38542: PUSH
38543: LD_INT 2
38545: PLUS
38546: GREATER
38547: OR
38548: IFTRUE 38570
38550: PUSH
38551: LD_VAR 0 8
38555: PUSH
38556: LD_INT 2
38558: ARRAY
38559: PUSH
38560: LD_VAR 0 13
38564: PUSH
38565: LD_INT 2
38567: MINUS
38568: LESS
38569: OR
38570: IFTRUE 38638
38572: PUSH
38573: LD_VAR 0 8
38577: PUSH
38578: LD_INT 3
38580: ARRAY
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 8
38587: PUSH
38588: LD_INT 9
38590: PUSH
38591: LD_INT 10
38593: PUSH
38594: LD_INT 11
38596: PUSH
38597: LD_INT 12
38599: PUSH
38600: LD_INT 13
38602: PUSH
38603: LD_INT 16
38605: PUSH
38606: LD_INT 17
38608: PUSH
38609: LD_INT 18
38611: PUSH
38612: LD_INT 19
38614: PUSH
38615: LD_INT 20
38617: PUSH
38618: LD_INT 21
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: IN
38636: NOT
38637: OR
38638: IFTRUE 38651
38640: PUSH
38641: LD_VAR 0 8
38645: PUSH
38646: LD_INT 5
38648: ARRAY
38649: NOT
38650: OR
38651: IFTRUE 38691
38653: PUSH
38654: LD_VAR 0 8
38658: PUSH
38659: LD_INT 6
38661: ARRAY
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 7
38671: PUSH
38672: LD_INT 9
38674: PUSH
38675: LD_INT 10
38677: PUSH
38678: LD_INT 11
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: IN
38689: NOT
38690: OR
38691: IFFALSE 38697
// exit ;
38693: POP
38694: POP
38695: GO 38782
// end ;
38697: GO 38354
38699: POP
38700: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38701: LD_VAR 0 9
38705: PPUSH
38706: LD_VAR 0 3
38710: PPUSH
38711: LD_VAR 0 4
38715: PPUSH
38716: LD_INT 20
38718: PPUSH
38719: CALL 30601 0 4
38723: PUSH
38724: LD_INT 4
38726: ARRAY
38727: IFFALSE 38731
// exit ;
38729: GO 38782
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 29
38738: PUSH
38739: LD_INT 30
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: IN
38746: IFFALSE 38770
38748: PUSH
38749: LD_VAR 0 3
38753: PPUSH
38754: LD_VAR 0 4
38758: PPUSH
38759: LD_VAR 0 9
38763: PPUSH
38764: CALL_OW 440
38768: NOT
38769: AND
38770: IFFALSE 38774
// exit ;
38772: GO 38782
// result := true ;
38774: LD_ADDR_VAR 0 6
38778: PUSH
38779: LD_INT 1
38781: ST_TO_ADDR
// end ;
38782: LD_VAR 0 6
38786: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38787: LD_INT 0
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
38838: PPUSH
38839: PPUSH
38840: PPUSH
38841: PPUSH
38842: PPUSH
38843: PPUSH
38844: PPUSH
38845: PPUSH
38846: PPUSH
// result = [ ] ;
38847: LD_ADDR_VAR 0 7
38851: PUSH
38852: EMPTY
38853: ST_TO_ADDR
// temp_list = [ ] ;
38854: LD_ADDR_VAR 0 9
38858: PUSH
38859: EMPTY
38860: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38861: LD_VAR 0 4
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: LD_INT 5
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: IN
38892: NOT
38893: IFTRUE 38936
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: IN
38911: IFFALSE 38935
38913: PUSH
38914: LD_VAR 0 5
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: IN
38933: NOT
38934: AND
38935: OR
38936: IFFALSE 38940
// exit ;
38938: GO 57339
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38940: LD_VAR 0 1
38944: PUSH
38945: LD_INT 6
38947: PUSH
38948: LD_INT 7
38950: PUSH
38951: LD_INT 8
38953: PUSH
38954: LD_INT 13
38956: PUSH
38957: LD_INT 12
38959: PUSH
38960: LD_INT 15
38962: PUSH
38963: LD_INT 11
38965: PUSH
38966: LD_INT 14
38968: PUSH
38969: LD_INT 10
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: IN
38983: IFFALSE 38993
// btype = b_lab ;
38985: LD_ADDR_VAR 0 1
38989: PUSH
38990: LD_INT 6
38992: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38993: LD_VAR 0 6
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: IN
39012: NOT
39013: IFTRUE 39081
39015: PUSH
39016: LD_VAR 0 1
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 6
39035: PUSH
39036: LD_INT 36
39038: PUSH
39039: LD_INT 4
39041: PUSH
39042: LD_INT 5
39044: PUSH
39045: LD_INT 31
39047: PUSH
39048: LD_INT 32
39050: PUSH
39051: LD_INT 33
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: IN
39067: NOT
39068: IFFALSE 39080
39070: PUSH
39071: LD_VAR 0 6
39075: PUSH
39076: LD_INT 1
39078: EQUAL
39079: AND
39080: OR
39081: IFTRUE 39113
39083: PUSH
39084: LD_VAR 0 1
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: IN
39099: NOT
39100: IFFALSE 39112
39102: PUSH
39103: LD_VAR 0 6
39107: PUSH
39108: LD_INT 2
39110: EQUAL
39111: AND
39112: OR
39113: IFFALSE 39123
// mode = 0 ;
39115: LD_ADDR_VAR 0 6
39119: PUSH
39120: LD_INT 0
39122: ST_TO_ADDR
// case mode of 0 :
39123: LD_VAR 0 6
39127: PUSH
39128: LD_INT 0
39130: DOUBLE
39131: EQUAL
39132: IFTRUE 39136
39134: GO 50589
39136: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39137: LD_ADDR_VAR 0 11
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 3
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 3
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39330: LD_ADDR_VAR 0 12
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: NEG
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39526: LD_ADDR_VAR 0 13
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 3
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 3
39697: NEG
39698: PUSH
39699: LD_INT 3
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39725: LD_ADDR_VAR 0 14
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 3
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 3
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39921: LD_ADDR_VAR 0 15
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 3
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40114: LD_ADDR_VAR 0 16
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 3
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 3
40271: PUSH
40272: LD_INT 3
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40307: LD_ADDR_VAR 0 17
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: NEG
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40537: LD_ADDR_VAR 0 18
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 2
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40767: LD_ADDR_VAR 0 19
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40997: LD_ADDR_VAR 0 20
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 2
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 2
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: NEG
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41227: LD_ADDR_VAR 0 21
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 2
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41457: LD_ADDR_VAR 0 22
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 2
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 2
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 2
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41687: LD_ADDR_VAR 0 23
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 2
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 2
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 2
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 2
41898: NEG
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 3
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41967: LD_ADDR_VAR 0 24
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42243: LD_ADDR_VAR 0 25
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: LD_INT 2
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 1
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42517: LD_ADDR_VAR 0 26
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: LD_INT 2
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 2
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: NEG
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42793: LD_ADDR_VAR 0 27
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: LD_INT 2
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 2
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 3
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43073: LD_ADDR_VAR 0 28
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 2
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: LD_INT 2
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: LD_INT 1
43264: NEG
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 3
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 3
43308: NEG
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 3
43320: NEG
43321: PUSH
43322: LD_INT 2
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43355: LD_ADDR_VAR 0 29
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 0
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 2
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43634: LD_ADDR_VAR 0 30
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 0
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: LD_INT 1
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 3
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 3
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43912: LD_ADDR_VAR 0 31
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: NEG
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: NEG
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 3
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 3
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 3
44155: NEG
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44190: LD_ADDR_VAR 0 32
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 2
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 2
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 3
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 3
44433: NEG
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44468: LD_ADDR_VAR 0 33
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: NEG
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44747: LD_ADDR_VAR 0 34
44751: PUSH
44752: LD_INT 0
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45027: LD_ADDR_VAR 0 35
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45139: LD_ADDR_VAR 0 36
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45251: LD_ADDR_VAR 0 37
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45363: LD_ADDR_VAR 0 38
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45475: LD_ADDR_VAR 0 39
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45587: LD_ADDR_VAR 0 40
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45699: LD_ADDR_VAR 0 41
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 3
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46049: LD_ADDR_VAR 0 42
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 3
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 3
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46399: LD_ADDR_VAR 0 43
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 0
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 2
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 3
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 3
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46747: LD_ADDR_VAR 0 44
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: LD_INT 3
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 1
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47097: LD_ADDR_VAR 0 45
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 2
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 2
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 3
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: NEG
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47447: LD_ADDR_VAR 0 46
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 3
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47795: LD_ADDR_VAR 0 47
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47946: LD_ADDR_VAR 0 48
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48093: LD_ADDR_VAR 0 49
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48237: LD_ADDR_VAR 0 50
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48381: LD_ADDR_VAR 0 51
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48528: LD_ADDR_VAR 0 52
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48679: LD_ADDR_VAR 0 53
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: LD_INT 2
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48909: LD_ADDR_VAR 0 54
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49139: LD_ADDR_VAR 0 55
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 2
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49369: LD_ADDR_VAR 0 56
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: NEG
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 2
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49599: LD_ADDR_VAR 0 57
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49829: LD_ADDR_VAR 0 58
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 1
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 2
50028: NEG
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50059: LD_ADDR_VAR 0 59
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50147: LD_ADDR_VAR 0 60
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50235: LD_ADDR_VAR 0 61
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 1
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50323: LD_ADDR_VAR 0 62
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50411: LD_ADDR_VAR 0 63
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: NEG
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50499: LD_ADDR_VAR 0 64
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: ST_TO_ADDR
// end ; 1 :
50587: GO 56484
50589: LD_INT 1
50591: DOUBLE
50592: EQUAL
50593: IFTRUE 50597
50595: GO 53220
50597: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50598: LD_ADDR_VAR 0 11
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 3
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 3
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50642: LD_ADDR_VAR 0 12
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 3
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 3
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50683: LD_ADDR_VAR 0 13
50687: PUSH
50688: LD_INT 3
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50723: LD_ADDR_VAR 0 14
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50764: LD_ADDR_VAR 0 15
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50808: LD_ADDR_VAR 0 16
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: LD_INT 3
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50854: LD_ADDR_VAR 0 17
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 3
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: LD_INT 2
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50898: LD_ADDR_VAR 0 18
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: LIST
50938: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50939: LD_ADDR_VAR 0 19
50943: PUSH
50944: LD_INT 3
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50979: LD_ADDR_VAR 0 20
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: LD_INT 2
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51020: LD_ADDR_VAR 0 21
51024: PUSH
51025: LD_INT 2
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51064: LD_ADDR_VAR 0 22
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: LD_INT 3
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: NEG
51096: PUSH
51097: LD_INT 3
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51110: LD_ADDR_VAR 0 23
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 4
51132: NEG
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: LD_INT 3
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: LIST
51153: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51154: LD_ADDR_VAR 0 24
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 4
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51195: LD_ADDR_VAR 0 25
51199: PUSH
51200: LD_INT 3
51202: PUSH
51203: LD_INT 3
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 4
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51235: LD_ADDR_VAR 0 26
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 4
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: LD_INT 3
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51276: LD_ADDR_VAR 0 27
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51320: LD_ADDR_VAR 0 28
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: LD_INT 4
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 4
51351: NEG
51352: PUSH
51353: LD_INT 3
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51366: LD_ADDR_VAR 0 29
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 4
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 5
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 5
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 4
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: LD_INT 6
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 6
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 5
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51521: LD_ADDR_VAR 0 30
51525: PUSH
51526: LD_INT 2
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 4
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 4
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 4
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 5
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 5
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 6
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 6
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51664: LD_ADDR_VAR 0 31
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: PUSH
51682: LD_INT 3
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: LD_INT 3
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 4
51711: PUSH
51712: LD_INT 4
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 4
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 4
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 5
51741: PUSH
51742: LD_INT 5
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 4
51751: PUSH
51752: LD_INT 5
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 6
51761: PUSH
51762: LD_INT 5
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 6
51771: PUSH
51772: LD_INT 6
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 5
51781: PUSH
51782: LD_INT 6
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51803: LD_ADDR_VAR 0 32
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: LD_INT 4
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 5
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 5
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 6
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 6
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 5
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51946: LD_ADDR_VAR 0 33
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: NEG
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 3
51975: NEG
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 3
51987: NEG
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: NEG
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 5
52032: NEG
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 5
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 5
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 6
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 6
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52101: LD_ADDR_VAR 0 34
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: LD_INT 4
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: NEG
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 4
52168: NEG
52169: PUSH
52170: LD_INT 4
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 4
52180: NEG
52181: PUSH
52182: LD_INT 5
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 5
52192: NEG
52193: PUSH
52194: LD_INT 4
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 5
52204: NEG
52205: PUSH
52206: LD_INT 5
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 5
52216: NEG
52217: PUSH
52218: LD_INT 6
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 6
52228: NEG
52229: PUSH
52230: LD_INT 5
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 6
52240: NEG
52241: PUSH
52242: LD_INT 6
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52264: LD_ADDR_VAR 0 41
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 3
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52308: LD_ADDR_VAR 0 42
52312: PUSH
52313: LD_INT 2
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 3
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52349: LD_ADDR_VAR 0 43
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52389: LD_ADDR_VAR 0 44
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52430: LD_ADDR_VAR 0 45
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52474: LD_ADDR_VAR 0 46
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52520: LD_ADDR_VAR 0 47
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52553: LD_ADDR_VAR 0 48
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: LD_INT 2
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52584: LD_ADDR_VAR 0 49
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52613: LD_ADDR_VAR 0 50
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52642: LD_ADDR_VAR 0 51
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52673: LD_ADDR_VAR 0 52
52677: PUSH
52678: LD_INT 3
52680: NEG
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 3
52692: NEG
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52706: LD_ADDR_VAR 0 53
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52750: LD_ADDR_VAR 0 54
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: LIST
52790: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52791: LD_ADDR_VAR 0 55
52795: PUSH
52796: LD_INT 3
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52831: LD_ADDR_VAR 0 56
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52872: LD_ADDR_VAR 0 57
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52916: LD_ADDR_VAR 0 58
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52962: LD_ADDR_VAR 0 59
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53006: LD_ADDR_VAR 0 60
53010: PUSH
53011: LD_INT 1
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53047: LD_ADDR_VAR 0 61
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: LD_INT 2
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53087: LD_ADDR_VAR 0 62
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 2
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53128: LD_ADDR_VAR 0 63
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53172: LD_ADDR_VAR 0 64
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: ST_TO_ADDR
// end ; 2 :
53218: GO 56484
53220: LD_INT 2
53222: DOUBLE
53223: EQUAL
53224: IFTRUE 53228
53226: GO 56483
53228: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53229: LD_ADDR_VAR 0 29
53233: PUSH
53234: LD_INT 4
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 4
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 5
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 5
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 4
53277: PUSH
53278: LD_INT 1
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 3
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 5
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 3
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 4
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 4
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: LD_INT 4
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 4
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 4
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 5
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 5
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 4
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 5
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 3
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 4
53568: NEG
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 4
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 4
53591: NEG
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 4
53614: NEG
53615: PUSH
53616: LD_INT 4
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: LD_INT 5
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 4
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 5
53674: NEG
53675: PUSH
53676: LD_INT 4
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 5
53686: NEG
53687: PUSH
53688: LD_INT 5
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: LD_INT 5
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: NEG
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53767: LD_ADDR_VAR 0 30
53771: PUSH
53772: LD_INT 4
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 4
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 5
53804: PUSH
53805: LD_INT 5
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 4
53814: PUSH
53815: LD_INT 5
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: LD_INT 4
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 5
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 5
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: LD_INT 3
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 4
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 4
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 4
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 4
53957: NEG
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 4
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 4
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 5
54013: NEG
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 5
54024: NEG
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 5
54036: NEG
54037: PUSH
54038: LD_INT 2
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 3
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: LD_INT 4
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: LD_INT 4
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 4
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 4
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 4
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 5
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: PUSH
54190: LD_INT 4
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 5
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: LD_INT 5
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54314: LD_ADDR_VAR 0 31
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 4
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 4
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 5
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 5
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 4
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 1
54382: NEG
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: LD_INT 5
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: LD_INT 0
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 3
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 4
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 4
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 4
54493: NEG
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 4
54516: NEG
54517: PUSH
54518: LD_INT 4
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 4
54528: NEG
54529: PUSH
54530: LD_INT 5
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: LD_INT 4
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 3
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 4
54564: NEG
54565: PUSH
54566: LD_INT 3
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 5
54576: NEG
54577: PUSH
54578: LD_INT 4
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 5
54588: NEG
54589: PUSH
54590: LD_INT 5
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: LD_INT 5
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 5
54612: NEG
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 3
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: LD_INT 4
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: LD_INT 3
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 4
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 2
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: LD_INT 4
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 4
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 4
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 5
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 5
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 2
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 5
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54864: LD_ADDR_VAR 0 32
54868: PUSH
54869: LD_INT 4
54871: NEG
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 4
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 3
54894: NEG
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: NEG
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 5
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 5
54950: NEG
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 3
54962: NEG
54963: PUSH
54964: LD_INT 2
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: LD_INT 3
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 4
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: LD_INT 3
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: LD_INT 2
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: LD_INT 3
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: LD_INT 4
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 4
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 4
55069: NEG
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 4
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 5
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 4
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: LD_INT 3
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 4
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 5
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 3
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 5
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 4
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 4
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 4
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 4
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 5
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 5
55306: PUSH
55307: LD_INT 5
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 4
55316: PUSH
55317: LD_INT 5
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: PUSH
55327: LD_INT 4
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 5
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 5
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55411: LD_ADDR_VAR 0 33
55415: PUSH
55416: LD_INT 4
55418: NEG
55419: PUSH
55420: LD_INT 4
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 4
55430: NEG
55431: PUSH
55432: LD_INT 5
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: LD_INT 4
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: LD_INT 3
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 5
55478: NEG
55479: PUSH
55480: LD_INT 4
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: LD_INT 5
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 5
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 5
55514: NEG
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 4
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 4
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 5
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 5
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 4
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 5
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 4
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 4
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 5
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 5
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 4
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 5
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55949: LD_ADDR_VAR 0 34
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: LD_INT 4
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: LD_INT 4
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 3
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 4
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 5
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 3
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 5
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: LD_INT 1
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 3
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 4
56151: PUSH
56152: LD_INT 4
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 4
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 5
56171: PUSH
56172: LD_INT 4
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 5
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 4
56191: PUSH
56192: LD_INT 5
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 3
56201: PUSH
56202: LD_INT 4
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 5
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: LD_INT 5
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 4
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 4
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 4
56334: NEG
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 4
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 1
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 4
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 5
56390: NEG
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 5
56401: NEG
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 5
56413: NEG
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: NEG
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// end ; end ;
56481: GO 56484
56483: POP
// case btype of b_depot , b_warehouse :
56484: LD_VAR 0 1
56488: PUSH
56489: LD_INT 0
56491: DOUBLE
56492: EQUAL
56493: IFTRUE 56503
56495: LD_INT 1
56497: DOUBLE
56498: EQUAL
56499: IFTRUE 56503
56501: GO 56704
56503: POP
// case nation of nation_american :
56504: LD_VAR 0 5
56508: PUSH
56509: LD_INT 1
56511: DOUBLE
56512: EQUAL
56513: IFTRUE 56517
56515: GO 56573
56517: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56518: LD_ADDR_VAR 0 9
56522: PUSH
56523: LD_VAR 0 11
56527: PUSH
56528: LD_VAR 0 12
56532: PUSH
56533: LD_VAR 0 13
56537: PUSH
56538: LD_VAR 0 14
56542: PUSH
56543: LD_VAR 0 15
56547: PUSH
56548: LD_VAR 0 16
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: PUSH
56561: LD_VAR 0 4
56565: PUSH
56566: LD_INT 1
56568: PLUS
56569: ARRAY
56570: ST_TO_ADDR
56571: GO 56702
56573: LD_INT 2
56575: DOUBLE
56576: EQUAL
56577: IFTRUE 56581
56579: GO 56637
56581: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56582: LD_ADDR_VAR 0 9
56586: PUSH
56587: LD_VAR 0 17
56591: PUSH
56592: LD_VAR 0 18
56596: PUSH
56597: LD_VAR 0 19
56601: PUSH
56602: LD_VAR 0 20
56606: PUSH
56607: LD_VAR 0 21
56611: PUSH
56612: LD_VAR 0 22
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: LD_VAR 0 4
56629: PUSH
56630: LD_INT 1
56632: PLUS
56633: ARRAY
56634: ST_TO_ADDR
56635: GO 56702
56637: LD_INT 3
56639: DOUBLE
56640: EQUAL
56641: IFTRUE 56645
56643: GO 56701
56645: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56646: LD_ADDR_VAR 0 9
56650: PUSH
56651: LD_VAR 0 23
56655: PUSH
56656: LD_VAR 0 24
56660: PUSH
56661: LD_VAR 0 25
56665: PUSH
56666: LD_VAR 0 26
56670: PUSH
56671: LD_VAR 0 27
56675: PUSH
56676: LD_VAR 0 28
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: PUSH
56689: LD_VAR 0 4
56693: PUSH
56694: LD_INT 1
56696: PLUS
56697: ARRAY
56698: ST_TO_ADDR
56699: GO 56702
56701: POP
56702: GO 57257
56704: LD_INT 2
56706: DOUBLE
56707: EQUAL
56708: IFTRUE 56718
56710: LD_INT 3
56712: DOUBLE
56713: EQUAL
56714: IFTRUE 56718
56716: GO 56774
56718: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56719: LD_ADDR_VAR 0 9
56723: PUSH
56724: LD_VAR 0 29
56728: PUSH
56729: LD_VAR 0 30
56733: PUSH
56734: LD_VAR 0 31
56738: PUSH
56739: LD_VAR 0 32
56743: PUSH
56744: LD_VAR 0 33
56748: PUSH
56749: LD_VAR 0 34
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: PUSH
56762: LD_VAR 0 4
56766: PUSH
56767: LD_INT 1
56769: PLUS
56770: ARRAY
56771: ST_TO_ADDR
56772: GO 57257
56774: LD_INT 16
56776: DOUBLE
56777: EQUAL
56778: IFTRUE 56836
56780: LD_INT 17
56782: DOUBLE
56783: EQUAL
56784: IFTRUE 56836
56786: LD_INT 18
56788: DOUBLE
56789: EQUAL
56790: IFTRUE 56836
56792: LD_INT 19
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56836
56798: LD_INT 22
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56836
56804: LD_INT 20
56806: DOUBLE
56807: EQUAL
56808: IFTRUE 56836
56810: LD_INT 21
56812: DOUBLE
56813: EQUAL
56814: IFTRUE 56836
56816: LD_INT 23
56818: DOUBLE
56819: EQUAL
56820: IFTRUE 56836
56822: LD_INT 24
56824: DOUBLE
56825: EQUAL
56826: IFTRUE 56836
56828: LD_INT 25
56830: DOUBLE
56831: EQUAL
56832: IFTRUE 56836
56834: GO 56892
56836: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56837: LD_ADDR_VAR 0 9
56841: PUSH
56842: LD_VAR 0 35
56846: PUSH
56847: LD_VAR 0 36
56851: PUSH
56852: LD_VAR 0 37
56856: PUSH
56857: LD_VAR 0 38
56861: PUSH
56862: LD_VAR 0 39
56866: PUSH
56867: LD_VAR 0 40
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: PUSH
56880: LD_VAR 0 4
56884: PUSH
56885: LD_INT 1
56887: PLUS
56888: ARRAY
56889: ST_TO_ADDR
56890: GO 57257
56892: LD_INT 6
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56948
56898: LD_INT 7
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56948
56904: LD_INT 8
56906: DOUBLE
56907: EQUAL
56908: IFTRUE 56948
56910: LD_INT 13
56912: DOUBLE
56913: EQUAL
56914: IFTRUE 56948
56916: LD_INT 12
56918: DOUBLE
56919: EQUAL
56920: IFTRUE 56948
56922: LD_INT 15
56924: DOUBLE
56925: EQUAL
56926: IFTRUE 56948
56928: LD_INT 11
56930: DOUBLE
56931: EQUAL
56932: IFTRUE 56948
56934: LD_INT 14
56936: DOUBLE
56937: EQUAL
56938: IFTRUE 56948
56940: LD_INT 10
56942: DOUBLE
56943: EQUAL
56944: IFTRUE 56948
56946: GO 57004
56948: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56949: LD_ADDR_VAR 0 9
56953: PUSH
56954: LD_VAR 0 41
56958: PUSH
56959: LD_VAR 0 42
56963: PUSH
56964: LD_VAR 0 43
56968: PUSH
56969: LD_VAR 0 44
56973: PUSH
56974: LD_VAR 0 45
56978: PUSH
56979: LD_VAR 0 46
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: PUSH
56992: LD_VAR 0 4
56996: PUSH
56997: LD_INT 1
56999: PLUS
57000: ARRAY
57001: ST_TO_ADDR
57002: GO 57257
57004: LD_INT 36
57006: DOUBLE
57007: EQUAL
57008: IFTRUE 57012
57010: GO 57068
57012: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57013: LD_ADDR_VAR 0 9
57017: PUSH
57018: LD_VAR 0 47
57022: PUSH
57023: LD_VAR 0 48
57027: PUSH
57028: LD_VAR 0 49
57032: PUSH
57033: LD_VAR 0 50
57037: PUSH
57038: LD_VAR 0 51
57042: PUSH
57043: LD_VAR 0 52
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: PUSH
57056: LD_VAR 0 4
57060: PUSH
57061: LD_INT 1
57063: PLUS
57064: ARRAY
57065: ST_TO_ADDR
57066: GO 57257
57068: LD_INT 4
57070: DOUBLE
57071: EQUAL
57072: IFTRUE 57094
57074: LD_INT 5
57076: DOUBLE
57077: EQUAL
57078: IFTRUE 57094
57080: LD_INT 34
57082: DOUBLE
57083: EQUAL
57084: IFTRUE 57094
57086: LD_INT 37
57088: DOUBLE
57089: EQUAL
57090: IFTRUE 57094
57092: GO 57150
57094: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57095: LD_ADDR_VAR 0 9
57099: PUSH
57100: LD_VAR 0 53
57104: PUSH
57105: LD_VAR 0 54
57109: PUSH
57110: LD_VAR 0 55
57114: PUSH
57115: LD_VAR 0 56
57119: PUSH
57120: LD_VAR 0 57
57124: PUSH
57125: LD_VAR 0 58
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: PUSH
57138: LD_VAR 0 4
57142: PUSH
57143: LD_INT 1
57145: PLUS
57146: ARRAY
57147: ST_TO_ADDR
57148: GO 57257
57150: LD_INT 31
57152: DOUBLE
57153: EQUAL
57154: IFTRUE 57200
57156: LD_INT 32
57158: DOUBLE
57159: EQUAL
57160: IFTRUE 57200
57162: LD_INT 33
57164: DOUBLE
57165: EQUAL
57166: IFTRUE 57200
57168: LD_INT 27
57170: DOUBLE
57171: EQUAL
57172: IFTRUE 57200
57174: LD_INT 26
57176: DOUBLE
57177: EQUAL
57178: IFTRUE 57200
57180: LD_INT 28
57182: DOUBLE
57183: EQUAL
57184: IFTRUE 57200
57186: LD_INT 29
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57200
57192: LD_INT 30
57194: DOUBLE
57195: EQUAL
57196: IFTRUE 57200
57198: GO 57256
57200: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57201: LD_ADDR_VAR 0 9
57205: PUSH
57206: LD_VAR 0 59
57210: PUSH
57211: LD_VAR 0 60
57215: PUSH
57216: LD_VAR 0 61
57220: PUSH
57221: LD_VAR 0 62
57225: PUSH
57226: LD_VAR 0 63
57230: PUSH
57231: LD_VAR 0 64
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: PUSH
57244: LD_VAR 0 4
57248: PUSH
57249: LD_INT 1
57251: PLUS
57252: ARRAY
57253: ST_TO_ADDR
57254: GO 57257
57256: POP
// temp_list2 = [ ] ;
57257: LD_ADDR_VAR 0 10
57261: PUSH
57262: EMPTY
57263: ST_TO_ADDR
// for i in temp_list do
57264: LD_ADDR_VAR 0 8
57268: PUSH
57269: LD_VAR 0 9
57273: PUSH
57274: FOR_IN
57275: IFFALSE 57327
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57277: LD_ADDR_VAR 0 10
57281: PUSH
57282: LD_VAR 0 10
57286: PUSH
57287: LD_VAR 0 8
57291: PUSH
57292: LD_INT 1
57294: ARRAY
57295: PUSH
57296: LD_VAR 0 2
57300: PLUS
57301: PUSH
57302: LD_VAR 0 8
57306: PUSH
57307: LD_INT 2
57309: ARRAY
57310: PUSH
57311: LD_VAR 0 3
57315: PLUS
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: EMPTY
57322: LIST
57323: ADD
57324: ST_TO_ADDR
57325: GO 57274
57327: POP
57328: POP
// result = temp_list2 ;
57329: LD_ADDR_VAR 0 7
57333: PUSH
57334: LD_VAR 0 10
57338: ST_TO_ADDR
// end ;
57339: LD_VAR 0 7
57343: RET
// export function EnemyInRange ( unit , dist ) ; begin
57344: LD_INT 0
57346: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57347: LD_ADDR_VAR 0 3
57351: PUSH
57352: LD_VAR 0 1
57356: PPUSH
57357: CALL_OW 255
57361: PPUSH
57362: LD_VAR 0 1
57366: PPUSH
57367: CALL_OW 250
57371: PPUSH
57372: LD_VAR 0 1
57376: PPUSH
57377: CALL_OW 251
57381: PPUSH
57382: LD_VAR 0 2
57386: PPUSH
57387: CALL 30601 0 4
57391: PUSH
57392: LD_INT 4
57394: ARRAY
57395: ST_TO_ADDR
// end ;
57396: LD_VAR 0 3
57400: RET
// export function PlayerSeeMe ( unit ) ; begin
57401: LD_INT 0
57403: PPUSH
// result := See ( your_side , unit ) ;
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: LD_OWVAR 2
57413: PPUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 292
57423: ST_TO_ADDR
// end ;
57424: LD_VAR 0 2
57428: RET
// export function ReverseDir ( unit ) ; begin
57429: LD_INT 0
57431: PPUSH
// if not unit then
57432: LD_VAR 0 1
57436: NOT
57437: IFFALSE 57441
// exit ;
57439: GO 57464
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57441: LD_ADDR_VAR 0 2
57445: PUSH
57446: LD_VAR 0 1
57450: PPUSH
57451: CALL_OW 254
57455: PUSH
57456: LD_INT 3
57458: PLUS
57459: PUSH
57460: LD_INT 6
57462: MOD
57463: ST_TO_ADDR
// end ;
57464: LD_VAR 0 2
57468: RET
// export function ReverseArray ( array ) ; var i ; begin
57469: LD_INT 0
57471: PPUSH
57472: PPUSH
// if not array then
57473: LD_VAR 0 1
57477: NOT
57478: IFFALSE 57482
// exit ;
57480: GO 57537
// result := [ ] ;
57482: LD_ADDR_VAR 0 2
57486: PUSH
57487: EMPTY
57488: ST_TO_ADDR
// for i := array downto 1 do
57489: LD_ADDR_VAR 0 3
57493: PUSH
57494: DOUBLE
57495: LD_VAR 0 1
57499: INC
57500: ST_TO_ADDR
57501: LD_INT 1
57503: PUSH
57504: FOR_DOWNTO
57505: IFFALSE 57535
// result := Join ( result , array [ i ] ) ;
57507: LD_ADDR_VAR 0 2
57511: PUSH
57512: LD_VAR 0 2
57516: PPUSH
57517: LD_VAR 0 1
57521: PUSH
57522: LD_VAR 0 3
57526: ARRAY
57527: PPUSH
57528: CALL 62389 0 2
57532: ST_TO_ADDR
57533: GO 57504
57535: POP
57536: POP
// end ;
57537: LD_VAR 0 2
57541: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57542: LD_INT 0
57544: PPUSH
57545: PPUSH
57546: PPUSH
57547: PPUSH
57548: PPUSH
57549: PPUSH
// if not unit or not hexes then
57550: LD_VAR 0 1
57554: NOT
57555: IFTRUE 57564
57557: PUSH
57558: LD_VAR 0 2
57562: NOT
57563: OR
57564: IFFALSE 57568
// exit ;
57566: GO 57691
// dist := 9999 ;
57568: LD_ADDR_VAR 0 5
57572: PUSH
57573: LD_INT 9999
57575: ST_TO_ADDR
// for i = 1 to hexes do
57576: LD_ADDR_VAR 0 4
57580: PUSH
57581: DOUBLE
57582: LD_INT 1
57584: DEC
57585: ST_TO_ADDR
57586: LD_VAR 0 2
57590: PUSH
57591: FOR_TO
57592: IFFALSE 57679
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57594: LD_ADDR_VAR 0 6
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_VAR 0 4
57613: ARRAY
57614: PUSH
57615: LD_INT 1
57617: ARRAY
57618: PPUSH
57619: LD_VAR 0 2
57623: PUSH
57624: LD_VAR 0 4
57628: ARRAY
57629: PUSH
57630: LD_INT 2
57632: ARRAY
57633: PPUSH
57634: CALL_OW 297
57638: ST_TO_ADDR
// if tdist < dist then
57639: LD_VAR 0 6
57643: PUSH
57644: LD_VAR 0 5
57648: LESS
57649: IFFALSE 57677
// begin hex := hexes [ i ] ;
57651: LD_ADDR_VAR 0 8
57655: PUSH
57656: LD_VAR 0 2
57660: PUSH
57661: LD_VAR 0 4
57665: ARRAY
57666: ST_TO_ADDR
// dist := tdist ;
57667: LD_ADDR_VAR 0 5
57671: PUSH
57672: LD_VAR 0 6
57676: ST_TO_ADDR
// end ; end ;
57677: GO 57591
57679: POP
57680: POP
// result := hex ;
57681: LD_ADDR_VAR 0 3
57685: PUSH
57686: LD_VAR 0 8
57690: ST_TO_ADDR
// end ;
57691: LD_VAR 0 3
57695: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57696: LD_INT 0
57698: PPUSH
57699: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57700: LD_VAR 0 1
57704: NOT
57705: IFTRUE 57744
57707: PUSH
57708: LD_VAR 0 1
57712: PUSH
57713: LD_INT 21
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 23
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PPUSH
57737: CALL_OW 69
57741: IN
57742: NOT
57743: OR
57744: IFFALSE 57748
// exit ;
57746: GO 57795
// for i = 1 to 3 do
57748: LD_ADDR_VAR 0 3
57752: PUSH
57753: DOUBLE
57754: LD_INT 1
57756: DEC
57757: ST_TO_ADDR
57758: LD_INT 3
57760: PUSH
57761: FOR_TO
57762: IFFALSE 57793
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57764: LD_VAR 0 1
57768: PPUSH
57769: CALL_OW 250
57773: PPUSH
57774: LD_VAR 0 1
57778: PPUSH
57779: CALL_OW 251
57783: PPUSH
57784: LD_INT 1
57786: PPUSH
57787: CALL_OW 453
57791: GO 57761
57793: POP
57794: POP
// end ;
57795: LD_VAR 0 2
57799: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57800: LD_INT 0
57802: PPUSH
57803: PPUSH
57804: PPUSH
57805: PPUSH
57806: PPUSH
57807: PPUSH
// if not unit or not enemy_unit then
57808: LD_VAR 0 1
57812: NOT
57813: IFTRUE 57822
57815: PUSH
57816: LD_VAR 0 2
57820: NOT
57821: OR
57822: IFFALSE 57826
// exit ;
57824: GO 58307
// if GetLives ( i ) < 250 then
57826: LD_VAR 0 4
57830: PPUSH
57831: CALL_OW 256
57835: PUSH
57836: LD_INT 250
57838: LESS
57839: IFFALSE 57852
// begin ComAutodestruct ( i ) ;
57841: LD_VAR 0 4
57845: PPUSH
57846: CALL 57696 0 1
// exit ;
57850: GO 58307
// end ; x := GetX ( enemy_unit ) ;
57852: LD_ADDR_VAR 0 7
57856: PUSH
57857: LD_VAR 0 2
57861: PPUSH
57862: CALL_OW 250
57866: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57867: LD_ADDR_VAR 0 8
57871: PUSH
57872: LD_VAR 0 2
57876: PPUSH
57877: CALL_OW 251
57881: ST_TO_ADDR
// if not x or not y then
57882: LD_VAR 0 7
57886: NOT
57887: IFTRUE 57896
57889: PUSH
57890: LD_VAR 0 8
57894: NOT
57895: OR
57896: IFFALSE 57900
// exit ;
57898: GO 58307
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57900: LD_ADDR_VAR 0 6
57904: PUSH
57905: LD_VAR 0 7
57909: PPUSH
57910: LD_INT 0
57912: PPUSH
57913: LD_INT 4
57915: PPUSH
57916: CALL_OW 272
57920: PUSH
57921: LD_VAR 0 8
57925: PPUSH
57926: LD_INT 0
57928: PPUSH
57929: LD_INT 4
57931: PPUSH
57932: CALL_OW 273
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_VAR 0 7
57945: PPUSH
57946: LD_INT 1
57948: PPUSH
57949: LD_INT 4
57951: PPUSH
57952: CALL_OW 272
57956: PUSH
57957: LD_VAR 0 8
57961: PPUSH
57962: LD_INT 1
57964: PPUSH
57965: LD_INT 4
57967: PPUSH
57968: CALL_OW 273
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_VAR 0 7
57981: PPUSH
57982: LD_INT 2
57984: PPUSH
57985: LD_INT 4
57987: PPUSH
57988: CALL_OW 272
57992: PUSH
57993: LD_VAR 0 8
57997: PPUSH
57998: LD_INT 2
58000: PPUSH
58001: LD_INT 4
58003: PPUSH
58004: CALL_OW 273
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_VAR 0 7
58017: PPUSH
58018: LD_INT 3
58020: PPUSH
58021: LD_INT 4
58023: PPUSH
58024: CALL_OW 272
58028: PUSH
58029: LD_VAR 0 8
58033: PPUSH
58034: LD_INT 3
58036: PPUSH
58037: LD_INT 4
58039: PPUSH
58040: CALL_OW 273
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_VAR 0 7
58053: PPUSH
58054: LD_INT 4
58056: PPUSH
58057: LD_INT 4
58059: PPUSH
58060: CALL_OW 272
58064: PUSH
58065: LD_VAR 0 8
58069: PPUSH
58070: LD_INT 4
58072: PPUSH
58073: LD_INT 4
58075: PPUSH
58076: CALL_OW 273
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_VAR 0 7
58089: PPUSH
58090: LD_INT 5
58092: PPUSH
58093: LD_INT 4
58095: PPUSH
58096: CALL_OW 272
58100: PUSH
58101: LD_VAR 0 8
58105: PPUSH
58106: LD_INT 5
58108: PPUSH
58109: LD_INT 4
58111: PPUSH
58112: CALL_OW 273
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: ST_TO_ADDR
// for i = tmp downto 1 do
58129: LD_ADDR_VAR 0 4
58133: PUSH
58134: DOUBLE
58135: LD_VAR 0 6
58139: INC
58140: ST_TO_ADDR
58141: LD_INT 1
58143: PUSH
58144: FOR_DOWNTO
58145: IFFALSE 58248
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58147: LD_VAR 0 6
58151: PUSH
58152: LD_VAR 0 4
58156: ARRAY
58157: PUSH
58158: LD_INT 1
58160: ARRAY
58161: PPUSH
58162: LD_VAR 0 6
58166: PUSH
58167: LD_VAR 0 4
58171: ARRAY
58172: PUSH
58173: LD_INT 2
58175: ARRAY
58176: PPUSH
58177: CALL_OW 488
58181: NOT
58182: IFTRUE 58224
58184: PUSH
58185: LD_VAR 0 6
58189: PUSH
58190: LD_VAR 0 4
58194: ARRAY
58195: PUSH
58196: LD_INT 1
58198: ARRAY
58199: PPUSH
58200: LD_VAR 0 6
58204: PUSH
58205: LD_VAR 0 4
58209: ARRAY
58210: PUSH
58211: LD_INT 2
58213: ARRAY
58214: PPUSH
58215: CALL_OW 428
58219: PUSH
58220: LD_INT 0
58222: NONEQUAL
58223: OR
58224: IFFALSE 58246
// tmp := Delete ( tmp , i ) ;
58226: LD_ADDR_VAR 0 6
58230: PUSH
58231: LD_VAR 0 6
58235: PPUSH
58236: LD_VAR 0 4
58240: PPUSH
58241: CALL_OW 3
58245: ST_TO_ADDR
58246: GO 58144
58248: POP
58249: POP
// j := GetClosestHex ( unit , tmp ) ;
58250: LD_ADDR_VAR 0 5
58254: PUSH
58255: LD_VAR 0 1
58259: PPUSH
58260: LD_VAR 0 6
58264: PPUSH
58265: CALL 57542 0 2
58269: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58270: LD_VAR 0 1
58274: PPUSH
58275: LD_VAR 0 5
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PPUSH
58284: LD_VAR 0 5
58288: PUSH
58289: LD_INT 2
58291: ARRAY
58292: PPUSH
58293: CALL_OW 111
// result := j ;
58297: LD_ADDR_VAR 0 3
58301: PUSH
58302: LD_VAR 0 5
58306: ST_TO_ADDR
// end ;
58307: LD_VAR 0 3
58311: RET
// export function PrepareApemanSoldier ( ) ; begin
58312: LD_INT 0
58314: PPUSH
// uc_nation := 0 ;
58315: LD_ADDR_OWVAR 21
58319: PUSH
58320: LD_INT 0
58322: ST_TO_ADDR
// hc_sex := sex_male ;
58323: LD_ADDR_OWVAR 27
58327: PUSH
58328: LD_INT 1
58330: ST_TO_ADDR
// hc_name :=  ;
58331: LD_ADDR_OWVAR 26
58335: PUSH
58336: LD_STRING 
58338: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58339: LD_ADDR_OWVAR 28
58343: PUSH
58344: LD_INT 15
58346: ST_TO_ADDR
// hc_gallery :=  ;
58347: LD_ADDR_OWVAR 33
58351: PUSH
58352: LD_STRING 
58354: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58355: LD_ADDR_OWVAR 31
58359: PUSH
58360: LD_INT 0
58362: PPUSH
58363: LD_INT 3
58365: PPUSH
58366: CALL_OW 12
58370: PUSH
58371: LD_INT 0
58373: PPUSH
58374: LD_INT 3
58376: PPUSH
58377: CALL_OW 12
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58394: LD_ADDR_OWVAR 29
58398: PUSH
58399: LD_INT 10
58401: PUSH
58402: LD_INT 12
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: ST_TO_ADDR
// end ;
58409: LD_VAR 0 1
58413: RET
// export function PrepareApemanEngineer ( ) ; begin
58414: LD_INT 0
58416: PPUSH
// uc_nation := 0 ;
58417: LD_ADDR_OWVAR 21
58421: PUSH
58422: LD_INT 0
58424: ST_TO_ADDR
// hc_sex := sex_male ;
58425: LD_ADDR_OWVAR 27
58429: PUSH
58430: LD_INT 1
58432: ST_TO_ADDR
// hc_name :=  ;
58433: LD_ADDR_OWVAR 26
58437: PUSH
58438: LD_STRING 
58440: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58441: LD_ADDR_OWVAR 28
58445: PUSH
58446: LD_INT 16
58448: ST_TO_ADDR
// hc_gallery :=  ;
58449: LD_ADDR_OWVAR 33
58453: PUSH
58454: LD_STRING 
58456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58457: LD_ADDR_OWVAR 31
58461: PUSH
58462: LD_INT 0
58464: PPUSH
58465: LD_INT 3
58467: PPUSH
58468: CALL_OW 12
58472: PUSH
58473: LD_INT 0
58475: PPUSH
58476: LD_INT 3
58478: PPUSH
58479: CALL_OW 12
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58496: LD_ADDR_OWVAR 29
58500: PUSH
58501: LD_INT 10
58503: PUSH
58504: LD_INT 12
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// end ;
58511: LD_VAR 0 1
58515: RET
// export function PrepareApeman ( agressivity ) ; begin
58516: LD_INT 0
58518: PPUSH
// uc_side := 0 ;
58519: LD_ADDR_OWVAR 20
58523: PUSH
58524: LD_INT 0
58526: ST_TO_ADDR
// uc_nation := 0 ;
58527: LD_ADDR_OWVAR 21
58531: PUSH
58532: LD_INT 0
58534: ST_TO_ADDR
// hc_sex := sex_male ;
58535: LD_ADDR_OWVAR 27
58539: PUSH
58540: LD_INT 1
58542: ST_TO_ADDR
// hc_class := class_apeman ;
58543: LD_ADDR_OWVAR 28
58547: PUSH
58548: LD_INT 12
58550: ST_TO_ADDR
// hc_gallery :=  ;
58551: LD_ADDR_OWVAR 33
58555: PUSH
58556: LD_STRING 
58558: ST_TO_ADDR
// hc_name :=  ;
58559: LD_ADDR_OWVAR 26
58563: PUSH
58564: LD_STRING 
58566: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58567: LD_ADDR_OWVAR 29
58571: PUSH
58572: LD_INT 10
58574: PUSH
58575: LD_INT 12
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// if agressivity = 0 then
58582: LD_VAR 0 1
58586: PUSH
58587: LD_INT 0
58589: EQUAL
58590: IFFALSE 58602
// hc_agressivity := 0 else
58592: LD_ADDR_OWVAR 35
58596: PUSH
58597: LD_INT 0
58599: ST_TO_ADDR
58600: GO 58623
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58602: LD_ADDR_OWVAR 35
58606: PUSH
58607: LD_VAR 0 1
58611: NEG
58612: PPUSH
58613: LD_VAR 0 1
58617: PPUSH
58618: CALL_OW 12
58622: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58623: LD_ADDR_OWVAR 31
58627: PUSH
58628: LD_INT 0
58630: PPUSH
58631: LD_INT 3
58633: PPUSH
58634: CALL_OW 12
58638: PUSH
58639: LD_INT 0
58641: PPUSH
58642: LD_INT 3
58644: PPUSH
58645: CALL_OW 12
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: ST_TO_ADDR
// end ;
58662: LD_VAR 0 2
58666: RET
// export function PrepareTiger ( agressivity ) ; begin
58667: LD_INT 0
58669: PPUSH
// uc_side := 0 ;
58670: LD_ADDR_OWVAR 20
58674: PUSH
58675: LD_INT 0
58677: ST_TO_ADDR
// uc_nation := 0 ;
58678: LD_ADDR_OWVAR 21
58682: PUSH
58683: LD_INT 0
58685: ST_TO_ADDR
// InitHc ;
58686: CALL_OW 19
// hc_class := class_tiger ;
58690: LD_ADDR_OWVAR 28
58694: PUSH
58695: LD_INT 14
58697: ST_TO_ADDR
// hc_gallery :=  ;
58698: LD_ADDR_OWVAR 33
58702: PUSH
58703: LD_STRING 
58705: ST_TO_ADDR
// hc_name :=  ;
58706: LD_ADDR_OWVAR 26
58710: PUSH
58711: LD_STRING 
58713: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58714: LD_ADDR_OWVAR 35
58718: PUSH
58719: LD_VAR 0 1
58723: NEG
58724: PPUSH
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL_OW 12
58734: ST_TO_ADDR
// end ;
58735: LD_VAR 0 2
58739: RET
// export function PrepareEnchidna ( ) ; begin
58740: LD_INT 0
58742: PPUSH
// uc_side := 0 ;
58743: LD_ADDR_OWVAR 20
58747: PUSH
58748: LD_INT 0
58750: ST_TO_ADDR
// uc_nation := 0 ;
58751: LD_ADDR_OWVAR 21
58755: PUSH
58756: LD_INT 0
58758: ST_TO_ADDR
// InitHc ;
58759: CALL_OW 19
// hc_class := class_baggie ;
58763: LD_ADDR_OWVAR 28
58767: PUSH
58768: LD_INT 13
58770: ST_TO_ADDR
// hc_gallery :=  ;
58771: LD_ADDR_OWVAR 33
58775: PUSH
58776: LD_STRING 
58778: ST_TO_ADDR
// hc_name :=  ;
58779: LD_ADDR_OWVAR 26
58783: PUSH
58784: LD_STRING 
58786: ST_TO_ADDR
// end ;
58787: LD_VAR 0 1
58791: RET
// export function PrepareFrog ( ) ; begin
58792: LD_INT 0
58794: PPUSH
// uc_side := 0 ;
58795: LD_ADDR_OWVAR 20
58799: PUSH
58800: LD_INT 0
58802: ST_TO_ADDR
// uc_nation := 0 ;
58803: LD_ADDR_OWVAR 21
58807: PUSH
58808: LD_INT 0
58810: ST_TO_ADDR
// InitHc ;
58811: CALL_OW 19
// hc_class := class_frog ;
58815: LD_ADDR_OWVAR 28
58819: PUSH
58820: LD_INT 19
58822: ST_TO_ADDR
// hc_gallery :=  ;
58823: LD_ADDR_OWVAR 33
58827: PUSH
58828: LD_STRING 
58830: ST_TO_ADDR
// hc_name :=  ;
58831: LD_ADDR_OWVAR 26
58835: PUSH
58836: LD_STRING 
58838: ST_TO_ADDR
// end ;
58839: LD_VAR 0 1
58843: RET
// export function PrepareFish ( ) ; begin
58844: LD_INT 0
58846: PPUSH
// uc_side := 0 ;
58847: LD_ADDR_OWVAR 20
58851: PUSH
58852: LD_INT 0
58854: ST_TO_ADDR
// uc_nation := 0 ;
58855: LD_ADDR_OWVAR 21
58859: PUSH
58860: LD_INT 0
58862: ST_TO_ADDR
// InitHc ;
58863: CALL_OW 19
// hc_class := class_fish ;
58867: LD_ADDR_OWVAR 28
58871: PUSH
58872: LD_INT 20
58874: ST_TO_ADDR
// hc_gallery :=  ;
58875: LD_ADDR_OWVAR 33
58879: PUSH
58880: LD_STRING 
58882: ST_TO_ADDR
// hc_name :=  ;
58883: LD_ADDR_OWVAR 26
58887: PUSH
58888: LD_STRING 
58890: ST_TO_ADDR
// end ;
58891: LD_VAR 0 1
58895: RET
// export function PrepareBird ( ) ; begin
58896: LD_INT 0
58898: PPUSH
// uc_side := 0 ;
58899: LD_ADDR_OWVAR 20
58903: PUSH
58904: LD_INT 0
58906: ST_TO_ADDR
// uc_nation := 0 ;
58907: LD_ADDR_OWVAR 21
58911: PUSH
58912: LD_INT 0
58914: ST_TO_ADDR
// InitHc ;
58915: CALL_OW 19
// hc_class := class_phororhacos ;
58919: LD_ADDR_OWVAR 28
58923: PUSH
58924: LD_INT 18
58926: ST_TO_ADDR
// hc_gallery :=  ;
58927: LD_ADDR_OWVAR 33
58931: PUSH
58932: LD_STRING 
58934: ST_TO_ADDR
// hc_name :=  ;
58935: LD_ADDR_OWVAR 26
58939: PUSH
58940: LD_STRING 
58942: ST_TO_ADDR
// end ;
58943: LD_VAR 0 1
58947: RET
// export function PrepareHorse ( ) ; begin
58948: LD_INT 0
58950: PPUSH
// uc_side := 0 ;
58951: LD_ADDR_OWVAR 20
58955: PUSH
58956: LD_INT 0
58958: ST_TO_ADDR
// uc_nation := 0 ;
58959: LD_ADDR_OWVAR 21
58963: PUSH
58964: LD_INT 0
58966: ST_TO_ADDR
// InitHc ;
58967: CALL_OW 19
// hc_class := class_horse ;
58971: LD_ADDR_OWVAR 28
58975: PUSH
58976: LD_INT 21
58978: ST_TO_ADDR
// hc_gallery :=  ;
58979: LD_ADDR_OWVAR 33
58983: PUSH
58984: LD_STRING 
58986: ST_TO_ADDR
// hc_name :=  ;
58987: LD_ADDR_OWVAR 26
58991: PUSH
58992: LD_STRING 
58994: ST_TO_ADDR
// end ;
58995: LD_VAR 0 1
58999: RET
// export function PrepareMastodont ( ) ; begin
59000: LD_INT 0
59002: PPUSH
// uc_side := 0 ;
59003: LD_ADDR_OWVAR 20
59007: PUSH
59008: LD_INT 0
59010: ST_TO_ADDR
// uc_nation := 0 ;
59011: LD_ADDR_OWVAR 21
59015: PUSH
59016: LD_INT 0
59018: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59019: LD_ADDR_OWVAR 37
59023: PUSH
59024: LD_INT 31
59026: ST_TO_ADDR
// vc_control := control_rider ;
59027: LD_ADDR_OWVAR 38
59031: PUSH
59032: LD_INT 4
59034: ST_TO_ADDR
// end ;
59035: LD_VAR 0 1
59039: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59040: LD_INT 0
59042: PPUSH
59043: PPUSH
59044: PPUSH
// uc_side = 0 ;
59045: LD_ADDR_OWVAR 20
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
// uc_nation = 0 ;
59053: LD_ADDR_OWVAR 21
59057: PUSH
59058: LD_INT 0
59060: ST_TO_ADDR
// InitHc_All ( ) ;
59061: CALL_OW 584
// InitVc ;
59065: CALL_OW 20
// if mastodonts then
59069: LD_VAR 0 6
59073: IFFALSE 59140
// for i = 1 to mastodonts do
59075: LD_ADDR_VAR 0 11
59079: PUSH
59080: DOUBLE
59081: LD_INT 1
59083: DEC
59084: ST_TO_ADDR
59085: LD_VAR 0 6
59089: PUSH
59090: FOR_TO
59091: IFFALSE 59138
// begin vc_chassis := 31 ;
59093: LD_ADDR_OWVAR 37
59097: PUSH
59098: LD_INT 31
59100: ST_TO_ADDR
// vc_control := control_rider ;
59101: LD_ADDR_OWVAR 38
59105: PUSH
59106: LD_INT 4
59108: ST_TO_ADDR
// animal := CreateVehicle ;
59109: LD_ADDR_VAR 0 12
59113: PUSH
59114: CALL_OW 45
59118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59119: LD_VAR 0 12
59123: PPUSH
59124: LD_VAR 0 8
59128: PPUSH
59129: LD_INT 0
59131: PPUSH
59132: CALL 61282 0 3
// end ;
59136: GO 59090
59138: POP
59139: POP
// if horses then
59140: LD_VAR 0 5
59144: IFFALSE 59211
// for i = 1 to horses do
59146: LD_ADDR_VAR 0 11
59150: PUSH
59151: DOUBLE
59152: LD_INT 1
59154: DEC
59155: ST_TO_ADDR
59156: LD_VAR 0 5
59160: PUSH
59161: FOR_TO
59162: IFFALSE 59209
// begin hc_class := 21 ;
59164: LD_ADDR_OWVAR 28
59168: PUSH
59169: LD_INT 21
59171: ST_TO_ADDR
// hc_gallery :=  ;
59172: LD_ADDR_OWVAR 33
59176: PUSH
59177: LD_STRING 
59179: ST_TO_ADDR
// animal := CreateHuman ;
59180: LD_ADDR_VAR 0 12
59184: PUSH
59185: CALL_OW 44
59189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59190: LD_VAR 0 12
59194: PPUSH
59195: LD_VAR 0 8
59199: PPUSH
59200: LD_INT 0
59202: PPUSH
59203: CALL 61282 0 3
// end ;
59207: GO 59161
59209: POP
59210: POP
// if birds then
59211: LD_VAR 0 1
59215: IFFALSE 59282
// for i = 1 to birds do
59217: LD_ADDR_VAR 0 11
59221: PUSH
59222: DOUBLE
59223: LD_INT 1
59225: DEC
59226: ST_TO_ADDR
59227: LD_VAR 0 1
59231: PUSH
59232: FOR_TO
59233: IFFALSE 59280
// begin hc_class := 18 ;
59235: LD_ADDR_OWVAR 28
59239: PUSH
59240: LD_INT 18
59242: ST_TO_ADDR
// hc_gallery =  ;
59243: LD_ADDR_OWVAR 33
59247: PUSH
59248: LD_STRING 
59250: ST_TO_ADDR
// animal := CreateHuman ;
59251: LD_ADDR_VAR 0 12
59255: PUSH
59256: CALL_OW 44
59260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59261: LD_VAR 0 12
59265: PPUSH
59266: LD_VAR 0 8
59270: PPUSH
59271: LD_INT 0
59273: PPUSH
59274: CALL 61282 0 3
// end ;
59278: GO 59232
59280: POP
59281: POP
// if tigers then
59282: LD_VAR 0 2
59286: IFFALSE 59370
// for i = 1 to tigers do
59288: LD_ADDR_VAR 0 11
59292: PUSH
59293: DOUBLE
59294: LD_INT 1
59296: DEC
59297: ST_TO_ADDR
59298: LD_VAR 0 2
59302: PUSH
59303: FOR_TO
59304: IFFALSE 59368
// begin hc_class = class_tiger ;
59306: LD_ADDR_OWVAR 28
59310: PUSH
59311: LD_INT 14
59313: ST_TO_ADDR
// hc_gallery =  ;
59314: LD_ADDR_OWVAR 33
59318: PUSH
59319: LD_STRING 
59321: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59322: LD_ADDR_OWVAR 35
59326: PUSH
59327: LD_INT 7
59329: NEG
59330: PPUSH
59331: LD_INT 7
59333: PPUSH
59334: CALL_OW 12
59338: ST_TO_ADDR
// animal := CreateHuman ;
59339: LD_ADDR_VAR 0 12
59343: PUSH
59344: CALL_OW 44
59348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59349: LD_VAR 0 12
59353: PPUSH
59354: LD_VAR 0 8
59358: PPUSH
59359: LD_INT 0
59361: PPUSH
59362: CALL 61282 0 3
// end ;
59366: GO 59303
59368: POP
59369: POP
// if apemans then
59370: LD_VAR 0 3
59374: IFFALSE 59497
// for i = 1 to apemans do
59376: LD_ADDR_VAR 0 11
59380: PUSH
59381: DOUBLE
59382: LD_INT 1
59384: DEC
59385: ST_TO_ADDR
59386: LD_VAR 0 3
59390: PUSH
59391: FOR_TO
59392: IFFALSE 59495
// begin hc_class = class_apeman ;
59394: LD_ADDR_OWVAR 28
59398: PUSH
59399: LD_INT 12
59401: ST_TO_ADDR
// hc_gallery =  ;
59402: LD_ADDR_OWVAR 33
59406: PUSH
59407: LD_STRING 
59409: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59410: LD_ADDR_OWVAR 35
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PPUSH
59419: LD_INT 2
59421: PPUSH
59422: CALL_OW 12
59426: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59427: LD_ADDR_OWVAR 31
59431: PUSH
59432: LD_INT 1
59434: PPUSH
59435: LD_INT 3
59437: PPUSH
59438: CALL_OW 12
59442: PUSH
59443: LD_INT 1
59445: PPUSH
59446: LD_INT 3
59448: PPUSH
59449: CALL_OW 12
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: ST_TO_ADDR
// animal := CreateHuman ;
59466: LD_ADDR_VAR 0 12
59470: PUSH
59471: CALL_OW 44
59475: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59476: LD_VAR 0 12
59480: PPUSH
59481: LD_VAR 0 8
59485: PPUSH
59486: LD_INT 0
59488: PPUSH
59489: CALL 61282 0 3
// end ;
59493: GO 59391
59495: POP
59496: POP
// if enchidnas then
59497: LD_VAR 0 4
59501: IFFALSE 59568
// for i = 1 to enchidnas do
59503: LD_ADDR_VAR 0 11
59507: PUSH
59508: DOUBLE
59509: LD_INT 1
59511: DEC
59512: ST_TO_ADDR
59513: LD_VAR 0 4
59517: PUSH
59518: FOR_TO
59519: IFFALSE 59566
// begin hc_class = 13 ;
59521: LD_ADDR_OWVAR 28
59525: PUSH
59526: LD_INT 13
59528: ST_TO_ADDR
// hc_gallery =  ;
59529: LD_ADDR_OWVAR 33
59533: PUSH
59534: LD_STRING 
59536: ST_TO_ADDR
// animal := CreateHuman ;
59537: LD_ADDR_VAR 0 12
59541: PUSH
59542: CALL_OW 44
59546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59547: LD_VAR 0 12
59551: PPUSH
59552: LD_VAR 0 8
59556: PPUSH
59557: LD_INT 0
59559: PPUSH
59560: CALL 61282 0 3
// end ;
59564: GO 59518
59566: POP
59567: POP
// if fishes then
59568: LD_VAR 0 7
59572: IFFALSE 59639
// for i = 1 to fishes do
59574: LD_ADDR_VAR 0 11
59578: PUSH
59579: DOUBLE
59580: LD_INT 1
59582: DEC
59583: ST_TO_ADDR
59584: LD_VAR 0 7
59588: PUSH
59589: FOR_TO
59590: IFFALSE 59637
// begin hc_class = 20 ;
59592: LD_ADDR_OWVAR 28
59596: PUSH
59597: LD_INT 20
59599: ST_TO_ADDR
// hc_gallery =  ;
59600: LD_ADDR_OWVAR 33
59604: PUSH
59605: LD_STRING 
59607: ST_TO_ADDR
// animal := CreateHuman ;
59608: LD_ADDR_VAR 0 12
59612: PUSH
59613: CALL_OW 44
59617: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59618: LD_VAR 0 12
59622: PPUSH
59623: LD_VAR 0 9
59627: PPUSH
59628: LD_INT 0
59630: PPUSH
59631: CALL 61282 0 3
// end ;
59635: GO 59589
59637: POP
59638: POP
// end ;
59639: LD_VAR 0 10
59643: RET
// export function WantHeal ( sci , unit ) ; begin
59644: LD_INT 0
59646: PPUSH
// if GetTaskList ( sci ) > 0 then
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 437
59656: PUSH
59657: LD_INT 0
59659: GREATER
59660: IFFALSE 59732
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59662: LD_VAR 0 1
59666: PPUSH
59667: CALL_OW 437
59671: PUSH
59672: LD_INT 1
59674: ARRAY
59675: PUSH
59676: LD_INT 1
59678: ARRAY
59679: PUSH
59680: LD_STRING l
59682: EQUAL
59683: IFFALSE 59710
59685: PUSH
59686: LD_VAR 0 1
59690: PPUSH
59691: CALL_OW 437
59695: PUSH
59696: LD_INT 1
59698: ARRAY
59699: PUSH
59700: LD_INT 4
59702: ARRAY
59703: PUSH
59704: LD_VAR 0 2
59708: EQUAL
59709: AND
59710: IFFALSE 59722
// result := true else
59712: LD_ADDR_VAR 0 3
59716: PUSH
59717: LD_INT 1
59719: ST_TO_ADDR
59720: GO 59730
// result := false ;
59722: LD_ADDR_VAR 0 3
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
// end else
59730: GO 59740
// result := false ;
59732: LD_ADDR_VAR 0 3
59736: PUSH
59737: LD_INT 0
59739: ST_TO_ADDR
// end ;
59740: LD_VAR 0 3
59744: RET
// export function HealTarget ( sci ) ; begin
59745: LD_INT 0
59747: PPUSH
// if not sci then
59748: LD_VAR 0 1
59752: NOT
59753: IFFALSE 59757
// exit ;
59755: GO 59822
// result := 0 ;
59757: LD_ADDR_VAR 0 2
59761: PUSH
59762: LD_INT 0
59764: ST_TO_ADDR
// if GetTaskList ( sci ) then
59765: LD_VAR 0 1
59769: PPUSH
59770: CALL_OW 437
59774: IFFALSE 59822
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59776: LD_VAR 0 1
59780: PPUSH
59781: CALL_OW 437
59785: PUSH
59786: LD_INT 1
59788: ARRAY
59789: PUSH
59790: LD_INT 1
59792: ARRAY
59793: PUSH
59794: LD_STRING l
59796: EQUAL
59797: IFFALSE 59822
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59799: LD_ADDR_VAR 0 2
59803: PUSH
59804: LD_VAR 0 1
59808: PPUSH
59809: CALL_OW 437
59813: PUSH
59814: LD_INT 1
59816: ARRAY
59817: PUSH
59818: LD_INT 4
59820: ARRAY
59821: ST_TO_ADDR
// end ;
59822: LD_VAR 0 2
59826: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59827: LD_INT 0
59829: PPUSH
59830: PPUSH
59831: PPUSH
59832: PPUSH
// if not base_units then
59833: LD_VAR 0 1
59837: NOT
59838: IFFALSE 59842
// exit ;
59840: GO 59929
// result := false ;
59842: LD_ADDR_VAR 0 2
59846: PUSH
59847: LD_INT 0
59849: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59850: LD_ADDR_VAR 0 5
59854: PUSH
59855: LD_VAR 0 1
59859: PPUSH
59860: LD_INT 21
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PPUSH
59870: CALL_OW 72
59874: ST_TO_ADDR
// if not tmp then
59875: LD_VAR 0 5
59879: NOT
59880: IFFALSE 59884
// exit ;
59882: GO 59929
// for i in tmp do
59884: LD_ADDR_VAR 0 3
59888: PUSH
59889: LD_VAR 0 5
59893: PUSH
59894: FOR_IN
59895: IFFALSE 59927
// begin result := EnemyInRange ( i , 22 ) ;
59897: LD_ADDR_VAR 0 2
59901: PUSH
59902: LD_VAR 0 3
59906: PPUSH
59907: LD_INT 22
59909: PPUSH
59910: CALL 57344 0 2
59914: ST_TO_ADDR
// if result then
59915: LD_VAR 0 2
59919: IFFALSE 59925
// exit ;
59921: POP
59922: POP
59923: GO 59929
// end ;
59925: GO 59894
59927: POP
59928: POP
// end ;
59929: LD_VAR 0 2
59933: RET
// export function FilterByTag ( units , tag ) ; begin
59934: LD_INT 0
59936: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: LD_VAR 0 1
59946: PPUSH
59947: LD_INT 120
59949: PUSH
59950: LD_VAR 0 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PPUSH
59959: CALL_OW 72
59963: ST_TO_ADDR
// end ;
59964: LD_VAR 0 3
59968: RET
// export function IsDriver ( un ) ; begin
59969: LD_INT 0
59971: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59972: LD_ADDR_VAR 0 2
59976: PUSH
59977: LD_VAR 0 1
59981: PUSH
59982: LD_INT 55
59984: PUSH
59985: EMPTY
59986: LIST
59987: PPUSH
59988: CALL_OW 69
59992: IN
59993: ST_TO_ADDR
// end ;
59994: LD_VAR 0 2
59998: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59999: LD_INT 0
60001: PPUSH
60002: PPUSH
// list := [ ] ;
60003: LD_ADDR_VAR 0 5
60007: PUSH
60008: EMPTY
60009: ST_TO_ADDR
// case d of 0 :
60010: LD_VAR 0 3
60014: PUSH
60015: LD_INT 0
60017: DOUBLE
60018: EQUAL
60019: IFTRUE 60023
60021: GO 60156
60023: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60024: LD_ADDR_VAR 0 5
60028: PUSH
60029: LD_VAR 0 1
60033: PUSH
60034: LD_INT 4
60036: MINUS
60037: PUSH
60038: LD_VAR 0 2
60042: PUSH
60043: LD_INT 4
60045: MINUS
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: PUSH
60055: LD_VAR 0 1
60059: PUSH
60060: LD_INT 3
60062: MINUS
60063: PUSH
60064: LD_VAR 0 2
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 1
60081: PUSH
60082: LD_INT 4
60084: PLUS
60085: PUSH
60086: LD_VAR 0 2
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: LIST
60098: PUSH
60099: LD_VAR 0 1
60103: PUSH
60104: LD_INT 3
60106: PLUS
60107: PUSH
60108: LD_VAR 0 2
60112: PUSH
60113: LD_INT 3
60115: PLUS
60116: PUSH
60117: LD_INT 5
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: LIST
60124: PUSH
60125: LD_VAR 0 1
60129: PUSH
60130: LD_VAR 0 2
60134: PUSH
60135: LD_INT 4
60137: PLUS
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: ST_TO_ADDR
// end ; 1 :
60154: GO 60854
60156: LD_INT 1
60158: DOUBLE
60159: EQUAL
60160: IFTRUE 60164
60162: GO 60297
60164: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60165: LD_ADDR_VAR 0 5
60169: PUSH
60170: LD_VAR 0 1
60174: PUSH
60175: LD_VAR 0 2
60179: PUSH
60180: LD_INT 4
60182: MINUS
60183: PUSH
60184: LD_INT 3
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: LIST
60191: PUSH
60192: LD_VAR 0 1
60196: PUSH
60197: LD_INT 3
60199: MINUS
60200: PUSH
60201: LD_VAR 0 2
60205: PUSH
60206: LD_INT 3
60208: MINUS
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: PUSH
60218: LD_VAR 0 1
60222: PUSH
60223: LD_INT 4
60225: MINUS
60226: PUSH
60227: LD_VAR 0 2
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: PUSH
60240: LD_VAR 0 1
60244: PUSH
60245: LD_VAR 0 2
60249: PUSH
60250: LD_INT 3
60252: PLUS
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: PUSH
60262: LD_VAR 0 1
60266: PUSH
60267: LD_INT 4
60269: PLUS
60270: PUSH
60271: LD_VAR 0 2
60275: PUSH
60276: LD_INT 4
60278: PLUS
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: ST_TO_ADDR
// end ; 2 :
60295: GO 60854
60297: LD_INT 2
60299: DOUBLE
60300: EQUAL
60301: IFTRUE 60305
60303: GO 60434
60305: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60306: LD_ADDR_VAR 0 5
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_VAR 0 2
60320: PUSH
60321: LD_INT 3
60323: MINUS
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 1
60337: PUSH
60338: LD_INT 4
60340: PLUS
60341: PUSH
60342: LD_VAR 0 2
60346: PUSH
60347: LD_INT 4
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: LD_VAR 0 1
60359: PUSH
60360: LD_VAR 0 2
60364: PUSH
60365: LD_INT 4
60367: PLUS
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: PUSH
60377: LD_VAR 0 1
60381: PUSH
60382: LD_INT 3
60384: MINUS
60385: PUSH
60386: LD_VAR 0 2
60390: PUSH
60391: LD_INT 1
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: PUSH
60399: LD_VAR 0 1
60403: PUSH
60404: LD_INT 4
60406: MINUS
60407: PUSH
60408: LD_VAR 0 2
60412: PUSH
60413: LD_INT 4
60415: MINUS
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: ST_TO_ADDR
// end ; 3 :
60432: GO 60854
60434: LD_INT 3
60436: DOUBLE
60437: EQUAL
60438: IFTRUE 60442
60440: GO 60575
60442: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60443: LD_ADDR_VAR 0 5
60447: PUSH
60448: LD_VAR 0 1
60452: PUSH
60453: LD_INT 3
60455: PLUS
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 4
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: PUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 4
60477: PLUS
60478: PUSH
60479: LD_VAR 0 2
60483: PUSH
60484: LD_INT 4
60486: PLUS
60487: PUSH
60488: LD_INT 5
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: PUSH
60496: LD_VAR 0 1
60500: PUSH
60501: LD_INT 4
60503: MINUS
60504: PUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: PUSH
60518: LD_VAR 0 1
60522: PUSH
60523: LD_VAR 0 2
60527: PUSH
60528: LD_INT 4
60530: MINUS
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: LD_VAR 0 1
60544: PUSH
60545: LD_INT 3
60547: MINUS
60548: PUSH
60549: LD_VAR 0 2
60553: PUSH
60554: LD_INT 3
60556: MINUS
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// end ; 4 :
60573: GO 60854
60575: LD_INT 4
60577: DOUBLE
60578: EQUAL
60579: IFTRUE 60583
60581: GO 60716
60583: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60584: LD_ADDR_VAR 0 5
60588: PUSH
60589: LD_VAR 0 1
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 4
60601: PLUS
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_VAR 0 1
60615: PUSH
60616: LD_INT 3
60618: PLUS
60619: PUSH
60620: LD_VAR 0 2
60624: PUSH
60625: LD_INT 3
60627: PLUS
60628: PUSH
60629: LD_INT 5
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: PUSH
60637: LD_VAR 0 1
60641: PUSH
60642: LD_INT 4
60644: PLUS
60645: PUSH
60646: LD_VAR 0 2
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: PUSH
60659: LD_VAR 0 1
60663: PUSH
60664: LD_VAR 0 2
60668: PUSH
60669: LD_INT 3
60671: MINUS
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: PUSH
60681: LD_VAR 0 1
60685: PUSH
60686: LD_INT 4
60688: MINUS
60689: PUSH
60690: LD_VAR 0 2
60694: PUSH
60695: LD_INT 4
60697: MINUS
60698: PUSH
60699: LD_INT 2
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: LIST
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: ST_TO_ADDR
// end ; 5 :
60714: GO 60854
60716: LD_INT 5
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60724
60722: GO 60853
60724: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60725: LD_ADDR_VAR 0 5
60729: PUSH
60730: LD_VAR 0 1
60734: PUSH
60735: LD_INT 4
60737: MINUS
60738: PUSH
60739: LD_VAR 0 2
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: PUSH
60752: LD_VAR 0 1
60756: PUSH
60757: LD_VAR 0 2
60761: PUSH
60762: LD_INT 4
60764: MINUS
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: PUSH
60774: LD_VAR 0 1
60778: PUSH
60779: LD_INT 4
60781: PLUS
60782: PUSH
60783: LD_VAR 0 2
60787: PUSH
60788: LD_INT 4
60790: PLUS
60791: PUSH
60792: LD_INT 5
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: PUSH
60800: LD_VAR 0 1
60804: PUSH
60805: LD_INT 3
60807: PLUS
60808: PUSH
60809: LD_VAR 0 2
60813: PUSH
60814: LD_INT 4
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: LIST
60821: PUSH
60822: LD_VAR 0 1
60826: PUSH
60827: LD_VAR 0 2
60831: PUSH
60832: LD_INT 3
60834: PLUS
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: LIST
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: ST_TO_ADDR
// end ; end ;
60851: GO 60854
60853: POP
// result := list ;
60854: LD_ADDR_VAR 0 4
60858: PUSH
60859: LD_VAR 0 5
60863: ST_TO_ADDR
// end ;
60864: LD_VAR 0 4
60868: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60869: LD_INT 0
60871: PPUSH
60872: PPUSH
60873: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60874: LD_VAR 0 1
60878: NOT
60879: IFTRUE 60907
60881: PUSH
60882: LD_VAR 0 2
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 3
60895: PUSH
60896: LD_INT 4
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: IN
60905: NOT
60906: OR
60907: IFFALSE 60911
// exit ;
60909: GO 60994
// tmp := [ ] ;
60911: LD_ADDR_VAR 0 5
60915: PUSH
60916: EMPTY
60917: ST_TO_ADDR
// for i in units do
60918: LD_ADDR_VAR 0 4
60922: PUSH
60923: LD_VAR 0 1
60927: PUSH
60928: FOR_IN
60929: IFFALSE 60963
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60931: LD_ADDR_VAR 0 5
60935: PUSH
60936: LD_VAR 0 5
60940: PPUSH
60941: LD_VAR 0 4
60945: PPUSH
60946: LD_VAR 0 2
60950: PPUSH
60951: CALL_OW 259
60955: PPUSH
60956: CALL 62389 0 2
60960: ST_TO_ADDR
60961: GO 60928
60963: POP
60964: POP
// if not tmp then
60965: LD_VAR 0 5
60969: NOT
60970: IFFALSE 60974
// exit ;
60972: GO 60994
// result := SortListByListDesc ( units , tmp ) ;
60974: LD_ADDR_VAR 0 3
60978: PUSH
60979: LD_VAR 0 1
60983: PPUSH
60984: LD_VAR 0 5
60988: PPUSH
60989: CALL_OW 77
60993: ST_TO_ADDR
// end ;
60994: LD_VAR 0 3
60998: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60999: LD_INT 0
61001: PPUSH
61002: PPUSH
61003: PPUSH
// result := false ;
61004: LD_ADDR_VAR 0 3
61008: PUSH
61009: LD_INT 0
61011: ST_TO_ADDR
// if not building then
61012: LD_VAR 0 2
61016: NOT
61017: IFFALSE 61021
// exit ;
61019: GO 61165
// x := GetX ( building ) ;
61021: LD_ADDR_VAR 0 4
61025: PUSH
61026: LD_VAR 0 2
61030: PPUSH
61031: CALL_OW 250
61035: ST_TO_ADDR
// y := GetY ( building ) ;
61036: LD_ADDR_VAR 0 5
61040: PUSH
61041: LD_VAR 0 2
61045: PPUSH
61046: CALL_OW 251
61050: ST_TO_ADDR
// if not x or not y then
61051: LD_VAR 0 4
61055: NOT
61056: IFTRUE 61065
61058: PUSH
61059: LD_VAR 0 5
61063: NOT
61064: OR
61065: IFFALSE 61069
// exit ;
61067: GO 61165
// if GetTaskList ( unit ) then
61069: LD_VAR 0 1
61073: PPUSH
61074: CALL_OW 437
61078: IFFALSE 61165
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61080: LD_STRING e
61082: PUSH
61083: LD_VAR 0 1
61087: PPUSH
61088: CALL_OW 437
61092: PUSH
61093: LD_INT 1
61095: ARRAY
61096: PUSH
61097: LD_INT 1
61099: ARRAY
61100: EQUAL
61101: IFFALSE 61128
61103: PUSH
61104: LD_VAR 0 4
61108: PUSH
61109: LD_VAR 0 1
61113: PPUSH
61114: CALL_OW 437
61118: PUSH
61119: LD_INT 1
61121: ARRAY
61122: PUSH
61123: LD_INT 2
61125: ARRAY
61126: EQUAL
61127: AND
61128: IFFALSE 61155
61130: PUSH
61131: LD_VAR 0 5
61135: PUSH
61136: LD_VAR 0 1
61140: PPUSH
61141: CALL_OW 437
61145: PUSH
61146: LD_INT 1
61148: ARRAY
61149: PUSH
61150: LD_INT 3
61152: ARRAY
61153: EQUAL
61154: AND
61155: IFFALSE 61165
// result := true end ;
61157: LD_ADDR_VAR 0 3
61161: PUSH
61162: LD_INT 1
61164: ST_TO_ADDR
// end ;
61165: LD_VAR 0 3
61169: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61170: LD_INT 0
61172: PPUSH
// result := false ;
61173: LD_ADDR_VAR 0 4
61177: PUSH
61178: LD_INT 0
61180: ST_TO_ADDR
// if GetTaskList ( unit ) then
61181: LD_VAR 0 1
61185: PPUSH
61186: CALL_OW 437
61190: IFFALSE 61277
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61192: LD_STRING M
61194: PUSH
61195: LD_VAR 0 1
61199: PPUSH
61200: CALL_OW 437
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: EQUAL
61213: IFFALSE 61240
61215: PUSH
61216: LD_VAR 0 2
61220: PUSH
61221: LD_VAR 0 1
61225: PPUSH
61226: CALL_OW 437
61230: PUSH
61231: LD_INT 1
61233: ARRAY
61234: PUSH
61235: LD_INT 2
61237: ARRAY
61238: EQUAL
61239: AND
61240: IFFALSE 61267
61242: PUSH
61243: LD_VAR 0 3
61247: PUSH
61248: LD_VAR 0 1
61252: PPUSH
61253: CALL_OW 437
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PUSH
61262: LD_INT 3
61264: ARRAY
61265: EQUAL
61266: AND
61267: IFFALSE 61277
// result := true ;
61269: LD_ADDR_VAR 0 4
61273: PUSH
61274: LD_INT 1
61276: ST_TO_ADDR
// end ; end ;
61277: LD_VAR 0 4
61281: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61282: LD_INT 0
61284: PPUSH
61285: PPUSH
61286: PPUSH
61287: PPUSH
// if not unit or not area then
61288: LD_VAR 0 1
61292: NOT
61293: IFTRUE 61302
61295: PUSH
61296: LD_VAR 0 2
61300: NOT
61301: OR
61302: IFFALSE 61306
// exit ;
61304: GO 61482
// tmp := AreaToList ( area , i ) ;
61306: LD_ADDR_VAR 0 6
61310: PUSH
61311: LD_VAR 0 2
61315: PPUSH
61316: LD_VAR 0 5
61320: PPUSH
61321: CALL_OW 517
61325: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61326: LD_ADDR_VAR 0 5
61330: PUSH
61331: DOUBLE
61332: LD_INT 1
61334: DEC
61335: ST_TO_ADDR
61336: LD_VAR 0 6
61340: PUSH
61341: LD_INT 1
61343: ARRAY
61344: PUSH
61345: FOR_TO
61346: IFFALSE 61480
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61348: LD_ADDR_VAR 0 7
61352: PUSH
61353: LD_VAR 0 6
61357: PUSH
61358: LD_INT 1
61360: ARRAY
61361: PUSH
61362: LD_VAR 0 5
61366: ARRAY
61367: PUSH
61368: LD_VAR 0 6
61372: PUSH
61373: LD_INT 2
61375: ARRAY
61376: PUSH
61377: LD_VAR 0 5
61381: ARRAY
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61387: LD_INT 92
61389: PUSH
61390: LD_VAR 0 7
61394: PUSH
61395: LD_INT 1
61397: ARRAY
61398: PUSH
61399: LD_VAR 0 7
61403: PUSH
61404: LD_INT 2
61406: ARRAY
61407: PUSH
61408: LD_INT 2
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: PPUSH
61417: CALL_OW 69
61421: PUSH
61422: LD_INT 0
61424: EQUAL
61425: IFFALSE 61478
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61427: LD_VAR 0 1
61431: PPUSH
61432: LD_VAR 0 7
61436: PUSH
61437: LD_INT 1
61439: ARRAY
61440: PPUSH
61441: LD_VAR 0 7
61445: PUSH
61446: LD_INT 2
61448: ARRAY
61449: PPUSH
61450: LD_VAR 0 3
61454: PPUSH
61455: CALL_OW 48
// result := IsPlaced ( unit ) ;
61459: LD_ADDR_VAR 0 4
61463: PUSH
61464: LD_VAR 0 1
61468: PPUSH
61469: CALL_OW 305
61473: ST_TO_ADDR
// exit ;
61474: POP
61475: POP
61476: GO 61482
// end ; end ;
61478: GO 61345
61480: POP
61481: POP
// end ;
61482: LD_VAR 0 4
61486: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61487: LD_INT 0
61489: PPUSH
61490: PPUSH
61491: PPUSH
// if not side or side > 8 then
61492: LD_VAR 0 1
61496: NOT
61497: IFTRUE 61509
61499: PUSH
61500: LD_VAR 0 1
61504: PUSH
61505: LD_INT 8
61507: GREATER
61508: OR
61509: IFFALSE 61513
// exit ;
61511: GO 61700
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61513: LD_ADDR_VAR 0 4
61517: PUSH
61518: LD_INT 22
61520: PUSH
61521: LD_VAR 0 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 21
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PPUSH
61544: CALL_OW 69
61548: ST_TO_ADDR
// if not tmp then
61549: LD_VAR 0 4
61553: NOT
61554: IFFALSE 61558
// exit ;
61556: GO 61700
// enable_addtolog := true ;
61558: LD_ADDR_OWVAR 81
61562: PUSH
61563: LD_INT 1
61565: ST_TO_ADDR
// AddToLog ( [ ) ;
61566: LD_STRING [
61568: PPUSH
61569: CALL_OW 561
// for i in tmp do
61573: LD_ADDR_VAR 0 3
61577: PUSH
61578: LD_VAR 0 4
61582: PUSH
61583: FOR_IN
61584: IFFALSE 61691
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61586: LD_STRING [
61588: PUSH
61589: LD_VAR 0 3
61593: PPUSH
61594: CALL_OW 266
61598: STR
61599: PUSH
61600: LD_STRING , 
61602: STR
61603: PUSH
61604: LD_VAR 0 3
61608: PPUSH
61609: CALL_OW 250
61613: STR
61614: PUSH
61615: LD_STRING , 
61617: STR
61618: PUSH
61619: LD_VAR 0 3
61623: PPUSH
61624: CALL_OW 251
61628: STR
61629: PUSH
61630: LD_STRING , 
61632: STR
61633: PUSH
61634: LD_VAR 0 3
61638: PPUSH
61639: CALL_OW 254
61643: STR
61644: PUSH
61645: LD_STRING , 
61647: STR
61648: PUSH
61649: LD_VAR 0 3
61653: PPUSH
61654: LD_INT 1
61656: PPUSH
61657: CALL_OW 268
61661: STR
61662: PUSH
61663: LD_STRING , 
61665: STR
61666: PUSH
61667: LD_VAR 0 3
61671: PPUSH
61672: LD_INT 2
61674: PPUSH
61675: CALL_OW 268
61679: STR
61680: PUSH
61681: LD_STRING ],
61683: STR
61684: PPUSH
61685: CALL_OW 561
// end ;
61689: GO 61583
61691: POP
61692: POP
// AddToLog ( ]; ) ;
61693: LD_STRING ];
61695: PPUSH
61696: CALL_OW 561
// end ;
61700: LD_VAR 0 2
61704: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61705: LD_INT 0
61707: PPUSH
61708: PPUSH
61709: PPUSH
61710: PPUSH
61711: PPUSH
// if not area or not rate or not max then
61712: LD_VAR 0 1
61716: NOT
61717: IFTRUE 61726
61719: PUSH
61720: LD_VAR 0 2
61724: NOT
61725: OR
61726: IFTRUE 61735
61728: PUSH
61729: LD_VAR 0 4
61733: NOT
61734: OR
61735: IFFALSE 61739
// exit ;
61737: GO 61928
// while 1 do
61739: LD_INT 1
61741: IFFALSE 61928
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61743: LD_ADDR_VAR 0 9
61747: PUSH
61748: LD_VAR 0 1
61752: PPUSH
61753: LD_INT 1
61755: PPUSH
61756: CALL_OW 287
61760: PUSH
61761: LD_INT 10
61763: MUL
61764: ST_TO_ADDR
// r := rate / 10 ;
61765: LD_ADDR_VAR 0 7
61769: PUSH
61770: LD_VAR 0 2
61774: PUSH
61775: LD_INT 10
61777: DIVREAL
61778: ST_TO_ADDR
// time := 1 1$00 ;
61779: LD_ADDR_VAR 0 8
61783: PUSH
61784: LD_INT 2100
61786: ST_TO_ADDR
// if amount < min then
61787: LD_VAR 0 9
61791: PUSH
61792: LD_VAR 0 3
61796: LESS
61797: IFFALSE 61815
// r := r * 2 else
61799: LD_ADDR_VAR 0 7
61803: PUSH
61804: LD_VAR 0 7
61808: PUSH
61809: LD_INT 2
61811: MUL
61812: ST_TO_ADDR
61813: GO 61841
// if amount > max then
61815: LD_VAR 0 9
61819: PUSH
61820: LD_VAR 0 4
61824: GREATER
61825: IFFALSE 61841
// r := r / 2 ;
61827: LD_ADDR_VAR 0 7
61831: PUSH
61832: LD_VAR 0 7
61836: PUSH
61837: LD_INT 2
61839: DIVREAL
61840: ST_TO_ADDR
// time := time / r ;
61841: LD_ADDR_VAR 0 8
61845: PUSH
61846: LD_VAR 0 8
61850: PUSH
61851: LD_VAR 0 7
61855: DIVREAL
61856: ST_TO_ADDR
// if time < 0 then
61857: LD_VAR 0 8
61861: PUSH
61862: LD_INT 0
61864: LESS
61865: IFFALSE 61882
// time := time * - 1 ;
61867: LD_ADDR_VAR 0 8
61871: PUSH
61872: LD_VAR 0 8
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: MUL
61881: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61882: LD_VAR 0 8
61886: PUSH
61887: LD_INT 35
61889: PPUSH
61890: LD_INT 875
61892: PPUSH
61893: CALL_OW 12
61897: PLUS
61898: PPUSH
61899: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61903: LD_INT 1
61905: PPUSH
61906: LD_INT 5
61908: PPUSH
61909: CALL_OW 12
61913: PPUSH
61914: LD_VAR 0 1
61918: PPUSH
61919: LD_INT 1
61921: PPUSH
61922: CALL_OW 55
// end ;
61926: GO 61739
// end ;
61928: LD_VAR 0 5
61932: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61933: LD_INT 0
61935: PPUSH
61936: PPUSH
61937: PPUSH
61938: PPUSH
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
// if not turrets or not factories then
61943: LD_VAR 0 1
61947: NOT
61948: IFTRUE 61957
61950: PUSH
61951: LD_VAR 0 2
61955: NOT
61956: OR
61957: IFFALSE 61961
// exit ;
61959: GO 62268
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61961: LD_ADDR_VAR 0 10
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: LD_INT 6
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 4
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: LD_INT 5
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 24
62003: PUSH
62004: LD_INT 25
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 23
62013: PUSH
62014: LD_INT 27
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 42
62027: PUSH
62028: LD_INT 43
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 44
62037: PUSH
62038: LD_INT 46
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 45
62047: PUSH
62048: LD_INT 47
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: LIST
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: LIST
62064: ST_TO_ADDR
// result := [ ] ;
62065: LD_ADDR_VAR 0 3
62069: PUSH
62070: EMPTY
62071: ST_TO_ADDR
// for i in turrets do
62072: LD_ADDR_VAR 0 4
62076: PUSH
62077: LD_VAR 0 1
62081: PUSH
62082: FOR_IN
62083: IFFALSE 62266
// begin nat := GetNation ( i ) ;
62085: LD_ADDR_VAR 0 7
62089: PUSH
62090: LD_VAR 0 4
62094: PPUSH
62095: CALL_OW 248
62099: ST_TO_ADDR
// weapon := 0 ;
62100: LD_ADDR_VAR 0 8
62104: PUSH
62105: LD_INT 0
62107: ST_TO_ADDR
// if not nat then
62108: LD_VAR 0 7
62112: NOT
62113: IFFALSE 62117
// continue ;
62115: GO 62082
// for j in list [ nat ] do
62117: LD_ADDR_VAR 0 5
62121: PUSH
62122: LD_VAR 0 10
62126: PUSH
62127: LD_VAR 0 7
62131: ARRAY
62132: PUSH
62133: FOR_IN
62134: IFFALSE 62175
// if GetBWeapon ( i ) = j [ 1 ] then
62136: LD_VAR 0 4
62140: PPUSH
62141: CALL_OW 269
62145: PUSH
62146: LD_VAR 0 5
62150: PUSH
62151: LD_INT 1
62153: ARRAY
62154: EQUAL
62155: IFFALSE 62173
// begin weapon := j [ 2 ] ;
62157: LD_ADDR_VAR 0 8
62161: PUSH
62162: LD_VAR 0 5
62166: PUSH
62167: LD_INT 2
62169: ARRAY
62170: ST_TO_ADDR
// break ;
62171: GO 62175
// end ;
62173: GO 62133
62175: POP
62176: POP
// if not weapon then
62177: LD_VAR 0 8
62181: NOT
62182: IFFALSE 62186
// continue ;
62184: GO 62082
// for k in factories do
62186: LD_ADDR_VAR 0 6
62190: PUSH
62191: LD_VAR 0 2
62195: PUSH
62196: FOR_IN
62197: IFFALSE 62262
// begin weapons := AvailableWeaponList ( k ) ;
62199: LD_ADDR_VAR 0 9
62203: PUSH
62204: LD_VAR 0 6
62208: PPUSH
62209: CALL_OW 478
62213: ST_TO_ADDR
// if not weapons then
62214: LD_VAR 0 9
62218: NOT
62219: IFFALSE 62223
// continue ;
62221: GO 62196
// if weapon in weapons then
62223: LD_VAR 0 8
62227: PUSH
62228: LD_VAR 0 9
62232: IN
62233: IFFALSE 62260
// begin result := [ i , weapon ] ;
62235: LD_ADDR_VAR 0 3
62239: PUSH
62240: LD_VAR 0 4
62244: PUSH
62245: LD_VAR 0 8
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: ST_TO_ADDR
// exit ;
62254: POP
62255: POP
62256: POP
62257: POP
62258: GO 62268
// end ; end ;
62260: GO 62196
62262: POP
62263: POP
// end ;
62264: GO 62082
62266: POP
62267: POP
// end ;
62268: LD_VAR 0 3
62272: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62273: LD_INT 0
62275: PPUSH
// if not side or side > 8 then
62276: LD_VAR 0 3
62280: NOT
62281: IFTRUE 62293
62283: PUSH
62284: LD_VAR 0 3
62288: PUSH
62289: LD_INT 8
62291: GREATER
62292: OR
62293: IFFALSE 62297
// exit ;
62295: GO 62356
// if not range then
62297: LD_VAR 0 4
62301: NOT
62302: IFFALSE 62313
// range := - 12 ;
62304: LD_ADDR_VAR 0 4
62308: PUSH
62309: LD_INT 12
62311: NEG
62312: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62313: LD_VAR 0 1
62317: PPUSH
62318: LD_VAR 0 2
62322: PPUSH
62323: LD_VAR 0 3
62327: PPUSH
62328: LD_VAR 0 4
62332: PPUSH
62333: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62337: LD_VAR 0 1
62341: PPUSH
62342: LD_VAR 0 2
62346: PPUSH
62347: LD_VAR 0 3
62351: PPUSH
62352: CALL_OW 331
// end ;
62356: LD_VAR 0 5
62360: RET
// export function Video ( mode ) ; begin
62361: LD_INT 0
62363: PPUSH
// ingame_video = mode ;
62364: LD_ADDR_OWVAR 52
62368: PUSH
62369: LD_VAR 0 1
62373: ST_TO_ADDR
// interface_hidden = mode ;
62374: LD_ADDR_OWVAR 54
62378: PUSH
62379: LD_VAR 0 1
62383: ST_TO_ADDR
// end ;
62384: LD_VAR 0 2
62388: RET
// export function Join ( array , element ) ; begin
62389: LD_INT 0
62391: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62392: LD_ADDR_VAR 0 3
62396: PUSH
62397: LD_VAR 0 1
62401: PPUSH
62402: LD_VAR 0 1
62406: PUSH
62407: LD_INT 1
62409: PLUS
62410: PPUSH
62411: LD_VAR 0 2
62415: PPUSH
62416: CALL_OW 1
62420: ST_TO_ADDR
// end ;
62421: LD_VAR 0 3
62425: RET
// export function JoinUnion ( array , element ) ; begin
62426: LD_INT 0
62428: PPUSH
// result := array union element ;
62429: LD_ADDR_VAR 0 3
62433: PUSH
62434: LD_VAR 0 1
62438: PUSH
62439: LD_VAR 0 2
62443: UNION
62444: ST_TO_ADDR
// end ;
62445: LD_VAR 0 3
62449: RET
// export function GetBehemoths ( side ) ; begin
62450: LD_INT 0
62452: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62453: LD_ADDR_VAR 0 2
62457: PUSH
62458: LD_INT 22
62460: PUSH
62461: LD_VAR 0 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 31
62472: PUSH
62473: LD_INT 25
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PPUSH
62484: CALL_OW 69
62488: ST_TO_ADDR
// end ;
62489: LD_VAR 0 2
62493: RET
// export function Shuffle ( array ) ; var i , index ; begin
62494: LD_INT 0
62496: PPUSH
62497: PPUSH
62498: PPUSH
// result := [ ] ;
62499: LD_ADDR_VAR 0 2
62503: PUSH
62504: EMPTY
62505: ST_TO_ADDR
// if not array then
62506: LD_VAR 0 1
62510: NOT
62511: IFFALSE 62515
// exit ;
62513: GO 62614
// Randomize ;
62515: CALL_OW 10
// for i = array downto 1 do
62519: LD_ADDR_VAR 0 3
62523: PUSH
62524: DOUBLE
62525: LD_VAR 0 1
62529: INC
62530: ST_TO_ADDR
62531: LD_INT 1
62533: PUSH
62534: FOR_DOWNTO
62535: IFFALSE 62612
// begin index := rand ( 1 , array ) ;
62537: LD_ADDR_VAR 0 4
62541: PUSH
62542: LD_INT 1
62544: PPUSH
62545: LD_VAR 0 1
62549: PPUSH
62550: CALL_OW 12
62554: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62555: LD_ADDR_VAR 0 2
62559: PUSH
62560: LD_VAR 0 2
62564: PPUSH
62565: LD_VAR 0 2
62569: PUSH
62570: LD_INT 1
62572: PLUS
62573: PPUSH
62574: LD_VAR 0 1
62578: PUSH
62579: LD_VAR 0 4
62583: ARRAY
62584: PPUSH
62585: CALL_OW 2
62589: ST_TO_ADDR
// array := Delete ( array , index ) ;
62590: LD_ADDR_VAR 0 1
62594: PUSH
62595: LD_VAR 0 1
62599: PPUSH
62600: LD_VAR 0 4
62604: PPUSH
62605: CALL_OW 3
62609: ST_TO_ADDR
// end ;
62610: GO 62534
62612: POP
62613: POP
// end ;
62614: LD_VAR 0 2
62618: RET
// export function GetBaseMaterials ( base ) ; begin
62619: LD_INT 0
62621: PPUSH
// result := [ 0 , 0 , 0 ] ;
62622: LD_ADDR_VAR 0 2
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 0
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: ST_TO_ADDR
// if not base then
62641: LD_VAR 0 1
62645: NOT
62646: IFFALSE 62650
// exit ;
62648: GO 62699
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62650: LD_ADDR_VAR 0 2
62654: PUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: LD_INT 1
62662: PPUSH
62663: CALL_OW 275
62667: PUSH
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_INT 2
62675: PPUSH
62676: CALL_OW 275
62680: PUSH
62681: LD_VAR 0 1
62685: PPUSH
62686: LD_INT 3
62688: PPUSH
62689: CALL_OW 275
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: ST_TO_ADDR
// end ;
62699: LD_VAR 0 2
62703: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62704: LD_INT 0
62706: PPUSH
62707: PPUSH
// result := array ;
62708: LD_ADDR_VAR 0 3
62712: PUSH
62713: LD_VAR 0 1
62717: ST_TO_ADDR
// if size >= result then
62718: LD_VAR 0 2
62722: PUSH
62723: LD_VAR 0 3
62727: GREATEREQUAL
62728: IFFALSE 62732
// exit ;
62730: GO 62782
// if size then
62732: LD_VAR 0 2
62736: IFFALSE 62782
// for i := array downto size do
62738: LD_ADDR_VAR 0 4
62742: PUSH
62743: DOUBLE
62744: LD_VAR 0 1
62748: INC
62749: ST_TO_ADDR
62750: LD_VAR 0 2
62754: PUSH
62755: FOR_DOWNTO
62756: IFFALSE 62780
// result := Delete ( result , result ) ;
62758: LD_ADDR_VAR 0 3
62762: PUSH
62763: LD_VAR 0 3
62767: PPUSH
62768: LD_VAR 0 3
62772: PPUSH
62773: CALL_OW 3
62777: ST_TO_ADDR
62778: GO 62755
62780: POP
62781: POP
// end ;
62782: LD_VAR 0 3
62786: RET
// export function ComExit ( unit ) ; var tmp ; begin
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
// if not IsInUnit ( unit ) then
62791: LD_VAR 0 1
62795: PPUSH
62796: CALL_OW 310
62800: NOT
62801: IFFALSE 62805
// exit ;
62803: GO 62865
// tmp := IsInUnit ( unit ) ;
62805: LD_ADDR_VAR 0 3
62809: PUSH
62810: LD_VAR 0 1
62814: PPUSH
62815: CALL_OW 310
62819: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62820: LD_VAR 0 3
62824: PPUSH
62825: CALL_OW 247
62829: PUSH
62830: LD_INT 2
62832: EQUAL
62833: IFFALSE 62846
// ComExitVehicle ( unit ) else
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 121
62844: GO 62855
// ComExitBuilding ( unit ) ;
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 122
// result := tmp ;
62855: LD_ADDR_VAR 0 2
62859: PUSH
62860: LD_VAR 0 3
62864: ST_TO_ADDR
// end ;
62865: LD_VAR 0 2
62869: RET
// export function ComExitAll ( units ) ; var i ; begin
62870: LD_INT 0
62872: PPUSH
62873: PPUSH
// if not units then
62874: LD_VAR 0 1
62878: NOT
62879: IFFALSE 62883
// exit ;
62881: GO 62909
// for i in units do
62883: LD_ADDR_VAR 0 3
62887: PUSH
62888: LD_VAR 0 1
62892: PUSH
62893: FOR_IN
62894: IFFALSE 62907
// ComExit ( i ) ;
62896: LD_VAR 0 3
62900: PPUSH
62901: CALL 62787 0 1
62905: GO 62893
62907: POP
62908: POP
// end ;
62909: LD_VAR 0 2
62913: RET
// export function ResetHc ; begin
62914: LD_INT 0
62916: PPUSH
// InitHc ;
62917: CALL_OW 19
// hc_importance := 0 ;
62921: LD_ADDR_OWVAR 32
62925: PUSH
62926: LD_INT 0
62928: ST_TO_ADDR
// end ;
62929: LD_VAR 0 1
62933: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62934: LD_INT 0
62936: PPUSH
62937: PPUSH
62938: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62939: LD_ADDR_VAR 0 6
62943: PUSH
62944: LD_VAR 0 1
62948: PUSH
62949: LD_VAR 0 3
62953: PLUS
62954: PUSH
62955: LD_INT 2
62957: DIV
62958: ST_TO_ADDR
// if _x < 0 then
62959: LD_VAR 0 6
62963: PUSH
62964: LD_INT 0
62966: LESS
62967: IFFALSE 62984
// _x := _x * - 1 ;
62969: LD_ADDR_VAR 0 6
62973: PUSH
62974: LD_VAR 0 6
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: MUL
62983: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62984: LD_ADDR_VAR 0 7
62988: PUSH
62989: LD_VAR 0 2
62993: PUSH
62994: LD_VAR 0 4
62998: PLUS
62999: PUSH
63000: LD_INT 2
63002: DIV
63003: ST_TO_ADDR
// if _y < 0 then
63004: LD_VAR 0 7
63008: PUSH
63009: LD_INT 0
63011: LESS
63012: IFFALSE 63029
// _y := _y * - 1 ;
63014: LD_ADDR_VAR 0 7
63018: PUSH
63019: LD_VAR 0 7
63023: PUSH
63024: LD_INT 1
63026: NEG
63027: MUL
63028: ST_TO_ADDR
// result := [ _x , _y ] ;
63029: LD_ADDR_VAR 0 5
63033: PUSH
63034: LD_VAR 0 6
63038: PUSH
63039: LD_VAR 0 7
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// end ;
63048: LD_VAR 0 5
63052: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63053: LD_INT 0
63055: PPUSH
63056: PPUSH
63057: PPUSH
63058: PPUSH
// task := GetTaskList ( unit ) ;
63059: LD_ADDR_VAR 0 7
63063: PUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: CALL_OW 437
63073: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63074: LD_VAR 0 7
63078: NOT
63079: IFFALSE 63098
63081: PUSH
63082: LD_VAR 0 1
63086: PPUSH
63087: LD_VAR 0 2
63091: PPUSH
63092: CALL_OW 308
63096: NOT
63097: AND
63098: IFFALSE 63102
// exit ;
63100: GO 63220
// if IsInArea ( unit , area ) then
63102: LD_VAR 0 1
63106: PPUSH
63107: LD_VAR 0 2
63111: PPUSH
63112: CALL_OW 308
63116: IFFALSE 63134
// begin ComMoveToArea ( unit , goAway ) ;
63118: LD_VAR 0 1
63122: PPUSH
63123: LD_VAR 0 3
63127: PPUSH
63128: CALL_OW 113
// exit ;
63132: GO 63220
// end ; if task [ 1 ] [ 1 ] <> M then
63134: LD_VAR 0 7
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PUSH
63147: LD_STRING M
63149: NONEQUAL
63150: IFFALSE 63154
// exit ;
63152: GO 63220
// x := task [ 1 ] [ 2 ] ;
63154: LD_ADDR_VAR 0 5
63158: PUSH
63159: LD_VAR 0 7
63163: PUSH
63164: LD_INT 1
63166: ARRAY
63167: PUSH
63168: LD_INT 2
63170: ARRAY
63171: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63172: LD_ADDR_VAR 0 6
63176: PUSH
63177: LD_VAR 0 7
63181: PUSH
63182: LD_INT 1
63184: ARRAY
63185: PUSH
63186: LD_INT 3
63188: ARRAY
63189: ST_TO_ADDR
// if InArea ( x , y , area ) then
63190: LD_VAR 0 5
63194: PPUSH
63195: LD_VAR 0 6
63199: PPUSH
63200: LD_VAR 0 2
63204: PPUSH
63205: CALL_OW 309
63209: IFFALSE 63220
// ComStop ( unit ) ;
63211: LD_VAR 0 1
63215: PPUSH
63216: CALL_OW 141
// end ;
63220: LD_VAR 0 4
63224: RET
// export function Abs ( value ) ; begin
63225: LD_INT 0
63227: PPUSH
// result := value ;
63228: LD_ADDR_VAR 0 2
63232: PUSH
63233: LD_VAR 0 1
63237: ST_TO_ADDR
// if value < 0 then
63238: LD_VAR 0 1
63242: PUSH
63243: LD_INT 0
63245: LESS
63246: IFFALSE 63263
// result := value * - 1 ;
63248: LD_ADDR_VAR 0 2
63252: PUSH
63253: LD_VAR 0 1
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: MUL
63262: ST_TO_ADDR
// end ;
63263: LD_VAR 0 2
63267: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63268: LD_INT 0
63270: PPUSH
63271: PPUSH
63272: PPUSH
63273: PPUSH
63274: PPUSH
63275: PPUSH
63276: PPUSH
63277: PPUSH
// if not unit or not building then
63278: LD_VAR 0 1
63282: NOT
63283: IFTRUE 63292
63285: PUSH
63286: LD_VAR 0 2
63290: NOT
63291: OR
63292: IFFALSE 63296
// exit ;
63294: GO 63524
// x := GetX ( building ) ;
63296: LD_ADDR_VAR 0 4
63300: PUSH
63301: LD_VAR 0 2
63305: PPUSH
63306: CALL_OW 250
63310: ST_TO_ADDR
// y := GetY ( building ) ;
63311: LD_ADDR_VAR 0 6
63315: PUSH
63316: LD_VAR 0 2
63320: PPUSH
63321: CALL_OW 251
63325: ST_TO_ADDR
// d := GetDir ( building ) ;
63326: LD_ADDR_VAR 0 8
63330: PUSH
63331: LD_VAR 0 2
63335: PPUSH
63336: CALL_OW 254
63340: ST_TO_ADDR
// r := 4 ;
63341: LD_ADDR_VAR 0 9
63345: PUSH
63346: LD_INT 4
63348: ST_TO_ADDR
// for i := 1 to 5 do
63349: LD_ADDR_VAR 0 10
63353: PUSH
63354: DOUBLE
63355: LD_INT 1
63357: DEC
63358: ST_TO_ADDR
63359: LD_INT 5
63361: PUSH
63362: FOR_TO
63363: IFFALSE 63522
// begin _x := ShiftX ( x , d , r + i ) ;
63365: LD_ADDR_VAR 0 5
63369: PUSH
63370: LD_VAR 0 4
63374: PPUSH
63375: LD_VAR 0 8
63379: PPUSH
63380: LD_VAR 0 9
63384: PUSH
63385: LD_VAR 0 10
63389: PLUS
63390: PPUSH
63391: CALL_OW 272
63395: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63396: LD_ADDR_VAR 0 7
63400: PUSH
63401: LD_VAR 0 6
63405: PPUSH
63406: LD_VAR 0 8
63410: PPUSH
63411: LD_VAR 0 9
63415: PUSH
63416: LD_VAR 0 10
63420: PLUS
63421: PPUSH
63422: CALL_OW 273
63426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63427: LD_VAR 0 5
63431: PPUSH
63432: LD_VAR 0 7
63436: PPUSH
63437: CALL_OW 488
63441: IFFALSE 63476
63443: PUSH
63444: LD_VAR 0 5
63448: PPUSH
63449: LD_VAR 0 7
63453: PPUSH
63454: CALL_OW 428
63458: PPUSH
63459: CALL_OW 247
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: LD_INT 2
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: IN
63474: NOT
63475: AND
63476: IFFALSE 63520
// begin ComMoveXY ( unit , _x , _y ) ;
63478: LD_VAR 0 1
63482: PPUSH
63483: LD_VAR 0 5
63487: PPUSH
63488: LD_VAR 0 7
63492: PPUSH
63493: CALL_OW 111
// result := [ _x , _y ] ;
63497: LD_ADDR_VAR 0 3
63501: PUSH
63502: LD_VAR 0 5
63506: PUSH
63507: LD_VAR 0 7
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: ST_TO_ADDR
// exit ;
63516: POP
63517: POP
63518: GO 63524
// end ; end ;
63520: GO 63362
63522: POP
63523: POP
// end ;
63524: LD_VAR 0 3
63528: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63529: LD_INT 0
63531: PPUSH
63532: PPUSH
63533: PPUSH
// result := 0 ;
63534: LD_ADDR_VAR 0 3
63538: PUSH
63539: LD_INT 0
63541: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63542: LD_VAR 0 1
63546: PUSH
63547: LD_INT 0
63549: LESS
63550: IFTRUE 63562
63552: PUSH
63553: LD_VAR 0 1
63557: PUSH
63558: LD_INT 8
63560: GREATER
63561: OR
63562: IFTRUE 63574
63564: PUSH
63565: LD_VAR 0 2
63569: PUSH
63570: LD_INT 0
63572: LESS
63573: OR
63574: IFTRUE 63586
63576: PUSH
63577: LD_VAR 0 2
63581: PUSH
63582: LD_INT 8
63584: GREATER
63585: OR
63586: IFFALSE 63590
// exit ;
63588: GO 63665
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63590: LD_ADDR_VAR 0 4
63594: PUSH
63595: LD_INT 22
63597: PUSH
63598: LD_VAR 0 2
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PPUSH
63607: CALL_OW 69
63611: PUSH
63612: FOR_IN
63613: IFFALSE 63663
// begin un := UnitShoot ( i ) ;
63615: LD_ADDR_VAR 0 5
63619: PUSH
63620: LD_VAR 0 4
63624: PPUSH
63625: CALL_OW 504
63629: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63630: LD_VAR 0 5
63634: PPUSH
63635: CALL_OW 255
63639: PUSH
63640: LD_VAR 0 1
63644: EQUAL
63645: IFFALSE 63661
// begin result := un ;
63647: LD_ADDR_VAR 0 3
63651: PUSH
63652: LD_VAR 0 5
63656: ST_TO_ADDR
// exit ;
63657: POP
63658: POP
63659: GO 63665
// end ; end ;
63661: GO 63612
63663: POP
63664: POP
// end ;
63665: LD_VAR 0 3
63669: RET
// export function GetCargoBay ( units ) ; begin
63670: LD_INT 0
63672: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63673: LD_ADDR_VAR 0 2
63677: PUSH
63678: LD_VAR 0 1
63682: PPUSH
63683: LD_INT 2
63685: PUSH
63686: LD_INT 34
63688: PUSH
63689: LD_INT 12
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 34
63698: PUSH
63699: LD_INT 51
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 34
63708: PUSH
63709: LD_INT 32
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 34
63718: PUSH
63719: LD_INT 89
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: PPUSH
63733: CALL_OW 72
63737: ST_TO_ADDR
// end ;
63738: LD_VAR 0 2
63742: RET
// export function Negate ( value ) ; begin
63743: LD_INT 0
63745: PPUSH
// result := not value ;
63746: LD_ADDR_VAR 0 2
63750: PUSH
63751: LD_VAR 0 1
63755: NOT
63756: ST_TO_ADDR
// end ;
63757: LD_VAR 0 2
63761: RET
// export function Inc ( value ) ; begin
63762: LD_INT 0
63764: PPUSH
// result := value + 1 ;
63765: LD_ADDR_VAR 0 2
63769: PUSH
63770: LD_VAR 0 1
63774: PUSH
63775: LD_INT 1
63777: PLUS
63778: ST_TO_ADDR
// end ;
63779: LD_VAR 0 2
63783: RET
// export function Dec ( value ) ; begin
63784: LD_INT 0
63786: PPUSH
// result := value - 1 ;
63787: LD_ADDR_VAR 0 2
63791: PUSH
63792: LD_VAR 0 1
63796: PUSH
63797: LD_INT 1
63799: MINUS
63800: ST_TO_ADDR
// end ;
63801: LD_VAR 0 2
63805: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63806: LD_INT 0
63808: PPUSH
63809: PPUSH
63810: PPUSH
63811: PPUSH
63812: PPUSH
63813: PPUSH
63814: PPUSH
63815: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63816: LD_VAR 0 1
63820: PPUSH
63821: LD_VAR 0 2
63825: PPUSH
63826: CALL_OW 488
63830: NOT
63831: IFTRUE 63850
63833: PUSH
63834: LD_VAR 0 3
63838: PPUSH
63839: LD_VAR 0 4
63843: PPUSH
63844: CALL_OW 488
63848: NOT
63849: OR
63850: IFFALSE 63863
// begin result := - 1 ;
63852: LD_ADDR_VAR 0 5
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: ST_TO_ADDR
// exit ;
63861: GO 64098
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63863: LD_ADDR_VAR 0 12
63867: PUSH
63868: LD_VAR 0 1
63872: PPUSH
63873: LD_VAR 0 2
63877: PPUSH
63878: LD_VAR 0 3
63882: PPUSH
63883: LD_VAR 0 4
63887: PPUSH
63888: CALL 62934 0 4
63892: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63893: LD_ADDR_VAR 0 11
63897: PUSH
63898: LD_VAR 0 1
63902: PPUSH
63903: LD_VAR 0 2
63907: PPUSH
63908: LD_VAR 0 12
63912: PUSH
63913: LD_INT 1
63915: ARRAY
63916: PPUSH
63917: LD_VAR 0 12
63921: PUSH
63922: LD_INT 2
63924: ARRAY
63925: PPUSH
63926: CALL_OW 298
63930: ST_TO_ADDR
// distance := 9999 ;
63931: LD_ADDR_VAR 0 10
63935: PUSH
63936: LD_INT 9999
63938: ST_TO_ADDR
// for i := 0 to 5 do
63939: LD_ADDR_VAR 0 6
63943: PUSH
63944: DOUBLE
63945: LD_INT 0
63947: DEC
63948: ST_TO_ADDR
63949: LD_INT 5
63951: PUSH
63952: FOR_TO
63953: IFFALSE 64096
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63955: LD_ADDR_VAR 0 7
63959: PUSH
63960: LD_VAR 0 1
63964: PPUSH
63965: LD_VAR 0 6
63969: PPUSH
63970: LD_VAR 0 11
63974: PPUSH
63975: CALL_OW 272
63979: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63980: LD_ADDR_VAR 0 8
63984: PUSH
63985: LD_VAR 0 2
63989: PPUSH
63990: LD_VAR 0 6
63994: PPUSH
63995: LD_VAR 0 11
63999: PPUSH
64000: CALL_OW 273
64004: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64005: LD_VAR 0 7
64009: PPUSH
64010: LD_VAR 0 8
64014: PPUSH
64015: CALL_OW 488
64019: NOT
64020: IFFALSE 64024
// continue ;
64022: GO 63952
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64024: LD_ADDR_VAR 0 9
64028: PUSH
64029: LD_VAR 0 12
64033: PUSH
64034: LD_INT 1
64036: ARRAY
64037: PPUSH
64038: LD_VAR 0 12
64042: PUSH
64043: LD_INT 2
64045: ARRAY
64046: PPUSH
64047: LD_VAR 0 7
64051: PPUSH
64052: LD_VAR 0 8
64056: PPUSH
64057: CALL_OW 298
64061: ST_TO_ADDR
// if tmp < distance then
64062: LD_VAR 0 9
64066: PUSH
64067: LD_VAR 0 10
64071: LESS
64072: IFFALSE 64094
// begin result := i ;
64074: LD_ADDR_VAR 0 5
64078: PUSH
64079: LD_VAR 0 6
64083: ST_TO_ADDR
// distance := tmp ;
64084: LD_ADDR_VAR 0 10
64088: PUSH
64089: LD_VAR 0 9
64093: ST_TO_ADDR
// end ; end ;
64094: GO 63952
64096: POP
64097: POP
// end ;
64098: LD_VAR 0 5
64102: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
// if not driver or not IsInUnit ( driver ) then
64107: LD_VAR 0 1
64111: NOT
64112: IFTRUE 64126
64114: PUSH
64115: LD_VAR 0 1
64119: PPUSH
64120: CALL_OW 310
64124: NOT
64125: OR
64126: IFFALSE 64130
// exit ;
64128: GO 64220
// vehicle := IsInUnit ( driver ) ;
64130: LD_ADDR_VAR 0 3
64134: PUSH
64135: LD_VAR 0 1
64139: PPUSH
64140: CALL_OW 310
64144: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_STRING \
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 0
64167: PUSH
64168: LD_INT 0
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: PUSH
64180: LD_STRING E
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_VAR 0 3
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PPUSH
64216: CALL_OW 446
// end ;
64220: LD_VAR 0 2
64224: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64225: LD_INT 0
64227: PPUSH
64228: PPUSH
// if not driver or not IsInUnit ( driver ) then
64229: LD_VAR 0 1
64233: NOT
64234: IFTRUE 64248
64236: PUSH
64237: LD_VAR 0 1
64241: PPUSH
64242: CALL_OW 310
64246: NOT
64247: OR
64248: IFFALSE 64252
// exit ;
64250: GO 64342
// vehicle := IsInUnit ( driver ) ;
64252: LD_ADDR_VAR 0 3
64256: PUSH
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 310
64266: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64267: LD_VAR 0 1
64271: PPUSH
64272: LD_STRING \
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: PUSH
64302: LD_STRING E
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_VAR 0 3
64315: PUSH
64316: LD_INT 0
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PPUSH
64338: CALL_OW 447
// end ;
64342: LD_VAR 0 2
64346: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64347: LD_INT 0
64349: PPUSH
64350: PPUSH
64351: PPUSH
// tmp := [ ] ;
64352: LD_ADDR_VAR 0 5
64356: PUSH
64357: EMPTY
64358: ST_TO_ADDR
// for i in units do
64359: LD_ADDR_VAR 0 4
64363: PUSH
64364: LD_VAR 0 1
64368: PUSH
64369: FOR_IN
64370: IFFALSE 64408
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64372: LD_ADDR_VAR 0 5
64376: PUSH
64377: LD_VAR 0 5
64381: PPUSH
64382: LD_VAR 0 5
64386: PUSH
64387: LD_INT 1
64389: PLUS
64390: PPUSH
64391: LD_VAR 0 4
64395: PPUSH
64396: CALL_OW 256
64400: PPUSH
64401: CALL_OW 2
64405: ST_TO_ADDR
64406: GO 64369
64408: POP
64409: POP
// if not tmp then
64410: LD_VAR 0 5
64414: NOT
64415: IFFALSE 64419
// exit ;
64417: GO 64467
// if asc then
64419: LD_VAR 0 2
64423: IFFALSE 64447
// result := SortListByListAsc ( units , tmp ) else
64425: LD_ADDR_VAR 0 3
64429: PUSH
64430: LD_VAR 0 1
64434: PPUSH
64435: LD_VAR 0 5
64439: PPUSH
64440: CALL_OW 76
64444: ST_TO_ADDR
64445: GO 64467
// result := SortListByListDesc ( units , tmp ) ;
64447: LD_ADDR_VAR 0 3
64451: PUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: LD_VAR 0 5
64461: PPUSH
64462: CALL_OW 77
64466: ST_TO_ADDR
// end ;
64467: LD_VAR 0 3
64471: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64472: LD_INT 0
64474: PPUSH
64475: PPUSH
// task := GetTaskList ( mech ) ;
64476: LD_ADDR_VAR 0 4
64480: PUSH
64481: LD_VAR 0 1
64485: PPUSH
64486: CALL_OW 437
64490: ST_TO_ADDR
// if not task then
64491: LD_VAR 0 4
64495: NOT
64496: IFFALSE 64500
// exit ;
64498: GO 64544
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64500: LD_ADDR_VAR 0 3
64504: PUSH
64505: LD_VAR 0 4
64509: PUSH
64510: LD_INT 1
64512: ARRAY
64513: PUSH
64514: LD_INT 1
64516: ARRAY
64517: PUSH
64518: LD_STRING r
64520: EQUAL
64521: IFFALSE 64543
64523: PUSH
64524: LD_VAR 0 4
64528: PUSH
64529: LD_INT 1
64531: ARRAY
64532: PUSH
64533: LD_INT 4
64535: ARRAY
64536: PUSH
64537: LD_VAR 0 2
64541: EQUAL
64542: AND
64543: ST_TO_ADDR
// end ;
64544: LD_VAR 0 3
64548: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64549: LD_INT 0
64551: PPUSH
// SetDir ( unit , d ) ;
64552: LD_VAR 0 1
64556: PPUSH
64557: LD_VAR 0 4
64561: PPUSH
64562: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64566: LD_ADDR_VAR 0 6
64570: PUSH
64571: LD_VAR 0 1
64575: PPUSH
64576: LD_VAR 0 2
64580: PPUSH
64581: LD_VAR 0 3
64585: PPUSH
64586: LD_VAR 0 5
64590: PPUSH
64591: CALL_OW 48
64595: ST_TO_ADDR
// end ;
64596: LD_VAR 0 6
64600: RET
// export function ToNaturalNumber ( number ) ; begin
64601: LD_INT 0
64603: PPUSH
// result := number div 1 ;
64604: LD_ADDR_VAR 0 2
64608: PUSH
64609: LD_VAR 0 1
64613: PUSH
64614: LD_INT 1
64616: DIV
64617: ST_TO_ADDR
// if number < 0 then
64618: LD_VAR 0 1
64622: PUSH
64623: LD_INT 0
64625: LESS
64626: IFFALSE 64636
// result := 0 ;
64628: LD_ADDR_VAR 0 2
64632: PUSH
64633: LD_INT 0
64635: ST_TO_ADDR
// end ;
64636: LD_VAR 0 2
64640: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64641: LD_INT 0
64643: PPUSH
64644: PPUSH
64645: PPUSH
// if not buildings then
64646: LD_VAR 0 1
64650: NOT
64651: IFFALSE 64655
// exit ;
64653: GO 64770
// tmp := [ ] ;
64655: LD_ADDR_VAR 0 5
64659: PUSH
64660: EMPTY
64661: ST_TO_ADDR
// for b in buildings do
64662: LD_ADDR_VAR 0 4
64666: PUSH
64667: LD_VAR 0 1
64671: PUSH
64672: FOR_IN
64673: IFFALSE 64711
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64675: LD_ADDR_VAR 0 5
64679: PUSH
64680: LD_VAR 0 5
64684: PPUSH
64685: LD_VAR 0 5
64689: PUSH
64690: LD_INT 1
64692: PLUS
64693: PPUSH
64694: LD_VAR 0 4
64698: PPUSH
64699: CALL_OW 266
64703: PPUSH
64704: CALL_OW 1
64708: ST_TO_ADDR
64709: GO 64672
64711: POP
64712: POP
// if not tmp then
64713: LD_VAR 0 5
64717: NOT
64718: IFFALSE 64722
// exit ;
64720: GO 64770
// if asc then
64722: LD_VAR 0 2
64726: IFFALSE 64750
// result := SortListByListAsc ( buildings , tmp ) else
64728: LD_ADDR_VAR 0 3
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: LD_VAR 0 5
64742: PPUSH
64743: CALL_OW 76
64747: ST_TO_ADDR
64748: GO 64770
// result := SortListByListDesc ( buildings , tmp ) ;
64750: LD_ADDR_VAR 0 3
64754: PUSH
64755: LD_VAR 0 1
64759: PPUSH
64760: LD_VAR 0 5
64764: PPUSH
64765: CALL_OW 77
64769: ST_TO_ADDR
// end ;
64770: LD_VAR 0 3
64774: RET
// export function SortByClass ( units , class ) ; var un ; begin
64775: LD_INT 0
64777: PPUSH
64778: PPUSH
// if not units or not class then
64779: LD_VAR 0 1
64783: NOT
64784: IFTRUE 64793
64786: PUSH
64787: LD_VAR 0 2
64791: NOT
64792: OR
64793: IFFALSE 64797
// exit ;
64795: GO 64892
// result := [ ] ;
64797: LD_ADDR_VAR 0 3
64801: PUSH
64802: EMPTY
64803: ST_TO_ADDR
// for un in units do
64804: LD_ADDR_VAR 0 4
64808: PUSH
64809: LD_VAR 0 1
64813: PUSH
64814: FOR_IN
64815: IFFALSE 64890
// if GetClass ( un ) = class then
64817: LD_VAR 0 4
64821: PPUSH
64822: CALL_OW 257
64826: PUSH
64827: LD_VAR 0 2
64831: EQUAL
64832: IFFALSE 64859
// result := Insert ( result , 1 , un ) else
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: LD_VAR 0 3
64843: PPUSH
64844: LD_INT 1
64846: PPUSH
64847: LD_VAR 0 4
64851: PPUSH
64852: CALL_OW 2
64856: ST_TO_ADDR
64857: GO 64888
// result := Replace ( result , result + 1 , un ) ;
64859: LD_ADDR_VAR 0 3
64863: PUSH
64864: LD_VAR 0 3
64868: PPUSH
64869: LD_VAR 0 3
64873: PUSH
64874: LD_INT 1
64876: PLUS
64877: PPUSH
64878: LD_VAR 0 4
64882: PPUSH
64883: CALL_OW 1
64887: ST_TO_ADDR
64888: GO 64814
64890: POP
64891: POP
// end ;
64892: LD_VAR 0 3
64896: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64897: LD_INT 0
64899: PPUSH
64900: PPUSH
64901: PPUSH
64902: PPUSH
64903: PPUSH
64904: PPUSH
64905: PPUSH
// result := [ ] ;
64906: LD_ADDR_VAR 0 4
64910: PUSH
64911: EMPTY
64912: ST_TO_ADDR
// if x - r < 0 then
64913: LD_VAR 0 1
64917: PUSH
64918: LD_VAR 0 3
64922: MINUS
64923: PUSH
64924: LD_INT 0
64926: LESS
64927: IFFALSE 64939
// min_x := 0 else
64929: LD_ADDR_VAR 0 8
64933: PUSH
64934: LD_INT 0
64936: ST_TO_ADDR
64937: GO 64955
// min_x := x - r ;
64939: LD_ADDR_VAR 0 8
64943: PUSH
64944: LD_VAR 0 1
64948: PUSH
64949: LD_VAR 0 3
64953: MINUS
64954: ST_TO_ADDR
// if y - r < 0 then
64955: LD_VAR 0 2
64959: PUSH
64960: LD_VAR 0 3
64964: MINUS
64965: PUSH
64966: LD_INT 0
64968: LESS
64969: IFFALSE 64981
// min_y := 0 else
64971: LD_ADDR_VAR 0 7
64975: PUSH
64976: LD_INT 0
64978: ST_TO_ADDR
64979: GO 64997
// min_y := y - r ;
64981: LD_ADDR_VAR 0 7
64985: PUSH
64986: LD_VAR 0 2
64990: PUSH
64991: LD_VAR 0 3
64995: MINUS
64996: ST_TO_ADDR
// max_x := x + r ;
64997: LD_ADDR_VAR 0 9
65001: PUSH
65002: LD_VAR 0 1
65006: PUSH
65007: LD_VAR 0 3
65011: PLUS
65012: ST_TO_ADDR
// max_y := y + r ;
65013: LD_ADDR_VAR 0 10
65017: PUSH
65018: LD_VAR 0 2
65022: PUSH
65023: LD_VAR 0 3
65027: PLUS
65028: ST_TO_ADDR
// for _x = min_x to max_x do
65029: LD_ADDR_VAR 0 5
65033: PUSH
65034: DOUBLE
65035: LD_VAR 0 8
65039: DEC
65040: ST_TO_ADDR
65041: LD_VAR 0 9
65045: PUSH
65046: FOR_TO
65047: IFFALSE 65148
// for _y = min_y to max_y do
65049: LD_ADDR_VAR 0 6
65053: PUSH
65054: DOUBLE
65055: LD_VAR 0 7
65059: DEC
65060: ST_TO_ADDR
65061: LD_VAR 0 10
65065: PUSH
65066: FOR_TO
65067: IFFALSE 65144
// begin if not ValidHex ( _x , _y ) then
65069: LD_VAR 0 5
65073: PPUSH
65074: LD_VAR 0 6
65078: PPUSH
65079: CALL_OW 488
65083: NOT
65084: IFFALSE 65088
// continue ;
65086: GO 65066
// if GetResourceTypeXY ( _x , _y ) then
65088: LD_VAR 0 5
65092: PPUSH
65093: LD_VAR 0 6
65097: PPUSH
65098: CALL_OW 283
65102: IFFALSE 65142
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65104: LD_ADDR_VAR 0 4
65108: PUSH
65109: LD_VAR 0 4
65113: PPUSH
65114: LD_VAR 0 4
65118: PUSH
65119: LD_INT 1
65121: PLUS
65122: PPUSH
65123: LD_VAR 0 5
65127: PUSH
65128: LD_VAR 0 6
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PPUSH
65137: CALL_OW 1
65141: ST_TO_ADDR
// end ;
65142: GO 65066
65144: POP
65145: POP
65146: GO 65046
65148: POP
65149: POP
// end ;
65150: LD_VAR 0 4
65154: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65155: LD_INT 0
65157: PPUSH
65158: PPUSH
65159: PPUSH
65160: PPUSH
65161: PPUSH
65162: PPUSH
65163: PPUSH
65164: PPUSH
// if not units then
65165: LD_VAR 0 1
65169: NOT
65170: IFFALSE 65174
// exit ;
65172: GO 65706
// result := UnitFilter ( units , [ f_ok ] ) ;
65174: LD_ADDR_VAR 0 3
65178: PUSH
65179: LD_VAR 0 1
65183: PPUSH
65184: LD_INT 50
65186: PUSH
65187: EMPTY
65188: LIST
65189: PPUSH
65190: CALL_OW 72
65194: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65195: LD_ADDR_VAR 0 8
65199: PUSH
65200: LD_VAR 0 1
65204: PUSH
65205: LD_INT 1
65207: ARRAY
65208: PPUSH
65209: CALL_OW 255
65213: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65214: LD_ADDR_VAR 0 10
65218: PUSH
65219: LD_INT 29
65221: PUSH
65222: LD_INT 91
65224: PUSH
65225: LD_INT 49
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// if not result then
65233: LD_VAR 0 3
65237: NOT
65238: IFFALSE 65242
// exit ;
65240: GO 65706
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65242: LD_ADDR_VAR 0 5
65246: PUSH
65247: LD_INT 81
65249: PUSH
65250: LD_VAR 0 8
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PPUSH
65259: CALL_OW 69
65263: ST_TO_ADDR
// for i in result do
65264: LD_ADDR_VAR 0 4
65268: PUSH
65269: LD_VAR 0 3
65273: PUSH
65274: FOR_IN
65275: IFFALSE 65704
// begin tag := GetTag ( i ) + 1 ;
65277: LD_ADDR_VAR 0 9
65281: PUSH
65282: LD_VAR 0 4
65286: PPUSH
65287: CALL_OW 110
65291: PUSH
65292: LD_INT 1
65294: PLUS
65295: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65296: LD_ADDR_VAR 0 7
65300: PUSH
65301: LD_VAR 0 4
65305: PPUSH
65306: CALL_OW 250
65310: PPUSH
65311: LD_VAR 0 4
65315: PPUSH
65316: CALL_OW 251
65320: PPUSH
65321: LD_INT 4
65323: PPUSH
65324: CALL 64897 0 3
65328: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65329: LD_VAR 0 4
65333: PPUSH
65334: CALL_OW 247
65338: PUSH
65339: LD_INT 2
65341: EQUAL
65342: IFFALSE 65354
65344: PUSH
65345: LD_VAR 0 7
65349: PUSH
65350: LD_INT 2
65352: GREATER
65353: AND
65354: IFFALSE 65374
65356: PUSH
65357: LD_VAR 0 4
65361: PPUSH
65362: CALL_OW 264
65366: PUSH
65367: LD_VAR 0 10
65371: IN
65372: NOT
65373: AND
65374: IFFALSE 65413
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65376: LD_VAR 0 4
65380: PPUSH
65381: LD_VAR 0 7
65385: PUSH
65386: LD_INT 1
65388: ARRAY
65389: PUSH
65390: LD_INT 1
65392: ARRAY
65393: PPUSH
65394: LD_VAR 0 7
65398: PUSH
65399: LD_INT 1
65401: ARRAY
65402: PUSH
65403: LD_INT 2
65405: ARRAY
65406: PPUSH
65407: CALL_OW 116
65411: GO 65702
// if path > tag then
65413: LD_VAR 0 2
65417: PUSH
65418: LD_VAR 0 9
65422: GREATER
65423: IFFALSE 65631
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65425: LD_ADDR_VAR 0 6
65429: PUSH
65430: LD_VAR 0 5
65434: PPUSH
65435: LD_INT 91
65437: PUSH
65438: LD_VAR 0 4
65442: PUSH
65443: LD_INT 8
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: LIST
65450: PPUSH
65451: CALL_OW 72
65455: ST_TO_ADDR
// if nearEnemy then
65456: LD_VAR 0 6
65460: IFFALSE 65529
// begin if GetWeapon ( i ) = ru_time_lapser then
65462: LD_VAR 0 4
65466: PPUSH
65467: CALL_OW 264
65471: PUSH
65472: LD_INT 49
65474: EQUAL
65475: IFFALSE 65503
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65477: LD_VAR 0 4
65481: PPUSH
65482: LD_VAR 0 6
65486: PPUSH
65487: LD_VAR 0 4
65491: PPUSH
65492: CALL_OW 74
65496: PPUSH
65497: CALL_OW 112
65501: GO 65527
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65503: LD_VAR 0 4
65507: PPUSH
65508: LD_VAR 0 6
65512: PPUSH
65513: LD_VAR 0 4
65517: PPUSH
65518: CALL_OW 74
65522: PPUSH
65523: CALL 66787 0 2
// end else
65527: GO 65629
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65529: LD_VAR 0 4
65533: PPUSH
65534: LD_VAR 0 2
65538: PUSH
65539: LD_VAR 0 9
65543: ARRAY
65544: PUSH
65545: LD_INT 1
65547: ARRAY
65548: PPUSH
65549: LD_VAR 0 2
65553: PUSH
65554: LD_VAR 0 9
65558: ARRAY
65559: PUSH
65560: LD_INT 2
65562: ARRAY
65563: PPUSH
65564: CALL_OW 297
65568: PUSH
65569: LD_INT 6
65571: GREATER
65572: IFFALSE 65615
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65574: LD_VAR 0 4
65578: PPUSH
65579: LD_VAR 0 2
65583: PUSH
65584: LD_VAR 0 9
65588: ARRAY
65589: PUSH
65590: LD_INT 1
65592: ARRAY
65593: PPUSH
65594: LD_VAR 0 2
65598: PUSH
65599: LD_VAR 0 9
65603: ARRAY
65604: PUSH
65605: LD_INT 2
65607: ARRAY
65608: PPUSH
65609: CALL_OW 114
65613: GO 65629
// SetTag ( i , tag ) ;
65615: LD_VAR 0 4
65619: PPUSH
65620: LD_VAR 0 9
65624: PPUSH
65625: CALL_OW 109
// end else
65629: GO 65702
// if enemy then
65631: LD_VAR 0 5
65635: IFFALSE 65702
// begin if GetWeapon ( i ) = ru_time_lapser then
65637: LD_VAR 0 4
65641: PPUSH
65642: CALL_OW 264
65646: PUSH
65647: LD_INT 49
65649: EQUAL
65650: IFFALSE 65678
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65652: LD_VAR 0 4
65656: PPUSH
65657: LD_VAR 0 5
65661: PPUSH
65662: LD_VAR 0 4
65666: PPUSH
65667: CALL_OW 74
65671: PPUSH
65672: CALL_OW 112
65676: GO 65702
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65678: LD_VAR 0 4
65682: PPUSH
65683: LD_VAR 0 5
65687: PPUSH
65688: LD_VAR 0 4
65692: PPUSH
65693: CALL_OW 74
65697: PPUSH
65698: CALL 66787 0 2
// end ; end ;
65702: GO 65274
65704: POP
65705: POP
// end ;
65706: LD_VAR 0 3
65710: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65711: LD_INT 0
65713: PPUSH
65714: PPUSH
65715: PPUSH
// if not unit or IsInUnit ( unit ) then
65716: LD_VAR 0 1
65720: NOT
65721: IFTRUE 65734
65723: PUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 310
65733: OR
65734: IFFALSE 65738
// exit ;
65736: GO 65829
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65738: LD_ADDR_VAR 0 4
65742: PUSH
65743: LD_VAR 0 1
65747: PPUSH
65748: CALL_OW 250
65752: PPUSH
65753: LD_VAR 0 2
65757: PPUSH
65758: LD_INT 1
65760: PPUSH
65761: CALL_OW 272
65765: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65766: LD_ADDR_VAR 0 5
65770: PUSH
65771: LD_VAR 0 1
65775: PPUSH
65776: CALL_OW 251
65780: PPUSH
65781: LD_VAR 0 2
65785: PPUSH
65786: LD_INT 1
65788: PPUSH
65789: CALL_OW 273
65793: ST_TO_ADDR
// if ValidHex ( x , y ) then
65794: LD_VAR 0 4
65798: PPUSH
65799: LD_VAR 0 5
65803: PPUSH
65804: CALL_OW 488
65808: IFFALSE 65829
// ComTurnXY ( unit , x , y ) ;
65810: LD_VAR 0 1
65814: PPUSH
65815: LD_VAR 0 4
65819: PPUSH
65820: LD_VAR 0 5
65824: PPUSH
65825: CALL_OW 118
// end ;
65829: LD_VAR 0 3
65833: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65834: LD_INT 0
65836: PPUSH
65837: PPUSH
// result := false ;
65838: LD_ADDR_VAR 0 3
65842: PUSH
65843: LD_INT 0
65845: ST_TO_ADDR
// if not units then
65846: LD_VAR 0 2
65850: NOT
65851: IFFALSE 65855
// exit ;
65853: GO 65900
// for i in units do
65855: LD_ADDR_VAR 0 4
65859: PUSH
65860: LD_VAR 0 2
65864: PUSH
65865: FOR_IN
65866: IFFALSE 65898
// if See ( side , i ) then
65868: LD_VAR 0 1
65872: PPUSH
65873: LD_VAR 0 4
65877: PPUSH
65878: CALL_OW 292
65882: IFFALSE 65896
// begin result := true ;
65884: LD_ADDR_VAR 0 3
65888: PUSH
65889: LD_INT 1
65891: ST_TO_ADDR
// exit ;
65892: POP
65893: POP
65894: GO 65900
// end ;
65896: GO 65865
65898: POP
65899: POP
// end ;
65900: LD_VAR 0 3
65904: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65905: LD_INT 0
65907: PPUSH
65908: PPUSH
65909: PPUSH
65910: PPUSH
// if not unit or not points then
65911: LD_VAR 0 1
65915: NOT
65916: IFTRUE 65925
65918: PUSH
65919: LD_VAR 0 2
65923: NOT
65924: OR
65925: IFFALSE 65929
// exit ;
65927: GO 66019
// dist := 99999 ;
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: LD_INT 99999
65936: ST_TO_ADDR
// for i in points do
65937: LD_ADDR_VAR 0 4
65941: PUSH
65942: LD_VAR 0 2
65946: PUSH
65947: FOR_IN
65948: IFFALSE 66017
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65950: LD_ADDR_VAR 0 6
65954: PUSH
65955: LD_VAR 0 1
65959: PPUSH
65960: LD_VAR 0 4
65964: PUSH
65965: LD_INT 1
65967: ARRAY
65968: PPUSH
65969: LD_VAR 0 4
65973: PUSH
65974: LD_INT 2
65976: ARRAY
65977: PPUSH
65978: CALL_OW 297
65982: ST_TO_ADDR
// if tmpDist < dist then
65983: LD_VAR 0 6
65987: PUSH
65988: LD_VAR 0 5
65992: LESS
65993: IFFALSE 66015
// begin result := i ;
65995: LD_ADDR_VAR 0 3
65999: PUSH
66000: LD_VAR 0 4
66004: ST_TO_ADDR
// dist := tmpDist ;
66005: LD_ADDR_VAR 0 5
66009: PUSH
66010: LD_VAR 0 6
66014: ST_TO_ADDR
// end ; end ;
66015: GO 65947
66017: POP
66018: POP
// end ;
66019: LD_VAR 0 3
66023: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66024: LD_INT 0
66026: PPUSH
// uc_side := side ;
66027: LD_ADDR_OWVAR 20
66031: PUSH
66032: LD_VAR 0 1
66036: ST_TO_ADDR
// uc_nation := 3 ;
66037: LD_ADDR_OWVAR 21
66041: PUSH
66042: LD_INT 3
66044: ST_TO_ADDR
// vc_chassis := 25 ;
66045: LD_ADDR_OWVAR 37
66049: PUSH
66050: LD_INT 25
66052: ST_TO_ADDR
// vc_engine := engine_siberite ;
66053: LD_ADDR_OWVAR 39
66057: PUSH
66058: LD_INT 3
66060: ST_TO_ADDR
// vc_control := control_computer ;
66061: LD_ADDR_OWVAR 38
66065: PUSH
66066: LD_INT 3
66068: ST_TO_ADDR
// vc_weapon := 59 ;
66069: LD_ADDR_OWVAR 40
66073: PUSH
66074: LD_INT 59
66076: ST_TO_ADDR
// result := CreateVehicle ;
66077: LD_ADDR_VAR 0 5
66081: PUSH
66082: CALL_OW 45
66086: ST_TO_ADDR
// SetDir ( result , d ) ;
66087: LD_VAR 0 5
66091: PPUSH
66092: LD_VAR 0 4
66096: PPUSH
66097: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66101: LD_VAR 0 5
66105: PPUSH
66106: LD_VAR 0 2
66110: PPUSH
66111: LD_VAR 0 3
66115: PPUSH
66116: LD_INT 0
66118: PPUSH
66119: CALL_OW 48
// end ;
66123: LD_VAR 0 5
66127: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66128: LD_INT 0
66130: PPUSH
66131: PPUSH
66132: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66133: LD_ADDR_VAR 0 2
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: LD_INT 0
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66156: LD_VAR 0 1
66160: NOT
66161: IFTRUE 66194
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 264
66173: PUSH
66174: LD_INT 12
66176: PUSH
66177: LD_INT 51
66179: PUSH
66180: LD_INT 32
66182: PUSH
66183: LD_INT 89
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: IN
66192: NOT
66193: OR
66194: IFFALSE 66198
// exit ;
66196: GO 66296
// for i := 1 to 3 do
66198: LD_ADDR_VAR 0 3
66202: PUSH
66203: DOUBLE
66204: LD_INT 1
66206: DEC
66207: ST_TO_ADDR
66208: LD_INT 3
66210: PUSH
66211: FOR_TO
66212: IFFALSE 66294
// begin tmp := GetCargo ( cargo , i ) ;
66214: LD_ADDR_VAR 0 4
66218: PUSH
66219: LD_VAR 0 1
66223: PPUSH
66224: LD_VAR 0 3
66228: PPUSH
66229: CALL_OW 289
66233: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66234: LD_ADDR_VAR 0 2
66238: PUSH
66239: LD_VAR 0 2
66243: PPUSH
66244: LD_VAR 0 3
66248: PPUSH
66249: LD_VAR 0 4
66253: PPUSH
66254: CALL_OW 1
66258: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66259: LD_ADDR_VAR 0 2
66263: PUSH
66264: LD_VAR 0 2
66268: PPUSH
66269: LD_INT 4
66271: PPUSH
66272: LD_VAR 0 2
66276: PUSH
66277: LD_INT 4
66279: ARRAY
66280: PUSH
66281: LD_VAR 0 4
66285: PLUS
66286: PPUSH
66287: CALL_OW 1
66291: ST_TO_ADDR
// end ;
66292: GO 66211
66294: POP
66295: POP
// end ;
66296: LD_VAR 0 2
66300: RET
// export function Length ( array ) ; begin
66301: LD_INT 0
66303: PPUSH
// result := array + 0 ;
66304: LD_ADDR_VAR 0 2
66308: PUSH
66309: LD_VAR 0 1
66313: PUSH
66314: LD_INT 0
66316: PLUS
66317: ST_TO_ADDR
// end ;
66318: LD_VAR 0 2
66322: RET
// export function PrepareArray ( array ) ; begin
66323: LD_INT 0
66325: PPUSH
// result := array diff 0 ;
66326: LD_ADDR_VAR 0 2
66330: PUSH
66331: LD_VAR 0 1
66335: PUSH
66336: LD_INT 0
66338: DIFF
66339: ST_TO_ADDR
// if not result [ 1 ] then
66340: LD_VAR 0 2
66344: PUSH
66345: LD_INT 1
66347: ARRAY
66348: NOT
66349: IFFALSE 66369
// result := Delete ( result , 1 ) ;
66351: LD_ADDR_VAR 0 2
66355: PUSH
66356: LD_VAR 0 2
66360: PPUSH
66361: LD_INT 1
66363: PPUSH
66364: CALL_OW 3
66368: ST_TO_ADDR
// end ;
66369: LD_VAR 0 2
66373: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66374: LD_INT 0
66376: PPUSH
66377: PPUSH
66378: PPUSH
66379: PPUSH
// sibRocketRange := 25 ;
66380: LD_ADDR_VAR 0 6
66384: PUSH
66385: LD_INT 25
66387: ST_TO_ADDR
// result := false ;
66388: LD_ADDR_VAR 0 4
66392: PUSH
66393: LD_INT 0
66395: ST_TO_ADDR
// for i := 0 to 5 do
66396: LD_ADDR_VAR 0 5
66400: PUSH
66401: DOUBLE
66402: LD_INT 0
66404: DEC
66405: ST_TO_ADDR
66406: LD_INT 5
66408: PUSH
66409: FOR_TO
66410: IFFALSE 66477
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66412: LD_VAR 0 1
66416: PPUSH
66417: LD_VAR 0 5
66421: PPUSH
66422: LD_VAR 0 6
66426: PPUSH
66427: CALL_OW 272
66431: PPUSH
66432: LD_VAR 0 2
66436: PPUSH
66437: LD_VAR 0 5
66441: PPUSH
66442: LD_VAR 0 6
66446: PPUSH
66447: CALL_OW 273
66451: PPUSH
66452: LD_VAR 0 3
66456: PPUSH
66457: CALL_OW 309
66461: IFFALSE 66475
// begin result := true ;
66463: LD_ADDR_VAR 0 4
66467: PUSH
66468: LD_INT 1
66470: ST_TO_ADDR
// exit ;
66471: POP
66472: POP
66473: GO 66479
// end ;
66475: GO 66409
66477: POP
66478: POP
// end ;
66479: LD_VAR 0 4
66483: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66484: LD_INT 0
66486: PPUSH
66487: PPUSH
66488: PPUSH
// if btype = b_depot then
66489: LD_VAR 0 2
66493: PUSH
66494: LD_INT 0
66496: EQUAL
66497: IFFALSE 66509
// begin result := true ;
66499: LD_ADDR_VAR 0 3
66503: PUSH
66504: LD_INT 1
66506: ST_TO_ADDR
// exit ;
66507: GO 66629
// end ; pom := GetBase ( depot ) ;
66509: LD_ADDR_VAR 0 4
66513: PUSH
66514: LD_VAR 0 1
66518: PPUSH
66519: CALL_OW 274
66523: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66524: LD_ADDR_VAR 0 5
66528: PUSH
66529: LD_VAR 0 2
66533: PPUSH
66534: LD_VAR 0 1
66538: PPUSH
66539: CALL_OW 248
66543: PPUSH
66544: CALL_OW 450
66548: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66549: LD_ADDR_VAR 0 3
66553: PUSH
66554: LD_VAR 0 4
66558: PPUSH
66559: LD_INT 1
66561: PPUSH
66562: CALL_OW 275
66566: PUSH
66567: LD_VAR 0 5
66571: PUSH
66572: LD_INT 1
66574: ARRAY
66575: GREATEREQUAL
66576: IFFALSE 66602
66578: PUSH
66579: LD_VAR 0 4
66583: PPUSH
66584: LD_INT 2
66586: PPUSH
66587: CALL_OW 275
66591: PUSH
66592: LD_VAR 0 5
66596: PUSH
66597: LD_INT 2
66599: ARRAY
66600: GREATEREQUAL
66601: AND
66602: IFFALSE 66628
66604: PUSH
66605: LD_VAR 0 4
66609: PPUSH
66610: LD_INT 3
66612: PPUSH
66613: CALL_OW 275
66617: PUSH
66618: LD_VAR 0 5
66622: PUSH
66623: LD_INT 3
66625: ARRAY
66626: GREATEREQUAL
66627: AND
66628: ST_TO_ADDR
// end ;
66629: LD_VAR 0 3
66633: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66634: LD_INT 0
66636: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66637: LD_VAR 0 1
66641: PPUSH
66642: LD_VAR 0 2
66646: PPUSH
66647: LD_INT 0
66649: PPUSH
66650: LD_INT 0
66652: PPUSH
66653: LD_INT 1
66655: PPUSH
66656: LD_INT 0
66658: PPUSH
66659: CALL_OW 587
// end ;
66663: LD_VAR 0 3
66667: RET
// export function CenterOnNow ( unit ) ; begin
66668: LD_INT 0
66670: PPUSH
// result := IsInUnit ( unit ) ;
66671: LD_ADDR_VAR 0 2
66675: PUSH
66676: LD_VAR 0 1
66680: PPUSH
66681: CALL_OW 310
66685: ST_TO_ADDR
// if not result then
66686: LD_VAR 0 2
66690: NOT
66691: IFFALSE 66703
// result := unit ;
66693: LD_ADDR_VAR 0 2
66697: PUSH
66698: LD_VAR 0 1
66702: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66703: LD_VAR 0 1
66707: PPUSH
66708: CALL_OW 87
// end ;
66712: LD_VAR 0 2
66716: RET
// export function ComMoveHex ( unit , hex ) ; begin
66717: LD_INT 0
66719: PPUSH
// if not hex then
66720: LD_VAR 0 2
66724: NOT
66725: IFFALSE 66729
// exit ;
66727: GO 66782
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66729: LD_VAR 0 2
66733: PUSH
66734: LD_INT 1
66736: ARRAY
66737: PPUSH
66738: LD_VAR 0 2
66742: PUSH
66743: LD_INT 2
66745: ARRAY
66746: PPUSH
66747: CALL_OW 428
66751: IFFALSE 66755
// exit ;
66753: GO 66782
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66755: LD_VAR 0 1
66759: PPUSH
66760: LD_VAR 0 2
66764: PUSH
66765: LD_INT 1
66767: ARRAY
66768: PPUSH
66769: LD_VAR 0 2
66773: PUSH
66774: LD_INT 2
66776: ARRAY
66777: PPUSH
66778: CALL_OW 111
// end ;
66782: LD_VAR 0 3
66786: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66787: LD_INT 0
66789: PPUSH
66790: PPUSH
66791: PPUSH
// if not unit or not enemy then
66792: LD_VAR 0 1
66796: NOT
66797: IFTRUE 66806
66799: PUSH
66800: LD_VAR 0 2
66804: NOT
66805: OR
66806: IFFALSE 66810
// exit ;
66808: GO 66936
// x := GetX ( enemy ) ;
66810: LD_ADDR_VAR 0 4
66814: PUSH
66815: LD_VAR 0 2
66819: PPUSH
66820: CALL_OW 250
66824: ST_TO_ADDR
// y := GetY ( enemy ) ;
66825: LD_ADDR_VAR 0 5
66829: PUSH
66830: LD_VAR 0 2
66834: PPUSH
66835: CALL_OW 251
66839: ST_TO_ADDR
// if ValidHex ( x , y ) then
66840: LD_VAR 0 4
66844: PPUSH
66845: LD_VAR 0 5
66849: PPUSH
66850: CALL_OW 488
66854: IFFALSE 66936
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66856: LD_VAR 0 2
66860: PPUSH
66861: CALL_OW 247
66865: PUSH
66866: LD_INT 3
66868: PUSH
66869: LD_INT 2
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: IN
66876: IFTRUE 66899
66878: PUSH
66879: LD_VAR 0 1
66883: PPUSH
66884: CALL_OW 255
66888: PPUSH
66889: LD_VAR 0 2
66893: PPUSH
66894: CALL_OW 292
66898: OR
66899: IFFALSE 66917
// ComAttackUnit ( unit , enemy ) else
66901: LD_VAR 0 1
66905: PPUSH
66906: LD_VAR 0 2
66910: PPUSH
66911: CALL_OW 115
66915: GO 66936
// ComAgressiveMove ( unit , x , y ) ;
66917: LD_VAR 0 1
66921: PPUSH
66922: LD_VAR 0 4
66926: PPUSH
66927: LD_VAR 0 5
66931: PPUSH
66932: CALL_OW 114
// end ;
66936: LD_VAR 0 3
66940: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66941: LD_INT 0
66943: PPUSH
66944: PPUSH
66945: PPUSH
// list := AreaToList ( area , 0 ) ;
66946: LD_ADDR_VAR 0 5
66950: PUSH
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_INT 0
66958: PPUSH
66959: CALL_OW 517
66963: ST_TO_ADDR
// if not list then
66964: LD_VAR 0 5
66968: NOT
66969: IFFALSE 66973
// exit ;
66971: GO 67103
// if all then
66973: LD_VAR 0 2
66977: IFFALSE 67065
// begin for i := 1 to list [ 1 ] do
66979: LD_ADDR_VAR 0 4
66983: PUSH
66984: DOUBLE
66985: LD_INT 1
66987: DEC
66988: ST_TO_ADDR
66989: LD_VAR 0 5
66993: PUSH
66994: LD_INT 1
66996: ARRAY
66997: PUSH
66998: FOR_TO
66999: IFFALSE 67061
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67001: LD_ADDR_VAR 0 3
67005: PUSH
67006: LD_VAR 0 3
67010: PPUSH
67011: LD_VAR 0 3
67015: PUSH
67016: LD_INT 1
67018: PLUS
67019: PPUSH
67020: LD_VAR 0 5
67024: PUSH
67025: LD_INT 1
67027: ARRAY
67028: PUSH
67029: LD_VAR 0 4
67033: ARRAY
67034: PUSH
67035: LD_VAR 0 5
67039: PUSH
67040: LD_INT 2
67042: ARRAY
67043: PUSH
67044: LD_VAR 0 4
67048: ARRAY
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PPUSH
67054: CALL_OW 1
67058: ST_TO_ADDR
67059: GO 66998
67061: POP
67062: POP
// exit ;
67063: GO 67103
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67065: LD_ADDR_VAR 0 3
67069: PUSH
67070: LD_VAR 0 5
67074: PUSH
67075: LD_INT 1
67077: ARRAY
67078: PUSH
67079: LD_INT 1
67081: ARRAY
67082: PUSH
67083: LD_VAR 0 5
67087: PUSH
67088: LD_INT 2
67090: ARRAY
67091: PUSH
67092: LD_INT 1
67094: ARRAY
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: ST_TO_ADDR
// end ;
67103: LD_VAR 0 3
67107: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67108: LD_INT 0
67110: PPUSH
67111: PPUSH
// list := AreaToList ( area , 0 ) ;
67112: LD_ADDR_VAR 0 4
67116: PUSH
67117: LD_VAR 0 1
67121: PPUSH
67122: LD_INT 0
67124: PPUSH
67125: CALL_OW 517
67129: ST_TO_ADDR
// if not list then
67130: LD_VAR 0 4
67134: NOT
67135: IFFALSE 67139
// exit ;
67137: GO 67180
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67139: LD_ADDR_VAR 0 3
67143: PUSH
67144: LD_VAR 0 4
67148: PUSH
67149: LD_INT 1
67151: ARRAY
67152: PUSH
67153: LD_INT 1
67155: ARRAY
67156: PUSH
67157: LD_VAR 0 4
67161: PUSH
67162: LD_INT 2
67164: ARRAY
67165: PUSH
67166: LD_INT 1
67168: ARRAY
67169: PUSH
67170: LD_VAR 0 2
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: LIST
67179: ST_TO_ADDR
// end ;
67180: LD_VAR 0 3
67184: RET
// export function First ( array ) ; begin
67185: LD_INT 0
67187: PPUSH
// if not array then
67188: LD_VAR 0 1
67192: NOT
67193: IFFALSE 67197
// exit ;
67195: GO 67211
// result := array [ 1 ] ;
67197: LD_ADDR_VAR 0 2
67201: PUSH
67202: LD_VAR 0 1
67206: PUSH
67207: LD_INT 1
67209: ARRAY
67210: ST_TO_ADDR
// end ;
67211: LD_VAR 0 2
67215: RET
// export function Last ( array ) ; begin
67216: LD_INT 0
67218: PPUSH
// if not array then
67219: LD_VAR 0 1
67223: NOT
67224: IFFALSE 67228
// exit ;
67226: GO 67244
// result := array [ array ] ;
67228: LD_ADDR_VAR 0 2
67232: PUSH
67233: LD_VAR 0 1
67237: PUSH
67238: LD_VAR 0 1
67242: ARRAY
67243: ST_TO_ADDR
// end ;
67244: LD_VAR 0 2
67248: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67249: LD_INT 0
67251: PPUSH
67252: PPUSH
// result := [ ] ;
67253: LD_ADDR_VAR 0 5
67257: PUSH
67258: EMPTY
67259: ST_TO_ADDR
// if not array then
67260: LD_VAR 0 1
67264: NOT
67265: IFFALSE 67269
// exit ;
67267: GO 67381
// for i := 1 to array do
67269: LD_ADDR_VAR 0 6
67273: PUSH
67274: DOUBLE
67275: LD_INT 1
67277: DEC
67278: ST_TO_ADDR
67279: LD_VAR 0 1
67283: PUSH
67284: FOR_TO
67285: IFFALSE 67379
// if array [ i ] [ index ] = value then
67287: LD_VAR 0 1
67291: PUSH
67292: LD_VAR 0 6
67296: ARRAY
67297: PUSH
67298: LD_VAR 0 2
67302: ARRAY
67303: PUSH
67304: LD_VAR 0 3
67308: EQUAL
67309: IFFALSE 67377
// begin if indexColumn then
67311: LD_VAR 0 4
67315: IFFALSE 67351
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67317: LD_ADDR_VAR 0 5
67321: PUSH
67322: LD_VAR 0 5
67326: PPUSH
67327: LD_VAR 0 1
67331: PUSH
67332: LD_VAR 0 6
67336: ARRAY
67337: PUSH
67338: LD_VAR 0 4
67342: ARRAY
67343: PPUSH
67344: CALL 62389 0 2
67348: ST_TO_ADDR
67349: GO 67377
// result := Join ( result , array [ i ] ) ;
67351: LD_ADDR_VAR 0 5
67355: PUSH
67356: LD_VAR 0 5
67360: PPUSH
67361: LD_VAR 0 1
67365: PUSH
67366: LD_VAR 0 6
67370: ARRAY
67371: PPUSH
67372: CALL 62389 0 2
67376: ST_TO_ADDR
// end ;
67377: GO 67284
67379: POP
67380: POP
// end ;
67381: LD_VAR 0 5
67385: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67386: LD_INT 0
67388: PPUSH
// if not vehicles or not parkingPoint then
67389: LD_VAR 0 1
67393: NOT
67394: IFTRUE 67403
67396: PUSH
67397: LD_VAR 0 2
67401: NOT
67402: OR
67403: IFFALSE 67407
// exit ;
67405: GO 67505
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67407: LD_ADDR_VAR 0 1
67411: PUSH
67412: LD_VAR 0 1
67416: PPUSH
67417: LD_INT 50
67419: PUSH
67420: EMPTY
67421: LIST
67422: PUSH
67423: LD_INT 3
67425: PUSH
67426: LD_INT 92
67428: PUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_INT 1
67436: ARRAY
67437: PUSH
67438: LD_VAR 0 2
67442: PUSH
67443: LD_INT 2
67445: ARRAY
67446: PUSH
67447: LD_INT 8
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PPUSH
67464: CALL_OW 72
67468: ST_TO_ADDR
// if not vehicles then
67469: LD_VAR 0 1
67473: NOT
67474: IFFALSE 67478
// exit ;
67476: GO 67505
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67478: LD_VAR 0 1
67482: PPUSH
67483: LD_VAR 0 2
67487: PUSH
67488: LD_INT 1
67490: ARRAY
67491: PPUSH
67492: LD_VAR 0 2
67496: PUSH
67497: LD_INT 2
67499: ARRAY
67500: PPUSH
67501: CALL_OW 111
// end ;
67505: LD_VAR 0 3
67509: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67510: LD_INT 0
67512: PPUSH
67513: PPUSH
67514: PPUSH
// if not side or not area then
67515: LD_VAR 0 1
67519: NOT
67520: IFTRUE 67529
67522: PUSH
67523: LD_VAR 0 2
67527: NOT
67528: OR
67529: IFFALSE 67533
// exit ;
67531: GO 67652
// tmp := AreaToList ( area , 0 ) ;
67533: LD_ADDR_VAR 0 5
67537: PUSH
67538: LD_VAR 0 2
67542: PPUSH
67543: LD_INT 0
67545: PPUSH
67546: CALL_OW 517
67550: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67551: LD_ADDR_VAR 0 4
67555: PUSH
67556: DOUBLE
67557: LD_INT 1
67559: DEC
67560: ST_TO_ADDR
67561: LD_VAR 0 5
67565: PUSH
67566: LD_INT 1
67568: ARRAY
67569: PUSH
67570: FOR_TO
67571: IFFALSE 67650
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67573: LD_VAR 0 5
67577: PUSH
67578: LD_INT 1
67580: ARRAY
67581: PUSH
67582: LD_VAR 0 4
67586: ARRAY
67587: PPUSH
67588: LD_VAR 0 5
67592: PUSH
67593: LD_INT 2
67595: ARRAY
67596: PUSH
67597: LD_VAR 0 4
67601: ARRAY
67602: PPUSH
67603: CALL_OW 351
67607: IFFALSE 67648
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67609: LD_VAR 0 5
67613: PUSH
67614: LD_INT 1
67616: ARRAY
67617: PUSH
67618: LD_VAR 0 4
67622: ARRAY
67623: PPUSH
67624: LD_VAR 0 5
67628: PUSH
67629: LD_INT 2
67631: ARRAY
67632: PUSH
67633: LD_VAR 0 4
67637: ARRAY
67638: PPUSH
67639: LD_VAR 0 1
67643: PPUSH
67644: CALL_OW 244
// end ;
67648: GO 67570
67650: POP
67651: POP
// end ;
67652: LD_VAR 0 3
67656: RET
// export function UniqueArray ( array ) ; var i ; begin
67657: LD_INT 0
67659: PPUSH
67660: PPUSH
// result := [ ] ;
67661: LD_ADDR_VAR 0 2
67665: PUSH
67666: EMPTY
67667: ST_TO_ADDR
// if not array then
67668: LD_VAR 0 1
67672: NOT
67673: IFFALSE 67677
// exit ;
67675: GO 67738
// for i := 1 to array do
67677: LD_ADDR_VAR 0 3
67681: PUSH
67682: DOUBLE
67683: LD_INT 1
67685: DEC
67686: ST_TO_ADDR
67687: LD_VAR 0 1
67691: PUSH
67692: FOR_TO
67693: IFFALSE 67736
// if not array [ i ] in result then
67695: LD_VAR 0 1
67699: PUSH
67700: LD_VAR 0 3
67704: ARRAY
67705: PUSH
67706: LD_VAR 0 2
67710: IN
67711: NOT
67712: IFFALSE 67734
// result := Join ( result , i ) ;
67714: LD_ADDR_VAR 0 2
67718: PUSH
67719: LD_VAR 0 2
67723: PPUSH
67724: LD_VAR 0 3
67728: PPUSH
67729: CALL 62389 0 2
67733: ST_TO_ADDR
67734: GO 67692
67736: POP
67737: POP
// end ;
67738: LD_VAR 0 2
67742: RET
