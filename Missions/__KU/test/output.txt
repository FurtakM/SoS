// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2740 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3204 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3204 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16073 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16330 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 61182 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// end ;
1517: LD_VAR 0 1
1521: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1522: LD_INT 0
1524: PPUSH
// if p2 = stream_mode then
1525: LD_VAR 0 2
1529: PUSH
1530: LD_INT 100
1532: EQUAL
1533: IFFALSE 2536
// begin if not StreamModeActive then
1535: LD_EXP 3
1539: NOT
1540: IFFALSE 1550
// StreamModeActive := true ;
1542: LD_ADDR_EXP 3
1546: PUSH
1547: LD_INT 1
1549: ST_TO_ADDR
// if p3 = 0 then
1550: LD_VAR 0 3
1554: PUSH
1555: LD_INT 0
1557: EQUAL
1558: IFFALSE 1564
// InitStreamMode ;
1560: CALL 2740 0 0
// if p3 = 1 then
1564: LD_VAR 0 3
1568: PUSH
1569: LD_INT 1
1571: EQUAL
1572: IFFALSE 1582
// sRocket := true ;
1574: LD_ADDR_EXP 8
1578: PUSH
1579: LD_INT 1
1581: ST_TO_ADDR
// if p3 = 2 then
1582: LD_VAR 0 3
1586: PUSH
1587: LD_INT 2
1589: EQUAL
1590: IFFALSE 1600
// sSpeed := true ;
1592: LD_ADDR_EXP 7
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// if p3 = 3 then
1600: LD_VAR 0 3
1604: PUSH
1605: LD_INT 3
1607: EQUAL
1608: IFFALSE 1618
// sEngine := true ;
1610: LD_ADDR_EXP 9
1614: PUSH
1615: LD_INT 1
1617: ST_TO_ADDR
// if p3 = 4 then
1618: LD_VAR 0 3
1622: PUSH
1623: LD_INT 4
1625: EQUAL
1626: IFFALSE 1636
// sSpec := true ;
1628: LD_ADDR_EXP 6
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// if p3 = 5 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 5
1643: EQUAL
1644: IFFALSE 1654
// sLevel := true ;
1646: LD_ADDR_EXP 10
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// if p3 = 6 then
1654: LD_VAR 0 3
1658: PUSH
1659: LD_INT 6
1661: EQUAL
1662: IFFALSE 1672
// sArmoury := true ;
1664: LD_ADDR_EXP 11
1668: PUSH
1669: LD_INT 1
1671: ST_TO_ADDR
// if p3 = 7 then
1672: LD_VAR 0 3
1676: PUSH
1677: LD_INT 7
1679: EQUAL
1680: IFFALSE 1690
// sRadar := true ;
1682: LD_ADDR_EXP 12
1686: PUSH
1687: LD_INT 1
1689: ST_TO_ADDR
// if p3 = 8 then
1690: LD_VAR 0 3
1694: PUSH
1695: LD_INT 8
1697: EQUAL
1698: IFFALSE 1708
// sBunker := true ;
1700: LD_ADDR_EXP 13
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// if p3 = 9 then
1708: LD_VAR 0 3
1712: PUSH
1713: LD_INT 9
1715: EQUAL
1716: IFFALSE 1726
// sHack := true ;
1718: LD_ADDR_EXP 14
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// if p3 = 10 then
1726: LD_VAR 0 3
1730: PUSH
1731: LD_INT 10
1733: EQUAL
1734: IFFALSE 1744
// sFire := true ;
1736: LD_ADDR_EXP 15
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if p3 = 11 then
1744: LD_VAR 0 3
1748: PUSH
1749: LD_INT 11
1751: EQUAL
1752: IFFALSE 1762
// sRefresh := true ;
1754: LD_ADDR_EXP 16
1758: PUSH
1759: LD_INT 1
1761: ST_TO_ADDR
// if p3 = 12 then
1762: LD_VAR 0 3
1766: PUSH
1767: LD_INT 12
1769: EQUAL
1770: IFFALSE 1780
// sExp := true ;
1772: LD_ADDR_EXP 17
1776: PUSH
1777: LD_INT 1
1779: ST_TO_ADDR
// if p3 = 13 then
1780: LD_VAR 0 3
1784: PUSH
1785: LD_INT 13
1787: EQUAL
1788: IFFALSE 1798
// sDepot := true ;
1790: LD_ADDR_EXP 18
1794: PUSH
1795: LD_INT 1
1797: ST_TO_ADDR
// if p3 = 14 then
1798: LD_VAR 0 3
1802: PUSH
1803: LD_INT 14
1805: EQUAL
1806: IFFALSE 1816
// sFlag := true ;
1808: LD_ADDR_EXP 19
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// if p3 = 15 then
1816: LD_VAR 0 3
1820: PUSH
1821: LD_INT 15
1823: EQUAL
1824: IFFALSE 1834
// sKamikadze := true ;
1826: LD_ADDR_EXP 27
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// if p3 = 16 then
1834: LD_VAR 0 3
1838: PUSH
1839: LD_INT 16
1841: EQUAL
1842: IFFALSE 1852
// sTroll := true ;
1844: LD_ADDR_EXP 28
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// if p3 = 17 then
1852: LD_VAR 0 3
1856: PUSH
1857: LD_INT 17
1859: EQUAL
1860: IFFALSE 1870
// sSlow := true ;
1862: LD_ADDR_EXP 29
1866: PUSH
1867: LD_INT 1
1869: ST_TO_ADDR
// if p3 = 18 then
1870: LD_VAR 0 3
1874: PUSH
1875: LD_INT 18
1877: EQUAL
1878: IFFALSE 1888
// sLack := true ;
1880: LD_ADDR_EXP 30
1884: PUSH
1885: LD_INT 1
1887: ST_TO_ADDR
// if p3 = 19 then
1888: LD_VAR 0 3
1892: PUSH
1893: LD_INT 19
1895: EQUAL
1896: IFFALSE 1906
// sTank := true ;
1898: LD_ADDR_EXP 32
1902: PUSH
1903: LD_INT 1
1905: ST_TO_ADDR
// if p3 = 20 then
1906: LD_VAR 0 3
1910: PUSH
1911: LD_INT 20
1913: EQUAL
1914: IFFALSE 1924
// sRemote := true ;
1916: LD_ADDR_EXP 33
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// if p3 = 21 then
1924: LD_VAR 0 3
1928: PUSH
1929: LD_INT 21
1931: EQUAL
1932: IFFALSE 1942
// sPowell := true ;
1934: LD_ADDR_EXP 34
1938: PUSH
1939: LD_INT 1
1941: ST_TO_ADDR
// if p3 = 22 then
1942: LD_VAR 0 3
1946: PUSH
1947: LD_INT 22
1949: EQUAL
1950: IFFALSE 1960
// sTeleport := true ;
1952: LD_ADDR_EXP 37
1956: PUSH
1957: LD_INT 1
1959: ST_TO_ADDR
// if p3 = 23 then
1960: LD_VAR 0 3
1964: PUSH
1965: LD_INT 23
1967: EQUAL
1968: IFFALSE 1978
// sOilTower := true ;
1970: LD_ADDR_EXP 39
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// if p3 = 24 then
1978: LD_VAR 0 3
1982: PUSH
1983: LD_INT 24
1985: EQUAL
1986: IFFALSE 1996
// sShovel := true ;
1988: LD_ADDR_EXP 40
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// if p3 = 25 then
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 25
2003: EQUAL
2004: IFFALSE 2014
// sSheik := true ;
2006: LD_ADDR_EXP 41
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// if p3 = 26 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 26
2021: EQUAL
2022: IFFALSE 2032
// sEarthquake := true ;
2024: LD_ADDR_EXP 43
2028: PUSH
2029: LD_INT 1
2031: ST_TO_ADDR
// if p3 = 27 then
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 27
2039: EQUAL
2040: IFFALSE 2050
// sAI := true ;
2042: LD_ADDR_EXP 44
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// if p3 = 28 then
2050: LD_VAR 0 3
2054: PUSH
2055: LD_INT 28
2057: EQUAL
2058: IFFALSE 2068
// sCargo := true ;
2060: LD_ADDR_EXP 47
2064: PUSH
2065: LD_INT 1
2067: ST_TO_ADDR
// if p3 = 29 then
2068: LD_VAR 0 3
2072: PUSH
2073: LD_INT 29
2075: EQUAL
2076: IFFALSE 2086
// sDLaser := true ;
2078: LD_ADDR_EXP 48
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// if p3 = 30 then
2086: LD_VAR 0 3
2090: PUSH
2091: LD_INT 30
2093: EQUAL
2094: IFFALSE 2104
// sExchange := true ;
2096: LD_ADDR_EXP 49
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// if p3 = 31 then
2104: LD_VAR 0 3
2108: PUSH
2109: LD_INT 31
2111: EQUAL
2112: IFFALSE 2122
// sFac := true ;
2114: LD_ADDR_EXP 50
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// if p3 = 32 then
2122: LD_VAR 0 3
2126: PUSH
2127: LD_INT 32
2129: EQUAL
2130: IFFALSE 2140
// sPower := true ;
2132: LD_ADDR_EXP 51
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// if p3 = 33 then
2140: LD_VAR 0 3
2144: PUSH
2145: LD_INT 33
2147: EQUAL
2148: IFFALSE 2158
// sRandom := true ;
2150: LD_ADDR_EXP 52
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// if p3 = 34 then
2158: LD_VAR 0 3
2162: PUSH
2163: LD_INT 34
2165: EQUAL
2166: IFFALSE 2176
// sShield := true ;
2168: LD_ADDR_EXP 53
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// if p3 = 35 then
2176: LD_VAR 0 3
2180: PUSH
2181: LD_INT 35
2183: EQUAL
2184: IFFALSE 2194
// sTime := true ;
2186: LD_ADDR_EXP 54
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// if p3 = 36 then
2194: LD_VAR 0 3
2198: PUSH
2199: LD_INT 36
2201: EQUAL
2202: IFFALSE 2212
// sTools := true ;
2204: LD_ADDR_EXP 55
2208: PUSH
2209: LD_INT 1
2211: ST_TO_ADDR
// if p3 = 101 then
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 101
2219: EQUAL
2220: IFFALSE 2230
// sSold := true ;
2222: LD_ADDR_EXP 20
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// if p3 = 102 then
2230: LD_VAR 0 3
2234: PUSH
2235: LD_INT 102
2237: EQUAL
2238: IFFALSE 2248
// sDiff := true ;
2240: LD_ADDR_EXP 21
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// if p3 = 103 then
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 103
2255: EQUAL
2256: IFFALSE 2266
// sFog := true ;
2258: LD_ADDR_EXP 24
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// if p3 = 104 then
2266: LD_VAR 0 3
2270: PUSH
2271: LD_INT 104
2273: EQUAL
2274: IFFALSE 2284
// sReset := true ;
2276: LD_ADDR_EXP 25
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// if p3 = 105 then
2284: LD_VAR 0 3
2288: PUSH
2289: LD_INT 105
2291: EQUAL
2292: IFFALSE 2302
// sSun := true ;
2294: LD_ADDR_EXP 26
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// if p3 = 106 then
2302: LD_VAR 0 3
2306: PUSH
2307: LD_INT 106
2309: EQUAL
2310: IFFALSE 2320
// sTiger := true ;
2312: LD_ADDR_EXP 22
2316: PUSH
2317: LD_INT 1
2319: ST_TO_ADDR
// if p3 = 107 then
2320: LD_VAR 0 3
2324: PUSH
2325: LD_INT 107
2327: EQUAL
2328: IFFALSE 2338
// sBomb := true ;
2330: LD_ADDR_EXP 23
2334: PUSH
2335: LD_INT 1
2337: ST_TO_ADDR
// if p3 = 108 then
2338: LD_VAR 0 3
2342: PUSH
2343: LD_INT 108
2345: EQUAL
2346: IFFALSE 2356
// sWound := true ;
2348: LD_ADDR_EXP 31
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if p3 = 109 then
2356: LD_VAR 0 3
2360: PUSH
2361: LD_INT 109
2363: EQUAL
2364: IFFALSE 2374
// sBetray := true ;
2366: LD_ADDR_EXP 35
2370: PUSH
2371: LD_INT 1
2373: ST_TO_ADDR
// if p3 = 110 then
2374: LD_VAR 0 3
2378: PUSH
2379: LD_INT 110
2381: EQUAL
2382: IFFALSE 2392
// sContamin := true ;
2384: LD_ADDR_EXP 36
2388: PUSH
2389: LD_INT 1
2391: ST_TO_ADDR
// if p3 = 111 then
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 111
2399: EQUAL
2400: IFFALSE 2410
// sOil := true ;
2402: LD_ADDR_EXP 38
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// if p3 = 112 then
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 112
2417: EQUAL
2418: IFFALSE 2428
// sStu := true ;
2420: LD_ADDR_EXP 42
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// if p3 = 113 then
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 113
2435: EQUAL
2436: IFFALSE 2446
// sBazooka := true ;
2438: LD_ADDR_EXP 45
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if p3 = 114 then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 114
2453: EQUAL
2454: IFFALSE 2464
// sMortar := true ;
2456: LD_ADDR_EXP 46
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// if p3 = 115 then
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 115
2471: EQUAL
2472: IFFALSE 2482
// sRanger := true ;
2474: LD_ADDR_EXP 56
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// if p3 = 116 then
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 116
2489: EQUAL
2490: IFFALSE 2500
// sComputer := true ;
2492: LD_ADDR_EXP 57
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// if p3 = 117 then
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 117
2507: EQUAL
2508: IFFALSE 2518
// s30 := true ;
2510: LD_ADDR_EXP 58
2514: PUSH
2515: LD_INT 1
2517: ST_TO_ADDR
// if p3 = 118 then
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 118
2525: EQUAL
2526: IFFALSE 2536
// s60 := true ;
2528: LD_ADDR_EXP 59
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// end ; if p2 = hack_mode then
2536: LD_VAR 0 2
2540: PUSH
2541: LD_INT 101
2543: EQUAL
2544: IFFALSE 2672
// begin case p3 of 1 :
2546: LD_VAR 0 3
2550: PUSH
2551: LD_INT 1
2553: DOUBLE
2554: EQUAL
2555: IFTRUE 2559
2557: GO 2566
2559: POP
// hHackUnlimitedResources ; 2 :
2560: CALL 14819 0 0
2564: GO 2672
2566: LD_INT 2
2568: DOUBLE
2569: EQUAL
2570: IFTRUE 2574
2572: GO 2581
2574: POP
// hHackSetLevel10 ; 3 :
2575: CALL 14952 0 0
2579: GO 2672
2581: LD_INT 3
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2596
2589: POP
// hHackSetLevel10YourUnits ; 4 :
2590: CALL 15037 0 0
2594: GO 2672
2596: LD_INT 4
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2611
2604: POP
// hHackInvincible ; 5 :
2605: CALL 15485 0 0
2609: GO 2672
2611: LD_INT 5
2613: DOUBLE
2614: EQUAL
2615: IFTRUE 2619
2617: GO 2626
2619: POP
// hHackInvisible ; 6 :
2620: CALL 15596 0 0
2624: GO 2672
2626: LD_INT 6
2628: DOUBLE
2629: EQUAL
2630: IFTRUE 2634
2632: GO 2641
2634: POP
// hHackChangeYourSide ; 7 :
2635: CALL 15653 0 0
2639: GO 2672
2641: LD_INT 7
2643: DOUBLE
2644: EQUAL
2645: IFTRUE 2649
2647: GO 2656
2649: POP
// hHackChangeUnitSide ; 8 :
2650: CALL 15695 0 0
2654: GO 2672
2656: LD_INT 8
2658: DOUBLE
2659: EQUAL
2660: IFTRUE 2664
2662: GO 2671
2664: POP
// hHackFog ; end ;
2665: CALL 15796 0 0
2669: GO 2672
2671: POP
// end ; if p2 = game_save_mode then
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 102
2679: EQUAL
2680: IFFALSE 2735
// begin if p3 = 1 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 1
2689: EQUAL
2690: IFFALSE 2702
// globalGameSaveCounter := p4 ;
2692: LD_ADDR_EXP 2
2696: PUSH
2697: LD_VAR 0 4
2701: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2702: LD_VAR 0 3
2706: PUSH
2707: LD_INT 2
2709: EQUAL
2710: PUSH
2711: LD_EXP 2
2715: AND
2716: IFFALSE 2735
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2718: LD_STRING setGameSaveCounter(
2720: PUSH
2721: LD_EXP 2
2725: STR
2726: PUSH
2727: LD_STRING )
2729: STR
2730: PPUSH
2731: CALL_OW 559
// end ; end ;
2735: LD_VAR 0 7
2739: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2740: LD_INT 0
2742: PPUSH
// streamModeActive := false ;
2743: LD_ADDR_EXP 3
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// normalCounter := 36 ;
2751: LD_ADDR_EXP 4
2755: PUSH
2756: LD_INT 36
2758: ST_TO_ADDR
// hardcoreCounter := 18 ;
2759: LD_ADDR_EXP 5
2763: PUSH
2764: LD_INT 18
2766: ST_TO_ADDR
// sRocket := false ;
2767: LD_ADDR_EXP 8
2771: PUSH
2772: LD_INT 0
2774: ST_TO_ADDR
// sSpeed := false ;
2775: LD_ADDR_EXP 7
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// sEngine := false ;
2783: LD_ADDR_EXP 9
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// sSpec := false ;
2791: LD_ADDR_EXP 6
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// sLevel := false ;
2799: LD_ADDR_EXP 10
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// sArmoury := false ;
2807: LD_ADDR_EXP 11
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// sRadar := false ;
2815: LD_ADDR_EXP 12
2819: PUSH
2820: LD_INT 0
2822: ST_TO_ADDR
// sBunker := false ;
2823: LD_ADDR_EXP 13
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// sHack := false ;
2831: LD_ADDR_EXP 14
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// sFire := false ;
2839: LD_ADDR_EXP 15
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// sRefresh := false ;
2847: LD_ADDR_EXP 16
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// sExp := false ;
2855: LD_ADDR_EXP 17
2859: PUSH
2860: LD_INT 0
2862: ST_TO_ADDR
// sDepot := false ;
2863: LD_ADDR_EXP 18
2867: PUSH
2868: LD_INT 0
2870: ST_TO_ADDR
// sFlag := false ;
2871: LD_ADDR_EXP 19
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// sKamikadze := false ;
2879: LD_ADDR_EXP 27
2883: PUSH
2884: LD_INT 0
2886: ST_TO_ADDR
// sTroll := false ;
2887: LD_ADDR_EXP 28
2891: PUSH
2892: LD_INT 0
2894: ST_TO_ADDR
// sSlow := false ;
2895: LD_ADDR_EXP 29
2899: PUSH
2900: LD_INT 0
2902: ST_TO_ADDR
// sLack := false ;
2903: LD_ADDR_EXP 30
2907: PUSH
2908: LD_INT 0
2910: ST_TO_ADDR
// sTank := false ;
2911: LD_ADDR_EXP 32
2915: PUSH
2916: LD_INT 0
2918: ST_TO_ADDR
// sRemote := false ;
2919: LD_ADDR_EXP 33
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// sPowell := false ;
2927: LD_ADDR_EXP 34
2931: PUSH
2932: LD_INT 0
2934: ST_TO_ADDR
// sTeleport := false ;
2935: LD_ADDR_EXP 37
2939: PUSH
2940: LD_INT 0
2942: ST_TO_ADDR
// sOilTower := false ;
2943: LD_ADDR_EXP 39
2947: PUSH
2948: LD_INT 0
2950: ST_TO_ADDR
// sShovel := false ;
2951: LD_ADDR_EXP 40
2955: PUSH
2956: LD_INT 0
2958: ST_TO_ADDR
// sSheik := false ;
2959: LD_ADDR_EXP 41
2963: PUSH
2964: LD_INT 0
2966: ST_TO_ADDR
// sEarthquake := false ;
2967: LD_ADDR_EXP 43
2971: PUSH
2972: LD_INT 0
2974: ST_TO_ADDR
// sAI := false ;
2975: LD_ADDR_EXP 44
2979: PUSH
2980: LD_INT 0
2982: ST_TO_ADDR
// sCargo := false ;
2983: LD_ADDR_EXP 47
2987: PUSH
2988: LD_INT 0
2990: ST_TO_ADDR
// sDLaser := false ;
2991: LD_ADDR_EXP 48
2995: PUSH
2996: LD_INT 0
2998: ST_TO_ADDR
// sExchange := false ;
2999: LD_ADDR_EXP 49
3003: PUSH
3004: LD_INT 0
3006: ST_TO_ADDR
// sFac := false ;
3007: LD_ADDR_EXP 50
3011: PUSH
3012: LD_INT 0
3014: ST_TO_ADDR
// sPower := false ;
3015: LD_ADDR_EXP 51
3019: PUSH
3020: LD_INT 0
3022: ST_TO_ADDR
// sRandom := false ;
3023: LD_ADDR_EXP 52
3027: PUSH
3028: LD_INT 0
3030: ST_TO_ADDR
// sShield := false ;
3031: LD_ADDR_EXP 53
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// sTime := false ;
3039: LD_ADDR_EXP 54
3043: PUSH
3044: LD_INT 0
3046: ST_TO_ADDR
// sTools := false ;
3047: LD_ADDR_EXP 55
3051: PUSH
3052: LD_INT 0
3054: ST_TO_ADDR
// sSold := false ;
3055: LD_ADDR_EXP 20
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// sDiff := false ;
3063: LD_ADDR_EXP 21
3067: PUSH
3068: LD_INT 0
3070: ST_TO_ADDR
// sFog := false ;
3071: LD_ADDR_EXP 24
3075: PUSH
3076: LD_INT 0
3078: ST_TO_ADDR
// sReset := false ;
3079: LD_ADDR_EXP 25
3083: PUSH
3084: LD_INT 0
3086: ST_TO_ADDR
// sSun := false ;
3087: LD_ADDR_EXP 26
3091: PUSH
3092: LD_INT 0
3094: ST_TO_ADDR
// sTiger := false ;
3095: LD_ADDR_EXP 22
3099: PUSH
3100: LD_INT 0
3102: ST_TO_ADDR
// sBomb := false ;
3103: LD_ADDR_EXP 23
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// sWound := false ;
3111: LD_ADDR_EXP 31
3115: PUSH
3116: LD_INT 0
3118: ST_TO_ADDR
// sBetray := false ;
3119: LD_ADDR_EXP 35
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// sContamin := false ;
3127: LD_ADDR_EXP 36
3131: PUSH
3132: LD_INT 0
3134: ST_TO_ADDR
// sOil := false ;
3135: LD_ADDR_EXP 38
3139: PUSH
3140: LD_INT 0
3142: ST_TO_ADDR
// sStu := false ;
3143: LD_ADDR_EXP 42
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// sBazooka := false ;
3151: LD_ADDR_EXP 45
3155: PUSH
3156: LD_INT 0
3158: ST_TO_ADDR
// sMortar := false ;
3159: LD_ADDR_EXP 46
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// sRanger := false ;
3167: LD_ADDR_EXP 56
3171: PUSH
3172: LD_INT 0
3174: ST_TO_ADDR
// sComputer := false ;
3175: LD_ADDR_EXP 57
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// s30 := false ;
3183: LD_ADDR_EXP 58
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// s60 := false ;
3191: LD_ADDR_EXP 59
3195: PUSH
3196: LD_INT 0
3198: ST_TO_ADDR
// end ;
3199: LD_VAR 0 1
3203: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3204: LD_INT 0
3206: PPUSH
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
3211: PPUSH
3212: PPUSH
// result := [ ] ;
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: EMPTY
3219: ST_TO_ADDR
// if campaign_id = 1 then
3220: LD_OWVAR 69
3224: PUSH
3225: LD_INT 1
3227: EQUAL
3228: IFFALSE 6394
// begin case mission_number of 1 :
3230: LD_OWVAR 70
3234: PUSH
3235: LD_INT 1
3237: DOUBLE
3238: EQUAL
3239: IFTRUE 3243
3241: GO 3319
3243: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3244: LD_ADDR_VAR 0 2
3248: PUSH
3249: LD_INT 2
3251: PUSH
3252: LD_INT 4
3254: PUSH
3255: LD_INT 11
3257: PUSH
3258: LD_INT 12
3260: PUSH
3261: LD_INT 15
3263: PUSH
3264: LD_INT 16
3266: PUSH
3267: LD_INT 22
3269: PUSH
3270: LD_INT 23
3272: PUSH
3273: LD_INT 26
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 101
3289: PUSH
3290: LD_INT 102
3292: PUSH
3293: LD_INT 106
3295: PUSH
3296: LD_INT 116
3298: PUSH
3299: LD_INT 117
3301: PUSH
3302: LD_INT 118
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: ST_TO_ADDR
3317: GO 6392
3319: LD_INT 2
3321: DOUBLE
3322: EQUAL
3323: IFTRUE 3327
3325: GO 3411
3327: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3328: LD_ADDR_VAR 0 2
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: LD_INT 11
3341: PUSH
3342: LD_INT 12
3344: PUSH
3345: LD_INT 15
3347: PUSH
3348: LD_INT 16
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 23
3356: PUSH
3357: LD_INT 26
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 101
3373: PUSH
3374: LD_INT 102
3376: PUSH
3377: LD_INT 105
3379: PUSH
3380: LD_INT 106
3382: PUSH
3383: LD_INT 108
3385: PUSH
3386: LD_INT 116
3388: PUSH
3389: LD_INT 117
3391: PUSH
3392: LD_INT 118
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: ST_TO_ADDR
3409: GO 6392
3411: LD_INT 3
3413: DOUBLE
3414: EQUAL
3415: IFTRUE 3419
3417: GO 3507
3419: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3420: LD_ADDR_VAR 0 2
3424: PUSH
3425: LD_INT 2
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: LD_INT 5
3433: PUSH
3434: LD_INT 11
3436: PUSH
3437: LD_INT 12
3439: PUSH
3440: LD_INT 15
3442: PUSH
3443: LD_INT 16
3445: PUSH
3446: LD_INT 22
3448: PUSH
3449: LD_INT 26
3451: PUSH
3452: LD_INT 36
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 101
3469: PUSH
3470: LD_INT 102
3472: PUSH
3473: LD_INT 105
3475: PUSH
3476: LD_INT 106
3478: PUSH
3479: LD_INT 108
3481: PUSH
3482: LD_INT 116
3484: PUSH
3485: LD_INT 117
3487: PUSH
3488: LD_INT 118
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: ST_TO_ADDR
3505: GO 6392
3507: LD_INT 4
3509: DOUBLE
3510: EQUAL
3511: IFTRUE 3515
3513: GO 3611
3515: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3516: LD_ADDR_VAR 0 2
3520: PUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 4
3526: PUSH
3527: LD_INT 5
3529: PUSH
3530: LD_INT 8
3532: PUSH
3533: LD_INT 11
3535: PUSH
3536: LD_INT 12
3538: PUSH
3539: LD_INT 15
3541: PUSH
3542: LD_INT 16
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 23
3550: PUSH
3551: LD_INT 26
3553: PUSH
3554: LD_INT 36
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 101
3573: PUSH
3574: LD_INT 102
3576: PUSH
3577: LD_INT 105
3579: PUSH
3580: LD_INT 106
3582: PUSH
3583: LD_INT 108
3585: PUSH
3586: LD_INT 116
3588: PUSH
3589: LD_INT 117
3591: PUSH
3592: LD_INT 118
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: ST_TO_ADDR
3609: GO 6392
3611: LD_INT 5
3613: DOUBLE
3614: EQUAL
3615: IFTRUE 3619
3617: GO 3731
3619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 6
3636: PUSH
3637: LD_INT 8
3639: PUSH
3640: LD_INT 11
3642: PUSH
3643: LD_INT 12
3645: PUSH
3646: LD_INT 15
3648: PUSH
3649: LD_INT 16
3651: PUSH
3652: LD_INT 22
3654: PUSH
3655: LD_INT 23
3657: PUSH
3658: LD_INT 25
3660: PUSH
3661: LD_INT 26
3663: PUSH
3664: LD_INT 36
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 101
3685: PUSH
3686: LD_INT 102
3688: PUSH
3689: LD_INT 105
3691: PUSH
3692: LD_INT 106
3694: PUSH
3695: LD_INT 108
3697: PUSH
3698: LD_INT 109
3700: PUSH
3701: LD_INT 112
3703: PUSH
3704: LD_INT 116
3706: PUSH
3707: LD_INT 117
3709: PUSH
3710: LD_INT 118
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: ST_TO_ADDR
3729: GO 6392
3731: LD_INT 6
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3871
3739: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3740: LD_ADDR_VAR 0 2
3744: PUSH
3745: LD_INT 2
3747: PUSH
3748: LD_INT 4
3750: PUSH
3751: LD_INT 5
3753: PUSH
3754: LD_INT 6
3756: PUSH
3757: LD_INT 8
3759: PUSH
3760: LD_INT 11
3762: PUSH
3763: LD_INT 12
3765: PUSH
3766: LD_INT 15
3768: PUSH
3769: LD_INT 16
3771: PUSH
3772: LD_INT 20
3774: PUSH
3775: LD_INT 21
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 23
3783: PUSH
3784: LD_INT 25
3786: PUSH
3787: LD_INT 26
3789: PUSH
3790: LD_INT 30
3792: PUSH
3793: LD_INT 31
3795: PUSH
3796: LD_INT 32
3798: PUSH
3799: LD_INT 36
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 101
3825: PUSH
3826: LD_INT 102
3828: PUSH
3829: LD_INT 105
3831: PUSH
3832: LD_INT 106
3834: PUSH
3835: LD_INT 108
3837: PUSH
3838: LD_INT 109
3840: PUSH
3841: LD_INT 112
3843: PUSH
3844: LD_INT 116
3846: PUSH
3847: LD_INT 117
3849: PUSH
3850: LD_INT 118
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: ST_TO_ADDR
3869: GO 6392
3871: LD_INT 7
3873: DOUBLE
3874: EQUAL
3875: IFTRUE 3879
3877: GO 3991
3879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 4
3890: PUSH
3891: LD_INT 5
3893: PUSH
3894: LD_INT 7
3896: PUSH
3897: LD_INT 11
3899: PUSH
3900: LD_INT 12
3902: PUSH
3903: LD_INT 15
3905: PUSH
3906: LD_INT 16
3908: PUSH
3909: LD_INT 20
3911: PUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 22
3917: PUSH
3918: LD_INT 23
3920: PUSH
3921: LD_INT 25
3923: PUSH
3924: LD_INT 26
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 101
3945: PUSH
3946: LD_INT 102
3948: PUSH
3949: LD_INT 103
3951: PUSH
3952: LD_INT 105
3954: PUSH
3955: LD_INT 106
3957: PUSH
3958: LD_INT 108
3960: PUSH
3961: LD_INT 112
3963: PUSH
3964: LD_INT 116
3966: PUSH
3967: LD_INT 117
3969: PUSH
3970: LD_INT 118
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: ST_TO_ADDR
3989: GO 6392
3991: LD_INT 8
3993: DOUBLE
3994: EQUAL
3995: IFTRUE 3999
3997: GO 4139
3999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4000: LD_ADDR_VAR 0 2
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 6
4016: PUSH
4017: LD_INT 7
4019: PUSH
4020: LD_INT 8
4022: PUSH
4023: LD_INT 11
4025: PUSH
4026: LD_INT 12
4028: PUSH
4029: LD_INT 15
4031: PUSH
4032: LD_INT 16
4034: PUSH
4035: LD_INT 20
4037: PUSH
4038: LD_INT 21
4040: PUSH
4041: LD_INT 22
4043: PUSH
4044: LD_INT 23
4046: PUSH
4047: LD_INT 25
4049: PUSH
4050: LD_INT 26
4052: PUSH
4053: LD_INT 30
4055: PUSH
4056: LD_INT 31
4058: PUSH
4059: LD_INT 32
4061: PUSH
4062: LD_INT 36
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 101
4089: PUSH
4090: LD_INT 102
4092: PUSH
4093: LD_INT 103
4095: PUSH
4096: LD_INT 105
4098: PUSH
4099: LD_INT 106
4101: PUSH
4102: LD_INT 108
4104: PUSH
4105: LD_INT 109
4107: PUSH
4108: LD_INT 112
4110: PUSH
4111: LD_INT 116
4113: PUSH
4114: LD_INT 117
4116: PUSH
4117: LD_INT 118
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: ST_TO_ADDR
4137: GO 6392
4139: LD_INT 9
4141: DOUBLE
4142: EQUAL
4143: IFTRUE 4147
4145: GO 4295
4147: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: LD_INT 2
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: LD_INT 5
4161: PUSH
4162: LD_INT 6
4164: PUSH
4165: LD_INT 7
4167: PUSH
4168: LD_INT 8
4170: PUSH
4171: LD_INT 11
4173: PUSH
4174: LD_INT 12
4176: PUSH
4177: LD_INT 15
4179: PUSH
4180: LD_INT 16
4182: PUSH
4183: LD_INT 20
4185: PUSH
4186: LD_INT 21
4188: PUSH
4189: LD_INT 22
4191: PUSH
4192: LD_INT 23
4194: PUSH
4195: LD_INT 25
4197: PUSH
4198: LD_INT 26
4200: PUSH
4201: LD_INT 28
4203: PUSH
4204: LD_INT 30
4206: PUSH
4207: LD_INT 31
4209: PUSH
4210: LD_INT 32
4212: PUSH
4213: LD_INT 36
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 101
4241: PUSH
4242: LD_INT 102
4244: PUSH
4245: LD_INT 103
4247: PUSH
4248: LD_INT 105
4250: PUSH
4251: LD_INT 106
4253: PUSH
4254: LD_INT 108
4256: PUSH
4257: LD_INT 109
4259: PUSH
4260: LD_INT 112
4262: PUSH
4263: LD_INT 114
4265: PUSH
4266: LD_INT 116
4268: PUSH
4269: LD_INT 117
4271: PUSH
4272: LD_INT 118
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: ST_TO_ADDR
4293: GO 6392
4295: LD_INT 10
4297: DOUBLE
4298: EQUAL
4299: IFTRUE 4303
4301: GO 4499
4303: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4304: LD_ADDR_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 4
4314: PUSH
4315: LD_INT 5
4317: PUSH
4318: LD_INT 6
4320: PUSH
4321: LD_INT 7
4323: PUSH
4324: LD_INT 8
4326: PUSH
4327: LD_INT 9
4329: PUSH
4330: LD_INT 10
4332: PUSH
4333: LD_INT 11
4335: PUSH
4336: LD_INT 12
4338: PUSH
4339: LD_INT 13
4341: PUSH
4342: LD_INT 14
4344: PUSH
4345: LD_INT 15
4347: PUSH
4348: LD_INT 16
4350: PUSH
4351: LD_INT 17
4353: PUSH
4354: LD_INT 18
4356: PUSH
4357: LD_INT 19
4359: PUSH
4360: LD_INT 20
4362: PUSH
4363: LD_INT 21
4365: PUSH
4366: LD_INT 22
4368: PUSH
4369: LD_INT 23
4371: PUSH
4372: LD_INT 24
4374: PUSH
4375: LD_INT 25
4377: PUSH
4378: LD_INT 26
4380: PUSH
4381: LD_INT 28
4383: PUSH
4384: LD_INT 30
4386: PUSH
4387: LD_INT 31
4389: PUSH
4390: LD_INT 32
4392: PUSH
4393: LD_INT 36
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_INT 101
4429: PUSH
4430: LD_INT 102
4432: PUSH
4433: LD_INT 103
4435: PUSH
4436: LD_INT 104
4438: PUSH
4439: LD_INT 105
4441: PUSH
4442: LD_INT 106
4444: PUSH
4445: LD_INT 107
4447: PUSH
4448: LD_INT 108
4450: PUSH
4451: LD_INT 109
4453: PUSH
4454: LD_INT 110
4456: PUSH
4457: LD_INT 111
4459: PUSH
4460: LD_INT 112
4462: PUSH
4463: LD_INT 114
4465: PUSH
4466: LD_INT 116
4468: PUSH
4469: LD_INT 117
4471: PUSH
4472: LD_INT 118
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: ST_TO_ADDR
4497: GO 6392
4499: LD_INT 11
4501: DOUBLE
4502: EQUAL
4503: IFTRUE 4507
4505: GO 4711
4507: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4508: LD_ADDR_VAR 0 2
4512: PUSH
4513: LD_INT 2
4515: PUSH
4516: LD_INT 3
4518: PUSH
4519: LD_INT 4
4521: PUSH
4522: LD_INT 5
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 7
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 9
4536: PUSH
4537: LD_INT 10
4539: PUSH
4540: LD_INT 11
4542: PUSH
4543: LD_INT 12
4545: PUSH
4546: LD_INT 13
4548: PUSH
4549: LD_INT 14
4551: PUSH
4552: LD_INT 15
4554: PUSH
4555: LD_INT 16
4557: PUSH
4558: LD_INT 17
4560: PUSH
4561: LD_INT 18
4563: PUSH
4564: LD_INT 19
4566: PUSH
4567: LD_INT 20
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 23
4578: PUSH
4579: LD_INT 24
4581: PUSH
4582: LD_INT 25
4584: PUSH
4585: LD_INT 26
4587: PUSH
4588: LD_INT 28
4590: PUSH
4591: LD_INT 30
4593: PUSH
4594: LD_INT 31
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 34
4602: PUSH
4603: LD_INT 36
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 101
4641: PUSH
4642: LD_INT 102
4644: PUSH
4645: LD_INT 103
4647: PUSH
4648: LD_INT 104
4650: PUSH
4651: LD_INT 105
4653: PUSH
4654: LD_INT 106
4656: PUSH
4657: LD_INT 107
4659: PUSH
4660: LD_INT 108
4662: PUSH
4663: LD_INT 109
4665: PUSH
4666: LD_INT 110
4668: PUSH
4669: LD_INT 111
4671: PUSH
4672: LD_INT 112
4674: PUSH
4675: LD_INT 114
4677: PUSH
4678: LD_INT 116
4680: PUSH
4681: LD_INT 117
4683: PUSH
4684: LD_INT 118
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 6392
4711: LD_INT 12
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4939
4719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: LD_INT 5
4739: PUSH
4740: LD_INT 6
4742: PUSH
4743: LD_INT 7
4745: PUSH
4746: LD_INT 8
4748: PUSH
4749: LD_INT 9
4751: PUSH
4752: LD_INT 10
4754: PUSH
4755: LD_INT 11
4757: PUSH
4758: LD_INT 12
4760: PUSH
4761: LD_INT 13
4763: PUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 15
4769: PUSH
4770: LD_INT 16
4772: PUSH
4773: LD_INT 17
4775: PUSH
4776: LD_INT 18
4778: PUSH
4779: LD_INT 19
4781: PUSH
4782: LD_INT 20
4784: PUSH
4785: LD_INT 21
4787: PUSH
4788: LD_INT 22
4790: PUSH
4791: LD_INT 23
4793: PUSH
4794: LD_INT 24
4796: PUSH
4797: LD_INT 25
4799: PUSH
4800: LD_INT 26
4802: PUSH
4803: LD_INT 27
4805: PUSH
4806: LD_INT 28
4808: PUSH
4809: LD_INT 30
4811: PUSH
4812: LD_INT 31
4814: PUSH
4815: LD_INT 32
4817: PUSH
4818: LD_INT 33
4820: PUSH
4821: LD_INT 34
4823: PUSH
4824: LD_INT 36
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 101
4865: PUSH
4866: LD_INT 102
4868: PUSH
4869: LD_INT 103
4871: PUSH
4872: LD_INT 104
4874: PUSH
4875: LD_INT 105
4877: PUSH
4878: LD_INT 106
4880: PUSH
4881: LD_INT 107
4883: PUSH
4884: LD_INT 108
4886: PUSH
4887: LD_INT 109
4889: PUSH
4890: LD_INT 110
4892: PUSH
4893: LD_INT 111
4895: PUSH
4896: LD_INT 112
4898: PUSH
4899: LD_INT 113
4901: PUSH
4902: LD_INT 114
4904: PUSH
4905: LD_INT 116
4907: PUSH
4908: LD_INT 117
4910: PUSH
4911: LD_INT 118
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: ST_TO_ADDR
4937: GO 6392
4939: LD_INT 13
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 5155
4947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: LD_INT 2
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: LD_INT 4
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: LD_INT 8
4970: PUSH
4971: LD_INT 9
4973: PUSH
4974: LD_INT 10
4976: PUSH
4977: LD_INT 11
4979: PUSH
4980: LD_INT 12
4982: PUSH
4983: LD_INT 14
4985: PUSH
4986: LD_INT 15
4988: PUSH
4989: LD_INT 16
4991: PUSH
4992: LD_INT 17
4994: PUSH
4995: LD_INT 18
4997: PUSH
4998: LD_INT 19
5000: PUSH
5001: LD_INT 20
5003: PUSH
5004: LD_INT 21
5006: PUSH
5007: LD_INT 22
5009: PUSH
5010: LD_INT 23
5012: PUSH
5013: LD_INT 24
5015: PUSH
5016: LD_INT 25
5018: PUSH
5019: LD_INT 26
5021: PUSH
5022: LD_INT 27
5024: PUSH
5025: LD_INT 28
5027: PUSH
5028: LD_INT 30
5030: PUSH
5031: LD_INT 31
5033: PUSH
5034: LD_INT 32
5036: PUSH
5037: LD_INT 33
5039: PUSH
5040: LD_INT 34
5042: PUSH
5043: LD_INT 36
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 101
5081: PUSH
5082: LD_INT 102
5084: PUSH
5085: LD_INT 103
5087: PUSH
5088: LD_INT 104
5090: PUSH
5091: LD_INT 105
5093: PUSH
5094: LD_INT 106
5096: PUSH
5097: LD_INT 107
5099: PUSH
5100: LD_INT 108
5102: PUSH
5103: LD_INT 109
5105: PUSH
5106: LD_INT 110
5108: PUSH
5109: LD_INT 111
5111: PUSH
5112: LD_INT 112
5114: PUSH
5115: LD_INT 113
5117: PUSH
5118: LD_INT 114
5120: PUSH
5121: LD_INT 116
5123: PUSH
5124: LD_INT 117
5126: PUSH
5127: LD_INT 118
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: ST_TO_ADDR
5153: GO 6392
5155: LD_INT 14
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5387
5163: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 4
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: LD_INT 6
5186: PUSH
5187: LD_INT 7
5189: PUSH
5190: LD_INT 8
5192: PUSH
5193: LD_INT 9
5195: PUSH
5196: LD_INT 10
5198: PUSH
5199: LD_INT 11
5201: PUSH
5202: LD_INT 12
5204: PUSH
5205: LD_INT 13
5207: PUSH
5208: LD_INT 14
5210: PUSH
5211: LD_INT 15
5213: PUSH
5214: LD_INT 16
5216: PUSH
5217: LD_INT 17
5219: PUSH
5220: LD_INT 18
5222: PUSH
5223: LD_INT 19
5225: PUSH
5226: LD_INT 20
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 22
5234: PUSH
5235: LD_INT 23
5237: PUSH
5238: LD_INT 24
5240: PUSH
5241: LD_INT 25
5243: PUSH
5244: LD_INT 26
5246: PUSH
5247: LD_INT 27
5249: PUSH
5250: LD_INT 28
5252: PUSH
5253: LD_INT 29
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_INT 31
5261: PUSH
5262: LD_INT 32
5264: PUSH
5265: LD_INT 33
5267: PUSH
5268: LD_INT 34
5270: PUSH
5271: LD_INT 36
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 101
5313: PUSH
5314: LD_INT 102
5316: PUSH
5317: LD_INT 103
5319: PUSH
5320: LD_INT 104
5322: PUSH
5323: LD_INT 105
5325: PUSH
5326: LD_INT 106
5328: PUSH
5329: LD_INT 107
5331: PUSH
5332: LD_INT 108
5334: PUSH
5335: LD_INT 109
5337: PUSH
5338: LD_INT 110
5340: PUSH
5341: LD_INT 111
5343: PUSH
5344: LD_INT 112
5346: PUSH
5347: LD_INT 113
5349: PUSH
5350: LD_INT 114
5352: PUSH
5353: LD_INT 116
5355: PUSH
5356: LD_INT 117
5358: PUSH
5359: LD_INT 118
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: ST_TO_ADDR
5385: GO 6392
5387: LD_INT 15
5389: DOUBLE
5390: EQUAL
5391: IFTRUE 5395
5393: GO 5619
5395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: LD_INT 1
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: LD_INT 3
5409: PUSH
5410: LD_INT 4
5412: PUSH
5413: LD_INT 5
5415: PUSH
5416: LD_INT 6
5418: PUSH
5419: LD_INT 7
5421: PUSH
5422: LD_INT 8
5424: PUSH
5425: LD_INT 9
5427: PUSH
5428: LD_INT 10
5430: PUSH
5431: LD_INT 11
5433: PUSH
5434: LD_INT 12
5436: PUSH
5437: LD_INT 13
5439: PUSH
5440: LD_INT 14
5442: PUSH
5443: LD_INT 15
5445: PUSH
5446: LD_INT 16
5448: PUSH
5449: LD_INT 17
5451: PUSH
5452: LD_INT 18
5454: PUSH
5455: LD_INT 19
5457: PUSH
5458: LD_INT 20
5460: PUSH
5461: LD_INT 21
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 23
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: LD_INT 25
5475: PUSH
5476: LD_INT 26
5478: PUSH
5479: LD_INT 27
5481: PUSH
5482: LD_INT 28
5484: PUSH
5485: LD_INT 29
5487: PUSH
5488: LD_INT 30
5490: PUSH
5491: LD_INT 31
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 33
5499: PUSH
5500: LD_INT 34
5502: PUSH
5503: LD_INT 36
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 101
5545: PUSH
5546: LD_INT 102
5548: PUSH
5549: LD_INT 103
5551: PUSH
5552: LD_INT 104
5554: PUSH
5555: LD_INT 105
5557: PUSH
5558: LD_INT 106
5560: PUSH
5561: LD_INT 107
5563: PUSH
5564: LD_INT 108
5566: PUSH
5567: LD_INT 109
5569: PUSH
5570: LD_INT 110
5572: PUSH
5573: LD_INT 111
5575: PUSH
5576: LD_INT 112
5578: PUSH
5579: LD_INT 113
5581: PUSH
5582: LD_INT 114
5584: PUSH
5585: LD_INT 116
5587: PUSH
5588: LD_INT 117
5590: PUSH
5591: LD_INT 118
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: ST_TO_ADDR
5617: GO 6392
5619: LD_INT 16
5621: DOUBLE
5622: EQUAL
5623: IFTRUE 5627
5625: GO 5763
5627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 4
5638: PUSH
5639: LD_INT 5
5641: PUSH
5642: LD_INT 7
5644: PUSH
5645: LD_INT 11
5647: PUSH
5648: LD_INT 12
5650: PUSH
5651: LD_INT 15
5653: PUSH
5654: LD_INT 16
5656: PUSH
5657: LD_INT 20
5659: PUSH
5660: LD_INT 21
5662: PUSH
5663: LD_INT 22
5665: PUSH
5666: LD_INT 23
5668: PUSH
5669: LD_INT 25
5671: PUSH
5672: LD_INT 26
5674: PUSH
5675: LD_INT 30
5677: PUSH
5678: LD_INT 31
5680: PUSH
5681: LD_INT 32
5683: PUSH
5684: LD_INT 33
5686: PUSH
5687: LD_INT 34
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 101
5713: PUSH
5714: LD_INT 102
5716: PUSH
5717: LD_INT 103
5719: PUSH
5720: LD_INT 106
5722: PUSH
5723: LD_INT 108
5725: PUSH
5726: LD_INT 112
5728: PUSH
5729: LD_INT 113
5731: PUSH
5732: LD_INT 114
5734: PUSH
5735: LD_INT 116
5737: PUSH
5738: LD_INT 117
5740: PUSH
5741: LD_INT 118
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: ST_TO_ADDR
5761: GO 6392
5763: LD_INT 17
5765: DOUBLE
5766: EQUAL
5767: IFTRUE 5771
5769: GO 5995
5771: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5772: LD_ADDR_VAR 0 2
5776: PUSH
5777: LD_INT 1
5779: PUSH
5780: LD_INT 2
5782: PUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 4
5788: PUSH
5789: LD_INT 5
5791: PUSH
5792: LD_INT 6
5794: PUSH
5795: LD_INT 7
5797: PUSH
5798: LD_INT 8
5800: PUSH
5801: LD_INT 9
5803: PUSH
5804: LD_INT 10
5806: PUSH
5807: LD_INT 11
5809: PUSH
5810: LD_INT 12
5812: PUSH
5813: LD_INT 13
5815: PUSH
5816: LD_INT 14
5818: PUSH
5819: LD_INT 15
5821: PUSH
5822: LD_INT 16
5824: PUSH
5825: LD_INT 17
5827: PUSH
5828: LD_INT 18
5830: PUSH
5831: LD_INT 19
5833: PUSH
5834: LD_INT 20
5836: PUSH
5837: LD_INT 21
5839: PUSH
5840: LD_INT 22
5842: PUSH
5843: LD_INT 23
5845: PUSH
5846: LD_INT 24
5848: PUSH
5849: LD_INT 25
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 27
5857: PUSH
5858: LD_INT 28
5860: PUSH
5861: LD_INT 29
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: LD_INT 32
5872: PUSH
5873: LD_INT 33
5875: PUSH
5876: LD_INT 34
5878: PUSH
5879: LD_INT 36
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: PUSH
5919: LD_INT 101
5921: PUSH
5922: LD_INT 102
5924: PUSH
5925: LD_INT 103
5927: PUSH
5928: LD_INT 104
5930: PUSH
5931: LD_INT 105
5933: PUSH
5934: LD_INT 106
5936: PUSH
5937: LD_INT 107
5939: PUSH
5940: LD_INT 108
5942: PUSH
5943: LD_INT 109
5945: PUSH
5946: LD_INT 110
5948: PUSH
5949: LD_INT 111
5951: PUSH
5952: LD_INT 112
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 114
5960: PUSH
5961: LD_INT 116
5963: PUSH
5964: LD_INT 117
5966: PUSH
5967: LD_INT 118
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: ST_TO_ADDR
5993: GO 6392
5995: LD_INT 18
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6151
6003: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_INT 2
6011: PUSH
6012: LD_INT 4
6014: PUSH
6015: LD_INT 5
6017: PUSH
6018: LD_INT 7
6020: PUSH
6021: LD_INT 11
6023: PUSH
6024: LD_INT 12
6026: PUSH
6027: LD_INT 15
6029: PUSH
6030: LD_INT 16
6032: PUSH
6033: LD_INT 20
6035: PUSH
6036: LD_INT 21
6038: PUSH
6039: LD_INT 22
6041: PUSH
6042: LD_INT 23
6044: PUSH
6045: LD_INT 25
6047: PUSH
6048: LD_INT 26
6050: PUSH
6051: LD_INT 30
6053: PUSH
6054: LD_INT 31
6056: PUSH
6057: LD_INT 32
6059: PUSH
6060: LD_INT 33
6062: PUSH
6063: LD_INT 34
6065: PUSH
6066: LD_INT 35
6068: PUSH
6069: LD_INT 36
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 101
6097: PUSH
6098: LD_INT 102
6100: PUSH
6101: LD_INT 103
6103: PUSH
6104: LD_INT 106
6106: PUSH
6107: LD_INT 108
6109: PUSH
6110: LD_INT 112
6112: PUSH
6113: LD_INT 113
6115: PUSH
6116: LD_INT 114
6118: PUSH
6119: LD_INT 115
6121: PUSH
6122: LD_INT 116
6124: PUSH
6125: LD_INT 117
6127: PUSH
6128: LD_INT 118
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
6149: GO 6392
6151: LD_INT 19
6153: DOUBLE
6154: EQUAL
6155: IFTRUE 6159
6157: GO 6391
6159: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6160: LD_ADDR_VAR 0 2
6164: PUSH
6165: LD_INT 1
6167: PUSH
6168: LD_INT 2
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 4
6176: PUSH
6177: LD_INT 5
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 7
6185: PUSH
6186: LD_INT 8
6188: PUSH
6189: LD_INT 9
6191: PUSH
6192: LD_INT 10
6194: PUSH
6195: LD_INT 11
6197: PUSH
6198: LD_INT 12
6200: PUSH
6201: LD_INT 13
6203: PUSH
6204: LD_INT 14
6206: PUSH
6207: LD_INT 15
6209: PUSH
6210: LD_INT 16
6212: PUSH
6213: LD_INT 17
6215: PUSH
6216: LD_INT 18
6218: PUSH
6219: LD_INT 19
6221: PUSH
6222: LD_INT 20
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 23
6233: PUSH
6234: LD_INT 24
6236: PUSH
6237: LD_INT 25
6239: PUSH
6240: LD_INT 26
6242: PUSH
6243: LD_INT 27
6245: PUSH
6246: LD_INT 28
6248: PUSH
6249: LD_INT 29
6251: PUSH
6252: LD_INT 30
6254: PUSH
6255: LD_INT 31
6257: PUSH
6258: LD_INT 32
6260: PUSH
6261: LD_INT 33
6263: PUSH
6264: LD_INT 34
6266: PUSH
6267: LD_INT 35
6269: PUSH
6270: LD_INT 36
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 101
6313: PUSH
6314: LD_INT 102
6316: PUSH
6317: LD_INT 103
6319: PUSH
6320: LD_INT 104
6322: PUSH
6323: LD_INT 105
6325: PUSH
6326: LD_INT 106
6328: PUSH
6329: LD_INT 107
6331: PUSH
6332: LD_INT 108
6334: PUSH
6335: LD_INT 109
6337: PUSH
6338: LD_INT 110
6340: PUSH
6341: LD_INT 111
6343: PUSH
6344: LD_INT 112
6346: PUSH
6347: LD_INT 113
6349: PUSH
6350: LD_INT 114
6352: PUSH
6353: LD_INT 115
6355: PUSH
6356: LD_INT 116
6358: PUSH
6359: LD_INT 117
6361: PUSH
6362: LD_INT 118
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 6392
6391: POP
// end else
6392: GO 6623
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 3
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: LD_INT 6
6416: PUSH
6417: LD_INT 7
6419: PUSH
6420: LD_INT 8
6422: PUSH
6423: LD_INT 9
6425: PUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 11
6431: PUSH
6432: LD_INT 12
6434: PUSH
6435: LD_INT 13
6437: PUSH
6438: LD_INT 14
6440: PUSH
6441: LD_INT 15
6443: PUSH
6444: LD_INT 16
6446: PUSH
6447: LD_INT 17
6449: PUSH
6450: LD_INT 18
6452: PUSH
6453: LD_INT 19
6455: PUSH
6456: LD_INT 20
6458: PUSH
6459: LD_INT 21
6461: PUSH
6462: LD_INT 22
6464: PUSH
6465: LD_INT 23
6467: PUSH
6468: LD_INT 24
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 26
6476: PUSH
6477: LD_INT 27
6479: PUSH
6480: LD_INT 28
6482: PUSH
6483: LD_INT 29
6485: PUSH
6486: LD_INT 30
6488: PUSH
6489: LD_INT 31
6491: PUSH
6492: LD_INT 32
6494: PUSH
6495: LD_INT 33
6497: PUSH
6498: LD_INT 34
6500: PUSH
6501: LD_INT 35
6503: PUSH
6504: LD_INT 36
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 101
6547: PUSH
6548: LD_INT 102
6550: PUSH
6551: LD_INT 103
6553: PUSH
6554: LD_INT 104
6556: PUSH
6557: LD_INT 105
6559: PUSH
6560: LD_INT 106
6562: PUSH
6563: LD_INT 107
6565: PUSH
6566: LD_INT 108
6568: PUSH
6569: LD_INT 109
6571: PUSH
6572: LD_INT 110
6574: PUSH
6575: LD_INT 111
6577: PUSH
6578: LD_INT 112
6580: PUSH
6581: LD_INT 113
6583: PUSH
6584: LD_INT 114
6586: PUSH
6587: LD_INT 115
6589: PUSH
6590: LD_INT 116
6592: PUSH
6593: LD_INT 117
6595: PUSH
6596: LD_INT 118
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
// if result then
6623: LD_VAR 0 2
6627: IFFALSE 7413
// begin normal :=  ;
6629: LD_ADDR_VAR 0 5
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hardcore :=  ;
6637: LD_ADDR_VAR 0 6
6641: PUSH
6642: LD_STRING 
6644: ST_TO_ADDR
// active :=  ;
6645: LD_ADDR_VAR 0 7
6649: PUSH
6650: LD_STRING 
6652: ST_TO_ADDR
// for i = 1 to normalCounter do
6653: LD_ADDR_VAR 0 8
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_EXP 4
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6770
// begin tmp := 0 ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_STRING 0
6678: ST_TO_ADDR
// if result [ 1 ] then
6679: LD_VAR 0 2
6683: PUSH
6684: LD_INT 1
6686: ARRAY
6687: IFFALSE 6752
// if result [ 1 ] [ 1 ] = i then
6689: LD_VAR 0 2
6693: PUSH
6694: LD_INT 1
6696: ARRAY
6697: PUSH
6698: LD_INT 1
6700: ARRAY
6701: PUSH
6702: LD_VAR 0 8
6706: EQUAL
6707: IFFALSE 6752
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_INT 1
6721: PPUSH
6722: LD_VAR 0 2
6726: PUSH
6727: LD_INT 1
6729: ARRAY
6730: PPUSH
6731: LD_INT 1
6733: PPUSH
6734: CALL_OW 3
6738: PPUSH
6739: CALL_OW 1
6743: ST_TO_ADDR
// tmp := 1 ;
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_STRING 1
6751: ST_TO_ADDR
// end ; normal := normal & tmp ;
6752: LD_ADDR_VAR 0 5
6756: PUSH
6757: LD_VAR 0 5
6761: PUSH
6762: LD_VAR 0 3
6766: STR
6767: ST_TO_ADDR
// end ;
6768: GO 6668
6770: POP
6771: POP
// for i = 1 to hardcoreCounter do
6772: LD_ADDR_VAR 0 8
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_EXP 5
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6893
// begin tmp := 0 ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_STRING 0
6797: ST_TO_ADDR
// if result [ 2 ] then
6798: LD_VAR 0 2
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: IFFALSE 6875
// if result [ 2 ] [ 1 ] = 100 + i then
6808: LD_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: ARRAY
6816: PUSH
6817: LD_INT 1
6819: ARRAY
6820: PUSH
6821: LD_INT 100
6823: PUSH
6824: LD_VAR 0 8
6828: PLUS
6829: EQUAL
6830: IFFALSE 6875
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6832: LD_ADDR_VAR 0 2
6836: PUSH
6837: LD_VAR 0 2
6841: PPUSH
6842: LD_INT 2
6844: PPUSH
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 2
6852: ARRAY
6853: PPUSH
6854: LD_INT 1
6856: PPUSH
6857: CALL_OW 3
6861: PPUSH
6862: CALL_OW 1
6866: ST_TO_ADDR
// tmp := 1 ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_STRING 1
6874: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6875: LD_ADDR_VAR 0 6
6879: PUSH
6880: LD_VAR 0 6
6884: PUSH
6885: LD_VAR 0 3
6889: STR
6890: ST_TO_ADDR
// end ;
6891: GO 6787
6893: POP
6894: POP
// if isGameLoad then
6895: LD_VAR 0 1
6899: IFFALSE 7374
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6901: LD_ADDR_VAR 0 4
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: LD_EXP 7
6915: PUSH
6916: LD_EXP 9
6920: PUSH
6921: LD_EXP 6
6925: PUSH
6926: LD_EXP 10
6930: PUSH
6931: LD_EXP 11
6935: PUSH
6936: LD_EXP 12
6940: PUSH
6941: LD_EXP 13
6945: PUSH
6946: LD_EXP 14
6950: PUSH
6951: LD_EXP 15
6955: PUSH
6956: LD_EXP 16
6960: PUSH
6961: LD_EXP 17
6965: PUSH
6966: LD_EXP 18
6970: PUSH
6971: LD_EXP 19
6975: PUSH
6976: LD_EXP 27
6980: PUSH
6981: LD_EXP 28
6985: PUSH
6986: LD_EXP 29
6990: PUSH
6991: LD_EXP 30
6995: PUSH
6996: LD_EXP 32
7000: PUSH
7001: LD_EXP 33
7005: PUSH
7006: LD_EXP 34
7010: PUSH
7011: LD_EXP 37
7015: PUSH
7016: LD_EXP 39
7020: PUSH
7021: LD_EXP 40
7025: PUSH
7026: LD_EXP 41
7030: PUSH
7031: LD_EXP 43
7035: PUSH
7036: LD_EXP 44
7040: PUSH
7041: LD_EXP 47
7045: PUSH
7046: LD_EXP 48
7050: PUSH
7051: LD_EXP 49
7055: PUSH
7056: LD_EXP 50
7060: PUSH
7061: LD_EXP 51
7065: PUSH
7066: LD_EXP 52
7070: PUSH
7071: LD_EXP 53
7075: PUSH
7076: LD_EXP 54
7080: PUSH
7081: LD_EXP 55
7085: PUSH
7086: LD_EXP 20
7090: PUSH
7091: LD_EXP 21
7095: PUSH
7096: LD_EXP 24
7100: PUSH
7101: LD_EXP 25
7105: PUSH
7106: LD_EXP 26
7110: PUSH
7111: LD_EXP 22
7115: PUSH
7116: LD_EXP 23
7120: PUSH
7121: LD_EXP 31
7125: PUSH
7126: LD_EXP 35
7130: PUSH
7131: LD_EXP 36
7135: PUSH
7136: LD_EXP 38
7140: PUSH
7141: LD_EXP 42
7145: PUSH
7146: LD_EXP 45
7150: PUSH
7151: LD_EXP 46
7155: PUSH
7156: LD_EXP 56
7160: PUSH
7161: LD_EXP 57
7165: PUSH
7166: LD_EXP 58
7170: PUSH
7171: LD_EXP 59
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: ST_TO_ADDR
// tmp :=  ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 
7239: ST_TO_ADDR
// for i = 1 to normalCounter do
7240: LD_ADDR_VAR 0 8
7244: PUSH
7245: DOUBLE
7246: LD_INT 1
7248: DEC
7249: ST_TO_ADDR
7250: LD_EXP 4
7254: PUSH
7255: FOR_TO
7256: IFFALSE 7292
// begin if flags [ i ] then
7258: LD_VAR 0 4
7262: PUSH
7263: LD_VAR 0 8
7267: ARRAY
7268: IFFALSE 7290
// tmp := tmp & i & ; ;
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_VAR 0 3
7279: PUSH
7280: LD_VAR 0 8
7284: STR
7285: PUSH
7286: LD_STRING ;
7288: STR
7289: ST_TO_ADDR
// end ;
7290: GO 7255
7292: POP
7293: POP
// for i = 1 to hardcoreCounter do
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_EXP 5
7308: PUSH
7309: FOR_TO
7310: IFFALSE 7356
// begin if flags [ normalCounter + i ] then
7312: LD_VAR 0 4
7316: PUSH
7317: LD_EXP 4
7321: PUSH
7322: LD_VAR 0 8
7326: PLUS
7327: ARRAY
7328: IFFALSE 7354
// tmp := tmp & ( 100 + i ) & ; ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 100
7342: PUSH
7343: LD_VAR 0 8
7347: PLUS
7348: STR
7349: PUSH
7350: LD_STRING ;
7352: STR
7353: ST_TO_ADDR
// end ;
7354: GO 7309
7356: POP
7357: POP
// if tmp then
7358: LD_VAR 0 3
7362: IFFALSE 7374
// active := tmp ;
7364: LD_ADDR_VAR 0 7
7368: PUSH
7369: LD_VAR 0 3
7373: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7374: LD_STRING getStreamItemsFromMission("
7376: PUSH
7377: LD_VAR 0 5
7381: STR
7382: PUSH
7383: LD_STRING ","
7385: STR
7386: PUSH
7387: LD_VAR 0 6
7391: STR
7392: PUSH
7393: LD_STRING ","
7395: STR
7396: PUSH
7397: LD_VAR 0 7
7401: STR
7402: PUSH
7403: LD_STRING ")
7405: STR
7406: PPUSH
7407: CALL_OW 559
// end else
7411: GO 7420
// ToLua ( getStreamItemsFromMission("","","") ) ;
7413: LD_STRING getStreamItemsFromMission("","","")
7415: PPUSH
7416: CALL_OW 559
// end ;
7420: LD_VAR 0 2
7424: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7425: LD_EXP 3
7429: PUSH
7430: LD_EXP 8
7434: AND
7435: IFFALSE 7559
7437: GO 7439
7439: DISABLE
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
// begin enable ;
7444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7445: LD_ADDR_VAR 0 2
7449: PUSH
7450: LD_INT 22
7452: PUSH
7453: LD_OWVAR 2
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 34
7467: PUSH
7468: LD_INT 7
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 34
7477: PUSH
7478: LD_INT 45
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 34
7487: PUSH
7488: LD_INT 28
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 34
7497: PUSH
7498: LD_INT 47
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: CALL_OW 69
7520: ST_TO_ADDR
// if not tmp then
7521: LD_VAR 0 2
7525: NOT
7526: IFFALSE 7530
// exit ;
7528: GO 7559
// for i in tmp do
7530: LD_ADDR_VAR 0 1
7534: PUSH
7535: LD_VAR 0 2
7539: PUSH
7540: FOR_IN
7541: IFFALSE 7557
// begin SetLives ( i , 0 ) ;
7543: LD_VAR 0 1
7547: PPUSH
7548: LD_INT 0
7550: PPUSH
7551: CALL_OW 234
// end ;
7555: GO 7540
7557: POP
7558: POP
// end ;
7559: PPOPN 2
7561: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7562: LD_EXP 3
7566: PUSH
7567: LD_EXP 9
7571: AND
7572: IFFALSE 7656
7574: GO 7576
7576: DISABLE
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
// begin enable ;
7581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_INT 22
7589: PUSH
7590: LD_OWVAR 2
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 32
7601: PUSH
7602: LD_INT 3
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: ST_TO_ADDR
// if not tmp then
7618: LD_VAR 0 2
7622: NOT
7623: IFFALSE 7627
// exit ;
7625: GO 7656
// for i in tmp do
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_VAR 0 2
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7654
// begin SetLives ( i , 0 ) ;
7640: LD_VAR 0 1
7644: PPUSH
7645: LD_INT 0
7647: PPUSH
7648: CALL_OW 234
// end ;
7652: GO 7637
7654: POP
7655: POP
// end ;
7656: PPOPN 2
7658: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7659: LD_EXP 3
7663: PUSH
7664: LD_EXP 6
7668: AND
7669: IFFALSE 7762
7671: GO 7673
7673: DISABLE
7674: LD_INT 0
7676: PPUSH
// begin enable ;
7677: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7678: LD_ADDR_VAR 0 1
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_OWVAR 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 9
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 25
7720: PUSH
7721: LD_INT 8
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PUSH
7743: FOR_IN
7744: IFFALSE 7760
// begin SetClass ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 336
// end ;
7758: GO 7743
7760: POP
7761: POP
// end ;
7762: PPOPN 1
7764: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7765: LD_EXP 3
7769: PUSH
7770: LD_EXP 7
7774: AND
7775: PUSH
7776: LD_OWVAR 65
7780: PUSH
7781: LD_INT 7
7783: LESS
7784: AND
7785: IFFALSE 7799
7787: GO 7789
7789: DISABLE
// begin enable ;
7790: ENABLE
// game_speed := 7 ;
7791: LD_ADDR_OWVAR 65
7795: PUSH
7796: LD_INT 7
7798: ST_TO_ADDR
// end ;
7799: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7800: LD_EXP 3
7804: PUSH
7805: LD_EXP 10
7809: AND
7810: IFFALSE 8012
7812: GO 7814
7814: DISABLE
7815: LD_INT 0
7817: PPUSH
7818: PPUSH
7819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 81
7827: PUSH
7828: LD_OWVAR 2
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: ST_TO_ADDR
// if not tmp then
7856: LD_VAR 0 3
7860: NOT
7861: IFFALSE 7865
// exit ;
7863: GO 8012
// if tmp > 5 then
7865: LD_VAR 0 3
7869: PUSH
7870: LD_INT 5
7872: GREATER
7873: IFFALSE 7885
// k := 5 else
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 5
7882: ST_TO_ADDR
7883: GO 7895
// k := tmp ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_VAR 0 3
7894: ST_TO_ADDR
// for i := 1 to k do
7895: LD_ADDR_VAR 0 1
7899: PUSH
7900: DOUBLE
7901: LD_INT 1
7903: DEC
7904: ST_TO_ADDR
7905: LD_VAR 0 2
7909: PUSH
7910: FOR_TO
7911: IFFALSE 8010
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7913: LD_VAR 0 3
7917: PUSH
7918: LD_VAR 0 1
7922: ARRAY
7923: PPUSH
7924: LD_VAR 0 1
7928: PUSH
7929: LD_INT 4
7931: MOD
7932: PUSH
7933: LD_INT 1
7935: PLUS
7936: PPUSH
7937: CALL_OW 259
7941: PUSH
7942: LD_INT 10
7944: LESS
7945: IFFALSE 8008
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7947: LD_VAR 0 3
7951: PUSH
7952: LD_VAR 0 1
7956: ARRAY
7957: PPUSH
7958: LD_VAR 0 1
7962: PUSH
7963: LD_INT 4
7965: MOD
7966: PUSH
7967: LD_INT 1
7969: PLUS
7970: PPUSH
7971: LD_VAR 0 3
7975: PUSH
7976: LD_VAR 0 1
7980: ARRAY
7981: PPUSH
7982: LD_VAR 0 1
7986: PUSH
7987: LD_INT 4
7989: MOD
7990: PUSH
7991: LD_INT 1
7993: PLUS
7994: PPUSH
7995: CALL_OW 259
7999: PUSH
8000: LD_INT 1
8002: PLUS
8003: PPUSH
8004: CALL_OW 237
8008: GO 7910
8010: POP
8011: POP
// end ;
8012: PPOPN 3
8014: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8015: LD_EXP 3
8019: PUSH
8020: LD_EXP 11
8024: AND
8025: IFFALSE 8045
8027: GO 8029
8029: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8030: LD_INT 4
8032: PPUSH
8033: LD_OWVAR 2
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: CALL_OW 324
8045: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8046: LD_EXP 3
8050: PUSH
8051: LD_EXP 40
8055: AND
8056: IFFALSE 8076
8058: GO 8060
8060: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8061: LD_INT 19
8063: PPUSH
8064: LD_OWVAR 2
8068: PPUSH
8069: LD_INT 0
8071: PPUSH
8072: CALL_OW 324
8076: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8077: LD_EXP 3
8081: PUSH
8082: LD_EXP 12
8086: AND
8087: IFFALSE 8189
8089: GO 8091
8091: DISABLE
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin enable ;
8096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_OWVAR 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 34
8119: PUSH
8120: LD_INT 11
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 34
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: ST_TO_ADDR
// if not tmp then
8151: LD_VAR 0 2
8155: NOT
8156: IFFALSE 8160
// exit ;
8158: GO 8189
// for i in tmp do
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: FOR_IN
8171: IFFALSE 8187
// begin SetLives ( i , 0 ) ;
8173: LD_VAR 0 1
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 234
// end ;
8185: GO 8170
8187: POP
8188: POP
// end ;
8189: PPOPN 2
8191: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8192: LD_EXP 3
8196: PUSH
8197: LD_EXP 13
8201: AND
8202: IFFALSE 8222
8204: GO 8206
8206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8207: LD_INT 32
8209: PPUSH
8210: LD_OWVAR 2
8214: PPUSH
8215: LD_INT 0
8217: PPUSH
8218: CALL_OW 324
8222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8223: LD_EXP 3
8227: PUSH
8228: LD_EXP 14
8232: AND
8233: IFFALSE 8414
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_INT 22
8250: PUSH
8251: LD_OWVAR 2
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: ST_TO_ADDR
// if not tmp then
8279: LD_VAR 0 2
8283: NOT
8284: IFFALSE 8288
// exit ;
8286: GO 8414
// side := 0 ;
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 0
8295: ST_TO_ADDR
// for i := 1 to 8 do
8296: LD_ADDR_VAR 0 1
8300: PUSH
8301: DOUBLE
8302: LD_INT 1
8304: DEC
8305: ST_TO_ADDR
8306: LD_INT 8
8308: PUSH
8309: FOR_TO
8310: IFFALSE 8358
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8312: LD_OWVAR 2
8316: PUSH
8317: LD_VAR 0 1
8321: NONEQUAL
8322: PUSH
8323: LD_OWVAR 2
8327: PPUSH
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL_OW 81
8337: PUSH
8338: LD_INT 2
8340: EQUAL
8341: AND
8342: IFFALSE 8356
// begin side := i ;
8344: LD_ADDR_VAR 0 3
8348: PUSH
8349: LD_VAR 0 1
8353: ST_TO_ADDR
// break ;
8354: GO 8358
// end ;
8356: GO 8309
8358: POP
8359: POP
// if not side then
8360: LD_VAR 0 3
8364: NOT
8365: IFFALSE 8369
// exit ;
8367: GO 8414
// for i := 1 to tmp do
8369: LD_ADDR_VAR 0 1
8373: PUSH
8374: DOUBLE
8375: LD_INT 1
8377: DEC
8378: ST_TO_ADDR
8379: LD_VAR 0 2
8383: PUSH
8384: FOR_TO
8385: IFFALSE 8412
// if Prob ( 60 ) then
8387: LD_INT 60
8389: PPUSH
8390: CALL_OW 13
8394: IFFALSE 8410
// SetSide ( i , side ) ;
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 3
8405: PPUSH
8406: CALL_OW 235
8410: GO 8384
8412: POP
8413: POP
// end ;
8414: PPOPN 3
8416: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8417: LD_EXP 3
8421: PUSH
8422: LD_EXP 16
8426: AND
8427: IFFALSE 8546
8429: GO 8431
8431: DISABLE
8432: LD_INT 0
8434: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8435: LD_ADDR_VAR 0 1
8439: PUSH
8440: LD_INT 22
8442: PUSH
8443: LD_OWVAR 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: LD_INT 23
8467: PUSH
8468: LD_INT 0
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: PPUSH
8484: CALL_OW 69
8488: PUSH
8489: FOR_IN
8490: IFFALSE 8544
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8492: LD_VAR 0 1
8496: PPUSH
8497: CALL_OW 257
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: LD_INT 2
8507: PUSH
8508: LD_INT 3
8510: PUSH
8511: LD_INT 4
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: IN
8520: IFFALSE 8542
// SetClass ( un , rand ( 1 , 4 ) ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: LD_INT 4
8532: PPUSH
8533: CALL_OW 12
8537: PPUSH
8538: CALL_OW 336
8542: GO 8489
8544: POP
8545: POP
// end ;
8546: PPOPN 1
8548: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8549: LD_EXP 3
8553: PUSH
8554: LD_EXP 15
8558: AND
8559: IFFALSE 8638
8561: GO 8563
8563: DISABLE
8564: LD_INT 0
8566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8567: LD_ADDR_VAR 0 1
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_OWVAR 2
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 21
8586: PUSH
8587: LD_INT 3
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: ST_TO_ADDR
// if not tmp then
8603: LD_VAR 0 1
8607: NOT
8608: IFFALSE 8612
// exit ;
8610: GO 8638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8612: LD_VAR 0 1
8616: PUSH
8617: LD_INT 1
8619: PPUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL_OW 12
8629: ARRAY
8630: PPUSH
8631: LD_INT 100
8633: PPUSH
8634: CALL_OW 234
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8641: LD_EXP 3
8645: PUSH
8646: LD_EXP 17
8650: AND
8651: IFFALSE 8749
8653: GO 8655
8655: DISABLE
8656: LD_INT 0
8658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8659: LD_ADDR_VAR 0 1
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_OWVAR 2
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// if not tmp then
8695: LD_VAR 0 1
8699: NOT
8700: IFFALSE 8704
// exit ;
8702: GO 8749
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8704: LD_VAR 0 1
8708: PUSH
8709: LD_INT 1
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 12
8721: ARRAY
8722: PPUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_INT 4
8728: PPUSH
8729: CALL_OW 12
8733: PPUSH
8734: LD_INT 3000
8736: PPUSH
8737: LD_INT 9000
8739: PPUSH
8740: CALL_OW 12
8744: PPUSH
8745: CALL_OW 492
// end ;
8749: PPOPN 1
8751: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8752: LD_EXP 3
8756: PUSH
8757: LD_EXP 18
8761: AND
8762: IFFALSE 8782
8764: GO 8766
8766: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8767: LD_INT 1
8769: PPUSH
8770: LD_OWVAR 2
8774: PPUSH
8775: LD_INT 0
8777: PPUSH
8778: CALL_OW 324
8782: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8783: LD_EXP 3
8787: PUSH
8788: LD_EXP 19
8792: AND
8793: IFFALSE 8876
8795: GO 8797
8797: DISABLE
8798: LD_INT 0
8800: PPUSH
8801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_OWVAR 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 69
8837: ST_TO_ADDR
// if not tmp then
8838: LD_VAR 0 2
8842: NOT
8843: IFFALSE 8847
// exit ;
8845: GO 8876
// for i in tmp do
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_VAR 0 2
8856: PUSH
8857: FOR_IN
8858: IFFALSE 8874
// SetBLevel ( i , 10 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 10
8867: PPUSH
8868: CALL_OW 241
8872: GO 8857
8874: POP
8875: POP
// end ;
8876: PPOPN 2
8878: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8879: LD_EXP 3
8883: PUSH
8884: LD_EXP 20
8888: AND
8889: IFFALSE 9000
8891: GO 8893
8893: DISABLE
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_INT 22
8906: PUSH
8907: LD_OWVAR 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: ST_TO_ADDR
// if not tmp then
8935: LD_VAR 0 3
8939: NOT
8940: IFFALSE 8944
// exit ;
8942: GO 9000
// un := tmp [ rand ( 1 , tmp ) ] ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_VAR 0 3
8953: PUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: CALL_OW 12
8966: ARRAY
8967: ST_TO_ADDR
// if Crawls ( un ) then
8968: LD_VAR 0 2
8972: PPUSH
8973: CALL_OW 318
8977: IFFALSE 8988
// ComWalk ( un ) ;
8979: LD_VAR 0 2
8983: PPUSH
8984: CALL_OW 138
// SetClass ( un , class_sniper ) ;
8988: LD_VAR 0 2
8992: PPUSH
8993: LD_INT 5
8995: PPUSH
8996: CALL_OW 336
// end ;
9000: PPOPN 3
9002: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9003: LD_EXP 3
9007: PUSH
9008: LD_EXP 21
9012: AND
9013: PUSH
9014: LD_OWVAR 67
9018: PUSH
9019: LD_INT 4
9021: LESS
9022: AND
9023: IFFALSE 9042
9025: GO 9027
9027: DISABLE
// begin Difficulty := Difficulty + 1 ;
9028: LD_ADDR_OWVAR 67
9032: PUSH
9033: LD_OWVAR 67
9037: PUSH
9038: LD_INT 1
9040: PLUS
9041: ST_TO_ADDR
// end ;
9042: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9043: LD_EXP 3
9047: PUSH
9048: LD_EXP 22
9052: AND
9053: IFFALSE 9156
9055: GO 9057
9057: DISABLE
9058: LD_INT 0
9060: PPUSH
// begin for i := 1 to 5 do
9061: LD_ADDR_VAR 0 1
9065: PUSH
9066: DOUBLE
9067: LD_INT 1
9069: DEC
9070: ST_TO_ADDR
9071: LD_INT 5
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9154
// begin uc_nation := nation_nature ;
9077: LD_ADDR_OWVAR 21
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// uc_side := 0 ;
9085: LD_ADDR_OWVAR 20
9089: PUSH
9090: LD_INT 0
9092: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9093: LD_ADDR_OWVAR 29
9097: PUSH
9098: LD_INT 12
9100: PUSH
9101: LD_INT 12
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: ST_TO_ADDR
// hc_agressivity := 20 ;
9108: LD_ADDR_OWVAR 35
9112: PUSH
9113: LD_INT 20
9115: ST_TO_ADDR
// hc_class := class_tiger ;
9116: LD_ADDR_OWVAR 28
9120: PUSH
9121: LD_INT 14
9123: ST_TO_ADDR
// hc_gallery :=  ;
9124: LD_ADDR_OWVAR 33
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// hc_name :=  ;
9132: LD_ADDR_OWVAR 26
9136: PUSH
9137: LD_STRING 
9139: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9140: CALL_OW 44
9144: PPUSH
9145: LD_INT 0
9147: PPUSH
9148: CALL_OW 51
// end ;
9152: GO 9074
9154: POP
9155: POP
// end ;
9156: PPOPN 1
9158: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9159: LD_EXP 3
9163: PUSH
9164: LD_EXP 23
9168: AND
9169: IFFALSE 9178
9171: GO 9173
9173: DISABLE
// StreamSibBomb ;
9174: CALL 9179 0 0
9178: END
// export function StreamSibBomb ; var i , x , y ; begin
9179: LD_INT 0
9181: PPUSH
9182: PPUSH
9183: PPUSH
9184: PPUSH
// result := false ;
9185: LD_ADDR_VAR 0 1
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// for i := 1 to 16 do
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_INT 16
9205: PUSH
9206: FOR_TO
9207: IFFALSE 9406
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9209: LD_ADDR_VAR 0 3
9213: PUSH
9214: LD_INT 10
9216: PUSH
9217: LD_INT 20
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 40
9225: PUSH
9226: LD_INT 50
9228: PUSH
9229: LD_INT 60
9231: PUSH
9232: LD_INT 70
9234: PUSH
9235: LD_INT 80
9237: PUSH
9238: LD_INT 90
9240: PUSH
9241: LD_INT 100
9243: PUSH
9244: LD_INT 110
9246: PUSH
9247: LD_INT 120
9249: PUSH
9250: LD_INT 130
9252: PUSH
9253: LD_INT 140
9255: PUSH
9256: LD_INT 150
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 1
9278: PPUSH
9279: LD_INT 15
9281: PPUSH
9282: CALL_OW 12
9286: ARRAY
9287: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9288: LD_ADDR_VAR 0 4
9292: PUSH
9293: LD_INT 10
9295: PUSH
9296: LD_INT 20
9298: PUSH
9299: LD_INT 30
9301: PUSH
9302: LD_INT 40
9304: PUSH
9305: LD_INT 50
9307: PUSH
9308: LD_INT 60
9310: PUSH
9311: LD_INT 70
9313: PUSH
9314: LD_INT 80
9316: PUSH
9317: LD_INT 90
9319: PUSH
9320: LD_INT 100
9322: PUSH
9323: LD_INT 110
9325: PUSH
9326: LD_INT 120
9328: PUSH
9329: LD_INT 130
9331: PUSH
9332: LD_INT 140
9334: PUSH
9335: LD_INT 150
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_INT 15
9360: PPUSH
9361: CALL_OW 12
9365: ARRAY
9366: ST_TO_ADDR
// if ValidHex ( x , y ) then
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_VAR 0 4
9376: PPUSH
9377: CALL_OW 488
9381: IFFALSE 9404
// begin result := [ x , y ] ;
9383: LD_ADDR_VAR 0 1
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: LD_VAR 0 4
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: ST_TO_ADDR
// break ;
9402: GO 9406
// end ; end ;
9404: GO 9206
9406: POP
9407: POP
// if result then
9408: LD_VAR 0 1
9412: IFFALSE 9472
// begin ToLua ( playSibBomb() ) ;
9414: LD_STRING playSibBomb()
9416: PPUSH
9417: CALL_OW 559
// wait ( 0 0$14 ) ;
9421: LD_INT 490
9423: PPUSH
9424: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9428: LD_VAR 0 1
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_VAR 0 1
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PPUSH
9446: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9450: LD_VAR 0 1
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_VAR 0 1
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: PPUSH
9468: CALL_OW 429
// end ; end ;
9472: LD_VAR 0 1
9476: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9477: LD_EXP 3
9481: PUSH
9482: LD_EXP 25
9486: AND
9487: IFFALSE 9499
9489: GO 9491
9491: DISABLE
// YouLost (  ) ;
9492: LD_STRING 
9494: PPUSH
9495: CALL_OW 104
9499: END
// every 0 0$1 trigger StreamModeActive and sFog do
9500: LD_EXP 3
9504: PUSH
9505: LD_EXP 24
9509: AND
9510: IFFALSE 9524
9512: GO 9514
9514: DISABLE
// FogOff ( your_side ) ;
9515: LD_OWVAR 2
9519: PPUSH
9520: CALL_OW 344
9524: END
// every 0 0$1 trigger StreamModeActive and sSun do
9525: LD_EXP 3
9529: PUSH
9530: LD_EXP 26
9534: AND
9535: IFFALSE 9563
9537: GO 9539
9539: DISABLE
// begin solar_recharge_percent := 0 ;
9540: LD_ADDR_OWVAR 79
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9548: LD_INT 10500
9550: PPUSH
9551: CALL_OW 67
// solar_recharge_percent := 100 ;
9555: LD_ADDR_OWVAR 79
9559: PUSH
9560: LD_INT 100
9562: ST_TO_ADDR
// end ;
9563: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9564: LD_EXP 3
9568: PUSH
9569: LD_EXP 27
9573: AND
9574: IFFALSE 9813
9576: GO 9578
9578: DISABLE
9579: LD_INT 0
9581: PPUSH
9582: PPUSH
9583: PPUSH
// begin tmp := [ ] ;
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: EMPTY
9590: ST_TO_ADDR
// for i := 1 to 6 do
9591: LD_ADDR_VAR 0 1
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 6
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9710
// begin uc_nation := nation_nature ;
9607: LD_ADDR_OWVAR 21
9611: PUSH
9612: LD_INT 0
9614: ST_TO_ADDR
// uc_side := 0 ;
9615: LD_ADDR_OWVAR 20
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9623: LD_ADDR_OWVAR 29
9627: PUSH
9628: LD_INT 12
9630: PUSH
9631: LD_INT 12
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: ST_TO_ADDR
// hc_agressivity := 20 ;
9638: LD_ADDR_OWVAR 35
9642: PUSH
9643: LD_INT 20
9645: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9646: LD_ADDR_OWVAR 28
9650: PUSH
9651: LD_INT 17
9653: ST_TO_ADDR
// hc_gallery :=  ;
9654: LD_ADDR_OWVAR 33
9658: PUSH
9659: LD_STRING 
9661: ST_TO_ADDR
// hc_name :=  ;
9662: LD_ADDR_OWVAR 26
9666: PUSH
9667: LD_STRING 
9669: ST_TO_ADDR
// un := CreateHuman ;
9670: LD_ADDR_VAR 0 2
9674: PUSH
9675: CALL_OW 44
9679: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 51
// tmp := tmp ^ un ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: LD_VAR 0 3
9701: PUSH
9702: LD_VAR 0 2
9706: ADD
9707: ST_TO_ADDR
// end ;
9708: GO 9604
9710: POP
9711: POP
// repeat wait ( 0 0$1 ) ;
9712: LD_INT 35
9714: PPUSH
9715: CALL_OW 67
// for un in tmp do
9719: LD_ADDR_VAR 0 2
9723: PUSH
9724: LD_VAR 0 3
9728: PUSH
9729: FOR_IN
9730: IFFALSE 9804
// begin if IsDead ( un ) then
9732: LD_VAR 0 2
9736: PPUSH
9737: CALL_OW 301
9741: IFFALSE 9761
// begin tmp := tmp diff un ;
9743: LD_ADDR_VAR 0 3
9747: PUSH
9748: LD_VAR 0 3
9752: PUSH
9753: LD_VAR 0 2
9757: DIFF
9758: ST_TO_ADDR
// continue ;
9759: GO 9729
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9761: LD_VAR 0 2
9765: PPUSH
9766: LD_INT 3
9768: PUSH
9769: LD_INT 22
9771: PUSH
9772: LD_INT 0
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PPUSH
9783: CALL_OW 69
9787: PPUSH
9788: LD_VAR 0 2
9792: PPUSH
9793: CALL_OW 74
9797: PPUSH
9798: CALL_OW 115
// end ;
9802: GO 9729
9804: POP
9805: POP
// until not tmp ;
9806: LD_VAR 0 3
9810: NOT
9811: IFFALSE 9712
// end ;
9813: PPOPN 3
9815: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9816: LD_EXP 3
9820: PUSH
9821: LD_EXP 28
9825: AND
9826: IFFALSE 9880
9828: GO 9830
9830: DISABLE
// begin ToLua ( displayTroll(); ) ;
9831: LD_STRING displayTroll();
9833: PPUSH
9834: CALL_OW 559
// wait ( 3 3$00 ) ;
9838: LD_INT 6300
9840: PPUSH
9841: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9845: LD_STRING hideTroll();
9847: PPUSH
9848: CALL_OW 559
// wait ( 1 1$00 ) ;
9852: LD_INT 2100
9854: PPUSH
9855: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9859: LD_STRING displayTroll();
9861: PPUSH
9862: CALL_OW 559
// wait ( 1 1$00 ) ;
9866: LD_INT 2100
9868: PPUSH
9869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9873: LD_STRING hideTroll();
9875: PPUSH
9876: CALL_OW 559
// end ;
9880: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9881: LD_EXP 3
9885: PUSH
9886: LD_EXP 29
9890: AND
9891: IFFALSE 9954
9893: GO 9895
9895: DISABLE
9896: LD_INT 0
9898: PPUSH
// begin p := 0 ;
9899: LD_ADDR_VAR 0 1
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// repeat game_speed := 1 ;
9907: LD_ADDR_OWVAR 65
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9915: LD_INT 35
9917: PPUSH
9918: CALL_OW 67
// p := p + 1 ;
9922: LD_ADDR_VAR 0 1
9926: PUSH
9927: LD_VAR 0 1
9931: PUSH
9932: LD_INT 1
9934: PLUS
9935: ST_TO_ADDR
// until p >= 60 ;
9936: LD_VAR 0 1
9940: PUSH
9941: LD_INT 60
9943: GREATEREQUAL
9944: IFFALSE 9907
// game_speed := 4 ;
9946: LD_ADDR_OWVAR 65
9950: PUSH
9951: LD_INT 4
9953: ST_TO_ADDR
// end ;
9954: PPOPN 1
9956: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9957: LD_EXP 3
9961: PUSH
9962: LD_EXP 30
9966: AND
9967: IFFALSE 10113
9969: GO 9971
9971: DISABLE
9972: LD_INT 0
9974: PPUSH
9975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9976: LD_ADDR_VAR 0 1
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_OWVAR 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 30
9998: PUSH
9999: LD_INT 0
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 30
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PPUSH
10025: CALL_OW 69
10029: ST_TO_ADDR
// if not depot then
10030: LD_VAR 0 1
10034: NOT
10035: IFFALSE 10039
// exit ;
10037: GO 10113
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10039: LD_ADDR_VAR 0 2
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: LD_INT 1
10051: PPUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 12
10061: ARRAY
10062: PPUSH
10063: CALL_OW 274
10067: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10068: LD_VAR 0 2
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: LD_INT 0
10078: PPUSH
10079: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10083: LD_VAR 0 2
10087: PPUSH
10088: LD_INT 2
10090: PPUSH
10091: LD_INT 0
10093: PPUSH
10094: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10098: LD_VAR 0 2
10102: PPUSH
10103: LD_INT 3
10105: PPUSH
10106: LD_INT 0
10108: PPUSH
10109: CALL_OW 277
// end ;
10113: PPOPN 2
10115: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10116: LD_EXP 3
10120: PUSH
10121: LD_EXP 31
10125: AND
10126: IFFALSE 10223
10128: GO 10130
10130: DISABLE
10131: LD_INT 0
10133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_OWVAR 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: PPUSH
10183: CALL_OW 69
10187: ST_TO_ADDR
// if not tmp then
10188: LD_VAR 0 1
10192: NOT
10193: IFFALSE 10197
// exit ;
10195: GO 10223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 1
10204: PPUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: CALL_OW 12
10214: ARRAY
10215: PPUSH
10216: LD_INT 200
10218: PPUSH
10219: CALL_OW 234
// end ;
10223: PPOPN 1
10225: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10226: LD_EXP 3
10230: PUSH
10231: LD_EXP 32
10235: AND
10236: IFFALSE 10315
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_INT 22
10251: PUSH
10252: LD_OWVAR 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 21
10263: PUSH
10264: LD_INT 2
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PPUSH
10275: CALL_OW 69
10279: ST_TO_ADDR
// if not tmp then
10280: LD_VAR 0 1
10284: NOT
10285: IFFALSE 10289
// exit ;
10287: GO 10315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10289: LD_VAR 0 1
10293: PUSH
10294: LD_INT 1
10296: PPUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 12
10306: ARRAY
10307: PPUSH
10308: LD_INT 60
10310: PPUSH
10311: CALL_OW 234
// end ;
10315: PPOPN 1
10317: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10318: LD_EXP 3
10322: PUSH
10323: LD_EXP 33
10327: AND
10328: IFFALSE 10427
10330: GO 10332
10332: DISABLE
10333: LD_INT 0
10335: PPUSH
10336: PPUSH
// begin enable ;
10337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10338: LD_ADDR_VAR 0 1
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_OWVAR 2
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 61
10357: PUSH
10358: EMPTY
10359: LIST
10360: PUSH
10361: LD_INT 33
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: ST_TO_ADDR
// if not tmp then
10381: LD_VAR 0 1
10385: NOT
10386: IFFALSE 10390
// exit ;
10388: GO 10427
// for i in tmp do
10390: LD_ADDR_VAR 0 2
10394: PUSH
10395: LD_VAR 0 1
10399: PUSH
10400: FOR_IN
10401: IFFALSE 10425
// if IsControledBy ( i ) then
10403: LD_VAR 0 2
10407: PPUSH
10408: CALL_OW 312
10412: IFFALSE 10423
// ComUnlink ( i ) ;
10414: LD_VAR 0 2
10418: PPUSH
10419: CALL_OW 136
10423: GO 10400
10425: POP
10426: POP
// end ;
10427: PPOPN 2
10429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10430: LD_EXP 3
10434: PUSH
10435: LD_EXP 34
10439: AND
10440: IFFALSE 10580
10442: GO 10444
10444: DISABLE
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
// begin ToLua ( displayPowell(); ) ;
10449: LD_STRING displayPowell();
10451: PPUSH
10452: CALL_OW 559
// uc_side := 0 ;
10456: LD_ADDR_OWVAR 20
10460: PUSH
10461: LD_INT 0
10463: ST_TO_ADDR
// uc_nation := 2 ;
10464: LD_ADDR_OWVAR 21
10468: PUSH
10469: LD_INT 2
10471: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10472: LD_ADDR_OWVAR 37
10476: PUSH
10477: LD_INT 14
10479: ST_TO_ADDR
// vc_engine := engine_siberite ;
10480: LD_ADDR_OWVAR 39
10484: PUSH
10485: LD_INT 3
10487: ST_TO_ADDR
// vc_control := control_apeman ;
10488: LD_ADDR_OWVAR 38
10492: PUSH
10493: LD_INT 5
10495: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10496: LD_ADDR_OWVAR 40
10500: PUSH
10501: LD_INT 29
10503: ST_TO_ADDR
// un := CreateVehicle ;
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: CALL_OW 45
10513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10514: LD_VAR 0 2
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10526: LD_INT 35
10528: PPUSH
10529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10533: LD_VAR 0 2
10537: PPUSH
10538: LD_INT 22
10540: PUSH
10541: LD_OWVAR 2
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PPUSH
10550: CALL_OW 69
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: CALL_OW 74
10564: PPUSH
10565: CALL_OW 115
// until IsDead ( un ) ;
10569: LD_VAR 0 2
10573: PPUSH
10574: CALL_OW 301
10578: IFFALSE 10526
// end ;
10580: PPOPN 2
10582: END
// every 0 0$1 trigger StreamModeActive and sStu do
10583: LD_EXP 3
10587: PUSH
10588: LD_EXP 42
10592: AND
10593: IFFALSE 10609
10595: GO 10597
10597: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10598: LD_STRING displayStucuk();
10600: PPUSH
10601: CALL_OW 559
// ResetFog ;
10605: CALL_OW 335
// end ;
10609: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10610: LD_EXP 3
10614: PUSH
10615: LD_EXP 35
10619: AND
10620: IFFALSE 10761
10622: GO 10624
10624: DISABLE
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_OWVAR 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: ST_TO_ADDR
// if not tmp then
10665: LD_VAR 0 2
10669: NOT
10670: IFFALSE 10674
// exit ;
10672: GO 10761
// un := tmp [ rand ( 1 , tmp ) ] ;
10674: LD_ADDR_VAR 0 1
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 12
10696: ARRAY
10697: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: LD_INT 0
10705: PPUSH
10706: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10710: LD_VAR 0 1
10714: PPUSH
10715: LD_OWVAR 3
10719: PUSH
10720: LD_VAR 0 1
10724: DIFF
10725: PPUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 74
10735: PPUSH
10736: CALL_OW 115
// wait ( 0 0$20 ) ;
10740: LD_INT 700
10742: PPUSH
10743: CALL_OW 67
// SetSide ( un , your_side ) ;
10747: LD_VAR 0 1
10751: PPUSH
10752: LD_OWVAR 2
10756: PPUSH
10757: CALL_OW 235
// end ;
10761: PPOPN 2
10763: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10764: LD_EXP 3
10768: PUSH
10769: LD_EXP 36
10773: AND
10774: IFFALSE 10880
10776: GO 10778
10778: DISABLE
10779: LD_INT 0
10781: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10782: LD_ADDR_VAR 0 1
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_OWVAR 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 30
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 30
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PPUSH
10831: CALL_OW 69
10835: ST_TO_ADDR
// if not depot then
10836: LD_VAR 0 1
10840: NOT
10841: IFFALSE 10845
// exit ;
10843: GO 10880
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10845: LD_VAR 0 1
10849: PUSH
10850: LD_INT 1
10852: ARRAY
10853: PPUSH
10854: CALL_OW 250
10858: PPUSH
10859: LD_VAR 0 1
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: PPUSH
10868: CALL_OW 251
10872: PPUSH
10873: LD_INT 70
10875: PPUSH
10876: CALL_OW 495
// end ;
10880: PPOPN 1
10882: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10883: LD_EXP 3
10887: PUSH
10888: LD_EXP 37
10892: AND
10893: IFFALSE 11104
10895: GO 10897
10897: DISABLE
10898: LD_INT 0
10900: PPUSH
10901: PPUSH
10902: PPUSH
10903: PPUSH
10904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10905: LD_ADDR_VAR 0 5
10909: PUSH
10910: LD_INT 22
10912: PUSH
10913: LD_OWVAR 2
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PPUSH
10936: CALL_OW 69
10940: ST_TO_ADDR
// if not tmp then
10941: LD_VAR 0 5
10945: NOT
10946: IFFALSE 10950
// exit ;
10948: GO 11104
// for i in tmp do
10950: LD_ADDR_VAR 0 1
10954: PUSH
10955: LD_VAR 0 5
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11102
// begin d := rand ( 0 , 5 ) ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: PPUSH
10971: LD_INT 5
10973: PPUSH
10974: CALL_OW 12
10978: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10979: LD_ADDR_VAR 0 2
10983: PUSH
10984: LD_VAR 0 1
10988: PPUSH
10989: CALL_OW 250
10993: PPUSH
10994: LD_VAR 0 4
10998: PPUSH
10999: LD_INT 3
11001: PPUSH
11002: LD_INT 12
11004: PPUSH
11005: CALL_OW 12
11009: PPUSH
11010: CALL_OW 272
11014: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 251
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: LD_INT 3
11037: PPUSH
11038: LD_INT 12
11040: PPUSH
11041: CALL_OW 12
11045: PPUSH
11046: CALL_OW 273
11050: ST_TO_ADDR
// if ValidHex ( x , y ) then
11051: LD_VAR 0 2
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: CALL_OW 488
11065: IFFALSE 11100
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11067: LD_VAR 0 1
11071: PPUSH
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 3
11084: PPUSH
11085: LD_INT 6
11087: PPUSH
11088: CALL_OW 12
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 483
// end ;
11100: GO 10960
11102: POP
11103: POP
// end ;
11104: PPOPN 5
11106: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11107: LD_EXP 3
11111: PUSH
11112: LD_EXP 38
11116: AND
11117: IFFALSE 11211
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11126: LD_ADDR_VAR 0 2
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_OWVAR 2
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 21
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: PPUSH
11168: CALL_OW 69
11172: ST_TO_ADDR
// if not tmp then
11173: LD_VAR 0 2
11177: NOT
11178: IFFALSE 11182
// exit ;
11180: GO 11211
// for i in tmp do
11182: LD_ADDR_VAR 0 1
11186: PUSH
11187: LD_VAR 0 2
11191: PUSH
11192: FOR_IN
11193: IFFALSE 11209
// SetFuel ( i , 0 ) ;
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 240
11207: GO 11192
11209: POP
11210: POP
// end ;
11211: PPOPN 2
11213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11214: LD_EXP 3
11218: PUSH
11219: LD_EXP 39
11223: AND
11224: IFFALSE 11290
11226: GO 11228
11228: DISABLE
11229: LD_INT 0
11231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11232: LD_ADDR_VAR 0 1
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_OWVAR 2
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 29
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 69
11267: ST_TO_ADDR
// if not tmp then
11268: LD_VAR 0 1
11272: NOT
11273: IFFALSE 11277
// exit ;
11275: GO 11290
// DestroyUnit ( tmp [ 1 ] ) ;
11277: LD_VAR 0 1
11281: PUSH
11282: LD_INT 1
11284: ARRAY
11285: PPUSH
11286: CALL_OW 65
// end ;
11290: PPOPN 1
11292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11293: LD_EXP 3
11297: PUSH
11298: LD_EXP 41
11302: AND
11303: IFFALSE 11432
11305: GO 11307
11307: DISABLE
11308: LD_INT 0
11310: PPUSH
// begin uc_side := 0 ;
11311: LD_ADDR_OWVAR 20
11315: PUSH
11316: LD_INT 0
11318: ST_TO_ADDR
// uc_nation := nation_arabian ;
11319: LD_ADDR_OWVAR 21
11323: PUSH
11324: LD_INT 2
11326: ST_TO_ADDR
// hc_gallery :=  ;
11327: LD_ADDR_OWVAR 33
11331: PUSH
11332: LD_STRING 
11334: ST_TO_ADDR
// hc_name :=  ;
11335: LD_ADDR_OWVAR 26
11339: PUSH
11340: LD_STRING 
11342: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11343: LD_INT 1
11345: PPUSH
11346: LD_INT 11
11348: PPUSH
11349: LD_INT 10
11351: PPUSH
11352: CALL_OW 380
// un := CreateHuman ;
11356: LD_ADDR_VAR 0 1
11360: PUSH
11361: CALL_OW 44
11365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11378: LD_INT 35
11380: PPUSH
11381: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11385: LD_VAR 0 1
11389: PPUSH
11390: LD_INT 22
11392: PUSH
11393: LD_OWVAR 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 69
11406: PPUSH
11407: LD_VAR 0 1
11411: PPUSH
11412: CALL_OW 74
11416: PPUSH
11417: CALL_OW 115
// until IsDead ( un ) ;
11421: LD_VAR 0 1
11425: PPUSH
11426: CALL_OW 301
11430: IFFALSE 11378
// end ;
11432: PPOPN 1
11434: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11435: LD_EXP 3
11439: PUSH
11440: LD_EXP 43
11444: AND
11445: IFFALSE 11457
11447: GO 11449
11449: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11450: LD_STRING earthquake(getX(game), 0, 32)
11452: PPUSH
11453: CALL_OW 559
11457: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11458: LD_EXP 3
11462: PUSH
11463: LD_EXP 44
11467: AND
11468: IFFALSE 11559
11470: GO 11472
11472: DISABLE
11473: LD_INT 0
11475: PPUSH
// begin enable ;
11476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11477: LD_ADDR_VAR 0 1
11481: PUSH
11482: LD_INT 22
11484: PUSH
11485: LD_OWVAR 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 33
11506: PUSH
11507: LD_INT 3
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 69
11523: ST_TO_ADDR
// if not tmp then
11524: LD_VAR 0 1
11528: NOT
11529: IFFALSE 11533
// exit ;
11531: GO 11559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11533: LD_VAR 0 1
11537: PUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_VAR 0 1
11545: PPUSH
11546: CALL_OW 12
11550: ARRAY
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 234
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11562: LD_EXP 3
11566: PUSH
11567: LD_EXP 45
11571: AND
11572: IFFALSE 11713
11574: GO 11576
11576: DISABLE
11577: LD_INT 0
11579: PPUSH
11580: PPUSH
11581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_INT 22
11589: PUSH
11590: LD_OWVAR 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 25
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 69
11617: ST_TO_ADDR
// if not tmp then
11618: LD_VAR 0 3
11622: NOT
11623: IFFALSE 11627
// exit ;
11625: GO 11713
// un := tmp [ rand ( 1 , tmp ) ] ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_VAR 0 3
11636: PUSH
11637: LD_INT 1
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: CALL_OW 12
11649: ARRAY
11650: ST_TO_ADDR
// if Crawls ( un ) then
11651: LD_VAR 0 2
11655: PPUSH
11656: CALL_OW 318
11660: IFFALSE 11671
// ComWalk ( un ) ;
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11671: LD_VAR 0 2
11675: PPUSH
11676: LD_INT 9
11678: PPUSH
11679: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11683: LD_INT 28
11685: PPUSH
11686: LD_OWVAR 2
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11698: LD_INT 29
11700: PPUSH
11701: LD_OWVAR 2
11705: PPUSH
11706: LD_INT 2
11708: PPUSH
11709: CALL_OW 322
// end ;
11713: PPOPN 3
11715: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11716: LD_EXP 3
11720: PUSH
11721: LD_EXP 46
11725: AND
11726: IFFALSE 11837
11728: GO 11730
11730: DISABLE
11731: LD_INT 0
11733: PPUSH
11734: PPUSH
11735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11736: LD_ADDR_VAR 0 3
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_OWVAR 2
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 25
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL_OW 69
11771: ST_TO_ADDR
// if not tmp then
11772: LD_VAR 0 3
11776: NOT
11777: IFFALSE 11781
// exit ;
11779: GO 11837
// un := tmp [ rand ( 1 , tmp ) ] ;
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 1
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: CALL_OW 12
11803: ARRAY
11804: ST_TO_ADDR
// if Crawls ( un ) then
11805: LD_VAR 0 2
11809: PPUSH
11810: CALL_OW 318
11814: IFFALSE 11825
// ComWalk ( un ) ;
11816: LD_VAR 0 2
11820: PPUSH
11821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11825: LD_VAR 0 2
11829: PPUSH
11830: LD_INT 8
11832: PPUSH
11833: CALL_OW 336
// end ;
11837: PPOPN 3
11839: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11840: LD_EXP 3
11844: PUSH
11845: LD_EXP 47
11849: AND
11850: IFFALSE 11994
11852: GO 11854
11854: DISABLE
11855: LD_INT 0
11857: PPUSH
11858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_OWVAR 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 12
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 34
11901: PUSH
11902: LD_INT 51
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 34
11911: PUSH
11912: LD_INT 32
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: ST_TO_ADDR
// if not tmp then
11935: LD_VAR 0 2
11939: NOT
11940: IFFALSE 11944
// exit ;
11942: GO 11994
// for i in tmp do
11944: LD_ADDR_VAR 0 1
11948: PUSH
11949: LD_VAR 0 2
11953: PUSH
11954: FOR_IN
11955: IFFALSE 11992
// if GetCargo ( i , mat_artifact ) = 0 then
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 4
11964: PPUSH
11965: CALL_OW 289
11969: PUSH
11970: LD_INT 0
11972: EQUAL
11973: IFFALSE 11990
// SetCargo ( i , mat_siberit , 100 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_INT 3
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: CALL_OW 290
11990: GO 11954
11992: POP
11993: POP
// end ;
11994: PPOPN 2
11996: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
11997: LD_EXP 3
12001: PUSH
12002: LD_EXP 48
12006: AND
12007: IFFALSE 12190
12009: GO 12011
12011: DISABLE
12012: LD_INT 0
12014: PPUSH
12015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12016: LD_ADDR_VAR 0 2
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_OWVAR 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: ST_TO_ADDR
// if not tmp then
12038: LD_VAR 0 2
12042: NOT
12043: IFFALSE 12047
// exit ;
12045: GO 12190
// for i := 1 to 2 do
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: DOUBLE
12053: LD_INT 1
12055: DEC
12056: ST_TO_ADDR
12057: LD_INT 2
12059: PUSH
12060: FOR_TO
12061: IFFALSE 12188
// begin uc_side := your_side ;
12063: LD_ADDR_OWVAR 20
12067: PUSH
12068: LD_OWVAR 2
12072: ST_TO_ADDR
// uc_nation := nation_american ;
12073: LD_ADDR_OWVAR 21
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// vc_chassis := us_morphling ;
12081: LD_ADDR_OWVAR 37
12085: PUSH
12086: LD_INT 5
12088: ST_TO_ADDR
// vc_engine := engine_siberite ;
12089: LD_ADDR_OWVAR 39
12093: PUSH
12094: LD_INT 3
12096: ST_TO_ADDR
// vc_control := control_computer ;
12097: LD_ADDR_OWVAR 38
12101: PUSH
12102: LD_INT 3
12104: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12105: LD_ADDR_OWVAR 40
12109: PUSH
12110: LD_INT 10
12112: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12113: LD_VAR 0 2
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: PPUSH
12122: CALL_OW 310
12126: NOT
12127: IFFALSE 12174
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12129: CALL_OW 45
12133: PPUSH
12134: LD_VAR 0 2
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: CALL_OW 250
12147: PPUSH
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: CALL_OW 251
12161: PPUSH
12162: LD_INT 12
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 50
12172: GO 12186
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12174: CALL_OW 45
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 51
// end ;
12186: GO 12060
12188: POP
12189: POP
// end ;
12190: PPOPN 2
12192: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12193: LD_EXP 3
12197: PUSH
12198: LD_EXP 49
12202: AND
12203: IFFALSE 12425
12205: GO 12207
12207: DISABLE
12208: LD_INT 0
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
12214: PPUSH
12215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12216: LD_ADDR_VAR 0 6
12220: PUSH
12221: LD_INT 22
12223: PUSH
12224: LD_OWVAR 2
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 23
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 6
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12425
// s1 := rand ( 1 , 4 ) ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 1
12286: PPUSH
12287: LD_INT 4
12289: PPUSH
12290: CALL_OW 12
12294: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12295: LD_ADDR_VAR 0 4
12299: PUSH
12300: LD_VAR 0 6
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: PPUSH
12309: LD_VAR 0 2
12313: PPUSH
12314: CALL_OW 259
12318: ST_TO_ADDR
// if s1 = 1 then
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// s2 := rand ( 2 , 4 ) else
12329: LD_ADDR_VAR 0 3
12333: PUSH
12334: LD_INT 2
12336: PPUSH
12337: LD_INT 4
12339: PPUSH
12340: CALL_OW 12
12344: ST_TO_ADDR
12345: GO 12355
// s2 := 1 ;
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 6
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: CALL_OW 259
12378: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12379: LD_VAR 0 6
12383: PUSH
12384: LD_INT 1
12386: ARRAY
12387: PPUSH
12388: LD_VAR 0 2
12392: PPUSH
12393: LD_VAR 0 5
12397: PPUSH
12398: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12402: LD_VAR 0 6
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_VAR 0 4
12420: PPUSH
12421: CALL_OW 237
// end ;
12425: PPOPN 6
12427: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12428: LD_EXP 3
12432: PUSH
12433: LD_EXP 50
12437: AND
12438: IFFALSE 12517
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12446: LD_ADDR_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 3
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PPUSH
12477: CALL_OW 69
12481: ST_TO_ADDR
// if not tmp then
12482: LD_VAR 0 1
12486: NOT
12487: IFFALSE 12491
// exit ;
12489: GO 12517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12491: LD_VAR 0 1
12495: PUSH
12496: LD_INT 1
12498: PPUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 12
12508: ARRAY
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 234
// end ;
12517: PPOPN 1
12519: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12520: LD_EXP 3
12524: PUSH
12525: LD_EXP 51
12529: AND
12530: IFFALSE 12642
12532: GO 12534
12534: DISABLE
12535: LD_INT 0
12537: PPUSH
12538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12539: LD_ADDR_VAR 0 2
12543: PUSH
12544: LD_INT 22
12546: PUSH
12547: LD_OWVAR 2
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 30
12561: PUSH
12562: LD_INT 27
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 30
12571: PUSH
12572: LD_INT 26
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 28
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: ST_TO_ADDR
// if not tmp then
12604: LD_VAR 0 2
12608: NOT
12609: IFFALSE 12613
// exit ;
12611: GO 12642
// for i in tmp do
12613: LD_ADDR_VAR 0 1
12617: PUSH
12618: LD_VAR 0 2
12622: PUSH
12623: FOR_IN
12624: IFFALSE 12640
// SetLives ( i , 1 ) ;
12626: LD_VAR 0 1
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 234
12638: GO 12623
12640: POP
12641: POP
// end ;
12642: PPOPN 2
12644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12645: LD_EXP 3
12649: PUSH
12650: LD_EXP 52
12654: AND
12655: IFFALSE 12942
12657: GO 12659
12659: DISABLE
12660: LD_INT 0
12662: PPUSH
12663: PPUSH
12664: PPUSH
// begin i := rand ( 1 , 7 ) ;
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 1
12672: PPUSH
12673: LD_INT 7
12675: PPUSH
12676: CALL_OW 12
12680: ST_TO_ADDR
// case i of 1 :
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 1
12688: DOUBLE
12689: EQUAL
12690: IFTRUE 12694
12692: GO 12704
12694: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12695: LD_STRING earthquake(getX(game), 0, 32)
12697: PPUSH
12698: CALL_OW 559
12702: GO 12942
12704: LD_INT 2
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12726
12712: POP
// begin ToLua ( displayStucuk(); ) ;
12713: LD_STRING displayStucuk();
12715: PPUSH
12716: CALL_OW 559
// ResetFog ;
12720: CALL_OW 335
// end ; 3 :
12724: GO 12942
12726: LD_INT 3
12728: DOUBLE
12729: EQUAL
12730: IFTRUE 12734
12732: GO 12838
12734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 22
12742: PUSH
12743: LD_OWVAR 2
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 25
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// if not tmp then
12771: LD_VAR 0 2
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 12942
// un := tmp [ rand ( 1 , tmp ) ] ;
12780: LD_ADDR_VAR 0 3
12784: PUSH
12785: LD_VAR 0 2
12789: PUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_VAR 0 2
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: ST_TO_ADDR
// if Crawls ( un ) then
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 318
12813: IFFALSE 12824
// ComWalk ( un ) ;
12815: LD_VAR 0 3
12819: PPUSH
12820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 8
12831: PPUSH
12832: CALL_OW 336
// end ; 4 :
12836: GO 12942
12838: LD_INT 4
12840: DOUBLE
12841: EQUAL
12842: IFTRUE 12846
12844: GO 12920
12846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12847: LD_ADDR_VAR 0 2
12851: PUSH
12852: LD_INT 22
12854: PUSH
12855: LD_OWVAR 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 30
12866: PUSH
12867: LD_INT 29
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: ST_TO_ADDR
// if not tmp then
12883: LD_VAR 0 2
12887: NOT
12888: IFFALSE 12892
// exit ;
12890: GO 12942
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12892: LD_VAR 0 2
12896: PUSH
12897: LD_INT 1
12899: ARRAY
12900: PPUSH
12901: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12905: LD_VAR 0 2
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: CALL_OW 65
// end ; 5 .. 7 :
12918: GO 12942
12920: LD_INT 5
12922: DOUBLE
12923: GREATEREQUAL
12924: IFFALSE 12932
12926: LD_INT 7
12928: DOUBLE
12929: LESSEQUAL
12930: IFTRUE 12934
12932: GO 12941
12934: POP
// StreamSibBomb ; end ;
12935: CALL 9179 0 0
12939: GO 12942
12941: POP
// end ;
12942: PPOPN 3
12944: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12945: LD_EXP 3
12949: PUSH
12950: LD_EXP 53
12954: AND
12955: IFFALSE 13111
12957: GO 12959
12959: DISABLE
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12965: LD_ADDR_VAR 0 2
12969: PUSH
12970: LD_INT 81
12972: PUSH
12973: LD_OWVAR 2
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 2
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 1
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 21
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: ST_TO_ADDR
// if not tmp then
13019: LD_VAR 0 2
13023: NOT
13024: IFFALSE 13028
// exit ;
13026: GO 13111
// p := 0 ;
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13036: LD_INT 35
13038: PPUSH
13039: CALL_OW 67
// p := p + 1 ;
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: LD_VAR 0 3
13052: PUSH
13053: LD_INT 1
13055: PLUS
13056: ST_TO_ADDR
// for i in tmp do
13057: LD_ADDR_VAR 0 1
13061: PUSH
13062: LD_VAR 0 2
13066: PUSH
13067: FOR_IN
13068: IFFALSE 13099
// if GetLives ( i ) < 1000 then
13070: LD_VAR 0 1
13074: PPUSH
13075: CALL_OW 256
13079: PUSH
13080: LD_INT 1000
13082: LESS
13083: IFFALSE 13097
// SetLives ( i , 1000 ) ;
13085: LD_VAR 0 1
13089: PPUSH
13090: LD_INT 1000
13092: PPUSH
13093: CALL_OW 234
13097: GO 13067
13099: POP
13100: POP
// until p > 20 ;
13101: LD_VAR 0 3
13105: PUSH
13106: LD_INT 20
13108: GREATER
13109: IFFALSE 13036
// end ;
13111: PPOPN 3
13113: END
// every 0 0$1 trigger StreamModeActive and sTime do
13114: LD_EXP 3
13118: PUSH
13119: LD_EXP 54
13123: AND
13124: IFFALSE 13159
13126: GO 13128
13128: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13129: LD_INT 28
13131: PPUSH
13132: LD_OWVAR 2
13136: PPUSH
13137: LD_INT 2
13139: PPUSH
13140: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13144: LD_INT 30
13146: PPUSH
13147: LD_OWVAR 2
13151: PPUSH
13152: LD_INT 2
13154: PPUSH
13155: CALL_OW 322
// end ;
13159: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13160: LD_EXP 3
13164: PUSH
13165: LD_EXP 55
13169: AND
13170: IFFALSE 13291
13172: GO 13174
13174: DISABLE
13175: LD_INT 0
13177: PPUSH
13178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_INT 22
13186: PUSH
13187: LD_OWVAR 2
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 21
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: LD_INT 23
13211: PUSH
13212: LD_INT 0
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 69
13232: ST_TO_ADDR
// if not tmp then
13233: LD_VAR 0 2
13237: NOT
13238: IFFALSE 13242
// exit ;
13240: GO 13291
// for i in tmp do
13242: LD_ADDR_VAR 0 1
13246: PUSH
13247: LD_VAR 0 2
13251: PUSH
13252: FOR_IN
13253: IFFALSE 13289
// begin if Crawls ( i ) then
13255: LD_VAR 0 1
13259: PPUSH
13260: CALL_OW 318
13264: IFFALSE 13275
// ComWalk ( i ) ;
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 138
// SetClass ( i , 2 ) ;
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_INT 2
13282: PPUSH
13283: CALL_OW 336
// end ;
13287: GO 13252
13289: POP
13290: POP
// end ;
13291: PPOPN 2
13293: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13294: LD_EXP 3
13298: PUSH
13299: LD_EXP 56
13303: AND
13304: IFFALSE 13592
13306: GO 13308
13308: DISABLE
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13314: LD_OWVAR 2
13318: PPUSH
13319: LD_INT 9
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13332: LD_INT 9
13334: PPUSH
13335: LD_OWVAR 2
13339: PPUSH
13340: CALL_OW 343
// uc_side := 9 ;
13344: LD_ADDR_OWVAR 20
13348: PUSH
13349: LD_INT 9
13351: ST_TO_ADDR
// uc_nation := 2 ;
13352: LD_ADDR_OWVAR 21
13356: PUSH
13357: LD_INT 2
13359: ST_TO_ADDR
// hc_name := Dark Warrior ;
13360: LD_ADDR_OWVAR 26
13364: PUSH
13365: LD_STRING Dark Warrior
13367: ST_TO_ADDR
// hc_gallery :=  ;
13368: LD_ADDR_OWVAR 33
13372: PUSH
13373: LD_STRING 
13375: ST_TO_ADDR
// hc_noskilllimit := true ;
13376: LD_ADDR_OWVAR 76
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13384: LD_ADDR_OWVAR 31
13388: PUSH
13389: LD_INT 30
13391: PUSH
13392: LD_INT 30
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 30
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: ST_TO_ADDR
// un := CreateHuman ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: CALL_OW 44
13416: ST_TO_ADDR
// hc_noskilllimit := false ;
13417: LD_ADDR_OWVAR 76
13421: PUSH
13422: LD_INT 0
13424: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 51
// ToLua ( playRanger() ) ;
13437: LD_STRING playRanger()
13439: PPUSH
13440: CALL_OW 559
// p := 0 ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13452: LD_INT 35
13454: PPUSH
13455: CALL_OW 67
// p := p + 1 ;
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_VAR 0 2
13468: PUSH
13469: LD_INT 1
13471: PLUS
13472: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13473: LD_VAR 0 3
13477: PPUSH
13478: CALL_OW 256
13482: PUSH
13483: LD_INT 1000
13485: LESS
13486: IFFALSE 13500
// SetLives ( un , 1000 ) ;
13488: LD_VAR 0 3
13492: PPUSH
13493: LD_INT 1000
13495: PPUSH
13496: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 81
13507: PUSH
13508: LD_OWVAR 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 91
13519: PUSH
13520: LD_VAR 0 3
13524: PUSH
13525: LD_INT 30
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: CALL_OW 74
13551: PPUSH
13552: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13556: LD_VAR 0 2
13560: PUSH
13561: LD_INT 80
13563: GREATER
13564: PUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: CALL_OW 301
13574: OR
13575: IFFALSE 13452
// if un then
13577: LD_VAR 0 3
13581: IFFALSE 13592
// RemoveUnit ( un ) ;
13583: LD_VAR 0 3
13587: PPUSH
13588: CALL_OW 64
// end ;
13592: PPOPN 3
13594: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13595: LD_EXP 57
13599: IFFALSE 13715
13601: GO 13603
13603: DISABLE
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
13608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13609: LD_ADDR_VAR 0 2
13613: PUSH
13614: LD_INT 81
13616: PUSH
13617: LD_OWVAR 2
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PPUSH
13640: CALL_OW 69
13644: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13645: LD_STRING playComputer()
13647: PPUSH
13648: CALL_OW 559
// if not tmp then
13652: LD_VAR 0 2
13656: NOT
13657: IFFALSE 13661
// exit ;
13659: GO 13715
// for i in tmp do
13661: LD_ADDR_VAR 0 1
13665: PUSH
13666: LD_VAR 0 2
13670: PUSH
13671: FOR_IN
13672: IFFALSE 13713
// for j := 1 to 4 do
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: DOUBLE
13680: LD_INT 1
13682: DEC
13683: ST_TO_ADDR
13684: LD_INT 4
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13709
// SetSkill ( i , j , 10 ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 10
13702: PPUSH
13703: CALL_OW 237
13707: GO 13687
13709: POP
13710: POP
13711: GO 13671
13713: POP
13714: POP
// end ;
13715: PPOPN 3
13717: END
// every 0 0$1 trigger s30 do var i , tmp ;
13718: LD_EXP 58
13722: IFFALSE 13791
13724: GO 13726
13726: DISABLE
13727: LD_INT 0
13729: PPUSH
13730: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_INT 22
13738: PUSH
13739: LD_OWVAR 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PPUSH
13748: CALL_OW 69
13752: ST_TO_ADDR
// if not tmp then
13753: LD_VAR 0 2
13757: NOT
13758: IFFALSE 13762
// exit ;
13760: GO 13791
// for i in tmp do
13762: LD_ADDR_VAR 0 1
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_IN
13773: IFFALSE 13789
// SetLives ( i , 300 ) ;
13775: LD_VAR 0 1
13779: PPUSH
13780: LD_INT 300
13782: PPUSH
13783: CALL_OW 234
13787: GO 13772
13789: POP
13790: POP
// end ;
13791: PPOPN 2
13793: END
// every 0 0$1 trigger s60 do var i , tmp ;
13794: LD_EXP 59
13798: IFFALSE 13867
13800: GO 13802
13802: DISABLE
13803: LD_INT 0
13805: PPUSH
13806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13807: LD_ADDR_VAR 0 2
13811: PUSH
13812: LD_INT 22
13814: PUSH
13815: LD_OWVAR 2
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: ST_TO_ADDR
// if not tmp then
13829: LD_VAR 0 2
13833: NOT
13834: IFFALSE 13838
// exit ;
13836: GO 13867
// for i in tmp do
13838: LD_ADDR_VAR 0 1
13842: PUSH
13843: LD_VAR 0 2
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13865
// SetLives ( i , 600 ) ;
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 600
13858: PPUSH
13859: CALL_OW 234
13863: GO 13848
13865: POP
13866: POP
// end ;
13867: PPOPN 2
13869: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13870: LD_INT 0
13872: PPUSH
// case cmd of 301 :
13873: LD_VAR 0 1
13877: PUSH
13878: LD_INT 301
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 13918
13886: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13887: LD_VAR 0 6
13891: PPUSH
13892: LD_VAR 0 7
13896: PPUSH
13897: LD_VAR 0 8
13901: PPUSH
13902: LD_VAR 0 4
13906: PPUSH
13907: LD_VAR 0 5
13911: PPUSH
13912: CALL 15127 0 5
13916: GO 14039
13918: LD_INT 302
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13963
13926: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_VAR 0 8
13941: PPUSH
13942: LD_VAR 0 9
13946: PPUSH
13947: LD_VAR 0 4
13951: PPUSH
13952: LD_VAR 0 5
13956: PPUSH
13957: CALL 15218 0 6
13961: GO 14039
13963: LD_INT 303
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 14008
13971: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13972: LD_VAR 0 6
13976: PPUSH
13977: LD_VAR 0 7
13981: PPUSH
13982: LD_VAR 0 8
13986: PPUSH
13987: LD_VAR 0 9
13991: PPUSH
13992: LD_VAR 0 4
13996: PPUSH
13997: LD_VAR 0 5
14001: PPUSH
14002: CALL 14044 0 6
14006: GO 14039
14008: LD_INT 304
14010: DOUBLE
14011: EQUAL
14012: IFTRUE 14016
14014: GO 14038
14016: POP
// hHackTeleport ( unit , x , y ) ; end ;
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 4
14026: PPUSH
14027: LD_VAR 0 5
14031: PPUSH
14032: CALL 15811 0 3
14036: GO 14039
14038: POP
// end ;
14039: LD_VAR 0 12
14043: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14048: LD_VAR 0 1
14052: PUSH
14053: LD_INT 1
14055: LESS
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 3
14064: GREATER
14065: OR
14066: PUSH
14067: LD_VAR 0 5
14071: PPUSH
14072: LD_VAR 0 6
14076: PPUSH
14077: CALL_OW 428
14081: OR
14082: IFFALSE 14086
// exit ;
14084: GO 14814
// uc_side := your_side ;
14086: LD_ADDR_OWVAR 20
14090: PUSH
14091: LD_OWVAR 2
14095: ST_TO_ADDR
// uc_nation := nation ;
14096: LD_ADDR_OWVAR 21
14100: PUSH
14101: LD_VAR 0 1
14105: ST_TO_ADDR
// bc_level = 1 ;
14106: LD_ADDR_OWVAR 43
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// case btype of 1 :
14114: LD_VAR 0 2
14118: PUSH
14119: LD_INT 1
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14138
14127: POP
// bc_type := b_depot ; 2 :
14128: LD_ADDR_OWVAR 42
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
14136: GO 14758
14138: LD_INT 2
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// bc_type := b_warehouse ; 3 :
14147: LD_ADDR_OWVAR 42
14151: PUSH
14152: LD_INT 1
14154: ST_TO_ADDR
14155: GO 14758
14157: LD_INT 3
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14176
14165: POP
// bc_type := b_lab ; 4 .. 9 :
14166: LD_ADDR_OWVAR 42
14170: PUSH
14171: LD_INT 6
14173: ST_TO_ADDR
14174: GO 14758
14176: LD_INT 4
14178: DOUBLE
14179: GREATEREQUAL
14180: IFFALSE 14188
14182: LD_INT 9
14184: DOUBLE
14185: LESSEQUAL
14186: IFTRUE 14190
14188: GO 14250
14190: POP
// begin bc_type := b_lab_half ;
14191: LD_ADDR_OWVAR 42
14195: PUSH
14196: LD_INT 7
14198: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14199: LD_ADDR_OWVAR 44
14203: PUSH
14204: LD_INT 10
14206: PUSH
14207: LD_INT 11
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: LD_INT 15
14215: PUSH
14216: LD_INT 14
14218: PUSH
14219: LD_INT 13
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_INT 3
14237: MINUS
14238: ARRAY
14239: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14240: LD_ADDR_OWVAR 45
14244: PUSH
14245: LD_INT 9
14247: ST_TO_ADDR
// end ; 10 .. 13 :
14248: GO 14758
14250: LD_INT 10
14252: DOUBLE
14253: GREATEREQUAL
14254: IFFALSE 14262
14256: LD_INT 13
14258: DOUBLE
14259: LESSEQUAL
14260: IFTRUE 14264
14262: GO 14341
14264: POP
// begin bc_type := b_lab_full ;
14265: LD_ADDR_OWVAR 42
14269: PUSH
14270: LD_INT 8
14272: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14273: LD_ADDR_OWVAR 44
14277: PUSH
14278: LD_INT 10
14280: PUSH
14281: LD_INT 12
14283: PUSH
14284: LD_INT 14
14286: PUSH
14287: LD_INT 13
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: PUSH
14296: LD_VAR 0 2
14300: PUSH
14301: LD_INT 9
14303: MINUS
14304: ARRAY
14305: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14306: LD_ADDR_OWVAR 45
14310: PUSH
14311: LD_INT 11
14313: PUSH
14314: LD_INT 15
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 15
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_VAR 0 2
14333: PUSH
14334: LD_INT 9
14336: MINUS
14337: ARRAY
14338: ST_TO_ADDR
// end ; 14 :
14339: GO 14758
14341: LD_INT 14
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14360
14349: POP
// bc_type := b_workshop ; 15 :
14350: LD_ADDR_OWVAR 42
14354: PUSH
14355: LD_INT 2
14357: ST_TO_ADDR
14358: GO 14758
14360: LD_INT 15
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14379
14368: POP
// bc_type := b_factory ; 16 :
14369: LD_ADDR_OWVAR 42
14373: PUSH
14374: LD_INT 3
14376: ST_TO_ADDR
14377: GO 14758
14379: LD_INT 16
14381: DOUBLE
14382: EQUAL
14383: IFTRUE 14387
14385: GO 14398
14387: POP
// bc_type := b_ext_gun ; 17 :
14388: LD_ADDR_OWVAR 42
14392: PUSH
14393: LD_INT 17
14395: ST_TO_ADDR
14396: GO 14758
14398: LD_INT 17
14400: DOUBLE
14401: EQUAL
14402: IFTRUE 14406
14404: GO 14434
14406: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14407: LD_ADDR_OWVAR 42
14411: PUSH
14412: LD_INT 19
14414: PUSH
14415: LD_INT 23
14417: PUSH
14418: LD_INT 19
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: PUSH
14426: LD_VAR 0 1
14430: ARRAY
14431: ST_TO_ADDR
14432: GO 14758
14434: LD_INT 18
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14442
14440: GO 14453
14442: POP
// bc_type := b_ext_radar ; 19 :
14443: LD_ADDR_OWVAR 42
14447: PUSH
14448: LD_INT 20
14450: ST_TO_ADDR
14451: GO 14758
14453: LD_INT 19
14455: DOUBLE
14456: EQUAL
14457: IFTRUE 14461
14459: GO 14472
14461: POP
// bc_type := b_ext_radio ; 20 :
14462: LD_ADDR_OWVAR 42
14466: PUSH
14467: LD_INT 22
14469: ST_TO_ADDR
14470: GO 14758
14472: LD_INT 20
14474: DOUBLE
14475: EQUAL
14476: IFTRUE 14480
14478: GO 14491
14480: POP
// bc_type := b_ext_siberium ; 21 :
14481: LD_ADDR_OWVAR 42
14485: PUSH
14486: LD_INT 21
14488: ST_TO_ADDR
14489: GO 14758
14491: LD_INT 21
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14510
14499: POP
// bc_type := b_ext_computer ; 22 :
14500: LD_ADDR_OWVAR 42
14504: PUSH
14505: LD_INT 24
14507: ST_TO_ADDR
14508: GO 14758
14510: LD_INT 22
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14529
14518: POP
// bc_type := b_ext_track ; 23 :
14519: LD_ADDR_OWVAR 42
14523: PUSH
14524: LD_INT 16
14526: ST_TO_ADDR
14527: GO 14758
14529: LD_INT 23
14531: DOUBLE
14532: EQUAL
14533: IFTRUE 14537
14535: GO 14548
14537: POP
// bc_type := b_ext_laser ; 24 :
14538: LD_ADDR_OWVAR 42
14542: PUSH
14543: LD_INT 25
14545: ST_TO_ADDR
14546: GO 14758
14548: LD_INT 24
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14567
14556: POP
// bc_type := b_control_tower ; 25 :
14557: LD_ADDR_OWVAR 42
14561: PUSH
14562: LD_INT 36
14564: ST_TO_ADDR
14565: GO 14758
14567: LD_INT 25
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14586
14575: POP
// bc_type := b_breastwork ; 26 :
14576: LD_ADDR_OWVAR 42
14580: PUSH
14581: LD_INT 31
14583: ST_TO_ADDR
14584: GO 14758
14586: LD_INT 26
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14605
14594: POP
// bc_type := b_bunker ; 27 :
14595: LD_ADDR_OWVAR 42
14599: PUSH
14600: LD_INT 32
14602: ST_TO_ADDR
14603: GO 14758
14605: LD_INT 27
14607: DOUBLE
14608: EQUAL
14609: IFTRUE 14613
14611: GO 14624
14613: POP
// bc_type := b_turret ; 28 :
14614: LD_ADDR_OWVAR 42
14618: PUSH
14619: LD_INT 33
14621: ST_TO_ADDR
14622: GO 14758
14624: LD_INT 28
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14643
14632: POP
// bc_type := b_armoury ; 29 :
14633: LD_ADDR_OWVAR 42
14637: PUSH
14638: LD_INT 4
14640: ST_TO_ADDR
14641: GO 14758
14643: LD_INT 29
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14662
14651: POP
// bc_type := b_barracks ; 30 :
14652: LD_ADDR_OWVAR 42
14656: PUSH
14657: LD_INT 5
14659: ST_TO_ADDR
14660: GO 14758
14662: LD_INT 30
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14681
14670: POP
// bc_type := b_solar_power ; 31 :
14671: LD_ADDR_OWVAR 42
14675: PUSH
14676: LD_INT 27
14678: ST_TO_ADDR
14679: GO 14758
14681: LD_INT 31
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14700
14689: POP
// bc_type := b_oil_power ; 32 :
14690: LD_ADDR_OWVAR 42
14694: PUSH
14695: LD_INT 26
14697: ST_TO_ADDR
14698: GO 14758
14700: LD_INT 32
14702: DOUBLE
14703: EQUAL
14704: IFTRUE 14708
14706: GO 14719
14708: POP
// bc_type := b_siberite_power ; 33 :
14709: LD_ADDR_OWVAR 42
14713: PUSH
14714: LD_INT 28
14716: ST_TO_ADDR
14717: GO 14758
14719: LD_INT 33
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14738
14727: POP
// bc_type := b_oil_mine ; 34 :
14728: LD_ADDR_OWVAR 42
14732: PUSH
14733: LD_INT 29
14735: ST_TO_ADDR
14736: GO 14758
14738: LD_INT 34
14740: DOUBLE
14741: EQUAL
14742: IFTRUE 14746
14744: GO 14757
14746: POP
// bc_type := b_siberite_mine ; end ;
14747: LD_ADDR_OWVAR 42
14751: PUSH
14752: LD_INT 30
14754: ST_TO_ADDR
14755: GO 14758
14757: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14758: LD_ADDR_VAR 0 8
14762: PUSH
14763: LD_VAR 0 5
14767: PPUSH
14768: LD_VAR 0 6
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: CALL_OW 47
14782: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14783: LD_OWVAR 42
14787: PUSH
14788: LD_INT 32
14790: PUSH
14791: LD_INT 33
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: IN
14798: IFFALSE 14814
// PlaceWeaponTurret ( b , weapon ) ;
14800: LD_VAR 0 8
14804: PPUSH
14805: LD_VAR 0 4
14809: PPUSH
14810: CALL_OW 431
// end ;
14814: LD_VAR 0 7
14818: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: LD_INT 22
14832: PUSH
14833: LD_OWVAR 2
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 0
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_INT 1
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PPUSH
14874: CALL_OW 69
14878: ST_TO_ADDR
// if not tmp then
14879: LD_VAR 0 4
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14947
// for i in tmp do
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_VAR 0 4
14897: PUSH
14898: FOR_IN
14899: IFFALSE 14945
// for j = 1 to 3 do
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: DOUBLE
14907: LD_INT 1
14909: DEC
14910: ST_TO_ADDR
14911: LD_INT 3
14913: PUSH
14914: FOR_TO
14915: IFFALSE 14941
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14917: LD_VAR 0 2
14921: PPUSH
14922: CALL_OW 274
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 99999
14934: PPUSH
14935: CALL_OW 277
14939: GO 14914
14941: POP
14942: POP
14943: GO 14898
14945: POP
14946: POP
// end ;
14947: LD_VAR 0 1
14951: RET
// export function hHackSetLevel10 ; var i , j ; begin
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
14956: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 21
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15030
// if IsSelected ( i ) then
14980: LD_VAR 0 2
14984: PPUSH
14985: CALL_OW 306
14989: IFFALSE 15028
// begin for j := 1 to 4 do
14991: LD_ADDR_VAR 0 3
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_INT 4
15003: PUSH
15004: FOR_TO
15005: IFFALSE 15026
// SetSkill ( i , j , 10 ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_INT 10
15019: PPUSH
15020: CALL_OW 237
15024: GO 15004
15026: POP
15027: POP
// end ;
15028: GO 14977
15030: POP
15031: POP
// end ;
15032: LD_VAR 0 1
15036: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
15041: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_INT 22
15049: PUSH
15050: LD_OWVAR 2
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 21
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PPUSH
15073: CALL_OW 69
15077: PUSH
15078: FOR_IN
15079: IFFALSE 15120
// begin for j := 1 to 4 do
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_INT 4
15093: PUSH
15094: FOR_TO
15095: IFFALSE 15116
// SetSkill ( i , j , 10 ) ;
15097: LD_VAR 0 2
15101: PPUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 10
15109: PPUSH
15110: CALL_OW 237
15114: GO 15094
15116: POP
15117: POP
// end ;
15118: GO 15078
15120: POP
15121: POP
// end ;
15122: LD_VAR 0 1
15126: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15127: LD_INT 0
15129: PPUSH
// uc_side := your_side ;
15130: LD_ADDR_OWVAR 20
15134: PUSH
15135: LD_OWVAR 2
15139: ST_TO_ADDR
// uc_nation := nation ;
15140: LD_ADDR_OWVAR 21
15144: PUSH
15145: LD_VAR 0 1
15149: ST_TO_ADDR
// InitHc ;
15150: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15154: LD_INT 0
15156: PPUSH
15157: LD_VAR 0 2
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15171: LD_VAR 0 4
15175: PPUSH
15176: LD_VAR 0 5
15180: PPUSH
15181: CALL_OW 428
15185: PUSH
15186: LD_INT 0
15188: EQUAL
15189: IFFALSE 15213
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15191: CALL_OW 44
15195: PPUSH
15196: LD_VAR 0 4
15200: PPUSH
15201: LD_VAR 0 5
15205: PPUSH
15206: LD_INT 1
15208: PPUSH
15209: CALL_OW 48
// end ;
15213: LD_VAR 0 6
15217: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
// uc_side := your_side ;
15222: LD_ADDR_OWVAR 20
15226: PUSH
15227: LD_OWVAR 2
15231: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15232: LD_VAR 0 1
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: LD_INT 2
15242: PUSH
15243: LD_INT 3
15245: PUSH
15246: LD_INT 4
15248: PUSH
15249: LD_INT 5
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: IN
15259: IFFALSE 15271
// uc_nation := nation_american else
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
15269: GO 15314
// if chassis in [ 11 , 12 , 13 , 14 ] then
15271: LD_VAR 0 1
15275: PUSH
15276: LD_INT 11
15278: PUSH
15279: LD_INT 12
15281: PUSH
15282: LD_INT 13
15284: PUSH
15285: LD_INT 14
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: IN
15294: IFFALSE 15306
// uc_nation := nation_arabian else
15296: LD_ADDR_OWVAR 21
15300: PUSH
15301: LD_INT 2
15303: ST_TO_ADDR
15304: GO 15314
// uc_nation := nation_russian ;
15306: LD_ADDR_OWVAR 21
15310: PUSH
15311: LD_INT 3
15313: ST_TO_ADDR
// vc_chassis := chassis ;
15314: LD_ADDR_OWVAR 37
15318: PUSH
15319: LD_VAR 0 1
15323: ST_TO_ADDR
// vc_engine := engine ;
15324: LD_ADDR_OWVAR 39
15328: PUSH
15329: LD_VAR 0 2
15333: ST_TO_ADDR
// vc_control := control ;
15334: LD_ADDR_OWVAR 38
15338: PUSH
15339: LD_VAR 0 3
15343: ST_TO_ADDR
// vc_weapon := weapon ;
15344: LD_ADDR_OWVAR 40
15348: PUSH
15349: LD_VAR 0 4
15353: ST_TO_ADDR
// un := CreateVehicle ;
15354: LD_ADDR_VAR 0 8
15358: PUSH
15359: CALL_OW 45
15363: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15364: LD_VAR 0 8
15368: PPUSH
15369: LD_INT 0
15371: PPUSH
15372: LD_INT 5
15374: PPUSH
15375: CALL_OW 12
15379: PPUSH
15380: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15384: LD_VAR 0 8
15388: PPUSH
15389: LD_VAR 0 5
15393: PPUSH
15394: LD_VAR 0 6
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 48
// end ;
15406: LD_VAR 0 7
15410: RET
// export hInvincible ; every 1 do
15411: GO 15413
15413: DISABLE
// hInvincible := [ ] ;
15414: LD_ADDR_EXP 60
15418: PUSH
15419: EMPTY
15420: ST_TO_ADDR
15421: END
// every 10 do var i ;
15422: GO 15424
15424: DISABLE
15425: LD_INT 0
15427: PPUSH
// begin enable ;
15428: ENABLE
// if not hInvincible then
15429: LD_EXP 60
15433: NOT
15434: IFFALSE 15438
// exit ;
15436: GO 15482
// for i in hInvincible do
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: LD_EXP 60
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15480
// if GetLives ( i ) < 1000 then
15451: LD_VAR 0 1
15455: PPUSH
15456: CALL_OW 256
15460: PUSH
15461: LD_INT 1000
15463: LESS
15464: IFFALSE 15478
// SetLives ( i , 1000 ) ;
15466: LD_VAR 0 1
15470: PPUSH
15471: LD_INT 1000
15473: PPUSH
15474: CALL_OW 234
15478: GO 15448
15480: POP
15481: POP
// end ;
15482: PPOPN 1
15484: END
// export function hHackInvincible ; var i ; begin
15485: LD_INT 0
15487: PPUSH
15488: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: LD_INT 2
15496: PUSH
15497: LD_INT 21
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 21
15509: PUSH
15510: LD_INT 2
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 69
15526: PUSH
15527: FOR_IN
15528: IFFALSE 15589
// if IsSelected ( i ) then
15530: LD_VAR 0 2
15534: PPUSH
15535: CALL_OW 306
15539: IFFALSE 15587
// begin if i in hInvincible then
15541: LD_VAR 0 2
15545: PUSH
15546: LD_EXP 60
15550: IN
15551: IFFALSE 15571
// hInvincible := hInvincible diff i else
15553: LD_ADDR_EXP 60
15557: PUSH
15558: LD_EXP 60
15562: PUSH
15563: LD_VAR 0 2
15567: DIFF
15568: ST_TO_ADDR
15569: GO 15587
// hInvincible := hInvincible union i ;
15571: LD_ADDR_EXP 60
15575: PUSH
15576: LD_EXP 60
15580: PUSH
15581: LD_VAR 0 2
15585: UNION
15586: ST_TO_ADDR
// end ;
15587: GO 15527
15589: POP
15590: POP
// end ;
15591: LD_VAR 0 1
15595: RET
// export function hHackInvisible ; var i , j ; begin
15596: LD_INT 0
15598: PPUSH
15599: PPUSH
15600: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PPUSH
15616: CALL_OW 69
15620: PUSH
15621: FOR_IN
15622: IFFALSE 15646
// if IsSelected ( i ) then
15624: LD_VAR 0 2
15628: PPUSH
15629: CALL_OW 306
15633: IFFALSE 15644
// ComForceInvisible ( i ) ;
15635: LD_VAR 0 2
15639: PPUSH
15640: CALL_OW 496
15644: GO 15621
15646: POP
15647: POP
// end ;
15648: LD_VAR 0 1
15652: RET
// export function hHackChangeYourSide ; begin
15653: LD_INT 0
15655: PPUSH
// if your_side = 8 then
15656: LD_OWVAR 2
15660: PUSH
15661: LD_INT 8
15663: EQUAL
15664: IFFALSE 15676
// your_side := 0 else
15666: LD_ADDR_OWVAR 2
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
15674: GO 15690
// your_side := your_side + 1 ;
15676: LD_ADDR_OWVAR 2
15680: PUSH
15681: LD_OWVAR 2
15685: PUSH
15686: LD_INT 1
15688: PLUS
15689: ST_TO_ADDR
// end ;
15690: LD_VAR 0 1
15694: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
15699: PPUSH
// for i in all_units do
15700: LD_ADDR_VAR 0 2
15704: PUSH
15705: LD_OWVAR 3
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15789
// if IsSelected ( i ) then
15713: LD_VAR 0 2
15717: PPUSH
15718: CALL_OW 306
15722: IFFALSE 15787
// begin j := GetSide ( i ) ;
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_VAR 0 2
15733: PPUSH
15734: CALL_OW 255
15738: ST_TO_ADDR
// if j = 8 then
15739: LD_VAR 0 3
15743: PUSH
15744: LD_INT 8
15746: EQUAL
15747: IFFALSE 15759
// j := 0 else
15749: LD_ADDR_VAR 0 3
15753: PUSH
15754: LD_INT 0
15756: ST_TO_ADDR
15757: GO 15773
// j := j + 1 ;
15759: LD_ADDR_VAR 0 3
15763: PUSH
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 1
15771: PLUS
15772: ST_TO_ADDR
// SetSide ( i , j ) ;
15773: LD_VAR 0 2
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: CALL_OW 235
// end ;
15787: GO 15710
15789: POP
15790: POP
// end ;
15791: LD_VAR 0 1
15795: RET
// export function hHackFog ; begin
15796: LD_INT 0
15798: PPUSH
// FogOff ( true ) ;
15799: LD_INT 1
15801: PPUSH
15802: CALL_OW 344
// end ;
15806: LD_VAR 0 1
15810: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15811: LD_INT 0
15813: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_VAR 0 2
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 483
// CenterOnXY ( x , y ) ;
15839: LD_VAR 0 2
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: CALL_OW 84
// end ;
15853: LD_VAR 0 4
15857: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15858: LD_INT 0
15860: PPUSH
15861: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15862: LD_VAR 0 1
15866: NOT
15867: PUSH
15868: LD_VAR 0 2
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: CALL_OW 488
15882: NOT
15883: OR
15884: PUSH
15885: LD_VAR 0 1
15889: PPUSH
15890: CALL_OW 266
15894: PUSH
15895: LD_INT 3
15897: NONEQUAL
15898: PUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 247
15908: PUSH
15909: LD_INT 1
15911: EQUAL
15912: NOT
15913: AND
15914: OR
15915: IFFALSE 15919
// exit ;
15917: GO 16068
// if GetType ( factory ) = unit_human then
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 247
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: IFFALSE 15949
// factory := IsInUnit ( factory ) ;
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 310
15948: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 266
15958: PUSH
15959: LD_INT 3
15961: NONEQUAL
15962: IFFALSE 15966
// exit ;
15964: GO 16068
// if HexInfo ( x , y ) = factory then
15966: LD_VAR 0 2
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: CALL_OW 428
15980: PUSH
15981: LD_VAR 0 1
15985: EQUAL
15986: IFFALSE 16013
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
15988: LD_ADDR_EXP 61
15992: PUSH
15993: LD_EXP 61
15997: PPUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 0
16005: PPUSH
16006: CALL_OW 1
16010: ST_TO_ADDR
16011: GO 16064
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16013: LD_ADDR_EXP 61
16017: PUSH
16018: LD_EXP 61
16022: PPUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 1
16032: PPUSH
16033: CALL_OW 255
16037: PUSH
16038: LD_VAR 0 1
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: LD_VAR 0 3
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: PPUSH
16059: CALL_OW 1
16063: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16064: CALL 16073 0 0
// end ;
16068: LD_VAR 0 4
16072: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
16077: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16078: LD_STRING resetFactoryWaypoint();
16080: PPUSH
16081: CALL_OW 559
// if factoryWaypoints then
16085: LD_EXP 61
16089: IFFALSE 16215
// begin list := PrepareArray ( factoryWaypoints ) ;
16091: LD_ADDR_VAR 0 3
16095: PUSH
16096: LD_EXP 61
16100: PPUSH
16101: CALL 63579 0 1
16105: ST_TO_ADDR
// for i := 1 to list do
16106: LD_ADDR_VAR 0 2
16110: PUSH
16111: DOUBLE
16112: LD_INT 1
16114: DEC
16115: ST_TO_ADDR
16116: LD_VAR 0 3
16120: PUSH
16121: FOR_TO
16122: IFFALSE 16213
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16124: LD_STRING setFactoryWaypointXY(
16126: PUSH
16127: LD_VAR 0 3
16131: PUSH
16132: LD_VAR 0 2
16136: ARRAY
16137: PUSH
16138: LD_INT 1
16140: ARRAY
16141: STR
16142: PUSH
16143: LD_STRING ,
16145: STR
16146: PUSH
16147: LD_VAR 0 3
16151: PUSH
16152: LD_VAR 0 2
16156: ARRAY
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: STR
16162: PUSH
16163: LD_STRING ,
16165: STR
16166: PUSH
16167: LD_VAR 0 3
16171: PUSH
16172: LD_VAR 0 2
16176: ARRAY
16177: PUSH
16178: LD_INT 3
16180: ARRAY
16181: STR
16182: PUSH
16183: LD_STRING ,
16185: STR
16186: PUSH
16187: LD_VAR 0 3
16191: PUSH
16192: LD_VAR 0 2
16196: ARRAY
16197: PUSH
16198: LD_INT 4
16200: ARRAY
16201: STR
16202: PUSH
16203: LD_STRING )
16205: STR
16206: PPUSH
16207: CALL_OW 559
16211: GO 16121
16213: POP
16214: POP
// end ; end ;
16215: LD_VAR 0 1
16219: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16220: LD_INT 0
16222: PPUSH
// if HexInfo ( x , y ) = warehouse then
16223: LD_VAR 0 2
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: CALL_OW 428
16237: PUSH
16238: LD_VAR 0 1
16242: EQUAL
16243: IFFALSE 16270
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16245: LD_ADDR_EXP 62
16249: PUSH
16250: LD_EXP 62
16254: PPUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_INT 0
16262: PPUSH
16263: CALL_OW 1
16267: ST_TO_ADDR
16268: GO 16321
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16270: LD_ADDR_EXP 62
16274: PUSH
16275: LD_EXP 62
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 255
16294: PUSH
16295: LD_VAR 0 1
16299: PUSH
16300: LD_VAR 0 2
16304: PUSH
16305: LD_VAR 0 3
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 1
16320: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16321: CALL 16330 0 0
// end ;
16325: LD_VAR 0 4
16329: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16330: LD_INT 0
16332: PPUSH
16333: PPUSH
16334: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16335: LD_STRING resetWarehouseGatheringPoints();
16337: PPUSH
16338: CALL_OW 559
// if warehouseGatheringPoints then
16342: LD_EXP 62
16346: IFFALSE 16472
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16348: LD_ADDR_VAR 0 3
16352: PUSH
16353: LD_EXP 62
16357: PPUSH
16358: CALL 63579 0 1
16362: ST_TO_ADDR
// for i := 1 to list do
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 3
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16470
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16381: LD_STRING setWarehouseGatheringPointXY(
16383: PUSH
16384: LD_VAR 0 3
16388: PUSH
16389: LD_VAR 0 2
16393: ARRAY
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: STR
16399: PUSH
16400: LD_STRING ,
16402: STR
16403: PUSH
16404: LD_VAR 0 3
16408: PUSH
16409: LD_VAR 0 2
16413: ARRAY
16414: PUSH
16415: LD_INT 2
16417: ARRAY
16418: STR
16419: PUSH
16420: LD_STRING ,
16422: STR
16423: PUSH
16424: LD_VAR 0 3
16428: PUSH
16429: LD_VAR 0 2
16433: ARRAY
16434: PUSH
16435: LD_INT 3
16437: ARRAY
16438: STR
16439: PUSH
16440: LD_STRING ,
16442: STR
16443: PUSH
16444: LD_VAR 0 3
16448: PUSH
16449: LD_VAR 0 2
16453: ARRAY
16454: PUSH
16455: LD_INT 4
16457: ARRAY
16458: STR
16459: PUSH
16460: LD_STRING )
16462: STR
16463: PPUSH
16464: CALL_OW 559
16468: GO 16378
16470: POP
16471: POP
// end ; end ;
16472: LD_VAR 0 1
16476: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16477: LD_EXP 62
16481: IFFALSE 17166
16483: GO 16485
16485: DISABLE
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
// begin enable ;
16497: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_EXP 62
16507: PPUSH
16508: CALL 63579 0 1
16512: ST_TO_ADDR
// if not list then
16513: LD_VAR 0 3
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 17166
// for i := 1 to list do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: DOUBLE
16528: LD_INT 1
16530: DEC
16531: ST_TO_ADDR
16532: LD_VAR 0 3
16536: PUSH
16537: FOR_TO
16538: IFFALSE 17164
// begin depot := list [ i ] [ 2 ] ;
16540: LD_ADDR_VAR 0 8
16544: PUSH
16545: LD_VAR 0 3
16549: PUSH
16550: LD_VAR 0 1
16554: ARRAY
16555: PUSH
16556: LD_INT 2
16558: ARRAY
16559: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16560: LD_ADDR_VAR 0 5
16564: PUSH
16565: LD_VAR 0 3
16569: PUSH
16570: LD_VAR 0 1
16574: ARRAY
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16580: LD_VAR 0 8
16584: PPUSH
16585: CALL_OW 301
16589: PUSH
16590: LD_VAR 0 5
16594: PUSH
16595: LD_VAR 0 8
16599: PPUSH
16600: CALL_OW 255
16604: NONEQUAL
16605: OR
16606: IFFALSE 16635
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16608: LD_ADDR_EXP 62
16612: PUSH
16613: LD_EXP 62
16617: PPUSH
16618: LD_VAR 0 8
16622: PPUSH
16623: LD_INT 0
16625: PPUSH
16626: CALL_OW 1
16630: ST_TO_ADDR
// exit ;
16631: POP
16632: POP
16633: GO 17166
// end ; x := list [ i ] [ 3 ] ;
16635: LD_ADDR_VAR 0 6
16639: PUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_VAR 0 1
16649: ARRAY
16650: PUSH
16651: LD_INT 3
16653: ARRAY
16654: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16655: LD_ADDR_VAR 0 7
16659: PUSH
16660: LD_VAR 0 3
16664: PUSH
16665: LD_VAR 0 1
16669: ARRAY
16670: PUSH
16671: LD_INT 4
16673: ARRAY
16674: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16675: LD_ADDR_VAR 0 9
16679: PUSH
16680: LD_VAR 0 6
16684: PPUSH
16685: LD_VAR 0 7
16689: PPUSH
16690: LD_INT 16
16692: PPUSH
16693: CALL 62167 0 3
16697: ST_TO_ADDR
// if not cratesNearbyPoint then
16698: LD_VAR 0 9
16702: NOT
16703: IFFALSE 16709
// exit ;
16705: POP
16706: POP
16707: GO 17166
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16709: LD_ADDR_VAR 0 4
16713: PUSH
16714: LD_INT 22
16716: PUSH
16717: LD_VAR 0 5
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 91
16741: PUSH
16742: LD_VAR 0 8
16746: PUSH
16747: LD_INT 6
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: LD_INT 25
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 25
16770: PUSH
16771: LD_INT 16
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: PPUSH
16789: CALL_OW 69
16793: PUSH
16794: LD_VAR 0 8
16798: PPUSH
16799: CALL_OW 313
16803: PPUSH
16804: LD_INT 3
16806: PUSH
16807: LD_INT 60
16809: PUSH
16810: EMPTY
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: LD_INT 25
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 25
16832: PUSH
16833: LD_INT 16
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PPUSH
16849: CALL_OW 72
16853: UNION
16854: ST_TO_ADDR
// if tmp then
16855: LD_VAR 0 4
16859: IFFALSE 16939
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16861: LD_ADDR_VAR 0 4
16865: PUSH
16866: LD_VAR 0 4
16870: PPUSH
16871: LD_INT 3
16873: PPUSH
16874: CALL 60136 0 2
16878: ST_TO_ADDR
// for j in tmp do
16879: LD_ADDR_VAR 0 2
16883: PUSH
16884: LD_VAR 0 4
16888: PUSH
16889: FOR_IN
16890: IFFALSE 16933
// begin if IsInUnit ( j ) then
16892: LD_VAR 0 2
16896: PPUSH
16897: CALL_OW 310
16901: IFFALSE 16912
// ComExit ( j ) ;
16903: LD_VAR 0 2
16907: PPUSH
16908: CALL 60219 0 1
// AddComCollect ( j , x , y ) ;
16912: LD_VAR 0 2
16916: PPUSH
16917: LD_VAR 0 6
16921: PPUSH
16922: LD_VAR 0 7
16926: PPUSH
16927: CALL_OW 177
// end ;
16931: GO 16889
16933: POP
16934: POP
// exit ;
16935: POP
16936: POP
16937: GO 17166
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16939: LD_ADDR_VAR 0 4
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_VAR 0 5
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 91
16958: PUSH
16959: LD_VAR 0 8
16963: PUSH
16964: LD_INT 8
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 34
16977: PUSH
16978: LD_INT 12
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 34
16987: PUSH
16988: LD_INT 51
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 34
16997: PUSH
16998: LD_INT 32
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 34
17007: PUSH
17008: LD_INT 89
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: PPUSH
17027: CALL_OW 69
17031: ST_TO_ADDR
// if tmp then
17032: LD_VAR 0 4
17036: IFFALSE 17162
// begin for j in tmp do
17038: LD_ADDR_VAR 0 2
17042: PUSH
17043: LD_VAR 0 4
17047: PUSH
17048: FOR_IN
17049: IFFALSE 17160
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17051: LD_VAR 0 2
17055: PPUSH
17056: CALL_OW 262
17060: PUSH
17061: LD_INT 3
17063: EQUAL
17064: PUSH
17065: LD_VAR 0 2
17069: PPUSH
17070: CALL_OW 261
17074: PUSH
17075: LD_INT 20
17077: GREATER
17078: OR
17079: PUSH
17080: LD_VAR 0 2
17084: PPUSH
17085: CALL_OW 314
17089: NOT
17090: AND
17091: PUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: CALL_OW 263
17101: PUSH
17102: LD_INT 1
17104: NONEQUAL
17105: PUSH
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 311
17115: OR
17116: AND
17117: IFFALSE 17158
// begin ComCollect ( j , x , y ) ;
17119: LD_VAR 0 2
17123: PPUSH
17124: LD_VAR 0 6
17128: PPUSH
17129: LD_VAR 0 7
17133: PPUSH
17134: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_VAR 0 8
17147: PPUSH
17148: CALL_OW 172
// exit ;
17152: POP
17153: POP
17154: POP
17155: POP
17156: GO 17166
// end ;
17158: GO 17048
17160: POP
17161: POP
// end ; end ;
17162: GO 16537
17164: POP
17165: POP
// end ; end_of_file
17166: PPOPN 9
17168: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 264
17184: PUSH
17185: LD_INT 91
17187: EQUAL
17188: IFFALSE 17260
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17190: LD_INT 68
17192: PPUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 255
17202: PPUSH
17203: CALL_OW 321
17207: PUSH
17208: LD_INT 2
17210: EQUAL
17211: IFFALSE 17223
// eff := 70 else
17213: LD_ADDR_VAR 0 4
17217: PUSH
17218: LD_INT 70
17220: ST_TO_ADDR
17221: GO 17231
// eff := 30 ;
17223: LD_ADDR_VAR 0 4
17227: PUSH
17228: LD_INT 30
17230: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 250
17240: PPUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 251
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: CALL_OW 495
// end ; end ;
17260: LD_VAR 0 2
17264: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17265: LD_INT 0
17267: PPUSH
// end ;
17268: LD_VAR 0 4
17272: RET
// export function SOS_Command ( cmd ) ; begin
17273: LD_INT 0
17275: PPUSH
// end ;
17276: LD_VAR 0 2
17280: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17281: LD_INT 0
17283: PPUSH
// end ;
17284: LD_VAR 0 6
17288: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17289: LD_INT 0
17291: PPUSH
17292: PPUSH
// if not vehicle or not factory then
17293: LD_VAR 0 1
17297: NOT
17298: PUSH
17299: LD_VAR 0 2
17303: NOT
17304: OR
17305: IFFALSE 17309
// exit ;
17307: GO 17540
// if factoryWaypoints >= factory then
17309: LD_EXP 61
17313: PUSH
17314: LD_VAR 0 2
17318: GREATEREQUAL
17319: IFFALSE 17540
// if factoryWaypoints [ factory ] then
17321: LD_EXP 61
17325: PUSH
17326: LD_VAR 0 2
17330: ARRAY
17331: IFFALSE 17540
// begin if GetControl ( vehicle ) = control_manual then
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 263
17342: PUSH
17343: LD_INT 1
17345: EQUAL
17346: IFFALSE 17427
// begin driver := IsDrivenBy ( vehicle ) ;
17348: LD_ADDR_VAR 0 4
17352: PUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 311
17362: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17363: LD_VAR 0 4
17367: PPUSH
17368: LD_EXP 61
17372: PUSH
17373: LD_VAR 0 2
17377: ARRAY
17378: PUSH
17379: LD_INT 3
17381: ARRAY
17382: PPUSH
17383: LD_EXP 61
17387: PUSH
17388: LD_VAR 0 2
17392: ARRAY
17393: PUSH
17394: LD_INT 4
17396: ARRAY
17397: PPUSH
17398: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17402: LD_VAR 0 4
17406: PPUSH
17407: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17411: LD_VAR 0 4
17415: PPUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: CALL_OW 180
// end else
17425: GO 17540
// if GetControl ( vehicle ) = control_remote then
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 263
17436: PUSH
17437: LD_INT 2
17439: EQUAL
17440: IFFALSE 17501
// begin wait ( 0 0$2 ) ;
17442: LD_INT 70
17444: PPUSH
17445: CALL_OW 67
// if Connect ( vehicle ) then
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL 30427 0 1
17458: IFFALSE 17499
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17460: LD_VAR 0 1
17464: PPUSH
17465: LD_EXP 61
17469: PUSH
17470: LD_VAR 0 2
17474: ARRAY
17475: PUSH
17476: LD_INT 3
17478: ARRAY
17479: PPUSH
17480: LD_EXP 61
17484: PUSH
17485: LD_VAR 0 2
17489: ARRAY
17490: PUSH
17491: LD_INT 4
17493: ARRAY
17494: PPUSH
17495: CALL_OW 171
// end else
17499: GO 17540
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17501: LD_VAR 0 1
17505: PPUSH
17506: LD_EXP 61
17510: PUSH
17511: LD_VAR 0 2
17515: ARRAY
17516: PUSH
17517: LD_INT 3
17519: ARRAY
17520: PPUSH
17521: LD_EXP 61
17525: PUSH
17526: LD_VAR 0 2
17530: ARRAY
17531: PUSH
17532: LD_INT 4
17534: ARRAY
17535: PPUSH
17536: CALL_OW 171
// end ; end ;
17540: LD_VAR 0 3
17544: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17545: LD_INT 0
17547: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17548: LD_VAR 0 1
17552: PUSH
17553: LD_INT 250
17555: EQUAL
17556: PUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 264
17566: PUSH
17567: LD_INT 81
17569: EQUAL
17570: AND
17571: IFFALSE 17592
// MinerPlaceMine ( unit , x , y ) ;
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_VAR 0 4
17582: PPUSH
17583: LD_VAR 0 5
17587: PPUSH
17588: CALL 20416 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17592: LD_VAR 0 1
17596: PUSH
17597: LD_INT 251
17599: EQUAL
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: CALL_OW 264
17610: PUSH
17611: LD_INT 81
17613: EQUAL
17614: AND
17615: IFFALSE 17636
// MinerDetonateMine ( unit , x , y ) ;
17617: LD_VAR 0 2
17621: PPUSH
17622: LD_VAR 0 4
17626: PPUSH
17627: LD_VAR 0 5
17631: PPUSH
17632: CALL 20691 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17636: LD_VAR 0 1
17640: PUSH
17641: LD_INT 252
17643: EQUAL
17644: PUSH
17645: LD_VAR 0 2
17649: PPUSH
17650: CALL_OW 264
17654: PUSH
17655: LD_INT 81
17657: EQUAL
17658: AND
17659: IFFALSE 17680
// MinerCreateMinefield ( unit , x , y ) ;
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 4
17670: PPUSH
17671: LD_VAR 0 5
17675: PPUSH
17676: CALL 21108 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17680: LD_VAR 0 1
17684: PUSH
17685: LD_INT 253
17687: EQUAL
17688: PUSH
17689: LD_VAR 0 2
17693: PPUSH
17694: CALL_OW 257
17698: PUSH
17699: LD_INT 5
17701: EQUAL
17702: AND
17703: IFFALSE 17724
// ComBinocular ( unit , x , y ) ;
17705: LD_VAR 0 2
17709: PPUSH
17710: LD_VAR 0 4
17714: PPUSH
17715: LD_VAR 0 5
17719: PPUSH
17720: CALL 21477 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17724: LD_VAR 0 1
17728: PUSH
17729: LD_INT 254
17731: EQUAL
17732: PUSH
17733: LD_VAR 0 2
17737: PPUSH
17738: CALL_OW 264
17742: PUSH
17743: LD_INT 99
17745: EQUAL
17746: AND
17747: PUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: CALL_OW 263
17757: PUSH
17758: LD_INT 3
17760: EQUAL
17761: AND
17762: IFFALSE 17778
// HackDestroyVehicle ( unit , selectedUnit ) ;
17764: LD_VAR 0 2
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: CALL 19780 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17778: LD_VAR 0 1
17782: PUSH
17783: LD_INT 255
17785: EQUAL
17786: PUSH
17787: LD_VAR 0 2
17791: PPUSH
17792: CALL_OW 264
17796: PUSH
17797: LD_INT 14
17799: PUSH
17800: LD_INT 53
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: IN
17807: AND
17808: PUSH
17809: LD_VAR 0 4
17813: PPUSH
17814: LD_VAR 0 5
17818: PPUSH
17819: CALL_OW 488
17823: AND
17824: IFFALSE 17848
// CutTreeXYR ( unit , x , y , 12 ) ;
17826: LD_VAR 0 2
17830: PPUSH
17831: LD_VAR 0 4
17835: PPUSH
17836: LD_VAR 0 5
17840: PPUSH
17841: LD_INT 12
17843: PPUSH
17844: CALL 17943 0 4
// if cmd = 256 then
17848: LD_VAR 0 1
17852: PUSH
17853: LD_INT 256
17855: EQUAL
17856: IFFALSE 17877
// SetFactoryWaypoint ( unit , x , y ) ;
17858: LD_VAR 0 2
17862: PPUSH
17863: LD_VAR 0 4
17867: PPUSH
17868: LD_VAR 0 5
17872: PPUSH
17873: CALL 15858 0 3
// if cmd = 257 then
17877: LD_VAR 0 1
17881: PUSH
17882: LD_INT 257
17884: EQUAL
17885: IFFALSE 17906
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17887: LD_VAR 0 2
17891: PPUSH
17892: LD_VAR 0 4
17896: PPUSH
17897: LD_VAR 0 5
17901: PPUSH
17902: CALL 16220 0 3
// if cmd = 258 then
17906: LD_VAR 0 1
17910: PUSH
17911: LD_INT 258
17913: EQUAL
17914: IFFALSE 17938
// BurnTreeXYR ( unit , x , y , 8 ) ;
17916: LD_VAR 0 2
17920: PPUSH
17921: LD_VAR 0 4
17925: PPUSH
17926: LD_VAR 0 5
17930: PPUSH
17931: LD_INT 8
17933: PPUSH
17934: CALL 18337 0 4
// end ;
17938: LD_VAR 0 6
17942: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17943: LD_INT 0
17945: PPUSH
17946: PPUSH
17947: PPUSH
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 302
17963: NOT
17964: PUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: LD_VAR 0 3
17974: PPUSH
17975: CALL_OW 488
17979: NOT
17980: OR
17981: PUSH
17982: LD_VAR 0 4
17986: NOT
17987: OR
17988: IFFALSE 17992
// exit ;
17990: GO 18332
// list := [ ] ;
17992: LD_ADDR_VAR 0 13
17996: PUSH
17997: EMPTY
17998: ST_TO_ADDR
// if x - r < 0 then
17999: LD_VAR 0 2
18003: PUSH
18004: LD_VAR 0 4
18008: MINUS
18009: PUSH
18010: LD_INT 0
18012: LESS
18013: IFFALSE 18025
// min_x := 0 else
18015: LD_ADDR_VAR 0 7
18019: PUSH
18020: LD_INT 0
18022: ST_TO_ADDR
18023: GO 18041
// min_x := x - r ;
18025: LD_ADDR_VAR 0 7
18029: PUSH
18030: LD_VAR 0 2
18034: PUSH
18035: LD_VAR 0 4
18039: MINUS
18040: ST_TO_ADDR
// if y - r < 0 then
18041: LD_VAR 0 3
18045: PUSH
18046: LD_VAR 0 4
18050: MINUS
18051: PUSH
18052: LD_INT 0
18054: LESS
18055: IFFALSE 18067
// min_y := 0 else
18057: LD_ADDR_VAR 0 8
18061: PUSH
18062: LD_INT 0
18064: ST_TO_ADDR
18065: GO 18083
// min_y := y - r ;
18067: LD_ADDR_VAR 0 8
18071: PUSH
18072: LD_VAR 0 3
18076: PUSH
18077: LD_VAR 0 4
18081: MINUS
18082: ST_TO_ADDR
// max_x := x + r ;
18083: LD_ADDR_VAR 0 9
18087: PUSH
18088: LD_VAR 0 2
18092: PUSH
18093: LD_VAR 0 4
18097: PLUS
18098: ST_TO_ADDR
// max_y := y + r ;
18099: LD_ADDR_VAR 0 10
18103: PUSH
18104: LD_VAR 0 3
18108: PUSH
18109: LD_VAR 0 4
18113: PLUS
18114: ST_TO_ADDR
// for _x = min_x to max_x do
18115: LD_ADDR_VAR 0 11
18119: PUSH
18120: DOUBLE
18121: LD_VAR 0 7
18125: DEC
18126: ST_TO_ADDR
18127: LD_VAR 0 9
18131: PUSH
18132: FOR_TO
18133: IFFALSE 18250
// for _y = min_y to max_y do
18135: LD_ADDR_VAR 0 12
18139: PUSH
18140: DOUBLE
18141: LD_VAR 0 8
18145: DEC
18146: ST_TO_ADDR
18147: LD_VAR 0 10
18151: PUSH
18152: FOR_TO
18153: IFFALSE 18246
// begin if not ValidHex ( _x , _y ) then
18155: LD_VAR 0 11
18159: PPUSH
18160: LD_VAR 0 12
18164: PPUSH
18165: CALL_OW 488
18169: NOT
18170: IFFALSE 18174
// continue ;
18172: GO 18152
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18174: LD_VAR 0 11
18178: PPUSH
18179: LD_VAR 0 12
18183: PPUSH
18184: CALL_OW 351
18188: PUSH
18189: LD_VAR 0 11
18193: PPUSH
18194: LD_VAR 0 12
18198: PPUSH
18199: CALL_OW 554
18203: AND
18204: IFFALSE 18244
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18206: LD_ADDR_VAR 0 13
18210: PUSH
18211: LD_VAR 0 13
18215: PPUSH
18216: LD_VAR 0 13
18220: PUSH
18221: LD_INT 1
18223: PLUS
18224: PPUSH
18225: LD_VAR 0 11
18229: PUSH
18230: LD_VAR 0 12
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PPUSH
18239: CALL_OW 2
18243: ST_TO_ADDR
// end ;
18244: GO 18152
18246: POP
18247: POP
18248: GO 18132
18250: POP
18251: POP
// if not list then
18252: LD_VAR 0 13
18256: NOT
18257: IFFALSE 18261
// exit ;
18259: GO 18332
// for i in list do
18261: LD_ADDR_VAR 0 6
18265: PUSH
18266: LD_VAR 0 13
18270: PUSH
18271: FOR_IN
18272: IFFALSE 18330
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18274: LD_VAR 0 1
18278: PPUSH
18279: LD_STRING M
18281: PUSH
18282: LD_VAR 0 6
18286: PUSH
18287: LD_INT 1
18289: ARRAY
18290: PUSH
18291: LD_VAR 0 6
18295: PUSH
18296: LD_INT 2
18298: ARRAY
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: PPUSH
18324: CALL_OW 447
18328: GO 18271
18330: POP
18331: POP
// end ;
18332: LD_VAR 0 5
18336: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 302
18357: NOT
18358: PUSH
18359: LD_VAR 0 2
18363: PPUSH
18364: LD_VAR 0 3
18368: PPUSH
18369: CALL_OW 488
18373: NOT
18374: OR
18375: PUSH
18376: LD_VAR 0 4
18380: NOT
18381: OR
18382: IFFALSE 18386
// exit ;
18384: GO 18734
// list := [ ] ;
18386: LD_ADDR_VAR 0 13
18390: PUSH
18391: EMPTY
18392: ST_TO_ADDR
// if x - r < 0 then
18393: LD_VAR 0 2
18397: PUSH
18398: LD_VAR 0 4
18402: MINUS
18403: PUSH
18404: LD_INT 0
18406: LESS
18407: IFFALSE 18419
// min_x := 0 else
18409: LD_ADDR_VAR 0 7
18413: PUSH
18414: LD_INT 0
18416: ST_TO_ADDR
18417: GO 18435
// min_x := x - r ;
18419: LD_ADDR_VAR 0 7
18423: PUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_VAR 0 4
18433: MINUS
18434: ST_TO_ADDR
// if y - r < 0 then
18435: LD_VAR 0 3
18439: PUSH
18440: LD_VAR 0 4
18444: MINUS
18445: PUSH
18446: LD_INT 0
18448: LESS
18449: IFFALSE 18461
// min_y := 0 else
18451: LD_ADDR_VAR 0 8
18455: PUSH
18456: LD_INT 0
18458: ST_TO_ADDR
18459: GO 18477
// min_y := y - r ;
18461: LD_ADDR_VAR 0 8
18465: PUSH
18466: LD_VAR 0 3
18470: PUSH
18471: LD_VAR 0 4
18475: MINUS
18476: ST_TO_ADDR
// max_x := x + r ;
18477: LD_ADDR_VAR 0 9
18481: PUSH
18482: LD_VAR 0 2
18486: PUSH
18487: LD_VAR 0 4
18491: PLUS
18492: ST_TO_ADDR
// max_y := y + r ;
18493: LD_ADDR_VAR 0 10
18497: PUSH
18498: LD_VAR 0 3
18502: PUSH
18503: LD_VAR 0 4
18507: PLUS
18508: ST_TO_ADDR
// for _x = min_x to max_x do
18509: LD_ADDR_VAR 0 11
18513: PUSH
18514: DOUBLE
18515: LD_VAR 0 7
18519: DEC
18520: ST_TO_ADDR
18521: LD_VAR 0 9
18525: PUSH
18526: FOR_TO
18527: IFFALSE 18644
// for _y = min_y to max_y do
18529: LD_ADDR_VAR 0 12
18533: PUSH
18534: DOUBLE
18535: LD_VAR 0 8
18539: DEC
18540: ST_TO_ADDR
18541: LD_VAR 0 10
18545: PUSH
18546: FOR_TO
18547: IFFALSE 18640
// begin if not ValidHex ( _x , _y ) then
18549: LD_VAR 0 11
18553: PPUSH
18554: LD_VAR 0 12
18558: PPUSH
18559: CALL_OW 488
18563: NOT
18564: IFFALSE 18568
// continue ;
18566: GO 18546
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18568: LD_VAR 0 11
18572: PPUSH
18573: LD_VAR 0 12
18577: PPUSH
18578: CALL_OW 351
18582: PUSH
18583: LD_VAR 0 11
18587: PPUSH
18588: LD_VAR 0 12
18592: PPUSH
18593: CALL_OW 554
18597: AND
18598: IFFALSE 18638
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18600: LD_ADDR_VAR 0 13
18604: PUSH
18605: LD_VAR 0 13
18609: PPUSH
18610: LD_VAR 0 13
18614: PUSH
18615: LD_INT 1
18617: PLUS
18618: PPUSH
18619: LD_VAR 0 11
18623: PUSH
18624: LD_VAR 0 12
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PPUSH
18633: CALL_OW 2
18637: ST_TO_ADDR
// end ;
18638: GO 18546
18640: POP
18641: POP
18642: GO 18526
18644: POP
18645: POP
// if not list then
18646: LD_VAR 0 13
18650: NOT
18651: IFFALSE 18655
// exit ;
18653: GO 18734
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18655: LD_ADDR_VAR 0 13
18659: PUSH
18660: LD_VAR 0 1
18664: PPUSH
18665: LD_VAR 0 13
18669: PPUSH
18670: LD_INT 1
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL 27569 0 4
18680: ST_TO_ADDR
// ComStop ( flame ) ;
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL_OW 141
// for i in list do
18690: LD_ADDR_VAR 0 6
18694: PUSH
18695: LD_VAR 0 13
18699: PUSH
18700: FOR_IN
18701: IFFALSE 18732
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 6
18712: PUSH
18713: LD_INT 1
18715: ARRAY
18716: PPUSH
18717: LD_VAR 0 6
18721: PUSH
18722: LD_INT 2
18724: ARRAY
18725: PPUSH
18726: CALL_OW 176
18730: GO 18700
18732: POP
18733: POP
// end ;
18734: LD_VAR 0 5
18738: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18739: LD_EXP 64
18743: NOT
18744: IFFALSE 18794
18746: GO 18748
18748: DISABLE
// begin initHack := true ;
18749: LD_ADDR_EXP 64
18753: PUSH
18754: LD_INT 1
18756: ST_TO_ADDR
// hackTanks := [ ] ;
18757: LD_ADDR_EXP 65
18761: PUSH
18762: EMPTY
18763: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18764: LD_ADDR_EXP 66
18768: PUSH
18769: EMPTY
18770: ST_TO_ADDR
// hackLimit := 3 ;
18771: LD_ADDR_EXP 67
18775: PUSH
18776: LD_INT 3
18778: ST_TO_ADDR
// hackDist := 12 ;
18779: LD_ADDR_EXP 68
18783: PUSH
18784: LD_INT 12
18786: ST_TO_ADDR
// hackCounter := [ ] ;
18787: LD_ADDR_EXP 69
18791: PUSH
18792: EMPTY
18793: ST_TO_ADDR
// end ;
18794: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18795: LD_EXP 64
18799: PUSH
18800: LD_INT 34
18802: PUSH
18803: LD_INT 99
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: AND
18815: IFFALSE 19068
18817: GO 18819
18819: DISABLE
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
// begin enable ;
18824: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18825: LD_ADDR_VAR 0 1
18829: PUSH
18830: LD_INT 34
18832: PUSH
18833: LD_INT 99
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PPUSH
18840: CALL_OW 69
18844: PUSH
18845: FOR_IN
18846: IFFALSE 19066
// begin if not i in hackTanks then
18848: LD_VAR 0 1
18852: PUSH
18853: LD_EXP 65
18857: IN
18858: NOT
18859: IFFALSE 18942
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18861: LD_ADDR_EXP 65
18865: PUSH
18866: LD_EXP 65
18870: PPUSH
18871: LD_EXP 65
18875: PUSH
18876: LD_INT 1
18878: PLUS
18879: PPUSH
18880: LD_VAR 0 1
18884: PPUSH
18885: CALL_OW 1
18889: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18890: LD_ADDR_EXP 66
18894: PUSH
18895: LD_EXP 66
18899: PPUSH
18900: LD_EXP 66
18904: PUSH
18905: LD_INT 1
18907: PLUS
18908: PPUSH
18909: EMPTY
18910: PPUSH
18911: CALL_OW 1
18915: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18916: LD_ADDR_EXP 69
18920: PUSH
18921: LD_EXP 69
18925: PPUSH
18926: LD_EXP 69
18930: PUSH
18931: LD_INT 1
18933: PLUS
18934: PPUSH
18935: EMPTY
18936: PPUSH
18937: CALL_OW 1
18941: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18942: LD_VAR 0 1
18946: PPUSH
18947: CALL_OW 302
18951: NOT
18952: IFFALSE 18965
// begin HackUnlinkAll ( i ) ;
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL 19071 0 1
// continue ;
18963: GO 18845
// end ; HackCheckCapturedStatus ( i ) ;
18965: LD_VAR 0 1
18969: PPUSH
18970: CALL 19514 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18974: LD_ADDR_VAR 0 2
18978: PUSH
18979: LD_INT 81
18981: PUSH
18982: LD_VAR 0 1
18986: PPUSH
18987: CALL_OW 255
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 33
18998: PUSH
18999: LD_INT 3
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 91
19008: PUSH
19009: LD_VAR 0 1
19013: PUSH
19014: LD_EXP 68
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 50
19026: PUSH
19027: EMPTY
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: PPUSH
19036: CALL_OW 69
19040: ST_TO_ADDR
// if not tmp then
19041: LD_VAR 0 2
19045: NOT
19046: IFFALSE 19050
// continue ;
19048: GO 18845
// HackLink ( i , tmp ) ;
19050: LD_VAR 0 1
19054: PPUSH
19055: LD_VAR 0 2
19059: PPUSH
19060: CALL 19207 0 2
// end ;
19064: GO 18845
19066: POP
19067: POP
// end ;
19068: PPOPN 2
19070: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19071: LD_INT 0
19073: PPUSH
19074: PPUSH
19075: PPUSH
// if not hack in hackTanks then
19076: LD_VAR 0 1
19080: PUSH
19081: LD_EXP 65
19085: IN
19086: NOT
19087: IFFALSE 19091
// exit ;
19089: GO 19202
// index := GetElementIndex ( hackTanks , hack ) ;
19091: LD_ADDR_VAR 0 4
19095: PUSH
19096: LD_EXP 65
19100: PPUSH
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL 26866 0 2
19110: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19111: LD_EXP 66
19115: PUSH
19116: LD_VAR 0 4
19120: ARRAY
19121: IFFALSE 19202
// begin for i in hackTanksCaptured [ index ] do
19123: LD_ADDR_VAR 0 3
19127: PUSH
19128: LD_EXP 66
19132: PUSH
19133: LD_VAR 0 4
19137: ARRAY
19138: PUSH
19139: FOR_IN
19140: IFFALSE 19166
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 1
19149: ARRAY
19150: PPUSH
19151: LD_VAR 0 3
19155: PUSH
19156: LD_INT 2
19158: ARRAY
19159: PPUSH
19160: CALL_OW 235
19164: GO 19139
19166: POP
19167: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19168: LD_ADDR_EXP 66
19172: PUSH
19173: LD_EXP 66
19177: PPUSH
19178: LD_VAR 0 4
19182: PPUSH
19183: EMPTY
19184: PPUSH
19185: CALL_OW 1
19189: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19190: LD_VAR 0 1
19194: PPUSH
19195: LD_INT 0
19197: PPUSH
19198: CALL_OW 505
// end ; end ;
19202: LD_VAR 0 2
19206: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19207: LD_INT 0
19209: PPUSH
19210: PPUSH
19211: PPUSH
// if not hack in hackTanks or not vehicles then
19212: LD_VAR 0 1
19216: PUSH
19217: LD_EXP 65
19221: IN
19222: NOT
19223: PUSH
19224: LD_VAR 0 2
19228: NOT
19229: OR
19230: IFFALSE 19234
// exit ;
19232: GO 19509
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_VAR 0 1
19243: PPUSH
19244: LD_VAR 0 2
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL 27516 0 4
19259: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19260: LD_ADDR_VAR 0 5
19264: PUSH
19265: LD_EXP 65
19269: PPUSH
19270: LD_VAR 0 1
19274: PPUSH
19275: CALL 26866 0 2
19279: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19280: LD_EXP 66
19284: PUSH
19285: LD_VAR 0 5
19289: ARRAY
19290: PUSH
19291: LD_EXP 67
19295: LESS
19296: IFFALSE 19485
// begin for i := 1 to vehicles do
19298: LD_ADDR_VAR 0 4
19302: PUSH
19303: DOUBLE
19304: LD_INT 1
19306: DEC
19307: ST_TO_ADDR
19308: LD_VAR 0 2
19312: PUSH
19313: FOR_TO
19314: IFFALSE 19483
// begin if hackTanksCaptured [ index ] = hackLimit then
19316: LD_EXP 66
19320: PUSH
19321: LD_VAR 0 5
19325: ARRAY
19326: PUSH
19327: LD_EXP 67
19331: EQUAL
19332: IFFALSE 19336
// break ;
19334: GO 19483
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19336: LD_ADDR_EXP 69
19340: PUSH
19341: LD_EXP 69
19345: PPUSH
19346: LD_VAR 0 5
19350: PPUSH
19351: LD_EXP 69
19355: PUSH
19356: LD_VAR 0 5
19360: ARRAY
19361: PUSH
19362: LD_INT 1
19364: PLUS
19365: PPUSH
19366: CALL_OW 1
19370: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19371: LD_ADDR_EXP 66
19375: PUSH
19376: LD_EXP 66
19380: PPUSH
19381: LD_VAR 0 5
19385: PUSH
19386: LD_EXP 66
19390: PUSH
19391: LD_VAR 0 5
19395: ARRAY
19396: PUSH
19397: LD_INT 1
19399: PLUS
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: LD_VAR 0 2
19409: PUSH
19410: LD_VAR 0 4
19414: ARRAY
19415: PUSH
19416: LD_VAR 0 2
19420: PUSH
19421: LD_VAR 0 4
19425: ARRAY
19426: PPUSH
19427: CALL_OW 255
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL 27081 0 3
19440: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19441: LD_VAR 0 2
19445: PUSH
19446: LD_VAR 0 4
19450: ARRAY
19451: PPUSH
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 255
19461: PPUSH
19462: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19466: LD_VAR 0 2
19470: PUSH
19471: LD_VAR 0 4
19475: ARRAY
19476: PPUSH
19477: CALL_OW 141
// end ;
19481: GO 19313
19483: POP
19484: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19485: LD_VAR 0 1
19489: PPUSH
19490: LD_EXP 66
19494: PUSH
19495: LD_VAR 0 5
19499: ARRAY
19500: PUSH
19501: LD_INT 0
19503: PLUS
19504: PPUSH
19505: CALL_OW 505
// end ;
19509: LD_VAR 0 3
19513: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
19518: PPUSH
19519: PPUSH
// if not hack in hackTanks then
19520: LD_VAR 0 1
19524: PUSH
19525: LD_EXP 65
19529: IN
19530: NOT
19531: IFFALSE 19535
// exit ;
19533: GO 19775
// index := GetElementIndex ( hackTanks , hack ) ;
19535: LD_ADDR_VAR 0 4
19539: PUSH
19540: LD_EXP 65
19544: PPUSH
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL 26866 0 2
19554: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: DOUBLE
19561: LD_EXP 66
19565: PUSH
19566: LD_VAR 0 4
19570: ARRAY
19571: INC
19572: ST_TO_ADDR
19573: LD_INT 1
19575: PUSH
19576: FOR_DOWNTO
19577: IFFALSE 19749
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19579: LD_ADDR_VAR 0 5
19583: PUSH
19584: LD_EXP 66
19588: PUSH
19589: LD_VAR 0 4
19593: ARRAY
19594: PUSH
19595: LD_VAR 0 3
19599: ARRAY
19600: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19601: LD_VAR 0 5
19605: PUSH
19606: LD_INT 1
19608: ARRAY
19609: PPUSH
19610: CALL_OW 302
19614: NOT
19615: PUSH
19616: LD_VAR 0 5
19620: PUSH
19621: LD_INT 1
19623: ARRAY
19624: PPUSH
19625: CALL_OW 255
19629: PUSH
19630: LD_VAR 0 1
19634: PPUSH
19635: CALL_OW 255
19639: NONEQUAL
19640: OR
19641: IFFALSE 19747
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19643: LD_VAR 0 5
19647: PUSH
19648: LD_INT 1
19650: ARRAY
19651: PPUSH
19652: CALL_OW 305
19656: PUSH
19657: LD_VAR 0 5
19661: PUSH
19662: LD_INT 1
19664: ARRAY
19665: PPUSH
19666: CALL_OW 255
19670: PUSH
19671: LD_VAR 0 1
19675: PPUSH
19676: CALL_OW 255
19680: EQUAL
19681: AND
19682: IFFALSE 19706
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19684: LD_VAR 0 5
19688: PUSH
19689: LD_INT 1
19691: ARRAY
19692: PPUSH
19693: LD_VAR 0 5
19697: PUSH
19698: LD_INT 2
19700: ARRAY
19701: PPUSH
19702: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19706: LD_ADDR_EXP 66
19710: PUSH
19711: LD_EXP 66
19715: PPUSH
19716: LD_VAR 0 4
19720: PPUSH
19721: LD_EXP 66
19725: PUSH
19726: LD_VAR 0 4
19730: ARRAY
19731: PPUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: CALL_OW 3
19741: PPUSH
19742: CALL_OW 1
19746: ST_TO_ADDR
// end ; end ;
19747: GO 19576
19749: POP
19750: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19751: LD_VAR 0 1
19755: PPUSH
19756: LD_EXP 66
19760: PUSH
19761: LD_VAR 0 4
19765: ARRAY
19766: PUSH
19767: LD_INT 0
19769: PLUS
19770: PPUSH
19771: CALL_OW 505
// end ;
19775: LD_VAR 0 2
19779: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19780: LD_INT 0
19782: PPUSH
19783: PPUSH
19784: PPUSH
19785: PPUSH
// if not hack in hackTanks then
19786: LD_VAR 0 1
19790: PUSH
19791: LD_EXP 65
19795: IN
19796: NOT
19797: IFFALSE 19801
// exit ;
19799: GO 19886
// index := GetElementIndex ( hackTanks , hack ) ;
19801: LD_ADDR_VAR 0 5
19805: PUSH
19806: LD_EXP 65
19810: PPUSH
19811: LD_VAR 0 1
19815: PPUSH
19816: CALL 26866 0 2
19820: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19821: LD_ADDR_VAR 0 4
19825: PUSH
19826: DOUBLE
19827: LD_INT 1
19829: DEC
19830: ST_TO_ADDR
19831: LD_EXP 66
19835: PUSH
19836: LD_VAR 0 5
19840: ARRAY
19841: PUSH
19842: FOR_TO
19843: IFFALSE 19884
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19845: LD_EXP 66
19849: PUSH
19850: LD_VAR 0 5
19854: ARRAY
19855: PUSH
19856: LD_VAR 0 4
19860: ARRAY
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PUSH
19866: LD_VAR 0 2
19870: EQUAL
19871: IFFALSE 19882
// KillUnit ( vehicle ) ;
19873: LD_VAR 0 2
19877: PPUSH
19878: CALL_OW 66
19882: GO 19842
19884: POP
19885: POP
// end ;
19886: LD_VAR 0 3
19890: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19891: LD_EXP 70
19895: NOT
19896: IFFALSE 19931
19898: GO 19900
19900: DISABLE
// begin initMiner := true ;
19901: LD_ADDR_EXP 70
19905: PUSH
19906: LD_INT 1
19908: ST_TO_ADDR
// minersList := [ ] ;
19909: LD_ADDR_EXP 71
19913: PUSH
19914: EMPTY
19915: ST_TO_ADDR
// minerMinesList := [ ] ;
19916: LD_ADDR_EXP 72
19920: PUSH
19921: EMPTY
19922: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19923: LD_ADDR_EXP 73
19927: PUSH
19928: LD_INT 5
19930: ST_TO_ADDR
// end ;
19931: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19932: LD_EXP 70
19936: PUSH
19937: LD_INT 34
19939: PUSH
19940: LD_INT 81
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 69
19951: AND
19952: IFFALSE 20413
19954: GO 19956
19956: DISABLE
19957: LD_INT 0
19959: PPUSH
19960: PPUSH
19961: PPUSH
19962: PPUSH
// begin enable ;
19963: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_INT 34
19971: PUSH
19972: LD_INT 81
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PPUSH
19979: CALL_OW 69
19983: PUSH
19984: FOR_IN
19985: IFFALSE 20057
// begin if not i in minersList then
19987: LD_VAR 0 1
19991: PUSH
19992: LD_EXP 71
19996: IN
19997: NOT
19998: IFFALSE 20055
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20000: LD_ADDR_EXP 71
20004: PUSH
20005: LD_EXP 71
20009: PPUSH
20010: LD_EXP 71
20014: PUSH
20015: LD_INT 1
20017: PLUS
20018: PPUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 1
20028: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20029: LD_ADDR_EXP 72
20033: PUSH
20034: LD_EXP 72
20038: PPUSH
20039: LD_EXP 72
20043: PUSH
20044: LD_INT 1
20046: PLUS
20047: PPUSH
20048: EMPTY
20049: PPUSH
20050: CALL_OW 1
20054: ST_TO_ADDR
// end end ;
20055: GO 19984
20057: POP
20058: POP
// for i := minerMinesList downto 1 do
20059: LD_ADDR_VAR 0 1
20063: PUSH
20064: DOUBLE
20065: LD_EXP 72
20069: INC
20070: ST_TO_ADDR
20071: LD_INT 1
20073: PUSH
20074: FOR_DOWNTO
20075: IFFALSE 20411
// begin if IsLive ( minersList [ i ] ) then
20077: LD_EXP 71
20081: PUSH
20082: LD_VAR 0 1
20086: ARRAY
20087: PPUSH
20088: CALL_OW 300
20092: IFFALSE 20120
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20094: LD_EXP 71
20098: PUSH
20099: LD_VAR 0 1
20103: ARRAY
20104: PPUSH
20105: LD_EXP 72
20109: PUSH
20110: LD_VAR 0 1
20114: ARRAY
20115: PPUSH
20116: CALL_OW 505
// if not minerMinesList [ i ] then
20120: LD_EXP 72
20124: PUSH
20125: LD_VAR 0 1
20129: ARRAY
20130: NOT
20131: IFFALSE 20135
// continue ;
20133: GO 20074
// for j := minerMinesList [ i ] downto 1 do
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: DOUBLE
20141: LD_EXP 72
20145: PUSH
20146: LD_VAR 0 1
20150: ARRAY
20151: INC
20152: ST_TO_ADDR
20153: LD_INT 1
20155: PUSH
20156: FOR_DOWNTO
20157: IFFALSE 20407
// begin side := GetSide ( minersList [ i ] ) ;
20159: LD_ADDR_VAR 0 3
20163: PUSH
20164: LD_EXP 71
20168: PUSH
20169: LD_VAR 0 1
20173: ARRAY
20174: PPUSH
20175: CALL_OW 255
20179: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20180: LD_ADDR_VAR 0 4
20184: PUSH
20185: LD_EXP 72
20189: PUSH
20190: LD_VAR 0 1
20194: ARRAY
20195: PUSH
20196: LD_VAR 0 2
20200: ARRAY
20201: PUSH
20202: LD_INT 1
20204: ARRAY
20205: PPUSH
20206: LD_EXP 72
20210: PUSH
20211: LD_VAR 0 1
20215: ARRAY
20216: PUSH
20217: LD_VAR 0 2
20221: ARRAY
20222: PUSH
20223: LD_INT 2
20225: ARRAY
20226: PPUSH
20227: CALL_OW 428
20231: ST_TO_ADDR
// if not tmp then
20232: LD_VAR 0 4
20236: NOT
20237: IFFALSE 20241
// continue ;
20239: GO 20156
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20241: LD_VAR 0 4
20245: PUSH
20246: LD_INT 81
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PPUSH
20258: CALL_OW 69
20262: IN
20263: PUSH
20264: LD_EXP 72
20268: PUSH
20269: LD_VAR 0 1
20273: ARRAY
20274: PUSH
20275: LD_VAR 0 2
20279: ARRAY
20280: PUSH
20281: LD_INT 1
20283: ARRAY
20284: PPUSH
20285: LD_EXP 72
20289: PUSH
20290: LD_VAR 0 1
20294: ARRAY
20295: PUSH
20296: LD_VAR 0 2
20300: ARRAY
20301: PUSH
20302: LD_INT 2
20304: ARRAY
20305: PPUSH
20306: CALL_OW 458
20310: AND
20311: IFFALSE 20405
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20313: LD_EXP 72
20317: PUSH
20318: LD_VAR 0 1
20322: ARRAY
20323: PUSH
20324: LD_VAR 0 2
20328: ARRAY
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PPUSH
20334: LD_EXP 72
20338: PUSH
20339: LD_VAR 0 1
20343: ARRAY
20344: PUSH
20345: LD_VAR 0 2
20349: ARRAY
20350: PUSH
20351: LD_INT 2
20353: ARRAY
20354: PPUSH
20355: LD_VAR 0 3
20359: PPUSH
20360: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20364: LD_ADDR_EXP 72
20368: PUSH
20369: LD_EXP 72
20373: PPUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: LD_EXP 72
20383: PUSH
20384: LD_VAR 0 1
20388: ARRAY
20389: PPUSH
20390: LD_VAR 0 2
20394: PPUSH
20395: CALL_OW 3
20399: PPUSH
20400: CALL_OW 1
20404: ST_TO_ADDR
// end ; end ;
20405: GO 20156
20407: POP
20408: POP
// end ;
20409: GO 20074
20411: POP
20412: POP
// end ;
20413: PPOPN 4
20415: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20416: LD_INT 0
20418: PPUSH
20419: PPUSH
// result := false ;
20420: LD_ADDR_VAR 0 4
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 264
20437: PUSH
20438: LD_INT 81
20440: EQUAL
20441: NOT
20442: IFFALSE 20446
// exit ;
20444: GO 20686
// index := GetElementIndex ( minersList , unit ) ;
20446: LD_ADDR_VAR 0 5
20450: PUSH
20451: LD_EXP 71
20455: PPUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL 26866 0 2
20465: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20466: LD_EXP 72
20470: PUSH
20471: LD_VAR 0 5
20475: ARRAY
20476: PUSH
20477: LD_EXP 73
20481: GREATEREQUAL
20482: IFFALSE 20486
// exit ;
20484: GO 20686
// ComMoveXY ( unit , x , y ) ;
20486: LD_VAR 0 1
20490: PPUSH
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20505: LD_INT 35
20507: PPUSH
20508: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20512: LD_VAR 0 1
20516: PPUSH
20517: LD_VAR 0 2
20521: PPUSH
20522: LD_VAR 0 3
20526: PPUSH
20527: CALL 58618 0 3
20531: NOT
20532: PUSH
20533: LD_VAR 0 1
20537: PPUSH
20538: CALL_OW 314
20542: AND
20543: IFFALSE 20547
// exit ;
20545: GO 20686
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20547: LD_VAR 0 2
20551: PPUSH
20552: LD_VAR 0 3
20556: PPUSH
20557: CALL_OW 428
20561: PUSH
20562: LD_VAR 0 1
20566: EQUAL
20567: PUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 314
20577: NOT
20578: AND
20579: IFFALSE 20505
// PlaySoundXY ( x , y , PlantMine ) ;
20581: LD_VAR 0 2
20585: PPUSH
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_STRING PlantMine
20593: PPUSH
20594: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20598: LD_VAR 0 2
20602: PPUSH
20603: LD_VAR 0 3
20607: PPUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 255
20617: PPUSH
20618: LD_INT 0
20620: PPUSH
20621: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20625: LD_ADDR_EXP 72
20629: PUSH
20630: LD_EXP 72
20634: PPUSH
20635: LD_VAR 0 5
20639: PUSH
20640: LD_EXP 72
20644: PUSH
20645: LD_VAR 0 5
20649: ARRAY
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PPUSH
20659: LD_VAR 0 2
20663: PUSH
20664: LD_VAR 0 3
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PPUSH
20673: CALL 27081 0 3
20677: ST_TO_ADDR
// result := true ;
20678: LD_ADDR_VAR 0 4
20682: PUSH
20683: LD_INT 1
20685: ST_TO_ADDR
// end ;
20686: LD_VAR 0 4
20690: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20691: LD_INT 0
20693: PPUSH
20694: PPUSH
20695: PPUSH
// if not unit in minersList then
20696: LD_VAR 0 1
20700: PUSH
20701: LD_EXP 71
20705: IN
20706: NOT
20707: IFFALSE 20711
// exit ;
20709: GO 21103
// index := GetElementIndex ( minersList , unit ) ;
20711: LD_ADDR_VAR 0 6
20715: PUSH
20716: LD_EXP 71
20720: PPUSH
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL 26866 0 2
20730: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20731: LD_ADDR_VAR 0 5
20735: PUSH
20736: DOUBLE
20737: LD_EXP 72
20741: PUSH
20742: LD_VAR 0 6
20746: ARRAY
20747: INC
20748: ST_TO_ADDR
20749: LD_INT 1
20751: PUSH
20752: FOR_DOWNTO
20753: IFFALSE 20914
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20755: LD_EXP 72
20759: PUSH
20760: LD_VAR 0 6
20764: ARRAY
20765: PUSH
20766: LD_VAR 0 5
20770: ARRAY
20771: PUSH
20772: LD_INT 1
20774: ARRAY
20775: PUSH
20776: LD_VAR 0 2
20780: EQUAL
20781: PUSH
20782: LD_EXP 72
20786: PUSH
20787: LD_VAR 0 6
20791: ARRAY
20792: PUSH
20793: LD_VAR 0 5
20797: ARRAY
20798: PUSH
20799: LD_INT 2
20801: ARRAY
20802: PUSH
20803: LD_VAR 0 3
20807: EQUAL
20808: AND
20809: IFFALSE 20912
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20811: LD_EXP 72
20815: PUSH
20816: LD_VAR 0 6
20820: ARRAY
20821: PUSH
20822: LD_VAR 0 5
20826: ARRAY
20827: PUSH
20828: LD_INT 1
20830: ARRAY
20831: PPUSH
20832: LD_EXP 72
20836: PUSH
20837: LD_VAR 0 6
20841: ARRAY
20842: PUSH
20843: LD_VAR 0 5
20847: ARRAY
20848: PUSH
20849: LD_INT 2
20851: ARRAY
20852: PPUSH
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 255
20862: PPUSH
20863: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20867: LD_ADDR_EXP 72
20871: PUSH
20872: LD_EXP 72
20876: PPUSH
20877: LD_VAR 0 6
20881: PPUSH
20882: LD_EXP 72
20886: PUSH
20887: LD_VAR 0 6
20891: ARRAY
20892: PPUSH
20893: LD_VAR 0 5
20897: PPUSH
20898: CALL_OW 3
20902: PPUSH
20903: CALL_OW 1
20907: ST_TO_ADDR
// exit ;
20908: POP
20909: POP
20910: GO 21103
// end ; end ;
20912: GO 20752
20914: POP
20915: POP
// for i := minerMinesList [ index ] downto 1 do
20916: LD_ADDR_VAR 0 5
20920: PUSH
20921: DOUBLE
20922: LD_EXP 72
20926: PUSH
20927: LD_VAR 0 6
20931: ARRAY
20932: INC
20933: ST_TO_ADDR
20934: LD_INT 1
20936: PUSH
20937: FOR_DOWNTO
20938: IFFALSE 21101
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20940: LD_EXP 72
20944: PUSH
20945: LD_VAR 0 6
20949: ARRAY
20950: PUSH
20951: LD_VAR 0 5
20955: ARRAY
20956: PUSH
20957: LD_INT 1
20959: ARRAY
20960: PPUSH
20961: LD_EXP 72
20965: PUSH
20966: LD_VAR 0 6
20970: ARRAY
20971: PUSH
20972: LD_VAR 0 5
20976: ARRAY
20977: PUSH
20978: LD_INT 2
20980: ARRAY
20981: PPUSH
20982: LD_VAR 0 2
20986: PPUSH
20987: LD_VAR 0 3
20991: PPUSH
20992: CALL_OW 298
20996: PUSH
20997: LD_INT 6
20999: LESS
21000: IFFALSE 21099
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21002: LD_EXP 72
21006: PUSH
21007: LD_VAR 0 6
21011: ARRAY
21012: PUSH
21013: LD_VAR 0 5
21017: ARRAY
21018: PUSH
21019: LD_INT 1
21021: ARRAY
21022: PPUSH
21023: LD_EXP 72
21027: PUSH
21028: LD_VAR 0 6
21032: ARRAY
21033: PUSH
21034: LD_VAR 0 5
21038: ARRAY
21039: PUSH
21040: LD_INT 2
21042: ARRAY
21043: PPUSH
21044: LD_VAR 0 1
21048: PPUSH
21049: CALL_OW 255
21053: PPUSH
21054: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21058: LD_ADDR_EXP 72
21062: PUSH
21063: LD_EXP 72
21067: PPUSH
21068: LD_VAR 0 6
21072: PPUSH
21073: LD_EXP 72
21077: PUSH
21078: LD_VAR 0 6
21082: ARRAY
21083: PPUSH
21084: LD_VAR 0 5
21088: PPUSH
21089: CALL_OW 3
21093: PPUSH
21094: CALL_OW 1
21098: ST_TO_ADDR
// end ; end ;
21099: GO 20937
21101: POP
21102: POP
// end ;
21103: LD_VAR 0 4
21107: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21108: LD_INT 0
21110: PPUSH
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
21116: PPUSH
21117: PPUSH
21118: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 264
21128: PUSH
21129: LD_INT 81
21131: EQUAL
21132: NOT
21133: PUSH
21134: LD_VAR 0 1
21138: PUSH
21139: LD_EXP 71
21143: IN
21144: NOT
21145: OR
21146: IFFALSE 21150
// exit ;
21148: GO 21472
// index := GetElementIndex ( minersList , unit ) ;
21150: LD_ADDR_VAR 0 6
21154: PUSH
21155: LD_EXP 71
21159: PPUSH
21160: LD_VAR 0 1
21164: PPUSH
21165: CALL 26866 0 2
21169: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21170: LD_ADDR_VAR 0 8
21174: PUSH
21175: LD_EXP 73
21179: PUSH
21180: LD_EXP 72
21184: PUSH
21185: LD_VAR 0 6
21189: ARRAY
21190: MINUS
21191: ST_TO_ADDR
// if not minesFreeAmount then
21192: LD_VAR 0 8
21196: NOT
21197: IFFALSE 21201
// exit ;
21199: GO 21472
// tmp := [ ] ;
21201: LD_ADDR_VAR 0 7
21205: PUSH
21206: EMPTY
21207: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21208: LD_ADDR_VAR 0 5
21212: PUSH
21213: DOUBLE
21214: LD_INT 1
21216: DEC
21217: ST_TO_ADDR
21218: LD_VAR 0 8
21222: PUSH
21223: FOR_TO
21224: IFFALSE 21419
// begin _d := rand ( 0 , 5 ) ;
21226: LD_ADDR_VAR 0 11
21230: PUSH
21231: LD_INT 0
21233: PPUSH
21234: LD_INT 5
21236: PPUSH
21237: CALL_OW 12
21241: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21242: LD_ADDR_VAR 0 12
21246: PUSH
21247: LD_INT 2
21249: PPUSH
21250: LD_INT 6
21252: PPUSH
21253: CALL_OW 12
21257: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21258: LD_ADDR_VAR 0 9
21262: PUSH
21263: LD_VAR 0 2
21267: PPUSH
21268: LD_VAR 0 11
21272: PPUSH
21273: LD_VAR 0 12
21277: PPUSH
21278: CALL_OW 272
21282: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21283: LD_ADDR_VAR 0 10
21287: PUSH
21288: LD_VAR 0 3
21292: PPUSH
21293: LD_VAR 0 11
21297: PPUSH
21298: LD_VAR 0 12
21302: PPUSH
21303: CALL_OW 273
21307: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21308: LD_VAR 0 9
21312: PPUSH
21313: LD_VAR 0 10
21317: PPUSH
21318: CALL_OW 488
21322: PUSH
21323: LD_VAR 0 9
21327: PUSH
21328: LD_VAR 0 10
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_VAR 0 7
21341: IN
21342: NOT
21343: AND
21344: PUSH
21345: LD_VAR 0 9
21349: PPUSH
21350: LD_VAR 0 10
21354: PPUSH
21355: CALL_OW 458
21359: NOT
21360: AND
21361: IFFALSE 21403
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21363: LD_ADDR_VAR 0 7
21367: PUSH
21368: LD_VAR 0 7
21372: PPUSH
21373: LD_VAR 0 7
21377: PUSH
21378: LD_INT 1
21380: PLUS
21381: PPUSH
21382: LD_VAR 0 9
21386: PUSH
21387: LD_VAR 0 10
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PPUSH
21396: CALL_OW 1
21400: ST_TO_ADDR
21401: GO 21417
// i := i - 1 ;
21403: LD_ADDR_VAR 0 5
21407: PUSH
21408: LD_VAR 0 5
21412: PUSH
21413: LD_INT 1
21415: MINUS
21416: ST_TO_ADDR
// end ;
21417: GO 21223
21419: POP
21420: POP
// for i in tmp do
21421: LD_ADDR_VAR 0 5
21425: PUSH
21426: LD_VAR 0 7
21430: PUSH
21431: FOR_IN
21432: IFFALSE 21470
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21434: LD_VAR 0 1
21438: PPUSH
21439: LD_VAR 0 5
21443: PUSH
21444: LD_INT 1
21446: ARRAY
21447: PPUSH
21448: LD_VAR 0 5
21452: PUSH
21453: LD_INT 2
21455: ARRAY
21456: PPUSH
21457: CALL 20416 0 3
21461: NOT
21462: IFFALSE 21468
// exit ;
21464: POP
21465: POP
21466: GO 21472
21468: GO 21431
21470: POP
21471: POP
// end ;
21472: LD_VAR 0 4
21476: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21477: LD_INT 0
21479: PPUSH
21480: PPUSH
21481: PPUSH
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
// if not GetClass ( unit ) = class_sniper then
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 257
21495: PUSH
21496: LD_INT 5
21498: EQUAL
21499: NOT
21500: IFFALSE 21504
// exit ;
21502: GO 21892
// dist := 8 ;
21504: LD_ADDR_VAR 0 5
21508: PUSH
21509: LD_INT 8
21511: ST_TO_ADDR
// viewRange := 12 ;
21512: LD_ADDR_VAR 0 7
21516: PUSH
21517: LD_INT 12
21519: ST_TO_ADDR
// side := GetSide ( unit ) ;
21520: LD_ADDR_VAR 0 6
21524: PUSH
21525: LD_VAR 0 1
21529: PPUSH
21530: CALL_OW 255
21534: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21535: LD_INT 61
21537: PPUSH
21538: LD_VAR 0 6
21542: PPUSH
21543: CALL_OW 321
21547: PUSH
21548: LD_INT 2
21550: EQUAL
21551: IFFALSE 21561
// viewRange := 16 ;
21553: LD_ADDR_VAR 0 7
21557: PUSH
21558: LD_INT 16
21560: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21561: LD_VAR 0 1
21565: PPUSH
21566: LD_VAR 0 2
21570: PPUSH
21571: LD_VAR 0 3
21575: PPUSH
21576: CALL_OW 297
21580: PUSH
21581: LD_VAR 0 5
21585: GREATER
21586: IFFALSE 21665
// begin ComMoveXY ( unit , x , y ) ;
21588: LD_VAR 0 1
21592: PPUSH
21593: LD_VAR 0 2
21597: PPUSH
21598: LD_VAR 0 3
21602: PPUSH
21603: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21607: LD_INT 35
21609: PPUSH
21610: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21614: LD_VAR 0 1
21618: PPUSH
21619: LD_VAR 0 2
21623: PPUSH
21624: LD_VAR 0 3
21628: PPUSH
21629: CALL 58618 0 3
21633: NOT
21634: IFFALSE 21638
// exit ;
21636: GO 21892
// until GetDistUnitXY ( unit , x , y ) < dist ;
21638: LD_VAR 0 1
21642: PPUSH
21643: LD_VAR 0 2
21647: PPUSH
21648: LD_VAR 0 3
21652: PPUSH
21653: CALL_OW 297
21657: PUSH
21658: LD_VAR 0 5
21662: LESS
21663: IFFALSE 21607
// end ; ComTurnXY ( unit , x , y ) ;
21665: LD_VAR 0 1
21669: PPUSH
21670: LD_VAR 0 2
21674: PPUSH
21675: LD_VAR 0 3
21679: PPUSH
21680: CALL_OW 118
// wait ( 5 ) ;
21684: LD_INT 5
21686: PPUSH
21687: CALL_OW 67
// _d := GetDir ( unit ) ;
21691: LD_ADDR_VAR 0 10
21695: PUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 254
21705: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21706: LD_ADDR_VAR 0 8
21710: PUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 250
21720: PPUSH
21721: LD_VAR 0 10
21725: PPUSH
21726: LD_VAR 0 5
21730: PPUSH
21731: CALL_OW 272
21735: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21736: LD_ADDR_VAR 0 9
21740: PUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: CALL_OW 251
21750: PPUSH
21751: LD_VAR 0 10
21755: PPUSH
21756: LD_VAR 0 5
21760: PPUSH
21761: CALL_OW 273
21765: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21766: LD_VAR 0 8
21770: PPUSH
21771: LD_VAR 0 9
21775: PPUSH
21776: CALL_OW 488
21780: NOT
21781: IFFALSE 21785
// exit ;
21783: GO 21892
// ComAnimCustom ( unit , 1 ) ;
21785: LD_VAR 0 1
21789: PPUSH
21790: LD_INT 1
21792: PPUSH
21793: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21797: LD_VAR 0 8
21801: PPUSH
21802: LD_VAR 0 9
21806: PPUSH
21807: LD_VAR 0 6
21811: PPUSH
21812: LD_VAR 0 7
21816: PPUSH
21817: CALL_OW 330
// repeat wait ( 1 ) ;
21821: LD_INT 1
21823: PPUSH
21824: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 316
21837: PUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 314
21847: OR
21848: PUSH
21849: LD_VAR 0 1
21853: PPUSH
21854: CALL_OW 302
21858: NOT
21859: OR
21860: PUSH
21861: LD_VAR 0 1
21865: PPUSH
21866: CALL_OW 301
21870: OR
21871: IFFALSE 21821
// RemoveSeeing ( _x , _y , side ) ;
21873: LD_VAR 0 8
21877: PPUSH
21878: LD_VAR 0 9
21882: PPUSH
21883: LD_VAR 0 6
21887: PPUSH
21888: CALL_OW 331
// end ; end_of_file
21892: LD_VAR 0 4
21896: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: LD_VAR 0 2
21906: PPUSH
21907: LD_VAR 0 3
21911: PPUSH
21912: LD_VAR 0 4
21916: PPUSH
21917: LD_VAR 0 5
21921: PPUSH
21922: LD_VAR 0 6
21926: PPUSH
21927: CALL 1522 0 6
// end ;
21931: PPOPN 6
21933: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
21934: LD_INT 0
21936: PPUSH
// begin if not units then
21937: LD_VAR 0 1
21941: NOT
21942: IFFALSE 21946
// exit ;
21944: GO 21946
// end ;
21946: PPOPN 7
21948: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
21949: CALL 1426 0 0
// end ; end_of_file
21953: PPOPN 1
21955: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21956: LD_VAR 0 1
21960: PUSH
21961: LD_INT 200
21963: DOUBLE
21964: GREATEREQUAL
21965: IFFALSE 21973
21967: LD_INT 299
21969: DOUBLE
21970: LESSEQUAL
21971: IFTRUE 21975
21973: GO 22007
21975: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21976: LD_VAR 0 1
21980: PPUSH
21981: LD_VAR 0 2
21985: PPUSH
21986: LD_VAR 0 3
21990: PPUSH
21991: LD_VAR 0 4
21995: PPUSH
21996: LD_VAR 0 5
22000: PPUSH
22001: CALL 17545 0 5
22005: GO 22084
22007: LD_INT 300
22009: DOUBLE
22010: GREATEREQUAL
22011: IFFALSE 22019
22013: LD_INT 399
22015: DOUBLE
22016: LESSEQUAL
22017: IFTRUE 22021
22019: GO 22083
22021: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22022: LD_VAR 0 1
22026: PPUSH
22027: LD_VAR 0 2
22031: PPUSH
22032: LD_VAR 0 3
22036: PPUSH
22037: LD_VAR 0 4
22041: PPUSH
22042: LD_VAR 0 5
22046: PPUSH
22047: LD_VAR 0 6
22051: PPUSH
22052: LD_VAR 0 7
22056: PPUSH
22057: LD_VAR 0 8
22061: PPUSH
22062: LD_VAR 0 9
22066: PPUSH
22067: LD_VAR 0 10
22071: PPUSH
22072: LD_VAR 0 11
22076: PPUSH
22077: CALL 13870 0 11
22081: GO 22084
22083: POP
// end ;
22084: PPOPN 11
22086: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22087: LD_VAR 0 1
22091: PPUSH
22092: LD_VAR 0 2
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: LD_VAR 0 4
22106: PPUSH
22107: LD_VAR 0 5
22111: PPUSH
22112: CALL 17281 0 5
// end ; end_of_file
22116: PPOPN 5
22118: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
// if exist_mode then
22123: LD_VAR 0 2
22127: IFFALSE 22152
// unit := CreateCharacter ( prefix & ident ) else
22129: LD_ADDR_VAR 0 5
22133: PUSH
22134: LD_VAR 0 3
22138: PUSH
22139: LD_VAR 0 1
22143: STR
22144: PPUSH
22145: CALL_OW 34
22149: ST_TO_ADDR
22150: GO 22167
// unit := NewCharacter ( ident ) ;
22152: LD_ADDR_VAR 0 5
22156: PUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 25
22166: ST_TO_ADDR
// result := unit ;
22167: LD_ADDR_VAR 0 4
22171: PUSH
22172: LD_VAR 0 5
22176: ST_TO_ADDR
// end ;
22177: LD_VAR 0 4
22181: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22182: LD_INT 0
22184: PPUSH
22185: PPUSH
// if not side or not nation then
22186: LD_VAR 0 1
22190: NOT
22191: PUSH
22192: LD_VAR 0 2
22196: NOT
22197: OR
22198: IFFALSE 22202
// exit ;
22200: GO 22970
// case nation of nation_american :
22202: LD_VAR 0 2
22206: PUSH
22207: LD_INT 1
22209: DOUBLE
22210: EQUAL
22211: IFTRUE 22215
22213: GO 22429
22215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22216: LD_ADDR_VAR 0 4
22220: PUSH
22221: LD_INT 35
22223: PUSH
22224: LD_INT 45
22226: PUSH
22227: LD_INT 46
22229: PUSH
22230: LD_INT 47
22232: PUSH
22233: LD_INT 82
22235: PUSH
22236: LD_INT 83
22238: PUSH
22239: LD_INT 84
22241: PUSH
22242: LD_INT 85
22244: PUSH
22245: LD_INT 86
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: LD_INT 6
22256: PUSH
22257: LD_INT 15
22259: PUSH
22260: LD_INT 16
22262: PUSH
22263: LD_INT 7
22265: PUSH
22266: LD_INT 12
22268: PUSH
22269: LD_INT 13
22271: PUSH
22272: LD_INT 10
22274: PUSH
22275: LD_INT 14
22277: PUSH
22278: LD_INT 20
22280: PUSH
22281: LD_INT 21
22283: PUSH
22284: LD_INT 22
22286: PUSH
22287: LD_INT 25
22289: PUSH
22290: LD_INT 32
22292: PUSH
22293: LD_INT 27
22295: PUSH
22296: LD_INT 36
22298: PUSH
22299: LD_INT 69
22301: PUSH
22302: LD_INT 39
22304: PUSH
22305: LD_INT 34
22307: PUSH
22308: LD_INT 40
22310: PUSH
22311: LD_INT 48
22313: PUSH
22314: LD_INT 49
22316: PUSH
22317: LD_INT 50
22319: PUSH
22320: LD_INT 51
22322: PUSH
22323: LD_INT 52
22325: PUSH
22326: LD_INT 53
22328: PUSH
22329: LD_INT 54
22331: PUSH
22332: LD_INT 55
22334: PUSH
22335: LD_INT 56
22337: PUSH
22338: LD_INT 57
22340: PUSH
22341: LD_INT 58
22343: PUSH
22344: LD_INT 59
22346: PUSH
22347: LD_INT 60
22349: PUSH
22350: LD_INT 61
22352: PUSH
22353: LD_INT 62
22355: PUSH
22356: LD_INT 80
22358: PUSH
22359: LD_INT 82
22361: PUSH
22362: LD_INT 83
22364: PUSH
22365: LD_INT 84
22367: PUSH
22368: LD_INT 85
22370: PUSH
22371: LD_INT 86
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: ST_TO_ADDR
22427: GO 22894
22429: LD_INT 2
22431: DOUBLE
22432: EQUAL
22433: IFTRUE 22437
22435: GO 22663
22437: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22438: LD_ADDR_VAR 0 4
22442: PUSH
22443: LD_INT 35
22445: PUSH
22446: LD_INT 45
22448: PUSH
22449: LD_INT 46
22451: PUSH
22452: LD_INT 47
22454: PUSH
22455: LD_INT 82
22457: PUSH
22458: LD_INT 83
22460: PUSH
22461: LD_INT 84
22463: PUSH
22464: LD_INT 85
22466: PUSH
22467: LD_INT 87
22469: PUSH
22470: LD_INT 70
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: LD_INT 11
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: LD_INT 4
22484: PUSH
22485: LD_INT 5
22487: PUSH
22488: LD_INT 6
22490: PUSH
22491: LD_INT 15
22493: PUSH
22494: LD_INT 18
22496: PUSH
22497: LD_INT 7
22499: PUSH
22500: LD_INT 17
22502: PUSH
22503: LD_INT 8
22505: PUSH
22506: LD_INT 20
22508: PUSH
22509: LD_INT 21
22511: PUSH
22512: LD_INT 22
22514: PUSH
22515: LD_INT 72
22517: PUSH
22518: LD_INT 26
22520: PUSH
22521: LD_INT 69
22523: PUSH
22524: LD_INT 39
22526: PUSH
22527: LD_INT 40
22529: PUSH
22530: LD_INT 41
22532: PUSH
22533: LD_INT 42
22535: PUSH
22536: LD_INT 43
22538: PUSH
22539: LD_INT 48
22541: PUSH
22542: LD_INT 49
22544: PUSH
22545: LD_INT 50
22547: PUSH
22548: LD_INT 51
22550: PUSH
22551: LD_INT 52
22553: PUSH
22554: LD_INT 53
22556: PUSH
22557: LD_INT 54
22559: PUSH
22560: LD_INT 55
22562: PUSH
22563: LD_INT 56
22565: PUSH
22566: LD_INT 60
22568: PUSH
22569: LD_INT 61
22571: PUSH
22572: LD_INT 62
22574: PUSH
22575: LD_INT 66
22577: PUSH
22578: LD_INT 67
22580: PUSH
22581: LD_INT 68
22583: PUSH
22584: LD_INT 81
22586: PUSH
22587: LD_INT 82
22589: PUSH
22590: LD_INT 83
22592: PUSH
22593: LD_INT 84
22595: PUSH
22596: LD_INT 85
22598: PUSH
22599: LD_INT 87
22601: PUSH
22602: LD_INT 88
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: ST_TO_ADDR
22661: GO 22894
22663: LD_INT 3
22665: DOUBLE
22666: EQUAL
22667: IFTRUE 22671
22669: GO 22893
22671: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22672: LD_ADDR_VAR 0 4
22676: PUSH
22677: LD_INT 46
22679: PUSH
22680: LD_INT 47
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: LD_INT 82
22691: PUSH
22692: LD_INT 83
22694: PUSH
22695: LD_INT 84
22697: PUSH
22698: LD_INT 85
22700: PUSH
22701: LD_INT 86
22703: PUSH
22704: LD_INT 11
22706: PUSH
22707: LD_INT 9
22709: PUSH
22710: LD_INT 20
22712: PUSH
22713: LD_INT 19
22715: PUSH
22716: LD_INT 21
22718: PUSH
22719: LD_INT 24
22721: PUSH
22722: LD_INT 22
22724: PUSH
22725: LD_INT 25
22727: PUSH
22728: LD_INT 28
22730: PUSH
22731: LD_INT 29
22733: PUSH
22734: LD_INT 30
22736: PUSH
22737: LD_INT 31
22739: PUSH
22740: LD_INT 37
22742: PUSH
22743: LD_INT 38
22745: PUSH
22746: LD_INT 32
22748: PUSH
22749: LD_INT 27
22751: PUSH
22752: LD_INT 33
22754: PUSH
22755: LD_INT 69
22757: PUSH
22758: LD_INT 39
22760: PUSH
22761: LD_INT 34
22763: PUSH
22764: LD_INT 40
22766: PUSH
22767: LD_INT 71
22769: PUSH
22770: LD_INT 23
22772: PUSH
22773: LD_INT 44
22775: PUSH
22776: LD_INT 48
22778: PUSH
22779: LD_INT 49
22781: PUSH
22782: LD_INT 50
22784: PUSH
22785: LD_INT 51
22787: PUSH
22788: LD_INT 52
22790: PUSH
22791: LD_INT 53
22793: PUSH
22794: LD_INT 54
22796: PUSH
22797: LD_INT 55
22799: PUSH
22800: LD_INT 56
22802: PUSH
22803: LD_INT 57
22805: PUSH
22806: LD_INT 58
22808: PUSH
22809: LD_INT 59
22811: PUSH
22812: LD_INT 63
22814: PUSH
22815: LD_INT 64
22817: PUSH
22818: LD_INT 65
22820: PUSH
22821: LD_INT 82
22823: PUSH
22824: LD_INT 83
22826: PUSH
22827: LD_INT 84
22829: PUSH
22830: LD_INT 85
22832: PUSH
22833: LD_INT 86
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: ST_TO_ADDR
22891: GO 22894
22893: POP
// if state > - 1 and state < 3 then
22894: LD_VAR 0 3
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: GREATER
22903: PUSH
22904: LD_VAR 0 3
22908: PUSH
22909: LD_INT 3
22911: LESS
22912: AND
22913: IFFALSE 22970
// for i in result do
22915: LD_ADDR_VAR 0 5
22919: PUSH
22920: LD_VAR 0 4
22924: PUSH
22925: FOR_IN
22926: IFFALSE 22968
// if GetTech ( i , side ) <> state then
22928: LD_VAR 0 5
22932: PPUSH
22933: LD_VAR 0 1
22937: PPUSH
22938: CALL_OW 321
22942: PUSH
22943: LD_VAR 0 3
22947: NONEQUAL
22948: IFFALSE 22966
// result := result diff i ;
22950: LD_ADDR_VAR 0 4
22954: PUSH
22955: LD_VAR 0 4
22959: PUSH
22960: LD_VAR 0 5
22964: DIFF
22965: ST_TO_ADDR
22966: GO 22925
22968: POP
22969: POP
// end ;
22970: LD_VAR 0 4
22974: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22975: LD_INT 0
22977: PPUSH
22978: PPUSH
22979: PPUSH
// result := true ;
22980: LD_ADDR_VAR 0 3
22984: PUSH
22985: LD_INT 1
22987: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22988: LD_ADDR_VAR 0 5
22992: PUSH
22993: LD_VAR 0 2
22997: PPUSH
22998: CALL_OW 480
23002: ST_TO_ADDR
// if not tmp then
23003: LD_VAR 0 5
23007: NOT
23008: IFFALSE 23012
// exit ;
23010: GO 23061
// for i in tmp do
23012: LD_ADDR_VAR 0 4
23016: PUSH
23017: LD_VAR 0 5
23021: PUSH
23022: FOR_IN
23023: IFFALSE 23059
// if GetTech ( i , side ) <> state_researched then
23025: LD_VAR 0 4
23029: PPUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 321
23039: PUSH
23040: LD_INT 2
23042: NONEQUAL
23043: IFFALSE 23057
// begin result := false ;
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_INT 0
23052: ST_TO_ADDR
// exit ;
23053: POP
23054: POP
23055: GO 23061
// end ;
23057: GO 23022
23059: POP
23060: POP
// end ;
23061: LD_VAR 0 3
23065: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23066: LD_INT 0
23068: PPUSH
23069: PPUSH
23070: PPUSH
23071: PPUSH
23072: PPUSH
23073: PPUSH
23074: PPUSH
23075: PPUSH
23076: PPUSH
23077: PPUSH
23078: PPUSH
23079: PPUSH
23080: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23081: LD_VAR 0 1
23085: NOT
23086: PUSH
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL_OW 257
23096: PUSH
23097: LD_INT 9
23099: NONEQUAL
23100: OR
23101: IFFALSE 23105
// exit ;
23103: GO 23678
// side := GetSide ( unit ) ;
23105: LD_ADDR_VAR 0 9
23109: PUSH
23110: LD_VAR 0 1
23114: PPUSH
23115: CALL_OW 255
23119: ST_TO_ADDR
// tech_space := tech_spacanom ;
23120: LD_ADDR_VAR 0 12
23124: PUSH
23125: LD_INT 29
23127: ST_TO_ADDR
// tech_time := tech_taurad ;
23128: LD_ADDR_VAR 0 13
23132: PUSH
23133: LD_INT 28
23135: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23136: LD_ADDR_VAR 0 11
23140: PUSH
23141: LD_VAR 0 1
23145: PPUSH
23146: CALL_OW 310
23150: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23151: LD_VAR 0 11
23155: PPUSH
23156: CALL_OW 247
23160: PUSH
23161: LD_INT 2
23163: EQUAL
23164: IFFALSE 23168
// exit ;
23166: GO 23678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23168: LD_ADDR_VAR 0 8
23172: PUSH
23173: LD_INT 81
23175: PUSH
23176: LD_VAR 0 9
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 21
23190: PUSH
23191: LD_INT 3
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 69
23210: ST_TO_ADDR
// if not tmp then
23211: LD_VAR 0 8
23215: NOT
23216: IFFALSE 23220
// exit ;
23218: GO 23678
// if in_unit then
23220: LD_VAR 0 11
23224: IFFALSE 23248
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23226: LD_ADDR_VAR 0 10
23230: PUSH
23231: LD_VAR 0 8
23235: PPUSH
23236: LD_VAR 0 11
23240: PPUSH
23241: CALL_OW 74
23245: ST_TO_ADDR
23246: GO 23268
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23248: LD_ADDR_VAR 0 10
23252: PUSH
23253: LD_VAR 0 8
23257: PPUSH
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL_OW 74
23267: ST_TO_ADDR
// if not enemy then
23268: LD_VAR 0 10
23272: NOT
23273: IFFALSE 23277
// exit ;
23275: GO 23678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23277: LD_VAR 0 11
23281: PUSH
23282: LD_VAR 0 11
23286: PPUSH
23287: LD_VAR 0 10
23291: PPUSH
23292: CALL_OW 296
23296: PUSH
23297: LD_INT 13
23299: GREATER
23300: AND
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: LD_VAR 0 10
23311: PPUSH
23312: CALL_OW 296
23316: PUSH
23317: LD_INT 12
23319: GREATER
23320: OR
23321: IFFALSE 23325
// exit ;
23323: GO 23678
// missile := [ 1 ] ;
23325: LD_ADDR_VAR 0 14
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: EMPTY
23334: LIST
23335: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23336: LD_VAR 0 9
23340: PPUSH
23341: LD_VAR 0 12
23345: PPUSH
23346: CALL_OW 325
23350: IFFALSE 23379
// missile := Replace ( missile , missile + 1 , 2 ) ;
23352: LD_ADDR_VAR 0 14
23356: PUSH
23357: LD_VAR 0 14
23361: PPUSH
23362: LD_VAR 0 14
23366: PUSH
23367: LD_INT 1
23369: PLUS
23370: PPUSH
23371: LD_INT 2
23373: PPUSH
23374: CALL_OW 1
23378: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23379: LD_VAR 0 9
23383: PPUSH
23384: LD_VAR 0 13
23388: PPUSH
23389: CALL_OW 325
23393: PUSH
23394: LD_VAR 0 10
23398: PPUSH
23399: CALL_OW 255
23403: PPUSH
23404: LD_VAR 0 13
23408: PPUSH
23409: CALL_OW 325
23413: NOT
23414: AND
23415: IFFALSE 23444
// missile := Replace ( missile , missile + 1 , 3 ) ;
23417: LD_ADDR_VAR 0 14
23421: PUSH
23422: LD_VAR 0 14
23426: PPUSH
23427: LD_VAR 0 14
23431: PUSH
23432: LD_INT 1
23434: PLUS
23435: PPUSH
23436: LD_INT 3
23438: PPUSH
23439: CALL_OW 1
23443: ST_TO_ADDR
// if missile < 2 then
23444: LD_VAR 0 14
23448: PUSH
23449: LD_INT 2
23451: LESS
23452: IFFALSE 23456
// exit ;
23454: GO 23678
// x := GetX ( enemy ) ;
23456: LD_ADDR_VAR 0 4
23460: PUSH
23461: LD_VAR 0 10
23465: PPUSH
23466: CALL_OW 250
23470: ST_TO_ADDR
// y := GetY ( enemy ) ;
23471: LD_ADDR_VAR 0 5
23475: PUSH
23476: LD_VAR 0 10
23480: PPUSH
23481: CALL_OW 251
23485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23486: LD_ADDR_VAR 0 6
23490: PUSH
23491: LD_VAR 0 4
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PPUSH
23500: LD_INT 1
23502: PPUSH
23503: CALL_OW 12
23507: PLUS
23508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23509: LD_ADDR_VAR 0 7
23513: PUSH
23514: LD_VAR 0 5
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PPUSH
23523: LD_INT 1
23525: PPUSH
23526: CALL_OW 12
23530: PLUS
23531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23532: LD_VAR 0 6
23536: PPUSH
23537: LD_VAR 0 7
23541: PPUSH
23542: CALL_OW 488
23546: NOT
23547: IFFALSE 23569
// begin _x := x ;
23549: LD_ADDR_VAR 0 6
23553: PUSH
23554: LD_VAR 0 4
23558: ST_TO_ADDR
// _y := y ;
23559: LD_ADDR_VAR 0 7
23563: PUSH
23564: LD_VAR 0 5
23568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23569: LD_ADDR_VAR 0 3
23573: PUSH
23574: LD_INT 1
23576: PPUSH
23577: LD_VAR 0 14
23581: PPUSH
23582: CALL_OW 12
23586: ST_TO_ADDR
// case i of 1 :
23587: LD_VAR 0 3
23591: PUSH
23592: LD_INT 1
23594: DOUBLE
23595: EQUAL
23596: IFTRUE 23600
23598: GO 23617
23600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23601: LD_VAR 0 1
23605: PPUSH
23606: LD_VAR 0 10
23610: PPUSH
23611: CALL_OW 115
23615: GO 23678
23617: LD_INT 2
23619: DOUBLE
23620: EQUAL
23621: IFTRUE 23625
23623: GO 23647
23625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23626: LD_VAR 0 1
23630: PPUSH
23631: LD_VAR 0 6
23635: PPUSH
23636: LD_VAR 0 7
23640: PPUSH
23641: CALL_OW 153
23645: GO 23678
23647: LD_INT 3
23649: DOUBLE
23650: EQUAL
23651: IFTRUE 23655
23653: GO 23677
23655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23656: LD_VAR 0 1
23660: PPUSH
23661: LD_VAR 0 6
23665: PPUSH
23666: LD_VAR 0 7
23670: PPUSH
23671: CALL_OW 154
23675: GO 23678
23677: POP
// end ;
23678: LD_VAR 0 2
23682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23683: LD_INT 0
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
// if not unit or not building then
23691: LD_VAR 0 1
23695: NOT
23696: PUSH
23697: LD_VAR 0 2
23701: NOT
23702: OR
23703: IFFALSE 23707
// exit ;
23705: GO 23865
// x := GetX ( building ) ;
23707: LD_ADDR_VAR 0 5
23711: PUSH
23712: LD_VAR 0 2
23716: PPUSH
23717: CALL_OW 250
23721: ST_TO_ADDR
// y := GetY ( building ) ;
23722: LD_ADDR_VAR 0 6
23726: PUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: CALL_OW 251
23736: ST_TO_ADDR
// for i = 0 to 5 do
23737: LD_ADDR_VAR 0 4
23741: PUSH
23742: DOUBLE
23743: LD_INT 0
23745: DEC
23746: ST_TO_ADDR
23747: LD_INT 5
23749: PUSH
23750: FOR_TO
23751: IFFALSE 23863
// begin _x := ShiftX ( x , i , 3 ) ;
23753: LD_ADDR_VAR 0 7
23757: PUSH
23758: LD_VAR 0 5
23762: PPUSH
23763: LD_VAR 0 4
23767: PPUSH
23768: LD_INT 3
23770: PPUSH
23771: CALL_OW 272
23775: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: LD_VAR 0 6
23785: PPUSH
23786: LD_VAR 0 4
23790: PPUSH
23791: LD_INT 3
23793: PPUSH
23794: CALL_OW 273
23798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23799: LD_VAR 0 7
23803: PPUSH
23804: LD_VAR 0 8
23808: PPUSH
23809: CALL_OW 488
23813: NOT
23814: IFFALSE 23818
// continue ;
23816: GO 23750
// if HexInfo ( _x , _y ) = 0 then
23818: LD_VAR 0 7
23822: PPUSH
23823: LD_VAR 0 8
23827: PPUSH
23828: CALL_OW 428
23832: PUSH
23833: LD_INT 0
23835: EQUAL
23836: IFFALSE 23861
// begin ComMoveXY ( unit , _x , _y ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: LD_VAR 0 7
23847: PPUSH
23848: LD_VAR 0 8
23852: PPUSH
23853: CALL_OW 111
// exit ;
23857: POP
23858: POP
23859: GO 23865
// end ; end ;
23861: GO 23750
23863: POP
23864: POP
// end ;
23865: LD_VAR 0 3
23869: RET
// export function ScanBase ( side , base_area ) ; begin
23870: LD_INT 0
23872: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_VAR 0 2
23882: PPUSH
23883: LD_INT 81
23885: PUSH
23886: LD_VAR 0 1
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PPUSH
23895: CALL_OW 70
23899: ST_TO_ADDR
// end ;
23900: LD_VAR 0 3
23904: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23905: LD_INT 0
23907: PPUSH
23908: PPUSH
23909: PPUSH
23910: PPUSH
// result := false ;
23911: LD_ADDR_VAR 0 2
23915: PUSH
23916: LD_INT 0
23918: ST_TO_ADDR
// side := GetSide ( unit ) ;
23919: LD_ADDR_VAR 0 3
23923: PUSH
23924: LD_VAR 0 1
23928: PPUSH
23929: CALL_OW 255
23933: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23934: LD_ADDR_VAR 0 4
23938: PUSH
23939: LD_VAR 0 1
23943: PPUSH
23944: CALL_OW 248
23948: ST_TO_ADDR
// case nat of 1 :
23949: LD_VAR 0 4
23953: PUSH
23954: LD_INT 1
23956: DOUBLE
23957: EQUAL
23958: IFTRUE 23962
23960: GO 23973
23962: POP
// tech := tech_lassight ; 2 :
23963: LD_ADDR_VAR 0 5
23967: PUSH
23968: LD_INT 12
23970: ST_TO_ADDR
23971: GO 24012
23973: LD_INT 2
23975: DOUBLE
23976: EQUAL
23977: IFTRUE 23981
23979: GO 23992
23981: POP
// tech := tech_mortar ; 3 :
23982: LD_ADDR_VAR 0 5
23986: PUSH
23987: LD_INT 41
23989: ST_TO_ADDR
23990: GO 24012
23992: LD_INT 3
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24011
24000: POP
// tech := tech_bazooka ; end ;
24001: LD_ADDR_VAR 0 5
24005: PUSH
24006: LD_INT 44
24008: ST_TO_ADDR
24009: GO 24012
24011: POP
// if Researched ( side , tech ) then
24012: LD_VAR 0 3
24016: PPUSH
24017: LD_VAR 0 5
24021: PPUSH
24022: CALL_OW 325
24026: IFFALSE 24053
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24028: LD_ADDR_VAR 0 2
24032: PUSH
24033: LD_INT 5
24035: PUSH
24036: LD_INT 8
24038: PUSH
24039: LD_INT 9
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: LIST
24046: PUSH
24047: LD_VAR 0 4
24051: ARRAY
24052: ST_TO_ADDR
// end ;
24053: LD_VAR 0 2
24057: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
24062: PPUSH
// if not mines then
24063: LD_VAR 0 2
24067: NOT
24068: IFFALSE 24072
// exit ;
24070: GO 24216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24072: LD_ADDR_VAR 0 5
24076: PUSH
24077: LD_INT 81
24079: PUSH
24080: LD_VAR 0 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 3
24091: PUSH
24092: LD_INT 21
24094: PUSH
24095: LD_INT 3
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PPUSH
24110: CALL_OW 69
24114: ST_TO_ADDR
// for i in mines do
24115: LD_ADDR_VAR 0 4
24119: PUSH
24120: LD_VAR 0 2
24124: PUSH
24125: FOR_IN
24126: IFFALSE 24214
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24128: LD_VAR 0 4
24132: PUSH
24133: LD_INT 1
24135: ARRAY
24136: PPUSH
24137: LD_VAR 0 4
24141: PUSH
24142: LD_INT 2
24144: ARRAY
24145: PPUSH
24146: CALL_OW 458
24150: NOT
24151: IFFALSE 24155
// continue ;
24153: GO 24125
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24155: LD_VAR 0 4
24159: PUSH
24160: LD_INT 1
24162: ARRAY
24163: PPUSH
24164: LD_VAR 0 4
24168: PUSH
24169: LD_INT 2
24171: ARRAY
24172: PPUSH
24173: CALL_OW 428
24177: PUSH
24178: LD_VAR 0 5
24182: IN
24183: IFFALSE 24212
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24185: LD_VAR 0 4
24189: PUSH
24190: LD_INT 1
24192: ARRAY
24193: PPUSH
24194: LD_VAR 0 4
24198: PUSH
24199: LD_INT 2
24201: ARRAY
24202: PPUSH
24203: LD_VAR 0 1
24207: PPUSH
24208: CALL_OW 456
// end ;
24212: GO 24125
24214: POP
24215: POP
// end ;
24216: LD_VAR 0 3
24220: RET
// export function Count ( array ) ; begin
24221: LD_INT 0
24223: PPUSH
// result := array + 0 ;
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: LD_VAR 0 1
24233: PUSH
24234: LD_INT 0
24236: PLUS
24237: ST_TO_ADDR
// end ;
24238: LD_VAR 0 2
24242: RET
// export function IsEmpty ( building ) ; begin
24243: LD_INT 0
24245: PPUSH
// if not building then
24246: LD_VAR 0 1
24250: NOT
24251: IFFALSE 24255
// exit ;
24253: GO 24298
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24255: LD_ADDR_VAR 0 2
24259: PUSH
24260: LD_VAR 0 1
24264: PUSH
24265: LD_INT 22
24267: PUSH
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 255
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 58
24284: PUSH
24285: EMPTY
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PPUSH
24292: CALL_OW 69
24296: IN
24297: ST_TO_ADDR
// end ;
24298: LD_VAR 0 2
24302: RET
// export function IsNotFull ( building ) ; var places ; begin
24303: LD_INT 0
24305: PPUSH
24306: PPUSH
// if not building then
24307: LD_VAR 0 1
24311: NOT
24312: IFFALSE 24316
// exit ;
24314: GO 24344
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24316: LD_ADDR_VAR 0 2
24320: PUSH
24321: LD_VAR 0 1
24325: PPUSH
24326: LD_INT 3
24328: PUSH
24329: LD_INT 62
24331: PUSH
24332: EMPTY
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 72
24343: ST_TO_ADDR
// end ;
24344: LD_VAR 0 2
24348: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24349: LD_INT 0
24351: PPUSH
24352: PPUSH
24353: PPUSH
24354: PPUSH
// tmp := [ ] ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: EMPTY
24361: ST_TO_ADDR
// list := [ ] ;
24362: LD_ADDR_VAR 0 5
24366: PUSH
24367: EMPTY
24368: ST_TO_ADDR
// for i = 16 to 25 do
24369: LD_ADDR_VAR 0 4
24373: PUSH
24374: DOUBLE
24375: LD_INT 16
24377: DEC
24378: ST_TO_ADDR
24379: LD_INT 25
24381: PUSH
24382: FOR_TO
24383: IFFALSE 24456
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24385: LD_ADDR_VAR 0 3
24389: PUSH
24390: LD_VAR 0 3
24394: PUSH
24395: LD_INT 22
24397: PUSH
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 255
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 91
24414: PUSH
24415: LD_VAR 0 1
24419: PUSH
24420: LD_INT 6
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 30
24430: PUSH
24431: LD_VAR 0 4
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: PUSH
24445: EMPTY
24446: LIST
24447: PPUSH
24448: CALL_OW 69
24452: ADD
24453: ST_TO_ADDR
24454: GO 24382
24456: POP
24457: POP
// for i = 1 to tmp do
24458: LD_ADDR_VAR 0 4
24462: PUSH
24463: DOUBLE
24464: LD_INT 1
24466: DEC
24467: ST_TO_ADDR
24468: LD_VAR 0 3
24472: PUSH
24473: FOR_TO
24474: IFFALSE 24562
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24476: LD_ADDR_VAR 0 5
24480: PUSH
24481: LD_VAR 0 5
24485: PUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_VAR 0 4
24495: ARRAY
24496: PPUSH
24497: CALL_OW 266
24501: PUSH
24502: LD_VAR 0 3
24506: PUSH
24507: LD_VAR 0 4
24511: ARRAY
24512: PPUSH
24513: CALL_OW 250
24517: PUSH
24518: LD_VAR 0 3
24522: PUSH
24523: LD_VAR 0 4
24527: ARRAY
24528: PPUSH
24529: CALL_OW 251
24533: PUSH
24534: LD_VAR 0 3
24538: PUSH
24539: LD_VAR 0 4
24543: ARRAY
24544: PPUSH
24545: CALL_OW 254
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: PUSH
24556: EMPTY
24557: LIST
24558: ADD
24559: ST_TO_ADDR
24560: GO 24473
24562: POP
24563: POP
// result := list ;
24564: LD_ADDR_VAR 0 2
24568: PUSH
24569: LD_VAR 0 5
24573: ST_TO_ADDR
// end ;
24574: LD_VAR 0 2
24578: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24579: LD_INT 0
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
// if not factory then
24588: LD_VAR 0 1
24592: NOT
24593: IFFALSE 24597
// exit ;
24595: GO 25190
// if control = control_apeman then
24597: LD_VAR 0 4
24601: PUSH
24602: LD_INT 5
24604: EQUAL
24605: IFFALSE 24714
// begin tmp := UnitsInside ( factory ) ;
24607: LD_ADDR_VAR 0 8
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 313
24621: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24622: LD_VAR 0 8
24626: PPUSH
24627: LD_INT 25
24629: PUSH
24630: LD_INT 12
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PPUSH
24637: CALL_OW 72
24641: NOT
24642: IFFALSE 24652
// control := control_manual ;
24644: LD_ADDR_VAR 0 4
24648: PUSH
24649: LD_INT 1
24651: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24652: LD_ADDR_VAR 0 8
24656: PUSH
24657: LD_VAR 0 1
24661: PPUSH
24662: CALL 24349 0 1
24666: ST_TO_ADDR
// if tmp then
24667: LD_VAR 0 8
24671: IFFALSE 24714
// begin for i in tmp do
24673: LD_ADDR_VAR 0 7
24677: PUSH
24678: LD_VAR 0 8
24682: PUSH
24683: FOR_IN
24684: IFFALSE 24712
// if i [ 1 ] = b_ext_radio then
24686: LD_VAR 0 7
24690: PUSH
24691: LD_INT 1
24693: ARRAY
24694: PUSH
24695: LD_INT 22
24697: EQUAL
24698: IFFALSE 24710
// begin control := control_remote ;
24700: LD_ADDR_VAR 0 4
24704: PUSH
24705: LD_INT 2
24707: ST_TO_ADDR
// break ;
24708: GO 24712
// end ;
24710: GO 24683
24712: POP
24713: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24714: LD_VAR 0 1
24718: PPUSH
24719: LD_VAR 0 2
24723: PPUSH
24724: LD_VAR 0 3
24728: PPUSH
24729: LD_VAR 0 4
24733: PPUSH
24734: LD_VAR 0 5
24738: PPUSH
24739: CALL_OW 448
24743: IFFALSE 24778
// begin result := [ chassis , engine , control , weapon ] ;
24745: LD_ADDR_VAR 0 6
24749: PUSH
24750: LD_VAR 0 2
24754: PUSH
24755: LD_VAR 0 3
24759: PUSH
24760: LD_VAR 0 4
24764: PUSH
24765: LD_VAR 0 5
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: ST_TO_ADDR
// exit ;
24776: GO 25190
// end ; _chassis := AvailableChassisList ( factory ) ;
24778: LD_ADDR_VAR 0 9
24782: PUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 475
24792: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24793: LD_ADDR_VAR 0 11
24797: PUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 476
24807: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24808: LD_ADDR_VAR 0 12
24812: PUSH
24813: LD_VAR 0 1
24817: PPUSH
24818: CALL_OW 477
24822: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24823: LD_ADDR_VAR 0 10
24827: PUSH
24828: LD_VAR 0 1
24832: PPUSH
24833: CALL_OW 478
24837: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24838: LD_VAR 0 9
24842: NOT
24843: PUSH
24844: LD_VAR 0 11
24848: NOT
24849: OR
24850: PUSH
24851: LD_VAR 0 12
24855: NOT
24856: OR
24857: PUSH
24858: LD_VAR 0 10
24862: NOT
24863: OR
24864: IFFALSE 24899
// begin result := [ chassis , engine , control , weapon ] ;
24866: LD_ADDR_VAR 0 6
24870: PUSH
24871: LD_VAR 0 2
24875: PUSH
24876: LD_VAR 0 3
24880: PUSH
24881: LD_VAR 0 4
24885: PUSH
24886: LD_VAR 0 5
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: ST_TO_ADDR
// exit ;
24897: GO 25190
// end ; if not chassis in _chassis then
24899: LD_VAR 0 2
24903: PUSH
24904: LD_VAR 0 9
24908: IN
24909: NOT
24910: IFFALSE 24936
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24912: LD_ADDR_VAR 0 2
24916: PUSH
24917: LD_VAR 0 9
24921: PUSH
24922: LD_INT 1
24924: PPUSH
24925: LD_VAR 0 9
24929: PPUSH
24930: CALL_OW 12
24934: ARRAY
24935: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24936: LD_VAR 0 2
24940: PPUSH
24941: LD_VAR 0 3
24945: PPUSH
24946: CALL 25195 0 2
24950: NOT
24951: IFFALSE 25010
// repeat engine := _engine [ 1 ] ;
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: LD_VAR 0 11
24962: PUSH
24963: LD_INT 1
24965: ARRAY
24966: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24967: LD_ADDR_VAR 0 11
24971: PUSH
24972: LD_VAR 0 11
24976: PPUSH
24977: LD_INT 1
24979: PPUSH
24980: CALL_OW 3
24984: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24985: LD_VAR 0 2
24989: PPUSH
24990: LD_VAR 0 3
24994: PPUSH
24995: CALL 25195 0 2
24999: PUSH
25000: LD_VAR 0 11
25004: PUSH
25005: EMPTY
25006: EQUAL
25007: OR
25008: IFFALSE 24953
// if not control in _control then
25010: LD_VAR 0 4
25014: PUSH
25015: LD_VAR 0 12
25019: IN
25020: NOT
25021: IFFALSE 25047
// control := _control [ rand ( 1 , _control ) ] ;
25023: LD_ADDR_VAR 0 4
25027: PUSH
25028: LD_VAR 0 12
25032: PUSH
25033: LD_INT 1
25035: PPUSH
25036: LD_VAR 0 12
25040: PPUSH
25041: CALL_OW 12
25045: ARRAY
25046: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25047: LD_VAR 0 2
25051: PPUSH
25052: LD_VAR 0 5
25056: PPUSH
25057: CALL 25415 0 2
25061: NOT
25062: IFFALSE 25121
// repeat weapon := _weapon [ 1 ] ;
25064: LD_ADDR_VAR 0 5
25068: PUSH
25069: LD_VAR 0 10
25073: PUSH
25074: LD_INT 1
25076: ARRAY
25077: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25078: LD_ADDR_VAR 0 10
25082: PUSH
25083: LD_VAR 0 10
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 3
25095: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25096: LD_VAR 0 2
25100: PPUSH
25101: LD_VAR 0 5
25105: PPUSH
25106: CALL 25415 0 2
25110: PUSH
25111: LD_VAR 0 10
25115: PUSH
25116: EMPTY
25117: EQUAL
25118: OR
25119: IFFALSE 25064
// result := [ ] ;
25121: LD_ADDR_VAR 0 6
25125: PUSH
25126: EMPTY
25127: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25128: LD_VAR 0 1
25132: PPUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 3
25142: PPUSH
25143: LD_VAR 0 4
25147: PPUSH
25148: LD_VAR 0 5
25152: PPUSH
25153: CALL_OW 448
25157: IFFALSE 25190
// result := [ chassis , engine , control , weapon ] ;
25159: LD_ADDR_VAR 0 6
25163: PUSH
25164: LD_VAR 0 2
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_VAR 0 4
25178: PUSH
25179: LD_VAR 0 5
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
// end ;
25190: LD_VAR 0 6
25194: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25195: LD_INT 0
25197: PPUSH
// if not chassis or not engine then
25198: LD_VAR 0 1
25202: NOT
25203: PUSH
25204: LD_VAR 0 2
25208: NOT
25209: OR
25210: IFFALSE 25214
// exit ;
25212: GO 25410
// case engine of engine_solar :
25214: LD_VAR 0 2
25218: PUSH
25219: LD_INT 2
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25265
25227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25228: LD_ADDR_VAR 0 3
25232: PUSH
25233: LD_INT 11
25235: PUSH
25236: LD_INT 12
25238: PUSH
25239: LD_INT 13
25241: PUSH
25242: LD_INT 14
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: LD_INT 3
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: ST_TO_ADDR
25263: GO 25394
25265: LD_INT 1
25267: DOUBLE
25268: EQUAL
25269: IFTRUE 25273
25271: GO 25335
25273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_INT 11
25281: PUSH
25282: LD_INT 12
25284: PUSH
25285: LD_INT 13
25287: PUSH
25288: LD_INT 14
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 3
25299: PUSH
25300: LD_INT 4
25302: PUSH
25303: LD_INT 5
25305: PUSH
25306: LD_INT 21
25308: PUSH
25309: LD_INT 23
25311: PUSH
25312: LD_INT 22
25314: PUSH
25315: LD_INT 24
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: ST_TO_ADDR
25333: GO 25394
25335: LD_INT 3
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25393
25343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25344: LD_ADDR_VAR 0 3
25348: PUSH
25349: LD_INT 13
25351: PUSH
25352: LD_INT 14
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 4
25363: PUSH
25364: LD_INT 5
25366: PUSH
25367: LD_INT 21
25369: PUSH
25370: LD_INT 22
25372: PUSH
25373: LD_INT 23
25375: PUSH
25376: LD_INT 24
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: ST_TO_ADDR
25391: GO 25394
25393: POP
// result := ( chassis in result ) ;
25394: LD_ADDR_VAR 0 3
25398: PUSH
25399: LD_VAR 0 1
25403: PUSH
25404: LD_VAR 0 3
25408: IN
25409: ST_TO_ADDR
// end ;
25410: LD_VAR 0 3
25414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25415: LD_INT 0
25417: PPUSH
// if not chassis or not weapon then
25418: LD_VAR 0 1
25422: NOT
25423: PUSH
25424: LD_VAR 0 2
25428: NOT
25429: OR
25430: IFFALSE 25434
// exit ;
25432: GO 26494
// case weapon of us_machine_gun :
25434: LD_VAR 0 2
25438: PUSH
25439: LD_INT 2
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25477
25447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 4
25464: PUSH
25465: LD_INT 5
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: ST_TO_ADDR
25475: GO 26478
25477: LD_INT 3
25479: DOUBLE
25480: EQUAL
25481: IFTRUE 25485
25483: GO 25515
25485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25486: LD_ADDR_VAR 0 3
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 4
25502: PUSH
25503: LD_INT 5
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: ST_TO_ADDR
25513: GO 26478
25515: LD_INT 11
25517: DOUBLE
25518: EQUAL
25519: IFTRUE 25523
25521: GO 25553
25523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25524: LD_ADDR_VAR 0 3
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: LD_INT 3
25537: PUSH
25538: LD_INT 4
25540: PUSH
25541: LD_INT 5
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: ST_TO_ADDR
25551: GO 26478
25553: LD_INT 4
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25587
25561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25562: LD_ADDR_VAR 0 3
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 3
25572: PUSH
25573: LD_INT 4
25575: PUSH
25576: LD_INT 5
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 26478
25587: LD_INT 5
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25621
25595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25596: LD_ADDR_VAR 0 3
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 3
25606: PUSH
25607: LD_INT 4
25609: PUSH
25610: LD_INT 5
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
25619: GO 26478
25621: LD_INT 9
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25655
25629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25630: LD_ADDR_VAR 0 3
25634: PUSH
25635: LD_INT 2
25637: PUSH
25638: LD_INT 3
25640: PUSH
25641: LD_INT 4
25643: PUSH
25644: LD_INT 5
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: ST_TO_ADDR
25653: GO 26478
25655: LD_INT 7
25657: DOUBLE
25658: EQUAL
25659: IFTRUE 25663
25661: GO 25689
25663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: LD_INT 4
25677: PUSH
25678: LD_INT 5
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: ST_TO_ADDR
25687: GO 26478
25689: LD_INT 12
25691: DOUBLE
25692: EQUAL
25693: IFTRUE 25697
25695: GO 25723
25697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25698: LD_ADDR_VAR 0 3
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 3
25708: PUSH
25709: LD_INT 4
25711: PUSH
25712: LD_INT 5
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: ST_TO_ADDR
25721: GO 26478
25723: LD_INT 13
25725: DOUBLE
25726: EQUAL
25727: IFTRUE 25731
25729: GO 25757
25731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25732: LD_ADDR_VAR 0 3
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 3
25742: PUSH
25743: LD_INT 4
25745: PUSH
25746: LD_INT 5
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: ST_TO_ADDR
25755: GO 26478
25757: LD_INT 14
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25765
25763: GO 25783
25765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25766: LD_ADDR_VAR 0 3
25770: PUSH
25771: LD_INT 4
25773: PUSH
25774: LD_INT 5
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: ST_TO_ADDR
25781: GO 26478
25783: LD_INT 6
25785: DOUBLE
25786: EQUAL
25787: IFTRUE 25791
25789: GO 25809
25791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_INT 4
25799: PUSH
25800: LD_INT 5
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: ST_TO_ADDR
25807: GO 26478
25809: LD_INT 10
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25835
25817: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25818: LD_ADDR_VAR 0 3
25822: PUSH
25823: LD_INT 4
25825: PUSH
25826: LD_INT 5
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: ST_TO_ADDR
25833: GO 26478
25835: LD_INT 22
25837: DOUBLE
25838: EQUAL
25839: IFTRUE 25843
25841: GO 25869
25843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25844: LD_ADDR_VAR 0 3
25848: PUSH
25849: LD_INT 11
25851: PUSH
25852: LD_INT 12
25854: PUSH
25855: LD_INT 13
25857: PUSH
25858: LD_INT 14
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: ST_TO_ADDR
25867: GO 26478
25869: LD_INT 23
25871: DOUBLE
25872: EQUAL
25873: IFTRUE 25877
25875: GO 25903
25877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: LD_INT 11
25885: PUSH
25886: LD_INT 12
25888: PUSH
25889: LD_INT 13
25891: PUSH
25892: LD_INT 14
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: ST_TO_ADDR
25901: GO 26478
25903: LD_INT 24
25905: DOUBLE
25906: EQUAL
25907: IFTRUE 25911
25909: GO 25937
25911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25912: LD_ADDR_VAR 0 3
25916: PUSH
25917: LD_INT 11
25919: PUSH
25920: LD_INT 12
25922: PUSH
25923: LD_INT 13
25925: PUSH
25926: LD_INT 14
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
25935: GO 26478
25937: LD_INT 30
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25971
25945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: LD_INT 11
25953: PUSH
25954: LD_INT 12
25956: PUSH
25957: LD_INT 13
25959: PUSH
25960: LD_INT 14
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
25969: GO 26478
25971: LD_INT 25
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 25997
25979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 13
25987: PUSH
25988: LD_INT 14
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: ST_TO_ADDR
25995: GO 26478
25997: LD_INT 27
25999: DOUBLE
26000: EQUAL
26001: IFTRUE 26005
26003: GO 26023
26005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_INT 13
26013: PUSH
26014: LD_INT 14
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: ST_TO_ADDR
26021: GO 26478
26023: LD_INT 92
26025: DOUBLE
26026: EQUAL
26027: IFTRUE 26031
26029: GO 26057
26031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26032: LD_ADDR_VAR 0 3
26036: PUSH
26037: LD_INT 11
26039: PUSH
26040: LD_INT 12
26042: PUSH
26043: LD_INT 13
26045: PUSH
26046: LD_INT 14
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: ST_TO_ADDR
26055: GO 26478
26057: LD_INT 28
26059: DOUBLE
26060: EQUAL
26061: IFTRUE 26065
26063: GO 26083
26065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26066: LD_ADDR_VAR 0 3
26070: PUSH
26071: LD_INT 13
26073: PUSH
26074: LD_INT 14
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: ST_TO_ADDR
26081: GO 26478
26083: LD_INT 29
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26109
26091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 13
26099: PUSH
26100: LD_INT 14
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: ST_TO_ADDR
26107: GO 26478
26109: LD_INT 31
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26135
26117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26118: LD_ADDR_VAR 0 3
26122: PUSH
26123: LD_INT 13
26125: PUSH
26126: LD_INT 14
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: ST_TO_ADDR
26133: GO 26478
26135: LD_INT 26
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26161
26143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26144: LD_ADDR_VAR 0 3
26148: PUSH
26149: LD_INT 13
26151: PUSH
26152: LD_INT 14
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: ST_TO_ADDR
26159: GO 26478
26161: LD_INT 42
26163: DOUBLE
26164: EQUAL
26165: IFTRUE 26169
26167: GO 26195
26169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26170: LD_ADDR_VAR 0 3
26174: PUSH
26175: LD_INT 21
26177: PUSH
26178: LD_INT 22
26180: PUSH
26181: LD_INT 23
26183: PUSH
26184: LD_INT 24
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: ST_TO_ADDR
26193: GO 26478
26195: LD_INT 43
26197: DOUBLE
26198: EQUAL
26199: IFTRUE 26203
26201: GO 26229
26203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26204: LD_ADDR_VAR 0 3
26208: PUSH
26209: LD_INT 21
26211: PUSH
26212: LD_INT 22
26214: PUSH
26215: LD_INT 23
26217: PUSH
26218: LD_INT 24
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: ST_TO_ADDR
26227: GO 26478
26229: LD_INT 44
26231: DOUBLE
26232: EQUAL
26233: IFTRUE 26237
26235: GO 26263
26237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26238: LD_ADDR_VAR 0 3
26242: PUSH
26243: LD_INT 21
26245: PUSH
26246: LD_INT 22
26248: PUSH
26249: LD_INT 23
26251: PUSH
26252: LD_INT 24
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: ST_TO_ADDR
26261: GO 26478
26263: LD_INT 45
26265: DOUBLE
26266: EQUAL
26267: IFTRUE 26271
26269: GO 26297
26271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26272: LD_ADDR_VAR 0 3
26276: PUSH
26277: LD_INT 21
26279: PUSH
26280: LD_INT 22
26282: PUSH
26283: LD_INT 23
26285: PUSH
26286: LD_INT 24
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: ST_TO_ADDR
26295: GO 26478
26297: LD_INT 49
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 26331
26305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: LD_INT 21
26313: PUSH
26314: LD_INT 22
26316: PUSH
26317: LD_INT 23
26319: PUSH
26320: LD_INT 24
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: ST_TO_ADDR
26329: GO 26478
26331: LD_INT 51
26333: DOUBLE
26334: EQUAL
26335: IFTRUE 26339
26337: GO 26365
26339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_INT 21
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_INT 23
26353: PUSH
26354: LD_INT 24
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: ST_TO_ADDR
26363: GO 26478
26365: LD_INT 52
26367: DOUBLE
26368: EQUAL
26369: IFTRUE 26373
26371: GO 26399
26373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26374: LD_ADDR_VAR 0 3
26378: PUSH
26379: LD_INT 21
26381: PUSH
26382: LD_INT 22
26384: PUSH
26385: LD_INT 23
26387: PUSH
26388: LD_INT 24
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
26397: GO 26478
26399: LD_INT 53
26401: DOUBLE
26402: EQUAL
26403: IFTRUE 26407
26405: GO 26425
26407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26408: LD_ADDR_VAR 0 3
26412: PUSH
26413: LD_INT 23
26415: PUSH
26416: LD_INT 24
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: ST_TO_ADDR
26423: GO 26478
26425: LD_INT 46
26427: DOUBLE
26428: EQUAL
26429: IFTRUE 26433
26431: GO 26451
26433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26434: LD_ADDR_VAR 0 3
26438: PUSH
26439: LD_INT 23
26441: PUSH
26442: LD_INT 24
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: ST_TO_ADDR
26449: GO 26478
26451: LD_INT 47
26453: DOUBLE
26454: EQUAL
26455: IFTRUE 26459
26457: GO 26477
26459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26460: LD_ADDR_VAR 0 3
26464: PUSH
26465: LD_INT 23
26467: PUSH
26468: LD_INT 24
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: ST_TO_ADDR
26475: GO 26478
26477: POP
// result := ( chassis in result ) ;
26478: LD_ADDR_VAR 0 3
26482: PUSH
26483: LD_VAR 0 1
26487: PUSH
26488: LD_VAR 0 3
26492: IN
26493: ST_TO_ADDR
// end ;
26494: LD_VAR 0 3
26498: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26499: LD_INT 0
26501: PPUSH
26502: PPUSH
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
26507: PPUSH
// result := array ;
26508: LD_ADDR_VAR 0 5
26512: PUSH
26513: LD_VAR 0 1
26517: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26518: LD_VAR 0 1
26522: NOT
26523: PUSH
26524: LD_VAR 0 2
26528: NOT
26529: OR
26530: PUSH
26531: LD_VAR 0 3
26535: NOT
26536: OR
26537: PUSH
26538: LD_VAR 0 2
26542: PUSH
26543: LD_VAR 0 1
26547: GREATER
26548: OR
26549: PUSH
26550: LD_VAR 0 3
26554: PUSH
26555: LD_VAR 0 1
26559: GREATER
26560: OR
26561: IFFALSE 26565
// exit ;
26563: GO 26861
// if direction then
26565: LD_VAR 0 4
26569: IFFALSE 26633
// begin d := 1 ;
26571: LD_ADDR_VAR 0 9
26575: PUSH
26576: LD_INT 1
26578: ST_TO_ADDR
// if i_from > i_to then
26579: LD_VAR 0 2
26583: PUSH
26584: LD_VAR 0 3
26588: GREATER
26589: IFFALSE 26615
// length := ( array - i_from ) + i_to else
26591: LD_ADDR_VAR 0 11
26595: PUSH
26596: LD_VAR 0 1
26600: PUSH
26601: LD_VAR 0 2
26605: MINUS
26606: PUSH
26607: LD_VAR 0 3
26611: PLUS
26612: ST_TO_ADDR
26613: GO 26631
// length := i_to - i_from ;
26615: LD_ADDR_VAR 0 11
26619: PUSH
26620: LD_VAR 0 3
26624: PUSH
26625: LD_VAR 0 2
26629: MINUS
26630: ST_TO_ADDR
// end else
26631: GO 26694
// begin d := - 1 ;
26633: LD_ADDR_VAR 0 9
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: ST_TO_ADDR
// if i_from > i_to then
26642: LD_VAR 0 2
26646: PUSH
26647: LD_VAR 0 3
26651: GREATER
26652: IFFALSE 26672
// length := i_from - i_to else
26654: LD_ADDR_VAR 0 11
26658: PUSH
26659: LD_VAR 0 2
26663: PUSH
26664: LD_VAR 0 3
26668: MINUS
26669: ST_TO_ADDR
26670: GO 26694
// length := ( array - i_to ) + i_from ;
26672: LD_ADDR_VAR 0 11
26676: PUSH
26677: LD_VAR 0 1
26681: PUSH
26682: LD_VAR 0 3
26686: MINUS
26687: PUSH
26688: LD_VAR 0 2
26692: PLUS
26693: ST_TO_ADDR
// end ; if not length then
26694: LD_VAR 0 11
26698: NOT
26699: IFFALSE 26703
// exit ;
26701: GO 26861
// tmp := array ;
26703: LD_ADDR_VAR 0 10
26707: PUSH
26708: LD_VAR 0 1
26712: ST_TO_ADDR
// for i = 1 to length do
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: DOUBLE
26719: LD_INT 1
26721: DEC
26722: ST_TO_ADDR
26723: LD_VAR 0 11
26727: PUSH
26728: FOR_TO
26729: IFFALSE 26849
// begin for j = 1 to array do
26731: LD_ADDR_VAR 0 7
26735: PUSH
26736: DOUBLE
26737: LD_INT 1
26739: DEC
26740: ST_TO_ADDR
26741: LD_VAR 0 1
26745: PUSH
26746: FOR_TO
26747: IFFALSE 26835
// begin k := j + d ;
26749: LD_ADDR_VAR 0 8
26753: PUSH
26754: LD_VAR 0 7
26758: PUSH
26759: LD_VAR 0 9
26763: PLUS
26764: ST_TO_ADDR
// if k > array then
26765: LD_VAR 0 8
26769: PUSH
26770: LD_VAR 0 1
26774: GREATER
26775: IFFALSE 26785
// k := 1 ;
26777: LD_ADDR_VAR 0 8
26781: PUSH
26782: LD_INT 1
26784: ST_TO_ADDR
// if not k then
26785: LD_VAR 0 8
26789: NOT
26790: IFFALSE 26802
// k := array ;
26792: LD_ADDR_VAR 0 8
26796: PUSH
26797: LD_VAR 0 1
26801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26802: LD_ADDR_VAR 0 10
26806: PUSH
26807: LD_VAR 0 10
26811: PPUSH
26812: LD_VAR 0 8
26816: PPUSH
26817: LD_VAR 0 1
26821: PUSH
26822: LD_VAR 0 7
26826: ARRAY
26827: PPUSH
26828: CALL_OW 1
26832: ST_TO_ADDR
// end ;
26833: GO 26746
26835: POP
26836: POP
// array := tmp ;
26837: LD_ADDR_VAR 0 1
26841: PUSH
26842: LD_VAR 0 10
26846: ST_TO_ADDR
// end ;
26847: GO 26728
26849: POP
26850: POP
// result := array ;
26851: LD_ADDR_VAR 0 5
26855: PUSH
26856: LD_VAR 0 1
26860: ST_TO_ADDR
// end ;
26861: LD_VAR 0 5
26865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26866: LD_INT 0
26868: PPUSH
26869: PPUSH
// result := 0 ;
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 0
26877: ST_TO_ADDR
// if not array or not value in array then
26878: LD_VAR 0 1
26882: NOT
26883: PUSH
26884: LD_VAR 0 2
26888: PUSH
26889: LD_VAR 0 1
26893: IN
26894: NOT
26895: OR
26896: IFFALSE 26900
// exit ;
26898: GO 26954
// for i = 1 to array do
26900: LD_ADDR_VAR 0 4
26904: PUSH
26905: DOUBLE
26906: LD_INT 1
26908: DEC
26909: ST_TO_ADDR
26910: LD_VAR 0 1
26914: PUSH
26915: FOR_TO
26916: IFFALSE 26952
// if value = array [ i ] then
26918: LD_VAR 0 2
26922: PUSH
26923: LD_VAR 0 1
26927: PUSH
26928: LD_VAR 0 4
26932: ARRAY
26933: EQUAL
26934: IFFALSE 26950
// begin result := i ;
26936: LD_ADDR_VAR 0 3
26940: PUSH
26941: LD_VAR 0 4
26945: ST_TO_ADDR
// exit ;
26946: POP
26947: POP
26948: GO 26954
// end ;
26950: GO 26915
26952: POP
26953: POP
// end ;
26954: LD_VAR 0 3
26958: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26959: LD_INT 0
26961: PPUSH
// vc_chassis := chassis ;
26962: LD_ADDR_OWVAR 37
26966: PUSH
26967: LD_VAR 0 1
26971: ST_TO_ADDR
// vc_engine := engine ;
26972: LD_ADDR_OWVAR 39
26976: PUSH
26977: LD_VAR 0 2
26981: ST_TO_ADDR
// vc_control := control ;
26982: LD_ADDR_OWVAR 38
26986: PUSH
26987: LD_VAR 0 3
26991: ST_TO_ADDR
// vc_weapon := weapon ;
26992: LD_ADDR_OWVAR 40
26996: PUSH
26997: LD_VAR 0 4
27001: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27002: LD_ADDR_OWVAR 41
27006: PUSH
27007: LD_VAR 0 5
27011: ST_TO_ADDR
// end ;
27012: LD_VAR 0 6
27016: RET
// export function WantPlant ( unit ) ; var task ; begin
27017: LD_INT 0
27019: PPUSH
27020: PPUSH
// result := false ;
27021: LD_ADDR_VAR 0 2
27025: PUSH
27026: LD_INT 0
27028: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27029: LD_ADDR_VAR 0 3
27033: PUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 437
27043: ST_TO_ADDR
// if task then
27044: LD_VAR 0 3
27048: IFFALSE 27076
// if task [ 1 ] [ 1 ] = p then
27050: LD_VAR 0 3
27054: PUSH
27055: LD_INT 1
27057: ARRAY
27058: PUSH
27059: LD_INT 1
27061: ARRAY
27062: PUSH
27063: LD_STRING p
27065: EQUAL
27066: IFFALSE 27076
// result := true ;
27068: LD_ADDR_VAR 0 2
27072: PUSH
27073: LD_INT 1
27075: ST_TO_ADDR
// end ;
27076: LD_VAR 0 2
27080: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27081: LD_INT 0
27083: PPUSH
27084: PPUSH
27085: PPUSH
27086: PPUSH
// if pos < 1 then
27087: LD_VAR 0 2
27091: PUSH
27092: LD_INT 1
27094: LESS
27095: IFFALSE 27099
// exit ;
27097: GO 27402
// if pos = 1 then
27099: LD_VAR 0 2
27103: PUSH
27104: LD_INT 1
27106: EQUAL
27107: IFFALSE 27140
// result := Replace ( arr , pos [ 1 ] , value ) else
27109: LD_ADDR_VAR 0 4
27113: PUSH
27114: LD_VAR 0 1
27118: PPUSH
27119: LD_VAR 0 2
27123: PUSH
27124: LD_INT 1
27126: ARRAY
27127: PPUSH
27128: LD_VAR 0 3
27132: PPUSH
27133: CALL_OW 1
27137: ST_TO_ADDR
27138: GO 27402
// begin tmp := arr ;
27140: LD_ADDR_VAR 0 6
27144: PUSH
27145: LD_VAR 0 1
27149: ST_TO_ADDR
// s_arr := [ tmp ] ;
27150: LD_ADDR_VAR 0 7
27154: PUSH
27155: LD_VAR 0 6
27159: PUSH
27160: EMPTY
27161: LIST
27162: ST_TO_ADDR
// for i = 1 to pos - 1 do
27163: LD_ADDR_VAR 0 5
27167: PUSH
27168: DOUBLE
27169: LD_INT 1
27171: DEC
27172: ST_TO_ADDR
27173: LD_VAR 0 2
27177: PUSH
27178: LD_INT 1
27180: MINUS
27181: PUSH
27182: FOR_TO
27183: IFFALSE 27228
// begin tmp := tmp [ pos [ i ] ] ;
27185: LD_ADDR_VAR 0 6
27189: PUSH
27190: LD_VAR 0 6
27194: PUSH
27195: LD_VAR 0 2
27199: PUSH
27200: LD_VAR 0 5
27204: ARRAY
27205: ARRAY
27206: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27207: LD_ADDR_VAR 0 7
27211: PUSH
27212: LD_VAR 0 7
27216: PUSH
27217: LD_VAR 0 6
27221: PUSH
27222: EMPTY
27223: LIST
27224: ADD
27225: ST_TO_ADDR
// end ;
27226: GO 27182
27228: POP
27229: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27230: LD_ADDR_VAR 0 6
27234: PUSH
27235: LD_VAR 0 6
27239: PPUSH
27240: LD_VAR 0 2
27244: PUSH
27245: LD_VAR 0 2
27249: ARRAY
27250: PPUSH
27251: LD_VAR 0 3
27255: PPUSH
27256: CALL_OW 1
27260: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27261: LD_ADDR_VAR 0 7
27265: PUSH
27266: LD_VAR 0 7
27270: PPUSH
27271: LD_VAR 0 7
27275: PPUSH
27276: LD_VAR 0 6
27280: PPUSH
27281: CALL_OW 1
27285: ST_TO_ADDR
// for i = s_arr downto 2 do
27286: LD_ADDR_VAR 0 5
27290: PUSH
27291: DOUBLE
27292: LD_VAR 0 7
27296: INC
27297: ST_TO_ADDR
27298: LD_INT 2
27300: PUSH
27301: FOR_DOWNTO
27302: IFFALSE 27386
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27304: LD_ADDR_VAR 0 6
27308: PUSH
27309: LD_VAR 0 7
27313: PUSH
27314: LD_VAR 0 5
27318: PUSH
27319: LD_INT 1
27321: MINUS
27322: ARRAY
27323: PPUSH
27324: LD_VAR 0 2
27328: PUSH
27329: LD_VAR 0 5
27333: PUSH
27334: LD_INT 1
27336: MINUS
27337: ARRAY
27338: PPUSH
27339: LD_VAR 0 7
27343: PUSH
27344: LD_VAR 0 5
27348: ARRAY
27349: PPUSH
27350: CALL_OW 1
27354: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27355: LD_ADDR_VAR 0 7
27359: PUSH
27360: LD_VAR 0 7
27364: PPUSH
27365: LD_VAR 0 5
27369: PUSH
27370: LD_INT 1
27372: MINUS
27373: PPUSH
27374: LD_VAR 0 6
27378: PPUSH
27379: CALL_OW 1
27383: ST_TO_ADDR
// end ;
27384: GO 27301
27386: POP
27387: POP
// result := s_arr [ 1 ] ;
27388: LD_ADDR_VAR 0 4
27392: PUSH
27393: LD_VAR 0 7
27397: PUSH
27398: LD_INT 1
27400: ARRAY
27401: ST_TO_ADDR
// end ; end ;
27402: LD_VAR 0 4
27406: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27407: LD_INT 0
27409: PPUSH
27410: PPUSH
// if not list then
27411: LD_VAR 0 1
27415: NOT
27416: IFFALSE 27420
// exit ;
27418: GO 27511
// i := list [ pos1 ] ;
27420: LD_ADDR_VAR 0 5
27424: PUSH
27425: LD_VAR 0 1
27429: PUSH
27430: LD_VAR 0 2
27434: ARRAY
27435: ST_TO_ADDR
// if not i then
27436: LD_VAR 0 5
27440: NOT
27441: IFFALSE 27445
// exit ;
27443: GO 27511
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27445: LD_ADDR_VAR 0 1
27449: PUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: LD_VAR 0 2
27459: PPUSH
27460: LD_VAR 0 1
27464: PUSH
27465: LD_VAR 0 3
27469: ARRAY
27470: PPUSH
27471: CALL_OW 1
27475: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27476: LD_ADDR_VAR 0 1
27480: PUSH
27481: LD_VAR 0 1
27485: PPUSH
27486: LD_VAR 0 3
27490: PPUSH
27491: LD_VAR 0 5
27495: PPUSH
27496: CALL_OW 1
27500: ST_TO_ADDR
// result := list ;
27501: LD_ADDR_VAR 0 4
27505: PUSH
27506: LD_VAR 0 1
27510: ST_TO_ADDR
// end ;
27511: LD_VAR 0 4
27515: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27516: LD_INT 0
27518: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27519: LD_ADDR_VAR 0 5
27523: PUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: CALL_OW 250
27533: PPUSH
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 251
27543: PPUSH
27544: LD_VAR 0 2
27548: PPUSH
27549: LD_VAR 0 3
27553: PPUSH
27554: LD_VAR 0 4
27558: PPUSH
27559: CALL 27937 0 5
27563: ST_TO_ADDR
// end ;
27564: LD_VAR 0 5
27568: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
// if not list or not unit then
27575: LD_VAR 0 2
27579: NOT
27580: PUSH
27581: LD_VAR 0 1
27585: NOT
27586: OR
27587: IFFALSE 27591
// exit ;
27589: GO 27932
// result := [ ] ;
27591: LD_ADDR_VAR 0 5
27595: PUSH
27596: EMPTY
27597: ST_TO_ADDR
// for i in list do
27598: LD_ADDR_VAR 0 6
27602: PUSH
27603: LD_VAR 0 2
27607: PUSH
27608: FOR_IN
27609: IFFALSE 27827
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27611: LD_ADDR_VAR 0 8
27615: PUSH
27616: LD_VAR 0 1
27620: PPUSH
27621: LD_VAR 0 6
27625: PUSH
27626: LD_INT 1
27628: ARRAY
27629: PPUSH
27630: LD_VAR 0 6
27634: PUSH
27635: LD_INT 2
27637: ARRAY
27638: PPUSH
27639: CALL_OW 297
27643: ST_TO_ADDR
// if not Count ( result ) then
27644: LD_VAR 0 5
27648: PPUSH
27649: CALL 24221 0 1
27653: NOT
27654: IFFALSE 27687
// begin result := Join ( result , [ i , tmp ] ) ;
27656: LD_ADDR_VAR 0 5
27660: PUSH
27661: LD_VAR 0 5
27665: PPUSH
27666: LD_VAR 0 6
27670: PUSH
27671: LD_VAR 0 8
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PPUSH
27680: CALL 59821 0 2
27684: ST_TO_ADDR
// continue ;
27685: GO 27608
// end ; if result [ result ] [ 2 ] <= tmp then
27687: LD_VAR 0 5
27691: PUSH
27692: LD_VAR 0 5
27696: ARRAY
27697: PUSH
27698: LD_INT 2
27700: ARRAY
27701: PUSH
27702: LD_VAR 0 8
27706: LESSEQUAL
27707: IFFALSE 27740
// result := Join ( result , [ i , tmp ] ) else
27709: LD_ADDR_VAR 0 5
27713: PUSH
27714: LD_VAR 0 5
27718: PPUSH
27719: LD_VAR 0 6
27723: PUSH
27724: LD_VAR 0 8
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PPUSH
27733: CALL 59821 0 2
27737: ST_TO_ADDR
27738: GO 27825
// begin for j := 1 to Count ( result ) do
27740: LD_ADDR_VAR 0 7
27744: PUSH
27745: DOUBLE
27746: LD_INT 1
27748: DEC
27749: ST_TO_ADDR
27750: LD_VAR 0 5
27754: PPUSH
27755: CALL 24221 0 1
27759: PUSH
27760: FOR_TO
27761: IFFALSE 27823
// begin if tmp < result [ j ] [ 2 ] then
27763: LD_VAR 0 8
27767: PUSH
27768: LD_VAR 0 5
27772: PUSH
27773: LD_VAR 0 7
27777: ARRAY
27778: PUSH
27779: LD_INT 2
27781: ARRAY
27782: LESS
27783: IFFALSE 27821
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27785: LD_ADDR_VAR 0 5
27789: PUSH
27790: LD_VAR 0 5
27794: PPUSH
27795: LD_VAR 0 7
27799: PPUSH
27800: LD_VAR 0 6
27804: PUSH
27805: LD_VAR 0 8
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PPUSH
27814: CALL_OW 2
27818: ST_TO_ADDR
// break ;
27819: GO 27823
// end ; end ;
27821: GO 27760
27823: POP
27824: POP
// end ; end ;
27825: GO 27608
27827: POP
27828: POP
// if result and not asc then
27829: LD_VAR 0 5
27833: PUSH
27834: LD_VAR 0 3
27838: NOT
27839: AND
27840: IFFALSE 27857
// result := ReverseArray ( result ) ;
27842: LD_ADDR_VAR 0 5
27846: PUSH
27847: LD_VAR 0 5
27851: PPUSH
27852: CALL 55097 0 1
27856: ST_TO_ADDR
// tmp := [ ] ;
27857: LD_ADDR_VAR 0 8
27861: PUSH
27862: EMPTY
27863: ST_TO_ADDR
// if mode then
27864: LD_VAR 0 4
27868: IFFALSE 27932
// begin for i := 1 to result do
27870: LD_ADDR_VAR 0 6
27874: PUSH
27875: DOUBLE
27876: LD_INT 1
27878: DEC
27879: ST_TO_ADDR
27880: LD_VAR 0 5
27884: PUSH
27885: FOR_TO
27886: IFFALSE 27920
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27888: LD_ADDR_VAR 0 8
27892: PUSH
27893: LD_VAR 0 8
27897: PPUSH
27898: LD_VAR 0 5
27902: PUSH
27903: LD_VAR 0 6
27907: ARRAY
27908: PUSH
27909: LD_INT 1
27911: ARRAY
27912: PPUSH
27913: CALL 59821 0 2
27917: ST_TO_ADDR
27918: GO 27885
27920: POP
27921: POP
// result := tmp ;
27922: LD_ADDR_VAR 0 5
27926: PUSH
27927: LD_VAR 0 8
27931: ST_TO_ADDR
// end ; end ;
27932: LD_VAR 0 5
27936: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27937: LD_INT 0
27939: PPUSH
27940: PPUSH
27941: PPUSH
27942: PPUSH
// if not list then
27943: LD_VAR 0 3
27947: NOT
27948: IFFALSE 27952
// exit ;
27950: GO 28340
// result := [ ] ;
27952: LD_ADDR_VAR 0 6
27956: PUSH
27957: EMPTY
27958: ST_TO_ADDR
// for i in list do
27959: LD_ADDR_VAR 0 7
27963: PUSH
27964: LD_VAR 0 3
27968: PUSH
27969: FOR_IN
27970: IFFALSE 28172
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27972: LD_ADDR_VAR 0 9
27976: PUSH
27977: LD_VAR 0 7
27981: PPUSH
27982: LD_VAR 0 1
27986: PPUSH
27987: LD_VAR 0 2
27991: PPUSH
27992: CALL_OW 297
27996: ST_TO_ADDR
// if not result then
27997: LD_VAR 0 6
28001: NOT
28002: IFFALSE 28028
// result := [ [ i , tmp ] ] else
28004: LD_ADDR_VAR 0 6
28008: PUSH
28009: LD_VAR 0 7
28013: PUSH
28014: LD_VAR 0 9
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: ST_TO_ADDR
28026: GO 28170
// begin if result [ result ] [ 2 ] < tmp then
28028: LD_VAR 0 6
28032: PUSH
28033: LD_VAR 0 6
28037: ARRAY
28038: PUSH
28039: LD_INT 2
28041: ARRAY
28042: PUSH
28043: LD_VAR 0 9
28047: LESS
28048: IFFALSE 28090
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28050: LD_ADDR_VAR 0 6
28054: PUSH
28055: LD_VAR 0 6
28059: PPUSH
28060: LD_VAR 0 6
28064: PUSH
28065: LD_INT 1
28067: PLUS
28068: PPUSH
28069: LD_VAR 0 7
28073: PUSH
28074: LD_VAR 0 9
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PPUSH
28083: CALL_OW 2
28087: ST_TO_ADDR
28088: GO 28170
// for j = 1 to result do
28090: LD_ADDR_VAR 0 8
28094: PUSH
28095: DOUBLE
28096: LD_INT 1
28098: DEC
28099: ST_TO_ADDR
28100: LD_VAR 0 6
28104: PUSH
28105: FOR_TO
28106: IFFALSE 28168
// begin if tmp < result [ j ] [ 2 ] then
28108: LD_VAR 0 9
28112: PUSH
28113: LD_VAR 0 6
28117: PUSH
28118: LD_VAR 0 8
28122: ARRAY
28123: PUSH
28124: LD_INT 2
28126: ARRAY
28127: LESS
28128: IFFALSE 28166
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28130: LD_ADDR_VAR 0 6
28134: PUSH
28135: LD_VAR 0 6
28139: PPUSH
28140: LD_VAR 0 8
28144: PPUSH
28145: LD_VAR 0 7
28149: PUSH
28150: LD_VAR 0 9
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PPUSH
28159: CALL_OW 2
28163: ST_TO_ADDR
// break ;
28164: GO 28168
// end ; end ;
28166: GO 28105
28168: POP
28169: POP
// end ; end ;
28170: GO 27969
28172: POP
28173: POP
// if result and not asc then
28174: LD_VAR 0 6
28178: PUSH
28179: LD_VAR 0 4
28183: NOT
28184: AND
28185: IFFALSE 28260
// begin tmp := result ;
28187: LD_ADDR_VAR 0 9
28191: PUSH
28192: LD_VAR 0 6
28196: ST_TO_ADDR
// for i = tmp downto 1 do
28197: LD_ADDR_VAR 0 7
28201: PUSH
28202: DOUBLE
28203: LD_VAR 0 9
28207: INC
28208: ST_TO_ADDR
28209: LD_INT 1
28211: PUSH
28212: FOR_DOWNTO
28213: IFFALSE 28258
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28215: LD_ADDR_VAR 0 6
28219: PUSH
28220: LD_VAR 0 6
28224: PPUSH
28225: LD_VAR 0 9
28229: PUSH
28230: LD_VAR 0 7
28234: MINUS
28235: PUSH
28236: LD_INT 1
28238: PLUS
28239: PPUSH
28240: LD_VAR 0 9
28244: PUSH
28245: LD_VAR 0 7
28249: ARRAY
28250: PPUSH
28251: CALL_OW 1
28255: ST_TO_ADDR
28256: GO 28212
28258: POP
28259: POP
// end ; tmp := [ ] ;
28260: LD_ADDR_VAR 0 9
28264: PUSH
28265: EMPTY
28266: ST_TO_ADDR
// if mode then
28267: LD_VAR 0 5
28271: IFFALSE 28340
// begin for i = 1 to result do
28273: LD_ADDR_VAR 0 7
28277: PUSH
28278: DOUBLE
28279: LD_INT 1
28281: DEC
28282: ST_TO_ADDR
28283: LD_VAR 0 6
28287: PUSH
28288: FOR_TO
28289: IFFALSE 28328
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28291: LD_ADDR_VAR 0 9
28295: PUSH
28296: LD_VAR 0 9
28300: PPUSH
28301: LD_VAR 0 7
28305: PPUSH
28306: LD_VAR 0 6
28310: PUSH
28311: LD_VAR 0 7
28315: ARRAY
28316: PUSH
28317: LD_INT 1
28319: ARRAY
28320: PPUSH
28321: CALL_OW 1
28325: ST_TO_ADDR
28326: GO 28288
28328: POP
28329: POP
// result := tmp ;
28330: LD_ADDR_VAR 0 6
28334: PUSH
28335: LD_VAR 0 9
28339: ST_TO_ADDR
// end ; end ;
28340: LD_VAR 0 6
28344: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28345: LD_INT 0
28347: PPUSH
28348: PPUSH
28349: PPUSH
28350: PPUSH
28351: PPUSH
28352: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28353: LD_ADDR_VAR 0 5
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: EMPTY
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
// if not x or not y then
28375: LD_VAR 0 2
28379: NOT
28380: PUSH
28381: LD_VAR 0 3
28385: NOT
28386: OR
28387: IFFALSE 28391
// exit ;
28389: GO 30041
// if not range then
28391: LD_VAR 0 4
28395: NOT
28396: IFFALSE 28406
// range := 10 ;
28398: LD_ADDR_VAR 0 4
28402: PUSH
28403: LD_INT 10
28405: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28406: LD_ADDR_VAR 0 8
28410: PUSH
28411: LD_INT 81
28413: PUSH
28414: LD_VAR 0 1
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 92
28425: PUSH
28426: LD_VAR 0 2
28430: PUSH
28431: LD_VAR 0 3
28435: PUSH
28436: LD_VAR 0 4
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 3
28449: PUSH
28450: LD_INT 21
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: PPUSH
28469: CALL_OW 69
28473: ST_TO_ADDR
// if not tmp then
28474: LD_VAR 0 8
28478: NOT
28479: IFFALSE 28483
// exit ;
28481: GO 30041
// for i in tmp do
28483: LD_ADDR_VAR 0 6
28487: PUSH
28488: LD_VAR 0 8
28492: PUSH
28493: FOR_IN
28494: IFFALSE 30016
// begin points := [ 0 , 0 , 0 ] ;
28496: LD_ADDR_VAR 0 9
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// bpoints := 1 ;
28515: LD_ADDR_VAR 0 10
28519: PUSH
28520: LD_INT 1
28522: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28523: LD_VAR 0 6
28527: PPUSH
28528: CALL_OW 247
28532: PUSH
28533: LD_INT 1
28535: DOUBLE
28536: EQUAL
28537: IFTRUE 28541
28539: GO 29119
28541: POP
// begin if GetClass ( i ) = 1 then
28542: LD_VAR 0 6
28546: PPUSH
28547: CALL_OW 257
28551: PUSH
28552: LD_INT 1
28554: EQUAL
28555: IFFALSE 28576
// points := [ 10 , 5 , 3 ] ;
28557: LD_ADDR_VAR 0 9
28561: PUSH
28562: LD_INT 10
28564: PUSH
28565: LD_INT 5
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28576: LD_VAR 0 6
28580: PPUSH
28581: CALL_OW 257
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 3
28591: PUSH
28592: LD_INT 4
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: IN
28600: IFFALSE 28621
// points := [ 3 , 2 , 1 ] ;
28602: LD_ADDR_VAR 0 9
28606: PUSH
28607: LD_INT 3
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28621: LD_VAR 0 6
28625: PPUSH
28626: CALL_OW 257
28630: PUSH
28631: LD_INT 5
28633: EQUAL
28634: IFFALSE 28655
// points := [ 130 , 5 , 2 ] ;
28636: LD_ADDR_VAR 0 9
28640: PUSH
28641: LD_INT 130
28643: PUSH
28644: LD_INT 5
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28655: LD_VAR 0 6
28659: PPUSH
28660: CALL_OW 257
28664: PUSH
28665: LD_INT 8
28667: EQUAL
28668: IFFALSE 28689
// points := [ 35 , 35 , 30 ] ;
28670: LD_ADDR_VAR 0 9
28674: PUSH
28675: LD_INT 35
28677: PUSH
28678: LD_INT 35
28680: PUSH
28681: LD_INT 30
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28689: LD_VAR 0 6
28693: PPUSH
28694: CALL_OW 257
28698: PUSH
28699: LD_INT 9
28701: EQUAL
28702: IFFALSE 28723
// points := [ 20 , 55 , 40 ] ;
28704: LD_ADDR_VAR 0 9
28708: PUSH
28709: LD_INT 20
28711: PUSH
28712: LD_INT 55
28714: PUSH
28715: LD_INT 40
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: LIST
28722: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28723: LD_VAR 0 6
28727: PPUSH
28728: CALL_OW 257
28732: PUSH
28733: LD_INT 12
28735: PUSH
28736: LD_INT 16
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: IN
28743: IFFALSE 28764
// points := [ 5 , 3 , 2 ] ;
28745: LD_ADDR_VAR 0 9
28749: PUSH
28750: LD_INT 5
28752: PUSH
28753: LD_INT 3
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: LIST
28763: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28764: LD_VAR 0 6
28768: PPUSH
28769: CALL_OW 257
28773: PUSH
28774: LD_INT 17
28776: EQUAL
28777: IFFALSE 28798
// points := [ 100 , 50 , 75 ] ;
28779: LD_ADDR_VAR 0 9
28783: PUSH
28784: LD_INT 100
28786: PUSH
28787: LD_INT 50
28789: PUSH
28790: LD_INT 75
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28798: LD_VAR 0 6
28802: PPUSH
28803: CALL_OW 257
28807: PUSH
28808: LD_INT 15
28810: EQUAL
28811: IFFALSE 28832
// points := [ 10 , 5 , 3 ] ;
28813: LD_ADDR_VAR 0 9
28817: PUSH
28818: LD_INT 10
28820: PUSH
28821: LD_INT 5
28823: PUSH
28824: LD_INT 3
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28832: LD_VAR 0 6
28836: PPUSH
28837: CALL_OW 257
28841: PUSH
28842: LD_INT 14
28844: EQUAL
28845: IFFALSE 28866
// points := [ 10 , 0 , 0 ] ;
28847: LD_ADDR_VAR 0 9
28851: PUSH
28852: LD_INT 10
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28866: LD_VAR 0 6
28870: PPUSH
28871: CALL_OW 257
28875: PUSH
28876: LD_INT 11
28878: EQUAL
28879: IFFALSE 28900
// points := [ 30 , 10 , 5 ] ;
28881: LD_ADDR_VAR 0 9
28885: PUSH
28886: LD_INT 30
28888: PUSH
28889: LD_INT 10
28891: PUSH
28892: LD_INT 5
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28900: LD_VAR 0 1
28904: PPUSH
28905: LD_INT 5
28907: PPUSH
28908: CALL_OW 321
28912: PUSH
28913: LD_INT 2
28915: EQUAL
28916: IFFALSE 28933
// bpoints := bpoints * 1.8 ;
28918: LD_ADDR_VAR 0 10
28922: PUSH
28923: LD_VAR 0 10
28927: PUSH
28928: LD_REAL  1.80000000000000E+0000
28931: MUL
28932: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28933: LD_VAR 0 6
28937: PPUSH
28938: CALL_OW 257
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: LD_INT 3
28951: PUSH
28952: LD_INT 4
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: IN
28961: PUSH
28962: LD_VAR 0 1
28966: PPUSH
28967: LD_INT 51
28969: PPUSH
28970: CALL_OW 321
28974: PUSH
28975: LD_INT 2
28977: EQUAL
28978: AND
28979: IFFALSE 28996
// bpoints := bpoints * 1.2 ;
28981: LD_ADDR_VAR 0 10
28985: PUSH
28986: LD_VAR 0 10
28990: PUSH
28991: LD_REAL  1.20000000000000E+0000
28994: MUL
28995: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28996: LD_VAR 0 6
29000: PPUSH
29001: CALL_OW 257
29005: PUSH
29006: LD_INT 5
29008: PUSH
29009: LD_INT 7
29011: PUSH
29012: LD_INT 9
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: IN
29020: PUSH
29021: LD_VAR 0 1
29025: PPUSH
29026: LD_INT 52
29028: PPUSH
29029: CALL_OW 321
29033: PUSH
29034: LD_INT 2
29036: EQUAL
29037: AND
29038: IFFALSE 29055
// bpoints := bpoints * 1.5 ;
29040: LD_ADDR_VAR 0 10
29044: PUSH
29045: LD_VAR 0 10
29049: PUSH
29050: LD_REAL  1.50000000000000E+0000
29053: MUL
29054: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_INT 66
29062: PPUSH
29063: CALL_OW 321
29067: PUSH
29068: LD_INT 2
29070: EQUAL
29071: IFFALSE 29088
// bpoints := bpoints * 1.1 ;
29073: LD_ADDR_VAR 0 10
29077: PUSH
29078: LD_VAR 0 10
29082: PUSH
29083: LD_REAL  1.10000000000000E+0000
29086: MUL
29087: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29088: LD_ADDR_VAR 0 10
29092: PUSH
29093: LD_VAR 0 10
29097: PUSH
29098: LD_VAR 0 6
29102: PPUSH
29103: LD_INT 1
29105: PPUSH
29106: CALL_OW 259
29110: PUSH
29111: LD_REAL  1.15000000000000E+0000
29114: MUL
29115: MUL
29116: ST_TO_ADDR
// end ; unit_vehicle :
29117: GO 29945
29119: LD_INT 2
29121: DOUBLE
29122: EQUAL
29123: IFTRUE 29127
29125: GO 29933
29127: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29128: LD_VAR 0 6
29132: PPUSH
29133: CALL_OW 264
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 42
29143: PUSH
29144: LD_INT 24
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: IN
29152: IFFALSE 29173
// points := [ 25 , 5 , 3 ] ;
29154: LD_ADDR_VAR 0 9
29158: PUSH
29159: LD_INT 25
29161: PUSH
29162: LD_INT 5
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29173: LD_VAR 0 6
29177: PPUSH
29178: CALL_OW 264
29182: PUSH
29183: LD_INT 4
29185: PUSH
29186: LD_INT 43
29188: PUSH
29189: LD_INT 25
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: IN
29197: IFFALSE 29218
// points := [ 40 , 15 , 5 ] ;
29199: LD_ADDR_VAR 0 9
29203: PUSH
29204: LD_INT 40
29206: PUSH
29207: LD_INT 15
29209: PUSH
29210: LD_INT 5
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: LIST
29217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29218: LD_VAR 0 6
29222: PPUSH
29223: CALL_OW 264
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: LD_INT 23
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: IN
29238: IFFALSE 29259
// points := [ 7 , 25 , 8 ] ;
29240: LD_ADDR_VAR 0 9
29244: PUSH
29245: LD_INT 7
29247: PUSH
29248: LD_INT 25
29250: PUSH
29251: LD_INT 8
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29259: LD_VAR 0 6
29263: PPUSH
29264: CALL_OW 264
29268: PUSH
29269: LD_INT 5
29271: PUSH
29272: LD_INT 27
29274: PUSH
29275: LD_INT 44
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: LIST
29282: IN
29283: IFFALSE 29304
// points := [ 14 , 50 , 16 ] ;
29285: LD_ADDR_VAR 0 9
29289: PUSH
29290: LD_INT 14
29292: PUSH
29293: LD_INT 50
29295: PUSH
29296: LD_INT 16
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29304: LD_VAR 0 6
29308: PPUSH
29309: CALL_OW 264
29313: PUSH
29314: LD_INT 6
29316: PUSH
29317: LD_INT 46
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: IN
29324: IFFALSE 29345
// points := [ 32 , 120 , 70 ] ;
29326: LD_ADDR_VAR 0 9
29330: PUSH
29331: LD_INT 32
29333: PUSH
29334: LD_INT 120
29336: PUSH
29337: LD_INT 70
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29345: LD_VAR 0 6
29349: PPUSH
29350: CALL_OW 264
29354: PUSH
29355: LD_INT 7
29357: PUSH
29358: LD_INT 28
29360: PUSH
29361: LD_INT 45
29363: PUSH
29364: LD_INT 92
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: IN
29373: IFFALSE 29394
// points := [ 35 , 20 , 45 ] ;
29375: LD_ADDR_VAR 0 9
29379: PUSH
29380: LD_INT 35
29382: PUSH
29383: LD_INT 20
29385: PUSH
29386: LD_INT 45
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29394: LD_VAR 0 6
29398: PPUSH
29399: CALL_OW 264
29403: PUSH
29404: LD_INT 47
29406: PUSH
29407: EMPTY
29408: LIST
29409: IN
29410: IFFALSE 29431
// points := [ 67 , 45 , 75 ] ;
29412: LD_ADDR_VAR 0 9
29416: PUSH
29417: LD_INT 67
29419: PUSH
29420: LD_INT 45
29422: PUSH
29423: LD_INT 75
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29431: LD_VAR 0 6
29435: PPUSH
29436: CALL_OW 264
29440: PUSH
29441: LD_INT 26
29443: PUSH
29444: EMPTY
29445: LIST
29446: IN
29447: IFFALSE 29468
// points := [ 120 , 30 , 80 ] ;
29449: LD_ADDR_VAR 0 9
29453: PUSH
29454: LD_INT 120
29456: PUSH
29457: LD_INT 30
29459: PUSH
29460: LD_INT 80
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29468: LD_VAR 0 6
29472: PPUSH
29473: CALL_OW 264
29477: PUSH
29478: LD_INT 22
29480: PUSH
29481: EMPTY
29482: LIST
29483: IN
29484: IFFALSE 29505
// points := [ 40 , 1 , 1 ] ;
29486: LD_ADDR_VAR 0 9
29490: PUSH
29491: LD_INT 40
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29505: LD_VAR 0 6
29509: PPUSH
29510: CALL_OW 264
29514: PUSH
29515: LD_INT 29
29517: PUSH
29518: EMPTY
29519: LIST
29520: IN
29521: IFFALSE 29542
// points := [ 70 , 200 , 400 ] ;
29523: LD_ADDR_VAR 0 9
29527: PUSH
29528: LD_INT 70
29530: PUSH
29531: LD_INT 200
29533: PUSH
29534: LD_INT 400
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29542: LD_VAR 0 6
29546: PPUSH
29547: CALL_OW 264
29551: PUSH
29552: LD_INT 14
29554: PUSH
29555: LD_INT 53
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: IN
29562: IFFALSE 29583
// points := [ 40 , 10 , 20 ] ;
29564: LD_ADDR_VAR 0 9
29568: PUSH
29569: LD_INT 40
29571: PUSH
29572: LD_INT 10
29574: PUSH
29575: LD_INT 20
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: LIST
29582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29583: LD_VAR 0 6
29587: PPUSH
29588: CALL_OW 264
29592: PUSH
29593: LD_INT 9
29595: PUSH
29596: EMPTY
29597: LIST
29598: IN
29599: IFFALSE 29620
// points := [ 5 , 70 , 20 ] ;
29601: LD_ADDR_VAR 0 9
29605: PUSH
29606: LD_INT 5
29608: PUSH
29609: LD_INT 70
29611: PUSH
29612: LD_INT 20
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29620: LD_VAR 0 6
29624: PPUSH
29625: CALL_OW 264
29629: PUSH
29630: LD_INT 10
29632: PUSH
29633: EMPTY
29634: LIST
29635: IN
29636: IFFALSE 29657
// points := [ 35 , 110 , 70 ] ;
29638: LD_ADDR_VAR 0 9
29642: PUSH
29643: LD_INT 35
29645: PUSH
29646: LD_INT 110
29648: PUSH
29649: LD_INT 70
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29657: LD_VAR 0 6
29661: PPUSH
29662: CALL_OW 265
29666: PUSH
29667: LD_INT 25
29669: EQUAL
29670: IFFALSE 29691
// points := [ 80 , 65 , 100 ] ;
29672: LD_ADDR_VAR 0 9
29676: PUSH
29677: LD_INT 80
29679: PUSH
29680: LD_INT 65
29682: PUSH
29683: LD_INT 100
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29691: LD_VAR 0 6
29695: PPUSH
29696: CALL_OW 263
29700: PUSH
29701: LD_INT 1
29703: EQUAL
29704: IFFALSE 29739
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29706: LD_ADDR_VAR 0 10
29710: PUSH
29711: LD_VAR 0 10
29715: PUSH
29716: LD_VAR 0 6
29720: PPUSH
29721: CALL_OW 311
29725: PPUSH
29726: LD_INT 3
29728: PPUSH
29729: CALL_OW 259
29733: PUSH
29734: LD_INT 4
29736: MUL
29737: MUL
29738: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29739: LD_VAR 0 6
29743: PPUSH
29744: CALL_OW 263
29748: PUSH
29749: LD_INT 2
29751: EQUAL
29752: IFFALSE 29803
// begin j := IsControledBy ( i ) ;
29754: LD_ADDR_VAR 0 7
29758: PUSH
29759: LD_VAR 0 6
29763: PPUSH
29764: CALL_OW 312
29768: ST_TO_ADDR
// if j then
29769: LD_VAR 0 7
29773: IFFALSE 29803
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29775: LD_ADDR_VAR 0 10
29779: PUSH
29780: LD_VAR 0 10
29784: PUSH
29785: LD_VAR 0 7
29789: PPUSH
29790: LD_INT 3
29792: PPUSH
29793: CALL_OW 259
29797: PUSH
29798: LD_INT 3
29800: MUL
29801: MUL
29802: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29803: LD_VAR 0 6
29807: PPUSH
29808: CALL_OW 264
29812: PUSH
29813: LD_INT 5
29815: PUSH
29816: LD_INT 6
29818: PUSH
29819: LD_INT 46
29821: PUSH
29822: LD_INT 44
29824: PUSH
29825: LD_INT 47
29827: PUSH
29828: LD_INT 45
29830: PUSH
29831: LD_INT 28
29833: PUSH
29834: LD_INT 7
29836: PUSH
29837: LD_INT 27
29839: PUSH
29840: LD_INT 29
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: IN
29855: PUSH
29856: LD_VAR 0 1
29860: PPUSH
29861: LD_INT 52
29863: PPUSH
29864: CALL_OW 321
29868: PUSH
29869: LD_INT 2
29871: EQUAL
29872: AND
29873: IFFALSE 29890
// bpoints := bpoints * 1.2 ;
29875: LD_ADDR_VAR 0 10
29879: PUSH
29880: LD_VAR 0 10
29884: PUSH
29885: LD_REAL  1.20000000000000E+0000
29888: MUL
29889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29890: LD_VAR 0 6
29894: PPUSH
29895: CALL_OW 264
29899: PUSH
29900: LD_INT 6
29902: PUSH
29903: LD_INT 46
29905: PUSH
29906: LD_INT 47
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: IN
29914: IFFALSE 29931
// bpoints := bpoints * 1.2 ;
29916: LD_ADDR_VAR 0 10
29920: PUSH
29921: LD_VAR 0 10
29925: PUSH
29926: LD_REAL  1.20000000000000E+0000
29929: MUL
29930: ST_TO_ADDR
// end ; unit_building :
29931: GO 29945
29933: LD_INT 3
29935: DOUBLE
29936: EQUAL
29937: IFTRUE 29941
29939: GO 29944
29941: POP
// ; end ;
29942: GO 29945
29944: POP
// for j = 1 to 3 do
29945: LD_ADDR_VAR 0 7
29949: PUSH
29950: DOUBLE
29951: LD_INT 1
29953: DEC
29954: ST_TO_ADDR
29955: LD_INT 3
29957: PUSH
29958: FOR_TO
29959: IFFALSE 30012
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29961: LD_ADDR_VAR 0 5
29965: PUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: LD_VAR 0 7
29975: PPUSH
29976: LD_VAR 0 5
29980: PUSH
29981: LD_VAR 0 7
29985: ARRAY
29986: PUSH
29987: LD_VAR 0 9
29991: PUSH
29992: LD_VAR 0 7
29996: ARRAY
29997: PUSH
29998: LD_VAR 0 10
30002: MUL
30003: PLUS
30004: PPUSH
30005: CALL_OW 1
30009: ST_TO_ADDR
30010: GO 29958
30012: POP
30013: POP
// end ;
30014: GO 28493
30016: POP
30017: POP
// result := Replace ( result , 4 , tmp ) ;
30018: LD_ADDR_VAR 0 5
30022: PUSH
30023: LD_VAR 0 5
30027: PPUSH
30028: LD_INT 4
30030: PPUSH
30031: LD_VAR 0 8
30035: PPUSH
30036: CALL_OW 1
30040: ST_TO_ADDR
// end ;
30041: LD_VAR 0 5
30045: RET
// export function DangerAtRange ( unit , range ) ; begin
30046: LD_INT 0
30048: PPUSH
// if not unit then
30049: LD_VAR 0 1
30053: NOT
30054: IFFALSE 30058
// exit ;
30056: GO 30103
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30058: LD_ADDR_VAR 0 3
30062: PUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 255
30072: PPUSH
30073: LD_VAR 0 1
30077: PPUSH
30078: CALL_OW 250
30082: PPUSH
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 251
30092: PPUSH
30093: LD_VAR 0 2
30097: PPUSH
30098: CALL 28345 0 4
30102: ST_TO_ADDR
// end ;
30103: LD_VAR 0 3
30107: RET
// export function DangerInArea ( side , area ) ; begin
30108: LD_INT 0
30110: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30111: LD_ADDR_VAR 0 3
30115: PUSH
30116: LD_VAR 0 2
30120: PPUSH
30121: LD_INT 81
30123: PUSH
30124: LD_VAR 0 1
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 70
30137: ST_TO_ADDR
// end ;
30138: LD_VAR 0 3
30142: RET
// export function IsExtension ( b ) ; begin
30143: LD_INT 0
30145: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30146: LD_ADDR_VAR 0 2
30150: PUSH
30151: LD_VAR 0 1
30155: PUSH
30156: LD_INT 23
30158: PUSH
30159: LD_INT 20
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_INT 17
30167: PUSH
30168: LD_INT 24
30170: PUSH
30171: LD_INT 21
30173: PUSH
30174: LD_INT 19
30176: PUSH
30177: LD_INT 16
30179: PUSH
30180: LD_INT 25
30182: PUSH
30183: LD_INT 18
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: IN
30198: ST_TO_ADDR
// end ;
30199: LD_VAR 0 2
30203: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30204: LD_INT 0
30206: PPUSH
30207: PPUSH
30208: PPUSH
// result := [ ] ;
30209: LD_ADDR_VAR 0 4
30213: PUSH
30214: EMPTY
30215: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30216: LD_ADDR_VAR 0 5
30220: PUSH
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_INT 21
30228: PUSH
30229: LD_INT 3
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PPUSH
30236: CALL_OW 70
30240: ST_TO_ADDR
// if not tmp then
30241: LD_VAR 0 5
30245: NOT
30246: IFFALSE 30250
// exit ;
30248: GO 30314
// if checkLink then
30250: LD_VAR 0 3
30254: IFFALSE 30304
// begin for i in tmp do
30256: LD_ADDR_VAR 0 6
30260: PUSH
30261: LD_VAR 0 5
30265: PUSH
30266: FOR_IN
30267: IFFALSE 30302
// if GetBase ( i ) <> base then
30269: LD_VAR 0 6
30273: PPUSH
30274: CALL_OW 274
30278: PUSH
30279: LD_VAR 0 1
30283: NONEQUAL
30284: IFFALSE 30300
// ComLinkToBase ( base , i ) ;
30286: LD_VAR 0 1
30290: PPUSH
30291: LD_VAR 0 6
30295: PPUSH
30296: CALL_OW 169
30300: GO 30266
30302: POP
30303: POP
// end ; result := tmp ;
30304: LD_ADDR_VAR 0 4
30308: PUSH
30309: LD_VAR 0 5
30313: ST_TO_ADDR
// end ;
30314: LD_VAR 0 4
30318: RET
// export function ComComplete ( units , b ) ; var i ; begin
30319: LD_INT 0
30321: PPUSH
30322: PPUSH
// if not units then
30323: LD_VAR 0 1
30327: NOT
30328: IFFALSE 30332
// exit ;
30330: GO 30422
// for i in units do
30332: LD_ADDR_VAR 0 4
30336: PUSH
30337: LD_VAR 0 1
30341: PUSH
30342: FOR_IN
30343: IFFALSE 30420
// if BuildingStatus ( b ) = bs_build then
30345: LD_VAR 0 2
30349: PPUSH
30350: CALL_OW 461
30354: PUSH
30355: LD_INT 1
30357: EQUAL
30358: IFFALSE 30418
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30360: LD_VAR 0 4
30364: PPUSH
30365: LD_STRING h
30367: PUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: CALL_OW 250
30377: PUSH
30378: LD_VAR 0 2
30382: PPUSH
30383: CALL_OW 251
30387: PUSH
30388: LD_VAR 0 2
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: PUSH
30411: EMPTY
30412: LIST
30413: PPUSH
30414: CALL_OW 446
30418: GO 30342
30420: POP
30421: POP
// end ;
30422: LD_VAR 0 3
30426: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30427: LD_INT 0
30429: PPUSH
30430: PPUSH
30431: PPUSH
30432: PPUSH
30433: PPUSH
30434: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30435: LD_VAR 0 1
30439: NOT
30440: PUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 263
30450: PUSH
30451: LD_INT 2
30453: NONEQUAL
30454: OR
30455: IFFALSE 30459
// exit ;
30457: GO 30775
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30459: LD_ADDR_VAR 0 6
30463: PUSH
30464: LD_INT 22
30466: PUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 255
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 2
30483: PUSH
30484: LD_INT 30
30486: PUSH
30487: LD_INT 36
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 34
30496: PUSH
30497: LD_INT 31
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PPUSH
30513: CALL_OW 69
30517: ST_TO_ADDR
// if not tmp then
30518: LD_VAR 0 6
30522: NOT
30523: IFFALSE 30527
// exit ;
30525: GO 30775
// result := [ ] ;
30527: LD_ADDR_VAR 0 2
30531: PUSH
30532: EMPTY
30533: ST_TO_ADDR
// for i in tmp do
30534: LD_ADDR_VAR 0 3
30538: PUSH
30539: LD_VAR 0 6
30543: PUSH
30544: FOR_IN
30545: IFFALSE 30616
// begin t := UnitsInside ( i ) ;
30547: LD_ADDR_VAR 0 4
30551: PUSH
30552: LD_VAR 0 3
30556: PPUSH
30557: CALL_OW 313
30561: ST_TO_ADDR
// if t then
30562: LD_VAR 0 4
30566: IFFALSE 30614
// for j in t do
30568: LD_ADDR_VAR 0 7
30572: PUSH
30573: LD_VAR 0 4
30577: PUSH
30578: FOR_IN
30579: IFFALSE 30612
// result := Replace ( result , result + 1 , j ) ;
30581: LD_ADDR_VAR 0 2
30585: PUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: LD_VAR 0 2
30595: PUSH
30596: LD_INT 1
30598: PLUS
30599: PPUSH
30600: LD_VAR 0 7
30604: PPUSH
30605: CALL_OW 1
30609: ST_TO_ADDR
30610: GO 30578
30612: POP
30613: POP
// end ;
30614: GO 30544
30616: POP
30617: POP
// if not result then
30618: LD_VAR 0 2
30622: NOT
30623: IFFALSE 30627
// exit ;
30625: GO 30775
// mech := result [ 1 ] ;
30627: LD_ADDR_VAR 0 5
30631: PUSH
30632: LD_VAR 0 2
30636: PUSH
30637: LD_INT 1
30639: ARRAY
30640: ST_TO_ADDR
// if result > 1 then
30641: LD_VAR 0 2
30645: PUSH
30646: LD_INT 1
30648: GREATER
30649: IFFALSE 30761
// begin for i = 2 to result do
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: DOUBLE
30657: LD_INT 2
30659: DEC
30660: ST_TO_ADDR
30661: LD_VAR 0 2
30665: PUSH
30666: FOR_TO
30667: IFFALSE 30759
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30669: LD_ADDR_VAR 0 4
30673: PUSH
30674: LD_VAR 0 2
30678: PUSH
30679: LD_VAR 0 3
30683: ARRAY
30684: PPUSH
30685: LD_INT 3
30687: PPUSH
30688: CALL_OW 259
30692: PUSH
30693: LD_VAR 0 2
30697: PUSH
30698: LD_VAR 0 3
30702: ARRAY
30703: PPUSH
30704: CALL_OW 432
30708: MINUS
30709: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30710: LD_VAR 0 4
30714: PUSH
30715: LD_VAR 0 5
30719: PPUSH
30720: LD_INT 3
30722: PPUSH
30723: CALL_OW 259
30727: PUSH
30728: LD_VAR 0 5
30732: PPUSH
30733: CALL_OW 432
30737: MINUS
30738: GREATEREQUAL
30739: IFFALSE 30757
// mech := result [ i ] ;
30741: LD_ADDR_VAR 0 5
30745: PUSH
30746: LD_VAR 0 2
30750: PUSH
30751: LD_VAR 0 3
30755: ARRAY
30756: ST_TO_ADDR
// end ;
30757: GO 30666
30759: POP
30760: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30761: LD_VAR 0 1
30765: PPUSH
30766: LD_VAR 0 5
30770: PPUSH
30771: CALL_OW 135
// end ;
30775: LD_VAR 0 2
30779: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30780: LD_INT 0
30782: PPUSH
30783: PPUSH
30784: PPUSH
30785: PPUSH
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
30793: PPUSH
30794: PPUSH
// result := [ ] ;
30795: LD_ADDR_VAR 0 7
30799: PUSH
30800: EMPTY
30801: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30802: LD_VAR 0 1
30806: PPUSH
30807: CALL_OW 266
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: IN
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 32461
// if name then
30827: LD_VAR 0 3
30831: IFFALSE 30847
// SetBName ( base_dep , name ) ;
30833: LD_VAR 0 1
30837: PPUSH
30838: LD_VAR 0 3
30842: PPUSH
30843: CALL_OW 500
// base := GetBase ( base_dep ) ;
30847: LD_ADDR_VAR 0 15
30851: PUSH
30852: LD_VAR 0 1
30856: PPUSH
30857: CALL_OW 274
30861: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30862: LD_ADDR_VAR 0 16
30866: PUSH
30867: LD_VAR 0 1
30871: PPUSH
30872: CALL_OW 255
30876: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30877: LD_ADDR_VAR 0 17
30881: PUSH
30882: LD_VAR 0 1
30886: PPUSH
30887: CALL_OW 248
30891: ST_TO_ADDR
// if sources then
30892: LD_VAR 0 5
30896: IFFALSE 30943
// for i = 1 to 3 do
30898: LD_ADDR_VAR 0 8
30902: PUSH
30903: DOUBLE
30904: LD_INT 1
30906: DEC
30907: ST_TO_ADDR
30908: LD_INT 3
30910: PUSH
30911: FOR_TO
30912: IFFALSE 30941
// AddResourceType ( base , i , sources [ i ] ) ;
30914: LD_VAR 0 15
30918: PPUSH
30919: LD_VAR 0 8
30923: PPUSH
30924: LD_VAR 0 5
30928: PUSH
30929: LD_VAR 0 8
30933: ARRAY
30934: PPUSH
30935: CALL_OW 276
30939: GO 30911
30941: POP
30942: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30943: LD_ADDR_VAR 0 18
30947: PUSH
30948: LD_VAR 0 15
30952: PPUSH
30953: LD_VAR 0 2
30957: PPUSH
30958: LD_INT 1
30960: PPUSH
30961: CALL 30204 0 3
30965: ST_TO_ADDR
// InitHc ;
30966: CALL_OW 19
// InitUc ;
30970: CALL_OW 18
// uc_side := side ;
30974: LD_ADDR_OWVAR 20
30978: PUSH
30979: LD_VAR 0 16
30983: ST_TO_ADDR
// uc_nation := nation ;
30984: LD_ADDR_OWVAR 21
30988: PUSH
30989: LD_VAR 0 17
30993: ST_TO_ADDR
// if buildings then
30994: LD_VAR 0 18
30998: IFFALSE 32320
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31000: LD_ADDR_VAR 0 19
31004: PUSH
31005: LD_VAR 0 18
31009: PPUSH
31010: LD_INT 2
31012: PUSH
31013: LD_INT 30
31015: PUSH
31016: LD_INT 29
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 30
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: PPUSH
31038: CALL_OW 72
31042: ST_TO_ADDR
// if tmp then
31043: LD_VAR 0 19
31047: IFFALSE 31095
// for i in tmp do
31049: LD_ADDR_VAR 0 8
31053: PUSH
31054: LD_VAR 0 19
31058: PUSH
31059: FOR_IN
31060: IFFALSE 31093
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31062: LD_VAR 0 8
31066: PPUSH
31067: CALL_OW 250
31071: PPUSH
31072: LD_VAR 0 8
31076: PPUSH
31077: CALL_OW 251
31081: PPUSH
31082: LD_VAR 0 16
31086: PPUSH
31087: CALL_OW 441
31091: GO 31059
31093: POP
31094: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31095: LD_VAR 0 18
31099: PPUSH
31100: LD_INT 2
31102: PUSH
31103: LD_INT 30
31105: PUSH
31106: LD_INT 32
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 30
31115: PUSH
31116: LD_INT 33
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 72
31132: IFFALSE 31220
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31134: LD_ADDR_VAR 0 8
31138: PUSH
31139: LD_VAR 0 18
31143: PPUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 30
31149: PUSH
31150: LD_INT 32
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 30
31159: PUSH
31160: LD_INT 33
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: PPUSH
31172: CALL_OW 72
31176: PUSH
31177: FOR_IN
31178: IFFALSE 31218
// begin if not GetBWeapon ( i ) then
31180: LD_VAR 0 8
31184: PPUSH
31185: CALL_OW 269
31189: NOT
31190: IFFALSE 31216
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31192: LD_VAR 0 8
31196: PPUSH
31197: LD_VAR 0 8
31201: PPUSH
31202: LD_VAR 0 2
31206: PPUSH
31207: CALL 32466 0 2
31211: PPUSH
31212: CALL_OW 431
// end ;
31216: GO 31177
31218: POP
31219: POP
// end ; for i = 1 to personel do
31220: LD_ADDR_VAR 0 8
31224: PUSH
31225: DOUBLE
31226: LD_INT 1
31228: DEC
31229: ST_TO_ADDR
31230: LD_VAR 0 6
31234: PUSH
31235: FOR_TO
31236: IFFALSE 32300
// begin if i > 4 then
31238: LD_VAR 0 8
31242: PUSH
31243: LD_INT 4
31245: GREATER
31246: IFFALSE 31250
// break ;
31248: GO 32300
// case i of 1 :
31250: LD_VAR 0 8
31254: PUSH
31255: LD_INT 1
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31343
31263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31264: LD_ADDR_VAR 0 12
31268: PUSH
31269: LD_VAR 0 18
31273: PPUSH
31274: LD_INT 22
31276: PUSH
31277: LD_VAR 0 16
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 58
31288: PUSH
31289: EMPTY
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: LD_INT 32
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 30
31307: PUSH
31308: LD_INT 4
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 30
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: LIST
31335: PPUSH
31336: CALL_OW 72
31340: ST_TO_ADDR
31341: GO 31565
31343: LD_INT 2
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31413
31351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31352: LD_ADDR_VAR 0 12
31356: PUSH
31357: LD_VAR 0 18
31361: PPUSH
31362: LD_INT 22
31364: PUSH
31365: LD_VAR 0 16
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 30
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 30
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PPUSH
31406: CALL_OW 72
31410: ST_TO_ADDR
31411: GO 31565
31413: LD_INT 3
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31483
31421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31422: LD_ADDR_VAR 0 12
31426: PUSH
31427: LD_VAR 0 18
31431: PPUSH
31432: LD_INT 22
31434: PUSH
31435: LD_VAR 0 16
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 30
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 30
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PPUSH
31476: CALL_OW 72
31480: ST_TO_ADDR
31481: GO 31565
31483: LD_INT 4
31485: DOUBLE
31486: EQUAL
31487: IFTRUE 31491
31489: GO 31564
31491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31492: LD_ADDR_VAR 0 12
31496: PUSH
31497: LD_VAR 0 18
31501: PPUSH
31502: LD_INT 22
31504: PUSH
31505: LD_VAR 0 16
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: LD_INT 30
31519: PUSH
31520: LD_INT 6
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 30
31529: PUSH
31530: LD_INT 7
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 30
31539: PUSH
31540: LD_INT 8
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PPUSH
31557: CALL_OW 72
31561: ST_TO_ADDR
31562: GO 31565
31564: POP
// if i = 1 then
31565: LD_VAR 0 8
31569: PUSH
31570: LD_INT 1
31572: EQUAL
31573: IFFALSE 31684
// begin tmp := [ ] ;
31575: LD_ADDR_VAR 0 19
31579: PUSH
31580: EMPTY
31581: ST_TO_ADDR
// for j in f do
31582: LD_ADDR_VAR 0 9
31586: PUSH
31587: LD_VAR 0 12
31591: PUSH
31592: FOR_IN
31593: IFFALSE 31666
// if GetBType ( j ) = b_bunker then
31595: LD_VAR 0 9
31599: PPUSH
31600: CALL_OW 266
31604: PUSH
31605: LD_INT 32
31607: EQUAL
31608: IFFALSE 31635
// tmp := Insert ( tmp , 1 , j ) else
31610: LD_ADDR_VAR 0 19
31614: PUSH
31615: LD_VAR 0 19
31619: PPUSH
31620: LD_INT 1
31622: PPUSH
31623: LD_VAR 0 9
31627: PPUSH
31628: CALL_OW 2
31632: ST_TO_ADDR
31633: GO 31664
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31635: LD_ADDR_VAR 0 19
31639: PUSH
31640: LD_VAR 0 19
31644: PPUSH
31645: LD_VAR 0 19
31649: PUSH
31650: LD_INT 1
31652: PLUS
31653: PPUSH
31654: LD_VAR 0 9
31658: PPUSH
31659: CALL_OW 2
31663: ST_TO_ADDR
31664: GO 31592
31666: POP
31667: POP
// if tmp then
31668: LD_VAR 0 19
31672: IFFALSE 31684
// f := tmp ;
31674: LD_ADDR_VAR 0 12
31678: PUSH
31679: LD_VAR 0 19
31683: ST_TO_ADDR
// end ; x := personel [ i ] ;
31684: LD_ADDR_VAR 0 13
31688: PUSH
31689: LD_VAR 0 6
31693: PUSH
31694: LD_VAR 0 8
31698: ARRAY
31699: ST_TO_ADDR
// if x = - 1 then
31700: LD_VAR 0 13
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: EQUAL
31709: IFFALSE 31918
// begin for j in f do
31711: LD_ADDR_VAR 0 9
31715: PUSH
31716: LD_VAR 0 12
31720: PUSH
31721: FOR_IN
31722: IFFALSE 31914
// repeat InitHc ;
31724: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31728: LD_VAR 0 9
31732: PPUSH
31733: CALL_OW 266
31737: PUSH
31738: LD_INT 5
31740: EQUAL
31741: IFFALSE 31811
// begin if UnitsInside ( j ) < 3 then
31743: LD_VAR 0 9
31747: PPUSH
31748: CALL_OW 313
31752: PUSH
31753: LD_INT 3
31755: LESS
31756: IFFALSE 31792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31758: LD_INT 0
31760: PPUSH
31761: LD_INT 5
31763: PUSH
31764: LD_INT 8
31766: PUSH
31767: LD_INT 9
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: PUSH
31775: LD_VAR 0 17
31779: ARRAY
31780: PPUSH
31781: LD_VAR 0 4
31785: PPUSH
31786: CALL_OW 380
31790: GO 31809
// PrepareHuman ( false , i , skill ) ;
31792: LD_INT 0
31794: PPUSH
31795: LD_VAR 0 8
31799: PPUSH
31800: LD_VAR 0 4
31804: PPUSH
31805: CALL_OW 380
// end else
31809: GO 31828
// PrepareHuman ( false , i , skill ) ;
31811: LD_INT 0
31813: PPUSH
31814: LD_VAR 0 8
31818: PPUSH
31819: LD_VAR 0 4
31823: PPUSH
31824: CALL_OW 380
// un := CreateHuman ;
31828: LD_ADDR_VAR 0 14
31832: PUSH
31833: CALL_OW 44
31837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31838: LD_ADDR_VAR 0 7
31842: PUSH
31843: LD_VAR 0 7
31847: PPUSH
31848: LD_INT 1
31850: PPUSH
31851: LD_VAR 0 14
31855: PPUSH
31856: CALL_OW 2
31860: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31861: LD_VAR 0 14
31865: PPUSH
31866: LD_VAR 0 9
31870: PPUSH
31871: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31875: LD_VAR 0 9
31879: PPUSH
31880: CALL_OW 313
31884: PUSH
31885: LD_INT 6
31887: EQUAL
31888: PUSH
31889: LD_VAR 0 9
31893: PPUSH
31894: CALL_OW 266
31898: PUSH
31899: LD_INT 32
31901: PUSH
31902: LD_INT 31
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: IN
31909: OR
31910: IFFALSE 31724
31912: GO 31721
31914: POP
31915: POP
// end else
31916: GO 32298
// for j = 1 to x do
31918: LD_ADDR_VAR 0 9
31922: PUSH
31923: DOUBLE
31924: LD_INT 1
31926: DEC
31927: ST_TO_ADDR
31928: LD_VAR 0 13
31932: PUSH
31933: FOR_TO
31934: IFFALSE 32296
// begin InitHc ;
31936: CALL_OW 19
// if not f then
31940: LD_VAR 0 12
31944: NOT
31945: IFFALSE 32034
// begin PrepareHuman ( false , i , skill ) ;
31947: LD_INT 0
31949: PPUSH
31950: LD_VAR 0 8
31954: PPUSH
31955: LD_VAR 0 4
31959: PPUSH
31960: CALL_OW 380
// un := CreateHuman ;
31964: LD_ADDR_VAR 0 14
31968: PUSH
31969: CALL_OW 44
31973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31974: LD_ADDR_VAR 0 7
31978: PUSH
31979: LD_VAR 0 7
31983: PPUSH
31984: LD_INT 1
31986: PPUSH
31987: LD_VAR 0 14
31991: PPUSH
31992: CALL_OW 2
31996: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31997: LD_VAR 0 14
32001: PPUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 250
32011: PPUSH
32012: LD_VAR 0 1
32016: PPUSH
32017: CALL_OW 251
32021: PPUSH
32022: LD_INT 10
32024: PPUSH
32025: LD_INT 0
32027: PPUSH
32028: CALL_OW 50
// continue ;
32032: GO 31933
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32034: LD_VAR 0 12
32038: PUSH
32039: LD_INT 1
32041: ARRAY
32042: PPUSH
32043: CALL_OW 313
32047: PUSH
32048: LD_VAR 0 12
32052: PUSH
32053: LD_INT 1
32055: ARRAY
32056: PPUSH
32057: CALL_OW 266
32061: PUSH
32062: LD_INT 32
32064: PUSH
32065: LD_INT 31
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: IN
32072: AND
32073: PUSH
32074: LD_VAR 0 12
32078: PUSH
32079: LD_INT 1
32081: ARRAY
32082: PPUSH
32083: CALL_OW 313
32087: PUSH
32088: LD_INT 6
32090: EQUAL
32091: OR
32092: IFFALSE 32112
// f := Delete ( f , 1 ) ;
32094: LD_ADDR_VAR 0 12
32098: PUSH
32099: LD_VAR 0 12
32103: PPUSH
32104: LD_INT 1
32106: PPUSH
32107: CALL_OW 3
32111: ST_TO_ADDR
// if not f then
32112: LD_VAR 0 12
32116: NOT
32117: IFFALSE 32135
// begin x := x + 2 ;
32119: LD_ADDR_VAR 0 13
32123: PUSH
32124: LD_VAR 0 13
32128: PUSH
32129: LD_INT 2
32131: PLUS
32132: ST_TO_ADDR
// continue ;
32133: GO 31933
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32135: LD_VAR 0 12
32139: PUSH
32140: LD_INT 1
32142: ARRAY
32143: PPUSH
32144: CALL_OW 266
32148: PUSH
32149: LD_INT 5
32151: EQUAL
32152: IFFALSE 32226
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32154: LD_VAR 0 12
32158: PUSH
32159: LD_INT 1
32161: ARRAY
32162: PPUSH
32163: CALL_OW 313
32167: PUSH
32168: LD_INT 3
32170: LESS
32171: IFFALSE 32207
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32173: LD_INT 0
32175: PPUSH
32176: LD_INT 5
32178: PUSH
32179: LD_INT 8
32181: PUSH
32182: LD_INT 9
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: LIST
32189: PUSH
32190: LD_VAR 0 17
32194: ARRAY
32195: PPUSH
32196: LD_VAR 0 4
32200: PPUSH
32201: CALL_OW 380
32205: GO 32224
// PrepareHuman ( false , i , skill ) ;
32207: LD_INT 0
32209: PPUSH
32210: LD_VAR 0 8
32214: PPUSH
32215: LD_VAR 0 4
32219: PPUSH
32220: CALL_OW 380
// end else
32224: GO 32243
// PrepareHuman ( false , i , skill ) ;
32226: LD_INT 0
32228: PPUSH
32229: LD_VAR 0 8
32233: PPUSH
32234: LD_VAR 0 4
32238: PPUSH
32239: CALL_OW 380
// un := CreateHuman ;
32243: LD_ADDR_VAR 0 14
32247: PUSH
32248: CALL_OW 44
32252: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32253: LD_ADDR_VAR 0 7
32257: PUSH
32258: LD_VAR 0 7
32262: PPUSH
32263: LD_INT 1
32265: PPUSH
32266: LD_VAR 0 14
32270: PPUSH
32271: CALL_OW 2
32275: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32276: LD_VAR 0 14
32280: PPUSH
32281: LD_VAR 0 12
32285: PUSH
32286: LD_INT 1
32288: ARRAY
32289: PPUSH
32290: CALL_OW 52
// end ;
32294: GO 31933
32296: POP
32297: POP
// end ;
32298: GO 31235
32300: POP
32301: POP
// result := result ^ buildings ;
32302: LD_ADDR_VAR 0 7
32306: PUSH
32307: LD_VAR 0 7
32311: PUSH
32312: LD_VAR 0 18
32316: ADD
32317: ST_TO_ADDR
// end else
32318: GO 32461
// begin for i = 1 to personel do
32320: LD_ADDR_VAR 0 8
32324: PUSH
32325: DOUBLE
32326: LD_INT 1
32328: DEC
32329: ST_TO_ADDR
32330: LD_VAR 0 6
32334: PUSH
32335: FOR_TO
32336: IFFALSE 32459
// begin if i > 4 then
32338: LD_VAR 0 8
32342: PUSH
32343: LD_INT 4
32345: GREATER
32346: IFFALSE 32350
// break ;
32348: GO 32459
// x := personel [ i ] ;
32350: LD_ADDR_VAR 0 13
32354: PUSH
32355: LD_VAR 0 6
32359: PUSH
32360: LD_VAR 0 8
32364: ARRAY
32365: ST_TO_ADDR
// if x = - 1 then
32366: LD_VAR 0 13
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: EQUAL
32375: IFFALSE 32379
// continue ;
32377: GO 32335
// PrepareHuman ( false , i , skill ) ;
32379: LD_INT 0
32381: PPUSH
32382: LD_VAR 0 8
32386: PPUSH
32387: LD_VAR 0 4
32391: PPUSH
32392: CALL_OW 380
// un := CreateHuman ;
32396: LD_ADDR_VAR 0 14
32400: PUSH
32401: CALL_OW 44
32405: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32406: LD_VAR 0 14
32410: PPUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 250
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 251
32430: PPUSH
32431: LD_INT 10
32433: PPUSH
32434: LD_INT 0
32436: PPUSH
32437: CALL_OW 50
// result := result ^ un ;
32441: LD_ADDR_VAR 0 7
32445: PUSH
32446: LD_VAR 0 7
32450: PUSH
32451: LD_VAR 0 14
32455: ADD
32456: ST_TO_ADDR
// end ;
32457: GO 32335
32459: POP
32460: POP
// end ; end ;
32461: LD_VAR 0 7
32465: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32466: LD_INT 0
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
// result := false ;
32484: LD_ADDR_VAR 0 3
32488: PUSH
32489: LD_INT 0
32491: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32492: LD_VAR 0 1
32496: NOT
32497: PUSH
32498: LD_VAR 0 1
32502: PPUSH
32503: CALL_OW 266
32507: PUSH
32508: LD_INT 32
32510: PUSH
32511: LD_INT 33
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: IN
32518: NOT
32519: OR
32520: IFFALSE 32524
// exit ;
32522: GO 33633
// nat := GetNation ( tower ) ;
32524: LD_ADDR_VAR 0 12
32528: PUSH
32529: LD_VAR 0 1
32533: PPUSH
32534: CALL_OW 248
32538: ST_TO_ADDR
// side := GetSide ( tower ) ;
32539: LD_ADDR_VAR 0 16
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 255
32553: ST_TO_ADDR
// x := GetX ( tower ) ;
32554: LD_ADDR_VAR 0 10
32558: PUSH
32559: LD_VAR 0 1
32563: PPUSH
32564: CALL_OW 250
32568: ST_TO_ADDR
// y := GetY ( tower ) ;
32569: LD_ADDR_VAR 0 11
32573: PUSH
32574: LD_VAR 0 1
32578: PPUSH
32579: CALL_OW 251
32583: ST_TO_ADDR
// if not x or not y then
32584: LD_VAR 0 10
32588: NOT
32589: PUSH
32590: LD_VAR 0 11
32594: NOT
32595: OR
32596: IFFALSE 32600
// exit ;
32598: GO 33633
// weapon := 0 ;
32600: LD_ADDR_VAR 0 18
32604: PUSH
32605: LD_INT 0
32607: ST_TO_ADDR
// fac_list := [ ] ;
32608: LD_ADDR_VAR 0 17
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32615: LD_ADDR_VAR 0 6
32619: PUSH
32620: LD_VAR 0 1
32624: PPUSH
32625: CALL_OW 274
32629: PPUSH
32630: LD_VAR 0 2
32634: PPUSH
32635: LD_INT 0
32637: PPUSH
32638: CALL 30204 0 3
32642: PPUSH
32643: LD_INT 30
32645: PUSH
32646: LD_INT 3
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PPUSH
32653: CALL_OW 72
32657: ST_TO_ADDR
// if not factories then
32658: LD_VAR 0 6
32662: NOT
32663: IFFALSE 32667
// exit ;
32665: GO 33633
// for i in factories do
32667: LD_ADDR_VAR 0 8
32671: PUSH
32672: LD_VAR 0 6
32676: PUSH
32677: FOR_IN
32678: IFFALSE 32703
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32680: LD_ADDR_VAR 0 17
32684: PUSH
32685: LD_VAR 0 17
32689: PUSH
32690: LD_VAR 0 8
32694: PPUSH
32695: CALL_OW 478
32699: UNION
32700: ST_TO_ADDR
32701: GO 32677
32703: POP
32704: POP
// if not fac_list then
32705: LD_VAR 0 17
32709: NOT
32710: IFFALSE 32714
// exit ;
32712: GO 33633
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32714: LD_ADDR_VAR 0 5
32718: PUSH
32719: LD_INT 4
32721: PUSH
32722: LD_INT 5
32724: PUSH
32725: LD_INT 9
32727: PUSH
32728: LD_INT 10
32730: PUSH
32731: LD_INT 6
32733: PUSH
32734: LD_INT 7
32736: PUSH
32737: LD_INT 11
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 27
32751: PUSH
32752: LD_INT 28
32754: PUSH
32755: LD_INT 26
32757: PUSH
32758: LD_INT 30
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 43
32769: PUSH
32770: LD_INT 44
32772: PUSH
32773: LD_INT 46
32775: PUSH
32776: LD_INT 45
32778: PUSH
32779: LD_INT 47
32781: PUSH
32782: LD_INT 49
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: LIST
32797: PUSH
32798: LD_VAR 0 12
32802: ARRAY
32803: ST_TO_ADDR
// list := list isect fac_list ;
32804: LD_ADDR_VAR 0 5
32808: PUSH
32809: LD_VAR 0 5
32813: PUSH
32814: LD_VAR 0 17
32818: ISECT
32819: ST_TO_ADDR
// if not list then
32820: LD_VAR 0 5
32824: NOT
32825: IFFALSE 32829
// exit ;
32827: GO 33633
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32829: LD_VAR 0 12
32833: PUSH
32834: LD_INT 3
32836: EQUAL
32837: PUSH
32838: LD_INT 49
32840: PUSH
32841: LD_VAR 0 5
32845: IN
32846: AND
32847: PUSH
32848: LD_INT 31
32850: PPUSH
32851: LD_VAR 0 16
32855: PPUSH
32856: CALL_OW 321
32860: PUSH
32861: LD_INT 2
32863: EQUAL
32864: AND
32865: IFFALSE 32925
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32867: LD_INT 22
32869: PUSH
32870: LD_VAR 0 16
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 35
32881: PUSH
32882: LD_INT 49
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 91
32891: PUSH
32892: LD_VAR 0 1
32896: PUSH
32897: LD_INT 10
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: PPUSH
32910: CALL_OW 69
32914: NOT
32915: IFFALSE 32925
// weapon := ru_time_lapser ;
32917: LD_ADDR_VAR 0 18
32921: PUSH
32922: LD_INT 49
32924: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32925: LD_VAR 0 12
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: IN
32940: PUSH
32941: LD_INT 11
32943: PUSH
32944: LD_VAR 0 5
32948: IN
32949: PUSH
32950: LD_INT 30
32952: PUSH
32953: LD_VAR 0 5
32957: IN
32958: OR
32959: AND
32960: PUSH
32961: LD_INT 6
32963: PPUSH
32964: LD_VAR 0 16
32968: PPUSH
32969: CALL_OW 321
32973: PUSH
32974: LD_INT 2
32976: EQUAL
32977: AND
32978: IFFALSE 33143
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32980: LD_INT 22
32982: PUSH
32983: LD_VAR 0 16
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: LD_INT 35
32997: PUSH
32998: LD_INT 11
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 35
33007: PUSH
33008: LD_INT 30
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 91
33022: PUSH
33023: LD_VAR 0 1
33027: PUSH
33028: LD_INT 18
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: PPUSH
33041: CALL_OW 69
33045: NOT
33046: PUSH
33047: LD_INT 22
33049: PUSH
33050: LD_VAR 0 16
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 30
33064: PUSH
33065: LD_INT 32
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 30
33074: PUSH
33075: LD_INT 33
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 91
33089: PUSH
33090: LD_VAR 0 1
33094: PUSH
33095: LD_INT 12
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: PUSH
33108: EMPTY
33109: LIST
33110: PPUSH
33111: CALL_OW 69
33115: PUSH
33116: LD_INT 2
33118: GREATER
33119: AND
33120: IFFALSE 33143
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33122: LD_ADDR_VAR 0 18
33126: PUSH
33127: LD_INT 11
33129: PUSH
33130: LD_INT 30
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_VAR 0 12
33141: ARRAY
33142: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33143: LD_VAR 0 18
33147: NOT
33148: PUSH
33149: LD_INT 40
33151: PPUSH
33152: LD_VAR 0 16
33156: PPUSH
33157: CALL_OW 321
33161: PUSH
33162: LD_INT 2
33164: EQUAL
33165: AND
33166: PUSH
33167: LD_INT 7
33169: PUSH
33170: LD_VAR 0 5
33174: IN
33175: PUSH
33176: LD_INT 28
33178: PUSH
33179: LD_VAR 0 5
33183: IN
33184: OR
33185: PUSH
33186: LD_INT 45
33188: PUSH
33189: LD_VAR 0 5
33193: IN
33194: OR
33195: AND
33196: IFFALSE 33450
// begin hex := GetHexInfo ( x , y ) ;
33198: LD_ADDR_VAR 0 4
33202: PUSH
33203: LD_VAR 0 10
33207: PPUSH
33208: LD_VAR 0 11
33212: PPUSH
33213: CALL_OW 546
33217: ST_TO_ADDR
// if hex [ 1 ] then
33218: LD_VAR 0 4
33222: PUSH
33223: LD_INT 1
33225: ARRAY
33226: IFFALSE 33230
// exit ;
33228: GO 33633
// height := hex [ 2 ] ;
33230: LD_ADDR_VAR 0 15
33234: PUSH
33235: LD_VAR 0 4
33239: PUSH
33240: LD_INT 2
33242: ARRAY
33243: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33244: LD_ADDR_VAR 0 14
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: ST_TO_ADDR
// for i in tmp do
33267: LD_ADDR_VAR 0 8
33271: PUSH
33272: LD_VAR 0 14
33276: PUSH
33277: FOR_IN
33278: IFFALSE 33448
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33280: LD_ADDR_VAR 0 9
33284: PUSH
33285: LD_VAR 0 10
33289: PPUSH
33290: LD_VAR 0 8
33294: PPUSH
33295: LD_INT 5
33297: PPUSH
33298: CALL_OW 272
33302: PUSH
33303: LD_VAR 0 11
33307: PPUSH
33308: LD_VAR 0 8
33312: PPUSH
33313: LD_INT 5
33315: PPUSH
33316: CALL_OW 273
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33325: LD_VAR 0 9
33329: PUSH
33330: LD_INT 1
33332: ARRAY
33333: PPUSH
33334: LD_VAR 0 9
33338: PUSH
33339: LD_INT 2
33341: ARRAY
33342: PPUSH
33343: CALL_OW 488
33347: IFFALSE 33446
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33349: LD_ADDR_VAR 0 4
33353: PUSH
33354: LD_VAR 0 9
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: PPUSH
33363: LD_VAR 0 9
33367: PUSH
33368: LD_INT 2
33370: ARRAY
33371: PPUSH
33372: CALL_OW 546
33376: ST_TO_ADDR
// if hex [ 1 ] then
33377: LD_VAR 0 4
33381: PUSH
33382: LD_INT 1
33384: ARRAY
33385: IFFALSE 33389
// continue ;
33387: GO 33277
// h := hex [ 2 ] ;
33389: LD_ADDR_VAR 0 13
33393: PUSH
33394: LD_VAR 0 4
33398: PUSH
33399: LD_INT 2
33401: ARRAY
33402: ST_TO_ADDR
// if h + 7 < height then
33403: LD_VAR 0 13
33407: PUSH
33408: LD_INT 7
33410: PLUS
33411: PUSH
33412: LD_VAR 0 15
33416: LESS
33417: IFFALSE 33446
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33419: LD_ADDR_VAR 0 18
33423: PUSH
33424: LD_INT 7
33426: PUSH
33427: LD_INT 28
33429: PUSH
33430: LD_INT 45
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: PUSH
33438: LD_VAR 0 12
33442: ARRAY
33443: ST_TO_ADDR
// break ;
33444: GO 33448
// end ; end ; end ;
33446: GO 33277
33448: POP
33449: POP
// end ; if not weapon then
33450: LD_VAR 0 18
33454: NOT
33455: IFFALSE 33515
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33457: LD_ADDR_VAR 0 5
33461: PUSH
33462: LD_VAR 0 5
33466: PUSH
33467: LD_INT 11
33469: PUSH
33470: LD_INT 30
33472: PUSH
33473: LD_INT 49
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: DIFF
33481: ST_TO_ADDR
// if not list then
33482: LD_VAR 0 5
33486: NOT
33487: IFFALSE 33491
// exit ;
33489: GO 33633
// weapon := list [ rand ( 1 , list ) ] ;
33491: LD_ADDR_VAR 0 18
33495: PUSH
33496: LD_VAR 0 5
33500: PUSH
33501: LD_INT 1
33503: PPUSH
33504: LD_VAR 0 5
33508: PPUSH
33509: CALL_OW 12
33513: ARRAY
33514: ST_TO_ADDR
// end ; if weapon then
33515: LD_VAR 0 18
33519: IFFALSE 33633
// begin tmp := CostOfWeapon ( weapon ) ;
33521: LD_ADDR_VAR 0 14
33525: PUSH
33526: LD_VAR 0 18
33530: PPUSH
33531: CALL_OW 451
33535: ST_TO_ADDR
// j := GetBase ( tower ) ;
33536: LD_ADDR_VAR 0 9
33540: PUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 274
33550: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33551: LD_VAR 0 9
33555: PPUSH
33556: LD_INT 1
33558: PPUSH
33559: CALL_OW 275
33563: PUSH
33564: LD_VAR 0 14
33568: PUSH
33569: LD_INT 1
33571: ARRAY
33572: GREATEREQUAL
33573: PUSH
33574: LD_VAR 0 9
33578: PPUSH
33579: LD_INT 2
33581: PPUSH
33582: CALL_OW 275
33586: PUSH
33587: LD_VAR 0 14
33591: PUSH
33592: LD_INT 2
33594: ARRAY
33595: GREATEREQUAL
33596: AND
33597: PUSH
33598: LD_VAR 0 9
33602: PPUSH
33603: LD_INT 3
33605: PPUSH
33606: CALL_OW 275
33610: PUSH
33611: LD_VAR 0 14
33615: PUSH
33616: LD_INT 3
33618: ARRAY
33619: GREATEREQUAL
33620: AND
33621: IFFALSE 33633
// result := weapon ;
33623: LD_ADDR_VAR 0 3
33627: PUSH
33628: LD_VAR 0 18
33632: ST_TO_ADDR
// end ; end ;
33633: LD_VAR 0 3
33637: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33638: LD_INT 0
33640: PPUSH
33641: PPUSH
// result := true ;
33642: LD_ADDR_VAR 0 3
33646: PUSH
33647: LD_INT 1
33649: ST_TO_ADDR
// if array1 = array2 then
33650: LD_VAR 0 1
33654: PUSH
33655: LD_VAR 0 2
33659: EQUAL
33660: IFFALSE 33720
// begin for i = 1 to array1 do
33662: LD_ADDR_VAR 0 4
33666: PUSH
33667: DOUBLE
33668: LD_INT 1
33670: DEC
33671: ST_TO_ADDR
33672: LD_VAR 0 1
33676: PUSH
33677: FOR_TO
33678: IFFALSE 33716
// if array1 [ i ] <> array2 [ i ] then
33680: LD_VAR 0 1
33684: PUSH
33685: LD_VAR 0 4
33689: ARRAY
33690: PUSH
33691: LD_VAR 0 2
33695: PUSH
33696: LD_VAR 0 4
33700: ARRAY
33701: NONEQUAL
33702: IFFALSE 33714
// begin result := false ;
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_INT 0
33711: ST_TO_ADDR
// break ;
33712: GO 33716
// end ;
33714: GO 33677
33716: POP
33717: POP
// end else
33718: GO 33728
// result := false ;
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_INT 0
33727: ST_TO_ADDR
// end ;
33728: LD_VAR 0 3
33732: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33733: LD_INT 0
33735: PPUSH
33736: PPUSH
// if not array1 or not array2 then
33737: LD_VAR 0 1
33741: NOT
33742: PUSH
33743: LD_VAR 0 2
33747: NOT
33748: OR
33749: IFFALSE 33753
// exit ;
33751: GO 33817
// result := true ;
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 1
33760: ST_TO_ADDR
// for i = 1 to array1 do
33761: LD_ADDR_VAR 0 4
33765: PUSH
33766: DOUBLE
33767: LD_INT 1
33769: DEC
33770: ST_TO_ADDR
33771: LD_VAR 0 1
33775: PUSH
33776: FOR_TO
33777: IFFALSE 33815
// if array1 [ i ] <> array2 [ i ] then
33779: LD_VAR 0 1
33783: PUSH
33784: LD_VAR 0 4
33788: ARRAY
33789: PUSH
33790: LD_VAR 0 2
33794: PUSH
33795: LD_VAR 0 4
33799: ARRAY
33800: NONEQUAL
33801: IFFALSE 33813
// begin result := false ;
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_INT 0
33810: ST_TO_ADDR
// break ;
33811: GO 33815
// end ;
33813: GO 33776
33815: POP
33816: POP
// end ;
33817: LD_VAR 0 3
33821: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33822: LD_INT 0
33824: PPUSH
33825: PPUSH
33826: PPUSH
// pom := GetBase ( fac ) ;
33827: LD_ADDR_VAR 0 5
33831: PUSH
33832: LD_VAR 0 1
33836: PPUSH
33837: CALL_OW 274
33841: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33842: LD_ADDR_VAR 0 4
33846: PUSH
33847: LD_VAR 0 2
33851: PUSH
33852: LD_INT 1
33854: ARRAY
33855: PPUSH
33856: LD_VAR 0 2
33860: PUSH
33861: LD_INT 2
33863: ARRAY
33864: PPUSH
33865: LD_VAR 0 2
33869: PUSH
33870: LD_INT 3
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 2
33878: PUSH
33879: LD_INT 4
33881: ARRAY
33882: PPUSH
33883: CALL_OW 449
33887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33888: LD_ADDR_VAR 0 3
33892: PUSH
33893: LD_VAR 0 5
33897: PPUSH
33898: LD_INT 1
33900: PPUSH
33901: CALL_OW 275
33905: PUSH
33906: LD_VAR 0 4
33910: PUSH
33911: LD_INT 1
33913: ARRAY
33914: GREATEREQUAL
33915: PUSH
33916: LD_VAR 0 5
33920: PPUSH
33921: LD_INT 2
33923: PPUSH
33924: CALL_OW 275
33928: PUSH
33929: LD_VAR 0 4
33933: PUSH
33934: LD_INT 2
33936: ARRAY
33937: GREATEREQUAL
33938: AND
33939: PUSH
33940: LD_VAR 0 5
33944: PPUSH
33945: LD_INT 3
33947: PPUSH
33948: CALL_OW 275
33952: PUSH
33953: LD_VAR 0 4
33957: PUSH
33958: LD_INT 3
33960: ARRAY
33961: GREATEREQUAL
33962: AND
33963: ST_TO_ADDR
// end ;
33964: LD_VAR 0 3
33968: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33969: LD_INT 0
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
// pom := GetBase ( building ) ;
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 274
33989: ST_TO_ADDR
// if not pom then
33990: LD_VAR 0 3
33994: NOT
33995: IFFALSE 33999
// exit ;
33997: GO 34169
// btype := GetBType ( building ) ;
33999: LD_ADDR_VAR 0 5
34003: PUSH
34004: LD_VAR 0 1
34008: PPUSH
34009: CALL_OW 266
34013: ST_TO_ADDR
// if btype = b_armoury then
34014: LD_VAR 0 5
34018: PUSH
34019: LD_INT 4
34021: EQUAL
34022: IFFALSE 34032
// btype := b_barracks ;
34024: LD_ADDR_VAR 0 5
34028: PUSH
34029: LD_INT 5
34031: ST_TO_ADDR
// if btype = b_depot then
34032: LD_VAR 0 5
34036: PUSH
34037: LD_INT 0
34039: EQUAL
34040: IFFALSE 34050
// btype := b_warehouse ;
34042: LD_ADDR_VAR 0 5
34046: PUSH
34047: LD_INT 1
34049: ST_TO_ADDR
// if btype = b_workshop then
34050: LD_VAR 0 5
34054: PUSH
34055: LD_INT 2
34057: EQUAL
34058: IFFALSE 34068
// btype := b_factory ;
34060: LD_ADDR_VAR 0 5
34064: PUSH
34065: LD_INT 3
34067: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34068: LD_ADDR_VAR 0 4
34072: PUSH
34073: LD_VAR 0 5
34077: PPUSH
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 248
34087: PPUSH
34088: CALL_OW 450
34092: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34093: LD_ADDR_VAR 0 2
34097: PUSH
34098: LD_VAR 0 3
34102: PPUSH
34103: LD_INT 1
34105: PPUSH
34106: CALL_OW 275
34110: PUSH
34111: LD_VAR 0 4
34115: PUSH
34116: LD_INT 1
34118: ARRAY
34119: GREATEREQUAL
34120: PUSH
34121: LD_VAR 0 3
34125: PPUSH
34126: LD_INT 2
34128: PPUSH
34129: CALL_OW 275
34133: PUSH
34134: LD_VAR 0 4
34138: PUSH
34139: LD_INT 2
34141: ARRAY
34142: GREATEREQUAL
34143: AND
34144: PUSH
34145: LD_VAR 0 3
34149: PPUSH
34150: LD_INT 3
34152: PPUSH
34153: CALL_OW 275
34157: PUSH
34158: LD_VAR 0 4
34162: PUSH
34163: LD_INT 3
34165: ARRAY
34166: GREATEREQUAL
34167: AND
34168: ST_TO_ADDR
// end ;
34169: LD_VAR 0 2
34173: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34174: LD_INT 0
34176: PPUSH
34177: PPUSH
34178: PPUSH
// pom := GetBase ( building ) ;
34179: LD_ADDR_VAR 0 4
34183: PUSH
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL_OW 274
34193: ST_TO_ADDR
// if not pom then
34194: LD_VAR 0 4
34198: NOT
34199: IFFALSE 34203
// exit ;
34201: GO 34304
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34203: LD_ADDR_VAR 0 5
34207: PUSH
34208: LD_VAR 0 2
34212: PPUSH
34213: LD_VAR 0 1
34217: PPUSH
34218: CALL_OW 248
34222: PPUSH
34223: CALL_OW 450
34227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34228: LD_ADDR_VAR 0 3
34232: PUSH
34233: LD_VAR 0 4
34237: PPUSH
34238: LD_INT 1
34240: PPUSH
34241: CALL_OW 275
34245: PUSH
34246: LD_VAR 0 5
34250: PUSH
34251: LD_INT 1
34253: ARRAY
34254: GREATEREQUAL
34255: PUSH
34256: LD_VAR 0 4
34260: PPUSH
34261: LD_INT 2
34263: PPUSH
34264: CALL_OW 275
34268: PUSH
34269: LD_VAR 0 5
34273: PUSH
34274: LD_INT 2
34276: ARRAY
34277: GREATEREQUAL
34278: AND
34279: PUSH
34280: LD_VAR 0 4
34284: PPUSH
34285: LD_INT 3
34287: PPUSH
34288: CALL_OW 275
34292: PUSH
34293: LD_VAR 0 5
34297: PUSH
34298: LD_INT 3
34300: ARRAY
34301: GREATEREQUAL
34302: AND
34303: ST_TO_ADDR
// end ;
34304: LD_VAR 0 3
34308: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
34317: PPUSH
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
// result := false ;
34322: LD_ADDR_VAR 0 8
34326: PUSH
34327: LD_INT 0
34329: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34330: LD_VAR 0 5
34334: NOT
34335: PUSH
34336: LD_VAR 0 1
34340: NOT
34341: OR
34342: PUSH
34343: LD_VAR 0 2
34347: NOT
34348: OR
34349: PUSH
34350: LD_VAR 0 3
34354: NOT
34355: OR
34356: IFFALSE 34360
// exit ;
34358: GO 35174
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34360: LD_ADDR_VAR 0 14
34364: PUSH
34365: LD_VAR 0 1
34369: PPUSH
34370: LD_VAR 0 2
34374: PPUSH
34375: LD_VAR 0 3
34379: PPUSH
34380: LD_VAR 0 4
34384: PPUSH
34385: LD_VAR 0 5
34389: PUSH
34390: LD_INT 1
34392: ARRAY
34393: PPUSH
34394: CALL_OW 248
34398: PPUSH
34399: LD_INT 0
34401: PPUSH
34402: CALL 36427 0 6
34406: ST_TO_ADDR
// if not hexes then
34407: LD_VAR 0 14
34411: NOT
34412: IFFALSE 34416
// exit ;
34414: GO 35174
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34416: LD_ADDR_VAR 0 17
34420: PUSH
34421: LD_VAR 0 5
34425: PPUSH
34426: LD_INT 22
34428: PUSH
34429: LD_VAR 0 13
34433: PPUSH
34434: CALL_OW 255
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 30
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 30
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PPUSH
34475: CALL_OW 72
34479: ST_TO_ADDR
// for i = 1 to hexes do
34480: LD_ADDR_VAR 0 9
34484: PUSH
34485: DOUBLE
34486: LD_INT 1
34488: DEC
34489: ST_TO_ADDR
34490: LD_VAR 0 14
34494: PUSH
34495: FOR_TO
34496: IFFALSE 35172
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34498: LD_ADDR_VAR 0 13
34502: PUSH
34503: LD_VAR 0 14
34507: PUSH
34508: LD_VAR 0 9
34512: ARRAY
34513: PUSH
34514: LD_INT 1
34516: ARRAY
34517: PPUSH
34518: LD_VAR 0 14
34522: PUSH
34523: LD_VAR 0 9
34527: ARRAY
34528: PUSH
34529: LD_INT 2
34531: ARRAY
34532: PPUSH
34533: CALL_OW 428
34537: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34538: LD_VAR 0 14
34542: PUSH
34543: LD_VAR 0 9
34547: ARRAY
34548: PUSH
34549: LD_INT 1
34551: ARRAY
34552: PPUSH
34553: LD_VAR 0 14
34557: PUSH
34558: LD_VAR 0 9
34562: ARRAY
34563: PUSH
34564: LD_INT 2
34566: ARRAY
34567: PPUSH
34568: CALL_OW 351
34572: PUSH
34573: LD_VAR 0 14
34577: PUSH
34578: LD_VAR 0 9
34582: ARRAY
34583: PUSH
34584: LD_INT 1
34586: ARRAY
34587: PPUSH
34588: LD_VAR 0 14
34592: PUSH
34593: LD_VAR 0 9
34597: ARRAY
34598: PUSH
34599: LD_INT 2
34601: ARRAY
34602: PPUSH
34603: CALL_OW 488
34607: NOT
34608: OR
34609: PUSH
34610: LD_VAR 0 13
34614: PPUSH
34615: CALL_OW 247
34619: PUSH
34620: LD_INT 3
34622: EQUAL
34623: OR
34624: IFFALSE 34630
// exit ;
34626: POP
34627: POP
34628: GO 35174
// if not tmp then
34630: LD_VAR 0 13
34634: NOT
34635: IFFALSE 34639
// continue ;
34637: GO 34495
// result := true ;
34639: LD_ADDR_VAR 0 8
34643: PUSH
34644: LD_INT 1
34646: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34647: LD_VAR 0 6
34651: PUSH
34652: LD_VAR 0 13
34656: PPUSH
34657: CALL_OW 247
34661: PUSH
34662: LD_INT 2
34664: EQUAL
34665: AND
34666: PUSH
34667: LD_VAR 0 13
34671: PPUSH
34672: CALL_OW 263
34676: PUSH
34677: LD_INT 1
34679: EQUAL
34680: AND
34681: IFFALSE 34845
// begin if IsDrivenBy ( tmp ) then
34683: LD_VAR 0 13
34687: PPUSH
34688: CALL_OW 311
34692: IFFALSE 34696
// continue ;
34694: GO 34495
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34696: LD_VAR 0 6
34700: PPUSH
34701: LD_INT 3
34703: PUSH
34704: LD_INT 60
34706: PUSH
34707: EMPTY
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: LD_INT 55
34719: PUSH
34720: EMPTY
34721: LIST
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PPUSH
34731: CALL_OW 72
34735: IFFALSE 34843
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34737: LD_ADDR_VAR 0 18
34741: PUSH
34742: LD_VAR 0 6
34746: PPUSH
34747: LD_INT 3
34749: PUSH
34750: LD_INT 60
34752: PUSH
34753: EMPTY
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 55
34765: PUSH
34766: EMPTY
34767: LIST
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PPUSH
34777: CALL_OW 72
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: ST_TO_ADDR
// if IsInUnit ( driver ) then
34786: LD_VAR 0 18
34790: PPUSH
34791: CALL_OW 310
34795: IFFALSE 34806
// ComExit ( driver ) ;
34797: LD_VAR 0 18
34801: PPUSH
34802: CALL 60219 0 1
// AddComEnterUnit ( driver , tmp ) ;
34806: LD_VAR 0 18
34810: PPUSH
34811: LD_VAR 0 13
34815: PPUSH
34816: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34820: LD_VAR 0 18
34824: PPUSH
34825: LD_VAR 0 7
34829: PPUSH
34830: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34834: LD_VAR 0 18
34838: PPUSH
34839: CALL_OW 181
// end ; continue ;
34843: GO 34495
// end ; if not cleaners or not tmp in cleaners then
34845: LD_VAR 0 6
34849: NOT
34850: PUSH
34851: LD_VAR 0 13
34855: PUSH
34856: LD_VAR 0 6
34860: IN
34861: NOT
34862: OR
34863: IFFALSE 35170
// begin if dep then
34865: LD_VAR 0 17
34869: IFFALSE 35005
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34871: LD_ADDR_VAR 0 16
34875: PUSH
34876: LD_VAR 0 17
34880: PUSH
34881: LD_INT 1
34883: ARRAY
34884: PPUSH
34885: CALL_OW 250
34889: PPUSH
34890: LD_VAR 0 17
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: PPUSH
34899: CALL_OW 254
34903: PPUSH
34904: LD_INT 5
34906: PPUSH
34907: CALL_OW 272
34911: PUSH
34912: LD_VAR 0 17
34916: PUSH
34917: LD_INT 1
34919: ARRAY
34920: PPUSH
34921: CALL_OW 251
34925: PPUSH
34926: LD_VAR 0 17
34930: PUSH
34931: LD_INT 1
34933: ARRAY
34934: PPUSH
34935: CALL_OW 254
34939: PPUSH
34940: LD_INT 5
34942: PPUSH
34943: CALL_OW 273
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34952: LD_VAR 0 16
34956: PUSH
34957: LD_INT 1
34959: ARRAY
34960: PPUSH
34961: LD_VAR 0 16
34965: PUSH
34966: LD_INT 2
34968: ARRAY
34969: PPUSH
34970: CALL_OW 488
34974: IFFALSE 35005
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34976: LD_VAR 0 13
34980: PPUSH
34981: LD_VAR 0 16
34985: PUSH
34986: LD_INT 1
34988: ARRAY
34989: PPUSH
34990: LD_VAR 0 16
34994: PUSH
34995: LD_INT 2
34997: ARRAY
34998: PPUSH
34999: CALL_OW 111
// continue ;
35003: GO 34495
// end ; end ; r := GetDir ( tmp ) ;
35005: LD_ADDR_VAR 0 15
35009: PUSH
35010: LD_VAR 0 13
35014: PPUSH
35015: CALL_OW 254
35019: ST_TO_ADDR
// if r = 5 then
35020: LD_VAR 0 15
35024: PUSH
35025: LD_INT 5
35027: EQUAL
35028: IFFALSE 35038
// r := 0 ;
35030: LD_ADDR_VAR 0 15
35034: PUSH
35035: LD_INT 0
35037: ST_TO_ADDR
// for j = r to 5 do
35038: LD_ADDR_VAR 0 10
35042: PUSH
35043: DOUBLE
35044: LD_VAR 0 15
35048: DEC
35049: ST_TO_ADDR
35050: LD_INT 5
35052: PUSH
35053: FOR_TO
35054: IFFALSE 35168
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35056: LD_ADDR_VAR 0 11
35060: PUSH
35061: LD_VAR 0 13
35065: PPUSH
35066: CALL_OW 250
35070: PPUSH
35071: LD_VAR 0 10
35075: PPUSH
35076: LD_INT 2
35078: PPUSH
35079: CALL_OW 272
35083: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35084: LD_ADDR_VAR 0 12
35088: PUSH
35089: LD_VAR 0 13
35093: PPUSH
35094: CALL_OW 251
35098: PPUSH
35099: LD_VAR 0 10
35103: PPUSH
35104: LD_INT 2
35106: PPUSH
35107: CALL_OW 273
35111: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35112: LD_VAR 0 11
35116: PPUSH
35117: LD_VAR 0 12
35121: PPUSH
35122: CALL_OW 488
35126: PUSH
35127: LD_VAR 0 11
35131: PPUSH
35132: LD_VAR 0 12
35136: PPUSH
35137: CALL_OW 428
35141: NOT
35142: AND
35143: IFFALSE 35166
// begin ComMoveXY ( tmp , _x , _y ) ;
35145: LD_VAR 0 13
35149: PPUSH
35150: LD_VAR 0 11
35154: PPUSH
35155: LD_VAR 0 12
35159: PPUSH
35160: CALL_OW 111
// break ;
35164: GO 35168
// end ; end ;
35166: GO 35053
35168: POP
35169: POP
// end ; end ;
35170: GO 34495
35172: POP
35173: POP
// end ;
35174: LD_VAR 0 8
35178: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35179: LD_INT 0
35181: PPUSH
// result := true ;
35182: LD_ADDR_VAR 0 3
35186: PUSH
35187: LD_INT 1
35189: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35190: LD_VAR 0 2
35194: PUSH
35195: LD_INT 24
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35209
35201: LD_INT 33
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35234
35209: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 32
35217: PPUSH
35218: LD_VAR 0 1
35222: PPUSH
35223: CALL_OW 321
35227: PUSH
35228: LD_INT 2
35230: EQUAL
35231: ST_TO_ADDR
35232: GO 35550
35234: LD_INT 20
35236: DOUBLE
35237: EQUAL
35238: IFTRUE 35242
35240: GO 35267
35242: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35243: LD_ADDR_VAR 0 3
35247: PUSH
35248: LD_INT 6
35250: PPUSH
35251: LD_VAR 0 1
35255: PPUSH
35256: CALL_OW 321
35260: PUSH
35261: LD_INT 2
35263: EQUAL
35264: ST_TO_ADDR
35265: GO 35550
35267: LD_INT 22
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35281
35273: LD_INT 36
35275: DOUBLE
35276: EQUAL
35277: IFTRUE 35281
35279: GO 35306
35281: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35282: LD_ADDR_VAR 0 3
35286: PUSH
35287: LD_INT 15
35289: PPUSH
35290: LD_VAR 0 1
35294: PPUSH
35295: CALL_OW 321
35299: PUSH
35300: LD_INT 2
35302: EQUAL
35303: ST_TO_ADDR
35304: GO 35550
35306: LD_INT 30
35308: DOUBLE
35309: EQUAL
35310: IFTRUE 35314
35312: GO 35339
35314: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35315: LD_ADDR_VAR 0 3
35319: PUSH
35320: LD_INT 20
35322: PPUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 321
35332: PUSH
35333: LD_INT 2
35335: EQUAL
35336: ST_TO_ADDR
35337: GO 35550
35339: LD_INT 28
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35353
35345: LD_INT 21
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 35378
35353: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35354: LD_ADDR_VAR 0 3
35358: PUSH
35359: LD_INT 21
35361: PPUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 321
35371: PUSH
35372: LD_INT 2
35374: EQUAL
35375: ST_TO_ADDR
35376: GO 35550
35378: LD_INT 16
35380: DOUBLE
35381: EQUAL
35382: IFTRUE 35386
35384: GO 35411
35386: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35387: LD_ADDR_VAR 0 3
35391: PUSH
35392: LD_INT 84
35394: PPUSH
35395: LD_VAR 0 1
35399: PPUSH
35400: CALL_OW 321
35404: PUSH
35405: LD_INT 2
35407: EQUAL
35408: ST_TO_ADDR
35409: GO 35550
35411: LD_INT 19
35413: DOUBLE
35414: EQUAL
35415: IFTRUE 35425
35417: LD_INT 23
35419: DOUBLE
35420: EQUAL
35421: IFTRUE 35425
35423: GO 35450
35425: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35426: LD_ADDR_VAR 0 3
35430: PUSH
35431: LD_INT 83
35433: PPUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 321
35443: PUSH
35444: LD_INT 2
35446: EQUAL
35447: ST_TO_ADDR
35448: GO 35550
35450: LD_INT 17
35452: DOUBLE
35453: EQUAL
35454: IFTRUE 35458
35456: GO 35483
35458: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35459: LD_ADDR_VAR 0 3
35463: PUSH
35464: LD_INT 39
35466: PPUSH
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 321
35476: PUSH
35477: LD_INT 2
35479: EQUAL
35480: ST_TO_ADDR
35481: GO 35550
35483: LD_INT 18
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35516
35491: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_INT 40
35499: PPUSH
35500: LD_VAR 0 1
35504: PPUSH
35505: CALL_OW 321
35509: PUSH
35510: LD_INT 2
35512: EQUAL
35513: ST_TO_ADDR
35514: GO 35550
35516: LD_INT 27
35518: DOUBLE
35519: EQUAL
35520: IFTRUE 35524
35522: GO 35549
35524: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35525: LD_ADDR_VAR 0 3
35529: PUSH
35530: LD_INT 35
35532: PPUSH
35533: LD_VAR 0 1
35537: PPUSH
35538: CALL_OW 321
35542: PUSH
35543: LD_INT 2
35545: EQUAL
35546: ST_TO_ADDR
35547: GO 35550
35549: POP
// end ;
35550: LD_VAR 0 3
35554: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35555: LD_INT 0
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
35567: PPUSH
// result := false ;
35568: LD_ADDR_VAR 0 6
35572: PUSH
35573: LD_INT 0
35575: ST_TO_ADDR
// if btype = b_depot then
35576: LD_VAR 0 2
35580: PUSH
35581: LD_INT 0
35583: EQUAL
35584: IFFALSE 35596
// begin result := true ;
35586: LD_ADDR_VAR 0 6
35590: PUSH
35591: LD_INT 1
35593: ST_TO_ADDR
// exit ;
35594: GO 36422
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35596: LD_VAR 0 1
35600: NOT
35601: PUSH
35602: LD_VAR 0 1
35606: PPUSH
35607: CALL_OW 266
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: IN
35622: NOT
35623: OR
35624: PUSH
35625: LD_VAR 0 2
35629: NOT
35630: OR
35631: PUSH
35632: LD_VAR 0 5
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: LD_INT 4
35651: PUSH
35652: LD_INT 5
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: IN
35663: NOT
35664: OR
35665: PUSH
35666: LD_VAR 0 3
35670: PPUSH
35671: LD_VAR 0 4
35675: PPUSH
35676: CALL_OW 488
35680: NOT
35681: OR
35682: IFFALSE 35686
// exit ;
35684: GO 36422
// side := GetSide ( depot ) ;
35686: LD_ADDR_VAR 0 9
35690: PUSH
35691: LD_VAR 0 1
35695: PPUSH
35696: CALL_OW 255
35700: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35701: LD_VAR 0 9
35705: PPUSH
35706: LD_VAR 0 2
35710: PPUSH
35711: CALL 35179 0 2
35715: NOT
35716: IFFALSE 35720
// exit ;
35718: GO 36422
// pom := GetBase ( depot ) ;
35720: LD_ADDR_VAR 0 10
35724: PUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 274
35734: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35735: LD_ADDR_VAR 0 11
35739: PUSH
35740: LD_VAR 0 2
35744: PPUSH
35745: LD_VAR 0 1
35749: PPUSH
35750: CALL_OW 248
35754: PPUSH
35755: CALL_OW 450
35759: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35760: LD_VAR 0 10
35764: PPUSH
35765: LD_INT 1
35767: PPUSH
35768: CALL_OW 275
35772: PUSH
35773: LD_VAR 0 11
35777: PUSH
35778: LD_INT 1
35780: ARRAY
35781: GREATEREQUAL
35782: PUSH
35783: LD_VAR 0 10
35787: PPUSH
35788: LD_INT 2
35790: PPUSH
35791: CALL_OW 275
35795: PUSH
35796: LD_VAR 0 11
35800: PUSH
35801: LD_INT 2
35803: ARRAY
35804: GREATEREQUAL
35805: AND
35806: PUSH
35807: LD_VAR 0 10
35811: PPUSH
35812: LD_INT 3
35814: PPUSH
35815: CALL_OW 275
35819: PUSH
35820: LD_VAR 0 11
35824: PUSH
35825: LD_INT 3
35827: ARRAY
35828: GREATEREQUAL
35829: AND
35830: NOT
35831: IFFALSE 35835
// exit ;
35833: GO 36422
// if GetBType ( depot ) = b_depot then
35835: LD_VAR 0 1
35839: PPUSH
35840: CALL_OW 266
35844: PUSH
35845: LD_INT 0
35847: EQUAL
35848: IFFALSE 35860
// dist := 28 else
35850: LD_ADDR_VAR 0 14
35854: PUSH
35855: LD_INT 28
35857: ST_TO_ADDR
35858: GO 35868
// dist := 36 ;
35860: LD_ADDR_VAR 0 14
35864: PUSH
35865: LD_INT 36
35867: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35868: LD_VAR 0 1
35872: PPUSH
35873: LD_VAR 0 3
35877: PPUSH
35878: LD_VAR 0 4
35882: PPUSH
35883: CALL_OW 297
35887: PUSH
35888: LD_VAR 0 14
35892: GREATER
35893: IFFALSE 35897
// exit ;
35895: GO 36422
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35897: LD_ADDR_VAR 0 12
35901: PUSH
35902: LD_VAR 0 2
35906: PPUSH
35907: LD_VAR 0 3
35911: PPUSH
35912: LD_VAR 0 4
35916: PPUSH
35917: LD_VAR 0 5
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 248
35931: PPUSH
35932: LD_INT 0
35934: PPUSH
35935: CALL 36427 0 6
35939: ST_TO_ADDR
// if not hexes then
35940: LD_VAR 0 12
35944: NOT
35945: IFFALSE 35949
// exit ;
35947: GO 36422
// hex := GetHexInfo ( x , y ) ;
35949: LD_ADDR_VAR 0 15
35953: PUSH
35954: LD_VAR 0 3
35958: PPUSH
35959: LD_VAR 0 4
35963: PPUSH
35964: CALL_OW 546
35968: ST_TO_ADDR
// if hex [ 1 ] then
35969: LD_VAR 0 15
35973: PUSH
35974: LD_INT 1
35976: ARRAY
35977: IFFALSE 35981
// exit ;
35979: GO 36422
// height := hex [ 2 ] ;
35981: LD_ADDR_VAR 0 13
35985: PUSH
35986: LD_VAR 0 15
35990: PUSH
35991: LD_INT 2
35993: ARRAY
35994: ST_TO_ADDR
// for i = 1 to hexes do
35995: LD_ADDR_VAR 0 7
35999: PUSH
36000: DOUBLE
36001: LD_INT 1
36003: DEC
36004: ST_TO_ADDR
36005: LD_VAR 0 12
36009: PUSH
36010: FOR_TO
36011: IFFALSE 36341
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36013: LD_VAR 0 12
36017: PUSH
36018: LD_VAR 0 7
36022: ARRAY
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: PPUSH
36028: LD_VAR 0 12
36032: PUSH
36033: LD_VAR 0 7
36037: ARRAY
36038: PUSH
36039: LD_INT 2
36041: ARRAY
36042: PPUSH
36043: CALL_OW 488
36047: NOT
36048: PUSH
36049: LD_VAR 0 12
36053: PUSH
36054: LD_VAR 0 7
36058: ARRAY
36059: PUSH
36060: LD_INT 1
36062: ARRAY
36063: PPUSH
36064: LD_VAR 0 12
36068: PUSH
36069: LD_VAR 0 7
36073: ARRAY
36074: PUSH
36075: LD_INT 2
36077: ARRAY
36078: PPUSH
36079: CALL_OW 428
36083: PUSH
36084: LD_INT 0
36086: GREATER
36087: OR
36088: PUSH
36089: LD_VAR 0 12
36093: PUSH
36094: LD_VAR 0 7
36098: ARRAY
36099: PUSH
36100: LD_INT 1
36102: ARRAY
36103: PPUSH
36104: LD_VAR 0 12
36108: PUSH
36109: LD_VAR 0 7
36113: ARRAY
36114: PUSH
36115: LD_INT 2
36117: ARRAY
36118: PPUSH
36119: CALL_OW 351
36123: OR
36124: IFFALSE 36130
// exit ;
36126: POP
36127: POP
36128: GO 36422
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36130: LD_ADDR_VAR 0 8
36134: PUSH
36135: LD_VAR 0 12
36139: PUSH
36140: LD_VAR 0 7
36144: ARRAY
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: PPUSH
36150: LD_VAR 0 12
36154: PUSH
36155: LD_VAR 0 7
36159: ARRAY
36160: PUSH
36161: LD_INT 2
36163: ARRAY
36164: PPUSH
36165: CALL_OW 546
36169: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36170: LD_VAR 0 8
36174: PUSH
36175: LD_INT 1
36177: ARRAY
36178: PUSH
36179: LD_VAR 0 8
36183: PUSH
36184: LD_INT 2
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 13
36192: PUSH
36193: LD_INT 2
36195: PLUS
36196: GREATER
36197: OR
36198: PUSH
36199: LD_VAR 0 8
36203: PUSH
36204: LD_INT 2
36206: ARRAY
36207: PUSH
36208: LD_VAR 0 13
36212: PUSH
36213: LD_INT 2
36215: MINUS
36216: LESS
36217: OR
36218: PUSH
36219: LD_VAR 0 8
36223: PUSH
36224: LD_INT 3
36226: ARRAY
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 8
36233: PUSH
36234: LD_INT 9
36236: PUSH
36237: LD_INT 10
36239: PUSH
36240: LD_INT 11
36242: PUSH
36243: LD_INT 12
36245: PUSH
36246: LD_INT 13
36248: PUSH
36249: LD_INT 16
36251: PUSH
36252: LD_INT 17
36254: PUSH
36255: LD_INT 18
36257: PUSH
36258: LD_INT 19
36260: PUSH
36261: LD_INT 20
36263: PUSH
36264: LD_INT 21
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: IN
36282: NOT
36283: OR
36284: PUSH
36285: LD_VAR 0 8
36289: PUSH
36290: LD_INT 5
36292: ARRAY
36293: NOT
36294: OR
36295: PUSH
36296: LD_VAR 0 8
36300: PUSH
36301: LD_INT 6
36303: ARRAY
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: LD_INT 7
36313: PUSH
36314: LD_INT 9
36316: PUSH
36317: LD_INT 10
36319: PUSH
36320: LD_INT 11
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: IN
36331: NOT
36332: OR
36333: IFFALSE 36339
// exit ;
36335: POP
36336: POP
36337: GO 36422
// end ;
36339: GO 36010
36341: POP
36342: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36343: LD_VAR 0 9
36347: PPUSH
36348: LD_VAR 0 3
36352: PPUSH
36353: LD_VAR 0 4
36357: PPUSH
36358: LD_INT 20
36360: PPUSH
36361: CALL 28345 0 4
36365: PUSH
36366: LD_INT 4
36368: ARRAY
36369: IFFALSE 36373
// exit ;
36371: GO 36422
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36373: LD_VAR 0 2
36377: PUSH
36378: LD_INT 29
36380: PUSH
36381: LD_INT 30
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: IN
36388: PUSH
36389: LD_VAR 0 3
36393: PPUSH
36394: LD_VAR 0 4
36398: PPUSH
36399: LD_VAR 0 9
36403: PPUSH
36404: CALL_OW 440
36408: NOT
36409: AND
36410: IFFALSE 36414
// exit ;
36412: GO 36422
// result := true ;
36414: LD_ADDR_VAR 0 6
36418: PUSH
36419: LD_INT 1
36421: ST_TO_ADDR
// end ;
36422: LD_VAR 0 6
36426: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36427: LD_INT 0
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
36446: PPUSH
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
36486: PPUSH
// result = [ ] ;
36487: LD_ADDR_VAR 0 7
36491: PUSH
36492: EMPTY
36493: ST_TO_ADDR
// temp_list = [ ] ;
36494: LD_ADDR_VAR 0 9
36498: PUSH
36499: EMPTY
36500: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36501: LD_VAR 0 4
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 3
36517: PUSH
36518: LD_INT 4
36520: PUSH
36521: LD_INT 5
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: IN
36532: NOT
36533: PUSH
36534: LD_VAR 0 1
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: IN
36549: PUSH
36550: LD_VAR 0 5
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: IN
36569: NOT
36570: AND
36571: OR
36572: IFFALSE 36576
// exit ;
36574: GO 54967
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36576: LD_VAR 0 1
36580: PUSH
36581: LD_INT 6
36583: PUSH
36584: LD_INT 7
36586: PUSH
36587: LD_INT 8
36589: PUSH
36590: LD_INT 13
36592: PUSH
36593: LD_INT 12
36595: PUSH
36596: LD_INT 15
36598: PUSH
36599: LD_INT 11
36601: PUSH
36602: LD_INT 14
36604: PUSH
36605: LD_INT 10
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: IN
36619: IFFALSE 36629
// btype = b_lab ;
36621: LD_ADDR_VAR 0 1
36625: PUSH
36626: LD_INT 6
36628: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36629: LD_VAR 0 6
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 2
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: IN
36648: NOT
36649: PUSH
36650: LD_VAR 0 1
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: LD_INT 6
36669: PUSH
36670: LD_INT 36
36672: PUSH
36673: LD_INT 4
36675: PUSH
36676: LD_INT 5
36678: PUSH
36679: LD_INT 31
36681: PUSH
36682: LD_INT 32
36684: PUSH
36685: LD_INT 33
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: IN
36701: NOT
36702: PUSH
36703: LD_VAR 0 6
36707: PUSH
36708: LD_INT 1
36710: EQUAL
36711: AND
36712: OR
36713: PUSH
36714: LD_VAR 0 1
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: IN
36729: NOT
36730: PUSH
36731: LD_VAR 0 6
36735: PUSH
36736: LD_INT 2
36738: EQUAL
36739: AND
36740: OR
36741: IFFALSE 36751
// mode = 0 ;
36743: LD_ADDR_VAR 0 6
36747: PUSH
36748: LD_INT 0
36750: ST_TO_ADDR
// case mode of 0 :
36751: LD_VAR 0 6
36755: PUSH
36756: LD_INT 0
36758: DOUBLE
36759: EQUAL
36760: IFTRUE 36764
36762: GO 48217
36764: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36765: LD_ADDR_VAR 0 11
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: LD_INT 2
36861: NEG
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36958: LD_ADDR_VAR 0 12
36962: PUSH
36963: LD_INT 0
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 1
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: NEG
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37154: LD_ADDR_VAR 0 13
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 0
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 2
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 3
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 3
37313: NEG
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 3
37325: NEG
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37353: LD_ADDR_VAR 0 14
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: NEG
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 2
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 3
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: LD_INT 3
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37549: LD_ADDR_VAR 0 15
37553: PUSH
37554: LD_INT 0
37556: PUSH
37557: LD_INT 0
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 1
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 3
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37742: LD_ADDR_VAR 0 16
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37935: LD_ADDR_VAR 0 17
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 2
38111: NEG
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38165: LD_ADDR_VAR 0 18
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 2
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38395: LD_ADDR_VAR 0 19
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 2
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38625: LD_ADDR_VAR 0 20
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 2
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38855: LD_ADDR_VAR 0 21
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 2
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 2
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39085: LD_ADDR_VAR 0 22
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: LD_INT 2
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 2
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39315: LD_ADDR_VAR 0 23
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: NEG
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 2
39502: NEG
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: LD_INT 3
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: LD_INT 3
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39595: LD_ADDR_VAR 0 24
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39871: LD_ADDR_VAR 0 25
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 3
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 3
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: LD_INT 3
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40145: LD_ADDR_VAR 0 26
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: PUSH
40357: LD_INT 3
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 3
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40421: LD_ADDR_VAR 0 27
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: NEG
40655: PUSH
40656: LD_INT 1
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: NEG
40667: PUSH
40668: LD_INT 2
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40701: LD_ADDR_VAR 0 28
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: NEG
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 2
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: NEG
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: LD_INT 3
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 3
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: NEG
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40983: LD_ADDR_VAR 0 29
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 2
41161: NEG
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 3
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: LD_INT 1
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 3
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: NEG
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41262: LD_ADDR_VAR 0 30
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 2
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 3
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: LD_INT 3
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 3
41505: NEG
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41540: LD_ADDR_VAR 0 31
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: LD_INT 3
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41818: LD_ADDR_VAR 0 32
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 2
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 3
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: PUSH
42041: LD_INT 3
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 3
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42096: LD_ADDR_VAR 0 33
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 2
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 2
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 3
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 3
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42375: LD_ADDR_VAR 0 34
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 3
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 3
42620: NEG
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42655: LD_ADDR_VAR 0 35
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42767: LD_ADDR_VAR 0 36
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42879: LD_ADDR_VAR 0 37
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 1
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42991: LD_ADDR_VAR 0 38
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43103: LD_ADDR_VAR 0 39
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 1
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 2
43188: NEG
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43215: LD_ADDR_VAR 0 40
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43327: LD_ADDR_VAR 0 41
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 2
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 3
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 3
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 3
43636: NEG
43637: PUSH
43638: LD_INT 3
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43677: LD_ADDR_VAR 0 42
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: LD_INT 2
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 3
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 3
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 3
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 3
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: LD_INT 3
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 3
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 2
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 3
43974: NEG
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44027: LD_ADDR_VAR 0 43
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 3
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 3
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 3
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 3
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 3
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44375: LD_ADDR_VAR 0 44
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: LD_INT 1
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 3
44608: PUSH
44609: LD_INT 2
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 3
44618: PUSH
44619: LD_INT 3
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 3
44672: NEG
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: LD_INT 3
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44725: LD_ADDR_VAR 0 45
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: NEG
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 3
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 3
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 3
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: NEG
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: LD_INT 3
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45075: LD_ADDR_VAR 0 46
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 3
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 3
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 3
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45423: LD_ADDR_VAR 0 47
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45574: LD_ADDR_VAR 0 48
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45721: LD_ADDR_VAR 0 49
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45865: LD_ADDR_VAR 0 50
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46009: LD_ADDR_VAR 0 51
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46156: LD_ADDR_VAR 0 52
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46307: LD_ADDR_VAR 0 53
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46537: LD_ADDR_VAR 0 54
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46767: LD_ADDR_VAR 0 55
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46997: LD_ADDR_VAR 0 56
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47227: LD_ADDR_VAR 0 57
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 1
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47457: LD_ADDR_VAR 0 58
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47687: LD_ADDR_VAR 0 59
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47775: LD_ADDR_VAR 0 60
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47863: LD_ADDR_VAR 0 61
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47951: LD_ADDR_VAR 0 62
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48039: LD_ADDR_VAR 0 63
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48127: LD_ADDR_VAR 0 64
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: ST_TO_ADDR
// end ; 1 :
48215: GO 54112
48217: LD_INT 1
48219: DOUBLE
48220: EQUAL
48221: IFTRUE 48225
48223: GO 50848
48225: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48226: LD_ADDR_VAR 0 11
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 3
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 3
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48270: LD_ADDR_VAR 0 12
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 3
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48311: LD_ADDR_VAR 0 13
48315: PUSH
48316: LD_INT 3
48318: PUSH
48319: LD_INT 2
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 3
48328: PUSH
48329: LD_INT 3
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: LD_INT 3
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48351: LD_ADDR_VAR 0 14
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48392: LD_ADDR_VAR 0 15
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48436: LD_ADDR_VAR 0 16
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 3
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 3
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: NEG
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: LIST
48481: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48482: LD_ADDR_VAR 0 17
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 3
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48526: LD_ADDR_VAR 0 18
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48567: LD_ADDR_VAR 0 19
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 3
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48607: LD_ADDR_VAR 0 20
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 3
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 3
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48648: LD_ADDR_VAR 0 21
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 3
48677: NEG
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48692: LD_ADDR_VAR 0 22
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: LD_INT 3
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48738: LD_ADDR_VAR 0 23
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 4
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48782: LD_ADDR_VAR 0 24
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 4
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48823: LD_ADDR_VAR 0 25
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 4
48840: PUSH
48841: LD_INT 3
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: LD_INT 4
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48863: LD_ADDR_VAR 0 26
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 4
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48904: LD_ADDR_VAR 0 27
48908: PUSH
48909: LD_INT 3
48911: NEG
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 4
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: LIST
48947: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48948: LD_ADDR_VAR 0 28
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: LD_INT 4
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 4
48979: NEG
48980: PUSH
48981: LD_INT 3
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48994: LD_ADDR_VAR 0 29
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 3
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: LD_INT 4
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 5
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 5
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 4
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 6
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 6
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 5
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49149: LD_ADDR_VAR 0 30
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 4
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 4
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 4
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 5
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 5
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 5
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 6
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 6
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49292: LD_ADDR_VAR 0 31
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 3
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 4
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 4
49339: PUSH
49340: LD_INT 4
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: LD_INT 4
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 5
49359: PUSH
49360: LD_INT 4
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 5
49369: PUSH
49370: LD_INT 5
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 4
49379: PUSH
49380: LD_INT 5
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 6
49389: PUSH
49390: LD_INT 5
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 6
49399: PUSH
49400: LD_INT 6
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 5
49409: PUSH
49410: LD_INT 6
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49431: LD_ADDR_VAR 0 32
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 4
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 4
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 5
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 5
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 4
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 6
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 6
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 5
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49574: LD_ADDR_VAR 0 33
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 3
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 4
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 4
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 4
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 5
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 5
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 5
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 6
49694: NEG
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 6
49705: NEG
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49729: LD_ADDR_VAR 0 34
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 3
49760: NEG
49761: PUSH
49762: LD_INT 3
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 4
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 4
49784: NEG
49785: PUSH
49786: LD_INT 3
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 4
49796: NEG
49797: PUSH
49798: LD_INT 4
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 4
49808: NEG
49809: PUSH
49810: LD_INT 5
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 5
49820: NEG
49821: PUSH
49822: LD_INT 4
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 5
49832: NEG
49833: PUSH
49834: LD_INT 5
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 5
49844: NEG
49845: PUSH
49846: LD_INT 6
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 6
49856: NEG
49857: PUSH
49858: LD_INT 5
49860: NEG
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 6
49868: NEG
49869: PUSH
49870: LD_INT 6
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49892: LD_ADDR_VAR 0 41
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49936: LD_ADDR_VAR 0 42
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49977: LD_ADDR_VAR 0 43
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50017: LD_ADDR_VAR 0 44
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: LIST
50057: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50058: LD_ADDR_VAR 0 45
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 3
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50102: LD_ADDR_VAR 0 46
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 3
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50148: LD_ADDR_VAR 0 47
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 3
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50181: LD_ADDR_VAR 0 48
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50212: LD_ADDR_VAR 0 49
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50241: LD_ADDR_VAR 0 50
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 3
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50270: LD_ADDR_VAR 0 51
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50301: LD_ADDR_VAR 0 52
50305: PUSH
50306: LD_INT 3
50308: NEG
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: NEG
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50334: LD_ADDR_VAR 0 53
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50378: LD_ADDR_VAR 0 54
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50419: LD_ADDR_VAR 0 55
50423: PUSH
50424: LD_INT 3
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 3
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: LD_INT 3
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50459: LD_ADDR_VAR 0 56
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: LD_INT 3
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50500: LD_ADDR_VAR 0 57
50504: PUSH
50505: LD_INT 2
50507: NEG
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50544: LD_ADDR_VAR 0 58
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 3
50575: NEG
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50590: LD_ADDR_VAR 0 59
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50634: LD_ADDR_VAR 0 60
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50675: LD_ADDR_VAR 0 61
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50715: LD_ADDR_VAR 0 62
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: LIST
50755: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50756: LD_ADDR_VAR 0 63
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50800: LD_ADDR_VAR 0 64
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 2
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: LIST
50845: ST_TO_ADDR
// end ; 2 :
50846: GO 54112
50848: LD_INT 2
50850: DOUBLE
50851: EQUAL
50852: IFTRUE 50856
50854: GO 54111
50856: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50857: LD_ADDR_VAR 0 29
50861: PUSH
50862: LD_INT 4
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 4
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 5
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 5
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 4
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: LD_INT 2
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 5
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 3
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 3
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 4
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 4
50987: PUSH
50988: LD_INT 4
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 4
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 4
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: PUSH
51078: LD_INT 5
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: LD_INT 5
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: LD_INT 4
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 5
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 3
51140: NEG
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: NEG
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 4
51196: NEG
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 4
51219: NEG
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 4
51242: NEG
51243: PUSH
51244: LD_INT 4
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 4
51254: NEG
51255: PUSH
51256: LD_INT 5
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 3
51266: NEG
51267: PUSH
51268: LD_INT 4
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 4
51290: NEG
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 5
51302: NEG
51303: PUSH
51304: LD_INT 4
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 5
51314: NEG
51315: PUSH
51316: LD_INT 5
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 5
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 5
51338: NEG
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51395: LD_ADDR_VAR 0 30
51399: PUSH
51400: LD_INT 4
51402: PUSH
51403: LD_INT 4
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 4
51412: PUSH
51413: LD_INT 3
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 5
51422: PUSH
51423: LD_INT 4
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: LD_INT 5
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 4
51442: PUSH
51443: LD_INT 5
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 3
51452: PUSH
51453: LD_INT 4
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 3
51462: PUSH
51463: LD_INT 3
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 5
51472: PUSH
51473: LD_INT 3
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 5
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 4
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 4
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 3
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: LD_INT 4
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 4
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 4
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 3
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 4
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 5
51641: NEG
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 5
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: NEG
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 5
51664: NEG
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 4
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 3
51735: NEG
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 4
51747: NEG
51748: PUSH
51749: LD_INT 3
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: LD_INT 4
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 4
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 4
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 4
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 5
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 1
51817: PUSH
51818: LD_INT 4
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 4
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 5
51866: NEG
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 5
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51942: LD_ADDR_VAR 0 31
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 4
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 4
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 5
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 5
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 4
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 5
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 3
52042: NEG
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 3
52053: NEG
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 3
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 4
52098: NEG
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 4
52121: NEG
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 4
52144: NEG
52145: PUSH
52146: LD_INT 4
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: NEG
52157: PUSH
52158: LD_INT 5
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: LD_INT 4
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 3
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 4
52192: NEG
52193: PUSH
52194: LD_INT 3
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 5
52204: NEG
52205: PUSH
52206: LD_INT 4
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 5
52216: NEG
52217: PUSH
52218: LD_INT 5
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 5
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 5
52240: NEG
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 4
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: LD_INT 4
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: LD_INT 4
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 4
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 4
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 5
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 5
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 3
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 5
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52492: LD_ADDR_VAR 0 32
52496: PUSH
52497: LD_INT 4
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 4
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 3
52522: NEG
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 3
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 4
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 5
52555: NEG
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 5
52566: NEG
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 5
52578: NEG
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: LD_INT 4
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 3
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 4
52661: NEG
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: LD_INT 4
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: LD_INT 4
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 4
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 4
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 5
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 3
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 4
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 5
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 2
52788: PUSH
52789: LD_INT 3
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: LD_INT 5
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 3
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 4
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: PUSH
52905: LD_INT 4
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 4
52914: PUSH
52915: LD_INT 3
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 5
52924: PUSH
52925: LD_INT 4
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 5
52934: PUSH
52935: LD_INT 5
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 4
52944: PUSH
52945: LD_INT 5
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 3
52954: PUSH
52955: LD_INT 4
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 5
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 5
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53039: LD_ADDR_VAR 0 33
53043: PUSH
53044: LD_INT 4
53046: NEG
53047: PUSH
53048: LD_INT 4
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 4
53058: NEG
53059: PUSH
53060: LD_INT 5
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: NEG
53071: PUSH
53072: LD_INT 4
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 3
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 4
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 5
53106: NEG
53107: PUSH
53108: LD_INT 4
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 5
53118: NEG
53119: PUSH
53120: LD_INT 5
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: NEG
53131: PUSH
53132: LD_INT 5
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 5
53142: NEG
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 4
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 3
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 3
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: LD_INT 4
53225: NEG
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: LD_INT 4
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 4
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 5
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 5
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 4
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 5
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 3
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 4
53369: PUSH
53370: LD_INT 3
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 4
53379: PUSH
53380: LD_INT 4
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: LD_INT 4
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 4
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 4
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: PUSH
53470: LD_INT 5
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 5
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 4
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 3
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: LD_INT 5
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53577: LD_ADDR_VAR 0 34
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 4
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 5
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 4
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 4
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 5
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 5
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 4
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 3
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 4
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: LD_INT 4
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 4
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 5
53799: PUSH
53800: LD_INT 4
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 5
53809: PUSH
53810: LD_INT 5
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 4
53819: PUSH
53820: LD_INT 5
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 4
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 5
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: PUSH
53860: LD_INT 5
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 3
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 4
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 4
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 4
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: NEG
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 4
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 3
53985: NEG
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 3
53996: NEG
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 5
54018: NEG
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 5
54029: NEG
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 5
54041: NEG
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
// end ; end ;
54109: GO 54112
54111: POP
// case btype of b_depot , b_warehouse :
54112: LD_VAR 0 1
54116: PUSH
54117: LD_INT 0
54119: DOUBLE
54120: EQUAL
54121: IFTRUE 54131
54123: LD_INT 1
54125: DOUBLE
54126: EQUAL
54127: IFTRUE 54131
54129: GO 54332
54131: POP
// case nation of nation_american :
54132: LD_VAR 0 5
54136: PUSH
54137: LD_INT 1
54139: DOUBLE
54140: EQUAL
54141: IFTRUE 54145
54143: GO 54201
54145: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54146: LD_ADDR_VAR 0 9
54150: PUSH
54151: LD_VAR 0 11
54155: PUSH
54156: LD_VAR 0 12
54160: PUSH
54161: LD_VAR 0 13
54165: PUSH
54166: LD_VAR 0 14
54170: PUSH
54171: LD_VAR 0 15
54175: PUSH
54176: LD_VAR 0 16
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: PUSH
54189: LD_VAR 0 4
54193: PUSH
54194: LD_INT 1
54196: PLUS
54197: ARRAY
54198: ST_TO_ADDR
54199: GO 54330
54201: LD_INT 2
54203: DOUBLE
54204: EQUAL
54205: IFTRUE 54209
54207: GO 54265
54209: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54210: LD_ADDR_VAR 0 9
54214: PUSH
54215: LD_VAR 0 17
54219: PUSH
54220: LD_VAR 0 18
54224: PUSH
54225: LD_VAR 0 19
54229: PUSH
54230: LD_VAR 0 20
54234: PUSH
54235: LD_VAR 0 21
54239: PUSH
54240: LD_VAR 0 22
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: PUSH
54253: LD_VAR 0 4
54257: PUSH
54258: LD_INT 1
54260: PLUS
54261: ARRAY
54262: ST_TO_ADDR
54263: GO 54330
54265: LD_INT 3
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54273
54271: GO 54329
54273: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54274: LD_ADDR_VAR 0 9
54278: PUSH
54279: LD_VAR 0 23
54283: PUSH
54284: LD_VAR 0 24
54288: PUSH
54289: LD_VAR 0 25
54293: PUSH
54294: LD_VAR 0 26
54298: PUSH
54299: LD_VAR 0 27
54303: PUSH
54304: LD_VAR 0 28
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: PUSH
54317: LD_VAR 0 4
54321: PUSH
54322: LD_INT 1
54324: PLUS
54325: ARRAY
54326: ST_TO_ADDR
54327: GO 54330
54329: POP
54330: GO 54885
54332: LD_INT 2
54334: DOUBLE
54335: EQUAL
54336: IFTRUE 54346
54338: LD_INT 3
54340: DOUBLE
54341: EQUAL
54342: IFTRUE 54346
54344: GO 54402
54346: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54347: LD_ADDR_VAR 0 9
54351: PUSH
54352: LD_VAR 0 29
54356: PUSH
54357: LD_VAR 0 30
54361: PUSH
54362: LD_VAR 0 31
54366: PUSH
54367: LD_VAR 0 32
54371: PUSH
54372: LD_VAR 0 33
54376: PUSH
54377: LD_VAR 0 34
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: PUSH
54390: LD_VAR 0 4
54394: PUSH
54395: LD_INT 1
54397: PLUS
54398: ARRAY
54399: ST_TO_ADDR
54400: GO 54885
54402: LD_INT 16
54404: DOUBLE
54405: EQUAL
54406: IFTRUE 54464
54408: LD_INT 17
54410: DOUBLE
54411: EQUAL
54412: IFTRUE 54464
54414: LD_INT 18
54416: DOUBLE
54417: EQUAL
54418: IFTRUE 54464
54420: LD_INT 19
54422: DOUBLE
54423: EQUAL
54424: IFTRUE 54464
54426: LD_INT 22
54428: DOUBLE
54429: EQUAL
54430: IFTRUE 54464
54432: LD_INT 20
54434: DOUBLE
54435: EQUAL
54436: IFTRUE 54464
54438: LD_INT 21
54440: DOUBLE
54441: EQUAL
54442: IFTRUE 54464
54444: LD_INT 23
54446: DOUBLE
54447: EQUAL
54448: IFTRUE 54464
54450: LD_INT 24
54452: DOUBLE
54453: EQUAL
54454: IFTRUE 54464
54456: LD_INT 25
54458: DOUBLE
54459: EQUAL
54460: IFTRUE 54464
54462: GO 54520
54464: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54465: LD_ADDR_VAR 0 9
54469: PUSH
54470: LD_VAR 0 35
54474: PUSH
54475: LD_VAR 0 36
54479: PUSH
54480: LD_VAR 0 37
54484: PUSH
54485: LD_VAR 0 38
54489: PUSH
54490: LD_VAR 0 39
54494: PUSH
54495: LD_VAR 0 40
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: PUSH
54508: LD_VAR 0 4
54512: PUSH
54513: LD_INT 1
54515: PLUS
54516: ARRAY
54517: ST_TO_ADDR
54518: GO 54885
54520: LD_INT 6
54522: DOUBLE
54523: EQUAL
54524: IFTRUE 54576
54526: LD_INT 7
54528: DOUBLE
54529: EQUAL
54530: IFTRUE 54576
54532: LD_INT 8
54534: DOUBLE
54535: EQUAL
54536: IFTRUE 54576
54538: LD_INT 13
54540: DOUBLE
54541: EQUAL
54542: IFTRUE 54576
54544: LD_INT 12
54546: DOUBLE
54547: EQUAL
54548: IFTRUE 54576
54550: LD_INT 15
54552: DOUBLE
54553: EQUAL
54554: IFTRUE 54576
54556: LD_INT 11
54558: DOUBLE
54559: EQUAL
54560: IFTRUE 54576
54562: LD_INT 14
54564: DOUBLE
54565: EQUAL
54566: IFTRUE 54576
54568: LD_INT 10
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54576
54574: GO 54632
54576: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54577: LD_ADDR_VAR 0 9
54581: PUSH
54582: LD_VAR 0 41
54586: PUSH
54587: LD_VAR 0 42
54591: PUSH
54592: LD_VAR 0 43
54596: PUSH
54597: LD_VAR 0 44
54601: PUSH
54602: LD_VAR 0 45
54606: PUSH
54607: LD_VAR 0 46
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: PUSH
54620: LD_VAR 0 4
54624: PUSH
54625: LD_INT 1
54627: PLUS
54628: ARRAY
54629: ST_TO_ADDR
54630: GO 54885
54632: LD_INT 36
54634: DOUBLE
54635: EQUAL
54636: IFTRUE 54640
54638: GO 54696
54640: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54641: LD_ADDR_VAR 0 9
54645: PUSH
54646: LD_VAR 0 47
54650: PUSH
54651: LD_VAR 0 48
54655: PUSH
54656: LD_VAR 0 49
54660: PUSH
54661: LD_VAR 0 50
54665: PUSH
54666: LD_VAR 0 51
54670: PUSH
54671: LD_VAR 0 52
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: PUSH
54684: LD_VAR 0 4
54688: PUSH
54689: LD_INT 1
54691: PLUS
54692: ARRAY
54693: ST_TO_ADDR
54694: GO 54885
54696: LD_INT 4
54698: DOUBLE
54699: EQUAL
54700: IFTRUE 54722
54702: LD_INT 5
54704: DOUBLE
54705: EQUAL
54706: IFTRUE 54722
54708: LD_INT 34
54710: DOUBLE
54711: EQUAL
54712: IFTRUE 54722
54714: LD_INT 37
54716: DOUBLE
54717: EQUAL
54718: IFTRUE 54722
54720: GO 54778
54722: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54723: LD_ADDR_VAR 0 9
54727: PUSH
54728: LD_VAR 0 53
54732: PUSH
54733: LD_VAR 0 54
54737: PUSH
54738: LD_VAR 0 55
54742: PUSH
54743: LD_VAR 0 56
54747: PUSH
54748: LD_VAR 0 57
54752: PUSH
54753: LD_VAR 0 58
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: PUSH
54766: LD_VAR 0 4
54770: PUSH
54771: LD_INT 1
54773: PLUS
54774: ARRAY
54775: ST_TO_ADDR
54776: GO 54885
54778: LD_INT 31
54780: DOUBLE
54781: EQUAL
54782: IFTRUE 54828
54784: LD_INT 32
54786: DOUBLE
54787: EQUAL
54788: IFTRUE 54828
54790: LD_INT 33
54792: DOUBLE
54793: EQUAL
54794: IFTRUE 54828
54796: LD_INT 27
54798: DOUBLE
54799: EQUAL
54800: IFTRUE 54828
54802: LD_INT 26
54804: DOUBLE
54805: EQUAL
54806: IFTRUE 54828
54808: LD_INT 28
54810: DOUBLE
54811: EQUAL
54812: IFTRUE 54828
54814: LD_INT 29
54816: DOUBLE
54817: EQUAL
54818: IFTRUE 54828
54820: LD_INT 30
54822: DOUBLE
54823: EQUAL
54824: IFTRUE 54828
54826: GO 54884
54828: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54829: LD_ADDR_VAR 0 9
54833: PUSH
54834: LD_VAR 0 59
54838: PUSH
54839: LD_VAR 0 60
54843: PUSH
54844: LD_VAR 0 61
54848: PUSH
54849: LD_VAR 0 62
54853: PUSH
54854: LD_VAR 0 63
54858: PUSH
54859: LD_VAR 0 64
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: PUSH
54872: LD_VAR 0 4
54876: PUSH
54877: LD_INT 1
54879: PLUS
54880: ARRAY
54881: ST_TO_ADDR
54882: GO 54885
54884: POP
// temp_list2 = [ ] ;
54885: LD_ADDR_VAR 0 10
54889: PUSH
54890: EMPTY
54891: ST_TO_ADDR
// for i in temp_list do
54892: LD_ADDR_VAR 0 8
54896: PUSH
54897: LD_VAR 0 9
54901: PUSH
54902: FOR_IN
54903: IFFALSE 54955
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54905: LD_ADDR_VAR 0 10
54909: PUSH
54910: LD_VAR 0 10
54914: PUSH
54915: LD_VAR 0 8
54919: PUSH
54920: LD_INT 1
54922: ARRAY
54923: PUSH
54924: LD_VAR 0 2
54928: PLUS
54929: PUSH
54930: LD_VAR 0 8
54934: PUSH
54935: LD_INT 2
54937: ARRAY
54938: PUSH
54939: LD_VAR 0 3
54943: PLUS
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: EMPTY
54950: LIST
54951: ADD
54952: ST_TO_ADDR
54953: GO 54902
54955: POP
54956: POP
// result = temp_list2 ;
54957: LD_ADDR_VAR 0 7
54961: PUSH
54962: LD_VAR 0 10
54966: ST_TO_ADDR
// end ;
54967: LD_VAR 0 7
54971: RET
// export function EnemyInRange ( unit , dist ) ; begin
54972: LD_INT 0
54974: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54975: LD_ADDR_VAR 0 3
54979: PUSH
54980: LD_VAR 0 1
54984: PPUSH
54985: CALL_OW 255
54989: PPUSH
54990: LD_VAR 0 1
54994: PPUSH
54995: CALL_OW 250
54999: PPUSH
55000: LD_VAR 0 1
55004: PPUSH
55005: CALL_OW 251
55009: PPUSH
55010: LD_VAR 0 2
55014: PPUSH
55015: CALL 28345 0 4
55019: PUSH
55020: LD_INT 4
55022: ARRAY
55023: ST_TO_ADDR
// end ;
55024: LD_VAR 0 3
55028: RET
// export function PlayerSeeMe ( unit ) ; begin
55029: LD_INT 0
55031: PPUSH
// result := See ( your_side , unit ) ;
55032: LD_ADDR_VAR 0 2
55036: PUSH
55037: LD_OWVAR 2
55041: PPUSH
55042: LD_VAR 0 1
55046: PPUSH
55047: CALL_OW 292
55051: ST_TO_ADDR
// end ;
55052: LD_VAR 0 2
55056: RET
// export function ReverseDir ( unit ) ; begin
55057: LD_INT 0
55059: PPUSH
// if not unit then
55060: LD_VAR 0 1
55064: NOT
55065: IFFALSE 55069
// exit ;
55067: GO 55092
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55069: LD_ADDR_VAR 0 2
55073: PUSH
55074: LD_VAR 0 1
55078: PPUSH
55079: CALL_OW 254
55083: PUSH
55084: LD_INT 3
55086: PLUS
55087: PUSH
55088: LD_INT 6
55090: MOD
55091: ST_TO_ADDR
// end ;
55092: LD_VAR 0 2
55096: RET
// export function ReverseArray ( array ) ; var i ; begin
55097: LD_INT 0
55099: PPUSH
55100: PPUSH
// if not array then
55101: LD_VAR 0 1
55105: NOT
55106: IFFALSE 55110
// exit ;
55108: GO 55165
// result := [ ] ;
55110: LD_ADDR_VAR 0 2
55114: PUSH
55115: EMPTY
55116: ST_TO_ADDR
// for i := array downto 1 do
55117: LD_ADDR_VAR 0 3
55121: PUSH
55122: DOUBLE
55123: LD_VAR 0 1
55127: INC
55128: ST_TO_ADDR
55129: LD_INT 1
55131: PUSH
55132: FOR_DOWNTO
55133: IFFALSE 55163
// result := Join ( result , array [ i ] ) ;
55135: LD_ADDR_VAR 0 2
55139: PUSH
55140: LD_VAR 0 2
55144: PPUSH
55145: LD_VAR 0 1
55149: PUSH
55150: LD_VAR 0 3
55154: ARRAY
55155: PPUSH
55156: CALL 59821 0 2
55160: ST_TO_ADDR
55161: GO 55132
55163: POP
55164: POP
// end ;
55165: LD_VAR 0 2
55169: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55170: LD_INT 0
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
// if not unit or not hexes then
55178: LD_VAR 0 1
55182: NOT
55183: PUSH
55184: LD_VAR 0 2
55188: NOT
55189: OR
55190: IFFALSE 55194
// exit ;
55192: GO 55317
// dist := 9999 ;
55194: LD_ADDR_VAR 0 5
55198: PUSH
55199: LD_INT 9999
55201: ST_TO_ADDR
// for i = 1 to hexes do
55202: LD_ADDR_VAR 0 4
55206: PUSH
55207: DOUBLE
55208: LD_INT 1
55210: DEC
55211: ST_TO_ADDR
55212: LD_VAR 0 2
55216: PUSH
55217: FOR_TO
55218: IFFALSE 55305
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55220: LD_ADDR_VAR 0 6
55224: PUSH
55225: LD_VAR 0 1
55229: PPUSH
55230: LD_VAR 0 2
55234: PUSH
55235: LD_VAR 0 4
55239: ARRAY
55240: PUSH
55241: LD_INT 1
55243: ARRAY
55244: PPUSH
55245: LD_VAR 0 2
55249: PUSH
55250: LD_VAR 0 4
55254: ARRAY
55255: PUSH
55256: LD_INT 2
55258: ARRAY
55259: PPUSH
55260: CALL_OW 297
55264: ST_TO_ADDR
// if tdist < dist then
55265: LD_VAR 0 6
55269: PUSH
55270: LD_VAR 0 5
55274: LESS
55275: IFFALSE 55303
// begin hex := hexes [ i ] ;
55277: LD_ADDR_VAR 0 8
55281: PUSH
55282: LD_VAR 0 2
55286: PUSH
55287: LD_VAR 0 4
55291: ARRAY
55292: ST_TO_ADDR
// dist := tdist ;
55293: LD_ADDR_VAR 0 5
55297: PUSH
55298: LD_VAR 0 6
55302: ST_TO_ADDR
// end ; end ;
55303: GO 55217
55305: POP
55306: POP
// result := hex ;
55307: LD_ADDR_VAR 0 3
55311: PUSH
55312: LD_VAR 0 8
55316: ST_TO_ADDR
// end ;
55317: LD_VAR 0 3
55321: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55322: LD_INT 0
55324: PPUSH
55325: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55326: LD_VAR 0 1
55330: NOT
55331: PUSH
55332: LD_VAR 0 1
55336: PUSH
55337: LD_INT 21
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 23
55349: PUSH
55350: LD_INT 2
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PPUSH
55361: CALL_OW 69
55365: IN
55366: NOT
55367: OR
55368: IFFALSE 55372
// exit ;
55370: GO 55419
// for i = 1 to 3 do
55372: LD_ADDR_VAR 0 3
55376: PUSH
55377: DOUBLE
55378: LD_INT 1
55380: DEC
55381: ST_TO_ADDR
55382: LD_INT 3
55384: PUSH
55385: FOR_TO
55386: IFFALSE 55417
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55388: LD_VAR 0 1
55392: PPUSH
55393: CALL_OW 250
55397: PPUSH
55398: LD_VAR 0 1
55402: PPUSH
55403: CALL_OW 251
55407: PPUSH
55408: LD_INT 1
55410: PPUSH
55411: CALL_OW 453
55415: GO 55385
55417: POP
55418: POP
// end ;
55419: LD_VAR 0 2
55423: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55424: LD_INT 0
55426: PPUSH
55427: PPUSH
55428: PPUSH
55429: PPUSH
55430: PPUSH
55431: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55432: LD_VAR 0 1
55436: NOT
55437: PUSH
55438: LD_VAR 0 2
55442: NOT
55443: OR
55444: PUSH
55445: LD_VAR 0 1
55449: PPUSH
55450: CALL_OW 314
55454: OR
55455: IFFALSE 55459
// exit ;
55457: GO 55926
// if GetLives ( i ) < 250 then
55459: LD_VAR 0 4
55463: PPUSH
55464: CALL_OW 256
55468: PUSH
55469: LD_INT 250
55471: LESS
55472: IFFALSE 55485
// begin ComAutodestruct ( i ) ;
55474: LD_VAR 0 4
55478: PPUSH
55479: CALL 55322 0 1
// exit ;
55483: GO 55926
// end ; x := GetX ( enemy_unit ) ;
55485: LD_ADDR_VAR 0 7
55489: PUSH
55490: LD_VAR 0 2
55494: PPUSH
55495: CALL_OW 250
55499: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55500: LD_ADDR_VAR 0 8
55504: PUSH
55505: LD_VAR 0 2
55509: PPUSH
55510: CALL_OW 251
55514: ST_TO_ADDR
// if not x or not y then
55515: LD_VAR 0 7
55519: NOT
55520: PUSH
55521: LD_VAR 0 8
55525: NOT
55526: OR
55527: IFFALSE 55531
// exit ;
55529: GO 55926
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55531: LD_ADDR_VAR 0 6
55535: PUSH
55536: LD_VAR 0 7
55540: PPUSH
55541: LD_INT 0
55543: PPUSH
55544: LD_INT 4
55546: PPUSH
55547: CALL_OW 272
55551: PUSH
55552: LD_VAR 0 8
55556: PPUSH
55557: LD_INT 0
55559: PPUSH
55560: LD_INT 4
55562: PPUSH
55563: CALL_OW 273
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_VAR 0 7
55576: PPUSH
55577: LD_INT 1
55579: PPUSH
55580: LD_INT 4
55582: PPUSH
55583: CALL_OW 272
55587: PUSH
55588: LD_VAR 0 8
55592: PPUSH
55593: LD_INT 1
55595: PPUSH
55596: LD_INT 4
55598: PPUSH
55599: CALL_OW 273
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_VAR 0 7
55612: PPUSH
55613: LD_INT 2
55615: PPUSH
55616: LD_INT 4
55618: PPUSH
55619: CALL_OW 272
55623: PUSH
55624: LD_VAR 0 8
55628: PPUSH
55629: LD_INT 2
55631: PPUSH
55632: LD_INT 4
55634: PPUSH
55635: CALL_OW 273
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_VAR 0 7
55648: PPUSH
55649: LD_INT 3
55651: PPUSH
55652: LD_INT 4
55654: PPUSH
55655: CALL_OW 272
55659: PUSH
55660: LD_VAR 0 8
55664: PPUSH
55665: LD_INT 3
55667: PPUSH
55668: LD_INT 4
55670: PPUSH
55671: CALL_OW 273
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_VAR 0 7
55684: PPUSH
55685: LD_INT 4
55687: PPUSH
55688: LD_INT 4
55690: PPUSH
55691: CALL_OW 272
55695: PUSH
55696: LD_VAR 0 8
55700: PPUSH
55701: LD_INT 4
55703: PPUSH
55704: LD_INT 4
55706: PPUSH
55707: CALL_OW 273
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_VAR 0 7
55720: PPUSH
55721: LD_INT 5
55723: PPUSH
55724: LD_INT 4
55726: PPUSH
55727: CALL_OW 272
55731: PUSH
55732: LD_VAR 0 8
55736: PPUSH
55737: LD_INT 5
55739: PPUSH
55740: LD_INT 4
55742: PPUSH
55743: CALL_OW 273
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// for i = tmp downto 1 do
55760: LD_ADDR_VAR 0 4
55764: PUSH
55765: DOUBLE
55766: LD_VAR 0 6
55770: INC
55771: ST_TO_ADDR
55772: LD_INT 1
55774: PUSH
55775: FOR_DOWNTO
55776: IFFALSE 55877
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55778: LD_VAR 0 6
55782: PUSH
55783: LD_VAR 0 4
55787: ARRAY
55788: PUSH
55789: LD_INT 1
55791: ARRAY
55792: PPUSH
55793: LD_VAR 0 6
55797: PUSH
55798: LD_VAR 0 4
55802: ARRAY
55803: PUSH
55804: LD_INT 2
55806: ARRAY
55807: PPUSH
55808: CALL_OW 488
55812: NOT
55813: PUSH
55814: LD_VAR 0 6
55818: PUSH
55819: LD_VAR 0 4
55823: ARRAY
55824: PUSH
55825: LD_INT 1
55827: ARRAY
55828: PPUSH
55829: LD_VAR 0 6
55833: PUSH
55834: LD_VAR 0 4
55838: ARRAY
55839: PUSH
55840: LD_INT 2
55842: ARRAY
55843: PPUSH
55844: CALL_OW 428
55848: PUSH
55849: LD_INT 0
55851: NONEQUAL
55852: OR
55853: IFFALSE 55875
// tmp := Delete ( tmp , i ) ;
55855: LD_ADDR_VAR 0 6
55859: PUSH
55860: LD_VAR 0 6
55864: PPUSH
55865: LD_VAR 0 4
55869: PPUSH
55870: CALL_OW 3
55874: ST_TO_ADDR
55875: GO 55775
55877: POP
55878: POP
// j := GetClosestHex ( unit , tmp ) ;
55879: LD_ADDR_VAR 0 5
55883: PUSH
55884: LD_VAR 0 1
55888: PPUSH
55889: LD_VAR 0 6
55893: PPUSH
55894: CALL 55170 0 2
55898: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55899: LD_VAR 0 1
55903: PPUSH
55904: LD_VAR 0 5
55908: PUSH
55909: LD_INT 1
55911: ARRAY
55912: PPUSH
55913: LD_VAR 0 5
55917: PUSH
55918: LD_INT 2
55920: ARRAY
55921: PPUSH
55922: CALL_OW 111
// end ;
55926: LD_VAR 0 3
55930: RET
// export function PrepareApemanSoldier ( ) ; begin
55931: LD_INT 0
55933: PPUSH
// uc_nation := 0 ;
55934: LD_ADDR_OWVAR 21
55938: PUSH
55939: LD_INT 0
55941: ST_TO_ADDR
// hc_sex := sex_male ;
55942: LD_ADDR_OWVAR 27
55946: PUSH
55947: LD_INT 1
55949: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55950: LD_ADDR_OWVAR 28
55954: PUSH
55955: LD_INT 15
55957: ST_TO_ADDR
// hc_gallery :=  ;
55958: LD_ADDR_OWVAR 33
55962: PUSH
55963: LD_STRING 
55965: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55966: LD_ADDR_OWVAR 31
55970: PUSH
55971: LD_INT 0
55973: PPUSH
55974: LD_INT 3
55976: PPUSH
55977: CALL_OW 12
55981: PUSH
55982: LD_INT 0
55984: PPUSH
55985: LD_INT 3
55987: PPUSH
55988: CALL_OW 12
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: ST_TO_ADDR
// end ;
56005: LD_VAR 0 1
56009: RET
// export function PrepareApemanEngineer ( ) ; begin
56010: LD_INT 0
56012: PPUSH
// uc_nation := 0 ;
56013: LD_ADDR_OWVAR 21
56017: PUSH
56018: LD_INT 0
56020: ST_TO_ADDR
// hc_sex := sex_male ;
56021: LD_ADDR_OWVAR 27
56025: PUSH
56026: LD_INT 1
56028: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56029: LD_ADDR_OWVAR 28
56033: PUSH
56034: LD_INT 16
56036: ST_TO_ADDR
// hc_gallery :=  ;
56037: LD_ADDR_OWVAR 33
56041: PUSH
56042: LD_STRING 
56044: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56045: LD_ADDR_OWVAR 31
56049: PUSH
56050: LD_INT 0
56052: PPUSH
56053: LD_INT 3
56055: PPUSH
56056: CALL_OW 12
56060: PUSH
56061: LD_INT 0
56063: PPUSH
56064: LD_INT 3
56066: PPUSH
56067: CALL_OW 12
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: ST_TO_ADDR
// end ;
56084: LD_VAR 0 1
56088: RET
// export function PrepareApeman ( agressivity ) ; begin
56089: LD_INT 0
56091: PPUSH
// uc_side := 0 ;
56092: LD_ADDR_OWVAR 20
56096: PUSH
56097: LD_INT 0
56099: ST_TO_ADDR
// uc_nation := 0 ;
56100: LD_ADDR_OWVAR 21
56104: PUSH
56105: LD_INT 0
56107: ST_TO_ADDR
// hc_sex := sex_male ;
56108: LD_ADDR_OWVAR 27
56112: PUSH
56113: LD_INT 1
56115: ST_TO_ADDR
// hc_class := class_apeman ;
56116: LD_ADDR_OWVAR 28
56120: PUSH
56121: LD_INT 12
56123: ST_TO_ADDR
// hc_gallery :=  ;
56124: LD_ADDR_OWVAR 33
56128: PUSH
56129: LD_STRING 
56131: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56132: LD_ADDR_OWVAR 35
56136: PUSH
56137: LD_VAR 0 1
56141: NEG
56142: PPUSH
56143: LD_VAR 0 1
56147: PPUSH
56148: CALL_OW 12
56152: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56153: LD_ADDR_OWVAR 31
56157: PUSH
56158: LD_INT 0
56160: PPUSH
56161: LD_INT 3
56163: PPUSH
56164: CALL_OW 12
56168: PUSH
56169: LD_INT 0
56171: PPUSH
56172: LD_INT 3
56174: PPUSH
56175: CALL_OW 12
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// end ;
56192: LD_VAR 0 2
56196: RET
// export function PrepareTiger ( agressivity ) ; begin
56197: LD_INT 0
56199: PPUSH
// uc_side := 0 ;
56200: LD_ADDR_OWVAR 20
56204: PUSH
56205: LD_INT 0
56207: ST_TO_ADDR
// uc_nation := 0 ;
56208: LD_ADDR_OWVAR 21
56212: PUSH
56213: LD_INT 0
56215: ST_TO_ADDR
// hc_class := class_tiger ;
56216: LD_ADDR_OWVAR 28
56220: PUSH
56221: LD_INT 14
56223: ST_TO_ADDR
// hc_gallery :=  ;
56224: LD_ADDR_OWVAR 33
56228: PUSH
56229: LD_STRING 
56231: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56232: LD_ADDR_OWVAR 35
56236: PUSH
56237: LD_VAR 0 1
56241: NEG
56242: PPUSH
56243: LD_VAR 0 1
56247: PPUSH
56248: CALL_OW 12
56252: ST_TO_ADDR
// end ;
56253: LD_VAR 0 2
56257: RET
// export function PrepareEnchidna ( ) ; begin
56258: LD_INT 0
56260: PPUSH
// uc_side := 0 ;
56261: LD_ADDR_OWVAR 20
56265: PUSH
56266: LD_INT 0
56268: ST_TO_ADDR
// uc_nation := 0 ;
56269: LD_ADDR_OWVAR 21
56273: PUSH
56274: LD_INT 0
56276: ST_TO_ADDR
// hc_class := class_baggie ;
56277: LD_ADDR_OWVAR 28
56281: PUSH
56282: LD_INT 13
56284: ST_TO_ADDR
// hc_gallery :=  ;
56285: LD_ADDR_OWVAR 33
56289: PUSH
56290: LD_STRING 
56292: ST_TO_ADDR
// end ;
56293: LD_VAR 0 1
56297: RET
// export function PrepareFrog ( ) ; begin
56298: LD_INT 0
56300: PPUSH
// uc_side := 0 ;
56301: LD_ADDR_OWVAR 20
56305: PUSH
56306: LD_INT 0
56308: ST_TO_ADDR
// uc_nation := 0 ;
56309: LD_ADDR_OWVAR 21
56313: PUSH
56314: LD_INT 0
56316: ST_TO_ADDR
// hc_class := class_frog ;
56317: LD_ADDR_OWVAR 28
56321: PUSH
56322: LD_INT 19
56324: ST_TO_ADDR
// hc_gallery :=  ;
56325: LD_ADDR_OWVAR 33
56329: PUSH
56330: LD_STRING 
56332: ST_TO_ADDR
// end ;
56333: LD_VAR 0 1
56337: RET
// export function PrepareFish ( ) ; begin
56338: LD_INT 0
56340: PPUSH
// uc_side := 0 ;
56341: LD_ADDR_OWVAR 20
56345: PUSH
56346: LD_INT 0
56348: ST_TO_ADDR
// uc_nation := 0 ;
56349: LD_ADDR_OWVAR 21
56353: PUSH
56354: LD_INT 0
56356: ST_TO_ADDR
// hc_class := class_fish ;
56357: LD_ADDR_OWVAR 28
56361: PUSH
56362: LD_INT 20
56364: ST_TO_ADDR
// hc_gallery :=  ;
56365: LD_ADDR_OWVAR 33
56369: PUSH
56370: LD_STRING 
56372: ST_TO_ADDR
// end ;
56373: LD_VAR 0 1
56377: RET
// export function PrepareBird ( ) ; begin
56378: LD_INT 0
56380: PPUSH
// uc_side := 0 ;
56381: LD_ADDR_OWVAR 20
56385: PUSH
56386: LD_INT 0
56388: ST_TO_ADDR
// uc_nation := 0 ;
56389: LD_ADDR_OWVAR 21
56393: PUSH
56394: LD_INT 0
56396: ST_TO_ADDR
// hc_class := class_phororhacos ;
56397: LD_ADDR_OWVAR 28
56401: PUSH
56402: LD_INT 18
56404: ST_TO_ADDR
// hc_gallery :=  ;
56405: LD_ADDR_OWVAR 33
56409: PUSH
56410: LD_STRING 
56412: ST_TO_ADDR
// end ;
56413: LD_VAR 0 1
56417: RET
// export function PrepareHorse ( ) ; begin
56418: LD_INT 0
56420: PPUSH
// uc_side := 0 ;
56421: LD_ADDR_OWVAR 20
56425: PUSH
56426: LD_INT 0
56428: ST_TO_ADDR
// uc_nation := 0 ;
56429: LD_ADDR_OWVAR 21
56433: PUSH
56434: LD_INT 0
56436: ST_TO_ADDR
// hc_class := class_horse ;
56437: LD_ADDR_OWVAR 28
56441: PUSH
56442: LD_INT 21
56444: ST_TO_ADDR
// hc_gallery :=  ;
56445: LD_ADDR_OWVAR 33
56449: PUSH
56450: LD_STRING 
56452: ST_TO_ADDR
// end ;
56453: LD_VAR 0 1
56457: RET
// export function PrepareMastodont ( ) ; begin
56458: LD_INT 0
56460: PPUSH
// uc_side := 0 ;
56461: LD_ADDR_OWVAR 20
56465: PUSH
56466: LD_INT 0
56468: ST_TO_ADDR
// uc_nation := 0 ;
56469: LD_ADDR_OWVAR 21
56473: PUSH
56474: LD_INT 0
56476: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56477: LD_ADDR_OWVAR 37
56481: PUSH
56482: LD_INT 31
56484: ST_TO_ADDR
// vc_control := control_rider ;
56485: LD_ADDR_OWVAR 38
56489: PUSH
56490: LD_INT 4
56492: ST_TO_ADDR
// end ;
56493: LD_VAR 0 1
56497: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56498: LD_INT 0
56500: PPUSH
56501: PPUSH
56502: PPUSH
// uc_side = 0 ;
56503: LD_ADDR_OWVAR 20
56507: PUSH
56508: LD_INT 0
56510: ST_TO_ADDR
// uc_nation = 0 ;
56511: LD_ADDR_OWVAR 21
56515: PUSH
56516: LD_INT 0
56518: ST_TO_ADDR
// InitHc_All ( ) ;
56519: CALL_OW 584
// InitVc ;
56523: CALL_OW 20
// if mastodonts then
56527: LD_VAR 0 6
56531: IFFALSE 56598
// for i = 1 to mastodonts do
56533: LD_ADDR_VAR 0 11
56537: PUSH
56538: DOUBLE
56539: LD_INT 1
56541: DEC
56542: ST_TO_ADDR
56543: LD_VAR 0 6
56547: PUSH
56548: FOR_TO
56549: IFFALSE 56596
// begin vc_chassis := 31 ;
56551: LD_ADDR_OWVAR 37
56555: PUSH
56556: LD_INT 31
56558: ST_TO_ADDR
// vc_control := control_rider ;
56559: LD_ADDR_OWVAR 38
56563: PUSH
56564: LD_INT 4
56566: ST_TO_ADDR
// animal := CreateVehicle ;
56567: LD_ADDR_VAR 0 12
56571: PUSH
56572: CALL_OW 45
56576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56577: LD_VAR 0 12
56581: PPUSH
56582: LD_VAR 0 8
56586: PPUSH
56587: LD_INT 0
56589: PPUSH
56590: CALL 58726 0 3
// end ;
56594: GO 56548
56596: POP
56597: POP
// if horses then
56598: LD_VAR 0 5
56602: IFFALSE 56669
// for i = 1 to horses do
56604: LD_ADDR_VAR 0 11
56608: PUSH
56609: DOUBLE
56610: LD_INT 1
56612: DEC
56613: ST_TO_ADDR
56614: LD_VAR 0 5
56618: PUSH
56619: FOR_TO
56620: IFFALSE 56667
// begin hc_class := 21 ;
56622: LD_ADDR_OWVAR 28
56626: PUSH
56627: LD_INT 21
56629: ST_TO_ADDR
// hc_gallery :=  ;
56630: LD_ADDR_OWVAR 33
56634: PUSH
56635: LD_STRING 
56637: ST_TO_ADDR
// animal := CreateHuman ;
56638: LD_ADDR_VAR 0 12
56642: PUSH
56643: CALL_OW 44
56647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56648: LD_VAR 0 12
56652: PPUSH
56653: LD_VAR 0 8
56657: PPUSH
56658: LD_INT 0
56660: PPUSH
56661: CALL 58726 0 3
// end ;
56665: GO 56619
56667: POP
56668: POP
// if birds then
56669: LD_VAR 0 1
56673: IFFALSE 56740
// for i = 1 to birds do
56675: LD_ADDR_VAR 0 11
56679: PUSH
56680: DOUBLE
56681: LD_INT 1
56683: DEC
56684: ST_TO_ADDR
56685: LD_VAR 0 1
56689: PUSH
56690: FOR_TO
56691: IFFALSE 56738
// begin hc_class := 18 ;
56693: LD_ADDR_OWVAR 28
56697: PUSH
56698: LD_INT 18
56700: ST_TO_ADDR
// hc_gallery =  ;
56701: LD_ADDR_OWVAR 33
56705: PUSH
56706: LD_STRING 
56708: ST_TO_ADDR
// animal := CreateHuman ;
56709: LD_ADDR_VAR 0 12
56713: PUSH
56714: CALL_OW 44
56718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56719: LD_VAR 0 12
56723: PPUSH
56724: LD_VAR 0 8
56728: PPUSH
56729: LD_INT 0
56731: PPUSH
56732: CALL 58726 0 3
// end ;
56736: GO 56690
56738: POP
56739: POP
// if tigers then
56740: LD_VAR 0 2
56744: IFFALSE 56828
// for i = 1 to tigers do
56746: LD_ADDR_VAR 0 11
56750: PUSH
56751: DOUBLE
56752: LD_INT 1
56754: DEC
56755: ST_TO_ADDR
56756: LD_VAR 0 2
56760: PUSH
56761: FOR_TO
56762: IFFALSE 56826
// begin hc_class = class_tiger ;
56764: LD_ADDR_OWVAR 28
56768: PUSH
56769: LD_INT 14
56771: ST_TO_ADDR
// hc_gallery =  ;
56772: LD_ADDR_OWVAR 33
56776: PUSH
56777: LD_STRING 
56779: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56780: LD_ADDR_OWVAR 35
56784: PUSH
56785: LD_INT 7
56787: NEG
56788: PPUSH
56789: LD_INT 7
56791: PPUSH
56792: CALL_OW 12
56796: ST_TO_ADDR
// animal := CreateHuman ;
56797: LD_ADDR_VAR 0 12
56801: PUSH
56802: CALL_OW 44
56806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56807: LD_VAR 0 12
56811: PPUSH
56812: LD_VAR 0 8
56816: PPUSH
56817: LD_INT 0
56819: PPUSH
56820: CALL 58726 0 3
// end ;
56824: GO 56761
56826: POP
56827: POP
// if apemans then
56828: LD_VAR 0 3
56832: IFFALSE 56955
// for i = 1 to apemans do
56834: LD_ADDR_VAR 0 11
56838: PUSH
56839: DOUBLE
56840: LD_INT 1
56842: DEC
56843: ST_TO_ADDR
56844: LD_VAR 0 3
56848: PUSH
56849: FOR_TO
56850: IFFALSE 56953
// begin hc_class = class_apeman ;
56852: LD_ADDR_OWVAR 28
56856: PUSH
56857: LD_INT 12
56859: ST_TO_ADDR
// hc_gallery =  ;
56860: LD_ADDR_OWVAR 33
56864: PUSH
56865: LD_STRING 
56867: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56868: LD_ADDR_OWVAR 35
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PPUSH
56877: LD_INT 2
56879: PPUSH
56880: CALL_OW 12
56884: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56885: LD_ADDR_OWVAR 31
56889: PUSH
56890: LD_INT 1
56892: PPUSH
56893: LD_INT 3
56895: PPUSH
56896: CALL_OW 12
56900: PUSH
56901: LD_INT 1
56903: PPUSH
56904: LD_INT 3
56906: PPUSH
56907: CALL_OW 12
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// animal := CreateHuman ;
56924: LD_ADDR_VAR 0 12
56928: PUSH
56929: CALL_OW 44
56933: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56934: LD_VAR 0 12
56938: PPUSH
56939: LD_VAR 0 8
56943: PPUSH
56944: LD_INT 0
56946: PPUSH
56947: CALL 58726 0 3
// end ;
56951: GO 56849
56953: POP
56954: POP
// if enchidnas then
56955: LD_VAR 0 4
56959: IFFALSE 57026
// for i = 1 to enchidnas do
56961: LD_ADDR_VAR 0 11
56965: PUSH
56966: DOUBLE
56967: LD_INT 1
56969: DEC
56970: ST_TO_ADDR
56971: LD_VAR 0 4
56975: PUSH
56976: FOR_TO
56977: IFFALSE 57024
// begin hc_class = 13 ;
56979: LD_ADDR_OWVAR 28
56983: PUSH
56984: LD_INT 13
56986: ST_TO_ADDR
// hc_gallery =  ;
56987: LD_ADDR_OWVAR 33
56991: PUSH
56992: LD_STRING 
56994: ST_TO_ADDR
// animal := CreateHuman ;
56995: LD_ADDR_VAR 0 12
56999: PUSH
57000: CALL_OW 44
57004: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57005: LD_VAR 0 12
57009: PPUSH
57010: LD_VAR 0 8
57014: PPUSH
57015: LD_INT 0
57017: PPUSH
57018: CALL 58726 0 3
// end ;
57022: GO 56976
57024: POP
57025: POP
// if fishes then
57026: LD_VAR 0 7
57030: IFFALSE 57097
// for i = 1 to fishes do
57032: LD_ADDR_VAR 0 11
57036: PUSH
57037: DOUBLE
57038: LD_INT 1
57040: DEC
57041: ST_TO_ADDR
57042: LD_VAR 0 7
57046: PUSH
57047: FOR_TO
57048: IFFALSE 57095
// begin hc_class = 20 ;
57050: LD_ADDR_OWVAR 28
57054: PUSH
57055: LD_INT 20
57057: ST_TO_ADDR
// hc_gallery =  ;
57058: LD_ADDR_OWVAR 33
57062: PUSH
57063: LD_STRING 
57065: ST_TO_ADDR
// animal := CreateHuman ;
57066: LD_ADDR_VAR 0 12
57070: PUSH
57071: CALL_OW 44
57075: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57076: LD_VAR 0 12
57080: PPUSH
57081: LD_VAR 0 9
57085: PPUSH
57086: LD_INT 0
57088: PPUSH
57089: CALL 58726 0 3
// end ;
57093: GO 57047
57095: POP
57096: POP
// end ;
57097: LD_VAR 0 10
57101: RET
// export function WantHeal ( sci , unit ) ; begin
57102: LD_INT 0
57104: PPUSH
// if GetTaskList ( sci ) > 0 then
57105: LD_VAR 0 1
57109: PPUSH
57110: CALL_OW 437
57114: PUSH
57115: LD_INT 0
57117: GREATER
57118: IFFALSE 57188
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57120: LD_VAR 0 1
57124: PPUSH
57125: CALL_OW 437
57129: PUSH
57130: LD_INT 1
57132: ARRAY
57133: PUSH
57134: LD_INT 1
57136: ARRAY
57137: PUSH
57138: LD_STRING l
57140: EQUAL
57141: PUSH
57142: LD_VAR 0 1
57146: PPUSH
57147: CALL_OW 437
57151: PUSH
57152: LD_INT 1
57154: ARRAY
57155: PUSH
57156: LD_INT 4
57158: ARRAY
57159: PUSH
57160: LD_VAR 0 2
57164: EQUAL
57165: AND
57166: IFFALSE 57178
// result := true else
57168: LD_ADDR_VAR 0 3
57172: PUSH
57173: LD_INT 1
57175: ST_TO_ADDR
57176: GO 57186
// result := false ;
57178: LD_ADDR_VAR 0 3
57182: PUSH
57183: LD_INT 0
57185: ST_TO_ADDR
// end else
57186: GO 57196
// result := false ;
57188: LD_ADDR_VAR 0 3
57192: PUSH
57193: LD_INT 0
57195: ST_TO_ADDR
// end ;
57196: LD_VAR 0 3
57200: RET
// export function HealTarget ( sci ) ; begin
57201: LD_INT 0
57203: PPUSH
// if not sci then
57204: LD_VAR 0 1
57208: NOT
57209: IFFALSE 57213
// exit ;
57211: GO 57278
// result := 0 ;
57213: LD_ADDR_VAR 0 2
57217: PUSH
57218: LD_INT 0
57220: ST_TO_ADDR
// if GetTaskList ( sci ) then
57221: LD_VAR 0 1
57225: PPUSH
57226: CALL_OW 437
57230: IFFALSE 57278
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57232: LD_VAR 0 1
57236: PPUSH
57237: CALL_OW 437
57241: PUSH
57242: LD_INT 1
57244: ARRAY
57245: PUSH
57246: LD_INT 1
57248: ARRAY
57249: PUSH
57250: LD_STRING l
57252: EQUAL
57253: IFFALSE 57278
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57255: LD_ADDR_VAR 0 2
57259: PUSH
57260: LD_VAR 0 1
57264: PPUSH
57265: CALL_OW 437
57269: PUSH
57270: LD_INT 1
57272: ARRAY
57273: PUSH
57274: LD_INT 4
57276: ARRAY
57277: ST_TO_ADDR
// end ;
57278: LD_VAR 0 2
57282: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57283: LD_INT 0
57285: PPUSH
57286: PPUSH
57287: PPUSH
57288: PPUSH
// if not base_units then
57289: LD_VAR 0 1
57293: NOT
57294: IFFALSE 57298
// exit ;
57296: GO 57385
// result := false ;
57298: LD_ADDR_VAR 0 2
57302: PUSH
57303: LD_INT 0
57305: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57306: LD_ADDR_VAR 0 5
57310: PUSH
57311: LD_VAR 0 1
57315: PPUSH
57316: LD_INT 21
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PPUSH
57326: CALL_OW 72
57330: ST_TO_ADDR
// if not tmp then
57331: LD_VAR 0 5
57335: NOT
57336: IFFALSE 57340
// exit ;
57338: GO 57385
// for i in tmp do
57340: LD_ADDR_VAR 0 3
57344: PUSH
57345: LD_VAR 0 5
57349: PUSH
57350: FOR_IN
57351: IFFALSE 57383
// begin result := EnemyInRange ( i , 22 ) ;
57353: LD_ADDR_VAR 0 2
57357: PUSH
57358: LD_VAR 0 3
57362: PPUSH
57363: LD_INT 22
57365: PPUSH
57366: CALL 54972 0 2
57370: ST_TO_ADDR
// if result then
57371: LD_VAR 0 2
57375: IFFALSE 57381
// exit ;
57377: POP
57378: POP
57379: GO 57385
// end ;
57381: GO 57350
57383: POP
57384: POP
// end ;
57385: LD_VAR 0 2
57389: RET
// export function FilterByTag ( units , tag ) ; begin
57390: LD_INT 0
57392: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57393: LD_ADDR_VAR 0 3
57397: PUSH
57398: LD_VAR 0 1
57402: PPUSH
57403: LD_INT 120
57405: PUSH
57406: LD_VAR 0 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PPUSH
57415: CALL_OW 72
57419: ST_TO_ADDR
// end ;
57420: LD_VAR 0 3
57424: RET
// export function IsDriver ( un ) ; begin
57425: LD_INT 0
57427: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57428: LD_ADDR_VAR 0 2
57432: PUSH
57433: LD_VAR 0 1
57437: PUSH
57438: LD_INT 55
57440: PUSH
57441: EMPTY
57442: LIST
57443: PPUSH
57444: CALL_OW 69
57448: IN
57449: ST_TO_ADDR
// end ;
57450: LD_VAR 0 2
57454: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57455: LD_INT 0
57457: PPUSH
57458: PPUSH
// list := [ ] ;
57459: LD_ADDR_VAR 0 5
57463: PUSH
57464: EMPTY
57465: ST_TO_ADDR
// case d of 0 :
57466: LD_VAR 0 3
57470: PUSH
57471: LD_INT 0
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57479
57477: GO 57612
57479: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57480: LD_ADDR_VAR 0 5
57484: PUSH
57485: LD_VAR 0 1
57489: PUSH
57490: LD_INT 4
57492: MINUS
57493: PUSH
57494: LD_VAR 0 2
57498: PUSH
57499: LD_INT 4
57501: MINUS
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: PUSH
57511: LD_VAR 0 1
57515: PUSH
57516: LD_INT 3
57518: MINUS
57519: PUSH
57520: LD_VAR 0 2
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: PUSH
57533: LD_VAR 0 1
57537: PUSH
57538: LD_INT 4
57540: PLUS
57541: PUSH
57542: LD_VAR 0 2
57546: PUSH
57547: LD_INT 4
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: PUSH
57555: LD_VAR 0 1
57559: PUSH
57560: LD_INT 3
57562: PLUS
57563: PUSH
57564: LD_VAR 0 2
57568: PUSH
57569: LD_INT 3
57571: PLUS
57572: PUSH
57573: LD_INT 5
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: PUSH
57581: LD_VAR 0 1
57585: PUSH
57586: LD_VAR 0 2
57590: PUSH
57591: LD_INT 4
57593: PLUS
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: ST_TO_ADDR
// end ; 1 :
57610: GO 58310
57612: LD_INT 1
57614: DOUBLE
57615: EQUAL
57616: IFTRUE 57620
57618: GO 57753
57620: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57621: LD_ADDR_VAR 0 5
57625: PUSH
57626: LD_VAR 0 1
57630: PUSH
57631: LD_VAR 0 2
57635: PUSH
57636: LD_INT 4
57638: MINUS
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: PUSH
57648: LD_VAR 0 1
57652: PUSH
57653: LD_INT 3
57655: MINUS
57656: PUSH
57657: LD_VAR 0 2
57661: PUSH
57662: LD_INT 3
57664: MINUS
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: LIST
57673: PUSH
57674: LD_VAR 0 1
57678: PUSH
57679: LD_INT 4
57681: MINUS
57682: PUSH
57683: LD_VAR 0 2
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: PUSH
57696: LD_VAR 0 1
57700: PUSH
57701: LD_VAR 0 2
57705: PUSH
57706: LD_INT 3
57708: PLUS
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: PUSH
57718: LD_VAR 0 1
57722: PUSH
57723: LD_INT 4
57725: PLUS
57726: PUSH
57727: LD_VAR 0 2
57731: PUSH
57732: LD_INT 4
57734: PLUS
57735: PUSH
57736: LD_INT 5
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: ST_TO_ADDR
// end ; 2 :
57751: GO 58310
57753: LD_INT 2
57755: DOUBLE
57756: EQUAL
57757: IFTRUE 57761
57759: GO 57890
57761: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57762: LD_ADDR_VAR 0 5
57766: PUSH
57767: LD_VAR 0 1
57771: PUSH
57772: LD_VAR 0 2
57776: PUSH
57777: LD_INT 3
57779: MINUS
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: PUSH
57789: LD_VAR 0 1
57793: PUSH
57794: LD_INT 4
57796: PLUS
57797: PUSH
57798: LD_VAR 0 2
57802: PUSH
57803: LD_INT 4
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: PUSH
57811: LD_VAR 0 1
57815: PUSH
57816: LD_VAR 0 2
57820: PUSH
57821: LD_INT 4
57823: PLUS
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: LIST
57832: PUSH
57833: LD_VAR 0 1
57837: PUSH
57838: LD_INT 3
57840: MINUS
57841: PUSH
57842: LD_VAR 0 2
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: PUSH
57855: LD_VAR 0 1
57859: PUSH
57860: LD_INT 4
57862: MINUS
57863: PUSH
57864: LD_VAR 0 2
57868: PUSH
57869: LD_INT 4
57871: MINUS
57872: PUSH
57873: LD_INT 2
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: ST_TO_ADDR
// end ; 3 :
57888: GO 58310
57890: LD_INT 3
57892: DOUBLE
57893: EQUAL
57894: IFTRUE 57898
57896: GO 58031
57898: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57899: LD_ADDR_VAR 0 5
57903: PUSH
57904: LD_VAR 0 1
57908: PUSH
57909: LD_INT 3
57911: PLUS
57912: PUSH
57913: LD_VAR 0 2
57917: PUSH
57918: LD_INT 4
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: PUSH
57926: LD_VAR 0 1
57930: PUSH
57931: LD_INT 4
57933: PLUS
57934: PUSH
57935: LD_VAR 0 2
57939: PUSH
57940: LD_INT 4
57942: PLUS
57943: PUSH
57944: LD_INT 5
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: PUSH
57952: LD_VAR 0 1
57956: PUSH
57957: LD_INT 4
57959: MINUS
57960: PUSH
57961: LD_VAR 0 2
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: PUSH
57974: LD_VAR 0 1
57978: PUSH
57979: LD_VAR 0 2
57983: PUSH
57984: LD_INT 4
57986: MINUS
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: LIST
57995: PUSH
57996: LD_VAR 0 1
58000: PUSH
58001: LD_INT 3
58003: MINUS
58004: PUSH
58005: LD_VAR 0 2
58009: PUSH
58010: LD_INT 3
58012: MINUS
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// end ; 4 :
58029: GO 58310
58031: LD_INT 4
58033: DOUBLE
58034: EQUAL
58035: IFTRUE 58039
58037: GO 58172
58039: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58040: LD_ADDR_VAR 0 5
58044: PUSH
58045: LD_VAR 0 1
58049: PUSH
58050: LD_VAR 0 2
58054: PUSH
58055: LD_INT 4
58057: PLUS
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: PUSH
58067: LD_VAR 0 1
58071: PUSH
58072: LD_INT 3
58074: PLUS
58075: PUSH
58076: LD_VAR 0 2
58080: PUSH
58081: LD_INT 3
58083: PLUS
58084: PUSH
58085: LD_INT 5
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: LIST
58092: PUSH
58093: LD_VAR 0 1
58097: PUSH
58098: LD_INT 4
58100: PLUS
58101: PUSH
58102: LD_VAR 0 2
58106: PUSH
58107: LD_INT 4
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: LIST
58114: PUSH
58115: LD_VAR 0 1
58119: PUSH
58120: LD_VAR 0 2
58124: PUSH
58125: LD_INT 3
58127: MINUS
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: PUSH
58137: LD_VAR 0 1
58141: PUSH
58142: LD_INT 4
58144: MINUS
58145: PUSH
58146: LD_VAR 0 2
58150: PUSH
58151: LD_INT 4
58153: MINUS
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: ST_TO_ADDR
// end ; 5 :
58170: GO 58310
58172: LD_INT 5
58174: DOUBLE
58175: EQUAL
58176: IFTRUE 58180
58178: GO 58309
58180: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58181: LD_ADDR_VAR 0 5
58185: PUSH
58186: LD_VAR 0 1
58190: PUSH
58191: LD_INT 4
58193: MINUS
58194: PUSH
58195: LD_VAR 0 2
58199: PUSH
58200: LD_INT 1
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: PUSH
58208: LD_VAR 0 1
58212: PUSH
58213: LD_VAR 0 2
58217: PUSH
58218: LD_INT 4
58220: MINUS
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: PUSH
58230: LD_VAR 0 1
58234: PUSH
58235: LD_INT 4
58237: PLUS
58238: PUSH
58239: LD_VAR 0 2
58243: PUSH
58244: LD_INT 4
58246: PLUS
58247: PUSH
58248: LD_INT 5
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: PUSH
58256: LD_VAR 0 1
58260: PUSH
58261: LD_INT 3
58263: PLUS
58264: PUSH
58265: LD_VAR 0 2
58269: PUSH
58270: LD_INT 4
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: PUSH
58278: LD_VAR 0 1
58282: PUSH
58283: LD_VAR 0 2
58287: PUSH
58288: LD_INT 3
58290: PLUS
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: ST_TO_ADDR
// end ; end ;
58307: GO 58310
58309: POP
// result := list ;
58310: LD_ADDR_VAR 0 4
58314: PUSH
58315: LD_VAR 0 5
58319: ST_TO_ADDR
// end ;
58320: LD_VAR 0 4
58324: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58330: LD_VAR 0 1
58334: NOT
58335: PUSH
58336: LD_VAR 0 2
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 3
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: IN
58359: NOT
58360: OR
58361: IFFALSE 58365
// exit ;
58363: GO 58448
// tmp := [ ] ;
58365: LD_ADDR_VAR 0 5
58369: PUSH
58370: EMPTY
58371: ST_TO_ADDR
// for i in units do
58372: LD_ADDR_VAR 0 4
58376: PUSH
58377: LD_VAR 0 1
58381: PUSH
58382: FOR_IN
58383: IFFALSE 58417
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58385: LD_ADDR_VAR 0 5
58389: PUSH
58390: LD_VAR 0 5
58394: PPUSH
58395: LD_VAR 0 4
58399: PPUSH
58400: LD_VAR 0 2
58404: PPUSH
58405: CALL_OW 259
58409: PPUSH
58410: CALL 59821 0 2
58414: ST_TO_ADDR
58415: GO 58382
58417: POP
58418: POP
// if not tmp then
58419: LD_VAR 0 5
58423: NOT
58424: IFFALSE 58428
// exit ;
58426: GO 58448
// result := SortListByListDesc ( units , tmp ) ;
58428: LD_ADDR_VAR 0 3
58432: PUSH
58433: LD_VAR 0 1
58437: PPUSH
58438: LD_VAR 0 5
58442: PPUSH
58443: CALL_OW 77
58447: ST_TO_ADDR
// end ;
58448: LD_VAR 0 3
58452: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58453: LD_INT 0
58455: PPUSH
58456: PPUSH
58457: PPUSH
// result := false ;
58458: LD_ADDR_VAR 0 3
58462: PUSH
58463: LD_INT 0
58465: ST_TO_ADDR
// if not building then
58466: LD_VAR 0 2
58470: NOT
58471: IFFALSE 58475
// exit ;
58473: GO 58613
// x := GetX ( building ) ;
58475: LD_ADDR_VAR 0 4
58479: PUSH
58480: LD_VAR 0 2
58484: PPUSH
58485: CALL_OW 250
58489: ST_TO_ADDR
// y := GetY ( building ) ;
58490: LD_ADDR_VAR 0 5
58494: PUSH
58495: LD_VAR 0 2
58499: PPUSH
58500: CALL_OW 251
58504: ST_TO_ADDR
// if not x or not y then
58505: LD_VAR 0 4
58509: NOT
58510: PUSH
58511: LD_VAR 0 5
58515: NOT
58516: OR
58517: IFFALSE 58521
// exit ;
58519: GO 58613
// if GetTaskList ( unit ) then
58521: LD_VAR 0 1
58525: PPUSH
58526: CALL_OW 437
58530: IFFALSE 58613
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58532: LD_STRING e
58534: PUSH
58535: LD_VAR 0 1
58539: PPUSH
58540: CALL_OW 437
58544: PUSH
58545: LD_INT 1
58547: ARRAY
58548: PUSH
58549: LD_INT 1
58551: ARRAY
58552: EQUAL
58553: PUSH
58554: LD_VAR 0 4
58558: PUSH
58559: LD_VAR 0 1
58563: PPUSH
58564: CALL_OW 437
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PUSH
58573: LD_INT 2
58575: ARRAY
58576: EQUAL
58577: AND
58578: PUSH
58579: LD_VAR 0 5
58583: PUSH
58584: LD_VAR 0 1
58588: PPUSH
58589: CALL_OW 437
58593: PUSH
58594: LD_INT 1
58596: ARRAY
58597: PUSH
58598: LD_INT 3
58600: ARRAY
58601: EQUAL
58602: AND
58603: IFFALSE 58613
// result := true end ;
58605: LD_ADDR_VAR 0 3
58609: PUSH
58610: LD_INT 1
58612: ST_TO_ADDR
// end ;
58613: LD_VAR 0 3
58617: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58618: LD_INT 0
58620: PPUSH
// result := false ;
58621: LD_ADDR_VAR 0 4
58625: PUSH
58626: LD_INT 0
58628: ST_TO_ADDR
// if GetTaskList ( unit ) then
58629: LD_VAR 0 1
58633: PPUSH
58634: CALL_OW 437
58638: IFFALSE 58721
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58640: LD_STRING M
58642: PUSH
58643: LD_VAR 0 1
58647: PPUSH
58648: CALL_OW 437
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: PUSH
58657: LD_INT 1
58659: ARRAY
58660: EQUAL
58661: PUSH
58662: LD_VAR 0 2
58666: PUSH
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 437
58676: PUSH
58677: LD_INT 1
58679: ARRAY
58680: PUSH
58681: LD_INT 2
58683: ARRAY
58684: EQUAL
58685: AND
58686: PUSH
58687: LD_VAR 0 3
58691: PUSH
58692: LD_VAR 0 1
58696: PPUSH
58697: CALL_OW 437
58701: PUSH
58702: LD_INT 1
58704: ARRAY
58705: PUSH
58706: LD_INT 3
58708: ARRAY
58709: EQUAL
58710: AND
58711: IFFALSE 58721
// result := true ;
58713: LD_ADDR_VAR 0 4
58717: PUSH
58718: LD_INT 1
58720: ST_TO_ADDR
// end ; end ;
58721: LD_VAR 0 4
58725: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58726: LD_INT 0
58728: PPUSH
58729: PPUSH
58730: PPUSH
58731: PPUSH
// if not unit or not area then
58732: LD_VAR 0 1
58736: NOT
58737: PUSH
58738: LD_VAR 0 2
58742: NOT
58743: OR
58744: IFFALSE 58748
// exit ;
58746: GO 58924
// tmp := AreaToList ( area , i ) ;
58748: LD_ADDR_VAR 0 6
58752: PUSH
58753: LD_VAR 0 2
58757: PPUSH
58758: LD_VAR 0 5
58762: PPUSH
58763: CALL_OW 517
58767: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58768: LD_ADDR_VAR 0 5
58772: PUSH
58773: DOUBLE
58774: LD_INT 1
58776: DEC
58777: ST_TO_ADDR
58778: LD_VAR 0 6
58782: PUSH
58783: LD_INT 1
58785: ARRAY
58786: PUSH
58787: FOR_TO
58788: IFFALSE 58922
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58790: LD_ADDR_VAR 0 7
58794: PUSH
58795: LD_VAR 0 6
58799: PUSH
58800: LD_INT 1
58802: ARRAY
58803: PUSH
58804: LD_VAR 0 5
58808: ARRAY
58809: PUSH
58810: LD_VAR 0 6
58814: PUSH
58815: LD_INT 2
58817: ARRAY
58818: PUSH
58819: LD_VAR 0 5
58823: ARRAY
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58829: LD_INT 92
58831: PUSH
58832: LD_VAR 0 7
58836: PUSH
58837: LD_INT 1
58839: ARRAY
58840: PUSH
58841: LD_VAR 0 7
58845: PUSH
58846: LD_INT 2
58848: ARRAY
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: PPUSH
58859: CALL_OW 69
58863: PUSH
58864: LD_INT 0
58866: EQUAL
58867: IFFALSE 58920
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58869: LD_VAR 0 1
58873: PPUSH
58874: LD_VAR 0 7
58878: PUSH
58879: LD_INT 1
58881: ARRAY
58882: PPUSH
58883: LD_VAR 0 7
58887: PUSH
58888: LD_INT 2
58890: ARRAY
58891: PPUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: CALL_OW 48
// result := IsPlaced ( unit ) ;
58901: LD_ADDR_VAR 0 4
58905: PUSH
58906: LD_VAR 0 1
58910: PPUSH
58911: CALL_OW 305
58915: ST_TO_ADDR
// exit ;
58916: POP
58917: POP
58918: GO 58924
// end ; end ;
58920: GO 58787
58922: POP
58923: POP
// end ;
58924: LD_VAR 0 4
58928: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58929: LD_INT 0
58931: PPUSH
58932: PPUSH
58933: PPUSH
// if not side or side > 8 then
58934: LD_VAR 0 1
58938: NOT
58939: PUSH
58940: LD_VAR 0 1
58944: PUSH
58945: LD_INT 8
58947: GREATER
58948: OR
58949: IFFALSE 58953
// exit ;
58951: GO 59140
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58953: LD_ADDR_VAR 0 4
58957: PUSH
58958: LD_INT 22
58960: PUSH
58961: LD_VAR 0 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 21
58972: PUSH
58973: LD_INT 3
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PPUSH
58984: CALL_OW 69
58988: ST_TO_ADDR
// if not tmp then
58989: LD_VAR 0 4
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59140
// enable_addtolog := true ;
58998: LD_ADDR_OWVAR 81
59002: PUSH
59003: LD_INT 1
59005: ST_TO_ADDR
// AddToLog ( [ ) ;
59006: LD_STRING [
59008: PPUSH
59009: CALL_OW 561
// for i in tmp do
59013: LD_ADDR_VAR 0 3
59017: PUSH
59018: LD_VAR 0 4
59022: PUSH
59023: FOR_IN
59024: IFFALSE 59131
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59026: LD_STRING [
59028: PUSH
59029: LD_VAR 0 3
59033: PPUSH
59034: CALL_OW 266
59038: STR
59039: PUSH
59040: LD_STRING , 
59042: STR
59043: PUSH
59044: LD_VAR 0 3
59048: PPUSH
59049: CALL_OW 250
59053: STR
59054: PUSH
59055: LD_STRING , 
59057: STR
59058: PUSH
59059: LD_VAR 0 3
59063: PPUSH
59064: CALL_OW 251
59068: STR
59069: PUSH
59070: LD_STRING , 
59072: STR
59073: PUSH
59074: LD_VAR 0 3
59078: PPUSH
59079: CALL_OW 254
59083: STR
59084: PUSH
59085: LD_STRING , 
59087: STR
59088: PUSH
59089: LD_VAR 0 3
59093: PPUSH
59094: LD_INT 1
59096: PPUSH
59097: CALL_OW 268
59101: STR
59102: PUSH
59103: LD_STRING , 
59105: STR
59106: PUSH
59107: LD_VAR 0 3
59111: PPUSH
59112: LD_INT 2
59114: PPUSH
59115: CALL_OW 268
59119: STR
59120: PUSH
59121: LD_STRING ],
59123: STR
59124: PPUSH
59125: CALL_OW 561
// end ;
59129: GO 59023
59131: POP
59132: POP
// AddToLog ( ]; ) ;
59133: LD_STRING ];
59135: PPUSH
59136: CALL_OW 561
// end ;
59140: LD_VAR 0 2
59144: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59145: LD_INT 0
59147: PPUSH
59148: PPUSH
59149: PPUSH
59150: PPUSH
59151: PPUSH
// if not area or not rate or not max then
59152: LD_VAR 0 1
59156: NOT
59157: PUSH
59158: LD_VAR 0 2
59162: NOT
59163: OR
59164: PUSH
59165: LD_VAR 0 4
59169: NOT
59170: OR
59171: IFFALSE 59175
// exit ;
59173: GO 59364
// while 1 do
59175: LD_INT 1
59177: IFFALSE 59364
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59179: LD_ADDR_VAR 0 9
59183: PUSH
59184: LD_VAR 0 1
59188: PPUSH
59189: LD_INT 1
59191: PPUSH
59192: CALL_OW 287
59196: PUSH
59197: LD_INT 10
59199: MUL
59200: ST_TO_ADDR
// r := rate / 10 ;
59201: LD_ADDR_VAR 0 7
59205: PUSH
59206: LD_VAR 0 2
59210: PUSH
59211: LD_INT 10
59213: DIVREAL
59214: ST_TO_ADDR
// time := 1 1$00 ;
59215: LD_ADDR_VAR 0 8
59219: PUSH
59220: LD_INT 2100
59222: ST_TO_ADDR
// if amount < min then
59223: LD_VAR 0 9
59227: PUSH
59228: LD_VAR 0 3
59232: LESS
59233: IFFALSE 59251
// r := r * 2 else
59235: LD_ADDR_VAR 0 7
59239: PUSH
59240: LD_VAR 0 7
59244: PUSH
59245: LD_INT 2
59247: MUL
59248: ST_TO_ADDR
59249: GO 59277
// if amount > max then
59251: LD_VAR 0 9
59255: PUSH
59256: LD_VAR 0 4
59260: GREATER
59261: IFFALSE 59277
// r := r / 2 ;
59263: LD_ADDR_VAR 0 7
59267: PUSH
59268: LD_VAR 0 7
59272: PUSH
59273: LD_INT 2
59275: DIVREAL
59276: ST_TO_ADDR
// time := time / r ;
59277: LD_ADDR_VAR 0 8
59281: PUSH
59282: LD_VAR 0 8
59286: PUSH
59287: LD_VAR 0 7
59291: DIVREAL
59292: ST_TO_ADDR
// if time < 0 then
59293: LD_VAR 0 8
59297: PUSH
59298: LD_INT 0
59300: LESS
59301: IFFALSE 59318
// time := time * - 1 ;
59303: LD_ADDR_VAR 0 8
59307: PUSH
59308: LD_VAR 0 8
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: MUL
59317: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59318: LD_VAR 0 8
59322: PUSH
59323: LD_INT 35
59325: PPUSH
59326: LD_INT 875
59328: PPUSH
59329: CALL_OW 12
59333: PLUS
59334: PPUSH
59335: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59339: LD_INT 1
59341: PPUSH
59342: LD_INT 5
59344: PPUSH
59345: CALL_OW 12
59349: PPUSH
59350: LD_VAR 0 1
59354: PPUSH
59355: LD_INT 1
59357: PPUSH
59358: CALL_OW 55
// end ;
59362: GO 59175
// end ;
59364: LD_VAR 0 5
59368: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59369: LD_INT 0
59371: PPUSH
59372: PPUSH
59373: PPUSH
59374: PPUSH
59375: PPUSH
59376: PPUSH
59377: PPUSH
59378: PPUSH
// if not turrets or not factories then
59379: LD_VAR 0 1
59383: NOT
59384: PUSH
59385: LD_VAR 0 2
59389: NOT
59390: OR
59391: IFFALSE 59395
// exit ;
59393: GO 59702
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59395: LD_ADDR_VAR 0 10
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: LD_INT 6
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 4
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 5
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 24
59437: PUSH
59438: LD_INT 25
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 23
59447: PUSH
59448: LD_INT 27
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 42
59461: PUSH
59462: LD_INT 43
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 44
59471: PUSH
59472: LD_INT 46
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 45
59481: PUSH
59482: LD_INT 47
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: ST_TO_ADDR
// result := [ ] ;
59499: LD_ADDR_VAR 0 3
59503: PUSH
59504: EMPTY
59505: ST_TO_ADDR
// for i in turrets do
59506: LD_ADDR_VAR 0 4
59510: PUSH
59511: LD_VAR 0 1
59515: PUSH
59516: FOR_IN
59517: IFFALSE 59700
// begin nat := GetNation ( i ) ;
59519: LD_ADDR_VAR 0 7
59523: PUSH
59524: LD_VAR 0 4
59528: PPUSH
59529: CALL_OW 248
59533: ST_TO_ADDR
// weapon := 0 ;
59534: LD_ADDR_VAR 0 8
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// if not nat then
59542: LD_VAR 0 7
59546: NOT
59547: IFFALSE 59551
// continue ;
59549: GO 59516
// for j in list [ nat ] do
59551: LD_ADDR_VAR 0 5
59555: PUSH
59556: LD_VAR 0 10
59560: PUSH
59561: LD_VAR 0 7
59565: ARRAY
59566: PUSH
59567: FOR_IN
59568: IFFALSE 59609
// if GetBWeapon ( i ) = j [ 1 ] then
59570: LD_VAR 0 4
59574: PPUSH
59575: CALL_OW 269
59579: PUSH
59580: LD_VAR 0 5
59584: PUSH
59585: LD_INT 1
59587: ARRAY
59588: EQUAL
59589: IFFALSE 59607
// begin weapon := j [ 2 ] ;
59591: LD_ADDR_VAR 0 8
59595: PUSH
59596: LD_VAR 0 5
59600: PUSH
59601: LD_INT 2
59603: ARRAY
59604: ST_TO_ADDR
// break ;
59605: GO 59609
// end ;
59607: GO 59567
59609: POP
59610: POP
// if not weapon then
59611: LD_VAR 0 8
59615: NOT
59616: IFFALSE 59620
// continue ;
59618: GO 59516
// for k in factories do
59620: LD_ADDR_VAR 0 6
59624: PUSH
59625: LD_VAR 0 2
59629: PUSH
59630: FOR_IN
59631: IFFALSE 59696
// begin weapons := AvailableWeaponList ( k ) ;
59633: LD_ADDR_VAR 0 9
59637: PUSH
59638: LD_VAR 0 6
59642: PPUSH
59643: CALL_OW 478
59647: ST_TO_ADDR
// if not weapons then
59648: LD_VAR 0 9
59652: NOT
59653: IFFALSE 59657
// continue ;
59655: GO 59630
// if weapon in weapons then
59657: LD_VAR 0 8
59661: PUSH
59662: LD_VAR 0 9
59666: IN
59667: IFFALSE 59694
// begin result := [ i , weapon ] ;
59669: LD_ADDR_VAR 0 3
59673: PUSH
59674: LD_VAR 0 4
59678: PUSH
59679: LD_VAR 0 8
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: ST_TO_ADDR
// exit ;
59688: POP
59689: POP
59690: POP
59691: POP
59692: GO 59702
// end ; end ;
59694: GO 59630
59696: POP
59697: POP
// end ;
59698: GO 59516
59700: POP
59701: POP
// end ;
59702: LD_VAR 0 3
59706: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59707: LD_INT 0
59709: PPUSH
// if not side or side > 8 then
59710: LD_VAR 0 3
59714: NOT
59715: PUSH
59716: LD_VAR 0 3
59720: PUSH
59721: LD_INT 8
59723: GREATER
59724: OR
59725: IFFALSE 59729
// exit ;
59727: GO 59788
// if not range then
59729: LD_VAR 0 4
59733: NOT
59734: IFFALSE 59745
// range := - 12 ;
59736: LD_ADDR_VAR 0 4
59740: PUSH
59741: LD_INT 12
59743: NEG
59744: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59745: LD_VAR 0 1
59749: PPUSH
59750: LD_VAR 0 2
59754: PPUSH
59755: LD_VAR 0 3
59759: PPUSH
59760: LD_VAR 0 4
59764: PPUSH
59765: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59769: LD_VAR 0 1
59773: PPUSH
59774: LD_VAR 0 2
59778: PPUSH
59779: LD_VAR 0 3
59783: PPUSH
59784: CALL_OW 331
// end ;
59788: LD_VAR 0 5
59792: RET
// export function Video ( mode ) ; begin
59793: LD_INT 0
59795: PPUSH
// ingame_video = mode ;
59796: LD_ADDR_OWVAR 52
59800: PUSH
59801: LD_VAR 0 1
59805: ST_TO_ADDR
// interface_hidden = mode ;
59806: LD_ADDR_OWVAR 54
59810: PUSH
59811: LD_VAR 0 1
59815: ST_TO_ADDR
// end ;
59816: LD_VAR 0 2
59820: RET
// export function Join ( array , element ) ; begin
59821: LD_INT 0
59823: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59824: LD_ADDR_VAR 0 3
59828: PUSH
59829: LD_VAR 0 1
59833: PPUSH
59834: LD_VAR 0 1
59838: PUSH
59839: LD_INT 1
59841: PLUS
59842: PPUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: CALL_OW 1
59852: ST_TO_ADDR
// end ;
59853: LD_VAR 0 3
59857: RET
// export function JoinUnion ( array , element ) ; begin
59858: LD_INT 0
59860: PPUSH
// result := array union element ;
59861: LD_ADDR_VAR 0 3
59865: PUSH
59866: LD_VAR 0 1
59870: PUSH
59871: LD_VAR 0 2
59875: UNION
59876: ST_TO_ADDR
// end ;
59877: LD_VAR 0 3
59881: RET
// export function GetBehemoths ( side ) ; begin
59882: LD_INT 0
59884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59885: LD_ADDR_VAR 0 2
59889: PUSH
59890: LD_INT 22
59892: PUSH
59893: LD_VAR 0 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 31
59904: PUSH
59905: LD_INT 25
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PPUSH
59916: CALL_OW 69
59920: ST_TO_ADDR
// end ;
59921: LD_VAR 0 2
59925: RET
// export function Shuffle ( array ) ; var i , index ; begin
59926: LD_INT 0
59928: PPUSH
59929: PPUSH
59930: PPUSH
// result := [ ] ;
59931: LD_ADDR_VAR 0 2
59935: PUSH
59936: EMPTY
59937: ST_TO_ADDR
// if not array then
59938: LD_VAR 0 1
59942: NOT
59943: IFFALSE 59947
// exit ;
59945: GO 60046
// Randomize ;
59947: CALL_OW 10
// for i = array downto 1 do
59951: LD_ADDR_VAR 0 3
59955: PUSH
59956: DOUBLE
59957: LD_VAR 0 1
59961: INC
59962: ST_TO_ADDR
59963: LD_INT 1
59965: PUSH
59966: FOR_DOWNTO
59967: IFFALSE 60044
// begin index := rand ( 1 , array ) ;
59969: LD_ADDR_VAR 0 4
59973: PUSH
59974: LD_INT 1
59976: PPUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: CALL_OW 12
59986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59987: LD_ADDR_VAR 0 2
59991: PUSH
59992: LD_VAR 0 2
59996: PPUSH
59997: LD_VAR 0 2
60001: PUSH
60002: LD_INT 1
60004: PLUS
60005: PPUSH
60006: LD_VAR 0 1
60010: PUSH
60011: LD_VAR 0 4
60015: ARRAY
60016: PPUSH
60017: CALL_OW 2
60021: ST_TO_ADDR
// array := Delete ( array , index ) ;
60022: LD_ADDR_VAR 0 1
60026: PUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_VAR 0 4
60036: PPUSH
60037: CALL_OW 3
60041: ST_TO_ADDR
// end ;
60042: GO 59966
60044: POP
60045: POP
// end ;
60046: LD_VAR 0 2
60050: RET
// export function GetBaseMaterials ( base ) ; begin
60051: LD_INT 0
60053: PPUSH
// result := [ 0 , 0 , 0 ] ;
60054: LD_ADDR_VAR 0 2
60058: PUSH
60059: LD_INT 0
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// if not base then
60073: LD_VAR 0 1
60077: NOT
60078: IFFALSE 60082
// exit ;
60080: GO 60131
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60082: LD_ADDR_VAR 0 2
60086: PUSH
60087: LD_VAR 0 1
60091: PPUSH
60092: LD_INT 1
60094: PPUSH
60095: CALL_OW 275
60099: PUSH
60100: LD_VAR 0 1
60104: PPUSH
60105: LD_INT 2
60107: PPUSH
60108: CALL_OW 275
60112: PUSH
60113: LD_VAR 0 1
60117: PPUSH
60118: LD_INT 3
60120: PPUSH
60121: CALL_OW 275
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: ST_TO_ADDR
// end ;
60131: LD_VAR 0 2
60135: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60136: LD_INT 0
60138: PPUSH
60139: PPUSH
// result := array ;
60140: LD_ADDR_VAR 0 3
60144: PUSH
60145: LD_VAR 0 1
60149: ST_TO_ADDR
// if size >= result then
60150: LD_VAR 0 2
60154: PUSH
60155: LD_VAR 0 3
60159: GREATEREQUAL
60160: IFFALSE 60164
// exit ;
60162: GO 60214
// if size then
60164: LD_VAR 0 2
60168: IFFALSE 60214
// for i := array downto size do
60170: LD_ADDR_VAR 0 4
60174: PUSH
60175: DOUBLE
60176: LD_VAR 0 1
60180: INC
60181: ST_TO_ADDR
60182: LD_VAR 0 2
60186: PUSH
60187: FOR_DOWNTO
60188: IFFALSE 60212
// result := Delete ( result , result ) ;
60190: LD_ADDR_VAR 0 3
60194: PUSH
60195: LD_VAR 0 3
60199: PPUSH
60200: LD_VAR 0 3
60204: PPUSH
60205: CALL_OW 3
60209: ST_TO_ADDR
60210: GO 60187
60212: POP
60213: POP
// end ;
60214: LD_VAR 0 3
60218: RET
// export function ComExit ( unit ) ; var tmp ; begin
60219: LD_INT 0
60221: PPUSH
60222: PPUSH
// if not IsInUnit ( unit ) then
60223: LD_VAR 0 1
60227: PPUSH
60228: CALL_OW 310
60232: NOT
60233: IFFALSE 60237
// exit ;
60235: GO 60297
// tmp := IsInUnit ( unit ) ;
60237: LD_ADDR_VAR 0 3
60241: PUSH
60242: LD_VAR 0 1
60246: PPUSH
60247: CALL_OW 310
60251: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60252: LD_VAR 0 3
60256: PPUSH
60257: CALL_OW 247
60261: PUSH
60262: LD_INT 2
60264: EQUAL
60265: IFFALSE 60278
// ComExitVehicle ( unit ) else
60267: LD_VAR 0 1
60271: PPUSH
60272: CALL_OW 121
60276: GO 60287
// ComExitBuilding ( unit ) ;
60278: LD_VAR 0 1
60282: PPUSH
60283: CALL_OW 122
// result := tmp ;
60287: LD_ADDR_VAR 0 2
60291: PUSH
60292: LD_VAR 0 3
60296: ST_TO_ADDR
// end ;
60297: LD_VAR 0 2
60301: RET
// export function ComExitAll ( units ) ; var i ; begin
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
// if not units then
60306: LD_VAR 0 1
60310: NOT
60311: IFFALSE 60315
// exit ;
60313: GO 60341
// for i in units do
60315: LD_ADDR_VAR 0 3
60319: PUSH
60320: LD_VAR 0 1
60324: PUSH
60325: FOR_IN
60326: IFFALSE 60339
// ComExit ( i ) ;
60328: LD_VAR 0 3
60332: PPUSH
60333: CALL 60219 0 1
60337: GO 60325
60339: POP
60340: POP
// end ;
60341: LD_VAR 0 2
60345: RET
// export function ResetHc ; begin
60346: LD_INT 0
60348: PPUSH
// InitHc ;
60349: CALL_OW 19
// hc_importance := 0 ;
60353: LD_ADDR_OWVAR 32
60357: PUSH
60358: LD_INT 0
60360: ST_TO_ADDR
// end ;
60361: LD_VAR 0 1
60365: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60366: LD_INT 0
60368: PPUSH
60369: PPUSH
60370: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60371: LD_ADDR_VAR 0 6
60375: PUSH
60376: LD_VAR 0 1
60380: PUSH
60381: LD_VAR 0 3
60385: PLUS
60386: PUSH
60387: LD_INT 2
60389: DIV
60390: ST_TO_ADDR
// if _x < 0 then
60391: LD_VAR 0 6
60395: PUSH
60396: LD_INT 0
60398: LESS
60399: IFFALSE 60416
// _x := _x * - 1 ;
60401: LD_ADDR_VAR 0 6
60405: PUSH
60406: LD_VAR 0 6
60410: PUSH
60411: LD_INT 1
60413: NEG
60414: MUL
60415: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60416: LD_ADDR_VAR 0 7
60420: PUSH
60421: LD_VAR 0 2
60425: PUSH
60426: LD_VAR 0 4
60430: PLUS
60431: PUSH
60432: LD_INT 2
60434: DIV
60435: ST_TO_ADDR
// if _y < 0 then
60436: LD_VAR 0 7
60440: PUSH
60441: LD_INT 0
60443: LESS
60444: IFFALSE 60461
// _y := _y * - 1 ;
60446: LD_ADDR_VAR 0 7
60450: PUSH
60451: LD_VAR 0 7
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: MUL
60460: ST_TO_ADDR
// result := [ _x , _y ] ;
60461: LD_ADDR_VAR 0 5
60465: PUSH
60466: LD_VAR 0 6
60470: PUSH
60471: LD_VAR 0 7
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: ST_TO_ADDR
// end ;
60480: LD_VAR 0 5
60484: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60485: LD_INT 0
60487: PPUSH
60488: PPUSH
60489: PPUSH
60490: PPUSH
// task := GetTaskList ( unit ) ;
60491: LD_ADDR_VAR 0 7
60495: PUSH
60496: LD_VAR 0 1
60500: PPUSH
60501: CALL_OW 437
60505: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60506: LD_VAR 0 7
60510: NOT
60511: PUSH
60512: LD_VAR 0 1
60516: PPUSH
60517: LD_VAR 0 2
60521: PPUSH
60522: CALL_OW 308
60526: NOT
60527: AND
60528: IFFALSE 60532
// exit ;
60530: GO 60650
// if IsInArea ( unit , area ) then
60532: LD_VAR 0 1
60536: PPUSH
60537: LD_VAR 0 2
60541: PPUSH
60542: CALL_OW 308
60546: IFFALSE 60564
// begin ComMoveToArea ( unit , goAway ) ;
60548: LD_VAR 0 1
60552: PPUSH
60553: LD_VAR 0 3
60557: PPUSH
60558: CALL_OW 113
// exit ;
60562: GO 60650
// end ; if task [ 1 ] [ 1 ] <> M then
60564: LD_VAR 0 7
60568: PUSH
60569: LD_INT 1
60571: ARRAY
60572: PUSH
60573: LD_INT 1
60575: ARRAY
60576: PUSH
60577: LD_STRING M
60579: NONEQUAL
60580: IFFALSE 60584
// exit ;
60582: GO 60650
// x := task [ 1 ] [ 2 ] ;
60584: LD_ADDR_VAR 0 5
60588: PUSH
60589: LD_VAR 0 7
60593: PUSH
60594: LD_INT 1
60596: ARRAY
60597: PUSH
60598: LD_INT 2
60600: ARRAY
60601: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60602: LD_ADDR_VAR 0 6
60606: PUSH
60607: LD_VAR 0 7
60611: PUSH
60612: LD_INT 1
60614: ARRAY
60615: PUSH
60616: LD_INT 3
60618: ARRAY
60619: ST_TO_ADDR
// if InArea ( x , y , area ) then
60620: LD_VAR 0 5
60624: PPUSH
60625: LD_VAR 0 6
60629: PPUSH
60630: LD_VAR 0 2
60634: PPUSH
60635: CALL_OW 309
60639: IFFALSE 60650
// ComStop ( unit ) ;
60641: LD_VAR 0 1
60645: PPUSH
60646: CALL_OW 141
// end ;
60650: LD_VAR 0 4
60654: RET
// export function Abs ( value ) ; begin
60655: LD_INT 0
60657: PPUSH
// result := value ;
60658: LD_ADDR_VAR 0 2
60662: PUSH
60663: LD_VAR 0 1
60667: ST_TO_ADDR
// if value < 0 then
60668: LD_VAR 0 1
60672: PUSH
60673: LD_INT 0
60675: LESS
60676: IFFALSE 60693
// result := value * - 1 ;
60678: LD_ADDR_VAR 0 2
60682: PUSH
60683: LD_VAR 0 1
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: MUL
60692: ST_TO_ADDR
// end ;
60693: LD_VAR 0 2
60697: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60698: LD_INT 0
60700: PPUSH
60701: PPUSH
60702: PPUSH
60703: PPUSH
60704: PPUSH
60705: PPUSH
60706: PPUSH
60707: PPUSH
// if not unit or not building then
60708: LD_VAR 0 1
60712: NOT
60713: PUSH
60714: LD_VAR 0 2
60718: NOT
60719: OR
60720: IFFALSE 60724
// exit ;
60722: GO 60950
// x := GetX ( building ) ;
60724: LD_ADDR_VAR 0 4
60728: PUSH
60729: LD_VAR 0 2
60733: PPUSH
60734: CALL_OW 250
60738: ST_TO_ADDR
// y := GetY ( building ) ;
60739: LD_ADDR_VAR 0 6
60743: PUSH
60744: LD_VAR 0 2
60748: PPUSH
60749: CALL_OW 251
60753: ST_TO_ADDR
// d := GetDir ( building ) ;
60754: LD_ADDR_VAR 0 8
60758: PUSH
60759: LD_VAR 0 2
60763: PPUSH
60764: CALL_OW 254
60768: ST_TO_ADDR
// r := 4 ;
60769: LD_ADDR_VAR 0 9
60773: PUSH
60774: LD_INT 4
60776: ST_TO_ADDR
// for i := 1 to 5 do
60777: LD_ADDR_VAR 0 10
60781: PUSH
60782: DOUBLE
60783: LD_INT 1
60785: DEC
60786: ST_TO_ADDR
60787: LD_INT 5
60789: PUSH
60790: FOR_TO
60791: IFFALSE 60948
// begin _x := ShiftX ( x , d , r + i ) ;
60793: LD_ADDR_VAR 0 5
60797: PUSH
60798: LD_VAR 0 4
60802: PPUSH
60803: LD_VAR 0 8
60807: PPUSH
60808: LD_VAR 0 9
60812: PUSH
60813: LD_VAR 0 10
60817: PLUS
60818: PPUSH
60819: CALL_OW 272
60823: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60824: LD_ADDR_VAR 0 7
60828: PUSH
60829: LD_VAR 0 6
60833: PPUSH
60834: LD_VAR 0 8
60838: PPUSH
60839: LD_VAR 0 9
60843: PUSH
60844: LD_VAR 0 10
60848: PLUS
60849: PPUSH
60850: CALL_OW 273
60854: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60855: LD_VAR 0 5
60859: PPUSH
60860: LD_VAR 0 7
60864: PPUSH
60865: CALL_OW 488
60869: PUSH
60870: LD_VAR 0 5
60874: PPUSH
60875: LD_VAR 0 7
60879: PPUSH
60880: CALL_OW 428
60884: PPUSH
60885: CALL_OW 247
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: IN
60900: NOT
60901: AND
60902: IFFALSE 60946
// begin ComMoveXY ( unit , _x , _y ) ;
60904: LD_VAR 0 1
60908: PPUSH
60909: LD_VAR 0 5
60913: PPUSH
60914: LD_VAR 0 7
60918: PPUSH
60919: CALL_OW 111
// result := [ _x , _y ] ;
60923: LD_ADDR_VAR 0 3
60927: PUSH
60928: LD_VAR 0 5
60932: PUSH
60933: LD_VAR 0 7
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// exit ;
60942: POP
60943: POP
60944: GO 60950
// end ; end ;
60946: GO 60790
60948: POP
60949: POP
// end ;
60950: LD_VAR 0 3
60954: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60955: LD_INT 0
60957: PPUSH
60958: PPUSH
60959: PPUSH
// result := 0 ;
60960: LD_ADDR_VAR 0 3
60964: PUSH
60965: LD_INT 0
60967: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60968: LD_VAR 0 1
60972: PUSH
60973: LD_INT 0
60975: LESS
60976: PUSH
60977: LD_VAR 0 1
60981: PUSH
60982: LD_INT 8
60984: GREATER
60985: OR
60986: PUSH
60987: LD_VAR 0 2
60991: PUSH
60992: LD_INT 0
60994: LESS
60995: OR
60996: PUSH
60997: LD_VAR 0 2
61001: PUSH
61002: LD_INT 8
61004: GREATER
61005: OR
61006: IFFALSE 61010
// exit ;
61008: GO 61085
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61010: LD_ADDR_VAR 0 4
61014: PUSH
61015: LD_INT 22
61017: PUSH
61018: LD_VAR 0 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PPUSH
61027: CALL_OW 69
61031: PUSH
61032: FOR_IN
61033: IFFALSE 61083
// begin un := UnitShoot ( i ) ;
61035: LD_ADDR_VAR 0 5
61039: PUSH
61040: LD_VAR 0 4
61044: PPUSH
61045: CALL_OW 504
61049: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61050: LD_VAR 0 5
61054: PPUSH
61055: CALL_OW 255
61059: PUSH
61060: LD_VAR 0 1
61064: EQUAL
61065: IFFALSE 61081
// begin result := un ;
61067: LD_ADDR_VAR 0 3
61071: PUSH
61072: LD_VAR 0 5
61076: ST_TO_ADDR
// exit ;
61077: POP
61078: POP
61079: GO 61085
// end ; end ;
61081: GO 61032
61083: POP
61084: POP
// end ;
61085: LD_VAR 0 3
61089: RET
// export function GetCargoBay ( units ) ; begin
61090: LD_INT 0
61092: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61093: LD_ADDR_VAR 0 2
61097: PUSH
61098: LD_VAR 0 1
61102: PPUSH
61103: LD_INT 2
61105: PUSH
61106: LD_INT 34
61108: PUSH
61109: LD_INT 12
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 34
61118: PUSH
61119: LD_INT 51
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 34
61128: PUSH
61129: LD_INT 32
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 34
61138: PUSH
61139: LD_INT 89
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PPUSH
61153: CALL_OW 72
61157: ST_TO_ADDR
// end ;
61158: LD_VAR 0 2
61162: RET
// export function Negate ( value ) ; begin
61163: LD_INT 0
61165: PPUSH
// result := not value ;
61166: LD_ADDR_VAR 0 2
61170: PUSH
61171: LD_VAR 0 1
61175: NOT
61176: ST_TO_ADDR
// end ;
61177: LD_VAR 0 2
61181: RET
// export function Inc ( value ) ; begin
61182: LD_INT 0
61184: PPUSH
// result := value + 1 ;
61185: LD_ADDR_VAR 0 2
61189: PUSH
61190: LD_VAR 0 1
61194: PUSH
61195: LD_INT 1
61197: PLUS
61198: ST_TO_ADDR
// end ;
61199: LD_VAR 0 2
61203: RET
// export function Dec ( value ) ; begin
61204: LD_INT 0
61206: PPUSH
// result := value - 1 ;
61207: LD_ADDR_VAR 0 2
61211: PUSH
61212: LD_VAR 0 1
61216: PUSH
61217: LD_INT 1
61219: MINUS
61220: ST_TO_ADDR
// end ;
61221: LD_VAR 0 2
61225: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61226: LD_INT 0
61228: PPUSH
61229: PPUSH
61230: PPUSH
61231: PPUSH
61232: PPUSH
61233: PPUSH
61234: PPUSH
61235: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61236: LD_VAR 0 1
61240: PPUSH
61241: LD_VAR 0 2
61245: PPUSH
61246: CALL_OW 488
61250: NOT
61251: PUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: LD_VAR 0 4
61261: PPUSH
61262: CALL_OW 488
61266: NOT
61267: OR
61268: IFFALSE 61281
// begin result := - 1 ;
61270: LD_ADDR_VAR 0 5
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: ST_TO_ADDR
// exit ;
61279: GO 61516
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61281: LD_ADDR_VAR 0 12
61285: PUSH
61286: LD_VAR 0 1
61290: PPUSH
61291: LD_VAR 0 2
61295: PPUSH
61296: LD_VAR 0 3
61300: PPUSH
61301: LD_VAR 0 4
61305: PPUSH
61306: CALL 60366 0 4
61310: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61311: LD_ADDR_VAR 0 11
61315: PUSH
61316: LD_VAR 0 1
61320: PPUSH
61321: LD_VAR 0 2
61325: PPUSH
61326: LD_VAR 0 12
61330: PUSH
61331: LD_INT 1
61333: ARRAY
61334: PPUSH
61335: LD_VAR 0 12
61339: PUSH
61340: LD_INT 2
61342: ARRAY
61343: PPUSH
61344: CALL_OW 298
61348: ST_TO_ADDR
// distance := 9999 ;
61349: LD_ADDR_VAR 0 10
61353: PUSH
61354: LD_INT 9999
61356: ST_TO_ADDR
// for i := 0 to 5 do
61357: LD_ADDR_VAR 0 6
61361: PUSH
61362: DOUBLE
61363: LD_INT 0
61365: DEC
61366: ST_TO_ADDR
61367: LD_INT 5
61369: PUSH
61370: FOR_TO
61371: IFFALSE 61514
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61373: LD_ADDR_VAR 0 7
61377: PUSH
61378: LD_VAR 0 1
61382: PPUSH
61383: LD_VAR 0 6
61387: PPUSH
61388: LD_VAR 0 11
61392: PPUSH
61393: CALL_OW 272
61397: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61398: LD_ADDR_VAR 0 8
61402: PUSH
61403: LD_VAR 0 2
61407: PPUSH
61408: LD_VAR 0 6
61412: PPUSH
61413: LD_VAR 0 11
61417: PPUSH
61418: CALL_OW 273
61422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61423: LD_VAR 0 7
61427: PPUSH
61428: LD_VAR 0 8
61432: PPUSH
61433: CALL_OW 488
61437: NOT
61438: IFFALSE 61442
// continue ;
61440: GO 61370
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61442: LD_ADDR_VAR 0 9
61446: PUSH
61447: LD_VAR 0 12
61451: PUSH
61452: LD_INT 1
61454: ARRAY
61455: PPUSH
61456: LD_VAR 0 12
61460: PUSH
61461: LD_INT 2
61463: ARRAY
61464: PPUSH
61465: LD_VAR 0 7
61469: PPUSH
61470: LD_VAR 0 8
61474: PPUSH
61475: CALL_OW 298
61479: ST_TO_ADDR
// if tmp < distance then
61480: LD_VAR 0 9
61484: PUSH
61485: LD_VAR 0 10
61489: LESS
61490: IFFALSE 61512
// begin result := i ;
61492: LD_ADDR_VAR 0 5
61496: PUSH
61497: LD_VAR 0 6
61501: ST_TO_ADDR
// distance := tmp ;
61502: LD_ADDR_VAR 0 10
61506: PUSH
61507: LD_VAR 0 9
61511: ST_TO_ADDR
// end ; end ;
61512: GO 61370
61514: POP
61515: POP
// end ;
61516: LD_VAR 0 5
61520: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61521: LD_INT 0
61523: PPUSH
61524: PPUSH
// if not driver or not IsInUnit ( driver ) then
61525: LD_VAR 0 1
61529: NOT
61530: PUSH
61531: LD_VAR 0 1
61535: PPUSH
61536: CALL_OW 310
61540: NOT
61541: OR
61542: IFFALSE 61546
// exit ;
61544: GO 61636
// vehicle := IsInUnit ( driver ) ;
61546: LD_ADDR_VAR 0 3
61550: PUSH
61551: LD_VAR 0 1
61555: PPUSH
61556: CALL_OW 310
61560: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61561: LD_VAR 0 1
61565: PPUSH
61566: LD_STRING \
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 0
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: PUSH
61596: LD_STRING E
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_VAR 0 3
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PPUSH
61632: CALL_OW 446
// end ;
61636: LD_VAR 0 2
61640: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61641: LD_INT 0
61643: PPUSH
61644: PPUSH
// if not driver or not IsInUnit ( driver ) then
61645: LD_VAR 0 1
61649: NOT
61650: PUSH
61651: LD_VAR 0 1
61655: PPUSH
61656: CALL_OW 310
61660: NOT
61661: OR
61662: IFFALSE 61666
// exit ;
61664: GO 61756
// vehicle := IsInUnit ( driver ) ;
61666: LD_ADDR_VAR 0 3
61670: PUSH
61671: LD_VAR 0 1
61675: PPUSH
61676: CALL_OW 310
61680: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61681: LD_VAR 0 1
61685: PPUSH
61686: LD_STRING \
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: PUSH
61716: LD_STRING E
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_VAR 0 3
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PPUSH
61752: CALL_OW 447
// end ;
61756: LD_VAR 0 2
61760: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61761: LD_INT 0
61763: PPUSH
61764: PPUSH
61765: PPUSH
// tmp := [ ] ;
61766: LD_ADDR_VAR 0 5
61770: PUSH
61771: EMPTY
61772: ST_TO_ADDR
// for i in units do
61773: LD_ADDR_VAR 0 4
61777: PUSH
61778: LD_VAR 0 1
61782: PUSH
61783: FOR_IN
61784: IFFALSE 61822
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61786: LD_ADDR_VAR 0 5
61790: PUSH
61791: LD_VAR 0 5
61795: PPUSH
61796: LD_VAR 0 5
61800: PUSH
61801: LD_INT 1
61803: PLUS
61804: PPUSH
61805: LD_VAR 0 4
61809: PPUSH
61810: CALL_OW 256
61814: PPUSH
61815: CALL_OW 2
61819: ST_TO_ADDR
61820: GO 61783
61822: POP
61823: POP
// if not tmp then
61824: LD_VAR 0 5
61828: NOT
61829: IFFALSE 61833
// exit ;
61831: GO 61881
// if asc then
61833: LD_VAR 0 2
61837: IFFALSE 61861
// result := SortListByListAsc ( units , tmp ) else
61839: LD_ADDR_VAR 0 3
61843: PUSH
61844: LD_VAR 0 1
61848: PPUSH
61849: LD_VAR 0 5
61853: PPUSH
61854: CALL_OW 76
61858: ST_TO_ADDR
61859: GO 61881
// result := SortListByListDesc ( units , tmp ) ;
61861: LD_ADDR_VAR 0 3
61865: PUSH
61866: LD_VAR 0 1
61870: PPUSH
61871: LD_VAR 0 5
61875: PPUSH
61876: CALL_OW 77
61880: ST_TO_ADDR
// end ;
61881: LD_VAR 0 3
61885: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61886: LD_INT 0
61888: PPUSH
61889: PPUSH
// task := GetTaskList ( mech ) ;
61890: LD_ADDR_VAR 0 4
61894: PUSH
61895: LD_VAR 0 1
61899: PPUSH
61900: CALL_OW 437
61904: ST_TO_ADDR
// if not task then
61905: LD_VAR 0 4
61909: NOT
61910: IFFALSE 61914
// exit ;
61912: GO 61956
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61914: LD_ADDR_VAR 0 3
61918: PUSH
61919: LD_VAR 0 4
61923: PUSH
61924: LD_INT 1
61926: ARRAY
61927: PUSH
61928: LD_INT 1
61930: ARRAY
61931: PUSH
61932: LD_STRING r
61934: EQUAL
61935: PUSH
61936: LD_VAR 0 4
61940: PUSH
61941: LD_INT 1
61943: ARRAY
61944: PUSH
61945: LD_INT 4
61947: ARRAY
61948: PUSH
61949: LD_VAR 0 2
61953: EQUAL
61954: AND
61955: ST_TO_ADDR
// end ;
61956: LD_VAR 0 3
61960: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61961: LD_INT 0
61963: PPUSH
// SetDir ( unit , d ) ;
61964: LD_VAR 0 1
61968: PPUSH
61969: LD_VAR 0 4
61973: PPUSH
61974: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61978: LD_VAR 0 1
61982: PPUSH
61983: LD_VAR 0 2
61987: PPUSH
61988: LD_VAR 0 3
61992: PPUSH
61993: LD_VAR 0 5
61997: PPUSH
61998: CALL_OW 48
// end ;
62002: LD_VAR 0 6
62006: RET
// export function ToNaturalNumber ( number ) ; begin
62007: LD_INT 0
62009: PPUSH
// result := number div 1 ;
62010: LD_ADDR_VAR 0 2
62014: PUSH
62015: LD_VAR 0 1
62019: PUSH
62020: LD_INT 1
62022: DIV
62023: ST_TO_ADDR
// if number < 0 then
62024: LD_VAR 0 1
62028: PUSH
62029: LD_INT 0
62031: LESS
62032: IFFALSE 62042
// result := 0 ;
62034: LD_ADDR_VAR 0 2
62038: PUSH
62039: LD_INT 0
62041: ST_TO_ADDR
// end ;
62042: LD_VAR 0 2
62046: RET
// export function SortByClass ( units , class ) ; var un ; begin
62047: LD_INT 0
62049: PPUSH
62050: PPUSH
// if not units or not class then
62051: LD_VAR 0 1
62055: NOT
62056: PUSH
62057: LD_VAR 0 2
62061: NOT
62062: OR
62063: IFFALSE 62067
// exit ;
62065: GO 62162
// result := [ ] ;
62067: LD_ADDR_VAR 0 3
62071: PUSH
62072: EMPTY
62073: ST_TO_ADDR
// for un in units do
62074: LD_ADDR_VAR 0 4
62078: PUSH
62079: LD_VAR 0 1
62083: PUSH
62084: FOR_IN
62085: IFFALSE 62160
// if GetClass ( un ) = class then
62087: LD_VAR 0 4
62091: PPUSH
62092: CALL_OW 257
62096: PUSH
62097: LD_VAR 0 2
62101: EQUAL
62102: IFFALSE 62129
// result := Insert ( result , 1 , un ) else
62104: LD_ADDR_VAR 0 3
62108: PUSH
62109: LD_VAR 0 3
62113: PPUSH
62114: LD_INT 1
62116: PPUSH
62117: LD_VAR 0 4
62121: PPUSH
62122: CALL_OW 2
62126: ST_TO_ADDR
62127: GO 62158
// result := Replace ( result , result + 1 , un ) ;
62129: LD_ADDR_VAR 0 3
62133: PUSH
62134: LD_VAR 0 3
62138: PPUSH
62139: LD_VAR 0 3
62143: PUSH
62144: LD_INT 1
62146: PLUS
62147: PPUSH
62148: LD_VAR 0 4
62152: PPUSH
62153: CALL_OW 1
62157: ST_TO_ADDR
62158: GO 62084
62160: POP
62161: POP
// end ;
62162: LD_VAR 0 3
62166: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62167: LD_INT 0
62169: PPUSH
62170: PPUSH
62171: PPUSH
62172: PPUSH
62173: PPUSH
62174: PPUSH
62175: PPUSH
// result := [ ] ;
62176: LD_ADDR_VAR 0 4
62180: PUSH
62181: EMPTY
62182: ST_TO_ADDR
// if x - r < 0 then
62183: LD_VAR 0 1
62187: PUSH
62188: LD_VAR 0 3
62192: MINUS
62193: PUSH
62194: LD_INT 0
62196: LESS
62197: IFFALSE 62209
// min_x := 0 else
62199: LD_ADDR_VAR 0 8
62203: PUSH
62204: LD_INT 0
62206: ST_TO_ADDR
62207: GO 62225
// min_x := x - r ;
62209: LD_ADDR_VAR 0 8
62213: PUSH
62214: LD_VAR 0 1
62218: PUSH
62219: LD_VAR 0 3
62223: MINUS
62224: ST_TO_ADDR
// if y - r < 0 then
62225: LD_VAR 0 2
62229: PUSH
62230: LD_VAR 0 3
62234: MINUS
62235: PUSH
62236: LD_INT 0
62238: LESS
62239: IFFALSE 62251
// min_y := 0 else
62241: LD_ADDR_VAR 0 7
62245: PUSH
62246: LD_INT 0
62248: ST_TO_ADDR
62249: GO 62267
// min_y := y - r ;
62251: LD_ADDR_VAR 0 7
62255: PUSH
62256: LD_VAR 0 2
62260: PUSH
62261: LD_VAR 0 3
62265: MINUS
62266: ST_TO_ADDR
// max_x := x + r ;
62267: LD_ADDR_VAR 0 9
62271: PUSH
62272: LD_VAR 0 1
62276: PUSH
62277: LD_VAR 0 3
62281: PLUS
62282: ST_TO_ADDR
// max_y := y + r ;
62283: LD_ADDR_VAR 0 10
62287: PUSH
62288: LD_VAR 0 2
62292: PUSH
62293: LD_VAR 0 3
62297: PLUS
62298: ST_TO_ADDR
// for _x = min_x to max_x do
62299: LD_ADDR_VAR 0 5
62303: PUSH
62304: DOUBLE
62305: LD_VAR 0 8
62309: DEC
62310: ST_TO_ADDR
62311: LD_VAR 0 9
62315: PUSH
62316: FOR_TO
62317: IFFALSE 62418
// for _y = min_y to max_y do
62319: LD_ADDR_VAR 0 6
62323: PUSH
62324: DOUBLE
62325: LD_VAR 0 7
62329: DEC
62330: ST_TO_ADDR
62331: LD_VAR 0 10
62335: PUSH
62336: FOR_TO
62337: IFFALSE 62414
// begin if not ValidHex ( _x , _y ) then
62339: LD_VAR 0 5
62343: PPUSH
62344: LD_VAR 0 6
62348: PPUSH
62349: CALL_OW 488
62353: NOT
62354: IFFALSE 62358
// continue ;
62356: GO 62336
// if GetResourceTypeXY ( _x , _y ) then
62358: LD_VAR 0 5
62362: PPUSH
62363: LD_VAR 0 6
62367: PPUSH
62368: CALL_OW 283
62372: IFFALSE 62412
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62374: LD_ADDR_VAR 0 4
62378: PUSH
62379: LD_VAR 0 4
62383: PPUSH
62384: LD_VAR 0 4
62388: PUSH
62389: LD_INT 1
62391: PLUS
62392: PPUSH
62393: LD_VAR 0 5
62397: PUSH
62398: LD_VAR 0 6
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PPUSH
62407: CALL_OW 1
62411: ST_TO_ADDR
// end ;
62412: GO 62336
62414: POP
62415: POP
62416: GO 62316
62418: POP
62419: POP
// end ;
62420: LD_VAR 0 4
62424: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62425: LD_INT 0
62427: PPUSH
62428: PPUSH
62429: PPUSH
62430: PPUSH
62431: PPUSH
62432: PPUSH
62433: PPUSH
62434: PPUSH
// if not units then
62435: LD_VAR 0 1
62439: NOT
62440: IFFALSE 62444
// exit ;
62442: GO 62968
// result := UnitFilter ( units , [ f_ok ] ) ;
62444: LD_ADDR_VAR 0 3
62448: PUSH
62449: LD_VAR 0 1
62453: PPUSH
62454: LD_INT 50
62456: PUSH
62457: EMPTY
62458: LIST
62459: PPUSH
62460: CALL_OW 72
62464: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62465: LD_ADDR_VAR 0 8
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: LD_INT 1
62477: ARRAY
62478: PPUSH
62479: CALL_OW 255
62483: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62484: LD_ADDR_VAR 0 10
62488: PUSH
62489: LD_INT 29
62491: PUSH
62492: LD_INT 91
62494: PUSH
62495: LD_INT 49
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: ST_TO_ADDR
// if not result then
62503: LD_VAR 0 3
62507: NOT
62508: IFFALSE 62512
// exit ;
62510: GO 62968
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62512: LD_ADDR_VAR 0 5
62516: PUSH
62517: LD_INT 81
62519: PUSH
62520: LD_VAR 0 8
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PPUSH
62529: CALL_OW 69
62533: ST_TO_ADDR
// for i in result do
62534: LD_ADDR_VAR 0 4
62538: PUSH
62539: LD_VAR 0 3
62543: PUSH
62544: FOR_IN
62545: IFFALSE 62966
// begin tag := GetTag ( i ) + 1 ;
62547: LD_ADDR_VAR 0 9
62551: PUSH
62552: LD_VAR 0 4
62556: PPUSH
62557: CALL_OW 110
62561: PUSH
62562: LD_INT 1
62564: PLUS
62565: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62566: LD_ADDR_VAR 0 7
62570: PUSH
62571: LD_VAR 0 4
62575: PPUSH
62576: CALL_OW 250
62580: PPUSH
62581: LD_VAR 0 4
62585: PPUSH
62586: CALL_OW 251
62590: PPUSH
62591: LD_INT 6
62593: PPUSH
62594: CALL 62167 0 3
62598: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62599: LD_VAR 0 4
62603: PPUSH
62604: CALL_OW 247
62608: PUSH
62609: LD_INT 2
62611: EQUAL
62612: PUSH
62613: LD_VAR 0 7
62617: AND
62618: PUSH
62619: LD_VAR 0 4
62623: PPUSH
62624: CALL_OW 264
62628: PUSH
62629: LD_VAR 0 10
62633: IN
62634: NOT
62635: AND
62636: IFFALSE 62675
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62638: LD_VAR 0 4
62642: PPUSH
62643: LD_VAR 0 7
62647: PUSH
62648: LD_INT 1
62650: ARRAY
62651: PUSH
62652: LD_INT 1
62654: ARRAY
62655: PPUSH
62656: LD_VAR 0 7
62660: PUSH
62661: LD_INT 1
62663: ARRAY
62664: PUSH
62665: LD_INT 2
62667: ARRAY
62668: PPUSH
62669: CALL_OW 116
62673: GO 62964
// if path > tag then
62675: LD_VAR 0 2
62679: PUSH
62680: LD_VAR 0 9
62684: GREATER
62685: IFFALSE 62893
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62687: LD_ADDR_VAR 0 6
62691: PUSH
62692: LD_VAR 0 5
62696: PPUSH
62697: LD_INT 91
62699: PUSH
62700: LD_VAR 0 4
62704: PUSH
62705: LD_INT 8
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: LIST
62712: PPUSH
62713: CALL_OW 72
62717: ST_TO_ADDR
// if nearEnemy then
62718: LD_VAR 0 6
62722: IFFALSE 62791
// begin if GetWeapon ( i ) = ru_time_lapser then
62724: LD_VAR 0 4
62728: PPUSH
62729: CALL_OW 264
62733: PUSH
62734: LD_INT 49
62736: EQUAL
62737: IFFALSE 62765
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62739: LD_VAR 0 4
62743: PPUSH
62744: LD_VAR 0 6
62748: PPUSH
62749: LD_VAR 0 4
62753: PPUSH
62754: CALL_OW 74
62758: PPUSH
62759: CALL_OW 112
62763: GO 62789
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62765: LD_VAR 0 4
62769: PPUSH
62770: LD_VAR 0 6
62774: PPUSH
62775: LD_VAR 0 4
62779: PPUSH
62780: CALL_OW 74
62784: PPUSH
62785: CALL 63893 0 2
// end else
62789: GO 62891
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62791: LD_VAR 0 4
62795: PPUSH
62796: LD_VAR 0 2
62800: PUSH
62801: LD_VAR 0 9
62805: ARRAY
62806: PUSH
62807: LD_INT 1
62809: ARRAY
62810: PPUSH
62811: LD_VAR 0 2
62815: PUSH
62816: LD_VAR 0 9
62820: ARRAY
62821: PUSH
62822: LD_INT 2
62824: ARRAY
62825: PPUSH
62826: CALL_OW 297
62830: PUSH
62831: LD_INT 6
62833: GREATER
62834: IFFALSE 62877
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62836: LD_VAR 0 4
62840: PPUSH
62841: LD_VAR 0 2
62845: PUSH
62846: LD_VAR 0 9
62850: ARRAY
62851: PUSH
62852: LD_INT 1
62854: ARRAY
62855: PPUSH
62856: LD_VAR 0 2
62860: PUSH
62861: LD_VAR 0 9
62865: ARRAY
62866: PUSH
62867: LD_INT 2
62869: ARRAY
62870: PPUSH
62871: CALL_OW 114
62875: GO 62891
// SetTag ( i , tag ) ;
62877: LD_VAR 0 4
62881: PPUSH
62882: LD_VAR 0 9
62886: PPUSH
62887: CALL_OW 109
// end else
62891: GO 62964
// if enemy then
62893: LD_VAR 0 5
62897: IFFALSE 62964
// begin if GetWeapon ( i ) = ru_time_lapser then
62899: LD_VAR 0 4
62903: PPUSH
62904: CALL_OW 264
62908: PUSH
62909: LD_INT 49
62911: EQUAL
62912: IFFALSE 62940
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62914: LD_VAR 0 4
62918: PPUSH
62919: LD_VAR 0 5
62923: PPUSH
62924: LD_VAR 0 4
62928: PPUSH
62929: CALL_OW 74
62933: PPUSH
62934: CALL_OW 112
62938: GO 62964
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62940: LD_VAR 0 4
62944: PPUSH
62945: LD_VAR 0 5
62949: PPUSH
62950: LD_VAR 0 4
62954: PPUSH
62955: CALL_OW 74
62959: PPUSH
62960: CALL 63893 0 2
// end ; end ;
62964: GO 62544
62966: POP
62967: POP
// end ;
62968: LD_VAR 0 3
62972: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62973: LD_INT 0
62975: PPUSH
62976: PPUSH
62977: PPUSH
// if not unit or IsInUnit ( unit ) then
62978: LD_VAR 0 1
62982: NOT
62983: PUSH
62984: LD_VAR 0 1
62988: PPUSH
62989: CALL_OW 310
62993: OR
62994: IFFALSE 62998
// exit ;
62996: GO 63089
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62998: LD_ADDR_VAR 0 4
63002: PUSH
63003: LD_VAR 0 1
63007: PPUSH
63008: CALL_OW 250
63012: PPUSH
63013: LD_VAR 0 2
63017: PPUSH
63018: LD_INT 1
63020: PPUSH
63021: CALL_OW 272
63025: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63026: LD_ADDR_VAR 0 5
63030: PUSH
63031: LD_VAR 0 1
63035: PPUSH
63036: CALL_OW 251
63040: PPUSH
63041: LD_VAR 0 2
63045: PPUSH
63046: LD_INT 1
63048: PPUSH
63049: CALL_OW 273
63053: ST_TO_ADDR
// if ValidHex ( x , y ) then
63054: LD_VAR 0 4
63058: PPUSH
63059: LD_VAR 0 5
63063: PPUSH
63064: CALL_OW 488
63068: IFFALSE 63089
// ComTurnXY ( unit , x , y ) ;
63070: LD_VAR 0 1
63074: PPUSH
63075: LD_VAR 0 4
63079: PPUSH
63080: LD_VAR 0 5
63084: PPUSH
63085: CALL_OW 118
// end ;
63089: LD_VAR 0 3
63093: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63094: LD_INT 0
63096: PPUSH
63097: PPUSH
// result := false ;
63098: LD_ADDR_VAR 0 3
63102: PUSH
63103: LD_INT 0
63105: ST_TO_ADDR
// if not units then
63106: LD_VAR 0 2
63110: NOT
63111: IFFALSE 63115
// exit ;
63113: GO 63160
// for i in units do
63115: LD_ADDR_VAR 0 4
63119: PUSH
63120: LD_VAR 0 2
63124: PUSH
63125: FOR_IN
63126: IFFALSE 63158
// if See ( side , i ) then
63128: LD_VAR 0 1
63132: PPUSH
63133: LD_VAR 0 4
63137: PPUSH
63138: CALL_OW 292
63142: IFFALSE 63156
// begin result := true ;
63144: LD_ADDR_VAR 0 3
63148: PUSH
63149: LD_INT 1
63151: ST_TO_ADDR
// exit ;
63152: POP
63153: POP
63154: GO 63160
// end ;
63156: GO 63125
63158: POP
63159: POP
// end ;
63160: LD_VAR 0 3
63164: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63165: LD_INT 0
63167: PPUSH
63168: PPUSH
63169: PPUSH
63170: PPUSH
// if not unit or not points then
63171: LD_VAR 0 1
63175: NOT
63176: PUSH
63177: LD_VAR 0 2
63181: NOT
63182: OR
63183: IFFALSE 63187
// exit ;
63185: GO 63277
// dist := 99999 ;
63187: LD_ADDR_VAR 0 5
63191: PUSH
63192: LD_INT 99999
63194: ST_TO_ADDR
// for i in points do
63195: LD_ADDR_VAR 0 4
63199: PUSH
63200: LD_VAR 0 2
63204: PUSH
63205: FOR_IN
63206: IFFALSE 63275
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63208: LD_ADDR_VAR 0 6
63212: PUSH
63213: LD_VAR 0 1
63217: PPUSH
63218: LD_VAR 0 4
63222: PUSH
63223: LD_INT 1
63225: ARRAY
63226: PPUSH
63227: LD_VAR 0 4
63231: PUSH
63232: LD_INT 2
63234: ARRAY
63235: PPUSH
63236: CALL_OW 297
63240: ST_TO_ADDR
// if tmpDist < dist then
63241: LD_VAR 0 6
63245: PUSH
63246: LD_VAR 0 5
63250: LESS
63251: IFFALSE 63273
// begin result := i ;
63253: LD_ADDR_VAR 0 3
63257: PUSH
63258: LD_VAR 0 4
63262: ST_TO_ADDR
// dist := tmpDist ;
63263: LD_ADDR_VAR 0 5
63267: PUSH
63268: LD_VAR 0 6
63272: ST_TO_ADDR
// end ; end ;
63273: GO 63205
63275: POP
63276: POP
// end ;
63277: LD_VAR 0 3
63281: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63282: LD_INT 0
63284: PPUSH
// uc_side := side ;
63285: LD_ADDR_OWVAR 20
63289: PUSH
63290: LD_VAR 0 1
63294: ST_TO_ADDR
// uc_nation := 3 ;
63295: LD_ADDR_OWVAR 21
63299: PUSH
63300: LD_INT 3
63302: ST_TO_ADDR
// vc_chassis := 25 ;
63303: LD_ADDR_OWVAR 37
63307: PUSH
63308: LD_INT 25
63310: ST_TO_ADDR
// vc_engine := engine_siberite ;
63311: LD_ADDR_OWVAR 39
63315: PUSH
63316: LD_INT 3
63318: ST_TO_ADDR
// vc_control := control_computer ;
63319: LD_ADDR_OWVAR 38
63323: PUSH
63324: LD_INT 3
63326: ST_TO_ADDR
// vc_weapon := 59 ;
63327: LD_ADDR_OWVAR 40
63331: PUSH
63332: LD_INT 59
63334: ST_TO_ADDR
// result := CreateVehicle ;
63335: LD_ADDR_VAR 0 5
63339: PUSH
63340: CALL_OW 45
63344: ST_TO_ADDR
// SetDir ( result , d ) ;
63345: LD_VAR 0 5
63349: PPUSH
63350: LD_VAR 0 4
63354: PPUSH
63355: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63359: LD_VAR 0 5
63363: PPUSH
63364: LD_VAR 0 2
63368: PPUSH
63369: LD_VAR 0 3
63373: PPUSH
63374: LD_INT 0
63376: PPUSH
63377: CALL_OW 48
// end ;
63381: LD_VAR 0 5
63385: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63386: LD_INT 0
63388: PPUSH
63389: PPUSH
63390: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63391: LD_ADDR_VAR 0 2
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63414: LD_VAR 0 1
63418: NOT
63419: PUSH
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL_OW 264
63429: PUSH
63430: LD_INT 12
63432: PUSH
63433: LD_INT 51
63435: PUSH
63436: LD_INT 32
63438: PUSH
63439: LD_INT 89
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: IN
63448: NOT
63449: OR
63450: IFFALSE 63454
// exit ;
63452: GO 63552
// for i := 1 to 3 do
63454: LD_ADDR_VAR 0 3
63458: PUSH
63459: DOUBLE
63460: LD_INT 1
63462: DEC
63463: ST_TO_ADDR
63464: LD_INT 3
63466: PUSH
63467: FOR_TO
63468: IFFALSE 63550
// begin tmp := GetCargo ( cargo , i ) ;
63470: LD_ADDR_VAR 0 4
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: LD_VAR 0 3
63484: PPUSH
63485: CALL_OW 289
63489: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63490: LD_ADDR_VAR 0 2
63494: PUSH
63495: LD_VAR 0 2
63499: PPUSH
63500: LD_VAR 0 3
63504: PPUSH
63505: LD_VAR 0 4
63509: PPUSH
63510: CALL_OW 1
63514: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63515: LD_ADDR_VAR 0 2
63519: PUSH
63520: LD_VAR 0 2
63524: PPUSH
63525: LD_INT 4
63527: PPUSH
63528: LD_VAR 0 2
63532: PUSH
63533: LD_INT 4
63535: ARRAY
63536: PUSH
63537: LD_VAR 0 4
63541: PLUS
63542: PPUSH
63543: CALL_OW 1
63547: ST_TO_ADDR
// end ;
63548: GO 63467
63550: POP
63551: POP
// end ;
63552: LD_VAR 0 2
63556: RET
// export function Length ( array ) ; begin
63557: LD_INT 0
63559: PPUSH
// result := array + 0 ;
63560: LD_ADDR_VAR 0 2
63564: PUSH
63565: LD_VAR 0 1
63569: PUSH
63570: LD_INT 0
63572: PLUS
63573: ST_TO_ADDR
// end ;
63574: LD_VAR 0 2
63578: RET
// export function PrepareArray ( array ) ; begin
63579: LD_INT 0
63581: PPUSH
// result := array diff 0 ;
63582: LD_ADDR_VAR 0 2
63586: PUSH
63587: LD_VAR 0 1
63591: PUSH
63592: LD_INT 0
63594: DIFF
63595: ST_TO_ADDR
// if not result [ 1 ] then
63596: LD_VAR 0 2
63600: PUSH
63601: LD_INT 1
63603: ARRAY
63604: NOT
63605: IFFALSE 63625
// result := Delete ( result , 1 ) ;
63607: LD_ADDR_VAR 0 2
63611: PUSH
63612: LD_VAR 0 2
63616: PPUSH
63617: LD_INT 1
63619: PPUSH
63620: CALL_OW 3
63624: ST_TO_ADDR
// end ;
63625: LD_VAR 0 2
63629: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63630: LD_INT 0
63632: PPUSH
63633: PPUSH
63634: PPUSH
63635: PPUSH
// sibRocketRange := 25 ;
63636: LD_ADDR_VAR 0 6
63640: PUSH
63641: LD_INT 25
63643: ST_TO_ADDR
// result := false ;
63644: LD_ADDR_VAR 0 4
63648: PUSH
63649: LD_INT 0
63651: ST_TO_ADDR
// for i := 0 to 5 do
63652: LD_ADDR_VAR 0 5
63656: PUSH
63657: DOUBLE
63658: LD_INT 0
63660: DEC
63661: ST_TO_ADDR
63662: LD_INT 5
63664: PUSH
63665: FOR_TO
63666: IFFALSE 63733
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63668: LD_VAR 0 1
63672: PPUSH
63673: LD_VAR 0 5
63677: PPUSH
63678: LD_VAR 0 6
63682: PPUSH
63683: CALL_OW 272
63687: PPUSH
63688: LD_VAR 0 2
63692: PPUSH
63693: LD_VAR 0 5
63697: PPUSH
63698: LD_VAR 0 6
63702: PPUSH
63703: CALL_OW 273
63707: PPUSH
63708: LD_VAR 0 3
63712: PPUSH
63713: CALL_OW 309
63717: IFFALSE 63731
// begin result := true ;
63719: LD_ADDR_VAR 0 4
63723: PUSH
63724: LD_INT 1
63726: ST_TO_ADDR
// exit ;
63727: POP
63728: POP
63729: GO 63735
// end ;
63731: GO 63665
63733: POP
63734: POP
// end ;
63735: LD_VAR 0 4
63739: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63740: LD_INT 0
63742: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63743: LD_VAR 0 1
63747: PPUSH
63748: LD_VAR 0 2
63752: PPUSH
63753: LD_INT 0
63755: PPUSH
63756: LD_INT 0
63758: PPUSH
63759: LD_INT 1
63761: PPUSH
63762: LD_INT 0
63764: PPUSH
63765: CALL_OW 587
// end ;
63769: LD_VAR 0 3
63773: RET
// export function CenterOnNow ( unit ) ; begin
63774: LD_INT 0
63776: PPUSH
// result := IsInUnit ( unit ) ;
63777: LD_ADDR_VAR 0 2
63781: PUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL_OW 310
63791: ST_TO_ADDR
// if not result then
63792: LD_VAR 0 2
63796: NOT
63797: IFFALSE 63809
// result := unit ;
63799: LD_ADDR_VAR 0 2
63803: PUSH
63804: LD_VAR 0 1
63808: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63809: LD_VAR 0 1
63813: PPUSH
63814: CALL_OW 87
// end ;
63818: LD_VAR 0 2
63822: RET
// export function ComMoveHex ( unit , hex ) ; begin
63823: LD_INT 0
63825: PPUSH
// if not hex then
63826: LD_VAR 0 2
63830: NOT
63831: IFFALSE 63835
// exit ;
63833: GO 63888
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63835: LD_VAR 0 2
63839: PUSH
63840: LD_INT 1
63842: ARRAY
63843: PPUSH
63844: LD_VAR 0 2
63848: PUSH
63849: LD_INT 2
63851: ARRAY
63852: PPUSH
63853: CALL_OW 428
63857: IFFALSE 63861
// exit ;
63859: GO 63888
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63861: LD_VAR 0 1
63865: PPUSH
63866: LD_VAR 0 2
63870: PUSH
63871: LD_INT 1
63873: ARRAY
63874: PPUSH
63875: LD_VAR 0 2
63879: PUSH
63880: LD_INT 2
63882: ARRAY
63883: PPUSH
63884: CALL_OW 111
// end ;
63888: LD_VAR 0 3
63892: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63893: LD_INT 0
63895: PPUSH
63896: PPUSH
63897: PPUSH
// if not unit or not enemy then
63898: LD_VAR 0 1
63902: NOT
63903: PUSH
63904: LD_VAR 0 2
63908: NOT
63909: OR
63910: IFFALSE 63914
// exit ;
63912: GO 64038
// x := GetX ( enemy ) ;
63914: LD_ADDR_VAR 0 4
63918: PUSH
63919: LD_VAR 0 2
63923: PPUSH
63924: CALL_OW 250
63928: ST_TO_ADDR
// y := GetY ( enemy ) ;
63929: LD_ADDR_VAR 0 5
63933: PUSH
63934: LD_VAR 0 2
63938: PPUSH
63939: CALL_OW 251
63943: ST_TO_ADDR
// if ValidHex ( x , y ) then
63944: LD_VAR 0 4
63948: PPUSH
63949: LD_VAR 0 5
63953: PPUSH
63954: CALL_OW 488
63958: IFFALSE 64038
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
63960: LD_VAR 0 2
63964: PPUSH
63965: CALL_OW 247
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: LD_INT 2
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: IN
63980: PUSH
63981: LD_VAR 0 1
63985: PPUSH
63986: CALL_OW 255
63990: PPUSH
63991: LD_VAR 0 2
63995: PPUSH
63996: CALL_OW 292
64000: AND
64001: IFFALSE 64019
// ComAttackUnit ( unit , enemy ) else
64003: LD_VAR 0 1
64007: PPUSH
64008: LD_VAR 0 2
64012: PPUSH
64013: CALL_OW 115
64017: GO 64038
// ComAgressiveMove ( unit , x , y ) ;
64019: LD_VAR 0 1
64023: PPUSH
64024: LD_VAR 0 4
64028: PPUSH
64029: LD_VAR 0 5
64033: PPUSH
64034: CALL_OW 114
// end ;
64038: LD_VAR 0 3
64042: RET
