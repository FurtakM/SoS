// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2757 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3221 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3221 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16223 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16475 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 61913 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
1517: LD_STRING displayDifficulty(
1519: PUSH
1520: LD_OWVAR 67
1524: STR
1525: PUSH
1526: LD_STRING )
1528: STR
1529: PPUSH
1530: CALL_OW 559
// end ;
1534: LD_VAR 0 1
1538: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1539: LD_INT 0
1541: PPUSH
// if p2 = stream_mode then
1542: LD_VAR 0 2
1546: PUSH
1547: LD_INT 100
1549: EQUAL
1550: IFFALSE 2553
// begin if not StreamModeActive then
1552: LD_EXP 3
1556: NOT
1557: IFFALSE 1567
// StreamModeActive := true ;
1559: LD_ADDR_EXP 3
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// if p3 = 0 then
1567: LD_VAR 0 3
1571: PUSH
1572: LD_INT 0
1574: EQUAL
1575: IFFALSE 1581
// InitStreamMode ;
1577: CALL 2757 0 0
// if p3 = 1 then
1581: LD_VAR 0 3
1585: PUSH
1586: LD_INT 1
1588: EQUAL
1589: IFFALSE 1599
// sRocket := true ;
1591: LD_ADDR_EXP 8
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// if p3 = 2 then
1599: LD_VAR 0 3
1603: PUSH
1604: LD_INT 2
1606: EQUAL
1607: IFFALSE 1617
// sSpeed := true ;
1609: LD_ADDR_EXP 7
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// if p3 = 3 then
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 3
1624: EQUAL
1625: IFFALSE 1635
// sEngine := true ;
1627: LD_ADDR_EXP 9
1631: PUSH
1632: LD_INT 1
1634: ST_TO_ADDR
// if p3 = 4 then
1635: LD_VAR 0 3
1639: PUSH
1640: LD_INT 4
1642: EQUAL
1643: IFFALSE 1653
// sSpec := true ;
1645: LD_ADDR_EXP 6
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// if p3 = 5 then
1653: LD_VAR 0 3
1657: PUSH
1658: LD_INT 5
1660: EQUAL
1661: IFFALSE 1671
// sLevel := true ;
1663: LD_ADDR_EXP 10
1667: PUSH
1668: LD_INT 1
1670: ST_TO_ADDR
// if p3 = 6 then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 6
1678: EQUAL
1679: IFFALSE 1689
// sArmoury := true ;
1681: LD_ADDR_EXP 11
1685: PUSH
1686: LD_INT 1
1688: ST_TO_ADDR
// if p3 = 7 then
1689: LD_VAR 0 3
1693: PUSH
1694: LD_INT 7
1696: EQUAL
1697: IFFALSE 1707
// sRadar := true ;
1699: LD_ADDR_EXP 12
1703: PUSH
1704: LD_INT 1
1706: ST_TO_ADDR
// if p3 = 8 then
1707: LD_VAR 0 3
1711: PUSH
1712: LD_INT 8
1714: EQUAL
1715: IFFALSE 1725
// sBunker := true ;
1717: LD_ADDR_EXP 13
1721: PUSH
1722: LD_INT 1
1724: ST_TO_ADDR
// if p3 = 9 then
1725: LD_VAR 0 3
1729: PUSH
1730: LD_INT 9
1732: EQUAL
1733: IFFALSE 1743
// sHack := true ;
1735: LD_ADDR_EXP 14
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// if p3 = 10 then
1743: LD_VAR 0 3
1747: PUSH
1748: LD_INT 10
1750: EQUAL
1751: IFFALSE 1761
// sFire := true ;
1753: LD_ADDR_EXP 15
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// if p3 = 11 then
1761: LD_VAR 0 3
1765: PUSH
1766: LD_INT 11
1768: EQUAL
1769: IFFALSE 1779
// sRefresh := true ;
1771: LD_ADDR_EXP 16
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// if p3 = 12 then
1779: LD_VAR 0 3
1783: PUSH
1784: LD_INT 12
1786: EQUAL
1787: IFFALSE 1797
// sExp := true ;
1789: LD_ADDR_EXP 17
1793: PUSH
1794: LD_INT 1
1796: ST_TO_ADDR
// if p3 = 13 then
1797: LD_VAR 0 3
1801: PUSH
1802: LD_INT 13
1804: EQUAL
1805: IFFALSE 1815
// sDepot := true ;
1807: LD_ADDR_EXP 18
1811: PUSH
1812: LD_INT 1
1814: ST_TO_ADDR
// if p3 = 14 then
1815: LD_VAR 0 3
1819: PUSH
1820: LD_INT 14
1822: EQUAL
1823: IFFALSE 1833
// sFlag := true ;
1825: LD_ADDR_EXP 19
1829: PUSH
1830: LD_INT 1
1832: ST_TO_ADDR
// if p3 = 15 then
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 15
1840: EQUAL
1841: IFFALSE 1851
// sKamikadze := true ;
1843: LD_ADDR_EXP 27
1847: PUSH
1848: LD_INT 1
1850: ST_TO_ADDR
// if p3 = 16 then
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 16
1858: EQUAL
1859: IFFALSE 1869
// sTroll := true ;
1861: LD_ADDR_EXP 28
1865: PUSH
1866: LD_INT 1
1868: ST_TO_ADDR
// if p3 = 17 then
1869: LD_VAR 0 3
1873: PUSH
1874: LD_INT 17
1876: EQUAL
1877: IFFALSE 1887
// sSlow := true ;
1879: LD_ADDR_EXP 29
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// if p3 = 18 then
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 18
1894: EQUAL
1895: IFFALSE 1905
// sLack := true ;
1897: LD_ADDR_EXP 30
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if p3 = 19 then
1905: LD_VAR 0 3
1909: PUSH
1910: LD_INT 19
1912: EQUAL
1913: IFFALSE 1923
// sTank := true ;
1915: LD_ADDR_EXP 32
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// if p3 = 20 then
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 20
1930: EQUAL
1931: IFFALSE 1941
// sRemote := true ;
1933: LD_ADDR_EXP 33
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// if p3 = 21 then
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 21
1948: EQUAL
1949: IFFALSE 1959
// sPowell := true ;
1951: LD_ADDR_EXP 34
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 22 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 22
1966: EQUAL
1967: IFFALSE 1977
// sTeleport := true ;
1969: LD_ADDR_EXP 37
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// if p3 = 23 then
1977: LD_VAR 0 3
1981: PUSH
1982: LD_INT 23
1984: EQUAL
1985: IFFALSE 1995
// sOilTower := true ;
1987: LD_ADDR_EXP 39
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if p3 = 24 then
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 24
2002: EQUAL
2003: IFFALSE 2013
// sShovel := true ;
2005: LD_ADDR_EXP 40
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 25 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 25
2020: EQUAL
2021: IFFALSE 2031
// sSheik := true ;
2023: LD_ADDR_EXP 41
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 26 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 26
2038: EQUAL
2039: IFFALSE 2049
// sEarthquake := true ;
2041: LD_ADDR_EXP 43
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 27 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 27
2056: EQUAL
2057: IFFALSE 2067
// sAI := true ;
2059: LD_ADDR_EXP 44
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 28 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 28
2074: EQUAL
2075: IFFALSE 2085
// sCargo := true ;
2077: LD_ADDR_EXP 47
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 29 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 29
2092: EQUAL
2093: IFFALSE 2103
// sDLaser := true ;
2095: LD_ADDR_EXP 48
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 30 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 30
2110: EQUAL
2111: IFFALSE 2121
// sExchange := true ;
2113: LD_ADDR_EXP 49
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 31 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 31
2128: EQUAL
2129: IFFALSE 2139
// sFac := true ;
2131: LD_ADDR_EXP 50
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 32 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 32
2146: EQUAL
2147: IFFALSE 2157
// sPower := true ;
2149: LD_ADDR_EXP 51
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 33 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 33
2164: EQUAL
2165: IFFALSE 2175
// sRandom := true ;
2167: LD_ADDR_EXP 52
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 34 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 34
2182: EQUAL
2183: IFFALSE 2193
// sShield := true ;
2185: LD_ADDR_EXP 53
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 35 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 35
2200: EQUAL
2201: IFFALSE 2211
// sTime := true ;
2203: LD_ADDR_EXP 54
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 36 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 36
2218: EQUAL
2219: IFFALSE 2229
// sTools := true ;
2221: LD_ADDR_EXP 55
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 101 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 101
2236: EQUAL
2237: IFFALSE 2247
// sSold := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 102 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 102
2254: EQUAL
2255: IFFALSE 2265
// sDiff := true ;
2257: LD_ADDR_EXP 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 103 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 103
2272: EQUAL
2273: IFFALSE 2283
// sFog := true ;
2275: LD_ADDR_EXP 24
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 104 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 104
2290: EQUAL
2291: IFFALSE 2301
// sReset := true ;
2293: LD_ADDR_EXP 25
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 105 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 105
2308: EQUAL
2309: IFFALSE 2319
// sSun := true ;
2311: LD_ADDR_EXP 26
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 106 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 106
2326: EQUAL
2327: IFFALSE 2337
// sTiger := true ;
2329: LD_ADDR_EXP 22
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 107 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 107
2344: EQUAL
2345: IFFALSE 2355
// sBomb := true ;
2347: LD_ADDR_EXP 23
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 108 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 108
2362: EQUAL
2363: IFFALSE 2373
// sWound := true ;
2365: LD_ADDR_EXP 31
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 109 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 109
2380: EQUAL
2381: IFFALSE 2391
// sBetray := true ;
2383: LD_ADDR_EXP 35
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 110 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 110
2398: EQUAL
2399: IFFALSE 2409
// sContamin := true ;
2401: LD_ADDR_EXP 36
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 111 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 111
2416: EQUAL
2417: IFFALSE 2427
// sOil := true ;
2419: LD_ADDR_EXP 38
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 112 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 112
2434: EQUAL
2435: IFFALSE 2445
// sStu := true ;
2437: LD_ADDR_EXP 42
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 113 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 113
2452: EQUAL
2453: IFFALSE 2463
// sBazooka := true ;
2455: LD_ADDR_EXP 45
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 114 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 114
2470: EQUAL
2471: IFFALSE 2481
// sMortar := true ;
2473: LD_ADDR_EXP 46
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 115 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 115
2488: EQUAL
2489: IFFALSE 2499
// sRanger := true ;
2491: LD_ADDR_EXP 56
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 116 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 116
2506: EQUAL
2507: IFFALSE 2517
// sComputer := true ;
2509: LD_ADDR_EXP 57
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 117 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 117
2524: EQUAL
2525: IFFALSE 2535
// s30 := true ;
2527: LD_ADDR_EXP 58
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 118 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 118
2542: EQUAL
2543: IFFALSE 2553
// s60 := true ;
2545: LD_ADDR_EXP 59
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// end ; if p2 = hack_mode then
2553: LD_VAR 0 2
2557: PUSH
2558: LD_INT 101
2560: EQUAL
2561: IFFALSE 2689
// begin case p3 of 1 :
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 1
2570: DOUBLE
2571: EQUAL
2572: IFTRUE 2576
2574: GO 2583
2576: POP
// hHackUnlimitedResources ; 2 :
2577: CALL 14836 0 0
2581: GO 2689
2583: LD_INT 2
2585: DOUBLE
2586: EQUAL
2587: IFTRUE 2591
2589: GO 2598
2591: POP
// hHackSetLevel10 ; 3 :
2592: CALL 14969 0 0
2596: GO 2689
2598: LD_INT 3
2600: DOUBLE
2601: EQUAL
2602: IFTRUE 2606
2604: GO 2613
2606: POP
// hHackSetLevel10YourUnits ; 4 :
2607: CALL 15054 0 0
2611: GO 2689
2613: LD_INT 4
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2628
2621: POP
// hHackInvincible ; 5 :
2622: CALL 15502 0 0
2626: GO 2689
2628: LD_INT 5
2630: DOUBLE
2631: EQUAL
2632: IFTRUE 2636
2634: GO 2643
2636: POP
// hHackInvisible ; 6 :
2637: CALL 15613 0 0
2641: GO 2689
2643: LD_INT 6
2645: DOUBLE
2646: EQUAL
2647: IFTRUE 2651
2649: GO 2658
2651: POP
// hHackChangeYourSide ; 7 :
2652: CALL 15670 0 0
2656: GO 2689
2658: LD_INT 7
2660: DOUBLE
2661: EQUAL
2662: IFTRUE 2666
2664: GO 2673
2666: POP
// hHackChangeUnitSide ; 8 :
2667: CALL 15712 0 0
2671: GO 2689
2673: LD_INT 8
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2688
2681: POP
// hHackFog ; end ;
2682: CALL 15813 0 0
2686: GO 2689
2688: POP
// end ; if p2 = game_save_mode then
2689: LD_VAR 0 2
2693: PUSH
2694: LD_INT 102
2696: EQUAL
2697: IFFALSE 2752
// begin if p3 = 1 then
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: IFFALSE 2719
// globalGameSaveCounter := p4 ;
2709: LD_ADDR_EXP 2
2713: PUSH
2714: LD_VAR 0 4
2718: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 2
2726: EQUAL
2727: PUSH
2728: LD_EXP 2
2732: AND
2733: IFFALSE 2752
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2735: LD_STRING setGameSaveCounter(
2737: PUSH
2738: LD_EXP 2
2742: STR
2743: PUSH
2744: LD_STRING )
2746: STR
2747: PPUSH
2748: CALL_OW 559
// end ; end ;
2752: LD_VAR 0 7
2756: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2757: LD_INT 0
2759: PPUSH
// streamModeActive := false ;
2760: LD_ADDR_EXP 3
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// normalCounter := 36 ;
2768: LD_ADDR_EXP 4
2772: PUSH
2773: LD_INT 36
2775: ST_TO_ADDR
// hardcoreCounter := 18 ;
2776: LD_ADDR_EXP 5
2780: PUSH
2781: LD_INT 18
2783: ST_TO_ADDR
// sRocket := false ;
2784: LD_ADDR_EXP 8
2788: PUSH
2789: LD_INT 0
2791: ST_TO_ADDR
// sSpeed := false ;
2792: LD_ADDR_EXP 7
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// sEngine := false ;
2800: LD_ADDR_EXP 9
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// sSpec := false ;
2808: LD_ADDR_EXP 6
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// sLevel := false ;
2816: LD_ADDR_EXP 10
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// sArmoury := false ;
2824: LD_ADDR_EXP 11
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// sRadar := false ;
2832: LD_ADDR_EXP 12
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// sBunker := false ;
2840: LD_ADDR_EXP 13
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// sHack := false ;
2848: LD_ADDR_EXP 14
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// sFire := false ;
2856: LD_ADDR_EXP 15
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// sRefresh := false ;
2864: LD_ADDR_EXP 16
2868: PUSH
2869: LD_INT 0
2871: ST_TO_ADDR
// sExp := false ;
2872: LD_ADDR_EXP 17
2876: PUSH
2877: LD_INT 0
2879: ST_TO_ADDR
// sDepot := false ;
2880: LD_ADDR_EXP 18
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// sFlag := false ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 0
2895: ST_TO_ADDR
// sKamikadze := false ;
2896: LD_ADDR_EXP 27
2900: PUSH
2901: LD_INT 0
2903: ST_TO_ADDR
// sTroll := false ;
2904: LD_ADDR_EXP 28
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// sSlow := false ;
2912: LD_ADDR_EXP 29
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// sLack := false ;
2920: LD_ADDR_EXP 30
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// sTank := false ;
2928: LD_ADDR_EXP 32
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// sRemote := false ;
2936: LD_ADDR_EXP 33
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// sPowell := false ;
2944: LD_ADDR_EXP 34
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
// sTeleport := false ;
2952: LD_ADDR_EXP 37
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// sOilTower := false ;
2960: LD_ADDR_EXP 39
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// sShovel := false ;
2968: LD_ADDR_EXP 40
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// sSheik := false ;
2976: LD_ADDR_EXP 41
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// sEarthquake := false ;
2984: LD_ADDR_EXP 43
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// sAI := false ;
2992: LD_ADDR_EXP 44
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// sCargo := false ;
3000: LD_ADDR_EXP 47
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// sDLaser := false ;
3008: LD_ADDR_EXP 48
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// sExchange := false ;
3016: LD_ADDR_EXP 49
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// sFac := false ;
3024: LD_ADDR_EXP 50
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// sPower := false ;
3032: LD_ADDR_EXP 51
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// sRandom := false ;
3040: LD_ADDR_EXP 52
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// sShield := false ;
3048: LD_ADDR_EXP 53
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// sTime := false ;
3056: LD_ADDR_EXP 54
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// sTools := false ;
3064: LD_ADDR_EXP 55
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// sSold := false ;
3072: LD_ADDR_EXP 20
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// sDiff := false ;
3080: LD_ADDR_EXP 21
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// sFog := false ;
3088: LD_ADDR_EXP 24
3092: PUSH
3093: LD_INT 0
3095: ST_TO_ADDR
// sReset := false ;
3096: LD_ADDR_EXP 25
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// sSun := false ;
3104: LD_ADDR_EXP 26
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// sTiger := false ;
3112: LD_ADDR_EXP 22
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// sBomb := false ;
3120: LD_ADDR_EXP 23
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sWound := false ;
3128: LD_ADDR_EXP 31
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sBetray := false ;
3136: LD_ADDR_EXP 35
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sContamin := false ;
3144: LD_ADDR_EXP 36
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sOil := false ;
3152: LD_ADDR_EXP 38
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sStu := false ;
3160: LD_ADDR_EXP 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sBazooka := false ;
3168: LD_ADDR_EXP 45
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sMortar := false ;
3176: LD_ADDR_EXP 46
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sRanger := false ;
3184: LD_ADDR_EXP 56
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sComputer := false ;
3192: LD_ADDR_EXP 57
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// s30 := false ;
3200: LD_ADDR_EXP 58
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// s60 := false ;
3208: LD_ADDR_EXP 59
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// end ;
3216: LD_VAR 0 1
3220: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
// result := [ ] ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: EMPTY
3236: ST_TO_ADDR
// if campaign_id = 1 then
3237: LD_OWVAR 69
3241: PUSH
3242: LD_INT 1
3244: EQUAL
3245: IFFALSE 6411
// begin case mission_number of 1 :
3247: LD_OWVAR 70
3251: PUSH
3252: LD_INT 1
3254: DOUBLE
3255: EQUAL
3256: IFTRUE 3260
3258: GO 3336
3260: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: LD_INT 2
3268: PUSH
3269: LD_INT 4
3271: PUSH
3272: LD_INT 11
3274: PUSH
3275: LD_INT 12
3277: PUSH
3278: LD_INT 15
3280: PUSH
3281: LD_INT 16
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 23
3289: PUSH
3290: LD_INT 26
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 101
3306: PUSH
3307: LD_INT 102
3309: PUSH
3310: LD_INT 106
3312: PUSH
3313: LD_INT 116
3315: PUSH
3316: LD_INT 117
3318: PUSH
3319: LD_INT 118
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: ST_TO_ADDR
3334: GO 6409
3336: LD_INT 2
3338: DOUBLE
3339: EQUAL
3340: IFTRUE 3344
3342: GO 3428
3344: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_INT 2
3352: PUSH
3353: LD_INT 4
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 15
3364: PUSH
3365: LD_INT 16
3367: PUSH
3368: LD_INT 22
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 26
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 101
3390: PUSH
3391: LD_INT 102
3393: PUSH
3394: LD_INT 105
3396: PUSH
3397: LD_INT 106
3399: PUSH
3400: LD_INT 108
3402: PUSH
3403: LD_INT 116
3405: PUSH
3406: LD_INT 117
3408: PUSH
3409: LD_INT 118
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: ST_TO_ADDR
3426: GO 6409
3428: LD_INT 3
3430: DOUBLE
3431: EQUAL
3432: IFTRUE 3436
3434: GO 3524
3436: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 11
3453: PUSH
3454: LD_INT 12
3456: PUSH
3457: LD_INT 15
3459: PUSH
3460: LD_INT 16
3462: PUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 26
3468: PUSH
3469: LD_INT 36
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 101
3486: PUSH
3487: LD_INT 102
3489: PUSH
3490: LD_INT 105
3492: PUSH
3493: LD_INT 106
3495: PUSH
3496: LD_INT 108
3498: PUSH
3499: LD_INT 116
3501: PUSH
3502: LD_INT 117
3504: PUSH
3505: LD_INT 118
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: ST_TO_ADDR
3522: GO 6409
3524: LD_INT 4
3526: DOUBLE
3527: EQUAL
3528: IFTRUE 3532
3530: GO 3628
3532: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 11
3552: PUSH
3553: LD_INT 12
3555: PUSH
3556: LD_INT 15
3558: PUSH
3559: LD_INT 16
3561: PUSH
3562: LD_INT 22
3564: PUSH
3565: LD_INT 23
3567: PUSH
3568: LD_INT 26
3570: PUSH
3571: LD_INT 36
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 101
3590: PUSH
3591: LD_INT 102
3593: PUSH
3594: LD_INT 105
3596: PUSH
3597: LD_INT 106
3599: PUSH
3600: LD_INT 108
3602: PUSH
3603: LD_INT 116
3605: PUSH
3606: LD_INT 117
3608: PUSH
3609: LD_INT 118
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: ST_TO_ADDR
3626: GO 6409
3628: LD_INT 5
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3636
3634: GO 3748
3636: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 4
3647: PUSH
3648: LD_INT 5
3650: PUSH
3651: LD_INT 6
3653: PUSH
3654: LD_INT 8
3656: PUSH
3657: LD_INT 11
3659: PUSH
3660: LD_INT 12
3662: PUSH
3663: LD_INT 15
3665: PUSH
3666: LD_INT 16
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 23
3674: PUSH
3675: LD_INT 25
3677: PUSH
3678: LD_INT 26
3680: PUSH
3681: LD_INT 36
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 101
3702: PUSH
3703: LD_INT 102
3705: PUSH
3706: LD_INT 105
3708: PUSH
3709: LD_INT 106
3711: PUSH
3712: LD_INT 108
3714: PUSH
3715: LD_INT 109
3717: PUSH
3718: LD_INT 112
3720: PUSH
3721: LD_INT 116
3723: PUSH
3724: LD_INT 117
3726: PUSH
3727: LD_INT 118
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: ST_TO_ADDR
3746: GO 6409
3748: LD_INT 6
3750: DOUBLE
3751: EQUAL
3752: IFTRUE 3756
3754: GO 3888
3756: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: LD_INT 5
3770: PUSH
3771: LD_INT 6
3773: PUSH
3774: LD_INT 8
3776: PUSH
3777: LD_INT 11
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: LD_INT 15
3785: PUSH
3786: LD_INT 16
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 25
3803: PUSH
3804: LD_INT 26
3806: PUSH
3807: LD_INT 30
3809: PUSH
3810: LD_INT 31
3812: PUSH
3813: LD_INT 32
3815: PUSH
3816: LD_INT 36
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 101
3842: PUSH
3843: LD_INT 102
3845: PUSH
3846: LD_INT 105
3848: PUSH
3849: LD_INT 106
3851: PUSH
3852: LD_INT 108
3854: PUSH
3855: LD_INT 109
3857: PUSH
3858: LD_INT 112
3860: PUSH
3861: LD_INT 116
3863: PUSH
3864: LD_INT 117
3866: PUSH
3867: LD_INT 118
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 6409
3888: LD_INT 7
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4008
3896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 4
3907: PUSH
3908: LD_INT 5
3910: PUSH
3911: LD_INT 7
3913: PUSH
3914: LD_INT 11
3916: PUSH
3917: LD_INT 12
3919: PUSH
3920: LD_INT 15
3922: PUSH
3923: LD_INT 16
3925: PUSH
3926: LD_INT 20
3928: PUSH
3929: LD_INT 21
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 23
3937: PUSH
3938: LD_INT 25
3940: PUSH
3941: LD_INT 26
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 101
3962: PUSH
3963: LD_INT 102
3965: PUSH
3966: LD_INT 103
3968: PUSH
3969: LD_INT 105
3971: PUSH
3972: LD_INT 106
3974: PUSH
3975: LD_INT 108
3977: PUSH
3978: LD_INT 112
3980: PUSH
3981: LD_INT 116
3983: PUSH
3984: LD_INT 117
3986: PUSH
3987: LD_INT 118
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: ST_TO_ADDR
4006: GO 6409
4008: LD_INT 8
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4156
4016: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: LD_INT 6
4033: PUSH
4034: LD_INT 7
4036: PUSH
4037: LD_INT 8
4039: PUSH
4040: LD_INT 11
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: LD_INT 15
4048: PUSH
4049: LD_INT 16
4051: PUSH
4052: LD_INT 20
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 23
4063: PUSH
4064: LD_INT 25
4066: PUSH
4067: LD_INT 26
4069: PUSH
4070: LD_INT 30
4072: PUSH
4073: LD_INT 31
4075: PUSH
4076: LD_INT 32
4078: PUSH
4079: LD_INT 36
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 101
4106: PUSH
4107: LD_INT 102
4109: PUSH
4110: LD_INT 103
4112: PUSH
4113: LD_INT 105
4115: PUSH
4116: LD_INT 106
4118: PUSH
4119: LD_INT 108
4121: PUSH
4122: LD_INT 109
4124: PUSH
4125: LD_INT 112
4127: PUSH
4128: LD_INT 116
4130: PUSH
4131: LD_INT 117
4133: PUSH
4134: LD_INT 118
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 6409
4156: LD_INT 9
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4312
4164: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: LD_INT 2
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: LD_INT 5
4178: PUSH
4179: LD_INT 6
4181: PUSH
4182: LD_INT 7
4184: PUSH
4185: LD_INT 8
4187: PUSH
4188: LD_INT 11
4190: PUSH
4191: LD_INT 12
4193: PUSH
4194: LD_INT 15
4196: PUSH
4197: LD_INT 16
4199: PUSH
4200: LD_INT 20
4202: PUSH
4203: LD_INT 21
4205: PUSH
4206: LD_INT 22
4208: PUSH
4209: LD_INT 23
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 26
4217: PUSH
4218: LD_INT 28
4220: PUSH
4221: LD_INT 30
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 32
4229: PUSH
4230: LD_INT 36
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 101
4258: PUSH
4259: LD_INT 102
4261: PUSH
4262: LD_INT 103
4264: PUSH
4265: LD_INT 105
4267: PUSH
4268: LD_INT 106
4270: PUSH
4271: LD_INT 108
4273: PUSH
4274: LD_INT 109
4276: PUSH
4277: LD_INT 112
4279: PUSH
4280: LD_INT 114
4282: PUSH
4283: LD_INT 116
4285: PUSH
4286: LD_INT 117
4288: PUSH
4289: LD_INT 118
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: ST_TO_ADDR
4310: GO 6409
4312: LD_INT 10
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4516
4320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 4
4331: PUSH
4332: LD_INT 5
4334: PUSH
4335: LD_INT 6
4337: PUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 8
4343: PUSH
4344: LD_INT 9
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: LD_INT 11
4352: PUSH
4353: LD_INT 12
4355: PUSH
4356: LD_INT 13
4358: PUSH
4359: LD_INT 14
4361: PUSH
4362: LD_INT 15
4364: PUSH
4365: LD_INT 16
4367: PUSH
4368: LD_INT 17
4370: PUSH
4371: LD_INT 18
4373: PUSH
4374: LD_INT 19
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 24
4391: PUSH
4392: LD_INT 25
4394: PUSH
4395: LD_INT 26
4397: PUSH
4398: LD_INT 28
4400: PUSH
4401: LD_INT 30
4403: PUSH
4404: LD_INT 31
4406: PUSH
4407: LD_INT 32
4409: PUSH
4410: LD_INT 36
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 101
4446: PUSH
4447: LD_INT 102
4449: PUSH
4450: LD_INT 103
4452: PUSH
4453: LD_INT 104
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: LD_INT 107
4464: PUSH
4465: LD_INT 108
4467: PUSH
4468: LD_INT 109
4470: PUSH
4471: LD_INT 110
4473: PUSH
4474: LD_INT 111
4476: PUSH
4477: LD_INT 112
4479: PUSH
4480: LD_INT 114
4482: PUSH
4483: LD_INT 116
4485: PUSH
4486: LD_INT 117
4488: PUSH
4489: LD_INT 118
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: ST_TO_ADDR
4514: GO 6409
4516: LD_INT 11
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4728
4524: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 4
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: LD_INT 6
4544: PUSH
4545: LD_INT 7
4547: PUSH
4548: LD_INT 8
4550: PUSH
4551: LD_INT 9
4553: PUSH
4554: LD_INT 10
4556: PUSH
4557: LD_INT 11
4559: PUSH
4560: LD_INT 12
4562: PUSH
4563: LD_INT 13
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 15
4571: PUSH
4572: LD_INT 16
4574: PUSH
4575: LD_INT 17
4577: PUSH
4578: LD_INT 18
4580: PUSH
4581: LD_INT 19
4583: PUSH
4584: LD_INT 20
4586: PUSH
4587: LD_INT 21
4589: PUSH
4590: LD_INT 22
4592: PUSH
4593: LD_INT 23
4595: PUSH
4596: LD_INT 24
4598: PUSH
4599: LD_INT 25
4601: PUSH
4602: LD_INT 26
4604: PUSH
4605: LD_INT 28
4607: PUSH
4608: LD_INT 30
4610: PUSH
4611: LD_INT 31
4613: PUSH
4614: LD_INT 32
4616: PUSH
4617: LD_INT 34
4619: PUSH
4620: LD_INT 36
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 101
4658: PUSH
4659: LD_INT 102
4661: PUSH
4662: LD_INT 103
4664: PUSH
4665: LD_INT 104
4667: PUSH
4668: LD_INT 105
4670: PUSH
4671: LD_INT 106
4673: PUSH
4674: LD_INT 107
4676: PUSH
4677: LD_INT 108
4679: PUSH
4680: LD_INT 109
4682: PUSH
4683: LD_INT 110
4685: PUSH
4686: LD_INT 111
4688: PUSH
4689: LD_INT 112
4691: PUSH
4692: LD_INT 114
4694: PUSH
4695: LD_INT 116
4697: PUSH
4698: LD_INT 117
4700: PUSH
4701: LD_INT 118
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: ST_TO_ADDR
4726: GO 6409
4728: LD_INT 12
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4956
4736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: LD_INT 1
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 5
4756: PUSH
4757: LD_INT 6
4759: PUSH
4760: LD_INT 7
4762: PUSH
4763: LD_INT 8
4765: PUSH
4766: LD_INT 9
4768: PUSH
4769: LD_INT 10
4771: PUSH
4772: LD_INT 11
4774: PUSH
4775: LD_INT 12
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 14
4783: PUSH
4784: LD_INT 15
4786: PUSH
4787: LD_INT 16
4789: PUSH
4790: LD_INT 17
4792: PUSH
4793: LD_INT 18
4795: PUSH
4796: LD_INT 19
4798: PUSH
4799: LD_INT 20
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 22
4807: PUSH
4808: LD_INT 23
4810: PUSH
4811: LD_INT 24
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 27
4822: PUSH
4823: LD_INT 28
4825: PUSH
4826: LD_INT 30
4828: PUSH
4829: LD_INT 31
4831: PUSH
4832: LD_INT 32
4834: PUSH
4835: LD_INT 33
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 36
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 101
4882: PUSH
4883: LD_INT 102
4885: PUSH
4886: LD_INT 103
4888: PUSH
4889: LD_INT 104
4891: PUSH
4892: LD_INT 105
4894: PUSH
4895: LD_INT 106
4897: PUSH
4898: LD_INT 107
4900: PUSH
4901: LD_INT 108
4903: PUSH
4904: LD_INT 109
4906: PUSH
4907: LD_INT 110
4909: PUSH
4910: LD_INT 111
4912: PUSH
4913: LD_INT 112
4915: PUSH
4916: LD_INT 113
4918: PUSH
4919: LD_INT 114
4921: PUSH
4922: LD_INT 116
4924: PUSH
4925: LD_INT 117
4927: PUSH
4928: LD_INT 118
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 6409
4956: LD_INT 13
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 5172
4964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: LD_INT 8
4987: PUSH
4988: LD_INT 9
4990: PUSH
4991: LD_INT 10
4993: PUSH
4994: LD_INT 11
4996: PUSH
4997: LD_INT 12
4999: PUSH
5000: LD_INT 14
5002: PUSH
5003: LD_INT 15
5005: PUSH
5006: LD_INT 16
5008: PUSH
5009: LD_INT 17
5011: PUSH
5012: LD_INT 18
5014: PUSH
5015: LD_INT 19
5017: PUSH
5018: LD_INT 20
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 22
5026: PUSH
5027: LD_INT 23
5029: PUSH
5030: LD_INT 24
5032: PUSH
5033: LD_INT 25
5035: PUSH
5036: LD_INT 26
5038: PUSH
5039: LD_INT 27
5041: PUSH
5042: LD_INT 28
5044: PUSH
5045: LD_INT 30
5047: PUSH
5048: LD_INT 31
5050: PUSH
5051: LD_INT 32
5053: PUSH
5054: LD_INT 33
5056: PUSH
5057: LD_INT 34
5059: PUSH
5060: LD_INT 36
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 101
5098: PUSH
5099: LD_INT 102
5101: PUSH
5102: LD_INT 103
5104: PUSH
5105: LD_INT 104
5107: PUSH
5108: LD_INT 105
5110: PUSH
5111: LD_INT 106
5113: PUSH
5114: LD_INT 107
5116: PUSH
5117: LD_INT 108
5119: PUSH
5120: LD_INT 109
5122: PUSH
5123: LD_INT 110
5125: PUSH
5126: LD_INT 111
5128: PUSH
5129: LD_INT 112
5131: PUSH
5132: LD_INT 113
5134: PUSH
5135: LD_INT 114
5137: PUSH
5138: LD_INT 116
5140: PUSH
5141: LD_INT 117
5143: PUSH
5144: LD_INT 118
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: ST_TO_ADDR
5170: GO 6409
5172: LD_INT 14
5174: DOUBLE
5175: EQUAL
5176: IFTRUE 5180
5178: GO 5404
5180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5181: LD_ADDR_VAR 0 2
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 3
5194: PUSH
5195: LD_INT 4
5197: PUSH
5198: LD_INT 5
5200: PUSH
5201: LD_INT 6
5203: PUSH
5204: LD_INT 7
5206: PUSH
5207: LD_INT 8
5209: PUSH
5210: LD_INT 9
5212: PUSH
5213: LD_INT 10
5215: PUSH
5216: LD_INT 11
5218: PUSH
5219: LD_INT 12
5221: PUSH
5222: LD_INT 13
5224: PUSH
5225: LD_INT 14
5227: PUSH
5228: LD_INT 15
5230: PUSH
5231: LD_INT 16
5233: PUSH
5234: LD_INT 17
5236: PUSH
5237: LD_INT 18
5239: PUSH
5240: LD_INT 19
5242: PUSH
5243: LD_INT 20
5245: PUSH
5246: LD_INT 21
5248: PUSH
5249: LD_INT 22
5251: PUSH
5252: LD_INT 23
5254: PUSH
5255: LD_INT 24
5257: PUSH
5258: LD_INT 25
5260: PUSH
5261: LD_INT 26
5263: PUSH
5264: LD_INT 27
5266: PUSH
5267: LD_INT 28
5269: PUSH
5270: LD_INT 29
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 31
5278: PUSH
5279: LD_INT 32
5281: PUSH
5282: LD_INT 33
5284: PUSH
5285: LD_INT 34
5287: PUSH
5288: LD_INT 36
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 101
5330: PUSH
5331: LD_INT 102
5333: PUSH
5334: LD_INT 103
5336: PUSH
5337: LD_INT 104
5339: PUSH
5340: LD_INT 105
5342: PUSH
5343: LD_INT 106
5345: PUSH
5346: LD_INT 107
5348: PUSH
5349: LD_INT 108
5351: PUSH
5352: LD_INT 109
5354: PUSH
5355: LD_INT 110
5357: PUSH
5358: LD_INT 111
5360: PUSH
5361: LD_INT 112
5363: PUSH
5364: LD_INT 113
5366: PUSH
5367: LD_INT 114
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 117
5375: PUSH
5376: LD_INT 118
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: ST_TO_ADDR
5402: GO 6409
5404: LD_INT 15
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5636
5412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: LD_INT 1
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 3
5426: PUSH
5427: LD_INT 4
5429: PUSH
5430: LD_INT 5
5432: PUSH
5433: LD_INT 6
5435: PUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: LD_INT 11
5450: PUSH
5451: LD_INT 12
5453: PUSH
5454: LD_INT 13
5456: PUSH
5457: LD_INT 14
5459: PUSH
5460: LD_INT 15
5462: PUSH
5463: LD_INT 16
5465: PUSH
5466: LD_INT 17
5468: PUSH
5469: LD_INT 18
5471: PUSH
5472: LD_INT 19
5474: PUSH
5475: LD_INT 20
5477: PUSH
5478: LD_INT 21
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 23
5486: PUSH
5487: LD_INT 24
5489: PUSH
5490: LD_INT 25
5492: PUSH
5493: LD_INT 26
5495: PUSH
5496: LD_INT 27
5498: PUSH
5499: LD_INT 28
5501: PUSH
5502: LD_INT 29
5504: PUSH
5505: LD_INT 30
5507: PUSH
5508: LD_INT 31
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 33
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 36
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 101
5562: PUSH
5563: LD_INT 102
5565: PUSH
5566: LD_INT 103
5568: PUSH
5569: LD_INT 104
5571: PUSH
5572: LD_INT 105
5574: PUSH
5575: LD_INT 106
5577: PUSH
5578: LD_INT 107
5580: PUSH
5581: LD_INT 108
5583: PUSH
5584: LD_INT 109
5586: PUSH
5587: LD_INT 110
5589: PUSH
5590: LD_INT 111
5592: PUSH
5593: LD_INT 112
5595: PUSH
5596: LD_INT 113
5598: PUSH
5599: LD_INT 114
5601: PUSH
5602: LD_INT 116
5604: PUSH
5605: LD_INT 117
5607: PUSH
5608: LD_INT 118
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: ST_TO_ADDR
5634: GO 6409
5636: LD_INT 16
5638: DOUBLE
5639: EQUAL
5640: IFTRUE 5644
5642: GO 5780
5644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: LD_INT 5
5658: PUSH
5659: LD_INT 7
5661: PUSH
5662: LD_INT 11
5664: PUSH
5665: LD_INT 12
5667: PUSH
5668: LD_INT 15
5670: PUSH
5671: LD_INT 16
5673: PUSH
5674: LD_INT 20
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 25
5688: PUSH
5689: LD_INT 26
5691: PUSH
5692: LD_INT 30
5694: PUSH
5695: LD_INT 31
5697: PUSH
5698: LD_INT 32
5700: PUSH
5701: LD_INT 33
5703: PUSH
5704: LD_INT 34
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 101
5730: PUSH
5731: LD_INT 102
5733: PUSH
5734: LD_INT 103
5736: PUSH
5737: LD_INT 106
5739: PUSH
5740: LD_INT 108
5742: PUSH
5743: LD_INT 112
5745: PUSH
5746: LD_INT 113
5748: PUSH
5749: LD_INT 114
5751: PUSH
5752: LD_INT 116
5754: PUSH
5755: LD_INT 117
5757: PUSH
5758: LD_INT 118
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: ST_TO_ADDR
5778: GO 6409
5780: LD_INT 17
5782: DOUBLE
5783: EQUAL
5784: IFTRUE 5788
5786: GO 6012
5788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: LD_INT 4
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: LD_INT 6
5811: PUSH
5812: LD_INT 7
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: LD_INT 9
5820: PUSH
5821: LD_INT 10
5823: PUSH
5824: LD_INT 11
5826: PUSH
5827: LD_INT 12
5829: PUSH
5830: LD_INT 13
5832: PUSH
5833: LD_INT 14
5835: PUSH
5836: LD_INT 15
5838: PUSH
5839: LD_INT 16
5841: PUSH
5842: LD_INT 17
5844: PUSH
5845: LD_INT 18
5847: PUSH
5848: LD_INT 19
5850: PUSH
5851: LD_INT 20
5853: PUSH
5854: LD_INT 21
5856: PUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 23
5862: PUSH
5863: LD_INT 24
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 26
5871: PUSH
5872: LD_INT 27
5874: PUSH
5875: LD_INT 28
5877: PUSH
5878: LD_INT 29
5880: PUSH
5881: LD_INT 30
5883: PUSH
5884: LD_INT 31
5886: PUSH
5887: LD_INT 32
5889: PUSH
5890: LD_INT 33
5892: PUSH
5893: LD_INT 34
5895: PUSH
5896: LD_INT 36
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 101
5938: PUSH
5939: LD_INT 102
5941: PUSH
5942: LD_INT 103
5944: PUSH
5945: LD_INT 104
5947: PUSH
5948: LD_INT 105
5950: PUSH
5951: LD_INT 106
5953: PUSH
5954: LD_INT 107
5956: PUSH
5957: LD_INT 108
5959: PUSH
5960: LD_INT 109
5962: PUSH
5963: LD_INT 110
5965: PUSH
5966: LD_INT 111
5968: PUSH
5969: LD_INT 112
5971: PUSH
5972: LD_INT 113
5974: PUSH
5975: LD_INT 114
5977: PUSH
5978: LD_INT 116
5980: PUSH
5981: LD_INT 117
5983: PUSH
5984: LD_INT 118
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: ST_TO_ADDR
6010: GO 6409
6012: LD_INT 18
6014: DOUBLE
6015: EQUAL
6016: IFTRUE 6020
6018: GO 6168
6020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: LD_INT 5
6034: PUSH
6035: LD_INT 7
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 12
6043: PUSH
6044: LD_INT 15
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 20
6052: PUSH
6053: LD_INT 21
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_INT 23
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 26
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 31
6073: PUSH
6074: LD_INT 32
6076: PUSH
6077: LD_INT 33
6079: PUSH
6080: LD_INT 34
6082: PUSH
6083: LD_INT 35
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 101
6114: PUSH
6115: LD_INT 102
6117: PUSH
6118: LD_INT 103
6120: PUSH
6121: LD_INT 106
6123: PUSH
6124: LD_INT 108
6126: PUSH
6127: LD_INT 112
6129: PUSH
6130: LD_INT 113
6132: PUSH
6133: LD_INT 114
6135: PUSH
6136: LD_INT 115
6138: PUSH
6139: LD_INT 116
6141: PUSH
6142: LD_INT 117
6144: PUSH
6145: LD_INT 118
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: ST_TO_ADDR
6166: GO 6409
6168: LD_INT 19
6170: DOUBLE
6171: EQUAL
6172: IFTRUE 6176
6174: GO 6408
6176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6177: LD_ADDR_VAR 0 2
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: LD_INT 5
6196: PUSH
6197: LD_INT 6
6199: PUSH
6200: LD_INT 7
6202: PUSH
6203: LD_INT 8
6205: PUSH
6206: LD_INT 9
6208: PUSH
6209: LD_INT 10
6211: PUSH
6212: LD_INT 11
6214: PUSH
6215: LD_INT 12
6217: PUSH
6218: LD_INT 13
6220: PUSH
6221: LD_INT 14
6223: PUSH
6224: LD_INT 15
6226: PUSH
6227: LD_INT 16
6229: PUSH
6230: LD_INT 17
6232: PUSH
6233: LD_INT 18
6235: PUSH
6236: LD_INT 19
6238: PUSH
6239: LD_INT 20
6241: PUSH
6242: LD_INT 21
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 23
6250: PUSH
6251: LD_INT 24
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 26
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 28
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 30
6271: PUSH
6272: LD_INT 31
6274: PUSH
6275: LD_INT 32
6277: PUSH
6278: LD_INT 33
6280: PUSH
6281: LD_INT 34
6283: PUSH
6284: LD_INT 35
6286: PUSH
6287: LD_INT 36
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 101
6330: PUSH
6331: LD_INT 102
6333: PUSH
6334: LD_INT 103
6336: PUSH
6337: LD_INT 104
6339: PUSH
6340: LD_INT 105
6342: PUSH
6343: LD_INT 106
6345: PUSH
6346: LD_INT 107
6348: PUSH
6349: LD_INT 108
6351: PUSH
6352: LD_INT 109
6354: PUSH
6355: LD_INT 110
6357: PUSH
6358: LD_INT 111
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 113
6366: PUSH
6367: LD_INT 114
6369: PUSH
6370: LD_INT 115
6372: PUSH
6373: LD_INT 116
6375: PUSH
6376: LD_INT 117
6378: PUSH
6379: LD_INT 118
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 6409
6408: POP
// end else
6409: GO 6640
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6411: LD_ADDR_VAR 0 2
6415: PUSH
6416: LD_INT 1
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 6
6433: PUSH
6434: LD_INT 7
6436: PUSH
6437: LD_INT 8
6439: PUSH
6440: LD_INT 9
6442: PUSH
6443: LD_INT 10
6445: PUSH
6446: LD_INT 11
6448: PUSH
6449: LD_INT 12
6451: PUSH
6452: LD_INT 13
6454: PUSH
6455: LD_INT 14
6457: PUSH
6458: LD_INT 15
6460: PUSH
6461: LD_INT 16
6463: PUSH
6464: LD_INT 17
6466: PUSH
6467: LD_INT 18
6469: PUSH
6470: LD_INT 19
6472: PUSH
6473: LD_INT 20
6475: PUSH
6476: LD_INT 21
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 23
6484: PUSH
6485: LD_INT 24
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 26
6493: PUSH
6494: LD_INT 27
6496: PUSH
6497: LD_INT 28
6499: PUSH
6500: LD_INT 29
6502: PUSH
6503: LD_INT 30
6505: PUSH
6506: LD_INT 31
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 33
6514: PUSH
6515: LD_INT 34
6517: PUSH
6518: LD_INT 35
6520: PUSH
6521: LD_INT 36
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 101
6564: PUSH
6565: LD_INT 102
6567: PUSH
6568: LD_INT 103
6570: PUSH
6571: LD_INT 104
6573: PUSH
6574: LD_INT 105
6576: PUSH
6577: LD_INT 106
6579: PUSH
6580: LD_INT 107
6582: PUSH
6583: LD_INT 108
6585: PUSH
6586: LD_INT 109
6588: PUSH
6589: LD_INT 110
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 112
6597: PUSH
6598: LD_INT 113
6600: PUSH
6601: LD_INT 114
6603: PUSH
6604: LD_INT 115
6606: PUSH
6607: LD_INT 116
6609: PUSH
6610: LD_INT 117
6612: PUSH
6613: LD_INT 118
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ST_TO_ADDR
// if result then
6640: LD_VAR 0 2
6644: IFFALSE 7430
// begin normal :=  ;
6646: LD_ADDR_VAR 0 5
6650: PUSH
6651: LD_STRING 
6653: ST_TO_ADDR
// hardcore :=  ;
6654: LD_ADDR_VAR 0 6
6658: PUSH
6659: LD_STRING 
6661: ST_TO_ADDR
// active :=  ;
6662: LD_ADDR_VAR 0 7
6666: PUSH
6667: LD_STRING 
6669: ST_TO_ADDR
// for i = 1 to normalCounter do
6670: LD_ADDR_VAR 0 8
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_EXP 4
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6787
// begin tmp := 0 ;
6688: LD_ADDR_VAR 0 3
6692: PUSH
6693: LD_STRING 0
6695: ST_TO_ADDR
// if result [ 1 ] then
6696: LD_VAR 0 2
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: IFFALSE 6769
// if result [ 1 ] [ 1 ] = i then
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 8
6723: EQUAL
6724: IFFALSE 6769
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 3
6755: PPUSH
6756: CALL_OW 1
6760: ST_TO_ADDR
// tmp := 1 ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_STRING 1
6768: ST_TO_ADDR
// end ; normal := normal & tmp ;
6769: LD_ADDR_VAR 0 5
6773: PUSH
6774: LD_VAR 0 5
6778: PUSH
6779: LD_VAR 0 3
6783: STR
6784: ST_TO_ADDR
// end ;
6785: GO 6685
6787: POP
6788: POP
// for i = 1 to hardcoreCounter do
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_EXP 5
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6910
// begin tmp := 0 ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_STRING 0
6814: ST_TO_ADDR
// if result [ 2 ] then
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 2
6822: ARRAY
6823: IFFALSE 6892
// if result [ 2 ] [ 1 ] = 100 + i then
6825: LD_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: ARRAY
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PUSH
6838: LD_INT 100
6840: PUSH
6841: LD_VAR 0 8
6845: PLUS
6846: EQUAL
6847: IFFALSE 6892
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 2
6858: PPUSH
6859: LD_INT 2
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PPUSH
6871: LD_INT 1
6873: PPUSH
6874: CALL_OW 3
6878: PPUSH
6879: CALL_OW 1
6883: ST_TO_ADDR
// tmp := 1 ;
6884: LD_ADDR_VAR 0 3
6888: PUSH
6889: LD_STRING 1
6891: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 6
6901: PUSH
6902: LD_VAR 0 3
6906: STR
6907: ST_TO_ADDR
// end ;
6908: GO 6804
6910: POP
6911: POP
// if isGameLoad then
6912: LD_VAR 0 1
6916: IFFALSE 7391
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: LD_EXP 8
6927: PUSH
6928: LD_EXP 7
6932: PUSH
6933: LD_EXP 9
6937: PUSH
6938: LD_EXP 6
6942: PUSH
6943: LD_EXP 10
6947: PUSH
6948: LD_EXP 11
6952: PUSH
6953: LD_EXP 12
6957: PUSH
6958: LD_EXP 13
6962: PUSH
6963: LD_EXP 14
6967: PUSH
6968: LD_EXP 15
6972: PUSH
6973: LD_EXP 16
6977: PUSH
6978: LD_EXP 17
6982: PUSH
6983: LD_EXP 18
6987: PUSH
6988: LD_EXP 19
6992: PUSH
6993: LD_EXP 27
6997: PUSH
6998: LD_EXP 28
7002: PUSH
7003: LD_EXP 29
7007: PUSH
7008: LD_EXP 30
7012: PUSH
7013: LD_EXP 32
7017: PUSH
7018: LD_EXP 33
7022: PUSH
7023: LD_EXP 34
7027: PUSH
7028: LD_EXP 37
7032: PUSH
7033: LD_EXP 39
7037: PUSH
7038: LD_EXP 40
7042: PUSH
7043: LD_EXP 41
7047: PUSH
7048: LD_EXP 43
7052: PUSH
7053: LD_EXP 44
7057: PUSH
7058: LD_EXP 47
7062: PUSH
7063: LD_EXP 48
7067: PUSH
7068: LD_EXP 49
7072: PUSH
7073: LD_EXP 50
7077: PUSH
7078: LD_EXP 51
7082: PUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_EXP 53
7092: PUSH
7093: LD_EXP 54
7097: PUSH
7098: LD_EXP 55
7102: PUSH
7103: LD_EXP 20
7107: PUSH
7108: LD_EXP 21
7112: PUSH
7113: LD_EXP 24
7117: PUSH
7118: LD_EXP 25
7122: PUSH
7123: LD_EXP 26
7127: PUSH
7128: LD_EXP 22
7132: PUSH
7133: LD_EXP 23
7137: PUSH
7138: LD_EXP 31
7142: PUSH
7143: LD_EXP 35
7147: PUSH
7148: LD_EXP 36
7152: PUSH
7153: LD_EXP 38
7157: PUSH
7158: LD_EXP 42
7162: PUSH
7163: LD_EXP 45
7167: PUSH
7168: LD_EXP 46
7172: PUSH
7173: LD_EXP 56
7177: PUSH
7178: LD_EXP 57
7182: PUSH
7183: LD_EXP 58
7187: PUSH
7188: LD_EXP 59
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: ST_TO_ADDR
// tmp :=  ;
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_STRING 
7256: ST_TO_ADDR
// for i = 1 to normalCounter do
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_EXP 4
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7309
// begin if flags [ i ] then
7275: LD_VAR 0 4
7279: PUSH
7280: LD_VAR 0 8
7284: ARRAY
7285: IFFALSE 7307
// tmp := tmp & i & ; ;
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_VAR 0 3
7296: PUSH
7297: LD_VAR 0 8
7301: STR
7302: PUSH
7303: LD_STRING ;
7305: STR
7306: ST_TO_ADDR
// end ;
7307: GO 7272
7309: POP
7310: POP
// for i = 1 to hardcoreCounter do
7311: LD_ADDR_VAR 0 8
7315: PUSH
7316: DOUBLE
7317: LD_INT 1
7319: DEC
7320: ST_TO_ADDR
7321: LD_EXP 5
7325: PUSH
7326: FOR_TO
7327: IFFALSE 7373
// begin if flags [ normalCounter + i ] then
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 4
7338: PUSH
7339: LD_VAR 0 8
7343: PLUS
7344: ARRAY
7345: IFFALSE 7371
// tmp := tmp & ( 100 + i ) & ; ;
7347: LD_ADDR_VAR 0 3
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 100
7359: PUSH
7360: LD_VAR 0 8
7364: PLUS
7365: STR
7366: PUSH
7367: LD_STRING ;
7369: STR
7370: ST_TO_ADDR
// end ;
7371: GO 7326
7373: POP
7374: POP
// if tmp then
7375: LD_VAR 0 3
7379: IFFALSE 7391
// active := tmp ;
7381: LD_ADDR_VAR 0 7
7385: PUSH
7386: LD_VAR 0 3
7390: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7391: LD_STRING getStreamItemsFromMission("
7393: PUSH
7394: LD_VAR 0 5
7398: STR
7399: PUSH
7400: LD_STRING ","
7402: STR
7403: PUSH
7404: LD_VAR 0 6
7408: STR
7409: PUSH
7410: LD_STRING ","
7412: STR
7413: PUSH
7414: LD_VAR 0 7
7418: STR
7419: PUSH
7420: LD_STRING ")
7422: STR
7423: PPUSH
7424: CALL_OW 559
// end else
7428: GO 7437
// ToLua ( getStreamItemsFromMission("","","") ) ;
7430: LD_STRING getStreamItemsFromMission("","","")
7432: PPUSH
7433: CALL_OW 559
// end ;
7437: LD_VAR 0 2
7441: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7442: LD_EXP 3
7446: PUSH
7447: LD_EXP 8
7451: AND
7452: IFFALSE 7576
7454: GO 7456
7456: DISABLE
7457: LD_INT 0
7459: PPUSH
7460: PPUSH
// begin enable ;
7461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7462: LD_ADDR_VAR 0 2
7466: PUSH
7467: LD_INT 22
7469: PUSH
7470: LD_OWVAR 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 2
7481: PUSH
7482: LD_INT 34
7484: PUSH
7485: LD_INT 7
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 34
7494: PUSH
7495: LD_INT 45
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 28
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 47
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// if not tmp then
7538: LD_VAR 0 2
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 7576
// for i in tmp do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7574
// begin SetLives ( i , 0 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 0
7567: PPUSH
7568: CALL_OW 234
// end ;
7572: GO 7557
7574: POP
7575: POP
// end ;
7576: PPOPN 2
7578: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7579: LD_EXP 3
7583: PUSH
7584: LD_EXP 9
7588: AND
7589: IFFALSE 7673
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
// begin enable ;
7598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7599: LD_ADDR_VAR 0 2
7603: PUSH
7604: LD_INT 22
7606: PUSH
7607: LD_OWVAR 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 32
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PPUSH
7630: CALL_OW 69
7634: ST_TO_ADDR
// if not tmp then
7635: LD_VAR 0 2
7639: NOT
7640: IFFALSE 7644
// exit ;
7642: GO 7673
// for i in tmp do
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_VAR 0 2
7653: PUSH
7654: FOR_IN
7655: IFFALSE 7671
// begin SetLives ( i , 0 ) ;
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_INT 0
7664: PPUSH
7665: CALL_OW 234
// end ;
7669: GO 7654
7671: POP
7672: POP
// end ;
7673: PPOPN 2
7675: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7676: LD_EXP 3
7680: PUSH
7681: LD_EXP 6
7685: AND
7686: IFFALSE 7779
7688: GO 7690
7690: DISABLE
7691: LD_INT 0
7693: PPUSH
// begin enable ;
7694: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7695: LD_ADDR_VAR 0 1
7699: PUSH
7700: LD_INT 22
7702: PUSH
7703: LD_OWVAR 2
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 25
7717: PUSH
7718: LD_INT 5
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 25
7727: PUSH
7728: LD_INT 9
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 8
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 69
7759: PUSH
7760: FOR_IN
7761: IFFALSE 7777
// begin SetClass ( i , 1 ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: CALL_OW 336
// end ;
7775: GO 7760
7777: POP
7778: POP
// end ;
7779: PPOPN 1
7781: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7782: LD_EXP 3
7786: PUSH
7787: LD_EXP 7
7791: AND
7792: PUSH
7793: LD_OWVAR 65
7797: PUSH
7798: LD_INT 7
7800: LESS
7801: AND
7802: IFFALSE 7816
7804: GO 7806
7806: DISABLE
// begin enable ;
7807: ENABLE
// game_speed := 7 ;
7808: LD_ADDR_OWVAR 65
7812: PUSH
7813: LD_INT 7
7815: ST_TO_ADDR
// end ;
7816: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7817: LD_EXP 3
7821: PUSH
7822: LD_EXP 10
7826: AND
7827: IFFALSE 8029
7829: GO 7831
7831: DISABLE
7832: LD_INT 0
7834: PPUSH
7835: PPUSH
7836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 81
7844: PUSH
7845: LD_OWVAR 2
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 21
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// if not tmp then
7873: LD_VAR 0 3
7877: NOT
7878: IFFALSE 7882
// exit ;
7880: GO 8029
// if tmp > 5 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 5
7889: GREATER
7890: IFFALSE 7902
// k := 5 else
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 5
7899: ST_TO_ADDR
7900: GO 7912
// k := tmp ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 3
7911: ST_TO_ADDR
// for i := 1 to k do
7912: LD_ADDR_VAR 0 1
7916: PUSH
7917: DOUBLE
7918: LD_INT 1
7920: DEC
7921: ST_TO_ADDR
7922: LD_VAR 0 2
7926: PUSH
7927: FOR_TO
7928: IFFALSE 8027
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7930: LD_VAR 0 3
7934: PUSH
7935: LD_VAR 0 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 4
7948: MOD
7949: PUSH
7950: LD_INT 1
7952: PLUS
7953: PPUSH
7954: CALL_OW 259
7958: PUSH
7959: LD_INT 10
7961: LESS
7962: IFFALSE 8025
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7964: LD_VAR 0 3
7968: PUSH
7969: LD_VAR 0 1
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 1
7979: PUSH
7980: LD_INT 4
7982: MOD
7983: PUSH
7984: LD_INT 1
7986: PLUS
7987: PPUSH
7988: LD_VAR 0 3
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PPUSH
7999: LD_VAR 0 1
8003: PUSH
8004: LD_INT 4
8006: MOD
8007: PUSH
8008: LD_INT 1
8010: PLUS
8011: PPUSH
8012: CALL_OW 259
8016: PUSH
8017: LD_INT 1
8019: PLUS
8020: PPUSH
8021: CALL_OW 237
8025: GO 7927
8027: POP
8028: POP
// end ;
8029: PPOPN 3
8031: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8032: LD_EXP 3
8036: PUSH
8037: LD_EXP 11
8041: AND
8042: IFFALSE 8062
8044: GO 8046
8046: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8047: LD_INT 4
8049: PPUSH
8050: LD_OWVAR 2
8054: PPUSH
8055: LD_INT 0
8057: PPUSH
8058: CALL_OW 324
8062: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8063: LD_EXP 3
8067: PUSH
8068: LD_EXP 40
8072: AND
8073: IFFALSE 8093
8075: GO 8077
8077: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8078: LD_INT 19
8080: PPUSH
8081: LD_OWVAR 2
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 324
8093: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8094: LD_EXP 3
8098: PUSH
8099: LD_EXP 12
8103: AND
8104: IFFALSE 8206
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin enable ;
8113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_OWVAR 2
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: LD_INT 34
8136: PUSH
8137: LD_INT 11
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 34
8146: PUSH
8147: LD_INT 30
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: ST_TO_ADDR
// if not tmp then
8168: LD_VAR 0 2
8172: NOT
8173: IFFALSE 8177
// exit ;
8175: GO 8206
// for i in tmp do
8177: LD_ADDR_VAR 0 1
8181: PUSH
8182: LD_VAR 0 2
8186: PUSH
8187: FOR_IN
8188: IFFALSE 8204
// begin SetLives ( i , 0 ) ;
8190: LD_VAR 0 1
8194: PPUSH
8195: LD_INT 0
8197: PPUSH
8198: CALL_OW 234
// end ;
8202: GO 8187
8204: POP
8205: POP
// end ;
8206: PPOPN 2
8208: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8209: LD_EXP 3
8213: PUSH
8214: LD_EXP 13
8218: AND
8219: IFFALSE 8239
8221: GO 8223
8223: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8224: LD_INT 32
8226: PPUSH
8227: LD_OWVAR 2
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 324
8239: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8240: LD_EXP 3
8244: PUSH
8245: LD_EXP 14
8249: AND
8250: IFFALSE 8431
8252: GO 8254
8254: DISABLE
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8260: LD_ADDR_VAR 0 2
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_OWVAR 2
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 33
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 69
8295: ST_TO_ADDR
// if not tmp then
8296: LD_VAR 0 2
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8431
// side := 0 ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// for i := 1 to 8 do
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: DOUBLE
8319: LD_INT 1
8321: DEC
8322: ST_TO_ADDR
8323: LD_INT 8
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8375
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8329: LD_OWVAR 2
8333: PUSH
8334: LD_VAR 0 1
8338: NONEQUAL
8339: PUSH
8340: LD_OWVAR 2
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 81
8354: PUSH
8355: LD_INT 2
8357: EQUAL
8358: AND
8359: IFFALSE 8373
// begin side := i ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_VAR 0 1
8370: ST_TO_ADDR
// break ;
8371: GO 8375
// end ;
8373: GO 8326
8375: POP
8376: POP
// if not side then
8377: LD_VAR 0 3
8381: NOT
8382: IFFALSE 8386
// exit ;
8384: GO 8431
// for i := 1 to tmp do
8386: LD_ADDR_VAR 0 1
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_VAR 0 2
8400: PUSH
8401: FOR_TO
8402: IFFALSE 8429
// if Prob ( 60 ) then
8404: LD_INT 60
8406: PPUSH
8407: CALL_OW 13
8411: IFFALSE 8427
// SetSide ( i , side ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 3
8422: PPUSH
8423: CALL_OW 235
8427: GO 8401
8429: POP
8430: POP
// end ;
8431: PPOPN 3
8433: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8434: LD_EXP 3
8438: PUSH
8439: LD_EXP 16
8443: AND
8444: IFFALSE 8563
8446: GO 8448
8448: DISABLE
8449: LD_INT 0
8451: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8452: LD_ADDR_VAR 0 1
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_OWVAR 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 0
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: FOR_IN
8507: IFFALSE 8561
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 257
8518: PUSH
8519: LD_INT 1
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: IN
8537: IFFALSE 8559
// SetClass ( un , rand ( 1 , 4 ) ) ;
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 4
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 336
8559: GO 8506
8561: POP
8562: POP
// end ;
8563: PPOPN 1
8565: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8566: LD_EXP 3
8570: PUSH
8571: LD_EXP 15
8575: AND
8576: IFFALSE 8655
8578: GO 8580
8580: DISABLE
8581: LD_INT 0
8583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8584: LD_ADDR_VAR 0 1
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_OWVAR 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
// if not tmp then
8620: LD_VAR 0 1
8624: NOT
8625: IFFALSE 8629
// exit ;
8627: GO 8655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8629: LD_VAR 0 1
8633: PUSH
8634: LD_INT 1
8636: PPUSH
8637: LD_VAR 0 1
8641: PPUSH
8642: CALL_OW 12
8646: ARRAY
8647: PPUSH
8648: LD_INT 100
8650: PPUSH
8651: CALL_OW 234
// end ;
8655: PPOPN 1
8657: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8658: LD_EXP 3
8662: PUSH
8663: LD_EXP 17
8667: AND
8668: IFFALSE 8766
8670: GO 8672
8672: DISABLE
8673: LD_INT 0
8675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_OWVAR 2
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: ST_TO_ADDR
// if not tmp then
8712: LD_VAR 0 1
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 8766
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 12
8738: ARRAY
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: LD_INT 4
8745: PPUSH
8746: CALL_OW 12
8750: PPUSH
8751: LD_INT 3000
8753: PPUSH
8754: LD_INT 9000
8756: PPUSH
8757: CALL_OW 12
8761: PPUSH
8762: CALL_OW 492
// end ;
8766: PPOPN 1
8768: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8769: LD_EXP 3
8773: PUSH
8774: LD_EXP 18
8778: AND
8779: IFFALSE 8799
8781: GO 8783
8783: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8784: LD_INT 1
8786: PPUSH
8787: LD_OWVAR 2
8791: PPUSH
8792: LD_INT 0
8794: PPUSH
8795: CALL_OW 324
8799: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8800: LD_EXP 3
8804: PUSH
8805: LD_EXP 19
8809: AND
8810: IFFALSE 8893
8812: GO 8814
8814: DISABLE
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8819: LD_ADDR_VAR 0 2
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_OWVAR 2
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: ST_TO_ADDR
// if not tmp then
8855: LD_VAR 0 2
8859: NOT
8860: IFFALSE 8864
// exit ;
8862: GO 8893
// for i in tmp do
8864: LD_ADDR_VAR 0 1
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: FOR_IN
8875: IFFALSE 8891
// SetBLevel ( i , 10 ) ;
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_INT 10
8884: PPUSH
8885: CALL_OW 241
8889: GO 8874
8891: POP
8892: POP
// end ;
8893: PPOPN 2
8895: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8896: LD_EXP 3
8900: PUSH
8901: LD_EXP 20
8905: AND
8906: IFFALSE 9017
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8916: LD_ADDR_VAR 0 3
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_OWVAR 2
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL_OW 69
8951: ST_TO_ADDR
// if not tmp then
8952: LD_VAR 0 3
8956: NOT
8957: IFFALSE 8961
// exit ;
8959: GO 9017
// un := tmp [ rand ( 1 , tmp ) ] ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 3
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: ST_TO_ADDR
// if Crawls ( un ) then
8985: LD_VAR 0 2
8989: PPUSH
8990: CALL_OW 318
8994: IFFALSE 9005
// ComWalk ( un ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9005: LD_VAR 0 2
9009: PPUSH
9010: LD_INT 5
9012: PPUSH
9013: CALL_OW 336
// end ;
9017: PPOPN 3
9019: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9020: LD_EXP 3
9024: PUSH
9025: LD_EXP 21
9029: AND
9030: PUSH
9031: LD_OWVAR 67
9035: PUSH
9036: LD_INT 4
9038: LESS
9039: AND
9040: IFFALSE 9059
9042: GO 9044
9044: DISABLE
// begin Difficulty := Difficulty + 1 ;
9045: LD_ADDR_OWVAR 67
9049: PUSH
9050: LD_OWVAR 67
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end ;
9059: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9060: LD_EXP 3
9064: PUSH
9065: LD_EXP 22
9069: AND
9070: IFFALSE 9173
9072: GO 9074
9074: DISABLE
9075: LD_INT 0
9077: PPUSH
// begin for i := 1 to 5 do
9078: LD_ADDR_VAR 0 1
9082: PUSH
9083: DOUBLE
9084: LD_INT 1
9086: DEC
9087: ST_TO_ADDR
9088: LD_INT 5
9090: PUSH
9091: FOR_TO
9092: IFFALSE 9171
// begin uc_nation := nation_nature ;
9094: LD_ADDR_OWVAR 21
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// uc_side := 0 ;
9102: LD_ADDR_OWVAR 20
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9110: LD_ADDR_OWVAR 29
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 12
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: ST_TO_ADDR
// hc_agressivity := 20 ;
9125: LD_ADDR_OWVAR 35
9129: PUSH
9130: LD_INT 20
9132: ST_TO_ADDR
// hc_class := class_tiger ;
9133: LD_ADDR_OWVAR 28
9137: PUSH
9138: LD_INT 14
9140: ST_TO_ADDR
// hc_gallery :=  ;
9141: LD_ADDR_OWVAR 33
9145: PUSH
9146: LD_STRING 
9148: ST_TO_ADDR
// hc_name :=  ;
9149: LD_ADDR_OWVAR 26
9153: PUSH
9154: LD_STRING 
9156: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9157: CALL_OW 44
9161: PPUSH
9162: LD_INT 0
9164: PPUSH
9165: CALL_OW 51
// end ;
9169: GO 9091
9171: POP
9172: POP
// end ;
9173: PPOPN 1
9175: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9176: LD_EXP 3
9180: PUSH
9181: LD_EXP 23
9185: AND
9186: IFFALSE 9195
9188: GO 9190
9190: DISABLE
// StreamSibBomb ;
9191: CALL 9196 0 0
9195: END
// export function StreamSibBomb ; var i , x , y ; begin
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// result := false ;
9202: LD_ADDR_VAR 0 1
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// for i := 1 to 16 do
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: DOUBLE
9216: LD_INT 1
9218: DEC
9219: ST_TO_ADDR
9220: LD_INT 16
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9423
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9226: LD_ADDR_VAR 0 3
9230: PUSH
9231: LD_INT 10
9233: PUSH
9234: LD_INT 20
9236: PUSH
9237: LD_INT 30
9239: PUSH
9240: LD_INT 40
9242: PUSH
9243: LD_INT 50
9245: PUSH
9246: LD_INT 60
9248: PUSH
9249: LD_INT 70
9251: PUSH
9252: LD_INT 80
9254: PUSH
9255: LD_INT 90
9257: PUSH
9258: LD_INT 100
9260: PUSH
9261: LD_INT 110
9263: PUSH
9264: LD_INT 120
9266: PUSH
9267: LD_INT 130
9269: PUSH
9270: LD_INT 140
9272: PUSH
9273: LD_INT 150
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 1
9295: PPUSH
9296: LD_INT 15
9298: PPUSH
9299: CALL_OW 12
9303: ARRAY
9304: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9305: LD_ADDR_VAR 0 4
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 20
9315: PUSH
9316: LD_INT 30
9318: PUSH
9319: LD_INT 40
9321: PUSH
9322: LD_INT 50
9324: PUSH
9325: LD_INT 60
9327: PUSH
9328: LD_INT 70
9330: PUSH
9331: LD_INT 80
9333: PUSH
9334: LD_INT 90
9336: PUSH
9337: LD_INT 100
9339: PUSH
9340: LD_INT 110
9342: PUSH
9343: LD_INT 120
9345: PUSH
9346: LD_INT 130
9348: PUSH
9349: LD_INT 140
9351: PUSH
9352: LD_INT 150
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 15
9377: PPUSH
9378: CALL_OW 12
9382: ARRAY
9383: ST_TO_ADDR
// if ValidHex ( x , y ) then
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_VAR 0 4
9393: PPUSH
9394: CALL_OW 488
9398: IFFALSE 9421
// begin result := [ x , y ] ;
9400: LD_ADDR_VAR 0 1
9404: PUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_VAR 0 4
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: ST_TO_ADDR
// break ;
9419: GO 9423
// end ; end ;
9421: GO 9223
9423: POP
9424: POP
// if result then
9425: LD_VAR 0 1
9429: IFFALSE 9489
// begin ToLua ( playSibBomb() ) ;
9431: LD_STRING playSibBomb()
9433: PPUSH
9434: CALL_OW 559
// wait ( 0 0$14 ) ;
9438: LD_INT 490
9440: PPUSH
9441: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9445: LD_VAR 0 1
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: PPUSH
9454: LD_VAR 0 1
9458: PUSH
9459: LD_INT 2
9461: ARRAY
9462: PPUSH
9463: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9467: LD_VAR 0 1
9471: PUSH
9472: LD_INT 1
9474: ARRAY
9475: PPUSH
9476: LD_VAR 0 1
9480: PUSH
9481: LD_INT 2
9483: ARRAY
9484: PPUSH
9485: CALL_OW 429
// end ; end ;
9489: LD_VAR 0 1
9493: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9494: LD_EXP 3
9498: PUSH
9499: LD_EXP 25
9503: AND
9504: IFFALSE 9516
9506: GO 9508
9508: DISABLE
// YouLost (  ) ;
9509: LD_STRING 
9511: PPUSH
9512: CALL_OW 104
9516: END
// every 0 0$1 trigger StreamModeActive and sFog do
9517: LD_EXP 3
9521: PUSH
9522: LD_EXP 24
9526: AND
9527: IFFALSE 9541
9529: GO 9531
9531: DISABLE
// FogOff ( your_side ) ;
9532: LD_OWVAR 2
9536: PPUSH
9537: CALL_OW 344
9541: END
// every 0 0$1 trigger StreamModeActive and sSun do
9542: LD_EXP 3
9546: PUSH
9547: LD_EXP 26
9551: AND
9552: IFFALSE 9580
9554: GO 9556
9556: DISABLE
// begin solar_recharge_percent := 0 ;
9557: LD_ADDR_OWVAR 79
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9565: LD_INT 10500
9567: PPUSH
9568: CALL_OW 67
// solar_recharge_percent := 100 ;
9572: LD_ADDR_OWVAR 79
9576: PUSH
9577: LD_INT 100
9579: ST_TO_ADDR
// end ;
9580: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9581: LD_EXP 3
9585: PUSH
9586: LD_EXP 27
9590: AND
9591: IFFALSE 9830
9593: GO 9595
9595: DISABLE
9596: LD_INT 0
9598: PPUSH
9599: PPUSH
9600: PPUSH
// begin tmp := [ ] ;
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: EMPTY
9607: ST_TO_ADDR
// for i := 1 to 6 do
9608: LD_ADDR_VAR 0 1
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 6
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9727
// begin uc_nation := nation_nature ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// uc_side := 0 ;
9632: LD_ADDR_OWVAR 20
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9640: LD_ADDR_OWVAR 29
9644: PUSH
9645: LD_INT 12
9647: PUSH
9648: LD_INT 12
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_agressivity := 20 ;
9655: LD_ADDR_OWVAR 35
9659: PUSH
9660: LD_INT 20
9662: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9663: LD_ADDR_OWVAR 28
9667: PUSH
9668: LD_INT 17
9670: ST_TO_ADDR
// hc_gallery :=  ;
9671: LD_ADDR_OWVAR 33
9675: PUSH
9676: LD_STRING 
9678: ST_TO_ADDR
// hc_name :=  ;
9679: LD_ADDR_OWVAR 26
9683: PUSH
9684: LD_STRING 
9686: ST_TO_ADDR
// un := CreateHuman ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9697: LD_VAR 0 2
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 51
// tmp := tmp ^ un ;
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_VAR 0 3
9718: PUSH
9719: LD_VAR 0 2
9723: ADD
9724: ST_TO_ADDR
// end ;
9725: GO 9621
9727: POP
9728: POP
// repeat wait ( 0 0$1 ) ;
9729: LD_INT 35
9731: PPUSH
9732: CALL_OW 67
// for un in tmp do
9736: LD_ADDR_VAR 0 2
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9821
// begin if IsDead ( un ) then
9749: LD_VAR 0 2
9753: PPUSH
9754: CALL_OW 301
9758: IFFALSE 9778
// begin tmp := tmp diff un ;
9760: LD_ADDR_VAR 0 3
9764: PUSH
9765: LD_VAR 0 3
9769: PUSH
9770: LD_VAR 0 2
9774: DIFF
9775: ST_TO_ADDR
// continue ;
9776: GO 9746
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9778: LD_VAR 0 2
9782: PPUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 0
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: PPUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 74
9814: PPUSH
9815: CALL_OW 115
// end ;
9819: GO 9746
9821: POP
9822: POP
// until not tmp ;
9823: LD_VAR 0 3
9827: NOT
9828: IFFALSE 9729
// end ;
9830: PPOPN 3
9832: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9833: LD_EXP 3
9837: PUSH
9838: LD_EXP 28
9842: AND
9843: IFFALSE 9897
9845: GO 9847
9847: DISABLE
// begin ToLua ( displayTroll(); ) ;
9848: LD_STRING displayTroll();
9850: PPUSH
9851: CALL_OW 559
// wait ( 3 3$00 ) ;
9855: LD_INT 6300
9857: PPUSH
9858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9862: LD_STRING hideTroll();
9864: PPUSH
9865: CALL_OW 559
// wait ( 1 1$00 ) ;
9869: LD_INT 2100
9871: PPUSH
9872: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9876: LD_STRING displayTroll();
9878: PPUSH
9879: CALL_OW 559
// wait ( 1 1$00 ) ;
9883: LD_INT 2100
9885: PPUSH
9886: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9890: LD_STRING hideTroll();
9892: PPUSH
9893: CALL_OW 559
// end ;
9897: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9898: LD_EXP 3
9902: PUSH
9903: LD_EXP 29
9907: AND
9908: IFFALSE 9971
9910: GO 9912
9912: DISABLE
9913: LD_INT 0
9915: PPUSH
// begin p := 0 ;
9916: LD_ADDR_VAR 0 1
9920: PUSH
9921: LD_INT 0
9923: ST_TO_ADDR
// repeat game_speed := 1 ;
9924: LD_ADDR_OWVAR 65
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9932: LD_INT 35
9934: PPUSH
9935: CALL_OW 67
// p := p + 1 ;
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: LD_INT 1
9951: PLUS
9952: ST_TO_ADDR
// until p >= 60 ;
9953: LD_VAR 0 1
9957: PUSH
9958: LD_INT 60
9960: GREATEREQUAL
9961: IFFALSE 9924
// game_speed := 4 ;
9963: LD_ADDR_OWVAR 65
9967: PUSH
9968: LD_INT 4
9970: ST_TO_ADDR
// end ;
9971: PPOPN 1
9973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9974: LD_EXP 3
9978: PUSH
9979: LD_EXP 30
9983: AND
9984: IFFALSE 10130
9986: GO 9988
9988: DISABLE
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9993: LD_ADDR_VAR 0 1
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_OWVAR 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 30
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: ST_TO_ADDR
// if not depot then
10047: LD_VAR 0 1
10051: NOT
10052: IFFALSE 10056
// exit ;
10054: GO 10130
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10056: LD_ADDR_VAR 0 2
10060: PUSH
10061: LD_VAR 0 1
10065: PUSH
10066: LD_INT 1
10068: PPUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 12
10078: ARRAY
10079: PPUSH
10080: CALL_OW 274
10084: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10085: LD_VAR 0 2
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: LD_INT 2
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10115: LD_VAR 0 2
10119: PPUSH
10120: LD_INT 3
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 277
// end ;
10130: PPOPN 2
10132: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10133: LD_EXP 3
10137: PUSH
10138: LD_EXP 31
10142: AND
10143: IFFALSE 10240
10145: GO 10147
10147: DISABLE
10148: LD_INT 0
10150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10151: LD_ADDR_VAR 0 1
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_OWVAR 2
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 3
10180: PUSH
10181: LD_INT 23
10183: PUSH
10184: LD_INT 0
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 69
10204: ST_TO_ADDR
// if not tmp then
10205: LD_VAR 0 1
10209: NOT
10210: IFFALSE 10214
// exit ;
10212: GO 10240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10214: LD_VAR 0 1
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_VAR 0 1
10226: PPUSH
10227: CALL_OW 12
10231: ARRAY
10232: PPUSH
10233: LD_INT 200
10235: PPUSH
10236: CALL_OW 234
// end ;
10240: PPOPN 1
10242: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10243: LD_EXP 3
10247: PUSH
10248: LD_EXP 32
10252: AND
10253: IFFALSE 10332
10255: GO 10257
10257: DISABLE
10258: LD_INT 0
10260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_OWVAR 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 69
10296: ST_TO_ADDR
// if not tmp then
10297: LD_VAR 0 1
10301: NOT
10302: IFFALSE 10306
// exit ;
10304: GO 10332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10306: LD_VAR 0 1
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 12
10323: ARRAY
10324: PPUSH
10325: LD_INT 60
10327: PPUSH
10328: CALL_OW 234
// end ;
10332: PPOPN 1
10334: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10335: LD_EXP 3
10339: PUSH
10340: LD_EXP 33
10344: AND
10345: IFFALSE 10444
10347: GO 10349
10349: DISABLE
10350: LD_INT 0
10352: PPUSH
10353: PPUSH
// begin enable ;
10354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10355: LD_ADDR_VAR 0 1
10359: PUSH
10360: LD_INT 22
10362: PUSH
10363: LD_OWVAR 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 61
10374: PUSH
10375: EMPTY
10376: LIST
10377: PUSH
10378: LD_INT 33
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// if not tmp then
10398: LD_VAR 0 1
10402: NOT
10403: IFFALSE 10407
// exit ;
10405: GO 10444
// for i in tmp do
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_VAR 0 1
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10442
// if IsControledBy ( i ) then
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL_OW 312
10429: IFFALSE 10440
// ComUnlink ( i ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: CALL_OW 136
10440: GO 10417
10442: POP
10443: POP
// end ;
10444: PPOPN 2
10446: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10447: LD_EXP 3
10451: PUSH
10452: LD_EXP 34
10456: AND
10457: IFFALSE 10597
10459: GO 10461
10461: DISABLE
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
// begin ToLua ( displayPowell(); ) ;
10466: LD_STRING displayPowell();
10468: PPUSH
10469: CALL_OW 559
// uc_side := 0 ;
10473: LD_ADDR_OWVAR 20
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// uc_nation := 2 ;
10481: LD_ADDR_OWVAR 21
10485: PUSH
10486: LD_INT 2
10488: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10489: LD_ADDR_OWVAR 37
10493: PUSH
10494: LD_INT 14
10496: ST_TO_ADDR
// vc_engine := engine_siberite ;
10497: LD_ADDR_OWVAR 39
10501: PUSH
10502: LD_INT 3
10504: ST_TO_ADDR
// vc_control := control_apeman ;
10505: LD_ADDR_OWVAR 38
10509: PUSH
10510: LD_INT 5
10512: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10513: LD_ADDR_OWVAR 40
10517: PUSH
10518: LD_INT 29
10520: ST_TO_ADDR
// un := CreateVehicle ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: CALL_OW 45
10530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10543: LD_INT 35
10545: PPUSH
10546: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 22
10557: PUSH
10558: LD_OWVAR 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL_OW 69
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL_OW 74
10581: PPUSH
10582: CALL_OW 115
// until IsDead ( un ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 301
10595: IFFALSE 10543
// end ;
10597: PPOPN 2
10599: END
// every 0 0$1 trigger StreamModeActive and sStu do
10600: LD_EXP 3
10604: PUSH
10605: LD_EXP 42
10609: AND
10610: IFFALSE 10626
10612: GO 10614
10614: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10615: LD_STRING displayStucuk();
10617: PPUSH
10618: CALL_OW 559
// ResetFog ;
10622: CALL_OW 335
// end ;
10626: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10627: LD_EXP 3
10631: PUSH
10632: LD_EXP 35
10636: AND
10637: IFFALSE 10778
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_OWVAR 2
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 69
10681: ST_TO_ADDR
// if not tmp then
10682: LD_VAR 0 2
10686: NOT
10687: IFFALSE 10691
// exit ;
10689: GO 10778
// un := tmp [ rand ( 1 , tmp ) ] ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 12
10713: ARRAY
10714: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: LD_INT 0
10722: PPUSH
10723: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: PPUSH
10753: CALL_OW 115
// wait ( 0 0$20 ) ;
10757: LD_INT 700
10759: PPUSH
10760: CALL_OW 67
// SetSide ( un , your_side ) ;
10764: LD_VAR 0 1
10768: PPUSH
10769: LD_OWVAR 2
10773: PPUSH
10774: CALL_OW 235
// end ;
10778: PPOPN 2
10780: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10781: LD_EXP 3
10785: PUSH
10786: LD_EXP 36
10790: AND
10791: IFFALSE 10897
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_OWVAR 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 0
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 30
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// if not depot then
10853: LD_VAR 0 1
10857: NOT
10858: IFFALSE 10862
// exit ;
10860: GO 10897
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10862: LD_VAR 0 1
10866: PUSH
10867: LD_INT 1
10869: ARRAY
10870: PPUSH
10871: CALL_OW 250
10875: PPUSH
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 1
10883: ARRAY
10884: PPUSH
10885: CALL_OW 251
10889: PPUSH
10890: LD_INT 70
10892: PPUSH
10893: CALL_OW 495
// end ;
10897: PPOPN 1
10899: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10900: LD_EXP 3
10904: PUSH
10905: LD_EXP 37
10909: AND
10910: IFFALSE 11121
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10922: LD_ADDR_VAR 0 5
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_OWVAR 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: ST_TO_ADDR
// if not tmp then
10958: LD_VAR 0 5
10962: NOT
10963: IFFALSE 10967
// exit ;
10965: GO 11121
// for i in tmp do
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_VAR 0 5
10976: PUSH
10977: FOR_IN
10978: IFFALSE 11119
// begin d := rand ( 0 , 5 ) ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 0
10987: PPUSH
10988: LD_INT 5
10990: PPUSH
10991: CALL_OW 12
10995: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10996: LD_ADDR_VAR 0 2
11000: PUSH
11001: LD_VAR 0 1
11005: PPUSH
11006: CALL_OW 250
11010: PPUSH
11011: LD_VAR 0 4
11015: PPUSH
11016: LD_INT 3
11018: PPUSH
11019: LD_INT 12
11021: PPUSH
11022: CALL_OW 12
11026: PPUSH
11027: CALL_OW 272
11031: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 251
11046: PPUSH
11047: LD_VAR 0 4
11051: PPUSH
11052: LD_INT 3
11054: PPUSH
11055: LD_INT 12
11057: PPUSH
11058: CALL_OW 12
11062: PPUSH
11063: CALL_OW 273
11067: ST_TO_ADDR
// if ValidHex ( x , y ) then
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: CALL_OW 488
11082: IFFALSE 11117
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11084: LD_VAR 0 1
11088: PPUSH
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 3
11101: PPUSH
11102: LD_INT 6
11104: PPUSH
11105: CALL_OW 12
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 483
// end ;
11117: GO 10977
11119: POP
11120: POP
// end ;
11121: PPOPN 5
11123: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11124: LD_EXP 3
11128: PUSH
11129: LD_EXP 38
11133: AND
11134: IFFALSE 11228
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_OWVAR 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 32
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 2
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11228
// for i in tmp do
11199: LD_ADDR_VAR 0 1
11203: PUSH
11204: LD_VAR 0 2
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11226
// SetFuel ( i , 0 ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 240
11224: GO 11209
11226: POP
11227: POP
// end ;
11228: PPOPN 2
11230: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11231: LD_EXP 3
11235: PUSH
11236: LD_EXP 39
11240: AND
11241: IFFALSE 11307
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11249: LD_ADDR_VAR 0 1
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_OWVAR 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 30
11268: PUSH
11269: LD_INT 29
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: ST_TO_ADDR
// if not tmp then
11285: LD_VAR 0 1
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11307
// DestroyUnit ( tmp [ 1 ] ) ;
11294: LD_VAR 0 1
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: PPUSH
11303: CALL_OW 65
// end ;
11307: PPOPN 1
11309: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11310: LD_EXP 3
11314: PUSH
11315: LD_EXP 41
11319: AND
11320: IFFALSE 11449
11322: GO 11324
11324: DISABLE
11325: LD_INT 0
11327: PPUSH
// begin uc_side := 0 ;
11328: LD_ADDR_OWVAR 20
11332: PUSH
11333: LD_INT 0
11335: ST_TO_ADDR
// uc_nation := nation_arabian ;
11336: LD_ADDR_OWVAR 21
11340: PUSH
11341: LD_INT 2
11343: ST_TO_ADDR
// hc_gallery :=  ;
11344: LD_ADDR_OWVAR 33
11348: PUSH
11349: LD_STRING 
11351: ST_TO_ADDR
// hc_name :=  ;
11352: LD_ADDR_OWVAR 26
11356: PUSH
11357: LD_STRING 
11359: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11360: LD_INT 1
11362: PPUSH
11363: LD_INT 11
11365: PPUSH
11366: LD_INT 10
11368: PPUSH
11369: CALL_OW 380
// un := CreateHuman ;
11373: LD_ADDR_VAR 0 1
11377: PUSH
11378: CALL_OW 44
11382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_INT 22
11409: PUSH
11410: LD_OWVAR 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PPUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 74
11433: PPUSH
11434: CALL_OW 115
// until IsDead ( un ) ;
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 301
11447: IFFALSE 11395
// end ;
11449: PPOPN 1
11451: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11452: LD_EXP 3
11456: PUSH
11457: LD_EXP 43
11461: AND
11462: IFFALSE 11474
11464: GO 11466
11466: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11467: LD_STRING earthquake(getX(game), 0, 32)
11469: PPUSH
11470: CALL_OW 559
11474: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11475: LD_EXP 3
11479: PUSH
11480: LD_EXP 44
11484: AND
11485: IFFALSE 11576
11487: GO 11489
11489: DISABLE
11490: LD_INT 0
11492: PPUSH
// begin enable ;
11493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_OWVAR 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 69
11540: ST_TO_ADDR
// if not tmp then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11550
// exit ;
11548: GO 11576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11550: LD_VAR 0 1
11554: PUSH
11555: LD_INT 1
11557: PPUSH
11558: LD_VAR 0 1
11562: PPUSH
11563: CALL_OW 12
11567: ARRAY
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 234
// end ;
11576: PPOPN 1
11578: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11579: LD_EXP 3
11583: PUSH
11584: LD_EXP 45
11588: AND
11589: IFFALSE 11730
11591: GO 11593
11593: DISABLE
11594: LD_INT 0
11596: PPUSH
11597: PPUSH
11598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_OWVAR 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: ST_TO_ADDR
// if not tmp then
11635: LD_VAR 0 3
11639: NOT
11640: IFFALSE 11644
// exit ;
11642: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11644: LD_ADDR_VAR 0 2
11648: PUSH
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: ST_TO_ADDR
// if Crawls ( un ) then
11668: LD_VAR 0 2
11672: PPUSH
11673: CALL_OW 318
11677: IFFALSE 11688
// ComWalk ( un ) ;
11679: LD_VAR 0 2
11683: PPUSH
11684: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_INT 9
11695: PPUSH
11696: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11700: LD_INT 28
11702: PPUSH
11703: LD_OWVAR 2
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11715: LD_INT 29
11717: PPUSH
11718: LD_OWVAR 2
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 322
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11733: LD_EXP 3
11737: PUSH
11738: LD_EXP 46
11742: AND
11743: IFFALSE 11854
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11753: LD_ADDR_VAR 0 3
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PPUSH
11784: CALL_OW 69
11788: ST_TO_ADDR
// if not tmp then
11789: LD_VAR 0 3
11793: NOT
11794: IFFALSE 11798
// exit ;
11796: GO 11854
// un := tmp [ rand ( 1 , tmp ) ] ;
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_VAR 0 3
11807: PUSH
11808: LD_INT 1
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: CALL_OW 12
11820: ARRAY
11821: ST_TO_ADDR
// if Crawls ( un ) then
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 318
11831: IFFALSE 11842
// ComWalk ( un ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 8
11849: PPUSH
11850: CALL_OW 336
// end ;
11854: PPOPN 3
11856: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11857: LD_EXP 3
11861: PUSH
11862: LD_EXP 47
11866: AND
11867: IFFALSE 12011
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_OWVAR 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: LD_INT 34
11908: PUSH
11909: LD_INT 12
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 34
11918: PUSH
11919: LD_INT 51
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 69
11951: ST_TO_ADDR
// if not tmp then
11952: LD_VAR 0 2
11956: NOT
11957: IFFALSE 11961
// exit ;
11959: GO 12011
// for i in tmp do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: LD_VAR 0 2
11970: PUSH
11971: FOR_IN
11972: IFFALSE 12009
// if GetCargo ( i , mat_artifact ) = 0 then
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 4
11981: PPUSH
11982: CALL_OW 289
11986: PUSH
11987: LD_INT 0
11989: EQUAL
11990: IFFALSE 12007
// SetCargo ( i , mat_siberit , 100 ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 100
12002: PPUSH
12003: CALL_OW 290
12007: GO 11971
12009: POP
12010: POP
// end ;
12011: PPOPN 2
12013: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12014: LD_EXP 3
12018: PUSH
12019: LD_EXP 48
12023: AND
12024: IFFALSE 12207
12026: GO 12028
12028: DISABLE
12029: LD_INT 0
12031: PPUSH
12032: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12033: LD_ADDR_VAR 0 2
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_OWVAR 2
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: ST_TO_ADDR
// if not tmp then
12055: LD_VAR 0 2
12059: NOT
12060: IFFALSE 12064
// exit ;
12062: GO 12207
// for i := 1 to 2 do
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: DOUBLE
12070: LD_INT 1
12072: DEC
12073: ST_TO_ADDR
12074: LD_INT 2
12076: PUSH
12077: FOR_TO
12078: IFFALSE 12205
// begin uc_side := your_side ;
12080: LD_ADDR_OWVAR 20
12084: PUSH
12085: LD_OWVAR 2
12089: ST_TO_ADDR
// uc_nation := nation_american ;
12090: LD_ADDR_OWVAR 21
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// vc_chassis := us_morphling ;
12098: LD_ADDR_OWVAR 37
12102: PUSH
12103: LD_INT 5
12105: ST_TO_ADDR
// vc_engine := engine_siberite ;
12106: LD_ADDR_OWVAR 39
12110: PUSH
12111: LD_INT 3
12113: ST_TO_ADDR
// vc_control := control_computer ;
12114: LD_ADDR_OWVAR 38
12118: PUSH
12119: LD_INT 3
12121: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12122: LD_ADDR_OWVAR 40
12126: PUSH
12127: LD_INT 10
12129: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12130: LD_VAR 0 2
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: CALL_OW 310
12143: NOT
12144: IFFALSE 12191
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12146: CALL_OW 45
12150: PPUSH
12151: LD_VAR 0 2
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: CALL_OW 250
12164: PPUSH
12165: LD_VAR 0 2
12169: PUSH
12170: LD_INT 1
12172: ARRAY
12173: PPUSH
12174: CALL_OW 251
12178: PPUSH
12179: LD_INT 12
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 50
12189: GO 12203
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12191: CALL_OW 45
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 51
// end ;
12203: GO 12077
12205: POP
12206: POP
// end ;
12207: PPOPN 2
12209: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12210: LD_EXP 3
12214: PUSH
12215: LD_EXP 49
12219: AND
12220: IFFALSE 12442
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12233: LD_ADDR_VAR 0 6
12237: PUSH
12238: LD_INT 22
12240: PUSH
12241: LD_OWVAR 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: LD_INT 23
12265: PUSH
12266: LD_INT 0
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: ST_TO_ADDR
// if not tmp then
12287: LD_VAR 0 6
12291: NOT
12292: IFFALSE 12296
// exit ;
12294: GO 12442
// s1 := rand ( 1 , 4 ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 12
12311: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: LD_VAR 0 6
12321: PUSH
12322: LD_INT 1
12324: ARRAY
12325: PPUSH
12326: LD_VAR 0 2
12330: PPUSH
12331: CALL_OW 259
12335: ST_TO_ADDR
// if s1 = 1 then
12336: LD_VAR 0 2
12340: PUSH
12341: LD_INT 1
12343: EQUAL
12344: IFFALSE 12364
// s2 := rand ( 2 , 4 ) else
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: LD_INT 2
12353: PPUSH
12354: LD_INT 4
12356: PPUSH
12357: CALL_OW 12
12361: ST_TO_ADDR
12362: GO 12372
// s2 := 1 ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12372: LD_ADDR_VAR 0 5
12376: PUSH
12377: LD_VAR 0 6
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 3
12390: PPUSH
12391: CALL_OW 259
12395: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12396: LD_VAR 0 6
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: PPUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: LD_VAR 0 5
12414: PPUSH
12415: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12419: LD_VAR 0 6
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: CALL_OW 237
// end ;
12442: PPOPN 6
12444: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12445: LD_EXP 3
12449: PUSH
12450: LD_EXP 50
12454: AND
12455: IFFALSE 12534
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if not tmp then
12499: LD_VAR 0 1
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 12
12525: ARRAY
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 234
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12537: LD_EXP 3
12541: PUSH
12542: LD_EXP 51
12546: AND
12547: IFFALSE 12659
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 27
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 26
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 28
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 69
12620: ST_TO_ADDR
// if not tmp then
12621: LD_VAR 0 2
12625: NOT
12626: IFFALSE 12630
// exit ;
12628: GO 12659
// for i in tmp do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: FOR_IN
12641: IFFALSE 12657
// SetLives ( i , 1 ) ;
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 234
12655: GO 12640
12657: POP
12658: POP
// end ;
12659: PPOPN 2
12661: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12662: LD_EXP 3
12666: PUSH
12667: LD_EXP 52
12671: AND
12672: IFFALSE 12959
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin i := rand ( 1 , 7 ) ;
12682: LD_ADDR_VAR 0 1
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_INT 7
12692: PPUSH
12693: CALL_OW 12
12697: ST_TO_ADDR
// case i of 1 :
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: DOUBLE
12706: EQUAL
12707: IFTRUE 12711
12709: GO 12721
12711: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12712: LD_STRING earthquake(getX(game), 0, 32)
12714: PPUSH
12715: CALL_OW 559
12719: GO 12959
12721: LD_INT 2
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12743
12729: POP
// begin ToLua ( displayStucuk(); ) ;
12730: LD_STRING displayStucuk();
12732: PPUSH
12733: CALL_OW 559
// ResetFog ;
12737: CALL_OW 335
// end ; 3 :
12741: GO 12959
12743: LD_INT 3
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12855
12751: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// if not tmp then
12788: LD_VAR 0 2
12792: NOT
12793: IFFALSE 12797
// exit ;
12795: GO 12959
// un := tmp [ rand ( 1 , tmp ) ] ;
12797: LD_ADDR_VAR 0 3
12801: PUSH
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: CALL_OW 12
12819: ARRAY
12820: ST_TO_ADDR
// if Crawls ( un ) then
12821: LD_VAR 0 3
12825: PPUSH
12826: CALL_OW 318
12830: IFFALSE 12841
// ComWalk ( un ) ;
12832: LD_VAR 0 3
12836: PPUSH
12837: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 8
12848: PPUSH
12849: CALL_OW 336
// end ; 4 :
12853: GO 12959
12855: LD_INT 4
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12937
12863: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 29
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: ST_TO_ADDR
// if not tmp then
12900: LD_VAR 0 2
12904: NOT
12905: IFFALSE 12909
// exit ;
12907: GO 12959
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12909: LD_VAR 0 2
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PPUSH
12918: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12922: LD_VAR 0 2
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: PPUSH
12931: CALL_OW 65
// end ; 5 .. 7 :
12935: GO 12959
12937: LD_INT 5
12939: DOUBLE
12940: GREATEREQUAL
12941: IFFALSE 12949
12943: LD_INT 7
12945: DOUBLE
12946: LESSEQUAL
12947: IFTRUE 12951
12949: GO 12958
12951: POP
// StreamSibBomb ; end ;
12952: CALL 9196 0 0
12956: GO 12959
12958: POP
// end ;
12959: PPOPN 3
12961: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12962: LD_EXP 3
12966: PUSH
12967: LD_EXP 53
12971: AND
12972: IFFALSE 13128
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12982: LD_ADDR_VAR 0 2
12986: PUSH
12987: LD_INT 81
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 2
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// if not tmp then
13036: LD_VAR 0 2
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13128
// p := 0 ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13053: LD_INT 35
13055: PPUSH
13056: CALL_OW 67
// p := p + 1 ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 1
13072: PLUS
13073: ST_TO_ADDR
// for i in tmp do
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_VAR 0 2
13083: PUSH
13084: FOR_IN
13085: IFFALSE 13116
// if GetLives ( i ) < 1000 then
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 1000
13099: LESS
13100: IFFALSE 13114
// SetLives ( i , 1000 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 1000
13109: PPUSH
13110: CALL_OW 234
13114: GO 13084
13116: POP
13117: POP
// until p > 20 ;
13118: LD_VAR 0 3
13122: PUSH
13123: LD_INT 20
13125: GREATER
13126: IFFALSE 13053
// end ;
13128: PPOPN 3
13130: END
// every 0 0$1 trigger StreamModeActive and sTime do
13131: LD_EXP 3
13135: PUSH
13136: LD_EXP 54
13140: AND
13141: IFFALSE 13176
13143: GO 13145
13145: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13146: LD_INT 28
13148: PPUSH
13149: LD_OWVAR 2
13153: PPUSH
13154: LD_INT 2
13156: PPUSH
13157: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13161: LD_INT 30
13163: PPUSH
13164: LD_OWVAR 2
13168: PPUSH
13169: LD_INT 2
13171: PPUSH
13172: CALL_OW 322
// end ;
13176: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13177: LD_EXP 3
13181: PUSH
13182: LD_EXP 55
13186: AND
13187: IFFALSE 13308
13189: GO 13191
13191: DISABLE
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_OWVAR 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 23
13228: PUSH
13229: LD_INT 0
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: ST_TO_ADDR
// if not tmp then
13250: LD_VAR 0 2
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13308
// for i in tmp do
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_VAR 0 2
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13306
// begin if Crawls ( i ) then
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 318
13281: IFFALSE 13292
// ComWalk ( i ) ;
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 138
// SetClass ( i , 2 ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: CALL_OW 336
// end ;
13304: GO 13269
13306: POP
13307: POP
// end ;
13308: PPOPN 2
13310: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13311: LD_EXP 3
13315: PUSH
13316: LD_EXP 56
13320: AND
13321: IFFALSE 13609
13323: GO 13325
13325: DISABLE
13326: LD_INT 0
13328: PPUSH
13329: PPUSH
13330: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13331: LD_OWVAR 2
13335: PPUSH
13336: LD_INT 9
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13349: LD_INT 9
13351: PPUSH
13352: LD_OWVAR 2
13356: PPUSH
13357: CALL_OW 343
// uc_side := 9 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 9
13368: ST_TO_ADDR
// uc_nation := 2 ;
13369: LD_ADDR_OWVAR 21
13373: PUSH
13374: LD_INT 2
13376: ST_TO_ADDR
// hc_name := Dark Warrior ;
13377: LD_ADDR_OWVAR 26
13381: PUSH
13382: LD_STRING Dark Warrior
13384: ST_TO_ADDR
// hc_gallery :=  ;
13385: LD_ADDR_OWVAR 33
13389: PUSH
13390: LD_STRING 
13392: ST_TO_ADDR
// hc_noskilllimit := true ;
13393: LD_ADDR_OWVAR 76
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13401: LD_ADDR_OWVAR 31
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: LD_INT 30
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: ST_TO_ADDR
// un := CreateHuman ;
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: CALL_OW 44
13433: ST_TO_ADDR
// hc_noskilllimit := false ;
13434: LD_ADDR_OWVAR 76
13438: PUSH
13439: LD_INT 0
13441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 51
// ToLua ( playRanger() ) ;
13454: LD_STRING playRanger()
13456: PPUSH
13457: CALL_OW 559
// p := 0 ;
13461: LD_ADDR_VAR 0 2
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13469: LD_INT 35
13471: PPUSH
13472: CALL_OW 67
// p := p + 1 ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_INT 1
13488: PLUS
13489: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13490: LD_VAR 0 3
13494: PPUSH
13495: CALL_OW 256
13499: PUSH
13500: LD_INT 1000
13502: LESS
13503: IFFALSE 13517
// SetLives ( un , 1000 ) ;
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1000
13512: PPUSH
13513: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 81
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 91
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 69
13558: PPUSH
13559: LD_VAR 0 3
13563: PPUSH
13564: CALL_OW 74
13568: PPUSH
13569: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 80
13580: GREATER
13581: PUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: CALL_OW 301
13591: OR
13592: IFFALSE 13469
// if un then
13594: LD_VAR 0 3
13598: IFFALSE 13609
// RemoveUnit ( un ) ;
13600: LD_VAR 0 3
13604: PPUSH
13605: CALL_OW 64
// end ;
13609: PPOPN 3
13611: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13612: LD_EXP 57
13616: IFFALSE 13732
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
13624: PPUSH
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 81
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13662: LD_STRING playComputer()
13664: PPUSH
13665: CALL_OW 559
// if not tmp then
13669: LD_VAR 0 2
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 13732
// for i in tmp do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_VAR 0 2
13687: PUSH
13688: FOR_IN
13689: IFFALSE 13730
// for j := 1 to 4 do
13691: LD_ADDR_VAR 0 3
13695: PUSH
13696: DOUBLE
13697: LD_INT 1
13699: DEC
13700: ST_TO_ADDR
13701: LD_INT 4
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13726
// SetSkill ( i , j , 10 ) ;
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 10
13719: PPUSH
13720: CALL_OW 237
13724: GO 13704
13726: POP
13727: POP
13728: GO 13688
13730: POP
13731: POP
// end ;
13732: PPOPN 3
13734: END
// every 0 0$1 trigger s30 do var i , tmp ;
13735: LD_EXP 58
13739: IFFALSE 13808
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: ST_TO_ADDR
// if not tmp then
13770: LD_VAR 0 2
13774: NOT
13775: IFFALSE 13779
// exit ;
13777: GO 13808
// for i in tmp do
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: LD_VAR 0 2
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13806
// SetLives ( i , 300 ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_INT 300
13799: PPUSH
13800: CALL_OW 234
13804: GO 13789
13806: POP
13807: POP
// end ;
13808: PPOPN 2
13810: END
// every 0 0$1 trigger s60 do var i , tmp ;
13811: LD_EXP 59
13815: IFFALSE 13884
13817: GO 13819
13819: DISABLE
13820: LD_INT 0
13822: PPUSH
13823: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PPUSH
13841: CALL_OW 69
13845: ST_TO_ADDR
// if not tmp then
13846: LD_VAR 0 2
13850: NOT
13851: IFFALSE 13855
// exit ;
13853: GO 13884
// for i in tmp do
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_VAR 0 2
13864: PUSH
13865: FOR_IN
13866: IFFALSE 13882
// SetLives ( i , 600 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_INT 600
13875: PPUSH
13876: CALL_OW 234
13880: GO 13865
13882: POP
13883: POP
// end ;
13884: PPOPN 2
13886: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13887: LD_INT 0
13889: PPUSH
// case cmd of 301 :
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 301
13897: DOUBLE
13898: EQUAL
13899: IFTRUE 13903
13901: GO 13935
13903: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13904: LD_VAR 0 6
13908: PPUSH
13909: LD_VAR 0 7
13913: PPUSH
13914: LD_VAR 0 8
13918: PPUSH
13919: LD_VAR 0 4
13923: PPUSH
13924: LD_VAR 0 5
13928: PPUSH
13929: CALL 15144 0 5
13933: GO 14056
13935: LD_INT 302
13937: DOUBLE
13938: EQUAL
13939: IFTRUE 13943
13941: GO 13980
13943: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13944: LD_VAR 0 6
13948: PPUSH
13949: LD_VAR 0 7
13953: PPUSH
13954: LD_VAR 0 8
13958: PPUSH
13959: LD_VAR 0 9
13963: PPUSH
13964: LD_VAR 0 4
13968: PPUSH
13969: LD_VAR 0 5
13973: PPUSH
13974: CALL 15235 0 6
13978: GO 14056
13980: LD_INT 303
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14025
13988: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 7
13998: PPUSH
13999: LD_VAR 0 8
14003: PPUSH
14004: LD_VAR 0 9
14008: PPUSH
14009: LD_VAR 0 4
14013: PPUSH
14014: LD_VAR 0 5
14018: PPUSH
14019: CALL 14061 0 6
14023: GO 14056
14025: LD_INT 304
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14055
14033: POP
// hHackTeleport ( unit , x , y ) ; end ;
14034: LD_VAR 0 2
14038: PPUSH
14039: LD_VAR 0 4
14043: PPUSH
14044: LD_VAR 0 5
14048: PPUSH
14049: CALL 15828 0 3
14053: GO 14056
14055: POP
// end ;
14056: LD_VAR 0 12
14060: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14065: LD_VAR 0 1
14069: PUSH
14070: LD_INT 1
14072: LESS
14073: PUSH
14074: LD_VAR 0 1
14078: PUSH
14079: LD_INT 3
14081: GREATER
14082: OR
14083: PUSH
14084: LD_VAR 0 5
14088: PPUSH
14089: LD_VAR 0 6
14093: PPUSH
14094: CALL_OW 428
14098: OR
14099: IFFALSE 14103
// exit ;
14101: GO 14831
// uc_side := your_side ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_OWVAR 2
14112: ST_TO_ADDR
// uc_nation := nation ;
14113: LD_ADDR_OWVAR 21
14117: PUSH
14118: LD_VAR 0 1
14122: ST_TO_ADDR
// bc_level = 1 ;
14123: LD_ADDR_OWVAR 43
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// case btype of 1 :
14131: LD_VAR 0 2
14135: PUSH
14136: LD_INT 1
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14155
14144: POP
// bc_type := b_depot ; 2 :
14145: LD_ADDR_OWVAR 42
14149: PUSH
14150: LD_INT 0
14152: ST_TO_ADDR
14153: GO 14775
14155: LD_INT 2
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14174
14163: POP
// bc_type := b_warehouse ; 3 :
14164: LD_ADDR_OWVAR 42
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
14172: GO 14775
14174: LD_INT 3
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14193
14182: POP
// bc_type := b_lab ; 4 .. 9 :
14183: LD_ADDR_OWVAR 42
14187: PUSH
14188: LD_INT 6
14190: ST_TO_ADDR
14191: GO 14775
14193: LD_INT 4
14195: DOUBLE
14196: GREATEREQUAL
14197: IFFALSE 14205
14199: LD_INT 9
14201: DOUBLE
14202: LESSEQUAL
14203: IFTRUE 14207
14205: GO 14267
14207: POP
// begin bc_type := b_lab_half ;
14208: LD_ADDR_OWVAR 42
14212: PUSH
14213: LD_INT 7
14215: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14216: LD_ADDR_OWVAR 44
14220: PUSH
14221: LD_INT 10
14223: PUSH
14224: LD_INT 11
14226: PUSH
14227: LD_INT 12
14229: PUSH
14230: LD_INT 15
14232: PUSH
14233: LD_INT 14
14235: PUSH
14236: LD_INT 13
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_VAR 0 2
14251: PUSH
14252: LD_INT 3
14254: MINUS
14255: ARRAY
14256: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14257: LD_ADDR_OWVAR 45
14261: PUSH
14262: LD_INT 9
14264: ST_TO_ADDR
// end ; 10 .. 13 :
14265: GO 14775
14267: LD_INT 10
14269: DOUBLE
14270: GREATEREQUAL
14271: IFFALSE 14279
14273: LD_INT 13
14275: DOUBLE
14276: LESSEQUAL
14277: IFTRUE 14281
14279: GO 14358
14281: POP
// begin bc_type := b_lab_full ;
14282: LD_ADDR_OWVAR 42
14286: PUSH
14287: LD_INT 8
14289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14290: LD_ADDR_OWVAR 44
14294: PUSH
14295: LD_INT 10
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 14
14303: PUSH
14304: LD_INT 13
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: LD_INT 9
14320: MINUS
14321: ARRAY
14322: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14323: LD_ADDR_OWVAR 45
14327: PUSH
14328: LD_INT 11
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 12
14336: PUSH
14337: LD_INT 15
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 9
14353: MINUS
14354: ARRAY
14355: ST_TO_ADDR
// end ; 14 :
14356: GO 14775
14358: LD_INT 14
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14377
14366: POP
// bc_type := b_workshop ; 15 :
14367: LD_ADDR_OWVAR 42
14371: PUSH
14372: LD_INT 2
14374: ST_TO_ADDR
14375: GO 14775
14377: LD_INT 15
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// bc_type := b_factory ; 16 :
14386: LD_ADDR_OWVAR 42
14390: PUSH
14391: LD_INT 3
14393: ST_TO_ADDR
14394: GO 14775
14396: LD_INT 16
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14415
14404: POP
// bc_type := b_ext_gun ; 17 :
14405: LD_ADDR_OWVAR 42
14409: PUSH
14410: LD_INT 17
14412: ST_TO_ADDR
14413: GO 14775
14415: LD_INT 17
14417: DOUBLE
14418: EQUAL
14419: IFTRUE 14423
14421: GO 14451
14423: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14424: LD_ADDR_OWVAR 42
14428: PUSH
14429: LD_INT 19
14431: PUSH
14432: LD_INT 23
14434: PUSH
14435: LD_INT 19
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: LD_VAR 0 1
14447: ARRAY
14448: ST_TO_ADDR
14449: GO 14775
14451: LD_INT 18
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14470
14459: POP
// bc_type := b_ext_radar ; 19 :
14460: LD_ADDR_OWVAR 42
14464: PUSH
14465: LD_INT 20
14467: ST_TO_ADDR
14468: GO 14775
14470: LD_INT 19
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14489
14478: POP
// bc_type := b_ext_radio ; 20 :
14479: LD_ADDR_OWVAR 42
14483: PUSH
14484: LD_INT 22
14486: ST_TO_ADDR
14487: GO 14775
14489: LD_INT 20
14491: DOUBLE
14492: EQUAL
14493: IFTRUE 14497
14495: GO 14508
14497: POP
// bc_type := b_ext_siberium ; 21 :
14498: LD_ADDR_OWVAR 42
14502: PUSH
14503: LD_INT 21
14505: ST_TO_ADDR
14506: GO 14775
14508: LD_INT 21
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14527
14516: POP
// bc_type := b_ext_computer ; 22 :
14517: LD_ADDR_OWVAR 42
14521: PUSH
14522: LD_INT 24
14524: ST_TO_ADDR
14525: GO 14775
14527: LD_INT 22
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14546
14535: POP
// bc_type := b_ext_track ; 23 :
14536: LD_ADDR_OWVAR 42
14540: PUSH
14541: LD_INT 16
14543: ST_TO_ADDR
14544: GO 14775
14546: LD_INT 23
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14565
14554: POP
// bc_type := b_ext_laser ; 24 :
14555: LD_ADDR_OWVAR 42
14559: PUSH
14560: LD_INT 25
14562: ST_TO_ADDR
14563: GO 14775
14565: LD_INT 24
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14584
14573: POP
// bc_type := b_control_tower ; 25 :
14574: LD_ADDR_OWVAR 42
14578: PUSH
14579: LD_INT 36
14581: ST_TO_ADDR
14582: GO 14775
14584: LD_INT 25
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14603
14592: POP
// bc_type := b_breastwork ; 26 :
14593: LD_ADDR_OWVAR 42
14597: PUSH
14598: LD_INT 31
14600: ST_TO_ADDR
14601: GO 14775
14603: LD_INT 26
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14622
14611: POP
// bc_type := b_bunker ; 27 :
14612: LD_ADDR_OWVAR 42
14616: PUSH
14617: LD_INT 32
14619: ST_TO_ADDR
14620: GO 14775
14622: LD_INT 27
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14641
14630: POP
// bc_type := b_turret ; 28 :
14631: LD_ADDR_OWVAR 42
14635: PUSH
14636: LD_INT 33
14638: ST_TO_ADDR
14639: GO 14775
14641: LD_INT 28
14643: DOUBLE
14644: EQUAL
14645: IFTRUE 14649
14647: GO 14660
14649: POP
// bc_type := b_armoury ; 29 :
14650: LD_ADDR_OWVAR 42
14654: PUSH
14655: LD_INT 4
14657: ST_TO_ADDR
14658: GO 14775
14660: LD_INT 29
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14679
14668: POP
// bc_type := b_barracks ; 30 :
14669: LD_ADDR_OWVAR 42
14673: PUSH
14674: LD_INT 5
14676: ST_TO_ADDR
14677: GO 14775
14679: LD_INT 30
14681: DOUBLE
14682: EQUAL
14683: IFTRUE 14687
14685: GO 14698
14687: POP
// bc_type := b_solar_power ; 31 :
14688: LD_ADDR_OWVAR 42
14692: PUSH
14693: LD_INT 27
14695: ST_TO_ADDR
14696: GO 14775
14698: LD_INT 31
14700: DOUBLE
14701: EQUAL
14702: IFTRUE 14706
14704: GO 14717
14706: POP
// bc_type := b_oil_power ; 32 :
14707: LD_ADDR_OWVAR 42
14711: PUSH
14712: LD_INT 26
14714: ST_TO_ADDR
14715: GO 14775
14717: LD_INT 32
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14736
14725: POP
// bc_type := b_siberite_power ; 33 :
14726: LD_ADDR_OWVAR 42
14730: PUSH
14731: LD_INT 28
14733: ST_TO_ADDR
14734: GO 14775
14736: LD_INT 33
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14755
14744: POP
// bc_type := b_oil_mine ; 34 :
14745: LD_ADDR_OWVAR 42
14749: PUSH
14750: LD_INT 29
14752: ST_TO_ADDR
14753: GO 14775
14755: LD_INT 34
14757: DOUBLE
14758: EQUAL
14759: IFTRUE 14763
14761: GO 14774
14763: POP
// bc_type := b_siberite_mine ; end ;
14764: LD_ADDR_OWVAR 42
14768: PUSH
14769: LD_INT 30
14771: ST_TO_ADDR
14772: GO 14775
14774: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14775: LD_ADDR_VAR 0 8
14779: PUSH
14780: LD_VAR 0 5
14784: PPUSH
14785: LD_VAR 0 6
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 47
14799: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14800: LD_OWVAR 42
14804: PUSH
14805: LD_INT 32
14807: PUSH
14808: LD_INT 33
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: IN
14815: IFFALSE 14831
// PlaceWeaponTurret ( b , weapon ) ;
14817: LD_VAR 0 8
14821: PPUSH
14822: LD_VAR 0 4
14826: PPUSH
14827: CALL_OW 431
// end ;
14831: LD_VAR 0 7
14835: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14842: LD_ADDR_VAR 0 4
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 0
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 30
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 4
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14964
// for i in tmp do
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_VAR 0 4
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14962
// for j = 1 to 3 do
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: DOUBLE
14924: LD_INT 1
14926: DEC
14927: ST_TO_ADDR
14928: LD_INT 3
14930: PUSH
14931: FOR_TO
14932: IFFALSE 14958
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 274
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 99999
14951: PPUSH
14952: CALL_OW 277
14956: GO 14931
14958: POP
14959: POP
14960: GO 14915
14962: POP
14963: POP
// end ;
14964: LD_VAR 0 1
14968: RET
// export function hHackSetLevel10 ; var i , j ; begin
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
14973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 1
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15047
// if IsSelected ( i ) then
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 306
15006: IFFALSE 15045
// begin for j := 1 to 4 do
15008: LD_ADDR_VAR 0 3
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 4
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15043
// SetSkill ( i , j , 10 ) ;
15024: LD_VAR 0 2
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 10
15036: PPUSH
15037: CALL_OW 237
15041: GO 15021
15043: POP
15044: POP
// end ;
15045: GO 14994
15047: POP
15048: POP
// end ;
15049: LD_VAR 0 1
15053: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15054: LD_INT 0
15056: PPUSH
15057: PPUSH
15058: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 22
15066: PUSH
15067: LD_OWVAR 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15137
// begin for j := 1 to 4 do
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: DOUBLE
15104: LD_INT 1
15106: DEC
15107: ST_TO_ADDR
15108: LD_INT 4
15110: PUSH
15111: FOR_TO
15112: IFFALSE 15133
// SetSkill ( i , j , 10 ) ;
15114: LD_VAR 0 2
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 10
15126: PPUSH
15127: CALL_OW 237
15131: GO 15111
15133: POP
15134: POP
// end ;
15135: GO 15095
15137: POP
15138: POP
// end ;
15139: LD_VAR 0 1
15143: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15144: LD_INT 0
15146: PPUSH
// uc_side := your_side ;
15147: LD_ADDR_OWVAR 20
15151: PUSH
15152: LD_OWVAR 2
15156: ST_TO_ADDR
// uc_nation := nation ;
15157: LD_ADDR_OWVAR 21
15161: PUSH
15162: LD_VAR 0 1
15166: ST_TO_ADDR
// InitHc ;
15167: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15171: LD_INT 0
15173: PPUSH
15174: LD_VAR 0 2
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15188: LD_VAR 0 4
15192: PPUSH
15193: LD_VAR 0 5
15197: PPUSH
15198: CALL_OW 428
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15230
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15208: CALL_OW 44
15212: PPUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 48
// end ;
15230: LD_VAR 0 6
15234: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
// uc_side := your_side ;
15239: LD_ADDR_OWVAR 20
15243: PUSH
15244: LD_OWVAR 2
15248: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15249: LD_VAR 0 1
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: IN
15276: IFFALSE 15288
// uc_nation := nation_american else
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
15286: GO 15331
// if chassis in [ 11 , 12 , 13 , 14 ] then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: IN
15311: IFFALSE 15323
// uc_nation := nation_arabian else
15313: LD_ADDR_OWVAR 21
15317: PUSH
15318: LD_INT 2
15320: ST_TO_ADDR
15321: GO 15331
// uc_nation := nation_russian ;
15323: LD_ADDR_OWVAR 21
15327: PUSH
15328: LD_INT 3
15330: ST_TO_ADDR
// vc_chassis := chassis ;
15331: LD_ADDR_OWVAR 37
15335: PUSH
15336: LD_VAR 0 1
15340: ST_TO_ADDR
// vc_engine := engine ;
15341: LD_ADDR_OWVAR 39
15345: PUSH
15346: LD_VAR 0 2
15350: ST_TO_ADDR
// vc_control := control ;
15351: LD_ADDR_OWVAR 38
15355: PUSH
15356: LD_VAR 0 3
15360: ST_TO_ADDR
// vc_weapon := weapon ;
15361: LD_ADDR_OWVAR 40
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// un := CreateVehicle ;
15371: LD_ADDR_VAR 0 8
15375: PUSH
15376: CALL_OW 45
15380: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15381: LD_VAR 0 8
15385: PPUSH
15386: LD_INT 0
15388: PPUSH
15389: LD_INT 5
15391: PPUSH
15392: CALL_OW 12
15396: PPUSH
15397: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15401: LD_VAR 0 8
15405: PPUSH
15406: LD_VAR 0 5
15410: PPUSH
15411: LD_VAR 0 6
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 48
// end ;
15423: LD_VAR 0 7
15427: RET
// export hInvincible ; every 1 do
15428: GO 15430
15430: DISABLE
// hInvincible := [ ] ;
15431: LD_ADDR_EXP 60
15435: PUSH
15436: EMPTY
15437: ST_TO_ADDR
15438: END
// every 10 do var i ;
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin enable ;
15445: ENABLE
// if not hInvincible then
15446: LD_EXP 60
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15499
// for i in hInvincible do
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_EXP 60
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15497
// if GetLives ( i ) < 1000 then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 256
15477: PUSH
15478: LD_INT 1000
15480: LESS
15481: IFFALSE 15495
// SetLives ( i , 1000 ) ;
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_INT 1000
15490: PPUSH
15491: CALL_OW 234
15495: GO 15465
15497: POP
15498: POP
// end ;
15499: PPOPN 1
15501: END
// export function hHackInvincible ; var i ; begin
15502: LD_INT 0
15504: PPUSH
15505: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15606
// if IsSelected ( i ) then
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 306
15556: IFFALSE 15604
// begin if i in hInvincible then
15558: LD_VAR 0 2
15562: PUSH
15563: LD_EXP 60
15567: IN
15568: IFFALSE 15588
// hInvincible := hInvincible diff i else
15570: LD_ADDR_EXP 60
15574: PUSH
15575: LD_EXP 60
15579: PUSH
15580: LD_VAR 0 2
15584: DIFF
15585: ST_TO_ADDR
15586: GO 15604
// hInvincible := hInvincible union i ;
15588: LD_ADDR_EXP 60
15592: PUSH
15593: LD_EXP 60
15597: PUSH
15598: LD_VAR 0 2
15602: UNION
15603: ST_TO_ADDR
// end ;
15604: GO 15544
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function hHackInvisible ; var i , j ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 21
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15663
// if IsSelected ( i ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 306
15650: IFFALSE 15661
// ComForceInvisible ( i ) ;
15652: LD_VAR 0 2
15656: PPUSH
15657: CALL_OW 496
15661: GO 15638
15663: POP
15664: POP
// end ;
15665: LD_VAR 0 1
15669: RET
// export function hHackChangeYourSide ; begin
15670: LD_INT 0
15672: PPUSH
// if your_side = 8 then
15673: LD_OWVAR 2
15677: PUSH
15678: LD_INT 8
15680: EQUAL
15681: IFFALSE 15693
// your_side := 0 else
15683: LD_ADDR_OWVAR 2
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
15691: GO 15707
// your_side := your_side + 1 ;
15693: LD_ADDR_OWVAR 2
15697: PUSH
15698: LD_OWVAR 2
15702: PUSH
15703: LD_INT 1
15705: PLUS
15706: ST_TO_ADDR
// end ;
15707: LD_VAR 0 1
15711: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
// for i in all_units do
15717: LD_ADDR_VAR 0 2
15721: PUSH
15722: LD_OWVAR 3
15726: PUSH
15727: FOR_IN
15728: IFFALSE 15806
// if IsSelected ( i ) then
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 306
15739: IFFALSE 15804
// begin j := GetSide ( i ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 255
15755: ST_TO_ADDR
// if j = 8 then
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 8
15763: EQUAL
15764: IFFALSE 15776
// j := 0 else
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
15774: GO 15790
// j := j + 1 ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: ST_TO_ADDR
// SetSide ( i , j ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: LD_VAR 0 3
15799: PPUSH
15800: CALL_OW 235
// end ;
15804: GO 15727
15806: POP
15807: POP
// end ;
15808: LD_VAR 0 1
15812: RET
// export function hHackFog ; begin
15813: LD_INT 0
15815: PPUSH
// FogOff ( true ) ;
15816: LD_INT 1
15818: PPUSH
15819: CALL_OW 344
// end ;
15823: LD_VAR 0 1
15827: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15828: LD_INT 0
15830: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15831: LD_VAR 0 1
15835: PPUSH
15836: LD_VAR 0 2
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 483
// CenterOnXY ( x , y ) ;
15856: LD_VAR 0 2
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 84
// end ;
15870: LD_VAR 0 4
15874: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 2
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: CALL_OW 488
15899: NOT
15900: OR
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PUSH
15912: LD_INT 3
15914: NONEQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 1
15928: EQUAL
15929: NOT
15930: AND
15931: OR
15932: IFFALSE 15936
// exit ;
15934: GO 16218
// if GetType ( factory ) = unit_human then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 247
15945: PUSH
15946: LD_INT 1
15948: EQUAL
15949: IFFALSE 15966
// factory := IsInUnit ( factory ) ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 310
15965: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 266
15975: PUSH
15976: LD_INT 3
15978: NONEQUAL
15979: IFFALSE 15983
// exit ;
15981: GO 16218
// for i := 1 to Count ( factoryWaypoints ) do
15983: LD_ADDR_VAR 0 5
15987: PUSH
15988: DOUBLE
15989: LD_INT 1
15991: DEC
15992: ST_TO_ADDR
15993: LD_EXP 61
15997: PPUSH
15998: CALL 24943 0 1
16002: PUSH
16003: FOR_TO
16004: IFFALSE 16166
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16006: LD_VAR 0 2
16010: PPUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: CALL_OW 428
16020: PUSH
16021: LD_EXP 61
16025: PUSH
16026: LD_VAR 0 5
16030: ARRAY
16031: PUSH
16032: LD_INT 2
16034: ARRAY
16035: EQUAL
16036: IFFALSE 16068
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16038: LD_ADDR_EXP 61
16042: PUSH
16043: LD_EXP 61
16047: PPUSH
16048: LD_VAR 0 5
16052: PPUSH
16053: CALL_OW 3
16057: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16058: CALL 16223 0 0
// exit ;
16062: POP
16063: POP
16064: GO 16218
// end else
16066: GO 16164
// if factory = factoryWaypoints [ i ] [ 2 ] then
16068: LD_VAR 0 1
16072: PUSH
16073: LD_EXP 61
16077: PUSH
16078: LD_VAR 0 5
16082: ARRAY
16083: PUSH
16084: LD_INT 2
16086: ARRAY
16087: EQUAL
16088: IFFALSE 16164
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16090: LD_ADDR_EXP 61
16094: PUSH
16095: LD_EXP 61
16099: PPUSH
16100: LD_VAR 0 5
16104: PPUSH
16105: CALL_OW 3
16109: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16110: LD_ADDR_EXP 61
16114: PUSH
16115: LD_EXP 61
16119: PPUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 255
16129: PUSH
16130: LD_VAR 0 1
16134: PUSH
16135: LD_VAR 0 2
16139: PUSH
16140: LD_VAR 0 3
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: PPUSH
16151: CALL 60552 0 2
16155: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16156: CALL 16223 0 0
// exit ;
16160: POP
16161: POP
16162: GO 16218
// end ; end ;
16164: GO 16003
16166: POP
16167: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16168: LD_ADDR_EXP 61
16172: PUSH
16173: LD_EXP 61
16177: PPUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 255
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: LD_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL 60552 0 2
16213: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16214: CALL 16223 0 0
// end ;
16218: LD_VAR 0 4
16222: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16223: LD_INT 0
16225: PPUSH
16226: PPUSH
16227: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16228: LD_STRING resetFactoryWaypoint();
16230: PPUSH
16231: CALL_OW 559
// if factoryWaypoints then
16235: LD_EXP 61
16239: IFFALSE 16360
// begin list := factoryWaypoints ;
16241: LD_ADDR_VAR 0 3
16245: PUSH
16246: LD_EXP 61
16250: ST_TO_ADDR
// for i := 1 to list do
16251: LD_ADDR_VAR 0 2
16255: PUSH
16256: DOUBLE
16257: LD_INT 1
16259: DEC
16260: ST_TO_ADDR
16261: LD_VAR 0 3
16265: PUSH
16266: FOR_TO
16267: IFFALSE 16358
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16269: LD_STRING setFactoryWaypointXY(
16271: PUSH
16272: LD_VAR 0 3
16276: PUSH
16277: LD_VAR 0 2
16281: ARRAY
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: STR
16287: PUSH
16288: LD_STRING ,
16290: STR
16291: PUSH
16292: LD_VAR 0 3
16296: PUSH
16297: LD_VAR 0 2
16301: ARRAY
16302: PUSH
16303: LD_INT 2
16305: ARRAY
16306: STR
16307: PUSH
16308: LD_STRING ,
16310: STR
16311: PUSH
16312: LD_VAR 0 3
16316: PUSH
16317: LD_VAR 0 2
16321: ARRAY
16322: PUSH
16323: LD_INT 3
16325: ARRAY
16326: STR
16327: PUSH
16328: LD_STRING ,
16330: STR
16331: PUSH
16332: LD_VAR 0 3
16336: PUSH
16337: LD_VAR 0 2
16341: ARRAY
16342: PUSH
16343: LD_INT 4
16345: ARRAY
16346: STR
16347: PUSH
16348: LD_STRING )
16350: STR
16351: PPUSH
16352: CALL_OW 559
16356: GO 16266
16358: POP
16359: POP
// end ; end ;
16360: LD_VAR 0 1
16364: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16365: LD_INT 0
16367: PPUSH
// if HexInfo ( x , y ) = warehouse then
16368: LD_VAR 0 2
16372: PPUSH
16373: LD_VAR 0 3
16377: PPUSH
16378: CALL_OW 428
16382: PUSH
16383: LD_VAR 0 1
16387: EQUAL
16388: IFFALSE 16415
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16390: LD_ADDR_EXP 62
16394: PUSH
16395: LD_EXP 62
16399: PPUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: LD_INT 0
16407: PPUSH
16408: CALL_OW 1
16412: ST_TO_ADDR
16413: GO 16466
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16415: LD_ADDR_EXP 62
16419: PUSH
16420: LD_EXP 62
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 255
16439: PUSH
16440: LD_VAR 0 1
16444: PUSH
16445: LD_VAR 0 2
16449: PUSH
16450: LD_VAR 0 3
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PPUSH
16461: CALL_OW 1
16465: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16466: CALL 16475 0 0
// end ;
16470: LD_VAR 0 4
16474: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16475: LD_INT 0
16477: PPUSH
16478: PPUSH
16479: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16480: LD_STRING resetWarehouseGatheringPoints();
16482: PPUSH
16483: CALL_OW 559
// if warehouseGatheringPoints then
16487: LD_EXP 62
16491: IFFALSE 16617
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16493: LD_ADDR_VAR 0 3
16497: PUSH
16498: LD_EXP 62
16502: PPUSH
16503: CALL 64314 0 1
16507: ST_TO_ADDR
// for i := 1 to list do
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: DOUBLE
16514: LD_INT 1
16516: DEC
16517: ST_TO_ADDR
16518: LD_VAR 0 3
16522: PUSH
16523: FOR_TO
16524: IFFALSE 16615
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16526: LD_STRING setWarehouseGatheringPointXY(
16528: PUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_VAR 0 2
16538: ARRAY
16539: PUSH
16540: LD_INT 1
16542: ARRAY
16543: STR
16544: PUSH
16545: LD_STRING ,
16547: STR
16548: PUSH
16549: LD_VAR 0 3
16553: PUSH
16554: LD_VAR 0 2
16558: ARRAY
16559: PUSH
16560: LD_INT 2
16562: ARRAY
16563: STR
16564: PUSH
16565: LD_STRING ,
16567: STR
16568: PUSH
16569: LD_VAR 0 3
16573: PUSH
16574: LD_VAR 0 2
16578: ARRAY
16579: PUSH
16580: LD_INT 3
16582: ARRAY
16583: STR
16584: PUSH
16585: LD_STRING ,
16587: STR
16588: PUSH
16589: LD_VAR 0 3
16593: PUSH
16594: LD_VAR 0 2
16598: ARRAY
16599: PUSH
16600: LD_INT 4
16602: ARRAY
16603: STR
16604: PUSH
16605: LD_STRING )
16607: STR
16608: PPUSH
16609: CALL_OW 559
16613: GO 16523
16615: POP
16616: POP
// end ; end ;
16617: LD_VAR 0 1
16621: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16622: LD_EXP 62
16626: IFFALSE 17311
16628: GO 16630
16630: DISABLE
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
16636: PPUSH
16637: PPUSH
16638: PPUSH
16639: PPUSH
16640: PPUSH
16641: PPUSH
// begin enable ;
16642: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_EXP 62
16652: PPUSH
16653: CALL 64314 0 1
16657: ST_TO_ADDR
// if not list then
16658: LD_VAR 0 3
16662: NOT
16663: IFFALSE 16667
// exit ;
16665: GO 17311
// for i := 1 to list do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: DOUBLE
16673: LD_INT 1
16675: DEC
16676: ST_TO_ADDR
16677: LD_VAR 0 3
16681: PUSH
16682: FOR_TO
16683: IFFALSE 17309
// begin depot := list [ i ] [ 2 ] ;
16685: LD_ADDR_VAR 0 8
16689: PUSH
16690: LD_VAR 0 3
16694: PUSH
16695: LD_VAR 0 1
16699: ARRAY
16700: PUSH
16701: LD_INT 2
16703: ARRAY
16704: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16705: LD_ADDR_VAR 0 5
16709: PUSH
16710: LD_VAR 0 3
16714: PUSH
16715: LD_VAR 0 1
16719: ARRAY
16720: PUSH
16721: LD_INT 1
16723: ARRAY
16724: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16725: LD_VAR 0 8
16729: PPUSH
16730: CALL_OW 301
16734: PUSH
16735: LD_VAR 0 5
16739: PUSH
16740: LD_VAR 0 8
16744: PPUSH
16745: CALL_OW 255
16749: NONEQUAL
16750: OR
16751: IFFALSE 16780
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16753: LD_ADDR_EXP 62
16757: PUSH
16758: LD_EXP 62
16762: PPUSH
16763: LD_VAR 0 8
16767: PPUSH
16768: LD_INT 0
16770: PPUSH
16771: CALL_OW 1
16775: ST_TO_ADDR
// exit ;
16776: POP
16777: POP
16778: GO 17311
// end ; x := list [ i ] [ 3 ] ;
16780: LD_ADDR_VAR 0 6
16784: PUSH
16785: LD_VAR 0 3
16789: PUSH
16790: LD_VAR 0 1
16794: ARRAY
16795: PUSH
16796: LD_INT 3
16798: ARRAY
16799: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16800: LD_ADDR_VAR 0 7
16804: PUSH
16805: LD_VAR 0 3
16809: PUSH
16810: LD_VAR 0 1
16814: ARRAY
16815: PUSH
16816: LD_INT 4
16818: ARRAY
16819: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16820: LD_ADDR_VAR 0 9
16824: PUSH
16825: LD_VAR 0 6
16829: PPUSH
16830: LD_VAR 0 7
16834: PPUSH
16835: LD_INT 16
16837: PPUSH
16838: CALL 62898 0 3
16842: ST_TO_ADDR
// if not cratesNearbyPoint then
16843: LD_VAR 0 9
16847: NOT
16848: IFFALSE 16854
// exit ;
16850: POP
16851: POP
16852: GO 17311
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16854: LD_ADDR_VAR 0 4
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_VAR 0 5
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 60
16876: PUSH
16877: EMPTY
16878: LIST
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 91
16886: PUSH
16887: LD_VAR 0 8
16891: PUSH
16892: LD_INT 6
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: LD_INT 25
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 25
16915: PUSH
16916: LD_INT 16
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: LIST
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 69
16938: PUSH
16939: LD_VAR 0 8
16943: PPUSH
16944: CALL_OW 313
16948: PPUSH
16949: LD_INT 3
16951: PUSH
16952: LD_INT 60
16954: PUSH
16955: EMPTY
16956: LIST
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: LD_INT 25
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 25
16977: PUSH
16978: LD_INT 16
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PPUSH
16994: CALL_OW 72
16998: UNION
16999: ST_TO_ADDR
// if tmp then
17000: LD_VAR 0 4
17004: IFFALSE 17084
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17006: LD_ADDR_VAR 0 4
17010: PUSH
17011: LD_VAR 0 4
17015: PPUSH
17016: LD_INT 3
17018: PPUSH
17019: CALL 60867 0 2
17023: ST_TO_ADDR
// for j in tmp do
17024: LD_ADDR_VAR 0 2
17028: PUSH
17029: LD_VAR 0 4
17033: PUSH
17034: FOR_IN
17035: IFFALSE 17078
// begin if IsInUnit ( j ) then
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 310
17046: IFFALSE 17057
// ComExit ( j ) ;
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL 60950 0 1
// AddComCollect ( j , x , y ) ;
17057: LD_VAR 0 2
17061: PPUSH
17062: LD_VAR 0 6
17066: PPUSH
17067: LD_VAR 0 7
17071: PPUSH
17072: CALL_OW 177
// end ;
17076: GO 17034
17078: POP
17079: POP
// exit ;
17080: POP
17081: POP
17082: GO 17311
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17084: LD_ADDR_VAR 0 4
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_VAR 0 5
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 91
17103: PUSH
17104: LD_VAR 0 8
17108: PUSH
17109: LD_INT 8
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 2
17119: PUSH
17120: LD_INT 34
17122: PUSH
17123: LD_INT 12
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 34
17132: PUSH
17133: LD_INT 51
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 34
17142: PUSH
17143: LD_INT 32
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 34
17152: PUSH
17153: LD_INT 89
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// if tmp then
17177: LD_VAR 0 4
17181: IFFALSE 17307
// begin for j in tmp do
17183: LD_ADDR_VAR 0 2
17187: PUSH
17188: LD_VAR 0 4
17192: PUSH
17193: FOR_IN
17194: IFFALSE 17305
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17196: LD_VAR 0 2
17200: PPUSH
17201: CALL_OW 262
17205: PUSH
17206: LD_INT 3
17208: EQUAL
17209: PUSH
17210: LD_VAR 0 2
17214: PPUSH
17215: CALL_OW 261
17219: PUSH
17220: LD_INT 20
17222: GREATER
17223: OR
17224: PUSH
17225: LD_VAR 0 2
17229: PPUSH
17230: CALL_OW 314
17234: NOT
17235: AND
17236: PUSH
17237: LD_VAR 0 2
17241: PPUSH
17242: CALL_OW 263
17246: PUSH
17247: LD_INT 1
17249: NONEQUAL
17250: PUSH
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 311
17260: OR
17261: AND
17262: IFFALSE 17303
// begin ComCollect ( j , x , y ) ;
17264: LD_VAR 0 2
17268: PPUSH
17269: LD_VAR 0 6
17273: PPUSH
17274: LD_VAR 0 7
17278: PPUSH
17279: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_VAR 0 8
17292: PPUSH
17293: CALL_OW 172
// exit ;
17297: POP
17298: POP
17299: POP
17300: POP
17301: GO 17311
// end ;
17303: GO 17193
17305: POP
17306: POP
// end ; end ;
17307: GO 16682
17309: POP
17310: POP
// end ; end_of_file
17311: PPOPN 9
17313: END
// export function SOS_UnitDestroyed ( un ) ; begin
17314: LD_INT 0
17316: PPUSH
// ComRadiation ( un ) ;
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL 18303 0 1
// end ;
17326: LD_VAR 0 2
17330: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17331: LD_INT 0
17333: PPUSH
// ComRadiation ( un ) ;
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL 18303 0 1
// end ;
17343: LD_VAR 0 2
17347: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17348: LD_INT 0
17350: PPUSH
// end ;
17351: LD_VAR 0 4
17355: RET
// export function SOS_Command ( cmd ) ; begin
17356: LD_INT 0
17358: PPUSH
// end ;
17359: LD_VAR 0 2
17363: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17364: LD_INT 0
17366: PPUSH
// end ;
17367: LD_VAR 0 6
17371: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
17372: LD_INT 0
17374: PPUSH
17375: PPUSH
17376: PPUSH
17377: PPUSH
17378: PPUSH
// if not vehicle or not factory then
17379: LD_VAR 0 1
17383: NOT
17384: PUSH
17385: LD_VAR 0 2
17389: NOT
17390: OR
17391: IFFALSE 17395
// exit ;
17393: GO 17894
// if not factoryWaypoints then
17395: LD_EXP 61
17399: NOT
17400: IFFALSE 17404
// exit ;
17402: GO 17894
// for i := 1 to Count ( factoryWaypoints ) do
17404: LD_ADDR_VAR 0 4
17408: PUSH
17409: DOUBLE
17410: LD_INT 1
17412: DEC
17413: ST_TO_ADDR
17414: LD_EXP 61
17418: PPUSH
17419: CALL 24943 0 1
17423: PUSH
17424: FOR_TO
17425: IFFALSE 17892
// if factoryWaypoints [ i ] [ 2 ] = factory then
17427: LD_EXP 61
17431: PUSH
17432: LD_VAR 0 4
17436: ARRAY
17437: PUSH
17438: LD_INT 2
17440: ARRAY
17441: PUSH
17442: LD_VAR 0 2
17446: EQUAL
17447: IFFALSE 17890
// begin if GetControl ( vehicle ) = control_manual then
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL_OW 263
17458: PUSH
17459: LD_INT 1
17461: EQUAL
17462: IFFALSE 17773
// begin driver := IsDrivenBy ( vehicle ) ;
17464: LD_ADDR_VAR 0 6
17468: PUSH
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 311
17478: ST_TO_ADDR
// tag := GetTag ( driver ) ;
17479: LD_ADDR_VAR 0 5
17483: PUSH
17484: LD_VAR 0 6
17488: PPUSH
17489: CALL_OW 110
17493: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
17494: LD_VAR 0 5
17498: PUSH
17499: LD_INT 501
17501: EQUAL
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 110
17512: PUSH
17513: LD_INT 501
17515: EQUAL
17516: OR
17517: IFFALSE 17523
// exit ;
17519: POP
17520: POP
17521: GO 17894
// if not HasTask ( driver ) then
17523: LD_VAR 0 6
17527: PPUSH
17528: CALL_OW 314
17532: NOT
17533: IFFALSE 17771
// begin SetTag ( driver , tDriver ) ;
17535: LD_VAR 0 6
17539: PPUSH
17540: LD_INT 501
17542: PPUSH
17543: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 501
17554: PPUSH
17555: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17559: LD_ADDR_VAR 0 7
17563: PUSH
17564: LD_EXP 61
17568: PUSH
17569: LD_VAR 0 4
17573: ARRAY
17574: PUSH
17575: LD_INT 3
17577: ARRAY
17578: PPUSH
17579: LD_EXP 61
17583: PUSH
17584: LD_VAR 0 4
17588: ARRAY
17589: PUSH
17590: LD_INT 4
17592: ARRAY
17593: PPUSH
17594: CALL_OW 428
17598: ST_TO_ADDR
// if hex then
17599: LD_VAR 0 7
17603: IFFALSE 17621
// ComMoveUnit ( driver , hex ) else
17605: LD_VAR 0 6
17609: PPUSH
17610: LD_VAR 0 7
17614: PPUSH
17615: CALL_OW 112
17619: GO 17660
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17621: LD_VAR 0 6
17625: PPUSH
17626: LD_EXP 61
17630: PUSH
17631: LD_VAR 0 4
17635: ARRAY
17636: PUSH
17637: LD_INT 3
17639: ARRAY
17640: PPUSH
17641: LD_EXP 61
17645: PUSH
17646: LD_VAR 0 4
17650: ARRAY
17651: PUSH
17652: LD_INT 4
17654: ARRAY
17655: PPUSH
17656: CALL_OW 111
// AddComExitVehicle ( driver ) ;
17660: LD_VAR 0 6
17664: PPUSH
17665: CALL_OW 181
// if Multiplayer then
17669: LD_OWVAR 4
17673: IFFALSE 17722
// begin repeat wait ( 10 ) ;
17675: LD_INT 10
17677: PPUSH
17678: CALL_OW 67
// until not IsInUnit ( driver ) ;
17682: LD_VAR 0 6
17686: PPUSH
17687: CALL_OW 310
17691: NOT
17692: IFFALSE 17675
// if not HasTask ( driver ) then
17694: LD_VAR 0 6
17698: PPUSH
17699: CALL_OW 314
17703: NOT
17704: IFFALSE 17720
// ComEnterUnit ( driver , factory ) ;
17706: LD_VAR 0 6
17710: PPUSH
17711: LD_VAR 0 2
17715: PPUSH
17716: CALL_OW 120
// end else
17720: GO 17736
// AddComEnterUnit ( driver , factory ) ;
17722: LD_VAR 0 6
17726: PPUSH
17727: LD_VAR 0 2
17731: PPUSH
17732: CALL_OW 180
// wait ( 0 0$1 ) ;
17736: LD_INT 35
17738: PPUSH
17739: CALL_OW 67
// SetTag ( driver , tag ) ;
17743: LD_VAR 0 6
17747: PPUSH
17748: LD_VAR 0 5
17752: PPUSH
17753: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
17757: LD_VAR 0 1
17761: PPUSH
17762: LD_INT 0
17764: PPUSH
17765: CALL_OW 109
// break ;
17769: GO 17892
// end ; end else
17771: GO 17890
// if GetControl ( vehicle ) = control_remote then
17773: LD_VAR 0 1
17777: PPUSH
17778: CALL_OW 263
17782: PUSH
17783: LD_INT 2
17785: EQUAL
17786: IFFALSE 17849
// begin wait ( 0 0$2 ) ;
17788: LD_INT 70
17790: PPUSH
17791: CALL_OW 67
// if Connect ( vehicle ) then
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL 31149 0 1
17804: IFFALSE 17845
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17806: LD_VAR 0 1
17810: PPUSH
17811: LD_EXP 61
17815: PUSH
17816: LD_VAR 0 4
17820: ARRAY
17821: PUSH
17822: LD_INT 3
17824: ARRAY
17825: PPUSH
17826: LD_EXP 61
17830: PUSH
17831: LD_VAR 0 4
17835: ARRAY
17836: PUSH
17837: LD_INT 4
17839: ARRAY
17840: PPUSH
17841: CALL_OW 171
// break ;
17845: GO 17892
// end else
17847: GO 17890
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: LD_EXP 61
17858: PUSH
17859: LD_VAR 0 4
17863: ARRAY
17864: PUSH
17865: LD_INT 3
17867: ARRAY
17868: PPUSH
17869: LD_EXP 61
17873: PUSH
17874: LD_VAR 0 4
17878: ARRAY
17879: PUSH
17880: LD_INT 4
17882: ARRAY
17883: PPUSH
17884: CALL_OW 171
// break ;
17888: GO 17892
// end ; end ;
17890: GO 17424
17892: POP
17893: POP
// end ;
17894: LD_VAR 0 3
17898: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17899: LD_INT 0
17901: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17902: LD_VAR 0 1
17906: PUSH
17907: LD_INT 250
17909: EQUAL
17910: PUSH
17911: LD_VAR 0 2
17915: PPUSH
17916: CALL_OW 264
17920: PUSH
17921: LD_INT 81
17923: EQUAL
17924: AND
17925: IFFALSE 17946
// MinerPlaceMine ( unit , x , y ) ;
17927: LD_VAR 0 2
17931: PPUSH
17932: LD_VAR 0 4
17936: PPUSH
17937: LD_VAR 0 5
17941: PPUSH
17942: CALL 21038 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17946: LD_VAR 0 1
17950: PUSH
17951: LD_INT 251
17953: EQUAL
17954: PUSH
17955: LD_VAR 0 2
17959: PPUSH
17960: CALL_OW 264
17964: PUSH
17965: LD_INT 81
17967: EQUAL
17968: AND
17969: IFFALSE 17990
// MinerDetonateMine ( unit , x , y ) ;
17971: LD_VAR 0 2
17975: PPUSH
17976: LD_VAR 0 4
17980: PPUSH
17981: LD_VAR 0 5
17985: PPUSH
17986: CALL 21313 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17990: LD_VAR 0 1
17994: PUSH
17995: LD_INT 252
17997: EQUAL
17998: PUSH
17999: LD_VAR 0 2
18003: PPUSH
18004: CALL_OW 264
18008: PUSH
18009: LD_INT 81
18011: EQUAL
18012: AND
18013: IFFALSE 18034
// MinerCreateMinefield ( unit , x , y ) ;
18015: LD_VAR 0 2
18019: PPUSH
18020: LD_VAR 0 4
18024: PPUSH
18025: LD_VAR 0 5
18029: PPUSH
18030: CALL 21730 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 253
18041: EQUAL
18042: PUSH
18043: LD_VAR 0 2
18047: PPUSH
18048: CALL_OW 257
18052: PUSH
18053: LD_INT 5
18055: EQUAL
18056: AND
18057: IFFALSE 18078
// ComBinocular ( unit , x , y ) ;
18059: LD_VAR 0 2
18063: PPUSH
18064: LD_VAR 0 4
18068: PPUSH
18069: LD_VAR 0 5
18073: PPUSH
18074: CALL 22099 0 3
// if selectedUnit then
18078: LD_VAR 0 3
18082: IFFALSE 18138
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18084: LD_VAR 0 1
18088: PUSH
18089: LD_INT 254
18091: EQUAL
18092: PUSH
18093: LD_VAR 0 2
18097: PPUSH
18098: CALL_OW 264
18102: PUSH
18103: LD_INT 99
18105: EQUAL
18106: AND
18107: PUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: CALL_OW 263
18117: PUSH
18118: LD_INT 3
18120: EQUAL
18121: AND
18122: IFFALSE 18138
// HackDestroyVehicle ( unit , selectedUnit ) ;
18124: LD_VAR 0 2
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: CALL 20402 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18138: LD_VAR 0 1
18142: PUSH
18143: LD_INT 255
18145: EQUAL
18146: PUSH
18147: LD_VAR 0 2
18151: PPUSH
18152: CALL_OW 264
18156: PUSH
18157: LD_INT 14
18159: PUSH
18160: LD_INT 53
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: IN
18167: AND
18168: PUSH
18169: LD_VAR 0 4
18173: PPUSH
18174: LD_VAR 0 5
18178: PPUSH
18179: CALL_OW 488
18183: AND
18184: IFFALSE 18208
// CutTreeXYR ( unit , x , y , 12 ) ;
18186: LD_VAR 0 2
18190: PPUSH
18191: LD_VAR 0 4
18195: PPUSH
18196: LD_VAR 0 5
18200: PPUSH
18201: LD_INT 12
18203: PPUSH
18204: CALL 18399 0 4
// if cmd = 256 then
18208: LD_VAR 0 1
18212: PUSH
18213: LD_INT 256
18215: EQUAL
18216: IFFALSE 18237
// SetFactoryWaypoint ( unit , x , y ) ;
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_VAR 0 4
18227: PPUSH
18228: LD_VAR 0 5
18232: PPUSH
18233: CALL 15875 0 3
// if cmd = 257 then
18237: LD_VAR 0 1
18241: PUSH
18242: LD_INT 257
18244: EQUAL
18245: IFFALSE 18266
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18247: LD_VAR 0 2
18251: PPUSH
18252: LD_VAR 0 4
18256: PPUSH
18257: LD_VAR 0 5
18261: PPUSH
18262: CALL 16365 0 3
// if cmd = 258 then
18266: LD_VAR 0 1
18270: PUSH
18271: LD_INT 258
18273: EQUAL
18274: IFFALSE 18298
// BurnTreeXYR ( unit , x , y , 8 ) ;
18276: LD_VAR 0 2
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: LD_VAR 0 5
18290: PPUSH
18291: LD_INT 8
18293: PPUSH
18294: CALL 18793 0 4
// end ;
18298: LD_VAR 0 6
18302: RET
// export function ComRadiation ( un ) ; var eff ; begin
18303: LD_INT 0
18305: PPUSH
18306: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 264
18316: PUSH
18317: LD_INT 91
18319: NONEQUAL
18320: IFFALSE 18324
// exit ;
18322: GO 18394
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18324: LD_INT 68
18326: PPUSH
18327: LD_VAR 0 1
18331: PPUSH
18332: CALL_OW 255
18336: PPUSH
18337: CALL_OW 321
18341: PUSH
18342: LD_INT 2
18344: EQUAL
18345: IFFALSE 18357
// eff := 70 else
18347: LD_ADDR_VAR 0 3
18351: PUSH
18352: LD_INT 70
18354: ST_TO_ADDR
18355: GO 18365
// eff := 30 ;
18357: LD_ADDR_VAR 0 3
18361: PUSH
18362: LD_INT 30
18364: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 250
18374: PPUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 251
18384: PPUSH
18385: LD_VAR 0 3
18389: PPUSH
18390: CALL_OW 495
// end ;
18394: LD_VAR 0 2
18398: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18399: LD_INT 0
18401: PPUSH
18402: PPUSH
18403: PPUSH
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
18408: PPUSH
18409: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 302
18419: NOT
18420: PUSH
18421: LD_VAR 0 2
18425: PPUSH
18426: LD_VAR 0 3
18430: PPUSH
18431: CALL_OW 488
18435: NOT
18436: OR
18437: PUSH
18438: LD_VAR 0 4
18442: NOT
18443: OR
18444: IFFALSE 18448
// exit ;
18446: GO 18788
// list := [ ] ;
18448: LD_ADDR_VAR 0 13
18452: PUSH
18453: EMPTY
18454: ST_TO_ADDR
// if x - r < 0 then
18455: LD_VAR 0 2
18459: PUSH
18460: LD_VAR 0 4
18464: MINUS
18465: PUSH
18466: LD_INT 0
18468: LESS
18469: IFFALSE 18481
// min_x := 0 else
18471: LD_ADDR_VAR 0 7
18475: PUSH
18476: LD_INT 0
18478: ST_TO_ADDR
18479: GO 18497
// min_x := x - r ;
18481: LD_ADDR_VAR 0 7
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: LD_VAR 0 4
18495: MINUS
18496: ST_TO_ADDR
// if y - r < 0 then
18497: LD_VAR 0 3
18501: PUSH
18502: LD_VAR 0 4
18506: MINUS
18507: PUSH
18508: LD_INT 0
18510: LESS
18511: IFFALSE 18523
// min_y := 0 else
18513: LD_ADDR_VAR 0 8
18517: PUSH
18518: LD_INT 0
18520: ST_TO_ADDR
18521: GO 18539
// min_y := y - r ;
18523: LD_ADDR_VAR 0 8
18527: PUSH
18528: LD_VAR 0 3
18532: PUSH
18533: LD_VAR 0 4
18537: MINUS
18538: ST_TO_ADDR
// max_x := x + r ;
18539: LD_ADDR_VAR 0 9
18543: PUSH
18544: LD_VAR 0 2
18548: PUSH
18549: LD_VAR 0 4
18553: PLUS
18554: ST_TO_ADDR
// max_y := y + r ;
18555: LD_ADDR_VAR 0 10
18559: PUSH
18560: LD_VAR 0 3
18564: PUSH
18565: LD_VAR 0 4
18569: PLUS
18570: ST_TO_ADDR
// for _x = min_x to max_x do
18571: LD_ADDR_VAR 0 11
18575: PUSH
18576: DOUBLE
18577: LD_VAR 0 7
18581: DEC
18582: ST_TO_ADDR
18583: LD_VAR 0 9
18587: PUSH
18588: FOR_TO
18589: IFFALSE 18706
// for _y = min_y to max_y do
18591: LD_ADDR_VAR 0 12
18595: PUSH
18596: DOUBLE
18597: LD_VAR 0 8
18601: DEC
18602: ST_TO_ADDR
18603: LD_VAR 0 10
18607: PUSH
18608: FOR_TO
18609: IFFALSE 18702
// begin if not ValidHex ( _x , _y ) then
18611: LD_VAR 0 11
18615: PPUSH
18616: LD_VAR 0 12
18620: PPUSH
18621: CALL_OW 488
18625: NOT
18626: IFFALSE 18630
// continue ;
18628: GO 18608
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18630: LD_VAR 0 11
18634: PPUSH
18635: LD_VAR 0 12
18639: PPUSH
18640: CALL_OW 351
18644: PUSH
18645: LD_VAR 0 11
18649: PPUSH
18650: LD_VAR 0 12
18654: PPUSH
18655: CALL_OW 554
18659: AND
18660: IFFALSE 18700
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18662: LD_ADDR_VAR 0 13
18666: PUSH
18667: LD_VAR 0 13
18671: PPUSH
18672: LD_VAR 0 13
18676: PUSH
18677: LD_INT 1
18679: PLUS
18680: PPUSH
18681: LD_VAR 0 11
18685: PUSH
18686: LD_VAR 0 12
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PPUSH
18695: CALL_OW 2
18699: ST_TO_ADDR
// end ;
18700: GO 18608
18702: POP
18703: POP
18704: GO 18588
18706: POP
18707: POP
// if not list then
18708: LD_VAR 0 13
18712: NOT
18713: IFFALSE 18717
// exit ;
18715: GO 18788
// for i in list do
18717: LD_ADDR_VAR 0 6
18721: PUSH
18722: LD_VAR 0 13
18726: PUSH
18727: FOR_IN
18728: IFFALSE 18786
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18730: LD_VAR 0 1
18734: PPUSH
18735: LD_STRING M
18737: PUSH
18738: LD_VAR 0 6
18742: PUSH
18743: LD_INT 1
18745: ARRAY
18746: PUSH
18747: LD_VAR 0 6
18751: PUSH
18752: LD_INT 2
18754: ARRAY
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: PPUSH
18780: CALL_OW 447
18784: GO 18727
18786: POP
18787: POP
// end ;
18788: LD_VAR 0 5
18792: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
18797: PPUSH
18798: PPUSH
18799: PPUSH
18800: PPUSH
18801: PPUSH
18802: PPUSH
18803: PPUSH
18804: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18805: LD_VAR 0 1
18809: PPUSH
18810: CALL_OW 302
18814: NOT
18815: PUSH
18816: LD_VAR 0 2
18820: PPUSH
18821: LD_VAR 0 3
18825: PPUSH
18826: CALL_OW 488
18830: NOT
18831: OR
18832: PUSH
18833: LD_VAR 0 4
18837: NOT
18838: OR
18839: IFFALSE 18843
// exit ;
18841: GO 19356
// list := [ ] ;
18843: LD_ADDR_VAR 0 13
18847: PUSH
18848: EMPTY
18849: ST_TO_ADDR
// if x - r < 0 then
18850: LD_VAR 0 2
18854: PUSH
18855: LD_VAR 0 4
18859: MINUS
18860: PUSH
18861: LD_INT 0
18863: LESS
18864: IFFALSE 18876
// min_x := 0 else
18866: LD_ADDR_VAR 0 7
18870: PUSH
18871: LD_INT 0
18873: ST_TO_ADDR
18874: GO 18892
// min_x := x - r ;
18876: LD_ADDR_VAR 0 7
18880: PUSH
18881: LD_VAR 0 2
18885: PUSH
18886: LD_VAR 0 4
18890: MINUS
18891: ST_TO_ADDR
// if y - r < 0 then
18892: LD_VAR 0 3
18896: PUSH
18897: LD_VAR 0 4
18901: MINUS
18902: PUSH
18903: LD_INT 0
18905: LESS
18906: IFFALSE 18918
// min_y := 0 else
18908: LD_ADDR_VAR 0 8
18912: PUSH
18913: LD_INT 0
18915: ST_TO_ADDR
18916: GO 18934
// min_y := y - r ;
18918: LD_ADDR_VAR 0 8
18922: PUSH
18923: LD_VAR 0 3
18927: PUSH
18928: LD_VAR 0 4
18932: MINUS
18933: ST_TO_ADDR
// max_x := x + r ;
18934: LD_ADDR_VAR 0 9
18938: PUSH
18939: LD_VAR 0 2
18943: PUSH
18944: LD_VAR 0 4
18948: PLUS
18949: ST_TO_ADDR
// max_y := y + r ;
18950: LD_ADDR_VAR 0 10
18954: PUSH
18955: LD_VAR 0 3
18959: PUSH
18960: LD_VAR 0 4
18964: PLUS
18965: ST_TO_ADDR
// for _x = min_x to max_x do
18966: LD_ADDR_VAR 0 11
18970: PUSH
18971: DOUBLE
18972: LD_VAR 0 7
18976: DEC
18977: ST_TO_ADDR
18978: LD_VAR 0 9
18982: PUSH
18983: FOR_TO
18984: IFFALSE 19101
// for _y = min_y to max_y do
18986: LD_ADDR_VAR 0 12
18990: PUSH
18991: DOUBLE
18992: LD_VAR 0 8
18996: DEC
18997: ST_TO_ADDR
18998: LD_VAR 0 10
19002: PUSH
19003: FOR_TO
19004: IFFALSE 19097
// begin if not ValidHex ( _x , _y ) then
19006: LD_VAR 0 11
19010: PPUSH
19011: LD_VAR 0 12
19015: PPUSH
19016: CALL_OW 488
19020: NOT
19021: IFFALSE 19025
// continue ;
19023: GO 19003
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19025: LD_VAR 0 11
19029: PPUSH
19030: LD_VAR 0 12
19034: PPUSH
19035: CALL_OW 351
19039: PUSH
19040: LD_VAR 0 11
19044: PPUSH
19045: LD_VAR 0 12
19049: PPUSH
19050: CALL_OW 554
19054: AND
19055: IFFALSE 19095
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19057: LD_ADDR_VAR 0 13
19061: PUSH
19062: LD_VAR 0 13
19066: PPUSH
19067: LD_VAR 0 13
19071: PUSH
19072: LD_INT 1
19074: PLUS
19075: PPUSH
19076: LD_VAR 0 11
19080: PUSH
19081: LD_VAR 0 12
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 2
19094: ST_TO_ADDR
// end ;
19095: GO 19003
19097: POP
19098: POP
19099: GO 18983
19101: POP
19102: POP
// if not list then
19103: LD_VAR 0 13
19107: NOT
19108: IFFALSE 19112
// exit ;
19110: GO 19356
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19112: LD_ADDR_VAR 0 13
19116: PUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: LD_VAR 0 13
19126: PPUSH
19127: LD_INT 1
19129: PPUSH
19130: LD_INT 1
19132: PPUSH
19133: CALL 28291 0 4
19137: ST_TO_ADDR
// ComStop ( flame ) ;
19138: LD_VAR 0 1
19142: PPUSH
19143: CALL_OW 141
// for i in list do
19147: LD_ADDR_VAR 0 6
19151: PUSH
19152: LD_VAR 0 13
19156: PUSH
19157: FOR_IN
19158: IFFALSE 19189
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_VAR 0 6
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: LD_VAR 0 6
19178: PUSH
19179: LD_INT 2
19181: ARRAY
19182: PPUSH
19183: CALL_OW 176
19187: GO 19157
19189: POP
19190: POP
// repeat wait ( 0 0$1 ) ;
19191: LD_INT 35
19193: PPUSH
19194: CALL_OW 67
// task := GetTaskList ( flame ) ;
19198: LD_ADDR_VAR 0 14
19202: PUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL_OW 437
19212: ST_TO_ADDR
// if not task then
19213: LD_VAR 0 14
19217: NOT
19218: IFFALSE 19222
// exit ;
19220: GO 19356
// if task [ 1 ] [ 1 ] <> | then
19222: LD_VAR 0 14
19226: PUSH
19227: LD_INT 1
19229: ARRAY
19230: PUSH
19231: LD_INT 1
19233: ARRAY
19234: PUSH
19235: LD_STRING |
19237: NONEQUAL
19238: IFFALSE 19242
// exit ;
19240: GO 19356
// _x := task [ 1 ] [ 2 ] ;
19242: LD_ADDR_VAR 0 11
19246: PUSH
19247: LD_VAR 0 14
19251: PUSH
19252: LD_INT 1
19254: ARRAY
19255: PUSH
19256: LD_INT 2
19258: ARRAY
19259: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19260: LD_ADDR_VAR 0 12
19264: PUSH
19265: LD_VAR 0 14
19269: PUSH
19270: LD_INT 1
19272: ARRAY
19273: PUSH
19274: LD_INT 3
19276: ARRAY
19277: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19278: LD_VAR 0 11
19282: PPUSH
19283: LD_VAR 0 12
19287: PPUSH
19288: CALL_OW 351
19292: NOT
19293: PUSH
19294: LD_VAR 0 11
19298: PPUSH
19299: LD_VAR 0 12
19303: PPUSH
19304: CALL_OW 554
19308: NOT
19309: OR
19310: IFFALSE 19344
// begin task := Delete ( task , 1 ) ;
19312: LD_ADDR_VAR 0 14
19316: PUSH
19317: LD_VAR 0 14
19321: PPUSH
19322: LD_INT 1
19324: PPUSH
19325: CALL_OW 3
19329: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19330: LD_VAR 0 1
19334: PPUSH
19335: LD_VAR 0 14
19339: PPUSH
19340: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19344: LD_VAR 0 1
19348: PPUSH
19349: CALL_OW 314
19353: NOT
19354: IFFALSE 19191
// end ;
19356: LD_VAR 0 5
19360: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19361: LD_EXP 64
19365: NOT
19366: IFFALSE 19416
19368: GO 19370
19370: DISABLE
// begin initHack := true ;
19371: LD_ADDR_EXP 64
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// hackTanks := [ ] ;
19379: LD_ADDR_EXP 65
19383: PUSH
19384: EMPTY
19385: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19386: LD_ADDR_EXP 66
19390: PUSH
19391: EMPTY
19392: ST_TO_ADDR
// hackLimit := 3 ;
19393: LD_ADDR_EXP 67
19397: PUSH
19398: LD_INT 3
19400: ST_TO_ADDR
// hackDist := 12 ;
19401: LD_ADDR_EXP 68
19405: PUSH
19406: LD_INT 12
19408: ST_TO_ADDR
// hackCounter := [ ] ;
19409: LD_ADDR_EXP 69
19413: PUSH
19414: EMPTY
19415: ST_TO_ADDR
// end ;
19416: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19417: LD_EXP 64
19421: PUSH
19422: LD_INT 34
19424: PUSH
19425: LD_INT 99
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PPUSH
19432: CALL_OW 69
19436: AND
19437: IFFALSE 19690
19439: GO 19441
19441: DISABLE
19442: LD_INT 0
19444: PPUSH
19445: PPUSH
// begin enable ;
19446: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19447: LD_ADDR_VAR 0 1
19451: PUSH
19452: LD_INT 34
19454: PUSH
19455: LD_INT 99
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PPUSH
19462: CALL_OW 69
19466: PUSH
19467: FOR_IN
19468: IFFALSE 19688
// begin if not i in hackTanks then
19470: LD_VAR 0 1
19474: PUSH
19475: LD_EXP 65
19479: IN
19480: NOT
19481: IFFALSE 19564
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19483: LD_ADDR_EXP 65
19487: PUSH
19488: LD_EXP 65
19492: PPUSH
19493: LD_EXP 65
19497: PUSH
19498: LD_INT 1
19500: PLUS
19501: PPUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 1
19511: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19512: LD_ADDR_EXP 66
19516: PUSH
19517: LD_EXP 66
19521: PPUSH
19522: LD_EXP 66
19526: PUSH
19527: LD_INT 1
19529: PLUS
19530: PPUSH
19531: EMPTY
19532: PPUSH
19533: CALL_OW 1
19537: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19538: LD_ADDR_EXP 69
19542: PUSH
19543: LD_EXP 69
19547: PPUSH
19548: LD_EXP 69
19552: PUSH
19553: LD_INT 1
19555: PLUS
19556: PPUSH
19557: EMPTY
19558: PPUSH
19559: CALL_OW 1
19563: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19564: LD_VAR 0 1
19568: PPUSH
19569: CALL_OW 302
19573: NOT
19574: IFFALSE 19587
// begin HackUnlinkAll ( i ) ;
19576: LD_VAR 0 1
19580: PPUSH
19581: CALL 19693 0 1
// continue ;
19585: GO 19467
// end ; HackCheckCapturedStatus ( i ) ;
19587: LD_VAR 0 1
19591: PPUSH
19592: CALL 20136 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19596: LD_ADDR_VAR 0 2
19600: PUSH
19601: LD_INT 81
19603: PUSH
19604: LD_VAR 0 1
19608: PPUSH
19609: CALL_OW 255
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 33
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 91
19630: PUSH
19631: LD_VAR 0 1
19635: PUSH
19636: LD_EXP 68
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 50
19648: PUSH
19649: EMPTY
19650: LIST
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: PPUSH
19658: CALL_OW 69
19662: ST_TO_ADDR
// if not tmp then
19663: LD_VAR 0 2
19667: NOT
19668: IFFALSE 19672
// continue ;
19670: GO 19467
// HackLink ( i , tmp ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: CALL 19829 0 2
// end ;
19686: GO 19467
19688: POP
19689: POP
// end ;
19690: PPOPN 2
19692: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19693: LD_INT 0
19695: PPUSH
19696: PPUSH
19697: PPUSH
// if not hack in hackTanks then
19698: LD_VAR 0 1
19702: PUSH
19703: LD_EXP 65
19707: IN
19708: NOT
19709: IFFALSE 19713
// exit ;
19711: GO 19824
// index := GetElementIndex ( hackTanks , hack ) ;
19713: LD_ADDR_VAR 0 4
19717: PUSH
19718: LD_EXP 65
19722: PPUSH
19723: LD_VAR 0 1
19727: PPUSH
19728: CALL 27588 0 2
19732: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19733: LD_EXP 66
19737: PUSH
19738: LD_VAR 0 4
19742: ARRAY
19743: IFFALSE 19824
// begin for i in hackTanksCaptured [ index ] do
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_EXP 66
19754: PUSH
19755: LD_VAR 0 4
19759: ARRAY
19760: PUSH
19761: FOR_IN
19762: IFFALSE 19788
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19764: LD_VAR 0 3
19768: PUSH
19769: LD_INT 1
19771: ARRAY
19772: PPUSH
19773: LD_VAR 0 3
19777: PUSH
19778: LD_INT 2
19780: ARRAY
19781: PPUSH
19782: CALL_OW 235
19786: GO 19761
19788: POP
19789: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19790: LD_ADDR_EXP 66
19794: PUSH
19795: LD_EXP 66
19799: PPUSH
19800: LD_VAR 0 4
19804: PPUSH
19805: EMPTY
19806: PPUSH
19807: CALL_OW 1
19811: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 505
// end ; end ;
19824: LD_VAR 0 2
19828: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19829: LD_INT 0
19831: PPUSH
19832: PPUSH
19833: PPUSH
// if not hack in hackTanks or not vehicles then
19834: LD_VAR 0 1
19838: PUSH
19839: LD_EXP 65
19843: IN
19844: NOT
19845: PUSH
19846: LD_VAR 0 2
19850: NOT
19851: OR
19852: IFFALSE 19856
// exit ;
19854: GO 20131
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19856: LD_ADDR_VAR 0 2
19860: PUSH
19861: LD_VAR 0 1
19865: PPUSH
19866: LD_VAR 0 2
19870: PPUSH
19871: LD_INT 1
19873: PPUSH
19874: LD_INT 1
19876: PPUSH
19877: CALL 28238 0 4
19881: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19882: LD_ADDR_VAR 0 5
19886: PUSH
19887: LD_EXP 65
19891: PPUSH
19892: LD_VAR 0 1
19896: PPUSH
19897: CALL 27588 0 2
19901: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19902: LD_EXP 66
19906: PUSH
19907: LD_VAR 0 5
19911: ARRAY
19912: PUSH
19913: LD_EXP 67
19917: LESS
19918: IFFALSE 20107
// begin for i := 1 to vehicles do
19920: LD_ADDR_VAR 0 4
19924: PUSH
19925: DOUBLE
19926: LD_INT 1
19928: DEC
19929: ST_TO_ADDR
19930: LD_VAR 0 2
19934: PUSH
19935: FOR_TO
19936: IFFALSE 20105
// begin if hackTanksCaptured [ index ] = hackLimit then
19938: LD_EXP 66
19942: PUSH
19943: LD_VAR 0 5
19947: ARRAY
19948: PUSH
19949: LD_EXP 67
19953: EQUAL
19954: IFFALSE 19958
// break ;
19956: GO 20105
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19958: LD_ADDR_EXP 69
19962: PUSH
19963: LD_EXP 69
19967: PPUSH
19968: LD_VAR 0 5
19972: PPUSH
19973: LD_EXP 69
19977: PUSH
19978: LD_VAR 0 5
19982: ARRAY
19983: PUSH
19984: LD_INT 1
19986: PLUS
19987: PPUSH
19988: CALL_OW 1
19992: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19993: LD_ADDR_EXP 66
19997: PUSH
19998: LD_EXP 66
20002: PPUSH
20003: LD_VAR 0 5
20007: PUSH
20008: LD_EXP 66
20012: PUSH
20013: LD_VAR 0 5
20017: ARRAY
20018: PUSH
20019: LD_INT 1
20021: PLUS
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PPUSH
20027: LD_VAR 0 2
20031: PUSH
20032: LD_VAR 0 4
20036: ARRAY
20037: PUSH
20038: LD_VAR 0 2
20042: PUSH
20043: LD_VAR 0 4
20047: ARRAY
20048: PPUSH
20049: CALL_OW 255
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL 27803 0 3
20062: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20063: LD_VAR 0 2
20067: PUSH
20068: LD_VAR 0 4
20072: ARRAY
20073: PPUSH
20074: LD_VAR 0 1
20078: PPUSH
20079: CALL_OW 255
20083: PPUSH
20084: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20088: LD_VAR 0 2
20092: PUSH
20093: LD_VAR 0 4
20097: ARRAY
20098: PPUSH
20099: CALL_OW 141
// end ;
20103: GO 19935
20105: POP
20106: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20107: LD_VAR 0 1
20111: PPUSH
20112: LD_EXP 66
20116: PUSH
20117: LD_VAR 0 5
20121: ARRAY
20122: PUSH
20123: LD_INT 0
20125: PLUS
20126: PPUSH
20127: CALL_OW 505
// end ;
20131: LD_VAR 0 3
20135: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20136: LD_INT 0
20138: PPUSH
20139: PPUSH
20140: PPUSH
20141: PPUSH
// if not hack in hackTanks then
20142: LD_VAR 0 1
20146: PUSH
20147: LD_EXP 65
20151: IN
20152: NOT
20153: IFFALSE 20157
// exit ;
20155: GO 20397
// index := GetElementIndex ( hackTanks , hack ) ;
20157: LD_ADDR_VAR 0 4
20161: PUSH
20162: LD_EXP 65
20166: PPUSH
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL 27588 0 2
20176: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: DOUBLE
20183: LD_EXP 66
20187: PUSH
20188: LD_VAR 0 4
20192: ARRAY
20193: INC
20194: ST_TO_ADDR
20195: LD_INT 1
20197: PUSH
20198: FOR_DOWNTO
20199: IFFALSE 20371
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20201: LD_ADDR_VAR 0 5
20205: PUSH
20206: LD_EXP 66
20210: PUSH
20211: LD_VAR 0 4
20215: ARRAY
20216: PUSH
20217: LD_VAR 0 3
20221: ARRAY
20222: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20223: LD_VAR 0 5
20227: PUSH
20228: LD_INT 1
20230: ARRAY
20231: PPUSH
20232: CALL_OW 302
20236: NOT
20237: PUSH
20238: LD_VAR 0 5
20242: PUSH
20243: LD_INT 1
20245: ARRAY
20246: PPUSH
20247: CALL_OW 255
20251: PUSH
20252: LD_VAR 0 1
20256: PPUSH
20257: CALL_OW 255
20261: NONEQUAL
20262: OR
20263: IFFALSE 20369
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20265: LD_VAR 0 5
20269: PUSH
20270: LD_INT 1
20272: ARRAY
20273: PPUSH
20274: CALL_OW 305
20278: PUSH
20279: LD_VAR 0 5
20283: PUSH
20284: LD_INT 1
20286: ARRAY
20287: PPUSH
20288: CALL_OW 255
20292: PUSH
20293: LD_VAR 0 1
20297: PPUSH
20298: CALL_OW 255
20302: EQUAL
20303: AND
20304: IFFALSE 20328
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20306: LD_VAR 0 5
20310: PUSH
20311: LD_INT 1
20313: ARRAY
20314: PPUSH
20315: LD_VAR 0 5
20319: PUSH
20320: LD_INT 2
20322: ARRAY
20323: PPUSH
20324: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20328: LD_ADDR_EXP 66
20332: PUSH
20333: LD_EXP 66
20337: PPUSH
20338: LD_VAR 0 4
20342: PPUSH
20343: LD_EXP 66
20347: PUSH
20348: LD_VAR 0 4
20352: ARRAY
20353: PPUSH
20354: LD_VAR 0 3
20358: PPUSH
20359: CALL_OW 3
20363: PPUSH
20364: CALL_OW 1
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20198
20371: POP
20372: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20373: LD_VAR 0 1
20377: PPUSH
20378: LD_EXP 66
20382: PUSH
20383: LD_VAR 0 4
20387: ARRAY
20388: PUSH
20389: LD_INT 0
20391: PLUS
20392: PPUSH
20393: CALL_OW 505
// end ;
20397: LD_VAR 0 2
20401: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20402: LD_INT 0
20404: PPUSH
20405: PPUSH
20406: PPUSH
20407: PPUSH
// if not hack in hackTanks then
20408: LD_VAR 0 1
20412: PUSH
20413: LD_EXP 65
20417: IN
20418: NOT
20419: IFFALSE 20423
// exit ;
20421: GO 20508
// index := GetElementIndex ( hackTanks , hack ) ;
20423: LD_ADDR_VAR 0 5
20427: PUSH
20428: LD_EXP 65
20432: PPUSH
20433: LD_VAR 0 1
20437: PPUSH
20438: CALL 27588 0 2
20442: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20443: LD_ADDR_VAR 0 4
20447: PUSH
20448: DOUBLE
20449: LD_INT 1
20451: DEC
20452: ST_TO_ADDR
20453: LD_EXP 66
20457: PUSH
20458: LD_VAR 0 5
20462: ARRAY
20463: PUSH
20464: FOR_TO
20465: IFFALSE 20506
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20467: LD_EXP 66
20471: PUSH
20472: LD_VAR 0 5
20476: ARRAY
20477: PUSH
20478: LD_VAR 0 4
20482: ARRAY
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PUSH
20488: LD_VAR 0 2
20492: EQUAL
20493: IFFALSE 20504
// KillUnit ( vehicle ) ;
20495: LD_VAR 0 2
20499: PPUSH
20500: CALL_OW 66
20504: GO 20464
20506: POP
20507: POP
// end ;
20508: LD_VAR 0 3
20512: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20513: LD_EXP 70
20517: NOT
20518: IFFALSE 20553
20520: GO 20522
20522: DISABLE
// begin initMiner := true ;
20523: LD_ADDR_EXP 70
20527: PUSH
20528: LD_INT 1
20530: ST_TO_ADDR
// minersList := [ ] ;
20531: LD_ADDR_EXP 71
20535: PUSH
20536: EMPTY
20537: ST_TO_ADDR
// minerMinesList := [ ] ;
20538: LD_ADDR_EXP 72
20542: PUSH
20543: EMPTY
20544: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20545: LD_ADDR_EXP 73
20549: PUSH
20550: LD_INT 5
20552: ST_TO_ADDR
// end ;
20553: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20554: LD_EXP 70
20558: PUSH
20559: LD_INT 34
20561: PUSH
20562: LD_INT 81
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 69
20573: AND
20574: IFFALSE 21035
20576: GO 20578
20578: DISABLE
20579: LD_INT 0
20581: PPUSH
20582: PPUSH
20583: PPUSH
20584: PPUSH
// begin enable ;
20585: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20586: LD_ADDR_VAR 0 1
20590: PUSH
20591: LD_INT 34
20593: PUSH
20594: LD_INT 81
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 69
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20679
// begin if not i in minersList then
20609: LD_VAR 0 1
20613: PUSH
20614: LD_EXP 71
20618: IN
20619: NOT
20620: IFFALSE 20677
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20622: LD_ADDR_EXP 71
20626: PUSH
20627: LD_EXP 71
20631: PPUSH
20632: LD_EXP 71
20636: PUSH
20637: LD_INT 1
20639: PLUS
20640: PPUSH
20641: LD_VAR 0 1
20645: PPUSH
20646: CALL_OW 1
20650: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20651: LD_ADDR_EXP 72
20655: PUSH
20656: LD_EXP 72
20660: PPUSH
20661: LD_EXP 72
20665: PUSH
20666: LD_INT 1
20668: PLUS
20669: PPUSH
20670: EMPTY
20671: PPUSH
20672: CALL_OW 1
20676: ST_TO_ADDR
// end end ;
20677: GO 20606
20679: POP
20680: POP
// for i := minerMinesList downto 1 do
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: DOUBLE
20687: LD_EXP 72
20691: INC
20692: ST_TO_ADDR
20693: LD_INT 1
20695: PUSH
20696: FOR_DOWNTO
20697: IFFALSE 21033
// begin if IsLive ( minersList [ i ] ) then
20699: LD_EXP 71
20703: PUSH
20704: LD_VAR 0 1
20708: ARRAY
20709: PPUSH
20710: CALL_OW 300
20714: IFFALSE 20742
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20716: LD_EXP 71
20720: PUSH
20721: LD_VAR 0 1
20725: ARRAY
20726: PPUSH
20727: LD_EXP 72
20731: PUSH
20732: LD_VAR 0 1
20736: ARRAY
20737: PPUSH
20738: CALL_OW 505
// if not minerMinesList [ i ] then
20742: LD_EXP 72
20746: PUSH
20747: LD_VAR 0 1
20751: ARRAY
20752: NOT
20753: IFFALSE 20757
// continue ;
20755: GO 20696
// for j := minerMinesList [ i ] downto 1 do
20757: LD_ADDR_VAR 0 2
20761: PUSH
20762: DOUBLE
20763: LD_EXP 72
20767: PUSH
20768: LD_VAR 0 1
20772: ARRAY
20773: INC
20774: ST_TO_ADDR
20775: LD_INT 1
20777: PUSH
20778: FOR_DOWNTO
20779: IFFALSE 21029
// begin side := GetSide ( minersList [ i ] ) ;
20781: LD_ADDR_VAR 0 3
20785: PUSH
20786: LD_EXP 71
20790: PUSH
20791: LD_VAR 0 1
20795: ARRAY
20796: PPUSH
20797: CALL_OW 255
20801: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20802: LD_ADDR_VAR 0 4
20806: PUSH
20807: LD_EXP 72
20811: PUSH
20812: LD_VAR 0 1
20816: ARRAY
20817: PUSH
20818: LD_VAR 0 2
20822: ARRAY
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: PPUSH
20828: LD_EXP 72
20832: PUSH
20833: LD_VAR 0 1
20837: ARRAY
20838: PUSH
20839: LD_VAR 0 2
20843: ARRAY
20844: PUSH
20845: LD_INT 2
20847: ARRAY
20848: PPUSH
20849: CALL_OW 428
20853: ST_TO_ADDR
// if not tmp then
20854: LD_VAR 0 4
20858: NOT
20859: IFFALSE 20863
// continue ;
20861: GO 20778
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20863: LD_VAR 0 4
20867: PUSH
20868: LD_INT 81
20870: PUSH
20871: LD_VAR 0 3
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PPUSH
20880: CALL_OW 69
20884: IN
20885: PUSH
20886: LD_EXP 72
20890: PUSH
20891: LD_VAR 0 1
20895: ARRAY
20896: PUSH
20897: LD_VAR 0 2
20901: ARRAY
20902: PUSH
20903: LD_INT 1
20905: ARRAY
20906: PPUSH
20907: LD_EXP 72
20911: PUSH
20912: LD_VAR 0 1
20916: ARRAY
20917: PUSH
20918: LD_VAR 0 2
20922: ARRAY
20923: PUSH
20924: LD_INT 2
20926: ARRAY
20927: PPUSH
20928: CALL_OW 458
20932: AND
20933: IFFALSE 21027
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20935: LD_EXP 72
20939: PUSH
20940: LD_VAR 0 1
20944: ARRAY
20945: PUSH
20946: LD_VAR 0 2
20950: ARRAY
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: PPUSH
20956: LD_EXP 72
20960: PUSH
20961: LD_VAR 0 1
20965: ARRAY
20966: PUSH
20967: LD_VAR 0 2
20971: ARRAY
20972: PUSH
20973: LD_INT 2
20975: ARRAY
20976: PPUSH
20977: LD_VAR 0 3
20981: PPUSH
20982: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20986: LD_ADDR_EXP 72
20990: PUSH
20991: LD_EXP 72
20995: PPUSH
20996: LD_VAR 0 1
21000: PPUSH
21001: LD_EXP 72
21005: PUSH
21006: LD_VAR 0 1
21010: ARRAY
21011: PPUSH
21012: LD_VAR 0 2
21016: PPUSH
21017: CALL_OW 3
21021: PPUSH
21022: CALL_OW 1
21026: ST_TO_ADDR
// end ; end ;
21027: GO 20778
21029: POP
21030: POP
// end ;
21031: GO 20696
21033: POP
21034: POP
// end ;
21035: PPOPN 4
21037: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
// result := false ;
21042: LD_ADDR_VAR 0 4
21046: PUSH
21047: LD_INT 0
21049: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21050: LD_VAR 0 1
21054: PPUSH
21055: CALL_OW 264
21059: PUSH
21060: LD_INT 81
21062: EQUAL
21063: NOT
21064: IFFALSE 21068
// exit ;
21066: GO 21308
// index := GetElementIndex ( minersList , unit ) ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_EXP 71
21077: PPUSH
21078: LD_VAR 0 1
21082: PPUSH
21083: CALL 27588 0 2
21087: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21088: LD_EXP 72
21092: PUSH
21093: LD_VAR 0 5
21097: ARRAY
21098: PUSH
21099: LD_EXP 73
21103: GREATEREQUAL
21104: IFFALSE 21108
// exit ;
21106: GO 21308
// ComMoveXY ( unit , x , y ) ;
21108: LD_VAR 0 1
21112: PPUSH
21113: LD_VAR 0 2
21117: PPUSH
21118: LD_VAR 0 3
21122: PPUSH
21123: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21127: LD_INT 35
21129: PPUSH
21130: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21134: LD_VAR 0 1
21138: PPUSH
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_VAR 0 3
21148: PPUSH
21149: CALL 59349 0 3
21153: NOT
21154: PUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: CALL_OW 314
21164: AND
21165: IFFALSE 21169
// exit ;
21167: GO 21308
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: CALL_OW 428
21183: PUSH
21184: LD_VAR 0 1
21188: EQUAL
21189: PUSH
21190: LD_VAR 0 1
21194: PPUSH
21195: CALL_OW 314
21199: NOT
21200: AND
21201: IFFALSE 21127
// PlaySoundXY ( x , y , PlantMine ) ;
21203: LD_VAR 0 2
21207: PPUSH
21208: LD_VAR 0 3
21212: PPUSH
21213: LD_STRING PlantMine
21215: PPUSH
21216: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21220: LD_VAR 0 2
21224: PPUSH
21225: LD_VAR 0 3
21229: PPUSH
21230: LD_VAR 0 1
21234: PPUSH
21235: CALL_OW 255
21239: PPUSH
21240: LD_INT 0
21242: PPUSH
21243: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21247: LD_ADDR_EXP 72
21251: PUSH
21252: LD_EXP 72
21256: PPUSH
21257: LD_VAR 0 5
21261: PUSH
21262: LD_EXP 72
21266: PUSH
21267: LD_VAR 0 5
21271: ARRAY
21272: PUSH
21273: LD_INT 1
21275: PLUS
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PPUSH
21281: LD_VAR 0 2
21285: PUSH
21286: LD_VAR 0 3
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL 27803 0 3
21299: ST_TO_ADDR
// result := true ;
21300: LD_ADDR_VAR 0 4
21304: PUSH
21305: LD_INT 1
21307: ST_TO_ADDR
// end ;
21308: LD_VAR 0 4
21312: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
// if not unit in minersList then
21318: LD_VAR 0 1
21322: PUSH
21323: LD_EXP 71
21327: IN
21328: NOT
21329: IFFALSE 21333
// exit ;
21331: GO 21725
// index := GetElementIndex ( minersList , unit ) ;
21333: LD_ADDR_VAR 0 6
21337: PUSH
21338: LD_EXP 71
21342: PPUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL 27588 0 2
21352: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21353: LD_ADDR_VAR 0 5
21357: PUSH
21358: DOUBLE
21359: LD_EXP 72
21363: PUSH
21364: LD_VAR 0 6
21368: ARRAY
21369: INC
21370: ST_TO_ADDR
21371: LD_INT 1
21373: PUSH
21374: FOR_DOWNTO
21375: IFFALSE 21536
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21377: LD_EXP 72
21381: PUSH
21382: LD_VAR 0 6
21386: ARRAY
21387: PUSH
21388: LD_VAR 0 5
21392: ARRAY
21393: PUSH
21394: LD_INT 1
21396: ARRAY
21397: PUSH
21398: LD_VAR 0 2
21402: EQUAL
21403: PUSH
21404: LD_EXP 72
21408: PUSH
21409: LD_VAR 0 6
21413: ARRAY
21414: PUSH
21415: LD_VAR 0 5
21419: ARRAY
21420: PUSH
21421: LD_INT 2
21423: ARRAY
21424: PUSH
21425: LD_VAR 0 3
21429: EQUAL
21430: AND
21431: IFFALSE 21534
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21433: LD_EXP 72
21437: PUSH
21438: LD_VAR 0 6
21442: ARRAY
21443: PUSH
21444: LD_VAR 0 5
21448: ARRAY
21449: PUSH
21450: LD_INT 1
21452: ARRAY
21453: PPUSH
21454: LD_EXP 72
21458: PUSH
21459: LD_VAR 0 6
21463: ARRAY
21464: PUSH
21465: LD_VAR 0 5
21469: ARRAY
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: PPUSH
21475: LD_VAR 0 1
21479: PPUSH
21480: CALL_OW 255
21484: PPUSH
21485: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21489: LD_ADDR_EXP 72
21493: PUSH
21494: LD_EXP 72
21498: PPUSH
21499: LD_VAR 0 6
21503: PPUSH
21504: LD_EXP 72
21508: PUSH
21509: LD_VAR 0 6
21513: ARRAY
21514: PPUSH
21515: LD_VAR 0 5
21519: PPUSH
21520: CALL_OW 3
21524: PPUSH
21525: CALL_OW 1
21529: ST_TO_ADDR
// exit ;
21530: POP
21531: POP
21532: GO 21725
// end ; end ;
21534: GO 21374
21536: POP
21537: POP
// for i := minerMinesList [ index ] downto 1 do
21538: LD_ADDR_VAR 0 5
21542: PUSH
21543: DOUBLE
21544: LD_EXP 72
21548: PUSH
21549: LD_VAR 0 6
21553: ARRAY
21554: INC
21555: ST_TO_ADDR
21556: LD_INT 1
21558: PUSH
21559: FOR_DOWNTO
21560: IFFALSE 21723
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21562: LD_EXP 72
21566: PUSH
21567: LD_VAR 0 6
21571: ARRAY
21572: PUSH
21573: LD_VAR 0 5
21577: ARRAY
21578: PUSH
21579: LD_INT 1
21581: ARRAY
21582: PPUSH
21583: LD_EXP 72
21587: PUSH
21588: LD_VAR 0 6
21592: ARRAY
21593: PUSH
21594: LD_VAR 0 5
21598: ARRAY
21599: PUSH
21600: LD_INT 2
21602: ARRAY
21603: PPUSH
21604: LD_VAR 0 2
21608: PPUSH
21609: LD_VAR 0 3
21613: PPUSH
21614: CALL_OW 298
21618: PUSH
21619: LD_INT 6
21621: LESS
21622: IFFALSE 21721
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21624: LD_EXP 72
21628: PUSH
21629: LD_VAR 0 6
21633: ARRAY
21634: PUSH
21635: LD_VAR 0 5
21639: ARRAY
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: LD_EXP 72
21649: PUSH
21650: LD_VAR 0 6
21654: ARRAY
21655: PUSH
21656: LD_VAR 0 5
21660: ARRAY
21661: PUSH
21662: LD_INT 2
21664: ARRAY
21665: PPUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: PPUSH
21676: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21680: LD_ADDR_EXP 72
21684: PUSH
21685: LD_EXP 72
21689: PPUSH
21690: LD_VAR 0 6
21694: PPUSH
21695: LD_EXP 72
21699: PUSH
21700: LD_VAR 0 6
21704: ARRAY
21705: PPUSH
21706: LD_VAR 0 5
21710: PPUSH
21711: CALL_OW 3
21715: PPUSH
21716: CALL_OW 1
21720: ST_TO_ADDR
// end ; end ;
21721: GO 21559
21723: POP
21724: POP
// end ;
21725: LD_VAR 0 4
21729: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
21734: PPUSH
21735: PPUSH
21736: PPUSH
21737: PPUSH
21738: PPUSH
21739: PPUSH
21740: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21741: LD_VAR 0 1
21745: PPUSH
21746: CALL_OW 264
21750: PUSH
21751: LD_INT 81
21753: EQUAL
21754: NOT
21755: PUSH
21756: LD_VAR 0 1
21760: PUSH
21761: LD_EXP 71
21765: IN
21766: NOT
21767: OR
21768: IFFALSE 21772
// exit ;
21770: GO 22094
// index := GetElementIndex ( minersList , unit ) ;
21772: LD_ADDR_VAR 0 6
21776: PUSH
21777: LD_EXP 71
21781: PPUSH
21782: LD_VAR 0 1
21786: PPUSH
21787: CALL 27588 0 2
21791: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21792: LD_ADDR_VAR 0 8
21796: PUSH
21797: LD_EXP 73
21801: PUSH
21802: LD_EXP 72
21806: PUSH
21807: LD_VAR 0 6
21811: ARRAY
21812: MINUS
21813: ST_TO_ADDR
// if not minesFreeAmount then
21814: LD_VAR 0 8
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 22094
// tmp := [ ] ;
21823: LD_ADDR_VAR 0 7
21827: PUSH
21828: EMPTY
21829: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21830: LD_ADDR_VAR 0 5
21834: PUSH
21835: DOUBLE
21836: LD_INT 1
21838: DEC
21839: ST_TO_ADDR
21840: LD_VAR 0 8
21844: PUSH
21845: FOR_TO
21846: IFFALSE 22041
// begin _d := rand ( 0 , 5 ) ;
21848: LD_ADDR_VAR 0 11
21852: PUSH
21853: LD_INT 0
21855: PPUSH
21856: LD_INT 5
21858: PPUSH
21859: CALL_OW 12
21863: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21864: LD_ADDR_VAR 0 12
21868: PUSH
21869: LD_INT 2
21871: PPUSH
21872: LD_INT 6
21874: PPUSH
21875: CALL_OW 12
21879: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21880: LD_ADDR_VAR 0 9
21884: PUSH
21885: LD_VAR 0 2
21889: PPUSH
21890: LD_VAR 0 11
21894: PPUSH
21895: LD_VAR 0 12
21899: PPUSH
21900: CALL_OW 272
21904: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21905: LD_ADDR_VAR 0 10
21909: PUSH
21910: LD_VAR 0 3
21914: PPUSH
21915: LD_VAR 0 11
21919: PPUSH
21920: LD_VAR 0 12
21924: PPUSH
21925: CALL_OW 273
21929: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21930: LD_VAR 0 9
21934: PPUSH
21935: LD_VAR 0 10
21939: PPUSH
21940: CALL_OW 488
21944: PUSH
21945: LD_VAR 0 9
21949: PUSH
21950: LD_VAR 0 10
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_VAR 0 7
21963: IN
21964: NOT
21965: AND
21966: PUSH
21967: LD_VAR 0 9
21971: PPUSH
21972: LD_VAR 0 10
21976: PPUSH
21977: CALL_OW 458
21981: NOT
21982: AND
21983: IFFALSE 22025
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21985: LD_ADDR_VAR 0 7
21989: PUSH
21990: LD_VAR 0 7
21994: PPUSH
21995: LD_VAR 0 7
21999: PUSH
22000: LD_INT 1
22002: PLUS
22003: PPUSH
22004: LD_VAR 0 9
22008: PUSH
22009: LD_VAR 0 10
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PPUSH
22018: CALL_OW 1
22022: ST_TO_ADDR
22023: GO 22039
// i := i - 1 ;
22025: LD_ADDR_VAR 0 5
22029: PUSH
22030: LD_VAR 0 5
22034: PUSH
22035: LD_INT 1
22037: MINUS
22038: ST_TO_ADDR
// end ;
22039: GO 21845
22041: POP
22042: POP
// for i in tmp do
22043: LD_ADDR_VAR 0 5
22047: PUSH
22048: LD_VAR 0 7
22052: PUSH
22053: FOR_IN
22054: IFFALSE 22092
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22056: LD_VAR 0 1
22060: PPUSH
22061: LD_VAR 0 5
22065: PUSH
22066: LD_INT 1
22068: ARRAY
22069: PPUSH
22070: LD_VAR 0 5
22074: PUSH
22075: LD_INT 2
22077: ARRAY
22078: PPUSH
22079: CALL 21038 0 3
22083: NOT
22084: IFFALSE 22090
// exit ;
22086: POP
22087: POP
22088: GO 22094
22090: GO 22053
22092: POP
22093: POP
// end ;
22094: LD_VAR 0 4
22098: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22099: LD_INT 0
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
22108: PPUSH
22109: PPUSH
// if GetClass ( unit ) <> class_sniper then
22110: LD_VAR 0 1
22114: PPUSH
22115: CALL_OW 257
22119: PUSH
22120: LD_INT 5
22122: NONEQUAL
22123: IFFALSE 22127
// exit ;
22125: GO 22593
// dist := 8 ;
22127: LD_ADDR_VAR 0 5
22131: PUSH
22132: LD_INT 8
22134: ST_TO_ADDR
// viewRange := 12 ;
22135: LD_ADDR_VAR 0 8
22139: PUSH
22140: LD_INT 12
22142: ST_TO_ADDR
// side := GetSide ( unit ) ;
22143: LD_ADDR_VAR 0 6
22147: PUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 255
22157: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22158: LD_INT 61
22160: PPUSH
22161: LD_VAR 0 6
22165: PPUSH
22166: CALL_OW 321
22170: PUSH
22171: LD_INT 2
22173: EQUAL
22174: IFFALSE 22184
// viewRange := 16 ;
22176: LD_ADDR_VAR 0 8
22180: PUSH
22181: LD_INT 16
22183: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22184: LD_VAR 0 1
22188: PPUSH
22189: LD_VAR 0 2
22193: PPUSH
22194: LD_VAR 0 3
22198: PPUSH
22199: CALL_OW 297
22203: PUSH
22204: LD_VAR 0 5
22208: GREATER
22209: IFFALSE 22288
// begin ComMoveXY ( unit , x , y ) ;
22211: LD_VAR 0 1
22215: PPUSH
22216: LD_VAR 0 2
22220: PPUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22230: LD_INT 35
22232: PPUSH
22233: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22237: LD_VAR 0 1
22241: PPUSH
22242: LD_VAR 0 2
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: CALL 59349 0 3
22256: NOT
22257: IFFALSE 22261
// exit ;
22259: GO 22593
// until GetDistUnitXY ( unit , x , y ) < dist ;
22261: LD_VAR 0 1
22265: PPUSH
22266: LD_VAR 0 2
22270: PPUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: CALL_OW 297
22280: PUSH
22281: LD_VAR 0 5
22285: LESS
22286: IFFALSE 22230
// end ; ComTurnXY ( unit , x , y ) ;
22288: LD_VAR 0 1
22292: PPUSH
22293: LD_VAR 0 2
22297: PPUSH
22298: LD_VAR 0 3
22302: PPUSH
22303: CALL_OW 118
// repeat if Multiplayer then
22307: LD_OWVAR 4
22311: IFFALSE 22322
// wait ( 35 ) else
22313: LD_INT 35
22315: PPUSH
22316: CALL_OW 67
22320: GO 22329
// wait ( 5 ) ;
22322: LD_INT 5
22324: PPUSH
22325: CALL_OW 67
// _d := GetDir ( unit ) ;
22329: LD_ADDR_VAR 0 11
22333: PUSH
22334: LD_VAR 0 1
22338: PPUSH
22339: CALL_OW 254
22343: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
22344: LD_ADDR_VAR 0 7
22348: PUSH
22349: LD_VAR 0 1
22353: PPUSH
22354: CALL_OW 250
22358: PPUSH
22359: LD_VAR 0 1
22363: PPUSH
22364: CALL_OW 251
22368: PPUSH
22369: LD_VAR 0 2
22373: PPUSH
22374: LD_VAR 0 3
22378: PPUSH
22379: CALL 61957 0 4
22383: ST_TO_ADDR
// until dir = _d ;
22384: LD_VAR 0 7
22388: PUSH
22389: LD_VAR 0 11
22393: EQUAL
22394: IFFALSE 22307
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
22396: LD_ADDR_VAR 0 9
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 250
22410: PPUSH
22411: LD_VAR 0 7
22415: PPUSH
22416: LD_VAR 0 5
22420: PPUSH
22421: CALL_OW 272
22425: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
22426: LD_ADDR_VAR 0 10
22430: PUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 251
22440: PPUSH
22441: LD_VAR 0 7
22445: PPUSH
22446: LD_VAR 0 5
22450: PPUSH
22451: CALL_OW 273
22455: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22456: LD_VAR 0 9
22460: PPUSH
22461: LD_VAR 0 10
22465: PPUSH
22466: CALL_OW 488
22470: NOT
22471: IFFALSE 22475
// exit ;
22473: GO 22593
// ComAnimCustom ( unit , 1 ) ;
22475: LD_VAR 0 1
22479: PPUSH
22480: LD_INT 1
22482: PPUSH
22483: CALL_OW 592
// p := 0 ;
22487: LD_ADDR_VAR 0 12
22491: PUSH
22492: LD_INT 0
22494: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22495: LD_VAR 0 9
22499: PPUSH
22500: LD_VAR 0 10
22504: PPUSH
22505: LD_VAR 0 6
22509: PPUSH
22510: LD_VAR 0 8
22514: PPUSH
22515: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
22519: LD_INT 35
22521: PPUSH
22522: CALL_OW 67
// p := Inc ( p ) ;
22526: LD_ADDR_VAR 0 12
22530: PUSH
22531: LD_VAR 0 12
22535: PPUSH
22536: CALL 61913 0 1
22540: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
22541: LD_VAR 0 12
22545: PUSH
22546: LD_INT 3
22548: EQUAL
22549: PUSH
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 302
22559: NOT
22560: OR
22561: PUSH
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 301
22571: OR
22572: IFFALSE 22519
// RemoveSeeing ( _x , _y , side ) ;
22574: LD_VAR 0 9
22578: PPUSH
22579: LD_VAR 0 10
22583: PPUSH
22584: LD_VAR 0 6
22588: PPUSH
22589: CALL_OW 331
// end ; end_of_file
22593: LD_VAR 0 4
22597: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
22598: LD_VAR 0 1
22602: PPUSH
22603: LD_VAR 0 2
22607: PPUSH
22608: LD_VAR 0 3
22612: PPUSH
22613: LD_VAR 0 4
22617: PPUSH
22618: LD_VAR 0 5
22622: PPUSH
22623: LD_VAR 0 6
22627: PPUSH
22628: CALL 1539 0 6
// end ;
22632: PPOPN 6
22634: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
22635: LD_INT 0
22637: PPUSH
// begin if not units then
22638: LD_VAR 0 1
22642: NOT
22643: IFFALSE 22647
// exit ;
22645: GO 22647
// end ;
22647: PPOPN 7
22649: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
22650: CALL 1426 0 0
// end ; end_of_file
22654: PPOPN 1
22656: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22657: LD_VAR 0 1
22661: PUSH
22662: LD_INT 200
22664: DOUBLE
22665: GREATEREQUAL
22666: IFFALSE 22674
22668: LD_INT 299
22670: DOUBLE
22671: LESSEQUAL
22672: IFTRUE 22676
22674: GO 22708
22676: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_VAR 0 2
22686: PPUSH
22687: LD_VAR 0 3
22691: PPUSH
22692: LD_VAR 0 4
22696: PPUSH
22697: LD_VAR 0 5
22701: PPUSH
22702: CALL 17899 0 5
22706: GO 22785
22708: LD_INT 300
22710: DOUBLE
22711: GREATEREQUAL
22712: IFFALSE 22720
22714: LD_INT 399
22716: DOUBLE
22717: LESSEQUAL
22718: IFTRUE 22722
22720: GO 22784
22722: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22723: LD_VAR 0 1
22727: PPUSH
22728: LD_VAR 0 2
22732: PPUSH
22733: LD_VAR 0 3
22737: PPUSH
22738: LD_VAR 0 4
22742: PPUSH
22743: LD_VAR 0 5
22747: PPUSH
22748: LD_VAR 0 6
22752: PPUSH
22753: LD_VAR 0 7
22757: PPUSH
22758: LD_VAR 0 8
22762: PPUSH
22763: LD_VAR 0 9
22767: PPUSH
22768: LD_VAR 0 10
22772: PPUSH
22773: LD_VAR 0 11
22777: PPUSH
22778: CALL 13887 0 11
22782: GO 22785
22784: POP
// end ;
22785: PPOPN 11
22787: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_VAR 0 2
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: LD_VAR 0 4
22807: PPUSH
22808: LD_VAR 0 5
22812: PPUSH
22813: CALL 17364 0 5
// end ; end_of_file
22817: PPOPN 5
22819: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22820: LD_INT 0
22822: PPUSH
22823: PPUSH
// if exist_mode then
22824: LD_VAR 0 2
22828: IFFALSE 22874
// begin unit := CreateCharacter ( prefix & ident ) ;
22830: LD_ADDR_VAR 0 5
22834: PUSH
22835: LD_VAR 0 3
22839: PUSH
22840: LD_VAR 0 1
22844: STR
22845: PPUSH
22846: CALL_OW 34
22850: ST_TO_ADDR
// if unit then
22851: LD_VAR 0 5
22855: IFFALSE 22872
// DeleteCharacters ( prefix & ident ) ;
22857: LD_VAR 0 3
22861: PUSH
22862: LD_VAR 0 1
22866: STR
22867: PPUSH
22868: CALL_OW 40
// end else
22872: GO 22889
// unit := NewCharacter ( ident ) ;
22874: LD_ADDR_VAR 0 5
22878: PUSH
22879: LD_VAR 0 1
22883: PPUSH
22884: CALL_OW 25
22888: ST_TO_ADDR
// result := unit ;
22889: LD_ADDR_VAR 0 4
22893: PUSH
22894: LD_VAR 0 5
22898: ST_TO_ADDR
// end ;
22899: LD_VAR 0 4
22903: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22904: LD_INT 0
22906: PPUSH
22907: PPUSH
// if not side or not nation then
22908: LD_VAR 0 1
22912: NOT
22913: PUSH
22914: LD_VAR 0 2
22918: NOT
22919: OR
22920: IFFALSE 22924
// exit ;
22922: GO 23692
// case nation of nation_american :
22924: LD_VAR 0 2
22928: PUSH
22929: LD_INT 1
22931: DOUBLE
22932: EQUAL
22933: IFTRUE 22937
22935: GO 23151
22937: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22938: LD_ADDR_VAR 0 4
22942: PUSH
22943: LD_INT 35
22945: PUSH
22946: LD_INT 45
22948: PUSH
22949: LD_INT 46
22951: PUSH
22952: LD_INT 47
22954: PUSH
22955: LD_INT 82
22957: PUSH
22958: LD_INT 83
22960: PUSH
22961: LD_INT 84
22963: PUSH
22964: LD_INT 85
22966: PUSH
22967: LD_INT 86
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: LD_INT 6
22978: PUSH
22979: LD_INT 15
22981: PUSH
22982: LD_INT 16
22984: PUSH
22985: LD_INT 7
22987: PUSH
22988: LD_INT 12
22990: PUSH
22991: LD_INT 13
22993: PUSH
22994: LD_INT 10
22996: PUSH
22997: LD_INT 14
22999: PUSH
23000: LD_INT 20
23002: PUSH
23003: LD_INT 21
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_INT 25
23011: PUSH
23012: LD_INT 32
23014: PUSH
23015: LD_INT 27
23017: PUSH
23018: LD_INT 36
23020: PUSH
23021: LD_INT 69
23023: PUSH
23024: LD_INT 39
23026: PUSH
23027: LD_INT 34
23029: PUSH
23030: LD_INT 40
23032: PUSH
23033: LD_INT 48
23035: PUSH
23036: LD_INT 49
23038: PUSH
23039: LD_INT 50
23041: PUSH
23042: LD_INT 51
23044: PUSH
23045: LD_INT 52
23047: PUSH
23048: LD_INT 53
23050: PUSH
23051: LD_INT 54
23053: PUSH
23054: LD_INT 55
23056: PUSH
23057: LD_INT 56
23059: PUSH
23060: LD_INT 57
23062: PUSH
23063: LD_INT 58
23065: PUSH
23066: LD_INT 59
23068: PUSH
23069: LD_INT 60
23071: PUSH
23072: LD_INT 61
23074: PUSH
23075: LD_INT 62
23077: PUSH
23078: LD_INT 80
23080: PUSH
23081: LD_INT 82
23083: PUSH
23084: LD_INT 83
23086: PUSH
23087: LD_INT 84
23089: PUSH
23090: LD_INT 85
23092: PUSH
23093: LD_INT 86
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: ST_TO_ADDR
23149: GO 23616
23151: LD_INT 2
23153: DOUBLE
23154: EQUAL
23155: IFTRUE 23159
23157: GO 23385
23159: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23160: LD_ADDR_VAR 0 4
23164: PUSH
23165: LD_INT 35
23167: PUSH
23168: LD_INT 45
23170: PUSH
23171: LD_INT 46
23173: PUSH
23174: LD_INT 47
23176: PUSH
23177: LD_INT 82
23179: PUSH
23180: LD_INT 83
23182: PUSH
23183: LD_INT 84
23185: PUSH
23186: LD_INT 85
23188: PUSH
23189: LD_INT 87
23191: PUSH
23192: LD_INT 70
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 4
23206: PUSH
23207: LD_INT 5
23209: PUSH
23210: LD_INT 6
23212: PUSH
23213: LD_INT 15
23215: PUSH
23216: LD_INT 18
23218: PUSH
23219: LD_INT 7
23221: PUSH
23222: LD_INT 17
23224: PUSH
23225: LD_INT 8
23227: PUSH
23228: LD_INT 20
23230: PUSH
23231: LD_INT 21
23233: PUSH
23234: LD_INT 22
23236: PUSH
23237: LD_INT 72
23239: PUSH
23240: LD_INT 26
23242: PUSH
23243: LD_INT 69
23245: PUSH
23246: LD_INT 39
23248: PUSH
23249: LD_INT 40
23251: PUSH
23252: LD_INT 41
23254: PUSH
23255: LD_INT 42
23257: PUSH
23258: LD_INT 43
23260: PUSH
23261: LD_INT 48
23263: PUSH
23264: LD_INT 49
23266: PUSH
23267: LD_INT 50
23269: PUSH
23270: LD_INT 51
23272: PUSH
23273: LD_INT 52
23275: PUSH
23276: LD_INT 53
23278: PUSH
23279: LD_INT 54
23281: PUSH
23282: LD_INT 55
23284: PUSH
23285: LD_INT 56
23287: PUSH
23288: LD_INT 60
23290: PUSH
23291: LD_INT 61
23293: PUSH
23294: LD_INT 62
23296: PUSH
23297: LD_INT 66
23299: PUSH
23300: LD_INT 67
23302: PUSH
23303: LD_INT 68
23305: PUSH
23306: LD_INT 81
23308: PUSH
23309: LD_INT 82
23311: PUSH
23312: LD_INT 83
23314: PUSH
23315: LD_INT 84
23317: PUSH
23318: LD_INT 85
23320: PUSH
23321: LD_INT 87
23323: PUSH
23324: LD_INT 88
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
23383: GO 23616
23385: LD_INT 3
23387: DOUBLE
23388: EQUAL
23389: IFTRUE 23393
23391: GO 23615
23393: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23394: LD_ADDR_VAR 0 4
23398: PUSH
23399: LD_INT 46
23401: PUSH
23402: LD_INT 47
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: LD_INT 82
23413: PUSH
23414: LD_INT 83
23416: PUSH
23417: LD_INT 84
23419: PUSH
23420: LD_INT 85
23422: PUSH
23423: LD_INT 86
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 9
23431: PUSH
23432: LD_INT 20
23434: PUSH
23435: LD_INT 19
23437: PUSH
23438: LD_INT 21
23440: PUSH
23441: LD_INT 24
23443: PUSH
23444: LD_INT 22
23446: PUSH
23447: LD_INT 25
23449: PUSH
23450: LD_INT 28
23452: PUSH
23453: LD_INT 29
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 31
23461: PUSH
23462: LD_INT 37
23464: PUSH
23465: LD_INT 38
23467: PUSH
23468: LD_INT 32
23470: PUSH
23471: LD_INT 27
23473: PUSH
23474: LD_INT 33
23476: PUSH
23477: LD_INT 69
23479: PUSH
23480: LD_INT 39
23482: PUSH
23483: LD_INT 34
23485: PUSH
23486: LD_INT 40
23488: PUSH
23489: LD_INT 71
23491: PUSH
23492: LD_INT 23
23494: PUSH
23495: LD_INT 44
23497: PUSH
23498: LD_INT 48
23500: PUSH
23501: LD_INT 49
23503: PUSH
23504: LD_INT 50
23506: PUSH
23507: LD_INT 51
23509: PUSH
23510: LD_INT 52
23512: PUSH
23513: LD_INT 53
23515: PUSH
23516: LD_INT 54
23518: PUSH
23519: LD_INT 55
23521: PUSH
23522: LD_INT 56
23524: PUSH
23525: LD_INT 57
23527: PUSH
23528: LD_INT 58
23530: PUSH
23531: LD_INT 59
23533: PUSH
23534: LD_INT 63
23536: PUSH
23537: LD_INT 64
23539: PUSH
23540: LD_INT 65
23542: PUSH
23543: LD_INT 82
23545: PUSH
23546: LD_INT 83
23548: PUSH
23549: LD_INT 84
23551: PUSH
23552: LD_INT 85
23554: PUSH
23555: LD_INT 86
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: ST_TO_ADDR
23613: GO 23616
23615: POP
// if state > - 1 and state < 3 then
23616: LD_VAR 0 3
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: GREATER
23625: PUSH
23626: LD_VAR 0 3
23630: PUSH
23631: LD_INT 3
23633: LESS
23634: AND
23635: IFFALSE 23692
// for i in result do
23637: LD_ADDR_VAR 0 5
23641: PUSH
23642: LD_VAR 0 4
23646: PUSH
23647: FOR_IN
23648: IFFALSE 23690
// if GetTech ( i , side ) <> state then
23650: LD_VAR 0 5
23654: PPUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 321
23664: PUSH
23665: LD_VAR 0 3
23669: NONEQUAL
23670: IFFALSE 23688
// result := result diff i ;
23672: LD_ADDR_VAR 0 4
23676: PUSH
23677: LD_VAR 0 4
23681: PUSH
23682: LD_VAR 0 5
23686: DIFF
23687: ST_TO_ADDR
23688: GO 23647
23690: POP
23691: POP
// end ;
23692: LD_VAR 0 4
23696: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23697: LD_INT 0
23699: PPUSH
23700: PPUSH
23701: PPUSH
// result := true ;
23702: LD_ADDR_VAR 0 3
23706: PUSH
23707: LD_INT 1
23709: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23710: LD_ADDR_VAR 0 5
23714: PUSH
23715: LD_VAR 0 2
23719: PPUSH
23720: CALL_OW 480
23724: ST_TO_ADDR
// if not tmp then
23725: LD_VAR 0 5
23729: NOT
23730: IFFALSE 23734
// exit ;
23732: GO 23783
// for i in tmp do
23734: LD_ADDR_VAR 0 4
23738: PUSH
23739: LD_VAR 0 5
23743: PUSH
23744: FOR_IN
23745: IFFALSE 23781
// if GetTech ( i , side ) <> state_researched then
23747: LD_VAR 0 4
23751: PPUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL_OW 321
23761: PUSH
23762: LD_INT 2
23764: NONEQUAL
23765: IFFALSE 23779
// begin result := false ;
23767: LD_ADDR_VAR 0 3
23771: PUSH
23772: LD_INT 0
23774: ST_TO_ADDR
// exit ;
23775: POP
23776: POP
23777: GO 23783
// end ;
23779: GO 23744
23781: POP
23782: POP
// end ;
23783: LD_VAR 0 3
23787: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23788: LD_INT 0
23790: PPUSH
23791: PPUSH
23792: PPUSH
23793: PPUSH
23794: PPUSH
23795: PPUSH
23796: PPUSH
23797: PPUSH
23798: PPUSH
23799: PPUSH
23800: PPUSH
23801: PPUSH
23802: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23803: LD_VAR 0 1
23807: NOT
23808: PUSH
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 257
23818: PUSH
23819: LD_INT 9
23821: NONEQUAL
23822: OR
23823: IFFALSE 23827
// exit ;
23825: GO 24400
// side := GetSide ( unit ) ;
23827: LD_ADDR_VAR 0 9
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 255
23841: ST_TO_ADDR
// tech_space := tech_spacanom ;
23842: LD_ADDR_VAR 0 12
23846: PUSH
23847: LD_INT 29
23849: ST_TO_ADDR
// tech_time := tech_taurad ;
23850: LD_ADDR_VAR 0 13
23854: PUSH
23855: LD_INT 28
23857: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23858: LD_ADDR_VAR 0 11
23862: PUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 310
23872: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23873: LD_VAR 0 11
23877: PPUSH
23878: CALL_OW 247
23882: PUSH
23883: LD_INT 2
23885: EQUAL
23886: IFFALSE 23890
// exit ;
23888: GO 24400
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23890: LD_ADDR_VAR 0 8
23894: PUSH
23895: LD_INT 81
23897: PUSH
23898: LD_VAR 0 9
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 3
23909: PUSH
23910: LD_INT 21
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PPUSH
23928: CALL_OW 69
23932: ST_TO_ADDR
// if not tmp then
23933: LD_VAR 0 8
23937: NOT
23938: IFFALSE 23942
// exit ;
23940: GO 24400
// if in_unit then
23942: LD_VAR 0 11
23946: IFFALSE 23970
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23948: LD_ADDR_VAR 0 10
23952: PUSH
23953: LD_VAR 0 8
23957: PPUSH
23958: LD_VAR 0 11
23962: PPUSH
23963: CALL_OW 74
23967: ST_TO_ADDR
23968: GO 23990
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23970: LD_ADDR_VAR 0 10
23974: PUSH
23975: LD_VAR 0 8
23979: PPUSH
23980: LD_VAR 0 1
23984: PPUSH
23985: CALL_OW 74
23989: ST_TO_ADDR
// if not enemy then
23990: LD_VAR 0 10
23994: NOT
23995: IFFALSE 23999
// exit ;
23997: GO 24400
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23999: LD_VAR 0 11
24003: PUSH
24004: LD_VAR 0 11
24008: PPUSH
24009: LD_VAR 0 10
24013: PPUSH
24014: CALL_OW 296
24018: PUSH
24019: LD_INT 13
24021: GREATER
24022: AND
24023: PUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: LD_VAR 0 10
24033: PPUSH
24034: CALL_OW 296
24038: PUSH
24039: LD_INT 12
24041: GREATER
24042: OR
24043: IFFALSE 24047
// exit ;
24045: GO 24400
// missile := [ 1 ] ;
24047: LD_ADDR_VAR 0 14
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24058: LD_VAR 0 9
24062: PPUSH
24063: LD_VAR 0 12
24067: PPUSH
24068: CALL_OW 325
24072: IFFALSE 24101
// missile := Replace ( missile , missile + 1 , 2 ) ;
24074: LD_ADDR_VAR 0 14
24078: PUSH
24079: LD_VAR 0 14
24083: PPUSH
24084: LD_VAR 0 14
24088: PUSH
24089: LD_INT 1
24091: PLUS
24092: PPUSH
24093: LD_INT 2
24095: PPUSH
24096: CALL_OW 1
24100: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24101: LD_VAR 0 9
24105: PPUSH
24106: LD_VAR 0 13
24110: PPUSH
24111: CALL_OW 325
24115: PUSH
24116: LD_VAR 0 10
24120: PPUSH
24121: CALL_OW 255
24125: PPUSH
24126: LD_VAR 0 13
24130: PPUSH
24131: CALL_OW 325
24135: NOT
24136: AND
24137: IFFALSE 24166
// missile := Replace ( missile , missile + 1 , 3 ) ;
24139: LD_ADDR_VAR 0 14
24143: PUSH
24144: LD_VAR 0 14
24148: PPUSH
24149: LD_VAR 0 14
24153: PUSH
24154: LD_INT 1
24156: PLUS
24157: PPUSH
24158: LD_INT 3
24160: PPUSH
24161: CALL_OW 1
24165: ST_TO_ADDR
// if missile < 2 then
24166: LD_VAR 0 14
24170: PUSH
24171: LD_INT 2
24173: LESS
24174: IFFALSE 24178
// exit ;
24176: GO 24400
// x := GetX ( enemy ) ;
24178: LD_ADDR_VAR 0 4
24182: PUSH
24183: LD_VAR 0 10
24187: PPUSH
24188: CALL_OW 250
24192: ST_TO_ADDR
// y := GetY ( enemy ) ;
24193: LD_ADDR_VAR 0 5
24197: PUSH
24198: LD_VAR 0 10
24202: PPUSH
24203: CALL_OW 251
24207: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24208: LD_ADDR_VAR 0 6
24212: PUSH
24213: LD_VAR 0 4
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PPUSH
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 12
24229: PLUS
24230: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24231: LD_ADDR_VAR 0 7
24235: PUSH
24236: LD_VAR 0 5
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PPUSH
24245: LD_INT 1
24247: PPUSH
24248: CALL_OW 12
24252: PLUS
24253: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24254: LD_VAR 0 6
24258: PPUSH
24259: LD_VAR 0 7
24263: PPUSH
24264: CALL_OW 488
24268: NOT
24269: IFFALSE 24291
// begin _x := x ;
24271: LD_ADDR_VAR 0 6
24275: PUSH
24276: LD_VAR 0 4
24280: ST_TO_ADDR
// _y := y ;
24281: LD_ADDR_VAR 0 7
24285: PUSH
24286: LD_VAR 0 5
24290: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24291: LD_ADDR_VAR 0 3
24295: PUSH
24296: LD_INT 1
24298: PPUSH
24299: LD_VAR 0 14
24303: PPUSH
24304: CALL_OW 12
24308: ST_TO_ADDR
// case i of 1 :
24309: LD_VAR 0 3
24313: PUSH
24314: LD_INT 1
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24339
24322: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24323: LD_VAR 0 1
24327: PPUSH
24328: LD_VAR 0 10
24332: PPUSH
24333: CALL_OW 115
24337: GO 24400
24339: LD_INT 2
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24369
24347: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_VAR 0 6
24357: PPUSH
24358: LD_VAR 0 7
24362: PPUSH
24363: CALL_OW 153
24367: GO 24400
24369: LD_INT 3
24371: DOUBLE
24372: EQUAL
24373: IFTRUE 24377
24375: GO 24399
24377: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24378: LD_VAR 0 1
24382: PPUSH
24383: LD_VAR 0 6
24387: PPUSH
24388: LD_VAR 0 7
24392: PPUSH
24393: CALL_OW 154
24397: GO 24400
24399: POP
// end ;
24400: LD_VAR 0 2
24404: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24405: LD_INT 0
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
// if not unit or not building then
24413: LD_VAR 0 1
24417: NOT
24418: PUSH
24419: LD_VAR 0 2
24423: NOT
24424: OR
24425: IFFALSE 24429
// exit ;
24427: GO 24587
// x := GetX ( building ) ;
24429: LD_ADDR_VAR 0 5
24433: PUSH
24434: LD_VAR 0 2
24438: PPUSH
24439: CALL_OW 250
24443: ST_TO_ADDR
// y := GetY ( building ) ;
24444: LD_ADDR_VAR 0 6
24448: PUSH
24449: LD_VAR 0 2
24453: PPUSH
24454: CALL_OW 251
24458: ST_TO_ADDR
// for i = 0 to 5 do
24459: LD_ADDR_VAR 0 4
24463: PUSH
24464: DOUBLE
24465: LD_INT 0
24467: DEC
24468: ST_TO_ADDR
24469: LD_INT 5
24471: PUSH
24472: FOR_TO
24473: IFFALSE 24585
// begin _x := ShiftX ( x , i , 3 ) ;
24475: LD_ADDR_VAR 0 7
24479: PUSH
24480: LD_VAR 0 5
24484: PPUSH
24485: LD_VAR 0 4
24489: PPUSH
24490: LD_INT 3
24492: PPUSH
24493: CALL_OW 272
24497: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24498: LD_ADDR_VAR 0 8
24502: PUSH
24503: LD_VAR 0 6
24507: PPUSH
24508: LD_VAR 0 4
24512: PPUSH
24513: LD_INT 3
24515: PPUSH
24516: CALL_OW 273
24520: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24521: LD_VAR 0 7
24525: PPUSH
24526: LD_VAR 0 8
24530: PPUSH
24531: CALL_OW 488
24535: NOT
24536: IFFALSE 24540
// continue ;
24538: GO 24472
// if HexInfo ( _x , _y ) = 0 then
24540: LD_VAR 0 7
24544: PPUSH
24545: LD_VAR 0 8
24549: PPUSH
24550: CALL_OW 428
24554: PUSH
24555: LD_INT 0
24557: EQUAL
24558: IFFALSE 24583
// begin ComMoveXY ( unit , _x , _y ) ;
24560: LD_VAR 0 1
24564: PPUSH
24565: LD_VAR 0 7
24569: PPUSH
24570: LD_VAR 0 8
24574: PPUSH
24575: CALL_OW 111
// exit ;
24579: POP
24580: POP
24581: GO 24587
// end ; end ;
24583: GO 24472
24585: POP
24586: POP
// end ;
24587: LD_VAR 0 3
24591: RET
// export function ScanBase ( side , base_area ) ; begin
24592: LD_INT 0
24594: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24595: LD_ADDR_VAR 0 3
24599: PUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: LD_INT 81
24607: PUSH
24608: LD_VAR 0 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PPUSH
24617: CALL_OW 70
24621: ST_TO_ADDR
// end ;
24622: LD_VAR 0 3
24626: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
// result := false ;
24633: LD_ADDR_VAR 0 2
24637: PUSH
24638: LD_INT 0
24640: ST_TO_ADDR
// side := GetSide ( unit ) ;
24641: LD_ADDR_VAR 0 3
24645: PUSH
24646: LD_VAR 0 1
24650: PPUSH
24651: CALL_OW 255
24655: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24656: LD_ADDR_VAR 0 4
24660: PUSH
24661: LD_VAR 0 1
24665: PPUSH
24666: CALL_OW 248
24670: ST_TO_ADDR
// case nat of 1 :
24671: LD_VAR 0 4
24675: PUSH
24676: LD_INT 1
24678: DOUBLE
24679: EQUAL
24680: IFTRUE 24684
24682: GO 24695
24684: POP
// tech := tech_lassight ; 2 :
24685: LD_ADDR_VAR 0 5
24689: PUSH
24690: LD_INT 12
24692: ST_TO_ADDR
24693: GO 24734
24695: LD_INT 2
24697: DOUBLE
24698: EQUAL
24699: IFTRUE 24703
24701: GO 24714
24703: POP
// tech := tech_mortar ; 3 :
24704: LD_ADDR_VAR 0 5
24708: PUSH
24709: LD_INT 41
24711: ST_TO_ADDR
24712: GO 24734
24714: LD_INT 3
24716: DOUBLE
24717: EQUAL
24718: IFTRUE 24722
24720: GO 24733
24722: POP
// tech := tech_bazooka ; end ;
24723: LD_ADDR_VAR 0 5
24727: PUSH
24728: LD_INT 44
24730: ST_TO_ADDR
24731: GO 24734
24733: POP
// if Researched ( side , tech ) then
24734: LD_VAR 0 3
24738: PPUSH
24739: LD_VAR 0 5
24743: PPUSH
24744: CALL_OW 325
24748: IFFALSE 24775
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24750: LD_ADDR_VAR 0 2
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: LD_INT 8
24760: PUSH
24761: LD_INT 9
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: PUSH
24769: LD_VAR 0 4
24773: ARRAY
24774: ST_TO_ADDR
// end ;
24775: LD_VAR 0 2
24779: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24780: LD_INT 0
24782: PPUSH
24783: PPUSH
24784: PPUSH
// if not mines then
24785: LD_VAR 0 2
24789: NOT
24790: IFFALSE 24794
// exit ;
24792: GO 24938
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24794: LD_ADDR_VAR 0 5
24798: PUSH
24799: LD_INT 81
24801: PUSH
24802: LD_VAR 0 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 21
24816: PUSH
24817: LD_INT 3
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PPUSH
24832: CALL_OW 69
24836: ST_TO_ADDR
// for i in mines do
24837: LD_ADDR_VAR 0 4
24841: PUSH
24842: LD_VAR 0 2
24846: PUSH
24847: FOR_IN
24848: IFFALSE 24936
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24850: LD_VAR 0 4
24854: PUSH
24855: LD_INT 1
24857: ARRAY
24858: PPUSH
24859: LD_VAR 0 4
24863: PUSH
24864: LD_INT 2
24866: ARRAY
24867: PPUSH
24868: CALL_OW 458
24872: NOT
24873: IFFALSE 24877
// continue ;
24875: GO 24847
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24877: LD_VAR 0 4
24881: PUSH
24882: LD_INT 1
24884: ARRAY
24885: PPUSH
24886: LD_VAR 0 4
24890: PUSH
24891: LD_INT 2
24893: ARRAY
24894: PPUSH
24895: CALL_OW 428
24899: PUSH
24900: LD_VAR 0 5
24904: IN
24905: IFFALSE 24934
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24907: LD_VAR 0 4
24911: PUSH
24912: LD_INT 1
24914: ARRAY
24915: PPUSH
24916: LD_VAR 0 4
24920: PUSH
24921: LD_INT 2
24923: ARRAY
24924: PPUSH
24925: LD_VAR 0 1
24929: PPUSH
24930: CALL_OW 456
// end ;
24934: GO 24847
24936: POP
24937: POP
// end ;
24938: LD_VAR 0 3
24942: RET
// export function Count ( array ) ; begin
24943: LD_INT 0
24945: PPUSH
// result := array + 0 ;
24946: LD_ADDR_VAR 0 2
24950: PUSH
24951: LD_VAR 0 1
24955: PUSH
24956: LD_INT 0
24958: PLUS
24959: ST_TO_ADDR
// end ;
24960: LD_VAR 0 2
24964: RET
// export function IsEmpty ( building ) ; begin
24965: LD_INT 0
24967: PPUSH
// if not building then
24968: LD_VAR 0 1
24972: NOT
24973: IFFALSE 24977
// exit ;
24975: GO 25020
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24977: LD_ADDR_VAR 0 2
24981: PUSH
24982: LD_VAR 0 1
24986: PUSH
24987: LD_INT 22
24989: PUSH
24990: LD_VAR 0 1
24994: PPUSH
24995: CALL_OW 255
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 58
25006: PUSH
25007: EMPTY
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: IN
25019: ST_TO_ADDR
// end ;
25020: LD_VAR 0 2
25024: RET
// export function IsNotFull ( building ) ; var places ; begin
25025: LD_INT 0
25027: PPUSH
25028: PPUSH
// if not building then
25029: LD_VAR 0 1
25033: NOT
25034: IFFALSE 25038
// exit ;
25036: GO 25066
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: LD_INT 3
25050: PUSH
25051: LD_INT 62
25053: PUSH
25054: EMPTY
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PPUSH
25061: CALL_OW 72
25065: ST_TO_ADDR
// end ;
25066: LD_VAR 0 2
25070: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25071: LD_INT 0
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
// tmp := [ ] ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: EMPTY
25083: ST_TO_ADDR
// list := [ ] ;
25084: LD_ADDR_VAR 0 5
25088: PUSH
25089: EMPTY
25090: ST_TO_ADDR
// for i = 16 to 25 do
25091: LD_ADDR_VAR 0 4
25095: PUSH
25096: DOUBLE
25097: LD_INT 16
25099: DEC
25100: ST_TO_ADDR
25101: LD_INT 25
25103: PUSH
25104: FOR_TO
25105: IFFALSE 25178
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25107: LD_ADDR_VAR 0 3
25111: PUSH
25112: LD_VAR 0 3
25116: PUSH
25117: LD_INT 22
25119: PUSH
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 255
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 91
25136: PUSH
25137: LD_VAR 0 1
25141: PUSH
25142: LD_INT 6
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 30
25152: PUSH
25153: LD_VAR 0 4
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: PPUSH
25170: CALL_OW 69
25174: ADD
25175: ST_TO_ADDR
25176: GO 25104
25178: POP
25179: POP
// for i = 1 to tmp do
25180: LD_ADDR_VAR 0 4
25184: PUSH
25185: DOUBLE
25186: LD_INT 1
25188: DEC
25189: ST_TO_ADDR
25190: LD_VAR 0 3
25194: PUSH
25195: FOR_TO
25196: IFFALSE 25284
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_VAR 0 5
25207: PUSH
25208: LD_VAR 0 3
25212: PUSH
25213: LD_VAR 0 4
25217: ARRAY
25218: PPUSH
25219: CALL_OW 266
25223: PUSH
25224: LD_VAR 0 3
25228: PUSH
25229: LD_VAR 0 4
25233: ARRAY
25234: PPUSH
25235: CALL_OW 250
25239: PUSH
25240: LD_VAR 0 3
25244: PUSH
25245: LD_VAR 0 4
25249: ARRAY
25250: PPUSH
25251: CALL_OW 251
25255: PUSH
25256: LD_VAR 0 3
25260: PUSH
25261: LD_VAR 0 4
25265: ARRAY
25266: PPUSH
25267: CALL_OW 254
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: ADD
25281: ST_TO_ADDR
25282: GO 25195
25284: POP
25285: POP
// result := list ;
25286: LD_ADDR_VAR 0 2
25290: PUSH
25291: LD_VAR 0 5
25295: ST_TO_ADDR
// end ;
25296: LD_VAR 0 2
25300: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25301: LD_INT 0
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
// if not factory then
25310: LD_VAR 0 1
25314: NOT
25315: IFFALSE 25319
// exit ;
25317: GO 25912
// if control = control_apeman then
25319: LD_VAR 0 4
25323: PUSH
25324: LD_INT 5
25326: EQUAL
25327: IFFALSE 25436
// begin tmp := UnitsInside ( factory ) ;
25329: LD_ADDR_VAR 0 8
25333: PUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 313
25343: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25344: LD_VAR 0 8
25348: PPUSH
25349: LD_INT 25
25351: PUSH
25352: LD_INT 12
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PPUSH
25359: CALL_OW 72
25363: NOT
25364: IFFALSE 25374
// control := control_manual ;
25366: LD_ADDR_VAR 0 4
25370: PUSH
25371: LD_INT 1
25373: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25374: LD_ADDR_VAR 0 8
25378: PUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL 25071 0 1
25388: ST_TO_ADDR
// if tmp then
25389: LD_VAR 0 8
25393: IFFALSE 25436
// begin for i in tmp do
25395: LD_ADDR_VAR 0 7
25399: PUSH
25400: LD_VAR 0 8
25404: PUSH
25405: FOR_IN
25406: IFFALSE 25434
// if i [ 1 ] = b_ext_radio then
25408: LD_VAR 0 7
25412: PUSH
25413: LD_INT 1
25415: ARRAY
25416: PUSH
25417: LD_INT 22
25419: EQUAL
25420: IFFALSE 25432
// begin control := control_remote ;
25422: LD_ADDR_VAR 0 4
25426: PUSH
25427: LD_INT 2
25429: ST_TO_ADDR
// break ;
25430: GO 25434
// end ;
25432: GO 25405
25434: POP
25435: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25436: LD_VAR 0 1
25440: PPUSH
25441: LD_VAR 0 2
25445: PPUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: LD_VAR 0 4
25455: PPUSH
25456: LD_VAR 0 5
25460: PPUSH
25461: CALL_OW 448
25465: IFFALSE 25500
// begin result := [ chassis , engine , control , weapon ] ;
25467: LD_ADDR_VAR 0 6
25471: PUSH
25472: LD_VAR 0 2
25476: PUSH
25477: LD_VAR 0 3
25481: PUSH
25482: LD_VAR 0 4
25486: PUSH
25487: LD_VAR 0 5
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
// exit ;
25498: GO 25912
// end ; _chassis := AvailableChassisList ( factory ) ;
25500: LD_ADDR_VAR 0 9
25504: PUSH
25505: LD_VAR 0 1
25509: PPUSH
25510: CALL_OW 475
25514: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25515: LD_ADDR_VAR 0 11
25519: PUSH
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 476
25529: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25530: LD_ADDR_VAR 0 12
25534: PUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 477
25544: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25545: LD_ADDR_VAR 0 10
25549: PUSH
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 478
25559: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25560: LD_VAR 0 9
25564: NOT
25565: PUSH
25566: LD_VAR 0 11
25570: NOT
25571: OR
25572: PUSH
25573: LD_VAR 0 12
25577: NOT
25578: OR
25579: PUSH
25580: LD_VAR 0 10
25584: NOT
25585: OR
25586: IFFALSE 25621
// begin result := [ chassis , engine , control , weapon ] ;
25588: LD_ADDR_VAR 0 6
25592: PUSH
25593: LD_VAR 0 2
25597: PUSH
25598: LD_VAR 0 3
25602: PUSH
25603: LD_VAR 0 4
25607: PUSH
25608: LD_VAR 0 5
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: ST_TO_ADDR
// exit ;
25619: GO 25912
// end ; if not chassis in _chassis then
25621: LD_VAR 0 2
25625: PUSH
25626: LD_VAR 0 9
25630: IN
25631: NOT
25632: IFFALSE 25658
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25634: LD_ADDR_VAR 0 2
25638: PUSH
25639: LD_VAR 0 9
25643: PUSH
25644: LD_INT 1
25646: PPUSH
25647: LD_VAR 0 9
25651: PPUSH
25652: CALL_OW 12
25656: ARRAY
25657: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25658: LD_VAR 0 2
25662: PPUSH
25663: LD_VAR 0 3
25667: PPUSH
25668: CALL 25917 0 2
25672: NOT
25673: IFFALSE 25732
// repeat engine := _engine [ 1 ] ;
25675: LD_ADDR_VAR 0 3
25679: PUSH
25680: LD_VAR 0 11
25684: PUSH
25685: LD_INT 1
25687: ARRAY
25688: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25689: LD_ADDR_VAR 0 11
25693: PUSH
25694: LD_VAR 0 11
25698: PPUSH
25699: LD_INT 1
25701: PPUSH
25702: CALL_OW 3
25706: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25707: LD_VAR 0 2
25711: PPUSH
25712: LD_VAR 0 3
25716: PPUSH
25717: CALL 25917 0 2
25721: PUSH
25722: LD_VAR 0 11
25726: PUSH
25727: EMPTY
25728: EQUAL
25729: OR
25730: IFFALSE 25675
// if not control in _control then
25732: LD_VAR 0 4
25736: PUSH
25737: LD_VAR 0 12
25741: IN
25742: NOT
25743: IFFALSE 25769
// control := _control [ rand ( 1 , _control ) ] ;
25745: LD_ADDR_VAR 0 4
25749: PUSH
25750: LD_VAR 0 12
25754: PUSH
25755: LD_INT 1
25757: PPUSH
25758: LD_VAR 0 12
25762: PPUSH
25763: CALL_OW 12
25767: ARRAY
25768: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25769: LD_VAR 0 2
25773: PPUSH
25774: LD_VAR 0 5
25778: PPUSH
25779: CALL 26137 0 2
25783: NOT
25784: IFFALSE 25843
// repeat weapon := _weapon [ 1 ] ;
25786: LD_ADDR_VAR 0 5
25790: PUSH
25791: LD_VAR 0 10
25795: PUSH
25796: LD_INT 1
25798: ARRAY
25799: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25800: LD_ADDR_VAR 0 10
25804: PUSH
25805: LD_VAR 0 10
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: CALL_OW 3
25817: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25818: LD_VAR 0 2
25822: PPUSH
25823: LD_VAR 0 5
25827: PPUSH
25828: CALL 26137 0 2
25832: PUSH
25833: LD_VAR 0 10
25837: PUSH
25838: EMPTY
25839: EQUAL
25840: OR
25841: IFFALSE 25786
// result := [ ] ;
25843: LD_ADDR_VAR 0 6
25847: PUSH
25848: EMPTY
25849: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25850: LD_VAR 0 1
25854: PPUSH
25855: LD_VAR 0 2
25859: PPUSH
25860: LD_VAR 0 3
25864: PPUSH
25865: LD_VAR 0 4
25869: PPUSH
25870: LD_VAR 0 5
25874: PPUSH
25875: CALL_OW 448
25879: IFFALSE 25912
// result := [ chassis , engine , control , weapon ] ;
25881: LD_ADDR_VAR 0 6
25885: PUSH
25886: LD_VAR 0 2
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: LD_VAR 0 4
25900: PUSH
25901: LD_VAR 0 5
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: ST_TO_ADDR
// end ;
25912: LD_VAR 0 6
25916: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25917: LD_INT 0
25919: PPUSH
// if not chassis or not engine then
25920: LD_VAR 0 1
25924: NOT
25925: PUSH
25926: LD_VAR 0 2
25930: NOT
25931: OR
25932: IFFALSE 25936
// exit ;
25934: GO 26132
// case engine of engine_solar :
25936: LD_VAR 0 2
25940: PUSH
25941: LD_INT 2
25943: DOUBLE
25944: EQUAL
25945: IFTRUE 25949
25947: GO 25987
25949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25950: LD_ADDR_VAR 0 3
25954: PUSH
25955: LD_INT 11
25957: PUSH
25958: LD_INT 12
25960: PUSH
25961: LD_INT 13
25963: PUSH
25964: LD_INT 14
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: ST_TO_ADDR
25985: GO 26116
25987: LD_INT 1
25989: DOUBLE
25990: EQUAL
25991: IFTRUE 25995
25993: GO 26057
25995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25996: LD_ADDR_VAR 0 3
26000: PUSH
26001: LD_INT 11
26003: PUSH
26004: LD_INT 12
26006: PUSH
26007: LD_INT 13
26009: PUSH
26010: LD_INT 14
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 3
26021: PUSH
26022: LD_INT 4
26024: PUSH
26025: LD_INT 5
26027: PUSH
26028: LD_INT 21
26030: PUSH
26031: LD_INT 23
26033: PUSH
26034: LD_INT 22
26036: PUSH
26037: LD_INT 24
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: ST_TO_ADDR
26055: GO 26116
26057: LD_INT 3
26059: DOUBLE
26060: EQUAL
26061: IFTRUE 26065
26063: GO 26115
26065: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26066: LD_ADDR_VAR 0 3
26070: PUSH
26071: LD_INT 13
26073: PUSH
26074: LD_INT 14
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 4
26085: PUSH
26086: LD_INT 5
26088: PUSH
26089: LD_INT 21
26091: PUSH
26092: LD_INT 22
26094: PUSH
26095: LD_INT 23
26097: PUSH
26098: LD_INT 24
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: ST_TO_ADDR
26113: GO 26116
26115: POP
// result := ( chassis in result ) ;
26116: LD_ADDR_VAR 0 3
26120: PUSH
26121: LD_VAR 0 1
26125: PUSH
26126: LD_VAR 0 3
26130: IN
26131: ST_TO_ADDR
// end ;
26132: LD_VAR 0 3
26136: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26137: LD_INT 0
26139: PPUSH
// if not chassis or not weapon then
26140: LD_VAR 0 1
26144: NOT
26145: PUSH
26146: LD_VAR 0 2
26150: NOT
26151: OR
26152: IFFALSE 26156
// exit ;
26154: GO 27216
// case weapon of us_machine_gun :
26156: LD_VAR 0 2
26160: PUSH
26161: LD_INT 2
26163: DOUBLE
26164: EQUAL
26165: IFTRUE 26169
26167: GO 26199
26169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26170: LD_ADDR_VAR 0 3
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: LD_INT 4
26186: PUSH
26187: LD_INT 5
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
26197: GO 27200
26199: LD_INT 3
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26207
26205: GO 26237
26207: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26208: LD_ADDR_VAR 0 3
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: LD_INT 3
26221: PUSH
26222: LD_INT 4
26224: PUSH
26225: LD_INT 5
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: ST_TO_ADDR
26235: GO 27200
26237: LD_INT 11
26239: DOUBLE
26240: EQUAL
26241: IFTRUE 26245
26243: GO 26275
26245: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26246: LD_ADDR_VAR 0 3
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: LD_INT 3
26259: PUSH
26260: LD_INT 4
26262: PUSH
26263: LD_INT 5
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
26273: GO 27200
26275: LD_INT 4
26277: DOUBLE
26278: EQUAL
26279: IFTRUE 26283
26281: GO 26309
26283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26284: LD_ADDR_VAR 0 3
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: LD_INT 3
26294: PUSH
26295: LD_INT 4
26297: PUSH
26298: LD_INT 5
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
26307: GO 27200
26309: LD_INT 5
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26343
26317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 3
26328: PUSH
26329: LD_INT 4
26331: PUSH
26332: LD_INT 5
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
26341: GO 27200
26343: LD_INT 9
26345: DOUBLE
26346: EQUAL
26347: IFTRUE 26351
26349: GO 26377
26351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26352: LD_ADDR_VAR 0 3
26356: PUSH
26357: LD_INT 2
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: LD_INT 4
26365: PUSH
26366: LD_INT 5
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
26375: GO 27200
26377: LD_INT 7
26379: DOUBLE
26380: EQUAL
26381: IFTRUE 26385
26383: GO 26411
26385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26386: LD_ADDR_VAR 0 3
26390: PUSH
26391: LD_INT 2
26393: PUSH
26394: LD_INT 3
26396: PUSH
26397: LD_INT 4
26399: PUSH
26400: LD_INT 5
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
26409: GO 27200
26411: LD_INT 12
26413: DOUBLE
26414: EQUAL
26415: IFTRUE 26419
26417: GO 26445
26419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: LD_INT 4
26433: PUSH
26434: LD_INT 5
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: ST_TO_ADDR
26443: GO 27200
26445: LD_INT 13
26447: DOUBLE
26448: EQUAL
26449: IFTRUE 26453
26451: GO 26479
26453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26454: LD_ADDR_VAR 0 3
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: LD_INT 4
26467: PUSH
26468: LD_INT 5
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: ST_TO_ADDR
26477: GO 27200
26479: LD_INT 14
26481: DOUBLE
26482: EQUAL
26483: IFTRUE 26487
26485: GO 26505
26487: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26488: LD_ADDR_VAR 0 3
26492: PUSH
26493: LD_INT 4
26495: PUSH
26496: LD_INT 5
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: ST_TO_ADDR
26503: GO 27200
26505: LD_INT 6
26507: DOUBLE
26508: EQUAL
26509: IFTRUE 26513
26511: GO 26531
26513: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26514: LD_ADDR_VAR 0 3
26518: PUSH
26519: LD_INT 4
26521: PUSH
26522: LD_INT 5
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: ST_TO_ADDR
26529: GO 27200
26531: LD_INT 10
26533: DOUBLE
26534: EQUAL
26535: IFTRUE 26539
26537: GO 26557
26539: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26540: LD_ADDR_VAR 0 3
26544: PUSH
26545: LD_INT 4
26547: PUSH
26548: LD_INT 5
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: ST_TO_ADDR
26555: GO 27200
26557: LD_INT 22
26559: DOUBLE
26560: EQUAL
26561: IFTRUE 26565
26563: GO 26591
26565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26566: LD_ADDR_VAR 0 3
26570: PUSH
26571: LD_INT 11
26573: PUSH
26574: LD_INT 12
26576: PUSH
26577: LD_INT 13
26579: PUSH
26580: LD_INT 14
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: ST_TO_ADDR
26589: GO 27200
26591: LD_INT 23
26593: DOUBLE
26594: EQUAL
26595: IFTRUE 26599
26597: GO 26625
26599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_INT 11
26607: PUSH
26608: LD_INT 12
26610: PUSH
26611: LD_INT 13
26613: PUSH
26614: LD_INT 14
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: ST_TO_ADDR
26623: GO 27200
26625: LD_INT 24
26627: DOUBLE
26628: EQUAL
26629: IFTRUE 26633
26631: GO 26659
26633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 11
26641: PUSH
26642: LD_INT 12
26644: PUSH
26645: LD_INT 13
26647: PUSH
26648: LD_INT 14
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: ST_TO_ADDR
26657: GO 27200
26659: LD_INT 30
26661: DOUBLE
26662: EQUAL
26663: IFTRUE 26667
26665: GO 26693
26667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26668: LD_ADDR_VAR 0 3
26672: PUSH
26673: LD_INT 11
26675: PUSH
26676: LD_INT 12
26678: PUSH
26679: LD_INT 13
26681: PUSH
26682: LD_INT 14
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: ST_TO_ADDR
26691: GO 27200
26693: LD_INT 25
26695: DOUBLE
26696: EQUAL
26697: IFTRUE 26701
26699: GO 26719
26701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26702: LD_ADDR_VAR 0 3
26706: PUSH
26707: LD_INT 13
26709: PUSH
26710: LD_INT 14
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: ST_TO_ADDR
26717: GO 27200
26719: LD_INT 27
26721: DOUBLE
26722: EQUAL
26723: IFTRUE 26727
26725: GO 26745
26727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26728: LD_ADDR_VAR 0 3
26732: PUSH
26733: LD_INT 13
26735: PUSH
26736: LD_INT 14
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: ST_TO_ADDR
26743: GO 27200
26745: LD_INT 92
26747: DOUBLE
26748: EQUAL
26749: IFTRUE 26753
26751: GO 26779
26753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26754: LD_ADDR_VAR 0 3
26758: PUSH
26759: LD_INT 11
26761: PUSH
26762: LD_INT 12
26764: PUSH
26765: LD_INT 13
26767: PUSH
26768: LD_INT 14
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: ST_TO_ADDR
26777: GO 27200
26779: LD_INT 28
26781: DOUBLE
26782: EQUAL
26783: IFTRUE 26787
26785: GO 26805
26787: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26788: LD_ADDR_VAR 0 3
26792: PUSH
26793: LD_INT 13
26795: PUSH
26796: LD_INT 14
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: ST_TO_ADDR
26803: GO 27200
26805: LD_INT 29
26807: DOUBLE
26808: EQUAL
26809: IFTRUE 26813
26811: GO 26831
26813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26814: LD_ADDR_VAR 0 3
26818: PUSH
26819: LD_INT 13
26821: PUSH
26822: LD_INT 14
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: ST_TO_ADDR
26829: GO 27200
26831: LD_INT 31
26833: DOUBLE
26834: EQUAL
26835: IFTRUE 26839
26837: GO 26857
26839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26840: LD_ADDR_VAR 0 3
26844: PUSH
26845: LD_INT 13
26847: PUSH
26848: LD_INT 14
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: ST_TO_ADDR
26855: GO 27200
26857: LD_INT 26
26859: DOUBLE
26860: EQUAL
26861: IFTRUE 26865
26863: GO 26883
26865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_INT 13
26873: PUSH
26874: LD_INT 14
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: ST_TO_ADDR
26881: GO 27200
26883: LD_INT 42
26885: DOUBLE
26886: EQUAL
26887: IFTRUE 26891
26889: GO 26917
26891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26892: LD_ADDR_VAR 0 3
26896: PUSH
26897: LD_INT 21
26899: PUSH
26900: LD_INT 22
26902: PUSH
26903: LD_INT 23
26905: PUSH
26906: LD_INT 24
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: ST_TO_ADDR
26915: GO 27200
26917: LD_INT 43
26919: DOUBLE
26920: EQUAL
26921: IFTRUE 26925
26923: GO 26951
26925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26926: LD_ADDR_VAR 0 3
26930: PUSH
26931: LD_INT 21
26933: PUSH
26934: LD_INT 22
26936: PUSH
26937: LD_INT 23
26939: PUSH
26940: LD_INT 24
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
26949: GO 27200
26951: LD_INT 44
26953: DOUBLE
26954: EQUAL
26955: IFTRUE 26959
26957: GO 26985
26959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26960: LD_ADDR_VAR 0 3
26964: PUSH
26965: LD_INT 21
26967: PUSH
26968: LD_INT 22
26970: PUSH
26971: LD_INT 23
26973: PUSH
26974: LD_INT 24
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: ST_TO_ADDR
26983: GO 27200
26985: LD_INT 45
26987: DOUBLE
26988: EQUAL
26989: IFTRUE 26993
26991: GO 27019
26993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26994: LD_ADDR_VAR 0 3
26998: PUSH
26999: LD_INT 21
27001: PUSH
27002: LD_INT 22
27004: PUSH
27005: LD_INT 23
27007: PUSH
27008: LD_INT 24
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: ST_TO_ADDR
27017: GO 27200
27019: LD_INT 49
27021: DOUBLE
27022: EQUAL
27023: IFTRUE 27027
27025: GO 27053
27027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27028: LD_ADDR_VAR 0 3
27032: PUSH
27033: LD_INT 21
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 23
27041: PUSH
27042: LD_INT 24
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: ST_TO_ADDR
27051: GO 27200
27053: LD_INT 51
27055: DOUBLE
27056: EQUAL
27057: IFTRUE 27061
27059: GO 27087
27061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27062: LD_ADDR_VAR 0 3
27066: PUSH
27067: LD_INT 21
27069: PUSH
27070: LD_INT 22
27072: PUSH
27073: LD_INT 23
27075: PUSH
27076: LD_INT 24
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: ST_TO_ADDR
27085: GO 27200
27087: LD_INT 52
27089: DOUBLE
27090: EQUAL
27091: IFTRUE 27095
27093: GO 27121
27095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27096: LD_ADDR_VAR 0 3
27100: PUSH
27101: LD_INT 21
27103: PUSH
27104: LD_INT 22
27106: PUSH
27107: LD_INT 23
27109: PUSH
27110: LD_INT 24
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: ST_TO_ADDR
27119: GO 27200
27121: LD_INT 53
27123: DOUBLE
27124: EQUAL
27125: IFTRUE 27129
27127: GO 27147
27129: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_INT 23
27137: PUSH
27138: LD_INT 24
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: ST_TO_ADDR
27145: GO 27200
27147: LD_INT 46
27149: DOUBLE
27150: EQUAL
27151: IFTRUE 27155
27153: GO 27173
27155: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27156: LD_ADDR_VAR 0 3
27160: PUSH
27161: LD_INT 23
27163: PUSH
27164: LD_INT 24
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: ST_TO_ADDR
27171: GO 27200
27173: LD_INT 47
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27199
27181: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_INT 23
27189: PUSH
27190: LD_INT 24
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: ST_TO_ADDR
27197: GO 27200
27199: POP
// result := ( chassis in result ) ;
27200: LD_ADDR_VAR 0 3
27204: PUSH
27205: LD_VAR 0 1
27209: PUSH
27210: LD_VAR 0 3
27214: IN
27215: ST_TO_ADDR
// end ;
27216: LD_VAR 0 3
27220: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27221: LD_INT 0
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
// result := array ;
27230: LD_ADDR_VAR 0 5
27234: PUSH
27235: LD_VAR 0 1
27239: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27240: LD_VAR 0 1
27244: NOT
27245: PUSH
27246: LD_VAR 0 2
27250: NOT
27251: OR
27252: PUSH
27253: LD_VAR 0 3
27257: NOT
27258: OR
27259: PUSH
27260: LD_VAR 0 2
27264: PUSH
27265: LD_VAR 0 1
27269: GREATER
27270: OR
27271: PUSH
27272: LD_VAR 0 3
27276: PUSH
27277: LD_VAR 0 1
27281: GREATER
27282: OR
27283: IFFALSE 27287
// exit ;
27285: GO 27583
// if direction then
27287: LD_VAR 0 4
27291: IFFALSE 27355
// begin d := 1 ;
27293: LD_ADDR_VAR 0 9
27297: PUSH
27298: LD_INT 1
27300: ST_TO_ADDR
// if i_from > i_to then
27301: LD_VAR 0 2
27305: PUSH
27306: LD_VAR 0 3
27310: GREATER
27311: IFFALSE 27337
// length := ( array - i_from ) + i_to else
27313: LD_ADDR_VAR 0 11
27317: PUSH
27318: LD_VAR 0 1
27322: PUSH
27323: LD_VAR 0 2
27327: MINUS
27328: PUSH
27329: LD_VAR 0 3
27333: PLUS
27334: ST_TO_ADDR
27335: GO 27353
// length := i_to - i_from ;
27337: LD_ADDR_VAR 0 11
27341: PUSH
27342: LD_VAR 0 3
27346: PUSH
27347: LD_VAR 0 2
27351: MINUS
27352: ST_TO_ADDR
// end else
27353: GO 27416
// begin d := - 1 ;
27355: LD_ADDR_VAR 0 9
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: ST_TO_ADDR
// if i_from > i_to then
27364: LD_VAR 0 2
27368: PUSH
27369: LD_VAR 0 3
27373: GREATER
27374: IFFALSE 27394
// length := i_from - i_to else
27376: LD_ADDR_VAR 0 11
27380: PUSH
27381: LD_VAR 0 2
27385: PUSH
27386: LD_VAR 0 3
27390: MINUS
27391: ST_TO_ADDR
27392: GO 27416
// length := ( array - i_to ) + i_from ;
27394: LD_ADDR_VAR 0 11
27398: PUSH
27399: LD_VAR 0 1
27403: PUSH
27404: LD_VAR 0 3
27408: MINUS
27409: PUSH
27410: LD_VAR 0 2
27414: PLUS
27415: ST_TO_ADDR
// end ; if not length then
27416: LD_VAR 0 11
27420: NOT
27421: IFFALSE 27425
// exit ;
27423: GO 27583
// tmp := array ;
27425: LD_ADDR_VAR 0 10
27429: PUSH
27430: LD_VAR 0 1
27434: ST_TO_ADDR
// for i = 1 to length do
27435: LD_ADDR_VAR 0 6
27439: PUSH
27440: DOUBLE
27441: LD_INT 1
27443: DEC
27444: ST_TO_ADDR
27445: LD_VAR 0 11
27449: PUSH
27450: FOR_TO
27451: IFFALSE 27571
// begin for j = 1 to array do
27453: LD_ADDR_VAR 0 7
27457: PUSH
27458: DOUBLE
27459: LD_INT 1
27461: DEC
27462: ST_TO_ADDR
27463: LD_VAR 0 1
27467: PUSH
27468: FOR_TO
27469: IFFALSE 27557
// begin k := j + d ;
27471: LD_ADDR_VAR 0 8
27475: PUSH
27476: LD_VAR 0 7
27480: PUSH
27481: LD_VAR 0 9
27485: PLUS
27486: ST_TO_ADDR
// if k > array then
27487: LD_VAR 0 8
27491: PUSH
27492: LD_VAR 0 1
27496: GREATER
27497: IFFALSE 27507
// k := 1 ;
27499: LD_ADDR_VAR 0 8
27503: PUSH
27504: LD_INT 1
27506: ST_TO_ADDR
// if not k then
27507: LD_VAR 0 8
27511: NOT
27512: IFFALSE 27524
// k := array ;
27514: LD_ADDR_VAR 0 8
27518: PUSH
27519: LD_VAR 0 1
27523: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27524: LD_ADDR_VAR 0 10
27528: PUSH
27529: LD_VAR 0 10
27533: PPUSH
27534: LD_VAR 0 8
27538: PPUSH
27539: LD_VAR 0 1
27543: PUSH
27544: LD_VAR 0 7
27548: ARRAY
27549: PPUSH
27550: CALL_OW 1
27554: ST_TO_ADDR
// end ;
27555: GO 27468
27557: POP
27558: POP
// array := tmp ;
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_VAR 0 10
27568: ST_TO_ADDR
// end ;
27569: GO 27450
27571: POP
27572: POP
// result := array ;
27573: LD_ADDR_VAR 0 5
27577: PUSH
27578: LD_VAR 0 1
27582: ST_TO_ADDR
// end ;
27583: LD_VAR 0 5
27587: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
// result := 0 ;
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 0
27599: ST_TO_ADDR
// if not array or not value in array then
27600: LD_VAR 0 1
27604: NOT
27605: PUSH
27606: LD_VAR 0 2
27610: PUSH
27611: LD_VAR 0 1
27615: IN
27616: NOT
27617: OR
27618: IFFALSE 27622
// exit ;
27620: GO 27676
// for i = 1 to array do
27622: LD_ADDR_VAR 0 4
27626: PUSH
27627: DOUBLE
27628: LD_INT 1
27630: DEC
27631: ST_TO_ADDR
27632: LD_VAR 0 1
27636: PUSH
27637: FOR_TO
27638: IFFALSE 27674
// if value = array [ i ] then
27640: LD_VAR 0 2
27644: PUSH
27645: LD_VAR 0 1
27649: PUSH
27650: LD_VAR 0 4
27654: ARRAY
27655: EQUAL
27656: IFFALSE 27672
// begin result := i ;
27658: LD_ADDR_VAR 0 3
27662: PUSH
27663: LD_VAR 0 4
27667: ST_TO_ADDR
// exit ;
27668: POP
27669: POP
27670: GO 27676
// end ;
27672: GO 27637
27674: POP
27675: POP
// end ;
27676: LD_VAR 0 3
27680: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27681: LD_INT 0
27683: PPUSH
// vc_chassis := chassis ;
27684: LD_ADDR_OWVAR 37
27688: PUSH
27689: LD_VAR 0 1
27693: ST_TO_ADDR
// vc_engine := engine ;
27694: LD_ADDR_OWVAR 39
27698: PUSH
27699: LD_VAR 0 2
27703: ST_TO_ADDR
// vc_control := control ;
27704: LD_ADDR_OWVAR 38
27708: PUSH
27709: LD_VAR 0 3
27713: ST_TO_ADDR
// vc_weapon := weapon ;
27714: LD_ADDR_OWVAR 40
27718: PUSH
27719: LD_VAR 0 4
27723: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27724: LD_ADDR_OWVAR 41
27728: PUSH
27729: LD_VAR 0 5
27733: ST_TO_ADDR
// end ;
27734: LD_VAR 0 6
27738: RET
// export function WantPlant ( unit ) ; var task ; begin
27739: LD_INT 0
27741: PPUSH
27742: PPUSH
// result := false ;
27743: LD_ADDR_VAR 0 2
27747: PUSH
27748: LD_INT 0
27750: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27751: LD_ADDR_VAR 0 3
27755: PUSH
27756: LD_VAR 0 1
27760: PPUSH
27761: CALL_OW 437
27765: ST_TO_ADDR
// if task then
27766: LD_VAR 0 3
27770: IFFALSE 27798
// if task [ 1 ] [ 1 ] = p then
27772: LD_VAR 0 3
27776: PUSH
27777: LD_INT 1
27779: ARRAY
27780: PUSH
27781: LD_INT 1
27783: ARRAY
27784: PUSH
27785: LD_STRING p
27787: EQUAL
27788: IFFALSE 27798
// result := true ;
27790: LD_ADDR_VAR 0 2
27794: PUSH
27795: LD_INT 1
27797: ST_TO_ADDR
// end ;
27798: LD_VAR 0 2
27802: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27803: LD_INT 0
27805: PPUSH
27806: PPUSH
27807: PPUSH
27808: PPUSH
// if pos < 1 then
27809: LD_VAR 0 2
27813: PUSH
27814: LD_INT 1
27816: LESS
27817: IFFALSE 27821
// exit ;
27819: GO 28124
// if pos = 1 then
27821: LD_VAR 0 2
27825: PUSH
27826: LD_INT 1
27828: EQUAL
27829: IFFALSE 27862
// result := Replace ( arr , pos [ 1 ] , value ) else
27831: LD_ADDR_VAR 0 4
27835: PUSH
27836: LD_VAR 0 1
27840: PPUSH
27841: LD_VAR 0 2
27845: PUSH
27846: LD_INT 1
27848: ARRAY
27849: PPUSH
27850: LD_VAR 0 3
27854: PPUSH
27855: CALL_OW 1
27859: ST_TO_ADDR
27860: GO 28124
// begin tmp := arr ;
27862: LD_ADDR_VAR 0 6
27866: PUSH
27867: LD_VAR 0 1
27871: ST_TO_ADDR
// s_arr := [ tmp ] ;
27872: LD_ADDR_VAR 0 7
27876: PUSH
27877: LD_VAR 0 6
27881: PUSH
27882: EMPTY
27883: LIST
27884: ST_TO_ADDR
// for i = 1 to pos - 1 do
27885: LD_ADDR_VAR 0 5
27889: PUSH
27890: DOUBLE
27891: LD_INT 1
27893: DEC
27894: ST_TO_ADDR
27895: LD_VAR 0 2
27899: PUSH
27900: LD_INT 1
27902: MINUS
27903: PUSH
27904: FOR_TO
27905: IFFALSE 27950
// begin tmp := tmp [ pos [ i ] ] ;
27907: LD_ADDR_VAR 0 6
27911: PUSH
27912: LD_VAR 0 6
27916: PUSH
27917: LD_VAR 0 2
27921: PUSH
27922: LD_VAR 0 5
27926: ARRAY
27927: ARRAY
27928: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27929: LD_ADDR_VAR 0 7
27933: PUSH
27934: LD_VAR 0 7
27938: PUSH
27939: LD_VAR 0 6
27943: PUSH
27944: EMPTY
27945: LIST
27946: ADD
27947: ST_TO_ADDR
// end ;
27948: GO 27904
27950: POP
27951: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27952: LD_ADDR_VAR 0 6
27956: PUSH
27957: LD_VAR 0 6
27961: PPUSH
27962: LD_VAR 0 2
27966: PUSH
27967: LD_VAR 0 2
27971: ARRAY
27972: PPUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: CALL_OW 1
27982: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27983: LD_ADDR_VAR 0 7
27987: PUSH
27988: LD_VAR 0 7
27992: PPUSH
27993: LD_VAR 0 7
27997: PPUSH
27998: LD_VAR 0 6
28002: PPUSH
28003: CALL_OW 1
28007: ST_TO_ADDR
// for i = s_arr downto 2 do
28008: LD_ADDR_VAR 0 5
28012: PUSH
28013: DOUBLE
28014: LD_VAR 0 7
28018: INC
28019: ST_TO_ADDR
28020: LD_INT 2
28022: PUSH
28023: FOR_DOWNTO
28024: IFFALSE 28108
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28026: LD_ADDR_VAR 0 6
28030: PUSH
28031: LD_VAR 0 7
28035: PUSH
28036: LD_VAR 0 5
28040: PUSH
28041: LD_INT 1
28043: MINUS
28044: ARRAY
28045: PPUSH
28046: LD_VAR 0 2
28050: PUSH
28051: LD_VAR 0 5
28055: PUSH
28056: LD_INT 1
28058: MINUS
28059: ARRAY
28060: PPUSH
28061: LD_VAR 0 7
28065: PUSH
28066: LD_VAR 0 5
28070: ARRAY
28071: PPUSH
28072: CALL_OW 1
28076: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28077: LD_ADDR_VAR 0 7
28081: PUSH
28082: LD_VAR 0 7
28086: PPUSH
28087: LD_VAR 0 5
28091: PUSH
28092: LD_INT 1
28094: MINUS
28095: PPUSH
28096: LD_VAR 0 6
28100: PPUSH
28101: CALL_OW 1
28105: ST_TO_ADDR
// end ;
28106: GO 28023
28108: POP
28109: POP
// result := s_arr [ 1 ] ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_VAR 0 7
28119: PUSH
28120: LD_INT 1
28122: ARRAY
28123: ST_TO_ADDR
// end ; end ;
28124: LD_VAR 0 4
28128: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
// if not list then
28133: LD_VAR 0 1
28137: NOT
28138: IFFALSE 28142
// exit ;
28140: GO 28233
// i := list [ pos1 ] ;
28142: LD_ADDR_VAR 0 5
28146: PUSH
28147: LD_VAR 0 1
28151: PUSH
28152: LD_VAR 0 2
28156: ARRAY
28157: ST_TO_ADDR
// if not i then
28158: LD_VAR 0 5
28162: NOT
28163: IFFALSE 28167
// exit ;
28165: GO 28233
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28167: LD_ADDR_VAR 0 1
28171: PUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: LD_VAR 0 2
28181: PPUSH
28182: LD_VAR 0 1
28186: PUSH
28187: LD_VAR 0 3
28191: ARRAY
28192: PPUSH
28193: CALL_OW 1
28197: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28198: LD_ADDR_VAR 0 1
28202: PUSH
28203: LD_VAR 0 1
28207: PPUSH
28208: LD_VAR 0 3
28212: PPUSH
28213: LD_VAR 0 5
28217: PPUSH
28218: CALL_OW 1
28222: ST_TO_ADDR
// result := list ;
28223: LD_ADDR_VAR 0 4
28227: PUSH
28228: LD_VAR 0 1
28232: ST_TO_ADDR
// end ;
28233: LD_VAR 0 4
28237: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28238: LD_INT 0
28240: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28241: LD_ADDR_VAR 0 5
28245: PUSH
28246: LD_VAR 0 1
28250: PPUSH
28251: CALL_OW 250
28255: PPUSH
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 251
28265: PPUSH
28266: LD_VAR 0 2
28270: PPUSH
28271: LD_VAR 0 3
28275: PPUSH
28276: LD_VAR 0 4
28280: PPUSH
28281: CALL 28659 0 5
28285: ST_TO_ADDR
// end ;
28286: LD_VAR 0 5
28290: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
28295: PPUSH
28296: PPUSH
// if not list or not unit then
28297: LD_VAR 0 2
28301: NOT
28302: PUSH
28303: LD_VAR 0 1
28307: NOT
28308: OR
28309: IFFALSE 28313
// exit ;
28311: GO 28654
// result := [ ] ;
28313: LD_ADDR_VAR 0 5
28317: PUSH
28318: EMPTY
28319: ST_TO_ADDR
// for i in list do
28320: LD_ADDR_VAR 0 6
28324: PUSH
28325: LD_VAR 0 2
28329: PUSH
28330: FOR_IN
28331: IFFALSE 28549
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28333: LD_ADDR_VAR 0 8
28337: PUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: LD_VAR 0 6
28347: PUSH
28348: LD_INT 1
28350: ARRAY
28351: PPUSH
28352: LD_VAR 0 6
28356: PUSH
28357: LD_INT 2
28359: ARRAY
28360: PPUSH
28361: CALL_OW 297
28365: ST_TO_ADDR
// if not Count ( result ) then
28366: LD_VAR 0 5
28370: PPUSH
28371: CALL 24943 0 1
28375: NOT
28376: IFFALSE 28409
// begin result := Join ( result , [ i , tmp ] ) ;
28378: LD_ADDR_VAR 0 5
28382: PUSH
28383: LD_VAR 0 5
28387: PPUSH
28388: LD_VAR 0 6
28392: PUSH
28393: LD_VAR 0 8
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PPUSH
28402: CALL 60552 0 2
28406: ST_TO_ADDR
// continue ;
28407: GO 28330
// end ; if result [ result ] [ 2 ] <= tmp then
28409: LD_VAR 0 5
28413: PUSH
28414: LD_VAR 0 5
28418: ARRAY
28419: PUSH
28420: LD_INT 2
28422: ARRAY
28423: PUSH
28424: LD_VAR 0 8
28428: LESSEQUAL
28429: IFFALSE 28462
// result := Join ( result , [ i , tmp ] ) else
28431: LD_ADDR_VAR 0 5
28435: PUSH
28436: LD_VAR 0 5
28440: PPUSH
28441: LD_VAR 0 6
28445: PUSH
28446: LD_VAR 0 8
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PPUSH
28455: CALL 60552 0 2
28459: ST_TO_ADDR
28460: GO 28547
// begin for j := 1 to Count ( result ) do
28462: LD_ADDR_VAR 0 7
28466: PUSH
28467: DOUBLE
28468: LD_INT 1
28470: DEC
28471: ST_TO_ADDR
28472: LD_VAR 0 5
28476: PPUSH
28477: CALL 24943 0 1
28481: PUSH
28482: FOR_TO
28483: IFFALSE 28545
// begin if tmp < result [ j ] [ 2 ] then
28485: LD_VAR 0 8
28489: PUSH
28490: LD_VAR 0 5
28494: PUSH
28495: LD_VAR 0 7
28499: ARRAY
28500: PUSH
28501: LD_INT 2
28503: ARRAY
28504: LESS
28505: IFFALSE 28543
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28507: LD_ADDR_VAR 0 5
28511: PUSH
28512: LD_VAR 0 5
28516: PPUSH
28517: LD_VAR 0 7
28521: PPUSH
28522: LD_VAR 0 6
28526: PUSH
28527: LD_VAR 0 8
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PPUSH
28536: CALL_OW 2
28540: ST_TO_ADDR
// break ;
28541: GO 28545
// end ; end ;
28543: GO 28482
28545: POP
28546: POP
// end ; end ;
28547: GO 28330
28549: POP
28550: POP
// if result and not asc then
28551: LD_VAR 0 5
28555: PUSH
28556: LD_VAR 0 3
28560: NOT
28561: AND
28562: IFFALSE 28579
// result := ReverseArray ( result ) ;
28564: LD_ADDR_VAR 0 5
28568: PUSH
28569: LD_VAR 0 5
28573: PPUSH
28574: CALL 55819 0 1
28578: ST_TO_ADDR
// tmp := [ ] ;
28579: LD_ADDR_VAR 0 8
28583: PUSH
28584: EMPTY
28585: ST_TO_ADDR
// if mode then
28586: LD_VAR 0 4
28590: IFFALSE 28654
// begin for i := 1 to result do
28592: LD_ADDR_VAR 0 6
28596: PUSH
28597: DOUBLE
28598: LD_INT 1
28600: DEC
28601: ST_TO_ADDR
28602: LD_VAR 0 5
28606: PUSH
28607: FOR_TO
28608: IFFALSE 28642
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28610: LD_ADDR_VAR 0 8
28614: PUSH
28615: LD_VAR 0 8
28619: PPUSH
28620: LD_VAR 0 5
28624: PUSH
28625: LD_VAR 0 6
28629: ARRAY
28630: PUSH
28631: LD_INT 1
28633: ARRAY
28634: PPUSH
28635: CALL 60552 0 2
28639: ST_TO_ADDR
28640: GO 28607
28642: POP
28643: POP
// result := tmp ;
28644: LD_ADDR_VAR 0 5
28648: PUSH
28649: LD_VAR 0 8
28653: ST_TO_ADDR
// end ; end ;
28654: LD_VAR 0 5
28658: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28659: LD_INT 0
28661: PPUSH
28662: PPUSH
28663: PPUSH
28664: PPUSH
// if not list then
28665: LD_VAR 0 3
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 29062
// result := [ ] ;
28674: LD_ADDR_VAR 0 6
28678: PUSH
28679: EMPTY
28680: ST_TO_ADDR
// for i in list do
28681: LD_ADDR_VAR 0 7
28685: PUSH
28686: LD_VAR 0 3
28690: PUSH
28691: FOR_IN
28692: IFFALSE 28894
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28694: LD_ADDR_VAR 0 9
28698: PUSH
28699: LD_VAR 0 7
28703: PPUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: LD_VAR 0 2
28713: PPUSH
28714: CALL_OW 297
28718: ST_TO_ADDR
// if not result then
28719: LD_VAR 0 6
28723: NOT
28724: IFFALSE 28750
// result := [ [ i , tmp ] ] else
28726: LD_ADDR_VAR 0 6
28730: PUSH
28731: LD_VAR 0 7
28735: PUSH
28736: LD_VAR 0 9
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: ST_TO_ADDR
28748: GO 28892
// begin if result [ result ] [ 2 ] <= tmp then
28750: LD_VAR 0 6
28754: PUSH
28755: LD_VAR 0 6
28759: ARRAY
28760: PUSH
28761: LD_INT 2
28763: ARRAY
28764: PUSH
28765: LD_VAR 0 9
28769: LESSEQUAL
28770: IFFALSE 28812
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28772: LD_ADDR_VAR 0 6
28776: PUSH
28777: LD_VAR 0 6
28781: PPUSH
28782: LD_VAR 0 6
28786: PUSH
28787: LD_INT 1
28789: PLUS
28790: PPUSH
28791: LD_VAR 0 7
28795: PUSH
28796: LD_VAR 0 9
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 2
28809: ST_TO_ADDR
28810: GO 28892
// for j := 1 to result do
28812: LD_ADDR_VAR 0 8
28816: PUSH
28817: DOUBLE
28818: LD_INT 1
28820: DEC
28821: ST_TO_ADDR
28822: LD_VAR 0 6
28826: PUSH
28827: FOR_TO
28828: IFFALSE 28890
// begin if tmp < result [ j ] [ 2 ] then
28830: LD_VAR 0 9
28834: PUSH
28835: LD_VAR 0 6
28839: PUSH
28840: LD_VAR 0 8
28844: ARRAY
28845: PUSH
28846: LD_INT 2
28848: ARRAY
28849: LESS
28850: IFFALSE 28888
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28852: LD_ADDR_VAR 0 6
28856: PUSH
28857: LD_VAR 0 6
28861: PPUSH
28862: LD_VAR 0 8
28866: PPUSH
28867: LD_VAR 0 7
28871: PUSH
28872: LD_VAR 0 9
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PPUSH
28881: CALL_OW 2
28885: ST_TO_ADDR
// break ;
28886: GO 28890
// end ; end ;
28888: GO 28827
28890: POP
28891: POP
// end ; end ;
28892: GO 28691
28894: POP
28895: POP
// if result and not asc then
28896: LD_VAR 0 6
28900: PUSH
28901: LD_VAR 0 4
28905: NOT
28906: AND
28907: IFFALSE 28982
// begin tmp := result ;
28909: LD_ADDR_VAR 0 9
28913: PUSH
28914: LD_VAR 0 6
28918: ST_TO_ADDR
// for i = tmp downto 1 do
28919: LD_ADDR_VAR 0 7
28923: PUSH
28924: DOUBLE
28925: LD_VAR 0 9
28929: INC
28930: ST_TO_ADDR
28931: LD_INT 1
28933: PUSH
28934: FOR_DOWNTO
28935: IFFALSE 28980
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28937: LD_ADDR_VAR 0 6
28941: PUSH
28942: LD_VAR 0 6
28946: PPUSH
28947: LD_VAR 0 9
28951: PUSH
28952: LD_VAR 0 7
28956: MINUS
28957: PUSH
28958: LD_INT 1
28960: PLUS
28961: PPUSH
28962: LD_VAR 0 9
28966: PUSH
28967: LD_VAR 0 7
28971: ARRAY
28972: PPUSH
28973: CALL_OW 1
28977: ST_TO_ADDR
28978: GO 28934
28980: POP
28981: POP
// end ; tmp := [ ] ;
28982: LD_ADDR_VAR 0 9
28986: PUSH
28987: EMPTY
28988: ST_TO_ADDR
// if mode then
28989: LD_VAR 0 5
28993: IFFALSE 29062
// begin for i = 1 to result do
28995: LD_ADDR_VAR 0 7
28999: PUSH
29000: DOUBLE
29001: LD_INT 1
29003: DEC
29004: ST_TO_ADDR
29005: LD_VAR 0 6
29009: PUSH
29010: FOR_TO
29011: IFFALSE 29050
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29013: LD_ADDR_VAR 0 9
29017: PUSH
29018: LD_VAR 0 9
29022: PPUSH
29023: LD_VAR 0 7
29027: PPUSH
29028: LD_VAR 0 6
29032: PUSH
29033: LD_VAR 0 7
29037: ARRAY
29038: PUSH
29039: LD_INT 1
29041: ARRAY
29042: PPUSH
29043: CALL_OW 1
29047: ST_TO_ADDR
29048: GO 29010
29050: POP
29051: POP
// result := tmp ;
29052: LD_ADDR_VAR 0 6
29056: PUSH
29057: LD_VAR 0 9
29061: ST_TO_ADDR
// end ; end ;
29062: LD_VAR 0 6
29066: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29067: LD_INT 0
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29075: LD_ADDR_VAR 0 5
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 0
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// if not x or not y then
29097: LD_VAR 0 2
29101: NOT
29102: PUSH
29103: LD_VAR 0 3
29107: NOT
29108: OR
29109: IFFALSE 29113
// exit ;
29111: GO 30763
// if not range then
29113: LD_VAR 0 4
29117: NOT
29118: IFFALSE 29128
// range := 10 ;
29120: LD_ADDR_VAR 0 4
29124: PUSH
29125: LD_INT 10
29127: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29128: LD_ADDR_VAR 0 8
29132: PUSH
29133: LD_INT 81
29135: PUSH
29136: LD_VAR 0 1
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 92
29147: PUSH
29148: LD_VAR 0 2
29152: PUSH
29153: LD_VAR 0 3
29157: PUSH
29158: LD_VAR 0 4
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 21
29174: PUSH
29175: LD_INT 3
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PPUSH
29191: CALL_OW 69
29195: ST_TO_ADDR
// if not tmp then
29196: LD_VAR 0 8
29200: NOT
29201: IFFALSE 29205
// exit ;
29203: GO 30763
// for i in tmp do
29205: LD_ADDR_VAR 0 6
29209: PUSH
29210: LD_VAR 0 8
29214: PUSH
29215: FOR_IN
29216: IFFALSE 30738
// begin points := [ 0 , 0 , 0 ] ;
29218: LD_ADDR_VAR 0 9
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: LIST
29236: ST_TO_ADDR
// bpoints := 1 ;
29237: LD_ADDR_VAR 0 10
29241: PUSH
29242: LD_INT 1
29244: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29245: LD_VAR 0 6
29249: PPUSH
29250: CALL_OW 247
29254: PUSH
29255: LD_INT 1
29257: DOUBLE
29258: EQUAL
29259: IFTRUE 29263
29261: GO 29841
29263: POP
// begin if GetClass ( i ) = 1 then
29264: LD_VAR 0 6
29268: PPUSH
29269: CALL_OW 257
29273: PUSH
29274: LD_INT 1
29276: EQUAL
29277: IFFALSE 29298
// points := [ 10 , 5 , 3 ] ;
29279: LD_ADDR_VAR 0 9
29283: PUSH
29284: LD_INT 10
29286: PUSH
29287: LD_INT 5
29289: PUSH
29290: LD_INT 3
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: LIST
29297: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29298: LD_VAR 0 6
29302: PPUSH
29303: CALL_OW 257
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: LD_INT 4
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: IN
29322: IFFALSE 29343
// points := [ 3 , 2 , 1 ] ;
29324: LD_ADDR_VAR 0 9
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29343: LD_VAR 0 6
29347: PPUSH
29348: CALL_OW 257
29352: PUSH
29353: LD_INT 5
29355: EQUAL
29356: IFFALSE 29377
// points := [ 130 , 5 , 2 ] ;
29358: LD_ADDR_VAR 0 9
29362: PUSH
29363: LD_INT 130
29365: PUSH
29366: LD_INT 5
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29377: LD_VAR 0 6
29381: PPUSH
29382: CALL_OW 257
29386: PUSH
29387: LD_INT 8
29389: EQUAL
29390: IFFALSE 29411
// points := [ 35 , 35 , 30 ] ;
29392: LD_ADDR_VAR 0 9
29396: PUSH
29397: LD_INT 35
29399: PUSH
29400: LD_INT 35
29402: PUSH
29403: LD_INT 30
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29411: LD_VAR 0 6
29415: PPUSH
29416: CALL_OW 257
29420: PUSH
29421: LD_INT 9
29423: EQUAL
29424: IFFALSE 29445
// points := [ 20 , 55 , 40 ] ;
29426: LD_ADDR_VAR 0 9
29430: PUSH
29431: LD_INT 20
29433: PUSH
29434: LD_INT 55
29436: PUSH
29437: LD_INT 40
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29445: LD_VAR 0 6
29449: PPUSH
29450: CALL_OW 257
29454: PUSH
29455: LD_INT 12
29457: PUSH
29458: LD_INT 16
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: IN
29465: IFFALSE 29486
// points := [ 5 , 3 , 2 ] ;
29467: LD_ADDR_VAR 0 9
29471: PUSH
29472: LD_INT 5
29474: PUSH
29475: LD_INT 3
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29486: LD_VAR 0 6
29490: PPUSH
29491: CALL_OW 257
29495: PUSH
29496: LD_INT 17
29498: EQUAL
29499: IFFALSE 29520
// points := [ 100 , 50 , 75 ] ;
29501: LD_ADDR_VAR 0 9
29505: PUSH
29506: LD_INT 100
29508: PUSH
29509: LD_INT 50
29511: PUSH
29512: LD_INT 75
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29520: LD_VAR 0 6
29524: PPUSH
29525: CALL_OW 257
29529: PUSH
29530: LD_INT 15
29532: EQUAL
29533: IFFALSE 29554
// points := [ 10 , 5 , 3 ] ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_INT 10
29542: PUSH
29543: LD_INT 5
29545: PUSH
29546: LD_INT 3
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29554: LD_VAR 0 6
29558: PPUSH
29559: CALL_OW 257
29563: PUSH
29564: LD_INT 14
29566: EQUAL
29567: IFFALSE 29588
// points := [ 10 , 0 , 0 ] ;
29569: LD_ADDR_VAR 0 9
29573: PUSH
29574: LD_INT 10
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29588: LD_VAR 0 6
29592: PPUSH
29593: CALL_OW 257
29597: PUSH
29598: LD_INT 11
29600: EQUAL
29601: IFFALSE 29622
// points := [ 30 , 10 , 5 ] ;
29603: LD_ADDR_VAR 0 9
29607: PUSH
29608: LD_INT 30
29610: PUSH
29611: LD_INT 10
29613: PUSH
29614: LD_INT 5
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29622: LD_VAR 0 1
29626: PPUSH
29627: LD_INT 5
29629: PPUSH
29630: CALL_OW 321
29634: PUSH
29635: LD_INT 2
29637: EQUAL
29638: IFFALSE 29655
// bpoints := bpoints * 1.8 ;
29640: LD_ADDR_VAR 0 10
29644: PUSH
29645: LD_VAR 0 10
29649: PUSH
29650: LD_REAL  1.80000000000000E+0000
29653: MUL
29654: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29655: LD_VAR 0 6
29659: PPUSH
29660: CALL_OW 257
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: IN
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: LD_INT 51
29691: PPUSH
29692: CALL_OW 321
29696: PUSH
29697: LD_INT 2
29699: EQUAL
29700: AND
29701: IFFALSE 29718
// bpoints := bpoints * 1.2 ;
29703: LD_ADDR_VAR 0 10
29707: PUSH
29708: LD_VAR 0 10
29712: PUSH
29713: LD_REAL  1.20000000000000E+0000
29716: MUL
29717: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29718: LD_VAR 0 6
29722: PPUSH
29723: CALL_OW 257
29727: PUSH
29728: LD_INT 5
29730: PUSH
29731: LD_INT 7
29733: PUSH
29734: LD_INT 9
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: IN
29742: PUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: LD_INT 52
29750: PPUSH
29751: CALL_OW 321
29755: PUSH
29756: LD_INT 2
29758: EQUAL
29759: AND
29760: IFFALSE 29777
// bpoints := bpoints * 1.5 ;
29762: LD_ADDR_VAR 0 10
29766: PUSH
29767: LD_VAR 0 10
29771: PUSH
29772: LD_REAL  1.50000000000000E+0000
29775: MUL
29776: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29777: LD_VAR 0 1
29781: PPUSH
29782: LD_INT 66
29784: PPUSH
29785: CALL_OW 321
29789: PUSH
29790: LD_INT 2
29792: EQUAL
29793: IFFALSE 29810
// bpoints := bpoints * 1.1 ;
29795: LD_ADDR_VAR 0 10
29799: PUSH
29800: LD_VAR 0 10
29804: PUSH
29805: LD_REAL  1.10000000000000E+0000
29808: MUL
29809: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29810: LD_ADDR_VAR 0 10
29814: PUSH
29815: LD_VAR 0 10
29819: PUSH
29820: LD_VAR 0 6
29824: PPUSH
29825: LD_INT 1
29827: PPUSH
29828: CALL_OW 259
29832: PUSH
29833: LD_REAL  1.15000000000000E+0000
29836: MUL
29837: MUL
29838: ST_TO_ADDR
// end ; unit_vehicle :
29839: GO 30667
29841: LD_INT 2
29843: DOUBLE
29844: EQUAL
29845: IFTRUE 29849
29847: GO 30655
29849: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29850: LD_VAR 0 6
29854: PPUSH
29855: CALL_OW 264
29859: PUSH
29860: LD_INT 2
29862: PUSH
29863: LD_INT 42
29865: PUSH
29866: LD_INT 24
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: IN
29874: IFFALSE 29895
// points := [ 25 , 5 , 3 ] ;
29876: LD_ADDR_VAR 0 9
29880: PUSH
29881: LD_INT 25
29883: PUSH
29884: LD_INT 5
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: LIST
29894: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29895: LD_VAR 0 6
29899: PPUSH
29900: CALL_OW 264
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: LD_INT 43
29910: PUSH
29911: LD_INT 25
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: IN
29919: IFFALSE 29940
// points := [ 40 , 15 , 5 ] ;
29921: LD_ADDR_VAR 0 9
29925: PUSH
29926: LD_INT 40
29928: PUSH
29929: LD_INT 15
29931: PUSH
29932: LD_INT 5
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29940: LD_VAR 0 6
29944: PPUSH
29945: CALL_OW 264
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: LD_INT 23
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: IN
29960: IFFALSE 29981
// points := [ 7 , 25 , 8 ] ;
29962: LD_ADDR_VAR 0 9
29966: PUSH
29967: LD_INT 7
29969: PUSH
29970: LD_INT 25
29972: PUSH
29973: LD_INT 8
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29981: LD_VAR 0 6
29985: PPUSH
29986: CALL_OW 264
29990: PUSH
29991: LD_INT 5
29993: PUSH
29994: LD_INT 27
29996: PUSH
29997: LD_INT 44
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: LIST
30004: IN
30005: IFFALSE 30026
// points := [ 14 , 50 , 16 ] ;
30007: LD_ADDR_VAR 0 9
30011: PUSH
30012: LD_INT 14
30014: PUSH
30015: LD_INT 50
30017: PUSH
30018: LD_INT 16
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: LIST
30025: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30026: LD_VAR 0 6
30030: PPUSH
30031: CALL_OW 264
30035: PUSH
30036: LD_INT 6
30038: PUSH
30039: LD_INT 46
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: IN
30046: IFFALSE 30067
// points := [ 32 , 120 , 70 ] ;
30048: LD_ADDR_VAR 0 9
30052: PUSH
30053: LD_INT 32
30055: PUSH
30056: LD_INT 120
30058: PUSH
30059: LD_INT 70
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30067: LD_VAR 0 6
30071: PPUSH
30072: CALL_OW 264
30076: PUSH
30077: LD_INT 7
30079: PUSH
30080: LD_INT 28
30082: PUSH
30083: LD_INT 45
30085: PUSH
30086: LD_INT 92
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: IN
30095: IFFALSE 30116
// points := [ 35 , 20 , 45 ] ;
30097: LD_ADDR_VAR 0 9
30101: PUSH
30102: LD_INT 35
30104: PUSH
30105: LD_INT 20
30107: PUSH
30108: LD_INT 45
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30116: LD_VAR 0 6
30120: PPUSH
30121: CALL_OW 264
30125: PUSH
30126: LD_INT 47
30128: PUSH
30129: EMPTY
30130: LIST
30131: IN
30132: IFFALSE 30153
// points := [ 67 , 45 , 75 ] ;
30134: LD_ADDR_VAR 0 9
30138: PUSH
30139: LD_INT 67
30141: PUSH
30142: LD_INT 45
30144: PUSH
30145: LD_INT 75
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30153: LD_VAR 0 6
30157: PPUSH
30158: CALL_OW 264
30162: PUSH
30163: LD_INT 26
30165: PUSH
30166: EMPTY
30167: LIST
30168: IN
30169: IFFALSE 30190
// points := [ 120 , 30 , 80 ] ;
30171: LD_ADDR_VAR 0 9
30175: PUSH
30176: LD_INT 120
30178: PUSH
30179: LD_INT 30
30181: PUSH
30182: LD_INT 80
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30190: LD_VAR 0 6
30194: PPUSH
30195: CALL_OW 264
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: EMPTY
30204: LIST
30205: IN
30206: IFFALSE 30227
// points := [ 40 , 1 , 1 ] ;
30208: LD_ADDR_VAR 0 9
30212: PUSH
30213: LD_INT 40
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30227: LD_VAR 0 6
30231: PPUSH
30232: CALL_OW 264
30236: PUSH
30237: LD_INT 29
30239: PUSH
30240: EMPTY
30241: LIST
30242: IN
30243: IFFALSE 30264
// points := [ 70 , 200 , 400 ] ;
30245: LD_ADDR_VAR 0 9
30249: PUSH
30250: LD_INT 70
30252: PUSH
30253: LD_INT 200
30255: PUSH
30256: LD_INT 400
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30264: LD_VAR 0 6
30268: PPUSH
30269: CALL_OW 264
30273: PUSH
30274: LD_INT 14
30276: PUSH
30277: LD_INT 53
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: IN
30284: IFFALSE 30305
// points := [ 40 , 10 , 20 ] ;
30286: LD_ADDR_VAR 0 9
30290: PUSH
30291: LD_INT 40
30293: PUSH
30294: LD_INT 10
30296: PUSH
30297: LD_INT 20
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30305: LD_VAR 0 6
30309: PPUSH
30310: CALL_OW 264
30314: PUSH
30315: LD_INT 9
30317: PUSH
30318: EMPTY
30319: LIST
30320: IN
30321: IFFALSE 30342
// points := [ 5 , 70 , 20 ] ;
30323: LD_ADDR_VAR 0 9
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: LD_INT 70
30333: PUSH
30334: LD_INT 20
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30342: LD_VAR 0 6
30346: PPUSH
30347: CALL_OW 264
30351: PUSH
30352: LD_INT 10
30354: PUSH
30355: EMPTY
30356: LIST
30357: IN
30358: IFFALSE 30379
// points := [ 35 , 110 , 70 ] ;
30360: LD_ADDR_VAR 0 9
30364: PUSH
30365: LD_INT 35
30367: PUSH
30368: LD_INT 110
30370: PUSH
30371: LD_INT 70
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30379: LD_VAR 0 6
30383: PPUSH
30384: CALL_OW 265
30388: PUSH
30389: LD_INT 25
30391: EQUAL
30392: IFFALSE 30413
// points := [ 80 , 65 , 100 ] ;
30394: LD_ADDR_VAR 0 9
30398: PUSH
30399: LD_INT 80
30401: PUSH
30402: LD_INT 65
30404: PUSH
30405: LD_INT 100
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30413: LD_VAR 0 6
30417: PPUSH
30418: CALL_OW 263
30422: PUSH
30423: LD_INT 1
30425: EQUAL
30426: IFFALSE 30461
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30428: LD_ADDR_VAR 0 10
30432: PUSH
30433: LD_VAR 0 10
30437: PUSH
30438: LD_VAR 0 6
30442: PPUSH
30443: CALL_OW 311
30447: PPUSH
30448: LD_INT 3
30450: PPUSH
30451: CALL_OW 259
30455: PUSH
30456: LD_INT 4
30458: MUL
30459: MUL
30460: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30461: LD_VAR 0 6
30465: PPUSH
30466: CALL_OW 263
30470: PUSH
30471: LD_INT 2
30473: EQUAL
30474: IFFALSE 30525
// begin j := IsControledBy ( i ) ;
30476: LD_ADDR_VAR 0 7
30480: PUSH
30481: LD_VAR 0 6
30485: PPUSH
30486: CALL_OW 312
30490: ST_TO_ADDR
// if j then
30491: LD_VAR 0 7
30495: IFFALSE 30525
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30497: LD_ADDR_VAR 0 10
30501: PUSH
30502: LD_VAR 0 10
30506: PUSH
30507: LD_VAR 0 7
30511: PPUSH
30512: LD_INT 3
30514: PPUSH
30515: CALL_OW 259
30519: PUSH
30520: LD_INT 3
30522: MUL
30523: MUL
30524: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30525: LD_VAR 0 6
30529: PPUSH
30530: CALL_OW 264
30534: PUSH
30535: LD_INT 5
30537: PUSH
30538: LD_INT 6
30540: PUSH
30541: LD_INT 46
30543: PUSH
30544: LD_INT 44
30546: PUSH
30547: LD_INT 47
30549: PUSH
30550: LD_INT 45
30552: PUSH
30553: LD_INT 28
30555: PUSH
30556: LD_INT 7
30558: PUSH
30559: LD_INT 27
30561: PUSH
30562: LD_INT 29
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: IN
30577: PUSH
30578: LD_VAR 0 1
30582: PPUSH
30583: LD_INT 52
30585: PPUSH
30586: CALL_OW 321
30590: PUSH
30591: LD_INT 2
30593: EQUAL
30594: AND
30595: IFFALSE 30612
// bpoints := bpoints * 1.2 ;
30597: LD_ADDR_VAR 0 10
30601: PUSH
30602: LD_VAR 0 10
30606: PUSH
30607: LD_REAL  1.20000000000000E+0000
30610: MUL
30611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30612: LD_VAR 0 6
30616: PPUSH
30617: CALL_OW 264
30621: PUSH
30622: LD_INT 6
30624: PUSH
30625: LD_INT 46
30627: PUSH
30628: LD_INT 47
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: IN
30636: IFFALSE 30653
// bpoints := bpoints * 1.2 ;
30638: LD_ADDR_VAR 0 10
30642: PUSH
30643: LD_VAR 0 10
30647: PUSH
30648: LD_REAL  1.20000000000000E+0000
30651: MUL
30652: ST_TO_ADDR
// end ; unit_building :
30653: GO 30667
30655: LD_INT 3
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30666
30663: POP
// ; end ;
30664: GO 30667
30666: POP
// for j = 1 to 3 do
30667: LD_ADDR_VAR 0 7
30671: PUSH
30672: DOUBLE
30673: LD_INT 1
30675: DEC
30676: ST_TO_ADDR
30677: LD_INT 3
30679: PUSH
30680: FOR_TO
30681: IFFALSE 30734
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: LD_VAR 0 5
30692: PPUSH
30693: LD_VAR 0 7
30697: PPUSH
30698: LD_VAR 0 5
30702: PUSH
30703: LD_VAR 0 7
30707: ARRAY
30708: PUSH
30709: LD_VAR 0 9
30713: PUSH
30714: LD_VAR 0 7
30718: ARRAY
30719: PUSH
30720: LD_VAR 0 10
30724: MUL
30725: PLUS
30726: PPUSH
30727: CALL_OW 1
30731: ST_TO_ADDR
30732: GO 30680
30734: POP
30735: POP
// end ;
30736: GO 29215
30738: POP
30739: POP
// result := Replace ( result , 4 , tmp ) ;
30740: LD_ADDR_VAR 0 5
30744: PUSH
30745: LD_VAR 0 5
30749: PPUSH
30750: LD_INT 4
30752: PPUSH
30753: LD_VAR 0 8
30757: PPUSH
30758: CALL_OW 1
30762: ST_TO_ADDR
// end ;
30763: LD_VAR 0 5
30767: RET
// export function DangerAtRange ( unit , range ) ; begin
30768: LD_INT 0
30770: PPUSH
// if not unit then
30771: LD_VAR 0 1
30775: NOT
30776: IFFALSE 30780
// exit ;
30778: GO 30825
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_VAR 0 1
30789: PPUSH
30790: CALL_OW 255
30794: PPUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL_OW 250
30804: PPUSH
30805: LD_VAR 0 1
30809: PPUSH
30810: CALL_OW 251
30814: PPUSH
30815: LD_VAR 0 2
30819: PPUSH
30820: CALL 29067 0 4
30824: ST_TO_ADDR
// end ;
30825: LD_VAR 0 3
30829: RET
// export function DangerInArea ( side , area ) ; begin
30830: LD_INT 0
30832: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30833: LD_ADDR_VAR 0 3
30837: PUSH
30838: LD_VAR 0 2
30842: PPUSH
30843: LD_INT 81
30845: PUSH
30846: LD_VAR 0 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PPUSH
30855: CALL_OW 70
30859: ST_TO_ADDR
// end ;
30860: LD_VAR 0 3
30864: RET
// export function IsExtension ( b ) ; begin
30865: LD_INT 0
30867: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30868: LD_ADDR_VAR 0 2
30872: PUSH
30873: LD_VAR 0 1
30877: PUSH
30878: LD_INT 23
30880: PUSH
30881: LD_INT 20
30883: PUSH
30884: LD_INT 22
30886: PUSH
30887: LD_INT 17
30889: PUSH
30890: LD_INT 24
30892: PUSH
30893: LD_INT 21
30895: PUSH
30896: LD_INT 19
30898: PUSH
30899: LD_INT 16
30901: PUSH
30902: LD_INT 25
30904: PUSH
30905: LD_INT 18
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: IN
30920: ST_TO_ADDR
// end ;
30921: LD_VAR 0 2
30925: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30926: LD_INT 0
30928: PPUSH
30929: PPUSH
30930: PPUSH
// result := [ ] ;
30931: LD_ADDR_VAR 0 4
30935: PUSH
30936: EMPTY
30937: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30938: LD_ADDR_VAR 0 5
30942: PUSH
30943: LD_VAR 0 2
30947: PPUSH
30948: LD_INT 21
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PPUSH
30958: CALL_OW 70
30962: ST_TO_ADDR
// if not tmp then
30963: LD_VAR 0 5
30967: NOT
30968: IFFALSE 30972
// exit ;
30970: GO 31036
// if checkLink then
30972: LD_VAR 0 3
30976: IFFALSE 31026
// begin for i in tmp do
30978: LD_ADDR_VAR 0 6
30982: PUSH
30983: LD_VAR 0 5
30987: PUSH
30988: FOR_IN
30989: IFFALSE 31024
// if GetBase ( i ) <> base then
30991: LD_VAR 0 6
30995: PPUSH
30996: CALL_OW 274
31000: PUSH
31001: LD_VAR 0 1
31005: NONEQUAL
31006: IFFALSE 31022
// ComLinkToBase ( base , i ) ;
31008: LD_VAR 0 1
31012: PPUSH
31013: LD_VAR 0 6
31017: PPUSH
31018: CALL_OW 169
31022: GO 30988
31024: POP
31025: POP
// end ; result := tmp ;
31026: LD_ADDR_VAR 0 4
31030: PUSH
31031: LD_VAR 0 5
31035: ST_TO_ADDR
// end ;
31036: LD_VAR 0 4
31040: RET
// export function ComComplete ( units , b ) ; var i ; begin
31041: LD_INT 0
31043: PPUSH
31044: PPUSH
// if not units then
31045: LD_VAR 0 1
31049: NOT
31050: IFFALSE 31054
// exit ;
31052: GO 31144
// for i in units do
31054: LD_ADDR_VAR 0 4
31058: PUSH
31059: LD_VAR 0 1
31063: PUSH
31064: FOR_IN
31065: IFFALSE 31142
// if BuildingStatus ( b ) = bs_build then
31067: LD_VAR 0 2
31071: PPUSH
31072: CALL_OW 461
31076: PUSH
31077: LD_INT 1
31079: EQUAL
31080: IFFALSE 31140
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31082: LD_VAR 0 4
31086: PPUSH
31087: LD_STRING h
31089: PUSH
31090: LD_VAR 0 2
31094: PPUSH
31095: CALL_OW 250
31099: PUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: CALL_OW 251
31109: PUSH
31110: LD_VAR 0 2
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: PPUSH
31136: CALL_OW 446
31140: GO 31064
31142: POP
31143: POP
// end ;
31144: LD_VAR 0 3
31148: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
31155: PPUSH
31156: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31157: LD_VAR 0 1
31161: NOT
31162: PUSH
31163: LD_VAR 0 1
31167: PPUSH
31168: CALL_OW 263
31172: PUSH
31173: LD_INT 2
31175: NONEQUAL
31176: OR
31177: IFFALSE 31181
// exit ;
31179: GO 31497
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31181: LD_ADDR_VAR 0 6
31185: PUSH
31186: LD_INT 22
31188: PUSH
31189: LD_VAR 0 1
31193: PPUSH
31194: CALL_OW 255
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 30
31208: PUSH
31209: LD_INT 36
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 34
31218: PUSH
31219: LD_INT 31
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PPUSH
31235: CALL_OW 69
31239: ST_TO_ADDR
// if not tmp then
31240: LD_VAR 0 6
31244: NOT
31245: IFFALSE 31249
// exit ;
31247: GO 31497
// result := [ ] ;
31249: LD_ADDR_VAR 0 2
31253: PUSH
31254: EMPTY
31255: ST_TO_ADDR
// for i in tmp do
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_VAR 0 6
31265: PUSH
31266: FOR_IN
31267: IFFALSE 31338
// begin t := UnitsInside ( i ) ;
31269: LD_ADDR_VAR 0 4
31273: PUSH
31274: LD_VAR 0 3
31278: PPUSH
31279: CALL_OW 313
31283: ST_TO_ADDR
// if t then
31284: LD_VAR 0 4
31288: IFFALSE 31336
// for j in t do
31290: LD_ADDR_VAR 0 7
31294: PUSH
31295: LD_VAR 0 4
31299: PUSH
31300: FOR_IN
31301: IFFALSE 31334
// result := Replace ( result , result + 1 , j ) ;
31303: LD_ADDR_VAR 0 2
31307: PUSH
31308: LD_VAR 0 2
31312: PPUSH
31313: LD_VAR 0 2
31317: PUSH
31318: LD_INT 1
31320: PLUS
31321: PPUSH
31322: LD_VAR 0 7
31326: PPUSH
31327: CALL_OW 1
31331: ST_TO_ADDR
31332: GO 31300
31334: POP
31335: POP
// end ;
31336: GO 31266
31338: POP
31339: POP
// if not result then
31340: LD_VAR 0 2
31344: NOT
31345: IFFALSE 31349
// exit ;
31347: GO 31497
// mech := result [ 1 ] ;
31349: LD_ADDR_VAR 0 5
31353: PUSH
31354: LD_VAR 0 2
31358: PUSH
31359: LD_INT 1
31361: ARRAY
31362: ST_TO_ADDR
// if result > 1 then
31363: LD_VAR 0 2
31367: PUSH
31368: LD_INT 1
31370: GREATER
31371: IFFALSE 31483
// begin for i = 2 to result do
31373: LD_ADDR_VAR 0 3
31377: PUSH
31378: DOUBLE
31379: LD_INT 2
31381: DEC
31382: ST_TO_ADDR
31383: LD_VAR 0 2
31387: PUSH
31388: FOR_TO
31389: IFFALSE 31481
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31391: LD_ADDR_VAR 0 4
31395: PUSH
31396: LD_VAR 0 2
31400: PUSH
31401: LD_VAR 0 3
31405: ARRAY
31406: PPUSH
31407: LD_INT 3
31409: PPUSH
31410: CALL_OW 259
31414: PUSH
31415: LD_VAR 0 2
31419: PUSH
31420: LD_VAR 0 3
31424: ARRAY
31425: PPUSH
31426: CALL_OW 432
31430: MINUS
31431: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31432: LD_VAR 0 4
31436: PUSH
31437: LD_VAR 0 5
31441: PPUSH
31442: LD_INT 3
31444: PPUSH
31445: CALL_OW 259
31449: PUSH
31450: LD_VAR 0 5
31454: PPUSH
31455: CALL_OW 432
31459: MINUS
31460: GREATEREQUAL
31461: IFFALSE 31479
// mech := result [ i ] ;
31463: LD_ADDR_VAR 0 5
31467: PUSH
31468: LD_VAR 0 2
31472: PUSH
31473: LD_VAR 0 3
31477: ARRAY
31478: ST_TO_ADDR
// end ;
31479: GO 31388
31481: POP
31482: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31483: LD_VAR 0 1
31487: PPUSH
31488: LD_VAR 0 5
31492: PPUSH
31493: CALL_OW 135
// end ;
31497: LD_VAR 0 2
31501: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31502: LD_INT 0
31504: PPUSH
31505: PPUSH
31506: PPUSH
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
31515: PPUSH
31516: PPUSH
// result := [ ] ;
31517: LD_ADDR_VAR 0 7
31521: PUSH
31522: EMPTY
31523: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL_OW 266
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: IN
31544: NOT
31545: IFFALSE 31549
// exit ;
31547: GO 33183
// if name then
31549: LD_VAR 0 3
31553: IFFALSE 31569
// SetBName ( base_dep , name ) ;
31555: LD_VAR 0 1
31559: PPUSH
31560: LD_VAR 0 3
31564: PPUSH
31565: CALL_OW 500
// base := GetBase ( base_dep ) ;
31569: LD_ADDR_VAR 0 15
31573: PUSH
31574: LD_VAR 0 1
31578: PPUSH
31579: CALL_OW 274
31583: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31584: LD_ADDR_VAR 0 16
31588: PUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL_OW 255
31598: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31599: LD_ADDR_VAR 0 17
31603: PUSH
31604: LD_VAR 0 1
31608: PPUSH
31609: CALL_OW 248
31613: ST_TO_ADDR
// if sources then
31614: LD_VAR 0 5
31618: IFFALSE 31665
// for i = 1 to 3 do
31620: LD_ADDR_VAR 0 8
31624: PUSH
31625: DOUBLE
31626: LD_INT 1
31628: DEC
31629: ST_TO_ADDR
31630: LD_INT 3
31632: PUSH
31633: FOR_TO
31634: IFFALSE 31663
// AddResourceType ( base , i , sources [ i ] ) ;
31636: LD_VAR 0 15
31640: PPUSH
31641: LD_VAR 0 8
31645: PPUSH
31646: LD_VAR 0 5
31650: PUSH
31651: LD_VAR 0 8
31655: ARRAY
31656: PPUSH
31657: CALL_OW 276
31661: GO 31633
31663: POP
31664: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31665: LD_ADDR_VAR 0 18
31669: PUSH
31670: LD_VAR 0 15
31674: PPUSH
31675: LD_VAR 0 2
31679: PPUSH
31680: LD_INT 1
31682: PPUSH
31683: CALL 30926 0 3
31687: ST_TO_ADDR
// InitHc ;
31688: CALL_OW 19
// InitUc ;
31692: CALL_OW 18
// uc_side := side ;
31696: LD_ADDR_OWVAR 20
31700: PUSH
31701: LD_VAR 0 16
31705: ST_TO_ADDR
// uc_nation := nation ;
31706: LD_ADDR_OWVAR 21
31710: PUSH
31711: LD_VAR 0 17
31715: ST_TO_ADDR
// if buildings then
31716: LD_VAR 0 18
31720: IFFALSE 33042
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31722: LD_ADDR_VAR 0 19
31726: PUSH
31727: LD_VAR 0 18
31731: PPUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 30
31737: PUSH
31738: LD_INT 29
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 30
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: PPUSH
31760: CALL_OW 72
31764: ST_TO_ADDR
// if tmp then
31765: LD_VAR 0 19
31769: IFFALSE 31817
// for i in tmp do
31771: LD_ADDR_VAR 0 8
31775: PUSH
31776: LD_VAR 0 19
31780: PUSH
31781: FOR_IN
31782: IFFALSE 31815
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31784: LD_VAR 0 8
31788: PPUSH
31789: CALL_OW 250
31793: PPUSH
31794: LD_VAR 0 8
31798: PPUSH
31799: CALL_OW 251
31803: PPUSH
31804: LD_VAR 0 16
31808: PPUSH
31809: CALL_OW 441
31813: GO 31781
31815: POP
31816: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31817: LD_VAR 0 18
31821: PPUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 32
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 30
31837: PUSH
31838: LD_INT 33
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: PPUSH
31850: CALL_OW 72
31854: IFFALSE 31942
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31856: LD_ADDR_VAR 0 8
31860: PUSH
31861: LD_VAR 0 18
31865: PPUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 30
31871: PUSH
31872: LD_INT 32
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 30
31881: PUSH
31882: LD_INT 33
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: PPUSH
31894: CALL_OW 72
31898: PUSH
31899: FOR_IN
31900: IFFALSE 31940
// begin if not GetBWeapon ( i ) then
31902: LD_VAR 0 8
31906: PPUSH
31907: CALL_OW 269
31911: NOT
31912: IFFALSE 31938
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31914: LD_VAR 0 8
31918: PPUSH
31919: LD_VAR 0 8
31923: PPUSH
31924: LD_VAR 0 2
31928: PPUSH
31929: CALL 33188 0 2
31933: PPUSH
31934: CALL_OW 431
// end ;
31938: GO 31899
31940: POP
31941: POP
// end ; for i = 1 to personel do
31942: LD_ADDR_VAR 0 8
31946: PUSH
31947: DOUBLE
31948: LD_INT 1
31950: DEC
31951: ST_TO_ADDR
31952: LD_VAR 0 6
31956: PUSH
31957: FOR_TO
31958: IFFALSE 33022
// begin if i > 4 then
31960: LD_VAR 0 8
31964: PUSH
31965: LD_INT 4
31967: GREATER
31968: IFFALSE 31972
// break ;
31970: GO 33022
// case i of 1 :
31972: LD_VAR 0 8
31976: PUSH
31977: LD_INT 1
31979: DOUBLE
31980: EQUAL
31981: IFTRUE 31985
31983: GO 32065
31985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31986: LD_ADDR_VAR 0 12
31990: PUSH
31991: LD_VAR 0 18
31995: PPUSH
31996: LD_INT 22
31998: PUSH
31999: LD_VAR 0 16
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 58
32010: PUSH
32011: EMPTY
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 30
32019: PUSH
32020: LD_INT 32
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 30
32029: PUSH
32030: LD_INT 4
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 30
32039: PUSH
32040: LD_INT 5
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: PPUSH
32058: CALL_OW 72
32062: ST_TO_ADDR
32063: GO 32287
32065: LD_INT 2
32067: DOUBLE
32068: EQUAL
32069: IFTRUE 32073
32071: GO 32135
32073: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32074: LD_ADDR_VAR 0 12
32078: PUSH
32079: LD_VAR 0 18
32083: PPUSH
32084: LD_INT 22
32086: PUSH
32087: LD_VAR 0 16
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: LD_INT 30
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 30
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PPUSH
32128: CALL_OW 72
32132: ST_TO_ADDR
32133: GO 32287
32135: LD_INT 3
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32205
32143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32144: LD_ADDR_VAR 0 12
32148: PUSH
32149: LD_VAR 0 18
32153: PPUSH
32154: LD_INT 22
32156: PUSH
32157: LD_VAR 0 16
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 30
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 30
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PPUSH
32198: CALL_OW 72
32202: ST_TO_ADDR
32203: GO 32287
32205: LD_INT 4
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32286
32213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32214: LD_ADDR_VAR 0 12
32218: PUSH
32219: LD_VAR 0 18
32223: PPUSH
32224: LD_INT 22
32226: PUSH
32227: LD_VAR 0 16
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: LD_INT 30
32241: PUSH
32242: LD_INT 6
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 30
32251: PUSH
32252: LD_INT 7
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 30
32261: PUSH
32262: LD_INT 8
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PPUSH
32279: CALL_OW 72
32283: ST_TO_ADDR
32284: GO 32287
32286: POP
// if i = 1 then
32287: LD_VAR 0 8
32291: PUSH
32292: LD_INT 1
32294: EQUAL
32295: IFFALSE 32406
// begin tmp := [ ] ;
32297: LD_ADDR_VAR 0 19
32301: PUSH
32302: EMPTY
32303: ST_TO_ADDR
// for j in f do
32304: LD_ADDR_VAR 0 9
32308: PUSH
32309: LD_VAR 0 12
32313: PUSH
32314: FOR_IN
32315: IFFALSE 32388
// if GetBType ( j ) = b_bunker then
32317: LD_VAR 0 9
32321: PPUSH
32322: CALL_OW 266
32326: PUSH
32327: LD_INT 32
32329: EQUAL
32330: IFFALSE 32357
// tmp := Insert ( tmp , 1 , j ) else
32332: LD_ADDR_VAR 0 19
32336: PUSH
32337: LD_VAR 0 19
32341: PPUSH
32342: LD_INT 1
32344: PPUSH
32345: LD_VAR 0 9
32349: PPUSH
32350: CALL_OW 2
32354: ST_TO_ADDR
32355: GO 32386
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32357: LD_ADDR_VAR 0 19
32361: PUSH
32362: LD_VAR 0 19
32366: PPUSH
32367: LD_VAR 0 19
32371: PUSH
32372: LD_INT 1
32374: PLUS
32375: PPUSH
32376: LD_VAR 0 9
32380: PPUSH
32381: CALL_OW 2
32385: ST_TO_ADDR
32386: GO 32314
32388: POP
32389: POP
// if tmp then
32390: LD_VAR 0 19
32394: IFFALSE 32406
// f := tmp ;
32396: LD_ADDR_VAR 0 12
32400: PUSH
32401: LD_VAR 0 19
32405: ST_TO_ADDR
// end ; x := personel [ i ] ;
32406: LD_ADDR_VAR 0 13
32410: PUSH
32411: LD_VAR 0 6
32415: PUSH
32416: LD_VAR 0 8
32420: ARRAY
32421: ST_TO_ADDR
// if x = - 1 then
32422: LD_VAR 0 13
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: EQUAL
32431: IFFALSE 32640
// begin for j in f do
32433: LD_ADDR_VAR 0 9
32437: PUSH
32438: LD_VAR 0 12
32442: PUSH
32443: FOR_IN
32444: IFFALSE 32636
// repeat InitHc ;
32446: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32450: LD_VAR 0 9
32454: PPUSH
32455: CALL_OW 266
32459: PUSH
32460: LD_INT 5
32462: EQUAL
32463: IFFALSE 32533
// begin if UnitsInside ( j ) < 3 then
32465: LD_VAR 0 9
32469: PPUSH
32470: CALL_OW 313
32474: PUSH
32475: LD_INT 3
32477: LESS
32478: IFFALSE 32514
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32480: LD_INT 0
32482: PPUSH
32483: LD_INT 5
32485: PUSH
32486: LD_INT 8
32488: PUSH
32489: LD_INT 9
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: PUSH
32497: LD_VAR 0 17
32501: ARRAY
32502: PPUSH
32503: LD_VAR 0 4
32507: PPUSH
32508: CALL_OW 380
32512: GO 32531
// PrepareHuman ( false , i , skill ) ;
32514: LD_INT 0
32516: PPUSH
32517: LD_VAR 0 8
32521: PPUSH
32522: LD_VAR 0 4
32526: PPUSH
32527: CALL_OW 380
// end else
32531: GO 32550
// PrepareHuman ( false , i , skill ) ;
32533: LD_INT 0
32535: PPUSH
32536: LD_VAR 0 8
32540: PPUSH
32541: LD_VAR 0 4
32545: PPUSH
32546: CALL_OW 380
// un := CreateHuman ;
32550: LD_ADDR_VAR 0 14
32554: PUSH
32555: CALL_OW 44
32559: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32560: LD_ADDR_VAR 0 7
32564: PUSH
32565: LD_VAR 0 7
32569: PPUSH
32570: LD_INT 1
32572: PPUSH
32573: LD_VAR 0 14
32577: PPUSH
32578: CALL_OW 2
32582: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32583: LD_VAR 0 14
32587: PPUSH
32588: LD_VAR 0 9
32592: PPUSH
32593: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32597: LD_VAR 0 9
32601: PPUSH
32602: CALL_OW 313
32606: PUSH
32607: LD_INT 6
32609: EQUAL
32610: PUSH
32611: LD_VAR 0 9
32615: PPUSH
32616: CALL_OW 266
32620: PUSH
32621: LD_INT 32
32623: PUSH
32624: LD_INT 31
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: IN
32631: OR
32632: IFFALSE 32446
32634: GO 32443
32636: POP
32637: POP
// end else
32638: GO 33020
// for j = 1 to x do
32640: LD_ADDR_VAR 0 9
32644: PUSH
32645: DOUBLE
32646: LD_INT 1
32648: DEC
32649: ST_TO_ADDR
32650: LD_VAR 0 13
32654: PUSH
32655: FOR_TO
32656: IFFALSE 33018
// begin InitHc ;
32658: CALL_OW 19
// if not f then
32662: LD_VAR 0 12
32666: NOT
32667: IFFALSE 32756
// begin PrepareHuman ( false , i , skill ) ;
32669: LD_INT 0
32671: PPUSH
32672: LD_VAR 0 8
32676: PPUSH
32677: LD_VAR 0 4
32681: PPUSH
32682: CALL_OW 380
// un := CreateHuman ;
32686: LD_ADDR_VAR 0 14
32690: PUSH
32691: CALL_OW 44
32695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32696: LD_ADDR_VAR 0 7
32700: PUSH
32701: LD_VAR 0 7
32705: PPUSH
32706: LD_INT 1
32708: PPUSH
32709: LD_VAR 0 14
32713: PPUSH
32714: CALL_OW 2
32718: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32719: LD_VAR 0 14
32723: PPUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 250
32733: PPUSH
32734: LD_VAR 0 1
32738: PPUSH
32739: CALL_OW 251
32743: PPUSH
32744: LD_INT 10
32746: PPUSH
32747: LD_INT 0
32749: PPUSH
32750: CALL_OW 50
// continue ;
32754: GO 32655
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32756: LD_VAR 0 12
32760: PUSH
32761: LD_INT 1
32763: ARRAY
32764: PPUSH
32765: CALL_OW 313
32769: PUSH
32770: LD_VAR 0 12
32774: PUSH
32775: LD_INT 1
32777: ARRAY
32778: PPUSH
32779: CALL_OW 266
32783: PUSH
32784: LD_INT 32
32786: PUSH
32787: LD_INT 31
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: IN
32794: AND
32795: PUSH
32796: LD_VAR 0 12
32800: PUSH
32801: LD_INT 1
32803: ARRAY
32804: PPUSH
32805: CALL_OW 313
32809: PUSH
32810: LD_INT 6
32812: EQUAL
32813: OR
32814: IFFALSE 32834
// f := Delete ( f , 1 ) ;
32816: LD_ADDR_VAR 0 12
32820: PUSH
32821: LD_VAR 0 12
32825: PPUSH
32826: LD_INT 1
32828: PPUSH
32829: CALL_OW 3
32833: ST_TO_ADDR
// if not f then
32834: LD_VAR 0 12
32838: NOT
32839: IFFALSE 32857
// begin x := x + 2 ;
32841: LD_ADDR_VAR 0 13
32845: PUSH
32846: LD_VAR 0 13
32850: PUSH
32851: LD_INT 2
32853: PLUS
32854: ST_TO_ADDR
// continue ;
32855: GO 32655
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32857: LD_VAR 0 12
32861: PUSH
32862: LD_INT 1
32864: ARRAY
32865: PPUSH
32866: CALL_OW 266
32870: PUSH
32871: LD_INT 5
32873: EQUAL
32874: IFFALSE 32948
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32876: LD_VAR 0 12
32880: PUSH
32881: LD_INT 1
32883: ARRAY
32884: PPUSH
32885: CALL_OW 313
32889: PUSH
32890: LD_INT 3
32892: LESS
32893: IFFALSE 32929
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32895: LD_INT 0
32897: PPUSH
32898: LD_INT 5
32900: PUSH
32901: LD_INT 8
32903: PUSH
32904: LD_INT 9
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: LIST
32911: PUSH
32912: LD_VAR 0 17
32916: ARRAY
32917: PPUSH
32918: LD_VAR 0 4
32922: PPUSH
32923: CALL_OW 380
32927: GO 32946
// PrepareHuman ( false , i , skill ) ;
32929: LD_INT 0
32931: PPUSH
32932: LD_VAR 0 8
32936: PPUSH
32937: LD_VAR 0 4
32941: PPUSH
32942: CALL_OW 380
// end else
32946: GO 32965
// PrepareHuman ( false , i , skill ) ;
32948: LD_INT 0
32950: PPUSH
32951: LD_VAR 0 8
32955: PPUSH
32956: LD_VAR 0 4
32960: PPUSH
32961: CALL_OW 380
// un := CreateHuman ;
32965: LD_ADDR_VAR 0 14
32969: PUSH
32970: CALL_OW 44
32974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32975: LD_ADDR_VAR 0 7
32979: PUSH
32980: LD_VAR 0 7
32984: PPUSH
32985: LD_INT 1
32987: PPUSH
32988: LD_VAR 0 14
32992: PPUSH
32993: CALL_OW 2
32997: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32998: LD_VAR 0 14
33002: PPUSH
33003: LD_VAR 0 12
33007: PUSH
33008: LD_INT 1
33010: ARRAY
33011: PPUSH
33012: CALL_OW 52
// end ;
33016: GO 32655
33018: POP
33019: POP
// end ;
33020: GO 31957
33022: POP
33023: POP
// result := result ^ buildings ;
33024: LD_ADDR_VAR 0 7
33028: PUSH
33029: LD_VAR 0 7
33033: PUSH
33034: LD_VAR 0 18
33038: ADD
33039: ST_TO_ADDR
// end else
33040: GO 33183
// begin for i = 1 to personel do
33042: LD_ADDR_VAR 0 8
33046: PUSH
33047: DOUBLE
33048: LD_INT 1
33050: DEC
33051: ST_TO_ADDR
33052: LD_VAR 0 6
33056: PUSH
33057: FOR_TO
33058: IFFALSE 33181
// begin if i > 4 then
33060: LD_VAR 0 8
33064: PUSH
33065: LD_INT 4
33067: GREATER
33068: IFFALSE 33072
// break ;
33070: GO 33181
// x := personel [ i ] ;
33072: LD_ADDR_VAR 0 13
33076: PUSH
33077: LD_VAR 0 6
33081: PUSH
33082: LD_VAR 0 8
33086: ARRAY
33087: ST_TO_ADDR
// if x = - 1 then
33088: LD_VAR 0 13
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: EQUAL
33097: IFFALSE 33101
// continue ;
33099: GO 33057
// PrepareHuman ( false , i , skill ) ;
33101: LD_INT 0
33103: PPUSH
33104: LD_VAR 0 8
33108: PPUSH
33109: LD_VAR 0 4
33113: PPUSH
33114: CALL_OW 380
// un := CreateHuman ;
33118: LD_ADDR_VAR 0 14
33122: PUSH
33123: CALL_OW 44
33127: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33128: LD_VAR 0 14
33132: PPUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 250
33142: PPUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 251
33152: PPUSH
33153: LD_INT 10
33155: PPUSH
33156: LD_INT 0
33158: PPUSH
33159: CALL_OW 50
// result := result ^ un ;
33163: LD_ADDR_VAR 0 7
33167: PUSH
33168: LD_VAR 0 7
33172: PUSH
33173: LD_VAR 0 14
33177: ADD
33178: ST_TO_ADDR
// end ;
33179: GO 33057
33181: POP
33182: POP
// end ; end ;
33183: LD_VAR 0 7
33187: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33188: LD_INT 0
33190: PPUSH
33191: PPUSH
33192: PPUSH
33193: PPUSH
33194: PPUSH
33195: PPUSH
33196: PPUSH
33197: PPUSH
33198: PPUSH
33199: PPUSH
33200: PPUSH
33201: PPUSH
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
// result := false ;
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 0
33213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33214: LD_VAR 0 1
33218: NOT
33219: PUSH
33220: LD_VAR 0 1
33224: PPUSH
33225: CALL_OW 266
33229: PUSH
33230: LD_INT 32
33232: PUSH
33233: LD_INT 33
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: IN
33240: NOT
33241: OR
33242: IFFALSE 33246
// exit ;
33244: GO 34355
// nat := GetNation ( tower ) ;
33246: LD_ADDR_VAR 0 12
33250: PUSH
33251: LD_VAR 0 1
33255: PPUSH
33256: CALL_OW 248
33260: ST_TO_ADDR
// side := GetSide ( tower ) ;
33261: LD_ADDR_VAR 0 16
33265: PUSH
33266: LD_VAR 0 1
33270: PPUSH
33271: CALL_OW 255
33275: ST_TO_ADDR
// x := GetX ( tower ) ;
33276: LD_ADDR_VAR 0 10
33280: PUSH
33281: LD_VAR 0 1
33285: PPUSH
33286: CALL_OW 250
33290: ST_TO_ADDR
// y := GetY ( tower ) ;
33291: LD_ADDR_VAR 0 11
33295: PUSH
33296: LD_VAR 0 1
33300: PPUSH
33301: CALL_OW 251
33305: ST_TO_ADDR
// if not x or not y then
33306: LD_VAR 0 10
33310: NOT
33311: PUSH
33312: LD_VAR 0 11
33316: NOT
33317: OR
33318: IFFALSE 33322
// exit ;
33320: GO 34355
// weapon := 0 ;
33322: LD_ADDR_VAR 0 18
33326: PUSH
33327: LD_INT 0
33329: ST_TO_ADDR
// fac_list := [ ] ;
33330: LD_ADDR_VAR 0 17
33334: PUSH
33335: EMPTY
33336: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33337: LD_ADDR_VAR 0 6
33341: PUSH
33342: LD_VAR 0 1
33346: PPUSH
33347: CALL_OW 274
33351: PPUSH
33352: LD_VAR 0 2
33356: PPUSH
33357: LD_INT 0
33359: PPUSH
33360: CALL 30926 0 3
33364: PPUSH
33365: LD_INT 30
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PPUSH
33375: CALL_OW 72
33379: ST_TO_ADDR
// if not factories then
33380: LD_VAR 0 6
33384: NOT
33385: IFFALSE 33389
// exit ;
33387: GO 34355
// for i in factories do
33389: LD_ADDR_VAR 0 8
33393: PUSH
33394: LD_VAR 0 6
33398: PUSH
33399: FOR_IN
33400: IFFALSE 33425
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33402: LD_ADDR_VAR 0 17
33406: PUSH
33407: LD_VAR 0 17
33411: PUSH
33412: LD_VAR 0 8
33416: PPUSH
33417: CALL_OW 478
33421: UNION
33422: ST_TO_ADDR
33423: GO 33399
33425: POP
33426: POP
// if not fac_list then
33427: LD_VAR 0 17
33431: NOT
33432: IFFALSE 33436
// exit ;
33434: GO 34355
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33436: LD_ADDR_VAR 0 5
33440: PUSH
33441: LD_INT 4
33443: PUSH
33444: LD_INT 5
33446: PUSH
33447: LD_INT 9
33449: PUSH
33450: LD_INT 10
33452: PUSH
33453: LD_INT 6
33455: PUSH
33456: LD_INT 7
33458: PUSH
33459: LD_INT 11
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 27
33473: PUSH
33474: LD_INT 28
33476: PUSH
33477: LD_INT 26
33479: PUSH
33480: LD_INT 30
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 43
33491: PUSH
33492: LD_INT 44
33494: PUSH
33495: LD_INT 46
33497: PUSH
33498: LD_INT 45
33500: PUSH
33501: LD_INT 47
33503: PUSH
33504: LD_INT 49
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: PUSH
33520: LD_VAR 0 12
33524: ARRAY
33525: ST_TO_ADDR
// list := list isect fac_list ;
33526: LD_ADDR_VAR 0 5
33530: PUSH
33531: LD_VAR 0 5
33535: PUSH
33536: LD_VAR 0 17
33540: ISECT
33541: ST_TO_ADDR
// if not list then
33542: LD_VAR 0 5
33546: NOT
33547: IFFALSE 33551
// exit ;
33549: GO 34355
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33551: LD_VAR 0 12
33555: PUSH
33556: LD_INT 3
33558: EQUAL
33559: PUSH
33560: LD_INT 49
33562: PUSH
33563: LD_VAR 0 5
33567: IN
33568: AND
33569: PUSH
33570: LD_INT 31
33572: PPUSH
33573: LD_VAR 0 16
33577: PPUSH
33578: CALL_OW 321
33582: PUSH
33583: LD_INT 2
33585: EQUAL
33586: AND
33587: IFFALSE 33647
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33589: LD_INT 22
33591: PUSH
33592: LD_VAR 0 16
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 35
33603: PUSH
33604: LD_INT 49
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 91
33613: PUSH
33614: LD_VAR 0 1
33618: PUSH
33619: LD_INT 10
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: LIST
33631: PPUSH
33632: CALL_OW 69
33636: NOT
33637: IFFALSE 33647
// weapon := ru_time_lapser ;
33639: LD_ADDR_VAR 0 18
33643: PUSH
33644: LD_INT 49
33646: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33647: LD_VAR 0 12
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: IN
33662: PUSH
33663: LD_INT 11
33665: PUSH
33666: LD_VAR 0 5
33670: IN
33671: PUSH
33672: LD_INT 30
33674: PUSH
33675: LD_VAR 0 5
33679: IN
33680: OR
33681: AND
33682: PUSH
33683: LD_INT 6
33685: PPUSH
33686: LD_VAR 0 16
33690: PPUSH
33691: CALL_OW 321
33695: PUSH
33696: LD_INT 2
33698: EQUAL
33699: AND
33700: IFFALSE 33865
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33702: LD_INT 22
33704: PUSH
33705: LD_VAR 0 16
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 35
33719: PUSH
33720: LD_INT 11
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 35
33729: PUSH
33730: LD_INT 30
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 91
33744: PUSH
33745: LD_VAR 0 1
33749: PUSH
33750: LD_INT 18
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: PPUSH
33763: CALL_OW 69
33767: NOT
33768: PUSH
33769: LD_INT 22
33771: PUSH
33772: LD_VAR 0 16
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 30
33786: PUSH
33787: LD_INT 32
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 30
33796: PUSH
33797: LD_INT 33
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 91
33811: PUSH
33812: LD_VAR 0 1
33816: PUSH
33817: LD_INT 12
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: PPUSH
33833: CALL_OW 69
33837: PUSH
33838: LD_INT 2
33840: GREATER
33841: AND
33842: IFFALSE 33865
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33844: LD_ADDR_VAR 0 18
33848: PUSH
33849: LD_INT 11
33851: PUSH
33852: LD_INT 30
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_VAR 0 12
33863: ARRAY
33864: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33865: LD_VAR 0 18
33869: NOT
33870: PUSH
33871: LD_INT 40
33873: PPUSH
33874: LD_VAR 0 16
33878: PPUSH
33879: CALL_OW 321
33883: PUSH
33884: LD_INT 2
33886: EQUAL
33887: AND
33888: PUSH
33889: LD_INT 7
33891: PUSH
33892: LD_VAR 0 5
33896: IN
33897: PUSH
33898: LD_INT 28
33900: PUSH
33901: LD_VAR 0 5
33905: IN
33906: OR
33907: PUSH
33908: LD_INT 45
33910: PUSH
33911: LD_VAR 0 5
33915: IN
33916: OR
33917: AND
33918: IFFALSE 34172
// begin hex := GetHexInfo ( x , y ) ;
33920: LD_ADDR_VAR 0 4
33924: PUSH
33925: LD_VAR 0 10
33929: PPUSH
33930: LD_VAR 0 11
33934: PPUSH
33935: CALL_OW 546
33939: ST_TO_ADDR
// if hex [ 1 ] then
33940: LD_VAR 0 4
33944: PUSH
33945: LD_INT 1
33947: ARRAY
33948: IFFALSE 33952
// exit ;
33950: GO 34355
// height := hex [ 2 ] ;
33952: LD_ADDR_VAR 0 15
33956: PUSH
33957: LD_VAR 0 4
33961: PUSH
33962: LD_INT 2
33964: ARRAY
33965: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33966: LD_ADDR_VAR 0 14
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 5
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
// for i in tmp do
33989: LD_ADDR_VAR 0 8
33993: PUSH
33994: LD_VAR 0 14
33998: PUSH
33999: FOR_IN
34000: IFFALSE 34170
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34002: LD_ADDR_VAR 0 9
34006: PUSH
34007: LD_VAR 0 10
34011: PPUSH
34012: LD_VAR 0 8
34016: PPUSH
34017: LD_INT 5
34019: PPUSH
34020: CALL_OW 272
34024: PUSH
34025: LD_VAR 0 11
34029: PPUSH
34030: LD_VAR 0 8
34034: PPUSH
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 273
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34047: LD_VAR 0 9
34051: PUSH
34052: LD_INT 1
34054: ARRAY
34055: PPUSH
34056: LD_VAR 0 9
34060: PUSH
34061: LD_INT 2
34063: ARRAY
34064: PPUSH
34065: CALL_OW 488
34069: IFFALSE 34168
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34071: LD_ADDR_VAR 0 4
34075: PUSH
34076: LD_VAR 0 9
34080: PUSH
34081: LD_INT 1
34083: ARRAY
34084: PPUSH
34085: LD_VAR 0 9
34089: PUSH
34090: LD_INT 2
34092: ARRAY
34093: PPUSH
34094: CALL_OW 546
34098: ST_TO_ADDR
// if hex [ 1 ] then
34099: LD_VAR 0 4
34103: PUSH
34104: LD_INT 1
34106: ARRAY
34107: IFFALSE 34111
// continue ;
34109: GO 33999
// h := hex [ 2 ] ;
34111: LD_ADDR_VAR 0 13
34115: PUSH
34116: LD_VAR 0 4
34120: PUSH
34121: LD_INT 2
34123: ARRAY
34124: ST_TO_ADDR
// if h + 7 < height then
34125: LD_VAR 0 13
34129: PUSH
34130: LD_INT 7
34132: PLUS
34133: PUSH
34134: LD_VAR 0 15
34138: LESS
34139: IFFALSE 34168
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34141: LD_ADDR_VAR 0 18
34145: PUSH
34146: LD_INT 7
34148: PUSH
34149: LD_INT 28
34151: PUSH
34152: LD_INT 45
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: LIST
34159: PUSH
34160: LD_VAR 0 12
34164: ARRAY
34165: ST_TO_ADDR
// break ;
34166: GO 34170
// end ; end ; end ;
34168: GO 33999
34170: POP
34171: POP
// end ; if not weapon then
34172: LD_VAR 0 18
34176: NOT
34177: IFFALSE 34237
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34179: LD_ADDR_VAR 0 5
34183: PUSH
34184: LD_VAR 0 5
34188: PUSH
34189: LD_INT 11
34191: PUSH
34192: LD_INT 30
34194: PUSH
34195: LD_INT 49
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: DIFF
34203: ST_TO_ADDR
// if not list then
34204: LD_VAR 0 5
34208: NOT
34209: IFFALSE 34213
// exit ;
34211: GO 34355
// weapon := list [ rand ( 1 , list ) ] ;
34213: LD_ADDR_VAR 0 18
34217: PUSH
34218: LD_VAR 0 5
34222: PUSH
34223: LD_INT 1
34225: PPUSH
34226: LD_VAR 0 5
34230: PPUSH
34231: CALL_OW 12
34235: ARRAY
34236: ST_TO_ADDR
// end ; if weapon then
34237: LD_VAR 0 18
34241: IFFALSE 34355
// begin tmp := CostOfWeapon ( weapon ) ;
34243: LD_ADDR_VAR 0 14
34247: PUSH
34248: LD_VAR 0 18
34252: PPUSH
34253: CALL_OW 451
34257: ST_TO_ADDR
// j := GetBase ( tower ) ;
34258: LD_ADDR_VAR 0 9
34262: PUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 274
34272: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34273: LD_VAR 0 9
34277: PPUSH
34278: LD_INT 1
34280: PPUSH
34281: CALL_OW 275
34285: PUSH
34286: LD_VAR 0 14
34290: PUSH
34291: LD_INT 1
34293: ARRAY
34294: GREATEREQUAL
34295: PUSH
34296: LD_VAR 0 9
34300: PPUSH
34301: LD_INT 2
34303: PPUSH
34304: CALL_OW 275
34308: PUSH
34309: LD_VAR 0 14
34313: PUSH
34314: LD_INT 2
34316: ARRAY
34317: GREATEREQUAL
34318: AND
34319: PUSH
34320: LD_VAR 0 9
34324: PPUSH
34325: LD_INT 3
34327: PPUSH
34328: CALL_OW 275
34332: PUSH
34333: LD_VAR 0 14
34337: PUSH
34338: LD_INT 3
34340: ARRAY
34341: GREATEREQUAL
34342: AND
34343: IFFALSE 34355
// result := weapon ;
34345: LD_ADDR_VAR 0 3
34349: PUSH
34350: LD_VAR 0 18
34354: ST_TO_ADDR
// end ; end ;
34355: LD_VAR 0 3
34359: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34360: LD_INT 0
34362: PPUSH
34363: PPUSH
// result := true ;
34364: LD_ADDR_VAR 0 3
34368: PUSH
34369: LD_INT 1
34371: ST_TO_ADDR
// if array1 = array2 then
34372: LD_VAR 0 1
34376: PUSH
34377: LD_VAR 0 2
34381: EQUAL
34382: IFFALSE 34442
// begin for i = 1 to array1 do
34384: LD_ADDR_VAR 0 4
34388: PUSH
34389: DOUBLE
34390: LD_INT 1
34392: DEC
34393: ST_TO_ADDR
34394: LD_VAR 0 1
34398: PUSH
34399: FOR_TO
34400: IFFALSE 34438
// if array1 [ i ] <> array2 [ i ] then
34402: LD_VAR 0 1
34406: PUSH
34407: LD_VAR 0 4
34411: ARRAY
34412: PUSH
34413: LD_VAR 0 2
34417: PUSH
34418: LD_VAR 0 4
34422: ARRAY
34423: NONEQUAL
34424: IFFALSE 34436
// begin result := false ;
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: LD_INT 0
34433: ST_TO_ADDR
// break ;
34434: GO 34438
// end ;
34436: GO 34399
34438: POP
34439: POP
// end else
34440: GO 34450
// result := false ;
34442: LD_ADDR_VAR 0 3
34446: PUSH
34447: LD_INT 0
34449: ST_TO_ADDR
// end ;
34450: LD_VAR 0 3
34454: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34455: LD_INT 0
34457: PPUSH
34458: PPUSH
// if not array1 or not array2 then
34459: LD_VAR 0 1
34463: NOT
34464: PUSH
34465: LD_VAR 0 2
34469: NOT
34470: OR
34471: IFFALSE 34475
// exit ;
34473: GO 34539
// result := true ;
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: LD_INT 1
34482: ST_TO_ADDR
// for i = 1 to array1 do
34483: LD_ADDR_VAR 0 4
34487: PUSH
34488: DOUBLE
34489: LD_INT 1
34491: DEC
34492: ST_TO_ADDR
34493: LD_VAR 0 1
34497: PUSH
34498: FOR_TO
34499: IFFALSE 34537
// if array1 [ i ] <> array2 [ i ] then
34501: LD_VAR 0 1
34505: PUSH
34506: LD_VAR 0 4
34510: ARRAY
34511: PUSH
34512: LD_VAR 0 2
34516: PUSH
34517: LD_VAR 0 4
34521: ARRAY
34522: NONEQUAL
34523: IFFALSE 34535
// begin result := false ;
34525: LD_ADDR_VAR 0 3
34529: PUSH
34530: LD_INT 0
34532: ST_TO_ADDR
// break ;
34533: GO 34537
// end ;
34535: GO 34498
34537: POP
34538: POP
// end ;
34539: LD_VAR 0 3
34543: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34544: LD_INT 0
34546: PPUSH
34547: PPUSH
34548: PPUSH
// pom := GetBase ( fac ) ;
34549: LD_ADDR_VAR 0 5
34553: PUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 274
34563: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34564: LD_ADDR_VAR 0 4
34568: PUSH
34569: LD_VAR 0 2
34573: PUSH
34574: LD_INT 1
34576: ARRAY
34577: PPUSH
34578: LD_VAR 0 2
34582: PUSH
34583: LD_INT 2
34585: ARRAY
34586: PPUSH
34587: LD_VAR 0 2
34591: PUSH
34592: LD_INT 3
34594: ARRAY
34595: PPUSH
34596: LD_VAR 0 2
34600: PUSH
34601: LD_INT 4
34603: ARRAY
34604: PPUSH
34605: CALL_OW 449
34609: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34610: LD_ADDR_VAR 0 3
34614: PUSH
34615: LD_VAR 0 5
34619: PPUSH
34620: LD_INT 1
34622: PPUSH
34623: CALL_OW 275
34627: PUSH
34628: LD_VAR 0 4
34632: PUSH
34633: LD_INT 1
34635: ARRAY
34636: GREATEREQUAL
34637: PUSH
34638: LD_VAR 0 5
34642: PPUSH
34643: LD_INT 2
34645: PPUSH
34646: CALL_OW 275
34650: PUSH
34651: LD_VAR 0 4
34655: PUSH
34656: LD_INT 2
34658: ARRAY
34659: GREATEREQUAL
34660: AND
34661: PUSH
34662: LD_VAR 0 5
34666: PPUSH
34667: LD_INT 3
34669: PPUSH
34670: CALL_OW 275
34674: PUSH
34675: LD_VAR 0 4
34679: PUSH
34680: LD_INT 3
34682: ARRAY
34683: GREATEREQUAL
34684: AND
34685: ST_TO_ADDR
// end ;
34686: LD_VAR 0 3
34690: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34691: LD_INT 0
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
// pom := GetBase ( building ) ;
34697: LD_ADDR_VAR 0 3
34701: PUSH
34702: LD_VAR 0 1
34706: PPUSH
34707: CALL_OW 274
34711: ST_TO_ADDR
// if not pom then
34712: LD_VAR 0 3
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 34891
// btype := GetBType ( building ) ;
34721: LD_ADDR_VAR 0 5
34725: PUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 266
34735: ST_TO_ADDR
// if btype = b_armoury then
34736: LD_VAR 0 5
34740: PUSH
34741: LD_INT 4
34743: EQUAL
34744: IFFALSE 34754
// btype := b_barracks ;
34746: LD_ADDR_VAR 0 5
34750: PUSH
34751: LD_INT 5
34753: ST_TO_ADDR
// if btype = b_depot then
34754: LD_VAR 0 5
34758: PUSH
34759: LD_INT 0
34761: EQUAL
34762: IFFALSE 34772
// btype := b_warehouse ;
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: LD_INT 1
34771: ST_TO_ADDR
// if btype = b_workshop then
34772: LD_VAR 0 5
34776: PUSH
34777: LD_INT 2
34779: EQUAL
34780: IFFALSE 34790
// btype := b_factory ;
34782: LD_ADDR_VAR 0 5
34786: PUSH
34787: LD_INT 3
34789: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34790: LD_ADDR_VAR 0 4
34794: PUSH
34795: LD_VAR 0 5
34799: PPUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 248
34809: PPUSH
34810: CALL_OW 450
34814: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34815: LD_ADDR_VAR 0 2
34819: PUSH
34820: LD_VAR 0 3
34824: PPUSH
34825: LD_INT 1
34827: PPUSH
34828: CALL_OW 275
34832: PUSH
34833: LD_VAR 0 4
34837: PUSH
34838: LD_INT 1
34840: ARRAY
34841: GREATEREQUAL
34842: PUSH
34843: LD_VAR 0 3
34847: PPUSH
34848: LD_INT 2
34850: PPUSH
34851: CALL_OW 275
34855: PUSH
34856: LD_VAR 0 4
34860: PUSH
34861: LD_INT 2
34863: ARRAY
34864: GREATEREQUAL
34865: AND
34866: PUSH
34867: LD_VAR 0 3
34871: PPUSH
34872: LD_INT 3
34874: PPUSH
34875: CALL_OW 275
34879: PUSH
34880: LD_VAR 0 4
34884: PUSH
34885: LD_INT 3
34887: ARRAY
34888: GREATEREQUAL
34889: AND
34890: ST_TO_ADDR
// end ;
34891: LD_VAR 0 2
34895: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34896: LD_INT 0
34898: PPUSH
34899: PPUSH
34900: PPUSH
// pom := GetBase ( building ) ;
34901: LD_ADDR_VAR 0 4
34905: PUSH
34906: LD_VAR 0 1
34910: PPUSH
34911: CALL_OW 274
34915: ST_TO_ADDR
// if not pom then
34916: LD_VAR 0 4
34920: NOT
34921: IFFALSE 34925
// exit ;
34923: GO 35026
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34925: LD_ADDR_VAR 0 5
34929: PUSH
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_VAR 0 1
34939: PPUSH
34940: CALL_OW 248
34944: PPUSH
34945: CALL_OW 450
34949: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_VAR 0 4
34959: PPUSH
34960: LD_INT 1
34962: PPUSH
34963: CALL_OW 275
34967: PUSH
34968: LD_VAR 0 5
34972: PUSH
34973: LD_INT 1
34975: ARRAY
34976: GREATEREQUAL
34977: PUSH
34978: LD_VAR 0 4
34982: PPUSH
34983: LD_INT 2
34985: PPUSH
34986: CALL_OW 275
34990: PUSH
34991: LD_VAR 0 5
34995: PUSH
34996: LD_INT 2
34998: ARRAY
34999: GREATEREQUAL
35000: AND
35001: PUSH
35002: LD_VAR 0 4
35006: PPUSH
35007: LD_INT 3
35009: PPUSH
35010: CALL_OW 275
35014: PUSH
35015: LD_VAR 0 5
35019: PUSH
35020: LD_INT 3
35022: ARRAY
35023: GREATEREQUAL
35024: AND
35025: ST_TO_ADDR
// end ;
35026: LD_VAR 0 3
35030: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35031: LD_INT 0
35033: PPUSH
35034: PPUSH
35035: PPUSH
35036: PPUSH
35037: PPUSH
35038: PPUSH
35039: PPUSH
35040: PPUSH
35041: PPUSH
35042: PPUSH
35043: PPUSH
// result := false ;
35044: LD_ADDR_VAR 0 8
35048: PUSH
35049: LD_INT 0
35051: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35052: LD_VAR 0 5
35056: NOT
35057: PUSH
35058: LD_VAR 0 1
35062: NOT
35063: OR
35064: PUSH
35065: LD_VAR 0 2
35069: NOT
35070: OR
35071: PUSH
35072: LD_VAR 0 3
35076: NOT
35077: OR
35078: IFFALSE 35082
// exit ;
35080: GO 35896
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35082: LD_ADDR_VAR 0 14
35086: PUSH
35087: LD_VAR 0 1
35091: PPUSH
35092: LD_VAR 0 2
35096: PPUSH
35097: LD_VAR 0 3
35101: PPUSH
35102: LD_VAR 0 4
35106: PPUSH
35107: LD_VAR 0 5
35111: PUSH
35112: LD_INT 1
35114: ARRAY
35115: PPUSH
35116: CALL_OW 248
35120: PPUSH
35121: LD_INT 0
35123: PPUSH
35124: CALL 37149 0 6
35128: ST_TO_ADDR
// if not hexes then
35129: LD_VAR 0 14
35133: NOT
35134: IFFALSE 35138
// exit ;
35136: GO 35896
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35138: LD_ADDR_VAR 0 17
35142: PUSH
35143: LD_VAR 0 5
35147: PPUSH
35148: LD_INT 22
35150: PUSH
35151: LD_VAR 0 13
35155: PPUSH
35156: CALL_OW 255
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: LD_INT 30
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 30
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: LIST
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PPUSH
35197: CALL_OW 72
35201: ST_TO_ADDR
// for i = 1 to hexes do
35202: LD_ADDR_VAR 0 9
35206: PUSH
35207: DOUBLE
35208: LD_INT 1
35210: DEC
35211: ST_TO_ADDR
35212: LD_VAR 0 14
35216: PUSH
35217: FOR_TO
35218: IFFALSE 35894
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35220: LD_ADDR_VAR 0 13
35224: PUSH
35225: LD_VAR 0 14
35229: PUSH
35230: LD_VAR 0 9
35234: ARRAY
35235: PUSH
35236: LD_INT 1
35238: ARRAY
35239: PPUSH
35240: LD_VAR 0 14
35244: PUSH
35245: LD_VAR 0 9
35249: ARRAY
35250: PUSH
35251: LD_INT 2
35253: ARRAY
35254: PPUSH
35255: CALL_OW 428
35259: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35260: LD_VAR 0 14
35264: PUSH
35265: LD_VAR 0 9
35269: ARRAY
35270: PUSH
35271: LD_INT 1
35273: ARRAY
35274: PPUSH
35275: LD_VAR 0 14
35279: PUSH
35280: LD_VAR 0 9
35284: ARRAY
35285: PUSH
35286: LD_INT 2
35288: ARRAY
35289: PPUSH
35290: CALL_OW 351
35294: PUSH
35295: LD_VAR 0 14
35299: PUSH
35300: LD_VAR 0 9
35304: ARRAY
35305: PUSH
35306: LD_INT 1
35308: ARRAY
35309: PPUSH
35310: LD_VAR 0 14
35314: PUSH
35315: LD_VAR 0 9
35319: ARRAY
35320: PUSH
35321: LD_INT 2
35323: ARRAY
35324: PPUSH
35325: CALL_OW 488
35329: NOT
35330: OR
35331: PUSH
35332: LD_VAR 0 13
35336: PPUSH
35337: CALL_OW 247
35341: PUSH
35342: LD_INT 3
35344: EQUAL
35345: OR
35346: IFFALSE 35352
// exit ;
35348: POP
35349: POP
35350: GO 35896
// if not tmp then
35352: LD_VAR 0 13
35356: NOT
35357: IFFALSE 35361
// continue ;
35359: GO 35217
// result := true ;
35361: LD_ADDR_VAR 0 8
35365: PUSH
35366: LD_INT 1
35368: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35369: LD_VAR 0 6
35373: PUSH
35374: LD_VAR 0 13
35378: PPUSH
35379: CALL_OW 247
35383: PUSH
35384: LD_INT 2
35386: EQUAL
35387: AND
35388: PUSH
35389: LD_VAR 0 13
35393: PPUSH
35394: CALL_OW 263
35398: PUSH
35399: LD_INT 1
35401: EQUAL
35402: AND
35403: IFFALSE 35567
// begin if IsDrivenBy ( tmp ) then
35405: LD_VAR 0 13
35409: PPUSH
35410: CALL_OW 311
35414: IFFALSE 35418
// continue ;
35416: GO 35217
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35418: LD_VAR 0 6
35422: PPUSH
35423: LD_INT 3
35425: PUSH
35426: LD_INT 60
35428: PUSH
35429: EMPTY
35430: LIST
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 55
35441: PUSH
35442: EMPTY
35443: LIST
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PPUSH
35453: CALL_OW 72
35457: IFFALSE 35565
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35459: LD_ADDR_VAR 0 18
35463: PUSH
35464: LD_VAR 0 6
35468: PPUSH
35469: LD_INT 3
35471: PUSH
35472: LD_INT 60
35474: PUSH
35475: EMPTY
35476: LIST
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 3
35484: PUSH
35485: LD_INT 55
35487: PUSH
35488: EMPTY
35489: LIST
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 72
35503: PUSH
35504: LD_INT 1
35506: ARRAY
35507: ST_TO_ADDR
// if IsInUnit ( driver ) then
35508: LD_VAR 0 18
35512: PPUSH
35513: CALL_OW 310
35517: IFFALSE 35528
// ComExit ( driver ) ;
35519: LD_VAR 0 18
35523: PPUSH
35524: CALL 60950 0 1
// AddComEnterUnit ( driver , tmp ) ;
35528: LD_VAR 0 18
35532: PPUSH
35533: LD_VAR 0 13
35537: PPUSH
35538: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35542: LD_VAR 0 18
35546: PPUSH
35547: LD_VAR 0 7
35551: PPUSH
35552: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35556: LD_VAR 0 18
35560: PPUSH
35561: CALL_OW 181
// end ; continue ;
35565: GO 35217
// end ; if not cleaners or not tmp in cleaners then
35567: LD_VAR 0 6
35571: NOT
35572: PUSH
35573: LD_VAR 0 13
35577: PUSH
35578: LD_VAR 0 6
35582: IN
35583: NOT
35584: OR
35585: IFFALSE 35892
// begin if dep then
35587: LD_VAR 0 17
35591: IFFALSE 35727
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35593: LD_ADDR_VAR 0 16
35597: PUSH
35598: LD_VAR 0 17
35602: PUSH
35603: LD_INT 1
35605: ARRAY
35606: PPUSH
35607: CALL_OW 250
35611: PPUSH
35612: LD_VAR 0 17
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: CALL_OW 254
35625: PPUSH
35626: LD_INT 5
35628: PPUSH
35629: CALL_OW 272
35633: PUSH
35634: LD_VAR 0 17
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PPUSH
35643: CALL_OW 251
35647: PPUSH
35648: LD_VAR 0 17
35652: PUSH
35653: LD_INT 1
35655: ARRAY
35656: PPUSH
35657: CALL_OW 254
35661: PPUSH
35662: LD_INT 5
35664: PPUSH
35665: CALL_OW 273
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35674: LD_VAR 0 16
35678: PUSH
35679: LD_INT 1
35681: ARRAY
35682: PPUSH
35683: LD_VAR 0 16
35687: PUSH
35688: LD_INT 2
35690: ARRAY
35691: PPUSH
35692: CALL_OW 488
35696: IFFALSE 35727
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35698: LD_VAR 0 13
35702: PPUSH
35703: LD_VAR 0 16
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: PPUSH
35712: LD_VAR 0 16
35716: PUSH
35717: LD_INT 2
35719: ARRAY
35720: PPUSH
35721: CALL_OW 111
// continue ;
35725: GO 35217
// end ; end ; r := GetDir ( tmp ) ;
35727: LD_ADDR_VAR 0 15
35731: PUSH
35732: LD_VAR 0 13
35736: PPUSH
35737: CALL_OW 254
35741: ST_TO_ADDR
// if r = 5 then
35742: LD_VAR 0 15
35746: PUSH
35747: LD_INT 5
35749: EQUAL
35750: IFFALSE 35760
// r := 0 ;
35752: LD_ADDR_VAR 0 15
35756: PUSH
35757: LD_INT 0
35759: ST_TO_ADDR
// for j = r to 5 do
35760: LD_ADDR_VAR 0 10
35764: PUSH
35765: DOUBLE
35766: LD_VAR 0 15
35770: DEC
35771: ST_TO_ADDR
35772: LD_INT 5
35774: PUSH
35775: FOR_TO
35776: IFFALSE 35890
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35778: LD_ADDR_VAR 0 11
35782: PUSH
35783: LD_VAR 0 13
35787: PPUSH
35788: CALL_OW 250
35792: PPUSH
35793: LD_VAR 0 10
35797: PPUSH
35798: LD_INT 2
35800: PPUSH
35801: CALL_OW 272
35805: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35806: LD_ADDR_VAR 0 12
35810: PUSH
35811: LD_VAR 0 13
35815: PPUSH
35816: CALL_OW 251
35820: PPUSH
35821: LD_VAR 0 10
35825: PPUSH
35826: LD_INT 2
35828: PPUSH
35829: CALL_OW 273
35833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35834: LD_VAR 0 11
35838: PPUSH
35839: LD_VAR 0 12
35843: PPUSH
35844: CALL_OW 488
35848: PUSH
35849: LD_VAR 0 11
35853: PPUSH
35854: LD_VAR 0 12
35858: PPUSH
35859: CALL_OW 428
35863: NOT
35864: AND
35865: IFFALSE 35888
// begin ComMoveXY ( tmp , _x , _y ) ;
35867: LD_VAR 0 13
35871: PPUSH
35872: LD_VAR 0 11
35876: PPUSH
35877: LD_VAR 0 12
35881: PPUSH
35882: CALL_OW 111
// break ;
35886: GO 35890
// end ; end ;
35888: GO 35775
35890: POP
35891: POP
// end ; end ;
35892: GO 35217
35894: POP
35895: POP
// end ;
35896: LD_VAR 0 8
35900: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35901: LD_INT 0
35903: PPUSH
// result := true ;
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_INT 1
35911: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35912: LD_VAR 0 2
35916: PUSH
35917: LD_INT 24
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35931
35923: LD_INT 33
35925: DOUBLE
35926: EQUAL
35927: IFTRUE 35931
35929: GO 35956
35931: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35932: LD_ADDR_VAR 0 3
35936: PUSH
35937: LD_INT 32
35939: PPUSH
35940: LD_VAR 0 1
35944: PPUSH
35945: CALL_OW 321
35949: PUSH
35950: LD_INT 2
35952: EQUAL
35953: ST_TO_ADDR
35954: GO 36272
35956: LD_INT 20
35958: DOUBLE
35959: EQUAL
35960: IFTRUE 35964
35962: GO 35989
35964: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35965: LD_ADDR_VAR 0 3
35969: PUSH
35970: LD_INT 6
35972: PPUSH
35973: LD_VAR 0 1
35977: PPUSH
35978: CALL_OW 321
35982: PUSH
35983: LD_INT 2
35985: EQUAL
35986: ST_TO_ADDR
35987: GO 36272
35989: LD_INT 22
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 36003
35995: LD_INT 36
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36003
36001: GO 36028
36003: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_INT 15
36011: PPUSH
36012: LD_VAR 0 1
36016: PPUSH
36017: CALL_OW 321
36021: PUSH
36022: LD_INT 2
36024: EQUAL
36025: ST_TO_ADDR
36026: GO 36272
36028: LD_INT 30
36030: DOUBLE
36031: EQUAL
36032: IFTRUE 36036
36034: GO 36061
36036: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36037: LD_ADDR_VAR 0 3
36041: PUSH
36042: LD_INT 20
36044: PPUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 321
36054: PUSH
36055: LD_INT 2
36057: EQUAL
36058: ST_TO_ADDR
36059: GO 36272
36061: LD_INT 28
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36075
36067: LD_INT 21
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36100
36075: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_INT 21
36083: PPUSH
36084: LD_VAR 0 1
36088: PPUSH
36089: CALL_OW 321
36093: PUSH
36094: LD_INT 2
36096: EQUAL
36097: ST_TO_ADDR
36098: GO 36272
36100: LD_INT 16
36102: DOUBLE
36103: EQUAL
36104: IFTRUE 36108
36106: GO 36133
36108: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36109: LD_ADDR_VAR 0 3
36113: PUSH
36114: LD_INT 84
36116: PPUSH
36117: LD_VAR 0 1
36121: PPUSH
36122: CALL_OW 321
36126: PUSH
36127: LD_INT 2
36129: EQUAL
36130: ST_TO_ADDR
36131: GO 36272
36133: LD_INT 19
36135: DOUBLE
36136: EQUAL
36137: IFTRUE 36147
36139: LD_INT 23
36141: DOUBLE
36142: EQUAL
36143: IFTRUE 36147
36145: GO 36172
36147: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36148: LD_ADDR_VAR 0 3
36152: PUSH
36153: LD_INT 83
36155: PPUSH
36156: LD_VAR 0 1
36160: PPUSH
36161: CALL_OW 321
36165: PUSH
36166: LD_INT 2
36168: EQUAL
36169: ST_TO_ADDR
36170: GO 36272
36172: LD_INT 17
36174: DOUBLE
36175: EQUAL
36176: IFTRUE 36180
36178: GO 36205
36180: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36181: LD_ADDR_VAR 0 3
36185: PUSH
36186: LD_INT 39
36188: PPUSH
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL_OW 321
36198: PUSH
36199: LD_INT 2
36201: EQUAL
36202: ST_TO_ADDR
36203: GO 36272
36205: LD_INT 18
36207: DOUBLE
36208: EQUAL
36209: IFTRUE 36213
36211: GO 36238
36213: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36214: LD_ADDR_VAR 0 3
36218: PUSH
36219: LD_INT 40
36221: PPUSH
36222: LD_VAR 0 1
36226: PPUSH
36227: CALL_OW 321
36231: PUSH
36232: LD_INT 2
36234: EQUAL
36235: ST_TO_ADDR
36236: GO 36272
36238: LD_INT 27
36240: DOUBLE
36241: EQUAL
36242: IFTRUE 36246
36244: GO 36271
36246: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36247: LD_ADDR_VAR 0 3
36251: PUSH
36252: LD_INT 35
36254: PPUSH
36255: LD_VAR 0 1
36259: PPUSH
36260: CALL_OW 321
36264: PUSH
36265: LD_INT 2
36267: EQUAL
36268: ST_TO_ADDR
36269: GO 36272
36271: POP
// end ;
36272: LD_VAR 0 3
36276: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36277: LD_INT 0
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// result := false ;
36290: LD_ADDR_VAR 0 6
36294: PUSH
36295: LD_INT 0
36297: ST_TO_ADDR
// if btype = b_depot then
36298: LD_VAR 0 2
36302: PUSH
36303: LD_INT 0
36305: EQUAL
36306: IFFALSE 36318
// begin result := true ;
36308: LD_ADDR_VAR 0 6
36312: PUSH
36313: LD_INT 1
36315: ST_TO_ADDR
// exit ;
36316: GO 37144
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36318: LD_VAR 0 1
36322: NOT
36323: PUSH
36324: LD_VAR 0 1
36328: PPUSH
36329: CALL_OW 266
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: IN
36344: NOT
36345: OR
36346: PUSH
36347: LD_VAR 0 2
36351: NOT
36352: OR
36353: PUSH
36354: LD_VAR 0 5
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 3
36370: PUSH
36371: LD_INT 4
36373: PUSH
36374: LD_INT 5
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: IN
36385: NOT
36386: OR
36387: PUSH
36388: LD_VAR 0 3
36392: PPUSH
36393: LD_VAR 0 4
36397: PPUSH
36398: CALL_OW 488
36402: NOT
36403: OR
36404: IFFALSE 36408
// exit ;
36406: GO 37144
// side := GetSide ( depot ) ;
36408: LD_ADDR_VAR 0 9
36412: PUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: CALL_OW 255
36422: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36423: LD_VAR 0 9
36427: PPUSH
36428: LD_VAR 0 2
36432: PPUSH
36433: CALL 35901 0 2
36437: NOT
36438: IFFALSE 36442
// exit ;
36440: GO 37144
// pom := GetBase ( depot ) ;
36442: LD_ADDR_VAR 0 10
36446: PUSH
36447: LD_VAR 0 1
36451: PPUSH
36452: CALL_OW 274
36456: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36457: LD_ADDR_VAR 0 11
36461: PUSH
36462: LD_VAR 0 2
36466: PPUSH
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 248
36476: PPUSH
36477: CALL_OW 450
36481: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36482: LD_VAR 0 10
36486: PPUSH
36487: LD_INT 1
36489: PPUSH
36490: CALL_OW 275
36494: PUSH
36495: LD_VAR 0 11
36499: PUSH
36500: LD_INT 1
36502: ARRAY
36503: GREATEREQUAL
36504: PUSH
36505: LD_VAR 0 10
36509: PPUSH
36510: LD_INT 2
36512: PPUSH
36513: CALL_OW 275
36517: PUSH
36518: LD_VAR 0 11
36522: PUSH
36523: LD_INT 2
36525: ARRAY
36526: GREATEREQUAL
36527: AND
36528: PUSH
36529: LD_VAR 0 10
36533: PPUSH
36534: LD_INT 3
36536: PPUSH
36537: CALL_OW 275
36541: PUSH
36542: LD_VAR 0 11
36546: PUSH
36547: LD_INT 3
36549: ARRAY
36550: GREATEREQUAL
36551: AND
36552: NOT
36553: IFFALSE 36557
// exit ;
36555: GO 37144
// if GetBType ( depot ) = b_depot then
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 266
36566: PUSH
36567: LD_INT 0
36569: EQUAL
36570: IFFALSE 36582
// dist := 28 else
36572: LD_ADDR_VAR 0 14
36576: PUSH
36577: LD_INT 28
36579: ST_TO_ADDR
36580: GO 36590
// dist := 36 ;
36582: LD_ADDR_VAR 0 14
36586: PUSH
36587: LD_INT 36
36589: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36590: LD_VAR 0 1
36594: PPUSH
36595: LD_VAR 0 3
36599: PPUSH
36600: LD_VAR 0 4
36604: PPUSH
36605: CALL_OW 297
36609: PUSH
36610: LD_VAR 0 14
36614: GREATER
36615: IFFALSE 36619
// exit ;
36617: GO 37144
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36619: LD_ADDR_VAR 0 12
36623: PUSH
36624: LD_VAR 0 2
36628: PPUSH
36629: LD_VAR 0 3
36633: PPUSH
36634: LD_VAR 0 4
36638: PPUSH
36639: LD_VAR 0 5
36643: PPUSH
36644: LD_VAR 0 1
36648: PPUSH
36649: CALL_OW 248
36653: PPUSH
36654: LD_INT 0
36656: PPUSH
36657: CALL 37149 0 6
36661: ST_TO_ADDR
// if not hexes then
36662: LD_VAR 0 12
36666: NOT
36667: IFFALSE 36671
// exit ;
36669: GO 37144
// hex := GetHexInfo ( x , y ) ;
36671: LD_ADDR_VAR 0 15
36675: PUSH
36676: LD_VAR 0 3
36680: PPUSH
36681: LD_VAR 0 4
36685: PPUSH
36686: CALL_OW 546
36690: ST_TO_ADDR
// if hex [ 1 ] then
36691: LD_VAR 0 15
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: IFFALSE 36703
// exit ;
36701: GO 37144
// height := hex [ 2 ] ;
36703: LD_ADDR_VAR 0 13
36707: PUSH
36708: LD_VAR 0 15
36712: PUSH
36713: LD_INT 2
36715: ARRAY
36716: ST_TO_ADDR
// for i = 1 to hexes do
36717: LD_ADDR_VAR 0 7
36721: PUSH
36722: DOUBLE
36723: LD_INT 1
36725: DEC
36726: ST_TO_ADDR
36727: LD_VAR 0 12
36731: PUSH
36732: FOR_TO
36733: IFFALSE 37063
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36735: LD_VAR 0 12
36739: PUSH
36740: LD_VAR 0 7
36744: ARRAY
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: PPUSH
36750: LD_VAR 0 12
36754: PUSH
36755: LD_VAR 0 7
36759: ARRAY
36760: PUSH
36761: LD_INT 2
36763: ARRAY
36764: PPUSH
36765: CALL_OW 488
36769: NOT
36770: PUSH
36771: LD_VAR 0 12
36775: PUSH
36776: LD_VAR 0 7
36780: ARRAY
36781: PUSH
36782: LD_INT 1
36784: ARRAY
36785: PPUSH
36786: LD_VAR 0 12
36790: PUSH
36791: LD_VAR 0 7
36795: ARRAY
36796: PUSH
36797: LD_INT 2
36799: ARRAY
36800: PPUSH
36801: CALL_OW 428
36805: PUSH
36806: LD_INT 0
36808: GREATER
36809: OR
36810: PUSH
36811: LD_VAR 0 12
36815: PUSH
36816: LD_VAR 0 7
36820: ARRAY
36821: PUSH
36822: LD_INT 1
36824: ARRAY
36825: PPUSH
36826: LD_VAR 0 12
36830: PUSH
36831: LD_VAR 0 7
36835: ARRAY
36836: PUSH
36837: LD_INT 2
36839: ARRAY
36840: PPUSH
36841: CALL_OW 351
36845: OR
36846: IFFALSE 36852
// exit ;
36848: POP
36849: POP
36850: GO 37144
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36852: LD_ADDR_VAR 0 8
36856: PUSH
36857: LD_VAR 0 12
36861: PUSH
36862: LD_VAR 0 7
36866: ARRAY
36867: PUSH
36868: LD_INT 1
36870: ARRAY
36871: PPUSH
36872: LD_VAR 0 12
36876: PUSH
36877: LD_VAR 0 7
36881: ARRAY
36882: PUSH
36883: LD_INT 2
36885: ARRAY
36886: PPUSH
36887: CALL_OW 546
36891: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36892: LD_VAR 0 8
36896: PUSH
36897: LD_INT 1
36899: ARRAY
36900: PUSH
36901: LD_VAR 0 8
36905: PUSH
36906: LD_INT 2
36908: ARRAY
36909: PUSH
36910: LD_VAR 0 13
36914: PUSH
36915: LD_INT 2
36917: PLUS
36918: GREATER
36919: OR
36920: PUSH
36921: LD_VAR 0 8
36925: PUSH
36926: LD_INT 2
36928: ARRAY
36929: PUSH
36930: LD_VAR 0 13
36934: PUSH
36935: LD_INT 2
36937: MINUS
36938: LESS
36939: OR
36940: PUSH
36941: LD_VAR 0 8
36945: PUSH
36946: LD_INT 3
36948: ARRAY
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 8
36955: PUSH
36956: LD_INT 9
36958: PUSH
36959: LD_INT 10
36961: PUSH
36962: LD_INT 11
36964: PUSH
36965: LD_INT 12
36967: PUSH
36968: LD_INT 13
36970: PUSH
36971: LD_INT 16
36973: PUSH
36974: LD_INT 17
36976: PUSH
36977: LD_INT 18
36979: PUSH
36980: LD_INT 19
36982: PUSH
36983: LD_INT 20
36985: PUSH
36986: LD_INT 21
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: IN
37004: NOT
37005: OR
37006: PUSH
37007: LD_VAR 0 8
37011: PUSH
37012: LD_INT 5
37014: ARRAY
37015: NOT
37016: OR
37017: PUSH
37018: LD_VAR 0 8
37022: PUSH
37023: LD_INT 6
37025: ARRAY
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: LD_INT 7
37035: PUSH
37036: LD_INT 9
37038: PUSH
37039: LD_INT 10
37041: PUSH
37042: LD_INT 11
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: IN
37053: NOT
37054: OR
37055: IFFALSE 37061
// exit ;
37057: POP
37058: POP
37059: GO 37144
// end ;
37061: GO 36732
37063: POP
37064: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37065: LD_VAR 0 9
37069: PPUSH
37070: LD_VAR 0 3
37074: PPUSH
37075: LD_VAR 0 4
37079: PPUSH
37080: LD_INT 20
37082: PPUSH
37083: CALL 29067 0 4
37087: PUSH
37088: LD_INT 4
37090: ARRAY
37091: IFFALSE 37095
// exit ;
37093: GO 37144
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37095: LD_VAR 0 2
37099: PUSH
37100: LD_INT 29
37102: PUSH
37103: LD_INT 30
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: IN
37110: PUSH
37111: LD_VAR 0 3
37115: PPUSH
37116: LD_VAR 0 4
37120: PPUSH
37121: LD_VAR 0 9
37125: PPUSH
37126: CALL_OW 440
37130: NOT
37131: AND
37132: IFFALSE 37136
// exit ;
37134: GO 37144
// result := true ;
37136: LD_ADDR_VAR 0 6
37140: PUSH
37141: LD_INT 1
37143: ST_TO_ADDR
// end ;
37144: LD_VAR 0 6
37148: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37149: LD_INT 0
37151: PPUSH
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
37163: PPUSH
37164: PPUSH
37165: PPUSH
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
37173: PPUSH
37174: PPUSH
37175: PPUSH
37176: PPUSH
37177: PPUSH
37178: PPUSH
37179: PPUSH
37180: PPUSH
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
37185: PPUSH
37186: PPUSH
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
37195: PPUSH
37196: PPUSH
37197: PPUSH
37198: PPUSH
37199: PPUSH
37200: PPUSH
37201: PPUSH
37202: PPUSH
37203: PPUSH
37204: PPUSH
37205: PPUSH
37206: PPUSH
37207: PPUSH
37208: PPUSH
// result = [ ] ;
37209: LD_ADDR_VAR 0 7
37213: PUSH
37214: EMPTY
37215: ST_TO_ADDR
// temp_list = [ ] ;
37216: LD_ADDR_VAR 0 9
37220: PUSH
37221: EMPTY
37222: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37223: LD_VAR 0 4
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 3
37239: PUSH
37240: LD_INT 4
37242: PUSH
37243: LD_INT 5
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: IN
37254: NOT
37255: PUSH
37256: LD_VAR 0 1
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: IN
37271: PUSH
37272: LD_VAR 0 5
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: IN
37291: NOT
37292: AND
37293: OR
37294: IFFALSE 37298
// exit ;
37296: GO 55689
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37298: LD_VAR 0 1
37302: PUSH
37303: LD_INT 6
37305: PUSH
37306: LD_INT 7
37308: PUSH
37309: LD_INT 8
37311: PUSH
37312: LD_INT 13
37314: PUSH
37315: LD_INT 12
37317: PUSH
37318: LD_INT 15
37320: PUSH
37321: LD_INT 11
37323: PUSH
37324: LD_INT 14
37326: PUSH
37327: LD_INT 10
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: IN
37341: IFFALSE 37351
// btype = b_lab ;
37343: LD_ADDR_VAR 0 1
37347: PUSH
37348: LD_INT 6
37350: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37351: LD_VAR 0 6
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: IN
37370: NOT
37371: PUSH
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: LD_INT 3
37388: PUSH
37389: LD_INT 6
37391: PUSH
37392: LD_INT 36
37394: PUSH
37395: LD_INT 4
37397: PUSH
37398: LD_INT 5
37400: PUSH
37401: LD_INT 31
37403: PUSH
37404: LD_INT 32
37406: PUSH
37407: LD_INT 33
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: IN
37423: NOT
37424: PUSH
37425: LD_VAR 0 6
37429: PUSH
37430: LD_INT 1
37432: EQUAL
37433: AND
37434: OR
37435: PUSH
37436: LD_VAR 0 1
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: IN
37451: NOT
37452: PUSH
37453: LD_VAR 0 6
37457: PUSH
37458: LD_INT 2
37460: EQUAL
37461: AND
37462: OR
37463: IFFALSE 37473
// mode = 0 ;
37465: LD_ADDR_VAR 0 6
37469: PUSH
37470: LD_INT 0
37472: ST_TO_ADDR
// case mode of 0 :
37473: LD_VAR 0 6
37477: PUSH
37478: LD_INT 0
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 48939
37486: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37487: LD_ADDR_VAR 0 11
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 3
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37680: LD_ADDR_VAR 0 12
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 3
37837: NEG
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37876: LD_ADDR_VAR 0 13
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: LD_INT 1
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: NEG
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: LD_INT 3
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: LD_INT 3
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38075: LD_ADDR_VAR 0 14
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 0
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: LD_INT 2
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 3
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 1
38244: PUSH
38245: LD_INT 2
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38271: LD_ADDR_VAR 0 15
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 3
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38464: LD_ADDR_VAR 0 16
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 2
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: NEG
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38657: LD_ADDR_VAR 0 17
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: NEG
38834: PUSH
38835: LD_INT 0
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38887: LD_ADDR_VAR 0 18
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 2
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: LD_INT 2
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39117: LD_ADDR_VAR 0 19
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39347: LD_ADDR_VAR 0 20
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39577: LD_ADDR_VAR 0 21
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39807: LD_ADDR_VAR 0 22
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40037: LD_ADDR_VAR 0 23
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 1
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 2
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: NEG
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: LD_INT 3
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 3
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 2
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40317: LD_ADDR_VAR 0 24
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 2
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: LD_INT 2
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40593: LD_ADDR_VAR 0 25
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 3
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40867: LD_ADDR_VAR 0 26
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 2
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: LD_INT 2
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41143: LD_ADDR_VAR 0 27
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 3
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41423: LD_ADDR_VAR 0 28
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 1
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 3
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 3
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: NEG
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41705: LD_ADDR_VAR 0 29
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: LD_INT 3
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 3
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41984: LD_ADDR_VAR 0 30
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 3
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: NEG
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42262: LD_ADDR_VAR 0 31
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 2
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: NEG
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: LD_INT 3
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 3
42505: NEG
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42540: LD_ADDR_VAR 0 32
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: LD_INT 2
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 2
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 2
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 3
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 3
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 2
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 3
42783: NEG
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42818: LD_ADDR_VAR 0 33
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 0
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: NEG
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 2
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 3
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43097: LD_ADDR_VAR 0 34
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 2
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: LD_INT 2
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 3
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 2
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 3
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 3
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43377: LD_ADDR_VAR 0 35
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43489: LD_ADDR_VAR 0 36
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43601: LD_ADDR_VAR 0 37
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43713: LD_ADDR_VAR 0 38
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 1
43786: NEG
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43825: LD_ADDR_VAR 0 39
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43937: LD_ADDR_VAR 0 40
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44049: LD_ADDR_VAR 0 41
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: LD_INT 3
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 3
44323: NEG
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 3
44346: NEG
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44399: LD_ADDR_VAR 0 42
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: NEG
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: LD_INT 3
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: LD_INT 3
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 3
44696: NEG
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 3
44708: NEG
44709: PUSH
44710: LD_INT 3
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44749: LD_ADDR_VAR 0 43
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: LD_INT 1
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: LD_INT 3
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45097: LD_ADDR_VAR 0 44
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: LD_INT 3
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 3
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: NEG
45407: PUSH
45408: LD_INT 3
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45447: LD_ADDR_VAR 0 45
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 0
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 3
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 3
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 3
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: LD_INT 3
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 3
45744: NEG
45745: PUSH
45746: LD_INT 2
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: NEG
45757: PUSH
45758: LD_INT 3
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45797: LD_ADDR_VAR 0 46
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 3
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 3
46041: PUSH
46042: LD_INT 1
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 3
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 3
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: NEG
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46145: LD_ADDR_VAR 0 47
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46296: LD_ADDR_VAR 0 48
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46443: LD_ADDR_VAR 0 49
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46587: LD_ADDR_VAR 0 50
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 0
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46731: LD_ADDR_VAR 0 51
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: NEG
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46878: LD_ADDR_VAR 0 52
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 2
46982: NEG
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 2
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47029: LD_ADDR_VAR 0 53
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 2
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 2
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47259: LD_ADDR_VAR 0 54
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47489: LD_ADDR_VAR 0 55
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 0
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47719: LD_ADDR_VAR 0 56
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 2
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: NEG
47919: PUSH
47920: LD_INT 2
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47949: LD_ADDR_VAR 0 57
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: NEG
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: LD_INT 2
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 2
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 2
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48179: LD_ADDR_VAR 0 58
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48409: LD_ADDR_VAR 0 59
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48497: LD_ADDR_VAR 0 60
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48585: LD_ADDR_VAR 0 61
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48673: LD_ADDR_VAR 0 62
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48761: LD_ADDR_VAR 0 63
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48849: LD_ADDR_VAR 0 64
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 0
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: ST_TO_ADDR
// end ; 1 :
48937: GO 54834
48939: LD_INT 1
48941: DOUBLE
48942: EQUAL
48943: IFTRUE 48947
48945: GO 51570
48947: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48948: LD_ADDR_VAR 0 11
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 3
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48992: LD_ADDR_VAR 0 12
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 3
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49033: LD_ADDR_VAR 0 13
49037: PUSH
49038: LD_INT 3
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49073: LD_ADDR_VAR 0 14
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 3
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49114: LD_ADDR_VAR 0 15
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: NEG
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49158: LD_ADDR_VAR 0 16
49162: PUSH
49163: LD_INT 2
49165: NEG
49166: PUSH
49167: LD_INT 3
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 3
49177: NEG
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 3
49189: NEG
49190: PUSH
49191: LD_INT 3
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: LIST
49203: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49204: LD_ADDR_VAR 0 17
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49248: LD_ADDR_VAR 0 18
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49289: LD_ADDR_VAR 0 19
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49329: LD_ADDR_VAR 0 20
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49370: LD_ADDR_VAR 0 21
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49414: LD_ADDR_VAR 0 22
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 3
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49460: LD_ADDR_VAR 0 23
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 4
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49504: LD_ADDR_VAR 0 24
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 4
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49545: LD_ADDR_VAR 0 25
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 4
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: LD_INT 4
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49585: LD_ADDR_VAR 0 26
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 4
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49626: LD_ADDR_VAR 0 27
49630: PUSH
49631: LD_INT 3
49633: NEG
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 4
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49670: LD_ADDR_VAR 0 28
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 4
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 4
49701: NEG
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49716: LD_ADDR_VAR 0 29
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 4
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 4
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 3
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 5
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 5
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 4
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: LD_INT 6
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 6
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 5
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49871: LD_ADDR_VAR 0 30
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 3
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 3
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 4
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 4
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 5
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 5
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 5
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 6
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 6
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50014: LD_ADDR_VAR 0 31
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 2
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: PUSH
50032: LD_INT 3
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 4
50061: PUSH
50062: LD_INT 4
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: LD_INT 4
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 5
50081: PUSH
50082: LD_INT 4
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 5
50091: PUSH
50092: LD_INT 5
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: PUSH
50102: LD_INT 5
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 6
50111: PUSH
50112: LD_INT 5
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 6
50121: PUSH
50122: LD_INT 6
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 5
50131: PUSH
50132: LD_INT 6
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50153: LD_ADDR_VAR 0 32
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: NEG
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 4
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 4
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 5
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 5
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 4
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 6
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 6
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 5
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50296: LD_ADDR_VAR 0 33
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: NEG
50338: PUSH
50339: LD_INT 1
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 4
50348: NEG
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 4
50359: NEG
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 4
50371: NEG
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 5
50382: NEG
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 5
50393: NEG
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 5
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 6
50416: NEG
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 6
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50451: LD_ADDR_VAR 0 34
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 3
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 4
50506: NEG
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 4
50518: NEG
50519: PUSH
50520: LD_INT 4
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 4
50530: NEG
50531: PUSH
50532: LD_INT 5
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 5
50542: NEG
50543: PUSH
50544: LD_INT 4
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: LD_INT 5
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 5
50566: NEG
50567: PUSH
50568: LD_INT 6
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 6
50578: NEG
50579: PUSH
50580: LD_INT 5
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 6
50590: NEG
50591: PUSH
50592: LD_INT 6
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50614: LD_ADDR_VAR 0 41
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50658: LD_ADDR_VAR 0 42
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 1
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50699: LD_ADDR_VAR 0 43
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50739: LD_ADDR_VAR 0 44
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50780: LD_ADDR_VAR 0 45
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50824: LD_ADDR_VAR 0 46
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: LD_INT 3
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50870: LD_ADDR_VAR 0 47
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50903: LD_ADDR_VAR 0 48
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50934: LD_ADDR_VAR 0 49
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50963: LD_ADDR_VAR 0 50
50967: PUSH
50968: LD_INT 2
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50992: LD_ADDR_VAR 0 51
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51023: LD_ADDR_VAR 0 52
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51056: LD_ADDR_VAR 0 53
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 3
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51100: LD_ADDR_VAR 0 54
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 3
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51141: LD_ADDR_VAR 0 55
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51181: LD_ADDR_VAR 0 56
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: NEG
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: LIST
51221: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51222: LD_ADDR_VAR 0 57
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: LIST
51265: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51266: LD_ADDR_VAR 0 58
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: NEG
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51312: LD_ADDR_VAR 0 59
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 1
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51356: LD_ADDR_VAR 0 60
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51397: LD_ADDR_VAR 0 61
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 2
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51437: LD_ADDR_VAR 0 62
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51478: LD_ADDR_VAR 0 63
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51522: LD_ADDR_VAR 0 64
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: ST_TO_ADDR
// end ; 2 :
51568: GO 54834
51570: LD_INT 2
51572: DOUBLE
51573: EQUAL
51574: IFTRUE 51578
51576: GO 54833
51578: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51579: LD_ADDR_VAR 0 29
51583: PUSH
51584: LD_INT 4
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 4
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 5
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 4
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 4
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 4
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: LD_INT 4
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 3
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 4
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 5
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 4
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 3
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: LD_INT 5
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 3
51862: NEG
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 4
51929: NEG
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: NEG
51942: PUSH
51943: LD_INT 2
51945: NEG
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 2
51953: NEG
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 4
51964: NEG
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 4
51976: NEG
51977: PUSH
51978: LD_INT 5
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 4
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: LD_INT 3
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 5
52024: NEG
52025: PUSH
52026: LD_INT 4
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 5
52036: NEG
52037: PUSH
52038: LD_INT 5
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 5
52052: NEG
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 5
52060: NEG
52061: PUSH
52062: LD_INT 3
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52117: LD_ADDR_VAR 0 30
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 4
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 4
52134: PUSH
52135: LD_INT 3
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 5
52144: PUSH
52145: LD_INT 4
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 5
52154: PUSH
52155: LD_INT 5
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 4
52164: PUSH
52165: LD_INT 5
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 4
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 5
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 3
52204: PUSH
52205: LD_INT 5
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 4
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 2
52286: PUSH
52287: LD_INT 4
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 4
52307: NEG
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 4
52318: NEG
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 4
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 5
52363: NEG
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 5
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 5
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: NEG
52422: PUSH
52423: LD_INT 4
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: NEG
52434: PUSH
52435: LD_INT 3
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 4
52469: NEG
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 4
52481: NEG
52482: PUSH
52483: LD_INT 4
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 4
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 4
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: LD_INT 4
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 3
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 4
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 5
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 3
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 5
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52664: LD_ADDR_VAR 0 31
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 4
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 5
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 4
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 5
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 3
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: NEG
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 3
52775: NEG
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 4
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 4
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 4
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: LD_INT 2
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 4
52866: NEG
52867: PUSH
52868: LD_INT 4
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 4
52878: NEG
52879: PUSH
52880: LD_INT 5
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 4
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 4
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 5
52926: NEG
52927: PUSH
52928: LD_INT 4
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 5
52938: NEG
52939: PUSH
52940: LD_INT 5
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: NEG
52951: PUSH
52952: LD_INT 5
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 5
52962: NEG
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 4
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 3
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: LD_INT 3
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 4
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 4
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 4
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 4
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 5
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 5
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53214: LD_ADDR_VAR 0 32
53218: PUSH
53219: LD_INT 4
53221: NEG
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 4
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 3
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 4
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 5
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 5
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 5
53300: NEG
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: LD_INT 3
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: LD_INT 4
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 3
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 4
53383: NEG
53384: PUSH
53385: LD_INT 3
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 4
53395: NEG
53396: PUSH
53397: LD_INT 4
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: LD_INT 4
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 4
53419: NEG
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 4
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 5
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 4
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 3
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 4
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 5
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 5
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 3
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 4
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 4
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 5
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 5
53656: PUSH
53657: LD_INT 5
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 4
53666: PUSH
53667: LD_INT 5
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 4
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 5
53696: PUSH
53697: LD_INT 3
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 5
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53761: LD_ADDR_VAR 0 33
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: LD_INT 4
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 4
53780: NEG
53781: PUSH
53782: LD_INT 5
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 3
53792: NEG
53793: PUSH
53794: LD_INT 4
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: NEG
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 4
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 5
53828: NEG
53829: PUSH
53830: LD_INT 4
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 5
53840: NEG
53841: PUSH
53842: LD_INT 5
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 3
53852: NEG
53853: PUSH
53854: LD_INT 5
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 5
53864: NEG
53865: PUSH
53866: LD_INT 3
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 3
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 4
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 3
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 4
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 4
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 4
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 5
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 5
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 3
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 5
54061: PUSH
54062: LD_INT 2
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: LD_INT 3
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 4
54091: PUSH
54092: LD_INT 3
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: PUSH
54102: LD_INT 4
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: LD_INT 4
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 4
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 4
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 5
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 4
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 5
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54299: LD_ADDR_VAR 0 34
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 4
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 5
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 4
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 3
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 4
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 5
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: LD_INT 3
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: LD_INT 5
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 3
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 4
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 4
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: LD_INT 4
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 4
54511: PUSH
54512: LD_INT 3
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 4
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 5
54531: PUSH
54532: LD_INT 5
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: LD_INT 5
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 4
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: LD_INT 3
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 5
54571: PUSH
54572: LD_INT 3
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: PUSH
54582: LD_INT 5
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 3
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 3
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 4
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 4
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 4
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 4
54684: NEG
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 4
54695: NEG
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 3
54707: NEG
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 4
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 5
54740: NEG
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 5
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 5
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 3
54775: NEG
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// end ; end ;
54831: GO 54834
54833: POP
// case btype of b_depot , b_warehouse :
54834: LD_VAR 0 1
54838: PUSH
54839: LD_INT 0
54841: DOUBLE
54842: EQUAL
54843: IFTRUE 54853
54845: LD_INT 1
54847: DOUBLE
54848: EQUAL
54849: IFTRUE 54853
54851: GO 55054
54853: POP
// case nation of nation_american :
54854: LD_VAR 0 5
54858: PUSH
54859: LD_INT 1
54861: DOUBLE
54862: EQUAL
54863: IFTRUE 54867
54865: GO 54923
54867: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54868: LD_ADDR_VAR 0 9
54872: PUSH
54873: LD_VAR 0 11
54877: PUSH
54878: LD_VAR 0 12
54882: PUSH
54883: LD_VAR 0 13
54887: PUSH
54888: LD_VAR 0 14
54892: PUSH
54893: LD_VAR 0 15
54897: PUSH
54898: LD_VAR 0 16
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: PUSH
54911: LD_VAR 0 4
54915: PUSH
54916: LD_INT 1
54918: PLUS
54919: ARRAY
54920: ST_TO_ADDR
54921: GO 55052
54923: LD_INT 2
54925: DOUBLE
54926: EQUAL
54927: IFTRUE 54931
54929: GO 54987
54931: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54932: LD_ADDR_VAR 0 9
54936: PUSH
54937: LD_VAR 0 17
54941: PUSH
54942: LD_VAR 0 18
54946: PUSH
54947: LD_VAR 0 19
54951: PUSH
54952: LD_VAR 0 20
54956: PUSH
54957: LD_VAR 0 21
54961: PUSH
54962: LD_VAR 0 22
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: PUSH
54975: LD_VAR 0 4
54979: PUSH
54980: LD_INT 1
54982: PLUS
54983: ARRAY
54984: ST_TO_ADDR
54985: GO 55052
54987: LD_INT 3
54989: DOUBLE
54990: EQUAL
54991: IFTRUE 54995
54993: GO 55051
54995: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54996: LD_ADDR_VAR 0 9
55000: PUSH
55001: LD_VAR 0 23
55005: PUSH
55006: LD_VAR 0 24
55010: PUSH
55011: LD_VAR 0 25
55015: PUSH
55016: LD_VAR 0 26
55020: PUSH
55021: LD_VAR 0 27
55025: PUSH
55026: LD_VAR 0 28
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: PUSH
55039: LD_VAR 0 4
55043: PUSH
55044: LD_INT 1
55046: PLUS
55047: ARRAY
55048: ST_TO_ADDR
55049: GO 55052
55051: POP
55052: GO 55607
55054: LD_INT 2
55056: DOUBLE
55057: EQUAL
55058: IFTRUE 55068
55060: LD_INT 3
55062: DOUBLE
55063: EQUAL
55064: IFTRUE 55068
55066: GO 55124
55068: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55069: LD_ADDR_VAR 0 9
55073: PUSH
55074: LD_VAR 0 29
55078: PUSH
55079: LD_VAR 0 30
55083: PUSH
55084: LD_VAR 0 31
55088: PUSH
55089: LD_VAR 0 32
55093: PUSH
55094: LD_VAR 0 33
55098: PUSH
55099: LD_VAR 0 34
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: PUSH
55112: LD_VAR 0 4
55116: PUSH
55117: LD_INT 1
55119: PLUS
55120: ARRAY
55121: ST_TO_ADDR
55122: GO 55607
55124: LD_INT 16
55126: DOUBLE
55127: EQUAL
55128: IFTRUE 55186
55130: LD_INT 17
55132: DOUBLE
55133: EQUAL
55134: IFTRUE 55186
55136: LD_INT 18
55138: DOUBLE
55139: EQUAL
55140: IFTRUE 55186
55142: LD_INT 19
55144: DOUBLE
55145: EQUAL
55146: IFTRUE 55186
55148: LD_INT 22
55150: DOUBLE
55151: EQUAL
55152: IFTRUE 55186
55154: LD_INT 20
55156: DOUBLE
55157: EQUAL
55158: IFTRUE 55186
55160: LD_INT 21
55162: DOUBLE
55163: EQUAL
55164: IFTRUE 55186
55166: LD_INT 23
55168: DOUBLE
55169: EQUAL
55170: IFTRUE 55186
55172: LD_INT 24
55174: DOUBLE
55175: EQUAL
55176: IFTRUE 55186
55178: LD_INT 25
55180: DOUBLE
55181: EQUAL
55182: IFTRUE 55186
55184: GO 55242
55186: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55187: LD_ADDR_VAR 0 9
55191: PUSH
55192: LD_VAR 0 35
55196: PUSH
55197: LD_VAR 0 36
55201: PUSH
55202: LD_VAR 0 37
55206: PUSH
55207: LD_VAR 0 38
55211: PUSH
55212: LD_VAR 0 39
55216: PUSH
55217: LD_VAR 0 40
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: PUSH
55230: LD_VAR 0 4
55234: PUSH
55235: LD_INT 1
55237: PLUS
55238: ARRAY
55239: ST_TO_ADDR
55240: GO 55607
55242: LD_INT 6
55244: DOUBLE
55245: EQUAL
55246: IFTRUE 55298
55248: LD_INT 7
55250: DOUBLE
55251: EQUAL
55252: IFTRUE 55298
55254: LD_INT 8
55256: DOUBLE
55257: EQUAL
55258: IFTRUE 55298
55260: LD_INT 13
55262: DOUBLE
55263: EQUAL
55264: IFTRUE 55298
55266: LD_INT 12
55268: DOUBLE
55269: EQUAL
55270: IFTRUE 55298
55272: LD_INT 15
55274: DOUBLE
55275: EQUAL
55276: IFTRUE 55298
55278: LD_INT 11
55280: DOUBLE
55281: EQUAL
55282: IFTRUE 55298
55284: LD_INT 14
55286: DOUBLE
55287: EQUAL
55288: IFTRUE 55298
55290: LD_INT 10
55292: DOUBLE
55293: EQUAL
55294: IFTRUE 55298
55296: GO 55354
55298: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55299: LD_ADDR_VAR 0 9
55303: PUSH
55304: LD_VAR 0 41
55308: PUSH
55309: LD_VAR 0 42
55313: PUSH
55314: LD_VAR 0 43
55318: PUSH
55319: LD_VAR 0 44
55323: PUSH
55324: LD_VAR 0 45
55328: PUSH
55329: LD_VAR 0 46
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: PUSH
55342: LD_VAR 0 4
55346: PUSH
55347: LD_INT 1
55349: PLUS
55350: ARRAY
55351: ST_TO_ADDR
55352: GO 55607
55354: LD_INT 36
55356: DOUBLE
55357: EQUAL
55358: IFTRUE 55362
55360: GO 55418
55362: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55363: LD_ADDR_VAR 0 9
55367: PUSH
55368: LD_VAR 0 47
55372: PUSH
55373: LD_VAR 0 48
55377: PUSH
55378: LD_VAR 0 49
55382: PUSH
55383: LD_VAR 0 50
55387: PUSH
55388: LD_VAR 0 51
55392: PUSH
55393: LD_VAR 0 52
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: PUSH
55406: LD_VAR 0 4
55410: PUSH
55411: LD_INT 1
55413: PLUS
55414: ARRAY
55415: ST_TO_ADDR
55416: GO 55607
55418: LD_INT 4
55420: DOUBLE
55421: EQUAL
55422: IFTRUE 55444
55424: LD_INT 5
55426: DOUBLE
55427: EQUAL
55428: IFTRUE 55444
55430: LD_INT 34
55432: DOUBLE
55433: EQUAL
55434: IFTRUE 55444
55436: LD_INT 37
55438: DOUBLE
55439: EQUAL
55440: IFTRUE 55444
55442: GO 55500
55444: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55445: LD_ADDR_VAR 0 9
55449: PUSH
55450: LD_VAR 0 53
55454: PUSH
55455: LD_VAR 0 54
55459: PUSH
55460: LD_VAR 0 55
55464: PUSH
55465: LD_VAR 0 56
55469: PUSH
55470: LD_VAR 0 57
55474: PUSH
55475: LD_VAR 0 58
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: PUSH
55488: LD_VAR 0 4
55492: PUSH
55493: LD_INT 1
55495: PLUS
55496: ARRAY
55497: ST_TO_ADDR
55498: GO 55607
55500: LD_INT 31
55502: DOUBLE
55503: EQUAL
55504: IFTRUE 55550
55506: LD_INT 32
55508: DOUBLE
55509: EQUAL
55510: IFTRUE 55550
55512: LD_INT 33
55514: DOUBLE
55515: EQUAL
55516: IFTRUE 55550
55518: LD_INT 27
55520: DOUBLE
55521: EQUAL
55522: IFTRUE 55550
55524: LD_INT 26
55526: DOUBLE
55527: EQUAL
55528: IFTRUE 55550
55530: LD_INT 28
55532: DOUBLE
55533: EQUAL
55534: IFTRUE 55550
55536: LD_INT 29
55538: DOUBLE
55539: EQUAL
55540: IFTRUE 55550
55542: LD_INT 30
55544: DOUBLE
55545: EQUAL
55546: IFTRUE 55550
55548: GO 55606
55550: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55551: LD_ADDR_VAR 0 9
55555: PUSH
55556: LD_VAR 0 59
55560: PUSH
55561: LD_VAR 0 60
55565: PUSH
55566: LD_VAR 0 61
55570: PUSH
55571: LD_VAR 0 62
55575: PUSH
55576: LD_VAR 0 63
55580: PUSH
55581: LD_VAR 0 64
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: PUSH
55594: LD_VAR 0 4
55598: PUSH
55599: LD_INT 1
55601: PLUS
55602: ARRAY
55603: ST_TO_ADDR
55604: GO 55607
55606: POP
// temp_list2 = [ ] ;
55607: LD_ADDR_VAR 0 10
55611: PUSH
55612: EMPTY
55613: ST_TO_ADDR
// for i in temp_list do
55614: LD_ADDR_VAR 0 8
55618: PUSH
55619: LD_VAR 0 9
55623: PUSH
55624: FOR_IN
55625: IFFALSE 55677
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55627: LD_ADDR_VAR 0 10
55631: PUSH
55632: LD_VAR 0 10
55636: PUSH
55637: LD_VAR 0 8
55641: PUSH
55642: LD_INT 1
55644: ARRAY
55645: PUSH
55646: LD_VAR 0 2
55650: PLUS
55651: PUSH
55652: LD_VAR 0 8
55656: PUSH
55657: LD_INT 2
55659: ARRAY
55660: PUSH
55661: LD_VAR 0 3
55665: PLUS
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: EMPTY
55672: LIST
55673: ADD
55674: ST_TO_ADDR
55675: GO 55624
55677: POP
55678: POP
// result = temp_list2 ;
55679: LD_ADDR_VAR 0 7
55683: PUSH
55684: LD_VAR 0 10
55688: ST_TO_ADDR
// end ;
55689: LD_VAR 0 7
55693: RET
// export function EnemyInRange ( unit , dist ) ; begin
55694: LD_INT 0
55696: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55697: LD_ADDR_VAR 0 3
55701: PUSH
55702: LD_VAR 0 1
55706: PPUSH
55707: CALL_OW 255
55711: PPUSH
55712: LD_VAR 0 1
55716: PPUSH
55717: CALL_OW 250
55721: PPUSH
55722: LD_VAR 0 1
55726: PPUSH
55727: CALL_OW 251
55731: PPUSH
55732: LD_VAR 0 2
55736: PPUSH
55737: CALL 29067 0 4
55741: PUSH
55742: LD_INT 4
55744: ARRAY
55745: ST_TO_ADDR
// end ;
55746: LD_VAR 0 3
55750: RET
// export function PlayerSeeMe ( unit ) ; begin
55751: LD_INT 0
55753: PPUSH
// result := See ( your_side , unit ) ;
55754: LD_ADDR_VAR 0 2
55758: PUSH
55759: LD_OWVAR 2
55763: PPUSH
55764: LD_VAR 0 1
55768: PPUSH
55769: CALL_OW 292
55773: ST_TO_ADDR
// end ;
55774: LD_VAR 0 2
55778: RET
// export function ReverseDir ( unit ) ; begin
55779: LD_INT 0
55781: PPUSH
// if not unit then
55782: LD_VAR 0 1
55786: NOT
55787: IFFALSE 55791
// exit ;
55789: GO 55814
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55791: LD_ADDR_VAR 0 2
55795: PUSH
55796: LD_VAR 0 1
55800: PPUSH
55801: CALL_OW 254
55805: PUSH
55806: LD_INT 3
55808: PLUS
55809: PUSH
55810: LD_INT 6
55812: MOD
55813: ST_TO_ADDR
// end ;
55814: LD_VAR 0 2
55818: RET
// export function ReverseArray ( array ) ; var i ; begin
55819: LD_INT 0
55821: PPUSH
55822: PPUSH
// if not array then
55823: LD_VAR 0 1
55827: NOT
55828: IFFALSE 55832
// exit ;
55830: GO 55887
// result := [ ] ;
55832: LD_ADDR_VAR 0 2
55836: PUSH
55837: EMPTY
55838: ST_TO_ADDR
// for i := array downto 1 do
55839: LD_ADDR_VAR 0 3
55843: PUSH
55844: DOUBLE
55845: LD_VAR 0 1
55849: INC
55850: ST_TO_ADDR
55851: LD_INT 1
55853: PUSH
55854: FOR_DOWNTO
55855: IFFALSE 55885
// result := Join ( result , array [ i ] ) ;
55857: LD_ADDR_VAR 0 2
55861: PUSH
55862: LD_VAR 0 2
55866: PPUSH
55867: LD_VAR 0 1
55871: PUSH
55872: LD_VAR 0 3
55876: ARRAY
55877: PPUSH
55878: CALL 60552 0 2
55882: ST_TO_ADDR
55883: GO 55854
55885: POP
55886: POP
// end ;
55887: LD_VAR 0 2
55891: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55892: LD_INT 0
55894: PPUSH
55895: PPUSH
55896: PPUSH
55897: PPUSH
55898: PPUSH
55899: PPUSH
// if not unit or not hexes then
55900: LD_VAR 0 1
55904: NOT
55905: PUSH
55906: LD_VAR 0 2
55910: NOT
55911: OR
55912: IFFALSE 55916
// exit ;
55914: GO 56039
// dist := 9999 ;
55916: LD_ADDR_VAR 0 5
55920: PUSH
55921: LD_INT 9999
55923: ST_TO_ADDR
// for i = 1 to hexes do
55924: LD_ADDR_VAR 0 4
55928: PUSH
55929: DOUBLE
55930: LD_INT 1
55932: DEC
55933: ST_TO_ADDR
55934: LD_VAR 0 2
55938: PUSH
55939: FOR_TO
55940: IFFALSE 56027
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55942: LD_ADDR_VAR 0 6
55946: PUSH
55947: LD_VAR 0 1
55951: PPUSH
55952: LD_VAR 0 2
55956: PUSH
55957: LD_VAR 0 4
55961: ARRAY
55962: PUSH
55963: LD_INT 1
55965: ARRAY
55966: PPUSH
55967: LD_VAR 0 2
55971: PUSH
55972: LD_VAR 0 4
55976: ARRAY
55977: PUSH
55978: LD_INT 2
55980: ARRAY
55981: PPUSH
55982: CALL_OW 297
55986: ST_TO_ADDR
// if tdist < dist then
55987: LD_VAR 0 6
55991: PUSH
55992: LD_VAR 0 5
55996: LESS
55997: IFFALSE 56025
// begin hex := hexes [ i ] ;
55999: LD_ADDR_VAR 0 8
56003: PUSH
56004: LD_VAR 0 2
56008: PUSH
56009: LD_VAR 0 4
56013: ARRAY
56014: ST_TO_ADDR
// dist := tdist ;
56015: LD_ADDR_VAR 0 5
56019: PUSH
56020: LD_VAR 0 6
56024: ST_TO_ADDR
// end ; end ;
56025: GO 55939
56027: POP
56028: POP
// result := hex ;
56029: LD_ADDR_VAR 0 3
56033: PUSH
56034: LD_VAR 0 8
56038: ST_TO_ADDR
// end ;
56039: LD_VAR 0 3
56043: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56044: LD_INT 0
56046: PPUSH
56047: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56048: LD_VAR 0 1
56052: NOT
56053: PUSH
56054: LD_VAR 0 1
56058: PUSH
56059: LD_INT 21
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 23
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PPUSH
56083: CALL_OW 69
56087: IN
56088: NOT
56089: OR
56090: IFFALSE 56094
// exit ;
56092: GO 56141
// for i = 1 to 3 do
56094: LD_ADDR_VAR 0 3
56098: PUSH
56099: DOUBLE
56100: LD_INT 1
56102: DEC
56103: ST_TO_ADDR
56104: LD_INT 3
56106: PUSH
56107: FOR_TO
56108: IFFALSE 56139
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56110: LD_VAR 0 1
56114: PPUSH
56115: CALL_OW 250
56119: PPUSH
56120: LD_VAR 0 1
56124: PPUSH
56125: CALL_OW 251
56129: PPUSH
56130: LD_INT 1
56132: PPUSH
56133: CALL_OW 453
56137: GO 56107
56139: POP
56140: POP
// end ;
56141: LD_VAR 0 2
56145: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56146: LD_INT 0
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
56152: PPUSH
56153: PPUSH
// if not unit or not enemy_unit then
56154: LD_VAR 0 1
56158: NOT
56159: PUSH
56160: LD_VAR 0 2
56164: NOT
56165: OR
56166: IFFALSE 56170
// exit ;
56168: GO 56637
// if GetLives ( i ) < 250 then
56170: LD_VAR 0 4
56174: PPUSH
56175: CALL_OW 256
56179: PUSH
56180: LD_INT 250
56182: LESS
56183: IFFALSE 56196
// begin ComAutodestruct ( i ) ;
56185: LD_VAR 0 4
56189: PPUSH
56190: CALL 56044 0 1
// exit ;
56194: GO 56637
// end ; x := GetX ( enemy_unit ) ;
56196: LD_ADDR_VAR 0 7
56200: PUSH
56201: LD_VAR 0 2
56205: PPUSH
56206: CALL_OW 250
56210: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56211: LD_ADDR_VAR 0 8
56215: PUSH
56216: LD_VAR 0 2
56220: PPUSH
56221: CALL_OW 251
56225: ST_TO_ADDR
// if not x or not y then
56226: LD_VAR 0 7
56230: NOT
56231: PUSH
56232: LD_VAR 0 8
56236: NOT
56237: OR
56238: IFFALSE 56242
// exit ;
56240: GO 56637
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56242: LD_ADDR_VAR 0 6
56246: PUSH
56247: LD_VAR 0 7
56251: PPUSH
56252: LD_INT 0
56254: PPUSH
56255: LD_INT 4
56257: PPUSH
56258: CALL_OW 272
56262: PUSH
56263: LD_VAR 0 8
56267: PPUSH
56268: LD_INT 0
56270: PPUSH
56271: LD_INT 4
56273: PPUSH
56274: CALL_OW 273
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_VAR 0 7
56287: PPUSH
56288: LD_INT 1
56290: PPUSH
56291: LD_INT 4
56293: PPUSH
56294: CALL_OW 272
56298: PUSH
56299: LD_VAR 0 8
56303: PPUSH
56304: LD_INT 1
56306: PPUSH
56307: LD_INT 4
56309: PPUSH
56310: CALL_OW 273
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_VAR 0 7
56323: PPUSH
56324: LD_INT 2
56326: PPUSH
56327: LD_INT 4
56329: PPUSH
56330: CALL_OW 272
56334: PUSH
56335: LD_VAR 0 8
56339: PPUSH
56340: LD_INT 2
56342: PPUSH
56343: LD_INT 4
56345: PPUSH
56346: CALL_OW 273
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_VAR 0 7
56359: PPUSH
56360: LD_INT 3
56362: PPUSH
56363: LD_INT 4
56365: PPUSH
56366: CALL_OW 272
56370: PUSH
56371: LD_VAR 0 8
56375: PPUSH
56376: LD_INT 3
56378: PPUSH
56379: LD_INT 4
56381: PPUSH
56382: CALL_OW 273
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_VAR 0 7
56395: PPUSH
56396: LD_INT 4
56398: PPUSH
56399: LD_INT 4
56401: PPUSH
56402: CALL_OW 272
56406: PUSH
56407: LD_VAR 0 8
56411: PPUSH
56412: LD_INT 4
56414: PPUSH
56415: LD_INT 4
56417: PPUSH
56418: CALL_OW 273
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_VAR 0 7
56431: PPUSH
56432: LD_INT 5
56434: PPUSH
56435: LD_INT 4
56437: PPUSH
56438: CALL_OW 272
56442: PUSH
56443: LD_VAR 0 8
56447: PPUSH
56448: LD_INT 5
56450: PPUSH
56451: LD_INT 4
56453: PPUSH
56454: CALL_OW 273
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: ST_TO_ADDR
// for i = tmp downto 1 do
56471: LD_ADDR_VAR 0 4
56475: PUSH
56476: DOUBLE
56477: LD_VAR 0 6
56481: INC
56482: ST_TO_ADDR
56483: LD_INT 1
56485: PUSH
56486: FOR_DOWNTO
56487: IFFALSE 56588
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56489: LD_VAR 0 6
56493: PUSH
56494: LD_VAR 0 4
56498: ARRAY
56499: PUSH
56500: LD_INT 1
56502: ARRAY
56503: PPUSH
56504: LD_VAR 0 6
56508: PUSH
56509: LD_VAR 0 4
56513: ARRAY
56514: PUSH
56515: LD_INT 2
56517: ARRAY
56518: PPUSH
56519: CALL_OW 488
56523: NOT
56524: PUSH
56525: LD_VAR 0 6
56529: PUSH
56530: LD_VAR 0 4
56534: ARRAY
56535: PUSH
56536: LD_INT 1
56538: ARRAY
56539: PPUSH
56540: LD_VAR 0 6
56544: PUSH
56545: LD_VAR 0 4
56549: ARRAY
56550: PUSH
56551: LD_INT 2
56553: ARRAY
56554: PPUSH
56555: CALL_OW 428
56559: PUSH
56560: LD_INT 0
56562: NONEQUAL
56563: OR
56564: IFFALSE 56586
// tmp := Delete ( tmp , i ) ;
56566: LD_ADDR_VAR 0 6
56570: PUSH
56571: LD_VAR 0 6
56575: PPUSH
56576: LD_VAR 0 4
56580: PPUSH
56581: CALL_OW 3
56585: ST_TO_ADDR
56586: GO 56486
56588: POP
56589: POP
// j := GetClosestHex ( unit , tmp ) ;
56590: LD_ADDR_VAR 0 5
56594: PUSH
56595: LD_VAR 0 1
56599: PPUSH
56600: LD_VAR 0 6
56604: PPUSH
56605: CALL 55892 0 2
56609: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56610: LD_VAR 0 1
56614: PPUSH
56615: LD_VAR 0 5
56619: PUSH
56620: LD_INT 1
56622: ARRAY
56623: PPUSH
56624: LD_VAR 0 5
56628: PUSH
56629: LD_INT 2
56631: ARRAY
56632: PPUSH
56633: CALL_OW 111
// end ;
56637: LD_VAR 0 3
56641: RET
// export function PrepareApemanSoldier ( ) ; begin
56642: LD_INT 0
56644: PPUSH
// uc_nation := 0 ;
56645: LD_ADDR_OWVAR 21
56649: PUSH
56650: LD_INT 0
56652: ST_TO_ADDR
// hc_sex := sex_male ;
56653: LD_ADDR_OWVAR 27
56657: PUSH
56658: LD_INT 1
56660: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56661: LD_ADDR_OWVAR 28
56665: PUSH
56666: LD_INT 15
56668: ST_TO_ADDR
// hc_gallery :=  ;
56669: LD_ADDR_OWVAR 33
56673: PUSH
56674: LD_STRING 
56676: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56677: LD_ADDR_OWVAR 31
56681: PUSH
56682: LD_INT 0
56684: PPUSH
56685: LD_INT 3
56687: PPUSH
56688: CALL_OW 12
56692: PUSH
56693: LD_INT 0
56695: PPUSH
56696: LD_INT 3
56698: PPUSH
56699: CALL_OW 12
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: ST_TO_ADDR
// end ;
56716: LD_VAR 0 1
56720: RET
// export function PrepareApemanEngineer ( ) ; begin
56721: LD_INT 0
56723: PPUSH
// uc_nation := 0 ;
56724: LD_ADDR_OWVAR 21
56728: PUSH
56729: LD_INT 0
56731: ST_TO_ADDR
// hc_sex := sex_male ;
56732: LD_ADDR_OWVAR 27
56736: PUSH
56737: LD_INT 1
56739: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56740: LD_ADDR_OWVAR 28
56744: PUSH
56745: LD_INT 16
56747: ST_TO_ADDR
// hc_gallery :=  ;
56748: LD_ADDR_OWVAR 33
56752: PUSH
56753: LD_STRING 
56755: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56756: LD_ADDR_OWVAR 31
56760: PUSH
56761: LD_INT 0
56763: PPUSH
56764: LD_INT 3
56766: PPUSH
56767: CALL_OW 12
56771: PUSH
56772: LD_INT 0
56774: PPUSH
56775: LD_INT 3
56777: PPUSH
56778: CALL_OW 12
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// end ;
56795: LD_VAR 0 1
56799: RET
// export function PrepareApeman ( agressivity ) ; begin
56800: LD_INT 0
56802: PPUSH
// uc_side := 0 ;
56803: LD_ADDR_OWVAR 20
56807: PUSH
56808: LD_INT 0
56810: ST_TO_ADDR
// uc_nation := 0 ;
56811: LD_ADDR_OWVAR 21
56815: PUSH
56816: LD_INT 0
56818: ST_TO_ADDR
// hc_sex := sex_male ;
56819: LD_ADDR_OWVAR 27
56823: PUSH
56824: LD_INT 1
56826: ST_TO_ADDR
// hc_class := class_apeman ;
56827: LD_ADDR_OWVAR 28
56831: PUSH
56832: LD_INT 12
56834: ST_TO_ADDR
// hc_gallery :=  ;
56835: LD_ADDR_OWVAR 33
56839: PUSH
56840: LD_STRING 
56842: ST_TO_ADDR
// if agressivity = 0 then
56843: LD_VAR 0 1
56847: PUSH
56848: LD_INT 0
56850: EQUAL
56851: IFFALSE 56863
// hc_agressivity := 0 else
56853: LD_ADDR_OWVAR 35
56857: PUSH
56858: LD_INT 0
56860: ST_TO_ADDR
56861: GO 56884
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56863: LD_ADDR_OWVAR 35
56867: PUSH
56868: LD_VAR 0 1
56872: NEG
56873: PPUSH
56874: LD_VAR 0 1
56878: PPUSH
56879: CALL_OW 12
56883: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56884: LD_ADDR_OWVAR 31
56888: PUSH
56889: LD_INT 0
56891: PPUSH
56892: LD_INT 3
56894: PPUSH
56895: CALL_OW 12
56899: PUSH
56900: LD_INT 0
56902: PPUSH
56903: LD_INT 3
56905: PPUSH
56906: CALL_OW 12
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: ST_TO_ADDR
// end ;
56923: LD_VAR 0 2
56927: RET
// export function PrepareTiger ( agressivity ) ; begin
56928: LD_INT 0
56930: PPUSH
// uc_side := 0 ;
56931: LD_ADDR_OWVAR 20
56935: PUSH
56936: LD_INT 0
56938: ST_TO_ADDR
// uc_nation := 0 ;
56939: LD_ADDR_OWVAR 21
56943: PUSH
56944: LD_INT 0
56946: ST_TO_ADDR
// hc_class := class_tiger ;
56947: LD_ADDR_OWVAR 28
56951: PUSH
56952: LD_INT 14
56954: ST_TO_ADDR
// hc_gallery :=  ;
56955: LD_ADDR_OWVAR 33
56959: PUSH
56960: LD_STRING 
56962: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56963: LD_ADDR_OWVAR 35
56967: PUSH
56968: LD_VAR 0 1
56972: NEG
56973: PPUSH
56974: LD_VAR 0 1
56978: PPUSH
56979: CALL_OW 12
56983: ST_TO_ADDR
// end ;
56984: LD_VAR 0 2
56988: RET
// export function PrepareEnchidna ( ) ; begin
56989: LD_INT 0
56991: PPUSH
// uc_side := 0 ;
56992: LD_ADDR_OWVAR 20
56996: PUSH
56997: LD_INT 0
56999: ST_TO_ADDR
// uc_nation := 0 ;
57000: LD_ADDR_OWVAR 21
57004: PUSH
57005: LD_INT 0
57007: ST_TO_ADDR
// hc_class := class_baggie ;
57008: LD_ADDR_OWVAR 28
57012: PUSH
57013: LD_INT 13
57015: ST_TO_ADDR
// hc_gallery :=  ;
57016: LD_ADDR_OWVAR 33
57020: PUSH
57021: LD_STRING 
57023: ST_TO_ADDR
// end ;
57024: LD_VAR 0 1
57028: RET
// export function PrepareFrog ( ) ; begin
57029: LD_INT 0
57031: PPUSH
// uc_side := 0 ;
57032: LD_ADDR_OWVAR 20
57036: PUSH
57037: LD_INT 0
57039: ST_TO_ADDR
// uc_nation := 0 ;
57040: LD_ADDR_OWVAR 21
57044: PUSH
57045: LD_INT 0
57047: ST_TO_ADDR
// hc_class := class_frog ;
57048: LD_ADDR_OWVAR 28
57052: PUSH
57053: LD_INT 19
57055: ST_TO_ADDR
// hc_gallery :=  ;
57056: LD_ADDR_OWVAR 33
57060: PUSH
57061: LD_STRING 
57063: ST_TO_ADDR
// end ;
57064: LD_VAR 0 1
57068: RET
// export function PrepareFish ( ) ; begin
57069: LD_INT 0
57071: PPUSH
// uc_side := 0 ;
57072: LD_ADDR_OWVAR 20
57076: PUSH
57077: LD_INT 0
57079: ST_TO_ADDR
// uc_nation := 0 ;
57080: LD_ADDR_OWVAR 21
57084: PUSH
57085: LD_INT 0
57087: ST_TO_ADDR
// hc_class := class_fish ;
57088: LD_ADDR_OWVAR 28
57092: PUSH
57093: LD_INT 20
57095: ST_TO_ADDR
// hc_gallery :=  ;
57096: LD_ADDR_OWVAR 33
57100: PUSH
57101: LD_STRING 
57103: ST_TO_ADDR
// end ;
57104: LD_VAR 0 1
57108: RET
// export function PrepareBird ( ) ; begin
57109: LD_INT 0
57111: PPUSH
// uc_side := 0 ;
57112: LD_ADDR_OWVAR 20
57116: PUSH
57117: LD_INT 0
57119: ST_TO_ADDR
// uc_nation := 0 ;
57120: LD_ADDR_OWVAR 21
57124: PUSH
57125: LD_INT 0
57127: ST_TO_ADDR
// hc_class := class_phororhacos ;
57128: LD_ADDR_OWVAR 28
57132: PUSH
57133: LD_INT 18
57135: ST_TO_ADDR
// hc_gallery :=  ;
57136: LD_ADDR_OWVAR 33
57140: PUSH
57141: LD_STRING 
57143: ST_TO_ADDR
// end ;
57144: LD_VAR 0 1
57148: RET
// export function PrepareHorse ( ) ; begin
57149: LD_INT 0
57151: PPUSH
// uc_side := 0 ;
57152: LD_ADDR_OWVAR 20
57156: PUSH
57157: LD_INT 0
57159: ST_TO_ADDR
// uc_nation := 0 ;
57160: LD_ADDR_OWVAR 21
57164: PUSH
57165: LD_INT 0
57167: ST_TO_ADDR
// hc_class := class_horse ;
57168: LD_ADDR_OWVAR 28
57172: PUSH
57173: LD_INT 21
57175: ST_TO_ADDR
// hc_gallery :=  ;
57176: LD_ADDR_OWVAR 33
57180: PUSH
57181: LD_STRING 
57183: ST_TO_ADDR
// end ;
57184: LD_VAR 0 1
57188: RET
// export function PrepareMastodont ( ) ; begin
57189: LD_INT 0
57191: PPUSH
// uc_side := 0 ;
57192: LD_ADDR_OWVAR 20
57196: PUSH
57197: LD_INT 0
57199: ST_TO_ADDR
// uc_nation := 0 ;
57200: LD_ADDR_OWVAR 21
57204: PUSH
57205: LD_INT 0
57207: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57208: LD_ADDR_OWVAR 37
57212: PUSH
57213: LD_INT 31
57215: ST_TO_ADDR
// vc_control := control_rider ;
57216: LD_ADDR_OWVAR 38
57220: PUSH
57221: LD_INT 4
57223: ST_TO_ADDR
// end ;
57224: LD_VAR 0 1
57228: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57229: LD_INT 0
57231: PPUSH
57232: PPUSH
57233: PPUSH
// uc_side = 0 ;
57234: LD_ADDR_OWVAR 20
57238: PUSH
57239: LD_INT 0
57241: ST_TO_ADDR
// uc_nation = 0 ;
57242: LD_ADDR_OWVAR 21
57246: PUSH
57247: LD_INT 0
57249: ST_TO_ADDR
// InitHc_All ( ) ;
57250: CALL_OW 584
// InitVc ;
57254: CALL_OW 20
// if mastodonts then
57258: LD_VAR 0 6
57262: IFFALSE 57329
// for i = 1 to mastodonts do
57264: LD_ADDR_VAR 0 11
57268: PUSH
57269: DOUBLE
57270: LD_INT 1
57272: DEC
57273: ST_TO_ADDR
57274: LD_VAR 0 6
57278: PUSH
57279: FOR_TO
57280: IFFALSE 57327
// begin vc_chassis := 31 ;
57282: LD_ADDR_OWVAR 37
57286: PUSH
57287: LD_INT 31
57289: ST_TO_ADDR
// vc_control := control_rider ;
57290: LD_ADDR_OWVAR 38
57294: PUSH
57295: LD_INT 4
57297: ST_TO_ADDR
// animal := CreateVehicle ;
57298: LD_ADDR_VAR 0 12
57302: PUSH
57303: CALL_OW 45
57307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57308: LD_VAR 0 12
57312: PPUSH
57313: LD_VAR 0 8
57317: PPUSH
57318: LD_INT 0
57320: PPUSH
57321: CALL 59457 0 3
// end ;
57325: GO 57279
57327: POP
57328: POP
// if horses then
57329: LD_VAR 0 5
57333: IFFALSE 57400
// for i = 1 to horses do
57335: LD_ADDR_VAR 0 11
57339: PUSH
57340: DOUBLE
57341: LD_INT 1
57343: DEC
57344: ST_TO_ADDR
57345: LD_VAR 0 5
57349: PUSH
57350: FOR_TO
57351: IFFALSE 57398
// begin hc_class := 21 ;
57353: LD_ADDR_OWVAR 28
57357: PUSH
57358: LD_INT 21
57360: ST_TO_ADDR
// hc_gallery :=  ;
57361: LD_ADDR_OWVAR 33
57365: PUSH
57366: LD_STRING 
57368: ST_TO_ADDR
// animal := CreateHuman ;
57369: LD_ADDR_VAR 0 12
57373: PUSH
57374: CALL_OW 44
57378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57379: LD_VAR 0 12
57383: PPUSH
57384: LD_VAR 0 8
57388: PPUSH
57389: LD_INT 0
57391: PPUSH
57392: CALL 59457 0 3
// end ;
57396: GO 57350
57398: POP
57399: POP
// if birds then
57400: LD_VAR 0 1
57404: IFFALSE 57471
// for i = 1 to birds do
57406: LD_ADDR_VAR 0 11
57410: PUSH
57411: DOUBLE
57412: LD_INT 1
57414: DEC
57415: ST_TO_ADDR
57416: LD_VAR 0 1
57420: PUSH
57421: FOR_TO
57422: IFFALSE 57469
// begin hc_class := 18 ;
57424: LD_ADDR_OWVAR 28
57428: PUSH
57429: LD_INT 18
57431: ST_TO_ADDR
// hc_gallery =  ;
57432: LD_ADDR_OWVAR 33
57436: PUSH
57437: LD_STRING 
57439: ST_TO_ADDR
// animal := CreateHuman ;
57440: LD_ADDR_VAR 0 12
57444: PUSH
57445: CALL_OW 44
57449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57450: LD_VAR 0 12
57454: PPUSH
57455: LD_VAR 0 8
57459: PPUSH
57460: LD_INT 0
57462: PPUSH
57463: CALL 59457 0 3
// end ;
57467: GO 57421
57469: POP
57470: POP
// if tigers then
57471: LD_VAR 0 2
57475: IFFALSE 57559
// for i = 1 to tigers do
57477: LD_ADDR_VAR 0 11
57481: PUSH
57482: DOUBLE
57483: LD_INT 1
57485: DEC
57486: ST_TO_ADDR
57487: LD_VAR 0 2
57491: PUSH
57492: FOR_TO
57493: IFFALSE 57557
// begin hc_class = class_tiger ;
57495: LD_ADDR_OWVAR 28
57499: PUSH
57500: LD_INT 14
57502: ST_TO_ADDR
// hc_gallery =  ;
57503: LD_ADDR_OWVAR 33
57507: PUSH
57508: LD_STRING 
57510: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57511: LD_ADDR_OWVAR 35
57515: PUSH
57516: LD_INT 7
57518: NEG
57519: PPUSH
57520: LD_INT 7
57522: PPUSH
57523: CALL_OW 12
57527: ST_TO_ADDR
// animal := CreateHuman ;
57528: LD_ADDR_VAR 0 12
57532: PUSH
57533: CALL_OW 44
57537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57538: LD_VAR 0 12
57542: PPUSH
57543: LD_VAR 0 8
57547: PPUSH
57548: LD_INT 0
57550: PPUSH
57551: CALL 59457 0 3
// end ;
57555: GO 57492
57557: POP
57558: POP
// if apemans then
57559: LD_VAR 0 3
57563: IFFALSE 57686
// for i = 1 to apemans do
57565: LD_ADDR_VAR 0 11
57569: PUSH
57570: DOUBLE
57571: LD_INT 1
57573: DEC
57574: ST_TO_ADDR
57575: LD_VAR 0 3
57579: PUSH
57580: FOR_TO
57581: IFFALSE 57684
// begin hc_class = class_apeman ;
57583: LD_ADDR_OWVAR 28
57587: PUSH
57588: LD_INT 12
57590: ST_TO_ADDR
// hc_gallery =  ;
57591: LD_ADDR_OWVAR 33
57595: PUSH
57596: LD_STRING 
57598: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57599: LD_ADDR_OWVAR 35
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PPUSH
57608: LD_INT 2
57610: PPUSH
57611: CALL_OW 12
57615: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57616: LD_ADDR_OWVAR 31
57620: PUSH
57621: LD_INT 1
57623: PPUSH
57624: LD_INT 3
57626: PPUSH
57627: CALL_OW 12
57631: PUSH
57632: LD_INT 1
57634: PPUSH
57635: LD_INT 3
57637: PPUSH
57638: CALL_OW 12
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: ST_TO_ADDR
// animal := CreateHuman ;
57655: LD_ADDR_VAR 0 12
57659: PUSH
57660: CALL_OW 44
57664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57665: LD_VAR 0 12
57669: PPUSH
57670: LD_VAR 0 8
57674: PPUSH
57675: LD_INT 0
57677: PPUSH
57678: CALL 59457 0 3
// end ;
57682: GO 57580
57684: POP
57685: POP
// if enchidnas then
57686: LD_VAR 0 4
57690: IFFALSE 57757
// for i = 1 to enchidnas do
57692: LD_ADDR_VAR 0 11
57696: PUSH
57697: DOUBLE
57698: LD_INT 1
57700: DEC
57701: ST_TO_ADDR
57702: LD_VAR 0 4
57706: PUSH
57707: FOR_TO
57708: IFFALSE 57755
// begin hc_class = 13 ;
57710: LD_ADDR_OWVAR 28
57714: PUSH
57715: LD_INT 13
57717: ST_TO_ADDR
// hc_gallery =  ;
57718: LD_ADDR_OWVAR 33
57722: PUSH
57723: LD_STRING 
57725: ST_TO_ADDR
// animal := CreateHuman ;
57726: LD_ADDR_VAR 0 12
57730: PUSH
57731: CALL_OW 44
57735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57736: LD_VAR 0 12
57740: PPUSH
57741: LD_VAR 0 8
57745: PPUSH
57746: LD_INT 0
57748: PPUSH
57749: CALL 59457 0 3
// end ;
57753: GO 57707
57755: POP
57756: POP
// if fishes then
57757: LD_VAR 0 7
57761: IFFALSE 57828
// for i = 1 to fishes do
57763: LD_ADDR_VAR 0 11
57767: PUSH
57768: DOUBLE
57769: LD_INT 1
57771: DEC
57772: ST_TO_ADDR
57773: LD_VAR 0 7
57777: PUSH
57778: FOR_TO
57779: IFFALSE 57826
// begin hc_class = 20 ;
57781: LD_ADDR_OWVAR 28
57785: PUSH
57786: LD_INT 20
57788: ST_TO_ADDR
// hc_gallery =  ;
57789: LD_ADDR_OWVAR 33
57793: PUSH
57794: LD_STRING 
57796: ST_TO_ADDR
// animal := CreateHuman ;
57797: LD_ADDR_VAR 0 12
57801: PUSH
57802: CALL_OW 44
57806: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57807: LD_VAR 0 12
57811: PPUSH
57812: LD_VAR 0 9
57816: PPUSH
57817: LD_INT 0
57819: PPUSH
57820: CALL 59457 0 3
// end ;
57824: GO 57778
57826: POP
57827: POP
// end ;
57828: LD_VAR 0 10
57832: RET
// export function WantHeal ( sci , unit ) ; begin
57833: LD_INT 0
57835: PPUSH
// if GetTaskList ( sci ) > 0 then
57836: LD_VAR 0 1
57840: PPUSH
57841: CALL_OW 437
57845: PUSH
57846: LD_INT 0
57848: GREATER
57849: IFFALSE 57919
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57851: LD_VAR 0 1
57855: PPUSH
57856: CALL_OW 437
57860: PUSH
57861: LD_INT 1
57863: ARRAY
57864: PUSH
57865: LD_INT 1
57867: ARRAY
57868: PUSH
57869: LD_STRING l
57871: EQUAL
57872: PUSH
57873: LD_VAR 0 1
57877: PPUSH
57878: CALL_OW 437
57882: PUSH
57883: LD_INT 1
57885: ARRAY
57886: PUSH
57887: LD_INT 4
57889: ARRAY
57890: PUSH
57891: LD_VAR 0 2
57895: EQUAL
57896: AND
57897: IFFALSE 57909
// result := true else
57899: LD_ADDR_VAR 0 3
57903: PUSH
57904: LD_INT 1
57906: ST_TO_ADDR
57907: GO 57917
// result := false ;
57909: LD_ADDR_VAR 0 3
57913: PUSH
57914: LD_INT 0
57916: ST_TO_ADDR
// end else
57917: GO 57927
// result := false ;
57919: LD_ADDR_VAR 0 3
57923: PUSH
57924: LD_INT 0
57926: ST_TO_ADDR
// end ;
57927: LD_VAR 0 3
57931: RET
// export function HealTarget ( sci ) ; begin
57932: LD_INT 0
57934: PPUSH
// if not sci then
57935: LD_VAR 0 1
57939: NOT
57940: IFFALSE 57944
// exit ;
57942: GO 58009
// result := 0 ;
57944: LD_ADDR_VAR 0 2
57948: PUSH
57949: LD_INT 0
57951: ST_TO_ADDR
// if GetTaskList ( sci ) then
57952: LD_VAR 0 1
57956: PPUSH
57957: CALL_OW 437
57961: IFFALSE 58009
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 437
57972: PUSH
57973: LD_INT 1
57975: ARRAY
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PUSH
57981: LD_STRING l
57983: EQUAL
57984: IFFALSE 58009
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57986: LD_ADDR_VAR 0 2
57990: PUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL_OW 437
58000: PUSH
58001: LD_INT 1
58003: ARRAY
58004: PUSH
58005: LD_INT 4
58007: ARRAY
58008: ST_TO_ADDR
// end ;
58009: LD_VAR 0 2
58013: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58014: LD_INT 0
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
// if not base_units then
58020: LD_VAR 0 1
58024: NOT
58025: IFFALSE 58029
// exit ;
58027: GO 58116
// result := false ;
58029: LD_ADDR_VAR 0 2
58033: PUSH
58034: LD_INT 0
58036: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58037: LD_ADDR_VAR 0 5
58041: PUSH
58042: LD_VAR 0 1
58046: PPUSH
58047: LD_INT 21
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PPUSH
58057: CALL_OW 72
58061: ST_TO_ADDR
// if not tmp then
58062: LD_VAR 0 5
58066: NOT
58067: IFFALSE 58071
// exit ;
58069: GO 58116
// for i in tmp do
58071: LD_ADDR_VAR 0 3
58075: PUSH
58076: LD_VAR 0 5
58080: PUSH
58081: FOR_IN
58082: IFFALSE 58114
// begin result := EnemyInRange ( i , 22 ) ;
58084: LD_ADDR_VAR 0 2
58088: PUSH
58089: LD_VAR 0 3
58093: PPUSH
58094: LD_INT 22
58096: PPUSH
58097: CALL 55694 0 2
58101: ST_TO_ADDR
// if result then
58102: LD_VAR 0 2
58106: IFFALSE 58112
// exit ;
58108: POP
58109: POP
58110: GO 58116
// end ;
58112: GO 58081
58114: POP
58115: POP
// end ;
58116: LD_VAR 0 2
58120: RET
// export function FilterByTag ( units , tag ) ; begin
58121: LD_INT 0
58123: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58124: LD_ADDR_VAR 0 3
58128: PUSH
58129: LD_VAR 0 1
58133: PPUSH
58134: LD_INT 120
58136: PUSH
58137: LD_VAR 0 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PPUSH
58146: CALL_OW 72
58150: ST_TO_ADDR
// end ;
58151: LD_VAR 0 3
58155: RET
// export function IsDriver ( un ) ; begin
58156: LD_INT 0
58158: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58159: LD_ADDR_VAR 0 2
58163: PUSH
58164: LD_VAR 0 1
58168: PUSH
58169: LD_INT 55
58171: PUSH
58172: EMPTY
58173: LIST
58174: PPUSH
58175: CALL_OW 69
58179: IN
58180: ST_TO_ADDR
// end ;
58181: LD_VAR 0 2
58185: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58186: LD_INT 0
58188: PPUSH
58189: PPUSH
// list := [ ] ;
58190: LD_ADDR_VAR 0 5
58194: PUSH
58195: EMPTY
58196: ST_TO_ADDR
// case d of 0 :
58197: LD_VAR 0 3
58201: PUSH
58202: LD_INT 0
58204: DOUBLE
58205: EQUAL
58206: IFTRUE 58210
58208: GO 58343
58210: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58211: LD_ADDR_VAR 0 5
58215: PUSH
58216: LD_VAR 0 1
58220: PUSH
58221: LD_INT 4
58223: MINUS
58224: PUSH
58225: LD_VAR 0 2
58229: PUSH
58230: LD_INT 4
58232: MINUS
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: PUSH
58242: LD_VAR 0 1
58246: PUSH
58247: LD_INT 3
58249: MINUS
58250: PUSH
58251: LD_VAR 0 2
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: PUSH
58264: LD_VAR 0 1
58268: PUSH
58269: LD_INT 4
58271: PLUS
58272: PUSH
58273: LD_VAR 0 2
58277: PUSH
58278: LD_INT 4
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: PUSH
58286: LD_VAR 0 1
58290: PUSH
58291: LD_INT 3
58293: PLUS
58294: PUSH
58295: LD_VAR 0 2
58299: PUSH
58300: LD_INT 3
58302: PLUS
58303: PUSH
58304: LD_INT 5
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: PUSH
58312: LD_VAR 0 1
58316: PUSH
58317: LD_VAR 0 2
58321: PUSH
58322: LD_INT 4
58324: PLUS
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// end ; 1 :
58341: GO 59041
58343: LD_INT 1
58345: DOUBLE
58346: EQUAL
58347: IFTRUE 58351
58349: GO 58484
58351: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58352: LD_ADDR_VAR 0 5
58356: PUSH
58357: LD_VAR 0 1
58361: PUSH
58362: LD_VAR 0 2
58366: PUSH
58367: LD_INT 4
58369: MINUS
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: PUSH
58379: LD_VAR 0 1
58383: PUSH
58384: LD_INT 3
58386: MINUS
58387: PUSH
58388: LD_VAR 0 2
58392: PUSH
58393: LD_INT 3
58395: MINUS
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: PUSH
58405: LD_VAR 0 1
58409: PUSH
58410: LD_INT 4
58412: MINUS
58413: PUSH
58414: LD_VAR 0 2
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: PUSH
58427: LD_VAR 0 1
58431: PUSH
58432: LD_VAR 0 2
58436: PUSH
58437: LD_INT 3
58439: PLUS
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: PUSH
58449: LD_VAR 0 1
58453: PUSH
58454: LD_INT 4
58456: PLUS
58457: PUSH
58458: LD_VAR 0 2
58462: PUSH
58463: LD_INT 4
58465: PLUS
58466: PUSH
58467: LD_INT 5
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// end ; 2 :
58482: GO 59041
58484: LD_INT 2
58486: DOUBLE
58487: EQUAL
58488: IFTRUE 58492
58490: GO 58621
58492: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58493: LD_ADDR_VAR 0 5
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_VAR 0 2
58507: PUSH
58508: LD_INT 3
58510: MINUS
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_INT 4
58527: PLUS
58528: PUSH
58529: LD_VAR 0 2
58533: PUSH
58534: LD_INT 4
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: PUSH
58542: LD_VAR 0 1
58546: PUSH
58547: LD_VAR 0 2
58551: PUSH
58552: LD_INT 4
58554: PLUS
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: PUSH
58564: LD_VAR 0 1
58568: PUSH
58569: LD_INT 3
58571: MINUS
58572: PUSH
58573: LD_VAR 0 2
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: PUSH
58586: LD_VAR 0 1
58590: PUSH
58591: LD_INT 4
58593: MINUS
58594: PUSH
58595: LD_VAR 0 2
58599: PUSH
58600: LD_INT 4
58602: MINUS
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: ST_TO_ADDR
// end ; 3 :
58619: GO 59041
58621: LD_INT 3
58623: DOUBLE
58624: EQUAL
58625: IFTRUE 58629
58627: GO 58762
58629: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58630: LD_ADDR_VAR 0 5
58634: PUSH
58635: LD_VAR 0 1
58639: PUSH
58640: LD_INT 3
58642: PLUS
58643: PUSH
58644: LD_VAR 0 2
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: PUSH
58657: LD_VAR 0 1
58661: PUSH
58662: LD_INT 4
58664: PLUS
58665: PUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_INT 4
58673: PLUS
58674: PUSH
58675: LD_INT 5
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: PUSH
58683: LD_VAR 0 1
58687: PUSH
58688: LD_INT 4
58690: MINUS
58691: PUSH
58692: LD_VAR 0 2
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: PUSH
58705: LD_VAR 0 1
58709: PUSH
58710: LD_VAR 0 2
58714: PUSH
58715: LD_INT 4
58717: MINUS
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: PUSH
58727: LD_VAR 0 1
58731: PUSH
58732: LD_INT 3
58734: MINUS
58735: PUSH
58736: LD_VAR 0 2
58740: PUSH
58741: LD_INT 3
58743: MINUS
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// end ; 4 :
58760: GO 59041
58762: LD_INT 4
58764: DOUBLE
58765: EQUAL
58766: IFTRUE 58770
58768: GO 58903
58770: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58771: LD_ADDR_VAR 0 5
58775: PUSH
58776: LD_VAR 0 1
58780: PUSH
58781: LD_VAR 0 2
58785: PUSH
58786: LD_INT 4
58788: PLUS
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: PUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_INT 3
58805: PLUS
58806: PUSH
58807: LD_VAR 0 2
58811: PUSH
58812: LD_INT 3
58814: PLUS
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: PUSH
58824: LD_VAR 0 1
58828: PUSH
58829: LD_INT 4
58831: PLUS
58832: PUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_INT 4
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: LD_VAR 0 1
58850: PUSH
58851: LD_VAR 0 2
58855: PUSH
58856: LD_INT 3
58858: MINUS
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: PUSH
58868: LD_VAR 0 1
58872: PUSH
58873: LD_INT 4
58875: MINUS
58876: PUSH
58877: LD_VAR 0 2
58881: PUSH
58882: LD_INT 4
58884: MINUS
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// end ; 5 :
58901: GO 59041
58903: LD_INT 5
58905: DOUBLE
58906: EQUAL
58907: IFTRUE 58911
58909: GO 59040
58911: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58912: LD_ADDR_VAR 0 5
58916: PUSH
58917: LD_VAR 0 1
58921: PUSH
58922: LD_INT 4
58924: MINUS
58925: PUSH
58926: LD_VAR 0 2
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: PUSH
58939: LD_VAR 0 1
58943: PUSH
58944: LD_VAR 0 2
58948: PUSH
58949: LD_INT 4
58951: MINUS
58952: PUSH
58953: LD_INT 3
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: PUSH
58961: LD_VAR 0 1
58965: PUSH
58966: LD_INT 4
58968: PLUS
58969: PUSH
58970: LD_VAR 0 2
58974: PUSH
58975: LD_INT 4
58977: PLUS
58978: PUSH
58979: LD_INT 5
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: LD_VAR 0 1
58991: PUSH
58992: LD_INT 3
58994: PLUS
58995: PUSH
58996: LD_VAR 0 2
59000: PUSH
59001: LD_INT 4
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: PUSH
59009: LD_VAR 0 1
59013: PUSH
59014: LD_VAR 0 2
59018: PUSH
59019: LD_INT 3
59021: PLUS
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// end ; end ;
59038: GO 59041
59040: POP
// result := list ;
59041: LD_ADDR_VAR 0 4
59045: PUSH
59046: LD_VAR 0 5
59050: ST_TO_ADDR
// end ;
59051: LD_VAR 0 4
59055: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59056: LD_INT 0
59058: PPUSH
59059: PPUSH
59060: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59061: LD_VAR 0 1
59065: NOT
59066: PUSH
59067: LD_VAR 0 2
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: LD_INT 4
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: IN
59090: NOT
59091: OR
59092: IFFALSE 59096
// exit ;
59094: GO 59179
// tmp := [ ] ;
59096: LD_ADDR_VAR 0 5
59100: PUSH
59101: EMPTY
59102: ST_TO_ADDR
// for i in units do
59103: LD_ADDR_VAR 0 4
59107: PUSH
59108: LD_VAR 0 1
59112: PUSH
59113: FOR_IN
59114: IFFALSE 59148
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59116: LD_ADDR_VAR 0 5
59120: PUSH
59121: LD_VAR 0 5
59125: PPUSH
59126: LD_VAR 0 4
59130: PPUSH
59131: LD_VAR 0 2
59135: PPUSH
59136: CALL_OW 259
59140: PPUSH
59141: CALL 60552 0 2
59145: ST_TO_ADDR
59146: GO 59113
59148: POP
59149: POP
// if not tmp then
59150: LD_VAR 0 5
59154: NOT
59155: IFFALSE 59159
// exit ;
59157: GO 59179
// result := SortListByListDesc ( units , tmp ) ;
59159: LD_ADDR_VAR 0 3
59163: PUSH
59164: LD_VAR 0 1
59168: PPUSH
59169: LD_VAR 0 5
59173: PPUSH
59174: CALL_OW 77
59178: ST_TO_ADDR
// end ;
59179: LD_VAR 0 3
59183: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59184: LD_INT 0
59186: PPUSH
59187: PPUSH
59188: PPUSH
// result := false ;
59189: LD_ADDR_VAR 0 3
59193: PUSH
59194: LD_INT 0
59196: ST_TO_ADDR
// if not building then
59197: LD_VAR 0 2
59201: NOT
59202: IFFALSE 59206
// exit ;
59204: GO 59344
// x := GetX ( building ) ;
59206: LD_ADDR_VAR 0 4
59210: PUSH
59211: LD_VAR 0 2
59215: PPUSH
59216: CALL_OW 250
59220: ST_TO_ADDR
// y := GetY ( building ) ;
59221: LD_ADDR_VAR 0 5
59225: PUSH
59226: LD_VAR 0 2
59230: PPUSH
59231: CALL_OW 251
59235: ST_TO_ADDR
// if not x or not y then
59236: LD_VAR 0 4
59240: NOT
59241: PUSH
59242: LD_VAR 0 5
59246: NOT
59247: OR
59248: IFFALSE 59252
// exit ;
59250: GO 59344
// if GetTaskList ( unit ) then
59252: LD_VAR 0 1
59256: PPUSH
59257: CALL_OW 437
59261: IFFALSE 59344
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59263: LD_STRING e
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 437
59275: PUSH
59276: LD_INT 1
59278: ARRAY
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: EQUAL
59284: PUSH
59285: LD_VAR 0 4
59289: PUSH
59290: LD_VAR 0 1
59294: PPUSH
59295: CALL_OW 437
59299: PUSH
59300: LD_INT 1
59302: ARRAY
59303: PUSH
59304: LD_INT 2
59306: ARRAY
59307: EQUAL
59308: AND
59309: PUSH
59310: LD_VAR 0 5
59314: PUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL_OW 437
59324: PUSH
59325: LD_INT 1
59327: ARRAY
59328: PUSH
59329: LD_INT 3
59331: ARRAY
59332: EQUAL
59333: AND
59334: IFFALSE 59344
// result := true end ;
59336: LD_ADDR_VAR 0 3
59340: PUSH
59341: LD_INT 1
59343: ST_TO_ADDR
// end ;
59344: LD_VAR 0 3
59348: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59349: LD_INT 0
59351: PPUSH
// result := false ;
59352: LD_ADDR_VAR 0 4
59356: PUSH
59357: LD_INT 0
59359: ST_TO_ADDR
// if GetTaskList ( unit ) then
59360: LD_VAR 0 1
59364: PPUSH
59365: CALL_OW 437
59369: IFFALSE 59452
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59371: LD_STRING M
59373: PUSH
59374: LD_VAR 0 1
59378: PPUSH
59379: CALL_OW 437
59383: PUSH
59384: LD_INT 1
59386: ARRAY
59387: PUSH
59388: LD_INT 1
59390: ARRAY
59391: EQUAL
59392: PUSH
59393: LD_VAR 0 2
59397: PUSH
59398: LD_VAR 0 1
59402: PPUSH
59403: CALL_OW 437
59407: PUSH
59408: LD_INT 1
59410: ARRAY
59411: PUSH
59412: LD_INT 2
59414: ARRAY
59415: EQUAL
59416: AND
59417: PUSH
59418: LD_VAR 0 3
59422: PUSH
59423: LD_VAR 0 1
59427: PPUSH
59428: CALL_OW 437
59432: PUSH
59433: LD_INT 1
59435: ARRAY
59436: PUSH
59437: LD_INT 3
59439: ARRAY
59440: EQUAL
59441: AND
59442: IFFALSE 59452
// result := true ;
59444: LD_ADDR_VAR 0 4
59448: PUSH
59449: LD_INT 1
59451: ST_TO_ADDR
// end ; end ;
59452: LD_VAR 0 4
59456: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59457: LD_INT 0
59459: PPUSH
59460: PPUSH
59461: PPUSH
59462: PPUSH
// if not unit or not area then
59463: LD_VAR 0 1
59467: NOT
59468: PUSH
59469: LD_VAR 0 2
59473: NOT
59474: OR
59475: IFFALSE 59479
// exit ;
59477: GO 59655
// tmp := AreaToList ( area , i ) ;
59479: LD_ADDR_VAR 0 6
59483: PUSH
59484: LD_VAR 0 2
59488: PPUSH
59489: LD_VAR 0 5
59493: PPUSH
59494: CALL_OW 517
59498: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59499: LD_ADDR_VAR 0 5
59503: PUSH
59504: DOUBLE
59505: LD_INT 1
59507: DEC
59508: ST_TO_ADDR
59509: LD_VAR 0 6
59513: PUSH
59514: LD_INT 1
59516: ARRAY
59517: PUSH
59518: FOR_TO
59519: IFFALSE 59653
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59521: LD_ADDR_VAR 0 7
59525: PUSH
59526: LD_VAR 0 6
59530: PUSH
59531: LD_INT 1
59533: ARRAY
59534: PUSH
59535: LD_VAR 0 5
59539: ARRAY
59540: PUSH
59541: LD_VAR 0 6
59545: PUSH
59546: LD_INT 2
59548: ARRAY
59549: PUSH
59550: LD_VAR 0 5
59554: ARRAY
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59560: LD_INT 92
59562: PUSH
59563: LD_VAR 0 7
59567: PUSH
59568: LD_INT 1
59570: ARRAY
59571: PUSH
59572: LD_VAR 0 7
59576: PUSH
59577: LD_INT 2
59579: ARRAY
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: PPUSH
59590: CALL_OW 69
59594: PUSH
59595: LD_INT 0
59597: EQUAL
59598: IFFALSE 59651
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59600: LD_VAR 0 1
59604: PPUSH
59605: LD_VAR 0 7
59609: PUSH
59610: LD_INT 1
59612: ARRAY
59613: PPUSH
59614: LD_VAR 0 7
59618: PUSH
59619: LD_INT 2
59621: ARRAY
59622: PPUSH
59623: LD_VAR 0 3
59627: PPUSH
59628: CALL_OW 48
// result := IsPlaced ( unit ) ;
59632: LD_ADDR_VAR 0 4
59636: PUSH
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL_OW 305
59646: ST_TO_ADDR
// exit ;
59647: POP
59648: POP
59649: GO 59655
// end ; end ;
59651: GO 59518
59653: POP
59654: POP
// end ;
59655: LD_VAR 0 4
59659: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59660: LD_INT 0
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not side or side > 8 then
59665: LD_VAR 0 1
59669: NOT
59670: PUSH
59671: LD_VAR 0 1
59675: PUSH
59676: LD_INT 8
59678: GREATER
59679: OR
59680: IFFALSE 59684
// exit ;
59682: GO 59871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59684: LD_ADDR_VAR 0 4
59688: PUSH
59689: LD_INT 22
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 21
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PPUSH
59715: CALL_OW 69
59719: ST_TO_ADDR
// if not tmp then
59720: LD_VAR 0 4
59724: NOT
59725: IFFALSE 59729
// exit ;
59727: GO 59871
// enable_addtolog := true ;
59729: LD_ADDR_OWVAR 81
59733: PUSH
59734: LD_INT 1
59736: ST_TO_ADDR
// AddToLog ( [ ) ;
59737: LD_STRING [
59739: PPUSH
59740: CALL_OW 561
// for i in tmp do
59744: LD_ADDR_VAR 0 3
59748: PUSH
59749: LD_VAR 0 4
59753: PUSH
59754: FOR_IN
59755: IFFALSE 59862
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59757: LD_STRING [
59759: PUSH
59760: LD_VAR 0 3
59764: PPUSH
59765: CALL_OW 266
59769: STR
59770: PUSH
59771: LD_STRING , 
59773: STR
59774: PUSH
59775: LD_VAR 0 3
59779: PPUSH
59780: CALL_OW 250
59784: STR
59785: PUSH
59786: LD_STRING , 
59788: STR
59789: PUSH
59790: LD_VAR 0 3
59794: PPUSH
59795: CALL_OW 251
59799: STR
59800: PUSH
59801: LD_STRING , 
59803: STR
59804: PUSH
59805: LD_VAR 0 3
59809: PPUSH
59810: CALL_OW 254
59814: STR
59815: PUSH
59816: LD_STRING , 
59818: STR
59819: PUSH
59820: LD_VAR 0 3
59824: PPUSH
59825: LD_INT 1
59827: PPUSH
59828: CALL_OW 268
59832: STR
59833: PUSH
59834: LD_STRING , 
59836: STR
59837: PUSH
59838: LD_VAR 0 3
59842: PPUSH
59843: LD_INT 2
59845: PPUSH
59846: CALL_OW 268
59850: STR
59851: PUSH
59852: LD_STRING ],
59854: STR
59855: PPUSH
59856: CALL_OW 561
// end ;
59860: GO 59754
59862: POP
59863: POP
// AddToLog ( ]; ) ;
59864: LD_STRING ];
59866: PPUSH
59867: CALL_OW 561
// end ;
59871: LD_VAR 0 2
59875: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59876: LD_INT 0
59878: PPUSH
59879: PPUSH
59880: PPUSH
59881: PPUSH
59882: PPUSH
// if not area or not rate or not max then
59883: LD_VAR 0 1
59887: NOT
59888: PUSH
59889: LD_VAR 0 2
59893: NOT
59894: OR
59895: PUSH
59896: LD_VAR 0 4
59900: NOT
59901: OR
59902: IFFALSE 59906
// exit ;
59904: GO 60095
// while 1 do
59906: LD_INT 1
59908: IFFALSE 60095
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59910: LD_ADDR_VAR 0 9
59914: PUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: LD_INT 1
59922: PPUSH
59923: CALL_OW 287
59927: PUSH
59928: LD_INT 10
59930: MUL
59931: ST_TO_ADDR
// r := rate / 10 ;
59932: LD_ADDR_VAR 0 7
59936: PUSH
59937: LD_VAR 0 2
59941: PUSH
59942: LD_INT 10
59944: DIVREAL
59945: ST_TO_ADDR
// time := 1 1$00 ;
59946: LD_ADDR_VAR 0 8
59950: PUSH
59951: LD_INT 2100
59953: ST_TO_ADDR
// if amount < min then
59954: LD_VAR 0 9
59958: PUSH
59959: LD_VAR 0 3
59963: LESS
59964: IFFALSE 59982
// r := r * 2 else
59966: LD_ADDR_VAR 0 7
59970: PUSH
59971: LD_VAR 0 7
59975: PUSH
59976: LD_INT 2
59978: MUL
59979: ST_TO_ADDR
59980: GO 60008
// if amount > max then
59982: LD_VAR 0 9
59986: PUSH
59987: LD_VAR 0 4
59991: GREATER
59992: IFFALSE 60008
// r := r / 2 ;
59994: LD_ADDR_VAR 0 7
59998: PUSH
59999: LD_VAR 0 7
60003: PUSH
60004: LD_INT 2
60006: DIVREAL
60007: ST_TO_ADDR
// time := time / r ;
60008: LD_ADDR_VAR 0 8
60012: PUSH
60013: LD_VAR 0 8
60017: PUSH
60018: LD_VAR 0 7
60022: DIVREAL
60023: ST_TO_ADDR
// if time < 0 then
60024: LD_VAR 0 8
60028: PUSH
60029: LD_INT 0
60031: LESS
60032: IFFALSE 60049
// time := time * - 1 ;
60034: LD_ADDR_VAR 0 8
60038: PUSH
60039: LD_VAR 0 8
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: MUL
60048: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60049: LD_VAR 0 8
60053: PUSH
60054: LD_INT 35
60056: PPUSH
60057: LD_INT 875
60059: PPUSH
60060: CALL_OW 12
60064: PLUS
60065: PPUSH
60066: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60070: LD_INT 1
60072: PPUSH
60073: LD_INT 5
60075: PPUSH
60076: CALL_OW 12
60080: PPUSH
60081: LD_VAR 0 1
60085: PPUSH
60086: LD_INT 1
60088: PPUSH
60089: CALL_OW 55
// end ;
60093: GO 59906
// end ;
60095: LD_VAR 0 5
60099: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60100: LD_INT 0
60102: PPUSH
60103: PPUSH
60104: PPUSH
60105: PPUSH
60106: PPUSH
60107: PPUSH
60108: PPUSH
60109: PPUSH
// if not turrets or not factories then
60110: LD_VAR 0 1
60114: NOT
60115: PUSH
60116: LD_VAR 0 2
60120: NOT
60121: OR
60122: IFFALSE 60126
// exit ;
60124: GO 60433
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60126: LD_ADDR_VAR 0 10
60130: PUSH
60131: LD_INT 5
60133: PUSH
60134: LD_INT 6
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 2
60143: PUSH
60144: LD_INT 4
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 24
60168: PUSH
60169: LD_INT 25
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 23
60178: PUSH
60179: LD_INT 27
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 42
60192: PUSH
60193: LD_INT 43
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 44
60202: PUSH
60203: LD_INT 46
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 45
60212: PUSH
60213: LD_INT 47
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// result := [ ] ;
60230: LD_ADDR_VAR 0 3
60234: PUSH
60235: EMPTY
60236: ST_TO_ADDR
// for i in turrets do
60237: LD_ADDR_VAR 0 4
60241: PUSH
60242: LD_VAR 0 1
60246: PUSH
60247: FOR_IN
60248: IFFALSE 60431
// begin nat := GetNation ( i ) ;
60250: LD_ADDR_VAR 0 7
60254: PUSH
60255: LD_VAR 0 4
60259: PPUSH
60260: CALL_OW 248
60264: ST_TO_ADDR
// weapon := 0 ;
60265: LD_ADDR_VAR 0 8
60269: PUSH
60270: LD_INT 0
60272: ST_TO_ADDR
// if not nat then
60273: LD_VAR 0 7
60277: NOT
60278: IFFALSE 60282
// continue ;
60280: GO 60247
// for j in list [ nat ] do
60282: LD_ADDR_VAR 0 5
60286: PUSH
60287: LD_VAR 0 10
60291: PUSH
60292: LD_VAR 0 7
60296: ARRAY
60297: PUSH
60298: FOR_IN
60299: IFFALSE 60340
// if GetBWeapon ( i ) = j [ 1 ] then
60301: LD_VAR 0 4
60305: PPUSH
60306: CALL_OW 269
60310: PUSH
60311: LD_VAR 0 5
60315: PUSH
60316: LD_INT 1
60318: ARRAY
60319: EQUAL
60320: IFFALSE 60338
// begin weapon := j [ 2 ] ;
60322: LD_ADDR_VAR 0 8
60326: PUSH
60327: LD_VAR 0 5
60331: PUSH
60332: LD_INT 2
60334: ARRAY
60335: ST_TO_ADDR
// break ;
60336: GO 60340
// end ;
60338: GO 60298
60340: POP
60341: POP
// if not weapon then
60342: LD_VAR 0 8
60346: NOT
60347: IFFALSE 60351
// continue ;
60349: GO 60247
// for k in factories do
60351: LD_ADDR_VAR 0 6
60355: PUSH
60356: LD_VAR 0 2
60360: PUSH
60361: FOR_IN
60362: IFFALSE 60427
// begin weapons := AvailableWeaponList ( k ) ;
60364: LD_ADDR_VAR 0 9
60368: PUSH
60369: LD_VAR 0 6
60373: PPUSH
60374: CALL_OW 478
60378: ST_TO_ADDR
// if not weapons then
60379: LD_VAR 0 9
60383: NOT
60384: IFFALSE 60388
// continue ;
60386: GO 60361
// if weapon in weapons then
60388: LD_VAR 0 8
60392: PUSH
60393: LD_VAR 0 9
60397: IN
60398: IFFALSE 60425
// begin result := [ i , weapon ] ;
60400: LD_ADDR_VAR 0 3
60404: PUSH
60405: LD_VAR 0 4
60409: PUSH
60410: LD_VAR 0 8
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// exit ;
60419: POP
60420: POP
60421: POP
60422: POP
60423: GO 60433
// end ; end ;
60425: GO 60361
60427: POP
60428: POP
// end ;
60429: GO 60247
60431: POP
60432: POP
// end ;
60433: LD_VAR 0 3
60437: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60438: LD_INT 0
60440: PPUSH
// if not side or side > 8 then
60441: LD_VAR 0 3
60445: NOT
60446: PUSH
60447: LD_VAR 0 3
60451: PUSH
60452: LD_INT 8
60454: GREATER
60455: OR
60456: IFFALSE 60460
// exit ;
60458: GO 60519
// if not range then
60460: LD_VAR 0 4
60464: NOT
60465: IFFALSE 60476
// range := - 12 ;
60467: LD_ADDR_VAR 0 4
60471: PUSH
60472: LD_INT 12
60474: NEG
60475: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60476: LD_VAR 0 1
60480: PPUSH
60481: LD_VAR 0 2
60485: PPUSH
60486: LD_VAR 0 3
60490: PPUSH
60491: LD_VAR 0 4
60495: PPUSH
60496: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60500: LD_VAR 0 1
60504: PPUSH
60505: LD_VAR 0 2
60509: PPUSH
60510: LD_VAR 0 3
60514: PPUSH
60515: CALL_OW 331
// end ;
60519: LD_VAR 0 5
60523: RET
// export function Video ( mode ) ; begin
60524: LD_INT 0
60526: PPUSH
// ingame_video = mode ;
60527: LD_ADDR_OWVAR 52
60531: PUSH
60532: LD_VAR 0 1
60536: ST_TO_ADDR
// interface_hidden = mode ;
60537: LD_ADDR_OWVAR 54
60541: PUSH
60542: LD_VAR 0 1
60546: ST_TO_ADDR
// end ;
60547: LD_VAR 0 2
60551: RET
// export function Join ( array , element ) ; begin
60552: LD_INT 0
60554: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60555: LD_ADDR_VAR 0 3
60559: PUSH
60560: LD_VAR 0 1
60564: PPUSH
60565: LD_VAR 0 1
60569: PUSH
60570: LD_INT 1
60572: PLUS
60573: PPUSH
60574: LD_VAR 0 2
60578: PPUSH
60579: CALL_OW 1
60583: ST_TO_ADDR
// end ;
60584: LD_VAR 0 3
60588: RET
// export function JoinUnion ( array , element ) ; begin
60589: LD_INT 0
60591: PPUSH
// result := array union element ;
60592: LD_ADDR_VAR 0 3
60596: PUSH
60597: LD_VAR 0 1
60601: PUSH
60602: LD_VAR 0 2
60606: UNION
60607: ST_TO_ADDR
// end ;
60608: LD_VAR 0 3
60612: RET
// export function GetBehemoths ( side ) ; begin
60613: LD_INT 0
60615: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60616: LD_ADDR_VAR 0 2
60620: PUSH
60621: LD_INT 22
60623: PUSH
60624: LD_VAR 0 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 31
60635: PUSH
60636: LD_INT 25
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PPUSH
60647: CALL_OW 69
60651: ST_TO_ADDR
// end ;
60652: LD_VAR 0 2
60656: RET
// export function Shuffle ( array ) ; var i , index ; begin
60657: LD_INT 0
60659: PPUSH
60660: PPUSH
60661: PPUSH
// result := [ ] ;
60662: LD_ADDR_VAR 0 2
60666: PUSH
60667: EMPTY
60668: ST_TO_ADDR
// if not array then
60669: LD_VAR 0 1
60673: NOT
60674: IFFALSE 60678
// exit ;
60676: GO 60777
// Randomize ;
60678: CALL_OW 10
// for i = array downto 1 do
60682: LD_ADDR_VAR 0 3
60686: PUSH
60687: DOUBLE
60688: LD_VAR 0 1
60692: INC
60693: ST_TO_ADDR
60694: LD_INT 1
60696: PUSH
60697: FOR_DOWNTO
60698: IFFALSE 60775
// begin index := rand ( 1 , array ) ;
60700: LD_ADDR_VAR 0 4
60704: PUSH
60705: LD_INT 1
60707: PPUSH
60708: LD_VAR 0 1
60712: PPUSH
60713: CALL_OW 12
60717: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60718: LD_ADDR_VAR 0 2
60722: PUSH
60723: LD_VAR 0 2
60727: PPUSH
60728: LD_VAR 0 2
60732: PUSH
60733: LD_INT 1
60735: PLUS
60736: PPUSH
60737: LD_VAR 0 1
60741: PUSH
60742: LD_VAR 0 4
60746: ARRAY
60747: PPUSH
60748: CALL_OW 2
60752: ST_TO_ADDR
// array := Delete ( array , index ) ;
60753: LD_ADDR_VAR 0 1
60757: PUSH
60758: LD_VAR 0 1
60762: PPUSH
60763: LD_VAR 0 4
60767: PPUSH
60768: CALL_OW 3
60772: ST_TO_ADDR
// end ;
60773: GO 60697
60775: POP
60776: POP
// end ;
60777: LD_VAR 0 2
60781: RET
// export function GetBaseMaterials ( base ) ; begin
60782: LD_INT 0
60784: PPUSH
// result := [ 0 , 0 , 0 ] ;
60785: LD_ADDR_VAR 0 2
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: ST_TO_ADDR
// if not base then
60804: LD_VAR 0 1
60808: NOT
60809: IFFALSE 60813
// exit ;
60811: GO 60862
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60813: LD_ADDR_VAR 0 2
60817: PUSH
60818: LD_VAR 0 1
60822: PPUSH
60823: LD_INT 1
60825: PPUSH
60826: CALL_OW 275
60830: PUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: LD_INT 2
60838: PPUSH
60839: CALL_OW 275
60843: PUSH
60844: LD_VAR 0 1
60848: PPUSH
60849: LD_INT 3
60851: PPUSH
60852: CALL_OW 275
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
// end ;
60862: LD_VAR 0 2
60866: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60867: LD_INT 0
60869: PPUSH
60870: PPUSH
// result := array ;
60871: LD_ADDR_VAR 0 3
60875: PUSH
60876: LD_VAR 0 1
60880: ST_TO_ADDR
// if size >= result then
60881: LD_VAR 0 2
60885: PUSH
60886: LD_VAR 0 3
60890: GREATEREQUAL
60891: IFFALSE 60895
// exit ;
60893: GO 60945
// if size then
60895: LD_VAR 0 2
60899: IFFALSE 60945
// for i := array downto size do
60901: LD_ADDR_VAR 0 4
60905: PUSH
60906: DOUBLE
60907: LD_VAR 0 1
60911: INC
60912: ST_TO_ADDR
60913: LD_VAR 0 2
60917: PUSH
60918: FOR_DOWNTO
60919: IFFALSE 60943
// result := Delete ( result , result ) ;
60921: LD_ADDR_VAR 0 3
60925: PUSH
60926: LD_VAR 0 3
60930: PPUSH
60931: LD_VAR 0 3
60935: PPUSH
60936: CALL_OW 3
60940: ST_TO_ADDR
60941: GO 60918
60943: POP
60944: POP
// end ;
60945: LD_VAR 0 3
60949: RET
// export function ComExit ( unit ) ; var tmp ; begin
60950: LD_INT 0
60952: PPUSH
60953: PPUSH
// if not IsInUnit ( unit ) then
60954: LD_VAR 0 1
60958: PPUSH
60959: CALL_OW 310
60963: NOT
60964: IFFALSE 60968
// exit ;
60966: GO 61028
// tmp := IsInUnit ( unit ) ;
60968: LD_ADDR_VAR 0 3
60972: PUSH
60973: LD_VAR 0 1
60977: PPUSH
60978: CALL_OW 310
60982: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60983: LD_VAR 0 3
60987: PPUSH
60988: CALL_OW 247
60992: PUSH
60993: LD_INT 2
60995: EQUAL
60996: IFFALSE 61009
// ComExitVehicle ( unit ) else
60998: LD_VAR 0 1
61002: PPUSH
61003: CALL_OW 121
61007: GO 61018
// ComExitBuilding ( unit ) ;
61009: LD_VAR 0 1
61013: PPUSH
61014: CALL_OW 122
// result := tmp ;
61018: LD_ADDR_VAR 0 2
61022: PUSH
61023: LD_VAR 0 3
61027: ST_TO_ADDR
// end ;
61028: LD_VAR 0 2
61032: RET
// export function ComExitAll ( units ) ; var i ; begin
61033: LD_INT 0
61035: PPUSH
61036: PPUSH
// if not units then
61037: LD_VAR 0 1
61041: NOT
61042: IFFALSE 61046
// exit ;
61044: GO 61072
// for i in units do
61046: LD_ADDR_VAR 0 3
61050: PUSH
61051: LD_VAR 0 1
61055: PUSH
61056: FOR_IN
61057: IFFALSE 61070
// ComExit ( i ) ;
61059: LD_VAR 0 3
61063: PPUSH
61064: CALL 60950 0 1
61068: GO 61056
61070: POP
61071: POP
// end ;
61072: LD_VAR 0 2
61076: RET
// export function ResetHc ; begin
61077: LD_INT 0
61079: PPUSH
// InitHc ;
61080: CALL_OW 19
// hc_importance := 0 ;
61084: LD_ADDR_OWVAR 32
61088: PUSH
61089: LD_INT 0
61091: ST_TO_ADDR
// end ;
61092: LD_VAR 0 1
61096: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61097: LD_INT 0
61099: PPUSH
61100: PPUSH
61101: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61102: LD_ADDR_VAR 0 6
61106: PUSH
61107: LD_VAR 0 1
61111: PUSH
61112: LD_VAR 0 3
61116: PLUS
61117: PUSH
61118: LD_INT 2
61120: DIV
61121: ST_TO_ADDR
// if _x < 0 then
61122: LD_VAR 0 6
61126: PUSH
61127: LD_INT 0
61129: LESS
61130: IFFALSE 61147
// _x := _x * - 1 ;
61132: LD_ADDR_VAR 0 6
61136: PUSH
61137: LD_VAR 0 6
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: MUL
61146: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61147: LD_ADDR_VAR 0 7
61151: PUSH
61152: LD_VAR 0 2
61156: PUSH
61157: LD_VAR 0 4
61161: PLUS
61162: PUSH
61163: LD_INT 2
61165: DIV
61166: ST_TO_ADDR
// if _y < 0 then
61167: LD_VAR 0 7
61171: PUSH
61172: LD_INT 0
61174: LESS
61175: IFFALSE 61192
// _y := _y * - 1 ;
61177: LD_ADDR_VAR 0 7
61181: PUSH
61182: LD_VAR 0 7
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: MUL
61191: ST_TO_ADDR
// result := [ _x , _y ] ;
61192: LD_ADDR_VAR 0 5
61196: PUSH
61197: LD_VAR 0 6
61201: PUSH
61202: LD_VAR 0 7
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: ST_TO_ADDR
// end ;
61211: LD_VAR 0 5
61215: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61216: LD_INT 0
61218: PPUSH
61219: PPUSH
61220: PPUSH
61221: PPUSH
// task := GetTaskList ( unit ) ;
61222: LD_ADDR_VAR 0 7
61226: PUSH
61227: LD_VAR 0 1
61231: PPUSH
61232: CALL_OW 437
61236: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61237: LD_VAR 0 7
61241: NOT
61242: PUSH
61243: LD_VAR 0 1
61247: PPUSH
61248: LD_VAR 0 2
61252: PPUSH
61253: CALL_OW 308
61257: NOT
61258: AND
61259: IFFALSE 61263
// exit ;
61261: GO 61381
// if IsInArea ( unit , area ) then
61263: LD_VAR 0 1
61267: PPUSH
61268: LD_VAR 0 2
61272: PPUSH
61273: CALL_OW 308
61277: IFFALSE 61295
// begin ComMoveToArea ( unit , goAway ) ;
61279: LD_VAR 0 1
61283: PPUSH
61284: LD_VAR 0 3
61288: PPUSH
61289: CALL_OW 113
// exit ;
61293: GO 61381
// end ; if task [ 1 ] [ 1 ] <> M then
61295: LD_VAR 0 7
61299: PUSH
61300: LD_INT 1
61302: ARRAY
61303: PUSH
61304: LD_INT 1
61306: ARRAY
61307: PUSH
61308: LD_STRING M
61310: NONEQUAL
61311: IFFALSE 61315
// exit ;
61313: GO 61381
// x := task [ 1 ] [ 2 ] ;
61315: LD_ADDR_VAR 0 5
61319: PUSH
61320: LD_VAR 0 7
61324: PUSH
61325: LD_INT 1
61327: ARRAY
61328: PUSH
61329: LD_INT 2
61331: ARRAY
61332: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61333: LD_ADDR_VAR 0 6
61337: PUSH
61338: LD_VAR 0 7
61342: PUSH
61343: LD_INT 1
61345: ARRAY
61346: PUSH
61347: LD_INT 3
61349: ARRAY
61350: ST_TO_ADDR
// if InArea ( x , y , area ) then
61351: LD_VAR 0 5
61355: PPUSH
61356: LD_VAR 0 6
61360: PPUSH
61361: LD_VAR 0 2
61365: PPUSH
61366: CALL_OW 309
61370: IFFALSE 61381
// ComStop ( unit ) ;
61372: LD_VAR 0 1
61376: PPUSH
61377: CALL_OW 141
// end ;
61381: LD_VAR 0 4
61385: RET
// export function Abs ( value ) ; begin
61386: LD_INT 0
61388: PPUSH
// result := value ;
61389: LD_ADDR_VAR 0 2
61393: PUSH
61394: LD_VAR 0 1
61398: ST_TO_ADDR
// if value < 0 then
61399: LD_VAR 0 1
61403: PUSH
61404: LD_INT 0
61406: LESS
61407: IFFALSE 61424
// result := value * - 1 ;
61409: LD_ADDR_VAR 0 2
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: MUL
61423: ST_TO_ADDR
// end ;
61424: LD_VAR 0 2
61428: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61429: LD_INT 0
61431: PPUSH
61432: PPUSH
61433: PPUSH
61434: PPUSH
61435: PPUSH
61436: PPUSH
61437: PPUSH
61438: PPUSH
// if not unit or not building then
61439: LD_VAR 0 1
61443: NOT
61444: PUSH
61445: LD_VAR 0 2
61449: NOT
61450: OR
61451: IFFALSE 61455
// exit ;
61453: GO 61681
// x := GetX ( building ) ;
61455: LD_ADDR_VAR 0 4
61459: PUSH
61460: LD_VAR 0 2
61464: PPUSH
61465: CALL_OW 250
61469: ST_TO_ADDR
// y := GetY ( building ) ;
61470: LD_ADDR_VAR 0 6
61474: PUSH
61475: LD_VAR 0 2
61479: PPUSH
61480: CALL_OW 251
61484: ST_TO_ADDR
// d := GetDir ( building ) ;
61485: LD_ADDR_VAR 0 8
61489: PUSH
61490: LD_VAR 0 2
61494: PPUSH
61495: CALL_OW 254
61499: ST_TO_ADDR
// r := 4 ;
61500: LD_ADDR_VAR 0 9
61504: PUSH
61505: LD_INT 4
61507: ST_TO_ADDR
// for i := 1 to 5 do
61508: LD_ADDR_VAR 0 10
61512: PUSH
61513: DOUBLE
61514: LD_INT 1
61516: DEC
61517: ST_TO_ADDR
61518: LD_INT 5
61520: PUSH
61521: FOR_TO
61522: IFFALSE 61679
// begin _x := ShiftX ( x , d , r + i ) ;
61524: LD_ADDR_VAR 0 5
61528: PUSH
61529: LD_VAR 0 4
61533: PPUSH
61534: LD_VAR 0 8
61538: PPUSH
61539: LD_VAR 0 9
61543: PUSH
61544: LD_VAR 0 10
61548: PLUS
61549: PPUSH
61550: CALL_OW 272
61554: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61555: LD_ADDR_VAR 0 7
61559: PUSH
61560: LD_VAR 0 6
61564: PPUSH
61565: LD_VAR 0 8
61569: PPUSH
61570: LD_VAR 0 9
61574: PUSH
61575: LD_VAR 0 10
61579: PLUS
61580: PPUSH
61581: CALL_OW 273
61585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61586: LD_VAR 0 5
61590: PPUSH
61591: LD_VAR 0 7
61595: PPUSH
61596: CALL_OW 488
61600: PUSH
61601: LD_VAR 0 5
61605: PPUSH
61606: LD_VAR 0 7
61610: PPUSH
61611: CALL_OW 428
61615: PPUSH
61616: CALL_OW 247
61620: PUSH
61621: LD_INT 3
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: IN
61631: NOT
61632: AND
61633: IFFALSE 61677
// begin ComMoveXY ( unit , _x , _y ) ;
61635: LD_VAR 0 1
61639: PPUSH
61640: LD_VAR 0 5
61644: PPUSH
61645: LD_VAR 0 7
61649: PPUSH
61650: CALL_OW 111
// result := [ _x , _y ] ;
61654: LD_ADDR_VAR 0 3
61658: PUSH
61659: LD_VAR 0 5
61663: PUSH
61664: LD_VAR 0 7
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// exit ;
61673: POP
61674: POP
61675: GO 61681
// end ; end ;
61677: GO 61521
61679: POP
61680: POP
// end ;
61681: LD_VAR 0 3
61685: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61686: LD_INT 0
61688: PPUSH
61689: PPUSH
61690: PPUSH
// result := 0 ;
61691: LD_ADDR_VAR 0 3
61695: PUSH
61696: LD_INT 0
61698: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61699: LD_VAR 0 1
61703: PUSH
61704: LD_INT 0
61706: LESS
61707: PUSH
61708: LD_VAR 0 1
61712: PUSH
61713: LD_INT 8
61715: GREATER
61716: OR
61717: PUSH
61718: LD_VAR 0 2
61722: PUSH
61723: LD_INT 0
61725: LESS
61726: OR
61727: PUSH
61728: LD_VAR 0 2
61732: PUSH
61733: LD_INT 8
61735: GREATER
61736: OR
61737: IFFALSE 61741
// exit ;
61739: GO 61816
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61741: LD_ADDR_VAR 0 4
61745: PUSH
61746: LD_INT 22
61748: PUSH
61749: LD_VAR 0 2
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PPUSH
61758: CALL_OW 69
61762: PUSH
61763: FOR_IN
61764: IFFALSE 61814
// begin un := UnitShoot ( i ) ;
61766: LD_ADDR_VAR 0 5
61770: PUSH
61771: LD_VAR 0 4
61775: PPUSH
61776: CALL_OW 504
61780: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61781: LD_VAR 0 5
61785: PPUSH
61786: CALL_OW 255
61790: PUSH
61791: LD_VAR 0 1
61795: EQUAL
61796: IFFALSE 61812
// begin result := un ;
61798: LD_ADDR_VAR 0 3
61802: PUSH
61803: LD_VAR 0 5
61807: ST_TO_ADDR
// exit ;
61808: POP
61809: POP
61810: GO 61816
// end ; end ;
61812: GO 61763
61814: POP
61815: POP
// end ;
61816: LD_VAR 0 3
61820: RET
// export function GetCargoBay ( units ) ; begin
61821: LD_INT 0
61823: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61824: LD_ADDR_VAR 0 2
61828: PUSH
61829: LD_VAR 0 1
61833: PPUSH
61834: LD_INT 2
61836: PUSH
61837: LD_INT 34
61839: PUSH
61840: LD_INT 12
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 34
61849: PUSH
61850: LD_INT 51
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 34
61859: PUSH
61860: LD_INT 32
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 34
61869: PUSH
61870: LD_INT 89
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: PPUSH
61884: CALL_OW 72
61888: ST_TO_ADDR
// end ;
61889: LD_VAR 0 2
61893: RET
// export function Negate ( value ) ; begin
61894: LD_INT 0
61896: PPUSH
// result := not value ;
61897: LD_ADDR_VAR 0 2
61901: PUSH
61902: LD_VAR 0 1
61906: NOT
61907: ST_TO_ADDR
// end ;
61908: LD_VAR 0 2
61912: RET
// export function Inc ( value ) ; begin
61913: LD_INT 0
61915: PPUSH
// result := value + 1 ;
61916: LD_ADDR_VAR 0 2
61920: PUSH
61921: LD_VAR 0 1
61925: PUSH
61926: LD_INT 1
61928: PLUS
61929: ST_TO_ADDR
// end ;
61930: LD_VAR 0 2
61934: RET
// export function Dec ( value ) ; begin
61935: LD_INT 0
61937: PPUSH
// result := value - 1 ;
61938: LD_ADDR_VAR 0 2
61942: PUSH
61943: LD_VAR 0 1
61947: PUSH
61948: LD_INT 1
61950: MINUS
61951: ST_TO_ADDR
// end ;
61952: LD_VAR 0 2
61956: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61957: LD_INT 0
61959: PPUSH
61960: PPUSH
61961: PPUSH
61962: PPUSH
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61967: LD_VAR 0 1
61971: PPUSH
61972: LD_VAR 0 2
61976: PPUSH
61977: CALL_OW 488
61981: NOT
61982: PUSH
61983: LD_VAR 0 3
61987: PPUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: CALL_OW 488
61997: NOT
61998: OR
61999: IFFALSE 62012
// begin result := - 1 ;
62001: LD_ADDR_VAR 0 5
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: ST_TO_ADDR
// exit ;
62010: GO 62247
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62012: LD_ADDR_VAR 0 12
62016: PUSH
62017: LD_VAR 0 1
62021: PPUSH
62022: LD_VAR 0 2
62026: PPUSH
62027: LD_VAR 0 3
62031: PPUSH
62032: LD_VAR 0 4
62036: PPUSH
62037: CALL 61097 0 4
62041: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62042: LD_ADDR_VAR 0 11
62046: PUSH
62047: LD_VAR 0 1
62051: PPUSH
62052: LD_VAR 0 2
62056: PPUSH
62057: LD_VAR 0 12
62061: PUSH
62062: LD_INT 1
62064: ARRAY
62065: PPUSH
62066: LD_VAR 0 12
62070: PUSH
62071: LD_INT 2
62073: ARRAY
62074: PPUSH
62075: CALL_OW 298
62079: ST_TO_ADDR
// distance := 9999 ;
62080: LD_ADDR_VAR 0 10
62084: PUSH
62085: LD_INT 9999
62087: ST_TO_ADDR
// for i := 0 to 5 do
62088: LD_ADDR_VAR 0 6
62092: PUSH
62093: DOUBLE
62094: LD_INT 0
62096: DEC
62097: ST_TO_ADDR
62098: LD_INT 5
62100: PUSH
62101: FOR_TO
62102: IFFALSE 62245
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62104: LD_ADDR_VAR 0 7
62108: PUSH
62109: LD_VAR 0 1
62113: PPUSH
62114: LD_VAR 0 6
62118: PPUSH
62119: LD_VAR 0 11
62123: PPUSH
62124: CALL_OW 272
62128: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62129: LD_ADDR_VAR 0 8
62133: PUSH
62134: LD_VAR 0 2
62138: PPUSH
62139: LD_VAR 0 6
62143: PPUSH
62144: LD_VAR 0 11
62148: PPUSH
62149: CALL_OW 273
62153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62154: LD_VAR 0 7
62158: PPUSH
62159: LD_VAR 0 8
62163: PPUSH
62164: CALL_OW 488
62168: NOT
62169: IFFALSE 62173
// continue ;
62171: GO 62101
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62173: LD_ADDR_VAR 0 9
62177: PUSH
62178: LD_VAR 0 12
62182: PUSH
62183: LD_INT 1
62185: ARRAY
62186: PPUSH
62187: LD_VAR 0 12
62191: PUSH
62192: LD_INT 2
62194: ARRAY
62195: PPUSH
62196: LD_VAR 0 7
62200: PPUSH
62201: LD_VAR 0 8
62205: PPUSH
62206: CALL_OW 298
62210: ST_TO_ADDR
// if tmp < distance then
62211: LD_VAR 0 9
62215: PUSH
62216: LD_VAR 0 10
62220: LESS
62221: IFFALSE 62243
// begin result := i ;
62223: LD_ADDR_VAR 0 5
62227: PUSH
62228: LD_VAR 0 6
62232: ST_TO_ADDR
// distance := tmp ;
62233: LD_ADDR_VAR 0 10
62237: PUSH
62238: LD_VAR 0 9
62242: ST_TO_ADDR
// end ; end ;
62243: GO 62101
62245: POP
62246: POP
// end ;
62247: LD_VAR 0 5
62251: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62252: LD_INT 0
62254: PPUSH
62255: PPUSH
// if not driver or not IsInUnit ( driver ) then
62256: LD_VAR 0 1
62260: NOT
62261: PUSH
62262: LD_VAR 0 1
62266: PPUSH
62267: CALL_OW 310
62271: NOT
62272: OR
62273: IFFALSE 62277
// exit ;
62275: GO 62367
// vehicle := IsInUnit ( driver ) ;
62277: LD_ADDR_VAR 0 3
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: CALL_OW 310
62291: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62292: LD_VAR 0 1
62296: PPUSH
62297: LD_STRING \
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: PUSH
62327: LD_STRING E
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_VAR 0 3
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PPUSH
62363: CALL_OW 446
// end ;
62367: LD_VAR 0 2
62371: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62372: LD_INT 0
62374: PPUSH
62375: PPUSH
// if not driver or not IsInUnit ( driver ) then
62376: LD_VAR 0 1
62380: NOT
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: CALL_OW 310
62391: NOT
62392: OR
62393: IFFALSE 62397
// exit ;
62395: GO 62487
// vehicle := IsInUnit ( driver ) ;
62397: LD_ADDR_VAR 0 3
62401: PUSH
62402: LD_VAR 0 1
62406: PPUSH
62407: CALL_OW 310
62411: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62412: LD_VAR 0 1
62416: PPUSH
62417: LD_STRING \
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: PUSH
62447: LD_STRING E
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_VAR 0 3
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PPUSH
62483: CALL_OW 447
// end ;
62487: LD_VAR 0 2
62491: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62492: LD_INT 0
62494: PPUSH
62495: PPUSH
62496: PPUSH
// tmp := [ ] ;
62497: LD_ADDR_VAR 0 5
62501: PUSH
62502: EMPTY
62503: ST_TO_ADDR
// for i in units do
62504: LD_ADDR_VAR 0 4
62508: PUSH
62509: LD_VAR 0 1
62513: PUSH
62514: FOR_IN
62515: IFFALSE 62553
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62517: LD_ADDR_VAR 0 5
62521: PUSH
62522: LD_VAR 0 5
62526: PPUSH
62527: LD_VAR 0 5
62531: PUSH
62532: LD_INT 1
62534: PLUS
62535: PPUSH
62536: LD_VAR 0 4
62540: PPUSH
62541: CALL_OW 256
62545: PPUSH
62546: CALL_OW 2
62550: ST_TO_ADDR
62551: GO 62514
62553: POP
62554: POP
// if not tmp then
62555: LD_VAR 0 5
62559: NOT
62560: IFFALSE 62564
// exit ;
62562: GO 62612
// if asc then
62564: LD_VAR 0 2
62568: IFFALSE 62592
// result := SortListByListAsc ( units , tmp ) else
62570: LD_ADDR_VAR 0 3
62574: PUSH
62575: LD_VAR 0 1
62579: PPUSH
62580: LD_VAR 0 5
62584: PPUSH
62585: CALL_OW 76
62589: ST_TO_ADDR
62590: GO 62612
// result := SortListByListDesc ( units , tmp ) ;
62592: LD_ADDR_VAR 0 3
62596: PUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: LD_VAR 0 5
62606: PPUSH
62607: CALL_OW 77
62611: ST_TO_ADDR
// end ;
62612: LD_VAR 0 3
62616: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62617: LD_INT 0
62619: PPUSH
62620: PPUSH
// task := GetTaskList ( mech ) ;
62621: LD_ADDR_VAR 0 4
62625: PUSH
62626: LD_VAR 0 1
62630: PPUSH
62631: CALL_OW 437
62635: ST_TO_ADDR
// if not task then
62636: LD_VAR 0 4
62640: NOT
62641: IFFALSE 62645
// exit ;
62643: GO 62687
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62645: LD_ADDR_VAR 0 3
62649: PUSH
62650: LD_VAR 0 4
62654: PUSH
62655: LD_INT 1
62657: ARRAY
62658: PUSH
62659: LD_INT 1
62661: ARRAY
62662: PUSH
62663: LD_STRING r
62665: EQUAL
62666: PUSH
62667: LD_VAR 0 4
62671: PUSH
62672: LD_INT 1
62674: ARRAY
62675: PUSH
62676: LD_INT 4
62678: ARRAY
62679: PUSH
62680: LD_VAR 0 2
62684: EQUAL
62685: AND
62686: ST_TO_ADDR
// end ;
62687: LD_VAR 0 3
62691: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62692: LD_INT 0
62694: PPUSH
// SetDir ( unit , d ) ;
62695: LD_VAR 0 1
62699: PPUSH
62700: LD_VAR 0 4
62704: PPUSH
62705: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62709: LD_VAR 0 1
62713: PPUSH
62714: LD_VAR 0 2
62718: PPUSH
62719: LD_VAR 0 3
62723: PPUSH
62724: LD_VAR 0 5
62728: PPUSH
62729: CALL_OW 48
// end ;
62733: LD_VAR 0 6
62737: RET
// export function ToNaturalNumber ( number ) ; begin
62738: LD_INT 0
62740: PPUSH
// result := number div 1 ;
62741: LD_ADDR_VAR 0 2
62745: PUSH
62746: LD_VAR 0 1
62750: PUSH
62751: LD_INT 1
62753: DIV
62754: ST_TO_ADDR
// if number < 0 then
62755: LD_VAR 0 1
62759: PUSH
62760: LD_INT 0
62762: LESS
62763: IFFALSE 62773
// result := 0 ;
62765: LD_ADDR_VAR 0 2
62769: PUSH
62770: LD_INT 0
62772: ST_TO_ADDR
// end ;
62773: LD_VAR 0 2
62777: RET
// export function SortByClass ( units , class ) ; var un ; begin
62778: LD_INT 0
62780: PPUSH
62781: PPUSH
// if not units or not class then
62782: LD_VAR 0 1
62786: NOT
62787: PUSH
62788: LD_VAR 0 2
62792: NOT
62793: OR
62794: IFFALSE 62798
// exit ;
62796: GO 62893
// result := [ ] ;
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: EMPTY
62804: ST_TO_ADDR
// for un in units do
62805: LD_ADDR_VAR 0 4
62809: PUSH
62810: LD_VAR 0 1
62814: PUSH
62815: FOR_IN
62816: IFFALSE 62891
// if GetClass ( un ) = class then
62818: LD_VAR 0 4
62822: PPUSH
62823: CALL_OW 257
62827: PUSH
62828: LD_VAR 0 2
62832: EQUAL
62833: IFFALSE 62860
// result := Insert ( result , 1 , un ) else
62835: LD_ADDR_VAR 0 3
62839: PUSH
62840: LD_VAR 0 3
62844: PPUSH
62845: LD_INT 1
62847: PPUSH
62848: LD_VAR 0 4
62852: PPUSH
62853: CALL_OW 2
62857: ST_TO_ADDR
62858: GO 62889
// result := Replace ( result , result + 1 , un ) ;
62860: LD_ADDR_VAR 0 3
62864: PUSH
62865: LD_VAR 0 3
62869: PPUSH
62870: LD_VAR 0 3
62874: PUSH
62875: LD_INT 1
62877: PLUS
62878: PPUSH
62879: LD_VAR 0 4
62883: PPUSH
62884: CALL_OW 1
62888: ST_TO_ADDR
62889: GO 62815
62891: POP
62892: POP
// end ;
62893: LD_VAR 0 3
62897: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62898: LD_INT 0
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
// result := [ ] ;
62907: LD_ADDR_VAR 0 4
62911: PUSH
62912: EMPTY
62913: ST_TO_ADDR
// if x - r < 0 then
62914: LD_VAR 0 1
62918: PUSH
62919: LD_VAR 0 3
62923: MINUS
62924: PUSH
62925: LD_INT 0
62927: LESS
62928: IFFALSE 62940
// min_x := 0 else
62930: LD_ADDR_VAR 0 8
62934: PUSH
62935: LD_INT 0
62937: ST_TO_ADDR
62938: GO 62956
// min_x := x - r ;
62940: LD_ADDR_VAR 0 8
62944: PUSH
62945: LD_VAR 0 1
62949: PUSH
62950: LD_VAR 0 3
62954: MINUS
62955: ST_TO_ADDR
// if y - r < 0 then
62956: LD_VAR 0 2
62960: PUSH
62961: LD_VAR 0 3
62965: MINUS
62966: PUSH
62967: LD_INT 0
62969: LESS
62970: IFFALSE 62982
// min_y := 0 else
62972: LD_ADDR_VAR 0 7
62976: PUSH
62977: LD_INT 0
62979: ST_TO_ADDR
62980: GO 62998
// min_y := y - r ;
62982: LD_ADDR_VAR 0 7
62986: PUSH
62987: LD_VAR 0 2
62991: PUSH
62992: LD_VAR 0 3
62996: MINUS
62997: ST_TO_ADDR
// max_x := x + r ;
62998: LD_ADDR_VAR 0 9
63002: PUSH
63003: LD_VAR 0 1
63007: PUSH
63008: LD_VAR 0 3
63012: PLUS
63013: ST_TO_ADDR
// max_y := y + r ;
63014: LD_ADDR_VAR 0 10
63018: PUSH
63019: LD_VAR 0 2
63023: PUSH
63024: LD_VAR 0 3
63028: PLUS
63029: ST_TO_ADDR
// for _x = min_x to max_x do
63030: LD_ADDR_VAR 0 5
63034: PUSH
63035: DOUBLE
63036: LD_VAR 0 8
63040: DEC
63041: ST_TO_ADDR
63042: LD_VAR 0 9
63046: PUSH
63047: FOR_TO
63048: IFFALSE 63149
// for _y = min_y to max_y do
63050: LD_ADDR_VAR 0 6
63054: PUSH
63055: DOUBLE
63056: LD_VAR 0 7
63060: DEC
63061: ST_TO_ADDR
63062: LD_VAR 0 10
63066: PUSH
63067: FOR_TO
63068: IFFALSE 63145
// begin if not ValidHex ( _x , _y ) then
63070: LD_VAR 0 5
63074: PPUSH
63075: LD_VAR 0 6
63079: PPUSH
63080: CALL_OW 488
63084: NOT
63085: IFFALSE 63089
// continue ;
63087: GO 63067
// if GetResourceTypeXY ( _x , _y ) then
63089: LD_VAR 0 5
63093: PPUSH
63094: LD_VAR 0 6
63098: PPUSH
63099: CALL_OW 283
63103: IFFALSE 63143
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63105: LD_ADDR_VAR 0 4
63109: PUSH
63110: LD_VAR 0 4
63114: PPUSH
63115: LD_VAR 0 4
63119: PUSH
63120: LD_INT 1
63122: PLUS
63123: PPUSH
63124: LD_VAR 0 5
63128: PUSH
63129: LD_VAR 0 6
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PPUSH
63138: CALL_OW 1
63142: ST_TO_ADDR
// end ;
63143: GO 63067
63145: POP
63146: POP
63147: GO 63047
63149: POP
63150: POP
// end ;
63151: LD_VAR 0 4
63155: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63156: LD_INT 0
63158: PPUSH
63159: PPUSH
63160: PPUSH
63161: PPUSH
63162: PPUSH
63163: PPUSH
63164: PPUSH
63165: PPUSH
// if not units then
63166: LD_VAR 0 1
63170: NOT
63171: IFFALSE 63175
// exit ;
63173: GO 63703
// result := UnitFilter ( units , [ f_ok ] ) ;
63175: LD_ADDR_VAR 0 3
63179: PUSH
63180: LD_VAR 0 1
63184: PPUSH
63185: LD_INT 50
63187: PUSH
63188: EMPTY
63189: LIST
63190: PPUSH
63191: CALL_OW 72
63195: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63196: LD_ADDR_VAR 0 8
63200: PUSH
63201: LD_VAR 0 1
63205: PUSH
63206: LD_INT 1
63208: ARRAY
63209: PPUSH
63210: CALL_OW 255
63214: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63215: LD_ADDR_VAR 0 10
63219: PUSH
63220: LD_INT 29
63222: PUSH
63223: LD_INT 91
63225: PUSH
63226: LD_INT 49
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: ST_TO_ADDR
// if not result then
63234: LD_VAR 0 3
63238: NOT
63239: IFFALSE 63243
// exit ;
63241: GO 63703
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63243: LD_ADDR_VAR 0 5
63247: PUSH
63248: LD_INT 81
63250: PUSH
63251: LD_VAR 0 8
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PPUSH
63260: CALL_OW 69
63264: ST_TO_ADDR
// for i in result do
63265: LD_ADDR_VAR 0 4
63269: PUSH
63270: LD_VAR 0 3
63274: PUSH
63275: FOR_IN
63276: IFFALSE 63701
// begin tag := GetTag ( i ) + 1 ;
63278: LD_ADDR_VAR 0 9
63282: PUSH
63283: LD_VAR 0 4
63287: PPUSH
63288: CALL_OW 110
63292: PUSH
63293: LD_INT 1
63295: PLUS
63296: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
63297: LD_ADDR_VAR 0 7
63301: PUSH
63302: LD_VAR 0 4
63306: PPUSH
63307: CALL_OW 250
63311: PPUSH
63312: LD_VAR 0 4
63316: PPUSH
63317: CALL_OW 251
63321: PPUSH
63322: LD_INT 4
63324: PPUSH
63325: CALL 62898 0 3
63329: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
63330: LD_VAR 0 4
63334: PPUSH
63335: CALL_OW 247
63339: PUSH
63340: LD_INT 2
63342: EQUAL
63343: PUSH
63344: LD_VAR 0 7
63348: PUSH
63349: LD_INT 2
63351: GREATER
63352: AND
63353: PUSH
63354: LD_VAR 0 4
63358: PPUSH
63359: CALL_OW 264
63363: PUSH
63364: LD_VAR 0 10
63368: IN
63369: NOT
63370: AND
63371: IFFALSE 63410
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63373: LD_VAR 0 4
63377: PPUSH
63378: LD_VAR 0 7
63382: PUSH
63383: LD_INT 1
63385: ARRAY
63386: PUSH
63387: LD_INT 1
63389: ARRAY
63390: PPUSH
63391: LD_VAR 0 7
63395: PUSH
63396: LD_INT 1
63398: ARRAY
63399: PUSH
63400: LD_INT 2
63402: ARRAY
63403: PPUSH
63404: CALL_OW 116
63408: GO 63699
// if path > tag then
63410: LD_VAR 0 2
63414: PUSH
63415: LD_VAR 0 9
63419: GREATER
63420: IFFALSE 63628
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63422: LD_ADDR_VAR 0 6
63426: PUSH
63427: LD_VAR 0 5
63431: PPUSH
63432: LD_INT 91
63434: PUSH
63435: LD_VAR 0 4
63439: PUSH
63440: LD_INT 8
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: PPUSH
63448: CALL_OW 72
63452: ST_TO_ADDR
// if nearEnemy then
63453: LD_VAR 0 6
63457: IFFALSE 63526
// begin if GetWeapon ( i ) = ru_time_lapser then
63459: LD_VAR 0 4
63463: PPUSH
63464: CALL_OW 264
63468: PUSH
63469: LD_INT 49
63471: EQUAL
63472: IFFALSE 63500
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63474: LD_VAR 0 4
63478: PPUSH
63479: LD_VAR 0 6
63483: PPUSH
63484: LD_VAR 0 4
63488: PPUSH
63489: CALL_OW 74
63493: PPUSH
63494: CALL_OW 112
63498: GO 63524
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63500: LD_VAR 0 4
63504: PPUSH
63505: LD_VAR 0 6
63509: PPUSH
63510: LD_VAR 0 4
63514: PPUSH
63515: CALL_OW 74
63519: PPUSH
63520: CALL 64774 0 2
// end else
63524: GO 63626
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63526: LD_VAR 0 4
63530: PPUSH
63531: LD_VAR 0 2
63535: PUSH
63536: LD_VAR 0 9
63540: ARRAY
63541: PUSH
63542: LD_INT 1
63544: ARRAY
63545: PPUSH
63546: LD_VAR 0 2
63550: PUSH
63551: LD_VAR 0 9
63555: ARRAY
63556: PUSH
63557: LD_INT 2
63559: ARRAY
63560: PPUSH
63561: CALL_OW 297
63565: PUSH
63566: LD_INT 6
63568: GREATER
63569: IFFALSE 63612
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63571: LD_VAR 0 4
63575: PPUSH
63576: LD_VAR 0 2
63580: PUSH
63581: LD_VAR 0 9
63585: ARRAY
63586: PUSH
63587: LD_INT 1
63589: ARRAY
63590: PPUSH
63591: LD_VAR 0 2
63595: PUSH
63596: LD_VAR 0 9
63600: ARRAY
63601: PUSH
63602: LD_INT 2
63604: ARRAY
63605: PPUSH
63606: CALL_OW 114
63610: GO 63626
// SetTag ( i , tag ) ;
63612: LD_VAR 0 4
63616: PPUSH
63617: LD_VAR 0 9
63621: PPUSH
63622: CALL_OW 109
// end else
63626: GO 63699
// if enemy then
63628: LD_VAR 0 5
63632: IFFALSE 63699
// begin if GetWeapon ( i ) = ru_time_lapser then
63634: LD_VAR 0 4
63638: PPUSH
63639: CALL_OW 264
63643: PUSH
63644: LD_INT 49
63646: EQUAL
63647: IFFALSE 63675
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63649: LD_VAR 0 4
63653: PPUSH
63654: LD_VAR 0 5
63658: PPUSH
63659: LD_VAR 0 4
63663: PPUSH
63664: CALL_OW 74
63668: PPUSH
63669: CALL_OW 112
63673: GO 63699
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63675: LD_VAR 0 4
63679: PPUSH
63680: LD_VAR 0 5
63684: PPUSH
63685: LD_VAR 0 4
63689: PPUSH
63690: CALL_OW 74
63694: PPUSH
63695: CALL 64774 0 2
// end ; end ;
63699: GO 63275
63701: POP
63702: POP
// end ;
63703: LD_VAR 0 3
63707: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63708: LD_INT 0
63710: PPUSH
63711: PPUSH
63712: PPUSH
// if not unit or IsInUnit ( unit ) then
63713: LD_VAR 0 1
63717: NOT
63718: PUSH
63719: LD_VAR 0 1
63723: PPUSH
63724: CALL_OW 310
63728: OR
63729: IFFALSE 63733
// exit ;
63731: GO 63824
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63733: LD_ADDR_VAR 0 4
63737: PUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: CALL_OW 250
63747: PPUSH
63748: LD_VAR 0 2
63752: PPUSH
63753: LD_INT 1
63755: PPUSH
63756: CALL_OW 272
63760: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63761: LD_ADDR_VAR 0 5
63765: PUSH
63766: LD_VAR 0 1
63770: PPUSH
63771: CALL_OW 251
63775: PPUSH
63776: LD_VAR 0 2
63780: PPUSH
63781: LD_INT 1
63783: PPUSH
63784: CALL_OW 273
63788: ST_TO_ADDR
// if ValidHex ( x , y ) then
63789: LD_VAR 0 4
63793: PPUSH
63794: LD_VAR 0 5
63798: PPUSH
63799: CALL_OW 488
63803: IFFALSE 63824
// ComTurnXY ( unit , x , y ) ;
63805: LD_VAR 0 1
63809: PPUSH
63810: LD_VAR 0 4
63814: PPUSH
63815: LD_VAR 0 5
63819: PPUSH
63820: CALL_OW 118
// end ;
63824: LD_VAR 0 3
63828: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63829: LD_INT 0
63831: PPUSH
63832: PPUSH
// result := false ;
63833: LD_ADDR_VAR 0 3
63837: PUSH
63838: LD_INT 0
63840: ST_TO_ADDR
// if not units then
63841: LD_VAR 0 2
63845: NOT
63846: IFFALSE 63850
// exit ;
63848: GO 63895
// for i in units do
63850: LD_ADDR_VAR 0 4
63854: PUSH
63855: LD_VAR 0 2
63859: PUSH
63860: FOR_IN
63861: IFFALSE 63893
// if See ( side , i ) then
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_VAR 0 4
63872: PPUSH
63873: CALL_OW 292
63877: IFFALSE 63891
// begin result := true ;
63879: LD_ADDR_VAR 0 3
63883: PUSH
63884: LD_INT 1
63886: ST_TO_ADDR
// exit ;
63887: POP
63888: POP
63889: GO 63895
// end ;
63891: GO 63860
63893: POP
63894: POP
// end ;
63895: LD_VAR 0 3
63899: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63900: LD_INT 0
63902: PPUSH
63903: PPUSH
63904: PPUSH
63905: PPUSH
// if not unit or not points then
63906: LD_VAR 0 1
63910: NOT
63911: PUSH
63912: LD_VAR 0 2
63916: NOT
63917: OR
63918: IFFALSE 63922
// exit ;
63920: GO 64012
// dist := 99999 ;
63922: LD_ADDR_VAR 0 5
63926: PUSH
63927: LD_INT 99999
63929: ST_TO_ADDR
// for i in points do
63930: LD_ADDR_VAR 0 4
63934: PUSH
63935: LD_VAR 0 2
63939: PUSH
63940: FOR_IN
63941: IFFALSE 64010
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63943: LD_ADDR_VAR 0 6
63947: PUSH
63948: LD_VAR 0 1
63952: PPUSH
63953: LD_VAR 0 4
63957: PUSH
63958: LD_INT 1
63960: ARRAY
63961: PPUSH
63962: LD_VAR 0 4
63966: PUSH
63967: LD_INT 2
63969: ARRAY
63970: PPUSH
63971: CALL_OW 297
63975: ST_TO_ADDR
// if tmpDist < dist then
63976: LD_VAR 0 6
63980: PUSH
63981: LD_VAR 0 5
63985: LESS
63986: IFFALSE 64008
// begin result := i ;
63988: LD_ADDR_VAR 0 3
63992: PUSH
63993: LD_VAR 0 4
63997: ST_TO_ADDR
// dist := tmpDist ;
63998: LD_ADDR_VAR 0 5
64002: PUSH
64003: LD_VAR 0 6
64007: ST_TO_ADDR
// end ; end ;
64008: GO 63940
64010: POP
64011: POP
// end ;
64012: LD_VAR 0 3
64016: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64017: LD_INT 0
64019: PPUSH
// uc_side := side ;
64020: LD_ADDR_OWVAR 20
64024: PUSH
64025: LD_VAR 0 1
64029: ST_TO_ADDR
// uc_nation := 3 ;
64030: LD_ADDR_OWVAR 21
64034: PUSH
64035: LD_INT 3
64037: ST_TO_ADDR
// vc_chassis := 25 ;
64038: LD_ADDR_OWVAR 37
64042: PUSH
64043: LD_INT 25
64045: ST_TO_ADDR
// vc_engine := engine_siberite ;
64046: LD_ADDR_OWVAR 39
64050: PUSH
64051: LD_INT 3
64053: ST_TO_ADDR
// vc_control := control_computer ;
64054: LD_ADDR_OWVAR 38
64058: PUSH
64059: LD_INT 3
64061: ST_TO_ADDR
// vc_weapon := 59 ;
64062: LD_ADDR_OWVAR 40
64066: PUSH
64067: LD_INT 59
64069: ST_TO_ADDR
// result := CreateVehicle ;
64070: LD_ADDR_VAR 0 5
64074: PUSH
64075: CALL_OW 45
64079: ST_TO_ADDR
// SetDir ( result , d ) ;
64080: LD_VAR 0 5
64084: PPUSH
64085: LD_VAR 0 4
64089: PPUSH
64090: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64094: LD_VAR 0 5
64098: PPUSH
64099: LD_VAR 0 2
64103: PPUSH
64104: LD_VAR 0 3
64108: PPUSH
64109: LD_INT 0
64111: PPUSH
64112: CALL_OW 48
// end ;
64116: LD_VAR 0 5
64120: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64121: LD_INT 0
64123: PPUSH
64124: PPUSH
64125: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64126: LD_ADDR_VAR 0 2
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64149: LD_VAR 0 1
64153: NOT
64154: PUSH
64155: LD_VAR 0 1
64159: PPUSH
64160: CALL_OW 264
64164: PUSH
64165: LD_INT 12
64167: PUSH
64168: LD_INT 51
64170: PUSH
64171: LD_INT 32
64173: PUSH
64174: LD_INT 89
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: IN
64183: NOT
64184: OR
64185: IFFALSE 64189
// exit ;
64187: GO 64287
// for i := 1 to 3 do
64189: LD_ADDR_VAR 0 3
64193: PUSH
64194: DOUBLE
64195: LD_INT 1
64197: DEC
64198: ST_TO_ADDR
64199: LD_INT 3
64201: PUSH
64202: FOR_TO
64203: IFFALSE 64285
// begin tmp := GetCargo ( cargo , i ) ;
64205: LD_ADDR_VAR 0 4
64209: PUSH
64210: LD_VAR 0 1
64214: PPUSH
64215: LD_VAR 0 3
64219: PPUSH
64220: CALL_OW 289
64224: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64225: LD_ADDR_VAR 0 2
64229: PUSH
64230: LD_VAR 0 2
64234: PPUSH
64235: LD_VAR 0 3
64239: PPUSH
64240: LD_VAR 0 4
64244: PPUSH
64245: CALL_OW 1
64249: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64250: LD_ADDR_VAR 0 2
64254: PUSH
64255: LD_VAR 0 2
64259: PPUSH
64260: LD_INT 4
64262: PPUSH
64263: LD_VAR 0 2
64267: PUSH
64268: LD_INT 4
64270: ARRAY
64271: PUSH
64272: LD_VAR 0 4
64276: PLUS
64277: PPUSH
64278: CALL_OW 1
64282: ST_TO_ADDR
// end ;
64283: GO 64202
64285: POP
64286: POP
// end ;
64287: LD_VAR 0 2
64291: RET
// export function Length ( array ) ; begin
64292: LD_INT 0
64294: PPUSH
// result := array + 0 ;
64295: LD_ADDR_VAR 0 2
64299: PUSH
64300: LD_VAR 0 1
64304: PUSH
64305: LD_INT 0
64307: PLUS
64308: ST_TO_ADDR
// end ;
64309: LD_VAR 0 2
64313: RET
// export function PrepareArray ( array ) ; begin
64314: LD_INT 0
64316: PPUSH
// result := array diff 0 ;
64317: LD_ADDR_VAR 0 2
64321: PUSH
64322: LD_VAR 0 1
64326: PUSH
64327: LD_INT 0
64329: DIFF
64330: ST_TO_ADDR
// if not result [ 1 ] then
64331: LD_VAR 0 2
64335: PUSH
64336: LD_INT 1
64338: ARRAY
64339: NOT
64340: IFFALSE 64360
// result := Delete ( result , 1 ) ;
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: LD_VAR 0 2
64351: PPUSH
64352: LD_INT 1
64354: PPUSH
64355: CALL_OW 3
64359: ST_TO_ADDR
// end ;
64360: LD_VAR 0 2
64364: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64365: LD_INT 0
64367: PPUSH
64368: PPUSH
64369: PPUSH
64370: PPUSH
// sibRocketRange := 25 ;
64371: LD_ADDR_VAR 0 6
64375: PUSH
64376: LD_INT 25
64378: ST_TO_ADDR
// result := false ;
64379: LD_ADDR_VAR 0 4
64383: PUSH
64384: LD_INT 0
64386: ST_TO_ADDR
// for i := 0 to 5 do
64387: LD_ADDR_VAR 0 5
64391: PUSH
64392: DOUBLE
64393: LD_INT 0
64395: DEC
64396: ST_TO_ADDR
64397: LD_INT 5
64399: PUSH
64400: FOR_TO
64401: IFFALSE 64468
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64403: LD_VAR 0 1
64407: PPUSH
64408: LD_VAR 0 5
64412: PPUSH
64413: LD_VAR 0 6
64417: PPUSH
64418: CALL_OW 272
64422: PPUSH
64423: LD_VAR 0 2
64427: PPUSH
64428: LD_VAR 0 5
64432: PPUSH
64433: LD_VAR 0 6
64437: PPUSH
64438: CALL_OW 273
64442: PPUSH
64443: LD_VAR 0 3
64447: PPUSH
64448: CALL_OW 309
64452: IFFALSE 64466
// begin result := true ;
64454: LD_ADDR_VAR 0 4
64458: PUSH
64459: LD_INT 1
64461: ST_TO_ADDR
// exit ;
64462: POP
64463: POP
64464: GO 64470
// end ;
64466: GO 64400
64468: POP
64469: POP
// end ;
64470: LD_VAR 0 4
64474: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64475: LD_INT 0
64477: PPUSH
64478: PPUSH
64479: PPUSH
// if btype = b_depot then
64480: LD_VAR 0 2
64484: PUSH
64485: LD_INT 0
64487: EQUAL
64488: IFFALSE 64500
// begin result := true ;
64490: LD_ADDR_VAR 0 3
64494: PUSH
64495: LD_INT 1
64497: ST_TO_ADDR
// exit ;
64498: GO 64616
// end ; pom := GetBase ( depot ) ;
64500: LD_ADDR_VAR 0 4
64504: PUSH
64505: LD_VAR 0 1
64509: PPUSH
64510: CALL_OW 274
64514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64515: LD_ADDR_VAR 0 5
64519: PUSH
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_VAR 0 1
64529: PPUSH
64530: CALL_OW 248
64534: PPUSH
64535: CALL_OW 450
64539: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64540: LD_ADDR_VAR 0 3
64544: PUSH
64545: LD_VAR 0 4
64549: PPUSH
64550: LD_INT 1
64552: PPUSH
64553: CALL_OW 275
64557: PUSH
64558: LD_VAR 0 5
64562: PUSH
64563: LD_INT 1
64565: ARRAY
64566: GREATEREQUAL
64567: PUSH
64568: LD_VAR 0 4
64572: PPUSH
64573: LD_INT 2
64575: PPUSH
64576: CALL_OW 275
64580: PUSH
64581: LD_VAR 0 5
64585: PUSH
64586: LD_INT 2
64588: ARRAY
64589: GREATEREQUAL
64590: AND
64591: PUSH
64592: LD_VAR 0 4
64596: PPUSH
64597: LD_INT 3
64599: PPUSH
64600: CALL_OW 275
64604: PUSH
64605: LD_VAR 0 5
64609: PUSH
64610: LD_INT 3
64612: ARRAY
64613: GREATEREQUAL
64614: AND
64615: ST_TO_ADDR
// end ;
64616: LD_VAR 0 3
64620: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64621: LD_INT 0
64623: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64624: LD_VAR 0 1
64628: PPUSH
64629: LD_VAR 0 2
64633: PPUSH
64634: LD_INT 0
64636: PPUSH
64637: LD_INT 0
64639: PPUSH
64640: LD_INT 1
64642: PPUSH
64643: LD_INT 0
64645: PPUSH
64646: CALL_OW 587
// end ;
64650: LD_VAR 0 3
64654: RET
// export function CenterOnNow ( unit ) ; begin
64655: LD_INT 0
64657: PPUSH
// result := IsInUnit ( unit ) ;
64658: LD_ADDR_VAR 0 2
64662: PUSH
64663: LD_VAR 0 1
64667: PPUSH
64668: CALL_OW 310
64672: ST_TO_ADDR
// if not result then
64673: LD_VAR 0 2
64677: NOT
64678: IFFALSE 64690
// result := unit ;
64680: LD_ADDR_VAR 0 2
64684: PUSH
64685: LD_VAR 0 1
64689: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64690: LD_VAR 0 1
64694: PPUSH
64695: CALL_OW 87
// end ;
64699: LD_VAR 0 2
64703: RET
// export function ComMoveHex ( unit , hex ) ; begin
64704: LD_INT 0
64706: PPUSH
// if not hex then
64707: LD_VAR 0 2
64711: NOT
64712: IFFALSE 64716
// exit ;
64714: GO 64769
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64716: LD_VAR 0 2
64720: PUSH
64721: LD_INT 1
64723: ARRAY
64724: PPUSH
64725: LD_VAR 0 2
64729: PUSH
64730: LD_INT 2
64732: ARRAY
64733: PPUSH
64734: CALL_OW 428
64738: IFFALSE 64742
// exit ;
64740: GO 64769
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64742: LD_VAR 0 1
64746: PPUSH
64747: LD_VAR 0 2
64751: PUSH
64752: LD_INT 1
64754: ARRAY
64755: PPUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_INT 2
64763: ARRAY
64764: PPUSH
64765: CALL_OW 111
// end ;
64769: LD_VAR 0 3
64773: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64774: LD_INT 0
64776: PPUSH
64777: PPUSH
64778: PPUSH
// if not unit or not enemy then
64779: LD_VAR 0 1
64783: NOT
64784: PUSH
64785: LD_VAR 0 2
64789: NOT
64790: OR
64791: IFFALSE 64795
// exit ;
64793: GO 64919
// x := GetX ( enemy ) ;
64795: LD_ADDR_VAR 0 4
64799: PUSH
64800: LD_VAR 0 2
64804: PPUSH
64805: CALL_OW 250
64809: ST_TO_ADDR
// y := GetY ( enemy ) ;
64810: LD_ADDR_VAR 0 5
64814: PUSH
64815: LD_VAR 0 2
64819: PPUSH
64820: CALL_OW 251
64824: ST_TO_ADDR
// if ValidHex ( x , y ) then
64825: LD_VAR 0 4
64829: PPUSH
64830: LD_VAR 0 5
64834: PPUSH
64835: CALL_OW 488
64839: IFFALSE 64919
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64841: LD_VAR 0 2
64845: PPUSH
64846: CALL_OW 247
64850: PUSH
64851: LD_INT 3
64853: PUSH
64854: LD_INT 2
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: IN
64861: PUSH
64862: LD_VAR 0 1
64866: PPUSH
64867: CALL_OW 255
64871: PPUSH
64872: LD_VAR 0 2
64876: PPUSH
64877: CALL_OW 292
64881: OR
64882: IFFALSE 64900
// ComAttackUnit ( unit , enemy ) else
64884: LD_VAR 0 1
64888: PPUSH
64889: LD_VAR 0 2
64893: PPUSH
64894: CALL_OW 115
64898: GO 64919
// ComAgressiveMove ( unit , x , y ) ;
64900: LD_VAR 0 1
64904: PPUSH
64905: LD_VAR 0 4
64909: PPUSH
64910: LD_VAR 0 5
64914: PPUSH
64915: CALL_OW 114
// end ;
64919: LD_VAR 0 3
64923: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64924: LD_INT 0
64926: PPUSH
64927: PPUSH
64928: PPUSH
// list := AreaToList ( area , 0 ) ;
64929: LD_ADDR_VAR 0 5
64933: PUSH
64934: LD_VAR 0 1
64938: PPUSH
64939: LD_INT 0
64941: PPUSH
64942: CALL_OW 517
64946: ST_TO_ADDR
// if not list then
64947: LD_VAR 0 5
64951: NOT
64952: IFFALSE 64956
// exit ;
64954: GO 65086
// if all then
64956: LD_VAR 0 2
64960: IFFALSE 65048
// begin for i := 1 to list [ 1 ] do
64962: LD_ADDR_VAR 0 4
64966: PUSH
64967: DOUBLE
64968: LD_INT 1
64970: DEC
64971: ST_TO_ADDR
64972: LD_VAR 0 5
64976: PUSH
64977: LD_INT 1
64979: ARRAY
64980: PUSH
64981: FOR_TO
64982: IFFALSE 65044
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64984: LD_ADDR_VAR 0 3
64988: PUSH
64989: LD_VAR 0 3
64993: PPUSH
64994: LD_VAR 0 3
64998: PUSH
64999: LD_INT 1
65001: PLUS
65002: PPUSH
65003: LD_VAR 0 5
65007: PUSH
65008: LD_INT 1
65010: ARRAY
65011: PUSH
65012: LD_VAR 0 4
65016: ARRAY
65017: PUSH
65018: LD_VAR 0 5
65022: PUSH
65023: LD_INT 2
65025: ARRAY
65026: PUSH
65027: LD_VAR 0 4
65031: ARRAY
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PPUSH
65037: CALL_OW 1
65041: ST_TO_ADDR
65042: GO 64981
65044: POP
65045: POP
// exit ;
65046: GO 65086
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
65048: LD_ADDR_VAR 0 3
65052: PUSH
65053: LD_VAR 0 5
65057: PUSH
65058: LD_INT 1
65060: ARRAY
65061: PUSH
65062: LD_INT 1
65064: ARRAY
65065: PUSH
65066: LD_VAR 0 5
65070: PUSH
65071: LD_INT 2
65073: ARRAY
65074: PUSH
65075: LD_INT 1
65077: ARRAY
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: ST_TO_ADDR
// end ;
65086: LD_VAR 0 3
65090: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
65091: LD_INT 0
65093: PPUSH
65094: PPUSH
// list := AreaToList ( area , 0 ) ;
65095: LD_ADDR_VAR 0 4
65099: PUSH
65100: LD_VAR 0 1
65104: PPUSH
65105: LD_INT 0
65107: PPUSH
65108: CALL_OW 517
65112: ST_TO_ADDR
// if not list then
65113: LD_VAR 0 4
65117: NOT
65118: IFFALSE 65122
// exit ;
65120: GO 65163
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
65122: LD_ADDR_VAR 0 3
65126: PUSH
65127: LD_VAR 0 4
65131: PUSH
65132: LD_INT 1
65134: ARRAY
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PUSH
65140: LD_VAR 0 4
65144: PUSH
65145: LD_INT 2
65147: ARRAY
65148: PUSH
65149: LD_INT 1
65151: ARRAY
65152: PUSH
65153: LD_VAR 0 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// end ;
65163: LD_VAR 0 3
65167: RET
// export function First ( array ) ; begin
65168: LD_INT 0
65170: PPUSH
// if not array then
65171: LD_VAR 0 1
65175: NOT
65176: IFFALSE 65180
// exit ;
65178: GO 65194
// result := array [ 1 ] ;
65180: LD_ADDR_VAR 0 2
65184: PUSH
65185: LD_VAR 0 1
65189: PUSH
65190: LD_INT 1
65192: ARRAY
65193: ST_TO_ADDR
// end ;
65194: LD_VAR 0 2
65198: RET
// export function Last ( array ) ; begin
65199: LD_INT 0
65201: PPUSH
// if not array then
65202: LD_VAR 0 1
65206: NOT
65207: IFFALSE 65211
// exit ;
65209: GO 65227
// result := array [ array ] ;
65211: LD_ADDR_VAR 0 2
65215: PUSH
65216: LD_VAR 0 1
65220: PUSH
65221: LD_VAR 0 1
65225: ARRAY
65226: ST_TO_ADDR
// end ;
65227: LD_VAR 0 2
65231: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65232: LD_INT 0
65234: PPUSH
65235: PPUSH
// result := [ ] ;
65236: LD_ADDR_VAR 0 5
65240: PUSH
65241: EMPTY
65242: ST_TO_ADDR
// if not array then
65243: LD_VAR 0 1
65247: NOT
65248: IFFALSE 65252
// exit ;
65250: GO 65364
// for i := 1 to array do
65252: LD_ADDR_VAR 0 6
65256: PUSH
65257: DOUBLE
65258: LD_INT 1
65260: DEC
65261: ST_TO_ADDR
65262: LD_VAR 0 1
65266: PUSH
65267: FOR_TO
65268: IFFALSE 65362
// if array [ i ] [ index ] = value then
65270: LD_VAR 0 1
65274: PUSH
65275: LD_VAR 0 6
65279: ARRAY
65280: PUSH
65281: LD_VAR 0 2
65285: ARRAY
65286: PUSH
65287: LD_VAR 0 3
65291: EQUAL
65292: IFFALSE 65360
// begin if indexColumn then
65294: LD_VAR 0 4
65298: IFFALSE 65334
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65300: LD_ADDR_VAR 0 5
65304: PUSH
65305: LD_VAR 0 5
65309: PPUSH
65310: LD_VAR 0 1
65314: PUSH
65315: LD_VAR 0 6
65319: ARRAY
65320: PUSH
65321: LD_VAR 0 4
65325: ARRAY
65326: PPUSH
65327: CALL 60552 0 2
65331: ST_TO_ADDR
65332: GO 65360
// result := Join ( result , array [ i ] ) ;
65334: LD_ADDR_VAR 0 5
65338: PUSH
65339: LD_VAR 0 5
65343: PPUSH
65344: LD_VAR 0 1
65348: PUSH
65349: LD_VAR 0 6
65353: ARRAY
65354: PPUSH
65355: CALL 60552 0 2
65359: ST_TO_ADDR
// end ;
65360: GO 65267
65362: POP
65363: POP
// end ;
65364: LD_VAR 0 5
65368: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65369: LD_INT 0
65371: PPUSH
// if not vehicles or not parkingPoint then
65372: LD_VAR 0 1
65376: NOT
65377: PUSH
65378: LD_VAR 0 2
65382: NOT
65383: OR
65384: IFFALSE 65388
// exit ;
65386: GO 65486
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65388: LD_ADDR_VAR 0 1
65392: PUSH
65393: LD_VAR 0 1
65397: PPUSH
65398: LD_INT 50
65400: PUSH
65401: EMPTY
65402: LIST
65403: PUSH
65404: LD_INT 3
65406: PUSH
65407: LD_INT 92
65409: PUSH
65410: LD_VAR 0 2
65414: PUSH
65415: LD_INT 1
65417: ARRAY
65418: PUSH
65419: LD_VAR 0 2
65423: PUSH
65424: LD_INT 2
65426: ARRAY
65427: PUSH
65428: LD_INT 8
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PPUSH
65445: CALL_OW 72
65449: ST_TO_ADDR
// if not vehicles then
65450: LD_VAR 0 1
65454: NOT
65455: IFFALSE 65459
// exit ;
65457: GO 65486
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65459: LD_VAR 0 1
65463: PPUSH
65464: LD_VAR 0 2
65468: PUSH
65469: LD_INT 1
65471: ARRAY
65472: PPUSH
65473: LD_VAR 0 2
65477: PUSH
65478: LD_INT 2
65480: ARRAY
65481: PPUSH
65482: CALL_OW 111
// end ;
65486: LD_VAR 0 3
65490: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65491: LD_INT 0
65493: PPUSH
65494: PPUSH
65495: PPUSH
// if not side or not area then
65496: LD_VAR 0 1
65500: NOT
65501: PUSH
65502: LD_VAR 0 2
65506: NOT
65507: OR
65508: IFFALSE 65512
// exit ;
65510: GO 65631
// tmp := AreaToList ( area , 0 ) ;
65512: LD_ADDR_VAR 0 5
65516: PUSH
65517: LD_VAR 0 2
65521: PPUSH
65522: LD_INT 0
65524: PPUSH
65525: CALL_OW 517
65529: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65530: LD_ADDR_VAR 0 4
65534: PUSH
65535: DOUBLE
65536: LD_INT 1
65538: DEC
65539: ST_TO_ADDR
65540: LD_VAR 0 5
65544: PUSH
65545: LD_INT 1
65547: ARRAY
65548: PUSH
65549: FOR_TO
65550: IFFALSE 65629
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65552: LD_VAR 0 5
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PUSH
65561: LD_VAR 0 4
65565: ARRAY
65566: PPUSH
65567: LD_VAR 0 5
65571: PUSH
65572: LD_INT 2
65574: ARRAY
65575: PUSH
65576: LD_VAR 0 4
65580: ARRAY
65581: PPUSH
65582: CALL_OW 351
65586: IFFALSE 65627
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65588: LD_VAR 0 5
65592: PUSH
65593: LD_INT 1
65595: ARRAY
65596: PUSH
65597: LD_VAR 0 4
65601: ARRAY
65602: PPUSH
65603: LD_VAR 0 5
65607: PUSH
65608: LD_INT 2
65610: ARRAY
65611: PUSH
65612: LD_VAR 0 4
65616: ARRAY
65617: PPUSH
65618: LD_VAR 0 1
65622: PPUSH
65623: CALL_OW 244
// end ;
65627: GO 65549
65629: POP
65630: POP
// end ;
65631: LD_VAR 0 3
65635: RET
