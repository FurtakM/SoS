// export mineCounter ; every 0 0$1 do var i , tmp , task ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
// begin mineCounter := 5 ;
   8: LD_ADDR_EXP 1
  12: PUSH
  13: LD_INT 5
  15: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
  16: LD_INT 35
  18: PPUSH
  19: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , nation_arabian ] , [ f_class , class_soldier ] ] ) ;
  23: LD_ADDR_VAR 0 2
  27: PUSH
  28: LD_INT 22
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: EMPTY
  35: LIST
  36: LIST
  37: PUSH
  38: LD_INT 23
  40: PUSH
  41: LD_INT 2
  43: PUSH
  44: EMPTY
  45: LIST
  46: LIST
  47: PUSH
  48: LD_INT 25
  50: PUSH
  51: LD_INT 1
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: PPUSH
  63: CALL_OW 69
  67: ST_TO_ADDR
// if not tmp then
  68: LD_VAR 0 2
  72: NOT
  73: IFFALSE 77
// continue ;
  75: GO 16
// for i in tmp do
  77: LD_ADDR_VAR 0 1
  81: PUSH
  82: LD_VAR 0 2
  86: PUSH
  87: FOR_IN
  88: IFFALSE 277
// begin task := GetTaskList ( i ) ;
  90: LD_ADDR_VAR 0 3
  94: PUSH
  95: LD_VAR 0 1
  99: PPUSH
 100: CALL_OW 437
 104: ST_TO_ADDR
// if not task then
 105: LD_VAR 0 3
 109: NOT
 110: IFFALSE 126
// begin SetTag ( i , 0 ) ;
 112: LD_VAR 0 1
 116: PPUSH
 117: LD_INT 0
 119: PPUSH
 120: CALL_OW 109
// continue ;
 124: GO 87
// end ; if GetTag ( i ) = 1 and task [ 1 ] [ 1 ] <> p then
 126: LD_VAR 0 1
 130: PPUSH
 131: CALL_OW 110
 135: PUSH
 136: LD_INT 1
 138: EQUAL
 139: PUSH
 140: LD_VAR 0 3
 144: PUSH
 145: LD_INT 1
 147: ARRAY
 148: PUSH
 149: LD_INT 1
 151: ARRAY
 152: PUSH
 153: LD_STRING p
 155: NONEQUAL
 156: AND
 157: IFFALSE 173
// begin SetTag ( i , 0 ) ;
 159: LD_VAR 0 1
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL_OW 109
// continue ;
 171: GO 87
// end ; if GetTag ( i ) <> 1 and task [ 1 ] [ 1 ] = p then
 173: LD_VAR 0 1
 177: PPUSH
 178: CALL_OW 110
 182: PUSH
 183: LD_INT 1
 185: NONEQUAL
 186: PUSH
 187: LD_VAR 0 3
 191: PUSH
 192: LD_INT 1
 194: ARRAY
 195: PUSH
 196: LD_INT 1
 198: ARRAY
 199: PUSH
 200: LD_STRING p
 202: EQUAL
 203: AND
 204: IFFALSE 275
// begin SetTag ( i , 1 ) ;
 206: LD_VAR 0 1
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 109
// RaiseSailEventCustom ( 1 , i , task [ 1 ] [ 2 ] , task [ 1 ] [ 3 ] , task [ 1 ] [ 4 ] , 0 , 0 ) ;
 218: LD_INT 1
 220: PPUSH
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_VAR 0 3
 230: PUSH
 231: LD_INT 1
 233: ARRAY
 234: PUSH
 235: LD_INT 2
 237: ARRAY
 238: PPUSH
 239: LD_VAR 0 3
 243: PUSH
 244: LD_INT 1
 246: ARRAY
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PPUSH
 252: LD_VAR 0 3
 256: PUSH
 257: LD_INT 1
 259: ARRAY
 260: PUSH
 261: LD_INT 4
 263: ARRAY
 264: PPUSH
 265: LD_INT 0
 267: PPUSH
 268: LD_INT 0
 270: PPUSH
 271: CALL_OW 595
// end ; end ;
 275: GO 87
 277: POP
 278: POP
// until mineCounter = 0 ;
 279: LD_EXP 1
 283: PUSH
 284: LD_INT 0
 286: EQUAL
 287: IFFALSE 16
// end ;
 289: PPOPN 3
 291: END
// on SailEventCustom ( event , p1 , p2 , p3 , p4 , p5 , p6 ) do begin if event = 1 then
 292: LD_VAR 0 1
 296: PUSH
 297: LD_INT 1
 299: EQUAL
 300: IFFALSE 388
// begin repeat wait ( 0 0$1 ) ;
 302: LD_INT 35
 304: PPUSH
 305: CALL_OW 67
// if MineAtPos ( p2 , p3 ) or MineAtRange ( GetX ( p4 ) , GetY ( p4 ) ) then
 309: LD_VAR 0 3
 313: PPUSH
 314: LD_VAR 0 4
 318: PPUSH
 319: CALL_OW 458
 323: PUSH
 324: LD_VAR 0 5
 328: PPUSH
 329: CALL_OW 250
 333: PPUSH
 334: LD_VAR 0 5
 338: PPUSH
 339: CALL_OW 251
 343: PPUSH
 344: CALL 391 0 2
 348: OR
 349: IFFALSE 353
// break ;
 351: GO 374
// if GetTag ( p1 ) <> 1 then
 353: LD_VAR 0 2
 357: PPUSH
 358: CALL_OW 110
 362: PUSH
 363: LD_INT 1
 365: NONEQUAL
 366: IFFALSE 370
// exit ;
 368: GO 388
// until false ;
 370: LD_INT 0
 372: IFFALSE 302
// mineCounter := mineCounter - 1 ;
 374: LD_ADDR_EXP 1
 378: PUSH
 379: LD_EXP 1
 383: PUSH
 384: LD_INT 1
 386: MINUS
 387: ST_TO_ADDR
// end ; end ;
 388: PPOPN 7
 390: END
// export function MineAtRange ( x , y ) ; var _x , _y , _d ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
// for _d := 0 to 5 do
 397: LD_ADDR_VAR 0 6
 401: PUSH
 402: DOUBLE
 403: LD_INT 0
 405: DEC
 406: ST_TO_ADDR
 407: LD_INT 5
 409: PUSH
 410: FOR_TO
 411: IFFALSE 519
// for _x := - 3 to 3 do
 413: LD_ADDR_VAR 0 4
 417: PUSH
 418: DOUBLE
 419: LD_INT 3
 421: NEG
 422: DEC
 423: ST_TO_ADDR
 424: LD_INT 3
 426: PUSH
 427: FOR_TO
 428: IFFALSE 515
// for _y := - 3 to 3 do
 430: LD_ADDR_VAR 0 5
 434: PUSH
 435: DOUBLE
 436: LD_INT 3
 438: NEG
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 3
 443: PUSH
 444: FOR_TO
 445: IFFALSE 511
// if MineAtPos ( ShiftX ( x , _d , _x ) , ShiftY ( y , _d , _y ) ) then
 447: LD_VAR 0 1
 451: PPUSH
 452: LD_VAR 0 6
 456: PPUSH
 457: LD_VAR 0 4
 461: PPUSH
 462: CALL_OW 272
 466: PPUSH
 467: LD_VAR 0 2
 471: PPUSH
 472: LD_VAR 0 6
 476: PPUSH
 477: LD_VAR 0 5
 481: PPUSH
 482: CALL_OW 273
 486: PPUSH
 487: CALL_OW 458
 491: IFFALSE 509
// begin result := true ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// exit ;
 501: POP
 502: POP
 503: POP
 504: POP
 505: POP
 506: POP
 507: GO 521
// end ;
 509: GO 444
 511: POP
 512: POP
 513: GO 427
 515: POP
 516: POP
 517: GO 410
 519: POP
 520: POP
// end ;
 521: LD_VAR 0 3
 525: RET
// every 0 0$2 do var un , x , y , _r , _x , _y , _d , __x , __y ;
 526: GO 528
 528: DISABLE
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
 537: PPUSH
 538: PPUSH
 539: PPUSH
// begin x := 23 ;
 540: LD_ADDR_VAR 0 2
 544: PUSH
 545: LD_INT 23
 547: ST_TO_ADDR
// y := 19 ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_INT 19
 555: ST_TO_ADDR
// uc_side := 8 ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_INT 8
 563: ST_TO_ADDR
// uc_nation := 1 ;
 564: LD_ADDR_OWVAR 21
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
 572: LD_INT 0
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL_OW 381
// for _r := 1 to 6 do
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: DOUBLE
 588: LD_INT 1
 590: DEC
 591: ST_TO_ADDR
 592: LD_INT 6
 594: PUSH
 595: FOR_TO
 596: IFFALSE 748
// begin for _x := - _r to _r do
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: DOUBLE
 604: LD_VAR 0 4
 608: NEG
 609: DEC
 610: ST_TO_ADDR
 611: LD_VAR 0 4
 615: PUSH
 616: FOR_TO
 617: IFFALSE 744
// for _y := - _r to _r do
 619: LD_ADDR_VAR 0 6
 623: PUSH
 624: DOUBLE
 625: LD_VAR 0 4
 629: NEG
 630: DEC
 631: ST_TO_ADDR
 632: LD_VAR 0 4
 636: PUSH
 637: FOR_TO
 638: IFFALSE 740
// begin __x := x + _x ;
 640: LD_ADDR_VAR 0 8
 644: PUSH
 645: LD_VAR 0 2
 649: PUSH
 650: LD_VAR 0 5
 654: PLUS
 655: ST_TO_ADDR
// __y := y + _y ;
 656: LD_ADDR_VAR 0 9
 660: PUSH
 661: LD_VAR 0 3
 665: PUSH
 666: LD_VAR 0 6
 670: PLUS
 671: ST_TO_ADDR
// if HexInfo ( __x , __y ) then
 672: LD_VAR 0 8
 676: PPUSH
 677: LD_VAR 0 9
 681: PPUSH
 682: CALL_OW 428
 686: IFFALSE 690
// continue ;
 688: GO 637
// wait ( 1 ) ;
 690: LD_INT 1
 692: PPUSH
 693: CALL_OW 67
// un := CreateHuman ;
 697: LD_ADDR_VAR 0 1
 701: PUSH
 702: CALL_OW 44
 706: ST_TO_ADDR
// PlaceUnitXY ( un , __x , __y , false ) ;
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_VAR 0 8
 716: PPUSH
 717: LD_VAR 0 9
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 48
// ComHold ( un ) ;
 729: LD_VAR 0 1
 733: PPUSH
 734: CALL_OW 140
// end ;
 738: GO 637
 740: POP
 741: POP
 742: GO 616
 744: POP
 745: POP
// end ;
 746: GO 595
 748: POP
 749: POP
// end ;
 750: PPOPN 9
 752: END
// export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , enemySkillLevel , amConvoyTroops ; begin
 753: LD_INT 0
 755: PPUSH
 756: PPUSH
 757: PPUSH
 758: PPUSH
 759: PPUSH
 760: PPUSH
 761: PPUSH
 762: PPUSH
 763: PPUSH
 764: PPUSH
 765: PPUSH
// enemySkilllevel := 2 ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// uc_side := 1 ;
 774: LD_ADDR_OWVAR 20
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// uc_nation := 1 ;
 782: LD_ADDR_OWVAR 21
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// hc_name :=  ;
 790: LD_ADDR_OWVAR 26
 794: PUSH
 795: LD_STRING 
 797: ST_TO_ADDR
// hc_gallery :=  ;
 798: LD_ADDR_OWVAR 33
 802: PUSH
 803: LD_STRING 
 805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
 806: LD_ADDR_VAR 0 8
 810: PUSH
 811: DOUBLE
 812: LD_INT 1
 814: DEC
 815: ST_TO_ADDR
 816: LD_VAR 0 1
 820: PUSH
 821: FOR_TO
 822: IFFALSE 897
// begin PrepareSoldier ( false , enemySkillLevel ) ;
 824: LD_INT 0
 826: PPUSH
 827: LD_VAR 0 16
 831: PPUSH
 832: CALL_OW 381
// un = CreateHuman ;
 836: LD_ADDR_VAR 0 9
 840: PUSH
 841: CALL_OW 44
 845: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 846: LD_ADDR_VAR 0 17
 850: PUSH
 851: LD_VAR 0 17
 855: PUSH
 856: LD_VAR 0 9
 860: ADD
 861: ST_TO_ADDR
// sols := sols ^ un ;
 862: LD_ADDR_VAR 0 12
 866: PUSH
 867: LD_VAR 0 12
 871: PUSH
 872: LD_VAR 0 9
 876: ADD
 877: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 878: LD_VAR 0 9
 882: PPUSH
 883: LD_VAR 0 6
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end ;
 895: GO 821
 897: POP
 898: POP
// for i := 1 to engsAmount do
 899: LD_ADDR_VAR 0 8
 903: PUSH
 904: DOUBLE
 905: LD_INT 1
 907: DEC
 908: ST_TO_ADDR
 909: LD_VAR 0 2
 913: PUSH
 914: FOR_TO
 915: IFFALSE 990
// begin PrepareEngineer ( false , enemySkillLevel ) ;
 917: LD_INT 0
 919: PPUSH
 920: LD_VAR 0 16
 924: PPUSH
 925: CALL_OW 382
// un = CreateHuman ;
 929: LD_ADDR_VAR 0 9
 933: PUSH
 934: CALL_OW 44
 938: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
 939: LD_ADDR_VAR 0 17
 943: PUSH
 944: LD_VAR 0 17
 948: PUSH
 949: LD_VAR 0 9
 953: ADD
 954: ST_TO_ADDR
// engs := engs ^ un ;
 955: LD_ADDR_VAR 0 13
 959: PUSH
 960: LD_VAR 0 13
 964: PUSH
 965: LD_VAR 0 9
 969: ADD
 970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
 971: LD_VAR 0 9
 975: PPUSH
 976: LD_VAR 0 6
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// end ;
 988: GO 914
 990: POP
 991: POP
// for i := 1 to mechsAmount do
 992: LD_ADDR_VAR 0 8
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_VAR 0 3
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1083
// begin PrepareEngineer ( false , enemySkillLevel ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_VAR 0 16
1017: PPUSH
1018: CALL_OW 382
// un = CreateHuman ;
1022: LD_ADDR_VAR 0 9
1026: PUSH
1027: CALL_OW 44
1031: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1032: LD_ADDR_VAR 0 17
1036: PUSH
1037: LD_VAR 0 17
1041: PUSH
1042: LD_VAR 0 9
1046: ADD
1047: ST_TO_ADDR
// engs := engs ^ un ;
1048: LD_ADDR_VAR 0 13
1052: PUSH
1053: LD_VAR 0 13
1057: PUSH
1058: LD_VAR 0 9
1062: ADD
1063: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1064: LD_VAR 0 9
1068: PPUSH
1069: LD_VAR 0 6
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// end ;
1081: GO 1007
1083: POP
1084: POP
// for i := 1 to scientistsAmount do
1085: LD_ADDR_VAR 0 8
1089: PUSH
1090: DOUBLE
1091: LD_INT 1
1093: DEC
1094: ST_TO_ADDR
1095: LD_VAR 0 4
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1176
// begin PrepareMechanic ( false , enemySkillLevel ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_VAR 0 16
1110: PPUSH
1111: CALL_OW 383
// un = CreateHuman ;
1115: LD_ADDR_VAR 0 9
1119: PUSH
1120: CALL_OW 44
1124: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
1125: LD_ADDR_VAR 0 17
1129: PUSH
1130: LD_VAR 0 17
1134: PUSH
1135: LD_VAR 0 9
1139: ADD
1140: ST_TO_ADDR
// mechs := mechs ^ un ;
1141: LD_ADDR_VAR 0 14
1145: PUSH
1146: LD_VAR 0 14
1150: PUSH
1151: LD_VAR 0 9
1155: ADD
1156: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
1157: LD_VAR 0 9
1161: PPUSH
1162: LD_VAR 0 6
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: GO 1100
1176: POP
1177: POP
// for i := 1 to vehiclesAmount do
1178: LD_ADDR_VAR 0 8
1182: PUSH
1183: DOUBLE
1184: LD_INT 1
1186: DEC
1187: ST_TO_ADDR
1188: LD_VAR 0 5
1192: PUSH
1193: FOR_TO
1194: IFFALSE 1360
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
1196: LD_ADDR_OWVAR 40
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 4
1206: PUSH
1207: LD_INT 3
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 1
1217: PPUSH
1218: LD_INT 3
1220: PPUSH
1221: CALL_OW 12
1225: ARRAY
1226: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1227: LD_ADDR_OWVAR 37
1231: PUSH
1232: LD_INT 3
1234: ST_TO_ADDR
// vc_control = control_manual ;
1235: LD_ADDR_OWVAR 38
1239: PUSH
1240: LD_INT 1
1242: ST_TO_ADDR
// vc_engine = engine_combustion ;
1243: LD_ADDR_OWVAR 39
1247: PUSH
1248: LD_INT 1
1250: ST_TO_ADDR
// veh = CreateVehicle ;
1251: LD_ADDR_VAR 0 10
1255: PUSH
1256: CALL_OW 45
1260: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
1261: LD_ADDR_VAR 0 17
1265: PUSH
1266: LD_VAR 0 17
1270: PUSH
1271: LD_VAR 0 10
1275: ADD
1276: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
1277: LD_VAR 0 10
1281: PPUSH
1282: LD_VAR 0 6
1286: PPUSH
1287: LD_INT 0
1289: PPUSH
1290: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
1294: LD_INT 0
1296: PPUSH
1297: LD_VAR 0 16
1301: PPUSH
1302: CALL_OW 383
// un = CreateHuman ;
1306: LD_ADDR_VAR 0 9
1310: PUSH
1311: CALL_OW 44
1315: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
1316: LD_ADDR_VAR 0 17
1320: PUSH
1321: LD_VAR 0 17
1325: PUSH
1326: LD_VAR 0 9
1330: ADD
1331: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1332: LD_VAR 0 9
1336: PPUSH
1337: LD_VAR 0 10
1341: PPUSH
1342: CALL_OW 52
// SetFuel ( veh , 100 ) ;
1346: LD_VAR 0 10
1350: PPUSH
1351: LD_INT 100
1353: PPUSH
1354: CALL_OW 240
// end ;
1358: GO 1193
1360: POP
1361: POP
// end ; end_of_file
1362: LD_VAR 0 7
1366: RET
// export globalGameSaveCounter ; every 0 0$1 do
1367: GO 1369
1369: DISABLE
// begin enable ;
1370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1371: LD_STRING updateTimer(
1373: PUSH
1374: LD_OWVAR 1
1378: STR
1379: PUSH
1380: LD_STRING );
1382: STR
1383: PPUSH
1384: CALL_OW 559
// end ;
1388: END
// every 0 0$1 do
1389: GO 1391
1391: DISABLE
// begin globalGameSaveCounter := 0 ;
1392: LD_ADDR_EXP 2
1396: PUSH
1397: LD_INT 0
1399: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1400: LD_STRING setGameSaveCounter(0)
1402: PPUSH
1403: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1407: LD_STRING initStreamRollete();
1409: PPUSH
1410: CALL_OW 559
// InitStreamMode ;
1414: CALL 2757 0 0
// DefineStreamItems ( false ) ;
1418: LD_INT 0
1420: PPUSH
1421: CALL 3221 0 1
// end ;
1425: END
// export function SOS_MapStart ( ) ; begin
1426: LD_INT 0
1428: PPUSH
// if streamModeActive then
1429: LD_EXP 3
1433: IFFALSE 1442
// DefineStreamItems ( true ) ;
1435: LD_INT 1
1437: PPUSH
1438: CALL 3221 0 1
// UpdateLuaVariables ( ) ;
1442: CALL 1459 0 0
// UpdateFactoryWaypoints ( ) ;
1446: CALL 16090 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1450: CALL 16347 0 0
// end ;
1454: LD_VAR 0 1
1458: RET
// function UpdateLuaVariables ( ) ; begin
1459: LD_INT 0
1461: PPUSH
// if globalGameSaveCounter then
1462: LD_EXP 2
1466: IFFALSE 1500
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1468: LD_ADDR_EXP 2
1472: PUSH
1473: LD_EXP 2
1477: PPUSH
1478: CALL 61721 0 1
1482: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1483: LD_STRING setGameSaveCounter(
1485: PUSH
1486: LD_EXP 2
1490: STR
1491: PUSH
1492: LD_STRING )
1494: STR
1495: PPUSH
1496: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1500: LD_STRING setGameDifficulty(
1502: PUSH
1503: LD_OWVAR 67
1507: STR
1508: PUSH
1509: LD_STRING )
1511: STR
1512: PPUSH
1513: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
1517: LD_STRING displayDifficulty(
1519: PUSH
1520: LD_OWVAR 67
1524: STR
1525: PUSH
1526: LD_STRING )
1528: STR
1529: PPUSH
1530: CALL_OW 559
// end ;
1534: LD_VAR 0 1
1538: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1539: LD_INT 0
1541: PPUSH
// if p2 = stream_mode then
1542: LD_VAR 0 2
1546: PUSH
1547: LD_INT 100
1549: EQUAL
1550: IFFALSE 2553
// begin if not StreamModeActive then
1552: LD_EXP 3
1556: NOT
1557: IFFALSE 1567
// StreamModeActive := true ;
1559: LD_ADDR_EXP 3
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// if p3 = 0 then
1567: LD_VAR 0 3
1571: PUSH
1572: LD_INT 0
1574: EQUAL
1575: IFFALSE 1581
// InitStreamMode ;
1577: CALL 2757 0 0
// if p3 = 1 then
1581: LD_VAR 0 3
1585: PUSH
1586: LD_INT 1
1588: EQUAL
1589: IFFALSE 1599
// sRocket := true ;
1591: LD_ADDR_EXP 8
1595: PUSH
1596: LD_INT 1
1598: ST_TO_ADDR
// if p3 = 2 then
1599: LD_VAR 0 3
1603: PUSH
1604: LD_INT 2
1606: EQUAL
1607: IFFALSE 1617
// sSpeed := true ;
1609: LD_ADDR_EXP 7
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// if p3 = 3 then
1617: LD_VAR 0 3
1621: PUSH
1622: LD_INT 3
1624: EQUAL
1625: IFFALSE 1635
// sEngine := true ;
1627: LD_ADDR_EXP 9
1631: PUSH
1632: LD_INT 1
1634: ST_TO_ADDR
// if p3 = 4 then
1635: LD_VAR 0 3
1639: PUSH
1640: LD_INT 4
1642: EQUAL
1643: IFFALSE 1653
// sSpec := true ;
1645: LD_ADDR_EXP 6
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// if p3 = 5 then
1653: LD_VAR 0 3
1657: PUSH
1658: LD_INT 5
1660: EQUAL
1661: IFFALSE 1671
// sLevel := true ;
1663: LD_ADDR_EXP 10
1667: PUSH
1668: LD_INT 1
1670: ST_TO_ADDR
// if p3 = 6 then
1671: LD_VAR 0 3
1675: PUSH
1676: LD_INT 6
1678: EQUAL
1679: IFFALSE 1689
// sArmoury := true ;
1681: LD_ADDR_EXP 11
1685: PUSH
1686: LD_INT 1
1688: ST_TO_ADDR
// if p3 = 7 then
1689: LD_VAR 0 3
1693: PUSH
1694: LD_INT 7
1696: EQUAL
1697: IFFALSE 1707
// sRadar := true ;
1699: LD_ADDR_EXP 12
1703: PUSH
1704: LD_INT 1
1706: ST_TO_ADDR
// if p3 = 8 then
1707: LD_VAR 0 3
1711: PUSH
1712: LD_INT 8
1714: EQUAL
1715: IFFALSE 1725
// sBunker := true ;
1717: LD_ADDR_EXP 13
1721: PUSH
1722: LD_INT 1
1724: ST_TO_ADDR
// if p3 = 9 then
1725: LD_VAR 0 3
1729: PUSH
1730: LD_INT 9
1732: EQUAL
1733: IFFALSE 1743
// sHack := true ;
1735: LD_ADDR_EXP 14
1739: PUSH
1740: LD_INT 1
1742: ST_TO_ADDR
// if p3 = 10 then
1743: LD_VAR 0 3
1747: PUSH
1748: LD_INT 10
1750: EQUAL
1751: IFFALSE 1761
// sFire := true ;
1753: LD_ADDR_EXP 15
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// if p3 = 11 then
1761: LD_VAR 0 3
1765: PUSH
1766: LD_INT 11
1768: EQUAL
1769: IFFALSE 1779
// sRefresh := true ;
1771: LD_ADDR_EXP 16
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// if p3 = 12 then
1779: LD_VAR 0 3
1783: PUSH
1784: LD_INT 12
1786: EQUAL
1787: IFFALSE 1797
// sExp := true ;
1789: LD_ADDR_EXP 17
1793: PUSH
1794: LD_INT 1
1796: ST_TO_ADDR
// if p3 = 13 then
1797: LD_VAR 0 3
1801: PUSH
1802: LD_INT 13
1804: EQUAL
1805: IFFALSE 1815
// sDepot := true ;
1807: LD_ADDR_EXP 18
1811: PUSH
1812: LD_INT 1
1814: ST_TO_ADDR
// if p3 = 14 then
1815: LD_VAR 0 3
1819: PUSH
1820: LD_INT 14
1822: EQUAL
1823: IFFALSE 1833
// sFlag := true ;
1825: LD_ADDR_EXP 19
1829: PUSH
1830: LD_INT 1
1832: ST_TO_ADDR
// if p3 = 15 then
1833: LD_VAR 0 3
1837: PUSH
1838: LD_INT 15
1840: EQUAL
1841: IFFALSE 1851
// sKamikadze := true ;
1843: LD_ADDR_EXP 27
1847: PUSH
1848: LD_INT 1
1850: ST_TO_ADDR
// if p3 = 16 then
1851: LD_VAR 0 3
1855: PUSH
1856: LD_INT 16
1858: EQUAL
1859: IFFALSE 1869
// sTroll := true ;
1861: LD_ADDR_EXP 28
1865: PUSH
1866: LD_INT 1
1868: ST_TO_ADDR
// if p3 = 17 then
1869: LD_VAR 0 3
1873: PUSH
1874: LD_INT 17
1876: EQUAL
1877: IFFALSE 1887
// sSlow := true ;
1879: LD_ADDR_EXP 29
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// if p3 = 18 then
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 18
1894: EQUAL
1895: IFFALSE 1905
// sLack := true ;
1897: LD_ADDR_EXP 30
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if p3 = 19 then
1905: LD_VAR 0 3
1909: PUSH
1910: LD_INT 19
1912: EQUAL
1913: IFFALSE 1923
// sTank := true ;
1915: LD_ADDR_EXP 32
1919: PUSH
1920: LD_INT 1
1922: ST_TO_ADDR
// if p3 = 20 then
1923: LD_VAR 0 3
1927: PUSH
1928: LD_INT 20
1930: EQUAL
1931: IFFALSE 1941
// sRemote := true ;
1933: LD_ADDR_EXP 33
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// if p3 = 21 then
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 21
1948: EQUAL
1949: IFFALSE 1959
// sPowell := true ;
1951: LD_ADDR_EXP 34
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// if p3 = 22 then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 22
1966: EQUAL
1967: IFFALSE 1977
// sTeleport := true ;
1969: LD_ADDR_EXP 37
1973: PUSH
1974: LD_INT 1
1976: ST_TO_ADDR
// if p3 = 23 then
1977: LD_VAR 0 3
1981: PUSH
1982: LD_INT 23
1984: EQUAL
1985: IFFALSE 1995
// sOilTower := true ;
1987: LD_ADDR_EXP 39
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if p3 = 24 then
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 24
2002: EQUAL
2003: IFFALSE 2013
// sShovel := true ;
2005: LD_ADDR_EXP 40
2009: PUSH
2010: LD_INT 1
2012: ST_TO_ADDR
// if p3 = 25 then
2013: LD_VAR 0 3
2017: PUSH
2018: LD_INT 25
2020: EQUAL
2021: IFFALSE 2031
// sSheik := true ;
2023: LD_ADDR_EXP 41
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// if p3 = 26 then
2031: LD_VAR 0 3
2035: PUSH
2036: LD_INT 26
2038: EQUAL
2039: IFFALSE 2049
// sEarthquake := true ;
2041: LD_ADDR_EXP 43
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// if p3 = 27 then
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 27
2056: EQUAL
2057: IFFALSE 2067
// sAI := true ;
2059: LD_ADDR_EXP 44
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// if p3 = 28 then
2067: LD_VAR 0 3
2071: PUSH
2072: LD_INT 28
2074: EQUAL
2075: IFFALSE 2085
// sCargo := true ;
2077: LD_ADDR_EXP 47
2081: PUSH
2082: LD_INT 1
2084: ST_TO_ADDR
// if p3 = 29 then
2085: LD_VAR 0 3
2089: PUSH
2090: LD_INT 29
2092: EQUAL
2093: IFFALSE 2103
// sDLaser := true ;
2095: LD_ADDR_EXP 48
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// if p3 = 30 then
2103: LD_VAR 0 3
2107: PUSH
2108: LD_INT 30
2110: EQUAL
2111: IFFALSE 2121
// sExchange := true ;
2113: LD_ADDR_EXP 49
2117: PUSH
2118: LD_INT 1
2120: ST_TO_ADDR
// if p3 = 31 then
2121: LD_VAR 0 3
2125: PUSH
2126: LD_INT 31
2128: EQUAL
2129: IFFALSE 2139
// sFac := true ;
2131: LD_ADDR_EXP 50
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// if p3 = 32 then
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 32
2146: EQUAL
2147: IFFALSE 2157
// sPower := true ;
2149: LD_ADDR_EXP 51
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// if p3 = 33 then
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 33
2164: EQUAL
2165: IFFALSE 2175
// sRandom := true ;
2167: LD_ADDR_EXP 52
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// if p3 = 34 then
2175: LD_VAR 0 3
2179: PUSH
2180: LD_INT 34
2182: EQUAL
2183: IFFALSE 2193
// sShield := true ;
2185: LD_ADDR_EXP 53
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// if p3 = 35 then
2193: LD_VAR 0 3
2197: PUSH
2198: LD_INT 35
2200: EQUAL
2201: IFFALSE 2211
// sTime := true ;
2203: LD_ADDR_EXP 54
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// if p3 = 36 then
2211: LD_VAR 0 3
2215: PUSH
2216: LD_INT 36
2218: EQUAL
2219: IFFALSE 2229
// sTools := true ;
2221: LD_ADDR_EXP 55
2225: PUSH
2226: LD_INT 1
2228: ST_TO_ADDR
// if p3 = 101 then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 101
2236: EQUAL
2237: IFFALSE 2247
// sSold := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// if p3 = 102 then
2247: LD_VAR 0 3
2251: PUSH
2252: LD_INT 102
2254: EQUAL
2255: IFFALSE 2265
// sDiff := true ;
2257: LD_ADDR_EXP 21
2261: PUSH
2262: LD_INT 1
2264: ST_TO_ADDR
// if p3 = 103 then
2265: LD_VAR 0 3
2269: PUSH
2270: LD_INT 103
2272: EQUAL
2273: IFFALSE 2283
// sFog := true ;
2275: LD_ADDR_EXP 24
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// if p3 = 104 then
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 104
2290: EQUAL
2291: IFFALSE 2301
// sReset := true ;
2293: LD_ADDR_EXP 25
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// if p3 = 105 then
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 105
2308: EQUAL
2309: IFFALSE 2319
// sSun := true ;
2311: LD_ADDR_EXP 26
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// if p3 = 106 then
2319: LD_VAR 0 3
2323: PUSH
2324: LD_INT 106
2326: EQUAL
2327: IFFALSE 2337
// sTiger := true ;
2329: LD_ADDR_EXP 22
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// if p3 = 107 then
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 107
2344: EQUAL
2345: IFFALSE 2355
// sBomb := true ;
2347: LD_ADDR_EXP 23
2351: PUSH
2352: LD_INT 1
2354: ST_TO_ADDR
// if p3 = 108 then
2355: LD_VAR 0 3
2359: PUSH
2360: LD_INT 108
2362: EQUAL
2363: IFFALSE 2373
// sWound := true ;
2365: LD_ADDR_EXP 31
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// if p3 = 109 then
2373: LD_VAR 0 3
2377: PUSH
2378: LD_INT 109
2380: EQUAL
2381: IFFALSE 2391
// sBetray := true ;
2383: LD_ADDR_EXP 35
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// if p3 = 110 then
2391: LD_VAR 0 3
2395: PUSH
2396: LD_INT 110
2398: EQUAL
2399: IFFALSE 2409
// sContamin := true ;
2401: LD_ADDR_EXP 36
2405: PUSH
2406: LD_INT 1
2408: ST_TO_ADDR
// if p3 = 111 then
2409: LD_VAR 0 3
2413: PUSH
2414: LD_INT 111
2416: EQUAL
2417: IFFALSE 2427
// sOil := true ;
2419: LD_ADDR_EXP 38
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// if p3 = 112 then
2427: LD_VAR 0 3
2431: PUSH
2432: LD_INT 112
2434: EQUAL
2435: IFFALSE 2445
// sStu := true ;
2437: LD_ADDR_EXP 42
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// if p3 = 113 then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 113
2452: EQUAL
2453: IFFALSE 2463
// sBazooka := true ;
2455: LD_ADDR_EXP 45
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// if p3 = 114 then
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 114
2470: EQUAL
2471: IFFALSE 2481
// sMortar := true ;
2473: LD_ADDR_EXP 46
2477: PUSH
2478: LD_INT 1
2480: ST_TO_ADDR
// if p3 = 115 then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 115
2488: EQUAL
2489: IFFALSE 2499
// sRanger := true ;
2491: LD_ADDR_EXP 56
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// if p3 = 116 then
2499: LD_VAR 0 3
2503: PUSH
2504: LD_INT 116
2506: EQUAL
2507: IFFALSE 2517
// sComputer := true ;
2509: LD_ADDR_EXP 57
2513: PUSH
2514: LD_INT 1
2516: ST_TO_ADDR
// if p3 = 117 then
2517: LD_VAR 0 3
2521: PUSH
2522: LD_INT 117
2524: EQUAL
2525: IFFALSE 2535
// s30 := true ;
2527: LD_ADDR_EXP 58
2531: PUSH
2532: LD_INT 1
2534: ST_TO_ADDR
// if p3 = 118 then
2535: LD_VAR 0 3
2539: PUSH
2540: LD_INT 118
2542: EQUAL
2543: IFFALSE 2553
// s60 := true ;
2545: LD_ADDR_EXP 59
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// end ; if p2 = hack_mode then
2553: LD_VAR 0 2
2557: PUSH
2558: LD_INT 101
2560: EQUAL
2561: IFFALSE 2689
// begin case p3 of 1 :
2563: LD_VAR 0 3
2567: PUSH
2568: LD_INT 1
2570: DOUBLE
2571: EQUAL
2572: IFTRUE 2576
2574: GO 2583
2576: POP
// hHackUnlimitedResources ; 2 :
2577: CALL 14836 0 0
2581: GO 2689
2583: LD_INT 2
2585: DOUBLE
2586: EQUAL
2587: IFTRUE 2591
2589: GO 2598
2591: POP
// hHackSetLevel10 ; 3 :
2592: CALL 14969 0 0
2596: GO 2689
2598: LD_INT 3
2600: DOUBLE
2601: EQUAL
2602: IFTRUE 2606
2604: GO 2613
2606: POP
// hHackSetLevel10YourUnits ; 4 :
2607: CALL 15054 0 0
2611: GO 2689
2613: LD_INT 4
2615: DOUBLE
2616: EQUAL
2617: IFTRUE 2621
2619: GO 2628
2621: POP
// hHackInvincible ; 5 :
2622: CALL 15502 0 0
2626: GO 2689
2628: LD_INT 5
2630: DOUBLE
2631: EQUAL
2632: IFTRUE 2636
2634: GO 2643
2636: POP
// hHackInvisible ; 6 :
2637: CALL 15613 0 0
2641: GO 2689
2643: LD_INT 6
2645: DOUBLE
2646: EQUAL
2647: IFTRUE 2651
2649: GO 2658
2651: POP
// hHackChangeYourSide ; 7 :
2652: CALL 15670 0 0
2656: GO 2689
2658: LD_INT 7
2660: DOUBLE
2661: EQUAL
2662: IFTRUE 2666
2664: GO 2673
2666: POP
// hHackChangeUnitSide ; 8 :
2667: CALL 15712 0 0
2671: GO 2689
2673: LD_INT 8
2675: DOUBLE
2676: EQUAL
2677: IFTRUE 2681
2679: GO 2688
2681: POP
// hHackFog ; end ;
2682: CALL 15813 0 0
2686: GO 2689
2688: POP
// end ; if p2 = game_save_mode then
2689: LD_VAR 0 2
2693: PUSH
2694: LD_INT 102
2696: EQUAL
2697: IFFALSE 2752
// begin if p3 = 1 then
2699: LD_VAR 0 3
2703: PUSH
2704: LD_INT 1
2706: EQUAL
2707: IFFALSE 2719
// globalGameSaveCounter := p4 ;
2709: LD_ADDR_EXP 2
2713: PUSH
2714: LD_VAR 0 4
2718: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
2719: LD_VAR 0 3
2723: PUSH
2724: LD_INT 2
2726: EQUAL
2727: PUSH
2728: LD_EXP 2
2732: AND
2733: IFFALSE 2752
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
2735: LD_STRING setGameSaveCounter(
2737: PUSH
2738: LD_EXP 2
2742: STR
2743: PUSH
2744: LD_STRING )
2746: STR
2747: PPUSH
2748: CALL_OW 559
// end ; end ;
2752: LD_VAR 0 7
2756: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
2757: LD_INT 0
2759: PPUSH
// streamModeActive := false ;
2760: LD_ADDR_EXP 3
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// normalCounter := 36 ;
2768: LD_ADDR_EXP 4
2772: PUSH
2773: LD_INT 36
2775: ST_TO_ADDR
// hardcoreCounter := 18 ;
2776: LD_ADDR_EXP 5
2780: PUSH
2781: LD_INT 18
2783: ST_TO_ADDR
// sRocket := false ;
2784: LD_ADDR_EXP 8
2788: PUSH
2789: LD_INT 0
2791: ST_TO_ADDR
// sSpeed := false ;
2792: LD_ADDR_EXP 7
2796: PUSH
2797: LD_INT 0
2799: ST_TO_ADDR
// sEngine := false ;
2800: LD_ADDR_EXP 9
2804: PUSH
2805: LD_INT 0
2807: ST_TO_ADDR
// sSpec := false ;
2808: LD_ADDR_EXP 6
2812: PUSH
2813: LD_INT 0
2815: ST_TO_ADDR
// sLevel := false ;
2816: LD_ADDR_EXP 10
2820: PUSH
2821: LD_INT 0
2823: ST_TO_ADDR
// sArmoury := false ;
2824: LD_ADDR_EXP 11
2828: PUSH
2829: LD_INT 0
2831: ST_TO_ADDR
// sRadar := false ;
2832: LD_ADDR_EXP 12
2836: PUSH
2837: LD_INT 0
2839: ST_TO_ADDR
// sBunker := false ;
2840: LD_ADDR_EXP 13
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// sHack := false ;
2848: LD_ADDR_EXP 14
2852: PUSH
2853: LD_INT 0
2855: ST_TO_ADDR
// sFire := false ;
2856: LD_ADDR_EXP 15
2860: PUSH
2861: LD_INT 0
2863: ST_TO_ADDR
// sRefresh := false ;
2864: LD_ADDR_EXP 16
2868: PUSH
2869: LD_INT 0
2871: ST_TO_ADDR
// sExp := false ;
2872: LD_ADDR_EXP 17
2876: PUSH
2877: LD_INT 0
2879: ST_TO_ADDR
// sDepot := false ;
2880: LD_ADDR_EXP 18
2884: PUSH
2885: LD_INT 0
2887: ST_TO_ADDR
// sFlag := false ;
2888: LD_ADDR_EXP 19
2892: PUSH
2893: LD_INT 0
2895: ST_TO_ADDR
// sKamikadze := false ;
2896: LD_ADDR_EXP 27
2900: PUSH
2901: LD_INT 0
2903: ST_TO_ADDR
// sTroll := false ;
2904: LD_ADDR_EXP 28
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// sSlow := false ;
2912: LD_ADDR_EXP 29
2916: PUSH
2917: LD_INT 0
2919: ST_TO_ADDR
// sLack := false ;
2920: LD_ADDR_EXP 30
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// sTank := false ;
2928: LD_ADDR_EXP 32
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// sRemote := false ;
2936: LD_ADDR_EXP 33
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// sPowell := false ;
2944: LD_ADDR_EXP 34
2948: PUSH
2949: LD_INT 0
2951: ST_TO_ADDR
// sTeleport := false ;
2952: LD_ADDR_EXP 37
2956: PUSH
2957: LD_INT 0
2959: ST_TO_ADDR
// sOilTower := false ;
2960: LD_ADDR_EXP 39
2964: PUSH
2965: LD_INT 0
2967: ST_TO_ADDR
// sShovel := false ;
2968: LD_ADDR_EXP 40
2972: PUSH
2973: LD_INT 0
2975: ST_TO_ADDR
// sSheik := false ;
2976: LD_ADDR_EXP 41
2980: PUSH
2981: LD_INT 0
2983: ST_TO_ADDR
// sEarthquake := false ;
2984: LD_ADDR_EXP 43
2988: PUSH
2989: LD_INT 0
2991: ST_TO_ADDR
// sAI := false ;
2992: LD_ADDR_EXP 44
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// sCargo := false ;
3000: LD_ADDR_EXP 47
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// sDLaser := false ;
3008: LD_ADDR_EXP 48
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// sExchange := false ;
3016: LD_ADDR_EXP 49
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// sFac := false ;
3024: LD_ADDR_EXP 50
3028: PUSH
3029: LD_INT 0
3031: ST_TO_ADDR
// sPower := false ;
3032: LD_ADDR_EXP 51
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// sRandom := false ;
3040: LD_ADDR_EXP 52
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// sShield := false ;
3048: LD_ADDR_EXP 53
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// sTime := false ;
3056: LD_ADDR_EXP 54
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// sTools := false ;
3064: LD_ADDR_EXP 55
3068: PUSH
3069: LD_INT 0
3071: ST_TO_ADDR
// sSold := false ;
3072: LD_ADDR_EXP 20
3076: PUSH
3077: LD_INT 0
3079: ST_TO_ADDR
// sDiff := false ;
3080: LD_ADDR_EXP 21
3084: PUSH
3085: LD_INT 0
3087: ST_TO_ADDR
// sFog := false ;
3088: LD_ADDR_EXP 24
3092: PUSH
3093: LD_INT 0
3095: ST_TO_ADDR
// sReset := false ;
3096: LD_ADDR_EXP 25
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// sSun := false ;
3104: LD_ADDR_EXP 26
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// sTiger := false ;
3112: LD_ADDR_EXP 22
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// sBomb := false ;
3120: LD_ADDR_EXP 23
3124: PUSH
3125: LD_INT 0
3127: ST_TO_ADDR
// sWound := false ;
3128: LD_ADDR_EXP 31
3132: PUSH
3133: LD_INT 0
3135: ST_TO_ADDR
// sBetray := false ;
3136: LD_ADDR_EXP 35
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// sContamin := false ;
3144: LD_ADDR_EXP 36
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// sOil := false ;
3152: LD_ADDR_EXP 38
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// sStu := false ;
3160: LD_ADDR_EXP 42
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// sBazooka := false ;
3168: LD_ADDR_EXP 45
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// sMortar := false ;
3176: LD_ADDR_EXP 46
3180: PUSH
3181: LD_INT 0
3183: ST_TO_ADDR
// sRanger := false ;
3184: LD_ADDR_EXP 56
3188: PUSH
3189: LD_INT 0
3191: ST_TO_ADDR
// sComputer := false ;
3192: LD_ADDR_EXP 57
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// s30 := false ;
3200: LD_ADDR_EXP 58
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// s60 := false ;
3208: LD_ADDR_EXP 59
3212: PUSH
3213: LD_INT 0
3215: ST_TO_ADDR
// end ;
3216: LD_VAR 0 1
3220: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3221: LD_INT 0
3223: PPUSH
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
3228: PPUSH
3229: PPUSH
// result := [ ] ;
3230: LD_ADDR_VAR 0 2
3234: PUSH
3235: EMPTY
3236: ST_TO_ADDR
// if campaign_id = 1 then
3237: LD_OWVAR 69
3241: PUSH
3242: LD_INT 1
3244: EQUAL
3245: IFFALSE 6411
// begin case mission_number of 1 :
3247: LD_OWVAR 70
3251: PUSH
3252: LD_INT 1
3254: DOUBLE
3255: EQUAL
3256: IFTRUE 3260
3258: GO 3336
3260: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3261: LD_ADDR_VAR 0 2
3265: PUSH
3266: LD_INT 2
3268: PUSH
3269: LD_INT 4
3271: PUSH
3272: LD_INT 11
3274: PUSH
3275: LD_INT 12
3277: PUSH
3278: LD_INT 15
3280: PUSH
3281: LD_INT 16
3283: PUSH
3284: LD_INT 22
3286: PUSH
3287: LD_INT 23
3289: PUSH
3290: LD_INT 26
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 101
3306: PUSH
3307: LD_INT 102
3309: PUSH
3310: LD_INT 106
3312: PUSH
3313: LD_INT 116
3315: PUSH
3316: LD_INT 117
3318: PUSH
3319: LD_INT 118
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: ST_TO_ADDR
3334: GO 6409
3336: LD_INT 2
3338: DOUBLE
3339: EQUAL
3340: IFTRUE 3344
3342: GO 3428
3344: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3345: LD_ADDR_VAR 0 2
3349: PUSH
3350: LD_INT 2
3352: PUSH
3353: LD_INT 4
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 15
3364: PUSH
3365: LD_INT 16
3367: PUSH
3368: LD_INT 22
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 26
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 101
3390: PUSH
3391: LD_INT 102
3393: PUSH
3394: LD_INT 105
3396: PUSH
3397: LD_INT 106
3399: PUSH
3400: LD_INT 108
3402: PUSH
3403: LD_INT 116
3405: PUSH
3406: LD_INT 117
3408: PUSH
3409: LD_INT 118
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: ST_TO_ADDR
3426: GO 6409
3428: LD_INT 3
3430: DOUBLE
3431: EQUAL
3432: IFTRUE 3436
3434: GO 3524
3436: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 4
3447: PUSH
3448: LD_INT 5
3450: PUSH
3451: LD_INT 11
3453: PUSH
3454: LD_INT 12
3456: PUSH
3457: LD_INT 15
3459: PUSH
3460: LD_INT 16
3462: PUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 26
3468: PUSH
3469: LD_INT 36
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 101
3486: PUSH
3487: LD_INT 102
3489: PUSH
3490: LD_INT 105
3492: PUSH
3493: LD_INT 106
3495: PUSH
3496: LD_INT 108
3498: PUSH
3499: LD_INT 116
3501: PUSH
3502: LD_INT 117
3504: PUSH
3505: LD_INT 118
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: ST_TO_ADDR
3522: GO 6409
3524: LD_INT 4
3526: DOUBLE
3527: EQUAL
3528: IFTRUE 3532
3530: GO 3628
3532: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: LD_INT 8
3549: PUSH
3550: LD_INT 11
3552: PUSH
3553: LD_INT 12
3555: PUSH
3556: LD_INT 15
3558: PUSH
3559: LD_INT 16
3561: PUSH
3562: LD_INT 22
3564: PUSH
3565: LD_INT 23
3567: PUSH
3568: LD_INT 26
3570: PUSH
3571: LD_INT 36
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: PUSH
3588: LD_INT 101
3590: PUSH
3591: LD_INT 102
3593: PUSH
3594: LD_INT 105
3596: PUSH
3597: LD_INT 106
3599: PUSH
3600: LD_INT 108
3602: PUSH
3603: LD_INT 116
3605: PUSH
3606: LD_INT 117
3608: PUSH
3609: LD_INT 118
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: ST_TO_ADDR
3626: GO 6409
3628: LD_INT 5
3630: DOUBLE
3631: EQUAL
3632: IFTRUE 3636
3634: GO 3748
3636: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: LD_INT 2
3644: PUSH
3645: LD_INT 4
3647: PUSH
3648: LD_INT 5
3650: PUSH
3651: LD_INT 6
3653: PUSH
3654: LD_INT 8
3656: PUSH
3657: LD_INT 11
3659: PUSH
3660: LD_INT 12
3662: PUSH
3663: LD_INT 15
3665: PUSH
3666: LD_INT 16
3668: PUSH
3669: LD_INT 22
3671: PUSH
3672: LD_INT 23
3674: PUSH
3675: LD_INT 25
3677: PUSH
3678: LD_INT 26
3680: PUSH
3681: LD_INT 36
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 101
3702: PUSH
3703: LD_INT 102
3705: PUSH
3706: LD_INT 105
3708: PUSH
3709: LD_INT 106
3711: PUSH
3712: LD_INT 108
3714: PUSH
3715: LD_INT 109
3717: PUSH
3718: LD_INT 112
3720: PUSH
3721: LD_INT 116
3723: PUSH
3724: LD_INT 117
3726: PUSH
3727: LD_INT 118
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: ST_TO_ADDR
3746: GO 6409
3748: LD_INT 6
3750: DOUBLE
3751: EQUAL
3752: IFTRUE 3756
3754: GO 3888
3756: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: LD_INT 5
3770: PUSH
3771: LD_INT 6
3773: PUSH
3774: LD_INT 8
3776: PUSH
3777: LD_INT 11
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: LD_INT 15
3785: PUSH
3786: LD_INT 16
3788: PUSH
3789: LD_INT 20
3791: PUSH
3792: LD_INT 21
3794: PUSH
3795: LD_INT 22
3797: PUSH
3798: LD_INT 23
3800: PUSH
3801: LD_INT 25
3803: PUSH
3804: LD_INT 26
3806: PUSH
3807: LD_INT 30
3809: PUSH
3810: LD_INT 31
3812: PUSH
3813: LD_INT 32
3815: PUSH
3816: LD_INT 36
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 101
3842: PUSH
3843: LD_INT 102
3845: PUSH
3846: LD_INT 105
3848: PUSH
3849: LD_INT 106
3851: PUSH
3852: LD_INT 108
3854: PUSH
3855: LD_INT 109
3857: PUSH
3858: LD_INT 112
3860: PUSH
3861: LD_INT 116
3863: PUSH
3864: LD_INT 117
3866: PUSH
3867: LD_INT 118
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 6409
3888: LD_INT 7
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 4008
3896: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
3897: LD_ADDR_VAR 0 2
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 4
3907: PUSH
3908: LD_INT 5
3910: PUSH
3911: LD_INT 7
3913: PUSH
3914: LD_INT 11
3916: PUSH
3917: LD_INT 12
3919: PUSH
3920: LD_INT 15
3922: PUSH
3923: LD_INT 16
3925: PUSH
3926: LD_INT 20
3928: PUSH
3929: LD_INT 21
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_INT 23
3937: PUSH
3938: LD_INT 25
3940: PUSH
3941: LD_INT 26
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 101
3962: PUSH
3963: LD_INT 102
3965: PUSH
3966: LD_INT 103
3968: PUSH
3969: LD_INT 105
3971: PUSH
3972: LD_INT 106
3974: PUSH
3975: LD_INT 108
3977: PUSH
3978: LD_INT 112
3980: PUSH
3981: LD_INT 116
3983: PUSH
3984: LD_INT 117
3986: PUSH
3987: LD_INT 118
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: ST_TO_ADDR
4006: GO 6409
4008: LD_INT 8
4010: DOUBLE
4011: EQUAL
4012: IFTRUE 4016
4014: GO 4156
4016: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: LD_INT 2
4024: PUSH
4025: LD_INT 4
4027: PUSH
4028: LD_INT 5
4030: PUSH
4031: LD_INT 6
4033: PUSH
4034: LD_INT 7
4036: PUSH
4037: LD_INT 8
4039: PUSH
4040: LD_INT 11
4042: PUSH
4043: LD_INT 12
4045: PUSH
4046: LD_INT 15
4048: PUSH
4049: LD_INT 16
4051: PUSH
4052: LD_INT 20
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 23
4063: PUSH
4064: LD_INT 25
4066: PUSH
4067: LD_INT 26
4069: PUSH
4070: LD_INT 30
4072: PUSH
4073: LD_INT 31
4075: PUSH
4076: LD_INT 32
4078: PUSH
4079: LD_INT 36
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: LD_INT 101
4106: PUSH
4107: LD_INT 102
4109: PUSH
4110: LD_INT 103
4112: PUSH
4113: LD_INT 105
4115: PUSH
4116: LD_INT 106
4118: PUSH
4119: LD_INT 108
4121: PUSH
4122: LD_INT 109
4124: PUSH
4125: LD_INT 112
4127: PUSH
4128: LD_INT 116
4130: PUSH
4131: LD_INT 117
4133: PUSH
4134: LD_INT 118
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: ST_TO_ADDR
4154: GO 6409
4156: LD_INT 9
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4312
4164: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4165: LD_ADDR_VAR 0 2
4169: PUSH
4170: LD_INT 2
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: LD_INT 5
4178: PUSH
4179: LD_INT 6
4181: PUSH
4182: LD_INT 7
4184: PUSH
4185: LD_INT 8
4187: PUSH
4188: LD_INT 11
4190: PUSH
4191: LD_INT 12
4193: PUSH
4194: LD_INT 15
4196: PUSH
4197: LD_INT 16
4199: PUSH
4200: LD_INT 20
4202: PUSH
4203: LD_INT 21
4205: PUSH
4206: LD_INT 22
4208: PUSH
4209: LD_INT 23
4211: PUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 26
4217: PUSH
4218: LD_INT 28
4220: PUSH
4221: LD_INT 30
4223: PUSH
4224: LD_INT 31
4226: PUSH
4227: LD_INT 32
4229: PUSH
4230: LD_INT 36
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 101
4258: PUSH
4259: LD_INT 102
4261: PUSH
4262: LD_INT 103
4264: PUSH
4265: LD_INT 105
4267: PUSH
4268: LD_INT 106
4270: PUSH
4271: LD_INT 108
4273: PUSH
4274: LD_INT 109
4276: PUSH
4277: LD_INT 112
4279: PUSH
4280: LD_INT 114
4282: PUSH
4283: LD_INT 116
4285: PUSH
4286: LD_INT 117
4288: PUSH
4289: LD_INT 118
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: ST_TO_ADDR
4310: GO 6409
4312: LD_INT 10
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4516
4320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: LD_INT 2
4328: PUSH
4329: LD_INT 4
4331: PUSH
4332: LD_INT 5
4334: PUSH
4335: LD_INT 6
4337: PUSH
4338: LD_INT 7
4340: PUSH
4341: LD_INT 8
4343: PUSH
4344: LD_INT 9
4346: PUSH
4347: LD_INT 10
4349: PUSH
4350: LD_INT 11
4352: PUSH
4353: LD_INT 12
4355: PUSH
4356: LD_INT 13
4358: PUSH
4359: LD_INT 14
4361: PUSH
4362: LD_INT 15
4364: PUSH
4365: LD_INT 16
4367: PUSH
4368: LD_INT 17
4370: PUSH
4371: LD_INT 18
4373: PUSH
4374: LD_INT 19
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 24
4391: PUSH
4392: LD_INT 25
4394: PUSH
4395: LD_INT 26
4397: PUSH
4398: LD_INT 28
4400: PUSH
4401: LD_INT 30
4403: PUSH
4404: LD_INT 31
4406: PUSH
4407: LD_INT 32
4409: PUSH
4410: LD_INT 36
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 101
4446: PUSH
4447: LD_INT 102
4449: PUSH
4450: LD_INT 103
4452: PUSH
4453: LD_INT 104
4455: PUSH
4456: LD_INT 105
4458: PUSH
4459: LD_INT 106
4461: PUSH
4462: LD_INT 107
4464: PUSH
4465: LD_INT 108
4467: PUSH
4468: LD_INT 109
4470: PUSH
4471: LD_INT 110
4473: PUSH
4474: LD_INT 111
4476: PUSH
4477: LD_INT 112
4479: PUSH
4480: LD_INT 114
4482: PUSH
4483: LD_INT 116
4485: PUSH
4486: LD_INT 117
4488: PUSH
4489: LD_INT 118
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: ST_TO_ADDR
4514: GO 6409
4516: LD_INT 11
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4728
4524: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4525: LD_ADDR_VAR 0 2
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: LD_INT 3
4535: PUSH
4536: LD_INT 4
4538: PUSH
4539: LD_INT 5
4541: PUSH
4542: LD_INT 6
4544: PUSH
4545: LD_INT 7
4547: PUSH
4548: LD_INT 8
4550: PUSH
4551: LD_INT 9
4553: PUSH
4554: LD_INT 10
4556: PUSH
4557: LD_INT 11
4559: PUSH
4560: LD_INT 12
4562: PUSH
4563: LD_INT 13
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 15
4571: PUSH
4572: LD_INT 16
4574: PUSH
4575: LD_INT 17
4577: PUSH
4578: LD_INT 18
4580: PUSH
4581: LD_INT 19
4583: PUSH
4584: LD_INT 20
4586: PUSH
4587: LD_INT 21
4589: PUSH
4590: LD_INT 22
4592: PUSH
4593: LD_INT 23
4595: PUSH
4596: LD_INT 24
4598: PUSH
4599: LD_INT 25
4601: PUSH
4602: LD_INT 26
4604: PUSH
4605: LD_INT 28
4607: PUSH
4608: LD_INT 30
4610: PUSH
4611: LD_INT 31
4613: PUSH
4614: LD_INT 32
4616: PUSH
4617: LD_INT 34
4619: PUSH
4620: LD_INT 36
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_INT 101
4658: PUSH
4659: LD_INT 102
4661: PUSH
4662: LD_INT 103
4664: PUSH
4665: LD_INT 104
4667: PUSH
4668: LD_INT 105
4670: PUSH
4671: LD_INT 106
4673: PUSH
4674: LD_INT 107
4676: PUSH
4677: LD_INT 108
4679: PUSH
4680: LD_INT 109
4682: PUSH
4683: LD_INT 110
4685: PUSH
4686: LD_INT 111
4688: PUSH
4689: LD_INT 112
4691: PUSH
4692: LD_INT 114
4694: PUSH
4695: LD_INT 116
4697: PUSH
4698: LD_INT 117
4700: PUSH
4701: LD_INT 118
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: ST_TO_ADDR
4726: GO 6409
4728: LD_INT 12
4730: DOUBLE
4731: EQUAL
4732: IFTRUE 4736
4734: GO 4956
4736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
4737: LD_ADDR_VAR 0 2
4741: PUSH
4742: LD_INT 1
4744: PUSH
4745: LD_INT 2
4747: PUSH
4748: LD_INT 3
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: LD_INT 5
4756: PUSH
4757: LD_INT 6
4759: PUSH
4760: LD_INT 7
4762: PUSH
4763: LD_INT 8
4765: PUSH
4766: LD_INT 9
4768: PUSH
4769: LD_INT 10
4771: PUSH
4772: LD_INT 11
4774: PUSH
4775: LD_INT 12
4777: PUSH
4778: LD_INT 13
4780: PUSH
4781: LD_INT 14
4783: PUSH
4784: LD_INT 15
4786: PUSH
4787: LD_INT 16
4789: PUSH
4790: LD_INT 17
4792: PUSH
4793: LD_INT 18
4795: PUSH
4796: LD_INT 19
4798: PUSH
4799: LD_INT 20
4801: PUSH
4802: LD_INT 21
4804: PUSH
4805: LD_INT 22
4807: PUSH
4808: LD_INT 23
4810: PUSH
4811: LD_INT 24
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 26
4819: PUSH
4820: LD_INT 27
4822: PUSH
4823: LD_INT 28
4825: PUSH
4826: LD_INT 30
4828: PUSH
4829: LD_INT 31
4831: PUSH
4832: LD_INT 32
4834: PUSH
4835: LD_INT 33
4837: PUSH
4838: LD_INT 34
4840: PUSH
4841: LD_INT 36
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 101
4882: PUSH
4883: LD_INT 102
4885: PUSH
4886: LD_INT 103
4888: PUSH
4889: LD_INT 104
4891: PUSH
4892: LD_INT 105
4894: PUSH
4895: LD_INT 106
4897: PUSH
4898: LD_INT 107
4900: PUSH
4901: LD_INT 108
4903: PUSH
4904: LD_INT 109
4906: PUSH
4907: LD_INT 110
4909: PUSH
4910: LD_INT 111
4912: PUSH
4913: LD_INT 112
4915: PUSH
4916: LD_INT 113
4918: PUSH
4919: LD_INT 114
4921: PUSH
4922: LD_INT 116
4924: PUSH
4925: LD_INT 117
4927: PUSH
4928: LD_INT 118
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: ST_TO_ADDR
4954: GO 6409
4956: LD_INT 13
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 5172
4964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
4965: LD_ADDR_VAR 0 2
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: LD_INT 2
4975: PUSH
4976: LD_INT 3
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: LD_INT 5
4984: PUSH
4985: LD_INT 8
4987: PUSH
4988: LD_INT 9
4990: PUSH
4991: LD_INT 10
4993: PUSH
4994: LD_INT 11
4996: PUSH
4997: LD_INT 12
4999: PUSH
5000: LD_INT 14
5002: PUSH
5003: LD_INT 15
5005: PUSH
5006: LD_INT 16
5008: PUSH
5009: LD_INT 17
5011: PUSH
5012: LD_INT 18
5014: PUSH
5015: LD_INT 19
5017: PUSH
5018: LD_INT 20
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 22
5026: PUSH
5027: LD_INT 23
5029: PUSH
5030: LD_INT 24
5032: PUSH
5033: LD_INT 25
5035: PUSH
5036: LD_INT 26
5038: PUSH
5039: LD_INT 27
5041: PUSH
5042: LD_INT 28
5044: PUSH
5045: LD_INT 30
5047: PUSH
5048: LD_INT 31
5050: PUSH
5051: LD_INT 32
5053: PUSH
5054: LD_INT 33
5056: PUSH
5057: LD_INT 34
5059: PUSH
5060: LD_INT 36
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 101
5098: PUSH
5099: LD_INT 102
5101: PUSH
5102: LD_INT 103
5104: PUSH
5105: LD_INT 104
5107: PUSH
5108: LD_INT 105
5110: PUSH
5111: LD_INT 106
5113: PUSH
5114: LD_INT 107
5116: PUSH
5117: LD_INT 108
5119: PUSH
5120: LD_INT 109
5122: PUSH
5123: LD_INT 110
5125: PUSH
5126: LD_INT 111
5128: PUSH
5129: LD_INT 112
5131: PUSH
5132: LD_INT 113
5134: PUSH
5135: LD_INT 114
5137: PUSH
5138: LD_INT 116
5140: PUSH
5141: LD_INT 117
5143: PUSH
5144: LD_INT 118
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: ST_TO_ADDR
5170: GO 6409
5172: LD_INT 14
5174: DOUBLE
5175: EQUAL
5176: IFTRUE 5180
5178: GO 5404
5180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5181: LD_ADDR_VAR 0 2
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: LD_INT 3
5194: PUSH
5195: LD_INT 4
5197: PUSH
5198: LD_INT 5
5200: PUSH
5201: LD_INT 6
5203: PUSH
5204: LD_INT 7
5206: PUSH
5207: LD_INT 8
5209: PUSH
5210: LD_INT 9
5212: PUSH
5213: LD_INT 10
5215: PUSH
5216: LD_INT 11
5218: PUSH
5219: LD_INT 12
5221: PUSH
5222: LD_INT 13
5224: PUSH
5225: LD_INT 14
5227: PUSH
5228: LD_INT 15
5230: PUSH
5231: LD_INT 16
5233: PUSH
5234: LD_INT 17
5236: PUSH
5237: LD_INT 18
5239: PUSH
5240: LD_INT 19
5242: PUSH
5243: LD_INT 20
5245: PUSH
5246: LD_INT 21
5248: PUSH
5249: LD_INT 22
5251: PUSH
5252: LD_INT 23
5254: PUSH
5255: LD_INT 24
5257: PUSH
5258: LD_INT 25
5260: PUSH
5261: LD_INT 26
5263: PUSH
5264: LD_INT 27
5266: PUSH
5267: LD_INT 28
5269: PUSH
5270: LD_INT 29
5272: PUSH
5273: LD_INT 30
5275: PUSH
5276: LD_INT 31
5278: PUSH
5279: LD_INT 32
5281: PUSH
5282: LD_INT 33
5284: PUSH
5285: LD_INT 34
5287: PUSH
5288: LD_INT 36
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 101
5330: PUSH
5331: LD_INT 102
5333: PUSH
5334: LD_INT 103
5336: PUSH
5337: LD_INT 104
5339: PUSH
5340: LD_INT 105
5342: PUSH
5343: LD_INT 106
5345: PUSH
5346: LD_INT 107
5348: PUSH
5349: LD_INT 108
5351: PUSH
5352: LD_INT 109
5354: PUSH
5355: LD_INT 110
5357: PUSH
5358: LD_INT 111
5360: PUSH
5361: LD_INT 112
5363: PUSH
5364: LD_INT 113
5366: PUSH
5367: LD_INT 114
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 117
5375: PUSH
5376: LD_INT 118
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: ST_TO_ADDR
5402: GO 6409
5404: LD_INT 15
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5636
5412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: LD_INT 1
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 3
5426: PUSH
5427: LD_INT 4
5429: PUSH
5430: LD_INT 5
5432: PUSH
5433: LD_INT 6
5435: PUSH
5436: LD_INT 7
5438: PUSH
5439: LD_INT 8
5441: PUSH
5442: LD_INT 9
5444: PUSH
5445: LD_INT 10
5447: PUSH
5448: LD_INT 11
5450: PUSH
5451: LD_INT 12
5453: PUSH
5454: LD_INT 13
5456: PUSH
5457: LD_INT 14
5459: PUSH
5460: LD_INT 15
5462: PUSH
5463: LD_INT 16
5465: PUSH
5466: LD_INT 17
5468: PUSH
5469: LD_INT 18
5471: PUSH
5472: LD_INT 19
5474: PUSH
5475: LD_INT 20
5477: PUSH
5478: LD_INT 21
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_INT 23
5486: PUSH
5487: LD_INT 24
5489: PUSH
5490: LD_INT 25
5492: PUSH
5493: LD_INT 26
5495: PUSH
5496: LD_INT 27
5498: PUSH
5499: LD_INT 28
5501: PUSH
5502: LD_INT 29
5504: PUSH
5505: LD_INT 30
5507: PUSH
5508: LD_INT 31
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 33
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 36
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 101
5562: PUSH
5563: LD_INT 102
5565: PUSH
5566: LD_INT 103
5568: PUSH
5569: LD_INT 104
5571: PUSH
5572: LD_INT 105
5574: PUSH
5575: LD_INT 106
5577: PUSH
5578: LD_INT 107
5580: PUSH
5581: LD_INT 108
5583: PUSH
5584: LD_INT 109
5586: PUSH
5587: LD_INT 110
5589: PUSH
5590: LD_INT 111
5592: PUSH
5593: LD_INT 112
5595: PUSH
5596: LD_INT 113
5598: PUSH
5599: LD_INT 114
5601: PUSH
5602: LD_INT 116
5604: PUSH
5605: LD_INT 117
5607: PUSH
5608: LD_INT 118
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: ST_TO_ADDR
5634: GO 6409
5636: LD_INT 16
5638: DOUBLE
5639: EQUAL
5640: IFTRUE 5644
5642: GO 5780
5644: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: LD_INT 5
5658: PUSH
5659: LD_INT 7
5661: PUSH
5662: LD_INT 11
5664: PUSH
5665: LD_INT 12
5667: PUSH
5668: LD_INT 15
5670: PUSH
5671: LD_INT 16
5673: PUSH
5674: LD_INT 20
5676: PUSH
5677: LD_INT 21
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 23
5685: PUSH
5686: LD_INT 25
5688: PUSH
5689: LD_INT 26
5691: PUSH
5692: LD_INT 30
5694: PUSH
5695: LD_INT 31
5697: PUSH
5698: LD_INT 32
5700: PUSH
5701: LD_INT 33
5703: PUSH
5704: LD_INT 34
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 101
5730: PUSH
5731: LD_INT 102
5733: PUSH
5734: LD_INT 103
5736: PUSH
5737: LD_INT 106
5739: PUSH
5740: LD_INT 108
5742: PUSH
5743: LD_INT 112
5745: PUSH
5746: LD_INT 113
5748: PUSH
5749: LD_INT 114
5751: PUSH
5752: LD_INT 116
5754: PUSH
5755: LD_INT 117
5757: PUSH
5758: LD_INT 118
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: ST_TO_ADDR
5778: GO 6409
5780: LD_INT 17
5782: DOUBLE
5783: EQUAL
5784: IFTRUE 5788
5786: GO 6012
5788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
5789: LD_ADDR_VAR 0 2
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: LD_INT 2
5799: PUSH
5800: LD_INT 3
5802: PUSH
5803: LD_INT 4
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: LD_INT 6
5811: PUSH
5812: LD_INT 7
5814: PUSH
5815: LD_INT 8
5817: PUSH
5818: LD_INT 9
5820: PUSH
5821: LD_INT 10
5823: PUSH
5824: LD_INT 11
5826: PUSH
5827: LD_INT 12
5829: PUSH
5830: LD_INT 13
5832: PUSH
5833: LD_INT 14
5835: PUSH
5836: LD_INT 15
5838: PUSH
5839: LD_INT 16
5841: PUSH
5842: LD_INT 17
5844: PUSH
5845: LD_INT 18
5847: PUSH
5848: LD_INT 19
5850: PUSH
5851: LD_INT 20
5853: PUSH
5854: LD_INT 21
5856: PUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 23
5862: PUSH
5863: LD_INT 24
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 26
5871: PUSH
5872: LD_INT 27
5874: PUSH
5875: LD_INT 28
5877: PUSH
5878: LD_INT 29
5880: PUSH
5881: LD_INT 30
5883: PUSH
5884: LD_INT 31
5886: PUSH
5887: LD_INT 32
5889: PUSH
5890: LD_INT 33
5892: PUSH
5893: LD_INT 34
5895: PUSH
5896: LD_INT 36
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 101
5938: PUSH
5939: LD_INT 102
5941: PUSH
5942: LD_INT 103
5944: PUSH
5945: LD_INT 104
5947: PUSH
5948: LD_INT 105
5950: PUSH
5951: LD_INT 106
5953: PUSH
5954: LD_INT 107
5956: PUSH
5957: LD_INT 108
5959: PUSH
5960: LD_INT 109
5962: PUSH
5963: LD_INT 110
5965: PUSH
5966: LD_INT 111
5968: PUSH
5969: LD_INT 112
5971: PUSH
5972: LD_INT 113
5974: PUSH
5975: LD_INT 114
5977: PUSH
5978: LD_INT 116
5980: PUSH
5981: LD_INT 117
5983: PUSH
5984: LD_INT 118
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: ST_TO_ADDR
6010: GO 6409
6012: LD_INT 18
6014: DOUBLE
6015: EQUAL
6016: IFTRUE 6020
6018: GO 6168
6020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: PUSH
6029: LD_INT 4
6031: PUSH
6032: LD_INT 5
6034: PUSH
6035: LD_INT 7
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 12
6043: PUSH
6044: LD_INT 15
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 20
6052: PUSH
6053: LD_INT 21
6055: PUSH
6056: LD_INT 22
6058: PUSH
6059: LD_INT 23
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 26
6067: PUSH
6068: LD_INT 30
6070: PUSH
6071: LD_INT 31
6073: PUSH
6074: LD_INT 32
6076: PUSH
6077: LD_INT 33
6079: PUSH
6080: LD_INT 34
6082: PUSH
6083: LD_INT 35
6085: PUSH
6086: LD_INT 36
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 101
6114: PUSH
6115: LD_INT 102
6117: PUSH
6118: LD_INT 103
6120: PUSH
6121: LD_INT 106
6123: PUSH
6124: LD_INT 108
6126: PUSH
6127: LD_INT 112
6129: PUSH
6130: LD_INT 113
6132: PUSH
6133: LD_INT 114
6135: PUSH
6136: LD_INT 115
6138: PUSH
6139: LD_INT 116
6141: PUSH
6142: LD_INT 117
6144: PUSH
6145: LD_INT 118
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: ST_TO_ADDR
6166: GO 6409
6168: LD_INT 19
6170: DOUBLE
6171: EQUAL
6172: IFTRUE 6176
6174: GO 6408
6176: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6177: LD_ADDR_VAR 0 2
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: LD_INT 4
6193: PUSH
6194: LD_INT 5
6196: PUSH
6197: LD_INT 6
6199: PUSH
6200: LD_INT 7
6202: PUSH
6203: LD_INT 8
6205: PUSH
6206: LD_INT 9
6208: PUSH
6209: LD_INT 10
6211: PUSH
6212: LD_INT 11
6214: PUSH
6215: LD_INT 12
6217: PUSH
6218: LD_INT 13
6220: PUSH
6221: LD_INT 14
6223: PUSH
6224: LD_INT 15
6226: PUSH
6227: LD_INT 16
6229: PUSH
6230: LD_INT 17
6232: PUSH
6233: LD_INT 18
6235: PUSH
6236: LD_INT 19
6238: PUSH
6239: LD_INT 20
6241: PUSH
6242: LD_INT 21
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 23
6250: PUSH
6251: LD_INT 24
6253: PUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 26
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 28
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 30
6271: PUSH
6272: LD_INT 31
6274: PUSH
6275: LD_INT 32
6277: PUSH
6278: LD_INT 33
6280: PUSH
6281: LD_INT 34
6283: PUSH
6284: LD_INT 35
6286: PUSH
6287: LD_INT 36
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 101
6330: PUSH
6331: LD_INT 102
6333: PUSH
6334: LD_INT 103
6336: PUSH
6337: LD_INT 104
6339: PUSH
6340: LD_INT 105
6342: PUSH
6343: LD_INT 106
6345: PUSH
6346: LD_INT 107
6348: PUSH
6349: LD_INT 108
6351: PUSH
6352: LD_INT 109
6354: PUSH
6355: LD_INT 110
6357: PUSH
6358: LD_INT 111
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 113
6366: PUSH
6367: LD_INT 114
6369: PUSH
6370: LD_INT 115
6372: PUSH
6373: LD_INT 116
6375: PUSH
6376: LD_INT 117
6378: PUSH
6379: LD_INT 118
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: ST_TO_ADDR
6406: GO 6409
6408: POP
// end else
6409: GO 6640
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6411: LD_ADDR_VAR 0 2
6415: PUSH
6416: LD_INT 1
6418: PUSH
6419: LD_INT 2
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: LD_INT 4
6427: PUSH
6428: LD_INT 5
6430: PUSH
6431: LD_INT 6
6433: PUSH
6434: LD_INT 7
6436: PUSH
6437: LD_INT 8
6439: PUSH
6440: LD_INT 9
6442: PUSH
6443: LD_INT 10
6445: PUSH
6446: LD_INT 11
6448: PUSH
6449: LD_INT 12
6451: PUSH
6452: LD_INT 13
6454: PUSH
6455: LD_INT 14
6457: PUSH
6458: LD_INT 15
6460: PUSH
6461: LD_INT 16
6463: PUSH
6464: LD_INT 17
6466: PUSH
6467: LD_INT 18
6469: PUSH
6470: LD_INT 19
6472: PUSH
6473: LD_INT 20
6475: PUSH
6476: LD_INT 21
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 23
6484: PUSH
6485: LD_INT 24
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 26
6493: PUSH
6494: LD_INT 27
6496: PUSH
6497: LD_INT 28
6499: PUSH
6500: LD_INT 29
6502: PUSH
6503: LD_INT 30
6505: PUSH
6506: LD_INT 31
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 33
6514: PUSH
6515: LD_INT 34
6517: PUSH
6518: LD_INT 35
6520: PUSH
6521: LD_INT 36
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 101
6564: PUSH
6565: LD_INT 102
6567: PUSH
6568: LD_INT 103
6570: PUSH
6571: LD_INT 104
6573: PUSH
6574: LD_INT 105
6576: PUSH
6577: LD_INT 106
6579: PUSH
6580: LD_INT 107
6582: PUSH
6583: LD_INT 108
6585: PUSH
6586: LD_INT 109
6588: PUSH
6589: LD_INT 110
6591: PUSH
6592: LD_INT 111
6594: PUSH
6595: LD_INT 112
6597: PUSH
6598: LD_INT 113
6600: PUSH
6601: LD_INT 114
6603: PUSH
6604: LD_INT 115
6606: PUSH
6607: LD_INT 116
6609: PUSH
6610: LD_INT 117
6612: PUSH
6613: LD_INT 118
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ST_TO_ADDR
// if result then
6640: LD_VAR 0 2
6644: IFFALSE 7430
// begin normal :=  ;
6646: LD_ADDR_VAR 0 5
6650: PUSH
6651: LD_STRING 
6653: ST_TO_ADDR
// hardcore :=  ;
6654: LD_ADDR_VAR 0 6
6658: PUSH
6659: LD_STRING 
6661: ST_TO_ADDR
// active :=  ;
6662: LD_ADDR_VAR 0 7
6666: PUSH
6667: LD_STRING 
6669: ST_TO_ADDR
// for i = 1 to normalCounter do
6670: LD_ADDR_VAR 0 8
6674: PUSH
6675: DOUBLE
6676: LD_INT 1
6678: DEC
6679: ST_TO_ADDR
6680: LD_EXP 4
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6787
// begin tmp := 0 ;
6688: LD_ADDR_VAR 0 3
6692: PUSH
6693: LD_STRING 0
6695: ST_TO_ADDR
// if result [ 1 ] then
6696: LD_VAR 0 2
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: IFFALSE 6769
// if result [ 1 ] [ 1 ] = i then
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 8
6723: EQUAL
6724: IFFALSE 6769
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
6726: LD_ADDR_VAR 0 2
6730: PUSH
6731: LD_VAR 0 2
6735: PPUSH
6736: LD_INT 1
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: PPUSH
6748: LD_INT 1
6750: PPUSH
6751: CALL_OW 3
6755: PPUSH
6756: CALL_OW 1
6760: ST_TO_ADDR
// tmp := 1 ;
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_STRING 1
6768: ST_TO_ADDR
// end ; normal := normal & tmp ;
6769: LD_ADDR_VAR 0 5
6773: PUSH
6774: LD_VAR 0 5
6778: PUSH
6779: LD_VAR 0 3
6783: STR
6784: ST_TO_ADDR
// end ;
6785: GO 6685
6787: POP
6788: POP
// for i = 1 to hardcoreCounter do
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_EXP 5
6803: PUSH
6804: FOR_TO
6805: IFFALSE 6910
// begin tmp := 0 ;
6807: LD_ADDR_VAR 0 3
6811: PUSH
6812: LD_STRING 0
6814: ST_TO_ADDR
// if result [ 2 ] then
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 2
6822: ARRAY
6823: IFFALSE 6892
// if result [ 2 ] [ 1 ] = 100 + i then
6825: LD_VAR 0 2
6829: PUSH
6830: LD_INT 2
6832: ARRAY
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PUSH
6838: LD_INT 100
6840: PUSH
6841: LD_VAR 0 8
6845: PLUS
6846: EQUAL
6847: IFFALSE 6892
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
6849: LD_ADDR_VAR 0 2
6853: PUSH
6854: LD_VAR 0 2
6858: PPUSH
6859: LD_INT 2
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PPUSH
6871: LD_INT 1
6873: PPUSH
6874: CALL_OW 3
6878: PPUSH
6879: CALL_OW 1
6883: ST_TO_ADDR
// tmp := 1 ;
6884: LD_ADDR_VAR 0 3
6888: PUSH
6889: LD_STRING 1
6891: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
6892: LD_ADDR_VAR 0 6
6896: PUSH
6897: LD_VAR 0 6
6901: PUSH
6902: LD_VAR 0 3
6906: STR
6907: ST_TO_ADDR
// end ;
6908: GO 6804
6910: POP
6911: POP
// if isGameLoad then
6912: LD_VAR 0 1
6916: IFFALSE 7391
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: LD_EXP 8
6927: PUSH
6928: LD_EXP 7
6932: PUSH
6933: LD_EXP 9
6937: PUSH
6938: LD_EXP 6
6942: PUSH
6943: LD_EXP 10
6947: PUSH
6948: LD_EXP 11
6952: PUSH
6953: LD_EXP 12
6957: PUSH
6958: LD_EXP 13
6962: PUSH
6963: LD_EXP 14
6967: PUSH
6968: LD_EXP 15
6972: PUSH
6973: LD_EXP 16
6977: PUSH
6978: LD_EXP 17
6982: PUSH
6983: LD_EXP 18
6987: PUSH
6988: LD_EXP 19
6992: PUSH
6993: LD_EXP 27
6997: PUSH
6998: LD_EXP 28
7002: PUSH
7003: LD_EXP 29
7007: PUSH
7008: LD_EXP 30
7012: PUSH
7013: LD_EXP 32
7017: PUSH
7018: LD_EXP 33
7022: PUSH
7023: LD_EXP 34
7027: PUSH
7028: LD_EXP 37
7032: PUSH
7033: LD_EXP 39
7037: PUSH
7038: LD_EXP 40
7042: PUSH
7043: LD_EXP 41
7047: PUSH
7048: LD_EXP 43
7052: PUSH
7053: LD_EXP 44
7057: PUSH
7058: LD_EXP 47
7062: PUSH
7063: LD_EXP 48
7067: PUSH
7068: LD_EXP 49
7072: PUSH
7073: LD_EXP 50
7077: PUSH
7078: LD_EXP 51
7082: PUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_EXP 53
7092: PUSH
7093: LD_EXP 54
7097: PUSH
7098: LD_EXP 55
7102: PUSH
7103: LD_EXP 20
7107: PUSH
7108: LD_EXP 21
7112: PUSH
7113: LD_EXP 24
7117: PUSH
7118: LD_EXP 25
7122: PUSH
7123: LD_EXP 26
7127: PUSH
7128: LD_EXP 22
7132: PUSH
7133: LD_EXP 23
7137: PUSH
7138: LD_EXP 31
7142: PUSH
7143: LD_EXP 35
7147: PUSH
7148: LD_EXP 36
7152: PUSH
7153: LD_EXP 38
7157: PUSH
7158: LD_EXP 42
7162: PUSH
7163: LD_EXP 45
7167: PUSH
7168: LD_EXP 46
7172: PUSH
7173: LD_EXP 56
7177: PUSH
7178: LD_EXP 57
7182: PUSH
7183: LD_EXP 58
7187: PUSH
7188: LD_EXP 59
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: ST_TO_ADDR
// tmp :=  ;
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_STRING 
7256: ST_TO_ADDR
// for i = 1 to normalCounter do
7257: LD_ADDR_VAR 0 8
7261: PUSH
7262: DOUBLE
7263: LD_INT 1
7265: DEC
7266: ST_TO_ADDR
7267: LD_EXP 4
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7309
// begin if flags [ i ] then
7275: LD_VAR 0 4
7279: PUSH
7280: LD_VAR 0 8
7284: ARRAY
7285: IFFALSE 7307
// tmp := tmp & i & ; ;
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_VAR 0 3
7296: PUSH
7297: LD_VAR 0 8
7301: STR
7302: PUSH
7303: LD_STRING ;
7305: STR
7306: ST_TO_ADDR
// end ;
7307: GO 7272
7309: POP
7310: POP
// for i = 1 to hardcoreCounter do
7311: LD_ADDR_VAR 0 8
7315: PUSH
7316: DOUBLE
7317: LD_INT 1
7319: DEC
7320: ST_TO_ADDR
7321: LD_EXP 5
7325: PUSH
7326: FOR_TO
7327: IFFALSE 7373
// begin if flags [ normalCounter + i ] then
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 4
7338: PUSH
7339: LD_VAR 0 8
7343: PLUS
7344: ARRAY
7345: IFFALSE 7371
// tmp := tmp & ( 100 + i ) & ; ;
7347: LD_ADDR_VAR 0 3
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 100
7359: PUSH
7360: LD_VAR 0 8
7364: PLUS
7365: STR
7366: PUSH
7367: LD_STRING ;
7369: STR
7370: ST_TO_ADDR
// end ;
7371: GO 7326
7373: POP
7374: POP
// if tmp then
7375: LD_VAR 0 3
7379: IFFALSE 7391
// active := tmp ;
7381: LD_ADDR_VAR 0 7
7385: PUSH
7386: LD_VAR 0 3
7390: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7391: LD_STRING getStreamItemsFromMission("
7393: PUSH
7394: LD_VAR 0 5
7398: STR
7399: PUSH
7400: LD_STRING ","
7402: STR
7403: PUSH
7404: LD_VAR 0 6
7408: STR
7409: PUSH
7410: LD_STRING ","
7412: STR
7413: PUSH
7414: LD_VAR 0 7
7418: STR
7419: PUSH
7420: LD_STRING ")
7422: STR
7423: PPUSH
7424: CALL_OW 559
// end else
7428: GO 7437
// ToLua ( getStreamItemsFromMission("","","") ) ;
7430: LD_STRING getStreamItemsFromMission("","","")
7432: PPUSH
7433: CALL_OW 559
// end ;
7437: LD_VAR 0 2
7441: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7442: LD_EXP 3
7446: PUSH
7447: LD_EXP 8
7451: AND
7452: IFFALSE 7576
7454: GO 7456
7456: DISABLE
7457: LD_INT 0
7459: PPUSH
7460: PPUSH
// begin enable ;
7461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7462: LD_ADDR_VAR 0 2
7466: PUSH
7467: LD_INT 22
7469: PUSH
7470: LD_OWVAR 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 2
7481: PUSH
7482: LD_INT 34
7484: PUSH
7485: LD_INT 7
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 34
7494: PUSH
7495: LD_INT 45
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: LD_INT 34
7504: PUSH
7505: LD_INT 28
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 47
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// if not tmp then
7538: LD_VAR 0 2
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 7576
// for i in tmp do
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7574
// begin SetLives ( i , 0 ) ;
7560: LD_VAR 0 1
7564: PPUSH
7565: LD_INT 0
7567: PPUSH
7568: CALL_OW 234
// end ;
7572: GO 7557
7574: POP
7575: POP
// end ;
7576: PPOPN 2
7578: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7579: LD_EXP 3
7583: PUSH
7584: LD_EXP 9
7588: AND
7589: IFFALSE 7673
7591: GO 7593
7593: DISABLE
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
// begin enable ;
7598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7599: LD_ADDR_VAR 0 2
7603: PUSH
7604: LD_INT 22
7606: PUSH
7607: LD_OWVAR 2
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 32
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PPUSH
7630: CALL_OW 69
7634: ST_TO_ADDR
// if not tmp then
7635: LD_VAR 0 2
7639: NOT
7640: IFFALSE 7644
// exit ;
7642: GO 7673
// for i in tmp do
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_VAR 0 2
7653: PUSH
7654: FOR_IN
7655: IFFALSE 7671
// begin SetLives ( i , 0 ) ;
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_INT 0
7664: PPUSH
7665: CALL_OW 234
// end ;
7669: GO 7654
7671: POP
7672: POP
// end ;
7673: PPOPN 2
7675: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
7676: LD_EXP 3
7680: PUSH
7681: LD_EXP 6
7685: AND
7686: IFFALSE 7779
7688: GO 7690
7690: DISABLE
7691: LD_INT 0
7693: PPUSH
// begin enable ;
7694: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
7695: LD_ADDR_VAR 0 1
7699: PUSH
7700: LD_INT 22
7702: PUSH
7703: LD_OWVAR 2
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 25
7717: PUSH
7718: LD_INT 5
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 25
7727: PUSH
7728: LD_INT 9
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 8
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 69
7759: PUSH
7760: FOR_IN
7761: IFFALSE 7777
// begin SetClass ( i , 1 ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: CALL_OW 336
// end ;
7775: GO 7760
7777: POP
7778: POP
// end ;
7779: PPOPN 1
7781: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
7782: LD_EXP 3
7786: PUSH
7787: LD_EXP 7
7791: AND
7792: PUSH
7793: LD_OWVAR 65
7797: PUSH
7798: LD_INT 7
7800: LESS
7801: AND
7802: IFFALSE 7816
7804: GO 7806
7806: DISABLE
// begin enable ;
7807: ENABLE
// game_speed := 7 ;
7808: LD_ADDR_OWVAR 65
7812: PUSH
7813: LD_INT 7
7815: ST_TO_ADDR
// end ;
7816: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
7817: LD_EXP 3
7821: PUSH
7822: LD_EXP 10
7826: AND
7827: IFFALSE 8029
7829: GO 7831
7831: DISABLE
7832: LD_INT 0
7834: PPUSH
7835: PPUSH
7836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 81
7844: PUSH
7845: LD_OWVAR 2
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 21
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// if not tmp then
7873: LD_VAR 0 3
7877: NOT
7878: IFFALSE 7882
// exit ;
7880: GO 8029
// if tmp > 5 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 5
7889: GREATER
7890: IFFALSE 7902
// k := 5 else
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 5
7899: ST_TO_ADDR
7900: GO 7912
// k := tmp ;
7902: LD_ADDR_VAR 0 2
7906: PUSH
7907: LD_VAR 0 3
7911: ST_TO_ADDR
// for i := 1 to k do
7912: LD_ADDR_VAR 0 1
7916: PUSH
7917: DOUBLE
7918: LD_INT 1
7920: DEC
7921: ST_TO_ADDR
7922: LD_VAR 0 2
7926: PUSH
7927: FOR_TO
7928: IFFALSE 8027
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
7930: LD_VAR 0 3
7934: PUSH
7935: LD_VAR 0 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 4
7948: MOD
7949: PUSH
7950: LD_INT 1
7952: PLUS
7953: PPUSH
7954: CALL_OW 259
7958: PUSH
7959: LD_INT 10
7961: LESS
7962: IFFALSE 8025
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
7964: LD_VAR 0 3
7968: PUSH
7969: LD_VAR 0 1
7973: ARRAY
7974: PPUSH
7975: LD_VAR 0 1
7979: PUSH
7980: LD_INT 4
7982: MOD
7983: PUSH
7984: LD_INT 1
7986: PLUS
7987: PPUSH
7988: LD_VAR 0 3
7992: PUSH
7993: LD_VAR 0 1
7997: ARRAY
7998: PPUSH
7999: LD_VAR 0 1
8003: PUSH
8004: LD_INT 4
8006: MOD
8007: PUSH
8008: LD_INT 1
8010: PLUS
8011: PPUSH
8012: CALL_OW 259
8016: PUSH
8017: LD_INT 1
8019: PLUS
8020: PPUSH
8021: CALL_OW 237
8025: GO 7927
8027: POP
8028: POP
// end ;
8029: PPOPN 3
8031: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8032: LD_EXP 3
8036: PUSH
8037: LD_EXP 11
8041: AND
8042: IFFALSE 8062
8044: GO 8046
8046: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8047: LD_INT 4
8049: PPUSH
8050: LD_OWVAR 2
8054: PPUSH
8055: LD_INT 0
8057: PPUSH
8058: CALL_OW 324
8062: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8063: LD_EXP 3
8067: PUSH
8068: LD_EXP 40
8072: AND
8073: IFFALSE 8093
8075: GO 8077
8077: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8078: LD_INT 19
8080: PPUSH
8081: LD_OWVAR 2
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 324
8093: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8094: LD_EXP 3
8098: PUSH
8099: LD_EXP 12
8103: AND
8104: IFFALSE 8206
8106: GO 8108
8108: DISABLE
8109: LD_INT 0
8111: PPUSH
8112: PPUSH
// begin enable ;
8113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 22
8121: PUSH
8122: LD_OWVAR 2
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 2
8133: PUSH
8134: LD_INT 34
8136: PUSH
8137: LD_INT 11
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 34
8146: PUSH
8147: LD_INT 30
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: ST_TO_ADDR
// if not tmp then
8168: LD_VAR 0 2
8172: NOT
8173: IFFALSE 8177
// exit ;
8175: GO 8206
// for i in tmp do
8177: LD_ADDR_VAR 0 1
8181: PUSH
8182: LD_VAR 0 2
8186: PUSH
8187: FOR_IN
8188: IFFALSE 8204
// begin SetLives ( i , 0 ) ;
8190: LD_VAR 0 1
8194: PPUSH
8195: LD_INT 0
8197: PPUSH
8198: CALL_OW 234
// end ;
8202: GO 8187
8204: POP
8205: POP
// end ;
8206: PPOPN 2
8208: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8209: LD_EXP 3
8213: PUSH
8214: LD_EXP 13
8218: AND
8219: IFFALSE 8239
8221: GO 8223
8223: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8224: LD_INT 32
8226: PPUSH
8227: LD_OWVAR 2
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 324
8239: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8240: LD_EXP 3
8244: PUSH
8245: LD_EXP 14
8249: AND
8250: IFFALSE 8431
8252: GO 8254
8254: DISABLE
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8260: LD_ADDR_VAR 0 2
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_OWVAR 2
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 33
8279: PUSH
8280: LD_INT 3
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PPUSH
8291: CALL_OW 69
8295: ST_TO_ADDR
// if not tmp then
8296: LD_VAR 0 2
8300: NOT
8301: IFFALSE 8305
// exit ;
8303: GO 8431
// side := 0 ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 0
8312: ST_TO_ADDR
// for i := 1 to 8 do
8313: LD_ADDR_VAR 0 1
8317: PUSH
8318: DOUBLE
8319: LD_INT 1
8321: DEC
8322: ST_TO_ADDR
8323: LD_INT 8
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8375
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8329: LD_OWVAR 2
8333: PUSH
8334: LD_VAR 0 1
8338: NONEQUAL
8339: PUSH
8340: LD_OWVAR 2
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 81
8354: PUSH
8355: LD_INT 2
8357: EQUAL
8358: AND
8359: IFFALSE 8373
// begin side := i ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_VAR 0 1
8370: ST_TO_ADDR
// break ;
8371: GO 8375
// end ;
8373: GO 8326
8375: POP
8376: POP
// if not side then
8377: LD_VAR 0 3
8381: NOT
8382: IFFALSE 8386
// exit ;
8384: GO 8431
// for i := 1 to tmp do
8386: LD_ADDR_VAR 0 1
8390: PUSH
8391: DOUBLE
8392: LD_INT 1
8394: DEC
8395: ST_TO_ADDR
8396: LD_VAR 0 2
8400: PUSH
8401: FOR_TO
8402: IFFALSE 8429
// if Prob ( 60 ) then
8404: LD_INT 60
8406: PPUSH
8407: CALL_OW 13
8411: IFFALSE 8427
// SetSide ( i , side ) ;
8413: LD_VAR 0 1
8417: PPUSH
8418: LD_VAR 0 3
8422: PPUSH
8423: CALL_OW 235
8427: GO 8401
8429: POP
8430: POP
// end ;
8431: PPOPN 3
8433: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8434: LD_EXP 3
8438: PUSH
8439: LD_EXP 16
8443: AND
8444: IFFALSE 8563
8446: GO 8448
8448: DISABLE
8449: LD_INT 0
8451: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8452: LD_ADDR_VAR 0 1
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_OWVAR 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 0
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: PUSH
8506: FOR_IN
8507: IFFALSE 8561
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 257
8518: PUSH
8519: LD_INT 1
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: IN
8537: IFFALSE 8559
// SetClass ( un , rand ( 1 , 4 ) ) ;
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: LD_INT 4
8549: PPUSH
8550: CALL_OW 12
8554: PPUSH
8555: CALL_OW 336
8559: GO 8506
8561: POP
8562: POP
// end ;
8563: PPOPN 1
8565: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8566: LD_EXP 3
8570: PUSH
8571: LD_EXP 15
8575: AND
8576: IFFALSE 8655
8578: GO 8580
8580: DISABLE
8581: LD_INT 0
8583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8584: LD_ADDR_VAR 0 1
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_OWVAR 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 3
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: ST_TO_ADDR
// if not tmp then
8620: LD_VAR 0 1
8624: NOT
8625: IFFALSE 8629
// exit ;
8627: GO 8655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8629: LD_VAR 0 1
8633: PUSH
8634: LD_INT 1
8636: PPUSH
8637: LD_VAR 0 1
8641: PPUSH
8642: CALL_OW 12
8646: ARRAY
8647: PPUSH
8648: LD_INT 100
8650: PPUSH
8651: CALL_OW 234
// end ;
8655: PPOPN 1
8657: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8658: LD_EXP 3
8662: PUSH
8663: LD_EXP 17
8667: AND
8668: IFFALSE 8766
8670: GO 8672
8672: DISABLE
8673: LD_INT 0
8675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_OWVAR 2
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 21
8695: PUSH
8696: LD_INT 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: ST_TO_ADDR
// if not tmp then
8712: LD_VAR 0 1
8716: NOT
8717: IFFALSE 8721
// exit ;
8719: GO 8766
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 12
8738: ARRAY
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: LD_INT 4
8745: PPUSH
8746: CALL_OW 12
8750: PPUSH
8751: LD_INT 3000
8753: PPUSH
8754: LD_INT 9000
8756: PPUSH
8757: CALL_OW 12
8761: PPUSH
8762: CALL_OW 492
// end ;
8766: PPOPN 1
8768: END
// every 0 0$1 trigger StreamModeActive and sDepot do
8769: LD_EXP 3
8773: PUSH
8774: LD_EXP 18
8778: AND
8779: IFFALSE 8799
8781: GO 8783
8783: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
8784: LD_INT 1
8786: PPUSH
8787: LD_OWVAR 2
8791: PPUSH
8792: LD_INT 0
8794: PPUSH
8795: CALL_OW 324
8799: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
8800: LD_EXP 3
8804: PUSH
8805: LD_EXP 19
8809: AND
8810: IFFALSE 8893
8812: GO 8814
8814: DISABLE
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8819: LD_ADDR_VAR 0 2
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_OWVAR 2
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 3
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PPUSH
8850: CALL_OW 69
8854: ST_TO_ADDR
// if not tmp then
8855: LD_VAR 0 2
8859: NOT
8860: IFFALSE 8864
// exit ;
8862: GO 8893
// for i in tmp do
8864: LD_ADDR_VAR 0 1
8868: PUSH
8869: LD_VAR 0 2
8873: PUSH
8874: FOR_IN
8875: IFFALSE 8891
// SetBLevel ( i , 10 ) ;
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_INT 10
8884: PPUSH
8885: CALL_OW 241
8889: GO 8874
8891: POP
8892: POP
// end ;
8893: PPOPN 2
8895: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
8896: LD_EXP 3
8900: PUSH
8901: LD_EXP 20
8905: AND
8906: IFFALSE 9017
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
8916: LD_ADDR_VAR 0 3
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_OWVAR 2
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PPUSH
8947: CALL_OW 69
8951: ST_TO_ADDR
// if not tmp then
8952: LD_VAR 0 3
8956: NOT
8957: IFFALSE 8961
// exit ;
8959: GO 9017
// un := tmp [ rand ( 1 , tmp ) ] ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 1
8973: PPUSH
8974: LD_VAR 0 3
8978: PPUSH
8979: CALL_OW 12
8983: ARRAY
8984: ST_TO_ADDR
// if Crawls ( un ) then
8985: LD_VAR 0 2
8989: PPUSH
8990: CALL_OW 318
8994: IFFALSE 9005
// ComWalk ( un ) ;
8996: LD_VAR 0 2
9000: PPUSH
9001: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9005: LD_VAR 0 2
9009: PPUSH
9010: LD_INT 5
9012: PPUSH
9013: CALL_OW 336
// end ;
9017: PPOPN 3
9019: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9020: LD_EXP 3
9024: PUSH
9025: LD_EXP 21
9029: AND
9030: PUSH
9031: LD_OWVAR 67
9035: PUSH
9036: LD_INT 4
9038: LESS
9039: AND
9040: IFFALSE 9059
9042: GO 9044
9044: DISABLE
// begin Difficulty := Difficulty + 1 ;
9045: LD_ADDR_OWVAR 67
9049: PUSH
9050: LD_OWVAR 67
9054: PUSH
9055: LD_INT 1
9057: PLUS
9058: ST_TO_ADDR
// end ;
9059: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9060: LD_EXP 3
9064: PUSH
9065: LD_EXP 22
9069: AND
9070: IFFALSE 9173
9072: GO 9074
9074: DISABLE
9075: LD_INT 0
9077: PPUSH
// begin for i := 1 to 5 do
9078: LD_ADDR_VAR 0 1
9082: PUSH
9083: DOUBLE
9084: LD_INT 1
9086: DEC
9087: ST_TO_ADDR
9088: LD_INT 5
9090: PUSH
9091: FOR_TO
9092: IFFALSE 9171
// begin uc_nation := nation_nature ;
9094: LD_ADDR_OWVAR 21
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// uc_side := 0 ;
9102: LD_ADDR_OWVAR 20
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9110: LD_ADDR_OWVAR 29
9114: PUSH
9115: LD_INT 12
9117: PUSH
9118: LD_INT 12
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: ST_TO_ADDR
// hc_agressivity := 20 ;
9125: LD_ADDR_OWVAR 35
9129: PUSH
9130: LD_INT 20
9132: ST_TO_ADDR
// hc_class := class_tiger ;
9133: LD_ADDR_OWVAR 28
9137: PUSH
9138: LD_INT 14
9140: ST_TO_ADDR
// hc_gallery :=  ;
9141: LD_ADDR_OWVAR 33
9145: PUSH
9146: LD_STRING 
9148: ST_TO_ADDR
// hc_name :=  ;
9149: LD_ADDR_OWVAR 26
9153: PUSH
9154: LD_STRING 
9156: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9157: CALL_OW 44
9161: PPUSH
9162: LD_INT 0
9164: PPUSH
9165: CALL_OW 51
// end ;
9169: GO 9091
9171: POP
9172: POP
// end ;
9173: PPOPN 1
9175: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9176: LD_EXP 3
9180: PUSH
9181: LD_EXP 23
9185: AND
9186: IFFALSE 9195
9188: GO 9190
9190: DISABLE
// StreamSibBomb ;
9191: CALL 9196 0 0
9195: END
// export function StreamSibBomb ; var i , x , y ; begin
9196: LD_INT 0
9198: PPUSH
9199: PPUSH
9200: PPUSH
9201: PPUSH
// result := false ;
9202: LD_ADDR_VAR 0 1
9206: PUSH
9207: LD_INT 0
9209: ST_TO_ADDR
// for i := 1 to 16 do
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: DOUBLE
9216: LD_INT 1
9218: DEC
9219: ST_TO_ADDR
9220: LD_INT 16
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9423
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9226: LD_ADDR_VAR 0 3
9230: PUSH
9231: LD_INT 10
9233: PUSH
9234: LD_INT 20
9236: PUSH
9237: LD_INT 30
9239: PUSH
9240: LD_INT 40
9242: PUSH
9243: LD_INT 50
9245: PUSH
9246: LD_INT 60
9248: PUSH
9249: LD_INT 70
9251: PUSH
9252: LD_INT 80
9254: PUSH
9255: LD_INT 90
9257: PUSH
9258: LD_INT 100
9260: PUSH
9261: LD_INT 110
9263: PUSH
9264: LD_INT 120
9266: PUSH
9267: LD_INT 130
9269: PUSH
9270: LD_INT 140
9272: PUSH
9273: LD_INT 150
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 1
9295: PPUSH
9296: LD_INT 15
9298: PPUSH
9299: CALL_OW 12
9303: ARRAY
9304: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9305: LD_ADDR_VAR 0 4
9309: PUSH
9310: LD_INT 10
9312: PUSH
9313: LD_INT 20
9315: PUSH
9316: LD_INT 30
9318: PUSH
9319: LD_INT 40
9321: PUSH
9322: LD_INT 50
9324: PUSH
9325: LD_INT 60
9327: PUSH
9328: LD_INT 70
9330: PUSH
9331: LD_INT 80
9333: PUSH
9334: LD_INT 90
9336: PUSH
9337: LD_INT 100
9339: PUSH
9340: LD_INT 110
9342: PUSH
9343: LD_INT 120
9345: PUSH
9346: LD_INT 130
9348: PUSH
9349: LD_INT 140
9351: PUSH
9352: LD_INT 150
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 1
9374: PPUSH
9375: LD_INT 15
9377: PPUSH
9378: CALL_OW 12
9382: ARRAY
9383: ST_TO_ADDR
// if ValidHex ( x , y ) then
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_VAR 0 4
9393: PPUSH
9394: CALL_OW 488
9398: IFFALSE 9421
// begin result := [ x , y ] ;
9400: LD_ADDR_VAR 0 1
9404: PUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_VAR 0 4
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: ST_TO_ADDR
// break ;
9419: GO 9423
// end ; end ;
9421: GO 9223
9423: POP
9424: POP
// if result then
9425: LD_VAR 0 1
9429: IFFALSE 9489
// begin ToLua ( playSibBomb() ) ;
9431: LD_STRING playSibBomb()
9433: PPUSH
9434: CALL_OW 559
// wait ( 0 0$14 ) ;
9438: LD_INT 490
9440: PPUSH
9441: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9445: LD_VAR 0 1
9449: PUSH
9450: LD_INT 1
9452: ARRAY
9453: PPUSH
9454: LD_VAR 0 1
9458: PUSH
9459: LD_INT 2
9461: ARRAY
9462: PPUSH
9463: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9467: LD_VAR 0 1
9471: PUSH
9472: LD_INT 1
9474: ARRAY
9475: PPUSH
9476: LD_VAR 0 1
9480: PUSH
9481: LD_INT 2
9483: ARRAY
9484: PPUSH
9485: CALL_OW 429
// end ; end ;
9489: LD_VAR 0 1
9493: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9494: LD_EXP 3
9498: PUSH
9499: LD_EXP 25
9503: AND
9504: IFFALSE 9516
9506: GO 9508
9508: DISABLE
// YouLost (  ) ;
9509: LD_STRING 
9511: PPUSH
9512: CALL_OW 104
9516: END
// every 0 0$1 trigger StreamModeActive and sFog do
9517: LD_EXP 3
9521: PUSH
9522: LD_EXP 24
9526: AND
9527: IFFALSE 9541
9529: GO 9531
9531: DISABLE
// FogOff ( your_side ) ;
9532: LD_OWVAR 2
9536: PPUSH
9537: CALL_OW 344
9541: END
// every 0 0$1 trigger StreamModeActive and sSun do
9542: LD_EXP 3
9546: PUSH
9547: LD_EXP 26
9551: AND
9552: IFFALSE 9580
9554: GO 9556
9556: DISABLE
// begin solar_recharge_percent := 0 ;
9557: LD_ADDR_OWVAR 79
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9565: LD_INT 10500
9567: PPUSH
9568: CALL_OW 67
// solar_recharge_percent := 100 ;
9572: LD_ADDR_OWVAR 79
9576: PUSH
9577: LD_INT 100
9579: ST_TO_ADDR
// end ;
9580: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9581: LD_EXP 3
9585: PUSH
9586: LD_EXP 27
9590: AND
9591: IFFALSE 9830
9593: GO 9595
9595: DISABLE
9596: LD_INT 0
9598: PPUSH
9599: PPUSH
9600: PPUSH
// begin tmp := [ ] ;
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: EMPTY
9607: ST_TO_ADDR
// for i := 1 to 6 do
9608: LD_ADDR_VAR 0 1
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 6
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9727
// begin uc_nation := nation_nature ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// uc_side := 0 ;
9632: LD_ADDR_OWVAR 20
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9640: LD_ADDR_OWVAR 29
9644: PUSH
9645: LD_INT 12
9647: PUSH
9648: LD_INT 12
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// hc_agressivity := 20 ;
9655: LD_ADDR_OWVAR 35
9659: PUSH
9660: LD_INT 20
9662: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9663: LD_ADDR_OWVAR 28
9667: PUSH
9668: LD_INT 17
9670: ST_TO_ADDR
// hc_gallery :=  ;
9671: LD_ADDR_OWVAR 33
9675: PUSH
9676: LD_STRING 
9678: ST_TO_ADDR
// hc_name :=  ;
9679: LD_ADDR_OWVAR 26
9683: PUSH
9684: LD_STRING 
9686: ST_TO_ADDR
// un := CreateHuman ;
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
9697: LD_VAR 0 2
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 51
// tmp := tmp ^ un ;
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_VAR 0 3
9718: PUSH
9719: LD_VAR 0 2
9723: ADD
9724: ST_TO_ADDR
// end ;
9725: GO 9621
9727: POP
9728: POP
// repeat wait ( 0 0$1 ) ;
9729: LD_INT 35
9731: PPUSH
9732: CALL_OW 67
// for un in tmp do
9736: LD_ADDR_VAR 0 2
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: FOR_IN
9747: IFFALSE 9821
// begin if IsDead ( un ) then
9749: LD_VAR 0 2
9753: PPUSH
9754: CALL_OW 301
9758: IFFALSE 9778
// begin tmp := tmp diff un ;
9760: LD_ADDR_VAR 0 3
9764: PUSH
9765: LD_VAR 0 3
9769: PUSH
9770: LD_VAR 0 2
9774: DIFF
9775: ST_TO_ADDR
// continue ;
9776: GO 9746
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
9778: LD_VAR 0 2
9782: PPUSH
9783: LD_INT 3
9785: PUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 0
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 69
9804: PPUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 74
9814: PPUSH
9815: CALL_OW 115
// end ;
9819: GO 9746
9821: POP
9822: POP
// until not tmp ;
9823: LD_VAR 0 3
9827: NOT
9828: IFFALSE 9729
// end ;
9830: PPOPN 3
9832: END
// every 0 0$1 trigger StreamModeActive and sTroll do
9833: LD_EXP 3
9837: PUSH
9838: LD_EXP 28
9842: AND
9843: IFFALSE 9897
9845: GO 9847
9847: DISABLE
// begin ToLua ( displayTroll(); ) ;
9848: LD_STRING displayTroll();
9850: PPUSH
9851: CALL_OW 559
// wait ( 3 3$00 ) ;
9855: LD_INT 6300
9857: PPUSH
9858: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9862: LD_STRING hideTroll();
9864: PPUSH
9865: CALL_OW 559
// wait ( 1 1$00 ) ;
9869: LD_INT 2100
9871: PPUSH
9872: CALL_OW 67
// ToLua ( displayTroll(); ) ;
9876: LD_STRING displayTroll();
9878: PPUSH
9879: CALL_OW 559
// wait ( 1 1$00 ) ;
9883: LD_INT 2100
9885: PPUSH
9886: CALL_OW 67
// ToLua ( hideTroll(); ) ;
9890: LD_STRING hideTroll();
9892: PPUSH
9893: CALL_OW 559
// end ;
9897: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
9898: LD_EXP 3
9902: PUSH
9903: LD_EXP 29
9907: AND
9908: IFFALSE 9971
9910: GO 9912
9912: DISABLE
9913: LD_INT 0
9915: PPUSH
// begin p := 0 ;
9916: LD_ADDR_VAR 0 1
9920: PUSH
9921: LD_INT 0
9923: ST_TO_ADDR
// repeat game_speed := 1 ;
9924: LD_ADDR_OWVAR 65
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9932: LD_INT 35
9934: PPUSH
9935: CALL_OW 67
// p := p + 1 ;
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_VAR 0 1
9948: PUSH
9949: LD_INT 1
9951: PLUS
9952: ST_TO_ADDR
// until p >= 60 ;
9953: LD_VAR 0 1
9957: PUSH
9958: LD_INT 60
9960: GREATEREQUAL
9961: IFFALSE 9924
// game_speed := 4 ;
9963: LD_ADDR_OWVAR 65
9967: PUSH
9968: LD_INT 4
9970: ST_TO_ADDR
// end ;
9971: PPOPN 1
9973: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
9974: LD_EXP 3
9978: PUSH
9979: LD_EXP 30
9983: AND
9984: IFFALSE 10130
9986: GO 9988
9988: DISABLE
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9993: LD_ADDR_VAR 0 1
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_OWVAR 2
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 30
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 69
10046: ST_TO_ADDR
// if not depot then
10047: LD_VAR 0 1
10051: NOT
10052: IFFALSE 10056
// exit ;
10054: GO 10130
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10056: LD_ADDR_VAR 0 2
10060: PUSH
10061: LD_VAR 0 1
10065: PUSH
10066: LD_INT 1
10068: PPUSH
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 12
10078: ARRAY
10079: PPUSH
10080: CALL_OW 274
10084: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10085: LD_VAR 0 2
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: LD_INT 2
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10115: LD_VAR 0 2
10119: PPUSH
10120: LD_INT 3
10122: PPUSH
10123: LD_INT 0
10125: PPUSH
10126: CALL_OW 277
// end ;
10130: PPOPN 2
10132: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10133: LD_EXP 3
10137: PUSH
10138: LD_EXP 31
10142: AND
10143: IFFALSE 10240
10145: GO 10147
10147: DISABLE
10148: LD_INT 0
10150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10151: LD_ADDR_VAR 0 1
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_OWVAR 2
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 21
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 3
10180: PUSH
10181: LD_INT 23
10183: PUSH
10184: LD_INT 0
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: PPUSH
10200: CALL_OW 69
10204: ST_TO_ADDR
// if not tmp then
10205: LD_VAR 0 1
10209: NOT
10210: IFFALSE 10214
// exit ;
10212: GO 10240
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10214: LD_VAR 0 1
10218: PUSH
10219: LD_INT 1
10221: PPUSH
10222: LD_VAR 0 1
10226: PPUSH
10227: CALL_OW 12
10231: ARRAY
10232: PPUSH
10233: LD_INT 200
10235: PPUSH
10236: CALL_OW 234
// end ;
10240: PPOPN 1
10242: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10243: LD_EXP 3
10247: PUSH
10248: LD_EXP 32
10252: AND
10253: IFFALSE 10332
10255: GO 10257
10257: DISABLE
10258: LD_INT 0
10260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_OWVAR 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 2
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PPUSH
10292: CALL_OW 69
10296: ST_TO_ADDR
// if not tmp then
10297: LD_VAR 0 1
10301: NOT
10302: IFFALSE 10306
// exit ;
10304: GO 10332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10306: LD_VAR 0 1
10310: PUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 12
10323: ARRAY
10324: PPUSH
10325: LD_INT 60
10327: PPUSH
10328: CALL_OW 234
// end ;
10332: PPOPN 1
10334: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10335: LD_EXP 3
10339: PUSH
10340: LD_EXP 33
10344: AND
10345: IFFALSE 10444
10347: GO 10349
10349: DISABLE
10350: LD_INT 0
10352: PPUSH
10353: PPUSH
// begin enable ;
10354: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10355: LD_ADDR_VAR 0 1
10359: PUSH
10360: LD_INT 22
10362: PUSH
10363: LD_OWVAR 2
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 61
10374: PUSH
10375: EMPTY
10376: LIST
10377: PUSH
10378: LD_INT 33
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
// if not tmp then
10398: LD_VAR 0 1
10402: NOT
10403: IFFALSE 10407
// exit ;
10405: GO 10444
// for i in tmp do
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_VAR 0 1
10416: PUSH
10417: FOR_IN
10418: IFFALSE 10442
// if IsControledBy ( i ) then
10420: LD_VAR 0 2
10424: PPUSH
10425: CALL_OW 312
10429: IFFALSE 10440
// ComUnlink ( i ) ;
10431: LD_VAR 0 2
10435: PPUSH
10436: CALL_OW 136
10440: GO 10417
10442: POP
10443: POP
// end ;
10444: PPOPN 2
10446: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10447: LD_EXP 3
10451: PUSH
10452: LD_EXP 34
10456: AND
10457: IFFALSE 10597
10459: GO 10461
10461: DISABLE
10462: LD_INT 0
10464: PPUSH
10465: PPUSH
// begin ToLua ( displayPowell(); ) ;
10466: LD_STRING displayPowell();
10468: PPUSH
10469: CALL_OW 559
// uc_side := 0 ;
10473: LD_ADDR_OWVAR 20
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// uc_nation := 2 ;
10481: LD_ADDR_OWVAR 21
10485: PUSH
10486: LD_INT 2
10488: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10489: LD_ADDR_OWVAR 37
10493: PUSH
10494: LD_INT 14
10496: ST_TO_ADDR
// vc_engine := engine_siberite ;
10497: LD_ADDR_OWVAR 39
10501: PUSH
10502: LD_INT 3
10504: ST_TO_ADDR
// vc_control := control_apeman ;
10505: LD_ADDR_OWVAR 38
10509: PUSH
10510: LD_INT 5
10512: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10513: LD_ADDR_OWVAR 40
10517: PUSH
10518: LD_INT 29
10520: ST_TO_ADDR
// un := CreateVehicle ;
10521: LD_ADDR_VAR 0 2
10525: PUSH
10526: CALL_OW 45
10530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10531: LD_VAR 0 2
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10543: LD_INT 35
10545: PPUSH
10546: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10550: LD_VAR 0 2
10554: PPUSH
10555: LD_INT 22
10557: PUSH
10558: LD_OWVAR 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PPUSH
10567: CALL_OW 69
10571: PPUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL_OW 74
10581: PPUSH
10582: CALL_OW 115
// until IsDead ( un ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 301
10595: IFFALSE 10543
// end ;
10597: PPOPN 2
10599: END
// every 0 0$1 trigger StreamModeActive and sStu do
10600: LD_EXP 3
10604: PUSH
10605: LD_EXP 42
10609: AND
10610: IFFALSE 10626
10612: GO 10614
10614: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10615: LD_STRING displayStucuk();
10617: PPUSH
10618: CALL_OW 559
// ResetFog ;
10622: CALL_OW 335
// end ;
10626: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10627: LD_EXP 3
10631: PUSH
10632: LD_EXP 35
10636: AND
10637: IFFALSE 10778
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10646: LD_ADDR_VAR 0 2
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_OWVAR 2
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 21
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 69
10681: ST_TO_ADDR
// if not tmp then
10682: LD_VAR 0 2
10686: NOT
10687: IFFALSE 10691
// exit ;
10689: GO 10778
// un := tmp [ rand ( 1 , tmp ) ] ;
10691: LD_ADDR_VAR 0 1
10695: PUSH
10696: LD_VAR 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_VAR 0 2
10708: PPUSH
10709: CALL_OW 12
10713: ARRAY
10714: ST_TO_ADDR
// SetSide ( un , 0 ) ;
10715: LD_VAR 0 1
10719: PPUSH
10720: LD_INT 0
10722: PPUSH
10723: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
10727: LD_VAR 0 1
10731: PPUSH
10732: LD_OWVAR 3
10736: PUSH
10737: LD_VAR 0 1
10741: DIFF
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: CALL_OW 74
10752: PPUSH
10753: CALL_OW 115
// wait ( 0 0$20 ) ;
10757: LD_INT 700
10759: PPUSH
10760: CALL_OW 67
// SetSide ( un , your_side ) ;
10764: LD_VAR 0 1
10768: PPUSH
10769: LD_OWVAR 2
10773: PPUSH
10774: CALL_OW 235
// end ;
10778: PPOPN 2
10780: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
10781: LD_EXP 3
10785: PUSH
10786: LD_EXP 36
10790: AND
10791: IFFALSE 10897
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10799: LD_ADDR_VAR 0 1
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_OWVAR 2
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 0
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 30
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// if not depot then
10853: LD_VAR 0 1
10857: NOT
10858: IFFALSE 10862
// exit ;
10860: GO 10897
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
10862: LD_VAR 0 1
10866: PUSH
10867: LD_INT 1
10869: ARRAY
10870: PPUSH
10871: CALL_OW 250
10875: PPUSH
10876: LD_VAR 0 1
10880: PUSH
10881: LD_INT 1
10883: ARRAY
10884: PPUSH
10885: CALL_OW 251
10889: PPUSH
10890: LD_INT 70
10892: PPUSH
10893: CALL_OW 495
// end ;
10897: PPOPN 1
10899: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
10900: LD_EXP 3
10904: PUSH
10905: LD_EXP 37
10909: AND
10910: IFFALSE 11121
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10922: LD_ADDR_VAR 0 5
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_OWVAR 2
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 21
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: ST_TO_ADDR
// if not tmp then
10958: LD_VAR 0 5
10962: NOT
10963: IFFALSE 10967
// exit ;
10965: GO 11121
// for i in tmp do
10967: LD_ADDR_VAR 0 1
10971: PUSH
10972: LD_VAR 0 5
10976: PUSH
10977: FOR_IN
10978: IFFALSE 11119
// begin d := rand ( 0 , 5 ) ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 0
10987: PPUSH
10988: LD_INT 5
10990: PPUSH
10991: CALL_OW 12
10995: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
10996: LD_ADDR_VAR 0 2
11000: PUSH
11001: LD_VAR 0 1
11005: PPUSH
11006: CALL_OW 250
11010: PPUSH
11011: LD_VAR 0 4
11015: PPUSH
11016: LD_INT 3
11018: PPUSH
11019: LD_INT 12
11021: PPUSH
11022: CALL_OW 12
11026: PPUSH
11027: CALL_OW 272
11031: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 251
11046: PPUSH
11047: LD_VAR 0 4
11051: PPUSH
11052: LD_INT 3
11054: PPUSH
11055: LD_INT 12
11057: PPUSH
11058: CALL_OW 12
11062: PPUSH
11063: CALL_OW 273
11067: ST_TO_ADDR
// if ValidHex ( x , y ) then
11068: LD_VAR 0 2
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: CALL_OW 488
11082: IFFALSE 11117
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11084: LD_VAR 0 1
11088: PPUSH
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 3
11101: PPUSH
11102: LD_INT 6
11104: PPUSH
11105: CALL_OW 12
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 483
// end ;
11117: GO 10977
11119: POP
11120: POP
// end ;
11121: PPOPN 5
11123: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11124: LD_EXP 3
11128: PUSH
11129: LD_EXP 38
11133: AND
11134: IFFALSE 11228
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_INT 22
11150: PUSH
11151: LD_OWVAR 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 32
11162: PUSH
11163: LD_INT 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 21
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: ST_TO_ADDR
// if not tmp then
11190: LD_VAR 0 2
11194: NOT
11195: IFFALSE 11199
// exit ;
11197: GO 11228
// for i in tmp do
11199: LD_ADDR_VAR 0 1
11203: PUSH
11204: LD_VAR 0 2
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11226
// SetFuel ( i , 0 ) ;
11212: LD_VAR 0 1
11216: PPUSH
11217: LD_INT 0
11219: PPUSH
11220: CALL_OW 240
11224: GO 11209
11226: POP
11227: POP
// end ;
11228: PPOPN 2
11230: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11231: LD_EXP 3
11235: PUSH
11236: LD_EXP 39
11240: AND
11241: IFFALSE 11307
11243: GO 11245
11245: DISABLE
11246: LD_INT 0
11248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11249: LD_ADDR_VAR 0 1
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_OWVAR 2
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 30
11268: PUSH
11269: LD_INT 29
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: ST_TO_ADDR
// if not tmp then
11285: LD_VAR 0 1
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11307
// DestroyUnit ( tmp [ 1 ] ) ;
11294: LD_VAR 0 1
11298: PUSH
11299: LD_INT 1
11301: ARRAY
11302: PPUSH
11303: CALL_OW 65
// end ;
11307: PPOPN 1
11309: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11310: LD_EXP 3
11314: PUSH
11315: LD_EXP 41
11319: AND
11320: IFFALSE 11449
11322: GO 11324
11324: DISABLE
11325: LD_INT 0
11327: PPUSH
// begin uc_side := 0 ;
11328: LD_ADDR_OWVAR 20
11332: PUSH
11333: LD_INT 0
11335: ST_TO_ADDR
// uc_nation := nation_arabian ;
11336: LD_ADDR_OWVAR 21
11340: PUSH
11341: LD_INT 2
11343: ST_TO_ADDR
// hc_gallery :=  ;
11344: LD_ADDR_OWVAR 33
11348: PUSH
11349: LD_STRING 
11351: ST_TO_ADDR
// hc_name :=  ;
11352: LD_ADDR_OWVAR 26
11356: PUSH
11357: LD_STRING 
11359: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11360: LD_INT 1
11362: PPUSH
11363: LD_INT 11
11365: PPUSH
11366: LD_INT 10
11368: PPUSH
11369: CALL_OW 380
// un := CreateHuman ;
11373: LD_ADDR_VAR 0 1
11377: PUSH
11378: CALL_OW 44
11382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11383: LD_VAR 0 1
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_INT 22
11409: PUSH
11410: LD_OWVAR 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PPUSH
11419: CALL_OW 69
11423: PPUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 74
11433: PPUSH
11434: CALL_OW 115
// until IsDead ( un ) ;
11438: LD_VAR 0 1
11442: PPUSH
11443: CALL_OW 301
11447: IFFALSE 11395
// end ;
11449: PPOPN 1
11451: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11452: LD_EXP 3
11456: PUSH
11457: LD_EXP 43
11461: AND
11462: IFFALSE 11474
11464: GO 11466
11466: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11467: LD_STRING earthquake(getX(game), 0, 32)
11469: PPUSH
11470: CALL_OW 559
11474: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11475: LD_EXP 3
11479: PUSH
11480: LD_EXP 44
11484: AND
11485: IFFALSE 11576
11487: GO 11489
11489: DISABLE
11490: LD_INT 0
11492: PPUSH
// begin enable ;
11493: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 22
11501: PUSH
11502: LD_OWVAR 2
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 21
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 69
11540: ST_TO_ADDR
// if not tmp then
11541: LD_VAR 0 1
11545: NOT
11546: IFFALSE 11550
// exit ;
11548: GO 11576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11550: LD_VAR 0 1
11554: PUSH
11555: LD_INT 1
11557: PPUSH
11558: LD_VAR 0 1
11562: PPUSH
11563: CALL_OW 12
11567: ARRAY
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 234
// end ;
11576: PPOPN 1
11578: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11579: LD_EXP 3
11583: PUSH
11584: LD_EXP 45
11588: AND
11589: IFFALSE 11730
11591: GO 11593
11593: DISABLE
11594: LD_INT 0
11596: PPUSH
11597: PPUSH
11598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_OWVAR 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 1
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 69
11634: ST_TO_ADDR
// if not tmp then
11635: LD_VAR 0 3
11639: NOT
11640: IFFALSE 11644
// exit ;
11642: GO 11730
// un := tmp [ rand ( 1 , tmp ) ] ;
11644: LD_ADDR_VAR 0 2
11648: PUSH
11649: LD_VAR 0 3
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: CALL_OW 12
11666: ARRAY
11667: ST_TO_ADDR
// if Crawls ( un ) then
11668: LD_VAR 0 2
11672: PPUSH
11673: CALL_OW 318
11677: IFFALSE 11688
// ComWalk ( un ) ;
11679: LD_VAR 0 2
11683: PPUSH
11684: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
11688: LD_VAR 0 2
11692: PPUSH
11693: LD_INT 9
11695: PPUSH
11696: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
11700: LD_INT 28
11702: PPUSH
11703: LD_OWVAR 2
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
11715: LD_INT 29
11717: PPUSH
11718: LD_OWVAR 2
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 322
// end ;
11730: PPOPN 3
11732: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
11733: LD_EXP 3
11737: PUSH
11738: LD_EXP 46
11742: AND
11743: IFFALSE 11854
11745: GO 11747
11747: DISABLE
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11753: LD_ADDR_VAR 0 3
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: LD_OWVAR 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 25
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PPUSH
11784: CALL_OW 69
11788: ST_TO_ADDR
// if not tmp then
11789: LD_VAR 0 3
11793: NOT
11794: IFFALSE 11798
// exit ;
11796: GO 11854
// un := tmp [ rand ( 1 , tmp ) ] ;
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_VAR 0 3
11807: PUSH
11808: LD_INT 1
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: CALL_OW 12
11820: ARRAY
11821: ST_TO_ADDR
// if Crawls ( un ) then
11822: LD_VAR 0 2
11826: PPUSH
11827: CALL_OW 318
11831: IFFALSE 11842
// ComWalk ( un ) ;
11833: LD_VAR 0 2
11837: PPUSH
11838: CALL_OW 138
// SetClass ( un , class_mortar ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 8
11849: PPUSH
11850: CALL_OW 336
// end ;
11854: PPOPN 3
11856: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
11857: LD_EXP 3
11861: PUSH
11862: LD_EXP 47
11866: AND
11867: IFFALSE 12011
11869: GO 11871
11871: DISABLE
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
11876: LD_ADDR_VAR 0 2
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_OWVAR 2
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 2
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: LD_INT 34
11908: PUSH
11909: LD_INT 12
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 34
11918: PUSH
11919: LD_INT 51
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 34
11928: PUSH
11929: LD_INT 32
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 69
11951: ST_TO_ADDR
// if not tmp then
11952: LD_VAR 0 2
11956: NOT
11957: IFFALSE 11961
// exit ;
11959: GO 12011
// for i in tmp do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: LD_VAR 0 2
11970: PUSH
11971: FOR_IN
11972: IFFALSE 12009
// if GetCargo ( i , mat_artifact ) = 0 then
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 4
11981: PPUSH
11982: CALL_OW 289
11986: PUSH
11987: LD_INT 0
11989: EQUAL
11990: IFFALSE 12007
// SetCargo ( i , mat_siberit , 100 ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_INT 3
11999: PPUSH
12000: LD_INT 100
12002: PPUSH
12003: CALL_OW 290
12007: GO 11971
12009: POP
12010: POP
// end ;
12011: PPOPN 2
12013: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12014: LD_EXP 3
12018: PUSH
12019: LD_EXP 48
12023: AND
12024: IFFALSE 12207
12026: GO 12028
12028: DISABLE
12029: LD_INT 0
12031: PPUSH
12032: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12033: LD_ADDR_VAR 0 2
12037: PUSH
12038: LD_INT 22
12040: PUSH
12041: LD_OWVAR 2
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: ST_TO_ADDR
// if not tmp then
12055: LD_VAR 0 2
12059: NOT
12060: IFFALSE 12064
// exit ;
12062: GO 12207
// for i := 1 to 2 do
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: DOUBLE
12070: LD_INT 1
12072: DEC
12073: ST_TO_ADDR
12074: LD_INT 2
12076: PUSH
12077: FOR_TO
12078: IFFALSE 12205
// begin uc_side := your_side ;
12080: LD_ADDR_OWVAR 20
12084: PUSH
12085: LD_OWVAR 2
12089: ST_TO_ADDR
// uc_nation := nation_american ;
12090: LD_ADDR_OWVAR 21
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// vc_chassis := us_morphling ;
12098: LD_ADDR_OWVAR 37
12102: PUSH
12103: LD_INT 5
12105: ST_TO_ADDR
// vc_engine := engine_siberite ;
12106: LD_ADDR_OWVAR 39
12110: PUSH
12111: LD_INT 3
12113: ST_TO_ADDR
// vc_control := control_computer ;
12114: LD_ADDR_OWVAR 38
12118: PUSH
12119: LD_INT 3
12121: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12122: LD_ADDR_OWVAR 40
12126: PUSH
12127: LD_INT 10
12129: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12130: LD_VAR 0 2
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: CALL_OW 310
12143: NOT
12144: IFFALSE 12191
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12146: CALL_OW 45
12150: PPUSH
12151: LD_VAR 0 2
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: PPUSH
12160: CALL_OW 250
12164: PPUSH
12165: LD_VAR 0 2
12169: PUSH
12170: LD_INT 1
12172: ARRAY
12173: PPUSH
12174: CALL_OW 251
12178: PPUSH
12179: LD_INT 12
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 50
12189: GO 12203
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12191: CALL_OW 45
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 51
// end ;
12203: GO 12077
12205: POP
12206: POP
// end ;
12207: PPOPN 2
12209: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12210: LD_EXP 3
12214: PUSH
12215: LD_EXP 49
12219: AND
12220: IFFALSE 12442
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
12229: PPUSH
12230: PPUSH
12231: PPUSH
12232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12233: LD_ADDR_VAR 0 6
12237: PUSH
12238: LD_INT 22
12240: PUSH
12241: LD_OWVAR 2
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: LD_INT 23
12265: PUSH
12266: LD_INT 0
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: ST_TO_ADDR
// if not tmp then
12287: LD_VAR 0 6
12291: NOT
12292: IFFALSE 12296
// exit ;
12294: GO 12442
// s1 := rand ( 1 , 4 ) ;
12296: LD_ADDR_VAR 0 2
12300: PUSH
12301: LD_INT 1
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 12
12311: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: LD_VAR 0 6
12321: PUSH
12322: LD_INT 1
12324: ARRAY
12325: PPUSH
12326: LD_VAR 0 2
12330: PPUSH
12331: CALL_OW 259
12335: ST_TO_ADDR
// if s1 = 1 then
12336: LD_VAR 0 2
12340: PUSH
12341: LD_INT 1
12343: EQUAL
12344: IFFALSE 12364
// s2 := rand ( 2 , 4 ) else
12346: LD_ADDR_VAR 0 3
12350: PUSH
12351: LD_INT 2
12353: PPUSH
12354: LD_INT 4
12356: PPUSH
12357: CALL_OW 12
12361: ST_TO_ADDR
12362: GO 12372
// s2 := 1 ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12372: LD_ADDR_VAR 0 5
12376: PUSH
12377: LD_VAR 0 6
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 3
12390: PPUSH
12391: CALL_OW 259
12395: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12396: LD_VAR 0 6
12400: PUSH
12401: LD_INT 1
12403: ARRAY
12404: PPUSH
12405: LD_VAR 0 2
12409: PPUSH
12410: LD_VAR 0 5
12414: PPUSH
12415: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12419: LD_VAR 0 6
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: CALL_OW 237
// end ;
12442: PPOPN 6
12444: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12445: LD_EXP 3
12449: PUSH
12450: LD_EXP 50
12454: AND
12455: IFFALSE 12534
12457: GO 12459
12459: DISABLE
12460: LD_INT 0
12462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 22
12470: PUSH
12471: LD_OWVAR 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: ST_TO_ADDR
// if not tmp then
12499: LD_VAR 0 1
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 12
12525: ARRAY
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 234
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12537: LD_EXP 3
12541: PUSH
12542: LD_EXP 51
12546: AND
12547: IFFALSE 12659
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: LD_INT 22
12563: PUSH
12564: LD_OWVAR 2
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: LD_INT 30
12578: PUSH
12579: LD_INT 27
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 26
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 28
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 69
12620: ST_TO_ADDR
// if not tmp then
12621: LD_VAR 0 2
12625: NOT
12626: IFFALSE 12630
// exit ;
12628: GO 12659
// for i in tmp do
12630: LD_ADDR_VAR 0 1
12634: PUSH
12635: LD_VAR 0 2
12639: PUSH
12640: FOR_IN
12641: IFFALSE 12657
// SetLives ( i , 1 ) ;
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 234
12655: GO 12640
12657: POP
12658: POP
// end ;
12659: PPOPN 2
12661: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12662: LD_EXP 3
12666: PUSH
12667: LD_EXP 52
12671: AND
12672: IFFALSE 12959
12674: GO 12676
12676: DISABLE
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// begin i := rand ( 1 , 7 ) ;
12682: LD_ADDR_VAR 0 1
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_INT 7
12692: PPUSH
12693: CALL_OW 12
12697: ST_TO_ADDR
// case i of 1 :
12698: LD_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: DOUBLE
12706: EQUAL
12707: IFTRUE 12711
12709: GO 12721
12711: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
12712: LD_STRING earthquake(getX(game), 0, 32)
12714: PPUSH
12715: CALL_OW 559
12719: GO 12959
12721: LD_INT 2
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12729
12727: GO 12743
12729: POP
// begin ToLua ( displayStucuk(); ) ;
12730: LD_STRING displayStucuk();
12732: PPUSH
12733: CALL_OW 559
// ResetFog ;
12737: CALL_OW 335
// end ; 3 :
12741: GO 12959
12743: LD_INT 3
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12855
12751: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_OWVAR 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 25
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PPUSH
12783: CALL_OW 69
12787: ST_TO_ADDR
// if not tmp then
12788: LD_VAR 0 2
12792: NOT
12793: IFFALSE 12797
// exit ;
12795: GO 12959
// un := tmp [ rand ( 1 , tmp ) ] ;
12797: LD_ADDR_VAR 0 3
12801: PUSH
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 1
12809: PPUSH
12810: LD_VAR 0 2
12814: PPUSH
12815: CALL_OW 12
12819: ARRAY
12820: ST_TO_ADDR
// if Crawls ( un ) then
12821: LD_VAR 0 3
12825: PPUSH
12826: CALL_OW 318
12830: IFFALSE 12841
// ComWalk ( un ) ;
12832: LD_VAR 0 3
12836: PPUSH
12837: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 8
12848: PPUSH
12849: CALL_OW 336
// end ; 4 :
12853: GO 12959
12855: LD_INT 4
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12937
12863: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_OWVAR 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_INT 29
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PPUSH
12895: CALL_OW 69
12899: ST_TO_ADDR
// if not tmp then
12900: LD_VAR 0 2
12904: NOT
12905: IFFALSE 12909
// exit ;
12907: GO 12959
// CenterNowOnUnits ( tmp [ 1 ] ) ;
12909: LD_VAR 0 2
12913: PUSH
12914: LD_INT 1
12916: ARRAY
12917: PPUSH
12918: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
12922: LD_VAR 0 2
12926: PUSH
12927: LD_INT 1
12929: ARRAY
12930: PPUSH
12931: CALL_OW 65
// end ; 5 .. 7 :
12935: GO 12959
12937: LD_INT 5
12939: DOUBLE
12940: GREATEREQUAL
12941: IFFALSE 12949
12943: LD_INT 7
12945: DOUBLE
12946: LESSEQUAL
12947: IFTRUE 12951
12949: GO 12958
12951: POP
// StreamSibBomb ; end ;
12952: CALL 9196 0 0
12956: GO 12959
12958: POP
// end ;
12959: PPOPN 3
12961: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
12962: LD_EXP 3
12966: PUSH
12967: LD_EXP 53
12971: AND
12972: IFFALSE 13128
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
12981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
12982: LD_ADDR_VAR 0 2
12986: PUSH
12987: LD_INT 81
12989: PUSH
12990: LD_OWVAR 2
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 2
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 1
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 2
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// if not tmp then
13036: LD_VAR 0 2
13040: NOT
13041: IFFALSE 13045
// exit ;
13043: GO 13128
// p := 0 ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13053: LD_INT 35
13055: PPUSH
13056: CALL_OW 67
// p := p + 1 ;
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_VAR 0 3
13069: PUSH
13070: LD_INT 1
13072: PLUS
13073: ST_TO_ADDR
// for i in tmp do
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_VAR 0 2
13083: PUSH
13084: FOR_IN
13085: IFFALSE 13116
// if GetLives ( i ) < 1000 then
13087: LD_VAR 0 1
13091: PPUSH
13092: CALL_OW 256
13096: PUSH
13097: LD_INT 1000
13099: LESS
13100: IFFALSE 13114
// SetLives ( i , 1000 ) ;
13102: LD_VAR 0 1
13106: PPUSH
13107: LD_INT 1000
13109: PPUSH
13110: CALL_OW 234
13114: GO 13084
13116: POP
13117: POP
// until p > 20 ;
13118: LD_VAR 0 3
13122: PUSH
13123: LD_INT 20
13125: GREATER
13126: IFFALSE 13053
// end ;
13128: PPOPN 3
13130: END
// every 0 0$1 trigger StreamModeActive and sTime do
13131: LD_EXP 3
13135: PUSH
13136: LD_EXP 54
13140: AND
13141: IFFALSE 13176
13143: GO 13145
13145: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13146: LD_INT 28
13148: PPUSH
13149: LD_OWVAR 2
13153: PPUSH
13154: LD_INT 2
13156: PPUSH
13157: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13161: LD_INT 30
13163: PPUSH
13164: LD_OWVAR 2
13168: PPUSH
13169: LD_INT 2
13171: PPUSH
13172: CALL_OW 322
// end ;
13176: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13177: LD_EXP 3
13181: PUSH
13182: LD_EXP 55
13186: AND
13187: IFFALSE 13308
13189: GO 13191
13191: DISABLE
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13196: LD_ADDR_VAR 0 2
13200: PUSH
13201: LD_INT 22
13203: PUSH
13204: LD_OWVAR 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 21
13215: PUSH
13216: LD_INT 1
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: LD_INT 23
13228: PUSH
13229: LD_INT 0
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 69
13249: ST_TO_ADDR
// if not tmp then
13250: LD_VAR 0 2
13254: NOT
13255: IFFALSE 13259
// exit ;
13257: GO 13308
// for i in tmp do
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_VAR 0 2
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13306
// begin if Crawls ( i ) then
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 318
13281: IFFALSE 13292
// ComWalk ( i ) ;
13283: LD_VAR 0 1
13287: PPUSH
13288: CALL_OW 138
// SetClass ( i , 2 ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 2
13299: PPUSH
13300: CALL_OW 336
// end ;
13304: GO 13269
13306: POP
13307: POP
// end ;
13308: PPOPN 2
13310: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13311: LD_EXP 3
13315: PUSH
13316: LD_EXP 56
13320: AND
13321: IFFALSE 13609
13323: GO 13325
13325: DISABLE
13326: LD_INT 0
13328: PPUSH
13329: PPUSH
13330: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13331: LD_OWVAR 2
13335: PPUSH
13336: LD_INT 9
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13349: LD_INT 9
13351: PPUSH
13352: LD_OWVAR 2
13356: PPUSH
13357: CALL_OW 343
// uc_side := 9 ;
13361: LD_ADDR_OWVAR 20
13365: PUSH
13366: LD_INT 9
13368: ST_TO_ADDR
// uc_nation := 2 ;
13369: LD_ADDR_OWVAR 21
13373: PUSH
13374: LD_INT 2
13376: ST_TO_ADDR
// hc_name := Dark Warrior ;
13377: LD_ADDR_OWVAR 26
13381: PUSH
13382: LD_STRING Dark Warrior
13384: ST_TO_ADDR
// hc_gallery :=  ;
13385: LD_ADDR_OWVAR 33
13389: PUSH
13390: LD_STRING 
13392: ST_TO_ADDR
// hc_noskilllimit := true ;
13393: LD_ADDR_OWVAR 76
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13401: LD_ADDR_OWVAR 31
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: LD_INT 30
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: ST_TO_ADDR
// un := CreateHuman ;
13424: LD_ADDR_VAR 0 3
13428: PUSH
13429: CALL_OW 44
13433: ST_TO_ADDR
// hc_noskilllimit := false ;
13434: LD_ADDR_OWVAR 76
13438: PUSH
13439: LD_INT 0
13441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 51
// ToLua ( playRanger() ) ;
13454: LD_STRING playRanger()
13456: PPUSH
13457: CALL_OW 559
// p := 0 ;
13461: LD_ADDR_VAR 0 2
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13469: LD_INT 35
13471: PPUSH
13472: CALL_OW 67
// p := p + 1 ;
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_INT 1
13488: PLUS
13489: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13490: LD_VAR 0 3
13494: PPUSH
13495: CALL_OW 256
13499: PUSH
13500: LD_INT 1000
13502: LESS
13503: IFFALSE 13517
// SetLives ( un , 1000 ) ;
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1000
13512: PPUSH
13513: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 81
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 91
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_INT 30
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PPUSH
13554: CALL_OW 69
13558: PPUSH
13559: LD_VAR 0 3
13563: PPUSH
13564: CALL_OW 74
13568: PPUSH
13569: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 80
13580: GREATER
13581: PUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: CALL_OW 301
13591: OR
13592: IFFALSE 13469
// if un then
13594: LD_VAR 0 3
13598: IFFALSE 13609
// RemoveUnit ( un ) ;
13600: LD_VAR 0 3
13604: PPUSH
13605: CALL_OW 64
// end ;
13609: PPOPN 3
13611: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13612: LD_EXP 57
13616: IFFALSE 13732
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
13624: PPUSH
13625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13626: LD_ADDR_VAR 0 2
13630: PUSH
13631: LD_INT 81
13633: PUSH
13634: LD_OWVAR 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13662: LD_STRING playComputer()
13664: PPUSH
13665: CALL_OW 559
// if not tmp then
13669: LD_VAR 0 2
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 13732
// for i in tmp do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_VAR 0 2
13687: PUSH
13688: FOR_IN
13689: IFFALSE 13730
// for j := 1 to 4 do
13691: LD_ADDR_VAR 0 3
13695: PUSH
13696: DOUBLE
13697: LD_INT 1
13699: DEC
13700: ST_TO_ADDR
13701: LD_INT 4
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13726
// SetSkill ( i , j , 10 ) ;
13707: LD_VAR 0 1
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 10
13719: PPUSH
13720: CALL_OW 237
13724: GO 13704
13726: POP
13727: POP
13728: GO 13688
13730: POP
13731: POP
// end ;
13732: PPOPN 3
13734: END
// every 0 0$1 trigger s30 do var i , tmp ;
13735: LD_EXP 58
13739: IFFALSE 13808
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_OWVAR 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: ST_TO_ADDR
// if not tmp then
13770: LD_VAR 0 2
13774: NOT
13775: IFFALSE 13779
// exit ;
13777: GO 13808
// for i in tmp do
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: LD_VAR 0 2
13788: PUSH
13789: FOR_IN
13790: IFFALSE 13806
// SetLives ( i , 300 ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: LD_INT 300
13799: PPUSH
13800: CALL_OW 234
13804: GO 13789
13806: POP
13807: POP
// end ;
13808: PPOPN 2
13810: END
// every 0 0$1 trigger s60 do var i , tmp ;
13811: LD_EXP 59
13815: IFFALSE 13884
13817: GO 13819
13819: DISABLE
13820: LD_INT 0
13822: PPUSH
13823: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_OWVAR 2
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: PPUSH
13841: CALL_OW 69
13845: ST_TO_ADDR
// if not tmp then
13846: LD_VAR 0 2
13850: NOT
13851: IFFALSE 13855
// exit ;
13853: GO 13884
// for i in tmp do
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_VAR 0 2
13864: PUSH
13865: FOR_IN
13866: IFFALSE 13882
// SetLives ( i , 600 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_INT 600
13875: PPUSH
13876: CALL_OW 234
13880: GO 13865
13882: POP
13883: POP
// end ;
13884: PPOPN 2
13886: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13887: LD_INT 0
13889: PPUSH
// case cmd of 301 :
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 301
13897: DOUBLE
13898: EQUAL
13899: IFTRUE 13903
13901: GO 13935
13903: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
13904: LD_VAR 0 6
13908: PPUSH
13909: LD_VAR 0 7
13913: PPUSH
13914: LD_VAR 0 8
13918: PPUSH
13919: LD_VAR 0 4
13923: PPUSH
13924: LD_VAR 0 5
13928: PPUSH
13929: CALL 15144 0 5
13933: GO 14056
13935: LD_INT 302
13937: DOUBLE
13938: EQUAL
13939: IFTRUE 13943
13941: GO 13980
13943: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
13944: LD_VAR 0 6
13948: PPUSH
13949: LD_VAR 0 7
13953: PPUSH
13954: LD_VAR 0 8
13958: PPUSH
13959: LD_VAR 0 9
13963: PPUSH
13964: LD_VAR 0 4
13968: PPUSH
13969: LD_VAR 0 5
13973: PPUSH
13974: CALL 15235 0 6
13978: GO 14056
13980: LD_INT 303
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14025
13988: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 7
13998: PPUSH
13999: LD_VAR 0 8
14003: PPUSH
14004: LD_VAR 0 9
14008: PPUSH
14009: LD_VAR 0 4
14013: PPUSH
14014: LD_VAR 0 5
14018: PPUSH
14019: CALL 14061 0 6
14023: GO 14056
14025: LD_INT 304
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14055
14033: POP
// hHackTeleport ( unit , x , y ) ; end ;
14034: LD_VAR 0 2
14038: PPUSH
14039: LD_VAR 0 4
14043: PPUSH
14044: LD_VAR 0 5
14048: PPUSH
14049: CALL 15828 0 3
14053: GO 14056
14055: POP
// end ;
14056: LD_VAR 0 12
14060: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14065: LD_VAR 0 1
14069: PUSH
14070: LD_INT 1
14072: LESS
14073: PUSH
14074: LD_VAR 0 1
14078: PUSH
14079: LD_INT 3
14081: GREATER
14082: OR
14083: PUSH
14084: LD_VAR 0 5
14088: PPUSH
14089: LD_VAR 0 6
14093: PPUSH
14094: CALL_OW 428
14098: OR
14099: IFFALSE 14103
// exit ;
14101: GO 14831
// uc_side := your_side ;
14103: LD_ADDR_OWVAR 20
14107: PUSH
14108: LD_OWVAR 2
14112: ST_TO_ADDR
// uc_nation := nation ;
14113: LD_ADDR_OWVAR 21
14117: PUSH
14118: LD_VAR 0 1
14122: ST_TO_ADDR
// bc_level = 1 ;
14123: LD_ADDR_OWVAR 43
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// case btype of 1 :
14131: LD_VAR 0 2
14135: PUSH
14136: LD_INT 1
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14155
14144: POP
// bc_type := b_depot ; 2 :
14145: LD_ADDR_OWVAR 42
14149: PUSH
14150: LD_INT 0
14152: ST_TO_ADDR
14153: GO 14775
14155: LD_INT 2
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14174
14163: POP
// bc_type := b_warehouse ; 3 :
14164: LD_ADDR_OWVAR 42
14168: PUSH
14169: LD_INT 1
14171: ST_TO_ADDR
14172: GO 14775
14174: LD_INT 3
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14193
14182: POP
// bc_type := b_lab ; 4 .. 9 :
14183: LD_ADDR_OWVAR 42
14187: PUSH
14188: LD_INT 6
14190: ST_TO_ADDR
14191: GO 14775
14193: LD_INT 4
14195: DOUBLE
14196: GREATEREQUAL
14197: IFFALSE 14205
14199: LD_INT 9
14201: DOUBLE
14202: LESSEQUAL
14203: IFTRUE 14207
14205: GO 14267
14207: POP
// begin bc_type := b_lab_half ;
14208: LD_ADDR_OWVAR 42
14212: PUSH
14213: LD_INT 7
14215: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14216: LD_ADDR_OWVAR 44
14220: PUSH
14221: LD_INT 10
14223: PUSH
14224: LD_INT 11
14226: PUSH
14227: LD_INT 12
14229: PUSH
14230: LD_INT 15
14232: PUSH
14233: LD_INT 14
14235: PUSH
14236: LD_INT 13
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_VAR 0 2
14251: PUSH
14252: LD_INT 3
14254: MINUS
14255: ARRAY
14256: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14257: LD_ADDR_OWVAR 45
14261: PUSH
14262: LD_INT 9
14264: ST_TO_ADDR
// end ; 10 .. 13 :
14265: GO 14775
14267: LD_INT 10
14269: DOUBLE
14270: GREATEREQUAL
14271: IFFALSE 14279
14273: LD_INT 13
14275: DOUBLE
14276: LESSEQUAL
14277: IFTRUE 14281
14279: GO 14358
14281: POP
// begin bc_type := b_lab_full ;
14282: LD_ADDR_OWVAR 42
14286: PUSH
14287: LD_INT 8
14289: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14290: LD_ADDR_OWVAR 44
14294: PUSH
14295: LD_INT 10
14297: PUSH
14298: LD_INT 12
14300: PUSH
14301: LD_INT 14
14303: PUSH
14304: LD_INT 13
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PUSH
14313: LD_VAR 0 2
14317: PUSH
14318: LD_INT 9
14320: MINUS
14321: ARRAY
14322: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14323: LD_ADDR_OWVAR 45
14327: PUSH
14328: LD_INT 11
14330: PUSH
14331: LD_INT 15
14333: PUSH
14334: LD_INT 12
14336: PUSH
14337: LD_INT 15
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 9
14353: MINUS
14354: ARRAY
14355: ST_TO_ADDR
// end ; 14 :
14356: GO 14775
14358: LD_INT 14
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14377
14366: POP
// bc_type := b_workshop ; 15 :
14367: LD_ADDR_OWVAR 42
14371: PUSH
14372: LD_INT 2
14374: ST_TO_ADDR
14375: GO 14775
14377: LD_INT 15
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// bc_type := b_factory ; 16 :
14386: LD_ADDR_OWVAR 42
14390: PUSH
14391: LD_INT 3
14393: ST_TO_ADDR
14394: GO 14775
14396: LD_INT 16
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14415
14404: POP
// bc_type := b_ext_gun ; 17 :
14405: LD_ADDR_OWVAR 42
14409: PUSH
14410: LD_INT 17
14412: ST_TO_ADDR
14413: GO 14775
14415: LD_INT 17
14417: DOUBLE
14418: EQUAL
14419: IFTRUE 14423
14421: GO 14451
14423: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14424: LD_ADDR_OWVAR 42
14428: PUSH
14429: LD_INT 19
14431: PUSH
14432: LD_INT 23
14434: PUSH
14435: LD_INT 19
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: LD_VAR 0 1
14447: ARRAY
14448: ST_TO_ADDR
14449: GO 14775
14451: LD_INT 18
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14470
14459: POP
// bc_type := b_ext_radar ; 19 :
14460: LD_ADDR_OWVAR 42
14464: PUSH
14465: LD_INT 20
14467: ST_TO_ADDR
14468: GO 14775
14470: LD_INT 19
14472: DOUBLE
14473: EQUAL
14474: IFTRUE 14478
14476: GO 14489
14478: POP
// bc_type := b_ext_radio ; 20 :
14479: LD_ADDR_OWVAR 42
14483: PUSH
14484: LD_INT 22
14486: ST_TO_ADDR
14487: GO 14775
14489: LD_INT 20
14491: DOUBLE
14492: EQUAL
14493: IFTRUE 14497
14495: GO 14508
14497: POP
// bc_type := b_ext_siberium ; 21 :
14498: LD_ADDR_OWVAR 42
14502: PUSH
14503: LD_INT 21
14505: ST_TO_ADDR
14506: GO 14775
14508: LD_INT 21
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14527
14516: POP
// bc_type := b_ext_computer ; 22 :
14517: LD_ADDR_OWVAR 42
14521: PUSH
14522: LD_INT 24
14524: ST_TO_ADDR
14525: GO 14775
14527: LD_INT 22
14529: DOUBLE
14530: EQUAL
14531: IFTRUE 14535
14533: GO 14546
14535: POP
// bc_type := b_ext_track ; 23 :
14536: LD_ADDR_OWVAR 42
14540: PUSH
14541: LD_INT 16
14543: ST_TO_ADDR
14544: GO 14775
14546: LD_INT 23
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14565
14554: POP
// bc_type := b_ext_laser ; 24 :
14555: LD_ADDR_OWVAR 42
14559: PUSH
14560: LD_INT 25
14562: ST_TO_ADDR
14563: GO 14775
14565: LD_INT 24
14567: DOUBLE
14568: EQUAL
14569: IFTRUE 14573
14571: GO 14584
14573: POP
// bc_type := b_control_tower ; 25 :
14574: LD_ADDR_OWVAR 42
14578: PUSH
14579: LD_INT 36
14581: ST_TO_ADDR
14582: GO 14775
14584: LD_INT 25
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14603
14592: POP
// bc_type := b_breastwork ; 26 :
14593: LD_ADDR_OWVAR 42
14597: PUSH
14598: LD_INT 31
14600: ST_TO_ADDR
14601: GO 14775
14603: LD_INT 26
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14622
14611: POP
// bc_type := b_bunker ; 27 :
14612: LD_ADDR_OWVAR 42
14616: PUSH
14617: LD_INT 32
14619: ST_TO_ADDR
14620: GO 14775
14622: LD_INT 27
14624: DOUBLE
14625: EQUAL
14626: IFTRUE 14630
14628: GO 14641
14630: POP
// bc_type := b_turret ; 28 :
14631: LD_ADDR_OWVAR 42
14635: PUSH
14636: LD_INT 33
14638: ST_TO_ADDR
14639: GO 14775
14641: LD_INT 28
14643: DOUBLE
14644: EQUAL
14645: IFTRUE 14649
14647: GO 14660
14649: POP
// bc_type := b_armoury ; 29 :
14650: LD_ADDR_OWVAR 42
14654: PUSH
14655: LD_INT 4
14657: ST_TO_ADDR
14658: GO 14775
14660: LD_INT 29
14662: DOUBLE
14663: EQUAL
14664: IFTRUE 14668
14666: GO 14679
14668: POP
// bc_type := b_barracks ; 30 :
14669: LD_ADDR_OWVAR 42
14673: PUSH
14674: LD_INT 5
14676: ST_TO_ADDR
14677: GO 14775
14679: LD_INT 30
14681: DOUBLE
14682: EQUAL
14683: IFTRUE 14687
14685: GO 14698
14687: POP
// bc_type := b_solar_power ; 31 :
14688: LD_ADDR_OWVAR 42
14692: PUSH
14693: LD_INT 27
14695: ST_TO_ADDR
14696: GO 14775
14698: LD_INT 31
14700: DOUBLE
14701: EQUAL
14702: IFTRUE 14706
14704: GO 14717
14706: POP
// bc_type := b_oil_power ; 32 :
14707: LD_ADDR_OWVAR 42
14711: PUSH
14712: LD_INT 26
14714: ST_TO_ADDR
14715: GO 14775
14717: LD_INT 32
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14736
14725: POP
// bc_type := b_siberite_power ; 33 :
14726: LD_ADDR_OWVAR 42
14730: PUSH
14731: LD_INT 28
14733: ST_TO_ADDR
14734: GO 14775
14736: LD_INT 33
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14755
14744: POP
// bc_type := b_oil_mine ; 34 :
14745: LD_ADDR_OWVAR 42
14749: PUSH
14750: LD_INT 29
14752: ST_TO_ADDR
14753: GO 14775
14755: LD_INT 34
14757: DOUBLE
14758: EQUAL
14759: IFTRUE 14763
14761: GO 14774
14763: POP
// bc_type := b_siberite_mine ; end ;
14764: LD_ADDR_OWVAR 42
14768: PUSH
14769: LD_INT 30
14771: ST_TO_ADDR
14772: GO 14775
14774: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
14775: LD_ADDR_VAR 0 8
14779: PUSH
14780: LD_VAR 0 5
14784: PPUSH
14785: LD_VAR 0 6
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 47
14799: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
14800: LD_OWVAR 42
14804: PUSH
14805: LD_INT 32
14807: PUSH
14808: LD_INT 33
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: IN
14815: IFFALSE 14831
// PlaceWeaponTurret ( b , weapon ) ;
14817: LD_VAR 0 8
14821: PPUSH
14822: LD_VAR 0 4
14826: PPUSH
14827: CALL_OW 431
// end ;
14831: LD_VAR 0 7
14835: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
14840: PPUSH
14841: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14842: LD_ADDR_VAR 0 4
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_OWVAR 2
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 2
14861: PUSH
14862: LD_INT 30
14864: PUSH
14865: LD_INT 0
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 30
14874: PUSH
14875: LD_INT 1
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if not tmp then
14896: LD_VAR 0 4
14900: NOT
14901: IFFALSE 14905
// exit ;
14903: GO 14964
// for i in tmp do
14905: LD_ADDR_VAR 0 2
14909: PUSH
14910: LD_VAR 0 4
14914: PUSH
14915: FOR_IN
14916: IFFALSE 14962
// for j = 1 to 3 do
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: DOUBLE
14924: LD_INT 1
14926: DEC
14927: ST_TO_ADDR
14928: LD_INT 3
14930: PUSH
14931: FOR_TO
14932: IFFALSE 14958
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 274
14943: PPUSH
14944: LD_VAR 0 3
14948: PPUSH
14949: LD_INT 99999
14951: PPUSH
14952: CALL_OW 277
14956: GO 14931
14958: POP
14959: POP
14960: GO 14915
14962: POP
14963: POP
// end ;
14964: LD_VAR 0 1
14968: RET
// export function hHackSetLevel10 ; var i , j ; begin
14969: LD_INT 0
14971: PPUSH
14972: PPUSH
14973: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_INT 21
14981: PUSH
14982: LD_INT 1
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PUSH
14994: FOR_IN
14995: IFFALSE 15047
// if IsSelected ( i ) then
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 306
15006: IFFALSE 15045
// begin for j := 1 to 4 do
15008: LD_ADDR_VAR 0 3
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 4
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15043
// SetSkill ( i , j , 10 ) ;
15024: LD_VAR 0 2
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 10
15036: PPUSH
15037: CALL_OW 237
15041: GO 15021
15043: POP
15044: POP
// end ;
15045: GO 14994
15047: POP
15048: POP
// end ;
15049: LD_VAR 0 1
15053: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15054: LD_INT 0
15056: PPUSH
15057: PPUSH
15058: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 22
15066: PUSH
15067: LD_OWVAR 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 69
15094: PUSH
15095: FOR_IN
15096: IFFALSE 15137
// begin for j := 1 to 4 do
15098: LD_ADDR_VAR 0 3
15102: PUSH
15103: DOUBLE
15104: LD_INT 1
15106: DEC
15107: ST_TO_ADDR
15108: LD_INT 4
15110: PUSH
15111: FOR_TO
15112: IFFALSE 15133
// SetSkill ( i , j , 10 ) ;
15114: LD_VAR 0 2
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 10
15126: PPUSH
15127: CALL_OW 237
15131: GO 15111
15133: POP
15134: POP
// end ;
15135: GO 15095
15137: POP
15138: POP
// end ;
15139: LD_VAR 0 1
15143: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15144: LD_INT 0
15146: PPUSH
// uc_side := your_side ;
15147: LD_ADDR_OWVAR 20
15151: PUSH
15152: LD_OWVAR 2
15156: ST_TO_ADDR
// uc_nation := nation ;
15157: LD_ADDR_OWVAR 21
15161: PUSH
15162: LD_VAR 0 1
15166: ST_TO_ADDR
// InitHc ;
15167: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15171: LD_INT 0
15173: PPUSH
15174: LD_VAR 0 2
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15188: LD_VAR 0 4
15192: PPUSH
15193: LD_VAR 0 5
15197: PPUSH
15198: CALL_OW 428
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15230
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15208: CALL_OW 44
15212: PPUSH
15213: LD_VAR 0 4
15217: PPUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 48
// end ;
15230: LD_VAR 0 6
15234: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
// uc_side := your_side ;
15239: LD_ADDR_OWVAR 20
15243: PUSH
15244: LD_OWVAR 2
15248: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15249: LD_VAR 0 1
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 2
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: IN
15276: IFFALSE 15288
// uc_nation := nation_american else
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
15286: GO 15331
// if chassis in [ 11 , 12 , 13 , 14 ] then
15288: LD_VAR 0 1
15292: PUSH
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: IN
15311: IFFALSE 15323
// uc_nation := nation_arabian else
15313: LD_ADDR_OWVAR 21
15317: PUSH
15318: LD_INT 2
15320: ST_TO_ADDR
15321: GO 15331
// uc_nation := nation_russian ;
15323: LD_ADDR_OWVAR 21
15327: PUSH
15328: LD_INT 3
15330: ST_TO_ADDR
// vc_chassis := chassis ;
15331: LD_ADDR_OWVAR 37
15335: PUSH
15336: LD_VAR 0 1
15340: ST_TO_ADDR
// vc_engine := engine ;
15341: LD_ADDR_OWVAR 39
15345: PUSH
15346: LD_VAR 0 2
15350: ST_TO_ADDR
// vc_control := control ;
15351: LD_ADDR_OWVAR 38
15355: PUSH
15356: LD_VAR 0 3
15360: ST_TO_ADDR
// vc_weapon := weapon ;
15361: LD_ADDR_OWVAR 40
15365: PUSH
15366: LD_VAR 0 4
15370: ST_TO_ADDR
// un := CreateVehicle ;
15371: LD_ADDR_VAR 0 8
15375: PUSH
15376: CALL_OW 45
15380: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15381: LD_VAR 0 8
15385: PPUSH
15386: LD_INT 0
15388: PPUSH
15389: LD_INT 5
15391: PPUSH
15392: CALL_OW 12
15396: PPUSH
15397: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15401: LD_VAR 0 8
15405: PPUSH
15406: LD_VAR 0 5
15410: PPUSH
15411: LD_VAR 0 6
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 48
// end ;
15423: LD_VAR 0 7
15427: RET
// export hInvincible ; every 1 do
15428: GO 15430
15430: DISABLE
// hInvincible := [ ] ;
15431: LD_ADDR_EXP 60
15435: PUSH
15436: EMPTY
15437: ST_TO_ADDR
15438: END
// every 10 do var i ;
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin enable ;
15445: ENABLE
// if not hInvincible then
15446: LD_EXP 60
15450: NOT
15451: IFFALSE 15455
// exit ;
15453: GO 15499
// for i in hInvincible do
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_EXP 60
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15497
// if GetLives ( i ) < 1000 then
15468: LD_VAR 0 1
15472: PPUSH
15473: CALL_OW 256
15477: PUSH
15478: LD_INT 1000
15480: LESS
15481: IFFALSE 15495
// SetLives ( i , 1000 ) ;
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_INT 1000
15490: PPUSH
15491: CALL_OW 234
15495: GO 15465
15497: POP
15498: POP
// end ;
15499: PPOPN 1
15501: END
// export function hHackInvincible ; var i ; begin
15502: LD_INT 0
15504: PPUSH
15505: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 2
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15606
// if IsSelected ( i ) then
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 306
15556: IFFALSE 15604
// begin if i in hInvincible then
15558: LD_VAR 0 2
15562: PUSH
15563: LD_EXP 60
15567: IN
15568: IFFALSE 15588
// hInvincible := hInvincible diff i else
15570: LD_ADDR_EXP 60
15574: PUSH
15575: LD_EXP 60
15579: PUSH
15580: LD_VAR 0 2
15584: DIFF
15585: ST_TO_ADDR
15586: GO 15604
// hInvincible := hInvincible union i ;
15588: LD_ADDR_EXP 60
15592: PUSH
15593: LD_EXP 60
15597: PUSH
15598: LD_VAR 0 2
15602: UNION
15603: ST_TO_ADDR
// end ;
15604: GO 15544
15606: POP
15607: POP
// end ;
15608: LD_VAR 0 1
15612: RET
// export function hHackInvisible ; var i , j ; begin
15613: LD_INT 0
15615: PPUSH
15616: PPUSH
15617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15618: LD_ADDR_VAR 0 2
15622: PUSH
15623: LD_INT 21
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 69
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15663
// if IsSelected ( i ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: CALL_OW 306
15650: IFFALSE 15661
// ComForceInvisible ( i ) ;
15652: LD_VAR 0 2
15656: PPUSH
15657: CALL_OW 496
15661: GO 15638
15663: POP
15664: POP
// end ;
15665: LD_VAR 0 1
15669: RET
// export function hHackChangeYourSide ; begin
15670: LD_INT 0
15672: PPUSH
// if your_side = 8 then
15673: LD_OWVAR 2
15677: PUSH
15678: LD_INT 8
15680: EQUAL
15681: IFFALSE 15693
// your_side := 0 else
15683: LD_ADDR_OWVAR 2
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
15691: GO 15707
// your_side := your_side + 1 ;
15693: LD_ADDR_OWVAR 2
15697: PUSH
15698: LD_OWVAR 2
15702: PUSH
15703: LD_INT 1
15705: PLUS
15706: ST_TO_ADDR
// end ;
15707: LD_VAR 0 1
15711: RET
// export function hHackChangeUnitSide ; var i , j ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
// for i in all_units do
15717: LD_ADDR_VAR 0 2
15721: PUSH
15722: LD_OWVAR 3
15726: PUSH
15727: FOR_IN
15728: IFFALSE 15806
// if IsSelected ( i ) then
15730: LD_VAR 0 2
15734: PPUSH
15735: CALL_OW 306
15739: IFFALSE 15804
// begin j := GetSide ( i ) ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: LD_VAR 0 2
15750: PPUSH
15751: CALL_OW 255
15755: ST_TO_ADDR
// if j = 8 then
15756: LD_VAR 0 3
15760: PUSH
15761: LD_INT 8
15763: EQUAL
15764: IFFALSE 15776
// j := 0 else
15766: LD_ADDR_VAR 0 3
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
15774: GO 15790
// j := j + 1 ;
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 1
15788: PLUS
15789: ST_TO_ADDR
// SetSide ( i , j ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: LD_VAR 0 3
15799: PPUSH
15800: CALL_OW 235
// end ;
15804: GO 15727
15806: POP
15807: POP
// end ;
15808: LD_VAR 0 1
15812: RET
// export function hHackFog ; begin
15813: LD_INT 0
15815: PPUSH
// FogOff ( true ) ;
15816: LD_INT 1
15818: PPUSH
15819: CALL_OW 344
// end ;
15823: LD_VAR 0 1
15827: RET
// export function hHackTeleport ( unit , x , y ) ; begin
15828: LD_INT 0
15830: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
15831: LD_VAR 0 1
15835: PPUSH
15836: LD_VAR 0 2
15840: PPUSH
15841: LD_VAR 0 3
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 483
// CenterOnXY ( x , y ) ;
15856: LD_VAR 0 2
15860: PPUSH
15861: LD_VAR 0 3
15865: PPUSH
15866: CALL_OW 84
// end ;
15870: LD_VAR 0 4
15874: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15879: LD_VAR 0 1
15883: NOT
15884: PUSH
15885: LD_VAR 0 2
15889: PPUSH
15890: LD_VAR 0 3
15894: PPUSH
15895: CALL_OW 488
15899: NOT
15900: OR
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PUSH
15912: LD_INT 3
15914: NONEQUAL
15915: PUSH
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 1
15928: EQUAL
15929: NOT
15930: AND
15931: OR
15932: IFFALSE 15936
// exit ;
15934: GO 16085
// if GetType ( factory ) = unit_human then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 247
15945: PUSH
15946: LD_INT 1
15948: EQUAL
15949: IFFALSE 15966
// factory := IsInUnit ( factory ) ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 310
15965: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 266
15975: PUSH
15976: LD_INT 3
15978: NONEQUAL
15979: IFFALSE 15983
// exit ;
15981: GO 16085
// if HexInfo ( x , y ) = factory then
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: CALL_OW 428
15997: PUSH
15998: LD_VAR 0 1
16002: EQUAL
16003: IFFALSE 16030
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16005: LD_ADDR_EXP 61
16009: PUSH
16010: LD_EXP 61
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: LD_INT 0
16022: PPUSH
16023: CALL_OW 1
16027: ST_TO_ADDR
16028: GO 16081
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16030: LD_ADDR_EXP 61
16034: PUSH
16035: LD_EXP 61
16039: PPUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 255
16054: PUSH
16055: LD_VAR 0 1
16059: PUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_VAR 0 3
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 1
16080: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16081: CALL 16090 0 0
// end ;
16085: LD_VAR 0 4
16089: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16095: LD_STRING resetFactoryWaypoint();
16097: PPUSH
16098: CALL_OW 559
// if factoryWaypoints then
16102: LD_EXP 61
16106: IFFALSE 16232
// begin list := PrepareArray ( factoryWaypoints ) ;
16108: LD_ADDR_VAR 0 3
16112: PUSH
16113: LD_EXP 61
16117: PPUSH
16118: CALL 64122 0 1
16122: ST_TO_ADDR
// for i := 1 to list do
16123: LD_ADDR_VAR 0 2
16127: PUSH
16128: DOUBLE
16129: LD_INT 1
16131: DEC
16132: ST_TO_ADDR
16133: LD_VAR 0 3
16137: PUSH
16138: FOR_TO
16139: IFFALSE 16230
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16141: LD_STRING setFactoryWaypointXY(
16143: PUSH
16144: LD_VAR 0 3
16148: PUSH
16149: LD_VAR 0 2
16153: ARRAY
16154: PUSH
16155: LD_INT 1
16157: ARRAY
16158: STR
16159: PUSH
16160: LD_STRING ,
16162: STR
16163: PUSH
16164: LD_VAR 0 3
16168: PUSH
16169: LD_VAR 0 2
16173: ARRAY
16174: PUSH
16175: LD_INT 2
16177: ARRAY
16178: STR
16179: PUSH
16180: LD_STRING ,
16182: STR
16183: PUSH
16184: LD_VAR 0 3
16188: PUSH
16189: LD_VAR 0 2
16193: ARRAY
16194: PUSH
16195: LD_INT 3
16197: ARRAY
16198: STR
16199: PUSH
16200: LD_STRING ,
16202: STR
16203: PUSH
16204: LD_VAR 0 3
16208: PUSH
16209: LD_VAR 0 2
16213: ARRAY
16214: PUSH
16215: LD_INT 4
16217: ARRAY
16218: STR
16219: PUSH
16220: LD_STRING )
16222: STR
16223: PPUSH
16224: CALL_OW 559
16228: GO 16138
16230: POP
16231: POP
// end ; end ;
16232: LD_VAR 0 1
16236: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16237: LD_INT 0
16239: PPUSH
// if HexInfo ( x , y ) = warehouse then
16240: LD_VAR 0 2
16244: PPUSH
16245: LD_VAR 0 3
16249: PPUSH
16250: CALL_OW 428
16254: PUSH
16255: LD_VAR 0 1
16259: EQUAL
16260: IFFALSE 16287
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16262: LD_ADDR_EXP 62
16266: PUSH
16267: LD_EXP 62
16271: PPUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: LD_INT 0
16279: PPUSH
16280: CALL_OW 1
16284: ST_TO_ADDR
16285: GO 16338
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16287: LD_ADDR_EXP 62
16291: PUSH
16292: LD_EXP 62
16296: PPUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 255
16311: PUSH
16312: LD_VAR 0 1
16316: PUSH
16317: LD_VAR 0 2
16321: PUSH
16322: LD_VAR 0 3
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 1
16337: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16338: CALL 16347 0 0
// end ;
16342: LD_VAR 0 4
16346: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16347: LD_INT 0
16349: PPUSH
16350: PPUSH
16351: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16352: LD_STRING resetWarehouseGatheringPoints();
16354: PPUSH
16355: CALL_OW 559
// if warehouseGatheringPoints then
16359: LD_EXP 62
16363: IFFALSE 16489
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16365: LD_ADDR_VAR 0 3
16369: PUSH
16370: LD_EXP 62
16374: PPUSH
16375: CALL 64122 0 1
16379: ST_TO_ADDR
// for i := 1 to list do
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: DOUBLE
16386: LD_INT 1
16388: DEC
16389: ST_TO_ADDR
16390: LD_VAR 0 3
16394: PUSH
16395: FOR_TO
16396: IFFALSE 16487
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16398: LD_STRING setWarehouseGatheringPointXY(
16400: PUSH
16401: LD_VAR 0 3
16405: PUSH
16406: LD_VAR 0 2
16410: ARRAY
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: STR
16416: PUSH
16417: LD_STRING ,
16419: STR
16420: PUSH
16421: LD_VAR 0 3
16425: PUSH
16426: LD_VAR 0 2
16430: ARRAY
16431: PUSH
16432: LD_INT 2
16434: ARRAY
16435: STR
16436: PUSH
16437: LD_STRING ,
16439: STR
16440: PUSH
16441: LD_VAR 0 3
16445: PUSH
16446: LD_VAR 0 2
16450: ARRAY
16451: PUSH
16452: LD_INT 3
16454: ARRAY
16455: STR
16456: PUSH
16457: LD_STRING ,
16459: STR
16460: PUSH
16461: LD_VAR 0 3
16465: PUSH
16466: LD_VAR 0 2
16470: ARRAY
16471: PUSH
16472: LD_INT 4
16474: ARRAY
16475: STR
16476: PUSH
16477: LD_STRING )
16479: STR
16480: PPUSH
16481: CALL_OW 559
16485: GO 16395
16487: POP
16488: POP
// end ; end ;
16489: LD_VAR 0 1
16493: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16494: LD_EXP 62
16498: IFFALSE 17183
16500: GO 16502
16502: DISABLE
16503: LD_INT 0
16505: PPUSH
16506: PPUSH
16507: PPUSH
16508: PPUSH
16509: PPUSH
16510: PPUSH
16511: PPUSH
16512: PPUSH
16513: PPUSH
// begin enable ;
16514: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16515: LD_ADDR_VAR 0 3
16519: PUSH
16520: LD_EXP 62
16524: PPUSH
16525: CALL 64122 0 1
16529: ST_TO_ADDR
// if not list then
16530: LD_VAR 0 3
16534: NOT
16535: IFFALSE 16539
// exit ;
16537: GO 17183
// for i := 1 to list do
16539: LD_ADDR_VAR 0 1
16543: PUSH
16544: DOUBLE
16545: LD_INT 1
16547: DEC
16548: ST_TO_ADDR
16549: LD_VAR 0 3
16553: PUSH
16554: FOR_TO
16555: IFFALSE 17181
// begin depot := list [ i ] [ 2 ] ;
16557: LD_ADDR_VAR 0 8
16561: PUSH
16562: LD_VAR 0 3
16566: PUSH
16567: LD_VAR 0 1
16571: ARRAY
16572: PUSH
16573: LD_INT 2
16575: ARRAY
16576: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16577: LD_ADDR_VAR 0 5
16581: PUSH
16582: LD_VAR 0 3
16586: PUSH
16587: LD_VAR 0 1
16591: ARRAY
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16597: LD_VAR 0 8
16601: PPUSH
16602: CALL_OW 301
16606: PUSH
16607: LD_VAR 0 5
16611: PUSH
16612: LD_VAR 0 8
16616: PPUSH
16617: CALL_OW 255
16621: NONEQUAL
16622: OR
16623: IFFALSE 16652
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16625: LD_ADDR_EXP 62
16629: PUSH
16630: LD_EXP 62
16634: PPUSH
16635: LD_VAR 0 8
16639: PPUSH
16640: LD_INT 0
16642: PPUSH
16643: CALL_OW 1
16647: ST_TO_ADDR
// exit ;
16648: POP
16649: POP
16650: GO 17183
// end ; x := list [ i ] [ 3 ] ;
16652: LD_ADDR_VAR 0 6
16656: PUSH
16657: LD_VAR 0 3
16661: PUSH
16662: LD_VAR 0 1
16666: ARRAY
16667: PUSH
16668: LD_INT 3
16670: ARRAY
16671: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16672: LD_ADDR_VAR 0 7
16676: PUSH
16677: LD_VAR 0 3
16681: PUSH
16682: LD_VAR 0 1
16686: ARRAY
16687: PUSH
16688: LD_INT 4
16690: ARRAY
16691: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
16692: LD_ADDR_VAR 0 9
16696: PUSH
16697: LD_VAR 0 6
16701: PPUSH
16702: LD_VAR 0 7
16706: PPUSH
16707: LD_INT 16
16709: PPUSH
16710: CALL 62706 0 3
16714: ST_TO_ADDR
// if not cratesNearbyPoint then
16715: LD_VAR 0 9
16719: NOT
16720: IFFALSE 16726
// exit ;
16722: POP
16723: POP
16724: GO 17183
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
16726: LD_ADDR_VAR 0 4
16730: PUSH
16731: LD_INT 22
16733: PUSH
16734: LD_VAR 0 5
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 3
16745: PUSH
16746: LD_INT 60
16748: PUSH
16749: EMPTY
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 91
16758: PUSH
16759: LD_VAR 0 8
16763: PUSH
16764: LD_INT 6
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 25
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 25
16787: PUSH
16788: LD_INT 16
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 69
16810: PUSH
16811: LD_VAR 0 8
16815: PPUSH
16816: CALL_OW 313
16820: PPUSH
16821: LD_INT 3
16823: PUSH
16824: LD_INT 60
16826: PUSH
16827: EMPTY
16828: LIST
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: LD_INT 25
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 25
16849: PUSH
16850: LD_INT 16
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 72
16870: UNION
16871: ST_TO_ADDR
// if tmp then
16872: LD_VAR 0 4
16876: IFFALSE 16956
// begin tmp := ShrinkArray ( tmp , 3 ) ;
16878: LD_ADDR_VAR 0 4
16882: PUSH
16883: LD_VAR 0 4
16887: PPUSH
16888: LD_INT 3
16890: PPUSH
16891: CALL 60675 0 2
16895: ST_TO_ADDR
// for j in tmp do
16896: LD_ADDR_VAR 0 2
16900: PUSH
16901: LD_VAR 0 4
16905: PUSH
16906: FOR_IN
16907: IFFALSE 16950
// begin if IsInUnit ( j ) then
16909: LD_VAR 0 2
16913: PPUSH
16914: CALL_OW 310
16918: IFFALSE 16929
// ComExit ( j ) ;
16920: LD_VAR 0 2
16924: PPUSH
16925: CALL 60758 0 1
// AddComCollect ( j , x , y ) ;
16929: LD_VAR 0 2
16933: PPUSH
16934: LD_VAR 0 6
16938: PPUSH
16939: LD_VAR 0 7
16943: PPUSH
16944: CALL_OW 177
// end ;
16948: GO 16906
16950: POP
16951: POP
// exit ;
16952: POP
16953: POP
16954: GO 17183
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
16956: LD_ADDR_VAR 0 4
16960: PUSH
16961: LD_INT 22
16963: PUSH
16964: LD_VAR 0 5
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 91
16975: PUSH
16976: LD_VAR 0 8
16980: PUSH
16981: LD_INT 8
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 34
16994: PUSH
16995: LD_INT 12
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 34
17004: PUSH
17005: LD_INT 51
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 34
17014: PUSH
17015: LD_INT 32
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 34
17024: PUSH
17025: LD_INT 89
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: ST_TO_ADDR
// if tmp then
17049: LD_VAR 0 4
17053: IFFALSE 17179
// begin for j in tmp do
17055: LD_ADDR_VAR 0 2
17059: PUSH
17060: LD_VAR 0 4
17064: PUSH
17065: FOR_IN
17066: IFFALSE 17177
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 262
17077: PUSH
17078: LD_INT 3
17080: EQUAL
17081: PUSH
17082: LD_VAR 0 2
17086: PPUSH
17087: CALL_OW 261
17091: PUSH
17092: LD_INT 20
17094: GREATER
17095: OR
17096: PUSH
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 314
17106: NOT
17107: AND
17108: PUSH
17109: LD_VAR 0 2
17113: PPUSH
17114: CALL_OW 263
17118: PUSH
17119: LD_INT 1
17121: NONEQUAL
17122: PUSH
17123: LD_VAR 0 2
17127: PPUSH
17128: CALL_OW 311
17132: OR
17133: AND
17134: IFFALSE 17175
// begin ComCollect ( j , x , y ) ;
17136: LD_VAR 0 2
17140: PPUSH
17141: LD_VAR 0 6
17145: PPUSH
17146: LD_VAR 0 7
17150: PPUSH
17151: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17155: LD_VAR 0 2
17159: PPUSH
17160: LD_VAR 0 8
17164: PPUSH
17165: CALL_OW 172
// exit ;
17169: POP
17170: POP
17171: POP
17172: POP
17173: GO 17183
// end ;
17175: GO 17065
17177: POP
17178: POP
// end ; end ;
17179: GO 16554
17181: POP
17182: POP
// end ; end_of_file
17183: PPOPN 9
17185: END
// export function SOS_UnitDestroyed ( un ) ; begin
17186: LD_INT 0
17188: PPUSH
// ComRadiation ( un ) ;
17189: LD_VAR 0 1
17193: PPUSH
17194: CALL 18132 0 1
// end ;
17198: LD_VAR 0 2
17202: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17203: LD_INT 0
17205: PPUSH
// ComRadiation ( un ) ;
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL 18132 0 1
// end ;
17215: LD_VAR 0 2
17219: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17220: LD_INT 0
17222: PPUSH
// end ;
17223: LD_VAR 0 4
17227: RET
// export function SOS_Command ( cmd ) ; begin
17228: LD_INT 0
17230: PPUSH
// end ;
17231: LD_VAR 0 2
17235: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17236: LD_INT 0
17238: PPUSH
// end ;
17239: LD_VAR 0 6
17243: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
17244: LD_INT 0
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
// if not vehicle or not factory then
17250: LD_VAR 0 1
17254: NOT
17255: PUSH
17256: LD_VAR 0 2
17260: NOT
17261: OR
17262: IFFALSE 17266
// exit ;
17264: GO 17723
// if factoryWaypoints >= factory then
17266: LD_EXP 61
17270: PUSH
17271: LD_VAR 0 2
17275: GREATEREQUAL
17276: IFFALSE 17723
// if factoryWaypoints [ factory ] then
17278: LD_EXP 61
17282: PUSH
17283: LD_VAR 0 2
17287: ARRAY
17288: IFFALSE 17723
// begin if GetControl ( vehicle ) = control_manual then
17290: LD_VAR 0 1
17294: PPUSH
17295: CALL_OW 263
17299: PUSH
17300: LD_INT 1
17302: EQUAL
17303: IFFALSE 17610
// begin driver := IsDrivenBy ( vehicle ) ;
17305: LD_ADDR_VAR 0 5
17309: PUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 311
17319: ST_TO_ADDR
// tag := GetTag ( driver ) ;
17320: LD_ADDR_VAR 0 4
17324: PUSH
17325: LD_VAR 0 5
17329: PPUSH
17330: CALL_OW 110
17334: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
17335: LD_VAR 0 4
17339: PUSH
17340: LD_INT 501
17342: EQUAL
17343: PUSH
17344: LD_VAR 0 1
17348: PPUSH
17349: CALL_OW 110
17353: PUSH
17354: LD_INT 501
17356: EQUAL
17357: OR
17358: IFFALSE 17362
// exit ;
17360: GO 17723
// if not HasTask ( driver ) then
17362: LD_VAR 0 5
17366: PPUSH
17367: CALL_OW 314
17371: NOT
17372: IFFALSE 17608
// begin SetTag ( driver , tDriver ) ;
17374: LD_VAR 0 5
17378: PPUSH
17379: LD_INT 501
17381: PPUSH
17382: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
17386: LD_VAR 0 1
17390: PPUSH
17391: LD_INT 501
17393: PPUSH
17394: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17398: LD_ADDR_VAR 0 6
17402: PUSH
17403: LD_EXP 61
17407: PUSH
17408: LD_VAR 0 2
17412: ARRAY
17413: PUSH
17414: LD_INT 3
17416: ARRAY
17417: PPUSH
17418: LD_EXP 61
17422: PUSH
17423: LD_VAR 0 2
17427: ARRAY
17428: PUSH
17429: LD_INT 4
17431: ARRAY
17432: PPUSH
17433: CALL_OW 428
17437: ST_TO_ADDR
// if hex then
17438: LD_VAR 0 6
17442: IFFALSE 17460
// ComMoveUnit ( driver , hex ) else
17444: LD_VAR 0 5
17448: PPUSH
17449: LD_VAR 0 6
17453: PPUSH
17454: CALL_OW 112
17458: GO 17499
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17460: LD_VAR 0 5
17464: PPUSH
17465: LD_EXP 61
17469: PUSH
17470: LD_VAR 0 2
17474: ARRAY
17475: PUSH
17476: LD_INT 3
17478: ARRAY
17479: PPUSH
17480: LD_EXP 61
17484: PUSH
17485: LD_VAR 0 2
17489: ARRAY
17490: PUSH
17491: LD_INT 4
17493: ARRAY
17494: PPUSH
17495: CALL_OW 111
// AddComExitVehicle ( driver ) ;
17499: LD_VAR 0 5
17503: PPUSH
17504: CALL_OW 181
// if Multiplayer then
17508: LD_OWVAR 4
17512: IFFALSE 17561
// begin repeat wait ( 10 ) ;
17514: LD_INT 10
17516: PPUSH
17517: CALL_OW 67
// until not IsInUnit ( driver ) ;
17521: LD_VAR 0 5
17525: PPUSH
17526: CALL_OW 310
17530: NOT
17531: IFFALSE 17514
// if not HasTask ( driver ) then
17533: LD_VAR 0 5
17537: PPUSH
17538: CALL_OW 314
17542: NOT
17543: IFFALSE 17559
// ComEnterUnit ( driver , factory ) ;
17545: LD_VAR 0 5
17549: PPUSH
17550: LD_VAR 0 2
17554: PPUSH
17555: CALL_OW 120
// end else
17559: GO 17575
// AddComEnterUnit ( driver , factory ) ;
17561: LD_VAR 0 5
17565: PPUSH
17566: LD_VAR 0 2
17570: PPUSH
17571: CALL_OW 180
// wait ( 0 0$1 ) ;
17575: LD_INT 35
17577: PPUSH
17578: CALL_OW 67
// SetTag ( driver , tag ) ;
17582: LD_VAR 0 5
17586: PPUSH
17587: LD_VAR 0 4
17591: PPUSH
17592: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_INT 0
17603: PPUSH
17604: CALL_OW 109
// end ; end else
17608: GO 17723
// if GetControl ( vehicle ) = control_remote then
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 263
17619: PUSH
17620: LD_INT 2
17622: EQUAL
17623: IFFALSE 17684
// begin wait ( 0 0$2 ) ;
17625: LD_INT 70
17627: PPUSH
17628: CALL_OW 67
// if Connect ( vehicle ) then
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL 30957 0 1
17641: IFFALSE 17682
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17643: LD_VAR 0 1
17647: PPUSH
17648: LD_EXP 61
17652: PUSH
17653: LD_VAR 0 2
17657: ARRAY
17658: PUSH
17659: LD_INT 3
17661: ARRAY
17662: PPUSH
17663: LD_EXP 61
17667: PUSH
17668: LD_VAR 0 2
17672: ARRAY
17673: PUSH
17674: LD_INT 4
17676: ARRAY
17677: PPUSH
17678: CALL_OW 171
// end else
17682: GO 17723
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_EXP 61
17693: PUSH
17694: LD_VAR 0 2
17698: ARRAY
17699: PUSH
17700: LD_INT 3
17702: ARRAY
17703: PPUSH
17704: LD_EXP 61
17708: PUSH
17709: LD_VAR 0 2
17713: ARRAY
17714: PUSH
17715: LD_INT 4
17717: ARRAY
17718: PPUSH
17719: CALL_OW 171
// end ; end ;
17723: LD_VAR 0 3
17727: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17728: LD_INT 0
17730: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17731: LD_VAR 0 1
17735: PUSH
17736: LD_INT 250
17738: EQUAL
17739: PUSH
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL_OW 264
17749: PUSH
17750: LD_INT 81
17752: EQUAL
17753: AND
17754: IFFALSE 17775
// MinerPlaceMine ( unit , x , y ) ;
17756: LD_VAR 0 2
17760: PPUSH
17761: LD_VAR 0 4
17765: PPUSH
17766: LD_VAR 0 5
17770: PPUSH
17771: CALL 20867 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17775: LD_VAR 0 1
17779: PUSH
17780: LD_INT 251
17782: EQUAL
17783: PUSH
17784: LD_VAR 0 2
17788: PPUSH
17789: CALL_OW 264
17793: PUSH
17794: LD_INT 81
17796: EQUAL
17797: AND
17798: IFFALSE 17819
// MinerDetonateMine ( unit , x , y ) ;
17800: LD_VAR 0 2
17804: PPUSH
17805: LD_VAR 0 4
17809: PPUSH
17810: LD_VAR 0 5
17814: PPUSH
17815: CALL 21142 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17819: LD_VAR 0 1
17823: PUSH
17824: LD_INT 252
17826: EQUAL
17827: PUSH
17828: LD_VAR 0 2
17832: PPUSH
17833: CALL_OW 264
17837: PUSH
17838: LD_INT 81
17840: EQUAL
17841: AND
17842: IFFALSE 17863
// MinerCreateMinefield ( unit , x , y ) ;
17844: LD_VAR 0 2
17848: PPUSH
17849: LD_VAR 0 4
17853: PPUSH
17854: LD_VAR 0 5
17858: PPUSH
17859: CALL 21559 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17863: LD_VAR 0 1
17867: PUSH
17868: LD_INT 253
17870: EQUAL
17871: PUSH
17872: LD_VAR 0 2
17876: PPUSH
17877: CALL_OW 257
17881: PUSH
17882: LD_INT 5
17884: EQUAL
17885: AND
17886: IFFALSE 17907
// ComBinocular ( unit , x , y ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: LD_VAR 0 4
17897: PPUSH
17898: LD_VAR 0 5
17902: PPUSH
17903: CALL 21928 0 3
// if selectedUnit then
17907: LD_VAR 0 3
17911: IFFALSE 17967
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 254
17920: EQUAL
17921: PUSH
17922: LD_VAR 0 2
17926: PPUSH
17927: CALL_OW 264
17931: PUSH
17932: LD_INT 99
17934: EQUAL
17935: AND
17936: PUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: CALL_OW 263
17946: PUSH
17947: LD_INT 3
17949: EQUAL
17950: AND
17951: IFFALSE 17967
// HackDestroyVehicle ( unit , selectedUnit ) ;
17953: LD_VAR 0 2
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: CALL 20231 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17967: LD_VAR 0 1
17971: PUSH
17972: LD_INT 255
17974: EQUAL
17975: PUSH
17976: LD_VAR 0 2
17980: PPUSH
17981: CALL_OW 264
17985: PUSH
17986: LD_INT 14
17988: PUSH
17989: LD_INT 53
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: IN
17996: AND
17997: PUSH
17998: LD_VAR 0 4
18002: PPUSH
18003: LD_VAR 0 5
18007: PPUSH
18008: CALL_OW 488
18012: AND
18013: IFFALSE 18037
// CutTreeXYR ( unit , x , y , 12 ) ;
18015: LD_VAR 0 2
18019: PPUSH
18020: LD_VAR 0 4
18024: PPUSH
18025: LD_VAR 0 5
18029: PPUSH
18030: LD_INT 12
18032: PPUSH
18033: CALL 18228 0 4
// if cmd = 256 then
18037: LD_VAR 0 1
18041: PUSH
18042: LD_INT 256
18044: EQUAL
18045: IFFALSE 18066
// SetFactoryWaypoint ( unit , x , y ) ;
18047: LD_VAR 0 2
18051: PPUSH
18052: LD_VAR 0 4
18056: PPUSH
18057: LD_VAR 0 5
18061: PPUSH
18062: CALL 15875 0 3
// if cmd = 257 then
18066: LD_VAR 0 1
18070: PUSH
18071: LD_INT 257
18073: EQUAL
18074: IFFALSE 18095
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18076: LD_VAR 0 2
18080: PPUSH
18081: LD_VAR 0 4
18085: PPUSH
18086: LD_VAR 0 5
18090: PPUSH
18091: CALL 16237 0 3
// if cmd = 258 then
18095: LD_VAR 0 1
18099: PUSH
18100: LD_INT 258
18102: EQUAL
18103: IFFALSE 18127
// BurnTreeXYR ( unit , x , y , 8 ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: LD_VAR 0 4
18114: PPUSH
18115: LD_VAR 0 5
18119: PPUSH
18120: LD_INT 8
18122: PPUSH
18123: CALL 18622 0 4
// end ;
18127: LD_VAR 0 6
18131: RET
// export function ComRadiation ( un ) ; var eff ; begin
18132: LD_INT 0
18134: PPUSH
18135: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 264
18145: PUSH
18146: LD_INT 91
18148: NONEQUAL
18149: IFFALSE 18153
// exit ;
18151: GO 18223
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18153: LD_INT 68
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 255
18165: PPUSH
18166: CALL_OW 321
18170: PUSH
18171: LD_INT 2
18173: EQUAL
18174: IFFALSE 18186
// eff := 70 else
18176: LD_ADDR_VAR 0 3
18180: PUSH
18181: LD_INT 70
18183: ST_TO_ADDR
18184: GO 18194
// eff := 30 ;
18186: LD_ADDR_VAR 0 3
18190: PUSH
18191: LD_INT 30
18193: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 250
18203: PPUSH
18204: LD_VAR 0 1
18208: PPUSH
18209: CALL_OW 251
18213: PPUSH
18214: LD_VAR 0 3
18218: PPUSH
18219: CALL_OW 495
// end ;
18223: LD_VAR 0 2
18227: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18239: LD_VAR 0 1
18243: PPUSH
18244: CALL_OW 302
18248: NOT
18249: PUSH
18250: LD_VAR 0 2
18254: PPUSH
18255: LD_VAR 0 3
18259: PPUSH
18260: CALL_OW 488
18264: NOT
18265: OR
18266: PUSH
18267: LD_VAR 0 4
18271: NOT
18272: OR
18273: IFFALSE 18277
// exit ;
18275: GO 18617
// list := [ ] ;
18277: LD_ADDR_VAR 0 13
18281: PUSH
18282: EMPTY
18283: ST_TO_ADDR
// if x - r < 0 then
18284: LD_VAR 0 2
18288: PUSH
18289: LD_VAR 0 4
18293: MINUS
18294: PUSH
18295: LD_INT 0
18297: LESS
18298: IFFALSE 18310
// min_x := 0 else
18300: LD_ADDR_VAR 0 7
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
18308: GO 18326
// min_x := x - r ;
18310: LD_ADDR_VAR 0 7
18314: PUSH
18315: LD_VAR 0 2
18319: PUSH
18320: LD_VAR 0 4
18324: MINUS
18325: ST_TO_ADDR
// if y - r < 0 then
18326: LD_VAR 0 3
18330: PUSH
18331: LD_VAR 0 4
18335: MINUS
18336: PUSH
18337: LD_INT 0
18339: LESS
18340: IFFALSE 18352
// min_y := 0 else
18342: LD_ADDR_VAR 0 8
18346: PUSH
18347: LD_INT 0
18349: ST_TO_ADDR
18350: GO 18368
// min_y := y - r ;
18352: LD_ADDR_VAR 0 8
18356: PUSH
18357: LD_VAR 0 3
18361: PUSH
18362: LD_VAR 0 4
18366: MINUS
18367: ST_TO_ADDR
// max_x := x + r ;
18368: LD_ADDR_VAR 0 9
18372: PUSH
18373: LD_VAR 0 2
18377: PUSH
18378: LD_VAR 0 4
18382: PLUS
18383: ST_TO_ADDR
// max_y := y + r ;
18384: LD_ADDR_VAR 0 10
18388: PUSH
18389: LD_VAR 0 3
18393: PUSH
18394: LD_VAR 0 4
18398: PLUS
18399: ST_TO_ADDR
// for _x = min_x to max_x do
18400: LD_ADDR_VAR 0 11
18404: PUSH
18405: DOUBLE
18406: LD_VAR 0 7
18410: DEC
18411: ST_TO_ADDR
18412: LD_VAR 0 9
18416: PUSH
18417: FOR_TO
18418: IFFALSE 18535
// for _y = min_y to max_y do
18420: LD_ADDR_VAR 0 12
18424: PUSH
18425: DOUBLE
18426: LD_VAR 0 8
18430: DEC
18431: ST_TO_ADDR
18432: LD_VAR 0 10
18436: PUSH
18437: FOR_TO
18438: IFFALSE 18531
// begin if not ValidHex ( _x , _y ) then
18440: LD_VAR 0 11
18444: PPUSH
18445: LD_VAR 0 12
18449: PPUSH
18450: CALL_OW 488
18454: NOT
18455: IFFALSE 18459
// continue ;
18457: GO 18437
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18459: LD_VAR 0 11
18463: PPUSH
18464: LD_VAR 0 12
18468: PPUSH
18469: CALL_OW 351
18473: PUSH
18474: LD_VAR 0 11
18478: PPUSH
18479: LD_VAR 0 12
18483: PPUSH
18484: CALL_OW 554
18488: AND
18489: IFFALSE 18529
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18491: LD_ADDR_VAR 0 13
18495: PUSH
18496: LD_VAR 0 13
18500: PPUSH
18501: LD_VAR 0 13
18505: PUSH
18506: LD_INT 1
18508: PLUS
18509: PPUSH
18510: LD_VAR 0 11
18514: PUSH
18515: LD_VAR 0 12
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PPUSH
18524: CALL_OW 2
18528: ST_TO_ADDR
// end ;
18529: GO 18437
18531: POP
18532: POP
18533: GO 18417
18535: POP
18536: POP
// if not list then
18537: LD_VAR 0 13
18541: NOT
18542: IFFALSE 18546
// exit ;
18544: GO 18617
// for i in list do
18546: LD_ADDR_VAR 0 6
18550: PUSH
18551: LD_VAR 0 13
18555: PUSH
18556: FOR_IN
18557: IFFALSE 18615
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18559: LD_VAR 0 1
18563: PPUSH
18564: LD_STRING M
18566: PUSH
18567: LD_VAR 0 6
18571: PUSH
18572: LD_INT 1
18574: ARRAY
18575: PUSH
18576: LD_VAR 0 6
18580: PUSH
18581: LD_INT 2
18583: ARRAY
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: PPUSH
18609: CALL_OW 447
18613: GO 18556
18615: POP
18616: POP
// end ;
18617: LD_VAR 0 5
18621: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
18622: LD_INT 0
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
18628: PPUSH
18629: PPUSH
18630: PPUSH
18631: PPUSH
18632: PPUSH
18633: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 302
18643: NOT
18644: PUSH
18645: LD_VAR 0 2
18649: PPUSH
18650: LD_VAR 0 3
18654: PPUSH
18655: CALL_OW 488
18659: NOT
18660: OR
18661: PUSH
18662: LD_VAR 0 4
18666: NOT
18667: OR
18668: IFFALSE 18672
// exit ;
18670: GO 19185
// list := [ ] ;
18672: LD_ADDR_VAR 0 13
18676: PUSH
18677: EMPTY
18678: ST_TO_ADDR
// if x - r < 0 then
18679: LD_VAR 0 2
18683: PUSH
18684: LD_VAR 0 4
18688: MINUS
18689: PUSH
18690: LD_INT 0
18692: LESS
18693: IFFALSE 18705
// min_x := 0 else
18695: LD_ADDR_VAR 0 7
18699: PUSH
18700: LD_INT 0
18702: ST_TO_ADDR
18703: GO 18721
// min_x := x - r ;
18705: LD_ADDR_VAR 0 7
18709: PUSH
18710: LD_VAR 0 2
18714: PUSH
18715: LD_VAR 0 4
18719: MINUS
18720: ST_TO_ADDR
// if y - r < 0 then
18721: LD_VAR 0 3
18725: PUSH
18726: LD_VAR 0 4
18730: MINUS
18731: PUSH
18732: LD_INT 0
18734: LESS
18735: IFFALSE 18747
// min_y := 0 else
18737: LD_ADDR_VAR 0 8
18741: PUSH
18742: LD_INT 0
18744: ST_TO_ADDR
18745: GO 18763
// min_y := y - r ;
18747: LD_ADDR_VAR 0 8
18751: PUSH
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 4
18761: MINUS
18762: ST_TO_ADDR
// max_x := x + r ;
18763: LD_ADDR_VAR 0 9
18767: PUSH
18768: LD_VAR 0 2
18772: PUSH
18773: LD_VAR 0 4
18777: PLUS
18778: ST_TO_ADDR
// max_y := y + r ;
18779: LD_ADDR_VAR 0 10
18783: PUSH
18784: LD_VAR 0 3
18788: PUSH
18789: LD_VAR 0 4
18793: PLUS
18794: ST_TO_ADDR
// for _x = min_x to max_x do
18795: LD_ADDR_VAR 0 11
18799: PUSH
18800: DOUBLE
18801: LD_VAR 0 7
18805: DEC
18806: ST_TO_ADDR
18807: LD_VAR 0 9
18811: PUSH
18812: FOR_TO
18813: IFFALSE 18930
// for _y = min_y to max_y do
18815: LD_ADDR_VAR 0 12
18819: PUSH
18820: DOUBLE
18821: LD_VAR 0 8
18825: DEC
18826: ST_TO_ADDR
18827: LD_VAR 0 10
18831: PUSH
18832: FOR_TO
18833: IFFALSE 18926
// begin if not ValidHex ( _x , _y ) then
18835: LD_VAR 0 11
18839: PPUSH
18840: LD_VAR 0 12
18844: PPUSH
18845: CALL_OW 488
18849: NOT
18850: IFFALSE 18854
// continue ;
18852: GO 18832
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18854: LD_VAR 0 11
18858: PPUSH
18859: LD_VAR 0 12
18863: PPUSH
18864: CALL_OW 351
18868: PUSH
18869: LD_VAR 0 11
18873: PPUSH
18874: LD_VAR 0 12
18878: PPUSH
18879: CALL_OW 554
18883: AND
18884: IFFALSE 18924
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18886: LD_ADDR_VAR 0 13
18890: PUSH
18891: LD_VAR 0 13
18895: PPUSH
18896: LD_VAR 0 13
18900: PUSH
18901: LD_INT 1
18903: PLUS
18904: PPUSH
18905: LD_VAR 0 11
18909: PUSH
18910: LD_VAR 0 12
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 2
18923: ST_TO_ADDR
// end ;
18924: GO 18832
18926: POP
18927: POP
18928: GO 18812
18930: POP
18931: POP
// if not list then
18932: LD_VAR 0 13
18936: NOT
18937: IFFALSE 18941
// exit ;
18939: GO 19185
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18941: LD_ADDR_VAR 0 13
18945: PUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_VAR 0 13
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: CALL 28099 0 4
18966: ST_TO_ADDR
// ComStop ( flame ) ;
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 141
// for i in list do
18976: LD_ADDR_VAR 0 6
18980: PUSH
18981: LD_VAR 0 13
18985: PUSH
18986: FOR_IN
18987: IFFALSE 19018
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18989: LD_VAR 0 1
18993: PPUSH
18994: LD_VAR 0 6
18998: PUSH
18999: LD_INT 1
19001: ARRAY
19002: PPUSH
19003: LD_VAR 0 6
19007: PUSH
19008: LD_INT 2
19010: ARRAY
19011: PPUSH
19012: CALL_OW 176
19016: GO 18986
19018: POP
19019: POP
// repeat wait ( 0 0$1 ) ;
19020: LD_INT 35
19022: PPUSH
19023: CALL_OW 67
// task := GetTaskList ( flame ) ;
19027: LD_ADDR_VAR 0 14
19031: PUSH
19032: LD_VAR 0 1
19036: PPUSH
19037: CALL_OW 437
19041: ST_TO_ADDR
// if not task then
19042: LD_VAR 0 14
19046: NOT
19047: IFFALSE 19051
// exit ;
19049: GO 19185
// if task [ 1 ] [ 1 ] <> | then
19051: LD_VAR 0 14
19055: PUSH
19056: LD_INT 1
19058: ARRAY
19059: PUSH
19060: LD_INT 1
19062: ARRAY
19063: PUSH
19064: LD_STRING |
19066: NONEQUAL
19067: IFFALSE 19071
// exit ;
19069: GO 19185
// _x := task [ 1 ] [ 2 ] ;
19071: LD_ADDR_VAR 0 11
19075: PUSH
19076: LD_VAR 0 14
19080: PUSH
19081: LD_INT 1
19083: ARRAY
19084: PUSH
19085: LD_INT 2
19087: ARRAY
19088: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19089: LD_ADDR_VAR 0 12
19093: PUSH
19094: LD_VAR 0 14
19098: PUSH
19099: LD_INT 1
19101: ARRAY
19102: PUSH
19103: LD_INT 3
19105: ARRAY
19106: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19107: LD_VAR 0 11
19111: PPUSH
19112: LD_VAR 0 12
19116: PPUSH
19117: CALL_OW 351
19121: NOT
19122: PUSH
19123: LD_VAR 0 11
19127: PPUSH
19128: LD_VAR 0 12
19132: PPUSH
19133: CALL_OW 554
19137: NOT
19138: OR
19139: IFFALSE 19173
// begin task := Delete ( task , 1 ) ;
19141: LD_ADDR_VAR 0 14
19145: PUSH
19146: LD_VAR 0 14
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 3
19158: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19159: LD_VAR 0 1
19163: PPUSH
19164: LD_VAR 0 14
19168: PPUSH
19169: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19173: LD_VAR 0 1
19177: PPUSH
19178: CALL_OW 314
19182: NOT
19183: IFFALSE 19020
// end ;
19185: LD_VAR 0 5
19189: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19190: LD_EXP 64
19194: NOT
19195: IFFALSE 19245
19197: GO 19199
19199: DISABLE
// begin initHack := true ;
19200: LD_ADDR_EXP 64
19204: PUSH
19205: LD_INT 1
19207: ST_TO_ADDR
// hackTanks := [ ] ;
19208: LD_ADDR_EXP 65
19212: PUSH
19213: EMPTY
19214: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19215: LD_ADDR_EXP 66
19219: PUSH
19220: EMPTY
19221: ST_TO_ADDR
// hackLimit := 3 ;
19222: LD_ADDR_EXP 67
19226: PUSH
19227: LD_INT 3
19229: ST_TO_ADDR
// hackDist := 12 ;
19230: LD_ADDR_EXP 68
19234: PUSH
19235: LD_INT 12
19237: ST_TO_ADDR
// hackCounter := [ ] ;
19238: LD_ADDR_EXP 69
19242: PUSH
19243: EMPTY
19244: ST_TO_ADDR
// end ;
19245: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19246: LD_EXP 64
19250: PUSH
19251: LD_INT 34
19253: PUSH
19254: LD_INT 99
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: AND
19266: IFFALSE 19519
19268: GO 19270
19270: DISABLE
19271: LD_INT 0
19273: PPUSH
19274: PPUSH
// begin enable ;
19275: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19276: LD_ADDR_VAR 0 1
19280: PUSH
19281: LD_INT 34
19283: PUSH
19284: LD_INT 99
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PPUSH
19291: CALL_OW 69
19295: PUSH
19296: FOR_IN
19297: IFFALSE 19517
// begin if not i in hackTanks then
19299: LD_VAR 0 1
19303: PUSH
19304: LD_EXP 65
19308: IN
19309: NOT
19310: IFFALSE 19393
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19312: LD_ADDR_EXP 65
19316: PUSH
19317: LD_EXP 65
19321: PPUSH
19322: LD_EXP 65
19326: PUSH
19327: LD_INT 1
19329: PLUS
19330: PPUSH
19331: LD_VAR 0 1
19335: PPUSH
19336: CALL_OW 1
19340: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19341: LD_ADDR_EXP 66
19345: PUSH
19346: LD_EXP 66
19350: PPUSH
19351: LD_EXP 66
19355: PUSH
19356: LD_INT 1
19358: PLUS
19359: PPUSH
19360: EMPTY
19361: PPUSH
19362: CALL_OW 1
19366: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19367: LD_ADDR_EXP 69
19371: PUSH
19372: LD_EXP 69
19376: PPUSH
19377: LD_EXP 69
19381: PUSH
19382: LD_INT 1
19384: PLUS
19385: PPUSH
19386: EMPTY
19387: PPUSH
19388: CALL_OW 1
19392: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 302
19402: NOT
19403: IFFALSE 19416
// begin HackUnlinkAll ( i ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL 19522 0 1
// continue ;
19414: GO 19296
// end ; HackCheckCapturedStatus ( i ) ;
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL 19965 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19425: LD_ADDR_VAR 0 2
19429: PUSH
19430: LD_INT 81
19432: PUSH
19433: LD_VAR 0 1
19437: PPUSH
19438: CALL_OW 255
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 33
19449: PUSH
19450: LD_INT 3
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 91
19459: PUSH
19460: LD_VAR 0 1
19464: PUSH
19465: LD_EXP 68
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 50
19477: PUSH
19478: EMPTY
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PPUSH
19487: CALL_OW 69
19491: ST_TO_ADDR
// if not tmp then
19492: LD_VAR 0 2
19496: NOT
19497: IFFALSE 19501
// continue ;
19499: GO 19296
// HackLink ( i , tmp ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_VAR 0 2
19510: PPUSH
19511: CALL 19658 0 2
// end ;
19515: GO 19296
19517: POP
19518: POP
// end ;
19519: PPOPN 2
19521: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
// if not hack in hackTanks then
19527: LD_VAR 0 1
19531: PUSH
19532: LD_EXP 65
19536: IN
19537: NOT
19538: IFFALSE 19542
// exit ;
19540: GO 19653
// index := GetElementIndex ( hackTanks , hack ) ;
19542: LD_ADDR_VAR 0 4
19546: PUSH
19547: LD_EXP 65
19551: PPUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL 27396 0 2
19561: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19562: LD_EXP 66
19566: PUSH
19567: LD_VAR 0 4
19571: ARRAY
19572: IFFALSE 19653
// begin for i in hackTanksCaptured [ index ] do
19574: LD_ADDR_VAR 0 3
19578: PUSH
19579: LD_EXP 66
19583: PUSH
19584: LD_VAR 0 4
19588: ARRAY
19589: PUSH
19590: FOR_IN
19591: IFFALSE 19617
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19593: LD_VAR 0 3
19597: PUSH
19598: LD_INT 1
19600: ARRAY
19601: PPUSH
19602: LD_VAR 0 3
19606: PUSH
19607: LD_INT 2
19609: ARRAY
19610: PPUSH
19611: CALL_OW 235
19615: GO 19590
19617: POP
19618: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19619: LD_ADDR_EXP 66
19623: PUSH
19624: LD_EXP 66
19628: PPUSH
19629: LD_VAR 0 4
19633: PPUSH
19634: EMPTY
19635: PPUSH
19636: CALL_OW 1
19640: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19641: LD_VAR 0 1
19645: PPUSH
19646: LD_INT 0
19648: PPUSH
19649: CALL_OW 505
// end ; end ;
19653: LD_VAR 0 2
19657: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19658: LD_INT 0
19660: PPUSH
19661: PPUSH
19662: PPUSH
// if not hack in hackTanks or not vehicles then
19663: LD_VAR 0 1
19667: PUSH
19668: LD_EXP 65
19672: IN
19673: NOT
19674: PUSH
19675: LD_VAR 0 2
19679: NOT
19680: OR
19681: IFFALSE 19685
// exit ;
19683: GO 19960
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: LD_VAR 0 1
19694: PPUSH
19695: LD_VAR 0 2
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: LD_INT 1
19705: PPUSH
19706: CALL 28046 0 4
19710: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19711: LD_ADDR_VAR 0 5
19715: PUSH
19716: LD_EXP 65
19720: PPUSH
19721: LD_VAR 0 1
19725: PPUSH
19726: CALL 27396 0 2
19730: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19731: LD_EXP 66
19735: PUSH
19736: LD_VAR 0 5
19740: ARRAY
19741: PUSH
19742: LD_EXP 67
19746: LESS
19747: IFFALSE 19936
// begin for i := 1 to vehicles do
19749: LD_ADDR_VAR 0 4
19753: PUSH
19754: DOUBLE
19755: LD_INT 1
19757: DEC
19758: ST_TO_ADDR
19759: LD_VAR 0 2
19763: PUSH
19764: FOR_TO
19765: IFFALSE 19934
// begin if hackTanksCaptured [ index ] = hackLimit then
19767: LD_EXP 66
19771: PUSH
19772: LD_VAR 0 5
19776: ARRAY
19777: PUSH
19778: LD_EXP 67
19782: EQUAL
19783: IFFALSE 19787
// break ;
19785: GO 19934
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19787: LD_ADDR_EXP 69
19791: PUSH
19792: LD_EXP 69
19796: PPUSH
19797: LD_VAR 0 5
19801: PPUSH
19802: LD_EXP 69
19806: PUSH
19807: LD_VAR 0 5
19811: ARRAY
19812: PUSH
19813: LD_INT 1
19815: PLUS
19816: PPUSH
19817: CALL_OW 1
19821: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19822: LD_ADDR_EXP 66
19826: PUSH
19827: LD_EXP 66
19831: PPUSH
19832: LD_VAR 0 5
19836: PUSH
19837: LD_EXP 66
19841: PUSH
19842: LD_VAR 0 5
19846: ARRAY
19847: PUSH
19848: LD_INT 1
19850: PLUS
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PPUSH
19856: LD_VAR 0 2
19860: PUSH
19861: LD_VAR 0 4
19865: ARRAY
19866: PUSH
19867: LD_VAR 0 2
19871: PUSH
19872: LD_VAR 0 4
19876: ARRAY
19877: PPUSH
19878: CALL_OW 255
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL 27611 0 3
19891: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19892: LD_VAR 0 2
19896: PUSH
19897: LD_VAR 0 4
19901: ARRAY
19902: PPUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 255
19912: PPUSH
19913: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19917: LD_VAR 0 2
19921: PUSH
19922: LD_VAR 0 4
19926: ARRAY
19927: PPUSH
19928: CALL_OW 141
// end ;
19932: GO 19764
19934: POP
19935: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_EXP 66
19945: PUSH
19946: LD_VAR 0 5
19950: ARRAY
19951: PUSH
19952: LD_INT 0
19954: PLUS
19955: PPUSH
19956: CALL_OW 505
// end ;
19960: LD_VAR 0 3
19964: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19965: LD_INT 0
19967: PPUSH
19968: PPUSH
19969: PPUSH
19970: PPUSH
// if not hack in hackTanks then
19971: LD_VAR 0 1
19975: PUSH
19976: LD_EXP 65
19980: IN
19981: NOT
19982: IFFALSE 19986
// exit ;
19984: GO 20226
// index := GetElementIndex ( hackTanks , hack ) ;
19986: LD_ADDR_VAR 0 4
19990: PUSH
19991: LD_EXP 65
19995: PPUSH
19996: LD_VAR 0 1
20000: PPUSH
20001: CALL 27396 0 2
20005: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20006: LD_ADDR_VAR 0 3
20010: PUSH
20011: DOUBLE
20012: LD_EXP 66
20016: PUSH
20017: LD_VAR 0 4
20021: ARRAY
20022: INC
20023: ST_TO_ADDR
20024: LD_INT 1
20026: PUSH
20027: FOR_DOWNTO
20028: IFFALSE 20200
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20030: LD_ADDR_VAR 0 5
20034: PUSH
20035: LD_EXP 66
20039: PUSH
20040: LD_VAR 0 4
20044: ARRAY
20045: PUSH
20046: LD_VAR 0 3
20050: ARRAY
20051: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20052: LD_VAR 0 5
20056: PUSH
20057: LD_INT 1
20059: ARRAY
20060: PPUSH
20061: CALL_OW 302
20065: NOT
20066: PUSH
20067: LD_VAR 0 5
20071: PUSH
20072: LD_INT 1
20074: ARRAY
20075: PPUSH
20076: CALL_OW 255
20080: PUSH
20081: LD_VAR 0 1
20085: PPUSH
20086: CALL_OW 255
20090: NONEQUAL
20091: OR
20092: IFFALSE 20198
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20094: LD_VAR 0 5
20098: PUSH
20099: LD_INT 1
20101: ARRAY
20102: PPUSH
20103: CALL_OW 305
20107: PUSH
20108: LD_VAR 0 5
20112: PUSH
20113: LD_INT 1
20115: ARRAY
20116: PPUSH
20117: CALL_OW 255
20121: PUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 255
20131: EQUAL
20132: AND
20133: IFFALSE 20157
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20135: LD_VAR 0 5
20139: PUSH
20140: LD_INT 1
20142: ARRAY
20143: PPUSH
20144: LD_VAR 0 5
20148: PUSH
20149: LD_INT 2
20151: ARRAY
20152: PPUSH
20153: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20157: LD_ADDR_EXP 66
20161: PUSH
20162: LD_EXP 66
20166: PPUSH
20167: LD_VAR 0 4
20171: PPUSH
20172: LD_EXP 66
20176: PUSH
20177: LD_VAR 0 4
20181: ARRAY
20182: PPUSH
20183: LD_VAR 0 3
20187: PPUSH
20188: CALL_OW 3
20192: PPUSH
20193: CALL_OW 1
20197: ST_TO_ADDR
// end ; end ;
20198: GO 20027
20200: POP
20201: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: LD_EXP 66
20211: PUSH
20212: LD_VAR 0 4
20216: ARRAY
20217: PUSH
20218: LD_INT 0
20220: PLUS
20221: PPUSH
20222: CALL_OW 505
// end ;
20226: LD_VAR 0 2
20230: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20231: LD_INT 0
20233: PPUSH
20234: PPUSH
20235: PPUSH
20236: PPUSH
// if not hack in hackTanks then
20237: LD_VAR 0 1
20241: PUSH
20242: LD_EXP 65
20246: IN
20247: NOT
20248: IFFALSE 20252
// exit ;
20250: GO 20337
// index := GetElementIndex ( hackTanks , hack ) ;
20252: LD_ADDR_VAR 0 5
20256: PUSH
20257: LD_EXP 65
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL 27396 0 2
20271: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20272: LD_ADDR_VAR 0 4
20276: PUSH
20277: DOUBLE
20278: LD_INT 1
20280: DEC
20281: ST_TO_ADDR
20282: LD_EXP 66
20286: PUSH
20287: LD_VAR 0 5
20291: ARRAY
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20335
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20296: LD_EXP 66
20300: PUSH
20301: LD_VAR 0 5
20305: ARRAY
20306: PUSH
20307: LD_VAR 0 4
20311: ARRAY
20312: PUSH
20313: LD_INT 1
20315: ARRAY
20316: PUSH
20317: LD_VAR 0 2
20321: EQUAL
20322: IFFALSE 20333
// KillUnit ( vehicle ) ;
20324: LD_VAR 0 2
20328: PPUSH
20329: CALL_OW 66
20333: GO 20293
20335: POP
20336: POP
// end ;
20337: LD_VAR 0 3
20341: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20342: LD_EXP 70
20346: NOT
20347: IFFALSE 20382
20349: GO 20351
20351: DISABLE
// begin initMiner := true ;
20352: LD_ADDR_EXP 70
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// minersList := [ ] ;
20360: LD_ADDR_EXP 71
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// minerMinesList := [ ] ;
20367: LD_ADDR_EXP 72
20371: PUSH
20372: EMPTY
20373: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20374: LD_ADDR_EXP 73
20378: PUSH
20379: LD_INT 5
20381: ST_TO_ADDR
// end ;
20382: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20383: LD_EXP 70
20387: PUSH
20388: LD_INT 34
20390: PUSH
20391: LD_INT 81
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: AND
20403: IFFALSE 20864
20405: GO 20407
20407: DISABLE
20408: LD_INT 0
20410: PPUSH
20411: PPUSH
20412: PPUSH
20413: PPUSH
// begin enable ;
20414: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20415: LD_ADDR_VAR 0 1
20419: PUSH
20420: LD_INT 34
20422: PUSH
20423: LD_INT 81
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PPUSH
20430: CALL_OW 69
20434: PUSH
20435: FOR_IN
20436: IFFALSE 20508
// begin if not i in minersList then
20438: LD_VAR 0 1
20442: PUSH
20443: LD_EXP 71
20447: IN
20448: NOT
20449: IFFALSE 20506
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20451: LD_ADDR_EXP 71
20455: PUSH
20456: LD_EXP 71
20460: PPUSH
20461: LD_EXP 71
20465: PUSH
20466: LD_INT 1
20468: PLUS
20469: PPUSH
20470: LD_VAR 0 1
20474: PPUSH
20475: CALL_OW 1
20479: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20480: LD_ADDR_EXP 72
20484: PUSH
20485: LD_EXP 72
20489: PPUSH
20490: LD_EXP 72
20494: PUSH
20495: LD_INT 1
20497: PLUS
20498: PPUSH
20499: EMPTY
20500: PPUSH
20501: CALL_OW 1
20505: ST_TO_ADDR
// end end ;
20506: GO 20435
20508: POP
20509: POP
// for i := minerMinesList downto 1 do
20510: LD_ADDR_VAR 0 1
20514: PUSH
20515: DOUBLE
20516: LD_EXP 72
20520: INC
20521: ST_TO_ADDR
20522: LD_INT 1
20524: PUSH
20525: FOR_DOWNTO
20526: IFFALSE 20862
// begin if IsLive ( minersList [ i ] ) then
20528: LD_EXP 71
20532: PUSH
20533: LD_VAR 0 1
20537: ARRAY
20538: PPUSH
20539: CALL_OW 300
20543: IFFALSE 20571
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20545: LD_EXP 71
20549: PUSH
20550: LD_VAR 0 1
20554: ARRAY
20555: PPUSH
20556: LD_EXP 72
20560: PUSH
20561: LD_VAR 0 1
20565: ARRAY
20566: PPUSH
20567: CALL_OW 505
// if not minerMinesList [ i ] then
20571: LD_EXP 72
20575: PUSH
20576: LD_VAR 0 1
20580: ARRAY
20581: NOT
20582: IFFALSE 20586
// continue ;
20584: GO 20525
// for j := minerMinesList [ i ] downto 1 do
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: DOUBLE
20592: LD_EXP 72
20596: PUSH
20597: LD_VAR 0 1
20601: ARRAY
20602: INC
20603: ST_TO_ADDR
20604: LD_INT 1
20606: PUSH
20607: FOR_DOWNTO
20608: IFFALSE 20858
// begin side := GetSide ( minersList [ i ] ) ;
20610: LD_ADDR_VAR 0 3
20614: PUSH
20615: LD_EXP 71
20619: PUSH
20620: LD_VAR 0 1
20624: ARRAY
20625: PPUSH
20626: CALL_OW 255
20630: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20631: LD_ADDR_VAR 0 4
20635: PUSH
20636: LD_EXP 72
20640: PUSH
20641: LD_VAR 0 1
20645: ARRAY
20646: PUSH
20647: LD_VAR 0 2
20651: ARRAY
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: PPUSH
20657: LD_EXP 72
20661: PUSH
20662: LD_VAR 0 1
20666: ARRAY
20667: PUSH
20668: LD_VAR 0 2
20672: ARRAY
20673: PUSH
20674: LD_INT 2
20676: ARRAY
20677: PPUSH
20678: CALL_OW 428
20682: ST_TO_ADDR
// if not tmp then
20683: LD_VAR 0 4
20687: NOT
20688: IFFALSE 20692
// continue ;
20690: GO 20607
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20692: LD_VAR 0 4
20696: PUSH
20697: LD_INT 81
20699: PUSH
20700: LD_VAR 0 3
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PPUSH
20709: CALL_OW 69
20713: IN
20714: PUSH
20715: LD_EXP 72
20719: PUSH
20720: LD_VAR 0 1
20724: ARRAY
20725: PUSH
20726: LD_VAR 0 2
20730: ARRAY
20731: PUSH
20732: LD_INT 1
20734: ARRAY
20735: PPUSH
20736: LD_EXP 72
20740: PUSH
20741: LD_VAR 0 1
20745: ARRAY
20746: PUSH
20747: LD_VAR 0 2
20751: ARRAY
20752: PUSH
20753: LD_INT 2
20755: ARRAY
20756: PPUSH
20757: CALL_OW 458
20761: AND
20762: IFFALSE 20856
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20764: LD_EXP 72
20768: PUSH
20769: LD_VAR 0 1
20773: ARRAY
20774: PUSH
20775: LD_VAR 0 2
20779: ARRAY
20780: PUSH
20781: LD_INT 1
20783: ARRAY
20784: PPUSH
20785: LD_EXP 72
20789: PUSH
20790: LD_VAR 0 1
20794: ARRAY
20795: PUSH
20796: LD_VAR 0 2
20800: ARRAY
20801: PUSH
20802: LD_INT 2
20804: ARRAY
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20815: LD_ADDR_EXP 72
20819: PUSH
20820: LD_EXP 72
20824: PPUSH
20825: LD_VAR 0 1
20829: PPUSH
20830: LD_EXP 72
20834: PUSH
20835: LD_VAR 0 1
20839: ARRAY
20840: PPUSH
20841: LD_VAR 0 2
20845: PPUSH
20846: CALL_OW 3
20850: PPUSH
20851: CALL_OW 1
20855: ST_TO_ADDR
// end ; end ;
20856: GO 20607
20858: POP
20859: POP
// end ;
20860: GO 20525
20862: POP
20863: POP
// end ;
20864: PPOPN 4
20866: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20867: LD_INT 0
20869: PPUSH
20870: PPUSH
// result := false ;
20871: LD_ADDR_VAR 0 4
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20879: LD_VAR 0 1
20883: PPUSH
20884: CALL_OW 264
20888: PUSH
20889: LD_INT 81
20891: EQUAL
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 21137
// index := GetElementIndex ( minersList , unit ) ;
20897: LD_ADDR_VAR 0 5
20901: PUSH
20902: LD_EXP 71
20906: PPUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL 27396 0 2
20916: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20917: LD_EXP 72
20921: PUSH
20922: LD_VAR 0 5
20926: ARRAY
20927: PUSH
20928: LD_EXP 73
20932: GREATEREQUAL
20933: IFFALSE 20937
// exit ;
20935: GO 21137
// ComMoveXY ( unit , x , y ) ;
20937: LD_VAR 0 1
20941: PPUSH
20942: LD_VAR 0 2
20946: PPUSH
20947: LD_VAR 0 3
20951: PPUSH
20952: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20956: LD_INT 35
20958: PPUSH
20959: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20963: LD_VAR 0 1
20967: PPUSH
20968: LD_VAR 0 2
20972: PPUSH
20973: LD_VAR 0 3
20977: PPUSH
20978: CALL 59157 0 3
20982: NOT
20983: PUSH
20984: LD_VAR 0 1
20988: PPUSH
20989: CALL_OW 314
20993: AND
20994: IFFALSE 20998
// exit ;
20996: GO 21137
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20998: LD_VAR 0 2
21002: PPUSH
21003: LD_VAR 0 3
21007: PPUSH
21008: CALL_OW 428
21012: PUSH
21013: LD_VAR 0 1
21017: EQUAL
21018: PUSH
21019: LD_VAR 0 1
21023: PPUSH
21024: CALL_OW 314
21028: NOT
21029: AND
21030: IFFALSE 20956
// PlaySoundXY ( x , y , PlantMine ) ;
21032: LD_VAR 0 2
21036: PPUSH
21037: LD_VAR 0 3
21041: PPUSH
21042: LD_STRING PlantMine
21044: PPUSH
21045: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
21049: LD_VAR 0 2
21053: PPUSH
21054: LD_VAR 0 3
21058: PPUSH
21059: LD_VAR 0 1
21063: PPUSH
21064: CALL_OW 255
21068: PPUSH
21069: LD_INT 0
21071: PPUSH
21072: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21076: LD_ADDR_EXP 72
21080: PUSH
21081: LD_EXP 72
21085: PPUSH
21086: LD_VAR 0 5
21090: PUSH
21091: LD_EXP 72
21095: PUSH
21096: LD_VAR 0 5
21100: ARRAY
21101: PUSH
21102: LD_INT 1
21104: PLUS
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PPUSH
21110: LD_VAR 0 2
21114: PUSH
21115: LD_VAR 0 3
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PPUSH
21124: CALL 27611 0 3
21128: ST_TO_ADDR
// result := true ;
21129: LD_ADDR_VAR 0 4
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// end ;
21137: LD_VAR 0 4
21141: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21142: LD_INT 0
21144: PPUSH
21145: PPUSH
21146: PPUSH
// if not unit in minersList then
21147: LD_VAR 0 1
21151: PUSH
21152: LD_EXP 71
21156: IN
21157: NOT
21158: IFFALSE 21162
// exit ;
21160: GO 21554
// index := GetElementIndex ( minersList , unit ) ;
21162: LD_ADDR_VAR 0 6
21166: PUSH
21167: LD_EXP 71
21171: PPUSH
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL 27396 0 2
21181: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21182: LD_ADDR_VAR 0 5
21186: PUSH
21187: DOUBLE
21188: LD_EXP 72
21192: PUSH
21193: LD_VAR 0 6
21197: ARRAY
21198: INC
21199: ST_TO_ADDR
21200: LD_INT 1
21202: PUSH
21203: FOR_DOWNTO
21204: IFFALSE 21365
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21206: LD_EXP 72
21210: PUSH
21211: LD_VAR 0 6
21215: ARRAY
21216: PUSH
21217: LD_VAR 0 5
21221: ARRAY
21222: PUSH
21223: LD_INT 1
21225: ARRAY
21226: PUSH
21227: LD_VAR 0 2
21231: EQUAL
21232: PUSH
21233: LD_EXP 72
21237: PUSH
21238: LD_VAR 0 6
21242: ARRAY
21243: PUSH
21244: LD_VAR 0 5
21248: ARRAY
21249: PUSH
21250: LD_INT 2
21252: ARRAY
21253: PUSH
21254: LD_VAR 0 3
21258: EQUAL
21259: AND
21260: IFFALSE 21363
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21262: LD_EXP 72
21266: PUSH
21267: LD_VAR 0 6
21271: ARRAY
21272: PUSH
21273: LD_VAR 0 5
21277: ARRAY
21278: PUSH
21279: LD_INT 1
21281: ARRAY
21282: PPUSH
21283: LD_EXP 72
21287: PUSH
21288: LD_VAR 0 6
21292: ARRAY
21293: PUSH
21294: LD_VAR 0 5
21298: ARRAY
21299: PUSH
21300: LD_INT 2
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 255
21313: PPUSH
21314: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21318: LD_ADDR_EXP 72
21322: PUSH
21323: LD_EXP 72
21327: PPUSH
21328: LD_VAR 0 6
21332: PPUSH
21333: LD_EXP 72
21337: PUSH
21338: LD_VAR 0 6
21342: ARRAY
21343: PPUSH
21344: LD_VAR 0 5
21348: PPUSH
21349: CALL_OW 3
21353: PPUSH
21354: CALL_OW 1
21358: ST_TO_ADDR
// exit ;
21359: POP
21360: POP
21361: GO 21554
// end ; end ;
21363: GO 21203
21365: POP
21366: POP
// for i := minerMinesList [ index ] downto 1 do
21367: LD_ADDR_VAR 0 5
21371: PUSH
21372: DOUBLE
21373: LD_EXP 72
21377: PUSH
21378: LD_VAR 0 6
21382: ARRAY
21383: INC
21384: ST_TO_ADDR
21385: LD_INT 1
21387: PUSH
21388: FOR_DOWNTO
21389: IFFALSE 21552
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21391: LD_EXP 72
21395: PUSH
21396: LD_VAR 0 6
21400: ARRAY
21401: PUSH
21402: LD_VAR 0 5
21406: ARRAY
21407: PUSH
21408: LD_INT 1
21410: ARRAY
21411: PPUSH
21412: LD_EXP 72
21416: PUSH
21417: LD_VAR 0 6
21421: ARRAY
21422: PUSH
21423: LD_VAR 0 5
21427: ARRAY
21428: PUSH
21429: LD_INT 2
21431: ARRAY
21432: PPUSH
21433: LD_VAR 0 2
21437: PPUSH
21438: LD_VAR 0 3
21442: PPUSH
21443: CALL_OW 298
21447: PUSH
21448: LD_INT 6
21450: LESS
21451: IFFALSE 21550
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21453: LD_EXP 72
21457: PUSH
21458: LD_VAR 0 6
21462: ARRAY
21463: PUSH
21464: LD_VAR 0 5
21468: ARRAY
21469: PUSH
21470: LD_INT 1
21472: ARRAY
21473: PPUSH
21474: LD_EXP 72
21478: PUSH
21479: LD_VAR 0 6
21483: ARRAY
21484: PUSH
21485: LD_VAR 0 5
21489: ARRAY
21490: PUSH
21491: LD_INT 2
21493: ARRAY
21494: PPUSH
21495: LD_VAR 0 1
21499: PPUSH
21500: CALL_OW 255
21504: PPUSH
21505: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21509: LD_ADDR_EXP 72
21513: PUSH
21514: LD_EXP 72
21518: PPUSH
21519: LD_VAR 0 6
21523: PPUSH
21524: LD_EXP 72
21528: PUSH
21529: LD_VAR 0 6
21533: ARRAY
21534: PPUSH
21535: LD_VAR 0 5
21539: PPUSH
21540: CALL_OW 3
21544: PPUSH
21545: CALL_OW 1
21549: ST_TO_ADDR
// end ; end ;
21550: GO 21388
21552: POP
21553: POP
// end ;
21554: LD_VAR 0 4
21558: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 264
21579: PUSH
21580: LD_INT 81
21582: EQUAL
21583: NOT
21584: PUSH
21585: LD_VAR 0 1
21589: PUSH
21590: LD_EXP 71
21594: IN
21595: NOT
21596: OR
21597: IFFALSE 21601
// exit ;
21599: GO 21923
// index := GetElementIndex ( minersList , unit ) ;
21601: LD_ADDR_VAR 0 6
21605: PUSH
21606: LD_EXP 71
21610: PPUSH
21611: LD_VAR 0 1
21615: PPUSH
21616: CALL 27396 0 2
21620: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21621: LD_ADDR_VAR 0 8
21625: PUSH
21626: LD_EXP 73
21630: PUSH
21631: LD_EXP 72
21635: PUSH
21636: LD_VAR 0 6
21640: ARRAY
21641: MINUS
21642: ST_TO_ADDR
// if not minesFreeAmount then
21643: LD_VAR 0 8
21647: NOT
21648: IFFALSE 21652
// exit ;
21650: GO 21923
// tmp := [ ] ;
21652: LD_ADDR_VAR 0 7
21656: PUSH
21657: EMPTY
21658: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21659: LD_ADDR_VAR 0 5
21663: PUSH
21664: DOUBLE
21665: LD_INT 1
21667: DEC
21668: ST_TO_ADDR
21669: LD_VAR 0 8
21673: PUSH
21674: FOR_TO
21675: IFFALSE 21870
// begin _d := rand ( 0 , 5 ) ;
21677: LD_ADDR_VAR 0 11
21681: PUSH
21682: LD_INT 0
21684: PPUSH
21685: LD_INT 5
21687: PPUSH
21688: CALL_OW 12
21692: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21693: LD_ADDR_VAR 0 12
21697: PUSH
21698: LD_INT 2
21700: PPUSH
21701: LD_INT 6
21703: PPUSH
21704: CALL_OW 12
21708: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21709: LD_ADDR_VAR 0 9
21713: PUSH
21714: LD_VAR 0 2
21718: PPUSH
21719: LD_VAR 0 11
21723: PPUSH
21724: LD_VAR 0 12
21728: PPUSH
21729: CALL_OW 272
21733: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21734: LD_ADDR_VAR 0 10
21738: PUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: LD_VAR 0 11
21748: PPUSH
21749: LD_VAR 0 12
21753: PPUSH
21754: CALL_OW 273
21758: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21759: LD_VAR 0 9
21763: PPUSH
21764: LD_VAR 0 10
21768: PPUSH
21769: CALL_OW 488
21773: PUSH
21774: LD_VAR 0 9
21778: PUSH
21779: LD_VAR 0 10
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_VAR 0 7
21792: IN
21793: NOT
21794: AND
21795: PUSH
21796: LD_VAR 0 9
21800: PPUSH
21801: LD_VAR 0 10
21805: PPUSH
21806: CALL_OW 458
21810: NOT
21811: AND
21812: IFFALSE 21854
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21814: LD_ADDR_VAR 0 7
21818: PUSH
21819: LD_VAR 0 7
21823: PPUSH
21824: LD_VAR 0 7
21828: PUSH
21829: LD_INT 1
21831: PLUS
21832: PPUSH
21833: LD_VAR 0 9
21837: PUSH
21838: LD_VAR 0 10
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PPUSH
21847: CALL_OW 1
21851: ST_TO_ADDR
21852: GO 21868
// i := i - 1 ;
21854: LD_ADDR_VAR 0 5
21858: PUSH
21859: LD_VAR 0 5
21863: PUSH
21864: LD_INT 1
21866: MINUS
21867: ST_TO_ADDR
// end ;
21868: GO 21674
21870: POP
21871: POP
// for i in tmp do
21872: LD_ADDR_VAR 0 5
21876: PUSH
21877: LD_VAR 0 7
21881: PUSH
21882: FOR_IN
21883: IFFALSE 21921
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21885: LD_VAR 0 1
21889: PPUSH
21890: LD_VAR 0 5
21894: PUSH
21895: LD_INT 1
21897: ARRAY
21898: PPUSH
21899: LD_VAR 0 5
21903: PUSH
21904: LD_INT 2
21906: ARRAY
21907: PPUSH
21908: CALL 20867 0 3
21912: NOT
21913: IFFALSE 21919
// exit ;
21915: POP
21916: POP
21917: GO 21923
21919: GO 21882
21921: POP
21922: POP
// end ;
21923: LD_VAR 0 4
21927: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
21928: LD_INT 0
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
21936: PPUSH
21937: PPUSH
21938: PPUSH
// if GetClass ( unit ) <> class_sniper then
21939: LD_VAR 0 1
21943: PPUSH
21944: CALL_OW 257
21948: PUSH
21949: LD_INT 5
21951: NONEQUAL
21952: IFFALSE 21956
// exit ;
21954: GO 22422
// dist := 8 ;
21956: LD_ADDR_VAR 0 5
21960: PUSH
21961: LD_INT 8
21963: ST_TO_ADDR
// viewRange := 12 ;
21964: LD_ADDR_VAR 0 8
21968: PUSH
21969: LD_INT 12
21971: ST_TO_ADDR
// side := GetSide ( unit ) ;
21972: LD_ADDR_VAR 0 6
21976: PUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 255
21986: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21987: LD_INT 61
21989: PPUSH
21990: LD_VAR 0 6
21994: PPUSH
21995: CALL_OW 321
21999: PUSH
22000: LD_INT 2
22002: EQUAL
22003: IFFALSE 22013
// viewRange := 16 ;
22005: LD_ADDR_VAR 0 8
22009: PUSH
22010: LD_INT 16
22012: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22013: LD_VAR 0 1
22017: PPUSH
22018: LD_VAR 0 2
22022: PPUSH
22023: LD_VAR 0 3
22027: PPUSH
22028: CALL_OW 297
22032: PUSH
22033: LD_VAR 0 5
22037: GREATER
22038: IFFALSE 22117
// begin ComMoveXY ( unit , x , y ) ;
22040: LD_VAR 0 1
22044: PPUSH
22045: LD_VAR 0 2
22049: PPUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22059: LD_INT 35
22061: PPUSH
22062: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22066: LD_VAR 0 1
22070: PPUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 3
22080: PPUSH
22081: CALL 59157 0 3
22085: NOT
22086: IFFALSE 22090
// exit ;
22088: GO 22422
// until GetDistUnitXY ( unit , x , y ) < dist ;
22090: LD_VAR 0 1
22094: PPUSH
22095: LD_VAR 0 2
22099: PPUSH
22100: LD_VAR 0 3
22104: PPUSH
22105: CALL_OW 297
22109: PUSH
22110: LD_VAR 0 5
22114: LESS
22115: IFFALSE 22059
// end ; ComTurnXY ( unit , x , y ) ;
22117: LD_VAR 0 1
22121: PPUSH
22122: LD_VAR 0 2
22126: PPUSH
22127: LD_VAR 0 3
22131: PPUSH
22132: CALL_OW 118
// repeat if Multiplayer then
22136: LD_OWVAR 4
22140: IFFALSE 22151
// wait ( 35 ) else
22142: LD_INT 35
22144: PPUSH
22145: CALL_OW 67
22149: GO 22158
// wait ( 5 ) ;
22151: LD_INT 5
22153: PPUSH
22154: CALL_OW 67
// _d := GetDir ( unit ) ;
22158: LD_ADDR_VAR 0 11
22162: PUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL_OW 254
22172: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
22173: LD_ADDR_VAR 0 7
22177: PUSH
22178: LD_VAR 0 1
22182: PPUSH
22183: CALL_OW 250
22187: PPUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 251
22197: PPUSH
22198: LD_VAR 0 2
22202: PPUSH
22203: LD_VAR 0 3
22207: PPUSH
22208: CALL 61765 0 4
22212: ST_TO_ADDR
// until dir = _d ;
22213: LD_VAR 0 7
22217: PUSH
22218: LD_VAR 0 11
22222: EQUAL
22223: IFFALSE 22136
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
22225: LD_ADDR_VAR 0 9
22229: PUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 250
22239: PPUSH
22240: LD_VAR 0 7
22244: PPUSH
22245: LD_VAR 0 5
22249: PPUSH
22250: CALL_OW 272
22254: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
22255: LD_ADDR_VAR 0 10
22259: PUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: CALL_OW 251
22269: PPUSH
22270: LD_VAR 0 7
22274: PPUSH
22275: LD_VAR 0 5
22279: PPUSH
22280: CALL_OW 273
22284: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22285: LD_VAR 0 9
22289: PPUSH
22290: LD_VAR 0 10
22294: PPUSH
22295: CALL_OW 488
22299: NOT
22300: IFFALSE 22304
// exit ;
22302: GO 22422
// ComAnimCustom ( unit , 1 ) ;
22304: LD_VAR 0 1
22308: PPUSH
22309: LD_INT 1
22311: PPUSH
22312: CALL_OW 592
// p := 0 ;
22316: LD_ADDR_VAR 0 12
22320: PUSH
22321: LD_INT 0
22323: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22324: LD_VAR 0 9
22328: PPUSH
22329: LD_VAR 0 10
22333: PPUSH
22334: LD_VAR 0 6
22338: PPUSH
22339: LD_VAR 0 8
22343: PPUSH
22344: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
22348: LD_INT 35
22350: PPUSH
22351: CALL_OW 67
// p := Inc ( p ) ;
22355: LD_ADDR_VAR 0 12
22359: PUSH
22360: LD_VAR 0 12
22364: PPUSH
22365: CALL 61721 0 1
22369: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
22370: LD_VAR 0 12
22374: PUSH
22375: LD_INT 3
22377: EQUAL
22378: PUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 302
22388: NOT
22389: OR
22390: PUSH
22391: LD_VAR 0 1
22395: PPUSH
22396: CALL_OW 301
22400: OR
22401: IFFALSE 22348
// RemoveSeeing ( _x , _y , side ) ;
22403: LD_VAR 0 9
22407: PPUSH
22408: LD_VAR 0 10
22412: PPUSH
22413: LD_VAR 0 6
22417: PPUSH
22418: CALL_OW 331
// end ; end_of_file
22422: LD_VAR 0 4
22426: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
22427: LD_VAR 0 1
22431: PPUSH
22432: LD_VAR 0 2
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: LD_VAR 0 4
22446: PPUSH
22447: LD_VAR 0 5
22451: PPUSH
22452: LD_VAR 0 6
22456: PPUSH
22457: CALL 1539 0 6
// end ;
22461: PPOPN 6
22463: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
22464: LD_INT 0
22466: PPUSH
// begin if not units then
22467: LD_VAR 0 1
22471: NOT
22472: IFFALSE 22476
// exit ;
22474: GO 22476
// end ;
22476: PPOPN 7
22478: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
22479: CALL 1426 0 0
// end ; end_of_file
22483: PPOPN 1
22485: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
22486: LD_VAR 0 1
22490: PUSH
22491: LD_INT 200
22493: DOUBLE
22494: GREATEREQUAL
22495: IFFALSE 22503
22497: LD_INT 299
22499: DOUBLE
22500: LESSEQUAL
22501: IFTRUE 22505
22503: GO 22537
22505: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
22506: LD_VAR 0 1
22510: PPUSH
22511: LD_VAR 0 2
22515: PPUSH
22516: LD_VAR 0 3
22520: PPUSH
22521: LD_VAR 0 4
22525: PPUSH
22526: LD_VAR 0 5
22530: PPUSH
22531: CALL 17728 0 5
22535: GO 22614
22537: LD_INT 300
22539: DOUBLE
22540: GREATEREQUAL
22541: IFFALSE 22549
22543: LD_INT 399
22545: DOUBLE
22546: LESSEQUAL
22547: IFTRUE 22551
22549: GO 22613
22551: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
22552: LD_VAR 0 1
22556: PPUSH
22557: LD_VAR 0 2
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: LD_VAR 0 4
22571: PPUSH
22572: LD_VAR 0 5
22576: PPUSH
22577: LD_VAR 0 6
22581: PPUSH
22582: LD_VAR 0 7
22586: PPUSH
22587: LD_VAR 0 8
22591: PPUSH
22592: LD_VAR 0 9
22596: PPUSH
22597: LD_VAR 0 10
22601: PPUSH
22602: LD_VAR 0 11
22606: PPUSH
22607: CALL 13887 0 11
22611: GO 22614
22613: POP
// end ;
22614: PPOPN 11
22616: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
22617: LD_VAR 0 1
22621: PPUSH
22622: LD_VAR 0 2
22626: PPUSH
22627: LD_VAR 0 3
22631: PPUSH
22632: LD_VAR 0 4
22636: PPUSH
22637: LD_VAR 0 5
22641: PPUSH
22642: CALL 17236 0 5
// end ; end_of_file
22646: PPOPN 5
22648: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22649: LD_INT 0
22651: PPUSH
22652: PPUSH
// if exist_mode then
22653: LD_VAR 0 2
22657: IFFALSE 22682
// unit := CreateCharacter ( prefix & ident ) else
22659: LD_ADDR_VAR 0 5
22663: PUSH
22664: LD_VAR 0 3
22668: PUSH
22669: LD_VAR 0 1
22673: STR
22674: PPUSH
22675: CALL_OW 34
22679: ST_TO_ADDR
22680: GO 22697
// unit := NewCharacter ( ident ) ;
22682: LD_ADDR_VAR 0 5
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 25
22696: ST_TO_ADDR
// result := unit ;
22697: LD_ADDR_VAR 0 4
22701: PUSH
22702: LD_VAR 0 5
22706: ST_TO_ADDR
// end ;
22707: LD_VAR 0 4
22711: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22712: LD_INT 0
22714: PPUSH
22715: PPUSH
// if not side or not nation then
22716: LD_VAR 0 1
22720: NOT
22721: PUSH
22722: LD_VAR 0 2
22726: NOT
22727: OR
22728: IFFALSE 22732
// exit ;
22730: GO 23500
// case nation of nation_american :
22732: LD_VAR 0 2
22736: PUSH
22737: LD_INT 1
22739: DOUBLE
22740: EQUAL
22741: IFTRUE 22745
22743: GO 22959
22745: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22746: LD_ADDR_VAR 0 4
22750: PUSH
22751: LD_INT 35
22753: PUSH
22754: LD_INT 45
22756: PUSH
22757: LD_INT 46
22759: PUSH
22760: LD_INT 47
22762: PUSH
22763: LD_INT 82
22765: PUSH
22766: LD_INT 83
22768: PUSH
22769: LD_INT 84
22771: PUSH
22772: LD_INT 85
22774: PUSH
22775: LD_INT 86
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: LD_INT 6
22786: PUSH
22787: LD_INT 15
22789: PUSH
22790: LD_INT 16
22792: PUSH
22793: LD_INT 7
22795: PUSH
22796: LD_INT 12
22798: PUSH
22799: LD_INT 13
22801: PUSH
22802: LD_INT 10
22804: PUSH
22805: LD_INT 14
22807: PUSH
22808: LD_INT 20
22810: PUSH
22811: LD_INT 21
22813: PUSH
22814: LD_INT 22
22816: PUSH
22817: LD_INT 25
22819: PUSH
22820: LD_INT 32
22822: PUSH
22823: LD_INT 27
22825: PUSH
22826: LD_INT 36
22828: PUSH
22829: LD_INT 69
22831: PUSH
22832: LD_INT 39
22834: PUSH
22835: LD_INT 34
22837: PUSH
22838: LD_INT 40
22840: PUSH
22841: LD_INT 48
22843: PUSH
22844: LD_INT 49
22846: PUSH
22847: LD_INT 50
22849: PUSH
22850: LD_INT 51
22852: PUSH
22853: LD_INT 52
22855: PUSH
22856: LD_INT 53
22858: PUSH
22859: LD_INT 54
22861: PUSH
22862: LD_INT 55
22864: PUSH
22865: LD_INT 56
22867: PUSH
22868: LD_INT 57
22870: PUSH
22871: LD_INT 58
22873: PUSH
22874: LD_INT 59
22876: PUSH
22877: LD_INT 60
22879: PUSH
22880: LD_INT 61
22882: PUSH
22883: LD_INT 62
22885: PUSH
22886: LD_INT 80
22888: PUSH
22889: LD_INT 82
22891: PUSH
22892: LD_INT 83
22894: PUSH
22895: LD_INT 84
22897: PUSH
22898: LD_INT 85
22900: PUSH
22901: LD_INT 86
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: ST_TO_ADDR
22957: GO 23424
22959: LD_INT 2
22961: DOUBLE
22962: EQUAL
22963: IFTRUE 22967
22965: GO 23193
22967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22968: LD_ADDR_VAR 0 4
22972: PUSH
22973: LD_INT 35
22975: PUSH
22976: LD_INT 45
22978: PUSH
22979: LD_INT 46
22981: PUSH
22982: LD_INT 47
22984: PUSH
22985: LD_INT 82
22987: PUSH
22988: LD_INT 83
22990: PUSH
22991: LD_INT 84
22993: PUSH
22994: LD_INT 85
22996: PUSH
22997: LD_INT 87
22999: PUSH
23000: LD_INT 70
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 11
23008: PUSH
23009: LD_INT 3
23011: PUSH
23012: LD_INT 4
23014: PUSH
23015: LD_INT 5
23017: PUSH
23018: LD_INT 6
23020: PUSH
23021: LD_INT 15
23023: PUSH
23024: LD_INT 18
23026: PUSH
23027: LD_INT 7
23029: PUSH
23030: LD_INT 17
23032: PUSH
23033: LD_INT 8
23035: PUSH
23036: LD_INT 20
23038: PUSH
23039: LD_INT 21
23041: PUSH
23042: LD_INT 22
23044: PUSH
23045: LD_INT 72
23047: PUSH
23048: LD_INT 26
23050: PUSH
23051: LD_INT 69
23053: PUSH
23054: LD_INT 39
23056: PUSH
23057: LD_INT 40
23059: PUSH
23060: LD_INT 41
23062: PUSH
23063: LD_INT 42
23065: PUSH
23066: LD_INT 43
23068: PUSH
23069: LD_INT 48
23071: PUSH
23072: LD_INT 49
23074: PUSH
23075: LD_INT 50
23077: PUSH
23078: LD_INT 51
23080: PUSH
23081: LD_INT 52
23083: PUSH
23084: LD_INT 53
23086: PUSH
23087: LD_INT 54
23089: PUSH
23090: LD_INT 55
23092: PUSH
23093: LD_INT 56
23095: PUSH
23096: LD_INT 60
23098: PUSH
23099: LD_INT 61
23101: PUSH
23102: LD_INT 62
23104: PUSH
23105: LD_INT 66
23107: PUSH
23108: LD_INT 67
23110: PUSH
23111: LD_INT 68
23113: PUSH
23114: LD_INT 81
23116: PUSH
23117: LD_INT 82
23119: PUSH
23120: LD_INT 83
23122: PUSH
23123: LD_INT 84
23125: PUSH
23126: LD_INT 85
23128: PUSH
23129: LD_INT 87
23131: PUSH
23132: LD_INT 88
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: ST_TO_ADDR
23191: GO 23424
23193: LD_INT 3
23195: DOUBLE
23196: EQUAL
23197: IFTRUE 23201
23199: GO 23423
23201: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23202: LD_ADDR_VAR 0 4
23206: PUSH
23207: LD_INT 46
23209: PUSH
23210: LD_INT 47
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: LD_INT 82
23221: PUSH
23222: LD_INT 83
23224: PUSH
23225: LD_INT 84
23227: PUSH
23228: LD_INT 85
23230: PUSH
23231: LD_INT 86
23233: PUSH
23234: LD_INT 11
23236: PUSH
23237: LD_INT 9
23239: PUSH
23240: LD_INT 20
23242: PUSH
23243: LD_INT 19
23245: PUSH
23246: LD_INT 21
23248: PUSH
23249: LD_INT 24
23251: PUSH
23252: LD_INT 22
23254: PUSH
23255: LD_INT 25
23257: PUSH
23258: LD_INT 28
23260: PUSH
23261: LD_INT 29
23263: PUSH
23264: LD_INT 30
23266: PUSH
23267: LD_INT 31
23269: PUSH
23270: LD_INT 37
23272: PUSH
23273: LD_INT 38
23275: PUSH
23276: LD_INT 32
23278: PUSH
23279: LD_INT 27
23281: PUSH
23282: LD_INT 33
23284: PUSH
23285: LD_INT 69
23287: PUSH
23288: LD_INT 39
23290: PUSH
23291: LD_INT 34
23293: PUSH
23294: LD_INT 40
23296: PUSH
23297: LD_INT 71
23299: PUSH
23300: LD_INT 23
23302: PUSH
23303: LD_INT 44
23305: PUSH
23306: LD_INT 48
23308: PUSH
23309: LD_INT 49
23311: PUSH
23312: LD_INT 50
23314: PUSH
23315: LD_INT 51
23317: PUSH
23318: LD_INT 52
23320: PUSH
23321: LD_INT 53
23323: PUSH
23324: LD_INT 54
23326: PUSH
23327: LD_INT 55
23329: PUSH
23330: LD_INT 56
23332: PUSH
23333: LD_INT 57
23335: PUSH
23336: LD_INT 58
23338: PUSH
23339: LD_INT 59
23341: PUSH
23342: LD_INT 63
23344: PUSH
23345: LD_INT 64
23347: PUSH
23348: LD_INT 65
23350: PUSH
23351: LD_INT 82
23353: PUSH
23354: LD_INT 83
23356: PUSH
23357: LD_INT 84
23359: PUSH
23360: LD_INT 85
23362: PUSH
23363: LD_INT 86
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: ST_TO_ADDR
23421: GO 23424
23423: POP
// if state > - 1 and state < 3 then
23424: LD_VAR 0 3
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: GREATER
23433: PUSH
23434: LD_VAR 0 3
23438: PUSH
23439: LD_INT 3
23441: LESS
23442: AND
23443: IFFALSE 23500
// for i in result do
23445: LD_ADDR_VAR 0 5
23449: PUSH
23450: LD_VAR 0 4
23454: PUSH
23455: FOR_IN
23456: IFFALSE 23498
// if GetTech ( i , side ) <> state then
23458: LD_VAR 0 5
23462: PPUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 321
23472: PUSH
23473: LD_VAR 0 3
23477: NONEQUAL
23478: IFFALSE 23496
// result := result diff i ;
23480: LD_ADDR_VAR 0 4
23484: PUSH
23485: LD_VAR 0 4
23489: PUSH
23490: LD_VAR 0 5
23494: DIFF
23495: ST_TO_ADDR
23496: GO 23455
23498: POP
23499: POP
// end ;
23500: LD_VAR 0 4
23504: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23505: LD_INT 0
23507: PPUSH
23508: PPUSH
23509: PPUSH
// result := true ;
23510: LD_ADDR_VAR 0 3
23514: PUSH
23515: LD_INT 1
23517: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23518: LD_ADDR_VAR 0 5
23522: PUSH
23523: LD_VAR 0 2
23527: PPUSH
23528: CALL_OW 480
23532: ST_TO_ADDR
// if not tmp then
23533: LD_VAR 0 5
23537: NOT
23538: IFFALSE 23542
// exit ;
23540: GO 23591
// for i in tmp do
23542: LD_ADDR_VAR 0 4
23546: PUSH
23547: LD_VAR 0 5
23551: PUSH
23552: FOR_IN
23553: IFFALSE 23589
// if GetTech ( i , side ) <> state_researched then
23555: LD_VAR 0 4
23559: PPUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 321
23569: PUSH
23570: LD_INT 2
23572: NONEQUAL
23573: IFFALSE 23587
// begin result := false ;
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_INT 0
23582: ST_TO_ADDR
// exit ;
23583: POP
23584: POP
23585: GO 23591
// end ;
23587: GO 23552
23589: POP
23590: POP
// end ;
23591: LD_VAR 0 3
23595: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23596: LD_INT 0
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
23610: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23611: LD_VAR 0 1
23615: NOT
23616: PUSH
23617: LD_VAR 0 1
23621: PPUSH
23622: CALL_OW 257
23626: PUSH
23627: LD_INT 9
23629: NONEQUAL
23630: OR
23631: IFFALSE 23635
// exit ;
23633: GO 24208
// side := GetSide ( unit ) ;
23635: LD_ADDR_VAR 0 9
23639: PUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 255
23649: ST_TO_ADDR
// tech_space := tech_spacanom ;
23650: LD_ADDR_VAR 0 12
23654: PUSH
23655: LD_INT 29
23657: ST_TO_ADDR
// tech_time := tech_taurad ;
23658: LD_ADDR_VAR 0 13
23662: PUSH
23663: LD_INT 28
23665: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23666: LD_ADDR_VAR 0 11
23670: PUSH
23671: LD_VAR 0 1
23675: PPUSH
23676: CALL_OW 310
23680: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23681: LD_VAR 0 11
23685: PPUSH
23686: CALL_OW 247
23690: PUSH
23691: LD_INT 2
23693: EQUAL
23694: IFFALSE 23698
// exit ;
23696: GO 24208
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23698: LD_ADDR_VAR 0 8
23702: PUSH
23703: LD_INT 81
23705: PUSH
23706: LD_VAR 0 9
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 3
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: LD_INT 3
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PPUSH
23736: CALL_OW 69
23740: ST_TO_ADDR
// if not tmp then
23741: LD_VAR 0 8
23745: NOT
23746: IFFALSE 23750
// exit ;
23748: GO 24208
// if in_unit then
23750: LD_VAR 0 11
23754: IFFALSE 23778
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23756: LD_ADDR_VAR 0 10
23760: PUSH
23761: LD_VAR 0 8
23765: PPUSH
23766: LD_VAR 0 11
23770: PPUSH
23771: CALL_OW 74
23775: ST_TO_ADDR
23776: GO 23798
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23778: LD_ADDR_VAR 0 10
23782: PUSH
23783: LD_VAR 0 8
23787: PPUSH
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 74
23797: ST_TO_ADDR
// if not enemy then
23798: LD_VAR 0 10
23802: NOT
23803: IFFALSE 23807
// exit ;
23805: GO 24208
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23807: LD_VAR 0 11
23811: PUSH
23812: LD_VAR 0 11
23816: PPUSH
23817: LD_VAR 0 10
23821: PPUSH
23822: CALL_OW 296
23826: PUSH
23827: LD_INT 13
23829: GREATER
23830: AND
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: LD_VAR 0 10
23841: PPUSH
23842: CALL_OW 296
23846: PUSH
23847: LD_INT 12
23849: GREATER
23850: OR
23851: IFFALSE 23855
// exit ;
23853: GO 24208
// missile := [ 1 ] ;
23855: LD_ADDR_VAR 0 14
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: EMPTY
23864: LIST
23865: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23866: LD_VAR 0 9
23870: PPUSH
23871: LD_VAR 0 12
23875: PPUSH
23876: CALL_OW 325
23880: IFFALSE 23909
// missile := Replace ( missile , missile + 1 , 2 ) ;
23882: LD_ADDR_VAR 0 14
23886: PUSH
23887: LD_VAR 0 14
23891: PPUSH
23892: LD_VAR 0 14
23896: PUSH
23897: LD_INT 1
23899: PLUS
23900: PPUSH
23901: LD_INT 2
23903: PPUSH
23904: CALL_OW 1
23908: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23909: LD_VAR 0 9
23913: PPUSH
23914: LD_VAR 0 13
23918: PPUSH
23919: CALL_OW 325
23923: PUSH
23924: LD_VAR 0 10
23928: PPUSH
23929: CALL_OW 255
23933: PPUSH
23934: LD_VAR 0 13
23938: PPUSH
23939: CALL_OW 325
23943: NOT
23944: AND
23945: IFFALSE 23974
// missile := Replace ( missile , missile + 1 , 3 ) ;
23947: LD_ADDR_VAR 0 14
23951: PUSH
23952: LD_VAR 0 14
23956: PPUSH
23957: LD_VAR 0 14
23961: PUSH
23962: LD_INT 1
23964: PLUS
23965: PPUSH
23966: LD_INT 3
23968: PPUSH
23969: CALL_OW 1
23973: ST_TO_ADDR
// if missile < 2 then
23974: LD_VAR 0 14
23978: PUSH
23979: LD_INT 2
23981: LESS
23982: IFFALSE 23986
// exit ;
23984: GO 24208
// x := GetX ( enemy ) ;
23986: LD_ADDR_VAR 0 4
23990: PUSH
23991: LD_VAR 0 10
23995: PPUSH
23996: CALL_OW 250
24000: ST_TO_ADDR
// y := GetY ( enemy ) ;
24001: LD_ADDR_VAR 0 5
24005: PUSH
24006: LD_VAR 0 10
24010: PPUSH
24011: CALL_OW 251
24015: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24016: LD_ADDR_VAR 0 6
24020: PUSH
24021: LD_VAR 0 4
24025: PUSH
24026: LD_INT 1
24028: NEG
24029: PPUSH
24030: LD_INT 1
24032: PPUSH
24033: CALL_OW 12
24037: PLUS
24038: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24039: LD_ADDR_VAR 0 7
24043: PUSH
24044: LD_VAR 0 5
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PPUSH
24053: LD_INT 1
24055: PPUSH
24056: CALL_OW 12
24060: PLUS
24061: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24062: LD_VAR 0 6
24066: PPUSH
24067: LD_VAR 0 7
24071: PPUSH
24072: CALL_OW 488
24076: NOT
24077: IFFALSE 24099
// begin _x := x ;
24079: LD_ADDR_VAR 0 6
24083: PUSH
24084: LD_VAR 0 4
24088: ST_TO_ADDR
// _y := y ;
24089: LD_ADDR_VAR 0 7
24093: PUSH
24094: LD_VAR 0 5
24098: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24099: LD_ADDR_VAR 0 3
24103: PUSH
24104: LD_INT 1
24106: PPUSH
24107: LD_VAR 0 14
24111: PPUSH
24112: CALL_OW 12
24116: ST_TO_ADDR
// case i of 1 :
24117: LD_VAR 0 3
24121: PUSH
24122: LD_INT 1
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24147
24130: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24131: LD_VAR 0 1
24135: PPUSH
24136: LD_VAR 0 10
24140: PPUSH
24141: CALL_OW 115
24145: GO 24208
24147: LD_INT 2
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24177
24155: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24156: LD_VAR 0 1
24160: PPUSH
24161: LD_VAR 0 6
24165: PPUSH
24166: LD_VAR 0 7
24170: PPUSH
24171: CALL_OW 153
24175: GO 24208
24177: LD_INT 3
24179: DOUBLE
24180: EQUAL
24181: IFTRUE 24185
24183: GO 24207
24185: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24186: LD_VAR 0 1
24190: PPUSH
24191: LD_VAR 0 6
24195: PPUSH
24196: LD_VAR 0 7
24200: PPUSH
24201: CALL_OW 154
24205: GO 24208
24207: POP
// end ;
24208: LD_VAR 0 2
24212: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
24220: PPUSH
// if not unit or not building then
24221: LD_VAR 0 1
24225: NOT
24226: PUSH
24227: LD_VAR 0 2
24231: NOT
24232: OR
24233: IFFALSE 24237
// exit ;
24235: GO 24395
// x := GetX ( building ) ;
24237: LD_ADDR_VAR 0 5
24241: PUSH
24242: LD_VAR 0 2
24246: PPUSH
24247: CALL_OW 250
24251: ST_TO_ADDR
// y := GetY ( building ) ;
24252: LD_ADDR_VAR 0 6
24256: PUSH
24257: LD_VAR 0 2
24261: PPUSH
24262: CALL_OW 251
24266: ST_TO_ADDR
// for i = 0 to 5 do
24267: LD_ADDR_VAR 0 4
24271: PUSH
24272: DOUBLE
24273: LD_INT 0
24275: DEC
24276: ST_TO_ADDR
24277: LD_INT 5
24279: PUSH
24280: FOR_TO
24281: IFFALSE 24393
// begin _x := ShiftX ( x , i , 3 ) ;
24283: LD_ADDR_VAR 0 7
24287: PUSH
24288: LD_VAR 0 5
24292: PPUSH
24293: LD_VAR 0 4
24297: PPUSH
24298: LD_INT 3
24300: PPUSH
24301: CALL_OW 272
24305: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24306: LD_ADDR_VAR 0 8
24310: PUSH
24311: LD_VAR 0 6
24315: PPUSH
24316: LD_VAR 0 4
24320: PPUSH
24321: LD_INT 3
24323: PPUSH
24324: CALL_OW 273
24328: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24329: LD_VAR 0 7
24333: PPUSH
24334: LD_VAR 0 8
24338: PPUSH
24339: CALL_OW 488
24343: NOT
24344: IFFALSE 24348
// continue ;
24346: GO 24280
// if HexInfo ( _x , _y ) = 0 then
24348: LD_VAR 0 7
24352: PPUSH
24353: LD_VAR 0 8
24357: PPUSH
24358: CALL_OW 428
24362: PUSH
24363: LD_INT 0
24365: EQUAL
24366: IFFALSE 24391
// begin ComMoveXY ( unit , _x , _y ) ;
24368: LD_VAR 0 1
24372: PPUSH
24373: LD_VAR 0 7
24377: PPUSH
24378: LD_VAR 0 8
24382: PPUSH
24383: CALL_OW 111
// exit ;
24387: POP
24388: POP
24389: GO 24395
// end ; end ;
24391: GO 24280
24393: POP
24394: POP
// end ;
24395: LD_VAR 0 3
24399: RET
// export function ScanBase ( side , base_area ) ; begin
24400: LD_INT 0
24402: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24403: LD_ADDR_VAR 0 3
24407: PUSH
24408: LD_VAR 0 2
24412: PPUSH
24413: LD_INT 81
24415: PUSH
24416: LD_VAR 0 1
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PPUSH
24425: CALL_OW 70
24429: ST_TO_ADDR
// end ;
24430: LD_VAR 0 3
24434: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24435: LD_INT 0
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
// result := false ;
24441: LD_ADDR_VAR 0 2
24445: PUSH
24446: LD_INT 0
24448: ST_TO_ADDR
// side := GetSide ( unit ) ;
24449: LD_ADDR_VAR 0 3
24453: PUSH
24454: LD_VAR 0 1
24458: PPUSH
24459: CALL_OW 255
24463: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24464: LD_ADDR_VAR 0 4
24468: PUSH
24469: LD_VAR 0 1
24473: PPUSH
24474: CALL_OW 248
24478: ST_TO_ADDR
// case nat of 1 :
24479: LD_VAR 0 4
24483: PUSH
24484: LD_INT 1
24486: DOUBLE
24487: EQUAL
24488: IFTRUE 24492
24490: GO 24503
24492: POP
// tech := tech_lassight ; 2 :
24493: LD_ADDR_VAR 0 5
24497: PUSH
24498: LD_INT 12
24500: ST_TO_ADDR
24501: GO 24542
24503: LD_INT 2
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24522
24511: POP
// tech := tech_mortar ; 3 :
24512: LD_ADDR_VAR 0 5
24516: PUSH
24517: LD_INT 41
24519: ST_TO_ADDR
24520: GO 24542
24522: LD_INT 3
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24541
24530: POP
// tech := tech_bazooka ; end ;
24531: LD_ADDR_VAR 0 5
24535: PUSH
24536: LD_INT 44
24538: ST_TO_ADDR
24539: GO 24542
24541: POP
// if Researched ( side , tech ) then
24542: LD_VAR 0 3
24546: PPUSH
24547: LD_VAR 0 5
24551: PPUSH
24552: CALL_OW 325
24556: IFFALSE 24583
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24558: LD_ADDR_VAR 0 2
24562: PUSH
24563: LD_INT 5
24565: PUSH
24566: LD_INT 8
24568: PUSH
24569: LD_INT 9
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: PUSH
24577: LD_VAR 0 4
24581: ARRAY
24582: ST_TO_ADDR
// end ;
24583: LD_VAR 0 2
24587: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24588: LD_INT 0
24590: PPUSH
24591: PPUSH
24592: PPUSH
// if not mines then
24593: LD_VAR 0 2
24597: NOT
24598: IFFALSE 24602
// exit ;
24600: GO 24746
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24602: LD_ADDR_VAR 0 5
24606: PUSH
24607: LD_INT 81
24609: PUSH
24610: LD_VAR 0 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 3
24621: PUSH
24622: LD_INT 21
24624: PUSH
24625: LD_INT 3
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PPUSH
24640: CALL_OW 69
24644: ST_TO_ADDR
// for i in mines do
24645: LD_ADDR_VAR 0 4
24649: PUSH
24650: LD_VAR 0 2
24654: PUSH
24655: FOR_IN
24656: IFFALSE 24744
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24658: LD_VAR 0 4
24662: PUSH
24663: LD_INT 1
24665: ARRAY
24666: PPUSH
24667: LD_VAR 0 4
24671: PUSH
24672: LD_INT 2
24674: ARRAY
24675: PPUSH
24676: CALL_OW 458
24680: NOT
24681: IFFALSE 24685
// continue ;
24683: GO 24655
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24685: LD_VAR 0 4
24689: PUSH
24690: LD_INT 1
24692: ARRAY
24693: PPUSH
24694: LD_VAR 0 4
24698: PUSH
24699: LD_INT 2
24701: ARRAY
24702: PPUSH
24703: CALL_OW 428
24707: PUSH
24708: LD_VAR 0 5
24712: IN
24713: IFFALSE 24742
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24715: LD_VAR 0 4
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: PPUSH
24724: LD_VAR 0 4
24728: PUSH
24729: LD_INT 2
24731: ARRAY
24732: PPUSH
24733: LD_VAR 0 1
24737: PPUSH
24738: CALL_OW 456
// end ;
24742: GO 24655
24744: POP
24745: POP
// end ;
24746: LD_VAR 0 3
24750: RET
// export function Count ( array ) ; begin
24751: LD_INT 0
24753: PPUSH
// result := array + 0 ;
24754: LD_ADDR_VAR 0 2
24758: PUSH
24759: LD_VAR 0 1
24763: PUSH
24764: LD_INT 0
24766: PLUS
24767: ST_TO_ADDR
// end ;
24768: LD_VAR 0 2
24772: RET
// export function IsEmpty ( building ) ; begin
24773: LD_INT 0
24775: PPUSH
// if not building then
24776: LD_VAR 0 1
24780: NOT
24781: IFFALSE 24785
// exit ;
24783: GO 24828
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_VAR 0 1
24794: PUSH
24795: LD_INT 22
24797: PUSH
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 255
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 58
24814: PUSH
24815: EMPTY
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PPUSH
24822: CALL_OW 69
24826: IN
24827: ST_TO_ADDR
// end ;
24828: LD_VAR 0 2
24832: RET
// export function IsNotFull ( building ) ; var places ; begin
24833: LD_INT 0
24835: PPUSH
24836: PPUSH
// if not building then
24837: LD_VAR 0 1
24841: NOT
24842: IFFALSE 24846
// exit ;
24844: GO 24874
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24846: LD_ADDR_VAR 0 2
24850: PUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: LD_INT 3
24858: PUSH
24859: LD_INT 62
24861: PUSH
24862: EMPTY
24863: LIST
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PPUSH
24869: CALL_OW 72
24873: ST_TO_ADDR
// end ;
24874: LD_VAR 0 2
24878: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24879: LD_INT 0
24881: PPUSH
24882: PPUSH
24883: PPUSH
24884: PPUSH
// tmp := [ ] ;
24885: LD_ADDR_VAR 0 3
24889: PUSH
24890: EMPTY
24891: ST_TO_ADDR
// list := [ ] ;
24892: LD_ADDR_VAR 0 5
24896: PUSH
24897: EMPTY
24898: ST_TO_ADDR
// for i = 16 to 25 do
24899: LD_ADDR_VAR 0 4
24903: PUSH
24904: DOUBLE
24905: LD_INT 16
24907: DEC
24908: ST_TO_ADDR
24909: LD_INT 25
24911: PUSH
24912: FOR_TO
24913: IFFALSE 24986
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24915: LD_ADDR_VAR 0 3
24919: PUSH
24920: LD_VAR 0 3
24924: PUSH
24925: LD_INT 22
24927: PUSH
24928: LD_VAR 0 1
24932: PPUSH
24933: CALL_OW 255
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 91
24944: PUSH
24945: LD_VAR 0 1
24949: PUSH
24950: LD_INT 6
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 30
24960: PUSH
24961: LD_VAR 0 4
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: LIST
24974: PUSH
24975: EMPTY
24976: LIST
24977: PPUSH
24978: CALL_OW 69
24982: ADD
24983: ST_TO_ADDR
24984: GO 24912
24986: POP
24987: POP
// for i = 1 to tmp do
24988: LD_ADDR_VAR 0 4
24992: PUSH
24993: DOUBLE
24994: LD_INT 1
24996: DEC
24997: ST_TO_ADDR
24998: LD_VAR 0 3
25002: PUSH
25003: FOR_TO
25004: IFFALSE 25092
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25006: LD_ADDR_VAR 0 5
25010: PUSH
25011: LD_VAR 0 5
25015: PUSH
25016: LD_VAR 0 3
25020: PUSH
25021: LD_VAR 0 4
25025: ARRAY
25026: PPUSH
25027: CALL_OW 266
25031: PUSH
25032: LD_VAR 0 3
25036: PUSH
25037: LD_VAR 0 4
25041: ARRAY
25042: PPUSH
25043: CALL_OW 250
25047: PUSH
25048: LD_VAR 0 3
25052: PUSH
25053: LD_VAR 0 4
25057: ARRAY
25058: PPUSH
25059: CALL_OW 251
25063: PUSH
25064: LD_VAR 0 3
25068: PUSH
25069: LD_VAR 0 4
25073: ARRAY
25074: PPUSH
25075: CALL_OW 254
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: PUSH
25086: EMPTY
25087: LIST
25088: ADD
25089: ST_TO_ADDR
25090: GO 25003
25092: POP
25093: POP
// result := list ;
25094: LD_ADDR_VAR 0 2
25098: PUSH
25099: LD_VAR 0 5
25103: ST_TO_ADDR
// end ;
25104: LD_VAR 0 2
25108: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25109: LD_INT 0
25111: PPUSH
25112: PPUSH
25113: PPUSH
25114: PPUSH
25115: PPUSH
25116: PPUSH
25117: PPUSH
// if not factory then
25118: LD_VAR 0 1
25122: NOT
25123: IFFALSE 25127
// exit ;
25125: GO 25720
// if control = control_apeman then
25127: LD_VAR 0 4
25131: PUSH
25132: LD_INT 5
25134: EQUAL
25135: IFFALSE 25244
// begin tmp := UnitsInside ( factory ) ;
25137: LD_ADDR_VAR 0 8
25141: PUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 313
25151: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25152: LD_VAR 0 8
25156: PPUSH
25157: LD_INT 25
25159: PUSH
25160: LD_INT 12
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PPUSH
25167: CALL_OW 72
25171: NOT
25172: IFFALSE 25182
// control := control_manual ;
25174: LD_ADDR_VAR 0 4
25178: PUSH
25179: LD_INT 1
25181: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25182: LD_ADDR_VAR 0 8
25186: PUSH
25187: LD_VAR 0 1
25191: PPUSH
25192: CALL 24879 0 1
25196: ST_TO_ADDR
// if tmp then
25197: LD_VAR 0 8
25201: IFFALSE 25244
// begin for i in tmp do
25203: LD_ADDR_VAR 0 7
25207: PUSH
25208: LD_VAR 0 8
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25242
// if i [ 1 ] = b_ext_radio then
25216: LD_VAR 0 7
25220: PUSH
25221: LD_INT 1
25223: ARRAY
25224: PUSH
25225: LD_INT 22
25227: EQUAL
25228: IFFALSE 25240
// begin control := control_remote ;
25230: LD_ADDR_VAR 0 4
25234: PUSH
25235: LD_INT 2
25237: ST_TO_ADDR
// break ;
25238: GO 25242
// end ;
25240: GO 25213
25242: POP
25243: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25244: LD_VAR 0 1
25248: PPUSH
25249: LD_VAR 0 2
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: LD_VAR 0 4
25263: PPUSH
25264: LD_VAR 0 5
25268: PPUSH
25269: CALL_OW 448
25273: IFFALSE 25308
// begin result := [ chassis , engine , control , weapon ] ;
25275: LD_ADDR_VAR 0 6
25279: PUSH
25280: LD_VAR 0 2
25284: PUSH
25285: LD_VAR 0 3
25289: PUSH
25290: LD_VAR 0 4
25294: PUSH
25295: LD_VAR 0 5
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
// exit ;
25306: GO 25720
// end ; _chassis := AvailableChassisList ( factory ) ;
25308: LD_ADDR_VAR 0 9
25312: PUSH
25313: LD_VAR 0 1
25317: PPUSH
25318: CALL_OW 475
25322: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25323: LD_ADDR_VAR 0 11
25327: PUSH
25328: LD_VAR 0 1
25332: PPUSH
25333: CALL_OW 476
25337: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25338: LD_ADDR_VAR 0 12
25342: PUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 477
25352: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25353: LD_ADDR_VAR 0 10
25357: PUSH
25358: LD_VAR 0 1
25362: PPUSH
25363: CALL_OW 478
25367: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25368: LD_VAR 0 9
25372: NOT
25373: PUSH
25374: LD_VAR 0 11
25378: NOT
25379: OR
25380: PUSH
25381: LD_VAR 0 12
25385: NOT
25386: OR
25387: PUSH
25388: LD_VAR 0 10
25392: NOT
25393: OR
25394: IFFALSE 25429
// begin result := [ chassis , engine , control , weapon ] ;
25396: LD_ADDR_VAR 0 6
25400: PUSH
25401: LD_VAR 0 2
25405: PUSH
25406: LD_VAR 0 3
25410: PUSH
25411: LD_VAR 0 4
25415: PUSH
25416: LD_VAR 0 5
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: ST_TO_ADDR
// exit ;
25427: GO 25720
// end ; if not chassis in _chassis then
25429: LD_VAR 0 2
25433: PUSH
25434: LD_VAR 0 9
25438: IN
25439: NOT
25440: IFFALSE 25466
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25442: LD_ADDR_VAR 0 2
25446: PUSH
25447: LD_VAR 0 9
25451: PUSH
25452: LD_INT 1
25454: PPUSH
25455: LD_VAR 0 9
25459: PPUSH
25460: CALL_OW 12
25464: ARRAY
25465: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: CALL 25725 0 2
25480: NOT
25481: IFFALSE 25540
// repeat engine := _engine [ 1 ] ;
25483: LD_ADDR_VAR 0 3
25487: PUSH
25488: LD_VAR 0 11
25492: PUSH
25493: LD_INT 1
25495: ARRAY
25496: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25497: LD_ADDR_VAR 0 11
25501: PUSH
25502: LD_VAR 0 11
25506: PPUSH
25507: LD_INT 1
25509: PPUSH
25510: CALL_OW 3
25514: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25515: LD_VAR 0 2
25519: PPUSH
25520: LD_VAR 0 3
25524: PPUSH
25525: CALL 25725 0 2
25529: PUSH
25530: LD_VAR 0 11
25534: PUSH
25535: EMPTY
25536: EQUAL
25537: OR
25538: IFFALSE 25483
// if not control in _control then
25540: LD_VAR 0 4
25544: PUSH
25545: LD_VAR 0 12
25549: IN
25550: NOT
25551: IFFALSE 25577
// control := _control [ rand ( 1 , _control ) ] ;
25553: LD_ADDR_VAR 0 4
25557: PUSH
25558: LD_VAR 0 12
25562: PUSH
25563: LD_INT 1
25565: PPUSH
25566: LD_VAR 0 12
25570: PPUSH
25571: CALL_OW 12
25575: ARRAY
25576: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25577: LD_VAR 0 2
25581: PPUSH
25582: LD_VAR 0 5
25586: PPUSH
25587: CALL 25945 0 2
25591: NOT
25592: IFFALSE 25651
// repeat weapon := _weapon [ 1 ] ;
25594: LD_ADDR_VAR 0 5
25598: PUSH
25599: LD_VAR 0 10
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25608: LD_ADDR_VAR 0 10
25612: PUSH
25613: LD_VAR 0 10
25617: PPUSH
25618: LD_INT 1
25620: PPUSH
25621: CALL_OW 3
25625: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25626: LD_VAR 0 2
25630: PPUSH
25631: LD_VAR 0 5
25635: PPUSH
25636: CALL 25945 0 2
25640: PUSH
25641: LD_VAR 0 10
25645: PUSH
25646: EMPTY
25647: EQUAL
25648: OR
25649: IFFALSE 25594
// result := [ ] ;
25651: LD_ADDR_VAR 0 6
25655: PUSH
25656: EMPTY
25657: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25658: LD_VAR 0 1
25662: PPUSH
25663: LD_VAR 0 2
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: LD_VAR 0 5
25682: PPUSH
25683: CALL_OW 448
25687: IFFALSE 25720
// result := [ chassis , engine , control , weapon ] ;
25689: LD_ADDR_VAR 0 6
25693: PUSH
25694: LD_VAR 0 2
25698: PUSH
25699: LD_VAR 0 3
25703: PUSH
25704: LD_VAR 0 4
25708: PUSH
25709: LD_VAR 0 5
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: ST_TO_ADDR
// end ;
25720: LD_VAR 0 6
25724: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25725: LD_INT 0
25727: PPUSH
// if not chassis or not engine then
25728: LD_VAR 0 1
25732: NOT
25733: PUSH
25734: LD_VAR 0 2
25738: NOT
25739: OR
25740: IFFALSE 25744
// exit ;
25742: GO 25940
// case engine of engine_solar :
25744: LD_VAR 0 2
25748: PUSH
25749: LD_INT 2
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 25795
25757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25758: LD_ADDR_VAR 0 3
25762: PUSH
25763: LD_INT 11
25765: PUSH
25766: LD_INT 12
25768: PUSH
25769: LD_INT 13
25771: PUSH
25772: LD_INT 14
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: ST_TO_ADDR
25793: GO 25924
25795: LD_INT 1
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 25865
25803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25804: LD_ADDR_VAR 0 3
25808: PUSH
25809: LD_INT 11
25811: PUSH
25812: LD_INT 12
25814: PUSH
25815: LD_INT 13
25817: PUSH
25818: LD_INT 14
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: LD_INT 3
25829: PUSH
25830: LD_INT 4
25832: PUSH
25833: LD_INT 5
25835: PUSH
25836: LD_INT 21
25838: PUSH
25839: LD_INT 23
25841: PUSH
25842: LD_INT 22
25844: PUSH
25845: LD_INT 24
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: ST_TO_ADDR
25863: GO 25924
25865: LD_INT 3
25867: DOUBLE
25868: EQUAL
25869: IFTRUE 25873
25871: GO 25923
25873: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_INT 13
25881: PUSH
25882: LD_INT 14
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: LD_INT 4
25893: PUSH
25894: LD_INT 5
25896: PUSH
25897: LD_INT 21
25899: PUSH
25900: LD_INT 22
25902: PUSH
25903: LD_INT 23
25905: PUSH
25906: LD_INT 24
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
25921: GO 25924
25923: POP
// result := ( chassis in result ) ;
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_VAR 0 1
25933: PUSH
25934: LD_VAR 0 3
25938: IN
25939: ST_TO_ADDR
// end ;
25940: LD_VAR 0 3
25944: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25945: LD_INT 0
25947: PPUSH
// if not chassis or not weapon then
25948: LD_VAR 0 1
25952: NOT
25953: PUSH
25954: LD_VAR 0 2
25958: NOT
25959: OR
25960: IFFALSE 25964
// exit ;
25962: GO 27024
// case weapon of us_machine_gun :
25964: LD_VAR 0 2
25968: PUSH
25969: LD_INT 2
25971: DOUBLE
25972: EQUAL
25973: IFTRUE 25977
25975: GO 26007
25977: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25978: LD_ADDR_VAR 0 3
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: LD_INT 3
25991: PUSH
25992: LD_INT 4
25994: PUSH
25995: LD_INT 5
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: ST_TO_ADDR
26005: GO 27008
26007: LD_INT 3
26009: DOUBLE
26010: EQUAL
26011: IFTRUE 26015
26013: GO 26045
26015: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26016: LD_ADDR_VAR 0 3
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: LD_INT 4
26032: PUSH
26033: LD_INT 5
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: ST_TO_ADDR
26043: GO 27008
26045: LD_INT 11
26047: DOUBLE
26048: EQUAL
26049: IFTRUE 26053
26051: GO 26083
26053: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26054: LD_ADDR_VAR 0 3
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: LD_INT 3
26067: PUSH
26068: LD_INT 4
26070: PUSH
26071: LD_INT 5
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: ST_TO_ADDR
26081: GO 27008
26083: LD_INT 4
26085: DOUBLE
26086: EQUAL
26087: IFTRUE 26091
26089: GO 26117
26091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26092: LD_ADDR_VAR 0 3
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: LD_INT 4
26105: PUSH
26106: LD_INT 5
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: ST_TO_ADDR
26115: GO 27008
26117: LD_INT 5
26119: DOUBLE
26120: EQUAL
26121: IFTRUE 26125
26123: GO 26151
26125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: LD_INT 3
26136: PUSH
26137: LD_INT 4
26139: PUSH
26140: LD_INT 5
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
26149: GO 27008
26151: LD_INT 9
26153: DOUBLE
26154: EQUAL
26155: IFTRUE 26159
26157: GO 26185
26159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 4
26173: PUSH
26174: LD_INT 5
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: ST_TO_ADDR
26183: GO 27008
26185: LD_INT 7
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26219
26193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: LD_INT 3
26204: PUSH
26205: LD_INT 4
26207: PUSH
26208: LD_INT 5
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 27008
26219: LD_INT 12
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26253
26227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 3
26238: PUSH
26239: LD_INT 4
26241: PUSH
26242: LD_INT 5
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 27008
26253: LD_INT 13
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26287
26261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 2
26269: PUSH
26270: LD_INT 3
26272: PUSH
26273: LD_INT 4
26275: PUSH
26276: LD_INT 5
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
26285: GO 27008
26287: LD_INT 14
26289: DOUBLE
26290: EQUAL
26291: IFTRUE 26295
26293: GO 26313
26295: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 4
26303: PUSH
26304: LD_INT 5
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: ST_TO_ADDR
26311: GO 27008
26313: LD_INT 6
26315: DOUBLE
26316: EQUAL
26317: IFTRUE 26321
26319: GO 26339
26321: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26322: LD_ADDR_VAR 0 3
26326: PUSH
26327: LD_INT 4
26329: PUSH
26330: LD_INT 5
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: ST_TO_ADDR
26337: GO 27008
26339: LD_INT 10
26341: DOUBLE
26342: EQUAL
26343: IFTRUE 26347
26345: GO 26365
26347: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26348: LD_ADDR_VAR 0 3
26352: PUSH
26353: LD_INT 4
26355: PUSH
26356: LD_INT 5
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: ST_TO_ADDR
26363: GO 27008
26365: LD_INT 22
26367: DOUBLE
26368: EQUAL
26369: IFTRUE 26373
26371: GO 26399
26373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26374: LD_ADDR_VAR 0 3
26378: PUSH
26379: LD_INT 11
26381: PUSH
26382: LD_INT 12
26384: PUSH
26385: LD_INT 13
26387: PUSH
26388: LD_INT 14
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: ST_TO_ADDR
26397: GO 27008
26399: LD_INT 23
26401: DOUBLE
26402: EQUAL
26403: IFTRUE 26407
26405: GO 26433
26407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26408: LD_ADDR_VAR 0 3
26412: PUSH
26413: LD_INT 11
26415: PUSH
26416: LD_INT 12
26418: PUSH
26419: LD_INT 13
26421: PUSH
26422: LD_INT 14
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
26431: GO 27008
26433: LD_INT 24
26435: DOUBLE
26436: EQUAL
26437: IFTRUE 26441
26439: GO 26467
26441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26442: LD_ADDR_VAR 0 3
26446: PUSH
26447: LD_INT 11
26449: PUSH
26450: LD_INT 12
26452: PUSH
26453: LD_INT 13
26455: PUSH
26456: LD_INT 14
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: ST_TO_ADDR
26465: GO 27008
26467: LD_INT 30
26469: DOUBLE
26470: EQUAL
26471: IFTRUE 26475
26473: GO 26501
26475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26476: LD_ADDR_VAR 0 3
26480: PUSH
26481: LD_INT 11
26483: PUSH
26484: LD_INT 12
26486: PUSH
26487: LD_INT 13
26489: PUSH
26490: LD_INT 14
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: ST_TO_ADDR
26499: GO 27008
26501: LD_INT 25
26503: DOUBLE
26504: EQUAL
26505: IFTRUE 26509
26507: GO 26527
26509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26510: LD_ADDR_VAR 0 3
26514: PUSH
26515: LD_INT 13
26517: PUSH
26518: LD_INT 14
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: ST_TO_ADDR
26525: GO 27008
26527: LD_INT 27
26529: DOUBLE
26530: EQUAL
26531: IFTRUE 26535
26533: GO 26553
26535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_INT 13
26543: PUSH
26544: LD_INT 14
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: ST_TO_ADDR
26551: GO 27008
26553: LD_INT 92
26555: DOUBLE
26556: EQUAL
26557: IFTRUE 26561
26559: GO 26587
26561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26562: LD_ADDR_VAR 0 3
26566: PUSH
26567: LD_INT 11
26569: PUSH
26570: LD_INT 12
26572: PUSH
26573: LD_INT 13
26575: PUSH
26576: LD_INT 14
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
26585: GO 27008
26587: LD_INT 28
26589: DOUBLE
26590: EQUAL
26591: IFTRUE 26595
26593: GO 26613
26595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26596: LD_ADDR_VAR 0 3
26600: PUSH
26601: LD_INT 13
26603: PUSH
26604: LD_INT 14
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: ST_TO_ADDR
26611: GO 27008
26613: LD_INT 29
26615: DOUBLE
26616: EQUAL
26617: IFTRUE 26621
26619: GO 26639
26621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 13
26629: PUSH
26630: LD_INT 14
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: ST_TO_ADDR
26637: GO 27008
26639: LD_INT 31
26641: DOUBLE
26642: EQUAL
26643: IFTRUE 26647
26645: GO 26665
26647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_INT 13
26655: PUSH
26656: LD_INT 14
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: ST_TO_ADDR
26663: GO 27008
26665: LD_INT 26
26667: DOUBLE
26668: EQUAL
26669: IFTRUE 26673
26671: GO 26691
26673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26674: LD_ADDR_VAR 0 3
26678: PUSH
26679: LD_INT 13
26681: PUSH
26682: LD_INT 14
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: ST_TO_ADDR
26689: GO 27008
26691: LD_INT 42
26693: DOUBLE
26694: EQUAL
26695: IFTRUE 26699
26697: GO 26725
26699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 21
26707: PUSH
26708: LD_INT 22
26710: PUSH
26711: LD_INT 23
26713: PUSH
26714: LD_INT 24
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: ST_TO_ADDR
26723: GO 27008
26725: LD_INT 43
26727: DOUBLE
26728: EQUAL
26729: IFTRUE 26733
26731: GO 26759
26733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_INT 21
26741: PUSH
26742: LD_INT 22
26744: PUSH
26745: LD_INT 23
26747: PUSH
26748: LD_INT 24
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: ST_TO_ADDR
26757: GO 27008
26759: LD_INT 44
26761: DOUBLE
26762: EQUAL
26763: IFTRUE 26767
26765: GO 26793
26767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26768: LD_ADDR_VAR 0 3
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_INT 23
26781: PUSH
26782: LD_INT 24
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: ST_TO_ADDR
26791: GO 27008
26793: LD_INT 45
26795: DOUBLE
26796: EQUAL
26797: IFTRUE 26801
26799: GO 26827
26801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: LD_INT 21
26809: PUSH
26810: LD_INT 22
26812: PUSH
26813: LD_INT 23
26815: PUSH
26816: LD_INT 24
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: ST_TO_ADDR
26825: GO 27008
26827: LD_INT 49
26829: DOUBLE
26830: EQUAL
26831: IFTRUE 26835
26833: GO 26861
26835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26836: LD_ADDR_VAR 0 3
26840: PUSH
26841: LD_INT 21
26843: PUSH
26844: LD_INT 22
26846: PUSH
26847: LD_INT 23
26849: PUSH
26850: LD_INT 24
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: ST_TO_ADDR
26859: GO 27008
26861: LD_INT 51
26863: DOUBLE
26864: EQUAL
26865: IFTRUE 26869
26867: GO 26895
26869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 21
26877: PUSH
26878: LD_INT 22
26880: PUSH
26881: LD_INT 23
26883: PUSH
26884: LD_INT 24
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
26893: GO 27008
26895: LD_INT 52
26897: DOUBLE
26898: EQUAL
26899: IFTRUE 26903
26901: GO 26929
26903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26904: LD_ADDR_VAR 0 3
26908: PUSH
26909: LD_INT 21
26911: PUSH
26912: LD_INT 22
26914: PUSH
26915: LD_INT 23
26917: PUSH
26918: LD_INT 24
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: ST_TO_ADDR
26927: GO 27008
26929: LD_INT 53
26931: DOUBLE
26932: EQUAL
26933: IFTRUE 26937
26935: GO 26955
26937: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26938: LD_ADDR_VAR 0 3
26942: PUSH
26943: LD_INT 23
26945: PUSH
26946: LD_INT 24
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: ST_TO_ADDR
26953: GO 27008
26955: LD_INT 46
26957: DOUBLE
26958: EQUAL
26959: IFTRUE 26963
26961: GO 26981
26963: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_INT 23
26971: PUSH
26972: LD_INT 24
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: ST_TO_ADDR
26979: GO 27008
26981: LD_INT 47
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 26989
26987: GO 27007
26989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26990: LD_ADDR_VAR 0 3
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 24
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: ST_TO_ADDR
27005: GO 27008
27007: POP
// result := ( chassis in result ) ;
27008: LD_ADDR_VAR 0 3
27012: PUSH
27013: LD_VAR 0 1
27017: PUSH
27018: LD_VAR 0 3
27022: IN
27023: ST_TO_ADDR
// end ;
27024: LD_VAR 0 3
27028: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
27033: PPUSH
27034: PPUSH
27035: PPUSH
27036: PPUSH
27037: PPUSH
// result := array ;
27038: LD_ADDR_VAR 0 5
27042: PUSH
27043: LD_VAR 0 1
27047: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27048: LD_VAR 0 1
27052: NOT
27053: PUSH
27054: LD_VAR 0 2
27058: NOT
27059: OR
27060: PUSH
27061: LD_VAR 0 3
27065: NOT
27066: OR
27067: PUSH
27068: LD_VAR 0 2
27072: PUSH
27073: LD_VAR 0 1
27077: GREATER
27078: OR
27079: PUSH
27080: LD_VAR 0 3
27084: PUSH
27085: LD_VAR 0 1
27089: GREATER
27090: OR
27091: IFFALSE 27095
// exit ;
27093: GO 27391
// if direction then
27095: LD_VAR 0 4
27099: IFFALSE 27163
// begin d := 1 ;
27101: LD_ADDR_VAR 0 9
27105: PUSH
27106: LD_INT 1
27108: ST_TO_ADDR
// if i_from > i_to then
27109: LD_VAR 0 2
27113: PUSH
27114: LD_VAR 0 3
27118: GREATER
27119: IFFALSE 27145
// length := ( array - i_from ) + i_to else
27121: LD_ADDR_VAR 0 11
27125: PUSH
27126: LD_VAR 0 1
27130: PUSH
27131: LD_VAR 0 2
27135: MINUS
27136: PUSH
27137: LD_VAR 0 3
27141: PLUS
27142: ST_TO_ADDR
27143: GO 27161
// length := i_to - i_from ;
27145: LD_ADDR_VAR 0 11
27149: PUSH
27150: LD_VAR 0 3
27154: PUSH
27155: LD_VAR 0 2
27159: MINUS
27160: ST_TO_ADDR
// end else
27161: GO 27224
// begin d := - 1 ;
27163: LD_ADDR_VAR 0 9
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: ST_TO_ADDR
// if i_from > i_to then
27172: LD_VAR 0 2
27176: PUSH
27177: LD_VAR 0 3
27181: GREATER
27182: IFFALSE 27202
// length := i_from - i_to else
27184: LD_ADDR_VAR 0 11
27188: PUSH
27189: LD_VAR 0 2
27193: PUSH
27194: LD_VAR 0 3
27198: MINUS
27199: ST_TO_ADDR
27200: GO 27224
// length := ( array - i_to ) + i_from ;
27202: LD_ADDR_VAR 0 11
27206: PUSH
27207: LD_VAR 0 1
27211: PUSH
27212: LD_VAR 0 3
27216: MINUS
27217: PUSH
27218: LD_VAR 0 2
27222: PLUS
27223: ST_TO_ADDR
// end ; if not length then
27224: LD_VAR 0 11
27228: NOT
27229: IFFALSE 27233
// exit ;
27231: GO 27391
// tmp := array ;
27233: LD_ADDR_VAR 0 10
27237: PUSH
27238: LD_VAR 0 1
27242: ST_TO_ADDR
// for i = 1 to length do
27243: LD_ADDR_VAR 0 6
27247: PUSH
27248: DOUBLE
27249: LD_INT 1
27251: DEC
27252: ST_TO_ADDR
27253: LD_VAR 0 11
27257: PUSH
27258: FOR_TO
27259: IFFALSE 27379
// begin for j = 1 to array do
27261: LD_ADDR_VAR 0 7
27265: PUSH
27266: DOUBLE
27267: LD_INT 1
27269: DEC
27270: ST_TO_ADDR
27271: LD_VAR 0 1
27275: PUSH
27276: FOR_TO
27277: IFFALSE 27365
// begin k := j + d ;
27279: LD_ADDR_VAR 0 8
27283: PUSH
27284: LD_VAR 0 7
27288: PUSH
27289: LD_VAR 0 9
27293: PLUS
27294: ST_TO_ADDR
// if k > array then
27295: LD_VAR 0 8
27299: PUSH
27300: LD_VAR 0 1
27304: GREATER
27305: IFFALSE 27315
// k := 1 ;
27307: LD_ADDR_VAR 0 8
27311: PUSH
27312: LD_INT 1
27314: ST_TO_ADDR
// if not k then
27315: LD_VAR 0 8
27319: NOT
27320: IFFALSE 27332
// k := array ;
27322: LD_ADDR_VAR 0 8
27326: PUSH
27327: LD_VAR 0 1
27331: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27332: LD_ADDR_VAR 0 10
27336: PUSH
27337: LD_VAR 0 10
27341: PPUSH
27342: LD_VAR 0 8
27346: PPUSH
27347: LD_VAR 0 1
27351: PUSH
27352: LD_VAR 0 7
27356: ARRAY
27357: PPUSH
27358: CALL_OW 1
27362: ST_TO_ADDR
// end ;
27363: GO 27276
27365: POP
27366: POP
// array := tmp ;
27367: LD_ADDR_VAR 0 1
27371: PUSH
27372: LD_VAR 0 10
27376: ST_TO_ADDR
// end ;
27377: GO 27258
27379: POP
27380: POP
// result := array ;
27381: LD_ADDR_VAR 0 5
27385: PUSH
27386: LD_VAR 0 1
27390: ST_TO_ADDR
// end ;
27391: LD_VAR 0 5
27395: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
// result := 0 ;
27400: LD_ADDR_VAR 0 3
27404: PUSH
27405: LD_INT 0
27407: ST_TO_ADDR
// if not array or not value in array then
27408: LD_VAR 0 1
27412: NOT
27413: PUSH
27414: LD_VAR 0 2
27418: PUSH
27419: LD_VAR 0 1
27423: IN
27424: NOT
27425: OR
27426: IFFALSE 27430
// exit ;
27428: GO 27484
// for i = 1 to array do
27430: LD_ADDR_VAR 0 4
27434: PUSH
27435: DOUBLE
27436: LD_INT 1
27438: DEC
27439: ST_TO_ADDR
27440: LD_VAR 0 1
27444: PUSH
27445: FOR_TO
27446: IFFALSE 27482
// if value = array [ i ] then
27448: LD_VAR 0 2
27452: PUSH
27453: LD_VAR 0 1
27457: PUSH
27458: LD_VAR 0 4
27462: ARRAY
27463: EQUAL
27464: IFFALSE 27480
// begin result := i ;
27466: LD_ADDR_VAR 0 3
27470: PUSH
27471: LD_VAR 0 4
27475: ST_TO_ADDR
// exit ;
27476: POP
27477: POP
27478: GO 27484
// end ;
27480: GO 27445
27482: POP
27483: POP
// end ;
27484: LD_VAR 0 3
27488: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27489: LD_INT 0
27491: PPUSH
// vc_chassis := chassis ;
27492: LD_ADDR_OWVAR 37
27496: PUSH
27497: LD_VAR 0 1
27501: ST_TO_ADDR
// vc_engine := engine ;
27502: LD_ADDR_OWVAR 39
27506: PUSH
27507: LD_VAR 0 2
27511: ST_TO_ADDR
// vc_control := control ;
27512: LD_ADDR_OWVAR 38
27516: PUSH
27517: LD_VAR 0 3
27521: ST_TO_ADDR
// vc_weapon := weapon ;
27522: LD_ADDR_OWVAR 40
27526: PUSH
27527: LD_VAR 0 4
27531: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27532: LD_ADDR_OWVAR 41
27536: PUSH
27537: LD_VAR 0 5
27541: ST_TO_ADDR
// end ;
27542: LD_VAR 0 6
27546: RET
// export function WantPlant ( unit ) ; var task ; begin
27547: LD_INT 0
27549: PPUSH
27550: PPUSH
// result := false ;
27551: LD_ADDR_VAR 0 2
27555: PUSH
27556: LD_INT 0
27558: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27559: LD_ADDR_VAR 0 3
27563: PUSH
27564: LD_VAR 0 1
27568: PPUSH
27569: CALL_OW 437
27573: ST_TO_ADDR
// if task then
27574: LD_VAR 0 3
27578: IFFALSE 27606
// if task [ 1 ] [ 1 ] = p then
27580: LD_VAR 0 3
27584: PUSH
27585: LD_INT 1
27587: ARRAY
27588: PUSH
27589: LD_INT 1
27591: ARRAY
27592: PUSH
27593: LD_STRING p
27595: EQUAL
27596: IFFALSE 27606
// result := true ;
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: LD_INT 1
27605: ST_TO_ADDR
// end ;
27606: LD_VAR 0 2
27610: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27611: LD_INT 0
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
// if pos < 1 then
27617: LD_VAR 0 2
27621: PUSH
27622: LD_INT 1
27624: LESS
27625: IFFALSE 27629
// exit ;
27627: GO 27932
// if pos = 1 then
27629: LD_VAR 0 2
27633: PUSH
27634: LD_INT 1
27636: EQUAL
27637: IFFALSE 27670
// result := Replace ( arr , pos [ 1 ] , value ) else
27639: LD_ADDR_VAR 0 4
27643: PUSH
27644: LD_VAR 0 1
27648: PPUSH
27649: LD_VAR 0 2
27653: PUSH
27654: LD_INT 1
27656: ARRAY
27657: PPUSH
27658: LD_VAR 0 3
27662: PPUSH
27663: CALL_OW 1
27667: ST_TO_ADDR
27668: GO 27932
// begin tmp := arr ;
27670: LD_ADDR_VAR 0 6
27674: PUSH
27675: LD_VAR 0 1
27679: ST_TO_ADDR
// s_arr := [ tmp ] ;
27680: LD_ADDR_VAR 0 7
27684: PUSH
27685: LD_VAR 0 6
27689: PUSH
27690: EMPTY
27691: LIST
27692: ST_TO_ADDR
// for i = 1 to pos - 1 do
27693: LD_ADDR_VAR 0 5
27697: PUSH
27698: DOUBLE
27699: LD_INT 1
27701: DEC
27702: ST_TO_ADDR
27703: LD_VAR 0 2
27707: PUSH
27708: LD_INT 1
27710: MINUS
27711: PUSH
27712: FOR_TO
27713: IFFALSE 27758
// begin tmp := tmp [ pos [ i ] ] ;
27715: LD_ADDR_VAR 0 6
27719: PUSH
27720: LD_VAR 0 6
27724: PUSH
27725: LD_VAR 0 2
27729: PUSH
27730: LD_VAR 0 5
27734: ARRAY
27735: ARRAY
27736: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27737: LD_ADDR_VAR 0 7
27741: PUSH
27742: LD_VAR 0 7
27746: PUSH
27747: LD_VAR 0 6
27751: PUSH
27752: EMPTY
27753: LIST
27754: ADD
27755: ST_TO_ADDR
// end ;
27756: GO 27712
27758: POP
27759: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27760: LD_ADDR_VAR 0 6
27764: PUSH
27765: LD_VAR 0 6
27769: PPUSH
27770: LD_VAR 0 2
27774: PUSH
27775: LD_VAR 0 2
27779: ARRAY
27780: PPUSH
27781: LD_VAR 0 3
27785: PPUSH
27786: CALL_OW 1
27790: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27791: LD_ADDR_VAR 0 7
27795: PUSH
27796: LD_VAR 0 7
27800: PPUSH
27801: LD_VAR 0 7
27805: PPUSH
27806: LD_VAR 0 6
27810: PPUSH
27811: CALL_OW 1
27815: ST_TO_ADDR
// for i = s_arr downto 2 do
27816: LD_ADDR_VAR 0 5
27820: PUSH
27821: DOUBLE
27822: LD_VAR 0 7
27826: INC
27827: ST_TO_ADDR
27828: LD_INT 2
27830: PUSH
27831: FOR_DOWNTO
27832: IFFALSE 27916
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27834: LD_ADDR_VAR 0 6
27838: PUSH
27839: LD_VAR 0 7
27843: PUSH
27844: LD_VAR 0 5
27848: PUSH
27849: LD_INT 1
27851: MINUS
27852: ARRAY
27853: PPUSH
27854: LD_VAR 0 2
27858: PUSH
27859: LD_VAR 0 5
27863: PUSH
27864: LD_INT 1
27866: MINUS
27867: ARRAY
27868: PPUSH
27869: LD_VAR 0 7
27873: PUSH
27874: LD_VAR 0 5
27878: ARRAY
27879: PPUSH
27880: CALL_OW 1
27884: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27885: LD_ADDR_VAR 0 7
27889: PUSH
27890: LD_VAR 0 7
27894: PPUSH
27895: LD_VAR 0 5
27899: PUSH
27900: LD_INT 1
27902: MINUS
27903: PPUSH
27904: LD_VAR 0 6
27908: PPUSH
27909: CALL_OW 1
27913: ST_TO_ADDR
// end ;
27914: GO 27831
27916: POP
27917: POP
// result := s_arr [ 1 ] ;
27918: LD_ADDR_VAR 0 4
27922: PUSH
27923: LD_VAR 0 7
27927: PUSH
27928: LD_INT 1
27930: ARRAY
27931: ST_TO_ADDR
// end ; end ;
27932: LD_VAR 0 4
27936: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27937: LD_INT 0
27939: PPUSH
27940: PPUSH
// if not list then
27941: LD_VAR 0 1
27945: NOT
27946: IFFALSE 27950
// exit ;
27948: GO 28041
// i := list [ pos1 ] ;
27950: LD_ADDR_VAR 0 5
27954: PUSH
27955: LD_VAR 0 1
27959: PUSH
27960: LD_VAR 0 2
27964: ARRAY
27965: ST_TO_ADDR
// if not i then
27966: LD_VAR 0 5
27970: NOT
27971: IFFALSE 27975
// exit ;
27973: GO 28041
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_VAR 0 1
27984: PPUSH
27985: LD_VAR 0 2
27989: PPUSH
27990: LD_VAR 0 1
27994: PUSH
27995: LD_VAR 0 3
27999: ARRAY
28000: PPUSH
28001: CALL_OW 1
28005: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28006: LD_ADDR_VAR 0 1
28010: PUSH
28011: LD_VAR 0 1
28015: PPUSH
28016: LD_VAR 0 3
28020: PPUSH
28021: LD_VAR 0 5
28025: PPUSH
28026: CALL_OW 1
28030: ST_TO_ADDR
// result := list ;
28031: LD_ADDR_VAR 0 4
28035: PUSH
28036: LD_VAR 0 1
28040: ST_TO_ADDR
// end ;
28041: LD_VAR 0 4
28045: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28046: LD_INT 0
28048: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28049: LD_ADDR_VAR 0 5
28053: PUSH
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 250
28063: PPUSH
28064: LD_VAR 0 1
28068: PPUSH
28069: CALL_OW 251
28073: PPUSH
28074: LD_VAR 0 2
28078: PPUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: LD_VAR 0 4
28088: PPUSH
28089: CALL 28467 0 5
28093: ST_TO_ADDR
// end ;
28094: LD_VAR 0 5
28098: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
28099: LD_INT 0
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
// if not list or not unit then
28105: LD_VAR 0 2
28109: NOT
28110: PUSH
28111: LD_VAR 0 1
28115: NOT
28116: OR
28117: IFFALSE 28121
// exit ;
28119: GO 28462
// result := [ ] ;
28121: LD_ADDR_VAR 0 5
28125: PUSH
28126: EMPTY
28127: ST_TO_ADDR
// for i in list do
28128: LD_ADDR_VAR 0 6
28132: PUSH
28133: LD_VAR 0 2
28137: PUSH
28138: FOR_IN
28139: IFFALSE 28357
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
28141: LD_ADDR_VAR 0 8
28145: PUSH
28146: LD_VAR 0 1
28150: PPUSH
28151: LD_VAR 0 6
28155: PUSH
28156: LD_INT 1
28158: ARRAY
28159: PPUSH
28160: LD_VAR 0 6
28164: PUSH
28165: LD_INT 2
28167: ARRAY
28168: PPUSH
28169: CALL_OW 297
28173: ST_TO_ADDR
// if not Count ( result ) then
28174: LD_VAR 0 5
28178: PPUSH
28179: CALL 24751 0 1
28183: NOT
28184: IFFALSE 28217
// begin result := Join ( result , [ i , tmp ] ) ;
28186: LD_ADDR_VAR 0 5
28190: PUSH
28191: LD_VAR 0 5
28195: PPUSH
28196: LD_VAR 0 6
28200: PUSH
28201: LD_VAR 0 8
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PPUSH
28210: CALL 60360 0 2
28214: ST_TO_ADDR
// continue ;
28215: GO 28138
// end ; if result [ result ] [ 2 ] <= tmp then
28217: LD_VAR 0 5
28221: PUSH
28222: LD_VAR 0 5
28226: ARRAY
28227: PUSH
28228: LD_INT 2
28230: ARRAY
28231: PUSH
28232: LD_VAR 0 8
28236: LESSEQUAL
28237: IFFALSE 28270
// result := Join ( result , [ i , tmp ] ) else
28239: LD_ADDR_VAR 0 5
28243: PUSH
28244: LD_VAR 0 5
28248: PPUSH
28249: LD_VAR 0 6
28253: PUSH
28254: LD_VAR 0 8
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PPUSH
28263: CALL 60360 0 2
28267: ST_TO_ADDR
28268: GO 28355
// begin for j := 1 to Count ( result ) do
28270: LD_ADDR_VAR 0 7
28274: PUSH
28275: DOUBLE
28276: LD_INT 1
28278: DEC
28279: ST_TO_ADDR
28280: LD_VAR 0 5
28284: PPUSH
28285: CALL 24751 0 1
28289: PUSH
28290: FOR_TO
28291: IFFALSE 28353
// begin if tmp < result [ j ] [ 2 ] then
28293: LD_VAR 0 8
28297: PUSH
28298: LD_VAR 0 5
28302: PUSH
28303: LD_VAR 0 7
28307: ARRAY
28308: PUSH
28309: LD_INT 2
28311: ARRAY
28312: LESS
28313: IFFALSE 28351
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28315: LD_ADDR_VAR 0 5
28319: PUSH
28320: LD_VAR 0 5
28324: PPUSH
28325: LD_VAR 0 7
28329: PPUSH
28330: LD_VAR 0 6
28334: PUSH
28335: LD_VAR 0 8
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PPUSH
28344: CALL_OW 2
28348: ST_TO_ADDR
// break ;
28349: GO 28353
// end ; end ;
28351: GO 28290
28353: POP
28354: POP
// end ; end ;
28355: GO 28138
28357: POP
28358: POP
// if result and not asc then
28359: LD_VAR 0 5
28363: PUSH
28364: LD_VAR 0 3
28368: NOT
28369: AND
28370: IFFALSE 28387
// result := ReverseArray ( result ) ;
28372: LD_ADDR_VAR 0 5
28376: PUSH
28377: LD_VAR 0 5
28381: PPUSH
28382: CALL 55627 0 1
28386: ST_TO_ADDR
// tmp := [ ] ;
28387: LD_ADDR_VAR 0 8
28391: PUSH
28392: EMPTY
28393: ST_TO_ADDR
// if mode then
28394: LD_VAR 0 4
28398: IFFALSE 28462
// begin for i := 1 to result do
28400: LD_ADDR_VAR 0 6
28404: PUSH
28405: DOUBLE
28406: LD_INT 1
28408: DEC
28409: ST_TO_ADDR
28410: LD_VAR 0 5
28414: PUSH
28415: FOR_TO
28416: IFFALSE 28450
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
28418: LD_ADDR_VAR 0 8
28422: PUSH
28423: LD_VAR 0 8
28427: PPUSH
28428: LD_VAR 0 5
28432: PUSH
28433: LD_VAR 0 6
28437: ARRAY
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PPUSH
28443: CALL 60360 0 2
28447: ST_TO_ADDR
28448: GO 28415
28450: POP
28451: POP
// result := tmp ;
28452: LD_ADDR_VAR 0 5
28456: PUSH
28457: LD_VAR 0 8
28461: ST_TO_ADDR
// end ; end ;
28462: LD_VAR 0 5
28466: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28467: LD_INT 0
28469: PPUSH
28470: PPUSH
28471: PPUSH
28472: PPUSH
// if not list then
28473: LD_VAR 0 3
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28870
// result := [ ] ;
28482: LD_ADDR_VAR 0 6
28486: PUSH
28487: EMPTY
28488: ST_TO_ADDR
// for i in list do
28489: LD_ADDR_VAR 0 7
28493: PUSH
28494: LD_VAR 0 3
28498: PUSH
28499: FOR_IN
28500: IFFALSE 28702
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28502: LD_ADDR_VAR 0 9
28506: PUSH
28507: LD_VAR 0 7
28511: PPUSH
28512: LD_VAR 0 1
28516: PPUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: CALL_OW 297
28526: ST_TO_ADDR
// if not result then
28527: LD_VAR 0 6
28531: NOT
28532: IFFALSE 28558
// result := [ [ i , tmp ] ] else
28534: LD_ADDR_VAR 0 6
28538: PUSH
28539: LD_VAR 0 7
28543: PUSH
28544: LD_VAR 0 9
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: ST_TO_ADDR
28556: GO 28700
// begin if result [ result ] [ 2 ] < tmp then
28558: LD_VAR 0 6
28562: PUSH
28563: LD_VAR 0 6
28567: ARRAY
28568: PUSH
28569: LD_INT 2
28571: ARRAY
28572: PUSH
28573: LD_VAR 0 9
28577: LESS
28578: IFFALSE 28620
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28580: LD_ADDR_VAR 0 6
28584: PUSH
28585: LD_VAR 0 6
28589: PPUSH
28590: LD_VAR 0 6
28594: PUSH
28595: LD_INT 1
28597: PLUS
28598: PPUSH
28599: LD_VAR 0 7
28603: PUSH
28604: LD_VAR 0 9
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PPUSH
28613: CALL_OW 2
28617: ST_TO_ADDR
28618: GO 28700
// for j = 1 to result do
28620: LD_ADDR_VAR 0 8
28624: PUSH
28625: DOUBLE
28626: LD_INT 1
28628: DEC
28629: ST_TO_ADDR
28630: LD_VAR 0 6
28634: PUSH
28635: FOR_TO
28636: IFFALSE 28698
// begin if tmp < result [ j ] [ 2 ] then
28638: LD_VAR 0 9
28642: PUSH
28643: LD_VAR 0 6
28647: PUSH
28648: LD_VAR 0 8
28652: ARRAY
28653: PUSH
28654: LD_INT 2
28656: ARRAY
28657: LESS
28658: IFFALSE 28696
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28660: LD_ADDR_VAR 0 6
28664: PUSH
28665: LD_VAR 0 6
28669: PPUSH
28670: LD_VAR 0 8
28674: PPUSH
28675: LD_VAR 0 7
28679: PUSH
28680: LD_VAR 0 9
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 2
28693: ST_TO_ADDR
// break ;
28694: GO 28698
// end ; end ;
28696: GO 28635
28698: POP
28699: POP
// end ; end ;
28700: GO 28499
28702: POP
28703: POP
// if result and not asc then
28704: LD_VAR 0 6
28708: PUSH
28709: LD_VAR 0 4
28713: NOT
28714: AND
28715: IFFALSE 28790
// begin tmp := result ;
28717: LD_ADDR_VAR 0 9
28721: PUSH
28722: LD_VAR 0 6
28726: ST_TO_ADDR
// for i = tmp downto 1 do
28727: LD_ADDR_VAR 0 7
28731: PUSH
28732: DOUBLE
28733: LD_VAR 0 9
28737: INC
28738: ST_TO_ADDR
28739: LD_INT 1
28741: PUSH
28742: FOR_DOWNTO
28743: IFFALSE 28788
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28745: LD_ADDR_VAR 0 6
28749: PUSH
28750: LD_VAR 0 6
28754: PPUSH
28755: LD_VAR 0 9
28759: PUSH
28760: LD_VAR 0 7
28764: MINUS
28765: PUSH
28766: LD_INT 1
28768: PLUS
28769: PPUSH
28770: LD_VAR 0 9
28774: PUSH
28775: LD_VAR 0 7
28779: ARRAY
28780: PPUSH
28781: CALL_OW 1
28785: ST_TO_ADDR
28786: GO 28742
28788: POP
28789: POP
// end ; tmp := [ ] ;
28790: LD_ADDR_VAR 0 9
28794: PUSH
28795: EMPTY
28796: ST_TO_ADDR
// if mode then
28797: LD_VAR 0 5
28801: IFFALSE 28870
// begin for i = 1 to result do
28803: LD_ADDR_VAR 0 7
28807: PUSH
28808: DOUBLE
28809: LD_INT 1
28811: DEC
28812: ST_TO_ADDR
28813: LD_VAR 0 6
28817: PUSH
28818: FOR_TO
28819: IFFALSE 28858
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28821: LD_ADDR_VAR 0 9
28825: PUSH
28826: LD_VAR 0 9
28830: PPUSH
28831: LD_VAR 0 7
28835: PPUSH
28836: LD_VAR 0 6
28840: PUSH
28841: LD_VAR 0 7
28845: ARRAY
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: PPUSH
28851: CALL_OW 1
28855: ST_TO_ADDR
28856: GO 28818
28858: POP
28859: POP
// result := tmp ;
28860: LD_ADDR_VAR 0 6
28864: PUSH
28865: LD_VAR 0 9
28869: ST_TO_ADDR
// end ; end ;
28870: LD_VAR 0 6
28874: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28875: LD_INT 0
28877: PPUSH
28878: PPUSH
28879: PPUSH
28880: PPUSH
28881: PPUSH
28882: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28883: LD_ADDR_VAR 0 5
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: ST_TO_ADDR
// if not x or not y then
28905: LD_VAR 0 2
28909: NOT
28910: PUSH
28911: LD_VAR 0 3
28915: NOT
28916: OR
28917: IFFALSE 28921
// exit ;
28919: GO 30571
// if not range then
28921: LD_VAR 0 4
28925: NOT
28926: IFFALSE 28936
// range := 10 ;
28928: LD_ADDR_VAR 0 4
28932: PUSH
28933: LD_INT 10
28935: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28936: LD_ADDR_VAR 0 8
28940: PUSH
28941: LD_INT 81
28943: PUSH
28944: LD_VAR 0 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 92
28955: PUSH
28956: LD_VAR 0 2
28960: PUSH
28961: LD_VAR 0 3
28965: PUSH
28966: LD_VAR 0 4
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: PUSH
28980: LD_INT 21
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: LIST
28998: PPUSH
28999: CALL_OW 69
29003: ST_TO_ADDR
// if not tmp then
29004: LD_VAR 0 8
29008: NOT
29009: IFFALSE 29013
// exit ;
29011: GO 30571
// for i in tmp do
29013: LD_ADDR_VAR 0 6
29017: PUSH
29018: LD_VAR 0 8
29022: PUSH
29023: FOR_IN
29024: IFFALSE 30546
// begin points := [ 0 , 0 , 0 ] ;
29026: LD_ADDR_VAR 0 9
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: ST_TO_ADDR
// bpoints := 1 ;
29045: LD_ADDR_VAR 0 10
29049: PUSH
29050: LD_INT 1
29052: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29053: LD_VAR 0 6
29057: PPUSH
29058: CALL_OW 247
29062: PUSH
29063: LD_INT 1
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29649
29071: POP
// begin if GetClass ( i ) = 1 then
29072: LD_VAR 0 6
29076: PPUSH
29077: CALL_OW 257
29081: PUSH
29082: LD_INT 1
29084: EQUAL
29085: IFFALSE 29106
// points := [ 10 , 5 , 3 ] ;
29087: LD_ADDR_VAR 0 9
29091: PUSH
29092: LD_INT 10
29094: PUSH
29095: LD_INT 5
29097: PUSH
29098: LD_INT 3
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29106: LD_VAR 0 6
29110: PPUSH
29111: CALL_OW 257
29115: PUSH
29116: LD_INT 2
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: LD_INT 4
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: LIST
29129: IN
29130: IFFALSE 29151
// points := [ 3 , 2 , 1 ] ;
29132: LD_ADDR_VAR 0 9
29136: PUSH
29137: LD_INT 3
29139: PUSH
29140: LD_INT 2
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29151: LD_VAR 0 6
29155: PPUSH
29156: CALL_OW 257
29160: PUSH
29161: LD_INT 5
29163: EQUAL
29164: IFFALSE 29185
// points := [ 130 , 5 , 2 ] ;
29166: LD_ADDR_VAR 0 9
29170: PUSH
29171: LD_INT 130
29173: PUSH
29174: LD_INT 5
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: LIST
29184: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29185: LD_VAR 0 6
29189: PPUSH
29190: CALL_OW 257
29194: PUSH
29195: LD_INT 8
29197: EQUAL
29198: IFFALSE 29219
// points := [ 35 , 35 , 30 ] ;
29200: LD_ADDR_VAR 0 9
29204: PUSH
29205: LD_INT 35
29207: PUSH
29208: LD_INT 35
29210: PUSH
29211: LD_INT 30
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29219: LD_VAR 0 6
29223: PPUSH
29224: CALL_OW 257
29228: PUSH
29229: LD_INT 9
29231: EQUAL
29232: IFFALSE 29253
// points := [ 20 , 55 , 40 ] ;
29234: LD_ADDR_VAR 0 9
29238: PUSH
29239: LD_INT 20
29241: PUSH
29242: LD_INT 55
29244: PUSH
29245: LD_INT 40
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: LIST
29252: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29253: LD_VAR 0 6
29257: PPUSH
29258: CALL_OW 257
29262: PUSH
29263: LD_INT 12
29265: PUSH
29266: LD_INT 16
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: IN
29273: IFFALSE 29294
// points := [ 5 , 3 , 2 ] ;
29275: LD_ADDR_VAR 0 9
29279: PUSH
29280: LD_INT 5
29282: PUSH
29283: LD_INT 3
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29294: LD_VAR 0 6
29298: PPUSH
29299: CALL_OW 257
29303: PUSH
29304: LD_INT 17
29306: EQUAL
29307: IFFALSE 29328
// points := [ 100 , 50 , 75 ] ;
29309: LD_ADDR_VAR 0 9
29313: PUSH
29314: LD_INT 100
29316: PUSH
29317: LD_INT 50
29319: PUSH
29320: LD_INT 75
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: LIST
29327: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29328: LD_VAR 0 6
29332: PPUSH
29333: CALL_OW 257
29337: PUSH
29338: LD_INT 15
29340: EQUAL
29341: IFFALSE 29362
// points := [ 10 , 5 , 3 ] ;
29343: LD_ADDR_VAR 0 9
29347: PUSH
29348: LD_INT 10
29350: PUSH
29351: LD_INT 5
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29362: LD_VAR 0 6
29366: PPUSH
29367: CALL_OW 257
29371: PUSH
29372: LD_INT 14
29374: EQUAL
29375: IFFALSE 29396
// points := [ 10 , 0 , 0 ] ;
29377: LD_ADDR_VAR 0 9
29381: PUSH
29382: LD_INT 10
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29396: LD_VAR 0 6
29400: PPUSH
29401: CALL_OW 257
29405: PUSH
29406: LD_INT 11
29408: EQUAL
29409: IFFALSE 29430
// points := [ 30 , 10 , 5 ] ;
29411: LD_ADDR_VAR 0 9
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: LD_INT 10
29421: PUSH
29422: LD_INT 5
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29430: LD_VAR 0 1
29434: PPUSH
29435: LD_INT 5
29437: PPUSH
29438: CALL_OW 321
29442: PUSH
29443: LD_INT 2
29445: EQUAL
29446: IFFALSE 29463
// bpoints := bpoints * 1.8 ;
29448: LD_ADDR_VAR 0 10
29452: PUSH
29453: LD_VAR 0 10
29457: PUSH
29458: LD_REAL  1.80000000000000E+0000
29461: MUL
29462: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29463: LD_VAR 0 6
29467: PPUSH
29468: CALL_OW 257
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: LD_INT 4
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: IN
29491: PUSH
29492: LD_VAR 0 1
29496: PPUSH
29497: LD_INT 51
29499: PPUSH
29500: CALL_OW 321
29504: PUSH
29505: LD_INT 2
29507: EQUAL
29508: AND
29509: IFFALSE 29526
// bpoints := bpoints * 1.2 ;
29511: LD_ADDR_VAR 0 10
29515: PUSH
29516: LD_VAR 0 10
29520: PUSH
29521: LD_REAL  1.20000000000000E+0000
29524: MUL
29525: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29526: LD_VAR 0 6
29530: PPUSH
29531: CALL_OW 257
29535: PUSH
29536: LD_INT 5
29538: PUSH
29539: LD_INT 7
29541: PUSH
29542: LD_INT 9
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: IN
29550: PUSH
29551: LD_VAR 0 1
29555: PPUSH
29556: LD_INT 52
29558: PPUSH
29559: CALL_OW 321
29563: PUSH
29564: LD_INT 2
29566: EQUAL
29567: AND
29568: IFFALSE 29585
// bpoints := bpoints * 1.5 ;
29570: LD_ADDR_VAR 0 10
29574: PUSH
29575: LD_VAR 0 10
29579: PUSH
29580: LD_REAL  1.50000000000000E+0000
29583: MUL
29584: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29585: LD_VAR 0 1
29589: PPUSH
29590: LD_INT 66
29592: PPUSH
29593: CALL_OW 321
29597: PUSH
29598: LD_INT 2
29600: EQUAL
29601: IFFALSE 29618
// bpoints := bpoints * 1.1 ;
29603: LD_ADDR_VAR 0 10
29607: PUSH
29608: LD_VAR 0 10
29612: PUSH
29613: LD_REAL  1.10000000000000E+0000
29616: MUL
29617: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29618: LD_ADDR_VAR 0 10
29622: PUSH
29623: LD_VAR 0 10
29627: PUSH
29628: LD_VAR 0 6
29632: PPUSH
29633: LD_INT 1
29635: PPUSH
29636: CALL_OW 259
29640: PUSH
29641: LD_REAL  1.15000000000000E+0000
29644: MUL
29645: MUL
29646: ST_TO_ADDR
// end ; unit_vehicle :
29647: GO 30475
29649: LD_INT 2
29651: DOUBLE
29652: EQUAL
29653: IFTRUE 29657
29655: GO 30463
29657: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29658: LD_VAR 0 6
29662: PPUSH
29663: CALL_OW 264
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 42
29673: PUSH
29674: LD_INT 24
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: IN
29682: IFFALSE 29703
// points := [ 25 , 5 , 3 ] ;
29684: LD_ADDR_VAR 0 9
29688: PUSH
29689: LD_INT 25
29691: PUSH
29692: LD_INT 5
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29703: LD_VAR 0 6
29707: PPUSH
29708: CALL_OW 264
29712: PUSH
29713: LD_INT 4
29715: PUSH
29716: LD_INT 43
29718: PUSH
29719: LD_INT 25
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: IN
29727: IFFALSE 29748
// points := [ 40 , 15 , 5 ] ;
29729: LD_ADDR_VAR 0 9
29733: PUSH
29734: LD_INT 40
29736: PUSH
29737: LD_INT 15
29739: PUSH
29740: LD_INT 5
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29748: LD_VAR 0 6
29752: PPUSH
29753: CALL_OW 264
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: LD_INT 23
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: IN
29768: IFFALSE 29789
// points := [ 7 , 25 , 8 ] ;
29770: LD_ADDR_VAR 0 9
29774: PUSH
29775: LD_INT 7
29777: PUSH
29778: LD_INT 25
29780: PUSH
29781: LD_INT 8
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29789: LD_VAR 0 6
29793: PPUSH
29794: CALL_OW 264
29798: PUSH
29799: LD_INT 5
29801: PUSH
29802: LD_INT 27
29804: PUSH
29805: LD_INT 44
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: IN
29813: IFFALSE 29834
// points := [ 14 , 50 , 16 ] ;
29815: LD_ADDR_VAR 0 9
29819: PUSH
29820: LD_INT 14
29822: PUSH
29823: LD_INT 50
29825: PUSH
29826: LD_INT 16
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29834: LD_VAR 0 6
29838: PPUSH
29839: CALL_OW 264
29843: PUSH
29844: LD_INT 6
29846: PUSH
29847: LD_INT 46
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: IN
29854: IFFALSE 29875
// points := [ 32 , 120 , 70 ] ;
29856: LD_ADDR_VAR 0 9
29860: PUSH
29861: LD_INT 32
29863: PUSH
29864: LD_INT 120
29866: PUSH
29867: LD_INT 70
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29875: LD_VAR 0 6
29879: PPUSH
29880: CALL_OW 264
29884: PUSH
29885: LD_INT 7
29887: PUSH
29888: LD_INT 28
29890: PUSH
29891: LD_INT 45
29893: PUSH
29894: LD_INT 92
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: IN
29903: IFFALSE 29924
// points := [ 35 , 20 , 45 ] ;
29905: LD_ADDR_VAR 0 9
29909: PUSH
29910: LD_INT 35
29912: PUSH
29913: LD_INT 20
29915: PUSH
29916: LD_INT 45
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: LIST
29923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29924: LD_VAR 0 6
29928: PPUSH
29929: CALL_OW 264
29933: PUSH
29934: LD_INT 47
29936: PUSH
29937: EMPTY
29938: LIST
29939: IN
29940: IFFALSE 29961
// points := [ 67 , 45 , 75 ] ;
29942: LD_ADDR_VAR 0 9
29946: PUSH
29947: LD_INT 67
29949: PUSH
29950: LD_INT 45
29952: PUSH
29953: LD_INT 75
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29961: LD_VAR 0 6
29965: PPUSH
29966: CALL_OW 264
29970: PUSH
29971: LD_INT 26
29973: PUSH
29974: EMPTY
29975: LIST
29976: IN
29977: IFFALSE 29998
// points := [ 120 , 30 , 80 ] ;
29979: LD_ADDR_VAR 0 9
29983: PUSH
29984: LD_INT 120
29986: PUSH
29987: LD_INT 30
29989: PUSH
29990: LD_INT 80
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29998: LD_VAR 0 6
30002: PPUSH
30003: CALL_OW 264
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: EMPTY
30012: LIST
30013: IN
30014: IFFALSE 30035
// points := [ 40 , 1 , 1 ] ;
30016: LD_ADDR_VAR 0 9
30020: PUSH
30021: LD_INT 40
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30035: LD_VAR 0 6
30039: PPUSH
30040: CALL_OW 264
30044: PUSH
30045: LD_INT 29
30047: PUSH
30048: EMPTY
30049: LIST
30050: IN
30051: IFFALSE 30072
// points := [ 70 , 200 , 400 ] ;
30053: LD_ADDR_VAR 0 9
30057: PUSH
30058: LD_INT 70
30060: PUSH
30061: LD_INT 200
30063: PUSH
30064: LD_INT 400
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30072: LD_VAR 0 6
30076: PPUSH
30077: CALL_OW 264
30081: PUSH
30082: LD_INT 14
30084: PUSH
30085: LD_INT 53
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: IN
30092: IFFALSE 30113
// points := [ 40 , 10 , 20 ] ;
30094: LD_ADDR_VAR 0 9
30098: PUSH
30099: LD_INT 40
30101: PUSH
30102: LD_INT 10
30104: PUSH
30105: LD_INT 20
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30113: LD_VAR 0 6
30117: PPUSH
30118: CALL_OW 264
30122: PUSH
30123: LD_INT 9
30125: PUSH
30126: EMPTY
30127: LIST
30128: IN
30129: IFFALSE 30150
// points := [ 5 , 70 , 20 ] ;
30131: LD_ADDR_VAR 0 9
30135: PUSH
30136: LD_INT 5
30138: PUSH
30139: LD_INT 70
30141: PUSH
30142: LD_INT 20
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30150: LD_VAR 0 6
30154: PPUSH
30155: CALL_OW 264
30159: PUSH
30160: LD_INT 10
30162: PUSH
30163: EMPTY
30164: LIST
30165: IN
30166: IFFALSE 30187
// points := [ 35 , 110 , 70 ] ;
30168: LD_ADDR_VAR 0 9
30172: PUSH
30173: LD_INT 35
30175: PUSH
30176: LD_INT 110
30178: PUSH
30179: LD_INT 70
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30187: LD_VAR 0 6
30191: PPUSH
30192: CALL_OW 265
30196: PUSH
30197: LD_INT 25
30199: EQUAL
30200: IFFALSE 30221
// points := [ 80 , 65 , 100 ] ;
30202: LD_ADDR_VAR 0 9
30206: PUSH
30207: LD_INT 80
30209: PUSH
30210: LD_INT 65
30212: PUSH
30213: LD_INT 100
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: LIST
30220: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30221: LD_VAR 0 6
30225: PPUSH
30226: CALL_OW 263
30230: PUSH
30231: LD_INT 1
30233: EQUAL
30234: IFFALSE 30269
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30236: LD_ADDR_VAR 0 10
30240: PUSH
30241: LD_VAR 0 10
30245: PUSH
30246: LD_VAR 0 6
30250: PPUSH
30251: CALL_OW 311
30255: PPUSH
30256: LD_INT 3
30258: PPUSH
30259: CALL_OW 259
30263: PUSH
30264: LD_INT 4
30266: MUL
30267: MUL
30268: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30269: LD_VAR 0 6
30273: PPUSH
30274: CALL_OW 263
30278: PUSH
30279: LD_INT 2
30281: EQUAL
30282: IFFALSE 30333
// begin j := IsControledBy ( i ) ;
30284: LD_ADDR_VAR 0 7
30288: PUSH
30289: LD_VAR 0 6
30293: PPUSH
30294: CALL_OW 312
30298: ST_TO_ADDR
// if j then
30299: LD_VAR 0 7
30303: IFFALSE 30333
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30305: LD_ADDR_VAR 0 10
30309: PUSH
30310: LD_VAR 0 10
30314: PUSH
30315: LD_VAR 0 7
30319: PPUSH
30320: LD_INT 3
30322: PPUSH
30323: CALL_OW 259
30327: PUSH
30328: LD_INT 3
30330: MUL
30331: MUL
30332: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30333: LD_VAR 0 6
30337: PPUSH
30338: CALL_OW 264
30342: PUSH
30343: LD_INT 5
30345: PUSH
30346: LD_INT 6
30348: PUSH
30349: LD_INT 46
30351: PUSH
30352: LD_INT 44
30354: PUSH
30355: LD_INT 47
30357: PUSH
30358: LD_INT 45
30360: PUSH
30361: LD_INT 28
30363: PUSH
30364: LD_INT 7
30366: PUSH
30367: LD_INT 27
30369: PUSH
30370: LD_INT 29
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: IN
30385: PUSH
30386: LD_VAR 0 1
30390: PPUSH
30391: LD_INT 52
30393: PPUSH
30394: CALL_OW 321
30398: PUSH
30399: LD_INT 2
30401: EQUAL
30402: AND
30403: IFFALSE 30420
// bpoints := bpoints * 1.2 ;
30405: LD_ADDR_VAR 0 10
30409: PUSH
30410: LD_VAR 0 10
30414: PUSH
30415: LD_REAL  1.20000000000000E+0000
30418: MUL
30419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30420: LD_VAR 0 6
30424: PPUSH
30425: CALL_OW 264
30429: PUSH
30430: LD_INT 6
30432: PUSH
30433: LD_INT 46
30435: PUSH
30436: LD_INT 47
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: IN
30444: IFFALSE 30461
// bpoints := bpoints * 1.2 ;
30446: LD_ADDR_VAR 0 10
30450: PUSH
30451: LD_VAR 0 10
30455: PUSH
30456: LD_REAL  1.20000000000000E+0000
30459: MUL
30460: ST_TO_ADDR
// end ; unit_building :
30461: GO 30475
30463: LD_INT 3
30465: DOUBLE
30466: EQUAL
30467: IFTRUE 30471
30469: GO 30474
30471: POP
// ; end ;
30472: GO 30475
30474: POP
// for j = 1 to 3 do
30475: LD_ADDR_VAR 0 7
30479: PUSH
30480: DOUBLE
30481: LD_INT 1
30483: DEC
30484: ST_TO_ADDR
30485: LD_INT 3
30487: PUSH
30488: FOR_TO
30489: IFFALSE 30542
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30491: LD_ADDR_VAR 0 5
30495: PUSH
30496: LD_VAR 0 5
30500: PPUSH
30501: LD_VAR 0 7
30505: PPUSH
30506: LD_VAR 0 5
30510: PUSH
30511: LD_VAR 0 7
30515: ARRAY
30516: PUSH
30517: LD_VAR 0 9
30521: PUSH
30522: LD_VAR 0 7
30526: ARRAY
30527: PUSH
30528: LD_VAR 0 10
30532: MUL
30533: PLUS
30534: PPUSH
30535: CALL_OW 1
30539: ST_TO_ADDR
30540: GO 30488
30542: POP
30543: POP
// end ;
30544: GO 29023
30546: POP
30547: POP
// result := Replace ( result , 4 , tmp ) ;
30548: LD_ADDR_VAR 0 5
30552: PUSH
30553: LD_VAR 0 5
30557: PPUSH
30558: LD_INT 4
30560: PPUSH
30561: LD_VAR 0 8
30565: PPUSH
30566: CALL_OW 1
30570: ST_TO_ADDR
// end ;
30571: LD_VAR 0 5
30575: RET
// export function DangerAtRange ( unit , range ) ; begin
30576: LD_INT 0
30578: PPUSH
// if not unit then
30579: LD_VAR 0 1
30583: NOT
30584: IFFALSE 30588
// exit ;
30586: GO 30633
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_VAR 0 1
30597: PPUSH
30598: CALL_OW 255
30602: PPUSH
30603: LD_VAR 0 1
30607: PPUSH
30608: CALL_OW 250
30612: PPUSH
30613: LD_VAR 0 1
30617: PPUSH
30618: CALL_OW 251
30622: PPUSH
30623: LD_VAR 0 2
30627: PPUSH
30628: CALL 28875 0 4
30632: ST_TO_ADDR
// end ;
30633: LD_VAR 0 3
30637: RET
// export function DangerInArea ( side , area ) ; begin
30638: LD_INT 0
30640: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30641: LD_ADDR_VAR 0 3
30645: PUSH
30646: LD_VAR 0 2
30650: PPUSH
30651: LD_INT 81
30653: PUSH
30654: LD_VAR 0 1
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PPUSH
30663: CALL_OW 70
30667: ST_TO_ADDR
// end ;
30668: LD_VAR 0 3
30672: RET
// export function IsExtension ( b ) ; begin
30673: LD_INT 0
30675: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30676: LD_ADDR_VAR 0 2
30680: PUSH
30681: LD_VAR 0 1
30685: PUSH
30686: LD_INT 23
30688: PUSH
30689: LD_INT 20
30691: PUSH
30692: LD_INT 22
30694: PUSH
30695: LD_INT 17
30697: PUSH
30698: LD_INT 24
30700: PUSH
30701: LD_INT 21
30703: PUSH
30704: LD_INT 19
30706: PUSH
30707: LD_INT 16
30709: PUSH
30710: LD_INT 25
30712: PUSH
30713: LD_INT 18
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: IN
30728: ST_TO_ADDR
// end ;
30729: LD_VAR 0 2
30733: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30734: LD_INT 0
30736: PPUSH
30737: PPUSH
30738: PPUSH
// result := [ ] ;
30739: LD_ADDR_VAR 0 4
30743: PUSH
30744: EMPTY
30745: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30746: LD_ADDR_VAR 0 5
30750: PUSH
30751: LD_VAR 0 2
30755: PPUSH
30756: LD_INT 21
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PPUSH
30766: CALL_OW 70
30770: ST_TO_ADDR
// if not tmp then
30771: LD_VAR 0 5
30775: NOT
30776: IFFALSE 30780
// exit ;
30778: GO 30844
// if checkLink then
30780: LD_VAR 0 3
30784: IFFALSE 30834
// begin for i in tmp do
30786: LD_ADDR_VAR 0 6
30790: PUSH
30791: LD_VAR 0 5
30795: PUSH
30796: FOR_IN
30797: IFFALSE 30832
// if GetBase ( i ) <> base then
30799: LD_VAR 0 6
30803: PPUSH
30804: CALL_OW 274
30808: PUSH
30809: LD_VAR 0 1
30813: NONEQUAL
30814: IFFALSE 30830
// ComLinkToBase ( base , i ) ;
30816: LD_VAR 0 1
30820: PPUSH
30821: LD_VAR 0 6
30825: PPUSH
30826: CALL_OW 169
30830: GO 30796
30832: POP
30833: POP
// end ; result := tmp ;
30834: LD_ADDR_VAR 0 4
30838: PUSH
30839: LD_VAR 0 5
30843: ST_TO_ADDR
// end ;
30844: LD_VAR 0 4
30848: RET
// export function ComComplete ( units , b ) ; var i ; begin
30849: LD_INT 0
30851: PPUSH
30852: PPUSH
// if not units then
30853: LD_VAR 0 1
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30952
// for i in units do
30862: LD_ADDR_VAR 0 4
30866: PUSH
30867: LD_VAR 0 1
30871: PUSH
30872: FOR_IN
30873: IFFALSE 30950
// if BuildingStatus ( b ) = bs_build then
30875: LD_VAR 0 2
30879: PPUSH
30880: CALL_OW 461
30884: PUSH
30885: LD_INT 1
30887: EQUAL
30888: IFFALSE 30948
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30890: LD_VAR 0 4
30894: PPUSH
30895: LD_STRING h
30897: PUSH
30898: LD_VAR 0 2
30902: PPUSH
30903: CALL_OW 250
30907: PUSH
30908: LD_VAR 0 2
30912: PPUSH
30913: CALL_OW 251
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: PPUSH
30944: CALL_OW 446
30948: GO 30872
30950: POP
30951: POP
// end ;
30952: LD_VAR 0 3
30956: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30957: LD_INT 0
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30965: LD_VAR 0 1
30969: NOT
30970: PUSH
30971: LD_VAR 0 1
30975: PPUSH
30976: CALL_OW 263
30980: PUSH
30981: LD_INT 2
30983: NONEQUAL
30984: OR
30985: IFFALSE 30989
// exit ;
30987: GO 31305
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30989: LD_ADDR_VAR 0 6
30993: PUSH
30994: LD_INT 22
30996: PUSH
30997: LD_VAR 0 1
31001: PPUSH
31002: CALL_OW 255
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: LD_INT 30
31016: PUSH
31017: LD_INT 36
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 34
31026: PUSH
31027: LD_INT 31
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PPUSH
31043: CALL_OW 69
31047: ST_TO_ADDR
// if not tmp then
31048: LD_VAR 0 6
31052: NOT
31053: IFFALSE 31057
// exit ;
31055: GO 31305
// result := [ ] ;
31057: LD_ADDR_VAR 0 2
31061: PUSH
31062: EMPTY
31063: ST_TO_ADDR
// for i in tmp do
31064: LD_ADDR_VAR 0 3
31068: PUSH
31069: LD_VAR 0 6
31073: PUSH
31074: FOR_IN
31075: IFFALSE 31146
// begin t := UnitsInside ( i ) ;
31077: LD_ADDR_VAR 0 4
31081: PUSH
31082: LD_VAR 0 3
31086: PPUSH
31087: CALL_OW 313
31091: ST_TO_ADDR
// if t then
31092: LD_VAR 0 4
31096: IFFALSE 31144
// for j in t do
31098: LD_ADDR_VAR 0 7
31102: PUSH
31103: LD_VAR 0 4
31107: PUSH
31108: FOR_IN
31109: IFFALSE 31142
// result := Replace ( result , result + 1 , j ) ;
31111: LD_ADDR_VAR 0 2
31115: PUSH
31116: LD_VAR 0 2
31120: PPUSH
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: PLUS
31129: PPUSH
31130: LD_VAR 0 7
31134: PPUSH
31135: CALL_OW 1
31139: ST_TO_ADDR
31140: GO 31108
31142: POP
31143: POP
// end ;
31144: GO 31074
31146: POP
31147: POP
// if not result then
31148: LD_VAR 0 2
31152: NOT
31153: IFFALSE 31157
// exit ;
31155: GO 31305
// mech := result [ 1 ] ;
31157: LD_ADDR_VAR 0 5
31161: PUSH
31162: LD_VAR 0 2
31166: PUSH
31167: LD_INT 1
31169: ARRAY
31170: ST_TO_ADDR
// if result > 1 then
31171: LD_VAR 0 2
31175: PUSH
31176: LD_INT 1
31178: GREATER
31179: IFFALSE 31291
// begin for i = 2 to result do
31181: LD_ADDR_VAR 0 3
31185: PUSH
31186: DOUBLE
31187: LD_INT 2
31189: DEC
31190: ST_TO_ADDR
31191: LD_VAR 0 2
31195: PUSH
31196: FOR_TO
31197: IFFALSE 31289
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31199: LD_ADDR_VAR 0 4
31203: PUSH
31204: LD_VAR 0 2
31208: PUSH
31209: LD_VAR 0 3
31213: ARRAY
31214: PPUSH
31215: LD_INT 3
31217: PPUSH
31218: CALL_OW 259
31222: PUSH
31223: LD_VAR 0 2
31227: PUSH
31228: LD_VAR 0 3
31232: ARRAY
31233: PPUSH
31234: CALL_OW 432
31238: MINUS
31239: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31240: LD_VAR 0 4
31244: PUSH
31245: LD_VAR 0 5
31249: PPUSH
31250: LD_INT 3
31252: PPUSH
31253: CALL_OW 259
31257: PUSH
31258: LD_VAR 0 5
31262: PPUSH
31263: CALL_OW 432
31267: MINUS
31268: GREATEREQUAL
31269: IFFALSE 31287
// mech := result [ i ] ;
31271: LD_ADDR_VAR 0 5
31275: PUSH
31276: LD_VAR 0 2
31280: PUSH
31281: LD_VAR 0 3
31285: ARRAY
31286: ST_TO_ADDR
// end ;
31287: GO 31196
31289: POP
31290: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31291: LD_VAR 0 1
31295: PPUSH
31296: LD_VAR 0 5
31300: PPUSH
31301: CALL_OW 135
// end ;
31305: LD_VAR 0 2
31309: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
// result := [ ] ;
31325: LD_ADDR_VAR 0 7
31329: PUSH
31330: EMPTY
31331: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31332: LD_VAR 0 1
31336: PPUSH
31337: CALL_OW 266
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: IN
31352: NOT
31353: IFFALSE 31357
// exit ;
31355: GO 32991
// if name then
31357: LD_VAR 0 3
31361: IFFALSE 31377
// SetBName ( base_dep , name ) ;
31363: LD_VAR 0 1
31367: PPUSH
31368: LD_VAR 0 3
31372: PPUSH
31373: CALL_OW 500
// base := GetBase ( base_dep ) ;
31377: LD_ADDR_VAR 0 15
31381: PUSH
31382: LD_VAR 0 1
31386: PPUSH
31387: CALL_OW 274
31391: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31392: LD_ADDR_VAR 0 16
31396: PUSH
31397: LD_VAR 0 1
31401: PPUSH
31402: CALL_OW 255
31406: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31407: LD_ADDR_VAR 0 17
31411: PUSH
31412: LD_VAR 0 1
31416: PPUSH
31417: CALL_OW 248
31421: ST_TO_ADDR
// if sources then
31422: LD_VAR 0 5
31426: IFFALSE 31473
// for i = 1 to 3 do
31428: LD_ADDR_VAR 0 8
31432: PUSH
31433: DOUBLE
31434: LD_INT 1
31436: DEC
31437: ST_TO_ADDR
31438: LD_INT 3
31440: PUSH
31441: FOR_TO
31442: IFFALSE 31471
// AddResourceType ( base , i , sources [ i ] ) ;
31444: LD_VAR 0 15
31448: PPUSH
31449: LD_VAR 0 8
31453: PPUSH
31454: LD_VAR 0 5
31458: PUSH
31459: LD_VAR 0 8
31463: ARRAY
31464: PPUSH
31465: CALL_OW 276
31469: GO 31441
31471: POP
31472: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31473: LD_ADDR_VAR 0 18
31477: PUSH
31478: LD_VAR 0 15
31482: PPUSH
31483: LD_VAR 0 2
31487: PPUSH
31488: LD_INT 1
31490: PPUSH
31491: CALL 30734 0 3
31495: ST_TO_ADDR
// InitHc ;
31496: CALL_OW 19
// InitUc ;
31500: CALL_OW 18
// uc_side := side ;
31504: LD_ADDR_OWVAR 20
31508: PUSH
31509: LD_VAR 0 16
31513: ST_TO_ADDR
// uc_nation := nation ;
31514: LD_ADDR_OWVAR 21
31518: PUSH
31519: LD_VAR 0 17
31523: ST_TO_ADDR
// if buildings then
31524: LD_VAR 0 18
31528: IFFALSE 32850
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31530: LD_ADDR_VAR 0 19
31534: PUSH
31535: LD_VAR 0 18
31539: PPUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 30
31545: PUSH
31546: LD_INT 29
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 30
31555: PUSH
31556: LD_INT 30
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: PPUSH
31568: CALL_OW 72
31572: ST_TO_ADDR
// if tmp then
31573: LD_VAR 0 19
31577: IFFALSE 31625
// for i in tmp do
31579: LD_ADDR_VAR 0 8
31583: PUSH
31584: LD_VAR 0 19
31588: PUSH
31589: FOR_IN
31590: IFFALSE 31623
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31592: LD_VAR 0 8
31596: PPUSH
31597: CALL_OW 250
31601: PPUSH
31602: LD_VAR 0 8
31606: PPUSH
31607: CALL_OW 251
31611: PPUSH
31612: LD_VAR 0 16
31616: PPUSH
31617: CALL_OW 441
31621: GO 31589
31623: POP
31624: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31625: LD_VAR 0 18
31629: PPUSH
31630: LD_INT 2
31632: PUSH
31633: LD_INT 30
31635: PUSH
31636: LD_INT 32
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 30
31645: PUSH
31646: LD_INT 33
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: PPUSH
31658: CALL_OW 72
31662: IFFALSE 31750
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31664: LD_ADDR_VAR 0 8
31668: PUSH
31669: LD_VAR 0 18
31673: PPUSH
31674: LD_INT 2
31676: PUSH
31677: LD_INT 30
31679: PUSH
31680: LD_INT 32
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 30
31689: PUSH
31690: LD_INT 33
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: PPUSH
31702: CALL_OW 72
31706: PUSH
31707: FOR_IN
31708: IFFALSE 31748
// begin if not GetBWeapon ( i ) then
31710: LD_VAR 0 8
31714: PPUSH
31715: CALL_OW 269
31719: NOT
31720: IFFALSE 31746
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31722: LD_VAR 0 8
31726: PPUSH
31727: LD_VAR 0 8
31731: PPUSH
31732: LD_VAR 0 2
31736: PPUSH
31737: CALL 32996 0 2
31741: PPUSH
31742: CALL_OW 431
// end ;
31746: GO 31707
31748: POP
31749: POP
// end ; for i = 1 to personel do
31750: LD_ADDR_VAR 0 8
31754: PUSH
31755: DOUBLE
31756: LD_INT 1
31758: DEC
31759: ST_TO_ADDR
31760: LD_VAR 0 6
31764: PUSH
31765: FOR_TO
31766: IFFALSE 32830
// begin if i > 4 then
31768: LD_VAR 0 8
31772: PUSH
31773: LD_INT 4
31775: GREATER
31776: IFFALSE 31780
// break ;
31778: GO 32830
// case i of 1 :
31780: LD_VAR 0 8
31784: PUSH
31785: LD_INT 1
31787: DOUBLE
31788: EQUAL
31789: IFTRUE 31793
31791: GO 31873
31793: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31794: LD_ADDR_VAR 0 12
31798: PUSH
31799: LD_VAR 0 18
31803: PPUSH
31804: LD_INT 22
31806: PUSH
31807: LD_VAR 0 16
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 58
31818: PUSH
31819: EMPTY
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 32
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 30
31837: PUSH
31838: LD_INT 4
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 30
31847: PUSH
31848: LD_INT 5
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: PPUSH
31866: CALL_OW 72
31870: ST_TO_ADDR
31871: GO 32095
31873: LD_INT 2
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31943
31881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31882: LD_ADDR_VAR 0 12
31886: PUSH
31887: LD_VAR 0 18
31891: PPUSH
31892: LD_INT 22
31894: PUSH
31895: LD_VAR 0 16
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 30
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 30
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PPUSH
31936: CALL_OW 72
31940: ST_TO_ADDR
31941: GO 32095
31943: LD_INT 3
31945: DOUBLE
31946: EQUAL
31947: IFTRUE 31951
31949: GO 32013
31951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31952: LD_ADDR_VAR 0 12
31956: PUSH
31957: LD_VAR 0 18
31961: PPUSH
31962: LD_INT 22
31964: PUSH
31965: LD_VAR 0 16
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: LD_INT 30
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 30
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PPUSH
32006: CALL_OW 72
32010: ST_TO_ADDR
32011: GO 32095
32013: LD_INT 4
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32094
32021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32022: LD_ADDR_VAR 0 12
32026: PUSH
32027: LD_VAR 0 18
32031: PPUSH
32032: LD_INT 22
32034: PUSH
32035: LD_VAR 0 16
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 30
32049: PUSH
32050: LD_INT 6
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 30
32059: PUSH
32060: LD_INT 7
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 30
32069: PUSH
32070: LD_INT 8
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PPUSH
32087: CALL_OW 72
32091: ST_TO_ADDR
32092: GO 32095
32094: POP
// if i = 1 then
32095: LD_VAR 0 8
32099: PUSH
32100: LD_INT 1
32102: EQUAL
32103: IFFALSE 32214
// begin tmp := [ ] ;
32105: LD_ADDR_VAR 0 19
32109: PUSH
32110: EMPTY
32111: ST_TO_ADDR
// for j in f do
32112: LD_ADDR_VAR 0 9
32116: PUSH
32117: LD_VAR 0 12
32121: PUSH
32122: FOR_IN
32123: IFFALSE 32196
// if GetBType ( j ) = b_bunker then
32125: LD_VAR 0 9
32129: PPUSH
32130: CALL_OW 266
32134: PUSH
32135: LD_INT 32
32137: EQUAL
32138: IFFALSE 32165
// tmp := Insert ( tmp , 1 , j ) else
32140: LD_ADDR_VAR 0 19
32144: PUSH
32145: LD_VAR 0 19
32149: PPUSH
32150: LD_INT 1
32152: PPUSH
32153: LD_VAR 0 9
32157: PPUSH
32158: CALL_OW 2
32162: ST_TO_ADDR
32163: GO 32194
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32165: LD_ADDR_VAR 0 19
32169: PUSH
32170: LD_VAR 0 19
32174: PPUSH
32175: LD_VAR 0 19
32179: PUSH
32180: LD_INT 1
32182: PLUS
32183: PPUSH
32184: LD_VAR 0 9
32188: PPUSH
32189: CALL_OW 2
32193: ST_TO_ADDR
32194: GO 32122
32196: POP
32197: POP
// if tmp then
32198: LD_VAR 0 19
32202: IFFALSE 32214
// f := tmp ;
32204: LD_ADDR_VAR 0 12
32208: PUSH
32209: LD_VAR 0 19
32213: ST_TO_ADDR
// end ; x := personel [ i ] ;
32214: LD_ADDR_VAR 0 13
32218: PUSH
32219: LD_VAR 0 6
32223: PUSH
32224: LD_VAR 0 8
32228: ARRAY
32229: ST_TO_ADDR
// if x = - 1 then
32230: LD_VAR 0 13
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: EQUAL
32239: IFFALSE 32448
// begin for j in f do
32241: LD_ADDR_VAR 0 9
32245: PUSH
32246: LD_VAR 0 12
32250: PUSH
32251: FOR_IN
32252: IFFALSE 32444
// repeat InitHc ;
32254: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32258: LD_VAR 0 9
32262: PPUSH
32263: CALL_OW 266
32267: PUSH
32268: LD_INT 5
32270: EQUAL
32271: IFFALSE 32341
// begin if UnitsInside ( j ) < 3 then
32273: LD_VAR 0 9
32277: PPUSH
32278: CALL_OW 313
32282: PUSH
32283: LD_INT 3
32285: LESS
32286: IFFALSE 32322
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32288: LD_INT 0
32290: PPUSH
32291: LD_INT 5
32293: PUSH
32294: LD_INT 8
32296: PUSH
32297: LD_INT 9
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: PUSH
32305: LD_VAR 0 17
32309: ARRAY
32310: PPUSH
32311: LD_VAR 0 4
32315: PPUSH
32316: CALL_OW 380
32320: GO 32339
// PrepareHuman ( false , i , skill ) ;
32322: LD_INT 0
32324: PPUSH
32325: LD_VAR 0 8
32329: PPUSH
32330: LD_VAR 0 4
32334: PPUSH
32335: CALL_OW 380
// end else
32339: GO 32358
// PrepareHuman ( false , i , skill ) ;
32341: LD_INT 0
32343: PPUSH
32344: LD_VAR 0 8
32348: PPUSH
32349: LD_VAR 0 4
32353: PPUSH
32354: CALL_OW 380
// un := CreateHuman ;
32358: LD_ADDR_VAR 0 14
32362: PUSH
32363: CALL_OW 44
32367: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32368: LD_ADDR_VAR 0 7
32372: PUSH
32373: LD_VAR 0 7
32377: PPUSH
32378: LD_INT 1
32380: PPUSH
32381: LD_VAR 0 14
32385: PPUSH
32386: CALL_OW 2
32390: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32391: LD_VAR 0 14
32395: PPUSH
32396: LD_VAR 0 9
32400: PPUSH
32401: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32405: LD_VAR 0 9
32409: PPUSH
32410: CALL_OW 313
32414: PUSH
32415: LD_INT 6
32417: EQUAL
32418: PUSH
32419: LD_VAR 0 9
32423: PPUSH
32424: CALL_OW 266
32428: PUSH
32429: LD_INT 32
32431: PUSH
32432: LD_INT 31
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: IN
32439: OR
32440: IFFALSE 32254
32442: GO 32251
32444: POP
32445: POP
// end else
32446: GO 32828
// for j = 1 to x do
32448: LD_ADDR_VAR 0 9
32452: PUSH
32453: DOUBLE
32454: LD_INT 1
32456: DEC
32457: ST_TO_ADDR
32458: LD_VAR 0 13
32462: PUSH
32463: FOR_TO
32464: IFFALSE 32826
// begin InitHc ;
32466: CALL_OW 19
// if not f then
32470: LD_VAR 0 12
32474: NOT
32475: IFFALSE 32564
// begin PrepareHuman ( false , i , skill ) ;
32477: LD_INT 0
32479: PPUSH
32480: LD_VAR 0 8
32484: PPUSH
32485: LD_VAR 0 4
32489: PPUSH
32490: CALL_OW 380
// un := CreateHuman ;
32494: LD_ADDR_VAR 0 14
32498: PUSH
32499: CALL_OW 44
32503: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32504: LD_ADDR_VAR 0 7
32508: PUSH
32509: LD_VAR 0 7
32513: PPUSH
32514: LD_INT 1
32516: PPUSH
32517: LD_VAR 0 14
32521: PPUSH
32522: CALL_OW 2
32526: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32527: LD_VAR 0 14
32531: PPUSH
32532: LD_VAR 0 1
32536: PPUSH
32537: CALL_OW 250
32541: PPUSH
32542: LD_VAR 0 1
32546: PPUSH
32547: CALL_OW 251
32551: PPUSH
32552: LD_INT 10
32554: PPUSH
32555: LD_INT 0
32557: PPUSH
32558: CALL_OW 50
// continue ;
32562: GO 32463
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32564: LD_VAR 0 12
32568: PUSH
32569: LD_INT 1
32571: ARRAY
32572: PPUSH
32573: CALL_OW 313
32577: PUSH
32578: LD_VAR 0 12
32582: PUSH
32583: LD_INT 1
32585: ARRAY
32586: PPUSH
32587: CALL_OW 266
32591: PUSH
32592: LD_INT 32
32594: PUSH
32595: LD_INT 31
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: IN
32602: AND
32603: PUSH
32604: LD_VAR 0 12
32608: PUSH
32609: LD_INT 1
32611: ARRAY
32612: PPUSH
32613: CALL_OW 313
32617: PUSH
32618: LD_INT 6
32620: EQUAL
32621: OR
32622: IFFALSE 32642
// f := Delete ( f , 1 ) ;
32624: LD_ADDR_VAR 0 12
32628: PUSH
32629: LD_VAR 0 12
32633: PPUSH
32634: LD_INT 1
32636: PPUSH
32637: CALL_OW 3
32641: ST_TO_ADDR
// if not f then
32642: LD_VAR 0 12
32646: NOT
32647: IFFALSE 32665
// begin x := x + 2 ;
32649: LD_ADDR_VAR 0 13
32653: PUSH
32654: LD_VAR 0 13
32658: PUSH
32659: LD_INT 2
32661: PLUS
32662: ST_TO_ADDR
// continue ;
32663: GO 32463
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32665: LD_VAR 0 12
32669: PUSH
32670: LD_INT 1
32672: ARRAY
32673: PPUSH
32674: CALL_OW 266
32678: PUSH
32679: LD_INT 5
32681: EQUAL
32682: IFFALSE 32756
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32684: LD_VAR 0 12
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: PPUSH
32693: CALL_OW 313
32697: PUSH
32698: LD_INT 3
32700: LESS
32701: IFFALSE 32737
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32703: LD_INT 0
32705: PPUSH
32706: LD_INT 5
32708: PUSH
32709: LD_INT 8
32711: PUSH
32712: LD_INT 9
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: LD_VAR 0 17
32724: ARRAY
32725: PPUSH
32726: LD_VAR 0 4
32730: PPUSH
32731: CALL_OW 380
32735: GO 32754
// PrepareHuman ( false , i , skill ) ;
32737: LD_INT 0
32739: PPUSH
32740: LD_VAR 0 8
32744: PPUSH
32745: LD_VAR 0 4
32749: PPUSH
32750: CALL_OW 380
// end else
32754: GO 32773
// PrepareHuman ( false , i , skill ) ;
32756: LD_INT 0
32758: PPUSH
32759: LD_VAR 0 8
32763: PPUSH
32764: LD_VAR 0 4
32768: PPUSH
32769: CALL_OW 380
// un := CreateHuman ;
32773: LD_ADDR_VAR 0 14
32777: PUSH
32778: CALL_OW 44
32782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32783: LD_ADDR_VAR 0 7
32787: PUSH
32788: LD_VAR 0 7
32792: PPUSH
32793: LD_INT 1
32795: PPUSH
32796: LD_VAR 0 14
32800: PPUSH
32801: CALL_OW 2
32805: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32806: LD_VAR 0 14
32810: PPUSH
32811: LD_VAR 0 12
32815: PUSH
32816: LD_INT 1
32818: ARRAY
32819: PPUSH
32820: CALL_OW 52
// end ;
32824: GO 32463
32826: POP
32827: POP
// end ;
32828: GO 31765
32830: POP
32831: POP
// result := result ^ buildings ;
32832: LD_ADDR_VAR 0 7
32836: PUSH
32837: LD_VAR 0 7
32841: PUSH
32842: LD_VAR 0 18
32846: ADD
32847: ST_TO_ADDR
// end else
32848: GO 32991
// begin for i = 1 to personel do
32850: LD_ADDR_VAR 0 8
32854: PUSH
32855: DOUBLE
32856: LD_INT 1
32858: DEC
32859: ST_TO_ADDR
32860: LD_VAR 0 6
32864: PUSH
32865: FOR_TO
32866: IFFALSE 32989
// begin if i > 4 then
32868: LD_VAR 0 8
32872: PUSH
32873: LD_INT 4
32875: GREATER
32876: IFFALSE 32880
// break ;
32878: GO 32989
// x := personel [ i ] ;
32880: LD_ADDR_VAR 0 13
32884: PUSH
32885: LD_VAR 0 6
32889: PUSH
32890: LD_VAR 0 8
32894: ARRAY
32895: ST_TO_ADDR
// if x = - 1 then
32896: LD_VAR 0 13
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: EQUAL
32905: IFFALSE 32909
// continue ;
32907: GO 32865
// PrepareHuman ( false , i , skill ) ;
32909: LD_INT 0
32911: PPUSH
32912: LD_VAR 0 8
32916: PPUSH
32917: LD_VAR 0 4
32921: PPUSH
32922: CALL_OW 380
// un := CreateHuman ;
32926: LD_ADDR_VAR 0 14
32930: PUSH
32931: CALL_OW 44
32935: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32936: LD_VAR 0 14
32940: PPUSH
32941: LD_VAR 0 1
32945: PPUSH
32946: CALL_OW 250
32950: PPUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 251
32960: PPUSH
32961: LD_INT 10
32963: PPUSH
32964: LD_INT 0
32966: PPUSH
32967: CALL_OW 50
// result := result ^ un ;
32971: LD_ADDR_VAR 0 7
32975: PUSH
32976: LD_VAR 0 7
32980: PUSH
32981: LD_VAR 0 14
32985: ADD
32986: ST_TO_ADDR
// end ;
32987: GO 32865
32989: POP
32990: POP
// end ; end ;
32991: LD_VAR 0 7
32995: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32996: LD_INT 0
32998: PPUSH
32999: PPUSH
33000: PPUSH
33001: PPUSH
33002: PPUSH
33003: PPUSH
33004: PPUSH
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
// result := false ;
33014: LD_ADDR_VAR 0 3
33018: PUSH
33019: LD_INT 0
33021: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33022: LD_VAR 0 1
33026: NOT
33027: PUSH
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 266
33037: PUSH
33038: LD_INT 32
33040: PUSH
33041: LD_INT 33
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: IN
33048: NOT
33049: OR
33050: IFFALSE 33054
// exit ;
33052: GO 34163
// nat := GetNation ( tower ) ;
33054: LD_ADDR_VAR 0 12
33058: PUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 248
33068: ST_TO_ADDR
// side := GetSide ( tower ) ;
33069: LD_ADDR_VAR 0 16
33073: PUSH
33074: LD_VAR 0 1
33078: PPUSH
33079: CALL_OW 255
33083: ST_TO_ADDR
// x := GetX ( tower ) ;
33084: LD_ADDR_VAR 0 10
33088: PUSH
33089: LD_VAR 0 1
33093: PPUSH
33094: CALL_OW 250
33098: ST_TO_ADDR
// y := GetY ( tower ) ;
33099: LD_ADDR_VAR 0 11
33103: PUSH
33104: LD_VAR 0 1
33108: PPUSH
33109: CALL_OW 251
33113: ST_TO_ADDR
// if not x or not y then
33114: LD_VAR 0 10
33118: NOT
33119: PUSH
33120: LD_VAR 0 11
33124: NOT
33125: OR
33126: IFFALSE 33130
// exit ;
33128: GO 34163
// weapon := 0 ;
33130: LD_ADDR_VAR 0 18
33134: PUSH
33135: LD_INT 0
33137: ST_TO_ADDR
// fac_list := [ ] ;
33138: LD_ADDR_VAR 0 17
33142: PUSH
33143: EMPTY
33144: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33145: LD_ADDR_VAR 0 6
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: CALL_OW 274
33159: PPUSH
33160: LD_VAR 0 2
33164: PPUSH
33165: LD_INT 0
33167: PPUSH
33168: CALL 30734 0 3
33172: PPUSH
33173: LD_INT 30
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PPUSH
33183: CALL_OW 72
33187: ST_TO_ADDR
// if not factories then
33188: LD_VAR 0 6
33192: NOT
33193: IFFALSE 33197
// exit ;
33195: GO 34163
// for i in factories do
33197: LD_ADDR_VAR 0 8
33201: PUSH
33202: LD_VAR 0 6
33206: PUSH
33207: FOR_IN
33208: IFFALSE 33233
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33210: LD_ADDR_VAR 0 17
33214: PUSH
33215: LD_VAR 0 17
33219: PUSH
33220: LD_VAR 0 8
33224: PPUSH
33225: CALL_OW 478
33229: UNION
33230: ST_TO_ADDR
33231: GO 33207
33233: POP
33234: POP
// if not fac_list then
33235: LD_VAR 0 17
33239: NOT
33240: IFFALSE 33244
// exit ;
33242: GO 34163
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33244: LD_ADDR_VAR 0 5
33248: PUSH
33249: LD_INT 4
33251: PUSH
33252: LD_INT 5
33254: PUSH
33255: LD_INT 9
33257: PUSH
33258: LD_INT 10
33260: PUSH
33261: LD_INT 6
33263: PUSH
33264: LD_INT 7
33266: PUSH
33267: LD_INT 11
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 27
33281: PUSH
33282: LD_INT 28
33284: PUSH
33285: LD_INT 26
33287: PUSH
33288: LD_INT 30
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 43
33299: PUSH
33300: LD_INT 44
33302: PUSH
33303: LD_INT 46
33305: PUSH
33306: LD_INT 45
33308: PUSH
33309: LD_INT 47
33311: PUSH
33312: LD_INT 49
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: PUSH
33328: LD_VAR 0 12
33332: ARRAY
33333: ST_TO_ADDR
// list := list isect fac_list ;
33334: LD_ADDR_VAR 0 5
33338: PUSH
33339: LD_VAR 0 5
33343: PUSH
33344: LD_VAR 0 17
33348: ISECT
33349: ST_TO_ADDR
// if not list then
33350: LD_VAR 0 5
33354: NOT
33355: IFFALSE 33359
// exit ;
33357: GO 34163
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33359: LD_VAR 0 12
33363: PUSH
33364: LD_INT 3
33366: EQUAL
33367: PUSH
33368: LD_INT 49
33370: PUSH
33371: LD_VAR 0 5
33375: IN
33376: AND
33377: PUSH
33378: LD_INT 31
33380: PPUSH
33381: LD_VAR 0 16
33385: PPUSH
33386: CALL_OW 321
33390: PUSH
33391: LD_INT 2
33393: EQUAL
33394: AND
33395: IFFALSE 33455
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33397: LD_INT 22
33399: PUSH
33400: LD_VAR 0 16
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 35
33411: PUSH
33412: LD_INT 49
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 91
33421: PUSH
33422: LD_VAR 0 1
33426: PUSH
33427: LD_INT 10
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: PPUSH
33440: CALL_OW 69
33444: NOT
33445: IFFALSE 33455
// weapon := ru_time_lapser ;
33447: LD_ADDR_VAR 0 18
33451: PUSH
33452: LD_INT 49
33454: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33455: LD_VAR 0 12
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: IN
33470: PUSH
33471: LD_INT 11
33473: PUSH
33474: LD_VAR 0 5
33478: IN
33479: PUSH
33480: LD_INT 30
33482: PUSH
33483: LD_VAR 0 5
33487: IN
33488: OR
33489: AND
33490: PUSH
33491: LD_INT 6
33493: PPUSH
33494: LD_VAR 0 16
33498: PPUSH
33499: CALL_OW 321
33503: PUSH
33504: LD_INT 2
33506: EQUAL
33507: AND
33508: IFFALSE 33673
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33510: LD_INT 22
33512: PUSH
33513: LD_VAR 0 16
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 35
33527: PUSH
33528: LD_INT 11
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 35
33537: PUSH
33538: LD_INT 30
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 91
33552: PUSH
33553: LD_VAR 0 1
33557: PUSH
33558: LD_INT 18
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: LIST
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: PPUSH
33571: CALL_OW 69
33575: NOT
33576: PUSH
33577: LD_INT 22
33579: PUSH
33580: LD_VAR 0 16
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: LD_INT 30
33594: PUSH
33595: LD_INT 32
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 30
33604: PUSH
33605: LD_INT 33
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 91
33619: PUSH
33620: LD_VAR 0 1
33624: PUSH
33625: LD_INT 12
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: PUSH
33638: EMPTY
33639: LIST
33640: PPUSH
33641: CALL_OW 69
33645: PUSH
33646: LD_INT 2
33648: GREATER
33649: AND
33650: IFFALSE 33673
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33652: LD_ADDR_VAR 0 18
33656: PUSH
33657: LD_INT 11
33659: PUSH
33660: LD_INT 30
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_VAR 0 12
33671: ARRAY
33672: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33673: LD_VAR 0 18
33677: NOT
33678: PUSH
33679: LD_INT 40
33681: PPUSH
33682: LD_VAR 0 16
33686: PPUSH
33687: CALL_OW 321
33691: PUSH
33692: LD_INT 2
33694: EQUAL
33695: AND
33696: PUSH
33697: LD_INT 7
33699: PUSH
33700: LD_VAR 0 5
33704: IN
33705: PUSH
33706: LD_INT 28
33708: PUSH
33709: LD_VAR 0 5
33713: IN
33714: OR
33715: PUSH
33716: LD_INT 45
33718: PUSH
33719: LD_VAR 0 5
33723: IN
33724: OR
33725: AND
33726: IFFALSE 33980
// begin hex := GetHexInfo ( x , y ) ;
33728: LD_ADDR_VAR 0 4
33732: PUSH
33733: LD_VAR 0 10
33737: PPUSH
33738: LD_VAR 0 11
33742: PPUSH
33743: CALL_OW 546
33747: ST_TO_ADDR
// if hex [ 1 ] then
33748: LD_VAR 0 4
33752: PUSH
33753: LD_INT 1
33755: ARRAY
33756: IFFALSE 33760
// exit ;
33758: GO 34163
// height := hex [ 2 ] ;
33760: LD_ADDR_VAR 0 15
33764: PUSH
33765: LD_VAR 0 4
33769: PUSH
33770: LD_INT 2
33772: ARRAY
33773: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33774: LD_ADDR_VAR 0 14
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: LD_INT 5
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: ST_TO_ADDR
// for i in tmp do
33797: LD_ADDR_VAR 0 8
33801: PUSH
33802: LD_VAR 0 14
33806: PUSH
33807: FOR_IN
33808: IFFALSE 33978
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33810: LD_ADDR_VAR 0 9
33814: PUSH
33815: LD_VAR 0 10
33819: PPUSH
33820: LD_VAR 0 8
33824: PPUSH
33825: LD_INT 5
33827: PPUSH
33828: CALL_OW 272
33832: PUSH
33833: LD_VAR 0 11
33837: PPUSH
33838: LD_VAR 0 8
33842: PPUSH
33843: LD_INT 5
33845: PPUSH
33846: CALL_OW 273
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33855: LD_VAR 0 9
33859: PUSH
33860: LD_INT 1
33862: ARRAY
33863: PPUSH
33864: LD_VAR 0 9
33868: PUSH
33869: LD_INT 2
33871: ARRAY
33872: PPUSH
33873: CALL_OW 488
33877: IFFALSE 33976
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33879: LD_ADDR_VAR 0 4
33883: PUSH
33884: LD_VAR 0 9
33888: PUSH
33889: LD_INT 1
33891: ARRAY
33892: PPUSH
33893: LD_VAR 0 9
33897: PUSH
33898: LD_INT 2
33900: ARRAY
33901: PPUSH
33902: CALL_OW 546
33906: ST_TO_ADDR
// if hex [ 1 ] then
33907: LD_VAR 0 4
33911: PUSH
33912: LD_INT 1
33914: ARRAY
33915: IFFALSE 33919
// continue ;
33917: GO 33807
// h := hex [ 2 ] ;
33919: LD_ADDR_VAR 0 13
33923: PUSH
33924: LD_VAR 0 4
33928: PUSH
33929: LD_INT 2
33931: ARRAY
33932: ST_TO_ADDR
// if h + 7 < height then
33933: LD_VAR 0 13
33937: PUSH
33938: LD_INT 7
33940: PLUS
33941: PUSH
33942: LD_VAR 0 15
33946: LESS
33947: IFFALSE 33976
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33949: LD_ADDR_VAR 0 18
33953: PUSH
33954: LD_INT 7
33956: PUSH
33957: LD_INT 28
33959: PUSH
33960: LD_INT 45
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: PUSH
33968: LD_VAR 0 12
33972: ARRAY
33973: ST_TO_ADDR
// break ;
33974: GO 33978
// end ; end ; end ;
33976: GO 33807
33978: POP
33979: POP
// end ; if not weapon then
33980: LD_VAR 0 18
33984: NOT
33985: IFFALSE 34045
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33987: LD_ADDR_VAR 0 5
33991: PUSH
33992: LD_VAR 0 5
33996: PUSH
33997: LD_INT 11
33999: PUSH
34000: LD_INT 30
34002: PUSH
34003: LD_INT 49
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: DIFF
34011: ST_TO_ADDR
// if not list then
34012: LD_VAR 0 5
34016: NOT
34017: IFFALSE 34021
// exit ;
34019: GO 34163
// weapon := list [ rand ( 1 , list ) ] ;
34021: LD_ADDR_VAR 0 18
34025: PUSH
34026: LD_VAR 0 5
34030: PUSH
34031: LD_INT 1
34033: PPUSH
34034: LD_VAR 0 5
34038: PPUSH
34039: CALL_OW 12
34043: ARRAY
34044: ST_TO_ADDR
// end ; if weapon then
34045: LD_VAR 0 18
34049: IFFALSE 34163
// begin tmp := CostOfWeapon ( weapon ) ;
34051: LD_ADDR_VAR 0 14
34055: PUSH
34056: LD_VAR 0 18
34060: PPUSH
34061: CALL_OW 451
34065: ST_TO_ADDR
// j := GetBase ( tower ) ;
34066: LD_ADDR_VAR 0 9
34070: PUSH
34071: LD_VAR 0 1
34075: PPUSH
34076: CALL_OW 274
34080: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34081: LD_VAR 0 9
34085: PPUSH
34086: LD_INT 1
34088: PPUSH
34089: CALL_OW 275
34093: PUSH
34094: LD_VAR 0 14
34098: PUSH
34099: LD_INT 1
34101: ARRAY
34102: GREATEREQUAL
34103: PUSH
34104: LD_VAR 0 9
34108: PPUSH
34109: LD_INT 2
34111: PPUSH
34112: CALL_OW 275
34116: PUSH
34117: LD_VAR 0 14
34121: PUSH
34122: LD_INT 2
34124: ARRAY
34125: GREATEREQUAL
34126: AND
34127: PUSH
34128: LD_VAR 0 9
34132: PPUSH
34133: LD_INT 3
34135: PPUSH
34136: CALL_OW 275
34140: PUSH
34141: LD_VAR 0 14
34145: PUSH
34146: LD_INT 3
34148: ARRAY
34149: GREATEREQUAL
34150: AND
34151: IFFALSE 34163
// result := weapon ;
34153: LD_ADDR_VAR 0 3
34157: PUSH
34158: LD_VAR 0 18
34162: ST_TO_ADDR
// end ; end ;
34163: LD_VAR 0 3
34167: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34168: LD_INT 0
34170: PPUSH
34171: PPUSH
// result := true ;
34172: LD_ADDR_VAR 0 3
34176: PUSH
34177: LD_INT 1
34179: ST_TO_ADDR
// if array1 = array2 then
34180: LD_VAR 0 1
34184: PUSH
34185: LD_VAR 0 2
34189: EQUAL
34190: IFFALSE 34250
// begin for i = 1 to array1 do
34192: LD_ADDR_VAR 0 4
34196: PUSH
34197: DOUBLE
34198: LD_INT 1
34200: DEC
34201: ST_TO_ADDR
34202: LD_VAR 0 1
34206: PUSH
34207: FOR_TO
34208: IFFALSE 34246
// if array1 [ i ] <> array2 [ i ] then
34210: LD_VAR 0 1
34214: PUSH
34215: LD_VAR 0 4
34219: ARRAY
34220: PUSH
34221: LD_VAR 0 2
34225: PUSH
34226: LD_VAR 0 4
34230: ARRAY
34231: NONEQUAL
34232: IFFALSE 34244
// begin result := false ;
34234: LD_ADDR_VAR 0 3
34238: PUSH
34239: LD_INT 0
34241: ST_TO_ADDR
// break ;
34242: GO 34246
// end ;
34244: GO 34207
34246: POP
34247: POP
// end else
34248: GO 34258
// result := false ;
34250: LD_ADDR_VAR 0 3
34254: PUSH
34255: LD_INT 0
34257: ST_TO_ADDR
// end ;
34258: LD_VAR 0 3
34262: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34263: LD_INT 0
34265: PPUSH
34266: PPUSH
// if not array1 or not array2 then
34267: LD_VAR 0 1
34271: NOT
34272: PUSH
34273: LD_VAR 0 2
34277: NOT
34278: OR
34279: IFFALSE 34283
// exit ;
34281: GO 34347
// result := true ;
34283: LD_ADDR_VAR 0 3
34287: PUSH
34288: LD_INT 1
34290: ST_TO_ADDR
// for i = 1 to array1 do
34291: LD_ADDR_VAR 0 4
34295: PUSH
34296: DOUBLE
34297: LD_INT 1
34299: DEC
34300: ST_TO_ADDR
34301: LD_VAR 0 1
34305: PUSH
34306: FOR_TO
34307: IFFALSE 34345
// if array1 [ i ] <> array2 [ i ] then
34309: LD_VAR 0 1
34313: PUSH
34314: LD_VAR 0 4
34318: ARRAY
34319: PUSH
34320: LD_VAR 0 2
34324: PUSH
34325: LD_VAR 0 4
34329: ARRAY
34330: NONEQUAL
34331: IFFALSE 34343
// begin result := false ;
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_INT 0
34340: ST_TO_ADDR
// break ;
34341: GO 34345
// end ;
34343: GO 34306
34345: POP
34346: POP
// end ;
34347: LD_VAR 0 3
34351: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34352: LD_INT 0
34354: PPUSH
34355: PPUSH
34356: PPUSH
// pom := GetBase ( fac ) ;
34357: LD_ADDR_VAR 0 5
34361: PUSH
34362: LD_VAR 0 1
34366: PPUSH
34367: CALL_OW 274
34371: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34372: LD_ADDR_VAR 0 4
34376: PUSH
34377: LD_VAR 0 2
34381: PUSH
34382: LD_INT 1
34384: ARRAY
34385: PPUSH
34386: LD_VAR 0 2
34390: PUSH
34391: LD_INT 2
34393: ARRAY
34394: PPUSH
34395: LD_VAR 0 2
34399: PUSH
34400: LD_INT 3
34402: ARRAY
34403: PPUSH
34404: LD_VAR 0 2
34408: PUSH
34409: LD_INT 4
34411: ARRAY
34412: PPUSH
34413: CALL_OW 449
34417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34418: LD_ADDR_VAR 0 3
34422: PUSH
34423: LD_VAR 0 5
34427: PPUSH
34428: LD_INT 1
34430: PPUSH
34431: CALL_OW 275
34435: PUSH
34436: LD_VAR 0 4
34440: PUSH
34441: LD_INT 1
34443: ARRAY
34444: GREATEREQUAL
34445: PUSH
34446: LD_VAR 0 5
34450: PPUSH
34451: LD_INT 2
34453: PPUSH
34454: CALL_OW 275
34458: PUSH
34459: LD_VAR 0 4
34463: PUSH
34464: LD_INT 2
34466: ARRAY
34467: GREATEREQUAL
34468: AND
34469: PUSH
34470: LD_VAR 0 5
34474: PPUSH
34475: LD_INT 3
34477: PPUSH
34478: CALL_OW 275
34482: PUSH
34483: LD_VAR 0 4
34487: PUSH
34488: LD_INT 3
34490: ARRAY
34491: GREATEREQUAL
34492: AND
34493: ST_TO_ADDR
// end ;
34494: LD_VAR 0 3
34498: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34499: LD_INT 0
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
// pom := GetBase ( building ) ;
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_VAR 0 1
34514: PPUSH
34515: CALL_OW 274
34519: ST_TO_ADDR
// if not pom then
34520: LD_VAR 0 3
34524: NOT
34525: IFFALSE 34529
// exit ;
34527: GO 34699
// btype := GetBType ( building ) ;
34529: LD_ADDR_VAR 0 5
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: CALL_OW 266
34543: ST_TO_ADDR
// if btype = b_armoury then
34544: LD_VAR 0 5
34548: PUSH
34549: LD_INT 4
34551: EQUAL
34552: IFFALSE 34562
// btype := b_barracks ;
34554: LD_ADDR_VAR 0 5
34558: PUSH
34559: LD_INT 5
34561: ST_TO_ADDR
// if btype = b_depot then
34562: LD_VAR 0 5
34566: PUSH
34567: LD_INT 0
34569: EQUAL
34570: IFFALSE 34580
// btype := b_warehouse ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_INT 1
34579: ST_TO_ADDR
// if btype = b_workshop then
34580: LD_VAR 0 5
34584: PUSH
34585: LD_INT 2
34587: EQUAL
34588: IFFALSE 34598
// btype := b_factory ;
34590: LD_ADDR_VAR 0 5
34594: PUSH
34595: LD_INT 3
34597: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34598: LD_ADDR_VAR 0 4
34602: PUSH
34603: LD_VAR 0 5
34607: PPUSH
34608: LD_VAR 0 1
34612: PPUSH
34613: CALL_OW 248
34617: PPUSH
34618: CALL_OW 450
34622: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34623: LD_ADDR_VAR 0 2
34627: PUSH
34628: LD_VAR 0 3
34632: PPUSH
34633: LD_INT 1
34635: PPUSH
34636: CALL_OW 275
34640: PUSH
34641: LD_VAR 0 4
34645: PUSH
34646: LD_INT 1
34648: ARRAY
34649: GREATEREQUAL
34650: PUSH
34651: LD_VAR 0 3
34655: PPUSH
34656: LD_INT 2
34658: PPUSH
34659: CALL_OW 275
34663: PUSH
34664: LD_VAR 0 4
34668: PUSH
34669: LD_INT 2
34671: ARRAY
34672: GREATEREQUAL
34673: AND
34674: PUSH
34675: LD_VAR 0 3
34679: PPUSH
34680: LD_INT 3
34682: PPUSH
34683: CALL_OW 275
34687: PUSH
34688: LD_VAR 0 4
34692: PUSH
34693: LD_INT 3
34695: ARRAY
34696: GREATEREQUAL
34697: AND
34698: ST_TO_ADDR
// end ;
34699: LD_VAR 0 2
34703: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34704: LD_INT 0
34706: PPUSH
34707: PPUSH
34708: PPUSH
// pom := GetBase ( building ) ;
34709: LD_ADDR_VAR 0 4
34713: PUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: CALL_OW 274
34723: ST_TO_ADDR
// if not pom then
34724: LD_VAR 0 4
34728: NOT
34729: IFFALSE 34733
// exit ;
34731: GO 34834
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34733: LD_ADDR_VAR 0 5
34737: PUSH
34738: LD_VAR 0 2
34742: PPUSH
34743: LD_VAR 0 1
34747: PPUSH
34748: CALL_OW 248
34752: PPUSH
34753: CALL_OW 450
34757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34758: LD_ADDR_VAR 0 3
34762: PUSH
34763: LD_VAR 0 4
34767: PPUSH
34768: LD_INT 1
34770: PPUSH
34771: CALL_OW 275
34775: PUSH
34776: LD_VAR 0 5
34780: PUSH
34781: LD_INT 1
34783: ARRAY
34784: GREATEREQUAL
34785: PUSH
34786: LD_VAR 0 4
34790: PPUSH
34791: LD_INT 2
34793: PPUSH
34794: CALL_OW 275
34798: PUSH
34799: LD_VAR 0 5
34803: PUSH
34804: LD_INT 2
34806: ARRAY
34807: GREATEREQUAL
34808: AND
34809: PUSH
34810: LD_VAR 0 4
34814: PPUSH
34815: LD_INT 3
34817: PPUSH
34818: CALL_OW 275
34822: PUSH
34823: LD_VAR 0 5
34827: PUSH
34828: LD_INT 3
34830: ARRAY
34831: GREATEREQUAL
34832: AND
34833: ST_TO_ADDR
// end ;
34834: LD_VAR 0 3
34838: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34839: LD_INT 0
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
34851: PPUSH
// result := false ;
34852: LD_ADDR_VAR 0 8
34856: PUSH
34857: LD_INT 0
34859: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34860: LD_VAR 0 5
34864: NOT
34865: PUSH
34866: LD_VAR 0 1
34870: NOT
34871: OR
34872: PUSH
34873: LD_VAR 0 2
34877: NOT
34878: OR
34879: PUSH
34880: LD_VAR 0 3
34884: NOT
34885: OR
34886: IFFALSE 34890
// exit ;
34888: GO 35704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34890: LD_ADDR_VAR 0 14
34894: PUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: LD_VAR 0 2
34904: PPUSH
34905: LD_VAR 0 3
34909: PPUSH
34910: LD_VAR 0 4
34914: PPUSH
34915: LD_VAR 0 5
34919: PUSH
34920: LD_INT 1
34922: ARRAY
34923: PPUSH
34924: CALL_OW 248
34928: PPUSH
34929: LD_INT 0
34931: PPUSH
34932: CALL 36957 0 6
34936: ST_TO_ADDR
// if not hexes then
34937: LD_VAR 0 14
34941: NOT
34942: IFFALSE 34946
// exit ;
34944: GO 35704
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34946: LD_ADDR_VAR 0 17
34950: PUSH
34951: LD_VAR 0 5
34955: PPUSH
34956: LD_INT 22
34958: PUSH
34959: LD_VAR 0 13
34963: PPUSH
34964: CALL_OW 255
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: LD_INT 30
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 30
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PPUSH
35005: CALL_OW 72
35009: ST_TO_ADDR
// for i = 1 to hexes do
35010: LD_ADDR_VAR 0 9
35014: PUSH
35015: DOUBLE
35016: LD_INT 1
35018: DEC
35019: ST_TO_ADDR
35020: LD_VAR 0 14
35024: PUSH
35025: FOR_TO
35026: IFFALSE 35702
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35028: LD_ADDR_VAR 0 13
35032: PUSH
35033: LD_VAR 0 14
35037: PUSH
35038: LD_VAR 0 9
35042: ARRAY
35043: PUSH
35044: LD_INT 1
35046: ARRAY
35047: PPUSH
35048: LD_VAR 0 14
35052: PUSH
35053: LD_VAR 0 9
35057: ARRAY
35058: PUSH
35059: LD_INT 2
35061: ARRAY
35062: PPUSH
35063: CALL_OW 428
35067: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35068: LD_VAR 0 14
35072: PUSH
35073: LD_VAR 0 9
35077: ARRAY
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PPUSH
35083: LD_VAR 0 14
35087: PUSH
35088: LD_VAR 0 9
35092: ARRAY
35093: PUSH
35094: LD_INT 2
35096: ARRAY
35097: PPUSH
35098: CALL_OW 351
35102: PUSH
35103: LD_VAR 0 14
35107: PUSH
35108: LD_VAR 0 9
35112: ARRAY
35113: PUSH
35114: LD_INT 1
35116: ARRAY
35117: PPUSH
35118: LD_VAR 0 14
35122: PUSH
35123: LD_VAR 0 9
35127: ARRAY
35128: PUSH
35129: LD_INT 2
35131: ARRAY
35132: PPUSH
35133: CALL_OW 488
35137: NOT
35138: OR
35139: PUSH
35140: LD_VAR 0 13
35144: PPUSH
35145: CALL_OW 247
35149: PUSH
35150: LD_INT 3
35152: EQUAL
35153: OR
35154: IFFALSE 35160
// exit ;
35156: POP
35157: POP
35158: GO 35704
// if not tmp then
35160: LD_VAR 0 13
35164: NOT
35165: IFFALSE 35169
// continue ;
35167: GO 35025
// result := true ;
35169: LD_ADDR_VAR 0 8
35173: PUSH
35174: LD_INT 1
35176: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35177: LD_VAR 0 6
35181: PUSH
35182: LD_VAR 0 13
35186: PPUSH
35187: CALL_OW 247
35191: PUSH
35192: LD_INT 2
35194: EQUAL
35195: AND
35196: PUSH
35197: LD_VAR 0 13
35201: PPUSH
35202: CALL_OW 263
35206: PUSH
35207: LD_INT 1
35209: EQUAL
35210: AND
35211: IFFALSE 35375
// begin if IsDrivenBy ( tmp ) then
35213: LD_VAR 0 13
35217: PPUSH
35218: CALL_OW 311
35222: IFFALSE 35226
// continue ;
35224: GO 35025
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35226: LD_VAR 0 6
35230: PPUSH
35231: LD_INT 3
35233: PUSH
35234: LD_INT 60
35236: PUSH
35237: EMPTY
35238: LIST
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: PUSH
35247: LD_INT 55
35249: PUSH
35250: EMPTY
35251: LIST
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PPUSH
35261: CALL_OW 72
35265: IFFALSE 35373
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35267: LD_ADDR_VAR 0 18
35271: PUSH
35272: LD_VAR 0 6
35276: PPUSH
35277: LD_INT 3
35279: PUSH
35280: LD_INT 60
35282: PUSH
35283: EMPTY
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: LD_INT 55
35295: PUSH
35296: EMPTY
35297: LIST
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PPUSH
35307: CALL_OW 72
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: ST_TO_ADDR
// if IsInUnit ( driver ) then
35316: LD_VAR 0 18
35320: PPUSH
35321: CALL_OW 310
35325: IFFALSE 35336
// ComExit ( driver ) ;
35327: LD_VAR 0 18
35331: PPUSH
35332: CALL 60758 0 1
// AddComEnterUnit ( driver , tmp ) ;
35336: LD_VAR 0 18
35340: PPUSH
35341: LD_VAR 0 13
35345: PPUSH
35346: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35350: LD_VAR 0 18
35354: PPUSH
35355: LD_VAR 0 7
35359: PPUSH
35360: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35364: LD_VAR 0 18
35368: PPUSH
35369: CALL_OW 181
// end ; continue ;
35373: GO 35025
// end ; if not cleaners or not tmp in cleaners then
35375: LD_VAR 0 6
35379: NOT
35380: PUSH
35381: LD_VAR 0 13
35385: PUSH
35386: LD_VAR 0 6
35390: IN
35391: NOT
35392: OR
35393: IFFALSE 35700
// begin if dep then
35395: LD_VAR 0 17
35399: IFFALSE 35535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35401: LD_ADDR_VAR 0 16
35405: PUSH
35406: LD_VAR 0 17
35410: PUSH
35411: LD_INT 1
35413: ARRAY
35414: PPUSH
35415: CALL_OW 250
35419: PPUSH
35420: LD_VAR 0 17
35424: PUSH
35425: LD_INT 1
35427: ARRAY
35428: PPUSH
35429: CALL_OW 254
35433: PPUSH
35434: LD_INT 5
35436: PPUSH
35437: CALL_OW 272
35441: PUSH
35442: LD_VAR 0 17
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: PPUSH
35451: CALL_OW 251
35455: PPUSH
35456: LD_VAR 0 17
35460: PUSH
35461: LD_INT 1
35463: ARRAY
35464: PPUSH
35465: CALL_OW 254
35469: PPUSH
35470: LD_INT 5
35472: PPUSH
35473: CALL_OW 273
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35482: LD_VAR 0 16
35486: PUSH
35487: LD_INT 1
35489: ARRAY
35490: PPUSH
35491: LD_VAR 0 16
35495: PUSH
35496: LD_INT 2
35498: ARRAY
35499: PPUSH
35500: CALL_OW 488
35504: IFFALSE 35535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35506: LD_VAR 0 13
35510: PPUSH
35511: LD_VAR 0 16
35515: PUSH
35516: LD_INT 1
35518: ARRAY
35519: PPUSH
35520: LD_VAR 0 16
35524: PUSH
35525: LD_INT 2
35527: ARRAY
35528: PPUSH
35529: CALL_OW 111
// continue ;
35533: GO 35025
// end ; end ; r := GetDir ( tmp ) ;
35535: LD_ADDR_VAR 0 15
35539: PUSH
35540: LD_VAR 0 13
35544: PPUSH
35545: CALL_OW 254
35549: ST_TO_ADDR
// if r = 5 then
35550: LD_VAR 0 15
35554: PUSH
35555: LD_INT 5
35557: EQUAL
35558: IFFALSE 35568
// r := 0 ;
35560: LD_ADDR_VAR 0 15
35564: PUSH
35565: LD_INT 0
35567: ST_TO_ADDR
// for j = r to 5 do
35568: LD_ADDR_VAR 0 10
35572: PUSH
35573: DOUBLE
35574: LD_VAR 0 15
35578: DEC
35579: ST_TO_ADDR
35580: LD_INT 5
35582: PUSH
35583: FOR_TO
35584: IFFALSE 35698
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35586: LD_ADDR_VAR 0 11
35590: PUSH
35591: LD_VAR 0 13
35595: PPUSH
35596: CALL_OW 250
35600: PPUSH
35601: LD_VAR 0 10
35605: PPUSH
35606: LD_INT 2
35608: PPUSH
35609: CALL_OW 272
35613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35614: LD_ADDR_VAR 0 12
35618: PUSH
35619: LD_VAR 0 13
35623: PPUSH
35624: CALL_OW 251
35628: PPUSH
35629: LD_VAR 0 10
35633: PPUSH
35634: LD_INT 2
35636: PPUSH
35637: CALL_OW 273
35641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35642: LD_VAR 0 11
35646: PPUSH
35647: LD_VAR 0 12
35651: PPUSH
35652: CALL_OW 488
35656: PUSH
35657: LD_VAR 0 11
35661: PPUSH
35662: LD_VAR 0 12
35666: PPUSH
35667: CALL_OW 428
35671: NOT
35672: AND
35673: IFFALSE 35696
// begin ComMoveXY ( tmp , _x , _y ) ;
35675: LD_VAR 0 13
35679: PPUSH
35680: LD_VAR 0 11
35684: PPUSH
35685: LD_VAR 0 12
35689: PPUSH
35690: CALL_OW 111
// break ;
35694: GO 35698
// end ; end ;
35696: GO 35583
35698: POP
35699: POP
// end ; end ;
35700: GO 35025
35702: POP
35703: POP
// end ;
35704: LD_VAR 0 8
35708: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35709: LD_INT 0
35711: PPUSH
// result := true ;
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_INT 1
35719: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35720: LD_VAR 0 2
35724: PUSH
35725: LD_INT 24
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35739
35731: LD_INT 33
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35739
35737: GO 35764
35739: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35740: LD_ADDR_VAR 0 3
35744: PUSH
35745: LD_INT 32
35747: PPUSH
35748: LD_VAR 0 1
35752: PPUSH
35753: CALL_OW 321
35757: PUSH
35758: LD_INT 2
35760: EQUAL
35761: ST_TO_ADDR
35762: GO 36080
35764: LD_INT 20
35766: DOUBLE
35767: EQUAL
35768: IFTRUE 35772
35770: GO 35797
35772: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35773: LD_ADDR_VAR 0 3
35777: PUSH
35778: LD_INT 6
35780: PPUSH
35781: LD_VAR 0 1
35785: PPUSH
35786: CALL_OW 321
35790: PUSH
35791: LD_INT 2
35793: EQUAL
35794: ST_TO_ADDR
35795: GO 36080
35797: LD_INT 22
35799: DOUBLE
35800: EQUAL
35801: IFTRUE 35811
35803: LD_INT 36
35805: DOUBLE
35806: EQUAL
35807: IFTRUE 35811
35809: GO 35836
35811: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35812: LD_ADDR_VAR 0 3
35816: PUSH
35817: LD_INT 15
35819: PPUSH
35820: LD_VAR 0 1
35824: PPUSH
35825: CALL_OW 321
35829: PUSH
35830: LD_INT 2
35832: EQUAL
35833: ST_TO_ADDR
35834: GO 36080
35836: LD_INT 30
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35844
35842: GO 35869
35844: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35845: LD_ADDR_VAR 0 3
35849: PUSH
35850: LD_INT 20
35852: PPUSH
35853: LD_VAR 0 1
35857: PPUSH
35858: CALL_OW 321
35862: PUSH
35863: LD_INT 2
35865: EQUAL
35866: ST_TO_ADDR
35867: GO 36080
35869: LD_INT 28
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35883
35875: LD_INT 21
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35883
35881: GO 35908
35883: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35884: LD_ADDR_VAR 0 3
35888: PUSH
35889: LD_INT 21
35891: PPUSH
35892: LD_VAR 0 1
35896: PPUSH
35897: CALL_OW 321
35901: PUSH
35902: LD_INT 2
35904: EQUAL
35905: ST_TO_ADDR
35906: GO 36080
35908: LD_INT 16
35910: DOUBLE
35911: EQUAL
35912: IFTRUE 35916
35914: GO 35941
35916: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35917: LD_ADDR_VAR 0 3
35921: PUSH
35922: LD_INT 84
35924: PPUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 321
35934: PUSH
35935: LD_INT 2
35937: EQUAL
35938: ST_TO_ADDR
35939: GO 36080
35941: LD_INT 19
35943: DOUBLE
35944: EQUAL
35945: IFTRUE 35955
35947: LD_INT 23
35949: DOUBLE
35950: EQUAL
35951: IFTRUE 35955
35953: GO 35980
35955: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35956: LD_ADDR_VAR 0 3
35960: PUSH
35961: LD_INT 83
35963: PPUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 321
35973: PUSH
35974: LD_INT 2
35976: EQUAL
35977: ST_TO_ADDR
35978: GO 36080
35980: LD_INT 17
35982: DOUBLE
35983: EQUAL
35984: IFTRUE 35988
35986: GO 36013
35988: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35989: LD_ADDR_VAR 0 3
35993: PUSH
35994: LD_INT 39
35996: PPUSH
35997: LD_VAR 0 1
36001: PPUSH
36002: CALL_OW 321
36006: PUSH
36007: LD_INT 2
36009: EQUAL
36010: ST_TO_ADDR
36011: GO 36080
36013: LD_INT 18
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36046
36021: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36022: LD_ADDR_VAR 0 3
36026: PUSH
36027: LD_INT 40
36029: PPUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 321
36039: PUSH
36040: LD_INT 2
36042: EQUAL
36043: ST_TO_ADDR
36044: GO 36080
36046: LD_INT 27
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36054
36052: GO 36079
36054: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36055: LD_ADDR_VAR 0 3
36059: PUSH
36060: LD_INT 35
36062: PPUSH
36063: LD_VAR 0 1
36067: PPUSH
36068: CALL_OW 321
36072: PUSH
36073: LD_INT 2
36075: EQUAL
36076: ST_TO_ADDR
36077: GO 36080
36079: POP
// end ;
36080: LD_VAR 0 3
36084: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36085: LD_INT 0
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
// result := false ;
36098: LD_ADDR_VAR 0 6
36102: PUSH
36103: LD_INT 0
36105: ST_TO_ADDR
// if btype = b_depot then
36106: LD_VAR 0 2
36110: PUSH
36111: LD_INT 0
36113: EQUAL
36114: IFFALSE 36126
// begin result := true ;
36116: LD_ADDR_VAR 0 6
36120: PUSH
36121: LD_INT 1
36123: ST_TO_ADDR
// exit ;
36124: GO 36952
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36126: LD_VAR 0 1
36130: NOT
36131: PUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 266
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: IN
36152: NOT
36153: OR
36154: PUSH
36155: LD_VAR 0 2
36159: NOT
36160: OR
36161: PUSH
36162: LD_VAR 0 5
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: LD_INT 4
36181: PUSH
36182: LD_INT 5
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: IN
36193: NOT
36194: OR
36195: PUSH
36196: LD_VAR 0 3
36200: PPUSH
36201: LD_VAR 0 4
36205: PPUSH
36206: CALL_OW 488
36210: NOT
36211: OR
36212: IFFALSE 36216
// exit ;
36214: GO 36952
// side := GetSide ( depot ) ;
36216: LD_ADDR_VAR 0 9
36220: PUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 255
36230: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36231: LD_VAR 0 9
36235: PPUSH
36236: LD_VAR 0 2
36240: PPUSH
36241: CALL 35709 0 2
36245: NOT
36246: IFFALSE 36250
// exit ;
36248: GO 36952
// pom := GetBase ( depot ) ;
36250: LD_ADDR_VAR 0 10
36254: PUSH
36255: LD_VAR 0 1
36259: PPUSH
36260: CALL_OW 274
36264: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36265: LD_ADDR_VAR 0 11
36269: PUSH
36270: LD_VAR 0 2
36274: PPUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL_OW 248
36284: PPUSH
36285: CALL_OW 450
36289: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36290: LD_VAR 0 10
36294: PPUSH
36295: LD_INT 1
36297: PPUSH
36298: CALL_OW 275
36302: PUSH
36303: LD_VAR 0 11
36307: PUSH
36308: LD_INT 1
36310: ARRAY
36311: GREATEREQUAL
36312: PUSH
36313: LD_VAR 0 10
36317: PPUSH
36318: LD_INT 2
36320: PPUSH
36321: CALL_OW 275
36325: PUSH
36326: LD_VAR 0 11
36330: PUSH
36331: LD_INT 2
36333: ARRAY
36334: GREATEREQUAL
36335: AND
36336: PUSH
36337: LD_VAR 0 10
36341: PPUSH
36342: LD_INT 3
36344: PPUSH
36345: CALL_OW 275
36349: PUSH
36350: LD_VAR 0 11
36354: PUSH
36355: LD_INT 3
36357: ARRAY
36358: GREATEREQUAL
36359: AND
36360: NOT
36361: IFFALSE 36365
// exit ;
36363: GO 36952
// if GetBType ( depot ) = b_depot then
36365: LD_VAR 0 1
36369: PPUSH
36370: CALL_OW 266
36374: PUSH
36375: LD_INT 0
36377: EQUAL
36378: IFFALSE 36390
// dist := 28 else
36380: LD_ADDR_VAR 0 14
36384: PUSH
36385: LD_INT 28
36387: ST_TO_ADDR
36388: GO 36398
// dist := 36 ;
36390: LD_ADDR_VAR 0 14
36394: PUSH
36395: LD_INT 36
36397: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36398: LD_VAR 0 1
36402: PPUSH
36403: LD_VAR 0 3
36407: PPUSH
36408: LD_VAR 0 4
36412: PPUSH
36413: CALL_OW 297
36417: PUSH
36418: LD_VAR 0 14
36422: GREATER
36423: IFFALSE 36427
// exit ;
36425: GO 36952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36427: LD_ADDR_VAR 0 12
36431: PUSH
36432: LD_VAR 0 2
36436: PPUSH
36437: LD_VAR 0 3
36441: PPUSH
36442: LD_VAR 0 4
36446: PPUSH
36447: LD_VAR 0 5
36451: PPUSH
36452: LD_VAR 0 1
36456: PPUSH
36457: CALL_OW 248
36461: PPUSH
36462: LD_INT 0
36464: PPUSH
36465: CALL 36957 0 6
36469: ST_TO_ADDR
// if not hexes then
36470: LD_VAR 0 12
36474: NOT
36475: IFFALSE 36479
// exit ;
36477: GO 36952
// hex := GetHexInfo ( x , y ) ;
36479: LD_ADDR_VAR 0 15
36483: PUSH
36484: LD_VAR 0 3
36488: PPUSH
36489: LD_VAR 0 4
36493: PPUSH
36494: CALL_OW 546
36498: ST_TO_ADDR
// if hex [ 1 ] then
36499: LD_VAR 0 15
36503: PUSH
36504: LD_INT 1
36506: ARRAY
36507: IFFALSE 36511
// exit ;
36509: GO 36952
// height := hex [ 2 ] ;
36511: LD_ADDR_VAR 0 13
36515: PUSH
36516: LD_VAR 0 15
36520: PUSH
36521: LD_INT 2
36523: ARRAY
36524: ST_TO_ADDR
// for i = 1 to hexes do
36525: LD_ADDR_VAR 0 7
36529: PUSH
36530: DOUBLE
36531: LD_INT 1
36533: DEC
36534: ST_TO_ADDR
36535: LD_VAR 0 12
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36871
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36543: LD_VAR 0 12
36547: PUSH
36548: LD_VAR 0 7
36552: ARRAY
36553: PUSH
36554: LD_INT 1
36556: ARRAY
36557: PPUSH
36558: LD_VAR 0 12
36562: PUSH
36563: LD_VAR 0 7
36567: ARRAY
36568: PUSH
36569: LD_INT 2
36571: ARRAY
36572: PPUSH
36573: CALL_OW 488
36577: NOT
36578: PUSH
36579: LD_VAR 0 12
36583: PUSH
36584: LD_VAR 0 7
36588: ARRAY
36589: PUSH
36590: LD_INT 1
36592: ARRAY
36593: PPUSH
36594: LD_VAR 0 12
36598: PUSH
36599: LD_VAR 0 7
36603: ARRAY
36604: PUSH
36605: LD_INT 2
36607: ARRAY
36608: PPUSH
36609: CALL_OW 428
36613: PUSH
36614: LD_INT 0
36616: GREATER
36617: OR
36618: PUSH
36619: LD_VAR 0 12
36623: PUSH
36624: LD_VAR 0 7
36628: ARRAY
36629: PUSH
36630: LD_INT 1
36632: ARRAY
36633: PPUSH
36634: LD_VAR 0 12
36638: PUSH
36639: LD_VAR 0 7
36643: ARRAY
36644: PUSH
36645: LD_INT 2
36647: ARRAY
36648: PPUSH
36649: CALL_OW 351
36653: OR
36654: IFFALSE 36660
// exit ;
36656: POP
36657: POP
36658: GO 36952
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36660: LD_ADDR_VAR 0 8
36664: PUSH
36665: LD_VAR 0 12
36669: PUSH
36670: LD_VAR 0 7
36674: ARRAY
36675: PUSH
36676: LD_INT 1
36678: ARRAY
36679: PPUSH
36680: LD_VAR 0 12
36684: PUSH
36685: LD_VAR 0 7
36689: ARRAY
36690: PUSH
36691: LD_INT 2
36693: ARRAY
36694: PPUSH
36695: CALL_OW 546
36699: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36700: LD_VAR 0 8
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PUSH
36709: LD_VAR 0 8
36713: PUSH
36714: LD_INT 2
36716: ARRAY
36717: PUSH
36718: LD_VAR 0 13
36722: PUSH
36723: LD_INT 2
36725: PLUS
36726: GREATER
36727: OR
36728: PUSH
36729: LD_VAR 0 8
36733: PUSH
36734: LD_INT 2
36736: ARRAY
36737: PUSH
36738: LD_VAR 0 13
36742: PUSH
36743: LD_INT 2
36745: MINUS
36746: LESS
36747: OR
36748: PUSH
36749: LD_VAR 0 8
36753: PUSH
36754: LD_INT 3
36756: ARRAY
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 8
36763: PUSH
36764: LD_INT 9
36766: PUSH
36767: LD_INT 10
36769: PUSH
36770: LD_INT 11
36772: PUSH
36773: LD_INT 12
36775: PUSH
36776: LD_INT 13
36778: PUSH
36779: LD_INT 16
36781: PUSH
36782: LD_INT 17
36784: PUSH
36785: LD_INT 18
36787: PUSH
36788: LD_INT 19
36790: PUSH
36791: LD_INT 20
36793: PUSH
36794: LD_INT 21
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: IN
36812: NOT
36813: OR
36814: PUSH
36815: LD_VAR 0 8
36819: PUSH
36820: LD_INT 5
36822: ARRAY
36823: NOT
36824: OR
36825: PUSH
36826: LD_VAR 0 8
36830: PUSH
36831: LD_INT 6
36833: ARRAY
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 7
36843: PUSH
36844: LD_INT 9
36846: PUSH
36847: LD_INT 10
36849: PUSH
36850: LD_INT 11
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: IN
36861: NOT
36862: OR
36863: IFFALSE 36869
// exit ;
36865: POP
36866: POP
36867: GO 36952
// end ;
36869: GO 36540
36871: POP
36872: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36873: LD_VAR 0 9
36877: PPUSH
36878: LD_VAR 0 3
36882: PPUSH
36883: LD_VAR 0 4
36887: PPUSH
36888: LD_INT 20
36890: PPUSH
36891: CALL 28875 0 4
36895: PUSH
36896: LD_INT 4
36898: ARRAY
36899: IFFALSE 36903
// exit ;
36901: GO 36952
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36903: LD_VAR 0 2
36907: PUSH
36908: LD_INT 29
36910: PUSH
36911: LD_INT 30
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: IN
36918: PUSH
36919: LD_VAR 0 3
36923: PPUSH
36924: LD_VAR 0 4
36928: PPUSH
36929: LD_VAR 0 9
36933: PPUSH
36934: CALL_OW 440
36938: NOT
36939: AND
36940: IFFALSE 36944
// exit ;
36942: GO 36952
// result := true ;
36944: LD_ADDR_VAR 0 6
36948: PUSH
36949: LD_INT 1
36951: ST_TO_ADDR
// end ;
36952: LD_VAR 0 6
36956: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36957: LD_INT 0
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
36976: PPUSH
36977: PPUSH
36978: PPUSH
36979: PPUSH
36980: PPUSH
36981: PPUSH
36982: PPUSH
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
36987: PPUSH
36988: PPUSH
36989: PPUSH
36990: PPUSH
36991: PPUSH
36992: PPUSH
36993: PPUSH
36994: PPUSH
36995: PPUSH
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
37004: PPUSH
37005: PPUSH
37006: PPUSH
37007: PPUSH
37008: PPUSH
37009: PPUSH
37010: PPUSH
37011: PPUSH
37012: PPUSH
37013: PPUSH
37014: PPUSH
37015: PPUSH
37016: PPUSH
// result = [ ] ;
37017: LD_ADDR_VAR 0 7
37021: PUSH
37022: EMPTY
37023: ST_TO_ADDR
// temp_list = [ ] ;
37024: LD_ADDR_VAR 0 9
37028: PUSH
37029: EMPTY
37030: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37031: LD_VAR 0 4
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: LD_INT 4
37050: PUSH
37051: LD_INT 5
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: IN
37062: NOT
37063: PUSH
37064: LD_VAR 0 1
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: IN
37079: PUSH
37080: LD_VAR 0 5
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: IN
37099: NOT
37100: AND
37101: OR
37102: IFFALSE 37106
// exit ;
37104: GO 55497
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37106: LD_VAR 0 1
37110: PUSH
37111: LD_INT 6
37113: PUSH
37114: LD_INT 7
37116: PUSH
37117: LD_INT 8
37119: PUSH
37120: LD_INT 13
37122: PUSH
37123: LD_INT 12
37125: PUSH
37126: LD_INT 15
37128: PUSH
37129: LD_INT 11
37131: PUSH
37132: LD_INT 14
37134: PUSH
37135: LD_INT 10
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: IN
37149: IFFALSE 37159
// btype = b_lab ;
37151: LD_ADDR_VAR 0 1
37155: PUSH
37156: LD_INT 6
37158: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37159: LD_VAR 0 6
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: IN
37178: NOT
37179: PUSH
37180: LD_VAR 0 1
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: LD_INT 6
37199: PUSH
37200: LD_INT 36
37202: PUSH
37203: LD_INT 4
37205: PUSH
37206: LD_INT 5
37208: PUSH
37209: LD_INT 31
37211: PUSH
37212: LD_INT 32
37214: PUSH
37215: LD_INT 33
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: IN
37231: NOT
37232: PUSH
37233: LD_VAR 0 6
37237: PUSH
37238: LD_INT 1
37240: EQUAL
37241: AND
37242: OR
37243: PUSH
37244: LD_VAR 0 1
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: IN
37259: NOT
37260: PUSH
37261: LD_VAR 0 6
37265: PUSH
37266: LD_INT 2
37268: EQUAL
37269: AND
37270: OR
37271: IFFALSE 37281
// mode = 0 ;
37273: LD_ADDR_VAR 0 6
37277: PUSH
37278: LD_INT 0
37280: ST_TO_ADDR
// case mode of 0 :
37281: LD_VAR 0 6
37285: PUSH
37286: LD_INT 0
37288: DOUBLE
37289: EQUAL
37290: IFTRUE 37294
37292: GO 48747
37294: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37295: LD_ADDR_VAR 0 11
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: NEG
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 3
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37488: LD_ADDR_VAR 0 12
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: PUSH
37591: LD_INT 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 2
37634: NEG
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 3
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37684: LD_ADDR_VAR 0 13
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 3
37843: NEG
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 3
37855: NEG
37856: PUSH
37857: LD_INT 3
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37883: LD_ADDR_VAR 0 14
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 2
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 3
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 3
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38079: LD_ADDR_VAR 0 15
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 3
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38272: LD_ADDR_VAR 0 16
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 1
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 3
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 3
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38465: LD_ADDR_VAR 0 17
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38695: LD_ADDR_VAR 0 18
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: NEG
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 2
38882: NEG
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 2
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38925: LD_ADDR_VAR 0 19
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39155: LD_ADDR_VAR 0 20
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: LD_INT 2
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39385: LD_ADDR_VAR 0 21
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 2
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 1
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39615: LD_ADDR_VAR 0 22
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 1
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: NEG
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39845: LD_ADDR_VAR 0 23
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: NEG
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: LD_INT 3
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 3
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40125: LD_ADDR_VAR 0 24
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: NEG
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 3
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 3
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40401: LD_ADDR_VAR 0 25
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 3
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 3
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40675: LD_ADDR_VAR 0 26
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 2
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 2
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: NEG
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 3
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40951: LD_ADDR_VAR 0 27
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: LD_INT 2
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 3
41184: NEG
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: NEG
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41231: LD_ADDR_VAR 0 28
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: NEG
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 3
41478: NEG
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41513: LD_ADDR_VAR 0 29
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 2
41691: NEG
41692: PUSH
41693: LD_INT 2
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 3
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 3
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: NEG
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41792: LD_ADDR_VAR 0 30
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 2
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 2
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42070: LD_ADDR_VAR 0 31
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 0
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: NEG
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 3
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42348: LD_ADDR_VAR 0 32
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 0
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 3
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 3
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: LD_INT 3
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: NEG
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42626: LD_ADDR_VAR 0 33
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 1
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: NEG
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 2
42792: NEG
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 2
42816: NEG
42817: PUSH
42818: LD_INT 3
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 2
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 3
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: LD_INT 3
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42905: LD_ADDR_VAR 0 34
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 3
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 3
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43185: LD_ADDR_VAR 0 35
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 1
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43297: LD_ADDR_VAR 0 36
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: LD_INT 2
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43409: LD_ADDR_VAR 0 37
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43521: LD_ADDR_VAR 0 38
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 1
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43633: LD_ADDR_VAR 0 39
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43745: LD_ADDR_VAR 0 40
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43857: LD_ADDR_VAR 0 41
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 3
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 3
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 3
44166: NEG
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44207: LD_ADDR_VAR 0 42
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 3
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 3
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: NEG
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 3
44516: NEG
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44557: LD_ADDR_VAR 0 43
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 1
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 3
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 3
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44905: LD_ADDR_VAR 0 44
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: LD_INT 3
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 3
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 3
45179: NEG
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: LD_INT 2
45206: NEG
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 3
45214: NEG
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45255: LD_ADDR_VAR 0 45
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 3
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 3
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: NEG
45542: PUSH
45543: LD_INT 2
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45605: LD_ADDR_VAR 0 46
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: NEG
45795: PUSH
45796: LD_INT 3
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45953: LD_ADDR_VAR 0 47
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46104: LD_ADDR_VAR 0 48
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46251: LD_ADDR_VAR 0 49
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46395: LD_ADDR_VAR 0 50
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46539: LD_ADDR_VAR 0 51
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: NEG
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46686: LD_ADDR_VAR 0 52
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46837: LD_ADDR_VAR 0 53
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47067: LD_ADDR_VAR 0 54
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47297: LD_ADDR_VAR 0 55
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47527: LD_ADDR_VAR 0 56
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: LD_INT 2
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47757: LD_ADDR_VAR 0 57
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: NEG
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 2
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 2
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 2
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47987: LD_ADDR_VAR 0 58
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 2
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48217: LD_ADDR_VAR 0 59
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48305: LD_ADDR_VAR 0 60
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: LD_INT 1
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48393: LD_ADDR_VAR 0 61
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48481: LD_ADDR_VAR 0 62
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48569: LD_ADDR_VAR 0 63
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48657: LD_ADDR_VAR 0 64
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: ST_TO_ADDR
// end ; 1 :
48745: GO 54642
48747: LD_INT 1
48749: DOUBLE
48750: EQUAL
48751: IFTRUE 48755
48753: GO 51378
48755: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48756: LD_ADDR_VAR 0 11
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 3
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48800: LD_ADDR_VAR 0 12
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48841: LD_ADDR_VAR 0 13
48845: PUSH
48846: LD_INT 3
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: LD_INT 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: LD_INT 3
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48881: LD_ADDR_VAR 0 14
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48922: LD_ADDR_VAR 0 15
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 3
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: LIST
48965: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48966: LD_ADDR_VAR 0 16
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 3
48985: NEG
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49012: LD_ADDR_VAR 0 17
49016: PUSH
49017: LD_INT 1
49019: NEG
49020: PUSH
49021: LD_INT 3
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 3
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49056: LD_ADDR_VAR 0 18
49060: PUSH
49061: LD_INT 2
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49097: LD_ADDR_VAR 0 19
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 3
49114: PUSH
49115: LD_INT 3
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49137: LD_ADDR_VAR 0 20
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 3
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49178: LD_ADDR_VAR 0 21
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49222: LD_ADDR_VAR 0 22
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 3
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 3
49241: NEG
49242: PUSH
49243: LD_INT 2
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 3
49253: NEG
49254: PUSH
49255: LD_INT 3
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49268: LD_ADDR_VAR 0 23
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 4
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 3
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49312: LD_ADDR_VAR 0 24
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 4
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49353: LD_ADDR_VAR 0 25
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 4
49370: PUSH
49371: LD_INT 3
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 3
49380: PUSH
49381: LD_INT 4
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49393: LD_ADDR_VAR 0 26
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 3
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 4
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 3
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49434: LD_ADDR_VAR 0 27
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 4
49463: NEG
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: LIST
49477: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49478: LD_ADDR_VAR 0 28
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: LD_INT 3
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: LD_INT 4
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 4
49509: NEG
49510: PUSH
49511: LD_INT 3
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49524: LD_ADDR_VAR 0 29
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 3
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: LD_INT 4
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 4
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 5
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 5
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 4
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 6
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 6
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 5
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49679: LD_ADDR_VAR 0 30
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 4
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 4
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 5
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 5
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 5
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 6
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 6
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49822: LD_ADDR_VAR 0 31
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: LD_INT 3
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 4
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 4
49869: PUSH
49870: LD_INT 4
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: LD_INT 4
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 5
49889: PUSH
49890: LD_INT 4
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 5
49899: PUSH
49900: LD_INT 5
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 4
49909: PUSH
49910: LD_INT 5
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 6
49919: PUSH
49920: LD_INT 5
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 6
49929: PUSH
49930: LD_INT 6
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 5
49939: PUSH
49940: LD_INT 6
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49961: LD_ADDR_VAR 0 32
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: LD_INT 4
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 4
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 5
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 5
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 4
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: LD_INT 6
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 6
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 5
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50104: LD_ADDR_VAR 0 33
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 4
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 4
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 4
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 5
50190: NEG
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 5
50201: NEG
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 5
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 6
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 6
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50259: LD_ADDR_VAR 0 34
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: LD_INT 2
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 3
50290: NEG
50291: PUSH
50292: LD_INT 3
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: NEG
50303: PUSH
50304: LD_INT 4
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 4
50314: NEG
50315: PUSH
50316: LD_INT 3
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 4
50326: NEG
50327: PUSH
50328: LD_INT 4
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 4
50338: NEG
50339: PUSH
50340: LD_INT 5
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 5
50350: NEG
50351: PUSH
50352: LD_INT 4
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 5
50362: NEG
50363: PUSH
50364: LD_INT 5
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 5
50374: NEG
50375: PUSH
50376: LD_INT 6
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 6
50386: NEG
50387: PUSH
50388: LD_INT 5
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 6
50398: NEG
50399: PUSH
50400: LD_INT 6
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50422: LD_ADDR_VAR 0 41
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: LIST
50465: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50466: LD_ADDR_VAR 0 42
50470: PUSH
50471: LD_INT 2
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50507: LD_ADDR_VAR 0 43
50511: PUSH
50512: LD_INT 2
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: PUSH
50525: LD_INT 2
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50547: LD_ADDR_VAR 0 44
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50588: LD_ADDR_VAR 0 45
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50632: LD_ADDR_VAR 0 46
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 3
50663: NEG
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: LIST
50677: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50678: LD_ADDR_VAR 0 47
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50711: LD_ADDR_VAR 0 48
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50742: LD_ADDR_VAR 0 49
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50771: LD_ADDR_VAR 0 50
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 3
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50800: LD_ADDR_VAR 0 51
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50831: LD_ADDR_VAR 0 52
50835: PUSH
50836: LD_INT 3
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 3
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50864: LD_ADDR_VAR 0 53
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50908: LD_ADDR_VAR 0 54
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50949: LD_ADDR_VAR 0 55
50953: PUSH
50954: LD_INT 3
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 3
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 3
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: LIST
50988: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50989: LD_ADDR_VAR 0 56
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51030: LD_ADDR_VAR 0 57
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51074: LD_ADDR_VAR 0 58
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: LD_INT 3
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51120: LD_ADDR_VAR 0 59
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51164: LD_ADDR_VAR 0 60
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51205: LD_ADDR_VAR 0 61
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51245: LD_ADDR_VAR 0 62
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51286: LD_ADDR_VAR 0 63
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51330: LD_ADDR_VAR 0 64
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: LD_INT 2
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// end ; 2 :
51376: GO 54642
51378: LD_INT 2
51380: DOUBLE
51381: EQUAL
51382: IFTRUE 51386
51384: GO 54641
51386: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51387: LD_ADDR_VAR 0 29
51391: PUSH
51392: LD_INT 4
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 4
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 5
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 5
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 4
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 3
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 3
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 5
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 3
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 4
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 4
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 2
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 2
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 4
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 4
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 4
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 4
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 5
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 5
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 4
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 5
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 4
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 4
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 4
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: NEG
51773: PUSH
51774: LD_INT 4
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 4
51784: NEG
51785: PUSH
51786: LD_INT 5
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 3
51796: NEG
51797: PUSH
51798: LD_INT 4
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: NEG
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 4
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 5
51832: NEG
51833: PUSH
51834: LD_INT 4
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 5
51844: NEG
51845: PUSH
51846: LD_INT 5
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 5
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 5
51868: NEG
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51925: LD_ADDR_VAR 0 30
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: LD_INT 4
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 4
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 5
51952: PUSH
51953: LD_INT 4
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 5
51962: PUSH
51963: LD_INT 5
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 4
51972: PUSH
51973: LD_INT 5
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: LD_INT 4
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 3
51992: PUSH
51993: LD_INT 3
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 5
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: LD_INT 5
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 3
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 2
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 4
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 4
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 4
52115: NEG
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 4
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 5
52171: NEG
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 5
52182: NEG
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 5
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 3
52206: NEG
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 4
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: NEG
52242: PUSH
52243: LD_INT 3
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 4
52277: NEG
52278: PUSH
52279: LD_INT 3
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: LD_INT 4
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: LD_INT 4
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 5
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: LD_INT 4
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 3
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: LD_INT 4
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 5
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: LD_INT 5
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52472: LD_ADDR_VAR 0 31
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: LD_INT 4
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 4
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 5
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 5
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: LD_INT 4
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 2
52551: PUSH
52552: LD_INT 5
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: NEG
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 3
52572: NEG
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 4
52628: NEG
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 4
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 4
52651: NEG
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 4
52674: NEG
52675: PUSH
52676: LD_INT 4
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 4
52686: NEG
52687: PUSH
52688: LD_INT 5
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 3
52698: NEG
52699: PUSH
52700: LD_INT 4
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: NEG
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 4
52722: NEG
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 5
52734: NEG
52735: PUSH
52736: LD_INT 4
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 5
52746: NEG
52747: PUSH
52748: LD_INT 5
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 5
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 5
52770: NEG
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: LD_INT 4
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 3
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 4
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: NEG
52873: PUSH
52874: LD_INT 4
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 4
52884: PUSH
52885: LD_INT 0
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 4
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 5
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 4
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 5
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53022: LD_ADDR_VAR 0 32
53026: PUSH
53027: LD_INT 4
53029: NEG
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 4
53040: NEG
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 4
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 5
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 5
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 5
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 3
53120: NEG
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 3
53131: NEG
53132: PUSH
53133: LD_INT 3
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 3
53143: NEG
53144: PUSH
53145: LD_INT 4
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: LD_INT 3
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: LD_INT 2
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 3
53179: NEG
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 4
53191: NEG
53192: PUSH
53193: LD_INT 3
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 4
53203: NEG
53204: PUSH
53205: LD_INT 4
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: LD_INT 4
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: NEG
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 4
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 5
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: LD_INT 4
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 4
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 5
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 2
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: NEG
53330: PUSH
53331: LD_INT 5
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 4
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 4
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: LD_INT 4
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 5
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 5
53464: PUSH
53465: LD_INT 5
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 4
53474: PUSH
53475: LD_INT 5
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 5
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 5
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53569: LD_ADDR_VAR 0 33
53573: PUSH
53574: LD_INT 4
53576: NEG
53577: PUSH
53578: LD_INT 4
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: NEG
53589: PUSH
53590: LD_INT 5
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 4
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 4
53624: NEG
53625: PUSH
53626: LD_INT 3
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 5
53636: NEG
53637: PUSH
53638: LD_INT 4
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 5
53648: NEG
53649: PUSH
53650: LD_INT 5
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: LD_INT 5
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 5
53672: NEG
53673: PUSH
53674: LD_INT 3
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 3
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: LD_INT 4
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 2
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 3
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 4
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 4
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 4
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 4
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 5
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 5
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 4
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 5
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: LD_INT 3
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: LD_INT 2
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 4
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 4
53909: PUSH
53910: LD_INT 4
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 4
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 0
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 5
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 5
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 4
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 3
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 5
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54107: LD_ADDR_VAR 0 34
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 4
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 5
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 4
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: LD_INT 4
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 5
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: LD_INT 5
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 4
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 4
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 4
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 4
54309: PUSH
54310: LD_INT 4
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 4
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 5
54329: PUSH
54330: LD_INT 4
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 5
54339: PUSH
54340: LD_INT 5
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 4
54349: PUSH
54350: LD_INT 5
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 3
54359: PUSH
54360: LD_INT 4
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 5
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: PUSH
54390: LD_INT 5
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 3
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: LD_INT 4
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 4
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 4
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 4
54492: NEG
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 4
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 4
54537: NEG
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 5
54548: NEG
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 5
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 5
54571: NEG
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: NEG
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// end ; end ;
54639: GO 54642
54641: POP
// case btype of b_depot , b_warehouse :
54642: LD_VAR 0 1
54646: PUSH
54647: LD_INT 0
54649: DOUBLE
54650: EQUAL
54651: IFTRUE 54661
54653: LD_INT 1
54655: DOUBLE
54656: EQUAL
54657: IFTRUE 54661
54659: GO 54862
54661: POP
// case nation of nation_american :
54662: LD_VAR 0 5
54666: PUSH
54667: LD_INT 1
54669: DOUBLE
54670: EQUAL
54671: IFTRUE 54675
54673: GO 54731
54675: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54676: LD_ADDR_VAR 0 9
54680: PUSH
54681: LD_VAR 0 11
54685: PUSH
54686: LD_VAR 0 12
54690: PUSH
54691: LD_VAR 0 13
54695: PUSH
54696: LD_VAR 0 14
54700: PUSH
54701: LD_VAR 0 15
54705: PUSH
54706: LD_VAR 0 16
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: PUSH
54719: LD_VAR 0 4
54723: PUSH
54724: LD_INT 1
54726: PLUS
54727: ARRAY
54728: ST_TO_ADDR
54729: GO 54860
54731: LD_INT 2
54733: DOUBLE
54734: EQUAL
54735: IFTRUE 54739
54737: GO 54795
54739: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54740: LD_ADDR_VAR 0 9
54744: PUSH
54745: LD_VAR 0 17
54749: PUSH
54750: LD_VAR 0 18
54754: PUSH
54755: LD_VAR 0 19
54759: PUSH
54760: LD_VAR 0 20
54764: PUSH
54765: LD_VAR 0 21
54769: PUSH
54770: LD_VAR 0 22
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: PUSH
54783: LD_VAR 0 4
54787: PUSH
54788: LD_INT 1
54790: PLUS
54791: ARRAY
54792: ST_TO_ADDR
54793: GO 54860
54795: LD_INT 3
54797: DOUBLE
54798: EQUAL
54799: IFTRUE 54803
54801: GO 54859
54803: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54804: LD_ADDR_VAR 0 9
54808: PUSH
54809: LD_VAR 0 23
54813: PUSH
54814: LD_VAR 0 24
54818: PUSH
54819: LD_VAR 0 25
54823: PUSH
54824: LD_VAR 0 26
54828: PUSH
54829: LD_VAR 0 27
54833: PUSH
54834: LD_VAR 0 28
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: PUSH
54847: LD_VAR 0 4
54851: PUSH
54852: LD_INT 1
54854: PLUS
54855: ARRAY
54856: ST_TO_ADDR
54857: GO 54860
54859: POP
54860: GO 55415
54862: LD_INT 2
54864: DOUBLE
54865: EQUAL
54866: IFTRUE 54876
54868: LD_INT 3
54870: DOUBLE
54871: EQUAL
54872: IFTRUE 54876
54874: GO 54932
54876: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54877: LD_ADDR_VAR 0 9
54881: PUSH
54882: LD_VAR 0 29
54886: PUSH
54887: LD_VAR 0 30
54891: PUSH
54892: LD_VAR 0 31
54896: PUSH
54897: LD_VAR 0 32
54901: PUSH
54902: LD_VAR 0 33
54906: PUSH
54907: LD_VAR 0 34
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: PUSH
54920: LD_VAR 0 4
54924: PUSH
54925: LD_INT 1
54927: PLUS
54928: ARRAY
54929: ST_TO_ADDR
54930: GO 55415
54932: LD_INT 16
54934: DOUBLE
54935: EQUAL
54936: IFTRUE 54994
54938: LD_INT 17
54940: DOUBLE
54941: EQUAL
54942: IFTRUE 54994
54944: LD_INT 18
54946: DOUBLE
54947: EQUAL
54948: IFTRUE 54994
54950: LD_INT 19
54952: DOUBLE
54953: EQUAL
54954: IFTRUE 54994
54956: LD_INT 22
54958: DOUBLE
54959: EQUAL
54960: IFTRUE 54994
54962: LD_INT 20
54964: DOUBLE
54965: EQUAL
54966: IFTRUE 54994
54968: LD_INT 21
54970: DOUBLE
54971: EQUAL
54972: IFTRUE 54994
54974: LD_INT 23
54976: DOUBLE
54977: EQUAL
54978: IFTRUE 54994
54980: LD_INT 24
54982: DOUBLE
54983: EQUAL
54984: IFTRUE 54994
54986: LD_INT 25
54988: DOUBLE
54989: EQUAL
54990: IFTRUE 54994
54992: GO 55050
54994: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54995: LD_ADDR_VAR 0 9
54999: PUSH
55000: LD_VAR 0 35
55004: PUSH
55005: LD_VAR 0 36
55009: PUSH
55010: LD_VAR 0 37
55014: PUSH
55015: LD_VAR 0 38
55019: PUSH
55020: LD_VAR 0 39
55024: PUSH
55025: LD_VAR 0 40
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: PUSH
55038: LD_VAR 0 4
55042: PUSH
55043: LD_INT 1
55045: PLUS
55046: ARRAY
55047: ST_TO_ADDR
55048: GO 55415
55050: LD_INT 6
55052: DOUBLE
55053: EQUAL
55054: IFTRUE 55106
55056: LD_INT 7
55058: DOUBLE
55059: EQUAL
55060: IFTRUE 55106
55062: LD_INT 8
55064: DOUBLE
55065: EQUAL
55066: IFTRUE 55106
55068: LD_INT 13
55070: DOUBLE
55071: EQUAL
55072: IFTRUE 55106
55074: LD_INT 12
55076: DOUBLE
55077: EQUAL
55078: IFTRUE 55106
55080: LD_INT 15
55082: DOUBLE
55083: EQUAL
55084: IFTRUE 55106
55086: LD_INT 11
55088: DOUBLE
55089: EQUAL
55090: IFTRUE 55106
55092: LD_INT 14
55094: DOUBLE
55095: EQUAL
55096: IFTRUE 55106
55098: LD_INT 10
55100: DOUBLE
55101: EQUAL
55102: IFTRUE 55106
55104: GO 55162
55106: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55107: LD_ADDR_VAR 0 9
55111: PUSH
55112: LD_VAR 0 41
55116: PUSH
55117: LD_VAR 0 42
55121: PUSH
55122: LD_VAR 0 43
55126: PUSH
55127: LD_VAR 0 44
55131: PUSH
55132: LD_VAR 0 45
55136: PUSH
55137: LD_VAR 0 46
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: PUSH
55150: LD_VAR 0 4
55154: PUSH
55155: LD_INT 1
55157: PLUS
55158: ARRAY
55159: ST_TO_ADDR
55160: GO 55415
55162: LD_INT 36
55164: DOUBLE
55165: EQUAL
55166: IFTRUE 55170
55168: GO 55226
55170: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55171: LD_ADDR_VAR 0 9
55175: PUSH
55176: LD_VAR 0 47
55180: PUSH
55181: LD_VAR 0 48
55185: PUSH
55186: LD_VAR 0 49
55190: PUSH
55191: LD_VAR 0 50
55195: PUSH
55196: LD_VAR 0 51
55200: PUSH
55201: LD_VAR 0 52
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: PUSH
55214: LD_VAR 0 4
55218: PUSH
55219: LD_INT 1
55221: PLUS
55222: ARRAY
55223: ST_TO_ADDR
55224: GO 55415
55226: LD_INT 4
55228: DOUBLE
55229: EQUAL
55230: IFTRUE 55252
55232: LD_INT 5
55234: DOUBLE
55235: EQUAL
55236: IFTRUE 55252
55238: LD_INT 34
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55252
55244: LD_INT 37
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55252
55250: GO 55308
55252: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55253: LD_ADDR_VAR 0 9
55257: PUSH
55258: LD_VAR 0 53
55262: PUSH
55263: LD_VAR 0 54
55267: PUSH
55268: LD_VAR 0 55
55272: PUSH
55273: LD_VAR 0 56
55277: PUSH
55278: LD_VAR 0 57
55282: PUSH
55283: LD_VAR 0 58
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: PUSH
55296: LD_VAR 0 4
55300: PUSH
55301: LD_INT 1
55303: PLUS
55304: ARRAY
55305: ST_TO_ADDR
55306: GO 55415
55308: LD_INT 31
55310: DOUBLE
55311: EQUAL
55312: IFTRUE 55358
55314: LD_INT 32
55316: DOUBLE
55317: EQUAL
55318: IFTRUE 55358
55320: LD_INT 33
55322: DOUBLE
55323: EQUAL
55324: IFTRUE 55358
55326: LD_INT 27
55328: DOUBLE
55329: EQUAL
55330: IFTRUE 55358
55332: LD_INT 26
55334: DOUBLE
55335: EQUAL
55336: IFTRUE 55358
55338: LD_INT 28
55340: DOUBLE
55341: EQUAL
55342: IFTRUE 55358
55344: LD_INT 29
55346: DOUBLE
55347: EQUAL
55348: IFTRUE 55358
55350: LD_INT 30
55352: DOUBLE
55353: EQUAL
55354: IFTRUE 55358
55356: GO 55414
55358: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55359: LD_ADDR_VAR 0 9
55363: PUSH
55364: LD_VAR 0 59
55368: PUSH
55369: LD_VAR 0 60
55373: PUSH
55374: LD_VAR 0 61
55378: PUSH
55379: LD_VAR 0 62
55383: PUSH
55384: LD_VAR 0 63
55388: PUSH
55389: LD_VAR 0 64
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: PUSH
55402: LD_VAR 0 4
55406: PUSH
55407: LD_INT 1
55409: PLUS
55410: ARRAY
55411: ST_TO_ADDR
55412: GO 55415
55414: POP
// temp_list2 = [ ] ;
55415: LD_ADDR_VAR 0 10
55419: PUSH
55420: EMPTY
55421: ST_TO_ADDR
// for i in temp_list do
55422: LD_ADDR_VAR 0 8
55426: PUSH
55427: LD_VAR 0 9
55431: PUSH
55432: FOR_IN
55433: IFFALSE 55485
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55435: LD_ADDR_VAR 0 10
55439: PUSH
55440: LD_VAR 0 10
55444: PUSH
55445: LD_VAR 0 8
55449: PUSH
55450: LD_INT 1
55452: ARRAY
55453: PUSH
55454: LD_VAR 0 2
55458: PLUS
55459: PUSH
55460: LD_VAR 0 8
55464: PUSH
55465: LD_INT 2
55467: ARRAY
55468: PUSH
55469: LD_VAR 0 3
55473: PLUS
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: ADD
55482: ST_TO_ADDR
55483: GO 55432
55485: POP
55486: POP
// result = temp_list2 ;
55487: LD_ADDR_VAR 0 7
55491: PUSH
55492: LD_VAR 0 10
55496: ST_TO_ADDR
// end ;
55497: LD_VAR 0 7
55501: RET
// export function EnemyInRange ( unit , dist ) ; begin
55502: LD_INT 0
55504: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55505: LD_ADDR_VAR 0 3
55509: PUSH
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 255
55519: PPUSH
55520: LD_VAR 0 1
55524: PPUSH
55525: CALL_OW 250
55529: PPUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 251
55539: PPUSH
55540: LD_VAR 0 2
55544: PPUSH
55545: CALL 28875 0 4
55549: PUSH
55550: LD_INT 4
55552: ARRAY
55553: ST_TO_ADDR
// end ;
55554: LD_VAR 0 3
55558: RET
// export function PlayerSeeMe ( unit ) ; begin
55559: LD_INT 0
55561: PPUSH
// result := See ( your_side , unit ) ;
55562: LD_ADDR_VAR 0 2
55566: PUSH
55567: LD_OWVAR 2
55571: PPUSH
55572: LD_VAR 0 1
55576: PPUSH
55577: CALL_OW 292
55581: ST_TO_ADDR
// end ;
55582: LD_VAR 0 2
55586: RET
// export function ReverseDir ( unit ) ; begin
55587: LD_INT 0
55589: PPUSH
// if not unit then
55590: LD_VAR 0 1
55594: NOT
55595: IFFALSE 55599
// exit ;
55597: GO 55622
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55599: LD_ADDR_VAR 0 2
55603: PUSH
55604: LD_VAR 0 1
55608: PPUSH
55609: CALL_OW 254
55613: PUSH
55614: LD_INT 3
55616: PLUS
55617: PUSH
55618: LD_INT 6
55620: MOD
55621: ST_TO_ADDR
// end ;
55622: LD_VAR 0 2
55626: RET
// export function ReverseArray ( array ) ; var i ; begin
55627: LD_INT 0
55629: PPUSH
55630: PPUSH
// if not array then
55631: LD_VAR 0 1
55635: NOT
55636: IFFALSE 55640
// exit ;
55638: GO 55695
// result := [ ] ;
55640: LD_ADDR_VAR 0 2
55644: PUSH
55645: EMPTY
55646: ST_TO_ADDR
// for i := array downto 1 do
55647: LD_ADDR_VAR 0 3
55651: PUSH
55652: DOUBLE
55653: LD_VAR 0 1
55657: INC
55658: ST_TO_ADDR
55659: LD_INT 1
55661: PUSH
55662: FOR_DOWNTO
55663: IFFALSE 55693
// result := Join ( result , array [ i ] ) ;
55665: LD_ADDR_VAR 0 2
55669: PUSH
55670: LD_VAR 0 2
55674: PPUSH
55675: LD_VAR 0 1
55679: PUSH
55680: LD_VAR 0 3
55684: ARRAY
55685: PPUSH
55686: CALL 60360 0 2
55690: ST_TO_ADDR
55691: GO 55662
55693: POP
55694: POP
// end ;
55695: LD_VAR 0 2
55699: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55700: LD_INT 0
55702: PPUSH
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
55707: PPUSH
// if not unit or not hexes then
55708: LD_VAR 0 1
55712: NOT
55713: PUSH
55714: LD_VAR 0 2
55718: NOT
55719: OR
55720: IFFALSE 55724
// exit ;
55722: GO 55847
// dist := 9999 ;
55724: LD_ADDR_VAR 0 5
55728: PUSH
55729: LD_INT 9999
55731: ST_TO_ADDR
// for i = 1 to hexes do
55732: LD_ADDR_VAR 0 4
55736: PUSH
55737: DOUBLE
55738: LD_INT 1
55740: DEC
55741: ST_TO_ADDR
55742: LD_VAR 0 2
55746: PUSH
55747: FOR_TO
55748: IFFALSE 55835
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55750: LD_ADDR_VAR 0 6
55754: PUSH
55755: LD_VAR 0 1
55759: PPUSH
55760: LD_VAR 0 2
55764: PUSH
55765: LD_VAR 0 4
55769: ARRAY
55770: PUSH
55771: LD_INT 1
55773: ARRAY
55774: PPUSH
55775: LD_VAR 0 2
55779: PUSH
55780: LD_VAR 0 4
55784: ARRAY
55785: PUSH
55786: LD_INT 2
55788: ARRAY
55789: PPUSH
55790: CALL_OW 297
55794: ST_TO_ADDR
// if tdist < dist then
55795: LD_VAR 0 6
55799: PUSH
55800: LD_VAR 0 5
55804: LESS
55805: IFFALSE 55833
// begin hex := hexes [ i ] ;
55807: LD_ADDR_VAR 0 8
55811: PUSH
55812: LD_VAR 0 2
55816: PUSH
55817: LD_VAR 0 4
55821: ARRAY
55822: ST_TO_ADDR
// dist := tdist ;
55823: LD_ADDR_VAR 0 5
55827: PUSH
55828: LD_VAR 0 6
55832: ST_TO_ADDR
// end ; end ;
55833: GO 55747
55835: POP
55836: POP
// result := hex ;
55837: LD_ADDR_VAR 0 3
55841: PUSH
55842: LD_VAR 0 8
55846: ST_TO_ADDR
// end ;
55847: LD_VAR 0 3
55851: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55852: LD_INT 0
55854: PPUSH
55855: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55856: LD_VAR 0 1
55860: NOT
55861: PUSH
55862: LD_VAR 0 1
55866: PUSH
55867: LD_INT 21
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 23
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PPUSH
55891: CALL_OW 69
55895: IN
55896: NOT
55897: OR
55898: IFFALSE 55902
// exit ;
55900: GO 55949
// for i = 1 to 3 do
55902: LD_ADDR_VAR 0 3
55906: PUSH
55907: DOUBLE
55908: LD_INT 1
55910: DEC
55911: ST_TO_ADDR
55912: LD_INT 3
55914: PUSH
55915: FOR_TO
55916: IFFALSE 55947
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55918: LD_VAR 0 1
55922: PPUSH
55923: CALL_OW 250
55927: PPUSH
55928: LD_VAR 0 1
55932: PPUSH
55933: CALL_OW 251
55937: PPUSH
55938: LD_INT 1
55940: PPUSH
55941: CALL_OW 453
55945: GO 55915
55947: POP
55948: POP
// end ;
55949: LD_VAR 0 2
55953: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55954: LD_INT 0
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
55961: PPUSH
// if not unit or not enemy_unit then
55962: LD_VAR 0 1
55966: NOT
55967: PUSH
55968: LD_VAR 0 2
55972: NOT
55973: OR
55974: IFFALSE 55978
// exit ;
55976: GO 56445
// if GetLives ( i ) < 250 then
55978: LD_VAR 0 4
55982: PPUSH
55983: CALL_OW 256
55987: PUSH
55988: LD_INT 250
55990: LESS
55991: IFFALSE 56004
// begin ComAutodestruct ( i ) ;
55993: LD_VAR 0 4
55997: PPUSH
55998: CALL 55852 0 1
// exit ;
56002: GO 56445
// end ; x := GetX ( enemy_unit ) ;
56004: LD_ADDR_VAR 0 7
56008: PUSH
56009: LD_VAR 0 2
56013: PPUSH
56014: CALL_OW 250
56018: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56019: LD_ADDR_VAR 0 8
56023: PUSH
56024: LD_VAR 0 2
56028: PPUSH
56029: CALL_OW 251
56033: ST_TO_ADDR
// if not x or not y then
56034: LD_VAR 0 7
56038: NOT
56039: PUSH
56040: LD_VAR 0 8
56044: NOT
56045: OR
56046: IFFALSE 56050
// exit ;
56048: GO 56445
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56050: LD_ADDR_VAR 0 6
56054: PUSH
56055: LD_VAR 0 7
56059: PPUSH
56060: LD_INT 0
56062: PPUSH
56063: LD_INT 4
56065: PPUSH
56066: CALL_OW 272
56070: PUSH
56071: LD_VAR 0 8
56075: PPUSH
56076: LD_INT 0
56078: PPUSH
56079: LD_INT 4
56081: PPUSH
56082: CALL_OW 273
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_VAR 0 7
56095: PPUSH
56096: LD_INT 1
56098: PPUSH
56099: LD_INT 4
56101: PPUSH
56102: CALL_OW 272
56106: PUSH
56107: LD_VAR 0 8
56111: PPUSH
56112: LD_INT 1
56114: PPUSH
56115: LD_INT 4
56117: PPUSH
56118: CALL_OW 273
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_VAR 0 7
56131: PPUSH
56132: LD_INT 2
56134: PPUSH
56135: LD_INT 4
56137: PPUSH
56138: CALL_OW 272
56142: PUSH
56143: LD_VAR 0 8
56147: PPUSH
56148: LD_INT 2
56150: PPUSH
56151: LD_INT 4
56153: PPUSH
56154: CALL_OW 273
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_VAR 0 7
56167: PPUSH
56168: LD_INT 3
56170: PPUSH
56171: LD_INT 4
56173: PPUSH
56174: CALL_OW 272
56178: PUSH
56179: LD_VAR 0 8
56183: PPUSH
56184: LD_INT 3
56186: PPUSH
56187: LD_INT 4
56189: PPUSH
56190: CALL_OW 273
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_VAR 0 7
56203: PPUSH
56204: LD_INT 4
56206: PPUSH
56207: LD_INT 4
56209: PPUSH
56210: CALL_OW 272
56214: PUSH
56215: LD_VAR 0 8
56219: PPUSH
56220: LD_INT 4
56222: PPUSH
56223: LD_INT 4
56225: PPUSH
56226: CALL_OW 273
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_VAR 0 7
56239: PPUSH
56240: LD_INT 5
56242: PPUSH
56243: LD_INT 4
56245: PPUSH
56246: CALL_OW 272
56250: PUSH
56251: LD_VAR 0 8
56255: PPUSH
56256: LD_INT 5
56258: PPUSH
56259: LD_INT 4
56261: PPUSH
56262: CALL_OW 273
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: ST_TO_ADDR
// for i = tmp downto 1 do
56279: LD_ADDR_VAR 0 4
56283: PUSH
56284: DOUBLE
56285: LD_VAR 0 6
56289: INC
56290: ST_TO_ADDR
56291: LD_INT 1
56293: PUSH
56294: FOR_DOWNTO
56295: IFFALSE 56396
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56297: LD_VAR 0 6
56301: PUSH
56302: LD_VAR 0 4
56306: ARRAY
56307: PUSH
56308: LD_INT 1
56310: ARRAY
56311: PPUSH
56312: LD_VAR 0 6
56316: PUSH
56317: LD_VAR 0 4
56321: ARRAY
56322: PUSH
56323: LD_INT 2
56325: ARRAY
56326: PPUSH
56327: CALL_OW 488
56331: NOT
56332: PUSH
56333: LD_VAR 0 6
56337: PUSH
56338: LD_VAR 0 4
56342: ARRAY
56343: PUSH
56344: LD_INT 1
56346: ARRAY
56347: PPUSH
56348: LD_VAR 0 6
56352: PUSH
56353: LD_VAR 0 4
56357: ARRAY
56358: PUSH
56359: LD_INT 2
56361: ARRAY
56362: PPUSH
56363: CALL_OW 428
56367: PUSH
56368: LD_INT 0
56370: NONEQUAL
56371: OR
56372: IFFALSE 56394
// tmp := Delete ( tmp , i ) ;
56374: LD_ADDR_VAR 0 6
56378: PUSH
56379: LD_VAR 0 6
56383: PPUSH
56384: LD_VAR 0 4
56388: PPUSH
56389: CALL_OW 3
56393: ST_TO_ADDR
56394: GO 56294
56396: POP
56397: POP
// j := GetClosestHex ( unit , tmp ) ;
56398: LD_ADDR_VAR 0 5
56402: PUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: LD_VAR 0 6
56412: PPUSH
56413: CALL 55700 0 2
56417: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56418: LD_VAR 0 1
56422: PPUSH
56423: LD_VAR 0 5
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PPUSH
56432: LD_VAR 0 5
56436: PUSH
56437: LD_INT 2
56439: ARRAY
56440: PPUSH
56441: CALL_OW 111
// end ;
56445: LD_VAR 0 3
56449: RET
// export function PrepareApemanSoldier ( ) ; begin
56450: LD_INT 0
56452: PPUSH
// uc_nation := 0 ;
56453: LD_ADDR_OWVAR 21
56457: PUSH
56458: LD_INT 0
56460: ST_TO_ADDR
// hc_sex := sex_male ;
56461: LD_ADDR_OWVAR 27
56465: PUSH
56466: LD_INT 1
56468: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56469: LD_ADDR_OWVAR 28
56473: PUSH
56474: LD_INT 15
56476: ST_TO_ADDR
// hc_gallery :=  ;
56477: LD_ADDR_OWVAR 33
56481: PUSH
56482: LD_STRING 
56484: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56485: LD_ADDR_OWVAR 31
56489: PUSH
56490: LD_INT 0
56492: PPUSH
56493: LD_INT 3
56495: PPUSH
56496: CALL_OW 12
56500: PUSH
56501: LD_INT 0
56503: PPUSH
56504: LD_INT 3
56506: PPUSH
56507: CALL_OW 12
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// end ;
56524: LD_VAR 0 1
56528: RET
// export function PrepareApemanEngineer ( ) ; begin
56529: LD_INT 0
56531: PPUSH
// uc_nation := 0 ;
56532: LD_ADDR_OWVAR 21
56536: PUSH
56537: LD_INT 0
56539: ST_TO_ADDR
// hc_sex := sex_male ;
56540: LD_ADDR_OWVAR 27
56544: PUSH
56545: LD_INT 1
56547: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56548: LD_ADDR_OWVAR 28
56552: PUSH
56553: LD_INT 16
56555: ST_TO_ADDR
// hc_gallery :=  ;
56556: LD_ADDR_OWVAR 33
56560: PUSH
56561: LD_STRING 
56563: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56564: LD_ADDR_OWVAR 31
56568: PUSH
56569: LD_INT 0
56571: PPUSH
56572: LD_INT 3
56574: PPUSH
56575: CALL_OW 12
56579: PUSH
56580: LD_INT 0
56582: PPUSH
56583: LD_INT 3
56585: PPUSH
56586: CALL_OW 12
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: ST_TO_ADDR
// end ;
56603: LD_VAR 0 1
56607: RET
// export function PrepareApeman ( agressivity ) ; begin
56608: LD_INT 0
56610: PPUSH
// uc_side := 0 ;
56611: LD_ADDR_OWVAR 20
56615: PUSH
56616: LD_INT 0
56618: ST_TO_ADDR
// uc_nation := 0 ;
56619: LD_ADDR_OWVAR 21
56623: PUSH
56624: LD_INT 0
56626: ST_TO_ADDR
// hc_sex := sex_male ;
56627: LD_ADDR_OWVAR 27
56631: PUSH
56632: LD_INT 1
56634: ST_TO_ADDR
// hc_class := class_apeman ;
56635: LD_ADDR_OWVAR 28
56639: PUSH
56640: LD_INT 12
56642: ST_TO_ADDR
// hc_gallery :=  ;
56643: LD_ADDR_OWVAR 33
56647: PUSH
56648: LD_STRING 
56650: ST_TO_ADDR
// if agressivity = 0 then
56651: LD_VAR 0 1
56655: PUSH
56656: LD_INT 0
56658: EQUAL
56659: IFFALSE 56671
// hc_agressivity := 0 else
56661: LD_ADDR_OWVAR 35
56665: PUSH
56666: LD_INT 0
56668: ST_TO_ADDR
56669: GO 56692
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56671: LD_ADDR_OWVAR 35
56675: PUSH
56676: LD_VAR 0 1
56680: NEG
56681: PPUSH
56682: LD_VAR 0 1
56686: PPUSH
56687: CALL_OW 12
56691: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56692: LD_ADDR_OWVAR 31
56696: PUSH
56697: LD_INT 0
56699: PPUSH
56700: LD_INT 3
56702: PPUSH
56703: CALL_OW 12
56707: PUSH
56708: LD_INT 0
56710: PPUSH
56711: LD_INT 3
56713: PPUSH
56714: CALL_OW 12
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// end ;
56731: LD_VAR 0 2
56735: RET
// export function PrepareTiger ( agressivity ) ; begin
56736: LD_INT 0
56738: PPUSH
// uc_side := 0 ;
56739: LD_ADDR_OWVAR 20
56743: PUSH
56744: LD_INT 0
56746: ST_TO_ADDR
// uc_nation := 0 ;
56747: LD_ADDR_OWVAR 21
56751: PUSH
56752: LD_INT 0
56754: ST_TO_ADDR
// hc_class := class_tiger ;
56755: LD_ADDR_OWVAR 28
56759: PUSH
56760: LD_INT 14
56762: ST_TO_ADDR
// hc_gallery :=  ;
56763: LD_ADDR_OWVAR 33
56767: PUSH
56768: LD_STRING 
56770: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56771: LD_ADDR_OWVAR 35
56775: PUSH
56776: LD_VAR 0 1
56780: NEG
56781: PPUSH
56782: LD_VAR 0 1
56786: PPUSH
56787: CALL_OW 12
56791: ST_TO_ADDR
// end ;
56792: LD_VAR 0 2
56796: RET
// export function PrepareEnchidna ( ) ; begin
56797: LD_INT 0
56799: PPUSH
// uc_side := 0 ;
56800: LD_ADDR_OWVAR 20
56804: PUSH
56805: LD_INT 0
56807: ST_TO_ADDR
// uc_nation := 0 ;
56808: LD_ADDR_OWVAR 21
56812: PUSH
56813: LD_INT 0
56815: ST_TO_ADDR
// hc_class := class_baggie ;
56816: LD_ADDR_OWVAR 28
56820: PUSH
56821: LD_INT 13
56823: ST_TO_ADDR
// hc_gallery :=  ;
56824: LD_ADDR_OWVAR 33
56828: PUSH
56829: LD_STRING 
56831: ST_TO_ADDR
// end ;
56832: LD_VAR 0 1
56836: RET
// export function PrepareFrog ( ) ; begin
56837: LD_INT 0
56839: PPUSH
// uc_side := 0 ;
56840: LD_ADDR_OWVAR 20
56844: PUSH
56845: LD_INT 0
56847: ST_TO_ADDR
// uc_nation := 0 ;
56848: LD_ADDR_OWVAR 21
56852: PUSH
56853: LD_INT 0
56855: ST_TO_ADDR
// hc_class := class_frog ;
56856: LD_ADDR_OWVAR 28
56860: PUSH
56861: LD_INT 19
56863: ST_TO_ADDR
// hc_gallery :=  ;
56864: LD_ADDR_OWVAR 33
56868: PUSH
56869: LD_STRING 
56871: ST_TO_ADDR
// end ;
56872: LD_VAR 0 1
56876: RET
// export function PrepareFish ( ) ; begin
56877: LD_INT 0
56879: PPUSH
// uc_side := 0 ;
56880: LD_ADDR_OWVAR 20
56884: PUSH
56885: LD_INT 0
56887: ST_TO_ADDR
// uc_nation := 0 ;
56888: LD_ADDR_OWVAR 21
56892: PUSH
56893: LD_INT 0
56895: ST_TO_ADDR
// hc_class := class_fish ;
56896: LD_ADDR_OWVAR 28
56900: PUSH
56901: LD_INT 20
56903: ST_TO_ADDR
// hc_gallery :=  ;
56904: LD_ADDR_OWVAR 33
56908: PUSH
56909: LD_STRING 
56911: ST_TO_ADDR
// end ;
56912: LD_VAR 0 1
56916: RET
// export function PrepareBird ( ) ; begin
56917: LD_INT 0
56919: PPUSH
// uc_side := 0 ;
56920: LD_ADDR_OWVAR 20
56924: PUSH
56925: LD_INT 0
56927: ST_TO_ADDR
// uc_nation := 0 ;
56928: LD_ADDR_OWVAR 21
56932: PUSH
56933: LD_INT 0
56935: ST_TO_ADDR
// hc_class := class_phororhacos ;
56936: LD_ADDR_OWVAR 28
56940: PUSH
56941: LD_INT 18
56943: ST_TO_ADDR
// hc_gallery :=  ;
56944: LD_ADDR_OWVAR 33
56948: PUSH
56949: LD_STRING 
56951: ST_TO_ADDR
// end ;
56952: LD_VAR 0 1
56956: RET
// export function PrepareHorse ( ) ; begin
56957: LD_INT 0
56959: PPUSH
// uc_side := 0 ;
56960: LD_ADDR_OWVAR 20
56964: PUSH
56965: LD_INT 0
56967: ST_TO_ADDR
// uc_nation := 0 ;
56968: LD_ADDR_OWVAR 21
56972: PUSH
56973: LD_INT 0
56975: ST_TO_ADDR
// hc_class := class_horse ;
56976: LD_ADDR_OWVAR 28
56980: PUSH
56981: LD_INT 21
56983: ST_TO_ADDR
// hc_gallery :=  ;
56984: LD_ADDR_OWVAR 33
56988: PUSH
56989: LD_STRING 
56991: ST_TO_ADDR
// end ;
56992: LD_VAR 0 1
56996: RET
// export function PrepareMastodont ( ) ; begin
56997: LD_INT 0
56999: PPUSH
// uc_side := 0 ;
57000: LD_ADDR_OWVAR 20
57004: PUSH
57005: LD_INT 0
57007: ST_TO_ADDR
// uc_nation := 0 ;
57008: LD_ADDR_OWVAR 21
57012: PUSH
57013: LD_INT 0
57015: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57016: LD_ADDR_OWVAR 37
57020: PUSH
57021: LD_INT 31
57023: ST_TO_ADDR
// vc_control := control_rider ;
57024: LD_ADDR_OWVAR 38
57028: PUSH
57029: LD_INT 4
57031: ST_TO_ADDR
// end ;
57032: LD_VAR 0 1
57036: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57037: LD_INT 0
57039: PPUSH
57040: PPUSH
57041: PPUSH
// uc_side = 0 ;
57042: LD_ADDR_OWVAR 20
57046: PUSH
57047: LD_INT 0
57049: ST_TO_ADDR
// uc_nation = 0 ;
57050: LD_ADDR_OWVAR 21
57054: PUSH
57055: LD_INT 0
57057: ST_TO_ADDR
// InitHc_All ( ) ;
57058: CALL_OW 584
// InitVc ;
57062: CALL_OW 20
// if mastodonts then
57066: LD_VAR 0 6
57070: IFFALSE 57137
// for i = 1 to mastodonts do
57072: LD_ADDR_VAR 0 11
57076: PUSH
57077: DOUBLE
57078: LD_INT 1
57080: DEC
57081: ST_TO_ADDR
57082: LD_VAR 0 6
57086: PUSH
57087: FOR_TO
57088: IFFALSE 57135
// begin vc_chassis := 31 ;
57090: LD_ADDR_OWVAR 37
57094: PUSH
57095: LD_INT 31
57097: ST_TO_ADDR
// vc_control := control_rider ;
57098: LD_ADDR_OWVAR 38
57102: PUSH
57103: LD_INT 4
57105: ST_TO_ADDR
// animal := CreateVehicle ;
57106: LD_ADDR_VAR 0 12
57110: PUSH
57111: CALL_OW 45
57115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57116: LD_VAR 0 12
57120: PPUSH
57121: LD_VAR 0 8
57125: PPUSH
57126: LD_INT 0
57128: PPUSH
57129: CALL 59265 0 3
// end ;
57133: GO 57087
57135: POP
57136: POP
// if horses then
57137: LD_VAR 0 5
57141: IFFALSE 57208
// for i = 1 to horses do
57143: LD_ADDR_VAR 0 11
57147: PUSH
57148: DOUBLE
57149: LD_INT 1
57151: DEC
57152: ST_TO_ADDR
57153: LD_VAR 0 5
57157: PUSH
57158: FOR_TO
57159: IFFALSE 57206
// begin hc_class := 21 ;
57161: LD_ADDR_OWVAR 28
57165: PUSH
57166: LD_INT 21
57168: ST_TO_ADDR
// hc_gallery :=  ;
57169: LD_ADDR_OWVAR 33
57173: PUSH
57174: LD_STRING 
57176: ST_TO_ADDR
// animal := CreateHuman ;
57177: LD_ADDR_VAR 0 12
57181: PUSH
57182: CALL_OW 44
57186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57187: LD_VAR 0 12
57191: PPUSH
57192: LD_VAR 0 8
57196: PPUSH
57197: LD_INT 0
57199: PPUSH
57200: CALL 59265 0 3
// end ;
57204: GO 57158
57206: POP
57207: POP
// if birds then
57208: LD_VAR 0 1
57212: IFFALSE 57279
// for i = 1 to birds do
57214: LD_ADDR_VAR 0 11
57218: PUSH
57219: DOUBLE
57220: LD_INT 1
57222: DEC
57223: ST_TO_ADDR
57224: LD_VAR 0 1
57228: PUSH
57229: FOR_TO
57230: IFFALSE 57277
// begin hc_class := 18 ;
57232: LD_ADDR_OWVAR 28
57236: PUSH
57237: LD_INT 18
57239: ST_TO_ADDR
// hc_gallery =  ;
57240: LD_ADDR_OWVAR 33
57244: PUSH
57245: LD_STRING 
57247: ST_TO_ADDR
// animal := CreateHuman ;
57248: LD_ADDR_VAR 0 12
57252: PUSH
57253: CALL_OW 44
57257: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57258: LD_VAR 0 12
57262: PPUSH
57263: LD_VAR 0 8
57267: PPUSH
57268: LD_INT 0
57270: PPUSH
57271: CALL 59265 0 3
// end ;
57275: GO 57229
57277: POP
57278: POP
// if tigers then
57279: LD_VAR 0 2
57283: IFFALSE 57367
// for i = 1 to tigers do
57285: LD_ADDR_VAR 0 11
57289: PUSH
57290: DOUBLE
57291: LD_INT 1
57293: DEC
57294: ST_TO_ADDR
57295: LD_VAR 0 2
57299: PUSH
57300: FOR_TO
57301: IFFALSE 57365
// begin hc_class = class_tiger ;
57303: LD_ADDR_OWVAR 28
57307: PUSH
57308: LD_INT 14
57310: ST_TO_ADDR
// hc_gallery =  ;
57311: LD_ADDR_OWVAR 33
57315: PUSH
57316: LD_STRING 
57318: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57319: LD_ADDR_OWVAR 35
57323: PUSH
57324: LD_INT 7
57326: NEG
57327: PPUSH
57328: LD_INT 7
57330: PPUSH
57331: CALL_OW 12
57335: ST_TO_ADDR
// animal := CreateHuman ;
57336: LD_ADDR_VAR 0 12
57340: PUSH
57341: CALL_OW 44
57345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57346: LD_VAR 0 12
57350: PPUSH
57351: LD_VAR 0 8
57355: PPUSH
57356: LD_INT 0
57358: PPUSH
57359: CALL 59265 0 3
// end ;
57363: GO 57300
57365: POP
57366: POP
// if apemans then
57367: LD_VAR 0 3
57371: IFFALSE 57494
// for i = 1 to apemans do
57373: LD_ADDR_VAR 0 11
57377: PUSH
57378: DOUBLE
57379: LD_INT 1
57381: DEC
57382: ST_TO_ADDR
57383: LD_VAR 0 3
57387: PUSH
57388: FOR_TO
57389: IFFALSE 57492
// begin hc_class = class_apeman ;
57391: LD_ADDR_OWVAR 28
57395: PUSH
57396: LD_INT 12
57398: ST_TO_ADDR
// hc_gallery =  ;
57399: LD_ADDR_OWVAR 33
57403: PUSH
57404: LD_STRING 
57406: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57407: LD_ADDR_OWVAR 35
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PPUSH
57416: LD_INT 2
57418: PPUSH
57419: CALL_OW 12
57423: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57424: LD_ADDR_OWVAR 31
57428: PUSH
57429: LD_INT 1
57431: PPUSH
57432: LD_INT 3
57434: PPUSH
57435: CALL_OW 12
57439: PUSH
57440: LD_INT 1
57442: PPUSH
57443: LD_INT 3
57445: PPUSH
57446: CALL_OW 12
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: ST_TO_ADDR
// animal := CreateHuman ;
57463: LD_ADDR_VAR 0 12
57467: PUSH
57468: CALL_OW 44
57472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57473: LD_VAR 0 12
57477: PPUSH
57478: LD_VAR 0 8
57482: PPUSH
57483: LD_INT 0
57485: PPUSH
57486: CALL 59265 0 3
// end ;
57490: GO 57388
57492: POP
57493: POP
// if enchidnas then
57494: LD_VAR 0 4
57498: IFFALSE 57565
// for i = 1 to enchidnas do
57500: LD_ADDR_VAR 0 11
57504: PUSH
57505: DOUBLE
57506: LD_INT 1
57508: DEC
57509: ST_TO_ADDR
57510: LD_VAR 0 4
57514: PUSH
57515: FOR_TO
57516: IFFALSE 57563
// begin hc_class = 13 ;
57518: LD_ADDR_OWVAR 28
57522: PUSH
57523: LD_INT 13
57525: ST_TO_ADDR
// hc_gallery =  ;
57526: LD_ADDR_OWVAR 33
57530: PUSH
57531: LD_STRING 
57533: ST_TO_ADDR
// animal := CreateHuman ;
57534: LD_ADDR_VAR 0 12
57538: PUSH
57539: CALL_OW 44
57543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57544: LD_VAR 0 12
57548: PPUSH
57549: LD_VAR 0 8
57553: PPUSH
57554: LD_INT 0
57556: PPUSH
57557: CALL 59265 0 3
// end ;
57561: GO 57515
57563: POP
57564: POP
// if fishes then
57565: LD_VAR 0 7
57569: IFFALSE 57636
// for i = 1 to fishes do
57571: LD_ADDR_VAR 0 11
57575: PUSH
57576: DOUBLE
57577: LD_INT 1
57579: DEC
57580: ST_TO_ADDR
57581: LD_VAR 0 7
57585: PUSH
57586: FOR_TO
57587: IFFALSE 57634
// begin hc_class = 20 ;
57589: LD_ADDR_OWVAR 28
57593: PUSH
57594: LD_INT 20
57596: ST_TO_ADDR
// hc_gallery =  ;
57597: LD_ADDR_OWVAR 33
57601: PUSH
57602: LD_STRING 
57604: ST_TO_ADDR
// animal := CreateHuman ;
57605: LD_ADDR_VAR 0 12
57609: PUSH
57610: CALL_OW 44
57614: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57615: LD_VAR 0 12
57619: PPUSH
57620: LD_VAR 0 9
57624: PPUSH
57625: LD_INT 0
57627: PPUSH
57628: CALL 59265 0 3
// end ;
57632: GO 57586
57634: POP
57635: POP
// end ;
57636: LD_VAR 0 10
57640: RET
// export function WantHeal ( sci , unit ) ; begin
57641: LD_INT 0
57643: PPUSH
// if GetTaskList ( sci ) > 0 then
57644: LD_VAR 0 1
57648: PPUSH
57649: CALL_OW 437
57653: PUSH
57654: LD_INT 0
57656: GREATER
57657: IFFALSE 57727
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57659: LD_VAR 0 1
57663: PPUSH
57664: CALL_OW 437
57668: PUSH
57669: LD_INT 1
57671: ARRAY
57672: PUSH
57673: LD_INT 1
57675: ARRAY
57676: PUSH
57677: LD_STRING l
57679: EQUAL
57680: PUSH
57681: LD_VAR 0 1
57685: PPUSH
57686: CALL_OW 437
57690: PUSH
57691: LD_INT 1
57693: ARRAY
57694: PUSH
57695: LD_INT 4
57697: ARRAY
57698: PUSH
57699: LD_VAR 0 2
57703: EQUAL
57704: AND
57705: IFFALSE 57717
// result := true else
57707: LD_ADDR_VAR 0 3
57711: PUSH
57712: LD_INT 1
57714: ST_TO_ADDR
57715: GO 57725
// result := false ;
57717: LD_ADDR_VAR 0 3
57721: PUSH
57722: LD_INT 0
57724: ST_TO_ADDR
// end else
57725: GO 57735
// result := false ;
57727: LD_ADDR_VAR 0 3
57731: PUSH
57732: LD_INT 0
57734: ST_TO_ADDR
// end ;
57735: LD_VAR 0 3
57739: RET
// export function HealTarget ( sci ) ; begin
57740: LD_INT 0
57742: PPUSH
// if not sci then
57743: LD_VAR 0 1
57747: NOT
57748: IFFALSE 57752
// exit ;
57750: GO 57817
// result := 0 ;
57752: LD_ADDR_VAR 0 2
57756: PUSH
57757: LD_INT 0
57759: ST_TO_ADDR
// if GetTaskList ( sci ) then
57760: LD_VAR 0 1
57764: PPUSH
57765: CALL_OW 437
57769: IFFALSE 57817
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57771: LD_VAR 0 1
57775: PPUSH
57776: CALL_OW 437
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PUSH
57789: LD_STRING l
57791: EQUAL
57792: IFFALSE 57817
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57794: LD_ADDR_VAR 0 2
57798: PUSH
57799: LD_VAR 0 1
57803: PPUSH
57804: CALL_OW 437
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: PUSH
57813: LD_INT 4
57815: ARRAY
57816: ST_TO_ADDR
// end ;
57817: LD_VAR 0 2
57821: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57822: LD_INT 0
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
// if not base_units then
57828: LD_VAR 0 1
57832: NOT
57833: IFFALSE 57837
// exit ;
57835: GO 57924
// result := false ;
57837: LD_ADDR_VAR 0 2
57841: PUSH
57842: LD_INT 0
57844: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57845: LD_ADDR_VAR 0 5
57849: PUSH
57850: LD_VAR 0 1
57854: PPUSH
57855: LD_INT 21
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PPUSH
57865: CALL_OW 72
57869: ST_TO_ADDR
// if not tmp then
57870: LD_VAR 0 5
57874: NOT
57875: IFFALSE 57879
// exit ;
57877: GO 57924
// for i in tmp do
57879: LD_ADDR_VAR 0 3
57883: PUSH
57884: LD_VAR 0 5
57888: PUSH
57889: FOR_IN
57890: IFFALSE 57922
// begin result := EnemyInRange ( i , 22 ) ;
57892: LD_ADDR_VAR 0 2
57896: PUSH
57897: LD_VAR 0 3
57901: PPUSH
57902: LD_INT 22
57904: PPUSH
57905: CALL 55502 0 2
57909: ST_TO_ADDR
// if result then
57910: LD_VAR 0 2
57914: IFFALSE 57920
// exit ;
57916: POP
57917: POP
57918: GO 57924
// end ;
57920: GO 57889
57922: POP
57923: POP
// end ;
57924: LD_VAR 0 2
57928: RET
// export function FilterByTag ( units , tag ) ; begin
57929: LD_INT 0
57931: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57932: LD_ADDR_VAR 0 3
57936: PUSH
57937: LD_VAR 0 1
57941: PPUSH
57942: LD_INT 120
57944: PUSH
57945: LD_VAR 0 2
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PPUSH
57954: CALL_OW 72
57958: ST_TO_ADDR
// end ;
57959: LD_VAR 0 3
57963: RET
// export function IsDriver ( un ) ; begin
57964: LD_INT 0
57966: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57967: LD_ADDR_VAR 0 2
57971: PUSH
57972: LD_VAR 0 1
57976: PUSH
57977: LD_INT 55
57979: PUSH
57980: EMPTY
57981: LIST
57982: PPUSH
57983: CALL_OW 69
57987: IN
57988: ST_TO_ADDR
// end ;
57989: LD_VAR 0 2
57993: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57994: LD_INT 0
57996: PPUSH
57997: PPUSH
// list := [ ] ;
57998: LD_ADDR_VAR 0 5
58002: PUSH
58003: EMPTY
58004: ST_TO_ADDR
// case d of 0 :
58005: LD_VAR 0 3
58009: PUSH
58010: LD_INT 0
58012: DOUBLE
58013: EQUAL
58014: IFTRUE 58018
58016: GO 58151
58018: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58019: LD_ADDR_VAR 0 5
58023: PUSH
58024: LD_VAR 0 1
58028: PUSH
58029: LD_INT 4
58031: MINUS
58032: PUSH
58033: LD_VAR 0 2
58037: PUSH
58038: LD_INT 4
58040: MINUS
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: PUSH
58050: LD_VAR 0 1
58054: PUSH
58055: LD_INT 3
58057: MINUS
58058: PUSH
58059: LD_VAR 0 2
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: PUSH
58072: LD_VAR 0 1
58076: PUSH
58077: LD_INT 4
58079: PLUS
58080: PUSH
58081: LD_VAR 0 2
58085: PUSH
58086: LD_INT 4
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: PUSH
58094: LD_VAR 0 1
58098: PUSH
58099: LD_INT 3
58101: PLUS
58102: PUSH
58103: LD_VAR 0 2
58107: PUSH
58108: LD_INT 3
58110: PLUS
58111: PUSH
58112: LD_INT 5
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: LIST
58119: PUSH
58120: LD_VAR 0 1
58124: PUSH
58125: LD_VAR 0 2
58129: PUSH
58130: LD_INT 4
58132: PLUS
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// end ; 1 :
58149: GO 58849
58151: LD_INT 1
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58159
58157: GO 58292
58159: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58160: LD_ADDR_VAR 0 5
58164: PUSH
58165: LD_VAR 0 1
58169: PUSH
58170: LD_VAR 0 2
58174: PUSH
58175: LD_INT 4
58177: MINUS
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: PUSH
58187: LD_VAR 0 1
58191: PUSH
58192: LD_INT 3
58194: MINUS
58195: PUSH
58196: LD_VAR 0 2
58200: PUSH
58201: LD_INT 3
58203: MINUS
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: PUSH
58213: LD_VAR 0 1
58217: PUSH
58218: LD_INT 4
58220: MINUS
58221: PUSH
58222: LD_VAR 0 2
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: PUSH
58235: LD_VAR 0 1
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: LD_INT 3
58247: PLUS
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_INT 4
58264: PLUS
58265: PUSH
58266: LD_VAR 0 2
58270: PUSH
58271: LD_INT 4
58273: PLUS
58274: PUSH
58275: LD_INT 5
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: ST_TO_ADDR
// end ; 2 :
58290: GO 58849
58292: LD_INT 2
58294: DOUBLE
58295: EQUAL
58296: IFTRUE 58300
58298: GO 58429
58300: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58301: LD_ADDR_VAR 0 5
58305: PUSH
58306: LD_VAR 0 1
58310: PUSH
58311: LD_VAR 0 2
58315: PUSH
58316: LD_INT 3
58318: MINUS
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: LIST
58327: PUSH
58328: LD_VAR 0 1
58332: PUSH
58333: LD_INT 4
58335: PLUS
58336: PUSH
58337: LD_VAR 0 2
58341: PUSH
58342: LD_INT 4
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: PUSH
58350: LD_VAR 0 1
58354: PUSH
58355: LD_VAR 0 2
58359: PUSH
58360: LD_INT 4
58362: PLUS
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: PUSH
58372: LD_VAR 0 1
58376: PUSH
58377: LD_INT 3
58379: MINUS
58380: PUSH
58381: LD_VAR 0 2
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: PUSH
58394: LD_VAR 0 1
58398: PUSH
58399: LD_INT 4
58401: MINUS
58402: PUSH
58403: LD_VAR 0 2
58407: PUSH
58408: LD_INT 4
58410: MINUS
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: ST_TO_ADDR
// end ; 3 :
58427: GO 58849
58429: LD_INT 3
58431: DOUBLE
58432: EQUAL
58433: IFTRUE 58437
58435: GO 58570
58437: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58438: LD_ADDR_VAR 0 5
58442: PUSH
58443: LD_VAR 0 1
58447: PUSH
58448: LD_INT 3
58450: PLUS
58451: PUSH
58452: LD_VAR 0 2
58456: PUSH
58457: LD_INT 4
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: PUSH
58465: LD_VAR 0 1
58469: PUSH
58470: LD_INT 4
58472: PLUS
58473: PUSH
58474: LD_VAR 0 2
58478: PUSH
58479: LD_INT 4
58481: PLUS
58482: PUSH
58483: LD_INT 5
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: LIST
58490: PUSH
58491: LD_VAR 0 1
58495: PUSH
58496: LD_INT 4
58498: MINUS
58499: PUSH
58500: LD_VAR 0 2
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: PUSH
58513: LD_VAR 0 1
58517: PUSH
58518: LD_VAR 0 2
58522: PUSH
58523: LD_INT 4
58525: MINUS
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: LIST
58534: PUSH
58535: LD_VAR 0 1
58539: PUSH
58540: LD_INT 3
58542: MINUS
58543: PUSH
58544: LD_VAR 0 2
58548: PUSH
58549: LD_INT 3
58551: MINUS
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: ST_TO_ADDR
// end ; 4 :
58568: GO 58849
58570: LD_INT 4
58572: DOUBLE
58573: EQUAL
58574: IFTRUE 58578
58576: GO 58711
58578: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58579: LD_ADDR_VAR 0 5
58583: PUSH
58584: LD_VAR 0 1
58588: PUSH
58589: LD_VAR 0 2
58593: PUSH
58594: LD_INT 4
58596: PLUS
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: PUSH
58606: LD_VAR 0 1
58610: PUSH
58611: LD_INT 3
58613: PLUS
58614: PUSH
58615: LD_VAR 0 2
58619: PUSH
58620: LD_INT 3
58622: PLUS
58623: PUSH
58624: LD_INT 5
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: PUSH
58632: LD_VAR 0 1
58636: PUSH
58637: LD_INT 4
58639: PLUS
58640: PUSH
58641: LD_VAR 0 2
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: PUSH
58654: LD_VAR 0 1
58658: PUSH
58659: LD_VAR 0 2
58663: PUSH
58664: LD_INT 3
58666: MINUS
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: PUSH
58676: LD_VAR 0 1
58680: PUSH
58681: LD_INT 4
58683: MINUS
58684: PUSH
58685: LD_VAR 0 2
58689: PUSH
58690: LD_INT 4
58692: MINUS
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: ST_TO_ADDR
// end ; 5 :
58709: GO 58849
58711: LD_INT 5
58713: DOUBLE
58714: EQUAL
58715: IFTRUE 58719
58717: GO 58848
58719: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58720: LD_ADDR_VAR 0 5
58724: PUSH
58725: LD_VAR 0 1
58729: PUSH
58730: LD_INT 4
58732: MINUS
58733: PUSH
58734: LD_VAR 0 2
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: PUSH
58747: LD_VAR 0 1
58751: PUSH
58752: LD_VAR 0 2
58756: PUSH
58757: LD_INT 4
58759: MINUS
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: PUSH
58769: LD_VAR 0 1
58773: PUSH
58774: LD_INT 4
58776: PLUS
58777: PUSH
58778: LD_VAR 0 2
58782: PUSH
58783: LD_INT 4
58785: PLUS
58786: PUSH
58787: LD_INT 5
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: PUSH
58795: LD_VAR 0 1
58799: PUSH
58800: LD_INT 3
58802: PLUS
58803: PUSH
58804: LD_VAR 0 2
58808: PUSH
58809: LD_INT 4
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: PUSH
58817: LD_VAR 0 1
58821: PUSH
58822: LD_VAR 0 2
58826: PUSH
58827: LD_INT 3
58829: PLUS
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// end ; end ;
58846: GO 58849
58848: POP
// result := list ;
58849: LD_ADDR_VAR 0 4
58853: PUSH
58854: LD_VAR 0 5
58858: ST_TO_ADDR
// end ;
58859: LD_VAR 0 4
58863: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58864: LD_INT 0
58866: PPUSH
58867: PPUSH
58868: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58869: LD_VAR 0 1
58873: NOT
58874: PUSH
58875: LD_VAR 0 2
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 3
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: IN
58898: NOT
58899: OR
58900: IFFALSE 58904
// exit ;
58902: GO 58987
// tmp := [ ] ;
58904: LD_ADDR_VAR 0 5
58908: PUSH
58909: EMPTY
58910: ST_TO_ADDR
// for i in units do
58911: LD_ADDR_VAR 0 4
58915: PUSH
58916: LD_VAR 0 1
58920: PUSH
58921: FOR_IN
58922: IFFALSE 58956
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58924: LD_ADDR_VAR 0 5
58928: PUSH
58929: LD_VAR 0 5
58933: PPUSH
58934: LD_VAR 0 4
58938: PPUSH
58939: LD_VAR 0 2
58943: PPUSH
58944: CALL_OW 259
58948: PPUSH
58949: CALL 60360 0 2
58953: ST_TO_ADDR
58954: GO 58921
58956: POP
58957: POP
// if not tmp then
58958: LD_VAR 0 5
58962: NOT
58963: IFFALSE 58967
// exit ;
58965: GO 58987
// result := SortListByListDesc ( units , tmp ) ;
58967: LD_ADDR_VAR 0 3
58971: PUSH
58972: LD_VAR 0 1
58976: PPUSH
58977: LD_VAR 0 5
58981: PPUSH
58982: CALL_OW 77
58986: ST_TO_ADDR
// end ;
58987: LD_VAR 0 3
58991: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58992: LD_INT 0
58994: PPUSH
58995: PPUSH
58996: PPUSH
// result := false ;
58997: LD_ADDR_VAR 0 3
59001: PUSH
59002: LD_INT 0
59004: ST_TO_ADDR
// if not building then
59005: LD_VAR 0 2
59009: NOT
59010: IFFALSE 59014
// exit ;
59012: GO 59152
// x := GetX ( building ) ;
59014: LD_ADDR_VAR 0 4
59018: PUSH
59019: LD_VAR 0 2
59023: PPUSH
59024: CALL_OW 250
59028: ST_TO_ADDR
// y := GetY ( building ) ;
59029: LD_ADDR_VAR 0 5
59033: PUSH
59034: LD_VAR 0 2
59038: PPUSH
59039: CALL_OW 251
59043: ST_TO_ADDR
// if not x or not y then
59044: LD_VAR 0 4
59048: NOT
59049: PUSH
59050: LD_VAR 0 5
59054: NOT
59055: OR
59056: IFFALSE 59060
// exit ;
59058: GO 59152
// if GetTaskList ( unit ) then
59060: LD_VAR 0 1
59064: PPUSH
59065: CALL_OW 437
59069: IFFALSE 59152
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59071: LD_STRING e
59073: PUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 437
59083: PUSH
59084: LD_INT 1
59086: ARRAY
59087: PUSH
59088: LD_INT 1
59090: ARRAY
59091: EQUAL
59092: PUSH
59093: LD_VAR 0 4
59097: PUSH
59098: LD_VAR 0 1
59102: PPUSH
59103: CALL_OW 437
59107: PUSH
59108: LD_INT 1
59110: ARRAY
59111: PUSH
59112: LD_INT 2
59114: ARRAY
59115: EQUAL
59116: AND
59117: PUSH
59118: LD_VAR 0 5
59122: PUSH
59123: LD_VAR 0 1
59127: PPUSH
59128: CALL_OW 437
59132: PUSH
59133: LD_INT 1
59135: ARRAY
59136: PUSH
59137: LD_INT 3
59139: ARRAY
59140: EQUAL
59141: AND
59142: IFFALSE 59152
// result := true end ;
59144: LD_ADDR_VAR 0 3
59148: PUSH
59149: LD_INT 1
59151: ST_TO_ADDR
// end ;
59152: LD_VAR 0 3
59156: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59157: LD_INT 0
59159: PPUSH
// result := false ;
59160: LD_ADDR_VAR 0 4
59164: PUSH
59165: LD_INT 0
59167: ST_TO_ADDR
// if GetTaskList ( unit ) then
59168: LD_VAR 0 1
59172: PPUSH
59173: CALL_OW 437
59177: IFFALSE 59260
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59179: LD_STRING M
59181: PUSH
59182: LD_VAR 0 1
59186: PPUSH
59187: CALL_OW 437
59191: PUSH
59192: LD_INT 1
59194: ARRAY
59195: PUSH
59196: LD_INT 1
59198: ARRAY
59199: EQUAL
59200: PUSH
59201: LD_VAR 0 2
59205: PUSH
59206: LD_VAR 0 1
59210: PPUSH
59211: CALL_OW 437
59215: PUSH
59216: LD_INT 1
59218: ARRAY
59219: PUSH
59220: LD_INT 2
59222: ARRAY
59223: EQUAL
59224: AND
59225: PUSH
59226: LD_VAR 0 3
59230: PUSH
59231: LD_VAR 0 1
59235: PPUSH
59236: CALL_OW 437
59240: PUSH
59241: LD_INT 1
59243: ARRAY
59244: PUSH
59245: LD_INT 3
59247: ARRAY
59248: EQUAL
59249: AND
59250: IFFALSE 59260
// result := true ;
59252: LD_ADDR_VAR 0 4
59256: PUSH
59257: LD_INT 1
59259: ST_TO_ADDR
// end ; end ;
59260: LD_VAR 0 4
59264: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59265: LD_INT 0
59267: PPUSH
59268: PPUSH
59269: PPUSH
59270: PPUSH
// if not unit or not area then
59271: LD_VAR 0 1
59275: NOT
59276: PUSH
59277: LD_VAR 0 2
59281: NOT
59282: OR
59283: IFFALSE 59287
// exit ;
59285: GO 59463
// tmp := AreaToList ( area , i ) ;
59287: LD_ADDR_VAR 0 6
59291: PUSH
59292: LD_VAR 0 2
59296: PPUSH
59297: LD_VAR 0 5
59301: PPUSH
59302: CALL_OW 517
59306: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59307: LD_ADDR_VAR 0 5
59311: PUSH
59312: DOUBLE
59313: LD_INT 1
59315: DEC
59316: ST_TO_ADDR
59317: LD_VAR 0 6
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PUSH
59326: FOR_TO
59327: IFFALSE 59461
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59329: LD_ADDR_VAR 0 7
59333: PUSH
59334: LD_VAR 0 6
59338: PUSH
59339: LD_INT 1
59341: ARRAY
59342: PUSH
59343: LD_VAR 0 5
59347: ARRAY
59348: PUSH
59349: LD_VAR 0 6
59353: PUSH
59354: LD_INT 2
59356: ARRAY
59357: PUSH
59358: LD_VAR 0 5
59362: ARRAY
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
59368: LD_INT 92
59370: PUSH
59371: LD_VAR 0 7
59375: PUSH
59376: LD_INT 1
59378: ARRAY
59379: PUSH
59380: LD_VAR 0 7
59384: PUSH
59385: LD_INT 2
59387: ARRAY
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: PPUSH
59398: CALL_OW 69
59402: PUSH
59403: LD_INT 0
59405: EQUAL
59406: IFFALSE 59459
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59408: LD_VAR 0 1
59412: PPUSH
59413: LD_VAR 0 7
59417: PUSH
59418: LD_INT 1
59420: ARRAY
59421: PPUSH
59422: LD_VAR 0 7
59426: PUSH
59427: LD_INT 2
59429: ARRAY
59430: PPUSH
59431: LD_VAR 0 3
59435: PPUSH
59436: CALL_OW 48
// result := IsPlaced ( unit ) ;
59440: LD_ADDR_VAR 0 4
59444: PUSH
59445: LD_VAR 0 1
59449: PPUSH
59450: CALL_OW 305
59454: ST_TO_ADDR
// exit ;
59455: POP
59456: POP
59457: GO 59463
// end ; end ;
59459: GO 59326
59461: POP
59462: POP
// end ;
59463: LD_VAR 0 4
59467: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59468: LD_INT 0
59470: PPUSH
59471: PPUSH
59472: PPUSH
// if not side or side > 8 then
59473: LD_VAR 0 1
59477: NOT
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 8
59486: GREATER
59487: OR
59488: IFFALSE 59492
// exit ;
59490: GO 59679
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59492: LD_ADDR_VAR 0 4
59496: PUSH
59497: LD_INT 22
59499: PUSH
59500: LD_VAR 0 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 21
59511: PUSH
59512: LD_INT 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PPUSH
59523: CALL_OW 69
59527: ST_TO_ADDR
// if not tmp then
59528: LD_VAR 0 4
59532: NOT
59533: IFFALSE 59537
// exit ;
59535: GO 59679
// enable_addtolog := true ;
59537: LD_ADDR_OWVAR 81
59541: PUSH
59542: LD_INT 1
59544: ST_TO_ADDR
// AddToLog ( [ ) ;
59545: LD_STRING [
59547: PPUSH
59548: CALL_OW 561
// for i in tmp do
59552: LD_ADDR_VAR 0 3
59556: PUSH
59557: LD_VAR 0 4
59561: PUSH
59562: FOR_IN
59563: IFFALSE 59670
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59565: LD_STRING [
59567: PUSH
59568: LD_VAR 0 3
59572: PPUSH
59573: CALL_OW 266
59577: STR
59578: PUSH
59579: LD_STRING , 
59581: STR
59582: PUSH
59583: LD_VAR 0 3
59587: PPUSH
59588: CALL_OW 250
59592: STR
59593: PUSH
59594: LD_STRING , 
59596: STR
59597: PUSH
59598: LD_VAR 0 3
59602: PPUSH
59603: CALL_OW 251
59607: STR
59608: PUSH
59609: LD_STRING , 
59611: STR
59612: PUSH
59613: LD_VAR 0 3
59617: PPUSH
59618: CALL_OW 254
59622: STR
59623: PUSH
59624: LD_STRING , 
59626: STR
59627: PUSH
59628: LD_VAR 0 3
59632: PPUSH
59633: LD_INT 1
59635: PPUSH
59636: CALL_OW 268
59640: STR
59641: PUSH
59642: LD_STRING , 
59644: STR
59645: PUSH
59646: LD_VAR 0 3
59650: PPUSH
59651: LD_INT 2
59653: PPUSH
59654: CALL_OW 268
59658: STR
59659: PUSH
59660: LD_STRING ],
59662: STR
59663: PPUSH
59664: CALL_OW 561
// end ;
59668: GO 59562
59670: POP
59671: POP
// AddToLog ( ]; ) ;
59672: LD_STRING ];
59674: PPUSH
59675: CALL_OW 561
// end ;
59679: LD_VAR 0 2
59683: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59684: LD_INT 0
59686: PPUSH
59687: PPUSH
59688: PPUSH
59689: PPUSH
59690: PPUSH
// if not area or not rate or not max then
59691: LD_VAR 0 1
59695: NOT
59696: PUSH
59697: LD_VAR 0 2
59701: NOT
59702: OR
59703: PUSH
59704: LD_VAR 0 4
59708: NOT
59709: OR
59710: IFFALSE 59714
// exit ;
59712: GO 59903
// while 1 do
59714: LD_INT 1
59716: IFFALSE 59903
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59718: LD_ADDR_VAR 0 9
59722: PUSH
59723: LD_VAR 0 1
59727: PPUSH
59728: LD_INT 1
59730: PPUSH
59731: CALL_OW 287
59735: PUSH
59736: LD_INT 10
59738: MUL
59739: ST_TO_ADDR
// r := rate / 10 ;
59740: LD_ADDR_VAR 0 7
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 10
59752: DIVREAL
59753: ST_TO_ADDR
// time := 1 1$00 ;
59754: LD_ADDR_VAR 0 8
59758: PUSH
59759: LD_INT 2100
59761: ST_TO_ADDR
// if amount < min then
59762: LD_VAR 0 9
59766: PUSH
59767: LD_VAR 0 3
59771: LESS
59772: IFFALSE 59790
// r := r * 2 else
59774: LD_ADDR_VAR 0 7
59778: PUSH
59779: LD_VAR 0 7
59783: PUSH
59784: LD_INT 2
59786: MUL
59787: ST_TO_ADDR
59788: GO 59816
// if amount > max then
59790: LD_VAR 0 9
59794: PUSH
59795: LD_VAR 0 4
59799: GREATER
59800: IFFALSE 59816
// r := r / 2 ;
59802: LD_ADDR_VAR 0 7
59806: PUSH
59807: LD_VAR 0 7
59811: PUSH
59812: LD_INT 2
59814: DIVREAL
59815: ST_TO_ADDR
// time := time / r ;
59816: LD_ADDR_VAR 0 8
59820: PUSH
59821: LD_VAR 0 8
59825: PUSH
59826: LD_VAR 0 7
59830: DIVREAL
59831: ST_TO_ADDR
// if time < 0 then
59832: LD_VAR 0 8
59836: PUSH
59837: LD_INT 0
59839: LESS
59840: IFFALSE 59857
// time := time * - 1 ;
59842: LD_ADDR_VAR 0 8
59846: PUSH
59847: LD_VAR 0 8
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: MUL
59856: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59857: LD_VAR 0 8
59861: PUSH
59862: LD_INT 35
59864: PPUSH
59865: LD_INT 875
59867: PPUSH
59868: CALL_OW 12
59872: PLUS
59873: PPUSH
59874: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59878: LD_INT 1
59880: PPUSH
59881: LD_INT 5
59883: PPUSH
59884: CALL_OW 12
59888: PPUSH
59889: LD_VAR 0 1
59893: PPUSH
59894: LD_INT 1
59896: PPUSH
59897: CALL_OW 55
// end ;
59901: GO 59714
// end ;
59903: LD_VAR 0 5
59907: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59908: LD_INT 0
59910: PPUSH
59911: PPUSH
59912: PPUSH
59913: PPUSH
59914: PPUSH
59915: PPUSH
59916: PPUSH
59917: PPUSH
// if not turrets or not factories then
59918: LD_VAR 0 1
59922: NOT
59923: PUSH
59924: LD_VAR 0 2
59928: NOT
59929: OR
59930: IFFALSE 59934
// exit ;
59932: GO 60241
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59934: LD_ADDR_VAR 0 10
59938: PUSH
59939: LD_INT 5
59941: PUSH
59942: LD_INT 6
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: LD_INT 4
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 3
59961: PUSH
59962: LD_INT 5
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 24
59976: PUSH
59977: LD_INT 25
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 23
59986: PUSH
59987: LD_INT 27
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 42
60000: PUSH
60001: LD_INT 43
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 44
60010: PUSH
60011: LD_INT 46
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 45
60020: PUSH
60021: LD_INT 47
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
// result := [ ] ;
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: EMPTY
60044: ST_TO_ADDR
// for i in turrets do
60045: LD_ADDR_VAR 0 4
60049: PUSH
60050: LD_VAR 0 1
60054: PUSH
60055: FOR_IN
60056: IFFALSE 60239
// begin nat := GetNation ( i ) ;
60058: LD_ADDR_VAR 0 7
60062: PUSH
60063: LD_VAR 0 4
60067: PPUSH
60068: CALL_OW 248
60072: ST_TO_ADDR
// weapon := 0 ;
60073: LD_ADDR_VAR 0 8
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
// if not nat then
60081: LD_VAR 0 7
60085: NOT
60086: IFFALSE 60090
// continue ;
60088: GO 60055
// for j in list [ nat ] do
60090: LD_ADDR_VAR 0 5
60094: PUSH
60095: LD_VAR 0 10
60099: PUSH
60100: LD_VAR 0 7
60104: ARRAY
60105: PUSH
60106: FOR_IN
60107: IFFALSE 60148
// if GetBWeapon ( i ) = j [ 1 ] then
60109: LD_VAR 0 4
60113: PPUSH
60114: CALL_OW 269
60118: PUSH
60119: LD_VAR 0 5
60123: PUSH
60124: LD_INT 1
60126: ARRAY
60127: EQUAL
60128: IFFALSE 60146
// begin weapon := j [ 2 ] ;
60130: LD_ADDR_VAR 0 8
60134: PUSH
60135: LD_VAR 0 5
60139: PUSH
60140: LD_INT 2
60142: ARRAY
60143: ST_TO_ADDR
// break ;
60144: GO 60148
// end ;
60146: GO 60106
60148: POP
60149: POP
// if not weapon then
60150: LD_VAR 0 8
60154: NOT
60155: IFFALSE 60159
// continue ;
60157: GO 60055
// for k in factories do
60159: LD_ADDR_VAR 0 6
60163: PUSH
60164: LD_VAR 0 2
60168: PUSH
60169: FOR_IN
60170: IFFALSE 60235
// begin weapons := AvailableWeaponList ( k ) ;
60172: LD_ADDR_VAR 0 9
60176: PUSH
60177: LD_VAR 0 6
60181: PPUSH
60182: CALL_OW 478
60186: ST_TO_ADDR
// if not weapons then
60187: LD_VAR 0 9
60191: NOT
60192: IFFALSE 60196
// continue ;
60194: GO 60169
// if weapon in weapons then
60196: LD_VAR 0 8
60200: PUSH
60201: LD_VAR 0 9
60205: IN
60206: IFFALSE 60233
// begin result := [ i , weapon ] ;
60208: LD_ADDR_VAR 0 3
60212: PUSH
60213: LD_VAR 0 4
60217: PUSH
60218: LD_VAR 0 8
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// exit ;
60227: POP
60228: POP
60229: POP
60230: POP
60231: GO 60241
// end ; end ;
60233: GO 60169
60235: POP
60236: POP
// end ;
60237: GO 60055
60239: POP
60240: POP
// end ;
60241: LD_VAR 0 3
60245: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60246: LD_INT 0
60248: PPUSH
// if not side or side > 8 then
60249: LD_VAR 0 3
60253: NOT
60254: PUSH
60255: LD_VAR 0 3
60259: PUSH
60260: LD_INT 8
60262: GREATER
60263: OR
60264: IFFALSE 60268
// exit ;
60266: GO 60327
// if not range then
60268: LD_VAR 0 4
60272: NOT
60273: IFFALSE 60284
// range := - 12 ;
60275: LD_ADDR_VAR 0 4
60279: PUSH
60280: LD_INT 12
60282: NEG
60283: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60284: LD_VAR 0 1
60288: PPUSH
60289: LD_VAR 0 2
60293: PPUSH
60294: LD_VAR 0 3
60298: PPUSH
60299: LD_VAR 0 4
60303: PPUSH
60304: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60308: LD_VAR 0 1
60312: PPUSH
60313: LD_VAR 0 2
60317: PPUSH
60318: LD_VAR 0 3
60322: PPUSH
60323: CALL_OW 331
// end ;
60327: LD_VAR 0 5
60331: RET
// export function Video ( mode ) ; begin
60332: LD_INT 0
60334: PPUSH
// ingame_video = mode ;
60335: LD_ADDR_OWVAR 52
60339: PUSH
60340: LD_VAR 0 1
60344: ST_TO_ADDR
// interface_hidden = mode ;
60345: LD_ADDR_OWVAR 54
60349: PUSH
60350: LD_VAR 0 1
60354: ST_TO_ADDR
// end ;
60355: LD_VAR 0 2
60359: RET
// export function Join ( array , element ) ; begin
60360: LD_INT 0
60362: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60363: LD_ADDR_VAR 0 3
60367: PUSH
60368: LD_VAR 0 1
60372: PPUSH
60373: LD_VAR 0 1
60377: PUSH
60378: LD_INT 1
60380: PLUS
60381: PPUSH
60382: LD_VAR 0 2
60386: PPUSH
60387: CALL_OW 1
60391: ST_TO_ADDR
// end ;
60392: LD_VAR 0 3
60396: RET
// export function JoinUnion ( array , element ) ; begin
60397: LD_INT 0
60399: PPUSH
// result := array union element ;
60400: LD_ADDR_VAR 0 3
60404: PUSH
60405: LD_VAR 0 1
60409: PUSH
60410: LD_VAR 0 2
60414: UNION
60415: ST_TO_ADDR
// end ;
60416: LD_VAR 0 3
60420: RET
// export function GetBehemoths ( side ) ; begin
60421: LD_INT 0
60423: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60424: LD_ADDR_VAR 0 2
60428: PUSH
60429: LD_INT 22
60431: PUSH
60432: LD_VAR 0 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 31
60443: PUSH
60444: LD_INT 25
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PPUSH
60455: CALL_OW 69
60459: ST_TO_ADDR
// end ;
60460: LD_VAR 0 2
60464: RET
// export function Shuffle ( array ) ; var i , index ; begin
60465: LD_INT 0
60467: PPUSH
60468: PPUSH
60469: PPUSH
// result := [ ] ;
60470: LD_ADDR_VAR 0 2
60474: PUSH
60475: EMPTY
60476: ST_TO_ADDR
// if not array then
60477: LD_VAR 0 1
60481: NOT
60482: IFFALSE 60486
// exit ;
60484: GO 60585
// Randomize ;
60486: CALL_OW 10
// for i = array downto 1 do
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: DOUBLE
60496: LD_VAR 0 1
60500: INC
60501: ST_TO_ADDR
60502: LD_INT 1
60504: PUSH
60505: FOR_DOWNTO
60506: IFFALSE 60583
// begin index := rand ( 1 , array ) ;
60508: LD_ADDR_VAR 0 4
60512: PUSH
60513: LD_INT 1
60515: PPUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: CALL_OW 12
60525: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60526: LD_ADDR_VAR 0 2
60530: PUSH
60531: LD_VAR 0 2
60535: PPUSH
60536: LD_VAR 0 2
60540: PUSH
60541: LD_INT 1
60543: PLUS
60544: PPUSH
60545: LD_VAR 0 1
60549: PUSH
60550: LD_VAR 0 4
60554: ARRAY
60555: PPUSH
60556: CALL_OW 2
60560: ST_TO_ADDR
// array := Delete ( array , index ) ;
60561: LD_ADDR_VAR 0 1
60565: PUSH
60566: LD_VAR 0 1
60570: PPUSH
60571: LD_VAR 0 4
60575: PPUSH
60576: CALL_OW 3
60580: ST_TO_ADDR
// end ;
60581: GO 60505
60583: POP
60584: POP
// end ;
60585: LD_VAR 0 2
60589: RET
// export function GetBaseMaterials ( base ) ; begin
60590: LD_INT 0
60592: PPUSH
// result := [ 0 , 0 , 0 ] ;
60593: LD_ADDR_VAR 0 2
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: ST_TO_ADDR
// if not base then
60612: LD_VAR 0 1
60616: NOT
60617: IFFALSE 60621
// exit ;
60619: GO 60670
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60621: LD_ADDR_VAR 0 2
60625: PUSH
60626: LD_VAR 0 1
60630: PPUSH
60631: LD_INT 1
60633: PPUSH
60634: CALL_OW 275
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: LD_INT 2
60646: PPUSH
60647: CALL_OW 275
60651: PUSH
60652: LD_VAR 0 1
60656: PPUSH
60657: LD_INT 3
60659: PPUSH
60660: CALL_OW 275
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: LIST
60669: ST_TO_ADDR
// end ;
60670: LD_VAR 0 2
60674: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60675: LD_INT 0
60677: PPUSH
60678: PPUSH
// result := array ;
60679: LD_ADDR_VAR 0 3
60683: PUSH
60684: LD_VAR 0 1
60688: ST_TO_ADDR
// if size >= result then
60689: LD_VAR 0 2
60693: PUSH
60694: LD_VAR 0 3
60698: GREATEREQUAL
60699: IFFALSE 60703
// exit ;
60701: GO 60753
// if size then
60703: LD_VAR 0 2
60707: IFFALSE 60753
// for i := array downto size do
60709: LD_ADDR_VAR 0 4
60713: PUSH
60714: DOUBLE
60715: LD_VAR 0 1
60719: INC
60720: ST_TO_ADDR
60721: LD_VAR 0 2
60725: PUSH
60726: FOR_DOWNTO
60727: IFFALSE 60751
// result := Delete ( result , result ) ;
60729: LD_ADDR_VAR 0 3
60733: PUSH
60734: LD_VAR 0 3
60738: PPUSH
60739: LD_VAR 0 3
60743: PPUSH
60744: CALL_OW 3
60748: ST_TO_ADDR
60749: GO 60726
60751: POP
60752: POP
// end ;
60753: LD_VAR 0 3
60757: RET
// export function ComExit ( unit ) ; var tmp ; begin
60758: LD_INT 0
60760: PPUSH
60761: PPUSH
// if not IsInUnit ( unit ) then
60762: LD_VAR 0 1
60766: PPUSH
60767: CALL_OW 310
60771: NOT
60772: IFFALSE 60776
// exit ;
60774: GO 60836
// tmp := IsInUnit ( unit ) ;
60776: LD_ADDR_VAR 0 3
60780: PUSH
60781: LD_VAR 0 1
60785: PPUSH
60786: CALL_OW 310
60790: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60791: LD_VAR 0 3
60795: PPUSH
60796: CALL_OW 247
60800: PUSH
60801: LD_INT 2
60803: EQUAL
60804: IFFALSE 60817
// ComExitVehicle ( unit ) else
60806: LD_VAR 0 1
60810: PPUSH
60811: CALL_OW 121
60815: GO 60826
// ComExitBuilding ( unit ) ;
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 122
// result := tmp ;
60826: LD_ADDR_VAR 0 2
60830: PUSH
60831: LD_VAR 0 3
60835: ST_TO_ADDR
// end ;
60836: LD_VAR 0 2
60840: RET
// export function ComExitAll ( units ) ; var i ; begin
60841: LD_INT 0
60843: PPUSH
60844: PPUSH
// if not units then
60845: LD_VAR 0 1
60849: NOT
60850: IFFALSE 60854
// exit ;
60852: GO 60880
// for i in units do
60854: LD_ADDR_VAR 0 3
60858: PUSH
60859: LD_VAR 0 1
60863: PUSH
60864: FOR_IN
60865: IFFALSE 60878
// ComExit ( i ) ;
60867: LD_VAR 0 3
60871: PPUSH
60872: CALL 60758 0 1
60876: GO 60864
60878: POP
60879: POP
// end ;
60880: LD_VAR 0 2
60884: RET
// export function ResetHc ; begin
60885: LD_INT 0
60887: PPUSH
// InitHc ;
60888: CALL_OW 19
// hc_importance := 0 ;
60892: LD_ADDR_OWVAR 32
60896: PUSH
60897: LD_INT 0
60899: ST_TO_ADDR
// end ;
60900: LD_VAR 0 1
60904: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60905: LD_INT 0
60907: PPUSH
60908: PPUSH
60909: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60910: LD_ADDR_VAR 0 6
60914: PUSH
60915: LD_VAR 0 1
60919: PUSH
60920: LD_VAR 0 3
60924: PLUS
60925: PUSH
60926: LD_INT 2
60928: DIV
60929: ST_TO_ADDR
// if _x < 0 then
60930: LD_VAR 0 6
60934: PUSH
60935: LD_INT 0
60937: LESS
60938: IFFALSE 60955
// _x := _x * - 1 ;
60940: LD_ADDR_VAR 0 6
60944: PUSH
60945: LD_VAR 0 6
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: MUL
60954: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60955: LD_ADDR_VAR 0 7
60959: PUSH
60960: LD_VAR 0 2
60964: PUSH
60965: LD_VAR 0 4
60969: PLUS
60970: PUSH
60971: LD_INT 2
60973: DIV
60974: ST_TO_ADDR
// if _y < 0 then
60975: LD_VAR 0 7
60979: PUSH
60980: LD_INT 0
60982: LESS
60983: IFFALSE 61000
// _y := _y * - 1 ;
60985: LD_ADDR_VAR 0 7
60989: PUSH
60990: LD_VAR 0 7
60994: PUSH
60995: LD_INT 1
60997: NEG
60998: MUL
60999: ST_TO_ADDR
// result := [ _x , _y ] ;
61000: LD_ADDR_VAR 0 5
61004: PUSH
61005: LD_VAR 0 6
61009: PUSH
61010: LD_VAR 0 7
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: ST_TO_ADDR
// end ;
61019: LD_VAR 0 5
61023: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61024: LD_INT 0
61026: PPUSH
61027: PPUSH
61028: PPUSH
61029: PPUSH
// task := GetTaskList ( unit ) ;
61030: LD_ADDR_VAR 0 7
61034: PUSH
61035: LD_VAR 0 1
61039: PPUSH
61040: CALL_OW 437
61044: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61045: LD_VAR 0 7
61049: NOT
61050: PUSH
61051: LD_VAR 0 1
61055: PPUSH
61056: LD_VAR 0 2
61060: PPUSH
61061: CALL_OW 308
61065: NOT
61066: AND
61067: IFFALSE 61071
// exit ;
61069: GO 61189
// if IsInArea ( unit , area ) then
61071: LD_VAR 0 1
61075: PPUSH
61076: LD_VAR 0 2
61080: PPUSH
61081: CALL_OW 308
61085: IFFALSE 61103
// begin ComMoveToArea ( unit , goAway ) ;
61087: LD_VAR 0 1
61091: PPUSH
61092: LD_VAR 0 3
61096: PPUSH
61097: CALL_OW 113
// exit ;
61101: GO 61189
// end ; if task [ 1 ] [ 1 ] <> M then
61103: LD_VAR 0 7
61107: PUSH
61108: LD_INT 1
61110: ARRAY
61111: PUSH
61112: LD_INT 1
61114: ARRAY
61115: PUSH
61116: LD_STRING M
61118: NONEQUAL
61119: IFFALSE 61123
// exit ;
61121: GO 61189
// x := task [ 1 ] [ 2 ] ;
61123: LD_ADDR_VAR 0 5
61127: PUSH
61128: LD_VAR 0 7
61132: PUSH
61133: LD_INT 1
61135: ARRAY
61136: PUSH
61137: LD_INT 2
61139: ARRAY
61140: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61141: LD_ADDR_VAR 0 6
61145: PUSH
61146: LD_VAR 0 7
61150: PUSH
61151: LD_INT 1
61153: ARRAY
61154: PUSH
61155: LD_INT 3
61157: ARRAY
61158: ST_TO_ADDR
// if InArea ( x , y , area ) then
61159: LD_VAR 0 5
61163: PPUSH
61164: LD_VAR 0 6
61168: PPUSH
61169: LD_VAR 0 2
61173: PPUSH
61174: CALL_OW 309
61178: IFFALSE 61189
// ComStop ( unit ) ;
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 141
// end ;
61189: LD_VAR 0 4
61193: RET
// export function Abs ( value ) ; begin
61194: LD_INT 0
61196: PPUSH
// result := value ;
61197: LD_ADDR_VAR 0 2
61201: PUSH
61202: LD_VAR 0 1
61206: ST_TO_ADDR
// if value < 0 then
61207: LD_VAR 0 1
61211: PUSH
61212: LD_INT 0
61214: LESS
61215: IFFALSE 61232
// result := value * - 1 ;
61217: LD_ADDR_VAR 0 2
61221: PUSH
61222: LD_VAR 0 1
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: MUL
61231: ST_TO_ADDR
// end ;
61232: LD_VAR 0 2
61236: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61237: LD_INT 0
61239: PPUSH
61240: PPUSH
61241: PPUSH
61242: PPUSH
61243: PPUSH
61244: PPUSH
61245: PPUSH
61246: PPUSH
// if not unit or not building then
61247: LD_VAR 0 1
61251: NOT
61252: PUSH
61253: LD_VAR 0 2
61257: NOT
61258: OR
61259: IFFALSE 61263
// exit ;
61261: GO 61489
// x := GetX ( building ) ;
61263: LD_ADDR_VAR 0 4
61267: PUSH
61268: LD_VAR 0 2
61272: PPUSH
61273: CALL_OW 250
61277: ST_TO_ADDR
// y := GetY ( building ) ;
61278: LD_ADDR_VAR 0 6
61282: PUSH
61283: LD_VAR 0 2
61287: PPUSH
61288: CALL_OW 251
61292: ST_TO_ADDR
// d := GetDir ( building ) ;
61293: LD_ADDR_VAR 0 8
61297: PUSH
61298: LD_VAR 0 2
61302: PPUSH
61303: CALL_OW 254
61307: ST_TO_ADDR
// r := 4 ;
61308: LD_ADDR_VAR 0 9
61312: PUSH
61313: LD_INT 4
61315: ST_TO_ADDR
// for i := 1 to 5 do
61316: LD_ADDR_VAR 0 10
61320: PUSH
61321: DOUBLE
61322: LD_INT 1
61324: DEC
61325: ST_TO_ADDR
61326: LD_INT 5
61328: PUSH
61329: FOR_TO
61330: IFFALSE 61487
// begin _x := ShiftX ( x , d , r + i ) ;
61332: LD_ADDR_VAR 0 5
61336: PUSH
61337: LD_VAR 0 4
61341: PPUSH
61342: LD_VAR 0 8
61346: PPUSH
61347: LD_VAR 0 9
61351: PUSH
61352: LD_VAR 0 10
61356: PLUS
61357: PPUSH
61358: CALL_OW 272
61362: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61363: LD_ADDR_VAR 0 7
61367: PUSH
61368: LD_VAR 0 6
61372: PPUSH
61373: LD_VAR 0 8
61377: PPUSH
61378: LD_VAR 0 9
61382: PUSH
61383: LD_VAR 0 10
61387: PLUS
61388: PPUSH
61389: CALL_OW 273
61393: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61394: LD_VAR 0 5
61398: PPUSH
61399: LD_VAR 0 7
61403: PPUSH
61404: CALL_OW 488
61408: PUSH
61409: LD_VAR 0 5
61413: PPUSH
61414: LD_VAR 0 7
61418: PPUSH
61419: CALL_OW 428
61423: PPUSH
61424: CALL_OW 247
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: IN
61439: NOT
61440: AND
61441: IFFALSE 61485
// begin ComMoveXY ( unit , _x , _y ) ;
61443: LD_VAR 0 1
61447: PPUSH
61448: LD_VAR 0 5
61452: PPUSH
61453: LD_VAR 0 7
61457: PPUSH
61458: CALL_OW 111
// result := [ _x , _y ] ;
61462: LD_ADDR_VAR 0 3
61466: PUSH
61467: LD_VAR 0 5
61471: PUSH
61472: LD_VAR 0 7
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: ST_TO_ADDR
// exit ;
61481: POP
61482: POP
61483: GO 61489
// end ; end ;
61485: GO 61329
61487: POP
61488: POP
// end ;
61489: LD_VAR 0 3
61493: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61494: LD_INT 0
61496: PPUSH
61497: PPUSH
61498: PPUSH
// result := 0 ;
61499: LD_ADDR_VAR 0 3
61503: PUSH
61504: LD_INT 0
61506: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61507: LD_VAR 0 1
61511: PUSH
61512: LD_INT 0
61514: LESS
61515: PUSH
61516: LD_VAR 0 1
61520: PUSH
61521: LD_INT 8
61523: GREATER
61524: OR
61525: PUSH
61526: LD_VAR 0 2
61530: PUSH
61531: LD_INT 0
61533: LESS
61534: OR
61535: PUSH
61536: LD_VAR 0 2
61540: PUSH
61541: LD_INT 8
61543: GREATER
61544: OR
61545: IFFALSE 61549
// exit ;
61547: GO 61624
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61549: LD_ADDR_VAR 0 4
61553: PUSH
61554: LD_INT 22
61556: PUSH
61557: LD_VAR 0 2
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PPUSH
61566: CALL_OW 69
61570: PUSH
61571: FOR_IN
61572: IFFALSE 61622
// begin un := UnitShoot ( i ) ;
61574: LD_ADDR_VAR 0 5
61578: PUSH
61579: LD_VAR 0 4
61583: PPUSH
61584: CALL_OW 504
61588: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61589: LD_VAR 0 5
61593: PPUSH
61594: CALL_OW 255
61598: PUSH
61599: LD_VAR 0 1
61603: EQUAL
61604: IFFALSE 61620
// begin result := un ;
61606: LD_ADDR_VAR 0 3
61610: PUSH
61611: LD_VAR 0 5
61615: ST_TO_ADDR
// exit ;
61616: POP
61617: POP
61618: GO 61624
// end ; end ;
61620: GO 61571
61622: POP
61623: POP
// end ;
61624: LD_VAR 0 3
61628: RET
// export function GetCargoBay ( units ) ; begin
61629: LD_INT 0
61631: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61632: LD_ADDR_VAR 0 2
61636: PUSH
61637: LD_VAR 0 1
61641: PPUSH
61642: LD_INT 2
61644: PUSH
61645: LD_INT 34
61647: PUSH
61648: LD_INT 12
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 34
61657: PUSH
61658: LD_INT 51
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 34
61667: PUSH
61668: LD_INT 32
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 34
61677: PUSH
61678: LD_INT 89
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: PPUSH
61692: CALL_OW 72
61696: ST_TO_ADDR
// end ;
61697: LD_VAR 0 2
61701: RET
// export function Negate ( value ) ; begin
61702: LD_INT 0
61704: PPUSH
// result := not value ;
61705: LD_ADDR_VAR 0 2
61709: PUSH
61710: LD_VAR 0 1
61714: NOT
61715: ST_TO_ADDR
// end ;
61716: LD_VAR 0 2
61720: RET
// export function Inc ( value ) ; begin
61721: LD_INT 0
61723: PPUSH
// result := value + 1 ;
61724: LD_ADDR_VAR 0 2
61728: PUSH
61729: LD_VAR 0 1
61733: PUSH
61734: LD_INT 1
61736: PLUS
61737: ST_TO_ADDR
// end ;
61738: LD_VAR 0 2
61742: RET
// export function Dec ( value ) ; begin
61743: LD_INT 0
61745: PPUSH
// result := value - 1 ;
61746: LD_ADDR_VAR 0 2
61750: PUSH
61751: LD_VAR 0 1
61755: PUSH
61756: LD_INT 1
61758: MINUS
61759: ST_TO_ADDR
// end ;
61760: LD_VAR 0 2
61764: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61765: LD_INT 0
61767: PPUSH
61768: PPUSH
61769: PPUSH
61770: PPUSH
61771: PPUSH
61772: PPUSH
61773: PPUSH
61774: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61775: LD_VAR 0 1
61779: PPUSH
61780: LD_VAR 0 2
61784: PPUSH
61785: CALL_OW 488
61789: NOT
61790: PUSH
61791: LD_VAR 0 3
61795: PPUSH
61796: LD_VAR 0 4
61800: PPUSH
61801: CALL_OW 488
61805: NOT
61806: OR
61807: IFFALSE 61820
// begin result := - 1 ;
61809: LD_ADDR_VAR 0 5
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: ST_TO_ADDR
// exit ;
61818: GO 62055
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61820: LD_ADDR_VAR 0 12
61824: PUSH
61825: LD_VAR 0 1
61829: PPUSH
61830: LD_VAR 0 2
61834: PPUSH
61835: LD_VAR 0 3
61839: PPUSH
61840: LD_VAR 0 4
61844: PPUSH
61845: CALL 60905 0 4
61849: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61850: LD_ADDR_VAR 0 11
61854: PUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: LD_VAR 0 2
61864: PPUSH
61865: LD_VAR 0 12
61869: PUSH
61870: LD_INT 1
61872: ARRAY
61873: PPUSH
61874: LD_VAR 0 12
61878: PUSH
61879: LD_INT 2
61881: ARRAY
61882: PPUSH
61883: CALL_OW 298
61887: ST_TO_ADDR
// distance := 9999 ;
61888: LD_ADDR_VAR 0 10
61892: PUSH
61893: LD_INT 9999
61895: ST_TO_ADDR
// for i := 0 to 5 do
61896: LD_ADDR_VAR 0 6
61900: PUSH
61901: DOUBLE
61902: LD_INT 0
61904: DEC
61905: ST_TO_ADDR
61906: LD_INT 5
61908: PUSH
61909: FOR_TO
61910: IFFALSE 62053
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61912: LD_ADDR_VAR 0 7
61916: PUSH
61917: LD_VAR 0 1
61921: PPUSH
61922: LD_VAR 0 6
61926: PPUSH
61927: LD_VAR 0 11
61931: PPUSH
61932: CALL_OW 272
61936: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61937: LD_ADDR_VAR 0 8
61941: PUSH
61942: LD_VAR 0 2
61946: PPUSH
61947: LD_VAR 0 6
61951: PPUSH
61952: LD_VAR 0 11
61956: PPUSH
61957: CALL_OW 273
61961: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61962: LD_VAR 0 7
61966: PPUSH
61967: LD_VAR 0 8
61971: PPUSH
61972: CALL_OW 488
61976: NOT
61977: IFFALSE 61981
// continue ;
61979: GO 61909
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61981: LD_ADDR_VAR 0 9
61985: PUSH
61986: LD_VAR 0 12
61990: PUSH
61991: LD_INT 1
61993: ARRAY
61994: PPUSH
61995: LD_VAR 0 12
61999: PUSH
62000: LD_INT 2
62002: ARRAY
62003: PPUSH
62004: LD_VAR 0 7
62008: PPUSH
62009: LD_VAR 0 8
62013: PPUSH
62014: CALL_OW 298
62018: ST_TO_ADDR
// if tmp < distance then
62019: LD_VAR 0 9
62023: PUSH
62024: LD_VAR 0 10
62028: LESS
62029: IFFALSE 62051
// begin result := i ;
62031: LD_ADDR_VAR 0 5
62035: PUSH
62036: LD_VAR 0 6
62040: ST_TO_ADDR
// distance := tmp ;
62041: LD_ADDR_VAR 0 10
62045: PUSH
62046: LD_VAR 0 9
62050: ST_TO_ADDR
// end ; end ;
62051: GO 61909
62053: POP
62054: POP
// end ;
62055: LD_VAR 0 5
62059: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62060: LD_INT 0
62062: PPUSH
62063: PPUSH
// if not driver or not IsInUnit ( driver ) then
62064: LD_VAR 0 1
62068: NOT
62069: PUSH
62070: LD_VAR 0 1
62074: PPUSH
62075: CALL_OW 310
62079: NOT
62080: OR
62081: IFFALSE 62085
// exit ;
62083: GO 62175
// vehicle := IsInUnit ( driver ) ;
62085: LD_ADDR_VAR 0 3
62089: PUSH
62090: LD_VAR 0 1
62094: PPUSH
62095: CALL_OW 310
62099: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62100: LD_VAR 0 1
62104: PPUSH
62105: LD_STRING \
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: PUSH
62135: LD_STRING E
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_VAR 0 3
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PPUSH
62171: CALL_OW 446
// end ;
62175: LD_VAR 0 2
62179: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62180: LD_INT 0
62182: PPUSH
62183: PPUSH
// if not driver or not IsInUnit ( driver ) then
62184: LD_VAR 0 1
62188: NOT
62189: PUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 310
62199: NOT
62200: OR
62201: IFFALSE 62205
// exit ;
62203: GO 62295
// vehicle := IsInUnit ( driver ) ;
62205: LD_ADDR_VAR 0 3
62209: PUSH
62210: LD_VAR 0 1
62214: PPUSH
62215: CALL_OW 310
62219: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62220: LD_VAR 0 1
62224: PPUSH
62225: LD_STRING \
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: PUSH
62255: LD_STRING E
62257: PUSH
62258: LD_INT 0
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_VAR 0 3
62268: PUSH
62269: LD_INT 0
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PPUSH
62291: CALL_OW 447
// end ;
62295: LD_VAR 0 2
62299: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62300: LD_INT 0
62302: PPUSH
62303: PPUSH
62304: PPUSH
// tmp := [ ] ;
62305: LD_ADDR_VAR 0 5
62309: PUSH
62310: EMPTY
62311: ST_TO_ADDR
// for i in units do
62312: LD_ADDR_VAR 0 4
62316: PUSH
62317: LD_VAR 0 1
62321: PUSH
62322: FOR_IN
62323: IFFALSE 62361
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62325: LD_ADDR_VAR 0 5
62329: PUSH
62330: LD_VAR 0 5
62334: PPUSH
62335: LD_VAR 0 5
62339: PUSH
62340: LD_INT 1
62342: PLUS
62343: PPUSH
62344: LD_VAR 0 4
62348: PPUSH
62349: CALL_OW 256
62353: PPUSH
62354: CALL_OW 2
62358: ST_TO_ADDR
62359: GO 62322
62361: POP
62362: POP
// if not tmp then
62363: LD_VAR 0 5
62367: NOT
62368: IFFALSE 62372
// exit ;
62370: GO 62420
// if asc then
62372: LD_VAR 0 2
62376: IFFALSE 62400
// result := SortListByListAsc ( units , tmp ) else
62378: LD_ADDR_VAR 0 3
62382: PUSH
62383: LD_VAR 0 1
62387: PPUSH
62388: LD_VAR 0 5
62392: PPUSH
62393: CALL_OW 76
62397: ST_TO_ADDR
62398: GO 62420
// result := SortListByListDesc ( units , tmp ) ;
62400: LD_ADDR_VAR 0 3
62404: PUSH
62405: LD_VAR 0 1
62409: PPUSH
62410: LD_VAR 0 5
62414: PPUSH
62415: CALL_OW 77
62419: ST_TO_ADDR
// end ;
62420: LD_VAR 0 3
62424: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62425: LD_INT 0
62427: PPUSH
62428: PPUSH
// task := GetTaskList ( mech ) ;
62429: LD_ADDR_VAR 0 4
62433: PUSH
62434: LD_VAR 0 1
62438: PPUSH
62439: CALL_OW 437
62443: ST_TO_ADDR
// if not task then
62444: LD_VAR 0 4
62448: NOT
62449: IFFALSE 62453
// exit ;
62451: GO 62495
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62453: LD_ADDR_VAR 0 3
62457: PUSH
62458: LD_VAR 0 4
62462: PUSH
62463: LD_INT 1
62465: ARRAY
62466: PUSH
62467: LD_INT 1
62469: ARRAY
62470: PUSH
62471: LD_STRING r
62473: EQUAL
62474: PUSH
62475: LD_VAR 0 4
62479: PUSH
62480: LD_INT 1
62482: ARRAY
62483: PUSH
62484: LD_INT 4
62486: ARRAY
62487: PUSH
62488: LD_VAR 0 2
62492: EQUAL
62493: AND
62494: ST_TO_ADDR
// end ;
62495: LD_VAR 0 3
62499: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62500: LD_INT 0
62502: PPUSH
// SetDir ( unit , d ) ;
62503: LD_VAR 0 1
62507: PPUSH
62508: LD_VAR 0 4
62512: PPUSH
62513: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62517: LD_VAR 0 1
62521: PPUSH
62522: LD_VAR 0 2
62526: PPUSH
62527: LD_VAR 0 3
62531: PPUSH
62532: LD_VAR 0 5
62536: PPUSH
62537: CALL_OW 48
// end ;
62541: LD_VAR 0 6
62545: RET
// export function ToNaturalNumber ( number ) ; begin
62546: LD_INT 0
62548: PPUSH
// result := number div 1 ;
62549: LD_ADDR_VAR 0 2
62553: PUSH
62554: LD_VAR 0 1
62558: PUSH
62559: LD_INT 1
62561: DIV
62562: ST_TO_ADDR
// if number < 0 then
62563: LD_VAR 0 1
62567: PUSH
62568: LD_INT 0
62570: LESS
62571: IFFALSE 62581
// result := 0 ;
62573: LD_ADDR_VAR 0 2
62577: PUSH
62578: LD_INT 0
62580: ST_TO_ADDR
// end ;
62581: LD_VAR 0 2
62585: RET
// export function SortByClass ( units , class ) ; var un ; begin
62586: LD_INT 0
62588: PPUSH
62589: PPUSH
// if not units or not class then
62590: LD_VAR 0 1
62594: NOT
62595: PUSH
62596: LD_VAR 0 2
62600: NOT
62601: OR
62602: IFFALSE 62606
// exit ;
62604: GO 62701
// result := [ ] ;
62606: LD_ADDR_VAR 0 3
62610: PUSH
62611: EMPTY
62612: ST_TO_ADDR
// for un in units do
62613: LD_ADDR_VAR 0 4
62617: PUSH
62618: LD_VAR 0 1
62622: PUSH
62623: FOR_IN
62624: IFFALSE 62699
// if GetClass ( un ) = class then
62626: LD_VAR 0 4
62630: PPUSH
62631: CALL_OW 257
62635: PUSH
62636: LD_VAR 0 2
62640: EQUAL
62641: IFFALSE 62668
// result := Insert ( result , 1 , un ) else
62643: LD_ADDR_VAR 0 3
62647: PUSH
62648: LD_VAR 0 3
62652: PPUSH
62653: LD_INT 1
62655: PPUSH
62656: LD_VAR 0 4
62660: PPUSH
62661: CALL_OW 2
62665: ST_TO_ADDR
62666: GO 62697
// result := Replace ( result , result + 1 , un ) ;
62668: LD_ADDR_VAR 0 3
62672: PUSH
62673: LD_VAR 0 3
62677: PPUSH
62678: LD_VAR 0 3
62682: PUSH
62683: LD_INT 1
62685: PLUS
62686: PPUSH
62687: LD_VAR 0 4
62691: PPUSH
62692: CALL_OW 1
62696: ST_TO_ADDR
62697: GO 62623
62699: POP
62700: POP
// end ;
62701: LD_VAR 0 3
62705: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62706: LD_INT 0
62708: PPUSH
62709: PPUSH
62710: PPUSH
62711: PPUSH
62712: PPUSH
62713: PPUSH
62714: PPUSH
// result := [ ] ;
62715: LD_ADDR_VAR 0 4
62719: PUSH
62720: EMPTY
62721: ST_TO_ADDR
// if x - r < 0 then
62722: LD_VAR 0 1
62726: PUSH
62727: LD_VAR 0 3
62731: MINUS
62732: PUSH
62733: LD_INT 0
62735: LESS
62736: IFFALSE 62748
// min_x := 0 else
62738: LD_ADDR_VAR 0 8
62742: PUSH
62743: LD_INT 0
62745: ST_TO_ADDR
62746: GO 62764
// min_x := x - r ;
62748: LD_ADDR_VAR 0 8
62752: PUSH
62753: LD_VAR 0 1
62757: PUSH
62758: LD_VAR 0 3
62762: MINUS
62763: ST_TO_ADDR
// if y - r < 0 then
62764: LD_VAR 0 2
62768: PUSH
62769: LD_VAR 0 3
62773: MINUS
62774: PUSH
62775: LD_INT 0
62777: LESS
62778: IFFALSE 62790
// min_y := 0 else
62780: LD_ADDR_VAR 0 7
62784: PUSH
62785: LD_INT 0
62787: ST_TO_ADDR
62788: GO 62806
// min_y := y - r ;
62790: LD_ADDR_VAR 0 7
62794: PUSH
62795: LD_VAR 0 2
62799: PUSH
62800: LD_VAR 0 3
62804: MINUS
62805: ST_TO_ADDR
// max_x := x + r ;
62806: LD_ADDR_VAR 0 9
62810: PUSH
62811: LD_VAR 0 1
62815: PUSH
62816: LD_VAR 0 3
62820: PLUS
62821: ST_TO_ADDR
// max_y := y + r ;
62822: LD_ADDR_VAR 0 10
62826: PUSH
62827: LD_VAR 0 2
62831: PUSH
62832: LD_VAR 0 3
62836: PLUS
62837: ST_TO_ADDR
// for _x = min_x to max_x do
62838: LD_ADDR_VAR 0 5
62842: PUSH
62843: DOUBLE
62844: LD_VAR 0 8
62848: DEC
62849: ST_TO_ADDR
62850: LD_VAR 0 9
62854: PUSH
62855: FOR_TO
62856: IFFALSE 62957
// for _y = min_y to max_y do
62858: LD_ADDR_VAR 0 6
62862: PUSH
62863: DOUBLE
62864: LD_VAR 0 7
62868: DEC
62869: ST_TO_ADDR
62870: LD_VAR 0 10
62874: PUSH
62875: FOR_TO
62876: IFFALSE 62953
// begin if not ValidHex ( _x , _y ) then
62878: LD_VAR 0 5
62882: PPUSH
62883: LD_VAR 0 6
62887: PPUSH
62888: CALL_OW 488
62892: NOT
62893: IFFALSE 62897
// continue ;
62895: GO 62875
// if GetResourceTypeXY ( _x , _y ) then
62897: LD_VAR 0 5
62901: PPUSH
62902: LD_VAR 0 6
62906: PPUSH
62907: CALL_OW 283
62911: IFFALSE 62951
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62913: LD_ADDR_VAR 0 4
62917: PUSH
62918: LD_VAR 0 4
62922: PPUSH
62923: LD_VAR 0 4
62927: PUSH
62928: LD_INT 1
62930: PLUS
62931: PPUSH
62932: LD_VAR 0 5
62936: PUSH
62937: LD_VAR 0 6
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PPUSH
62946: CALL_OW 1
62950: ST_TO_ADDR
// end ;
62951: GO 62875
62953: POP
62954: POP
62955: GO 62855
62957: POP
62958: POP
// end ;
62959: LD_VAR 0 4
62963: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62964: LD_INT 0
62966: PPUSH
62967: PPUSH
62968: PPUSH
62969: PPUSH
62970: PPUSH
62971: PPUSH
62972: PPUSH
62973: PPUSH
// if not units then
62974: LD_VAR 0 1
62978: NOT
62979: IFFALSE 62983
// exit ;
62981: GO 63511
// result := UnitFilter ( units , [ f_ok ] ) ;
62983: LD_ADDR_VAR 0 3
62987: PUSH
62988: LD_VAR 0 1
62992: PPUSH
62993: LD_INT 50
62995: PUSH
62996: EMPTY
62997: LIST
62998: PPUSH
62999: CALL_OW 72
63003: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63004: LD_ADDR_VAR 0 8
63008: PUSH
63009: LD_VAR 0 1
63013: PUSH
63014: LD_INT 1
63016: ARRAY
63017: PPUSH
63018: CALL_OW 255
63022: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63023: LD_ADDR_VAR 0 10
63027: PUSH
63028: LD_INT 29
63030: PUSH
63031: LD_INT 91
63033: PUSH
63034: LD_INT 49
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: LIST
63041: ST_TO_ADDR
// if not result then
63042: LD_VAR 0 3
63046: NOT
63047: IFFALSE 63051
// exit ;
63049: GO 63511
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63051: LD_ADDR_VAR 0 5
63055: PUSH
63056: LD_INT 81
63058: PUSH
63059: LD_VAR 0 8
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PPUSH
63068: CALL_OW 69
63072: ST_TO_ADDR
// for i in result do
63073: LD_ADDR_VAR 0 4
63077: PUSH
63078: LD_VAR 0 3
63082: PUSH
63083: FOR_IN
63084: IFFALSE 63509
// begin tag := GetTag ( i ) + 1 ;
63086: LD_ADDR_VAR 0 9
63090: PUSH
63091: LD_VAR 0 4
63095: PPUSH
63096: CALL_OW 110
63100: PUSH
63101: LD_INT 1
63103: PLUS
63104: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
63105: LD_ADDR_VAR 0 7
63109: PUSH
63110: LD_VAR 0 4
63114: PPUSH
63115: CALL_OW 250
63119: PPUSH
63120: LD_VAR 0 4
63124: PPUSH
63125: CALL_OW 251
63129: PPUSH
63130: LD_INT 4
63132: PPUSH
63133: CALL 62706 0 3
63137: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
63138: LD_VAR 0 4
63142: PPUSH
63143: CALL_OW 247
63147: PUSH
63148: LD_INT 2
63150: EQUAL
63151: PUSH
63152: LD_VAR 0 7
63156: PUSH
63157: LD_INT 2
63159: GREATER
63160: AND
63161: PUSH
63162: LD_VAR 0 4
63166: PPUSH
63167: CALL_OW 264
63171: PUSH
63172: LD_VAR 0 10
63176: IN
63177: NOT
63178: AND
63179: IFFALSE 63218
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63181: LD_VAR 0 4
63185: PPUSH
63186: LD_VAR 0 7
63190: PUSH
63191: LD_INT 1
63193: ARRAY
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PPUSH
63199: LD_VAR 0 7
63203: PUSH
63204: LD_INT 1
63206: ARRAY
63207: PUSH
63208: LD_INT 2
63210: ARRAY
63211: PPUSH
63212: CALL_OW 116
63216: GO 63507
// if path > tag then
63218: LD_VAR 0 2
63222: PUSH
63223: LD_VAR 0 9
63227: GREATER
63228: IFFALSE 63436
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63230: LD_ADDR_VAR 0 6
63234: PUSH
63235: LD_VAR 0 5
63239: PPUSH
63240: LD_INT 91
63242: PUSH
63243: LD_VAR 0 4
63247: PUSH
63248: LD_INT 8
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: PPUSH
63256: CALL_OW 72
63260: ST_TO_ADDR
// if nearEnemy then
63261: LD_VAR 0 6
63265: IFFALSE 63334
// begin if GetWeapon ( i ) = ru_time_lapser then
63267: LD_VAR 0 4
63271: PPUSH
63272: CALL_OW 264
63276: PUSH
63277: LD_INT 49
63279: EQUAL
63280: IFFALSE 63308
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63282: LD_VAR 0 4
63286: PPUSH
63287: LD_VAR 0 6
63291: PPUSH
63292: LD_VAR 0 4
63296: PPUSH
63297: CALL_OW 74
63301: PPUSH
63302: CALL_OW 112
63306: GO 63332
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63308: LD_VAR 0 4
63312: PPUSH
63313: LD_VAR 0 6
63317: PPUSH
63318: LD_VAR 0 4
63322: PPUSH
63323: CALL_OW 74
63327: PPUSH
63328: CALL 64582 0 2
// end else
63332: GO 63434
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63334: LD_VAR 0 4
63338: PPUSH
63339: LD_VAR 0 2
63343: PUSH
63344: LD_VAR 0 9
63348: ARRAY
63349: PUSH
63350: LD_INT 1
63352: ARRAY
63353: PPUSH
63354: LD_VAR 0 2
63358: PUSH
63359: LD_VAR 0 9
63363: ARRAY
63364: PUSH
63365: LD_INT 2
63367: ARRAY
63368: PPUSH
63369: CALL_OW 297
63373: PUSH
63374: LD_INT 6
63376: GREATER
63377: IFFALSE 63420
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63379: LD_VAR 0 4
63383: PPUSH
63384: LD_VAR 0 2
63388: PUSH
63389: LD_VAR 0 9
63393: ARRAY
63394: PUSH
63395: LD_INT 1
63397: ARRAY
63398: PPUSH
63399: LD_VAR 0 2
63403: PUSH
63404: LD_VAR 0 9
63408: ARRAY
63409: PUSH
63410: LD_INT 2
63412: ARRAY
63413: PPUSH
63414: CALL_OW 114
63418: GO 63434
// SetTag ( i , tag ) ;
63420: LD_VAR 0 4
63424: PPUSH
63425: LD_VAR 0 9
63429: PPUSH
63430: CALL_OW 109
// end else
63434: GO 63507
// if enemy then
63436: LD_VAR 0 5
63440: IFFALSE 63507
// begin if GetWeapon ( i ) = ru_time_lapser then
63442: LD_VAR 0 4
63446: PPUSH
63447: CALL_OW 264
63451: PUSH
63452: LD_INT 49
63454: EQUAL
63455: IFFALSE 63483
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63457: LD_VAR 0 4
63461: PPUSH
63462: LD_VAR 0 5
63466: PPUSH
63467: LD_VAR 0 4
63471: PPUSH
63472: CALL_OW 74
63476: PPUSH
63477: CALL_OW 112
63481: GO 63507
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63483: LD_VAR 0 4
63487: PPUSH
63488: LD_VAR 0 5
63492: PPUSH
63493: LD_VAR 0 4
63497: PPUSH
63498: CALL_OW 74
63502: PPUSH
63503: CALL 64582 0 2
// end ; end ;
63507: GO 63083
63509: POP
63510: POP
// end ;
63511: LD_VAR 0 3
63515: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63516: LD_INT 0
63518: PPUSH
63519: PPUSH
63520: PPUSH
// if not unit or IsInUnit ( unit ) then
63521: LD_VAR 0 1
63525: NOT
63526: PUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: CALL_OW 310
63536: OR
63537: IFFALSE 63541
// exit ;
63539: GO 63632
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63541: LD_ADDR_VAR 0 4
63545: PUSH
63546: LD_VAR 0 1
63550: PPUSH
63551: CALL_OW 250
63555: PPUSH
63556: LD_VAR 0 2
63560: PPUSH
63561: LD_INT 1
63563: PPUSH
63564: CALL_OW 272
63568: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63569: LD_ADDR_VAR 0 5
63573: PUSH
63574: LD_VAR 0 1
63578: PPUSH
63579: CALL_OW 251
63583: PPUSH
63584: LD_VAR 0 2
63588: PPUSH
63589: LD_INT 1
63591: PPUSH
63592: CALL_OW 273
63596: ST_TO_ADDR
// if ValidHex ( x , y ) then
63597: LD_VAR 0 4
63601: PPUSH
63602: LD_VAR 0 5
63606: PPUSH
63607: CALL_OW 488
63611: IFFALSE 63632
// ComTurnXY ( unit , x , y ) ;
63613: LD_VAR 0 1
63617: PPUSH
63618: LD_VAR 0 4
63622: PPUSH
63623: LD_VAR 0 5
63627: PPUSH
63628: CALL_OW 118
// end ;
63632: LD_VAR 0 3
63636: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63637: LD_INT 0
63639: PPUSH
63640: PPUSH
// result := false ;
63641: LD_ADDR_VAR 0 3
63645: PUSH
63646: LD_INT 0
63648: ST_TO_ADDR
// if not units then
63649: LD_VAR 0 2
63653: NOT
63654: IFFALSE 63658
// exit ;
63656: GO 63703
// for i in units do
63658: LD_ADDR_VAR 0 4
63662: PUSH
63663: LD_VAR 0 2
63667: PUSH
63668: FOR_IN
63669: IFFALSE 63701
// if See ( side , i ) then
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_VAR 0 4
63680: PPUSH
63681: CALL_OW 292
63685: IFFALSE 63699
// begin result := true ;
63687: LD_ADDR_VAR 0 3
63691: PUSH
63692: LD_INT 1
63694: ST_TO_ADDR
// exit ;
63695: POP
63696: POP
63697: GO 63703
// end ;
63699: GO 63668
63701: POP
63702: POP
// end ;
63703: LD_VAR 0 3
63707: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63708: LD_INT 0
63710: PPUSH
63711: PPUSH
63712: PPUSH
63713: PPUSH
// if not unit or not points then
63714: LD_VAR 0 1
63718: NOT
63719: PUSH
63720: LD_VAR 0 2
63724: NOT
63725: OR
63726: IFFALSE 63730
// exit ;
63728: GO 63820
// dist := 99999 ;
63730: LD_ADDR_VAR 0 5
63734: PUSH
63735: LD_INT 99999
63737: ST_TO_ADDR
// for i in points do
63738: LD_ADDR_VAR 0 4
63742: PUSH
63743: LD_VAR 0 2
63747: PUSH
63748: FOR_IN
63749: IFFALSE 63818
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63751: LD_ADDR_VAR 0 6
63755: PUSH
63756: LD_VAR 0 1
63760: PPUSH
63761: LD_VAR 0 4
63765: PUSH
63766: LD_INT 1
63768: ARRAY
63769: PPUSH
63770: LD_VAR 0 4
63774: PUSH
63775: LD_INT 2
63777: ARRAY
63778: PPUSH
63779: CALL_OW 297
63783: ST_TO_ADDR
// if tmpDist < dist then
63784: LD_VAR 0 6
63788: PUSH
63789: LD_VAR 0 5
63793: LESS
63794: IFFALSE 63816
// begin result := i ;
63796: LD_ADDR_VAR 0 3
63800: PUSH
63801: LD_VAR 0 4
63805: ST_TO_ADDR
// dist := tmpDist ;
63806: LD_ADDR_VAR 0 5
63810: PUSH
63811: LD_VAR 0 6
63815: ST_TO_ADDR
// end ; end ;
63816: GO 63748
63818: POP
63819: POP
// end ;
63820: LD_VAR 0 3
63824: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63825: LD_INT 0
63827: PPUSH
// uc_side := side ;
63828: LD_ADDR_OWVAR 20
63832: PUSH
63833: LD_VAR 0 1
63837: ST_TO_ADDR
// uc_nation := 3 ;
63838: LD_ADDR_OWVAR 21
63842: PUSH
63843: LD_INT 3
63845: ST_TO_ADDR
// vc_chassis := 25 ;
63846: LD_ADDR_OWVAR 37
63850: PUSH
63851: LD_INT 25
63853: ST_TO_ADDR
// vc_engine := engine_siberite ;
63854: LD_ADDR_OWVAR 39
63858: PUSH
63859: LD_INT 3
63861: ST_TO_ADDR
// vc_control := control_computer ;
63862: LD_ADDR_OWVAR 38
63866: PUSH
63867: LD_INT 3
63869: ST_TO_ADDR
// vc_weapon := 59 ;
63870: LD_ADDR_OWVAR 40
63874: PUSH
63875: LD_INT 59
63877: ST_TO_ADDR
// result := CreateVehicle ;
63878: LD_ADDR_VAR 0 5
63882: PUSH
63883: CALL_OW 45
63887: ST_TO_ADDR
// SetDir ( result , d ) ;
63888: LD_VAR 0 5
63892: PPUSH
63893: LD_VAR 0 4
63897: PPUSH
63898: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63902: LD_VAR 0 5
63906: PPUSH
63907: LD_VAR 0 2
63911: PPUSH
63912: LD_VAR 0 3
63916: PPUSH
63917: LD_INT 0
63919: PPUSH
63920: CALL_OW 48
// end ;
63924: LD_VAR 0 5
63928: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63929: LD_INT 0
63931: PPUSH
63932: PPUSH
63933: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63934: LD_ADDR_VAR 0 2
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 0
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63957: LD_VAR 0 1
63961: NOT
63962: PUSH
63963: LD_VAR 0 1
63967: PPUSH
63968: CALL_OW 264
63972: PUSH
63973: LD_INT 12
63975: PUSH
63976: LD_INT 51
63978: PUSH
63979: LD_INT 32
63981: PUSH
63982: LD_INT 89
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: IN
63991: NOT
63992: OR
63993: IFFALSE 63997
// exit ;
63995: GO 64095
// for i := 1 to 3 do
63997: LD_ADDR_VAR 0 3
64001: PUSH
64002: DOUBLE
64003: LD_INT 1
64005: DEC
64006: ST_TO_ADDR
64007: LD_INT 3
64009: PUSH
64010: FOR_TO
64011: IFFALSE 64093
// begin tmp := GetCargo ( cargo , i ) ;
64013: LD_ADDR_VAR 0 4
64017: PUSH
64018: LD_VAR 0 1
64022: PPUSH
64023: LD_VAR 0 3
64027: PPUSH
64028: CALL_OW 289
64032: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64033: LD_ADDR_VAR 0 2
64037: PUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_VAR 0 3
64047: PPUSH
64048: LD_VAR 0 4
64052: PPUSH
64053: CALL_OW 1
64057: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64058: LD_ADDR_VAR 0 2
64062: PUSH
64063: LD_VAR 0 2
64067: PPUSH
64068: LD_INT 4
64070: PPUSH
64071: LD_VAR 0 2
64075: PUSH
64076: LD_INT 4
64078: ARRAY
64079: PUSH
64080: LD_VAR 0 4
64084: PLUS
64085: PPUSH
64086: CALL_OW 1
64090: ST_TO_ADDR
// end ;
64091: GO 64010
64093: POP
64094: POP
// end ;
64095: LD_VAR 0 2
64099: RET
// export function Length ( array ) ; begin
64100: LD_INT 0
64102: PPUSH
// result := array + 0 ;
64103: LD_ADDR_VAR 0 2
64107: PUSH
64108: LD_VAR 0 1
64112: PUSH
64113: LD_INT 0
64115: PLUS
64116: ST_TO_ADDR
// end ;
64117: LD_VAR 0 2
64121: RET
// export function PrepareArray ( array ) ; begin
64122: LD_INT 0
64124: PPUSH
// result := array diff 0 ;
64125: LD_ADDR_VAR 0 2
64129: PUSH
64130: LD_VAR 0 1
64134: PUSH
64135: LD_INT 0
64137: DIFF
64138: ST_TO_ADDR
// if not result [ 1 ] then
64139: LD_VAR 0 2
64143: PUSH
64144: LD_INT 1
64146: ARRAY
64147: NOT
64148: IFFALSE 64168
// result := Delete ( result , 1 ) ;
64150: LD_ADDR_VAR 0 2
64154: PUSH
64155: LD_VAR 0 2
64159: PPUSH
64160: LD_INT 1
64162: PPUSH
64163: CALL_OW 3
64167: ST_TO_ADDR
// end ;
64168: LD_VAR 0 2
64172: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64173: LD_INT 0
64175: PPUSH
64176: PPUSH
64177: PPUSH
64178: PPUSH
// sibRocketRange := 25 ;
64179: LD_ADDR_VAR 0 6
64183: PUSH
64184: LD_INT 25
64186: ST_TO_ADDR
// result := false ;
64187: LD_ADDR_VAR 0 4
64191: PUSH
64192: LD_INT 0
64194: ST_TO_ADDR
// for i := 0 to 5 do
64195: LD_ADDR_VAR 0 5
64199: PUSH
64200: DOUBLE
64201: LD_INT 0
64203: DEC
64204: ST_TO_ADDR
64205: LD_INT 5
64207: PUSH
64208: FOR_TO
64209: IFFALSE 64276
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64211: LD_VAR 0 1
64215: PPUSH
64216: LD_VAR 0 5
64220: PPUSH
64221: LD_VAR 0 6
64225: PPUSH
64226: CALL_OW 272
64230: PPUSH
64231: LD_VAR 0 2
64235: PPUSH
64236: LD_VAR 0 5
64240: PPUSH
64241: LD_VAR 0 6
64245: PPUSH
64246: CALL_OW 273
64250: PPUSH
64251: LD_VAR 0 3
64255: PPUSH
64256: CALL_OW 309
64260: IFFALSE 64274
// begin result := true ;
64262: LD_ADDR_VAR 0 4
64266: PUSH
64267: LD_INT 1
64269: ST_TO_ADDR
// exit ;
64270: POP
64271: POP
64272: GO 64278
// end ;
64274: GO 64208
64276: POP
64277: POP
// end ;
64278: LD_VAR 0 4
64282: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64283: LD_INT 0
64285: PPUSH
64286: PPUSH
64287: PPUSH
// if btype = b_depot then
64288: LD_VAR 0 2
64292: PUSH
64293: LD_INT 0
64295: EQUAL
64296: IFFALSE 64308
// begin result := true ;
64298: LD_ADDR_VAR 0 3
64302: PUSH
64303: LD_INT 1
64305: ST_TO_ADDR
// exit ;
64306: GO 64424
// end ; pom := GetBase ( depot ) ;
64308: LD_ADDR_VAR 0 4
64312: PUSH
64313: LD_VAR 0 1
64317: PPUSH
64318: CALL_OW 274
64322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64323: LD_ADDR_VAR 0 5
64327: PUSH
64328: LD_VAR 0 2
64332: PPUSH
64333: LD_VAR 0 1
64337: PPUSH
64338: CALL_OW 248
64342: PPUSH
64343: CALL_OW 450
64347: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64348: LD_ADDR_VAR 0 3
64352: PUSH
64353: LD_VAR 0 4
64357: PPUSH
64358: LD_INT 1
64360: PPUSH
64361: CALL_OW 275
64365: PUSH
64366: LD_VAR 0 5
64370: PUSH
64371: LD_INT 1
64373: ARRAY
64374: GREATEREQUAL
64375: PUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: LD_INT 2
64383: PPUSH
64384: CALL_OW 275
64388: PUSH
64389: LD_VAR 0 5
64393: PUSH
64394: LD_INT 2
64396: ARRAY
64397: GREATEREQUAL
64398: AND
64399: PUSH
64400: LD_VAR 0 4
64404: PPUSH
64405: LD_INT 3
64407: PPUSH
64408: CALL_OW 275
64412: PUSH
64413: LD_VAR 0 5
64417: PUSH
64418: LD_INT 3
64420: ARRAY
64421: GREATEREQUAL
64422: AND
64423: ST_TO_ADDR
// end ;
64424: LD_VAR 0 3
64428: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64429: LD_INT 0
64431: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64432: LD_VAR 0 1
64436: PPUSH
64437: LD_VAR 0 2
64441: PPUSH
64442: LD_INT 0
64444: PPUSH
64445: LD_INT 0
64447: PPUSH
64448: LD_INT 1
64450: PPUSH
64451: LD_INT 0
64453: PPUSH
64454: CALL_OW 587
// end ;
64458: LD_VAR 0 3
64462: RET
// export function CenterOnNow ( unit ) ; begin
64463: LD_INT 0
64465: PPUSH
// result := IsInUnit ( unit ) ;
64466: LD_ADDR_VAR 0 2
64470: PUSH
64471: LD_VAR 0 1
64475: PPUSH
64476: CALL_OW 310
64480: ST_TO_ADDR
// if not result then
64481: LD_VAR 0 2
64485: NOT
64486: IFFALSE 64498
// result := unit ;
64488: LD_ADDR_VAR 0 2
64492: PUSH
64493: LD_VAR 0 1
64497: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64498: LD_VAR 0 1
64502: PPUSH
64503: CALL_OW 87
// end ;
64507: LD_VAR 0 2
64511: RET
// export function ComMoveHex ( unit , hex ) ; begin
64512: LD_INT 0
64514: PPUSH
// if not hex then
64515: LD_VAR 0 2
64519: NOT
64520: IFFALSE 64524
// exit ;
64522: GO 64577
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 1
64531: ARRAY
64532: PPUSH
64533: LD_VAR 0 2
64537: PUSH
64538: LD_INT 2
64540: ARRAY
64541: PPUSH
64542: CALL_OW 428
64546: IFFALSE 64550
// exit ;
64548: GO 64577
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64550: LD_VAR 0 1
64554: PPUSH
64555: LD_VAR 0 2
64559: PUSH
64560: LD_INT 1
64562: ARRAY
64563: PPUSH
64564: LD_VAR 0 2
64568: PUSH
64569: LD_INT 2
64571: ARRAY
64572: PPUSH
64573: CALL_OW 111
// end ;
64577: LD_VAR 0 3
64581: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64582: LD_INT 0
64584: PPUSH
64585: PPUSH
64586: PPUSH
// if not unit or not enemy then
64587: LD_VAR 0 1
64591: NOT
64592: PUSH
64593: LD_VAR 0 2
64597: NOT
64598: OR
64599: IFFALSE 64603
// exit ;
64601: GO 64727
// x := GetX ( enemy ) ;
64603: LD_ADDR_VAR 0 4
64607: PUSH
64608: LD_VAR 0 2
64612: PPUSH
64613: CALL_OW 250
64617: ST_TO_ADDR
// y := GetY ( enemy ) ;
64618: LD_ADDR_VAR 0 5
64622: PUSH
64623: LD_VAR 0 2
64627: PPUSH
64628: CALL_OW 251
64632: ST_TO_ADDR
// if ValidHex ( x , y ) then
64633: LD_VAR 0 4
64637: PPUSH
64638: LD_VAR 0 5
64642: PPUSH
64643: CALL_OW 488
64647: IFFALSE 64727
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64649: LD_VAR 0 2
64653: PPUSH
64654: CALL_OW 247
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: IN
64669: PUSH
64670: LD_VAR 0 1
64674: PPUSH
64675: CALL_OW 255
64679: PPUSH
64680: LD_VAR 0 2
64684: PPUSH
64685: CALL_OW 292
64689: OR
64690: IFFALSE 64708
// ComAttackUnit ( unit , enemy ) else
64692: LD_VAR 0 1
64696: PPUSH
64697: LD_VAR 0 2
64701: PPUSH
64702: CALL_OW 115
64706: GO 64727
// ComAgressiveMove ( unit , x , y ) ;
64708: LD_VAR 0 1
64712: PPUSH
64713: LD_VAR 0 4
64717: PPUSH
64718: LD_VAR 0 5
64722: PPUSH
64723: CALL_OW 114
// end ;
64727: LD_VAR 0 3
64731: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64732: LD_INT 0
64734: PPUSH
64735: PPUSH
64736: PPUSH
// list := AreaToList ( area , 0 ) ;
64737: LD_ADDR_VAR 0 5
64741: PUSH
64742: LD_VAR 0 1
64746: PPUSH
64747: LD_INT 0
64749: PPUSH
64750: CALL_OW 517
64754: ST_TO_ADDR
// if not list then
64755: LD_VAR 0 5
64759: NOT
64760: IFFALSE 64764
// exit ;
64762: GO 64894
// if all then
64764: LD_VAR 0 2
64768: IFFALSE 64856
// begin for i := 1 to list [ 1 ] do
64770: LD_ADDR_VAR 0 4
64774: PUSH
64775: DOUBLE
64776: LD_INT 1
64778: DEC
64779: ST_TO_ADDR
64780: LD_VAR 0 5
64784: PUSH
64785: LD_INT 1
64787: ARRAY
64788: PUSH
64789: FOR_TO
64790: IFFALSE 64852
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64792: LD_ADDR_VAR 0 3
64796: PUSH
64797: LD_VAR 0 3
64801: PPUSH
64802: LD_VAR 0 3
64806: PUSH
64807: LD_INT 1
64809: PLUS
64810: PPUSH
64811: LD_VAR 0 5
64815: PUSH
64816: LD_INT 1
64818: ARRAY
64819: PUSH
64820: LD_VAR 0 4
64824: ARRAY
64825: PUSH
64826: LD_VAR 0 5
64830: PUSH
64831: LD_INT 2
64833: ARRAY
64834: PUSH
64835: LD_VAR 0 4
64839: ARRAY
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PPUSH
64845: CALL_OW 1
64849: ST_TO_ADDR
64850: GO 64789
64852: POP
64853: POP
// exit ;
64854: GO 64894
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64856: LD_ADDR_VAR 0 3
64860: PUSH
64861: LD_VAR 0 5
64865: PUSH
64866: LD_INT 1
64868: ARRAY
64869: PUSH
64870: LD_INT 1
64872: ARRAY
64873: PUSH
64874: LD_VAR 0 5
64878: PUSH
64879: LD_INT 2
64881: ARRAY
64882: PUSH
64883: LD_INT 1
64885: ARRAY
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: ST_TO_ADDR
// end ;
64894: LD_VAR 0 3
64898: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64899: LD_INT 0
64901: PPUSH
64902: PPUSH
// list := AreaToList ( area , 0 ) ;
64903: LD_ADDR_VAR 0 4
64907: PUSH
64908: LD_VAR 0 1
64912: PPUSH
64913: LD_INT 0
64915: PPUSH
64916: CALL_OW 517
64920: ST_TO_ADDR
// if not list then
64921: LD_VAR 0 4
64925: NOT
64926: IFFALSE 64930
// exit ;
64928: GO 64971
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64930: LD_ADDR_VAR 0 3
64934: PUSH
64935: LD_VAR 0 4
64939: PUSH
64940: LD_INT 1
64942: ARRAY
64943: PUSH
64944: LD_INT 1
64946: ARRAY
64947: PUSH
64948: LD_VAR 0 4
64952: PUSH
64953: LD_INT 2
64955: ARRAY
64956: PUSH
64957: LD_INT 1
64959: ARRAY
64960: PUSH
64961: LD_VAR 0 2
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: LIST
64970: ST_TO_ADDR
// end ;
64971: LD_VAR 0 3
64975: RET
// export function First ( array ) ; begin
64976: LD_INT 0
64978: PPUSH
// if not array then
64979: LD_VAR 0 1
64983: NOT
64984: IFFALSE 64988
// exit ;
64986: GO 65002
// result := array [ 1 ] ;
64988: LD_ADDR_VAR 0 2
64992: PUSH
64993: LD_VAR 0 1
64997: PUSH
64998: LD_INT 1
65000: ARRAY
65001: ST_TO_ADDR
// end ;
65002: LD_VAR 0 2
65006: RET
// export function Last ( array ) ; begin
65007: LD_INT 0
65009: PPUSH
// if not array then
65010: LD_VAR 0 1
65014: NOT
65015: IFFALSE 65019
// exit ;
65017: GO 65035
// result := array [ array ] ;
65019: LD_ADDR_VAR 0 2
65023: PUSH
65024: LD_VAR 0 1
65028: PUSH
65029: LD_VAR 0 1
65033: ARRAY
65034: ST_TO_ADDR
// end ;
65035: LD_VAR 0 2
65039: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
65040: LD_INT 0
65042: PPUSH
65043: PPUSH
// result := [ ] ;
65044: LD_ADDR_VAR 0 5
65048: PUSH
65049: EMPTY
65050: ST_TO_ADDR
// if not array then
65051: LD_VAR 0 1
65055: NOT
65056: IFFALSE 65060
// exit ;
65058: GO 65172
// for i := 1 to array do
65060: LD_ADDR_VAR 0 6
65064: PUSH
65065: DOUBLE
65066: LD_INT 1
65068: DEC
65069: ST_TO_ADDR
65070: LD_VAR 0 1
65074: PUSH
65075: FOR_TO
65076: IFFALSE 65170
// if array [ i ] [ index ] = value then
65078: LD_VAR 0 1
65082: PUSH
65083: LD_VAR 0 6
65087: ARRAY
65088: PUSH
65089: LD_VAR 0 2
65093: ARRAY
65094: PUSH
65095: LD_VAR 0 3
65099: EQUAL
65100: IFFALSE 65168
// begin if indexColumn then
65102: LD_VAR 0 4
65106: IFFALSE 65142
// result := Join ( result , array [ i ] [ indexColumn ] ) else
65108: LD_ADDR_VAR 0 5
65112: PUSH
65113: LD_VAR 0 5
65117: PPUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_VAR 0 6
65127: ARRAY
65128: PUSH
65129: LD_VAR 0 4
65133: ARRAY
65134: PPUSH
65135: CALL 60360 0 2
65139: ST_TO_ADDR
65140: GO 65168
// result := Join ( result , array [ i ] ) ;
65142: LD_ADDR_VAR 0 5
65146: PUSH
65147: LD_VAR 0 5
65151: PPUSH
65152: LD_VAR 0 1
65156: PUSH
65157: LD_VAR 0 6
65161: ARRAY
65162: PPUSH
65163: CALL 60360 0 2
65167: ST_TO_ADDR
// end ;
65168: GO 65075
65170: POP
65171: POP
// end ;
65172: LD_VAR 0 5
65176: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
65177: LD_INT 0
65179: PPUSH
// if not vehicles or not parkingPoint then
65180: LD_VAR 0 1
65184: NOT
65185: PUSH
65186: LD_VAR 0 2
65190: NOT
65191: OR
65192: IFFALSE 65196
// exit ;
65194: GO 65294
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
65196: LD_ADDR_VAR 0 1
65200: PUSH
65201: LD_VAR 0 1
65205: PPUSH
65206: LD_INT 50
65208: PUSH
65209: EMPTY
65210: LIST
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: LD_INT 92
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: LD_INT 1
65225: ARRAY
65226: PUSH
65227: LD_VAR 0 2
65231: PUSH
65232: LD_INT 2
65234: ARRAY
65235: PUSH
65236: LD_INT 8
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PPUSH
65253: CALL_OW 72
65257: ST_TO_ADDR
// if not vehicles then
65258: LD_VAR 0 1
65262: NOT
65263: IFFALSE 65267
// exit ;
65265: GO 65294
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65267: LD_VAR 0 1
65271: PPUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_INT 1
65279: ARRAY
65280: PPUSH
65281: LD_VAR 0 2
65285: PUSH
65286: LD_INT 2
65288: ARRAY
65289: PPUSH
65290: CALL_OW 111
// end ;
65294: LD_VAR 0 3
65298: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65299: LD_INT 0
65301: PPUSH
65302: PPUSH
65303: PPUSH
// if not side or not area then
65304: LD_VAR 0 1
65308: NOT
65309: PUSH
65310: LD_VAR 0 2
65314: NOT
65315: OR
65316: IFFALSE 65320
// exit ;
65318: GO 65439
// tmp := AreaToList ( area , 0 ) ;
65320: LD_ADDR_VAR 0 5
65324: PUSH
65325: LD_VAR 0 2
65329: PPUSH
65330: LD_INT 0
65332: PPUSH
65333: CALL_OW 517
65337: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65338: LD_ADDR_VAR 0 4
65342: PUSH
65343: DOUBLE
65344: LD_INT 1
65346: DEC
65347: ST_TO_ADDR
65348: LD_VAR 0 5
65352: PUSH
65353: LD_INT 1
65355: ARRAY
65356: PUSH
65357: FOR_TO
65358: IFFALSE 65437
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65360: LD_VAR 0 5
65364: PUSH
65365: LD_INT 1
65367: ARRAY
65368: PUSH
65369: LD_VAR 0 4
65373: ARRAY
65374: PPUSH
65375: LD_VAR 0 5
65379: PUSH
65380: LD_INT 2
65382: ARRAY
65383: PUSH
65384: LD_VAR 0 4
65388: ARRAY
65389: PPUSH
65390: CALL_OW 351
65394: IFFALSE 65435
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65396: LD_VAR 0 5
65400: PUSH
65401: LD_INT 1
65403: ARRAY
65404: PUSH
65405: LD_VAR 0 4
65409: ARRAY
65410: PPUSH
65411: LD_VAR 0 5
65415: PUSH
65416: LD_INT 2
65418: ARRAY
65419: PUSH
65420: LD_VAR 0 4
65424: ARRAY
65425: PPUSH
65426: LD_VAR 0 1
65430: PPUSH
65431: CALL_OW 244
// end ;
65435: GO 65357
65437: POP
65438: POP
// end ;
65439: LD_VAR 0 3
65443: RET
