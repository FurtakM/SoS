// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// function K ( x ) ; begin
   5: LD_INT 0
   7: PPUSH
// if x = 0 then
   8: LD_VAR 0 1
  12: PUSH
  13: LD_INT 0
  15: EQUAL
  16: IFFALSE 20
// exit ;
  18: GO 40
// result := K ( Dec ( x ) ) ;
  20: LD_ADDR_VAR 0 2
  24: PUSH
  25: LD_VAR 0 1
  29: PPUSH
  30: CALL 39589 0 1
  34: PPUSH
  35: CALL 5 0 1
  39: ST_TO_ADDR
// end ;
  40: LD_VAR 0 2
  44: RET
// every 0 0$1 do
  45: GO 47
  47: DISABLE
// display_strings := K ( 10 ) ; end_of_file
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_INT 10
  55: PPUSH
  56: CALL 5 0 1
  60: ST_TO_ADDR
  61: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  62: LD_INT 0
  64: PPUSH
  65: PPUSH
// if exist_mode then
  66: LD_VAR 0 2
  70: IFFALSE 116
// begin unit := CreateCharacter ( prefix & ident ) ;
  72: LD_ADDR_VAR 0 5
  76: PUSH
  77: LD_VAR 0 3
  81: PUSH
  82: LD_VAR 0 1
  86: STR
  87: PPUSH
  88: CALL_OW 34
  92: ST_TO_ADDR
// if unit then
  93: LD_VAR 0 5
  97: IFFALSE 114
// DeleteCharacters ( prefix & ident ) ;
  99: LD_VAR 0 3
 103: PUSH
 104: LD_VAR 0 1
 108: STR
 109: PPUSH
 110: CALL_OW 40
// end else
 114: GO 131
// unit := NewCharacter ( ident ) ;
 116: LD_ADDR_VAR 0 5
 120: PUSH
 121: LD_VAR 0 1
 125: PPUSH
 126: CALL_OW 25
 130: ST_TO_ADDR
// result := unit ;
 131: LD_ADDR_VAR 0 4
 135: PUSH
 136: LD_VAR 0 5
 140: ST_TO_ADDR
// end ;
 141: LD_VAR 0 4
 145: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 146: LD_INT 0
 148: PPUSH
 149: PPUSH
// if exist_mode then
 150: LD_VAR 0 2
 154: IFFALSE 179
// unit := CreateCharacter ( prefix & ident ) else
 156: LD_ADDR_VAR 0 5
 160: PUSH
 161: LD_VAR 0 3
 165: PUSH
 166: LD_VAR 0 1
 170: STR
 171: PPUSH
 172: CALL_OW 34
 176: ST_TO_ADDR
 177: GO 194
// unit := NewCharacter ( ident ) ;
 179: LD_ADDR_VAR 0 5
 183: PUSH
 184: LD_VAR 0 1
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// result := unit ;
 194: LD_ADDR_VAR 0 4
 198: PUSH
 199: LD_VAR 0 5
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 4
 208: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 209: LD_INT 0
 211: PPUSH
 212: PPUSH
// if not side or not nation then
 213: LD_VAR 0 1
 217: NOT
 218: IFTRUE 227
 220: PUSH
 221: LD_VAR 0 2
 225: NOT
 226: OR
 227: IFFALSE 231
// exit ;
 229: GO 1001
// case nation of nation_american :
 231: LD_VAR 0 2
 235: PUSH
 236: LD_INT 1
 238: DOUBLE
 239: EQUAL
 240: IFTRUE 244
 242: GO 458
 244: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_INT 35
 252: PUSH
 253: LD_INT 45
 255: PUSH
 256: LD_INT 46
 258: PUSH
 259: LD_INT 47
 261: PUSH
 262: LD_INT 82
 264: PUSH
 265: LD_INT 83
 267: PUSH
 268: LD_INT 84
 270: PUSH
 271: LD_INT 85
 273: PUSH
 274: LD_INT 86
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 6
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 16
 291: PUSH
 292: LD_INT 7
 294: PUSH
 295: LD_INT 12
 297: PUSH
 298: LD_INT 13
 300: PUSH
 301: LD_INT 10
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 20
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 22
 315: PUSH
 316: LD_INT 25
 318: PUSH
 319: LD_INT 32
 321: PUSH
 322: LD_INT 27
 324: PUSH
 325: LD_INT 36
 327: PUSH
 328: LD_INT 69
 330: PUSH
 331: LD_INT 39
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 40
 339: PUSH
 340: LD_INT 48
 342: PUSH
 343: LD_INT 49
 345: PUSH
 346: LD_INT 50
 348: PUSH
 349: LD_INT 51
 351: PUSH
 352: LD_INT 52
 354: PUSH
 355: LD_INT 53
 357: PUSH
 358: LD_INT 54
 360: PUSH
 361: LD_INT 55
 363: PUSH
 364: LD_INT 56
 366: PUSH
 367: LD_INT 57
 369: PUSH
 370: LD_INT 58
 372: PUSH
 373: LD_INT 59
 375: PUSH
 376: LD_INT 60
 378: PUSH
 379: LD_INT 61
 381: PUSH
 382: LD_INT 62
 384: PUSH
 385: LD_INT 80
 387: PUSH
 388: LD_INT 82
 390: PUSH
 391: LD_INT 83
 393: PUSH
 394: LD_INT 84
 396: PUSH
 397: LD_INT 85
 399: PUSH
 400: LD_INT 86
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: ST_TO_ADDR
 456: GO 923
 458: LD_INT 2
 460: DOUBLE
 461: EQUAL
 462: IFTRUE 466
 464: GO 692
 466: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 35
 474: PUSH
 475: LD_INT 45
 477: PUSH
 478: LD_INT 46
 480: PUSH
 481: LD_INT 47
 483: PUSH
 484: LD_INT 82
 486: PUSH
 487: LD_INT 83
 489: PUSH
 490: LD_INT 84
 492: PUSH
 493: LD_INT 85
 495: PUSH
 496: LD_INT 87
 498: PUSH
 499: LD_INT 70
 501: PUSH
 502: LD_INT 1
 504: PUSH
 505: LD_INT 11
 507: PUSH
 508: LD_INT 3
 510: PUSH
 511: LD_INT 4
 513: PUSH
 514: LD_INT 5
 516: PUSH
 517: LD_INT 6
 519: PUSH
 520: LD_INT 15
 522: PUSH
 523: LD_INT 18
 525: PUSH
 526: LD_INT 7
 528: PUSH
 529: LD_INT 17
 531: PUSH
 532: LD_INT 8
 534: PUSH
 535: LD_INT 20
 537: PUSH
 538: LD_INT 21
 540: PUSH
 541: LD_INT 22
 543: PUSH
 544: LD_INT 72
 546: PUSH
 547: LD_INT 26
 549: PUSH
 550: LD_INT 69
 552: PUSH
 553: LD_INT 39
 555: PUSH
 556: LD_INT 40
 558: PUSH
 559: LD_INT 41
 561: PUSH
 562: LD_INT 42
 564: PUSH
 565: LD_INT 43
 567: PUSH
 568: LD_INT 48
 570: PUSH
 571: LD_INT 49
 573: PUSH
 574: LD_INT 50
 576: PUSH
 577: LD_INT 51
 579: PUSH
 580: LD_INT 52
 582: PUSH
 583: LD_INT 53
 585: PUSH
 586: LD_INT 54
 588: PUSH
 589: LD_INT 55
 591: PUSH
 592: LD_INT 56
 594: PUSH
 595: LD_INT 60
 597: PUSH
 598: LD_INT 61
 600: PUSH
 601: LD_INT 62
 603: PUSH
 604: LD_INT 66
 606: PUSH
 607: LD_INT 67
 609: PUSH
 610: LD_INT 68
 612: PUSH
 613: LD_INT 81
 615: PUSH
 616: LD_INT 82
 618: PUSH
 619: LD_INT 83
 621: PUSH
 622: LD_INT 84
 624: PUSH
 625: LD_INT 85
 627: PUSH
 628: LD_INT 87
 630: PUSH
 631: LD_INT 88
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: ST_TO_ADDR
 690: GO 923
 692: LD_INT 3
 694: DOUBLE
 695: EQUAL
 696: IFTRUE 700
 698: GO 922
 700: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
 701: LD_ADDR_VAR 0 4
 705: PUSH
 706: LD_INT 46
 708: PUSH
 709: LD_INT 47
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 82
 720: PUSH
 721: LD_INT 83
 723: PUSH
 724: LD_INT 84
 726: PUSH
 727: LD_INT 85
 729: PUSH
 730: LD_INT 86
 732: PUSH
 733: LD_INT 11
 735: PUSH
 736: LD_INT 9
 738: PUSH
 739: LD_INT 20
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: LD_INT 21
 747: PUSH
 748: LD_INT 24
 750: PUSH
 751: LD_INT 22
 753: PUSH
 754: LD_INT 25
 756: PUSH
 757: LD_INT 28
 759: PUSH
 760: LD_INT 29
 762: PUSH
 763: LD_INT 30
 765: PUSH
 766: LD_INT 31
 768: PUSH
 769: LD_INT 37
 771: PUSH
 772: LD_INT 38
 774: PUSH
 775: LD_INT 32
 777: PUSH
 778: LD_INT 27
 780: PUSH
 781: LD_INT 33
 783: PUSH
 784: LD_INT 69
 786: PUSH
 787: LD_INT 39
 789: PUSH
 790: LD_INT 34
 792: PUSH
 793: LD_INT 40
 795: PUSH
 796: LD_INT 71
 798: PUSH
 799: LD_INT 23
 801: PUSH
 802: LD_INT 44
 804: PUSH
 805: LD_INT 48
 807: PUSH
 808: LD_INT 49
 810: PUSH
 811: LD_INT 50
 813: PUSH
 814: LD_INT 51
 816: PUSH
 817: LD_INT 52
 819: PUSH
 820: LD_INT 53
 822: PUSH
 823: LD_INT 54
 825: PUSH
 826: LD_INT 55
 828: PUSH
 829: LD_INT 56
 831: PUSH
 832: LD_INT 57
 834: PUSH
 835: LD_INT 58
 837: PUSH
 838: LD_INT 59
 840: PUSH
 841: LD_INT 63
 843: PUSH
 844: LD_INT 64
 846: PUSH
 847: LD_INT 65
 849: PUSH
 850: LD_INT 82
 852: PUSH
 853: LD_INT 83
 855: PUSH
 856: LD_INT 84
 858: PUSH
 859: LD_INT 85
 861: PUSH
 862: LD_INT 86
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: ST_TO_ADDR
 920: GO 923
 922: POP
// if state > - 1 and state < 3 then
 923: LD_VAR 0 3
 927: PUSH
 928: LD_INT 1
 930: NEG
 931: GREATER
 932: IFFALSE 944
 934: PUSH
 935: LD_VAR 0 3
 939: PUSH
 940: LD_INT 3
 942: LESS
 943: AND
 944: IFFALSE 1001
// for i in result do
 946: LD_ADDR_VAR 0 5
 950: PUSH
 951: LD_VAR 0 4
 955: PUSH
 956: FOR_IN
 957: IFFALSE 999
// if GetTech ( i , side ) <> state then
 959: LD_VAR 0 5
 963: PPUSH
 964: LD_VAR 0 1
 968: PPUSH
 969: CALL_OW 321
 973: PUSH
 974: LD_VAR 0 3
 978: NONEQUAL
 979: IFFALSE 997
// result := result diff i ;
 981: LD_ADDR_VAR 0 4
 985: PUSH
 986: LD_VAR 0 4
 990: PUSH
 991: LD_VAR 0 5
 995: DIFF
 996: ST_TO_ADDR
 997: GO 956
 999: POP
1000: POP
// end ;
1001: LD_VAR 0 4
1005: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1006: LD_INT 0
1008: PPUSH
1009: PPUSH
1010: PPUSH
// result := true ;
1011: LD_ADDR_VAR 0 3
1015: PUSH
1016: LD_INT 1
1018: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1019: LD_ADDR_VAR 0 5
1023: PUSH
1024: LD_VAR 0 2
1028: PPUSH
1029: CALL_OW 480
1033: ST_TO_ADDR
// if not tmp then
1034: LD_VAR 0 5
1038: NOT
1039: IFFALSE 1043
// exit ;
1041: GO 1092
// for i in tmp do
1043: LD_ADDR_VAR 0 4
1047: PUSH
1048: LD_VAR 0 5
1052: PUSH
1053: FOR_IN
1054: IFFALSE 1090
// if GetTech ( i , side ) <> state_researched then
1056: LD_VAR 0 4
1060: PPUSH
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 321
1070: PUSH
1071: LD_INT 2
1073: NONEQUAL
1074: IFFALSE 1088
// begin result := false ;
1076: LD_ADDR_VAR 0 3
1080: PUSH
1081: LD_INT 0
1083: ST_TO_ADDR
// exit ;
1084: POP
1085: POP
1086: GO 1092
// end ;
1088: GO 1053
1090: POP
1091: POP
// end ;
1092: LD_VAR 0 3
1096: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1097: LD_INT 0
1099: PPUSH
1100: PPUSH
1101: PPUSH
1102: PPUSH
1103: PPUSH
1104: PPUSH
1105: PPUSH
1106: PPUSH
1107: PPUSH
1108: PPUSH
1109: PPUSH
1110: PPUSH
1111: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1112: LD_VAR 0 1
1116: NOT
1117: IFTRUE 1134
1119: PUSH
1120: LD_VAR 0 1
1124: PPUSH
1125: CALL_OW 257
1129: PUSH
1130: LD_INT 9
1132: NONEQUAL
1133: OR
1134: IFFALSE 1138
// exit ;
1136: GO 1717
// side := GetSide ( unit ) ;
1138: LD_ADDR_VAR 0 9
1142: PUSH
1143: LD_VAR 0 1
1147: PPUSH
1148: CALL_OW 255
1152: ST_TO_ADDR
// tech_space := tech_spacanom ;
1153: LD_ADDR_VAR 0 12
1157: PUSH
1158: LD_INT 29
1160: ST_TO_ADDR
// tech_time := tech_taurad ;
1161: LD_ADDR_VAR 0 13
1165: PUSH
1166: LD_INT 28
1168: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1169: LD_ADDR_VAR 0 11
1173: PUSH
1174: LD_VAR 0 1
1178: PPUSH
1179: CALL_OW 310
1183: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1184: LD_VAR 0 11
1188: PPUSH
1189: CALL_OW 247
1193: PUSH
1194: LD_INT 2
1196: EQUAL
1197: IFFALSE 1201
// exit ;
1199: GO 1717
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1201: LD_ADDR_VAR 0 8
1205: PUSH
1206: LD_INT 81
1208: PUSH
1209: LD_VAR 0 9
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 3
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PPUSH
1239: CALL_OW 69
1243: ST_TO_ADDR
// if not tmp then
1244: LD_VAR 0 8
1248: NOT
1249: IFFALSE 1253
// exit ;
1251: GO 1717
// if in_unit then
1253: LD_VAR 0 11
1257: IFFALSE 1281
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1259: LD_ADDR_VAR 0 10
1263: PUSH
1264: LD_VAR 0 8
1268: PPUSH
1269: LD_VAR 0 11
1273: PPUSH
1274: CALL_OW 74
1278: ST_TO_ADDR
1279: GO 1301
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1281: LD_ADDR_VAR 0 10
1285: PUSH
1286: LD_VAR 0 8
1290: PPUSH
1291: LD_VAR 0 1
1295: PPUSH
1296: CALL_OW 74
1300: ST_TO_ADDR
// if not enemy then
1301: LD_VAR 0 10
1305: NOT
1306: IFFALSE 1310
// exit ;
1308: GO 1717
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1310: LD_VAR 0 11
1314: IFFALSE 1336
1316: PUSH
1317: LD_VAR 0 11
1321: PPUSH
1322: LD_VAR 0 10
1326: PPUSH
1327: CALL_OW 296
1331: PUSH
1332: LD_INT 13
1334: GREATER
1335: AND
1336: IFTRUE 1358
1338: PUSH
1339: LD_VAR 0 1
1343: PPUSH
1344: LD_VAR 0 10
1348: PPUSH
1349: CALL_OW 296
1353: PUSH
1354: LD_INT 12
1356: GREATER
1357: OR
1358: IFFALSE 1362
// exit ;
1360: GO 1717
// missile := [ 1 ] ;
1362: LD_ADDR_VAR 0 14
1366: PUSH
1367: LD_INT 1
1369: PUSH
1370: EMPTY
1371: LIST
1372: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1373: LD_VAR 0 9
1377: PPUSH
1378: LD_VAR 0 12
1382: PPUSH
1383: CALL_OW 325
1387: IFFALSE 1416
// missile := Replace ( missile , missile + 1 , 2 ) ;
1389: LD_ADDR_VAR 0 14
1393: PUSH
1394: LD_VAR 0 14
1398: PPUSH
1399: LD_VAR 0 14
1403: PUSH
1404: LD_INT 1
1406: PLUS
1407: PPUSH
1408: LD_INT 2
1410: PPUSH
1411: CALL_OW 1
1415: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1416: LD_VAR 0 9
1420: PPUSH
1421: LD_VAR 0 13
1425: PPUSH
1426: CALL_OW 325
1430: IFFALSE 1454
1432: PUSH
1433: LD_VAR 0 10
1437: PPUSH
1438: CALL_OW 255
1442: PPUSH
1443: LD_VAR 0 13
1447: PPUSH
1448: CALL_OW 325
1452: NOT
1453: AND
1454: IFFALSE 1483
// missile := Replace ( missile , missile + 1 , 3 ) ;
1456: LD_ADDR_VAR 0 14
1460: PUSH
1461: LD_VAR 0 14
1465: PPUSH
1466: LD_VAR 0 14
1470: PUSH
1471: LD_INT 1
1473: PLUS
1474: PPUSH
1475: LD_INT 3
1477: PPUSH
1478: CALL_OW 1
1482: ST_TO_ADDR
// if missile < 2 then
1483: LD_VAR 0 14
1487: PUSH
1488: LD_INT 2
1490: LESS
1491: IFFALSE 1495
// exit ;
1493: GO 1717
// x := GetX ( enemy ) ;
1495: LD_ADDR_VAR 0 4
1499: PUSH
1500: LD_VAR 0 10
1504: PPUSH
1505: CALL_OW 250
1509: ST_TO_ADDR
// y := GetY ( enemy ) ;
1510: LD_ADDR_VAR 0 5
1514: PUSH
1515: LD_VAR 0 10
1519: PPUSH
1520: CALL_OW 251
1524: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1525: LD_ADDR_VAR 0 6
1529: PUSH
1530: LD_VAR 0 4
1534: PUSH
1535: LD_INT 1
1537: NEG
1538: PPUSH
1539: LD_INT 1
1541: PPUSH
1542: CALL_OW 12
1546: PLUS
1547: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1548: LD_ADDR_VAR 0 7
1552: PUSH
1553: LD_VAR 0 5
1557: PUSH
1558: LD_INT 1
1560: NEG
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: CALL_OW 12
1569: PLUS
1570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1571: LD_VAR 0 6
1575: PPUSH
1576: LD_VAR 0 7
1580: PPUSH
1581: CALL_OW 488
1585: NOT
1586: IFFALSE 1608
// begin _x := x ;
1588: LD_ADDR_VAR 0 6
1592: PUSH
1593: LD_VAR 0 4
1597: ST_TO_ADDR
// _y := y ;
1598: LD_ADDR_VAR 0 7
1602: PUSH
1603: LD_VAR 0 5
1607: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1608: LD_ADDR_VAR 0 3
1612: PUSH
1613: LD_INT 1
1615: PPUSH
1616: LD_VAR 0 14
1620: PPUSH
1621: CALL_OW 12
1625: ST_TO_ADDR
// case i of 1 :
1626: LD_VAR 0 3
1630: PUSH
1631: LD_INT 1
1633: DOUBLE
1634: EQUAL
1635: IFTRUE 1639
1637: GO 1656
1639: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_VAR 0 10
1649: PPUSH
1650: CALL_OW 115
1654: GO 1717
1656: LD_INT 2
1658: DOUBLE
1659: EQUAL
1660: IFTRUE 1664
1662: GO 1686
1664: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1665: LD_VAR 0 1
1669: PPUSH
1670: LD_VAR 0 6
1674: PPUSH
1675: LD_VAR 0 7
1679: PPUSH
1680: CALL_OW 153
1684: GO 1717
1686: LD_INT 3
1688: DOUBLE
1689: EQUAL
1690: IFTRUE 1694
1692: GO 1716
1694: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1695: LD_VAR 0 1
1699: PPUSH
1700: LD_VAR 0 6
1704: PPUSH
1705: LD_VAR 0 7
1709: PPUSH
1710: CALL_OW 154
1714: GO 1717
1716: POP
// end ;
1717: LD_VAR 0 2
1721: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1722: LD_INT 0
1724: PPUSH
1725: PPUSH
1726: PPUSH
1727: PPUSH
1728: PPUSH
1729: PPUSH
// if not unit or not building then
1730: LD_VAR 0 1
1734: NOT
1735: IFTRUE 1744
1737: PUSH
1738: LD_VAR 0 2
1742: NOT
1743: OR
1744: IFFALSE 1748
// exit ;
1746: GO 1906
// x := GetX ( building ) ;
1748: LD_ADDR_VAR 0 5
1752: PUSH
1753: LD_VAR 0 2
1757: PPUSH
1758: CALL_OW 250
1762: ST_TO_ADDR
// y := GetY ( building ) ;
1763: LD_ADDR_VAR 0 6
1767: PUSH
1768: LD_VAR 0 2
1772: PPUSH
1773: CALL_OW 251
1777: ST_TO_ADDR
// for i := 0 to 5 do
1778: LD_ADDR_VAR 0 4
1782: PUSH
1783: DOUBLE
1784: LD_INT 0
1786: DEC
1787: ST_TO_ADDR
1788: LD_INT 5
1790: PUSH
1791: FOR_TO
1792: IFFALSE 1904
// begin _x := ShiftX ( x , i , 3 ) ;
1794: LD_ADDR_VAR 0 7
1798: PUSH
1799: LD_VAR 0 5
1803: PPUSH
1804: LD_VAR 0 4
1808: PPUSH
1809: LD_INT 3
1811: PPUSH
1812: CALL_OW 272
1816: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1817: LD_ADDR_VAR 0 8
1821: PUSH
1822: LD_VAR 0 6
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: LD_INT 3
1834: PPUSH
1835: CALL_OW 273
1839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1840: LD_VAR 0 7
1844: PPUSH
1845: LD_VAR 0 8
1849: PPUSH
1850: CALL_OW 488
1854: NOT
1855: IFFALSE 1859
// continue ;
1857: GO 1791
// if HexInfo ( _x , _y ) = 0 then
1859: LD_VAR 0 7
1863: PPUSH
1864: LD_VAR 0 8
1868: PPUSH
1869: CALL_OW 428
1873: PUSH
1874: LD_INT 0
1876: EQUAL
1877: IFFALSE 1902
// begin ComMoveXY ( unit , _x , _y ) ;
1879: LD_VAR 0 1
1883: PPUSH
1884: LD_VAR 0 7
1888: PPUSH
1889: LD_VAR 0 8
1893: PPUSH
1894: CALL_OW 111
// exit ;
1898: POP
1899: POP
1900: GO 1906
// end ; end ;
1902: GO 1791
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 3
1910: RET
// export function ScanBase ( side , base_area ) ; begin
1911: LD_INT 0
1913: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: LD_VAR 0 2
1923: PPUSH
1924: LD_INT 81
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PPUSH
1936: CALL_OW 70
1940: ST_TO_ADDR
// end ;
1941: LD_VAR 0 3
1945: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1946: LD_INT 0
1948: PPUSH
1949: PPUSH
1950: PPUSH
1951: PPUSH
// result := false ;
1952: LD_ADDR_VAR 0 2
1956: PUSH
1957: LD_INT 0
1959: ST_TO_ADDR
// side := GetSide ( unit ) ;
1960: LD_ADDR_VAR 0 3
1964: PUSH
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 255
1974: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1975: LD_ADDR_VAR 0 4
1979: PUSH
1980: LD_VAR 0 1
1984: PPUSH
1985: CALL_OW 248
1989: ST_TO_ADDR
// case nat of 1 :
1990: LD_VAR 0 4
1994: PUSH
1995: LD_INT 1
1997: DOUBLE
1998: EQUAL
1999: IFTRUE 2003
2001: GO 2014
2003: POP
// tech := tech_lassight ; 2 :
2004: LD_ADDR_VAR 0 5
2008: PUSH
2009: LD_INT 12
2011: ST_TO_ADDR
2012: GO 2053
2014: LD_INT 2
2016: DOUBLE
2017: EQUAL
2018: IFTRUE 2022
2020: GO 2033
2022: POP
// tech := tech_mortar ; 3 :
2023: LD_ADDR_VAR 0 5
2027: PUSH
2028: LD_INT 41
2030: ST_TO_ADDR
2031: GO 2053
2033: LD_INT 3
2035: DOUBLE
2036: EQUAL
2037: IFTRUE 2041
2039: GO 2052
2041: POP
// tech := tech_bazooka ; end ;
2042: LD_ADDR_VAR 0 5
2046: PUSH
2047: LD_INT 44
2049: ST_TO_ADDR
2050: GO 2053
2052: POP
// if Researched ( side , tech ) then
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_VAR 0 5
2062: PPUSH
2063: CALL_OW 325
2067: IFFALSE 2094
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2069: LD_ADDR_VAR 0 2
2073: PUSH
2074: LD_INT 5
2076: PUSH
2077: LD_INT 8
2079: PUSH
2080: LD_INT 9
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: PUSH
2088: LD_VAR 0 4
2092: ARRAY
2093: ST_TO_ADDR
// end ;
2094: LD_VAR 0 2
2098: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2099: LD_INT 0
2101: PPUSH
2102: PPUSH
2103: PPUSH
// if not mines then
2104: LD_VAR 0 2
2108: NOT
2109: IFFALSE 2113
// exit ;
2111: GO 2257
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2113: LD_ADDR_VAR 0 5
2117: PUSH
2118: LD_INT 81
2120: PUSH
2121: LD_VAR 0 1
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: LD_INT 21
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PPUSH
2151: CALL_OW 69
2155: ST_TO_ADDR
// for i in mines do
2156: LD_ADDR_VAR 0 4
2160: PUSH
2161: LD_VAR 0 2
2165: PUSH
2166: FOR_IN
2167: IFFALSE 2255
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2169: LD_VAR 0 4
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PPUSH
2178: LD_VAR 0 4
2182: PUSH
2183: LD_INT 2
2185: ARRAY
2186: PPUSH
2187: CALL_OW 458
2191: NOT
2192: IFFALSE 2196
// continue ;
2194: GO 2166
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2196: LD_VAR 0 4
2200: PUSH
2201: LD_INT 1
2203: ARRAY
2204: PPUSH
2205: LD_VAR 0 4
2209: PUSH
2210: LD_INT 2
2212: ARRAY
2213: PPUSH
2214: CALL_OW 428
2218: PUSH
2219: LD_VAR 0 5
2223: IN
2224: IFFALSE 2253
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2226: LD_VAR 0 4
2230: PUSH
2231: LD_INT 1
2233: ARRAY
2234: PPUSH
2235: LD_VAR 0 4
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 1
2248: PPUSH
2249: CALL_OW 456
// end ;
2253: GO 2166
2255: POP
2256: POP
// end ;
2257: LD_VAR 0 3
2261: RET
// export function Count ( array ) ; begin
2262: LD_INT 0
2264: PPUSH
// result := array + 0 ;
2265: LD_ADDR_VAR 0 2
2269: PUSH
2270: LD_VAR 0 1
2274: PUSH
2275: LD_INT 0
2277: PLUS
2278: ST_TO_ADDR
// end ;
2279: LD_VAR 0 2
2283: RET
// export function IsEmpty ( building ) ; begin
2284: LD_INT 0
2286: PPUSH
// if not building then
2287: LD_VAR 0 1
2291: NOT
2292: IFFALSE 2296
// exit ;
2294: GO 2339
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2296: LD_ADDR_VAR 0 2
2300: PUSH
2301: LD_VAR 0 1
2305: PUSH
2306: LD_INT 22
2308: PUSH
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 255
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 58
2325: PUSH
2326: EMPTY
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: IN
2338: ST_TO_ADDR
// end ;
2339: LD_VAR 0 2
2343: RET
// export function IsNotFull ( building ) ; var places ; begin
2344: LD_INT 0
2346: PPUSH
2347: PPUSH
// if not building then
2348: LD_VAR 0 1
2352: NOT
2353: IFFALSE 2357
// exit ;
2355: GO 2385
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2357: LD_ADDR_VAR 0 2
2361: PUSH
2362: LD_VAR 0 1
2366: PPUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 62
2372: PUSH
2373: EMPTY
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PPUSH
2380: CALL_OW 72
2384: ST_TO_ADDR
// end ;
2385: LD_VAR 0 2
2389: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2390: LD_INT 0
2392: PPUSH
2393: PPUSH
2394: PPUSH
2395: PPUSH
// tmp := [ ] ;
2396: LD_ADDR_VAR 0 3
2400: PUSH
2401: EMPTY
2402: ST_TO_ADDR
// list := [ ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: EMPTY
2409: ST_TO_ADDR
// for i = 16 to 25 do
2410: LD_ADDR_VAR 0 4
2414: PUSH
2415: DOUBLE
2416: LD_INT 16
2418: DEC
2419: ST_TO_ADDR
2420: LD_INT 25
2422: PUSH
2423: FOR_TO
2424: IFFALSE 2497
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2426: LD_ADDR_VAR 0 3
2430: PUSH
2431: LD_VAR 0 3
2435: PUSH
2436: LD_INT 22
2438: PUSH
2439: LD_VAR 0 1
2443: PPUSH
2444: CALL_OW 255
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: LD_INT 91
2455: PUSH
2456: LD_VAR 0 1
2460: PUSH
2461: LD_INT 6
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 30
2471: PUSH
2472: LD_VAR 0 4
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: PUSH
2486: EMPTY
2487: LIST
2488: PPUSH
2489: CALL_OW 69
2493: ADD
2494: ST_TO_ADDR
2495: GO 2423
2497: POP
2498: POP
// for i = 1 to tmp do
2499: LD_ADDR_VAR 0 4
2503: PUSH
2504: DOUBLE
2505: LD_INT 1
2507: DEC
2508: ST_TO_ADDR
2509: LD_VAR 0 3
2513: PUSH
2514: FOR_TO
2515: IFFALSE 2603
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2517: LD_ADDR_VAR 0 5
2521: PUSH
2522: LD_VAR 0 5
2526: PUSH
2527: LD_VAR 0 3
2531: PUSH
2532: LD_VAR 0 4
2536: ARRAY
2537: PPUSH
2538: CALL_OW 266
2542: PUSH
2543: LD_VAR 0 3
2547: PUSH
2548: LD_VAR 0 4
2552: ARRAY
2553: PPUSH
2554: CALL_OW 250
2558: PUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_VAR 0 4
2568: ARRAY
2569: PPUSH
2570: CALL_OW 251
2574: PUSH
2575: LD_VAR 0 3
2579: PUSH
2580: LD_VAR 0 4
2584: ARRAY
2585: PPUSH
2586: CALL_OW 254
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: EMPTY
2598: LIST
2599: ADD
2600: ST_TO_ADDR
2601: GO 2514
2603: POP
2604: POP
// result := list ;
2605: LD_ADDR_VAR 0 2
2609: PUSH
2610: LD_VAR 0 5
2614: ST_TO_ADDR
// end ;
2615: LD_VAR 0 2
2619: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2620: LD_INT 0
2622: PPUSH
2623: PPUSH
2624: PPUSH
2625: PPUSH
2626: PPUSH
2627: PPUSH
2628: PPUSH
// if not factory then
2629: LD_VAR 0 1
2633: NOT
2634: IFFALSE 2638
// exit ;
2636: GO 3241
// if control = control_apeman then
2638: LD_VAR 0 4
2642: PUSH
2643: LD_INT 5
2645: EQUAL
2646: IFFALSE 2755
// begin tmp := UnitsInside ( factory ) ;
2648: LD_ADDR_VAR 0 8
2652: PUSH
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL_OW 313
2662: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2663: LD_VAR 0 8
2667: PPUSH
2668: LD_INT 25
2670: PUSH
2671: LD_INT 12
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PPUSH
2678: CALL_OW 72
2682: NOT
2683: IFFALSE 2693
// control := control_manual ;
2685: LD_ADDR_VAR 0 4
2689: PUSH
2690: LD_INT 1
2692: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2693: LD_ADDR_VAR 0 8
2697: PUSH
2698: LD_VAR 0 1
2702: PPUSH
2703: CALL 2390 0 1
2707: ST_TO_ADDR
// if tmp then
2708: LD_VAR 0 8
2712: IFFALSE 2755
// begin for i in tmp do
2714: LD_ADDR_VAR 0 7
2718: PUSH
2719: LD_VAR 0 8
2723: PUSH
2724: FOR_IN
2725: IFFALSE 2753
// if i [ 1 ] = b_ext_radio then
2727: LD_VAR 0 7
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: PUSH
2736: LD_INT 22
2738: EQUAL
2739: IFFALSE 2751
// begin control := control_remote ;
2741: LD_ADDR_VAR 0 4
2745: PUSH
2746: LD_INT 2
2748: ST_TO_ADDR
// break ;
2749: GO 2753
// end ;
2751: GO 2724
2753: POP
2754: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2755: LD_VAR 0 1
2759: PPUSH
2760: LD_VAR 0 2
2764: PPUSH
2765: LD_VAR 0 3
2769: PPUSH
2770: LD_VAR 0 4
2774: PPUSH
2775: LD_VAR 0 5
2779: PPUSH
2780: CALL_OW 448
2784: IFFALSE 2819
// begin result := [ chassis , engine , control , weapon ] ;
2786: LD_ADDR_VAR 0 6
2790: PUSH
2791: LD_VAR 0 2
2795: PUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_VAR 0 4
2805: PUSH
2806: LD_VAR 0 5
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: ST_TO_ADDR
// exit ;
2817: GO 3241
// end ; _chassis := AvailableChassisList ( factory ) ;
2819: LD_ADDR_VAR 0 9
2823: PUSH
2824: LD_VAR 0 1
2828: PPUSH
2829: CALL_OW 475
2833: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2834: LD_ADDR_VAR 0 11
2838: PUSH
2839: LD_VAR 0 1
2843: PPUSH
2844: CALL_OW 476
2848: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2849: LD_ADDR_VAR 0 12
2853: PUSH
2854: LD_VAR 0 1
2858: PPUSH
2859: CALL_OW 477
2863: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2864: LD_ADDR_VAR 0 10
2868: PUSH
2869: LD_VAR 0 1
2873: PPUSH
2874: CALL_OW 478
2878: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2879: LD_VAR 0 9
2883: NOT
2884: IFTRUE 2893
2886: PUSH
2887: LD_VAR 0 11
2891: NOT
2892: OR
2893: IFTRUE 2902
2895: PUSH
2896: LD_VAR 0 12
2900: NOT
2901: OR
2902: IFTRUE 2911
2904: PUSH
2905: LD_VAR 0 10
2909: NOT
2910: OR
2911: IFFALSE 2946
// begin result := [ chassis , engine , control , weapon ] ;
2913: LD_ADDR_VAR 0 6
2917: PUSH
2918: LD_VAR 0 2
2922: PUSH
2923: LD_VAR 0 3
2927: PUSH
2928: LD_VAR 0 4
2932: PUSH
2933: LD_VAR 0 5
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: ST_TO_ADDR
// exit ;
2944: GO 3241
// end ; if not chassis in _chassis then
2946: LD_VAR 0 2
2950: PUSH
2951: LD_VAR 0 9
2955: IN
2956: NOT
2957: IFFALSE 2983
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2959: LD_ADDR_VAR 0 2
2963: PUSH
2964: LD_VAR 0 9
2968: PUSH
2969: LD_INT 1
2971: PPUSH
2972: LD_VAR 0 9
2976: PPUSH
2977: CALL_OW 12
2981: ARRAY
2982: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
2983: LD_VAR 0 2
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL 3246 0 2
2997: NOT
2998: IFFALSE 3059
// repeat engine := _engine [ 1 ] ;
3000: LD_ADDR_VAR 0 3
3004: PUSH
3005: LD_VAR 0 11
3009: PUSH
3010: LD_INT 1
3012: ARRAY
3013: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3014: LD_ADDR_VAR 0 11
3018: PUSH
3019: LD_VAR 0 11
3023: PPUSH
3024: LD_INT 1
3026: PPUSH
3027: CALL_OW 3
3031: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 3
3041: PPUSH
3042: CALL 3246 0 2
3046: IFTRUE 3057
3048: PUSH
3049: LD_VAR 0 11
3053: PUSH
3054: EMPTY
3055: EQUAL
3056: OR
3057: IFFALSE 3000
// if not control in _control then
3059: LD_VAR 0 4
3063: PUSH
3064: LD_VAR 0 12
3068: IN
3069: NOT
3070: IFFALSE 3096
// control := _control [ rand ( 1 , _control ) ] ;
3072: LD_ADDR_VAR 0 4
3076: PUSH
3077: LD_VAR 0 12
3081: PUSH
3082: LD_INT 1
3084: PPUSH
3085: LD_VAR 0 12
3089: PPUSH
3090: CALL_OW 12
3094: ARRAY
3095: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3096: LD_VAR 0 2
3100: PPUSH
3101: LD_VAR 0 5
3105: PPUSH
3106: CALL 3468 0 2
3110: NOT
3111: IFFALSE 3172
// repeat weapon := _weapon [ 1 ] ;
3113: LD_ADDR_VAR 0 5
3117: PUSH
3118: LD_VAR 0 10
3122: PUSH
3123: LD_INT 1
3125: ARRAY
3126: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3127: LD_ADDR_VAR 0 10
3131: PUSH
3132: LD_VAR 0 10
3136: PPUSH
3137: LD_INT 1
3139: PPUSH
3140: CALL_OW 3
3144: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3145: LD_VAR 0 2
3149: PPUSH
3150: LD_VAR 0 5
3154: PPUSH
3155: CALL 3468 0 2
3159: IFTRUE 3170
3161: PUSH
3162: LD_VAR 0 10
3166: PUSH
3167: EMPTY
3168: EQUAL
3169: OR
3170: IFFALSE 3113
// result := [ ] ;
3172: LD_ADDR_VAR 0 6
3176: PUSH
3177: EMPTY
3178: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3179: LD_VAR 0 1
3183: PPUSH
3184: LD_VAR 0 2
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: LD_VAR 0 4
3198: PPUSH
3199: LD_VAR 0 5
3203: PPUSH
3204: CALL_OW 448
3208: IFFALSE 3241
// result := [ chassis , engine , control , weapon ] ;
3210: LD_ADDR_VAR 0 6
3214: PUSH
3215: LD_VAR 0 2
3219: PUSH
3220: LD_VAR 0 3
3224: PUSH
3225: LD_VAR 0 4
3229: PUSH
3230: LD_VAR 0 5
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: ST_TO_ADDR
// end ;
3241: LD_VAR 0 6
3245: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3246: LD_INT 0
3248: PPUSH
// if not chassis or not engine then
3249: LD_VAR 0 1
3253: NOT
3254: IFTRUE 3263
3256: PUSH
3257: LD_VAR 0 2
3261: NOT
3262: OR
3263: IFFALSE 3267
// exit ;
3265: GO 3463
// case engine of engine_solar :
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: DOUBLE
3275: EQUAL
3276: IFTRUE 3280
3278: GO 3318
3280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3281: LD_ADDR_VAR 0 3
3285: PUSH
3286: LD_INT 11
3288: PUSH
3289: LD_INT 12
3291: PUSH
3292: LD_INT 13
3294: PUSH
3295: LD_INT 14
3297: PUSH
3298: LD_INT 1
3300: PUSH
3301: LD_INT 2
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: ST_TO_ADDR
3316: GO 3447
3318: LD_INT 1
3320: DOUBLE
3321: EQUAL
3322: IFTRUE 3326
3324: GO 3388
3326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3327: LD_ADDR_VAR 0 3
3331: PUSH
3332: LD_INT 11
3334: PUSH
3335: LD_INT 12
3337: PUSH
3338: LD_INT 13
3340: PUSH
3341: LD_INT 14
3343: PUSH
3344: LD_INT 1
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: LD_INT 4
3355: PUSH
3356: LD_INT 5
3358: PUSH
3359: LD_INT 21
3361: PUSH
3362: LD_INT 23
3364: PUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 24
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: ST_TO_ADDR
3386: GO 3447
3388: LD_INT 3
3390: DOUBLE
3391: EQUAL
3392: IFTRUE 3396
3394: GO 3446
3396: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3397: LD_ADDR_VAR 0 3
3401: PUSH
3402: LD_INT 13
3404: PUSH
3405: LD_INT 14
3407: PUSH
3408: LD_INT 2
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 5
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 22
3425: PUSH
3426: LD_INT 23
3428: PUSH
3429: LD_INT 24
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: ST_TO_ADDR
3444: GO 3447
3446: POP
// result := ( chassis in result ) ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_VAR 0 1
3456: PUSH
3457: LD_VAR 0 3
3461: IN
3462: ST_TO_ADDR
// end ;
3463: LD_VAR 0 3
3467: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3468: LD_INT 0
3470: PPUSH
// if not chassis or not weapon then
3471: LD_VAR 0 1
3475: NOT
3476: IFTRUE 3485
3478: PUSH
3479: LD_VAR 0 2
3483: NOT
3484: OR
3485: IFFALSE 3489
// exit ;
3487: GO 4549
// case weapon of us_machine_gun :
3489: LD_VAR 0 2
3493: PUSH
3494: LD_INT 2
3496: DOUBLE
3497: EQUAL
3498: IFTRUE 3502
3500: GO 3532
3502: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3503: LD_ADDR_VAR 0 3
3507: PUSH
3508: LD_INT 1
3510: PUSH
3511: LD_INT 2
3513: PUSH
3514: LD_INT 3
3516: PUSH
3517: LD_INT 4
3519: PUSH
3520: LD_INT 5
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: ST_TO_ADDR
3530: GO 4533
3532: LD_INT 3
3534: DOUBLE
3535: EQUAL
3536: IFTRUE 3540
3538: GO 3570
3540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: LD_INT 1
3548: PUSH
3549: LD_INT 2
3551: PUSH
3552: LD_INT 3
3554: PUSH
3555: LD_INT 4
3557: PUSH
3558: LD_INT 5
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: ST_TO_ADDR
3568: GO 4533
3570: LD_INT 11
3572: DOUBLE
3573: EQUAL
3574: IFTRUE 3578
3576: GO 3608
3578: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3579: LD_ADDR_VAR 0 3
3583: PUSH
3584: LD_INT 1
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: LD_INT 3
3592: PUSH
3593: LD_INT 4
3595: PUSH
3596: LD_INT 5
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: ST_TO_ADDR
3606: GO 4533
3608: LD_INT 4
3610: DOUBLE
3611: EQUAL
3612: IFTRUE 3616
3614: GO 3642
3616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3617: LD_ADDR_VAR 0 3
3621: PUSH
3622: LD_INT 2
3624: PUSH
3625: LD_INT 3
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: ST_TO_ADDR
3640: GO 4533
3642: LD_INT 5
3644: DOUBLE
3645: EQUAL
3646: IFTRUE 3650
3648: GO 3676
3650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3651: LD_ADDR_VAR 0 3
3655: PUSH
3656: LD_INT 2
3658: PUSH
3659: LD_INT 3
3661: PUSH
3662: LD_INT 4
3664: PUSH
3665: LD_INT 5
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: ST_TO_ADDR
3674: GO 4533
3676: LD_INT 9
3678: DOUBLE
3679: EQUAL
3680: IFTRUE 3684
3682: GO 3710
3684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3685: LD_ADDR_VAR 0 3
3689: PUSH
3690: LD_INT 2
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 4
3698: PUSH
3699: LD_INT 5
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: ST_TO_ADDR
3708: GO 4533
3710: LD_INT 7
3712: DOUBLE
3713: EQUAL
3714: IFTRUE 3718
3716: GO 3744
3718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3719: LD_ADDR_VAR 0 3
3723: PUSH
3724: LD_INT 2
3726: PUSH
3727: LD_INT 3
3729: PUSH
3730: LD_INT 4
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: ST_TO_ADDR
3742: GO 4533
3744: LD_INT 12
3746: DOUBLE
3747: EQUAL
3748: IFTRUE 3752
3750: GO 3778
3752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: LD_INT 4
3766: PUSH
3767: LD_INT 5
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: ST_TO_ADDR
3776: GO 4533
3778: LD_INT 13
3780: DOUBLE
3781: EQUAL
3782: IFTRUE 3786
3784: GO 3812
3786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3787: LD_ADDR_VAR 0 3
3791: PUSH
3792: LD_INT 2
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: LD_INT 4
3800: PUSH
3801: LD_INT 5
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: ST_TO_ADDR
3810: GO 4533
3812: LD_INT 14
3814: DOUBLE
3815: EQUAL
3816: IFTRUE 3820
3818: GO 3838
3820: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3821: LD_ADDR_VAR 0 3
3825: PUSH
3826: LD_INT 4
3828: PUSH
3829: LD_INT 5
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: ST_TO_ADDR
3836: GO 4533
3838: LD_INT 6
3840: DOUBLE
3841: EQUAL
3842: IFTRUE 3846
3844: GO 3864
3846: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_INT 4
3854: PUSH
3855: LD_INT 5
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: ST_TO_ADDR
3862: GO 4533
3864: LD_INT 10
3866: DOUBLE
3867: EQUAL
3868: IFTRUE 3872
3870: GO 3890
3872: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3873: LD_ADDR_VAR 0 3
3877: PUSH
3878: LD_INT 4
3880: PUSH
3881: LD_INT 5
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: ST_TO_ADDR
3888: GO 4533
3890: LD_INT 22
3892: DOUBLE
3893: EQUAL
3894: IFTRUE 3898
3896: GO 3924
3898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: LD_INT 11
3906: PUSH
3907: LD_INT 12
3909: PUSH
3910: LD_INT 13
3912: PUSH
3913: LD_INT 14
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: ST_TO_ADDR
3922: GO 4533
3924: LD_INT 23
3926: DOUBLE
3927: EQUAL
3928: IFTRUE 3932
3930: GO 3958
3932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3933: LD_ADDR_VAR 0 3
3937: PUSH
3938: LD_INT 11
3940: PUSH
3941: LD_INT 12
3943: PUSH
3944: LD_INT 13
3946: PUSH
3947: LD_INT 14
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: ST_TO_ADDR
3956: GO 4533
3958: LD_INT 24
3960: DOUBLE
3961: EQUAL
3962: IFTRUE 3966
3964: GO 3992
3966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3967: LD_ADDR_VAR 0 3
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 12
3977: PUSH
3978: LD_INT 13
3980: PUSH
3981: LD_INT 14
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: ST_TO_ADDR
3990: GO 4533
3992: LD_INT 30
3994: DOUBLE
3995: EQUAL
3996: IFTRUE 4000
3998: GO 4026
4000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4001: LD_ADDR_VAR 0 3
4005: PUSH
4006: LD_INT 11
4008: PUSH
4009: LD_INT 12
4011: PUSH
4012: LD_INT 13
4014: PUSH
4015: LD_INT 14
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: ST_TO_ADDR
4024: GO 4533
4026: LD_INT 25
4028: DOUBLE
4029: EQUAL
4030: IFTRUE 4034
4032: GO 4052
4034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_INT 13
4042: PUSH
4043: LD_INT 14
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: ST_TO_ADDR
4050: GO 4533
4052: LD_INT 27
4054: DOUBLE
4055: EQUAL
4056: IFTRUE 4060
4058: GO 4078
4060: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4061: LD_ADDR_VAR 0 3
4065: PUSH
4066: LD_INT 13
4068: PUSH
4069: LD_INT 14
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: ST_TO_ADDR
4076: GO 4533
4078: LD_INT 92
4080: DOUBLE
4081: EQUAL
4082: IFTRUE 4086
4084: GO 4112
4086: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: LD_INT 11
4094: PUSH
4095: LD_INT 12
4097: PUSH
4098: LD_INT 13
4100: PUSH
4101: LD_INT 14
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: ST_TO_ADDR
4110: GO 4533
4112: LD_INT 28
4114: DOUBLE
4115: EQUAL
4116: IFTRUE 4120
4118: GO 4138
4120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4121: LD_ADDR_VAR 0 3
4125: PUSH
4126: LD_INT 13
4128: PUSH
4129: LD_INT 14
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: ST_TO_ADDR
4136: GO 4533
4138: LD_INT 29
4140: DOUBLE
4141: EQUAL
4142: IFTRUE 4146
4144: GO 4164
4146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4147: LD_ADDR_VAR 0 3
4151: PUSH
4152: LD_INT 13
4154: PUSH
4155: LD_INT 14
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: ST_TO_ADDR
4162: GO 4533
4164: LD_INT 31
4166: DOUBLE
4167: EQUAL
4168: IFTRUE 4172
4170: GO 4190
4172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4173: LD_ADDR_VAR 0 3
4177: PUSH
4178: LD_INT 13
4180: PUSH
4181: LD_INT 14
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: ST_TO_ADDR
4188: GO 4533
4190: LD_INT 26
4192: DOUBLE
4193: EQUAL
4194: IFTRUE 4198
4196: GO 4216
4198: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4199: LD_ADDR_VAR 0 3
4203: PUSH
4204: LD_INT 13
4206: PUSH
4207: LD_INT 14
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: ST_TO_ADDR
4214: GO 4533
4216: LD_INT 42
4218: DOUBLE
4219: EQUAL
4220: IFTRUE 4224
4222: GO 4250
4224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: LD_INT 21
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 23
4238: PUSH
4239: LD_INT 24
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: LIST
4246: LIST
4247: ST_TO_ADDR
4248: GO 4533
4250: LD_INT 43
4252: DOUBLE
4253: EQUAL
4254: IFTRUE 4258
4256: GO 4284
4258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: LD_INT 21
4266: PUSH
4267: LD_INT 22
4269: PUSH
4270: LD_INT 23
4272: PUSH
4273: LD_INT 24
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: ST_TO_ADDR
4282: GO 4533
4284: LD_INT 44
4286: DOUBLE
4287: EQUAL
4288: IFTRUE 4292
4290: GO 4318
4292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4293: LD_ADDR_VAR 0 3
4297: PUSH
4298: LD_INT 21
4300: PUSH
4301: LD_INT 22
4303: PUSH
4304: LD_INT 23
4306: PUSH
4307: LD_INT 24
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: ST_TO_ADDR
4316: GO 4533
4318: LD_INT 45
4320: DOUBLE
4321: EQUAL
4322: IFTRUE 4326
4324: GO 4352
4326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4327: LD_ADDR_VAR 0 3
4331: PUSH
4332: LD_INT 21
4334: PUSH
4335: LD_INT 22
4337: PUSH
4338: LD_INT 23
4340: PUSH
4341: LD_INT 24
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: ST_TO_ADDR
4350: GO 4533
4352: LD_INT 49
4354: DOUBLE
4355: EQUAL
4356: IFTRUE 4360
4358: GO 4386
4360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4361: LD_ADDR_VAR 0 3
4365: PUSH
4366: LD_INT 21
4368: PUSH
4369: LD_INT 22
4371: PUSH
4372: LD_INT 23
4374: PUSH
4375: LD_INT 24
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
4384: GO 4533
4386: LD_INT 51
4388: DOUBLE
4389: EQUAL
4390: IFTRUE 4394
4392: GO 4420
4394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4395: LD_ADDR_VAR 0 3
4399: PUSH
4400: LD_INT 21
4402: PUSH
4403: LD_INT 22
4405: PUSH
4406: LD_INT 23
4408: PUSH
4409: LD_INT 24
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: ST_TO_ADDR
4418: GO 4533
4420: LD_INT 52
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4454
4428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4429: LD_ADDR_VAR 0 3
4433: PUSH
4434: LD_INT 21
4436: PUSH
4437: LD_INT 22
4439: PUSH
4440: LD_INT 23
4442: PUSH
4443: LD_INT 24
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
4452: GO 4533
4454: LD_INT 53
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4480
4462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4463: LD_ADDR_VAR 0 3
4467: PUSH
4468: LD_INT 23
4470: PUSH
4471: LD_INT 24
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: ST_TO_ADDR
4478: GO 4533
4480: LD_INT 46
4482: DOUBLE
4483: EQUAL
4484: IFTRUE 4488
4486: GO 4506
4488: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: LD_INT 23
4496: PUSH
4497: LD_INT 24
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: ST_TO_ADDR
4504: GO 4533
4506: LD_INT 47
4508: DOUBLE
4509: EQUAL
4510: IFTRUE 4514
4512: GO 4532
4514: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_INT 23
4522: PUSH
4523: LD_INT 24
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 4533
4532: POP
// result := ( chassis in result ) ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: LD_VAR 0 1
4542: PUSH
4543: LD_VAR 0 3
4547: IN
4548: ST_TO_ADDR
// end ;
4549: LD_VAR 0 3
4553: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4554: LD_INT 0
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
// result := array ;
4563: LD_ADDR_VAR 0 5
4567: PUSH
4568: LD_VAR 0 1
4572: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4573: LD_VAR 0 1
4577: NOT
4578: IFTRUE 4587
4580: PUSH
4581: LD_VAR 0 2
4585: NOT
4586: OR
4587: IFTRUE 4596
4589: PUSH
4590: LD_VAR 0 3
4594: NOT
4595: OR
4596: IFTRUE 4610
4598: PUSH
4599: LD_VAR 0 2
4603: PUSH
4604: LD_VAR 0 1
4608: GREATER
4609: OR
4610: IFTRUE 4624
4612: PUSH
4613: LD_VAR 0 3
4617: PUSH
4618: LD_VAR 0 1
4622: GREATER
4623: OR
4624: IFFALSE 4628
// exit ;
4626: GO 4924
// if direction then
4628: LD_VAR 0 4
4632: IFFALSE 4696
// begin d := 1 ;
4634: LD_ADDR_VAR 0 9
4638: PUSH
4639: LD_INT 1
4641: ST_TO_ADDR
// if i_from > i_to then
4642: LD_VAR 0 2
4646: PUSH
4647: LD_VAR 0 3
4651: GREATER
4652: IFFALSE 4678
// length := ( array - i_from ) + i_to else
4654: LD_ADDR_VAR 0 11
4658: PUSH
4659: LD_VAR 0 1
4663: PUSH
4664: LD_VAR 0 2
4668: MINUS
4669: PUSH
4670: LD_VAR 0 3
4674: PLUS
4675: ST_TO_ADDR
4676: GO 4694
// length := i_to - i_from ;
4678: LD_ADDR_VAR 0 11
4682: PUSH
4683: LD_VAR 0 3
4687: PUSH
4688: LD_VAR 0 2
4692: MINUS
4693: ST_TO_ADDR
// end else
4694: GO 4757
// begin d := - 1 ;
4696: LD_ADDR_VAR 0 9
4700: PUSH
4701: LD_INT 1
4703: NEG
4704: ST_TO_ADDR
// if i_from > i_to then
4705: LD_VAR 0 2
4709: PUSH
4710: LD_VAR 0 3
4714: GREATER
4715: IFFALSE 4735
// length := i_from - i_to else
4717: LD_ADDR_VAR 0 11
4721: PUSH
4722: LD_VAR 0 2
4726: PUSH
4727: LD_VAR 0 3
4731: MINUS
4732: ST_TO_ADDR
4733: GO 4757
// length := ( array - i_to ) + i_from ;
4735: LD_ADDR_VAR 0 11
4739: PUSH
4740: LD_VAR 0 1
4744: PUSH
4745: LD_VAR 0 3
4749: MINUS
4750: PUSH
4751: LD_VAR 0 2
4755: PLUS
4756: ST_TO_ADDR
// end ; if not length then
4757: LD_VAR 0 11
4761: NOT
4762: IFFALSE 4766
// exit ;
4764: GO 4924
// tmp := array ;
4766: LD_ADDR_VAR 0 10
4770: PUSH
4771: LD_VAR 0 1
4775: ST_TO_ADDR
// for i = 1 to length do
4776: LD_ADDR_VAR 0 6
4780: PUSH
4781: DOUBLE
4782: LD_INT 1
4784: DEC
4785: ST_TO_ADDR
4786: LD_VAR 0 11
4790: PUSH
4791: FOR_TO
4792: IFFALSE 4912
// begin for j = 1 to array do
4794: LD_ADDR_VAR 0 7
4798: PUSH
4799: DOUBLE
4800: LD_INT 1
4802: DEC
4803: ST_TO_ADDR
4804: LD_VAR 0 1
4808: PUSH
4809: FOR_TO
4810: IFFALSE 4898
// begin k := j + d ;
4812: LD_ADDR_VAR 0 8
4816: PUSH
4817: LD_VAR 0 7
4821: PUSH
4822: LD_VAR 0 9
4826: PLUS
4827: ST_TO_ADDR
// if k > array then
4828: LD_VAR 0 8
4832: PUSH
4833: LD_VAR 0 1
4837: GREATER
4838: IFFALSE 4848
// k := 1 ;
4840: LD_ADDR_VAR 0 8
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// if not k then
4848: LD_VAR 0 8
4852: NOT
4853: IFFALSE 4865
// k := array ;
4855: LD_ADDR_VAR 0 8
4859: PUSH
4860: LD_VAR 0 1
4864: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4865: LD_ADDR_VAR 0 10
4869: PUSH
4870: LD_VAR 0 10
4874: PPUSH
4875: LD_VAR 0 8
4879: PPUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_VAR 0 7
4889: ARRAY
4890: PPUSH
4891: CALL_OW 1
4895: ST_TO_ADDR
// end ;
4896: GO 4809
4898: POP
4899: POP
// array := tmp ;
4900: LD_ADDR_VAR 0 1
4904: PUSH
4905: LD_VAR 0 10
4909: ST_TO_ADDR
// end ;
4910: GO 4791
4912: POP
4913: POP
// result := array ;
4914: LD_ADDR_VAR 0 5
4918: PUSH
4919: LD_VAR 0 1
4923: ST_TO_ADDR
// end ;
4924: LD_VAR 0 5
4928: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4929: LD_INT 0
4931: PPUSH
4932: PPUSH
// result := 0 ;
4933: LD_ADDR_VAR 0 3
4937: PUSH
4938: LD_INT 0
4940: ST_TO_ADDR
// if not array or not value in array then
4941: LD_VAR 0 1
4945: NOT
4946: IFTRUE 4961
4948: PUSH
4949: LD_VAR 0 2
4953: PUSH
4954: LD_VAR 0 1
4958: IN
4959: NOT
4960: OR
4961: IFFALSE 4965
// exit ;
4963: GO 5019
// for i = 1 to array do
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: DOUBLE
4971: LD_INT 1
4973: DEC
4974: ST_TO_ADDR
4975: LD_VAR 0 1
4979: PUSH
4980: FOR_TO
4981: IFFALSE 5017
// if value = array [ i ] then
4983: LD_VAR 0 2
4987: PUSH
4988: LD_VAR 0 1
4992: PUSH
4993: LD_VAR 0 4
4997: ARRAY
4998: EQUAL
4999: IFFALSE 5015
// begin result := i ;
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_VAR 0 4
5010: ST_TO_ADDR
// exit ;
5011: POP
5012: POP
5013: GO 5019
// end ;
5015: GO 4980
5017: POP
5018: POP
// end ;
5019: LD_VAR 0 3
5023: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5024: LD_INT 0
5026: PPUSH
// vc_chassis := chassis ;
5027: LD_ADDR_OWVAR 37
5031: PUSH
5032: LD_VAR 0 1
5036: ST_TO_ADDR
// vc_engine := engine ;
5037: LD_ADDR_OWVAR 39
5041: PUSH
5042: LD_VAR 0 2
5046: ST_TO_ADDR
// vc_control := control ;
5047: LD_ADDR_OWVAR 38
5051: PUSH
5052: LD_VAR 0 3
5056: ST_TO_ADDR
// vc_weapon := weapon ;
5057: LD_ADDR_OWVAR 40
5061: PUSH
5062: LD_VAR 0 4
5066: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5067: LD_ADDR_OWVAR 41
5071: PUSH
5072: LD_VAR 0 5
5076: ST_TO_ADDR
// end ;
5077: LD_VAR 0 6
5081: RET
// export function WantPlant ( unit ) ; var task ; begin
5082: LD_INT 0
5084: PPUSH
5085: PPUSH
// result := false ;
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: LD_INT 0
5093: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_VAR 0 1
5103: PPUSH
5104: CALL_OW 437
5108: ST_TO_ADDR
// if task then
5109: LD_VAR 0 3
5113: IFFALSE 5141
// if task [ 1 ] [ 1 ] = p then
5115: LD_VAR 0 3
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PUSH
5124: LD_INT 1
5126: ARRAY
5127: PUSH
5128: LD_STRING p
5130: EQUAL
5131: IFFALSE 5141
// result := true ;
5133: LD_ADDR_VAR 0 2
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// end ;
5141: LD_VAR 0 2
5145: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5146: LD_INT 0
5148: PPUSH
5149: PPUSH
5150: PPUSH
5151: PPUSH
// if pos < 1 then
5152: LD_VAR 0 2
5156: PUSH
5157: LD_INT 1
5159: LESS
5160: IFFALSE 5164
// exit ;
5162: GO 5467
// if pos = 1 then
5164: LD_VAR 0 2
5168: PUSH
5169: LD_INT 1
5171: EQUAL
5172: IFFALSE 5205
// result := Replace ( arr , pos [ 1 ] , value ) else
5174: LD_ADDR_VAR 0 4
5178: PUSH
5179: LD_VAR 0 1
5183: PPUSH
5184: LD_VAR 0 2
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PPUSH
5193: LD_VAR 0 3
5197: PPUSH
5198: CALL_OW 1
5202: ST_TO_ADDR
5203: GO 5467
// begin tmp := arr ;
5205: LD_ADDR_VAR 0 6
5209: PUSH
5210: LD_VAR 0 1
5214: ST_TO_ADDR
// s_arr := [ tmp ] ;
5215: LD_ADDR_VAR 0 7
5219: PUSH
5220: LD_VAR 0 6
5224: PUSH
5225: EMPTY
5226: LIST
5227: ST_TO_ADDR
// for i = 1 to pos - 1 do
5228: LD_ADDR_VAR 0 5
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_VAR 0 2
5242: PUSH
5243: LD_INT 1
5245: MINUS
5246: PUSH
5247: FOR_TO
5248: IFFALSE 5293
// begin tmp := tmp [ pos [ i ] ] ;
5250: LD_ADDR_VAR 0 6
5254: PUSH
5255: LD_VAR 0 6
5259: PUSH
5260: LD_VAR 0 2
5264: PUSH
5265: LD_VAR 0 5
5269: ARRAY
5270: ARRAY
5271: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5272: LD_ADDR_VAR 0 7
5276: PUSH
5277: LD_VAR 0 7
5281: PUSH
5282: LD_VAR 0 6
5286: PUSH
5287: EMPTY
5288: LIST
5289: ADD
5290: ST_TO_ADDR
// end ;
5291: GO 5247
5293: POP
5294: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5295: LD_ADDR_VAR 0 6
5299: PUSH
5300: LD_VAR 0 6
5304: PPUSH
5305: LD_VAR 0 2
5309: PUSH
5310: LD_VAR 0 2
5314: ARRAY
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 1
5325: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5326: LD_ADDR_VAR 0 7
5330: PUSH
5331: LD_VAR 0 7
5335: PPUSH
5336: LD_VAR 0 7
5340: PPUSH
5341: LD_VAR 0 6
5345: PPUSH
5346: CALL_OW 1
5350: ST_TO_ADDR
// for i = s_arr downto 2 do
5351: LD_ADDR_VAR 0 5
5355: PUSH
5356: DOUBLE
5357: LD_VAR 0 7
5361: INC
5362: ST_TO_ADDR
5363: LD_INT 2
5365: PUSH
5366: FOR_DOWNTO
5367: IFFALSE 5451
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5369: LD_ADDR_VAR 0 6
5373: PUSH
5374: LD_VAR 0 7
5378: PUSH
5379: LD_VAR 0 5
5383: PUSH
5384: LD_INT 1
5386: MINUS
5387: ARRAY
5388: PPUSH
5389: LD_VAR 0 2
5393: PUSH
5394: LD_VAR 0 5
5398: PUSH
5399: LD_INT 1
5401: MINUS
5402: ARRAY
5403: PPUSH
5404: LD_VAR 0 7
5408: PUSH
5409: LD_VAR 0 5
5413: ARRAY
5414: PPUSH
5415: CALL_OW 1
5419: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5420: LD_ADDR_VAR 0 7
5424: PUSH
5425: LD_VAR 0 7
5429: PPUSH
5430: LD_VAR 0 5
5434: PUSH
5435: LD_INT 1
5437: MINUS
5438: PPUSH
5439: LD_VAR 0 6
5443: PPUSH
5444: CALL_OW 1
5448: ST_TO_ADDR
// end ;
5449: GO 5366
5451: POP
5452: POP
// result := s_arr [ 1 ] ;
5453: LD_ADDR_VAR 0 4
5457: PUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: ST_TO_ADDR
// end ; end ;
5467: LD_VAR 0 4
5471: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
// if not list then
5476: LD_VAR 0 1
5480: NOT
5481: IFFALSE 5485
// exit ;
5483: GO 5576
// i := list [ pos1 ] ;
5485: LD_ADDR_VAR 0 5
5489: PUSH
5490: LD_VAR 0 1
5494: PUSH
5495: LD_VAR 0 2
5499: ARRAY
5500: ST_TO_ADDR
// if not i then
5501: LD_VAR 0 5
5505: NOT
5506: IFFALSE 5510
// exit ;
5508: GO 5576
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5510: LD_ADDR_VAR 0 1
5514: PUSH
5515: LD_VAR 0 1
5519: PPUSH
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_VAR 0 1
5529: PUSH
5530: LD_VAR 0 3
5534: ARRAY
5535: PPUSH
5536: CALL_OW 1
5540: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5541: LD_ADDR_VAR 0 1
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: LD_VAR 0 3
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 1
5565: ST_TO_ADDR
// result := list ;
5566: LD_ADDR_VAR 0 4
5570: PUSH
5571: LD_VAR 0 1
5575: ST_TO_ADDR
// end ;
5576: LD_VAR 0 4
5580: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5581: LD_INT 0
5583: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5584: LD_ADDR_VAR 0 5
5588: PUSH
5589: LD_VAR 0 1
5593: PPUSH
5594: CALL_OW 250
5598: PPUSH
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 251
5608: PPUSH
5609: LD_VAR 0 2
5613: PPUSH
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_VAR 0 4
5623: PPUSH
5624: CALL 6006 0 5
5628: ST_TO_ADDR
// end ;
5629: LD_VAR 0 5
5633: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
5634: LD_INT 0
5636: PPUSH
5637: PPUSH
5638: PPUSH
5639: PPUSH
// if not list or not unit then
5640: LD_VAR 0 2
5644: NOT
5645: IFTRUE 5654
5647: PUSH
5648: LD_VAR 0 1
5652: NOT
5653: OR
5654: IFFALSE 5658
// exit ;
5656: GO 6001
// result := [ ] ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: EMPTY
5664: ST_TO_ADDR
// for i in list do
5665: LD_ADDR_VAR 0 6
5669: PUSH
5670: LD_VAR 0 2
5674: PUSH
5675: FOR_IN
5676: IFFALSE 5894
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
5678: LD_ADDR_VAR 0 8
5682: PUSH
5683: LD_VAR 0 1
5687: PPUSH
5688: LD_VAR 0 6
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PPUSH
5697: LD_VAR 0 6
5701: PUSH
5702: LD_INT 2
5704: ARRAY
5705: PPUSH
5706: CALL_OW 297
5710: ST_TO_ADDR
// if not Count ( result ) then
5711: LD_VAR 0 5
5715: PPUSH
5716: CALL 2262 0 1
5720: NOT
5721: IFFALSE 5754
// begin result := Join ( result , [ i , tmp ] ) ;
5723: LD_ADDR_VAR 0 5
5727: PUSH
5728: LD_VAR 0 5
5732: PPUSH
5733: LD_VAR 0 6
5737: PUSH
5738: LD_VAR 0 8
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL 38194 0 2
5751: ST_TO_ADDR
// continue ;
5752: GO 5675
// end ; if result [ result ] [ 2 ] <= tmp then
5754: LD_VAR 0 5
5758: PUSH
5759: LD_VAR 0 5
5763: ARRAY
5764: PUSH
5765: LD_INT 2
5767: ARRAY
5768: PUSH
5769: LD_VAR 0 8
5773: LESSEQUAL
5774: IFFALSE 5807
// result := Join ( result , [ i , tmp ] ) else
5776: LD_ADDR_VAR 0 5
5780: PUSH
5781: LD_VAR 0 5
5785: PPUSH
5786: LD_VAR 0 6
5790: PUSH
5791: LD_VAR 0 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: PPUSH
5800: CALL 38194 0 2
5804: ST_TO_ADDR
5805: GO 5892
// begin for j := 1 to Count ( result ) do
5807: LD_ADDR_VAR 0 7
5811: PUSH
5812: DOUBLE
5813: LD_INT 1
5815: DEC
5816: ST_TO_ADDR
5817: LD_VAR 0 5
5821: PPUSH
5822: CALL 2262 0 1
5826: PUSH
5827: FOR_TO
5828: IFFALSE 5890
// begin if tmp < result [ j ] [ 2 ] then
5830: LD_VAR 0 8
5834: PUSH
5835: LD_VAR 0 5
5839: PUSH
5840: LD_VAR 0 7
5844: ARRAY
5845: PUSH
5846: LD_INT 2
5848: ARRAY
5849: LESS
5850: IFFALSE 5888
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5852: LD_ADDR_VAR 0 5
5856: PUSH
5857: LD_VAR 0 5
5861: PPUSH
5862: LD_VAR 0 7
5866: PPUSH
5867: LD_VAR 0 6
5871: PUSH
5872: LD_VAR 0 8
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 2
5885: ST_TO_ADDR
// break ;
5886: GO 5890
// end ; end ;
5888: GO 5827
5890: POP
5891: POP
// end ; end ;
5892: GO 5675
5894: POP
5895: POP
// if result and not asc then
5896: LD_VAR 0 5
5900: IFFALSE 5909
5902: PUSH
5903: LD_VAR 0 3
5907: NOT
5908: AND
5909: IFFALSE 5926
// result := ReverseArray ( result ) ;
5911: LD_ADDR_VAR 0 5
5915: PUSH
5916: LD_VAR 0 5
5920: PPUSH
5921: CALL 33284 0 1
5925: ST_TO_ADDR
// tmp := [ ] ;
5926: LD_ADDR_VAR 0 8
5930: PUSH
5931: EMPTY
5932: ST_TO_ADDR
// if mode then
5933: LD_VAR 0 4
5937: IFFALSE 6001
// begin for i := 1 to result do
5939: LD_ADDR_VAR 0 6
5943: PUSH
5944: DOUBLE
5945: LD_INT 1
5947: DEC
5948: ST_TO_ADDR
5949: LD_VAR 0 5
5953: PUSH
5954: FOR_TO
5955: IFFALSE 5989
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
5957: LD_ADDR_VAR 0 8
5961: PUSH
5962: LD_VAR 0 8
5966: PPUSH
5967: LD_VAR 0 5
5971: PUSH
5972: LD_VAR 0 6
5976: ARRAY
5977: PUSH
5978: LD_INT 1
5980: ARRAY
5981: PPUSH
5982: CALL 38194 0 2
5986: ST_TO_ADDR
5987: GO 5954
5989: POP
5990: POP
// result := tmp ;
5991: LD_ADDR_VAR 0 5
5995: PUSH
5996: LD_VAR 0 8
6000: ST_TO_ADDR
// end ; end ;
6001: LD_VAR 0 5
6005: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6006: LD_INT 0
6008: PPUSH
6009: PPUSH
6010: PPUSH
6011: PPUSH
// if not list then
6012: LD_VAR 0 3
6016: NOT
6017: IFFALSE 6021
// exit ;
6019: GO 6411
// result := [ ] ;
6021: LD_ADDR_VAR 0 6
6025: PUSH
6026: EMPTY
6027: ST_TO_ADDR
// for i in list do
6028: LD_ADDR_VAR 0 7
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: FOR_IN
6039: IFFALSE 6241
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6041: LD_ADDR_VAR 0 9
6045: PUSH
6046: LD_VAR 0 7
6050: PPUSH
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: CALL_OW 297
6065: ST_TO_ADDR
// if not result then
6066: LD_VAR 0 6
6070: NOT
6071: IFFALSE 6097
// result := [ [ i , tmp ] ] else
6073: LD_ADDR_VAR 0 6
6077: PUSH
6078: LD_VAR 0 7
6082: PUSH
6083: LD_VAR 0 9
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: ST_TO_ADDR
6095: GO 6239
// begin if result [ result ] [ 2 ] <= tmp then
6097: LD_VAR 0 6
6101: PUSH
6102: LD_VAR 0 6
6106: ARRAY
6107: PUSH
6108: LD_INT 2
6110: ARRAY
6111: PUSH
6112: LD_VAR 0 9
6116: LESSEQUAL
6117: IFFALSE 6159
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6119: LD_ADDR_VAR 0 6
6123: PUSH
6124: LD_VAR 0 6
6128: PPUSH
6129: LD_VAR 0 6
6133: PUSH
6134: LD_INT 1
6136: PLUS
6137: PPUSH
6138: LD_VAR 0 7
6142: PUSH
6143: LD_VAR 0 9
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 2
6156: ST_TO_ADDR
6157: GO 6239
// for j := 1 to result do
6159: LD_ADDR_VAR 0 8
6163: PUSH
6164: DOUBLE
6165: LD_INT 1
6167: DEC
6168: ST_TO_ADDR
6169: LD_VAR 0 6
6173: PUSH
6174: FOR_TO
6175: IFFALSE 6237
// begin if tmp < result [ j ] [ 2 ] then
6177: LD_VAR 0 9
6181: PUSH
6182: LD_VAR 0 6
6186: PUSH
6187: LD_VAR 0 8
6191: ARRAY
6192: PUSH
6193: LD_INT 2
6195: ARRAY
6196: LESS
6197: IFFALSE 6235
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6199: LD_ADDR_VAR 0 6
6203: PUSH
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 8
6213: PPUSH
6214: LD_VAR 0 7
6218: PUSH
6219: LD_VAR 0 9
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PPUSH
6228: CALL_OW 2
6232: ST_TO_ADDR
// break ;
6233: GO 6237
// end ; end ;
6235: GO 6174
6237: POP
6238: POP
// end ; end ;
6239: GO 6038
6241: POP
6242: POP
// if result and not asc then
6243: LD_VAR 0 6
6247: IFFALSE 6256
6249: PUSH
6250: LD_VAR 0 4
6254: NOT
6255: AND
6256: IFFALSE 6331
// begin tmp := result ;
6258: LD_ADDR_VAR 0 9
6262: PUSH
6263: LD_VAR 0 6
6267: ST_TO_ADDR
// for i = tmp downto 1 do
6268: LD_ADDR_VAR 0 7
6272: PUSH
6273: DOUBLE
6274: LD_VAR 0 9
6278: INC
6279: ST_TO_ADDR
6280: LD_INT 1
6282: PUSH
6283: FOR_DOWNTO
6284: IFFALSE 6329
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6286: LD_ADDR_VAR 0 6
6290: PUSH
6291: LD_VAR 0 6
6295: PPUSH
6296: LD_VAR 0 9
6300: PUSH
6301: LD_VAR 0 7
6305: MINUS
6306: PUSH
6307: LD_INT 1
6309: PLUS
6310: PPUSH
6311: LD_VAR 0 9
6315: PUSH
6316: LD_VAR 0 7
6320: ARRAY
6321: PPUSH
6322: CALL_OW 1
6326: ST_TO_ADDR
6327: GO 6283
6329: POP
6330: POP
// end ; tmp := [ ] ;
6331: LD_ADDR_VAR 0 9
6335: PUSH
6336: EMPTY
6337: ST_TO_ADDR
// if mode then
6338: LD_VAR 0 5
6342: IFFALSE 6411
// begin for i = 1 to result do
6344: LD_ADDR_VAR 0 7
6348: PUSH
6349: DOUBLE
6350: LD_INT 1
6352: DEC
6353: ST_TO_ADDR
6354: LD_VAR 0 6
6358: PUSH
6359: FOR_TO
6360: IFFALSE 6399
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6362: LD_ADDR_VAR 0 9
6366: PUSH
6367: LD_VAR 0 9
6371: PPUSH
6372: LD_VAR 0 7
6376: PPUSH
6377: LD_VAR 0 6
6381: PUSH
6382: LD_VAR 0 7
6386: ARRAY
6387: PUSH
6388: LD_INT 1
6390: ARRAY
6391: PPUSH
6392: CALL_OW 1
6396: ST_TO_ADDR
6397: GO 6359
6399: POP
6400: POP
// result := tmp ;
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: LD_VAR 0 9
6410: ST_TO_ADDR
// end ; end ;
6411: LD_VAR 0 6
6415: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6416: LD_INT 0
6418: PPUSH
6419: PPUSH
6420: PPUSH
6421: PPUSH
6422: PPUSH
6423: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6424: LD_ADDR_VAR 0 5
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: EMPTY
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: ST_TO_ADDR
// if not x or not y then
6446: LD_VAR 0 2
6450: NOT
6451: IFTRUE 6460
6453: PUSH
6454: LD_VAR 0 3
6458: NOT
6459: OR
6460: IFFALSE 6464
// exit ;
6462: GO 8120
// if not range then
6464: LD_VAR 0 4
6468: NOT
6469: IFFALSE 6479
// range := 10 ;
6471: LD_ADDR_VAR 0 4
6475: PUSH
6476: LD_INT 10
6478: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6479: LD_ADDR_VAR 0 8
6483: PUSH
6484: LD_INT 81
6486: PUSH
6487: LD_VAR 0 1
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 92
6498: PUSH
6499: LD_VAR 0 2
6503: PUSH
6504: LD_VAR 0 3
6508: PUSH
6509: LD_VAR 0 4
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 21
6525: PUSH
6526: LD_INT 3
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: PPUSH
6542: CALL_OW 69
6546: ST_TO_ADDR
// if not tmp then
6547: LD_VAR 0 8
6551: NOT
6552: IFFALSE 6556
// exit ;
6554: GO 8120
// for i in tmp do
6556: LD_ADDR_VAR 0 6
6560: PUSH
6561: LD_VAR 0 8
6565: PUSH
6566: FOR_IN
6567: IFFALSE 8095
// begin points := [ 0 , 0 , 0 ] ;
6569: LD_ADDR_VAR 0 9
6573: PUSH
6574: LD_INT 0
6576: PUSH
6577: LD_INT 0
6579: PUSH
6580: LD_INT 0
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: ST_TO_ADDR
// bpoints := 1 ;
6588: LD_ADDR_VAR 0 10
6592: PUSH
6593: LD_INT 1
6595: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6596: LD_VAR 0 6
6600: PPUSH
6601: CALL_OW 247
6605: PUSH
6606: LD_INT 1
6608: DOUBLE
6609: EQUAL
6610: IFTRUE 6614
6612: GO 7196
6614: POP
// begin if GetClass ( i ) = 1 then
6615: LD_VAR 0 6
6619: PPUSH
6620: CALL_OW 257
6624: PUSH
6625: LD_INT 1
6627: EQUAL
6628: IFFALSE 6649
// points := [ 10 , 5 , 3 ] ;
6630: LD_ADDR_VAR 0 9
6634: PUSH
6635: LD_INT 10
6637: PUSH
6638: LD_INT 5
6640: PUSH
6641: LD_INT 3
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6649: LD_VAR 0 6
6653: PPUSH
6654: CALL_OW 257
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 4
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: IN
6673: IFFALSE 6694
// points := [ 3 , 2 , 1 ] ;
6675: LD_ADDR_VAR 0 9
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 2
6685: PUSH
6686: LD_INT 1
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6694: LD_VAR 0 6
6698: PPUSH
6699: CALL_OW 257
6703: PUSH
6704: LD_INT 5
6706: EQUAL
6707: IFFALSE 6728
// points := [ 130 , 5 , 2 ] ;
6709: LD_ADDR_VAR 0 9
6713: PUSH
6714: LD_INT 130
6716: PUSH
6717: LD_INT 5
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6728: LD_VAR 0 6
6732: PPUSH
6733: CALL_OW 257
6737: PUSH
6738: LD_INT 8
6740: EQUAL
6741: IFFALSE 6762
// points := [ 35 , 35 , 30 ] ;
6743: LD_ADDR_VAR 0 9
6747: PUSH
6748: LD_INT 35
6750: PUSH
6751: LD_INT 35
6753: PUSH
6754: LD_INT 30
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6762: LD_VAR 0 6
6766: PPUSH
6767: CALL_OW 257
6771: PUSH
6772: LD_INT 9
6774: EQUAL
6775: IFFALSE 6796
// points := [ 20 , 55 , 40 ] ;
6777: LD_ADDR_VAR 0 9
6781: PUSH
6782: LD_INT 20
6784: PUSH
6785: LD_INT 55
6787: PUSH
6788: LD_INT 40
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6796: LD_VAR 0 6
6800: PPUSH
6801: CALL_OW 257
6805: PUSH
6806: LD_INT 12
6808: PUSH
6809: LD_INT 16
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: IN
6816: IFFALSE 6837
// points := [ 5 , 3 , 2 ] ;
6818: LD_ADDR_VAR 0 9
6822: PUSH
6823: LD_INT 5
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 2
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6837: LD_VAR 0 6
6841: PPUSH
6842: CALL_OW 257
6846: PUSH
6847: LD_INT 17
6849: EQUAL
6850: IFFALSE 6871
// points := [ 100 , 50 , 75 ] ;
6852: LD_ADDR_VAR 0 9
6856: PUSH
6857: LD_INT 100
6859: PUSH
6860: LD_INT 50
6862: PUSH
6863: LD_INT 75
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6871: LD_VAR 0 6
6875: PPUSH
6876: CALL_OW 257
6880: PUSH
6881: LD_INT 15
6883: EQUAL
6884: IFFALSE 6905
// points := [ 10 , 5 , 3 ] ;
6886: LD_ADDR_VAR 0 9
6890: PUSH
6891: LD_INT 10
6893: PUSH
6894: LD_INT 5
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6905: LD_VAR 0 6
6909: PPUSH
6910: CALL_OW 257
6914: PUSH
6915: LD_INT 14
6917: EQUAL
6918: IFFALSE 6939
// points := [ 10 , 0 , 0 ] ;
6920: LD_ADDR_VAR 0 9
6924: PUSH
6925: LD_INT 10
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6939: LD_VAR 0 6
6943: PPUSH
6944: CALL_OW 257
6948: PUSH
6949: LD_INT 11
6951: EQUAL
6952: IFFALSE 6973
// points := [ 30 , 10 , 5 ] ;
6954: LD_ADDR_VAR 0 9
6958: PUSH
6959: LD_INT 30
6961: PUSH
6962: LD_INT 10
6964: PUSH
6965: LD_INT 5
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 5
6980: PPUSH
6981: CALL_OW 321
6985: PUSH
6986: LD_INT 2
6988: EQUAL
6989: IFFALSE 7006
// bpoints := bpoints * 1.8 ;
6991: LD_ADDR_VAR 0 10
6995: PUSH
6996: LD_VAR 0 10
7000: PUSH
7001: LD_REAL  1.80000000000000E+0000
7004: MUL
7005: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7006: LD_VAR 0 6
7010: PPUSH
7011: CALL_OW 257
7015: PUSH
7016: LD_INT 1
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 3
7024: PUSH
7025: LD_INT 4
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: IN
7034: IFFALSE 7054
7036: PUSH
7037: LD_VAR 0 1
7041: PPUSH
7042: LD_INT 51
7044: PPUSH
7045: CALL_OW 321
7049: PUSH
7050: LD_INT 2
7052: EQUAL
7053: AND
7054: IFFALSE 7071
// bpoints := bpoints * 1.2 ;
7056: LD_ADDR_VAR 0 10
7060: PUSH
7061: LD_VAR 0 10
7065: PUSH
7066: LD_REAL  1.20000000000000E+0000
7069: MUL
7070: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7071: LD_VAR 0 6
7075: PPUSH
7076: CALL_OW 257
7080: PUSH
7081: LD_INT 5
7083: PUSH
7084: LD_INT 7
7086: PUSH
7087: LD_INT 9
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: IN
7095: IFFALSE 7115
7097: PUSH
7098: LD_VAR 0 1
7102: PPUSH
7103: LD_INT 52
7105: PPUSH
7106: CALL_OW 321
7110: PUSH
7111: LD_INT 2
7113: EQUAL
7114: AND
7115: IFFALSE 7132
// bpoints := bpoints * 1.5 ;
7117: LD_ADDR_VAR 0 10
7121: PUSH
7122: LD_VAR 0 10
7126: PUSH
7127: LD_REAL  1.50000000000000E+0000
7130: MUL
7131: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_INT 66
7139: PPUSH
7140: CALL_OW 321
7144: PUSH
7145: LD_INT 2
7147: EQUAL
7148: IFFALSE 7165
// bpoints := bpoints * 1.1 ;
7150: LD_ADDR_VAR 0 10
7154: PUSH
7155: LD_VAR 0 10
7159: PUSH
7160: LD_REAL  1.10000000000000E+0000
7163: MUL
7164: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7165: LD_ADDR_VAR 0 10
7169: PUSH
7170: LD_VAR 0 10
7174: PUSH
7175: LD_VAR 0 6
7179: PPUSH
7180: LD_INT 1
7182: PPUSH
7183: CALL_OW 259
7187: PUSH
7188: LD_REAL  1.15000000000000E+0000
7191: MUL
7192: MUL
7193: ST_TO_ADDR
// end ; unit_vehicle :
7194: GO 8024
7196: LD_INT 2
7198: DOUBLE
7199: EQUAL
7200: IFTRUE 7204
7202: GO 8012
7204: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7205: LD_VAR 0 6
7209: PPUSH
7210: CALL_OW 264
7214: PUSH
7215: LD_INT 2
7217: PUSH
7218: LD_INT 42
7220: PUSH
7221: LD_INT 24
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: IN
7229: IFFALSE 7250
// points := [ 25 , 5 , 3 ] ;
7231: LD_ADDR_VAR 0 9
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: LIST
7249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7250: LD_VAR 0 6
7254: PPUSH
7255: CALL_OW 264
7259: PUSH
7260: LD_INT 4
7262: PUSH
7263: LD_INT 43
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: IN
7274: IFFALSE 7295
// points := [ 40 , 15 , 5 ] ;
7276: LD_ADDR_VAR 0 9
7280: PUSH
7281: LD_INT 40
7283: PUSH
7284: LD_INT 15
7286: PUSH
7287: LD_INT 5
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7295: LD_VAR 0 6
7299: PPUSH
7300: CALL_OW 264
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: LD_INT 23
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: IN
7315: IFFALSE 7336
// points := [ 7 , 25 , 8 ] ;
7317: LD_ADDR_VAR 0 9
7321: PUSH
7322: LD_INT 7
7324: PUSH
7325: LD_INT 25
7327: PUSH
7328: LD_INT 8
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7336: LD_VAR 0 6
7340: PPUSH
7341: CALL_OW 264
7345: PUSH
7346: LD_INT 5
7348: PUSH
7349: LD_INT 27
7351: PUSH
7352: LD_INT 44
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: IN
7360: IFFALSE 7381
// points := [ 14 , 50 , 16 ] ;
7362: LD_ADDR_VAR 0 9
7366: PUSH
7367: LD_INT 14
7369: PUSH
7370: LD_INT 50
7372: PUSH
7373: LD_INT 16
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7381: LD_VAR 0 6
7385: PPUSH
7386: CALL_OW 264
7390: PUSH
7391: LD_INT 6
7393: PUSH
7394: LD_INT 46
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: IN
7401: IFFALSE 7422
// points := [ 32 , 120 , 70 ] ;
7403: LD_ADDR_VAR 0 9
7407: PUSH
7408: LD_INT 32
7410: PUSH
7411: LD_INT 120
7413: PUSH
7414: LD_INT 70
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7422: LD_VAR 0 6
7426: PPUSH
7427: CALL_OW 264
7431: PUSH
7432: LD_INT 7
7434: PUSH
7435: LD_INT 28
7437: PUSH
7438: LD_INT 45
7440: PUSH
7441: LD_INT 92
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: IN
7450: IFFALSE 7471
// points := [ 35 , 20 , 45 ] ;
7452: LD_ADDR_VAR 0 9
7456: PUSH
7457: LD_INT 35
7459: PUSH
7460: LD_INT 20
7462: PUSH
7463: LD_INT 45
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7471: LD_VAR 0 6
7475: PPUSH
7476: CALL_OW 264
7480: PUSH
7481: LD_INT 47
7483: PUSH
7484: EMPTY
7485: LIST
7486: IN
7487: IFFALSE 7508
// points := [ 67 , 45 , 75 ] ;
7489: LD_ADDR_VAR 0 9
7493: PUSH
7494: LD_INT 67
7496: PUSH
7497: LD_INT 45
7499: PUSH
7500: LD_INT 75
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7508: LD_VAR 0 6
7512: PPUSH
7513: CALL_OW 264
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: EMPTY
7522: LIST
7523: IN
7524: IFFALSE 7545
// points := [ 120 , 30 , 80 ] ;
7526: LD_ADDR_VAR 0 9
7530: PUSH
7531: LD_INT 120
7533: PUSH
7534: LD_INT 30
7536: PUSH
7537: LD_INT 80
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7545: LD_VAR 0 6
7549: PPUSH
7550: CALL_OW 264
7554: PUSH
7555: LD_INT 22
7557: PUSH
7558: EMPTY
7559: LIST
7560: IN
7561: IFFALSE 7582
// points := [ 40 , 1 , 1 ] ;
7563: LD_ADDR_VAR 0 9
7567: PUSH
7568: LD_INT 40
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7582: LD_VAR 0 6
7586: PPUSH
7587: CALL_OW 264
7591: PUSH
7592: LD_INT 29
7594: PUSH
7595: EMPTY
7596: LIST
7597: IN
7598: IFFALSE 7619
// points := [ 70 , 200 , 400 ] ;
7600: LD_ADDR_VAR 0 9
7604: PUSH
7605: LD_INT 70
7607: PUSH
7608: LD_INT 200
7610: PUSH
7611: LD_INT 400
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7619: LD_VAR 0 6
7623: PPUSH
7624: CALL_OW 264
7628: PUSH
7629: LD_INT 14
7631: PUSH
7632: LD_INT 53
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: IN
7639: IFFALSE 7660
// points := [ 40 , 10 , 20 ] ;
7641: LD_ADDR_VAR 0 9
7645: PUSH
7646: LD_INT 40
7648: PUSH
7649: LD_INT 10
7651: PUSH
7652: LD_INT 20
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7660: LD_VAR 0 6
7664: PPUSH
7665: CALL_OW 264
7669: PUSH
7670: LD_INT 9
7672: PUSH
7673: EMPTY
7674: LIST
7675: IN
7676: IFFALSE 7697
// points := [ 5 , 70 , 20 ] ;
7678: LD_ADDR_VAR 0 9
7682: PUSH
7683: LD_INT 5
7685: PUSH
7686: LD_INT 70
7688: PUSH
7689: LD_INT 20
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7697: LD_VAR 0 6
7701: PPUSH
7702: CALL_OW 264
7706: PUSH
7707: LD_INT 10
7709: PUSH
7710: EMPTY
7711: LIST
7712: IN
7713: IFFALSE 7734
// points := [ 35 , 110 , 70 ] ;
7715: LD_ADDR_VAR 0 9
7719: PUSH
7720: LD_INT 35
7722: PUSH
7723: LD_INT 110
7725: PUSH
7726: LD_INT 70
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7734: LD_VAR 0 6
7738: PPUSH
7739: CALL_OW 265
7743: PUSH
7744: LD_INT 25
7746: EQUAL
7747: IFFALSE 7768
// points := [ 80 , 65 , 100 ] ;
7749: LD_ADDR_VAR 0 9
7753: PUSH
7754: LD_INT 80
7756: PUSH
7757: LD_INT 65
7759: PUSH
7760: LD_INT 100
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7768: LD_VAR 0 6
7772: PPUSH
7773: CALL_OW 263
7777: PUSH
7778: LD_INT 1
7780: EQUAL
7781: IFFALSE 7816
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7783: LD_ADDR_VAR 0 10
7787: PUSH
7788: LD_VAR 0 10
7792: PUSH
7793: LD_VAR 0 6
7797: PPUSH
7798: CALL_OW 311
7802: PPUSH
7803: LD_INT 3
7805: PPUSH
7806: CALL_OW 259
7810: PUSH
7811: LD_INT 4
7813: MUL
7814: MUL
7815: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7816: LD_VAR 0 6
7820: PPUSH
7821: CALL_OW 263
7825: PUSH
7826: LD_INT 2
7828: EQUAL
7829: IFFALSE 7880
// begin j := IsControledBy ( i ) ;
7831: LD_ADDR_VAR 0 7
7835: PUSH
7836: LD_VAR 0 6
7840: PPUSH
7841: CALL_OW 312
7845: ST_TO_ADDR
// if j then
7846: LD_VAR 0 7
7850: IFFALSE 7880
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7852: LD_ADDR_VAR 0 10
7856: PUSH
7857: LD_VAR 0 10
7861: PUSH
7862: LD_VAR 0 7
7866: PPUSH
7867: LD_INT 3
7869: PPUSH
7870: CALL_OW 259
7874: PUSH
7875: LD_INT 3
7877: MUL
7878: MUL
7879: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7880: LD_VAR 0 6
7884: PPUSH
7885: CALL_OW 264
7889: PUSH
7890: LD_INT 5
7892: PUSH
7893: LD_INT 6
7895: PUSH
7896: LD_INT 46
7898: PUSH
7899: LD_INT 44
7901: PUSH
7902: LD_INT 47
7904: PUSH
7905: LD_INT 45
7907: PUSH
7908: LD_INT 28
7910: PUSH
7911: LD_INT 7
7913: PUSH
7914: LD_INT 27
7916: PUSH
7917: LD_INT 29
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: IN
7932: IFFALSE 7952
7934: PUSH
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_INT 52
7942: PPUSH
7943: CALL_OW 321
7947: PUSH
7948: LD_INT 2
7950: EQUAL
7951: AND
7952: IFFALSE 7969
// bpoints := bpoints * 1.2 ;
7954: LD_ADDR_VAR 0 10
7958: PUSH
7959: LD_VAR 0 10
7963: PUSH
7964: LD_REAL  1.20000000000000E+0000
7967: MUL
7968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7969: LD_VAR 0 6
7973: PPUSH
7974: CALL_OW 264
7978: PUSH
7979: LD_INT 6
7981: PUSH
7982: LD_INT 46
7984: PUSH
7985: LD_INT 47
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: IN
7993: IFFALSE 8010
// bpoints := bpoints * 1.2 ;
7995: LD_ADDR_VAR 0 10
7999: PUSH
8000: LD_VAR 0 10
8004: PUSH
8005: LD_REAL  1.20000000000000E+0000
8008: MUL
8009: ST_TO_ADDR
// end ; unit_building :
8010: GO 8024
8012: LD_INT 3
8014: DOUBLE
8015: EQUAL
8016: IFTRUE 8020
8018: GO 8023
8020: POP
// ; end ;
8021: GO 8024
8023: POP
// for j = 1 to 3 do
8024: LD_ADDR_VAR 0 7
8028: PUSH
8029: DOUBLE
8030: LD_INT 1
8032: DEC
8033: ST_TO_ADDR
8034: LD_INT 3
8036: PUSH
8037: FOR_TO
8038: IFFALSE 8091
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8040: LD_ADDR_VAR 0 5
8044: PUSH
8045: LD_VAR 0 5
8049: PPUSH
8050: LD_VAR 0 7
8054: PPUSH
8055: LD_VAR 0 5
8059: PUSH
8060: LD_VAR 0 7
8064: ARRAY
8065: PUSH
8066: LD_VAR 0 9
8070: PUSH
8071: LD_VAR 0 7
8075: ARRAY
8076: PUSH
8077: LD_VAR 0 10
8081: MUL
8082: PLUS
8083: PPUSH
8084: CALL_OW 1
8088: ST_TO_ADDR
8089: GO 8037
8091: POP
8092: POP
// end ;
8093: GO 6566
8095: POP
8096: POP
// result := Replace ( result , 4 , tmp ) ;
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: LD_VAR 0 5
8106: PPUSH
8107: LD_INT 4
8109: PPUSH
8110: LD_VAR 0 8
8114: PPUSH
8115: CALL_OW 1
8119: ST_TO_ADDR
// end ;
8120: LD_VAR 0 5
8124: RET
// export function DangerAtRange ( unit , range ) ; begin
8125: LD_INT 0
8127: PPUSH
// if not unit then
8128: LD_VAR 0 1
8132: NOT
8133: IFFALSE 8137
// exit ;
8135: GO 8182
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8137: LD_ADDR_VAR 0 3
8141: PUSH
8142: LD_VAR 0 1
8146: PPUSH
8147: CALL_OW 255
8151: PPUSH
8152: LD_VAR 0 1
8156: PPUSH
8157: CALL_OW 250
8161: PPUSH
8162: LD_VAR 0 1
8166: PPUSH
8167: CALL_OW 251
8171: PPUSH
8172: LD_VAR 0 2
8176: PPUSH
8177: CALL 6416 0 4
8181: ST_TO_ADDR
// end ;
8182: LD_VAR 0 3
8186: RET
// export function DangerInArea ( side , area ) ; begin
8187: LD_INT 0
8189: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8190: LD_ADDR_VAR 0 3
8194: PUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_INT 81
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 70
8216: ST_TO_ADDR
// end ;
8217: LD_VAR 0 3
8221: RET
// export function IsExtension ( b ) ; begin
8222: LD_INT 0
8224: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_VAR 0 1
8234: PUSH
8235: LD_INT 23
8237: PUSH
8238: LD_INT 20
8240: PUSH
8241: LD_INT 22
8243: PUSH
8244: LD_INT 17
8246: PUSH
8247: LD_INT 24
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 19
8255: PUSH
8256: LD_INT 16
8258: PUSH
8259: LD_INT 25
8261: PUSH
8262: LD_INT 18
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: IN
8277: ST_TO_ADDR
// end ;
8278: LD_VAR 0 2
8282: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8283: LD_INT 0
8285: PPUSH
8286: PPUSH
8287: PPUSH
// result := [ ] ;
8288: LD_ADDR_VAR 0 4
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8295: LD_ADDR_VAR 0 5
8299: PUSH
8300: LD_VAR 0 2
8304: PPUSH
8305: LD_INT 21
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PPUSH
8315: CALL_OW 70
8319: ST_TO_ADDR
// if not tmp then
8320: LD_VAR 0 5
8324: NOT
8325: IFFALSE 8329
// exit ;
8327: GO 8393
// if checkLink then
8329: LD_VAR 0 3
8333: IFFALSE 8383
// begin for i in tmp do
8335: LD_ADDR_VAR 0 6
8339: PUSH
8340: LD_VAR 0 5
8344: PUSH
8345: FOR_IN
8346: IFFALSE 8381
// if GetBase ( i ) <> base then
8348: LD_VAR 0 6
8352: PPUSH
8353: CALL_OW 274
8357: PUSH
8358: LD_VAR 0 1
8362: NONEQUAL
8363: IFFALSE 8379
// ComLinkToBase ( base , i ) ;
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_VAR 0 6
8374: PPUSH
8375: CALL_OW 169
8379: GO 8345
8381: POP
8382: POP
// end ; result := tmp ;
8383: LD_ADDR_VAR 0 4
8387: PUSH
8388: LD_VAR 0 5
8392: ST_TO_ADDR
// end ;
8393: LD_VAR 0 4
8397: RET
// export function ComComplete ( units , b ) ; var i ; begin
8398: LD_INT 0
8400: PPUSH
8401: PPUSH
// if not units then
8402: LD_VAR 0 1
8406: NOT
8407: IFFALSE 8411
// exit ;
8409: GO 8501
// for i in units do
8411: LD_ADDR_VAR 0 4
8415: PUSH
8416: LD_VAR 0 1
8420: PUSH
8421: FOR_IN
8422: IFFALSE 8499
// if BuildingStatus ( b ) = bs_build then
8424: LD_VAR 0 2
8428: PPUSH
8429: CALL_OW 461
8433: PUSH
8434: LD_INT 1
8436: EQUAL
8437: IFFALSE 8497
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8439: LD_VAR 0 4
8443: PPUSH
8444: LD_STRING h
8446: PUSH
8447: LD_VAR 0 2
8451: PPUSH
8452: CALL_OW 250
8456: PUSH
8457: LD_VAR 0 2
8461: PPUSH
8462: CALL_OW 251
8466: PUSH
8467: LD_VAR 0 2
8471: PUSH
8472: LD_INT 0
8474: PUSH
8475: LD_INT 0
8477: PUSH
8478: LD_INT 0
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: PPUSH
8493: CALL_OW 446
8497: GO 8421
8499: POP
8500: POP
// end ;
8501: LD_VAR 0 3
8505: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8506: LD_INT 0
8508: PPUSH
8509: PPUSH
8510: PPUSH
8511: PPUSH
8512: PPUSH
8513: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8514: LD_VAR 0 1
8518: NOT
8519: IFTRUE 8536
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 263
8531: PUSH
8532: LD_INT 2
8534: NONEQUAL
8535: OR
8536: IFFALSE 8540
// exit ;
8538: GO 8856
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8540: LD_ADDR_VAR 0 6
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 255
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 2
8564: PUSH
8565: LD_INT 30
8567: PUSH
8568: LD_INT 36
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 34
8577: PUSH
8578: LD_INT 31
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PPUSH
8594: CALL_OW 69
8598: ST_TO_ADDR
// if not tmp then
8599: LD_VAR 0 6
8603: NOT
8604: IFFALSE 8608
// exit ;
8606: GO 8856
// result := [ ] ;
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: EMPTY
8614: ST_TO_ADDR
// for i in tmp do
8615: LD_ADDR_VAR 0 3
8619: PUSH
8620: LD_VAR 0 6
8624: PUSH
8625: FOR_IN
8626: IFFALSE 8697
// begin t := UnitsInside ( i ) ;
8628: LD_ADDR_VAR 0 4
8632: PUSH
8633: LD_VAR 0 3
8637: PPUSH
8638: CALL_OW 313
8642: ST_TO_ADDR
// if t then
8643: LD_VAR 0 4
8647: IFFALSE 8695
// for j in t do
8649: LD_ADDR_VAR 0 7
8653: PUSH
8654: LD_VAR 0 4
8658: PUSH
8659: FOR_IN
8660: IFFALSE 8693
// result := Replace ( result , result + 1 , j ) ;
8662: LD_ADDR_VAR 0 2
8666: PUSH
8667: LD_VAR 0 2
8671: PPUSH
8672: LD_VAR 0 2
8676: PUSH
8677: LD_INT 1
8679: PLUS
8680: PPUSH
8681: LD_VAR 0 7
8685: PPUSH
8686: CALL_OW 1
8690: ST_TO_ADDR
8691: GO 8659
8693: POP
8694: POP
// end ;
8695: GO 8625
8697: POP
8698: POP
// if not result then
8699: LD_VAR 0 2
8703: NOT
8704: IFFALSE 8708
// exit ;
8706: GO 8856
// mech := result [ 1 ] ;
8708: LD_ADDR_VAR 0 5
8712: PUSH
8713: LD_VAR 0 2
8717: PUSH
8718: LD_INT 1
8720: ARRAY
8721: ST_TO_ADDR
// if result > 1 then
8722: LD_VAR 0 2
8726: PUSH
8727: LD_INT 1
8729: GREATER
8730: IFFALSE 8842
// begin for i = 2 to result do
8732: LD_ADDR_VAR 0 3
8736: PUSH
8737: DOUBLE
8738: LD_INT 2
8740: DEC
8741: ST_TO_ADDR
8742: LD_VAR 0 2
8746: PUSH
8747: FOR_TO
8748: IFFALSE 8840
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8750: LD_ADDR_VAR 0 4
8754: PUSH
8755: LD_VAR 0 2
8759: PUSH
8760: LD_VAR 0 3
8764: ARRAY
8765: PPUSH
8766: LD_INT 3
8768: PPUSH
8769: CALL_OW 259
8773: PUSH
8774: LD_VAR 0 2
8778: PUSH
8779: LD_VAR 0 3
8783: ARRAY
8784: PPUSH
8785: CALL_OW 432
8789: MINUS
8790: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8791: LD_VAR 0 4
8795: PUSH
8796: LD_VAR 0 5
8800: PPUSH
8801: LD_INT 3
8803: PPUSH
8804: CALL_OW 259
8808: PUSH
8809: LD_VAR 0 5
8813: PPUSH
8814: CALL_OW 432
8818: MINUS
8819: GREATEREQUAL
8820: IFFALSE 8838
// mech := result [ i ] ;
8822: LD_ADDR_VAR 0 5
8826: PUSH
8827: LD_VAR 0 2
8831: PUSH
8832: LD_VAR 0 3
8836: ARRAY
8837: ST_TO_ADDR
// end ;
8838: GO 8747
8840: POP
8841: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8842: LD_VAR 0 1
8846: PPUSH
8847: LD_VAR 0 5
8851: PPUSH
8852: CALL_OW 135
// end ;
8856: LD_VAR 0 2
8860: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8861: LD_INT 0
8863: PPUSH
8864: PPUSH
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// result := [ ] ;
8876: LD_ADDR_VAR 0 7
8880: PUSH
8881: EMPTY
8882: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8883: LD_VAR 0 1
8887: PPUSH
8888: CALL_OW 266
8892: PUSH
8893: LD_INT 0
8895: PUSH
8896: LD_INT 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: IN
8903: NOT
8904: IFFALSE 8908
// exit ;
8906: GO 10548
// if name then
8908: LD_VAR 0 3
8912: IFFALSE 8928
// SetBName ( base_dep , name ) ;
8914: LD_VAR 0 1
8918: PPUSH
8919: LD_VAR 0 3
8923: PPUSH
8924: CALL_OW 500
// base := GetBase ( base_dep ) ;
8928: LD_ADDR_VAR 0 15
8932: PUSH
8933: LD_VAR 0 1
8937: PPUSH
8938: CALL_OW 274
8942: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8943: LD_ADDR_VAR 0 16
8947: PUSH
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 255
8957: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8958: LD_ADDR_VAR 0 17
8962: PUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL_OW 248
8972: ST_TO_ADDR
// if sources then
8973: LD_VAR 0 5
8977: IFFALSE 9024
// for i = 1 to 3 do
8979: LD_ADDR_VAR 0 8
8983: PUSH
8984: DOUBLE
8985: LD_INT 1
8987: DEC
8988: ST_TO_ADDR
8989: LD_INT 3
8991: PUSH
8992: FOR_TO
8993: IFFALSE 9022
// AddResourceType ( base , i , sources [ i ] ) ;
8995: LD_VAR 0 15
8999: PPUSH
9000: LD_VAR 0 8
9004: PPUSH
9005: LD_VAR 0 5
9009: PUSH
9010: LD_VAR 0 8
9014: ARRAY
9015: PPUSH
9016: CALL_OW 276
9020: GO 8992
9022: POP
9023: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9024: LD_ADDR_VAR 0 18
9028: PUSH
9029: LD_VAR 0 15
9033: PPUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: LD_INT 1
9041: PPUSH
9042: CALL 8283 0 3
9046: ST_TO_ADDR
// InitHc ;
9047: CALL_OW 19
// InitUc ;
9051: CALL_OW 18
// uc_side := side ;
9055: LD_ADDR_OWVAR 20
9059: PUSH
9060: LD_VAR 0 16
9064: ST_TO_ADDR
// uc_nation := nation ;
9065: LD_ADDR_OWVAR 21
9069: PUSH
9070: LD_VAR 0 17
9074: ST_TO_ADDR
// if buildings then
9075: LD_VAR 0 18
9079: IFFALSE 10407
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9081: LD_ADDR_VAR 0 19
9085: PUSH
9086: LD_VAR 0 18
9090: PPUSH
9091: LD_INT 2
9093: PUSH
9094: LD_INT 30
9096: PUSH
9097: LD_INT 29
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 30
9106: PUSH
9107: LD_INT 30
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 72
9123: ST_TO_ADDR
// if tmp then
9124: LD_VAR 0 19
9128: IFFALSE 9176
// for i in tmp do
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: LD_VAR 0 19
9139: PUSH
9140: FOR_IN
9141: IFFALSE 9174
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9143: LD_VAR 0 8
9147: PPUSH
9148: CALL_OW 250
9152: PPUSH
9153: LD_VAR 0 8
9157: PPUSH
9158: CALL_OW 251
9162: PPUSH
9163: LD_VAR 0 16
9167: PPUSH
9168: CALL_OW 441
9172: GO 9140
9174: POP
9175: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9176: LD_VAR 0 18
9180: PPUSH
9181: LD_INT 2
9183: PUSH
9184: LD_INT 30
9186: PUSH
9187: LD_INT 32
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 30
9196: PUSH
9197: LD_INT 33
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 72
9213: IFFALSE 9301
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9215: LD_ADDR_VAR 0 8
9219: PUSH
9220: LD_VAR 0 18
9224: PPUSH
9225: LD_INT 2
9227: PUSH
9228: LD_INT 30
9230: PUSH
9231: LD_INT 32
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 30
9240: PUSH
9241: LD_INT 33
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: PPUSH
9253: CALL_OW 72
9257: PUSH
9258: FOR_IN
9259: IFFALSE 9299
// begin if not GetBWeapon ( i ) then
9261: LD_VAR 0 8
9265: PPUSH
9266: CALL_OW 269
9270: NOT
9271: IFFALSE 9297
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9273: LD_VAR 0 8
9277: PPUSH
9278: LD_VAR 0 8
9282: PPUSH
9283: LD_VAR 0 2
9287: PPUSH
9288: CALL 10553 0 2
9292: PPUSH
9293: CALL_OW 431
// end ;
9297: GO 9258
9299: POP
9300: POP
// end ; for i = 1 to personel do
9301: LD_ADDR_VAR 0 8
9305: PUSH
9306: DOUBLE
9307: LD_INT 1
9309: DEC
9310: ST_TO_ADDR
9311: LD_VAR 0 6
9315: PUSH
9316: FOR_TO
9317: IFFALSE 10387
// begin if i > 4 then
9319: LD_VAR 0 8
9323: PUSH
9324: LD_INT 4
9326: GREATER
9327: IFFALSE 9331
// break ;
9329: GO 10387
// case i of 1 :
9331: LD_VAR 0 8
9335: PUSH
9336: LD_INT 1
9338: DOUBLE
9339: EQUAL
9340: IFTRUE 9344
9342: GO 9424
9344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9345: LD_ADDR_VAR 0 12
9349: PUSH
9350: LD_VAR 0 18
9354: PPUSH
9355: LD_INT 22
9357: PUSH
9358: LD_VAR 0 16
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 58
9369: PUSH
9370: EMPTY
9371: LIST
9372: PUSH
9373: LD_INT 2
9375: PUSH
9376: LD_INT 30
9378: PUSH
9379: LD_INT 32
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 30
9388: PUSH
9389: LD_INT 4
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 30
9398: PUSH
9399: LD_INT 5
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: PPUSH
9417: CALL_OW 72
9421: ST_TO_ADDR
9422: GO 9646
9424: LD_INT 2
9426: DOUBLE
9427: EQUAL
9428: IFTRUE 9432
9430: GO 9494
9432: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9433: LD_ADDR_VAR 0 12
9437: PUSH
9438: LD_VAR 0 18
9442: PPUSH
9443: LD_INT 22
9445: PUSH
9446: LD_VAR 0 16
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 2
9457: PUSH
9458: LD_INT 30
9460: PUSH
9461: LD_INT 0
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 1
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 72
9491: ST_TO_ADDR
9492: GO 9646
9494: LD_INT 3
9496: DOUBLE
9497: EQUAL
9498: IFTRUE 9502
9500: GO 9564
9502: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9503: LD_ADDR_VAR 0 12
9507: PUSH
9508: LD_VAR 0 18
9512: PPUSH
9513: LD_INT 22
9515: PUSH
9516: LD_VAR 0 16
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 2
9527: PUSH
9528: LD_INT 30
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 30
9540: PUSH
9541: LD_INT 3
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PPUSH
9557: CALL_OW 72
9561: ST_TO_ADDR
9562: GO 9646
9564: LD_INT 4
9566: DOUBLE
9567: EQUAL
9568: IFTRUE 9572
9570: GO 9645
9572: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9573: LD_ADDR_VAR 0 12
9577: PUSH
9578: LD_VAR 0 18
9582: PPUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 16
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: LD_INT 30
9600: PUSH
9601: LD_INT 6
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 30
9610: PUSH
9611: LD_INT 7
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: LD_INT 8
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 72
9642: ST_TO_ADDR
9643: GO 9646
9645: POP
// if i = 1 then
9646: LD_VAR 0 8
9650: PUSH
9651: LD_INT 1
9653: EQUAL
9654: IFFALSE 9765
// begin tmp := [ ] ;
9656: LD_ADDR_VAR 0 19
9660: PUSH
9661: EMPTY
9662: ST_TO_ADDR
// for j in f do
9663: LD_ADDR_VAR 0 9
9667: PUSH
9668: LD_VAR 0 12
9672: PUSH
9673: FOR_IN
9674: IFFALSE 9747
// if GetBType ( j ) = b_bunker then
9676: LD_VAR 0 9
9680: PPUSH
9681: CALL_OW 266
9685: PUSH
9686: LD_INT 32
9688: EQUAL
9689: IFFALSE 9716
// tmp := Insert ( tmp , 1 , j ) else
9691: LD_ADDR_VAR 0 19
9695: PUSH
9696: LD_VAR 0 19
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: LD_VAR 0 9
9708: PPUSH
9709: CALL_OW 2
9713: ST_TO_ADDR
9714: GO 9745
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9716: LD_ADDR_VAR 0 19
9720: PUSH
9721: LD_VAR 0 19
9725: PPUSH
9726: LD_VAR 0 19
9730: PUSH
9731: LD_INT 1
9733: PLUS
9734: PPUSH
9735: LD_VAR 0 9
9739: PPUSH
9740: CALL_OW 2
9744: ST_TO_ADDR
9745: GO 9673
9747: POP
9748: POP
// if tmp then
9749: LD_VAR 0 19
9753: IFFALSE 9765
// f := tmp ;
9755: LD_ADDR_VAR 0 12
9759: PUSH
9760: LD_VAR 0 19
9764: ST_TO_ADDR
// end ; x := personel [ i ] ;
9765: LD_ADDR_VAR 0 13
9769: PUSH
9770: LD_VAR 0 6
9774: PUSH
9775: LD_VAR 0 8
9779: ARRAY
9780: ST_TO_ADDR
// if x = - 1 then
9781: LD_VAR 0 13
9785: PUSH
9786: LD_INT 1
9788: NEG
9789: EQUAL
9790: IFFALSE 10001
// begin for j in f do
9792: LD_ADDR_VAR 0 9
9796: PUSH
9797: LD_VAR 0 12
9801: PUSH
9802: FOR_IN
9803: IFFALSE 9997
// repeat InitHc ;
9805: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9809: LD_VAR 0 9
9813: PPUSH
9814: CALL_OW 266
9818: PUSH
9819: LD_INT 5
9821: EQUAL
9822: IFFALSE 9892
// begin if UnitsInside ( j ) < 3 then
9824: LD_VAR 0 9
9828: PPUSH
9829: CALL_OW 313
9833: PUSH
9834: LD_INT 3
9836: LESS
9837: IFFALSE 9873
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9839: LD_INT 0
9841: PPUSH
9842: LD_INT 5
9844: PUSH
9845: LD_INT 8
9847: PUSH
9848: LD_INT 9
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: LD_VAR 0 17
9860: ARRAY
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL_OW 380
9871: GO 9890
// PrepareHuman ( false , i , skill ) ;
9873: LD_INT 0
9875: PPUSH
9876: LD_VAR 0 8
9880: PPUSH
9881: LD_VAR 0 4
9885: PPUSH
9886: CALL_OW 380
// end else
9890: GO 9909
// PrepareHuman ( false , i , skill ) ;
9892: LD_INT 0
9894: PPUSH
9895: LD_VAR 0 8
9899: PPUSH
9900: LD_VAR 0 4
9904: PPUSH
9905: CALL_OW 380
// un := CreateHuman ;
9909: LD_ADDR_VAR 0 14
9913: PUSH
9914: CALL_OW 44
9918: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9919: LD_ADDR_VAR 0 7
9923: PUSH
9924: LD_VAR 0 7
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: LD_VAR 0 14
9936: PPUSH
9937: CALL_OW 2
9941: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9942: LD_VAR 0 14
9946: PPUSH
9947: LD_VAR 0 9
9951: PPUSH
9952: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9956: LD_VAR 0 9
9960: PPUSH
9961: CALL_OW 313
9965: PUSH
9966: LD_INT 6
9968: EQUAL
9969: IFTRUE 9993
9971: PUSH
9972: LD_VAR 0 9
9976: PPUSH
9977: CALL_OW 266
9981: PUSH
9982: LD_INT 32
9984: PUSH
9985: LD_INT 31
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: IN
9992: OR
9993: IFFALSE 9805
9995: GO 9802
9997: POP
9998: POP
// end else
9999: GO 10385
// for j = 1 to x do
10001: LD_ADDR_VAR 0 9
10005: PUSH
10006: DOUBLE
10007: LD_INT 1
10009: DEC
10010: ST_TO_ADDR
10011: LD_VAR 0 13
10015: PUSH
10016: FOR_TO
10017: IFFALSE 10383
// begin InitHc ;
10019: CALL_OW 19
// if not f then
10023: LD_VAR 0 12
10027: NOT
10028: IFFALSE 10117
// begin PrepareHuman ( false , i , skill ) ;
10030: LD_INT 0
10032: PPUSH
10033: LD_VAR 0 8
10037: PPUSH
10038: LD_VAR 0 4
10042: PPUSH
10043: CALL_OW 380
// un := CreateHuman ;
10047: LD_ADDR_VAR 0 14
10051: PUSH
10052: CALL_OW 44
10056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10057: LD_ADDR_VAR 0 7
10061: PUSH
10062: LD_VAR 0 7
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: LD_VAR 0 14
10074: PPUSH
10075: CALL_OW 2
10079: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10080: LD_VAR 0 14
10084: PPUSH
10085: LD_VAR 0 1
10089: PPUSH
10090: CALL_OW 250
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 251
10104: PPUSH
10105: LD_INT 10
10107: PPUSH
10108: LD_INT 0
10110: PPUSH
10111: CALL_OW 50
// continue ;
10115: GO 10016
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10117: LD_VAR 0 12
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: PPUSH
10126: CALL_OW 313
10130: IFFALSE 10158
10132: PUSH
10133: LD_VAR 0 12
10137: PUSH
10138: LD_INT 1
10140: ARRAY
10141: PPUSH
10142: CALL_OW 266
10146: PUSH
10147: LD_INT 32
10149: PUSH
10150: LD_INT 31
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: IN
10157: AND
10158: IFTRUE 10179
10160: PUSH
10161: LD_VAR 0 12
10165: PUSH
10166: LD_INT 1
10168: ARRAY
10169: PPUSH
10170: CALL_OW 313
10174: PUSH
10175: LD_INT 6
10177: EQUAL
10178: OR
10179: IFFALSE 10199
// f := Delete ( f , 1 ) ;
10181: LD_ADDR_VAR 0 12
10185: PUSH
10186: LD_VAR 0 12
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 3
10198: ST_TO_ADDR
// if not f then
10199: LD_VAR 0 12
10203: NOT
10204: IFFALSE 10222
// begin x := x + 2 ;
10206: LD_ADDR_VAR 0 13
10210: PUSH
10211: LD_VAR 0 13
10215: PUSH
10216: LD_INT 2
10218: PLUS
10219: ST_TO_ADDR
// continue ;
10220: GO 10016
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10222: LD_VAR 0 12
10226: PUSH
10227: LD_INT 1
10229: ARRAY
10230: PPUSH
10231: CALL_OW 266
10235: PUSH
10236: LD_INT 5
10238: EQUAL
10239: IFFALSE 10313
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10241: LD_VAR 0 12
10245: PUSH
10246: LD_INT 1
10248: ARRAY
10249: PPUSH
10250: CALL_OW 313
10254: PUSH
10255: LD_INT 3
10257: LESS
10258: IFFALSE 10294
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10260: LD_INT 0
10262: PPUSH
10263: LD_INT 5
10265: PUSH
10266: LD_INT 8
10268: PUSH
10269: LD_INT 9
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: PUSH
10277: LD_VAR 0 17
10281: ARRAY
10282: PPUSH
10283: LD_VAR 0 4
10287: PPUSH
10288: CALL_OW 380
10292: GO 10311
// PrepareHuman ( false , i , skill ) ;
10294: LD_INT 0
10296: PPUSH
10297: LD_VAR 0 8
10301: PPUSH
10302: LD_VAR 0 4
10306: PPUSH
10307: CALL_OW 380
// end else
10311: GO 10330
// PrepareHuman ( false , i , skill ) ;
10313: LD_INT 0
10315: PPUSH
10316: LD_VAR 0 8
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 380
// un := CreateHuman ;
10330: LD_ADDR_VAR 0 14
10334: PUSH
10335: CALL_OW 44
10339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10340: LD_ADDR_VAR 0 7
10344: PUSH
10345: LD_VAR 0 7
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: LD_VAR 0 14
10357: PPUSH
10358: CALL_OW 2
10362: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10363: LD_VAR 0 14
10367: PPUSH
10368: LD_VAR 0 12
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PPUSH
10377: CALL_OW 52
// end ;
10381: GO 10016
10383: POP
10384: POP
// end ;
10385: GO 9316
10387: POP
10388: POP
// result := result ^ buildings ;
10389: LD_ADDR_VAR 0 7
10393: PUSH
10394: LD_VAR 0 7
10398: PUSH
10399: LD_VAR 0 18
10403: ADD
10404: ST_TO_ADDR
// end else
10405: GO 10548
// begin for i = 1 to personel do
10407: LD_ADDR_VAR 0 8
10411: PUSH
10412: DOUBLE
10413: LD_INT 1
10415: DEC
10416: ST_TO_ADDR
10417: LD_VAR 0 6
10421: PUSH
10422: FOR_TO
10423: IFFALSE 10546
// begin if i > 4 then
10425: LD_VAR 0 8
10429: PUSH
10430: LD_INT 4
10432: GREATER
10433: IFFALSE 10437
// break ;
10435: GO 10546
// x := personel [ i ] ;
10437: LD_ADDR_VAR 0 13
10441: PUSH
10442: LD_VAR 0 6
10446: PUSH
10447: LD_VAR 0 8
10451: ARRAY
10452: ST_TO_ADDR
// if x = - 1 then
10453: LD_VAR 0 13
10457: PUSH
10458: LD_INT 1
10460: NEG
10461: EQUAL
10462: IFFALSE 10466
// continue ;
10464: GO 10422
// PrepareHuman ( false , i , skill ) ;
10466: LD_INT 0
10468: PPUSH
10469: LD_VAR 0 8
10473: PPUSH
10474: LD_VAR 0 4
10478: PPUSH
10479: CALL_OW 380
// un := CreateHuman ;
10483: LD_ADDR_VAR 0 14
10487: PUSH
10488: CALL_OW 44
10492: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10493: LD_VAR 0 14
10497: PPUSH
10498: LD_VAR 0 1
10502: PPUSH
10503: CALL_OW 250
10507: PPUSH
10508: LD_VAR 0 1
10512: PPUSH
10513: CALL_OW 251
10517: PPUSH
10518: LD_INT 10
10520: PPUSH
10521: LD_INT 0
10523: PPUSH
10524: CALL_OW 50
// result := result ^ un ;
10528: LD_ADDR_VAR 0 7
10532: PUSH
10533: LD_VAR 0 7
10537: PUSH
10538: LD_VAR 0 14
10542: ADD
10543: ST_TO_ADDR
// end ;
10544: GO 10422
10546: POP
10547: POP
// end ; end ;
10548: LD_VAR 0 7
10552: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10553: LD_INT 0
10555: PPUSH
10556: PPUSH
10557: PPUSH
10558: PPUSH
10559: PPUSH
10560: PPUSH
10561: PPUSH
10562: PPUSH
10563: PPUSH
10564: PPUSH
10565: PPUSH
10566: PPUSH
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
// result := false ;
10571: LD_ADDR_VAR 0 3
10575: PUSH
10576: LD_INT 0
10578: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10579: LD_VAR 0 1
10583: NOT
10584: IFTRUE 10609
10586: PUSH
10587: LD_VAR 0 1
10591: PPUSH
10592: CALL_OW 266
10596: PUSH
10597: LD_INT 32
10599: PUSH
10600: LD_INT 33
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: IN
10607: NOT
10608: OR
10609: IFFALSE 10613
// exit ;
10611: GO 11748
// nat := GetNation ( tower ) ;
10613: LD_ADDR_VAR 0 12
10617: PUSH
10618: LD_VAR 0 1
10622: PPUSH
10623: CALL_OW 248
10627: ST_TO_ADDR
// side := GetSide ( tower ) ;
10628: LD_ADDR_VAR 0 16
10632: PUSH
10633: LD_VAR 0 1
10637: PPUSH
10638: CALL_OW 255
10642: ST_TO_ADDR
// x := GetX ( tower ) ;
10643: LD_ADDR_VAR 0 10
10647: PUSH
10648: LD_VAR 0 1
10652: PPUSH
10653: CALL_OW 250
10657: ST_TO_ADDR
// y := GetY ( tower ) ;
10658: LD_ADDR_VAR 0 11
10662: PUSH
10663: LD_VAR 0 1
10667: PPUSH
10668: CALL_OW 251
10672: ST_TO_ADDR
// if not x or not y then
10673: LD_VAR 0 10
10677: NOT
10678: IFTRUE 10687
10680: PUSH
10681: LD_VAR 0 11
10685: NOT
10686: OR
10687: IFFALSE 10691
// exit ;
10689: GO 11748
// weapon := 0 ;
10691: LD_ADDR_VAR 0 18
10695: PUSH
10696: LD_INT 0
10698: ST_TO_ADDR
// fac_list := [ ] ;
10699: LD_ADDR_VAR 0 17
10703: PUSH
10704: EMPTY
10705: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10706: LD_ADDR_VAR 0 6
10710: PUSH
10711: LD_VAR 0 1
10715: PPUSH
10716: CALL_OW 274
10720: PPUSH
10721: LD_VAR 0 2
10725: PPUSH
10726: LD_INT 0
10728: PPUSH
10729: CALL 8283 0 3
10733: PPUSH
10734: LD_INT 30
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PPUSH
10744: CALL_OW 72
10748: ST_TO_ADDR
// if not factories then
10749: LD_VAR 0 6
10753: NOT
10754: IFFALSE 10758
// exit ;
10756: GO 11748
// for i in factories do
10758: LD_ADDR_VAR 0 8
10762: PUSH
10763: LD_VAR 0 6
10767: PUSH
10768: FOR_IN
10769: IFFALSE 10794
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10771: LD_ADDR_VAR 0 17
10775: PUSH
10776: LD_VAR 0 17
10780: PUSH
10781: LD_VAR 0 8
10785: PPUSH
10786: CALL_OW 478
10790: UNION
10791: ST_TO_ADDR
10792: GO 10768
10794: POP
10795: POP
// if not fac_list then
10796: LD_VAR 0 17
10800: NOT
10801: IFFALSE 10805
// exit ;
10803: GO 11748
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10805: LD_ADDR_VAR 0 5
10809: PUSH
10810: LD_INT 4
10812: PUSH
10813: LD_INT 5
10815: PUSH
10816: LD_INT 9
10818: PUSH
10819: LD_INT 10
10821: PUSH
10822: LD_INT 6
10824: PUSH
10825: LD_INT 7
10827: PUSH
10828: LD_INT 11
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 27
10842: PUSH
10843: LD_INT 28
10845: PUSH
10846: LD_INT 26
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 43
10860: PUSH
10861: LD_INT 44
10863: PUSH
10864: LD_INT 46
10866: PUSH
10867: LD_INT 45
10869: PUSH
10870: LD_INT 47
10872: PUSH
10873: LD_INT 49
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: PUSH
10889: LD_VAR 0 12
10893: ARRAY
10894: ST_TO_ADDR
// list := list isect fac_list ;
10895: LD_ADDR_VAR 0 5
10899: PUSH
10900: LD_VAR 0 5
10904: PUSH
10905: LD_VAR 0 17
10909: ISECT
10910: ST_TO_ADDR
// if not list then
10911: LD_VAR 0 5
10915: NOT
10916: IFFALSE 10920
// exit ;
10918: GO 11748
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10920: LD_VAR 0 12
10924: PUSH
10925: LD_INT 3
10927: EQUAL
10928: IFFALSE 10940
10930: PUSH
10931: LD_INT 49
10933: PUSH
10934: LD_VAR 0 5
10938: IN
10939: AND
10940: IFFALSE 10960
10942: PUSH
10943: LD_INT 31
10945: PPUSH
10946: LD_VAR 0 16
10950: PPUSH
10951: CALL_OW 321
10955: PUSH
10956: LD_INT 2
10958: EQUAL
10959: AND
10960: IFFALSE 11020
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10962: LD_INT 22
10964: PUSH
10965: LD_VAR 0 16
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 35
10976: PUSH
10977: LD_INT 49
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 91
10986: PUSH
10987: LD_VAR 0 1
10991: PUSH
10992: LD_INT 10
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: PPUSH
11005: CALL_OW 69
11009: NOT
11010: IFFALSE 11020
// weapon := ru_time_lapser ;
11012: LD_ADDR_VAR 0 18
11016: PUSH
11017: LD_INT 49
11019: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11020: LD_VAR 0 12
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: IN
11035: IFFALSE 11059
11037: PUSH
11038: LD_INT 11
11040: PUSH
11041: LD_VAR 0 5
11045: IN
11046: IFTRUE 11058
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: LD_VAR 0 5
11056: IN
11057: OR
11058: AND
11059: IFFALSE 11079
11061: PUSH
11062: LD_INT 6
11064: PPUSH
11065: LD_VAR 0 16
11069: PPUSH
11070: CALL_OW 321
11074: PUSH
11075: LD_INT 2
11077: EQUAL
11078: AND
11079: IFFALSE 11246
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11081: LD_INT 22
11083: PUSH
11084: LD_VAR 0 16
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 2
11095: PUSH
11096: LD_INT 35
11098: PUSH
11099: LD_INT 11
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 35
11108: PUSH
11109: LD_INT 30
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 91
11123: PUSH
11124: LD_VAR 0 1
11128: PUSH
11129: LD_INT 18
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 69
11146: NOT
11147: IFFALSE 11223
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_VAR 0 16
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: LD_INT 30
11167: PUSH
11168: LD_INT 32
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 30
11177: PUSH
11178: LD_INT 33
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 91
11192: PUSH
11193: LD_VAR 0 1
11197: PUSH
11198: LD_INT 12
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PUSH
11211: EMPTY
11212: LIST
11213: PPUSH
11214: CALL_OW 69
11218: PUSH
11219: LD_INT 2
11221: GREATER
11222: AND
11223: IFFALSE 11246
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11225: LD_ADDR_VAR 0 18
11229: PUSH
11230: LD_INT 11
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_VAR 0 12
11244: ARRAY
11245: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11246: LD_VAR 0 18
11250: NOT
11251: IFFALSE 11271
11253: PUSH
11254: LD_INT 40
11256: PPUSH
11257: LD_VAR 0 16
11261: PPUSH
11262: CALL_OW 321
11266: PUSH
11267: LD_INT 2
11269: EQUAL
11270: AND
11271: IFFALSE 11307
11273: PUSH
11274: LD_INT 7
11276: PUSH
11277: LD_VAR 0 5
11281: IN
11282: IFTRUE 11294
11284: PUSH
11285: LD_INT 28
11287: PUSH
11288: LD_VAR 0 5
11292: IN
11293: OR
11294: IFTRUE 11306
11296: PUSH
11297: LD_INT 45
11299: PUSH
11300: LD_VAR 0 5
11304: IN
11305: OR
11306: AND
11307: IFFALSE 11561
// begin hex := GetHexInfo ( x , y ) ;
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_VAR 0 10
11318: PPUSH
11319: LD_VAR 0 11
11323: PPUSH
11324: CALL_OW 546
11328: ST_TO_ADDR
// if hex [ 1 ] then
11329: LD_VAR 0 4
11333: PUSH
11334: LD_INT 1
11336: ARRAY
11337: IFFALSE 11341
// exit ;
11339: GO 11748
// height := hex [ 2 ] ;
11341: LD_ADDR_VAR 0 15
11345: PUSH
11346: LD_VAR 0 4
11350: PUSH
11351: LD_INT 2
11353: ARRAY
11354: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11355: LD_ADDR_VAR 0 14
11359: PUSH
11360: LD_INT 0
11362: PUSH
11363: LD_INT 2
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: LD_INT 5
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: ST_TO_ADDR
// for i in tmp do
11378: LD_ADDR_VAR 0 8
11382: PUSH
11383: LD_VAR 0 14
11387: PUSH
11388: FOR_IN
11389: IFFALSE 11559
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11391: LD_ADDR_VAR 0 9
11395: PUSH
11396: LD_VAR 0 10
11400: PPUSH
11401: LD_VAR 0 8
11405: PPUSH
11406: LD_INT 5
11408: PPUSH
11409: CALL_OW 272
11413: PUSH
11414: LD_VAR 0 11
11418: PPUSH
11419: LD_VAR 0 8
11423: PPUSH
11424: LD_INT 5
11426: PPUSH
11427: CALL_OW 273
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11436: LD_VAR 0 9
11440: PUSH
11441: LD_INT 1
11443: ARRAY
11444: PPUSH
11445: LD_VAR 0 9
11449: PUSH
11450: LD_INT 2
11452: ARRAY
11453: PPUSH
11454: CALL_OW 488
11458: IFFALSE 11557
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11460: LD_ADDR_VAR 0 4
11464: PUSH
11465: LD_VAR 0 9
11469: PUSH
11470: LD_INT 1
11472: ARRAY
11473: PPUSH
11474: LD_VAR 0 9
11478: PUSH
11479: LD_INT 2
11481: ARRAY
11482: PPUSH
11483: CALL_OW 546
11487: ST_TO_ADDR
// if hex [ 1 ] then
11488: LD_VAR 0 4
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: IFFALSE 11500
// continue ;
11498: GO 11388
// h := hex [ 2 ] ;
11500: LD_ADDR_VAR 0 13
11504: PUSH
11505: LD_VAR 0 4
11509: PUSH
11510: LD_INT 2
11512: ARRAY
11513: ST_TO_ADDR
// if h + 7 < height then
11514: LD_VAR 0 13
11518: PUSH
11519: LD_INT 7
11521: PLUS
11522: PUSH
11523: LD_VAR 0 15
11527: LESS
11528: IFFALSE 11557
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11530: LD_ADDR_VAR 0 18
11534: PUSH
11535: LD_INT 7
11537: PUSH
11538: LD_INT 28
11540: PUSH
11541: LD_INT 45
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_VAR 0 12
11553: ARRAY
11554: ST_TO_ADDR
// break ;
11555: GO 11559
// end ; end ; end ;
11557: GO 11388
11559: POP
11560: POP
// end ; if not weapon then
11561: LD_VAR 0 18
11565: NOT
11566: IFFALSE 11626
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11568: LD_ADDR_VAR 0 5
11572: PUSH
11573: LD_VAR 0 5
11577: PUSH
11578: LD_INT 11
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: LD_INT 49
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: DIFF
11592: ST_TO_ADDR
// if not list then
11593: LD_VAR 0 5
11597: NOT
11598: IFFALSE 11602
// exit ;
11600: GO 11748
// weapon := list [ rand ( 1 , list ) ] ;
11602: LD_ADDR_VAR 0 18
11606: PUSH
11607: LD_VAR 0 5
11611: PUSH
11612: LD_INT 1
11614: PPUSH
11615: LD_VAR 0 5
11619: PPUSH
11620: CALL_OW 12
11624: ARRAY
11625: ST_TO_ADDR
// end ; if weapon then
11626: LD_VAR 0 18
11630: IFFALSE 11748
// begin tmp := CostOfWeapon ( weapon ) ;
11632: LD_ADDR_VAR 0 14
11636: PUSH
11637: LD_VAR 0 18
11641: PPUSH
11642: CALL_OW 451
11646: ST_TO_ADDR
// j := GetBase ( tower ) ;
11647: LD_ADDR_VAR 0 9
11651: PUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: CALL_OW 274
11661: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11662: LD_VAR 0 9
11666: PPUSH
11667: LD_INT 1
11669: PPUSH
11670: CALL_OW 275
11674: PUSH
11675: LD_VAR 0 14
11679: PUSH
11680: LD_INT 1
11682: ARRAY
11683: GREATEREQUAL
11684: IFFALSE 11710
11686: PUSH
11687: LD_VAR 0 9
11691: PPUSH
11692: LD_INT 2
11694: PPUSH
11695: CALL_OW 275
11699: PUSH
11700: LD_VAR 0 14
11704: PUSH
11705: LD_INT 2
11707: ARRAY
11708: GREATEREQUAL
11709: AND
11710: IFFALSE 11736
11712: PUSH
11713: LD_VAR 0 9
11717: PPUSH
11718: LD_INT 3
11720: PPUSH
11721: CALL_OW 275
11725: PUSH
11726: LD_VAR 0 14
11730: PUSH
11731: LD_INT 3
11733: ARRAY
11734: GREATEREQUAL
11735: AND
11736: IFFALSE 11748
// result := weapon ;
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_VAR 0 18
11747: ST_TO_ADDR
// end ; end ;
11748: LD_VAR 0 3
11752: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11753: LD_INT 0
11755: PPUSH
11756: PPUSH
// result := true ;
11757: LD_ADDR_VAR 0 3
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// if array1 = array2 then
11765: LD_VAR 0 1
11769: PUSH
11770: LD_VAR 0 2
11774: EQUAL
11775: IFFALSE 11835
// begin for i = 1 to array1 do
11777: LD_ADDR_VAR 0 4
11781: PUSH
11782: DOUBLE
11783: LD_INT 1
11785: DEC
11786: ST_TO_ADDR
11787: LD_VAR 0 1
11791: PUSH
11792: FOR_TO
11793: IFFALSE 11831
// if array1 [ i ] <> array2 [ i ] then
11795: LD_VAR 0 1
11799: PUSH
11800: LD_VAR 0 4
11804: ARRAY
11805: PUSH
11806: LD_VAR 0 2
11810: PUSH
11811: LD_VAR 0 4
11815: ARRAY
11816: NONEQUAL
11817: IFFALSE 11829
// begin result := false ;
11819: LD_ADDR_VAR 0 3
11823: PUSH
11824: LD_INT 0
11826: ST_TO_ADDR
// break ;
11827: GO 11831
// end ;
11829: GO 11792
11831: POP
11832: POP
// end else
11833: GO 11843
// result := false ;
11835: LD_ADDR_VAR 0 3
11839: PUSH
11840: LD_INT 0
11842: ST_TO_ADDR
// end ;
11843: LD_VAR 0 3
11847: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
// if not array1 or not array2 then
11852: LD_VAR 0 1
11856: NOT
11857: IFTRUE 11866
11859: PUSH
11860: LD_VAR 0 2
11864: NOT
11865: OR
11866: IFFALSE 11870
// exit ;
11868: GO 11934
// result := true ;
11870: LD_ADDR_VAR 0 3
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// for i = 1 to array1 do
11878: LD_ADDR_VAR 0 4
11882: PUSH
11883: DOUBLE
11884: LD_INT 1
11886: DEC
11887: ST_TO_ADDR
11888: LD_VAR 0 1
11892: PUSH
11893: FOR_TO
11894: IFFALSE 11932
// if array1 [ i ] <> array2 [ i ] then
11896: LD_VAR 0 1
11900: PUSH
11901: LD_VAR 0 4
11905: ARRAY
11906: PUSH
11907: LD_VAR 0 2
11911: PUSH
11912: LD_VAR 0 4
11916: ARRAY
11917: NONEQUAL
11918: IFFALSE 11930
// begin result := false ;
11920: LD_ADDR_VAR 0 3
11924: PUSH
11925: LD_INT 0
11927: ST_TO_ADDR
// break ;
11928: GO 11932
// end ;
11930: GO 11893
11932: POP
11933: POP
// end ;
11934: LD_VAR 0 3
11938: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11939: LD_INT 0
11941: PPUSH
11942: PPUSH
11943: PPUSH
// pom := GetBase ( fac ) ;
11944: LD_ADDR_VAR 0 5
11948: PUSH
11949: LD_VAR 0 1
11953: PPUSH
11954: CALL_OW 274
11958: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11959: LD_ADDR_VAR 0 4
11963: PUSH
11964: LD_VAR 0 2
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PPUSH
11973: LD_VAR 0 2
11977: PUSH
11978: LD_INT 2
11980: ARRAY
11981: PPUSH
11982: LD_VAR 0 2
11986: PUSH
11987: LD_INT 3
11989: ARRAY
11990: PPUSH
11991: LD_VAR 0 2
11995: PUSH
11996: LD_INT 4
11998: ARRAY
11999: PPUSH
12000: CALL_OW 449
12004: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12005: LD_ADDR_VAR 0 3
12009: PUSH
12010: LD_VAR 0 5
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 275
12022: PUSH
12023: LD_VAR 0 4
12027: PUSH
12028: LD_INT 1
12030: ARRAY
12031: GREATEREQUAL
12032: IFFALSE 12058
12034: PUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: LD_INT 2
12042: PPUSH
12043: CALL_OW 275
12047: PUSH
12048: LD_VAR 0 4
12052: PUSH
12053: LD_INT 2
12055: ARRAY
12056: GREATEREQUAL
12057: AND
12058: IFFALSE 12084
12060: PUSH
12061: LD_VAR 0 5
12065: PPUSH
12066: LD_INT 3
12068: PPUSH
12069: CALL_OW 275
12073: PUSH
12074: LD_VAR 0 4
12078: PUSH
12079: LD_INT 3
12081: ARRAY
12082: GREATEREQUAL
12083: AND
12084: ST_TO_ADDR
// end ;
12085: LD_VAR 0 3
12089: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12090: LD_INT 0
12092: PPUSH
12093: PPUSH
12094: PPUSH
12095: PPUSH
// pom := GetBase ( building ) ;
12096: LD_ADDR_VAR 0 3
12100: PUSH
12101: LD_VAR 0 1
12105: PPUSH
12106: CALL_OW 274
12110: ST_TO_ADDR
// if not pom then
12111: LD_VAR 0 3
12115: NOT
12116: IFFALSE 12120
// exit ;
12118: GO 12294
// btype := GetBType ( building ) ;
12120: LD_ADDR_VAR 0 5
12124: PUSH
12125: LD_VAR 0 1
12129: PPUSH
12130: CALL_OW 266
12134: ST_TO_ADDR
// if btype = b_armoury then
12135: LD_VAR 0 5
12139: PUSH
12140: LD_INT 4
12142: EQUAL
12143: IFFALSE 12153
// btype := b_barracks ;
12145: LD_ADDR_VAR 0 5
12149: PUSH
12150: LD_INT 5
12152: ST_TO_ADDR
// if btype = b_depot then
12153: LD_VAR 0 5
12157: PUSH
12158: LD_INT 0
12160: EQUAL
12161: IFFALSE 12171
// btype := b_warehouse ;
12163: LD_ADDR_VAR 0 5
12167: PUSH
12168: LD_INT 1
12170: ST_TO_ADDR
// if btype = b_workshop then
12171: LD_VAR 0 5
12175: PUSH
12176: LD_INT 2
12178: EQUAL
12179: IFFALSE 12189
// btype := b_factory ;
12181: LD_ADDR_VAR 0 5
12185: PUSH
12186: LD_INT 3
12188: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12189: LD_ADDR_VAR 0 4
12193: PUSH
12194: LD_VAR 0 5
12198: PPUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 248
12208: PPUSH
12209: CALL_OW 450
12213: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12214: LD_ADDR_VAR 0 2
12218: PUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 275
12231: PUSH
12232: LD_VAR 0 4
12236: PUSH
12237: LD_INT 1
12239: ARRAY
12240: GREATEREQUAL
12241: IFFALSE 12267
12243: PUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 2
12251: PPUSH
12252: CALL_OW 275
12256: PUSH
12257: LD_VAR 0 4
12261: PUSH
12262: LD_INT 2
12264: ARRAY
12265: GREATEREQUAL
12266: AND
12267: IFFALSE 12293
12269: PUSH
12270: LD_VAR 0 3
12274: PPUSH
12275: LD_INT 3
12277: PPUSH
12278: CALL_OW 275
12282: PUSH
12283: LD_VAR 0 4
12287: PUSH
12288: LD_INT 3
12290: ARRAY
12291: GREATEREQUAL
12292: AND
12293: ST_TO_ADDR
// end ;
12294: LD_VAR 0 2
12298: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12299: LD_INT 0
12301: PPUSH
12302: PPUSH
12303: PPUSH
// pom := GetBase ( building ) ;
12304: LD_ADDR_VAR 0 4
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 274
12318: ST_TO_ADDR
// if not pom then
12319: LD_VAR 0 4
12323: NOT
12324: IFFALSE 12328
// exit ;
12326: GO 12433
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12328: LD_ADDR_VAR 0 5
12332: PUSH
12333: LD_VAR 0 2
12337: PPUSH
12338: LD_VAR 0 1
12342: PPUSH
12343: CALL_OW 248
12347: PPUSH
12348: CALL_OW 450
12352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12353: LD_ADDR_VAR 0 3
12357: PUSH
12358: LD_VAR 0 4
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 275
12370: PUSH
12371: LD_VAR 0 5
12375: PUSH
12376: LD_INT 1
12378: ARRAY
12379: GREATEREQUAL
12380: IFFALSE 12406
12382: PUSH
12383: LD_VAR 0 4
12387: PPUSH
12388: LD_INT 2
12390: PPUSH
12391: CALL_OW 275
12395: PUSH
12396: LD_VAR 0 5
12400: PUSH
12401: LD_INT 2
12403: ARRAY
12404: GREATEREQUAL
12405: AND
12406: IFFALSE 12432
12408: PUSH
12409: LD_VAR 0 4
12413: PPUSH
12414: LD_INT 3
12416: PPUSH
12417: CALL_OW 275
12421: PUSH
12422: LD_VAR 0 5
12426: PUSH
12427: LD_INT 3
12429: ARRAY
12430: GREATEREQUAL
12431: AND
12432: ST_TO_ADDR
// end ;
12433: LD_VAR 0 3
12437: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12438: LD_INT 0
12440: PPUSH
12441: PPUSH
12442: PPUSH
12443: PPUSH
12444: PPUSH
12445: PPUSH
12446: PPUSH
12447: PPUSH
12448: PPUSH
12449: PPUSH
12450: PPUSH
// result := false ;
12451: LD_ADDR_VAR 0 8
12455: PUSH
12456: LD_INT 0
12458: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12459: LD_VAR 0 5
12463: NOT
12464: IFTRUE 12473
12466: PUSH
12467: LD_VAR 0 1
12471: NOT
12472: OR
12473: IFTRUE 12482
12475: PUSH
12476: LD_VAR 0 2
12480: NOT
12481: OR
12482: IFTRUE 12491
12484: PUSH
12485: LD_VAR 0 3
12489: NOT
12490: OR
12491: IFFALSE 12495
// exit ;
12493: GO 13321
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12495: LD_ADDR_VAR 0 14
12499: PUSH
12500: LD_VAR 0 1
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: LD_VAR 0 4
12519: PPUSH
12520: LD_VAR 0 5
12524: PUSH
12525: LD_INT 1
12527: ARRAY
12528: PPUSH
12529: CALL_OW 248
12533: PPUSH
12534: LD_INT 0
12536: PPUSH
12537: CALL 14602 0 6
12541: ST_TO_ADDR
// if not hexes then
12542: LD_VAR 0 14
12546: NOT
12547: IFFALSE 12551
// exit ;
12549: GO 13321
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12551: LD_ADDR_VAR 0 17
12555: PUSH
12556: LD_VAR 0 5
12560: PPUSH
12561: LD_INT 22
12563: PUSH
12564: LD_VAR 0 13
12568: PPUSH
12569: CALL_OW 255
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 0
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 72
12614: ST_TO_ADDR
// for i = 1 to hexes do
12615: LD_ADDR_VAR 0 9
12619: PUSH
12620: DOUBLE
12621: LD_INT 1
12623: DEC
12624: ST_TO_ADDR
12625: LD_VAR 0 14
12629: PUSH
12630: FOR_TO
12631: IFFALSE 13319
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12633: LD_ADDR_VAR 0 13
12637: PUSH
12638: LD_VAR 0 14
12642: PUSH
12643: LD_VAR 0 9
12647: ARRAY
12648: PUSH
12649: LD_INT 1
12651: ARRAY
12652: PPUSH
12653: LD_VAR 0 14
12657: PUSH
12658: LD_VAR 0 9
12662: ARRAY
12663: PUSH
12664: LD_INT 2
12666: ARRAY
12667: PPUSH
12668: CALL_OW 428
12672: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12673: LD_VAR 0 14
12677: PUSH
12678: LD_VAR 0 9
12682: ARRAY
12683: PUSH
12684: LD_INT 1
12686: ARRAY
12687: PPUSH
12688: LD_VAR 0 14
12692: PUSH
12693: LD_VAR 0 9
12697: ARRAY
12698: PUSH
12699: LD_INT 2
12701: ARRAY
12702: PPUSH
12703: CALL_OW 351
12707: IFTRUE 12746
12709: PUSH
12710: LD_VAR 0 14
12714: PUSH
12715: LD_VAR 0 9
12719: ARRAY
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: PPUSH
12725: LD_VAR 0 14
12729: PUSH
12730: LD_VAR 0 9
12734: ARRAY
12735: PUSH
12736: LD_INT 2
12738: ARRAY
12739: PPUSH
12740: CALL_OW 488
12744: NOT
12745: OR
12746: IFTRUE 12763
12748: PUSH
12749: LD_VAR 0 13
12753: PPUSH
12754: CALL_OW 247
12758: PUSH
12759: LD_INT 3
12761: EQUAL
12762: OR
12763: IFFALSE 12769
// exit ;
12765: POP
12766: POP
12767: GO 13321
// if not tmp then
12769: LD_VAR 0 13
12773: NOT
12774: IFFALSE 12778
// continue ;
12776: GO 12630
// result := true ;
12778: LD_ADDR_VAR 0 8
12782: PUSH
12783: LD_INT 1
12785: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12786: LD_VAR 0 6
12790: IFFALSE 12807
12792: PUSH
12793: LD_VAR 0 13
12797: PPUSH
12798: CALL_OW 247
12802: PUSH
12803: LD_INT 2
12805: EQUAL
12806: AND
12807: IFFALSE 12824
12809: PUSH
12810: LD_VAR 0 13
12814: PPUSH
12815: CALL_OW 263
12819: PUSH
12820: LD_INT 1
12822: EQUAL
12823: AND
12824: IFFALSE 12988
// begin if IsDrivenBy ( tmp ) then
12826: LD_VAR 0 13
12830: PPUSH
12831: CALL_OW 311
12835: IFFALSE 12839
// continue ;
12837: GO 12630
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12839: LD_VAR 0 6
12843: PPUSH
12844: LD_INT 3
12846: PUSH
12847: LD_INT 60
12849: PUSH
12850: EMPTY
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 3
12859: PUSH
12860: LD_INT 55
12862: PUSH
12863: EMPTY
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PPUSH
12874: CALL_OW 72
12878: IFFALSE 12986
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12880: LD_ADDR_VAR 0 18
12884: PUSH
12885: LD_VAR 0 6
12889: PPUSH
12890: LD_INT 3
12892: PUSH
12893: LD_INT 60
12895: PUSH
12896: EMPTY
12897: LIST
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 3
12905: PUSH
12906: LD_INT 55
12908: PUSH
12909: EMPTY
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PPUSH
12920: CALL_OW 72
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: ST_TO_ADDR
// if IsInUnit ( driver ) then
12929: LD_VAR 0 18
12933: PPUSH
12934: CALL_OW 310
12938: IFFALSE 12949
// ComExit ( driver ) ;
12940: LD_VAR 0 18
12944: PPUSH
12945: CALL 38592 0 1
// AddComEnterUnit ( driver , tmp ) ;
12949: LD_VAR 0 18
12953: PPUSH
12954: LD_VAR 0 13
12958: PPUSH
12959: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12963: LD_VAR 0 18
12967: PPUSH
12968: LD_VAR 0 7
12972: PPUSH
12973: CALL_OW 173
// AddComExitVehicle ( driver ) ;
12977: LD_VAR 0 18
12981: PPUSH
12982: CALL_OW 181
// end ; continue ;
12986: GO 12630
// end ; if not cleaners or not tmp in cleaners then
12988: LD_VAR 0 6
12992: NOT
12993: IFTRUE 13008
12995: PUSH
12996: LD_VAR 0 13
13000: PUSH
13001: LD_VAR 0 6
13005: IN
13006: NOT
13007: OR
13008: IFFALSE 13317
// begin if dep then
13010: LD_VAR 0 17
13014: IFFALSE 13150
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13016: LD_ADDR_VAR 0 16
13020: PUSH
13021: LD_VAR 0 17
13025: PUSH
13026: LD_INT 1
13028: ARRAY
13029: PPUSH
13030: CALL_OW 250
13034: PPUSH
13035: LD_VAR 0 17
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: PPUSH
13044: CALL_OW 254
13048: PPUSH
13049: LD_INT 5
13051: PPUSH
13052: CALL_OW 272
13056: PUSH
13057: LD_VAR 0 17
13061: PUSH
13062: LD_INT 1
13064: ARRAY
13065: PPUSH
13066: CALL_OW 251
13070: PPUSH
13071: LD_VAR 0 17
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: CALL_OW 254
13084: PPUSH
13085: LD_INT 5
13087: PPUSH
13088: CALL_OW 273
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13097: LD_VAR 0 16
13101: PUSH
13102: LD_INT 1
13104: ARRAY
13105: PPUSH
13106: LD_VAR 0 16
13110: PUSH
13111: LD_INT 2
13113: ARRAY
13114: PPUSH
13115: CALL_OW 488
13119: IFFALSE 13150
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13121: LD_VAR 0 13
13125: PPUSH
13126: LD_VAR 0 16
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: LD_VAR 0 16
13139: PUSH
13140: LD_INT 2
13142: ARRAY
13143: PPUSH
13144: CALL_OW 111
// continue ;
13148: GO 12630
// end ; end ; r := GetDir ( tmp ) ;
13150: LD_ADDR_VAR 0 15
13154: PUSH
13155: LD_VAR 0 13
13159: PPUSH
13160: CALL_OW 254
13164: ST_TO_ADDR
// if r = 5 then
13165: LD_VAR 0 15
13169: PUSH
13170: LD_INT 5
13172: EQUAL
13173: IFFALSE 13183
// r := 0 ;
13175: LD_ADDR_VAR 0 15
13179: PUSH
13180: LD_INT 0
13182: ST_TO_ADDR
// for j = r to 5 do
13183: LD_ADDR_VAR 0 10
13187: PUSH
13188: DOUBLE
13189: LD_VAR 0 15
13193: DEC
13194: ST_TO_ADDR
13195: LD_INT 5
13197: PUSH
13198: FOR_TO
13199: IFFALSE 13315
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13201: LD_ADDR_VAR 0 11
13205: PUSH
13206: LD_VAR 0 13
13210: PPUSH
13211: CALL_OW 250
13215: PPUSH
13216: LD_VAR 0 10
13220: PPUSH
13221: LD_INT 2
13223: PPUSH
13224: CALL_OW 272
13228: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13229: LD_ADDR_VAR 0 12
13233: PUSH
13234: LD_VAR 0 13
13238: PPUSH
13239: CALL_OW 251
13243: PPUSH
13244: LD_VAR 0 10
13248: PPUSH
13249: LD_INT 2
13251: PPUSH
13252: CALL_OW 273
13256: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13257: LD_VAR 0 11
13261: PPUSH
13262: LD_VAR 0 12
13266: PPUSH
13267: CALL_OW 488
13271: IFFALSE 13290
13273: PUSH
13274: LD_VAR 0 11
13278: PPUSH
13279: LD_VAR 0 12
13283: PPUSH
13284: CALL_OW 428
13288: NOT
13289: AND
13290: IFFALSE 13313
// begin ComMoveXY ( tmp , _x , _y ) ;
13292: LD_VAR 0 13
13296: PPUSH
13297: LD_VAR 0 11
13301: PPUSH
13302: LD_VAR 0 12
13306: PPUSH
13307: CALL_OW 111
// break ;
13311: GO 13315
// end ; end ;
13313: GO 13198
13315: POP
13316: POP
// end ; end ;
13317: GO 12630
13319: POP
13320: POP
// end ;
13321: LD_VAR 0 8
13325: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13326: LD_INT 0
13328: PPUSH
// result := true ;
13329: LD_ADDR_VAR 0 3
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13337: LD_VAR 0 2
13341: PUSH
13342: LD_INT 24
13344: DOUBLE
13345: EQUAL
13346: IFTRUE 13356
13348: LD_INT 33
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13381
13356: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13357: LD_ADDR_VAR 0 3
13361: PUSH
13362: LD_INT 32
13364: PPUSH
13365: LD_VAR 0 1
13369: PPUSH
13370: CALL_OW 321
13374: PUSH
13375: LD_INT 2
13377: EQUAL
13378: ST_TO_ADDR
13379: GO 13697
13381: LD_INT 20
13383: DOUBLE
13384: EQUAL
13385: IFTRUE 13389
13387: GO 13414
13389: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13390: LD_ADDR_VAR 0 3
13394: PUSH
13395: LD_INT 6
13397: PPUSH
13398: LD_VAR 0 1
13402: PPUSH
13403: CALL_OW 321
13407: PUSH
13408: LD_INT 2
13410: EQUAL
13411: ST_TO_ADDR
13412: GO 13697
13414: LD_INT 22
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13428
13420: LD_INT 36
13422: DOUBLE
13423: EQUAL
13424: IFTRUE 13428
13426: GO 13453
13428: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13429: LD_ADDR_VAR 0 3
13433: PUSH
13434: LD_INT 15
13436: PPUSH
13437: LD_VAR 0 1
13441: PPUSH
13442: CALL_OW 321
13446: PUSH
13447: LD_INT 2
13449: EQUAL
13450: ST_TO_ADDR
13451: GO 13697
13453: LD_INT 30
13455: DOUBLE
13456: EQUAL
13457: IFTRUE 13461
13459: GO 13486
13461: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13462: LD_ADDR_VAR 0 3
13466: PUSH
13467: LD_INT 20
13469: PPUSH
13470: LD_VAR 0 1
13474: PPUSH
13475: CALL_OW 321
13479: PUSH
13480: LD_INT 2
13482: EQUAL
13483: ST_TO_ADDR
13484: GO 13697
13486: LD_INT 28
13488: DOUBLE
13489: EQUAL
13490: IFTRUE 13500
13492: LD_INT 21
13494: DOUBLE
13495: EQUAL
13496: IFTRUE 13500
13498: GO 13525
13500: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13501: LD_ADDR_VAR 0 3
13505: PUSH
13506: LD_INT 21
13508: PPUSH
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 321
13518: PUSH
13519: LD_INT 2
13521: EQUAL
13522: ST_TO_ADDR
13523: GO 13697
13525: LD_INT 16
13527: DOUBLE
13528: EQUAL
13529: IFTRUE 13533
13531: GO 13558
13533: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13534: LD_ADDR_VAR 0 3
13538: PUSH
13539: LD_INT 84
13541: PPUSH
13542: LD_VAR 0 1
13546: PPUSH
13547: CALL_OW 321
13551: PUSH
13552: LD_INT 2
13554: EQUAL
13555: ST_TO_ADDR
13556: GO 13697
13558: LD_INT 19
13560: DOUBLE
13561: EQUAL
13562: IFTRUE 13572
13564: LD_INT 23
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13597
13572: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13573: LD_ADDR_VAR 0 3
13577: PUSH
13578: LD_INT 83
13580: PPUSH
13581: LD_VAR 0 1
13585: PPUSH
13586: CALL_OW 321
13590: PUSH
13591: LD_INT 2
13593: EQUAL
13594: ST_TO_ADDR
13595: GO 13697
13597: LD_INT 17
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 13630
13605: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13606: LD_ADDR_VAR 0 3
13610: PUSH
13611: LD_INT 39
13613: PPUSH
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 321
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: ST_TO_ADDR
13628: GO 13697
13630: LD_INT 18
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13663
13638: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_INT 40
13646: PPUSH
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 321
13656: PUSH
13657: LD_INT 2
13659: EQUAL
13660: ST_TO_ADDR
13661: GO 13697
13663: LD_INT 27
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13696
13671: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13672: LD_ADDR_VAR 0 3
13676: PUSH
13677: LD_INT 35
13679: PPUSH
13680: LD_VAR 0 1
13684: PPUSH
13685: CALL_OW 321
13689: PUSH
13690: LD_INT 2
13692: EQUAL
13693: ST_TO_ADDR
13694: GO 13697
13696: POP
// end ;
13697: LD_VAR 0 3
13701: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
13711: PPUSH
13712: PPUSH
13713: PPUSH
13714: PPUSH
// result := false ;
13715: LD_ADDR_VAR 0 6
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// if btype = b_depot then
13723: LD_VAR 0 2
13727: PUSH
13728: LD_INT 0
13730: EQUAL
13731: IFFALSE 13743
// begin result := true ;
13733: LD_ADDR_VAR 0 6
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// exit ;
13741: GO 14597
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13743: LD_VAR 0 1
13747: NOT
13748: IFTRUE 13773
13750: PUSH
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 266
13760: PUSH
13761: LD_INT 0
13763: PUSH
13764: LD_INT 1
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: IN
13771: NOT
13772: OR
13773: IFTRUE 13782
13775: PUSH
13776: LD_VAR 0 2
13780: NOT
13781: OR
13782: IFTRUE 13818
13784: PUSH
13785: LD_VAR 0 5
13789: PUSH
13790: LD_INT 0
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 2
13798: PUSH
13799: LD_INT 3
13801: PUSH
13802: LD_INT 4
13804: PUSH
13805: LD_INT 5
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: IN
13816: NOT
13817: OR
13818: IFTRUE 13837
13820: PUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_VAR 0 4
13830: PPUSH
13831: CALL_OW 488
13835: NOT
13836: OR
13837: IFFALSE 13841
// exit ;
13839: GO 14597
// side := GetSide ( depot ) ;
13841: LD_ADDR_VAR 0 9
13845: PUSH
13846: LD_VAR 0 1
13850: PPUSH
13851: CALL_OW 255
13855: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13856: LD_VAR 0 9
13860: PPUSH
13861: LD_VAR 0 2
13865: PPUSH
13866: CALL 13326 0 2
13870: NOT
13871: IFFALSE 13875
// exit ;
13873: GO 14597
// pom := GetBase ( depot ) ;
13875: LD_ADDR_VAR 0 10
13879: PUSH
13880: LD_VAR 0 1
13884: PPUSH
13885: CALL_OW 274
13889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13890: LD_ADDR_VAR 0 11
13894: PUSH
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_VAR 0 1
13904: PPUSH
13905: CALL_OW 248
13909: PPUSH
13910: CALL_OW 450
13914: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13915: LD_VAR 0 10
13919: PPUSH
13920: LD_INT 1
13922: PPUSH
13923: CALL_OW 275
13927: PUSH
13928: LD_VAR 0 11
13932: PUSH
13933: LD_INT 1
13935: ARRAY
13936: GREATEREQUAL
13937: IFFALSE 13963
13939: PUSH
13940: LD_VAR 0 10
13944: PPUSH
13945: LD_INT 2
13947: PPUSH
13948: CALL_OW 275
13952: PUSH
13953: LD_VAR 0 11
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: GREATEREQUAL
13962: AND
13963: IFFALSE 13989
13965: PUSH
13966: LD_VAR 0 10
13970: PPUSH
13971: LD_INT 3
13973: PPUSH
13974: CALL_OW 275
13978: PUSH
13979: LD_VAR 0 11
13983: PUSH
13984: LD_INT 3
13986: ARRAY
13987: GREATEREQUAL
13988: AND
13989: NOT
13990: IFFALSE 13994
// exit ;
13992: GO 14597
// if GetBType ( depot ) = b_depot then
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 266
14003: PUSH
14004: LD_INT 0
14006: EQUAL
14007: IFFALSE 14019
// dist := 28 else
14009: LD_ADDR_VAR 0 14
14013: PUSH
14014: LD_INT 28
14016: ST_TO_ADDR
14017: GO 14027
// dist := 36 ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_INT 36
14026: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14027: LD_VAR 0 1
14031: PPUSH
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_VAR 0 4
14041: PPUSH
14042: CALL_OW 297
14046: PUSH
14047: LD_VAR 0 14
14051: GREATER
14052: IFFALSE 14056
// exit ;
14054: GO 14597
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14056: LD_ADDR_VAR 0 12
14060: PUSH
14061: LD_VAR 0 2
14065: PPUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_VAR 0 4
14075: PPUSH
14076: LD_VAR 0 5
14080: PPUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 248
14090: PPUSH
14091: LD_INT 0
14093: PPUSH
14094: CALL 14602 0 6
14098: ST_TO_ADDR
// if not hexes then
14099: LD_VAR 0 12
14103: NOT
14104: IFFALSE 14108
// exit ;
14106: GO 14597
// hex := GetHexInfo ( x , y ) ;
14108: LD_ADDR_VAR 0 15
14112: PUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_VAR 0 4
14122: PPUSH
14123: CALL_OW 546
14127: ST_TO_ADDR
// if hex [ 1 ] then
14128: LD_VAR 0 15
14132: PUSH
14133: LD_INT 1
14135: ARRAY
14136: IFFALSE 14140
// exit ;
14138: GO 14597
// height := hex [ 2 ] ;
14140: LD_ADDR_VAR 0 13
14144: PUSH
14145: LD_VAR 0 15
14149: PUSH
14150: LD_INT 2
14152: ARRAY
14153: ST_TO_ADDR
// for i = 1 to hexes do
14154: LD_ADDR_VAR 0 7
14158: PUSH
14159: DOUBLE
14160: LD_INT 1
14162: DEC
14163: ST_TO_ADDR
14164: LD_VAR 0 12
14168: PUSH
14169: FOR_TO
14170: IFFALSE 14514
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14172: LD_VAR 0 12
14176: PUSH
14177: LD_VAR 0 7
14181: ARRAY
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: LD_VAR 0 12
14191: PUSH
14192: LD_VAR 0 7
14196: ARRAY
14197: PUSH
14198: LD_INT 2
14200: ARRAY
14201: PPUSH
14202: CALL_OW 488
14206: NOT
14207: IFTRUE 14249
14209: PUSH
14210: LD_VAR 0 12
14214: PUSH
14215: LD_VAR 0 7
14219: ARRAY
14220: PUSH
14221: LD_INT 1
14223: ARRAY
14224: PPUSH
14225: LD_VAR 0 12
14229: PUSH
14230: LD_VAR 0 7
14234: ARRAY
14235: PUSH
14236: LD_INT 2
14238: ARRAY
14239: PPUSH
14240: CALL_OW 428
14244: PUSH
14245: LD_INT 0
14247: GREATER
14248: OR
14249: IFTRUE 14287
14251: PUSH
14252: LD_VAR 0 12
14256: PUSH
14257: LD_VAR 0 7
14261: ARRAY
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_VAR 0 12
14271: PUSH
14272: LD_VAR 0 7
14276: ARRAY
14277: PUSH
14278: LD_INT 2
14280: ARRAY
14281: PPUSH
14282: CALL_OW 351
14286: OR
14287: IFFALSE 14293
// exit ;
14289: POP
14290: POP
14291: GO 14597
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14293: LD_ADDR_VAR 0 8
14297: PUSH
14298: LD_VAR 0 12
14302: PUSH
14303: LD_VAR 0 7
14307: ARRAY
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 12
14317: PUSH
14318: LD_VAR 0 7
14322: ARRAY
14323: PUSH
14324: LD_INT 2
14326: ARRAY
14327: PPUSH
14328: CALL_OW 546
14332: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14333: LD_VAR 0 8
14337: PUSH
14338: LD_INT 1
14340: ARRAY
14341: IFTRUE 14363
14343: PUSH
14344: LD_VAR 0 8
14348: PUSH
14349: LD_INT 2
14351: ARRAY
14352: PUSH
14353: LD_VAR 0 13
14357: PUSH
14358: LD_INT 2
14360: PLUS
14361: GREATER
14362: OR
14363: IFTRUE 14385
14365: PUSH
14366: LD_VAR 0 8
14370: PUSH
14371: LD_INT 2
14373: ARRAY
14374: PUSH
14375: LD_VAR 0 13
14379: PUSH
14380: LD_INT 2
14382: MINUS
14383: LESS
14384: OR
14385: IFTRUE 14453
14387: PUSH
14388: LD_VAR 0 8
14392: PUSH
14393: LD_INT 3
14395: ARRAY
14396: PUSH
14397: LD_INT 0
14399: PUSH
14400: LD_INT 8
14402: PUSH
14403: LD_INT 9
14405: PUSH
14406: LD_INT 10
14408: PUSH
14409: LD_INT 11
14411: PUSH
14412: LD_INT 12
14414: PUSH
14415: LD_INT 13
14417: PUSH
14418: LD_INT 16
14420: PUSH
14421: LD_INT 17
14423: PUSH
14424: LD_INT 18
14426: PUSH
14427: LD_INT 19
14429: PUSH
14430: LD_INT 20
14432: PUSH
14433: LD_INT 21
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: IN
14451: NOT
14452: OR
14453: IFTRUE 14466
14455: PUSH
14456: LD_VAR 0 8
14460: PUSH
14461: LD_INT 5
14463: ARRAY
14464: NOT
14465: OR
14466: IFTRUE 14506
14468: PUSH
14469: LD_VAR 0 8
14473: PUSH
14474: LD_INT 6
14476: ARRAY
14477: PUSH
14478: LD_INT 1
14480: PUSH
14481: LD_INT 2
14483: PUSH
14484: LD_INT 7
14486: PUSH
14487: LD_INT 9
14489: PUSH
14490: LD_INT 10
14492: PUSH
14493: LD_INT 11
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: IN
14504: NOT
14505: OR
14506: IFFALSE 14512
// exit ;
14508: POP
14509: POP
14510: GO 14597
// end ;
14512: GO 14169
14514: POP
14515: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14516: LD_VAR 0 9
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: LD_VAR 0 4
14530: PPUSH
14531: LD_INT 20
14533: PPUSH
14534: CALL 6416 0 4
14538: PUSH
14539: LD_INT 4
14541: ARRAY
14542: IFFALSE 14546
// exit ;
14544: GO 14597
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14546: LD_VAR 0 2
14550: PUSH
14551: LD_INT 29
14553: PUSH
14554: LD_INT 30
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: IN
14561: IFFALSE 14585
14563: PUSH
14564: LD_VAR 0 3
14568: PPUSH
14569: LD_VAR 0 4
14573: PPUSH
14574: LD_VAR 0 9
14578: PPUSH
14579: CALL_OW 440
14583: NOT
14584: AND
14585: IFFALSE 14589
// exit ;
14587: GO 14597
// result := true ;
14589: LD_ADDR_VAR 0 6
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// end ;
14597: LD_VAR 0 6
14601: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
14620: PPUSH
14621: PPUSH
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
14651: PPUSH
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
// result = [ ] ;
14662: LD_ADDR_VAR 0 7
14666: PUSH
14667: EMPTY
14668: ST_TO_ADDR
// temp_list = [ ] ;
14669: LD_ADDR_VAR 0 9
14673: PUSH
14674: EMPTY
14675: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14676: LD_VAR 0 4
14680: PUSH
14681: LD_INT 0
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: LD_INT 3
14692: PUSH
14693: LD_INT 4
14695: PUSH
14696: LD_INT 5
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: IN
14707: NOT
14708: IFTRUE 14751
14710: PUSH
14711: LD_VAR 0 1
14715: PUSH
14716: LD_INT 0
14718: PUSH
14719: LD_INT 1
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: IN
14726: IFFALSE 14750
14728: PUSH
14729: LD_VAR 0 5
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: LD_INT 3
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: LIST
14747: IN
14748: NOT
14749: AND
14750: OR
14751: IFFALSE 14755
// exit ;
14753: GO 33154
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14755: LD_VAR 0 1
14759: PUSH
14760: LD_INT 6
14762: PUSH
14763: LD_INT 7
14765: PUSH
14766: LD_INT 8
14768: PUSH
14769: LD_INT 13
14771: PUSH
14772: LD_INT 12
14774: PUSH
14775: LD_INT 15
14777: PUSH
14778: LD_INT 11
14780: PUSH
14781: LD_INT 14
14783: PUSH
14784: LD_INT 10
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: IN
14798: IFFALSE 14808
// btype = b_lab ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_INT 6
14807: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14808: LD_VAR 0 6
14812: PUSH
14813: LD_INT 0
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: IN
14827: NOT
14828: IFTRUE 14896
14830: PUSH
14831: LD_VAR 0 1
14835: PUSH
14836: LD_INT 0
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: LD_INT 3
14847: PUSH
14848: LD_INT 6
14850: PUSH
14851: LD_INT 36
14853: PUSH
14854: LD_INT 4
14856: PUSH
14857: LD_INT 5
14859: PUSH
14860: LD_INT 31
14862: PUSH
14863: LD_INT 32
14865: PUSH
14866: LD_INT 33
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: IN
14882: NOT
14883: IFFALSE 14895
14885: PUSH
14886: LD_VAR 0 6
14890: PUSH
14891: LD_INT 1
14893: EQUAL
14894: AND
14895: OR
14896: IFTRUE 14928
14898: PUSH
14899: LD_VAR 0 1
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: IN
14914: NOT
14915: IFFALSE 14927
14917: PUSH
14918: LD_VAR 0 6
14922: PUSH
14923: LD_INT 2
14925: EQUAL
14926: AND
14927: OR
14928: IFFALSE 14938
// mode = 0 ;
14930: LD_ADDR_VAR 0 6
14934: PUSH
14935: LD_INT 0
14937: ST_TO_ADDR
// case mode of 0 :
14938: LD_VAR 0 6
14942: PUSH
14943: LD_INT 0
14945: DOUBLE
14946: EQUAL
14947: IFTRUE 14951
14949: GO 26404
14951: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14952: LD_ADDR_VAR 0 11
14956: PUSH
14957: LD_INT 0
14959: PUSH
14960: LD_INT 0
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 0
14969: PUSH
14970: LD_INT 1
14972: NEG
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: LD_INT 0
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 1
14990: PUSH
14991: LD_INT 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 0
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 1
15010: NEG
15011: PUSH
15012: LD_INT 0
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 1
15021: NEG
15022: PUSH
15023: LD_INT 1
15025: NEG
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 1
15033: NEG
15034: PUSH
15035: LD_INT 2
15037: NEG
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 0
15045: PUSH
15046: LD_INT 2
15048: NEG
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: LD_INT 1
15059: NEG
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 1
15067: PUSH
15068: LD_INT 2
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 0
15077: PUSH
15078: LD_INT 2
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 1
15087: NEG
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 1
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: LD_INT 0
15108: PUSH
15109: LD_INT 3
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 1
15118: NEG
15119: PUSH
15120: LD_INT 2
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15145: LD_ADDR_VAR 0 12
15149: PUSH
15150: LD_INT 0
15152: PUSH
15153: LD_INT 0
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: LD_INT 1
15165: NEG
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 1
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 1
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 0
15193: PUSH
15194: LD_INT 1
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 1
15203: NEG
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 1
15214: NEG
15215: PUSH
15216: LD_INT 1
15218: NEG
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: LD_INT 1
15229: NEG
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 2
15237: PUSH
15238: LD_INT 0
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 2
15247: PUSH
15248: LD_INT 1
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 1
15257: NEG
15258: PUSH
15259: LD_INT 1
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 2
15268: NEG
15269: PUSH
15270: LD_INT 0
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 2
15279: NEG
15280: PUSH
15281: LD_INT 1
15283: NEG
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 2
15291: NEG
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 3
15302: NEG
15303: PUSH
15304: LD_INT 0
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 3
15313: NEG
15314: PUSH
15315: LD_INT 1
15317: NEG
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15341: LD_ADDR_VAR 0 13
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 0
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: LD_INT 1
15361: NEG
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: LD_INT 1
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 0
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 1
15399: NEG
15400: PUSH
15401: LD_INT 0
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 1
15410: NEG
15411: PUSH
15412: LD_INT 1
15414: NEG
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: LD_INT 1
15422: NEG
15423: PUSH
15424: LD_INT 2
15426: NEG
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 2
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 2
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: LD_INT 1
15454: PUSH
15455: LD_INT 2
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 2
15464: NEG
15465: PUSH
15466: LD_INT 1
15468: NEG
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 2
15476: NEG
15477: PUSH
15478: LD_INT 2
15480: NEG
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 2
15488: NEG
15489: PUSH
15490: LD_INT 3
15492: NEG
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 3
15500: NEG
15501: PUSH
15502: LD_INT 2
15504: NEG
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 3
15512: NEG
15513: PUSH
15514: LD_INT 3
15516: NEG
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15540: LD_ADDR_VAR 0 14
15544: PUSH
15545: LD_INT 0
15547: PUSH
15548: LD_INT 0
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: LD_INT 0
15557: PUSH
15558: LD_INT 1
15560: NEG
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 1
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: LD_INT 1
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 0
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 1
15598: NEG
15599: PUSH
15600: LD_INT 0
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 1
15609: NEG
15610: PUSH
15611: LD_INT 1
15613: NEG
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 1
15621: NEG
15622: PUSH
15623: LD_INT 2
15625: NEG
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 0
15633: PUSH
15634: LD_INT 2
15636: NEG
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 1
15644: PUSH
15645: LD_INT 1
15647: NEG
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 0
15665: PUSH
15666: LD_INT 2
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 1
15675: NEG
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 1
15686: NEG
15687: PUSH
15688: LD_INT 3
15690: NEG
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 0
15698: PUSH
15699: LD_INT 3
15701: NEG
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: LD_INT 2
15712: NEG
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15736: LD_ADDR_VAR 0 15
15740: PUSH
15741: LD_INT 0
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: LD_INT 1
15756: NEG
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 1
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 1
15774: PUSH
15775: LD_INT 1
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 0
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 1
15794: NEG
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 1
15805: NEG
15806: PUSH
15807: LD_INT 1
15809: NEG
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: LD_INT 1
15820: NEG
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 2
15828: PUSH
15829: LD_INT 0
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 1
15848: NEG
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 2
15859: NEG
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 2
15870: NEG
15871: PUSH
15872: LD_INT 1
15874: NEG
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 0
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15929: LD_ADDR_VAR 0 16
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 0
15946: PUSH
15947: LD_INT 1
15949: NEG
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 1
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 0
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: NEG
15988: PUSH
15989: LD_INT 0
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 1
15998: NEG
15999: PUSH
16000: LD_INT 1
16002: NEG
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 1
16010: NEG
16011: PUSH
16012: LD_INT 2
16014: NEG
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 2
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 2
16032: PUSH
16033: LD_INT 2
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 1
16042: PUSH
16043: LD_INT 2
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 2
16052: NEG
16053: PUSH
16054: LD_INT 1
16056: NEG
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 2
16064: NEG
16065: PUSH
16066: LD_INT 2
16068: NEG
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 3
16076: PUSH
16077: LD_INT 2
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 3
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 2
16096: PUSH
16097: LD_INT 3
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16122: LD_ADDR_VAR 0 17
16126: PUSH
16127: LD_INT 0
16129: PUSH
16130: LD_INT 0
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 0
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 1
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: LD_INT 1
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 1
16180: NEG
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: LD_INT 1
16191: NEG
16192: PUSH
16193: LD_INT 1
16195: NEG
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 1
16203: NEG
16204: PUSH
16205: LD_INT 2
16207: NEG
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 0
16215: PUSH
16216: LD_INT 2
16218: NEG
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: LD_INT 1
16229: NEG
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: LD_INT 2
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: LD_INT 2
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 0
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 2
16298: NEG
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 2
16309: NEG
16310: PUSH
16311: LD_INT 1
16313: NEG
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 2
16321: NEG
16322: PUSH
16323: LD_INT 2
16325: NEG
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16352: LD_ADDR_VAR 0 18
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: LD_INT 1
16372: NEG
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: PUSH
16398: LD_INT 0
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 1
16410: NEG
16411: PUSH
16412: LD_INT 0
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: LD_INT 1
16425: NEG
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: PUSH
16435: LD_INT 2
16437: NEG
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 2
16448: NEG
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 1
16456: PUSH
16457: LD_INT 1
16459: NEG
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 2
16477: PUSH
16478: LD_INT 1
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 1
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 0
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 2
16528: NEG
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 2
16539: NEG
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 2
16551: NEG
16552: PUSH
16553: LD_INT 2
16555: NEG
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16582: LD_ADDR_VAR 0 19
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 0
16599: PUSH
16600: LD_INT 1
16602: NEG
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 0
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 1
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: NEG
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: NEG
16652: PUSH
16653: LD_INT 1
16655: NEG
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 1
16663: NEG
16664: PUSH
16665: LD_INT 2
16667: NEG
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: LD_INT 2
16678: NEG
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: LD_INT 1
16689: NEG
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: PUSH
16695: LD_INT 2
16697: PUSH
16698: LD_INT 0
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 2
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 1
16727: PUSH
16728: LD_INT 2
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 1
16747: NEG
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 2
16758: NEG
16759: PUSH
16760: LD_INT 0
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 2
16769: NEG
16770: PUSH
16771: LD_INT 1
16773: NEG
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 2
16781: NEG
16782: PUSH
16783: LD_INT 2
16785: NEG
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16812: LD_ADDR_VAR 0 20
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: LD_INT 0
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: LD_INT 1
16832: NEG
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: LD_INT 1
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 0
16860: PUSH
16861: LD_INT 1
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 1
16870: NEG
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 1
16881: NEG
16882: PUSH
16883: LD_INT 1
16885: NEG
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: NEG
16894: PUSH
16895: LD_INT 2
16897: NEG
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 0
16905: PUSH
16906: LD_INT 2
16908: NEG
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: LD_INT 1
16919: NEG
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: LD_INT 0
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 2
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 2
16947: PUSH
16948: LD_INT 2
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 1
16957: PUSH
16958: LD_INT 2
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 1
16977: NEG
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 2
16988: NEG
16989: PUSH
16990: LD_INT 0
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 2
16999: NEG
17000: PUSH
17001: LD_INT 1
17003: NEG
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: NEG
17012: PUSH
17013: LD_INT 2
17015: NEG
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17042: LD_ADDR_VAR 0 21
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 0
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 1
17111: NEG
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 1
17123: NEG
17124: PUSH
17125: LD_INT 2
17127: NEG
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 0
17135: PUSH
17136: LD_INT 2
17138: NEG
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: LD_INT 1
17149: NEG
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 0
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: LD_INT 2
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 0
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 2
17218: NEG
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 2
17229: NEG
17230: PUSH
17231: LD_INT 1
17233: NEG
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 2
17241: NEG
17242: PUSH
17243: LD_INT 2
17245: NEG
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17272: LD_ADDR_VAR 0 22
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: LD_INT 1
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: LD_INT 0
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 0
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 1
17330: NEG
17331: PUSH
17332: LD_INT 0
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 1
17341: NEG
17342: PUSH
17343: LD_INT 1
17345: NEG
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 1
17353: NEG
17354: PUSH
17355: LD_INT 2
17357: NEG
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 0
17365: PUSH
17366: LD_INT 2
17368: NEG
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 0
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: LD_INT 2
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 0
17427: PUSH
17428: LD_INT 2
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 2
17448: NEG
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 2
17459: NEG
17460: PUSH
17461: LD_INT 1
17463: NEG
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 2
17471: NEG
17472: PUSH
17473: LD_INT 2
17475: NEG
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17502: LD_ADDR_VAR 0 23
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 0
17519: PUSH
17520: LD_INT 1
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: LD_INT 0
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 1
17560: NEG
17561: PUSH
17562: LD_INT 0
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 1
17571: NEG
17572: PUSH
17573: LD_INT 1
17575: NEG
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: LD_INT 2
17587: NEG
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: LD_INT 2
17598: NEG
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 2
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 2
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: LD_INT 2
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 0
17657: PUSH
17658: LD_INT 2
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 2
17678: NEG
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 2
17689: NEG
17690: PUSH
17691: LD_INT 1
17693: NEG
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 2
17701: NEG
17702: PUSH
17703: LD_INT 2
17705: NEG
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: NEG
17714: PUSH
17715: LD_INT 3
17717: NEG
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: LD_INT 3
17729: NEG
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 1
17737: PUSH
17738: LD_INT 2
17740: NEG
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 1
17751: NEG
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17782: LD_ADDR_VAR 0 24
17786: PUSH
17787: LD_INT 0
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: LD_INT 0
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: NEG
17852: PUSH
17853: LD_INT 1
17855: NEG
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: LD_INT 2
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 2
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 2
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 2
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: NEG
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 2
17969: NEG
17970: PUSH
17971: LD_INT 1
17973: NEG
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 2
17985: NEG
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 1
17993: PUSH
17994: LD_INT 2
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 3
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 3
18025: PUSH
18026: LD_INT 2
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18058: LD_ADDR_VAR 0 25
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 1
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: LD_INT 2
18143: NEG
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 0
18213: PUSH
18214: LD_INT 2
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 2
18257: NEG
18258: PUSH
18259: LD_INT 2
18261: NEG
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 2
18289: PUSH
18290: LD_INT 3
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18332: LD_ADDR_VAR 0 26
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: LD_INT 1
18352: NEG
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: LD_INT 2
18417: NEG
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 2
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 1
18439: NEG
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: LD_INT 2
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: LD_INT 2
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 2
18508: NEG
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: LD_INT 1
18523: NEG
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 2
18531: NEG
18532: PUSH
18533: LD_INT 2
18535: NEG
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 3
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18608: LD_ADDR_VAR 0 27
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 0
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 0
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: NEG
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: LD_INT 1
18681: NEG
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 0
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: LD_INT 1
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 2
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 2
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: NEG
18785: PUSH
18786: LD_INT 0
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: NEG
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: NEG
18808: PUSH
18809: LD_INT 2
18811: NEG
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 1
18819: NEG
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 2
18830: NEG
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 3
18841: NEG
18842: PUSH
18843: LD_INT 1
18845: NEG
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 3
18853: NEG
18854: PUSH
18855: LD_INT 2
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18888: LD_ADDR_VAR 0 28
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: LD_INT 0
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 0
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: NEG
18970: PUSH
18971: LD_INT 2
18973: NEG
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 2
18984: NEG
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 0
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 2
19075: NEG
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: LD_INT 2
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: LD_INT 3
19103: NEG
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: LD_INT 3
19115: NEG
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 3
19123: NEG
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 3
19135: NEG
19136: PUSH
19137: LD_INT 2
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19170: LD_ADDR_VAR 0 29
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: LD_INT 1
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 0
19218: PUSH
19219: LD_INT 1
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: LD_INT 2
19255: NEG
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: LD_INT 1
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: LD_INT 2
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: LD_INT 1
19340: NEG
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: NEG
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: LD_INT 3
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 1
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 3
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: LD_INT 3
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 1
19403: NEG
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 3
19414: NEG
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19449: LD_ADDR_VAR 0 30
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 1
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: NEG
19508: PUSH
19509: LD_INT 0
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: LD_INT 2
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 0
19542: PUSH
19543: LD_INT 2
19545: NEG
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: LD_INT 1
19556: NEG
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 2
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 2
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 2
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 1
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 2
19615: NEG
19616: PUSH
19617: LD_INT 0
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 2
19626: NEG
19627: PUSH
19628: LD_INT 1
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: LD_INT 3
19642: NEG
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: LD_INT 2
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 3
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 2
19671: PUSH
19672: LD_INT 3
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 3
19692: NEG
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19727: LD_ADDR_VAR 0 31
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: NEG
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: LD_INT 1
19800: NEG
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: LD_INT 2
19812: NEG
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 1
19823: NEG
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 0
19871: PUSH
19872: LD_INT 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 2
19892: NEG
19893: PUSH
19894: LD_INT 1
19896: NEG
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 2
19904: NEG
19905: PUSH
19906: LD_INT 2
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 3
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 1
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 3
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: PUSH
19950: LD_INT 3
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 3
19970: NEG
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20005: LD_ADDR_VAR 0 32
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 0
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: LD_INT 0
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: NEG
20075: PUSH
20076: LD_INT 1
20078: NEG
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: LD_INT 2
20090: NEG
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: LD_INT 2
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: PUSH
20110: LD_INT 1
20112: NEG
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: NEG
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 2
20171: NEG
20172: PUSH
20173: LD_INT 0
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: NEG
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: NEG
20195: PUSH
20196: LD_INT 3
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 2
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 3
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: LD_INT 1
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 3
20248: NEG
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20283: LD_ADDR_VAR 0 33
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 1
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 0
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: LD_INT 2
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: LD_INT 1
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 2
20438: NEG
20439: PUSH
20440: LD_INT 0
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: LD_INT 2
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: NEG
20474: PUSH
20475: LD_INT 3
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 2
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 3
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 3
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 3
20527: NEG
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20562: LD_ADDR_VAR 0 34
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: NEG
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 2
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 2
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 2
20677: PUSH
20678: LD_INT 1
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: LD_INT 3
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: LD_INT 2
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 3
20776: PUSH
20777: LD_INT 2
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 3
20807: NEG
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20842: LD_ADDR_VAR 0 35
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 2
20933: NEG
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20954: LD_ADDR_VAR 0 36
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: NEG
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: NEG
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21066: LD_ADDR_VAR 0 37
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21178: LD_ADDR_VAR 0 38
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: LD_INT 1
21251: NEG
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: LD_INT 1
21273: NEG
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21290: LD_ADDR_VAR 0 39
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: LD_INT 2
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: PUSH
21384: LD_INT 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21402: LD_ADDR_VAR 0 40
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21514: LD_ADDR_VAR 0 41
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: NEG
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: NEG
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 2
21618: PUSH
21619: LD_INT 0
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: LD_INT 2
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 2
21669: NEG
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: NEG
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: NEG
21693: PUSH
21694: LD_INT 2
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 2
21704: NEG
21705: PUSH
21706: LD_INT 3
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: PUSH
21717: LD_INT 1
21719: NEG
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 3
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: LD_INT 1
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 3
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 2
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 2
21777: NEG
21778: PUSH
21779: LD_INT 1
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 3
21788: NEG
21789: PUSH
21790: LD_INT 0
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 3
21799: NEG
21800: PUSH
21801: LD_INT 1
21803: NEG
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 3
21811: NEG
21812: PUSH
21813: LD_INT 2
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 3
21823: NEG
21824: PUSH
21825: LD_INT 3
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21864: LD_ADDR_VAR 0 42
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 0
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: LD_INT 0
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: NEG
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 2
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: LD_INT 2
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 2
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 2
22042: NEG
22043: PUSH
22044: LD_INT 2
22046: NEG
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: LD_INT 3
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: LD_INT 3
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 3
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: LD_INT 3
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 1
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 0
22140: PUSH
22141: LD_INT 3
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 3
22161: NEG
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 3
22173: NEG
22174: PUSH
22175: LD_INT 3
22177: NEG
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22214: LD_ADDR_VAR 0 43
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 0
22231: PUSH
22232: LD_INT 1
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 2
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: LD_INT 2
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 2
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: NEG
22381: PUSH
22382: LD_INT 0
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 2
22391: NEG
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: LD_INT 3
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: LD_INT 3
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 3
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 3
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 3
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 3
22510: NEG
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 3
22521: NEG
22522: PUSH
22523: LD_INT 1
22525: NEG
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22562: LD_ADDR_VAR 0 44
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 1
22582: NEG
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: LD_INT 0
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: NEG
22741: PUSH
22742: LD_INT 2
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 2
22752: NEG
22753: PUSH
22754: LD_INT 3
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 3
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 3
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 3
22805: PUSH
22806: LD_INT 3
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 2
22815: PUSH
22816: LD_INT 3
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 3
22836: NEG
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 3
22847: NEG
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 3
22859: NEG
22860: PUSH
22861: LD_INT 2
22863: NEG
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 3
22871: NEG
22872: PUSH
22873: LD_INT 3
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22912: LD_ADDR_VAR 0 45
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: NEG
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 0
23005: PUSH
23006: LD_INT 2
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 1
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: LD_INT 2
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: LD_INT 2
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: LD_INT 3
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: NEG
23115: PUSH
23116: LD_INT 3
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: LD_INT 3
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 3
23158: PUSH
23159: LD_INT 3
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: LD_INT 3
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 1
23198: NEG
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 3
23209: NEG
23210: PUSH
23211: LD_INT 2
23213: NEG
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 3
23221: NEG
23222: PUSH
23223: LD_INT 3
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23262: LD_ADDR_VAR 0 46
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: NEG
23344: PUSH
23345: LD_INT 2
23347: NEG
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 0
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: LD_INT 2
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: LD_INT 0
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 2
23439: NEG
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: LD_INT 3
23455: NEG
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 0
23463: PUSH
23464: LD_INT 3
23466: NEG
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 2
23485: PUSH
23486: LD_INT 1
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 3
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 3
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: LD_INT 3
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 3
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 2
23547: NEG
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 3
23558: NEG
23559: PUSH
23560: LD_INT 0
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 3
23569: NEG
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23610: LD_ADDR_VAR 0 47
23614: PUSH
23615: LD_INT 0
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 2
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: NEG
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 2
23737: NEG
23738: PUSH
23739: LD_INT 2
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23761: LD_ADDR_VAR 0 48
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23908: LD_ADDR_VAR 0 49
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: LD_INT 1
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: LD_INT 1
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: PUSH
24031: LD_INT 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24052: LD_ADDR_VAR 0 50
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 0
24069: PUSH
24070: LD_INT 1
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: NEG
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: LD_INT 2
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24196: LD_ADDR_VAR 0 51
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: LD_INT 0
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: LD_INT 1
24269: NEG
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 2
24319: NEG
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24343: LD_ADDR_VAR 0 52
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: LD_INT 1
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: LD_INT 2
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 2
24447: NEG
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: LD_INT 1
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: LD_INT 2
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24494: LD_ADDR_VAR 0 53
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 0
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: LD_INT 1
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 1
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 0
24587: PUSH
24588: LD_INT 2
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: NEG
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 2
24670: NEG
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 2
24681: NEG
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24724: LD_ADDR_VAR 0 54
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: LD_INT 1
24744: NEG
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 2
24839: PUSH
24840: LD_INT 0
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 2
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 2
24900: NEG
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: NEG
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: NEG
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24954: LD_ADDR_VAR 0 55
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 1
25012: NEG
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: NEG
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 2
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 1
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: NEG
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25184: LD_ADDR_VAR 0 56
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: LD_INT 2
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: LD_INT 2
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 2
25371: NEG
25372: PUSH
25373: LD_INT 1
25375: NEG
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 2
25383: NEG
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25414: LD_ADDR_VAR 0 57
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: LD_INT 1
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 2
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 2
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 2
25590: NEG
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 2
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: NEG
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25644: LD_ADDR_VAR 0 58
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: LD_INT 2
25729: NEG
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: PUSH
25760: LD_INT 0
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: NEG
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25874: LD_ADDR_VAR 0 59
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 1
25894: NEG
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 0
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25962: LD_ADDR_VAR 0 60
25966: PUSH
25967: LD_INT 0
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 1
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26050: LD_ADDR_VAR 0 61
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26138: LD_ADDR_VAR 0 62
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 1
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26226: LD_ADDR_VAR 0 63
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26314: LD_ADDR_VAR 0 64
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// end ; 1 :
26402: GO 32299
26404: LD_INT 1
26406: DOUBLE
26407: EQUAL
26408: IFTRUE 26412
26410: GO 29035
26412: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26413: LD_ADDR_VAR 0 11
26417: PUSH
26418: LD_INT 1
26420: NEG
26421: PUSH
26422: LD_INT 3
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 3
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: LD_INT 2
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26457: LD_ADDR_VAR 0 12
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26498: LD_ADDR_VAR 0 13
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: LD_INT 3
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: LIST
26537: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26538: LD_ADDR_VAR 0 14
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 3
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 2
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26579: LD_ADDR_VAR 0 15
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: NEG
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 3
26608: NEG
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26623: LD_ADDR_VAR 0 16
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: LD_INT 3
26634: NEG
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 3
26642: NEG
26643: PUSH
26644: LD_INT 2
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 3
26654: NEG
26655: PUSH
26656: LD_INT 3
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26669: LD_ADDR_VAR 0 17
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: LD_INT 3
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 3
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: LIST
26712: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26713: LD_ADDR_VAR 0 18
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 3
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: LIST
26753: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26754: LD_ADDR_VAR 0 19
26758: PUSH
26759: LD_INT 3
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 3
26771: PUSH
26772: LD_INT 3
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 3
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26794: LD_ADDR_VAR 0 20
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 3
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26835: LD_ADDR_VAR 0 21
26839: PUSH
26840: LD_INT 2
26842: NEG
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 3
26853: NEG
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 3
26864: NEG
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26879: LD_ADDR_VAR 0 22
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: LD_INT 3
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 3
26898: NEG
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 3
26910: NEG
26911: PUSH
26912: LD_INT 3
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26925: LD_ADDR_VAR 0 23
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: LD_INT 3
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: LD_INT 4
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 3
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26969: LD_ADDR_VAR 0 24
26973: PUSH
26974: LD_INT 3
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 3
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 4
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: LIST
27009: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27010: LD_ADDR_VAR 0 25
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: LD_INT 3
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 4
27027: PUSH
27028: LD_INT 3
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27050: LD_ADDR_VAR 0 26
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 3
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: LD_INT 4
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27091: LD_ADDR_VAR 0 27
27095: PUSH
27096: LD_INT 3
27098: NEG
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 3
27109: NEG
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 4
27120: NEG
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27135: LD_ADDR_VAR 0 28
27139: PUSH
27140: LD_INT 3
27142: NEG
27143: PUSH
27144: LD_INT 3
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 3
27154: NEG
27155: PUSH
27156: LD_INT 4
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 4
27166: NEG
27167: PUSH
27168: LD_INT 3
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27181: LD_ADDR_VAR 0 29
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 3
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 3
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: NEG
27223: PUSH
27224: LD_INT 4
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 4
27237: NEG
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: LD_INT 3
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 5
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: LD_INT 5
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 4
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: LD_INT 6
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 6
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: LD_INT 5
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27336: LD_ADDR_VAR 0 30
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 3
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 3
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 4
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 4
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 4
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 5
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 5
27426: PUSH
27427: LD_INT 1
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 5
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 6
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 6
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27479: LD_ADDR_VAR 0 31
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: LD_INT 3
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: LD_INT 3
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 4
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 4
27526: PUSH
27527: LD_INT 4
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 3
27536: PUSH
27537: LD_INT 4
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 5
27546: PUSH
27547: LD_INT 4
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 5
27556: PUSH
27557: LD_INT 5
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 4
27566: PUSH
27567: LD_INT 5
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 6
27576: PUSH
27577: LD_INT 5
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 6
27586: PUSH
27587: LD_INT 6
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 5
27596: PUSH
27597: LD_INT 6
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27618: LD_ADDR_VAR 0 32
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 3
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 3
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: LD_INT 4
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 4
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: LD_INT 3
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: LD_INT 5
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 5
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: LD_INT 4
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: LD_INT 6
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 6
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 5
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27761: LD_ADDR_VAR 0 33
27765: PUSH
27766: LD_INT 2
27768: NEG
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 3
27779: NEG
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 3
27790: NEG
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 3
27802: NEG
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 4
27813: NEG
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 4
27824: NEG
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 4
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 5
27847: NEG
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 5
27858: NEG
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 5
27870: NEG
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 6
27881: NEG
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 6
27892: NEG
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27916: LD_ADDR_VAR 0 34
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: LD_INT 3
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 3
27935: NEG
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 3
27947: NEG
27948: PUSH
27949: LD_INT 3
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: LD_INT 4
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 4
27971: NEG
27972: PUSH
27973: LD_INT 3
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 4
27983: NEG
27984: PUSH
27985: LD_INT 4
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 4
27995: NEG
27996: PUSH
27997: LD_INT 5
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 5
28007: NEG
28008: PUSH
28009: LD_INT 4
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 5
28019: NEG
28020: PUSH
28021: LD_INT 5
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 5
28031: NEG
28032: PUSH
28033: LD_INT 6
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 6
28043: NEG
28044: PUSH
28045: LD_INT 5
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 6
28055: NEG
28056: PUSH
28057: LD_INT 6
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28079: LD_ADDR_VAR 0 41
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: LD_INT 3
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28123: LD_ADDR_VAR 0 42
28127: PUSH
28128: LD_INT 2
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 3
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28164: LD_ADDR_VAR 0 43
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: LD_INT 3
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28204: LD_ADDR_VAR 0 44
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 3
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28245: LD_ADDR_VAR 0 45
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 3
28274: NEG
28275: PUSH
28276: LD_INT 1
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28289: LD_ADDR_VAR 0 46
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: LD_INT 2
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 3
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 3
28320: NEG
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28335: LD_ADDR_VAR 0 47
28339: PUSH
28340: LD_INT 2
28342: NEG
28343: PUSH
28344: LD_INT 3
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 3
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28368: LD_ADDR_VAR 0 48
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28399: LD_ADDR_VAR 0 49
28403: PUSH
28404: LD_INT 3
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 3
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28428: LD_ADDR_VAR 0 50
28432: PUSH
28433: LD_INT 2
28435: PUSH
28436: LD_INT 3
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28457: LD_ADDR_VAR 0 51
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28488: LD_ADDR_VAR 0 52
28492: PUSH
28493: LD_INT 3
28495: NEG
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 3
28507: NEG
28508: PUSH
28509: LD_INT 2
28511: NEG
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28521: LD_ADDR_VAR 0 53
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: LD_INT 3
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: LD_INT 3
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 2
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28565: LD_ADDR_VAR 0 54
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 3
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28606: LD_ADDR_VAR 0 55
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: LD_INT 3
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28646: LD_ADDR_VAR 0 56
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 3
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 3
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28687: LD_ADDR_VAR 0 57
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 3
28705: NEG
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 3
28716: NEG
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28731: LD_ADDR_VAR 0 58
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: LD_INT 3
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: LD_INT 2
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 3
28762: NEG
28763: PUSH
28764: LD_INT 3
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28777: LD_ADDR_VAR 0 59
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28821: LD_ADDR_VAR 0 60
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28862: LD_ADDR_VAR 0 61
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28902: LD_ADDR_VAR 0 62
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28943: LD_ADDR_VAR 0 63
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28987: LD_ADDR_VAR 0 64
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 2
29006: NEG
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// end ; 2 :
29033: GO 32299
29035: LD_INT 2
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 32298
29043: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29044: LD_ADDR_VAR 0 29
29048: PUSH
29049: LD_INT 4
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 4
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 5
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 5
29082: PUSH
29083: LD_INT 1
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 4
29092: PUSH
29093: LD_INT 1
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 3
29123: PUSH
29124: LD_INT 2
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 5
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 3
29144: PUSH
29145: LD_INT 3
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 3
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 4
29164: PUSH
29165: LD_INT 3
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 4
29174: PUSH
29175: LD_INT 4
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: LD_INT 4
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 4
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 4
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 4
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 5
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 5
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 4
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 5
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 3
29327: NEG
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 3
29338: NEG
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 4
29383: NEG
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 4
29394: NEG
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 4
29406: NEG
29407: PUSH
29408: LD_INT 2
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 4
29429: NEG
29430: PUSH
29431: LD_INT 4
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 4
29441: NEG
29442: PUSH
29443: LD_INT 5
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: LD_INT 4
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 3
29465: NEG
29466: PUSH
29467: LD_INT 3
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 4
29477: NEG
29478: PUSH
29479: LD_INT 3
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 5
29489: NEG
29490: PUSH
29491: LD_INT 4
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 5
29501: NEG
29502: PUSH
29503: LD_INT 5
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 3
29513: NEG
29514: PUSH
29515: LD_INT 5
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 5
29525: NEG
29526: PUSH
29527: LD_INT 3
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29582: LD_ADDR_VAR 0 30
29586: PUSH
29587: LD_INT 4
29589: PUSH
29590: LD_INT 4
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 4
29599: PUSH
29600: LD_INT 3
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 5
29609: PUSH
29610: LD_INT 4
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 5
29619: PUSH
29620: LD_INT 5
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 4
29629: PUSH
29630: LD_INT 5
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 4
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 3
29649: PUSH
29650: LD_INT 3
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 5
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: LD_INT 5
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: LD_INT 3
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: LD_INT 4
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 4
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: LD_INT 3
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 4
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 4
29772: NEG
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 4
29783: NEG
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: NEG
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 4
29817: NEG
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 5
29828: NEG
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 5
29839: NEG
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 5
29851: NEG
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 3
29863: NEG
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: NEG
29875: PUSH
29876: LD_INT 3
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: LD_INT 4
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 3
29922: NEG
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 4
29934: NEG
29935: PUSH
29936: LD_INT 3
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 4
29946: NEG
29947: PUSH
29948: LD_INT 4
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: LD_INT 4
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 4
29970: NEG
29971: PUSH
29972: LD_INT 2
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 4
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 5
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 4
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: LD_INT 3
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: LD_INT 3
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 4
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: LD_INT 5
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 3
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: NEG
30073: PUSH
30074: LD_INT 5
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30129: LD_ADDR_VAR 0 31
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 4
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: PUSH
30157: LD_INT 4
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 5
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 4
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: LD_INT 3
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: LD_INT 5
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: NEG
30219: PUSH
30220: LD_INT 3
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 3
30240: NEG
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 3
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 4
30285: NEG
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 4
30296: NEG
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 4
30308: NEG
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 4
30331: NEG
30332: PUSH
30333: LD_INT 4
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 4
30343: NEG
30344: PUSH
30345: LD_INT 5
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 3
30355: NEG
30356: PUSH
30357: LD_INT 4
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 3
30367: NEG
30368: PUSH
30369: LD_INT 3
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 4
30379: NEG
30380: PUSH
30381: LD_INT 3
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 5
30391: NEG
30392: PUSH
30393: LD_INT 4
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 5
30403: NEG
30404: PUSH
30405: LD_INT 5
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 3
30415: NEG
30416: PUSH
30417: LD_INT 5
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 5
30427: NEG
30428: PUSH
30429: LD_INT 3
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 3
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 3
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: LD_INT 2
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: LD_INT 4
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 4
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 4
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 5
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 5
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 3
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 3
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 5
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30679: LD_ADDR_VAR 0 32
30683: PUSH
30684: LD_INT 4
30686: NEG
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 4
30697: NEG
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 3
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 4
30731: NEG
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 5
30742: NEG
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 5
30753: NEG
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 5
30765: NEG
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 3
30788: NEG
30789: PUSH
30790: LD_INT 3
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: NEG
30801: PUSH
30802: LD_INT 4
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: LD_INT 3
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 4
30848: NEG
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 4
30860: NEG
30861: PUSH
30862: LD_INT 4
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 4
30884: NEG
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 0
30896: PUSH
30897: LD_INT 4
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 5
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 4
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 3
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: LD_INT 4
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 5
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: LD_INT 5
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 3
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 4
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 4
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 2
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 4
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 4
31091: PUSH
31092: LD_INT 4
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 4
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 5
31111: PUSH
31112: LD_INT 4
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 5
31121: PUSH
31122: LD_INT 5
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 4
31131: PUSH
31132: LD_INT 5
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 5
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31226: LD_ADDR_VAR 0 33
31230: PUSH
31231: LD_INT 4
31233: NEG
31234: PUSH
31235: LD_INT 4
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 4
31245: NEG
31246: PUSH
31247: LD_INT 5
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 3
31257: NEG
31258: PUSH
31259: LD_INT 4
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 3
31269: NEG
31270: PUSH
31271: LD_INT 3
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 4
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 5
31293: NEG
31294: PUSH
31295: LD_INT 4
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 5
31305: NEG
31306: PUSH
31307: LD_INT 5
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: LD_INT 5
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 5
31329: NEG
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: LD_INT 3
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: LD_INT 4
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: LD_INT 4
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 4
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 4
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 5
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 5
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 4
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 3
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 5
31526: PUSH
31527: LD_INT 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 4
31566: PUSH
31567: LD_INT 4
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: PUSH
31577: LD_INT 4
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 3
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 4
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 4
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 4
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 5
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: LD_INT 5
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 3
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: LD_INT 3
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31764: LD_ADDR_VAR 0 34
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 4
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 5
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: LD_INT 4
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 3
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: NEG
31827: PUSH
31828: LD_INT 4
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 5
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 3
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: NEG
31862: PUSH
31863: LD_INT 5
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: LD_INT 1
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 4
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 4
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 2
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 4
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 4
31966: PUSH
31967: LD_INT 4
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: LD_INT 3
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 5
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 5
31996: PUSH
31997: LD_INT 5
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 4
32006: PUSH
32007: LD_INT 5
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: LD_INT 4
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: LD_INT 5
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: LD_INT 3
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 4
32149: NEG
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 4
32160: NEG
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 3
32183: NEG
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 4
32194: NEG
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 5
32205: NEG
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 5
32216: NEG
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 5
32228: NEG
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 3
32240: NEG
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// end ; end ;
32296: GO 32299
32298: POP
// case btype of b_depot , b_warehouse :
32299: LD_VAR 0 1
32303: PUSH
32304: LD_INT 0
32306: DOUBLE
32307: EQUAL
32308: IFTRUE 32318
32310: LD_INT 1
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32318
32316: GO 32519
32318: POP
// case nation of nation_american :
32319: LD_VAR 0 5
32323: PUSH
32324: LD_INT 1
32326: DOUBLE
32327: EQUAL
32328: IFTRUE 32332
32330: GO 32388
32332: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32333: LD_ADDR_VAR 0 9
32337: PUSH
32338: LD_VAR 0 11
32342: PUSH
32343: LD_VAR 0 12
32347: PUSH
32348: LD_VAR 0 13
32352: PUSH
32353: LD_VAR 0 14
32357: PUSH
32358: LD_VAR 0 15
32362: PUSH
32363: LD_VAR 0 16
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: PUSH
32376: LD_VAR 0 4
32380: PUSH
32381: LD_INT 1
32383: PLUS
32384: ARRAY
32385: ST_TO_ADDR
32386: GO 32517
32388: LD_INT 2
32390: DOUBLE
32391: EQUAL
32392: IFTRUE 32396
32394: GO 32452
32396: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32397: LD_ADDR_VAR 0 9
32401: PUSH
32402: LD_VAR 0 17
32406: PUSH
32407: LD_VAR 0 18
32411: PUSH
32412: LD_VAR 0 19
32416: PUSH
32417: LD_VAR 0 20
32421: PUSH
32422: LD_VAR 0 21
32426: PUSH
32427: LD_VAR 0 22
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: LD_VAR 0 4
32444: PUSH
32445: LD_INT 1
32447: PLUS
32448: ARRAY
32449: ST_TO_ADDR
32450: GO 32517
32452: LD_INT 3
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32516
32460: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32461: LD_ADDR_VAR 0 9
32465: PUSH
32466: LD_VAR 0 23
32470: PUSH
32471: LD_VAR 0 24
32475: PUSH
32476: LD_VAR 0 25
32480: PUSH
32481: LD_VAR 0 26
32485: PUSH
32486: LD_VAR 0 27
32490: PUSH
32491: LD_VAR 0 28
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: PUSH
32504: LD_VAR 0 4
32508: PUSH
32509: LD_INT 1
32511: PLUS
32512: ARRAY
32513: ST_TO_ADDR
32514: GO 32517
32516: POP
32517: GO 33072
32519: LD_INT 2
32521: DOUBLE
32522: EQUAL
32523: IFTRUE 32533
32525: LD_INT 3
32527: DOUBLE
32528: EQUAL
32529: IFTRUE 32533
32531: GO 32589
32533: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32534: LD_ADDR_VAR 0 9
32538: PUSH
32539: LD_VAR 0 29
32543: PUSH
32544: LD_VAR 0 30
32548: PUSH
32549: LD_VAR 0 31
32553: PUSH
32554: LD_VAR 0 32
32558: PUSH
32559: LD_VAR 0 33
32563: PUSH
32564: LD_VAR 0 34
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: PUSH
32577: LD_VAR 0 4
32581: PUSH
32582: LD_INT 1
32584: PLUS
32585: ARRAY
32586: ST_TO_ADDR
32587: GO 33072
32589: LD_INT 16
32591: DOUBLE
32592: EQUAL
32593: IFTRUE 32651
32595: LD_INT 17
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32651
32601: LD_INT 18
32603: DOUBLE
32604: EQUAL
32605: IFTRUE 32651
32607: LD_INT 19
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32651
32613: LD_INT 22
32615: DOUBLE
32616: EQUAL
32617: IFTRUE 32651
32619: LD_INT 20
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32651
32625: LD_INT 21
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32651
32631: LD_INT 23
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32651
32637: LD_INT 24
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32651
32643: LD_INT 25
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32707
32651: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32652: LD_ADDR_VAR 0 9
32656: PUSH
32657: LD_VAR 0 35
32661: PUSH
32662: LD_VAR 0 36
32666: PUSH
32667: LD_VAR 0 37
32671: PUSH
32672: LD_VAR 0 38
32676: PUSH
32677: LD_VAR 0 39
32681: PUSH
32682: LD_VAR 0 40
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: PUSH
32695: LD_VAR 0 4
32699: PUSH
32700: LD_INT 1
32702: PLUS
32703: ARRAY
32704: ST_TO_ADDR
32705: GO 33072
32707: LD_INT 6
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32763
32713: LD_INT 7
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32763
32719: LD_INT 8
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32763
32725: LD_INT 13
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32763
32731: LD_INT 12
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32763
32737: LD_INT 15
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32763
32743: LD_INT 11
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32763
32749: LD_INT 14
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32763
32755: LD_INT 10
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32819
32763: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32764: LD_ADDR_VAR 0 9
32768: PUSH
32769: LD_VAR 0 41
32773: PUSH
32774: LD_VAR 0 42
32778: PUSH
32779: LD_VAR 0 43
32783: PUSH
32784: LD_VAR 0 44
32788: PUSH
32789: LD_VAR 0 45
32793: PUSH
32794: LD_VAR 0 46
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: PUSH
32807: LD_VAR 0 4
32811: PUSH
32812: LD_INT 1
32814: PLUS
32815: ARRAY
32816: ST_TO_ADDR
32817: GO 33072
32819: LD_INT 36
32821: DOUBLE
32822: EQUAL
32823: IFTRUE 32827
32825: GO 32883
32827: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32828: LD_ADDR_VAR 0 9
32832: PUSH
32833: LD_VAR 0 47
32837: PUSH
32838: LD_VAR 0 48
32842: PUSH
32843: LD_VAR 0 49
32847: PUSH
32848: LD_VAR 0 50
32852: PUSH
32853: LD_VAR 0 51
32857: PUSH
32858: LD_VAR 0 52
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: PUSH
32871: LD_VAR 0 4
32875: PUSH
32876: LD_INT 1
32878: PLUS
32879: ARRAY
32880: ST_TO_ADDR
32881: GO 33072
32883: LD_INT 4
32885: DOUBLE
32886: EQUAL
32887: IFTRUE 32909
32889: LD_INT 5
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32909
32895: LD_INT 34
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32909
32901: LD_INT 37
32903: DOUBLE
32904: EQUAL
32905: IFTRUE 32909
32907: GO 32965
32909: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32910: LD_ADDR_VAR 0 9
32914: PUSH
32915: LD_VAR 0 53
32919: PUSH
32920: LD_VAR 0 54
32924: PUSH
32925: LD_VAR 0 55
32929: PUSH
32930: LD_VAR 0 56
32934: PUSH
32935: LD_VAR 0 57
32939: PUSH
32940: LD_VAR 0 58
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: PUSH
32953: LD_VAR 0 4
32957: PUSH
32958: LD_INT 1
32960: PLUS
32961: ARRAY
32962: ST_TO_ADDR
32963: GO 33072
32965: LD_INT 31
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 33015
32971: LD_INT 32
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 33015
32977: LD_INT 33
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 33015
32983: LD_INT 27
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 33015
32989: LD_INT 26
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 33015
32995: LD_INT 28
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33015
33001: LD_INT 29
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33015
33007: LD_INT 30
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33071
33015: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33016: LD_ADDR_VAR 0 9
33020: PUSH
33021: LD_VAR 0 59
33025: PUSH
33026: LD_VAR 0 60
33030: PUSH
33031: LD_VAR 0 61
33035: PUSH
33036: LD_VAR 0 62
33040: PUSH
33041: LD_VAR 0 63
33045: PUSH
33046: LD_VAR 0 64
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: PUSH
33059: LD_VAR 0 4
33063: PUSH
33064: LD_INT 1
33066: PLUS
33067: ARRAY
33068: ST_TO_ADDR
33069: GO 33072
33071: POP
// temp_list2 = [ ] ;
33072: LD_ADDR_VAR 0 10
33076: PUSH
33077: EMPTY
33078: ST_TO_ADDR
// for i in temp_list do
33079: LD_ADDR_VAR 0 8
33083: PUSH
33084: LD_VAR 0 9
33088: PUSH
33089: FOR_IN
33090: IFFALSE 33142
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33092: LD_ADDR_VAR 0 10
33096: PUSH
33097: LD_VAR 0 10
33101: PUSH
33102: LD_VAR 0 8
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: PUSH
33111: LD_VAR 0 2
33115: PLUS
33116: PUSH
33117: LD_VAR 0 8
33121: PUSH
33122: LD_INT 2
33124: ARRAY
33125: PUSH
33126: LD_VAR 0 3
33130: PLUS
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: EMPTY
33137: LIST
33138: ADD
33139: ST_TO_ADDR
33140: GO 33089
33142: POP
33143: POP
// result = temp_list2 ;
33144: LD_ADDR_VAR 0 7
33148: PUSH
33149: LD_VAR 0 10
33153: ST_TO_ADDR
// end ;
33154: LD_VAR 0 7
33158: RET
// export function EnemyInRange ( unit , dist ) ; begin
33159: LD_INT 0
33161: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33162: LD_ADDR_VAR 0 3
33166: PUSH
33167: LD_VAR 0 1
33171: PPUSH
33172: CALL_OW 255
33176: PPUSH
33177: LD_VAR 0 1
33181: PPUSH
33182: CALL_OW 250
33186: PPUSH
33187: LD_VAR 0 1
33191: PPUSH
33192: CALL_OW 251
33196: PPUSH
33197: LD_VAR 0 2
33201: PPUSH
33202: CALL 6416 0 4
33206: PUSH
33207: LD_INT 4
33209: ARRAY
33210: ST_TO_ADDR
// end ;
33211: LD_VAR 0 3
33215: RET
// export function PlayerSeeMe ( unit ) ; begin
33216: LD_INT 0
33218: PPUSH
// result := See ( your_side , unit ) ;
33219: LD_ADDR_VAR 0 2
33223: PUSH
33224: LD_OWVAR 2
33228: PPUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: CALL_OW 292
33238: ST_TO_ADDR
// end ;
33239: LD_VAR 0 2
33243: RET
// export function ReverseDir ( unit ) ; begin
33244: LD_INT 0
33246: PPUSH
// if not unit then
33247: LD_VAR 0 1
33251: NOT
33252: IFFALSE 33256
// exit ;
33254: GO 33279
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33256: LD_ADDR_VAR 0 2
33260: PUSH
33261: LD_VAR 0 1
33265: PPUSH
33266: CALL_OW 254
33270: PUSH
33271: LD_INT 3
33273: PLUS
33274: PUSH
33275: LD_INT 6
33277: MOD
33278: ST_TO_ADDR
// end ;
33279: LD_VAR 0 2
33283: RET
// export function ReverseArray ( array ) ; var i ; begin
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
// if not array then
33288: LD_VAR 0 1
33292: NOT
33293: IFFALSE 33297
// exit ;
33295: GO 33352
// result := [ ] ;
33297: LD_ADDR_VAR 0 2
33301: PUSH
33302: EMPTY
33303: ST_TO_ADDR
// for i := array downto 1 do
33304: LD_ADDR_VAR 0 3
33308: PUSH
33309: DOUBLE
33310: LD_VAR 0 1
33314: INC
33315: ST_TO_ADDR
33316: LD_INT 1
33318: PUSH
33319: FOR_DOWNTO
33320: IFFALSE 33350
// result := Join ( result , array [ i ] ) ;
33322: LD_ADDR_VAR 0 2
33326: PUSH
33327: LD_VAR 0 2
33331: PPUSH
33332: LD_VAR 0 1
33336: PUSH
33337: LD_VAR 0 3
33341: ARRAY
33342: PPUSH
33343: CALL 38194 0 2
33347: ST_TO_ADDR
33348: GO 33319
33350: POP
33351: POP
// end ;
33352: LD_VAR 0 2
33356: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33357: LD_INT 0
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
// if not unit or not hexes then
33365: LD_VAR 0 1
33369: NOT
33370: IFTRUE 33379
33372: PUSH
33373: LD_VAR 0 2
33377: NOT
33378: OR
33379: IFFALSE 33383
// exit ;
33381: GO 33506
// dist := 9999 ;
33383: LD_ADDR_VAR 0 5
33387: PUSH
33388: LD_INT 9999
33390: ST_TO_ADDR
// for i = 1 to hexes do
33391: LD_ADDR_VAR 0 4
33395: PUSH
33396: DOUBLE
33397: LD_INT 1
33399: DEC
33400: ST_TO_ADDR
33401: LD_VAR 0 2
33405: PUSH
33406: FOR_TO
33407: IFFALSE 33494
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33409: LD_ADDR_VAR 0 6
33413: PUSH
33414: LD_VAR 0 1
33418: PPUSH
33419: LD_VAR 0 2
33423: PUSH
33424: LD_VAR 0 4
33428: ARRAY
33429: PUSH
33430: LD_INT 1
33432: ARRAY
33433: PPUSH
33434: LD_VAR 0 2
33438: PUSH
33439: LD_VAR 0 4
33443: ARRAY
33444: PUSH
33445: LD_INT 2
33447: ARRAY
33448: PPUSH
33449: CALL_OW 297
33453: ST_TO_ADDR
// if tdist < dist then
33454: LD_VAR 0 6
33458: PUSH
33459: LD_VAR 0 5
33463: LESS
33464: IFFALSE 33492
// begin hex := hexes [ i ] ;
33466: LD_ADDR_VAR 0 8
33470: PUSH
33471: LD_VAR 0 2
33475: PUSH
33476: LD_VAR 0 4
33480: ARRAY
33481: ST_TO_ADDR
// dist := tdist ;
33482: LD_ADDR_VAR 0 5
33486: PUSH
33487: LD_VAR 0 6
33491: ST_TO_ADDR
// end ; end ;
33492: GO 33406
33494: POP
33495: POP
// result := hex ;
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_VAR 0 8
33505: ST_TO_ADDR
// end ;
33506: LD_VAR 0 3
33510: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33511: LD_INT 0
33513: PPUSH
33514: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33515: LD_VAR 0 1
33519: NOT
33520: IFTRUE 33559
33522: PUSH
33523: LD_VAR 0 1
33527: PUSH
33528: LD_INT 21
33530: PUSH
33531: LD_INT 2
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 23
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PPUSH
33552: CALL_OW 69
33556: IN
33557: NOT
33558: OR
33559: IFFALSE 33563
// exit ;
33561: GO 33610
// for i = 1 to 3 do
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: DOUBLE
33569: LD_INT 1
33571: DEC
33572: ST_TO_ADDR
33573: LD_INT 3
33575: PUSH
33576: FOR_TO
33577: IFFALSE 33608
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33579: LD_VAR 0 1
33583: PPUSH
33584: CALL_OW 250
33588: PPUSH
33589: LD_VAR 0 1
33593: PPUSH
33594: CALL_OW 251
33598: PPUSH
33599: LD_INT 1
33601: PPUSH
33602: CALL_OW 453
33606: GO 33576
33608: POP
33609: POP
// end ;
33610: LD_VAR 0 2
33614: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33615: LD_INT 0
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
// if not unit or not enemy_unit then
33623: LD_VAR 0 1
33627: NOT
33628: IFTRUE 33637
33630: PUSH
33631: LD_VAR 0 2
33635: NOT
33636: OR
33637: IFFALSE 33641
// exit ;
33639: GO 34112
// if GetLives ( i ) < 250 then
33641: LD_VAR 0 4
33645: PPUSH
33646: CALL_OW 256
33650: PUSH
33651: LD_INT 250
33653: LESS
33654: IFFALSE 33667
// begin ComAutodestruct ( i ) ;
33656: LD_VAR 0 4
33660: PPUSH
33661: CALL 33511 0 1
// exit ;
33665: GO 34112
// end ; x := GetX ( enemy_unit ) ;
33667: LD_ADDR_VAR 0 7
33671: PUSH
33672: LD_VAR 0 2
33676: PPUSH
33677: CALL_OW 250
33681: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33682: LD_ADDR_VAR 0 8
33686: PUSH
33687: LD_VAR 0 2
33691: PPUSH
33692: CALL_OW 251
33696: ST_TO_ADDR
// if not x or not y then
33697: LD_VAR 0 7
33701: NOT
33702: IFTRUE 33711
33704: PUSH
33705: LD_VAR 0 8
33709: NOT
33710: OR
33711: IFFALSE 33715
// exit ;
33713: GO 34112
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: LD_VAR 0 7
33724: PPUSH
33725: LD_INT 0
33727: PPUSH
33728: LD_INT 4
33730: PPUSH
33731: CALL_OW 272
33735: PUSH
33736: LD_VAR 0 8
33740: PPUSH
33741: LD_INT 0
33743: PPUSH
33744: LD_INT 4
33746: PPUSH
33747: CALL_OW 273
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_VAR 0 7
33760: PPUSH
33761: LD_INT 1
33763: PPUSH
33764: LD_INT 4
33766: PPUSH
33767: CALL_OW 272
33771: PUSH
33772: LD_VAR 0 8
33776: PPUSH
33777: LD_INT 1
33779: PPUSH
33780: LD_INT 4
33782: PPUSH
33783: CALL_OW 273
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_VAR 0 7
33796: PPUSH
33797: LD_INT 2
33799: PPUSH
33800: LD_INT 4
33802: PPUSH
33803: CALL_OW 272
33807: PUSH
33808: LD_VAR 0 8
33812: PPUSH
33813: LD_INT 2
33815: PPUSH
33816: LD_INT 4
33818: PPUSH
33819: CALL_OW 273
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_VAR 0 7
33832: PPUSH
33833: LD_INT 3
33835: PPUSH
33836: LD_INT 4
33838: PPUSH
33839: CALL_OW 272
33843: PUSH
33844: LD_VAR 0 8
33848: PPUSH
33849: LD_INT 3
33851: PPUSH
33852: LD_INT 4
33854: PPUSH
33855: CALL_OW 273
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_VAR 0 7
33868: PPUSH
33869: LD_INT 4
33871: PPUSH
33872: LD_INT 4
33874: PPUSH
33875: CALL_OW 272
33879: PUSH
33880: LD_VAR 0 8
33884: PPUSH
33885: LD_INT 4
33887: PPUSH
33888: LD_INT 4
33890: PPUSH
33891: CALL_OW 273
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_VAR 0 7
33904: PPUSH
33905: LD_INT 5
33907: PPUSH
33908: LD_INT 4
33910: PPUSH
33911: CALL_OW 272
33915: PUSH
33916: LD_VAR 0 8
33920: PPUSH
33921: LD_INT 5
33923: PPUSH
33924: LD_INT 4
33926: PPUSH
33927: CALL_OW 273
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: ST_TO_ADDR
// for i = tmp downto 1 do
33944: LD_ADDR_VAR 0 4
33948: PUSH
33949: DOUBLE
33950: LD_VAR 0 6
33954: INC
33955: ST_TO_ADDR
33956: LD_INT 1
33958: PUSH
33959: FOR_DOWNTO
33960: IFFALSE 34063
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33962: LD_VAR 0 6
33966: PUSH
33967: LD_VAR 0 4
33971: ARRAY
33972: PUSH
33973: LD_INT 1
33975: ARRAY
33976: PPUSH
33977: LD_VAR 0 6
33981: PUSH
33982: LD_VAR 0 4
33986: ARRAY
33987: PUSH
33988: LD_INT 2
33990: ARRAY
33991: PPUSH
33992: CALL_OW 488
33996: NOT
33997: IFTRUE 34039
33999: PUSH
34000: LD_VAR 0 6
34004: PUSH
34005: LD_VAR 0 4
34009: ARRAY
34010: PUSH
34011: LD_INT 1
34013: ARRAY
34014: PPUSH
34015: LD_VAR 0 6
34019: PUSH
34020: LD_VAR 0 4
34024: ARRAY
34025: PUSH
34026: LD_INT 2
34028: ARRAY
34029: PPUSH
34030: CALL_OW 428
34034: PUSH
34035: LD_INT 0
34037: NONEQUAL
34038: OR
34039: IFFALSE 34061
// tmp := Delete ( tmp , i ) ;
34041: LD_ADDR_VAR 0 6
34045: PUSH
34046: LD_VAR 0 6
34050: PPUSH
34051: LD_VAR 0 4
34055: PPUSH
34056: CALL_OW 3
34060: ST_TO_ADDR
34061: GO 33959
34063: POP
34064: POP
// j := GetClosestHex ( unit , tmp ) ;
34065: LD_ADDR_VAR 0 5
34069: PUSH
34070: LD_VAR 0 1
34074: PPUSH
34075: LD_VAR 0 6
34079: PPUSH
34080: CALL 33357 0 2
34084: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34085: LD_VAR 0 1
34089: PPUSH
34090: LD_VAR 0 5
34094: PUSH
34095: LD_INT 1
34097: ARRAY
34098: PPUSH
34099: LD_VAR 0 5
34103: PUSH
34104: LD_INT 2
34106: ARRAY
34107: PPUSH
34108: CALL_OW 111
// end ;
34112: LD_VAR 0 3
34116: RET
// export function PrepareApemanSoldier ( ) ; begin
34117: LD_INT 0
34119: PPUSH
// uc_nation := 0 ;
34120: LD_ADDR_OWVAR 21
34124: PUSH
34125: LD_INT 0
34127: ST_TO_ADDR
// hc_sex := sex_male ;
34128: LD_ADDR_OWVAR 27
34132: PUSH
34133: LD_INT 1
34135: ST_TO_ADDR
// hc_name :=  ;
34136: LD_ADDR_OWVAR 26
34140: PUSH
34141: LD_STRING 
34143: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34144: LD_ADDR_OWVAR 28
34148: PUSH
34149: LD_INT 15
34151: ST_TO_ADDR
// hc_gallery :=  ;
34152: LD_ADDR_OWVAR 33
34156: PUSH
34157: LD_STRING 
34159: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34160: LD_ADDR_OWVAR 31
34164: PUSH
34165: LD_INT 0
34167: PPUSH
34168: LD_INT 3
34170: PPUSH
34171: CALL_OW 12
34175: PUSH
34176: LD_INT 0
34178: PPUSH
34179: LD_INT 3
34181: PPUSH
34182: CALL_OW 12
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34199: LD_ADDR_OWVAR 29
34203: PUSH
34204: LD_INT 12
34206: PUSH
34207: LD_INT 12
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: ST_TO_ADDR
// end ;
34214: LD_VAR 0 1
34218: RET
// export function PrepareApemanEngineer ( ) ; begin
34219: LD_INT 0
34221: PPUSH
// uc_nation := 0 ;
34222: LD_ADDR_OWVAR 21
34226: PUSH
34227: LD_INT 0
34229: ST_TO_ADDR
// hc_sex := sex_male ;
34230: LD_ADDR_OWVAR 27
34234: PUSH
34235: LD_INT 1
34237: ST_TO_ADDR
// hc_name :=  ;
34238: LD_ADDR_OWVAR 26
34242: PUSH
34243: LD_STRING 
34245: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34246: LD_ADDR_OWVAR 28
34250: PUSH
34251: LD_INT 16
34253: ST_TO_ADDR
// hc_gallery :=  ;
34254: LD_ADDR_OWVAR 33
34258: PUSH
34259: LD_STRING 
34261: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34262: LD_ADDR_OWVAR 31
34266: PUSH
34267: LD_INT 0
34269: PPUSH
34270: LD_INT 3
34272: PPUSH
34273: CALL_OW 12
34277: PUSH
34278: LD_INT 0
34280: PPUSH
34281: LD_INT 3
34283: PPUSH
34284: CALL_OW 12
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34301: LD_ADDR_OWVAR 29
34305: PUSH
34306: LD_INT 12
34308: PUSH
34309: LD_INT 12
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// end ;
34316: LD_VAR 0 1
34320: RET
// export function PrepareApeman ( agressivity ) ; begin
34321: LD_INT 0
34323: PPUSH
// uc_side := 0 ;
34324: LD_ADDR_OWVAR 20
34328: PUSH
34329: LD_INT 0
34331: ST_TO_ADDR
// uc_nation := 0 ;
34332: LD_ADDR_OWVAR 21
34336: PUSH
34337: LD_INT 0
34339: ST_TO_ADDR
// hc_sex := sex_male ;
34340: LD_ADDR_OWVAR 27
34344: PUSH
34345: LD_INT 1
34347: ST_TO_ADDR
// hc_class := class_apeman ;
34348: LD_ADDR_OWVAR 28
34352: PUSH
34353: LD_INT 12
34355: ST_TO_ADDR
// hc_gallery :=  ;
34356: LD_ADDR_OWVAR 33
34360: PUSH
34361: LD_STRING 
34363: ST_TO_ADDR
// hc_name :=  ;
34364: LD_ADDR_OWVAR 26
34368: PUSH
34369: LD_STRING 
34371: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34372: LD_ADDR_OWVAR 29
34376: PUSH
34377: LD_INT 12
34379: PUSH
34380: LD_INT 12
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: ST_TO_ADDR
// if agressivity = 0 then
34387: LD_VAR 0 1
34391: PUSH
34392: LD_INT 0
34394: EQUAL
34395: IFFALSE 34407
// hc_agressivity := 0 else
34397: LD_ADDR_OWVAR 35
34401: PUSH
34402: LD_INT 0
34404: ST_TO_ADDR
34405: GO 34428
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34407: LD_ADDR_OWVAR 35
34411: PUSH
34412: LD_VAR 0 1
34416: NEG
34417: PPUSH
34418: LD_VAR 0 1
34422: PPUSH
34423: CALL_OW 12
34427: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34428: LD_ADDR_OWVAR 31
34432: PUSH
34433: LD_INT 0
34435: PPUSH
34436: LD_INT 3
34438: PPUSH
34439: CALL_OW 12
34443: PUSH
34444: LD_INT 0
34446: PPUSH
34447: LD_INT 3
34449: PPUSH
34450: CALL_OW 12
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: ST_TO_ADDR
// end ;
34467: LD_VAR 0 2
34471: RET
// export function PrepareTiger ( agressivity ) ; begin
34472: LD_INT 0
34474: PPUSH
// uc_side := 0 ;
34475: LD_ADDR_OWVAR 20
34479: PUSH
34480: LD_INT 0
34482: ST_TO_ADDR
// uc_nation := 0 ;
34483: LD_ADDR_OWVAR 21
34487: PUSH
34488: LD_INT 0
34490: ST_TO_ADDR
// InitHc ;
34491: CALL_OW 19
// hc_class := class_tiger ;
34495: LD_ADDR_OWVAR 28
34499: PUSH
34500: LD_INT 14
34502: ST_TO_ADDR
// hc_gallery :=  ;
34503: LD_ADDR_OWVAR 33
34507: PUSH
34508: LD_STRING 
34510: ST_TO_ADDR
// hc_name :=  ;
34511: LD_ADDR_OWVAR 26
34515: PUSH
34516: LD_STRING 
34518: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34519: LD_ADDR_OWVAR 35
34523: PUSH
34524: LD_VAR 0 1
34528: NEG
34529: PPUSH
34530: LD_VAR 0 1
34534: PPUSH
34535: CALL_OW 12
34539: ST_TO_ADDR
// end ;
34540: LD_VAR 0 2
34544: RET
// export function PrepareEnchidna ( ) ; begin
34545: LD_INT 0
34547: PPUSH
// uc_side := 0 ;
34548: LD_ADDR_OWVAR 20
34552: PUSH
34553: LD_INT 0
34555: ST_TO_ADDR
// uc_nation := 0 ;
34556: LD_ADDR_OWVAR 21
34560: PUSH
34561: LD_INT 0
34563: ST_TO_ADDR
// InitHc ;
34564: CALL_OW 19
// hc_class := class_baggie ;
34568: LD_ADDR_OWVAR 28
34572: PUSH
34573: LD_INT 13
34575: ST_TO_ADDR
// hc_gallery :=  ;
34576: LD_ADDR_OWVAR 33
34580: PUSH
34581: LD_STRING 
34583: ST_TO_ADDR
// hc_name :=  ;
34584: LD_ADDR_OWVAR 26
34588: PUSH
34589: LD_STRING 
34591: ST_TO_ADDR
// end ;
34592: LD_VAR 0 1
34596: RET
// export function PrepareFrog ( ) ; begin
34597: LD_INT 0
34599: PPUSH
// uc_side := 0 ;
34600: LD_ADDR_OWVAR 20
34604: PUSH
34605: LD_INT 0
34607: ST_TO_ADDR
// uc_nation := 0 ;
34608: LD_ADDR_OWVAR 21
34612: PUSH
34613: LD_INT 0
34615: ST_TO_ADDR
// InitHc ;
34616: CALL_OW 19
// hc_class := class_frog ;
34620: LD_ADDR_OWVAR 28
34624: PUSH
34625: LD_INT 19
34627: ST_TO_ADDR
// hc_gallery :=  ;
34628: LD_ADDR_OWVAR 33
34632: PUSH
34633: LD_STRING 
34635: ST_TO_ADDR
// hc_name :=  ;
34636: LD_ADDR_OWVAR 26
34640: PUSH
34641: LD_STRING 
34643: ST_TO_ADDR
// end ;
34644: LD_VAR 0 1
34648: RET
// export function PrepareFish ( ) ; begin
34649: LD_INT 0
34651: PPUSH
// uc_side := 0 ;
34652: LD_ADDR_OWVAR 20
34656: PUSH
34657: LD_INT 0
34659: ST_TO_ADDR
// uc_nation := 0 ;
34660: LD_ADDR_OWVAR 21
34664: PUSH
34665: LD_INT 0
34667: ST_TO_ADDR
// InitHc ;
34668: CALL_OW 19
// hc_class := class_fish ;
34672: LD_ADDR_OWVAR 28
34676: PUSH
34677: LD_INT 20
34679: ST_TO_ADDR
// hc_gallery :=  ;
34680: LD_ADDR_OWVAR 33
34684: PUSH
34685: LD_STRING 
34687: ST_TO_ADDR
// hc_name :=  ;
34688: LD_ADDR_OWVAR 26
34692: PUSH
34693: LD_STRING 
34695: ST_TO_ADDR
// end ;
34696: LD_VAR 0 1
34700: RET
// export function PrepareBird ( ) ; begin
34701: LD_INT 0
34703: PPUSH
// uc_side := 0 ;
34704: LD_ADDR_OWVAR 20
34708: PUSH
34709: LD_INT 0
34711: ST_TO_ADDR
// uc_nation := 0 ;
34712: LD_ADDR_OWVAR 21
34716: PUSH
34717: LD_INT 0
34719: ST_TO_ADDR
// InitHc ;
34720: CALL_OW 19
// hc_class := class_phororhacos ;
34724: LD_ADDR_OWVAR 28
34728: PUSH
34729: LD_INT 18
34731: ST_TO_ADDR
// hc_gallery :=  ;
34732: LD_ADDR_OWVAR 33
34736: PUSH
34737: LD_STRING 
34739: ST_TO_ADDR
// hc_name :=  ;
34740: LD_ADDR_OWVAR 26
34744: PUSH
34745: LD_STRING 
34747: ST_TO_ADDR
// end ;
34748: LD_VAR 0 1
34752: RET
// export function PrepareHorse ( ) ; begin
34753: LD_INT 0
34755: PPUSH
// uc_side := 0 ;
34756: LD_ADDR_OWVAR 20
34760: PUSH
34761: LD_INT 0
34763: ST_TO_ADDR
// uc_nation := 0 ;
34764: LD_ADDR_OWVAR 21
34768: PUSH
34769: LD_INT 0
34771: ST_TO_ADDR
// InitHc ;
34772: CALL_OW 19
// hc_class := class_horse ;
34776: LD_ADDR_OWVAR 28
34780: PUSH
34781: LD_INT 21
34783: ST_TO_ADDR
// hc_gallery :=  ;
34784: LD_ADDR_OWVAR 33
34788: PUSH
34789: LD_STRING 
34791: ST_TO_ADDR
// hc_name :=  ;
34792: LD_ADDR_OWVAR 26
34796: PUSH
34797: LD_STRING 
34799: ST_TO_ADDR
// end ;
34800: LD_VAR 0 1
34804: RET
// export function PrepareMastodont ( ) ; begin
34805: LD_INT 0
34807: PPUSH
// uc_side := 0 ;
34808: LD_ADDR_OWVAR 20
34812: PUSH
34813: LD_INT 0
34815: ST_TO_ADDR
// uc_nation := 0 ;
34816: LD_ADDR_OWVAR 21
34820: PUSH
34821: LD_INT 0
34823: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34824: LD_ADDR_OWVAR 37
34828: PUSH
34829: LD_INT 31
34831: ST_TO_ADDR
// vc_control := control_rider ;
34832: LD_ADDR_OWVAR 38
34836: PUSH
34837: LD_INT 4
34839: ST_TO_ADDR
// end ;
34840: LD_VAR 0 1
34844: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34845: LD_INT 0
34847: PPUSH
34848: PPUSH
34849: PPUSH
// uc_side = 0 ;
34850: LD_ADDR_OWVAR 20
34854: PUSH
34855: LD_INT 0
34857: ST_TO_ADDR
// uc_nation = 0 ;
34858: LD_ADDR_OWVAR 21
34862: PUSH
34863: LD_INT 0
34865: ST_TO_ADDR
// InitHc_All ( ) ;
34866: CALL_OW 584
// InitVc ;
34870: CALL_OW 20
// if mastodonts then
34874: LD_VAR 0 6
34878: IFFALSE 34945
// for i = 1 to mastodonts do
34880: LD_ADDR_VAR 0 11
34884: PUSH
34885: DOUBLE
34886: LD_INT 1
34888: DEC
34889: ST_TO_ADDR
34890: LD_VAR 0 6
34894: PUSH
34895: FOR_TO
34896: IFFALSE 34943
// begin vc_chassis := 31 ;
34898: LD_ADDR_OWVAR 37
34902: PUSH
34903: LD_INT 31
34905: ST_TO_ADDR
// vc_control := control_rider ;
34906: LD_ADDR_OWVAR 38
34910: PUSH
34911: LD_INT 4
34913: ST_TO_ADDR
// animal := CreateVehicle ;
34914: LD_ADDR_VAR 0 12
34918: PUSH
34919: CALL_OW 45
34923: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34924: LD_VAR 0 12
34928: PPUSH
34929: LD_VAR 0 8
34933: PPUSH
34934: LD_INT 0
34936: PPUSH
34937: CALL 37087 0 3
// end ;
34941: GO 34895
34943: POP
34944: POP
// if horses then
34945: LD_VAR 0 5
34949: IFFALSE 35016
// for i = 1 to horses do
34951: LD_ADDR_VAR 0 11
34955: PUSH
34956: DOUBLE
34957: LD_INT 1
34959: DEC
34960: ST_TO_ADDR
34961: LD_VAR 0 5
34965: PUSH
34966: FOR_TO
34967: IFFALSE 35014
// begin hc_class := 21 ;
34969: LD_ADDR_OWVAR 28
34973: PUSH
34974: LD_INT 21
34976: ST_TO_ADDR
// hc_gallery :=  ;
34977: LD_ADDR_OWVAR 33
34981: PUSH
34982: LD_STRING 
34984: ST_TO_ADDR
// animal := CreateHuman ;
34985: LD_ADDR_VAR 0 12
34989: PUSH
34990: CALL_OW 44
34994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34995: LD_VAR 0 12
34999: PPUSH
35000: LD_VAR 0 8
35004: PPUSH
35005: LD_INT 0
35007: PPUSH
35008: CALL 37087 0 3
// end ;
35012: GO 34966
35014: POP
35015: POP
// if birds then
35016: LD_VAR 0 1
35020: IFFALSE 35087
// for i = 1 to birds do
35022: LD_ADDR_VAR 0 11
35026: PUSH
35027: DOUBLE
35028: LD_INT 1
35030: DEC
35031: ST_TO_ADDR
35032: LD_VAR 0 1
35036: PUSH
35037: FOR_TO
35038: IFFALSE 35085
// begin hc_class := 18 ;
35040: LD_ADDR_OWVAR 28
35044: PUSH
35045: LD_INT 18
35047: ST_TO_ADDR
// hc_gallery =  ;
35048: LD_ADDR_OWVAR 33
35052: PUSH
35053: LD_STRING 
35055: ST_TO_ADDR
// animal := CreateHuman ;
35056: LD_ADDR_VAR 0 12
35060: PUSH
35061: CALL_OW 44
35065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35066: LD_VAR 0 12
35070: PPUSH
35071: LD_VAR 0 8
35075: PPUSH
35076: LD_INT 0
35078: PPUSH
35079: CALL 37087 0 3
// end ;
35083: GO 35037
35085: POP
35086: POP
// if tigers then
35087: LD_VAR 0 2
35091: IFFALSE 35175
// for i = 1 to tigers do
35093: LD_ADDR_VAR 0 11
35097: PUSH
35098: DOUBLE
35099: LD_INT 1
35101: DEC
35102: ST_TO_ADDR
35103: LD_VAR 0 2
35107: PUSH
35108: FOR_TO
35109: IFFALSE 35173
// begin hc_class = class_tiger ;
35111: LD_ADDR_OWVAR 28
35115: PUSH
35116: LD_INT 14
35118: ST_TO_ADDR
// hc_gallery =  ;
35119: LD_ADDR_OWVAR 33
35123: PUSH
35124: LD_STRING 
35126: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35127: LD_ADDR_OWVAR 35
35131: PUSH
35132: LD_INT 7
35134: NEG
35135: PPUSH
35136: LD_INT 7
35138: PPUSH
35139: CALL_OW 12
35143: ST_TO_ADDR
// animal := CreateHuman ;
35144: LD_ADDR_VAR 0 12
35148: PUSH
35149: CALL_OW 44
35153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35154: LD_VAR 0 12
35158: PPUSH
35159: LD_VAR 0 8
35163: PPUSH
35164: LD_INT 0
35166: PPUSH
35167: CALL 37087 0 3
// end ;
35171: GO 35108
35173: POP
35174: POP
// if apemans then
35175: LD_VAR 0 3
35179: IFFALSE 35302
// for i = 1 to apemans do
35181: LD_ADDR_VAR 0 11
35185: PUSH
35186: DOUBLE
35187: LD_INT 1
35189: DEC
35190: ST_TO_ADDR
35191: LD_VAR 0 3
35195: PUSH
35196: FOR_TO
35197: IFFALSE 35300
// begin hc_class = class_apeman ;
35199: LD_ADDR_OWVAR 28
35203: PUSH
35204: LD_INT 12
35206: ST_TO_ADDR
// hc_gallery =  ;
35207: LD_ADDR_OWVAR 33
35211: PUSH
35212: LD_STRING 
35214: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35215: LD_ADDR_OWVAR 35
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PPUSH
35224: LD_INT 2
35226: PPUSH
35227: CALL_OW 12
35231: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35232: LD_ADDR_OWVAR 31
35236: PUSH
35237: LD_INT 1
35239: PPUSH
35240: LD_INT 3
35242: PPUSH
35243: CALL_OW 12
35247: PUSH
35248: LD_INT 1
35250: PPUSH
35251: LD_INT 3
35253: PPUSH
35254: CALL_OW 12
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: ST_TO_ADDR
// animal := CreateHuman ;
35271: LD_ADDR_VAR 0 12
35275: PUSH
35276: CALL_OW 44
35280: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35281: LD_VAR 0 12
35285: PPUSH
35286: LD_VAR 0 8
35290: PPUSH
35291: LD_INT 0
35293: PPUSH
35294: CALL 37087 0 3
// end ;
35298: GO 35196
35300: POP
35301: POP
// if enchidnas then
35302: LD_VAR 0 4
35306: IFFALSE 35373
// for i = 1 to enchidnas do
35308: LD_ADDR_VAR 0 11
35312: PUSH
35313: DOUBLE
35314: LD_INT 1
35316: DEC
35317: ST_TO_ADDR
35318: LD_VAR 0 4
35322: PUSH
35323: FOR_TO
35324: IFFALSE 35371
// begin hc_class = 13 ;
35326: LD_ADDR_OWVAR 28
35330: PUSH
35331: LD_INT 13
35333: ST_TO_ADDR
// hc_gallery =  ;
35334: LD_ADDR_OWVAR 33
35338: PUSH
35339: LD_STRING 
35341: ST_TO_ADDR
// animal := CreateHuman ;
35342: LD_ADDR_VAR 0 12
35346: PUSH
35347: CALL_OW 44
35351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35352: LD_VAR 0 12
35356: PPUSH
35357: LD_VAR 0 8
35361: PPUSH
35362: LD_INT 0
35364: PPUSH
35365: CALL 37087 0 3
// end ;
35369: GO 35323
35371: POP
35372: POP
// if fishes then
35373: LD_VAR 0 7
35377: IFFALSE 35444
// for i = 1 to fishes do
35379: LD_ADDR_VAR 0 11
35383: PUSH
35384: DOUBLE
35385: LD_INT 1
35387: DEC
35388: ST_TO_ADDR
35389: LD_VAR 0 7
35393: PUSH
35394: FOR_TO
35395: IFFALSE 35442
// begin hc_class = 20 ;
35397: LD_ADDR_OWVAR 28
35401: PUSH
35402: LD_INT 20
35404: ST_TO_ADDR
// hc_gallery =  ;
35405: LD_ADDR_OWVAR 33
35409: PUSH
35410: LD_STRING 
35412: ST_TO_ADDR
// animal := CreateHuman ;
35413: LD_ADDR_VAR 0 12
35417: PUSH
35418: CALL_OW 44
35422: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35423: LD_VAR 0 12
35427: PPUSH
35428: LD_VAR 0 9
35432: PPUSH
35433: LD_INT 0
35435: PPUSH
35436: CALL 37087 0 3
// end ;
35440: GO 35394
35442: POP
35443: POP
// end ;
35444: LD_VAR 0 10
35448: RET
// export function WantHeal ( sci , unit ) ; begin
35449: LD_INT 0
35451: PPUSH
// if GetTaskList ( sci ) > 0 then
35452: LD_VAR 0 1
35456: PPUSH
35457: CALL_OW 437
35461: PUSH
35462: LD_INT 0
35464: GREATER
35465: IFFALSE 35537
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35467: LD_VAR 0 1
35471: PPUSH
35472: CALL_OW 437
35476: PUSH
35477: LD_INT 1
35479: ARRAY
35480: PUSH
35481: LD_INT 1
35483: ARRAY
35484: PUSH
35485: LD_STRING l
35487: EQUAL
35488: IFFALSE 35515
35490: PUSH
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 437
35500: PUSH
35501: LD_INT 1
35503: ARRAY
35504: PUSH
35505: LD_INT 4
35507: ARRAY
35508: PUSH
35509: LD_VAR 0 2
35513: EQUAL
35514: AND
35515: IFFALSE 35527
// result := true else
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: LD_INT 1
35524: ST_TO_ADDR
35525: GO 35535
// result := false ;
35527: LD_ADDR_VAR 0 3
35531: PUSH
35532: LD_INT 0
35534: ST_TO_ADDR
// end else
35535: GO 35545
// result := false ;
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 0
35544: ST_TO_ADDR
// end ;
35545: LD_VAR 0 3
35549: RET
// export function HealTarget ( sci ) ; begin
35550: LD_INT 0
35552: PPUSH
// if not sci then
35553: LD_VAR 0 1
35557: NOT
35558: IFFALSE 35562
// exit ;
35560: GO 35627
// result := 0 ;
35562: LD_ADDR_VAR 0 2
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// if GetTaskList ( sci ) then
35570: LD_VAR 0 1
35574: PPUSH
35575: CALL_OW 437
35579: IFFALSE 35627
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35581: LD_VAR 0 1
35585: PPUSH
35586: CALL_OW 437
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PUSH
35595: LD_INT 1
35597: ARRAY
35598: PUSH
35599: LD_STRING l
35601: EQUAL
35602: IFFALSE 35627
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35604: LD_ADDR_VAR 0 2
35608: PUSH
35609: LD_VAR 0 1
35613: PPUSH
35614: CALL_OW 437
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PUSH
35623: LD_INT 4
35625: ARRAY
35626: ST_TO_ADDR
// end ;
35627: LD_VAR 0 2
35631: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35632: LD_INT 0
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
// if not base_units then
35638: LD_VAR 0 1
35642: NOT
35643: IFFALSE 35647
// exit ;
35645: GO 35734
// result := false ;
35647: LD_ADDR_VAR 0 2
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35655: LD_ADDR_VAR 0 5
35659: PUSH
35660: LD_VAR 0 1
35664: PPUSH
35665: LD_INT 21
35667: PUSH
35668: LD_INT 3
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PPUSH
35675: CALL_OW 72
35679: ST_TO_ADDR
// if not tmp then
35680: LD_VAR 0 5
35684: NOT
35685: IFFALSE 35689
// exit ;
35687: GO 35734
// for i in tmp do
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_VAR 0 5
35698: PUSH
35699: FOR_IN
35700: IFFALSE 35732
// begin result := EnemyInRange ( i , 22 ) ;
35702: LD_ADDR_VAR 0 2
35706: PUSH
35707: LD_VAR 0 3
35711: PPUSH
35712: LD_INT 22
35714: PPUSH
35715: CALL 33159 0 2
35719: ST_TO_ADDR
// if result then
35720: LD_VAR 0 2
35724: IFFALSE 35730
// exit ;
35726: POP
35727: POP
35728: GO 35734
// end ;
35730: GO 35699
35732: POP
35733: POP
// end ;
35734: LD_VAR 0 2
35738: RET
// export function FilterByTag ( units , tag ) ; begin
35739: LD_INT 0
35741: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_INT 120
35754: PUSH
35755: LD_VAR 0 2
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PPUSH
35764: CALL_OW 72
35768: ST_TO_ADDR
// end ;
35769: LD_VAR 0 3
35773: RET
// export function IsDriver ( un ) ; begin
35774: LD_INT 0
35776: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35777: LD_ADDR_VAR 0 2
35781: PUSH
35782: LD_VAR 0 1
35786: PUSH
35787: LD_INT 55
35789: PUSH
35790: EMPTY
35791: LIST
35792: PPUSH
35793: CALL_OW 69
35797: IN
35798: ST_TO_ADDR
// end ;
35799: LD_VAR 0 2
35803: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35804: LD_INT 0
35806: PPUSH
35807: PPUSH
// list := [ ] ;
35808: LD_ADDR_VAR 0 5
35812: PUSH
35813: EMPTY
35814: ST_TO_ADDR
// case d of 0 :
35815: LD_VAR 0 3
35819: PUSH
35820: LD_INT 0
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35828
35826: GO 35961
35828: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35829: LD_ADDR_VAR 0 5
35833: PUSH
35834: LD_VAR 0 1
35838: PUSH
35839: LD_INT 4
35841: MINUS
35842: PUSH
35843: LD_VAR 0 2
35847: PUSH
35848: LD_INT 4
35850: MINUS
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: PUSH
35860: LD_VAR 0 1
35864: PUSH
35865: LD_INT 3
35867: MINUS
35868: PUSH
35869: LD_VAR 0 2
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PUSH
35882: LD_VAR 0 1
35886: PUSH
35887: LD_INT 4
35889: PLUS
35890: PUSH
35891: LD_VAR 0 2
35895: PUSH
35896: LD_INT 4
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_VAR 0 1
35908: PUSH
35909: LD_INT 3
35911: PLUS
35912: PUSH
35913: LD_VAR 0 2
35917: PUSH
35918: LD_INT 3
35920: PLUS
35921: PUSH
35922: LD_INT 5
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_VAR 0 1
35934: PUSH
35935: LD_VAR 0 2
35939: PUSH
35940: LD_INT 4
35942: PLUS
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: ST_TO_ADDR
// end ; 1 :
35959: GO 36659
35961: LD_INT 1
35963: DOUBLE
35964: EQUAL
35965: IFTRUE 35969
35967: GO 36102
35969: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35970: LD_ADDR_VAR 0 5
35974: PUSH
35975: LD_VAR 0 1
35979: PUSH
35980: LD_VAR 0 2
35984: PUSH
35985: LD_INT 4
35987: MINUS
35988: PUSH
35989: LD_INT 3
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: LIST
35996: PUSH
35997: LD_VAR 0 1
36001: PUSH
36002: LD_INT 3
36004: MINUS
36005: PUSH
36006: LD_VAR 0 2
36010: PUSH
36011: LD_INT 3
36013: MINUS
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: PUSH
36023: LD_VAR 0 1
36027: PUSH
36028: LD_INT 4
36030: MINUS
36031: PUSH
36032: LD_VAR 0 2
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: LIST
36044: PUSH
36045: LD_VAR 0 1
36049: PUSH
36050: LD_VAR 0 2
36054: PUSH
36055: LD_INT 3
36057: PLUS
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: PUSH
36067: LD_VAR 0 1
36071: PUSH
36072: LD_INT 4
36074: PLUS
36075: PUSH
36076: LD_VAR 0 2
36080: PUSH
36081: LD_INT 4
36083: PLUS
36084: PUSH
36085: LD_INT 5
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: ST_TO_ADDR
// end ; 2 :
36100: GO 36659
36102: LD_INT 2
36104: DOUBLE
36105: EQUAL
36106: IFTRUE 36110
36108: GO 36239
36110: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36111: LD_ADDR_VAR 0 5
36115: PUSH
36116: LD_VAR 0 1
36120: PUSH
36121: LD_VAR 0 2
36125: PUSH
36126: LD_INT 3
36128: MINUS
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: PUSH
36138: LD_VAR 0 1
36142: PUSH
36143: LD_INT 4
36145: PLUS
36146: PUSH
36147: LD_VAR 0 2
36151: PUSH
36152: LD_INT 4
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: PUSH
36160: LD_VAR 0 1
36164: PUSH
36165: LD_VAR 0 2
36169: PUSH
36170: LD_INT 4
36172: PLUS
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: PUSH
36182: LD_VAR 0 1
36186: PUSH
36187: LD_INT 3
36189: MINUS
36190: PUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: LIST
36203: PUSH
36204: LD_VAR 0 1
36208: PUSH
36209: LD_INT 4
36211: MINUS
36212: PUSH
36213: LD_VAR 0 2
36217: PUSH
36218: LD_INT 4
36220: MINUS
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: ST_TO_ADDR
// end ; 3 :
36237: GO 36659
36239: LD_INT 3
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36380
36247: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36248: LD_ADDR_VAR 0 5
36252: PUSH
36253: LD_VAR 0 1
36257: PUSH
36258: LD_INT 3
36260: PLUS
36261: PUSH
36262: LD_VAR 0 2
36266: PUSH
36267: LD_INT 4
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: PUSH
36275: LD_VAR 0 1
36279: PUSH
36280: LD_INT 4
36282: PLUS
36283: PUSH
36284: LD_VAR 0 2
36288: PUSH
36289: LD_INT 4
36291: PLUS
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_INT 4
36308: MINUS
36309: PUSH
36310: LD_VAR 0 2
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: PUSH
36323: LD_VAR 0 1
36327: PUSH
36328: LD_VAR 0 2
36332: PUSH
36333: LD_INT 4
36335: MINUS
36336: PUSH
36337: LD_INT 3
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: PUSH
36345: LD_VAR 0 1
36349: PUSH
36350: LD_INT 3
36352: MINUS
36353: PUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_INT 3
36361: MINUS
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// end ; 4 :
36378: GO 36659
36380: LD_INT 4
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36521
36388: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36389: LD_ADDR_VAR 0 5
36393: PUSH
36394: LD_VAR 0 1
36398: PUSH
36399: LD_VAR 0 2
36403: PUSH
36404: LD_INT 4
36406: PLUS
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: PUSH
36416: LD_VAR 0 1
36420: PUSH
36421: LD_INT 3
36423: PLUS
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_INT 3
36432: PLUS
36433: PUSH
36434: LD_INT 5
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: LD_VAR 0 1
36446: PUSH
36447: LD_INT 4
36449: PLUS
36450: PUSH
36451: LD_VAR 0 2
36455: PUSH
36456: LD_INT 4
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: LD_VAR 0 1
36468: PUSH
36469: LD_VAR 0 2
36473: PUSH
36474: LD_INT 3
36476: MINUS
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: PUSH
36486: LD_VAR 0 1
36490: PUSH
36491: LD_INT 4
36493: MINUS
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_INT 4
36502: MINUS
36503: PUSH
36504: LD_INT 2
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
// end ; 5 :
36519: GO 36659
36521: LD_INT 5
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36658
36529: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_VAR 0 1
36539: PUSH
36540: LD_INT 4
36542: MINUS
36543: PUSH
36544: LD_VAR 0 2
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: PUSH
36557: LD_VAR 0 1
36561: PUSH
36562: LD_VAR 0 2
36566: PUSH
36567: LD_INT 4
36569: MINUS
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: PUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_INT 4
36586: PLUS
36587: PUSH
36588: LD_VAR 0 2
36592: PUSH
36593: LD_INT 4
36595: PLUS
36596: PUSH
36597: LD_INT 5
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: PUSH
36605: LD_VAR 0 1
36609: PUSH
36610: LD_INT 3
36612: PLUS
36613: PUSH
36614: LD_VAR 0 2
36618: PUSH
36619: LD_INT 4
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: PUSH
36627: LD_VAR 0 1
36631: PUSH
36632: LD_VAR 0 2
36636: PUSH
36637: LD_INT 3
36639: PLUS
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// end ; end ;
36656: GO 36659
36658: POP
// result := list ;
36659: LD_ADDR_VAR 0 4
36663: PUSH
36664: LD_VAR 0 5
36668: ST_TO_ADDR
// end ;
36669: LD_VAR 0 4
36673: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36674: LD_INT 0
36676: PPUSH
36677: PPUSH
36678: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36679: LD_VAR 0 1
36683: NOT
36684: IFTRUE 36712
36686: PUSH
36687: LD_VAR 0 2
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: LD_INT 4
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: IN
36710: NOT
36711: OR
36712: IFFALSE 36716
// exit ;
36714: GO 36799
// tmp := [ ] ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: EMPTY
36722: ST_TO_ADDR
// for i in units do
36723: LD_ADDR_VAR 0 4
36727: PUSH
36728: LD_VAR 0 1
36732: PUSH
36733: FOR_IN
36734: IFFALSE 36768
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36736: LD_ADDR_VAR 0 5
36740: PUSH
36741: LD_VAR 0 5
36745: PPUSH
36746: LD_VAR 0 4
36750: PPUSH
36751: LD_VAR 0 2
36755: PPUSH
36756: CALL_OW 259
36760: PPUSH
36761: CALL 38194 0 2
36765: ST_TO_ADDR
36766: GO 36733
36768: POP
36769: POP
// if not tmp then
36770: LD_VAR 0 5
36774: NOT
36775: IFFALSE 36779
// exit ;
36777: GO 36799
// result := SortListByListDesc ( units , tmp ) ;
36779: LD_ADDR_VAR 0 3
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: LD_VAR 0 5
36793: PPUSH
36794: CALL_OW 77
36798: ST_TO_ADDR
// end ;
36799: LD_VAR 0 3
36803: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36804: LD_INT 0
36806: PPUSH
36807: PPUSH
36808: PPUSH
// result := false ;
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_INT 0
36816: ST_TO_ADDR
// if not building then
36817: LD_VAR 0 2
36821: NOT
36822: IFFALSE 36826
// exit ;
36824: GO 36970
// x := GetX ( building ) ;
36826: LD_ADDR_VAR 0 4
36830: PUSH
36831: LD_VAR 0 2
36835: PPUSH
36836: CALL_OW 250
36840: ST_TO_ADDR
// y := GetY ( building ) ;
36841: LD_ADDR_VAR 0 5
36845: PUSH
36846: LD_VAR 0 2
36850: PPUSH
36851: CALL_OW 251
36855: ST_TO_ADDR
// if not x or not y then
36856: LD_VAR 0 4
36860: NOT
36861: IFTRUE 36870
36863: PUSH
36864: LD_VAR 0 5
36868: NOT
36869: OR
36870: IFFALSE 36874
// exit ;
36872: GO 36970
// if GetTaskList ( unit ) then
36874: LD_VAR 0 1
36878: PPUSH
36879: CALL_OW 437
36883: IFFALSE 36970
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36885: LD_STRING e
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 437
36897: PUSH
36898: LD_INT 1
36900: ARRAY
36901: PUSH
36902: LD_INT 1
36904: ARRAY
36905: EQUAL
36906: IFFALSE 36933
36908: PUSH
36909: LD_VAR 0 4
36913: PUSH
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL_OW 437
36923: PUSH
36924: LD_INT 1
36926: ARRAY
36927: PUSH
36928: LD_INT 2
36930: ARRAY
36931: EQUAL
36932: AND
36933: IFFALSE 36960
36935: PUSH
36936: LD_VAR 0 5
36940: PUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: CALL_OW 437
36950: PUSH
36951: LD_INT 1
36953: ARRAY
36954: PUSH
36955: LD_INT 3
36957: ARRAY
36958: EQUAL
36959: AND
36960: IFFALSE 36970
// result := true end ;
36962: LD_ADDR_VAR 0 3
36966: PUSH
36967: LD_INT 1
36969: ST_TO_ADDR
// end ;
36970: LD_VAR 0 3
36974: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36975: LD_INT 0
36977: PPUSH
// result := false ;
36978: LD_ADDR_VAR 0 4
36982: PUSH
36983: LD_INT 0
36985: ST_TO_ADDR
// if GetTaskList ( unit ) then
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL_OW 437
36995: IFFALSE 37082
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36997: LD_STRING M
36999: PUSH
37000: LD_VAR 0 1
37004: PPUSH
37005: CALL_OW 437
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: PUSH
37014: LD_INT 1
37016: ARRAY
37017: EQUAL
37018: IFFALSE 37045
37020: PUSH
37021: LD_VAR 0 2
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 437
37035: PUSH
37036: LD_INT 1
37038: ARRAY
37039: PUSH
37040: LD_INT 2
37042: ARRAY
37043: EQUAL
37044: AND
37045: IFFALSE 37072
37047: PUSH
37048: LD_VAR 0 3
37052: PUSH
37053: LD_VAR 0 1
37057: PPUSH
37058: CALL_OW 437
37062: PUSH
37063: LD_INT 1
37065: ARRAY
37066: PUSH
37067: LD_INT 3
37069: ARRAY
37070: EQUAL
37071: AND
37072: IFFALSE 37082
// result := true ;
37074: LD_ADDR_VAR 0 4
37078: PUSH
37079: LD_INT 1
37081: ST_TO_ADDR
// end ; end ;
37082: LD_VAR 0 4
37086: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37087: LD_INT 0
37089: PPUSH
37090: PPUSH
37091: PPUSH
37092: PPUSH
// if not unit or not area then
37093: LD_VAR 0 1
37097: NOT
37098: IFTRUE 37107
37100: PUSH
37101: LD_VAR 0 2
37105: NOT
37106: OR
37107: IFFALSE 37111
// exit ;
37109: GO 37287
// tmp := AreaToList ( area , i ) ;
37111: LD_ADDR_VAR 0 6
37115: PUSH
37116: LD_VAR 0 2
37120: PPUSH
37121: LD_VAR 0 5
37125: PPUSH
37126: CALL_OW 517
37130: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37131: LD_ADDR_VAR 0 5
37135: PUSH
37136: DOUBLE
37137: LD_INT 1
37139: DEC
37140: ST_TO_ADDR
37141: LD_VAR 0 6
37145: PUSH
37146: LD_INT 1
37148: ARRAY
37149: PUSH
37150: FOR_TO
37151: IFFALSE 37285
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37153: LD_ADDR_VAR 0 7
37157: PUSH
37158: LD_VAR 0 6
37162: PUSH
37163: LD_INT 1
37165: ARRAY
37166: PUSH
37167: LD_VAR 0 5
37171: ARRAY
37172: PUSH
37173: LD_VAR 0 6
37177: PUSH
37178: LD_INT 2
37180: ARRAY
37181: PUSH
37182: LD_VAR 0 5
37186: ARRAY
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37192: LD_INT 92
37194: PUSH
37195: LD_VAR 0 7
37199: PUSH
37200: LD_INT 1
37202: ARRAY
37203: PUSH
37204: LD_VAR 0 7
37208: PUSH
37209: LD_INT 2
37211: ARRAY
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: PPUSH
37222: CALL_OW 69
37226: PUSH
37227: LD_INT 0
37229: EQUAL
37230: IFFALSE 37283
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37232: LD_VAR 0 1
37236: PPUSH
37237: LD_VAR 0 7
37241: PUSH
37242: LD_INT 1
37244: ARRAY
37245: PPUSH
37246: LD_VAR 0 7
37250: PUSH
37251: LD_INT 2
37253: ARRAY
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 48
// result := IsPlaced ( unit ) ;
37264: LD_ADDR_VAR 0 4
37268: PUSH
37269: LD_VAR 0 1
37273: PPUSH
37274: CALL_OW 305
37278: ST_TO_ADDR
// exit ;
37279: POP
37280: POP
37281: GO 37287
// end ; end ;
37283: GO 37150
37285: POP
37286: POP
// end ;
37287: LD_VAR 0 4
37291: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37292: LD_INT 0
37294: PPUSH
37295: PPUSH
37296: PPUSH
// if not side or side > 8 then
37297: LD_VAR 0 1
37301: NOT
37302: IFTRUE 37314
37304: PUSH
37305: LD_VAR 0 1
37309: PUSH
37310: LD_INT 8
37312: GREATER
37313: OR
37314: IFFALSE 37318
// exit ;
37316: GO 37505
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37318: LD_ADDR_VAR 0 4
37322: PUSH
37323: LD_INT 22
37325: PUSH
37326: LD_VAR 0 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 21
37337: PUSH
37338: LD_INT 3
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PPUSH
37349: CALL_OW 69
37353: ST_TO_ADDR
// if not tmp then
37354: LD_VAR 0 4
37358: NOT
37359: IFFALSE 37363
// exit ;
37361: GO 37505
// enable_addtolog := true ;
37363: LD_ADDR_OWVAR 81
37367: PUSH
37368: LD_INT 1
37370: ST_TO_ADDR
// AddToLog ( [ ) ;
37371: LD_STRING [
37373: PPUSH
37374: CALL_OW 561
// for i in tmp do
37378: LD_ADDR_VAR 0 3
37382: PUSH
37383: LD_VAR 0 4
37387: PUSH
37388: FOR_IN
37389: IFFALSE 37496
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37391: LD_STRING [
37393: PUSH
37394: LD_VAR 0 3
37398: PPUSH
37399: CALL_OW 266
37403: STR
37404: PUSH
37405: LD_STRING , 
37407: STR
37408: PUSH
37409: LD_VAR 0 3
37413: PPUSH
37414: CALL_OW 250
37418: STR
37419: PUSH
37420: LD_STRING , 
37422: STR
37423: PUSH
37424: LD_VAR 0 3
37428: PPUSH
37429: CALL_OW 251
37433: STR
37434: PUSH
37435: LD_STRING , 
37437: STR
37438: PUSH
37439: LD_VAR 0 3
37443: PPUSH
37444: CALL_OW 254
37448: STR
37449: PUSH
37450: LD_STRING , 
37452: STR
37453: PUSH
37454: LD_VAR 0 3
37458: PPUSH
37459: LD_INT 1
37461: PPUSH
37462: CALL_OW 268
37466: STR
37467: PUSH
37468: LD_STRING , 
37470: STR
37471: PUSH
37472: LD_VAR 0 3
37476: PPUSH
37477: LD_INT 2
37479: PPUSH
37480: CALL_OW 268
37484: STR
37485: PUSH
37486: LD_STRING ],
37488: STR
37489: PPUSH
37490: CALL_OW 561
// end ;
37494: GO 37388
37496: POP
37497: POP
// AddToLog ( ]; ) ;
37498: LD_STRING ];
37500: PPUSH
37501: CALL_OW 561
// end ;
37505: LD_VAR 0 2
37509: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37510: LD_INT 0
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
// if not area or not rate or not max then
37517: LD_VAR 0 1
37521: NOT
37522: IFTRUE 37531
37524: PUSH
37525: LD_VAR 0 2
37529: NOT
37530: OR
37531: IFTRUE 37540
37533: PUSH
37534: LD_VAR 0 4
37538: NOT
37539: OR
37540: IFFALSE 37544
// exit ;
37542: GO 37733
// while 1 do
37544: LD_INT 1
37546: IFFALSE 37733
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37548: LD_ADDR_VAR 0 9
37552: PUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: LD_INT 1
37560: PPUSH
37561: CALL_OW 287
37565: PUSH
37566: LD_INT 10
37568: MUL
37569: ST_TO_ADDR
// r := rate / 10 ;
37570: LD_ADDR_VAR 0 7
37574: PUSH
37575: LD_VAR 0 2
37579: PUSH
37580: LD_INT 10
37582: DIVREAL
37583: ST_TO_ADDR
// time := 1 1$00 ;
37584: LD_ADDR_VAR 0 8
37588: PUSH
37589: LD_INT 2100
37591: ST_TO_ADDR
// if amount < min then
37592: LD_VAR 0 9
37596: PUSH
37597: LD_VAR 0 3
37601: LESS
37602: IFFALSE 37620
// r := r * 2 else
37604: LD_ADDR_VAR 0 7
37608: PUSH
37609: LD_VAR 0 7
37613: PUSH
37614: LD_INT 2
37616: MUL
37617: ST_TO_ADDR
37618: GO 37646
// if amount > max then
37620: LD_VAR 0 9
37624: PUSH
37625: LD_VAR 0 4
37629: GREATER
37630: IFFALSE 37646
// r := r / 2 ;
37632: LD_ADDR_VAR 0 7
37636: PUSH
37637: LD_VAR 0 7
37641: PUSH
37642: LD_INT 2
37644: DIVREAL
37645: ST_TO_ADDR
// time := time / r ;
37646: LD_ADDR_VAR 0 8
37650: PUSH
37651: LD_VAR 0 8
37655: PUSH
37656: LD_VAR 0 7
37660: DIVREAL
37661: ST_TO_ADDR
// if time < 0 then
37662: LD_VAR 0 8
37666: PUSH
37667: LD_INT 0
37669: LESS
37670: IFFALSE 37687
// time := time * - 1 ;
37672: LD_ADDR_VAR 0 8
37676: PUSH
37677: LD_VAR 0 8
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: MUL
37686: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37687: LD_VAR 0 8
37691: PUSH
37692: LD_INT 35
37694: PPUSH
37695: LD_INT 875
37697: PPUSH
37698: CALL_OW 12
37702: PLUS
37703: PPUSH
37704: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37708: LD_INT 1
37710: PPUSH
37711: LD_INT 5
37713: PPUSH
37714: CALL_OW 12
37718: PPUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: LD_INT 1
37726: PPUSH
37727: CALL_OW 55
// end ;
37731: GO 37544
// end ;
37733: LD_VAR 0 5
37737: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37738: LD_INT 0
37740: PPUSH
37741: PPUSH
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
37746: PPUSH
37747: PPUSH
// if not turrets or not factories then
37748: LD_VAR 0 1
37752: NOT
37753: IFTRUE 37762
37755: PUSH
37756: LD_VAR 0 2
37760: NOT
37761: OR
37762: IFFALSE 37766
// exit ;
37764: GO 38073
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37766: LD_ADDR_VAR 0 10
37770: PUSH
37771: LD_INT 5
37773: PUSH
37774: LD_INT 6
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: LD_INT 4
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 3
37793: PUSH
37794: LD_INT 5
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 24
37808: PUSH
37809: LD_INT 25
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 23
37818: PUSH
37819: LD_INT 27
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 42
37832: PUSH
37833: LD_INT 43
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 44
37842: PUSH
37843: LD_INT 46
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 45
37852: PUSH
37853: LD_INT 47
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// result := [ ] ;
37870: LD_ADDR_VAR 0 3
37874: PUSH
37875: EMPTY
37876: ST_TO_ADDR
// for i in turrets do
37877: LD_ADDR_VAR 0 4
37881: PUSH
37882: LD_VAR 0 1
37886: PUSH
37887: FOR_IN
37888: IFFALSE 38071
// begin nat := GetNation ( i ) ;
37890: LD_ADDR_VAR 0 7
37894: PUSH
37895: LD_VAR 0 4
37899: PPUSH
37900: CALL_OW 248
37904: ST_TO_ADDR
// weapon := 0 ;
37905: LD_ADDR_VAR 0 8
37909: PUSH
37910: LD_INT 0
37912: ST_TO_ADDR
// if not nat then
37913: LD_VAR 0 7
37917: NOT
37918: IFFALSE 37922
// continue ;
37920: GO 37887
// for j in list [ nat ] do
37922: LD_ADDR_VAR 0 5
37926: PUSH
37927: LD_VAR 0 10
37931: PUSH
37932: LD_VAR 0 7
37936: ARRAY
37937: PUSH
37938: FOR_IN
37939: IFFALSE 37980
// if GetBWeapon ( i ) = j [ 1 ] then
37941: LD_VAR 0 4
37945: PPUSH
37946: CALL_OW 269
37950: PUSH
37951: LD_VAR 0 5
37955: PUSH
37956: LD_INT 1
37958: ARRAY
37959: EQUAL
37960: IFFALSE 37978
// begin weapon := j [ 2 ] ;
37962: LD_ADDR_VAR 0 8
37966: PUSH
37967: LD_VAR 0 5
37971: PUSH
37972: LD_INT 2
37974: ARRAY
37975: ST_TO_ADDR
// break ;
37976: GO 37980
// end ;
37978: GO 37938
37980: POP
37981: POP
// if not weapon then
37982: LD_VAR 0 8
37986: NOT
37987: IFFALSE 37991
// continue ;
37989: GO 37887
// for k in factories do
37991: LD_ADDR_VAR 0 6
37995: PUSH
37996: LD_VAR 0 2
38000: PUSH
38001: FOR_IN
38002: IFFALSE 38067
// begin weapons := AvailableWeaponList ( k ) ;
38004: LD_ADDR_VAR 0 9
38008: PUSH
38009: LD_VAR 0 6
38013: PPUSH
38014: CALL_OW 478
38018: ST_TO_ADDR
// if not weapons then
38019: LD_VAR 0 9
38023: NOT
38024: IFFALSE 38028
// continue ;
38026: GO 38001
// if weapon in weapons then
38028: LD_VAR 0 8
38032: PUSH
38033: LD_VAR 0 9
38037: IN
38038: IFFALSE 38065
// begin result := [ i , weapon ] ;
38040: LD_ADDR_VAR 0 3
38044: PUSH
38045: LD_VAR 0 4
38049: PUSH
38050: LD_VAR 0 8
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: ST_TO_ADDR
// exit ;
38059: POP
38060: POP
38061: POP
38062: POP
38063: GO 38073
// end ; end ;
38065: GO 38001
38067: POP
38068: POP
// end ;
38069: GO 37887
38071: POP
38072: POP
// end ;
38073: LD_VAR 0 3
38077: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38078: LD_INT 0
38080: PPUSH
// if not side or side > 8 then
38081: LD_VAR 0 3
38085: NOT
38086: IFTRUE 38098
38088: PUSH
38089: LD_VAR 0 3
38093: PUSH
38094: LD_INT 8
38096: GREATER
38097: OR
38098: IFFALSE 38102
// exit ;
38100: GO 38161
// if not range then
38102: LD_VAR 0 4
38106: NOT
38107: IFFALSE 38118
// range := - 12 ;
38109: LD_ADDR_VAR 0 4
38113: PUSH
38114: LD_INT 12
38116: NEG
38117: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38118: LD_VAR 0 1
38122: PPUSH
38123: LD_VAR 0 2
38127: PPUSH
38128: LD_VAR 0 3
38132: PPUSH
38133: LD_VAR 0 4
38137: PPUSH
38138: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38142: LD_VAR 0 1
38146: PPUSH
38147: LD_VAR 0 2
38151: PPUSH
38152: LD_VAR 0 3
38156: PPUSH
38157: CALL_OW 331
// end ;
38161: LD_VAR 0 5
38165: RET
// export function Video ( mode ) ; begin
38166: LD_INT 0
38168: PPUSH
// ingame_video = mode ;
38169: LD_ADDR_OWVAR 52
38173: PUSH
38174: LD_VAR 0 1
38178: ST_TO_ADDR
// interface_hidden = mode ;
38179: LD_ADDR_OWVAR 54
38183: PUSH
38184: LD_VAR 0 1
38188: ST_TO_ADDR
// end ;
38189: LD_VAR 0 2
38193: RET
// export function Join ( array , element ) ; begin
38194: LD_INT 0
38196: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38197: LD_ADDR_VAR 0 3
38201: PUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: LD_VAR 0 1
38211: PUSH
38212: LD_INT 1
38214: PLUS
38215: PPUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: CALL_OW 1
38225: ST_TO_ADDR
// end ;
38226: LD_VAR 0 3
38230: RET
// export function JoinUnion ( array , element ) ; begin
38231: LD_INT 0
38233: PPUSH
// result := array union element ;
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_VAR 0 1
38243: PUSH
38244: LD_VAR 0 2
38248: UNION
38249: ST_TO_ADDR
// end ;
38250: LD_VAR 0 3
38254: RET
// export function GetBehemoths ( side ) ; begin
38255: LD_INT 0
38257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38258: LD_ADDR_VAR 0 2
38262: PUSH
38263: LD_INT 22
38265: PUSH
38266: LD_VAR 0 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 31
38277: PUSH
38278: LD_INT 25
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PPUSH
38289: CALL_OW 69
38293: ST_TO_ADDR
// end ;
38294: LD_VAR 0 2
38298: RET
// export function Shuffle ( array ) ; var i , index ; begin
38299: LD_INT 0
38301: PPUSH
38302: PPUSH
38303: PPUSH
// result := [ ] ;
38304: LD_ADDR_VAR 0 2
38308: PUSH
38309: EMPTY
38310: ST_TO_ADDR
// if not array then
38311: LD_VAR 0 1
38315: NOT
38316: IFFALSE 38320
// exit ;
38318: GO 38419
// Randomize ;
38320: CALL_OW 10
// for i = array downto 1 do
38324: LD_ADDR_VAR 0 3
38328: PUSH
38329: DOUBLE
38330: LD_VAR 0 1
38334: INC
38335: ST_TO_ADDR
38336: LD_INT 1
38338: PUSH
38339: FOR_DOWNTO
38340: IFFALSE 38417
// begin index := rand ( 1 , array ) ;
38342: LD_ADDR_VAR 0 4
38346: PUSH
38347: LD_INT 1
38349: PPUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 12
38359: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38360: LD_ADDR_VAR 0 2
38364: PUSH
38365: LD_VAR 0 2
38369: PPUSH
38370: LD_VAR 0 2
38374: PUSH
38375: LD_INT 1
38377: PLUS
38378: PPUSH
38379: LD_VAR 0 1
38383: PUSH
38384: LD_VAR 0 4
38388: ARRAY
38389: PPUSH
38390: CALL_OW 2
38394: ST_TO_ADDR
// array := Delete ( array , index ) ;
38395: LD_ADDR_VAR 0 1
38399: PUSH
38400: LD_VAR 0 1
38404: PPUSH
38405: LD_VAR 0 4
38409: PPUSH
38410: CALL_OW 3
38414: ST_TO_ADDR
// end ;
38415: GO 38339
38417: POP
38418: POP
// end ;
38419: LD_VAR 0 2
38423: RET
// export function GetBaseMaterials ( base ) ; begin
38424: LD_INT 0
38426: PPUSH
// result := [ 0 , 0 , 0 ] ;
38427: LD_ADDR_VAR 0 2
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// if not base then
38446: LD_VAR 0 1
38450: NOT
38451: IFFALSE 38455
// exit ;
38453: GO 38504
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38455: LD_ADDR_VAR 0 2
38459: PUSH
38460: LD_VAR 0 1
38464: PPUSH
38465: LD_INT 1
38467: PPUSH
38468: CALL_OW 275
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: LD_INT 2
38480: PPUSH
38481: CALL_OW 275
38485: PUSH
38486: LD_VAR 0 1
38490: PPUSH
38491: LD_INT 3
38493: PPUSH
38494: CALL_OW 275
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
// end ;
38504: LD_VAR 0 2
38508: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38509: LD_INT 0
38511: PPUSH
38512: PPUSH
// result := array ;
38513: LD_ADDR_VAR 0 3
38517: PUSH
38518: LD_VAR 0 1
38522: ST_TO_ADDR
// if size >= result then
38523: LD_VAR 0 2
38527: PUSH
38528: LD_VAR 0 3
38532: GREATEREQUAL
38533: IFFALSE 38537
// exit ;
38535: GO 38587
// if size then
38537: LD_VAR 0 2
38541: IFFALSE 38587
// for i := array downto size do
38543: LD_ADDR_VAR 0 4
38547: PUSH
38548: DOUBLE
38549: LD_VAR 0 1
38553: INC
38554: ST_TO_ADDR
38555: LD_VAR 0 2
38559: PUSH
38560: FOR_DOWNTO
38561: IFFALSE 38585
// result := Delete ( result , result ) ;
38563: LD_ADDR_VAR 0 3
38567: PUSH
38568: LD_VAR 0 3
38572: PPUSH
38573: LD_VAR 0 3
38577: PPUSH
38578: CALL_OW 3
38582: ST_TO_ADDR
38583: GO 38560
38585: POP
38586: POP
// end ;
38587: LD_VAR 0 3
38591: RET
// export function ComExit ( unit ) ; var tmp ; begin
38592: LD_INT 0
38594: PPUSH
38595: PPUSH
// if not IsInUnit ( unit ) then
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 310
38605: NOT
38606: IFFALSE 38610
// exit ;
38608: GO 38670
// tmp := IsInUnit ( unit ) ;
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 310
38624: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38625: LD_VAR 0 3
38629: PPUSH
38630: CALL_OW 247
38634: PUSH
38635: LD_INT 2
38637: EQUAL
38638: IFFALSE 38651
// ComExitVehicle ( unit ) else
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 121
38649: GO 38660
// ComExitBuilding ( unit ) ;
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 122
// result := tmp ;
38660: LD_ADDR_VAR 0 2
38664: PUSH
38665: LD_VAR 0 3
38669: ST_TO_ADDR
// end ;
38670: LD_VAR 0 2
38674: RET
// export function ComExitAll ( units ) ; var i ; begin
38675: LD_INT 0
38677: PPUSH
38678: PPUSH
// if not units then
38679: LD_VAR 0 1
38683: NOT
38684: IFFALSE 38688
// exit ;
38686: GO 38714
// for i in units do
38688: LD_ADDR_VAR 0 3
38692: PUSH
38693: LD_VAR 0 1
38697: PUSH
38698: FOR_IN
38699: IFFALSE 38712
// ComExit ( i ) ;
38701: LD_VAR 0 3
38705: PPUSH
38706: CALL 38592 0 1
38710: GO 38698
38712: POP
38713: POP
// end ;
38714: LD_VAR 0 2
38718: RET
// export function ResetHc ; begin
38719: LD_INT 0
38721: PPUSH
// InitHc ;
38722: CALL_OW 19
// hc_importance := 0 ;
38726: LD_ADDR_OWVAR 32
38730: PUSH
38731: LD_INT 0
38733: ST_TO_ADDR
// end ;
38734: LD_VAR 0 1
38738: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38739: LD_INT 0
38741: PPUSH
38742: PPUSH
38743: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38744: LD_ADDR_VAR 0 6
38748: PUSH
38749: LD_VAR 0 1
38753: PUSH
38754: LD_VAR 0 3
38758: PLUS
38759: PUSH
38760: LD_INT 2
38762: DIV
38763: ST_TO_ADDR
// if _x < 0 then
38764: LD_VAR 0 6
38768: PUSH
38769: LD_INT 0
38771: LESS
38772: IFFALSE 38789
// _x := _x * - 1 ;
38774: LD_ADDR_VAR 0 6
38778: PUSH
38779: LD_VAR 0 6
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: MUL
38788: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38789: LD_ADDR_VAR 0 7
38793: PUSH
38794: LD_VAR 0 2
38798: PUSH
38799: LD_VAR 0 4
38803: PLUS
38804: PUSH
38805: LD_INT 2
38807: DIV
38808: ST_TO_ADDR
// if _y < 0 then
38809: LD_VAR 0 7
38813: PUSH
38814: LD_INT 0
38816: LESS
38817: IFFALSE 38834
// _y := _y * - 1 ;
38819: LD_ADDR_VAR 0 7
38823: PUSH
38824: LD_VAR 0 7
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: MUL
38833: ST_TO_ADDR
// result := [ _x , _y ] ;
38834: LD_ADDR_VAR 0 5
38838: PUSH
38839: LD_VAR 0 6
38843: PUSH
38844: LD_VAR 0 7
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: ST_TO_ADDR
// end ;
38853: LD_VAR 0 5
38857: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38858: LD_INT 0
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
// task := GetTaskList ( unit ) ;
38864: LD_ADDR_VAR 0 7
38868: PUSH
38869: LD_VAR 0 1
38873: PPUSH
38874: CALL_OW 437
38878: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38879: LD_VAR 0 7
38883: NOT
38884: IFFALSE 38903
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: LD_VAR 0 2
38896: PPUSH
38897: CALL_OW 308
38901: NOT
38902: AND
38903: IFFALSE 38907
// exit ;
38905: GO 39025
// if IsInArea ( unit , area ) then
38907: LD_VAR 0 1
38911: PPUSH
38912: LD_VAR 0 2
38916: PPUSH
38917: CALL_OW 308
38921: IFFALSE 38939
// begin ComMoveToArea ( unit , goAway ) ;
38923: LD_VAR 0 1
38927: PPUSH
38928: LD_VAR 0 3
38932: PPUSH
38933: CALL_OW 113
// exit ;
38937: GO 39025
// end ; if task [ 1 ] [ 1 ] <> M then
38939: LD_VAR 0 7
38943: PUSH
38944: LD_INT 1
38946: ARRAY
38947: PUSH
38948: LD_INT 1
38950: ARRAY
38951: PUSH
38952: LD_STRING M
38954: NONEQUAL
38955: IFFALSE 38959
// exit ;
38957: GO 39025
// x := task [ 1 ] [ 2 ] ;
38959: LD_ADDR_VAR 0 5
38963: PUSH
38964: LD_VAR 0 7
38968: PUSH
38969: LD_INT 1
38971: ARRAY
38972: PUSH
38973: LD_INT 2
38975: ARRAY
38976: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38977: LD_ADDR_VAR 0 6
38981: PUSH
38982: LD_VAR 0 7
38986: PUSH
38987: LD_INT 1
38989: ARRAY
38990: PUSH
38991: LD_INT 3
38993: ARRAY
38994: ST_TO_ADDR
// if InArea ( x , y , area ) then
38995: LD_VAR 0 5
38999: PPUSH
39000: LD_VAR 0 6
39004: PPUSH
39005: LD_VAR 0 2
39009: PPUSH
39010: CALL_OW 309
39014: IFFALSE 39025
// ComStop ( unit ) ;
39016: LD_VAR 0 1
39020: PPUSH
39021: CALL_OW 141
// end ;
39025: LD_VAR 0 4
39029: RET
// export function Abs ( value ) ; begin
39030: LD_INT 0
39032: PPUSH
// result := value ;
39033: LD_ADDR_VAR 0 2
39037: PUSH
39038: LD_VAR 0 1
39042: ST_TO_ADDR
// if value < 0 then
39043: LD_VAR 0 1
39047: PUSH
39048: LD_INT 0
39050: LESS
39051: IFFALSE 39068
// result := value * - 1 ;
39053: LD_ADDR_VAR 0 2
39057: PUSH
39058: LD_VAR 0 1
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: MUL
39067: ST_TO_ADDR
// end ;
39068: LD_VAR 0 2
39072: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39073: LD_INT 0
39075: PPUSH
39076: PPUSH
39077: PPUSH
39078: PPUSH
39079: PPUSH
39080: PPUSH
39081: PPUSH
39082: PPUSH
// if not unit or not building then
39083: LD_VAR 0 1
39087: NOT
39088: IFTRUE 39097
39090: PUSH
39091: LD_VAR 0 2
39095: NOT
39096: OR
39097: IFFALSE 39101
// exit ;
39099: GO 39329
// x := GetX ( building ) ;
39101: LD_ADDR_VAR 0 4
39105: PUSH
39106: LD_VAR 0 2
39110: PPUSH
39111: CALL_OW 250
39115: ST_TO_ADDR
// y := GetY ( building ) ;
39116: LD_ADDR_VAR 0 6
39120: PUSH
39121: LD_VAR 0 2
39125: PPUSH
39126: CALL_OW 251
39130: ST_TO_ADDR
// d := GetDir ( building ) ;
39131: LD_ADDR_VAR 0 8
39135: PUSH
39136: LD_VAR 0 2
39140: PPUSH
39141: CALL_OW 254
39145: ST_TO_ADDR
// r := 4 ;
39146: LD_ADDR_VAR 0 9
39150: PUSH
39151: LD_INT 4
39153: ST_TO_ADDR
// for i := 1 to 5 do
39154: LD_ADDR_VAR 0 10
39158: PUSH
39159: DOUBLE
39160: LD_INT 1
39162: DEC
39163: ST_TO_ADDR
39164: LD_INT 5
39166: PUSH
39167: FOR_TO
39168: IFFALSE 39327
// begin _x := ShiftX ( x , d , r + i ) ;
39170: LD_ADDR_VAR 0 5
39174: PUSH
39175: LD_VAR 0 4
39179: PPUSH
39180: LD_VAR 0 8
39184: PPUSH
39185: LD_VAR 0 9
39189: PUSH
39190: LD_VAR 0 10
39194: PLUS
39195: PPUSH
39196: CALL_OW 272
39200: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39201: LD_ADDR_VAR 0 7
39205: PUSH
39206: LD_VAR 0 6
39210: PPUSH
39211: LD_VAR 0 8
39215: PPUSH
39216: LD_VAR 0 9
39220: PUSH
39221: LD_VAR 0 10
39225: PLUS
39226: PPUSH
39227: CALL_OW 273
39231: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39232: LD_VAR 0 5
39236: PPUSH
39237: LD_VAR 0 7
39241: PPUSH
39242: CALL_OW 488
39246: IFFALSE 39281
39248: PUSH
39249: LD_VAR 0 5
39253: PPUSH
39254: LD_VAR 0 7
39258: PPUSH
39259: CALL_OW 428
39263: PPUSH
39264: CALL_OW 247
39268: PUSH
39269: LD_INT 3
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: IN
39279: NOT
39280: AND
39281: IFFALSE 39325
// begin ComMoveXY ( unit , _x , _y ) ;
39283: LD_VAR 0 1
39287: PPUSH
39288: LD_VAR 0 5
39292: PPUSH
39293: LD_VAR 0 7
39297: PPUSH
39298: CALL_OW 111
// result := [ _x , _y ] ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_VAR 0 7
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: ST_TO_ADDR
// exit ;
39321: POP
39322: POP
39323: GO 39329
// end ; end ;
39325: GO 39167
39327: POP
39328: POP
// end ;
39329: LD_VAR 0 3
39333: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39334: LD_INT 0
39336: PPUSH
39337: PPUSH
39338: PPUSH
// result := 0 ;
39339: LD_ADDR_VAR 0 3
39343: PUSH
39344: LD_INT 0
39346: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39347: LD_VAR 0 1
39351: PUSH
39352: LD_INT 0
39354: LESS
39355: IFTRUE 39367
39357: PUSH
39358: LD_VAR 0 1
39362: PUSH
39363: LD_INT 8
39365: GREATER
39366: OR
39367: IFTRUE 39379
39369: PUSH
39370: LD_VAR 0 2
39374: PUSH
39375: LD_INT 0
39377: LESS
39378: OR
39379: IFTRUE 39391
39381: PUSH
39382: LD_VAR 0 2
39386: PUSH
39387: LD_INT 8
39389: GREATER
39390: OR
39391: IFFALSE 39395
// exit ;
39393: GO 39470
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39395: LD_ADDR_VAR 0 4
39399: PUSH
39400: LD_INT 22
39402: PUSH
39403: LD_VAR 0 2
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PPUSH
39412: CALL_OW 69
39416: PUSH
39417: FOR_IN
39418: IFFALSE 39468
// begin un := UnitShoot ( i ) ;
39420: LD_ADDR_VAR 0 5
39424: PUSH
39425: LD_VAR 0 4
39429: PPUSH
39430: CALL_OW 504
39434: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39435: LD_VAR 0 5
39439: PPUSH
39440: CALL_OW 255
39444: PUSH
39445: LD_VAR 0 1
39449: EQUAL
39450: IFFALSE 39466
// begin result := un ;
39452: LD_ADDR_VAR 0 3
39456: PUSH
39457: LD_VAR 0 5
39461: ST_TO_ADDR
// exit ;
39462: POP
39463: POP
39464: GO 39470
// end ; end ;
39466: GO 39417
39468: POP
39469: POP
// end ;
39470: LD_VAR 0 3
39474: RET
// export function GetCargoBay ( units ) ; begin
39475: LD_INT 0
39477: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39478: LD_ADDR_VAR 0 2
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 34
39493: PUSH
39494: LD_INT 12
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 34
39503: PUSH
39504: LD_INT 51
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 34
39513: PUSH
39514: LD_INT 32
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 34
39523: PUSH
39524: LD_INT 89
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: PPUSH
39538: CALL_OW 72
39542: ST_TO_ADDR
// end ;
39543: LD_VAR 0 2
39547: RET
// export function Negate ( value ) ; begin
39548: LD_INT 0
39550: PPUSH
// result := not value ;
39551: LD_ADDR_VAR 0 2
39555: PUSH
39556: LD_VAR 0 1
39560: NOT
39561: ST_TO_ADDR
// end ;
39562: LD_VAR 0 2
39566: RET
// export function Inc ( value ) ; begin
39567: LD_INT 0
39569: PPUSH
// result := value + 1 ;
39570: LD_ADDR_VAR 0 2
39574: PUSH
39575: LD_VAR 0 1
39579: PUSH
39580: LD_INT 1
39582: PLUS
39583: ST_TO_ADDR
// end ;
39584: LD_VAR 0 2
39588: RET
// export function Dec ( value ) ; begin
39589: LD_INT 0
39591: PPUSH
// result := value - 1 ;
39592: LD_ADDR_VAR 0 2
39596: PUSH
39597: LD_VAR 0 1
39601: PUSH
39602: LD_INT 1
39604: MINUS
39605: ST_TO_ADDR
// end ;
39606: LD_VAR 0 2
39610: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39611: LD_INT 0
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
39619: PPUSH
39620: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39621: LD_VAR 0 1
39625: PPUSH
39626: LD_VAR 0 2
39630: PPUSH
39631: CALL_OW 488
39635: NOT
39636: IFTRUE 39655
39638: PUSH
39639: LD_VAR 0 3
39643: PPUSH
39644: LD_VAR 0 4
39648: PPUSH
39649: CALL_OW 488
39653: NOT
39654: OR
39655: IFFALSE 39668
// begin result := - 1 ;
39657: LD_ADDR_VAR 0 5
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: ST_TO_ADDR
// exit ;
39666: GO 39903
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39668: LD_ADDR_VAR 0 12
39672: PUSH
39673: LD_VAR 0 1
39677: PPUSH
39678: LD_VAR 0 2
39682: PPUSH
39683: LD_VAR 0 3
39687: PPUSH
39688: LD_VAR 0 4
39692: PPUSH
39693: CALL 38739 0 4
39697: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39698: LD_ADDR_VAR 0 11
39702: PUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: LD_VAR 0 2
39712: PPUSH
39713: LD_VAR 0 12
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PPUSH
39722: LD_VAR 0 12
39726: PUSH
39727: LD_INT 2
39729: ARRAY
39730: PPUSH
39731: CALL_OW 298
39735: ST_TO_ADDR
// distance := 9999 ;
39736: LD_ADDR_VAR 0 10
39740: PUSH
39741: LD_INT 9999
39743: ST_TO_ADDR
// for i := 0 to 5 do
39744: LD_ADDR_VAR 0 6
39748: PUSH
39749: DOUBLE
39750: LD_INT 0
39752: DEC
39753: ST_TO_ADDR
39754: LD_INT 5
39756: PUSH
39757: FOR_TO
39758: IFFALSE 39901
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39760: LD_ADDR_VAR 0 7
39764: PUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: LD_VAR 0 6
39774: PPUSH
39775: LD_VAR 0 11
39779: PPUSH
39780: CALL_OW 272
39784: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39785: LD_ADDR_VAR 0 8
39789: PUSH
39790: LD_VAR 0 2
39794: PPUSH
39795: LD_VAR 0 6
39799: PPUSH
39800: LD_VAR 0 11
39804: PPUSH
39805: CALL_OW 273
39809: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39810: LD_VAR 0 7
39814: PPUSH
39815: LD_VAR 0 8
39819: PPUSH
39820: CALL_OW 488
39824: NOT
39825: IFFALSE 39829
// continue ;
39827: GO 39757
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39829: LD_ADDR_VAR 0 9
39833: PUSH
39834: LD_VAR 0 12
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: PPUSH
39843: LD_VAR 0 12
39847: PUSH
39848: LD_INT 2
39850: ARRAY
39851: PPUSH
39852: LD_VAR 0 7
39856: PPUSH
39857: LD_VAR 0 8
39861: PPUSH
39862: CALL_OW 298
39866: ST_TO_ADDR
// if tmp < distance then
39867: LD_VAR 0 9
39871: PUSH
39872: LD_VAR 0 10
39876: LESS
39877: IFFALSE 39899
// begin result := i ;
39879: LD_ADDR_VAR 0 5
39883: PUSH
39884: LD_VAR 0 6
39888: ST_TO_ADDR
// distance := tmp ;
39889: LD_ADDR_VAR 0 10
39893: PUSH
39894: LD_VAR 0 9
39898: ST_TO_ADDR
// end ; end ;
39899: GO 39757
39901: POP
39902: POP
// end ;
39903: LD_VAR 0 5
39907: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39908: LD_INT 0
39910: PPUSH
39911: PPUSH
// if not driver or not IsInUnit ( driver ) then
39912: LD_VAR 0 1
39916: NOT
39917: IFTRUE 39931
39919: PUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 310
39929: NOT
39930: OR
39931: IFFALSE 39935
// exit ;
39933: GO 40025
// vehicle := IsInUnit ( driver ) ;
39935: LD_ADDR_VAR 0 3
39939: PUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 310
39949: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_STRING \
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: PUSH
39985: LD_STRING E
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: LD_VAR 0 3
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PPUSH
40021: CALL_OW 446
// end ;
40025: LD_VAR 0 2
40029: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40030: LD_INT 0
40032: PPUSH
40033: PPUSH
// if not driver or not IsInUnit ( driver ) then
40034: LD_VAR 0 1
40038: NOT
40039: IFTRUE 40053
40041: PUSH
40042: LD_VAR 0 1
40046: PPUSH
40047: CALL_OW 310
40051: NOT
40052: OR
40053: IFFALSE 40057
// exit ;
40055: GO 40147
// vehicle := IsInUnit ( driver ) ;
40057: LD_ADDR_VAR 0 3
40061: PUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 310
40071: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40072: LD_VAR 0 1
40076: PPUSH
40077: LD_STRING \
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: PUSH
40107: LD_STRING E
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_VAR 0 3
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PPUSH
40143: CALL_OW 447
// end ;
40147: LD_VAR 0 2
40151: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40152: LD_INT 0
40154: PPUSH
40155: PPUSH
40156: PPUSH
// tmp := [ ] ;
40157: LD_ADDR_VAR 0 5
40161: PUSH
40162: EMPTY
40163: ST_TO_ADDR
// for i in units do
40164: LD_ADDR_VAR 0 4
40168: PUSH
40169: LD_VAR 0 1
40173: PUSH
40174: FOR_IN
40175: IFFALSE 40213
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40177: LD_ADDR_VAR 0 5
40181: PUSH
40182: LD_VAR 0 5
40186: PPUSH
40187: LD_VAR 0 5
40191: PUSH
40192: LD_INT 1
40194: PLUS
40195: PPUSH
40196: LD_VAR 0 4
40200: PPUSH
40201: CALL_OW 256
40205: PPUSH
40206: CALL_OW 2
40210: ST_TO_ADDR
40211: GO 40174
40213: POP
40214: POP
// if not tmp then
40215: LD_VAR 0 5
40219: NOT
40220: IFFALSE 40224
// exit ;
40222: GO 40272
// if asc then
40224: LD_VAR 0 2
40228: IFFALSE 40252
// result := SortListByListAsc ( units , tmp ) else
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: LD_VAR 0 5
40244: PPUSH
40245: CALL_OW 76
40249: ST_TO_ADDR
40250: GO 40272
// result := SortListByListDesc ( units , tmp ) ;
40252: LD_ADDR_VAR 0 3
40256: PUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: LD_VAR 0 5
40266: PPUSH
40267: CALL_OW 77
40271: ST_TO_ADDR
// end ;
40272: LD_VAR 0 3
40276: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40277: LD_INT 0
40279: PPUSH
40280: PPUSH
// task := GetTaskList ( mech ) ;
40281: LD_ADDR_VAR 0 4
40285: PUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 437
40295: ST_TO_ADDR
// if not task then
40296: LD_VAR 0 4
40300: NOT
40301: IFFALSE 40305
// exit ;
40303: GO 40349
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40305: LD_ADDR_VAR 0 3
40309: PUSH
40310: LD_VAR 0 4
40314: PUSH
40315: LD_INT 1
40317: ARRAY
40318: PUSH
40319: LD_INT 1
40321: ARRAY
40322: PUSH
40323: LD_STRING r
40325: EQUAL
40326: IFFALSE 40348
40328: PUSH
40329: LD_VAR 0 4
40333: PUSH
40334: LD_INT 1
40336: ARRAY
40337: PUSH
40338: LD_INT 4
40340: ARRAY
40341: PUSH
40342: LD_VAR 0 2
40346: EQUAL
40347: AND
40348: ST_TO_ADDR
// end ;
40349: LD_VAR 0 3
40353: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40354: LD_INT 0
40356: PPUSH
// SetDir ( unit , d ) ;
40357: LD_VAR 0 1
40361: PPUSH
40362: LD_VAR 0 4
40366: PPUSH
40367: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40371: LD_ADDR_VAR 0 6
40375: PUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: LD_VAR 0 2
40385: PPUSH
40386: LD_VAR 0 3
40390: PPUSH
40391: LD_VAR 0 5
40395: PPUSH
40396: CALL_OW 48
40400: ST_TO_ADDR
// end ;
40401: LD_VAR 0 6
40405: RET
// export function ToNaturalNumber ( number ) ; begin
40406: LD_INT 0
40408: PPUSH
// result := number div 1 ;
40409: LD_ADDR_VAR 0 2
40413: PUSH
40414: LD_VAR 0 1
40418: PUSH
40419: LD_INT 1
40421: DIV
40422: ST_TO_ADDR
// if number < 0 then
40423: LD_VAR 0 1
40427: PUSH
40428: LD_INT 0
40430: LESS
40431: IFFALSE 40441
// result := 0 ;
40433: LD_ADDR_VAR 0 2
40437: PUSH
40438: LD_INT 0
40440: ST_TO_ADDR
// end ;
40441: LD_VAR 0 2
40445: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40446: LD_INT 0
40448: PPUSH
40449: PPUSH
40450: PPUSH
// if not buildings then
40451: LD_VAR 0 1
40455: NOT
40456: IFFALSE 40460
// exit ;
40458: GO 40575
// tmp := [ ] ;
40460: LD_ADDR_VAR 0 5
40464: PUSH
40465: EMPTY
40466: ST_TO_ADDR
// for b in buildings do
40467: LD_ADDR_VAR 0 4
40471: PUSH
40472: LD_VAR 0 1
40476: PUSH
40477: FOR_IN
40478: IFFALSE 40516
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40480: LD_ADDR_VAR 0 5
40484: PUSH
40485: LD_VAR 0 5
40489: PPUSH
40490: LD_VAR 0 5
40494: PUSH
40495: LD_INT 1
40497: PLUS
40498: PPUSH
40499: LD_VAR 0 4
40503: PPUSH
40504: CALL_OW 266
40508: PPUSH
40509: CALL_OW 1
40513: ST_TO_ADDR
40514: GO 40477
40516: POP
40517: POP
// if not tmp then
40518: LD_VAR 0 5
40522: NOT
40523: IFFALSE 40527
// exit ;
40525: GO 40575
// if asc then
40527: LD_VAR 0 2
40531: IFFALSE 40555
// result := SortListByListAsc ( buildings , tmp ) else
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: LD_VAR 0 5
40547: PPUSH
40548: CALL_OW 76
40552: ST_TO_ADDR
40553: GO 40575
// result := SortListByListDesc ( buildings , tmp ) ;
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_VAR 0 1
40564: PPUSH
40565: LD_VAR 0 5
40569: PPUSH
40570: CALL_OW 77
40574: ST_TO_ADDR
// end ;
40575: LD_VAR 0 3
40579: RET
// export function SortByClass ( units , class ) ; var un ; begin
40580: LD_INT 0
40582: PPUSH
40583: PPUSH
// if not units or not class then
40584: LD_VAR 0 1
40588: NOT
40589: IFTRUE 40598
40591: PUSH
40592: LD_VAR 0 2
40596: NOT
40597: OR
40598: IFFALSE 40602
// exit ;
40600: GO 40697
// result := [ ] ;
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: EMPTY
40608: ST_TO_ADDR
// for un in units do
40609: LD_ADDR_VAR 0 4
40613: PUSH
40614: LD_VAR 0 1
40618: PUSH
40619: FOR_IN
40620: IFFALSE 40695
// if GetClass ( un ) = class then
40622: LD_VAR 0 4
40626: PPUSH
40627: CALL_OW 257
40631: PUSH
40632: LD_VAR 0 2
40636: EQUAL
40637: IFFALSE 40664
// result := Insert ( result , 1 , un ) else
40639: LD_ADDR_VAR 0 3
40643: PUSH
40644: LD_VAR 0 3
40648: PPUSH
40649: LD_INT 1
40651: PPUSH
40652: LD_VAR 0 4
40656: PPUSH
40657: CALL_OW 2
40661: ST_TO_ADDR
40662: GO 40693
// result := Replace ( result , result + 1 , un ) ;
40664: LD_ADDR_VAR 0 3
40668: PUSH
40669: LD_VAR 0 3
40673: PPUSH
40674: LD_VAR 0 3
40678: PUSH
40679: LD_INT 1
40681: PLUS
40682: PPUSH
40683: LD_VAR 0 4
40687: PPUSH
40688: CALL_OW 1
40692: ST_TO_ADDR
40693: GO 40619
40695: POP
40696: POP
// end ;
40697: LD_VAR 0 3
40701: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40702: LD_INT 0
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
40709: PPUSH
40710: PPUSH
// result := [ ] ;
40711: LD_ADDR_VAR 0 4
40715: PUSH
40716: EMPTY
40717: ST_TO_ADDR
// if x - r < 0 then
40718: LD_VAR 0 1
40722: PUSH
40723: LD_VAR 0 3
40727: MINUS
40728: PUSH
40729: LD_INT 0
40731: LESS
40732: IFFALSE 40744
// min_x := 0 else
40734: LD_ADDR_VAR 0 8
40738: PUSH
40739: LD_INT 0
40741: ST_TO_ADDR
40742: GO 40760
// min_x := x - r ;
40744: LD_ADDR_VAR 0 8
40748: PUSH
40749: LD_VAR 0 1
40753: PUSH
40754: LD_VAR 0 3
40758: MINUS
40759: ST_TO_ADDR
// if y - r < 0 then
40760: LD_VAR 0 2
40764: PUSH
40765: LD_VAR 0 3
40769: MINUS
40770: PUSH
40771: LD_INT 0
40773: LESS
40774: IFFALSE 40786
// min_y := 0 else
40776: LD_ADDR_VAR 0 7
40780: PUSH
40781: LD_INT 0
40783: ST_TO_ADDR
40784: GO 40802
// min_y := y - r ;
40786: LD_ADDR_VAR 0 7
40790: PUSH
40791: LD_VAR 0 2
40795: PUSH
40796: LD_VAR 0 3
40800: MINUS
40801: ST_TO_ADDR
// max_x := x + r ;
40802: LD_ADDR_VAR 0 9
40806: PUSH
40807: LD_VAR 0 1
40811: PUSH
40812: LD_VAR 0 3
40816: PLUS
40817: ST_TO_ADDR
// max_y := y + r ;
40818: LD_ADDR_VAR 0 10
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_VAR 0 3
40832: PLUS
40833: ST_TO_ADDR
// for _x = min_x to max_x do
40834: LD_ADDR_VAR 0 5
40838: PUSH
40839: DOUBLE
40840: LD_VAR 0 8
40844: DEC
40845: ST_TO_ADDR
40846: LD_VAR 0 9
40850: PUSH
40851: FOR_TO
40852: IFFALSE 40953
// for _y = min_y to max_y do
40854: LD_ADDR_VAR 0 6
40858: PUSH
40859: DOUBLE
40860: LD_VAR 0 7
40864: DEC
40865: ST_TO_ADDR
40866: LD_VAR 0 10
40870: PUSH
40871: FOR_TO
40872: IFFALSE 40949
// begin if not ValidHex ( _x , _y ) then
40874: LD_VAR 0 5
40878: PPUSH
40879: LD_VAR 0 6
40883: PPUSH
40884: CALL_OW 488
40888: NOT
40889: IFFALSE 40893
// continue ;
40891: GO 40871
// if GetResourceTypeXY ( _x , _y ) then
40893: LD_VAR 0 5
40897: PPUSH
40898: LD_VAR 0 6
40902: PPUSH
40903: CALL_OW 283
40907: IFFALSE 40947
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40909: LD_ADDR_VAR 0 4
40913: PUSH
40914: LD_VAR 0 4
40918: PPUSH
40919: LD_VAR 0 4
40923: PUSH
40924: LD_INT 1
40926: PLUS
40927: PPUSH
40928: LD_VAR 0 5
40932: PUSH
40933: LD_VAR 0 6
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PPUSH
40942: CALL_OW 1
40946: ST_TO_ADDR
// end ;
40947: GO 40871
40949: POP
40950: POP
40951: GO 40851
40953: POP
40954: POP
// end ;
40955: LD_VAR 0 4
40959: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40960: LD_INT 0
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
// if not units then
40970: LD_VAR 0 1
40974: NOT
40975: IFFALSE 40979
// exit ;
40977: GO 41511
// result := UnitFilter ( units , [ f_ok ] ) ;
40979: LD_ADDR_VAR 0 3
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: LD_INT 50
40991: PUSH
40992: EMPTY
40993: LIST
40994: PPUSH
40995: CALL_OW 72
40999: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_VAR 0 1
41009: PUSH
41010: LD_INT 1
41012: ARRAY
41013: PPUSH
41014: CALL_OW 255
41018: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41019: LD_ADDR_VAR 0 10
41023: PUSH
41024: LD_INT 29
41026: PUSH
41027: LD_INT 91
41029: PUSH
41030: LD_INT 49
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
// if not result then
41038: LD_VAR 0 3
41042: NOT
41043: IFFALSE 41047
// exit ;
41045: GO 41511
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41047: LD_ADDR_VAR 0 5
41051: PUSH
41052: LD_INT 81
41054: PUSH
41055: LD_VAR 0 8
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PPUSH
41064: CALL_OW 69
41068: ST_TO_ADDR
// for i in result do
41069: LD_ADDR_VAR 0 4
41073: PUSH
41074: LD_VAR 0 3
41078: PUSH
41079: FOR_IN
41080: IFFALSE 41509
// begin tag := GetTag ( i ) + 1 ;
41082: LD_ADDR_VAR 0 9
41086: PUSH
41087: LD_VAR 0 4
41091: PPUSH
41092: CALL_OW 110
41096: PUSH
41097: LD_INT 1
41099: PLUS
41100: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41101: LD_ADDR_VAR 0 7
41105: PUSH
41106: LD_VAR 0 4
41110: PPUSH
41111: CALL_OW 250
41115: PPUSH
41116: LD_VAR 0 4
41120: PPUSH
41121: CALL_OW 251
41125: PPUSH
41126: LD_INT 4
41128: PPUSH
41129: CALL 40702 0 3
41133: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41134: LD_VAR 0 4
41138: PPUSH
41139: CALL_OW 247
41143: PUSH
41144: LD_INT 2
41146: EQUAL
41147: IFFALSE 41159
41149: PUSH
41150: LD_VAR 0 7
41154: PUSH
41155: LD_INT 2
41157: GREATER
41158: AND
41159: IFFALSE 41179
41161: PUSH
41162: LD_VAR 0 4
41166: PPUSH
41167: CALL_OW 264
41171: PUSH
41172: LD_VAR 0 10
41176: IN
41177: NOT
41178: AND
41179: IFFALSE 41218
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41181: LD_VAR 0 4
41185: PPUSH
41186: LD_VAR 0 7
41190: PUSH
41191: LD_INT 1
41193: ARRAY
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: PPUSH
41199: LD_VAR 0 7
41203: PUSH
41204: LD_INT 1
41206: ARRAY
41207: PUSH
41208: LD_INT 2
41210: ARRAY
41211: PPUSH
41212: CALL_OW 116
41216: GO 41507
// if path > tag then
41218: LD_VAR 0 2
41222: PUSH
41223: LD_VAR 0 9
41227: GREATER
41228: IFFALSE 41436
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41230: LD_ADDR_VAR 0 6
41234: PUSH
41235: LD_VAR 0 5
41239: PPUSH
41240: LD_INT 91
41242: PUSH
41243: LD_VAR 0 4
41247: PUSH
41248: LD_INT 8
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: PPUSH
41256: CALL_OW 72
41260: ST_TO_ADDR
// if nearEnemy then
41261: LD_VAR 0 6
41265: IFFALSE 41334
// begin if GetWeapon ( i ) = ru_time_lapser then
41267: LD_VAR 0 4
41271: PPUSH
41272: CALL_OW 264
41276: PUSH
41277: LD_INT 49
41279: EQUAL
41280: IFFALSE 41308
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41282: LD_VAR 0 4
41286: PPUSH
41287: LD_VAR 0 6
41291: PPUSH
41292: LD_VAR 0 4
41296: PPUSH
41297: CALL_OW 74
41301: PPUSH
41302: CALL_OW 112
41306: GO 41332
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41308: LD_VAR 0 4
41312: PPUSH
41313: LD_VAR 0 6
41317: PPUSH
41318: LD_VAR 0 4
41322: PPUSH
41323: CALL_OW 74
41327: PPUSH
41328: CALL 42592 0 2
// end else
41332: GO 41434
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41334: LD_VAR 0 4
41338: PPUSH
41339: LD_VAR 0 2
41343: PUSH
41344: LD_VAR 0 9
41348: ARRAY
41349: PUSH
41350: LD_INT 1
41352: ARRAY
41353: PPUSH
41354: LD_VAR 0 2
41358: PUSH
41359: LD_VAR 0 9
41363: ARRAY
41364: PUSH
41365: LD_INT 2
41367: ARRAY
41368: PPUSH
41369: CALL_OW 297
41373: PUSH
41374: LD_INT 6
41376: GREATER
41377: IFFALSE 41420
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41379: LD_VAR 0 4
41383: PPUSH
41384: LD_VAR 0 2
41388: PUSH
41389: LD_VAR 0 9
41393: ARRAY
41394: PUSH
41395: LD_INT 1
41397: ARRAY
41398: PPUSH
41399: LD_VAR 0 2
41403: PUSH
41404: LD_VAR 0 9
41408: ARRAY
41409: PUSH
41410: LD_INT 2
41412: ARRAY
41413: PPUSH
41414: CALL_OW 114
41418: GO 41434
// SetTag ( i , tag ) ;
41420: LD_VAR 0 4
41424: PPUSH
41425: LD_VAR 0 9
41429: PPUSH
41430: CALL_OW 109
// end else
41434: GO 41507
// if enemy then
41436: LD_VAR 0 5
41440: IFFALSE 41507
// begin if GetWeapon ( i ) = ru_time_lapser then
41442: LD_VAR 0 4
41446: PPUSH
41447: CALL_OW 264
41451: PUSH
41452: LD_INT 49
41454: EQUAL
41455: IFFALSE 41483
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41457: LD_VAR 0 4
41461: PPUSH
41462: LD_VAR 0 5
41466: PPUSH
41467: LD_VAR 0 4
41471: PPUSH
41472: CALL_OW 74
41476: PPUSH
41477: CALL_OW 112
41481: GO 41507
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41483: LD_VAR 0 4
41487: PPUSH
41488: LD_VAR 0 5
41492: PPUSH
41493: LD_VAR 0 4
41497: PPUSH
41498: CALL_OW 74
41502: PPUSH
41503: CALL 42592 0 2
// end ; end ;
41507: GO 41079
41509: POP
41510: POP
// end ;
41511: LD_VAR 0 3
41515: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41516: LD_INT 0
41518: PPUSH
41519: PPUSH
41520: PPUSH
// if not unit or IsInUnit ( unit ) then
41521: LD_VAR 0 1
41525: NOT
41526: IFTRUE 41539
41528: PUSH
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 310
41538: OR
41539: IFFALSE 41543
// exit ;
41541: GO 41634
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41543: LD_ADDR_VAR 0 4
41547: PUSH
41548: LD_VAR 0 1
41552: PPUSH
41553: CALL_OW 250
41557: PPUSH
41558: LD_VAR 0 2
41562: PPUSH
41563: LD_INT 1
41565: PPUSH
41566: CALL_OW 272
41570: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41571: LD_ADDR_VAR 0 5
41575: PUSH
41576: LD_VAR 0 1
41580: PPUSH
41581: CALL_OW 251
41585: PPUSH
41586: LD_VAR 0 2
41590: PPUSH
41591: LD_INT 1
41593: PPUSH
41594: CALL_OW 273
41598: ST_TO_ADDR
// if ValidHex ( x , y ) then
41599: LD_VAR 0 4
41603: PPUSH
41604: LD_VAR 0 5
41608: PPUSH
41609: CALL_OW 488
41613: IFFALSE 41634
// ComTurnXY ( unit , x , y ) ;
41615: LD_VAR 0 1
41619: PPUSH
41620: LD_VAR 0 4
41624: PPUSH
41625: LD_VAR 0 5
41629: PPUSH
41630: CALL_OW 118
// end ;
41634: LD_VAR 0 3
41638: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
// result := false ;
41643: LD_ADDR_VAR 0 3
41647: PUSH
41648: LD_INT 0
41650: ST_TO_ADDR
// if not units then
41651: LD_VAR 0 2
41655: NOT
41656: IFFALSE 41660
// exit ;
41658: GO 41705
// for i in units do
41660: LD_ADDR_VAR 0 4
41664: PUSH
41665: LD_VAR 0 2
41669: PUSH
41670: FOR_IN
41671: IFFALSE 41703
// if See ( side , i ) then
41673: LD_VAR 0 1
41677: PPUSH
41678: LD_VAR 0 4
41682: PPUSH
41683: CALL_OW 292
41687: IFFALSE 41701
// begin result := true ;
41689: LD_ADDR_VAR 0 3
41693: PUSH
41694: LD_INT 1
41696: ST_TO_ADDR
// exit ;
41697: POP
41698: POP
41699: GO 41705
// end ;
41701: GO 41670
41703: POP
41704: POP
// end ;
41705: LD_VAR 0 3
41709: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41710: LD_INT 0
41712: PPUSH
41713: PPUSH
41714: PPUSH
41715: PPUSH
// if not unit or not points then
41716: LD_VAR 0 1
41720: NOT
41721: IFTRUE 41730
41723: PUSH
41724: LD_VAR 0 2
41728: NOT
41729: OR
41730: IFFALSE 41734
// exit ;
41732: GO 41824
// dist := 99999 ;
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_INT 99999
41741: ST_TO_ADDR
// for i in points do
41742: LD_ADDR_VAR 0 4
41746: PUSH
41747: LD_VAR 0 2
41751: PUSH
41752: FOR_IN
41753: IFFALSE 41822
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41755: LD_ADDR_VAR 0 6
41759: PUSH
41760: LD_VAR 0 1
41764: PPUSH
41765: LD_VAR 0 4
41769: PUSH
41770: LD_INT 1
41772: ARRAY
41773: PPUSH
41774: LD_VAR 0 4
41778: PUSH
41779: LD_INT 2
41781: ARRAY
41782: PPUSH
41783: CALL_OW 297
41787: ST_TO_ADDR
// if tmpDist < dist then
41788: LD_VAR 0 6
41792: PUSH
41793: LD_VAR 0 5
41797: LESS
41798: IFFALSE 41820
// begin result := i ;
41800: LD_ADDR_VAR 0 3
41804: PUSH
41805: LD_VAR 0 4
41809: ST_TO_ADDR
// dist := tmpDist ;
41810: LD_ADDR_VAR 0 5
41814: PUSH
41815: LD_VAR 0 6
41819: ST_TO_ADDR
// end ; end ;
41820: GO 41752
41822: POP
41823: POP
// end ;
41824: LD_VAR 0 3
41828: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41829: LD_INT 0
41831: PPUSH
// uc_side := side ;
41832: LD_ADDR_OWVAR 20
41836: PUSH
41837: LD_VAR 0 1
41841: ST_TO_ADDR
// uc_nation := 3 ;
41842: LD_ADDR_OWVAR 21
41846: PUSH
41847: LD_INT 3
41849: ST_TO_ADDR
// vc_chassis := 25 ;
41850: LD_ADDR_OWVAR 37
41854: PUSH
41855: LD_INT 25
41857: ST_TO_ADDR
// vc_engine := engine_siberite ;
41858: LD_ADDR_OWVAR 39
41862: PUSH
41863: LD_INT 3
41865: ST_TO_ADDR
// vc_control := control_computer ;
41866: LD_ADDR_OWVAR 38
41870: PUSH
41871: LD_INT 3
41873: ST_TO_ADDR
// vc_weapon := 59 ;
41874: LD_ADDR_OWVAR 40
41878: PUSH
41879: LD_INT 59
41881: ST_TO_ADDR
// result := CreateVehicle ;
41882: LD_ADDR_VAR 0 5
41886: PUSH
41887: CALL_OW 45
41891: ST_TO_ADDR
// SetDir ( result , d ) ;
41892: LD_VAR 0 5
41896: PPUSH
41897: LD_VAR 0 4
41901: PPUSH
41902: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41906: LD_VAR 0 5
41910: PPUSH
41911: LD_VAR 0 2
41915: PPUSH
41916: LD_VAR 0 3
41920: PPUSH
41921: LD_INT 0
41923: PPUSH
41924: CALL_OW 48
// end ;
41928: LD_VAR 0 5
41932: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41933: LD_INT 0
41935: PPUSH
41936: PPUSH
41937: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41938: LD_ADDR_VAR 0 2
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41961: LD_VAR 0 1
41965: NOT
41966: IFTRUE 41999
41968: PUSH
41969: LD_VAR 0 1
41973: PPUSH
41974: CALL_OW 264
41978: PUSH
41979: LD_INT 12
41981: PUSH
41982: LD_INT 51
41984: PUSH
41985: LD_INT 32
41987: PUSH
41988: LD_INT 89
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: IN
41997: NOT
41998: OR
41999: IFFALSE 42003
// exit ;
42001: GO 42101
// for i := 1 to 3 do
42003: LD_ADDR_VAR 0 3
42007: PUSH
42008: DOUBLE
42009: LD_INT 1
42011: DEC
42012: ST_TO_ADDR
42013: LD_INT 3
42015: PUSH
42016: FOR_TO
42017: IFFALSE 42099
// begin tmp := GetCargo ( cargo , i ) ;
42019: LD_ADDR_VAR 0 4
42023: PUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: LD_VAR 0 3
42033: PPUSH
42034: CALL_OW 289
42038: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42039: LD_ADDR_VAR 0 2
42043: PUSH
42044: LD_VAR 0 2
42048: PPUSH
42049: LD_VAR 0 3
42053: PPUSH
42054: LD_VAR 0 4
42058: PPUSH
42059: CALL_OW 1
42063: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42064: LD_ADDR_VAR 0 2
42068: PUSH
42069: LD_VAR 0 2
42073: PPUSH
42074: LD_INT 4
42076: PPUSH
42077: LD_VAR 0 2
42081: PUSH
42082: LD_INT 4
42084: ARRAY
42085: PUSH
42086: LD_VAR 0 4
42090: PLUS
42091: PPUSH
42092: CALL_OW 1
42096: ST_TO_ADDR
// end ;
42097: GO 42016
42099: POP
42100: POP
// end ;
42101: LD_VAR 0 2
42105: RET
// export function Length ( array ) ; begin
42106: LD_INT 0
42108: PPUSH
// result := array + 0 ;
42109: LD_ADDR_VAR 0 2
42113: PUSH
42114: LD_VAR 0 1
42118: PUSH
42119: LD_INT 0
42121: PLUS
42122: ST_TO_ADDR
// end ;
42123: LD_VAR 0 2
42127: RET
// export function PrepareArray ( array ) ; begin
42128: LD_INT 0
42130: PPUSH
// result := array diff 0 ;
42131: LD_ADDR_VAR 0 2
42135: PUSH
42136: LD_VAR 0 1
42140: PUSH
42141: LD_INT 0
42143: DIFF
42144: ST_TO_ADDR
// if not result [ 1 ] then
42145: LD_VAR 0 2
42149: PUSH
42150: LD_INT 1
42152: ARRAY
42153: NOT
42154: IFFALSE 42174
// result := Delete ( result , 1 ) ;
42156: LD_ADDR_VAR 0 2
42160: PUSH
42161: LD_VAR 0 2
42165: PPUSH
42166: LD_INT 1
42168: PPUSH
42169: CALL_OW 3
42173: ST_TO_ADDR
// end ;
42174: LD_VAR 0 2
42178: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42179: LD_INT 0
42181: PPUSH
42182: PPUSH
42183: PPUSH
42184: PPUSH
// sibRocketRange := 25 ;
42185: LD_ADDR_VAR 0 6
42189: PUSH
42190: LD_INT 25
42192: ST_TO_ADDR
// result := false ;
42193: LD_ADDR_VAR 0 4
42197: PUSH
42198: LD_INT 0
42200: ST_TO_ADDR
// for i := 0 to 5 do
42201: LD_ADDR_VAR 0 5
42205: PUSH
42206: DOUBLE
42207: LD_INT 0
42209: DEC
42210: ST_TO_ADDR
42211: LD_INT 5
42213: PUSH
42214: FOR_TO
42215: IFFALSE 42282
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42217: LD_VAR 0 1
42221: PPUSH
42222: LD_VAR 0 5
42226: PPUSH
42227: LD_VAR 0 6
42231: PPUSH
42232: CALL_OW 272
42236: PPUSH
42237: LD_VAR 0 2
42241: PPUSH
42242: LD_VAR 0 5
42246: PPUSH
42247: LD_VAR 0 6
42251: PPUSH
42252: CALL_OW 273
42256: PPUSH
42257: LD_VAR 0 3
42261: PPUSH
42262: CALL_OW 309
42266: IFFALSE 42280
// begin result := true ;
42268: LD_ADDR_VAR 0 4
42272: PUSH
42273: LD_INT 1
42275: ST_TO_ADDR
// exit ;
42276: POP
42277: POP
42278: GO 42284
// end ;
42280: GO 42214
42282: POP
42283: POP
// end ;
42284: LD_VAR 0 4
42288: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42289: LD_INT 0
42291: PPUSH
42292: PPUSH
42293: PPUSH
// if btype = b_depot then
42294: LD_VAR 0 2
42298: PUSH
42299: LD_INT 0
42301: EQUAL
42302: IFFALSE 42314
// begin result := true ;
42304: LD_ADDR_VAR 0 3
42308: PUSH
42309: LD_INT 1
42311: ST_TO_ADDR
// exit ;
42312: GO 42434
// end ; pom := GetBase ( depot ) ;
42314: LD_ADDR_VAR 0 4
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 274
42328: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42329: LD_ADDR_VAR 0 5
42333: PUSH
42334: LD_VAR 0 2
42338: PPUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 248
42348: PPUSH
42349: CALL_OW 450
42353: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_VAR 0 4
42363: PPUSH
42364: LD_INT 1
42366: PPUSH
42367: CALL_OW 275
42371: PUSH
42372: LD_VAR 0 5
42376: PUSH
42377: LD_INT 1
42379: ARRAY
42380: GREATEREQUAL
42381: IFFALSE 42407
42383: PUSH
42384: LD_VAR 0 4
42388: PPUSH
42389: LD_INT 2
42391: PPUSH
42392: CALL_OW 275
42396: PUSH
42397: LD_VAR 0 5
42401: PUSH
42402: LD_INT 2
42404: ARRAY
42405: GREATEREQUAL
42406: AND
42407: IFFALSE 42433
42409: PUSH
42410: LD_VAR 0 4
42414: PPUSH
42415: LD_INT 3
42417: PPUSH
42418: CALL_OW 275
42422: PUSH
42423: LD_VAR 0 5
42427: PUSH
42428: LD_INT 3
42430: ARRAY
42431: GREATEREQUAL
42432: AND
42433: ST_TO_ADDR
// end ;
42434: LD_VAR 0 3
42438: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42439: LD_INT 0
42441: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42442: LD_VAR 0 1
42446: PPUSH
42447: LD_VAR 0 2
42451: PPUSH
42452: LD_INT 0
42454: PPUSH
42455: LD_INT 0
42457: PPUSH
42458: LD_INT 1
42460: PPUSH
42461: LD_INT 0
42463: PPUSH
42464: CALL_OW 587
// end ;
42468: LD_VAR 0 3
42472: RET
// export function CenterOnNow ( unit ) ; begin
42473: LD_INT 0
42475: PPUSH
// result := IsInUnit ( unit ) ;
42476: LD_ADDR_VAR 0 2
42480: PUSH
42481: LD_VAR 0 1
42485: PPUSH
42486: CALL_OW 310
42490: ST_TO_ADDR
// if not result then
42491: LD_VAR 0 2
42495: NOT
42496: IFFALSE 42508
// result := unit ;
42498: LD_ADDR_VAR 0 2
42502: PUSH
42503: LD_VAR 0 1
42507: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 87
// end ;
42517: LD_VAR 0 2
42521: RET
// export function ComMoveHex ( unit , hex ) ; begin
42522: LD_INT 0
42524: PPUSH
// if not hex then
42525: LD_VAR 0 2
42529: NOT
42530: IFFALSE 42534
// exit ;
42532: GO 42587
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42534: LD_VAR 0 2
42538: PUSH
42539: LD_INT 1
42541: ARRAY
42542: PPUSH
42543: LD_VAR 0 2
42547: PUSH
42548: LD_INT 2
42550: ARRAY
42551: PPUSH
42552: CALL_OW 428
42556: IFFALSE 42560
// exit ;
42558: GO 42587
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42560: LD_VAR 0 1
42564: PPUSH
42565: LD_VAR 0 2
42569: PUSH
42570: LD_INT 1
42572: ARRAY
42573: PPUSH
42574: LD_VAR 0 2
42578: PUSH
42579: LD_INT 2
42581: ARRAY
42582: PPUSH
42583: CALL_OW 111
// end ;
42587: LD_VAR 0 3
42591: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42592: LD_INT 0
42594: PPUSH
42595: PPUSH
42596: PPUSH
// if not unit or not enemy then
42597: LD_VAR 0 1
42601: NOT
42602: IFTRUE 42611
42604: PUSH
42605: LD_VAR 0 2
42609: NOT
42610: OR
42611: IFFALSE 42615
// exit ;
42613: GO 42741
// x := GetX ( enemy ) ;
42615: LD_ADDR_VAR 0 4
42619: PUSH
42620: LD_VAR 0 2
42624: PPUSH
42625: CALL_OW 250
42629: ST_TO_ADDR
// y := GetY ( enemy ) ;
42630: LD_ADDR_VAR 0 5
42634: PUSH
42635: LD_VAR 0 2
42639: PPUSH
42640: CALL_OW 251
42644: ST_TO_ADDR
// if ValidHex ( x , y ) then
42645: LD_VAR 0 4
42649: PPUSH
42650: LD_VAR 0 5
42654: PPUSH
42655: CALL_OW 488
42659: IFFALSE 42741
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42661: LD_VAR 0 2
42665: PPUSH
42666: CALL_OW 247
42670: PUSH
42671: LD_INT 3
42673: PUSH
42674: LD_INT 2
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: IN
42681: IFTRUE 42704
42683: PUSH
42684: LD_VAR 0 1
42688: PPUSH
42689: CALL_OW 255
42693: PPUSH
42694: LD_VAR 0 2
42698: PPUSH
42699: CALL_OW 292
42703: OR
42704: IFFALSE 42722
// ComAttackUnit ( unit , enemy ) else
42706: LD_VAR 0 1
42710: PPUSH
42711: LD_VAR 0 2
42715: PPUSH
42716: CALL_OW 115
42720: GO 42741
// ComAgressiveMove ( unit , x , y ) ;
42722: LD_VAR 0 1
42726: PPUSH
42727: LD_VAR 0 4
42731: PPUSH
42732: LD_VAR 0 5
42736: PPUSH
42737: CALL_OW 114
// end ;
42741: LD_VAR 0 3
42745: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42746: LD_INT 0
42748: PPUSH
42749: PPUSH
42750: PPUSH
// list := AreaToList ( area , 0 ) ;
42751: LD_ADDR_VAR 0 5
42755: PUSH
42756: LD_VAR 0 1
42760: PPUSH
42761: LD_INT 0
42763: PPUSH
42764: CALL_OW 517
42768: ST_TO_ADDR
// if not list then
42769: LD_VAR 0 5
42773: NOT
42774: IFFALSE 42778
// exit ;
42776: GO 42908
// if all then
42778: LD_VAR 0 2
42782: IFFALSE 42870
// begin for i := 1 to list [ 1 ] do
42784: LD_ADDR_VAR 0 4
42788: PUSH
42789: DOUBLE
42790: LD_INT 1
42792: DEC
42793: ST_TO_ADDR
42794: LD_VAR 0 5
42798: PUSH
42799: LD_INT 1
42801: ARRAY
42802: PUSH
42803: FOR_TO
42804: IFFALSE 42866
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_VAR 0 3
42815: PPUSH
42816: LD_VAR 0 3
42820: PUSH
42821: LD_INT 1
42823: PLUS
42824: PPUSH
42825: LD_VAR 0 5
42829: PUSH
42830: LD_INT 1
42832: ARRAY
42833: PUSH
42834: LD_VAR 0 4
42838: ARRAY
42839: PUSH
42840: LD_VAR 0 5
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: PUSH
42849: LD_VAR 0 4
42853: ARRAY
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PPUSH
42859: CALL_OW 1
42863: ST_TO_ADDR
42864: GO 42803
42866: POP
42867: POP
// exit ;
42868: GO 42908
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42870: LD_ADDR_VAR 0 3
42874: PUSH
42875: LD_VAR 0 5
42879: PUSH
42880: LD_INT 1
42882: ARRAY
42883: PUSH
42884: LD_INT 1
42886: ARRAY
42887: PUSH
42888: LD_VAR 0 5
42892: PUSH
42893: LD_INT 2
42895: ARRAY
42896: PUSH
42897: LD_INT 1
42899: ARRAY
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: ST_TO_ADDR
// end ;
42908: LD_VAR 0 3
42912: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42913: LD_INT 0
42915: PPUSH
42916: PPUSH
// list := AreaToList ( area , 0 ) ;
42917: LD_ADDR_VAR 0 4
42921: PUSH
42922: LD_VAR 0 1
42926: PPUSH
42927: LD_INT 0
42929: PPUSH
42930: CALL_OW 517
42934: ST_TO_ADDR
// if not list then
42935: LD_VAR 0 4
42939: NOT
42940: IFFALSE 42944
// exit ;
42942: GO 42985
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
42944: LD_ADDR_VAR 0 3
42948: PUSH
42949: LD_VAR 0 4
42953: PUSH
42954: LD_INT 1
42956: ARRAY
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PUSH
42962: LD_VAR 0 4
42966: PUSH
42967: LD_INT 2
42969: ARRAY
42970: PUSH
42971: LD_INT 1
42973: ARRAY
42974: PUSH
42975: LD_VAR 0 2
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: ST_TO_ADDR
// end ;
42985: LD_VAR 0 3
42989: RET
// export function First ( array ) ; begin
42990: LD_INT 0
42992: PPUSH
// if not array then
42993: LD_VAR 0 1
42997: NOT
42998: IFFALSE 43002
// exit ;
43000: GO 43016
// result := array [ 1 ] ;
43002: LD_ADDR_VAR 0 2
43006: PUSH
43007: LD_VAR 0 1
43011: PUSH
43012: LD_INT 1
43014: ARRAY
43015: ST_TO_ADDR
// end ;
43016: LD_VAR 0 2
43020: RET
// export function Last ( array ) ; begin
43021: LD_INT 0
43023: PPUSH
// if not array then
43024: LD_VAR 0 1
43028: NOT
43029: IFFALSE 43033
// exit ;
43031: GO 43049
// result := array [ array ] ;
43033: LD_ADDR_VAR 0 2
43037: PUSH
43038: LD_VAR 0 1
43042: PUSH
43043: LD_VAR 0 1
43047: ARRAY
43048: ST_TO_ADDR
// end ;
43049: LD_VAR 0 2
43053: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
// result := [ ] ;
43058: LD_ADDR_VAR 0 5
43062: PUSH
43063: EMPTY
43064: ST_TO_ADDR
// if not array then
43065: LD_VAR 0 1
43069: NOT
43070: IFFALSE 43074
// exit ;
43072: GO 43186
// for i := 1 to array do
43074: LD_ADDR_VAR 0 6
43078: PUSH
43079: DOUBLE
43080: LD_INT 1
43082: DEC
43083: ST_TO_ADDR
43084: LD_VAR 0 1
43088: PUSH
43089: FOR_TO
43090: IFFALSE 43184
// if array [ i ] [ index ] = value then
43092: LD_VAR 0 1
43096: PUSH
43097: LD_VAR 0 6
43101: ARRAY
43102: PUSH
43103: LD_VAR 0 2
43107: ARRAY
43108: PUSH
43109: LD_VAR 0 3
43113: EQUAL
43114: IFFALSE 43182
// begin if indexColumn then
43116: LD_VAR 0 4
43120: IFFALSE 43156
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43122: LD_ADDR_VAR 0 5
43126: PUSH
43127: LD_VAR 0 5
43131: PPUSH
43132: LD_VAR 0 1
43136: PUSH
43137: LD_VAR 0 6
43141: ARRAY
43142: PUSH
43143: LD_VAR 0 4
43147: ARRAY
43148: PPUSH
43149: CALL 38194 0 2
43153: ST_TO_ADDR
43154: GO 43182
// result := Join ( result , array [ i ] ) ;
43156: LD_ADDR_VAR 0 5
43160: PUSH
43161: LD_VAR 0 5
43165: PPUSH
43166: LD_VAR 0 1
43170: PUSH
43171: LD_VAR 0 6
43175: ARRAY
43176: PPUSH
43177: CALL 38194 0 2
43181: ST_TO_ADDR
// end ;
43182: GO 43089
43184: POP
43185: POP
// end ;
43186: LD_VAR 0 5
43190: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43191: LD_INT 0
43193: PPUSH
// if not vehicles or not parkingPoint then
43194: LD_VAR 0 1
43198: NOT
43199: IFTRUE 43208
43201: PUSH
43202: LD_VAR 0 2
43206: NOT
43207: OR
43208: IFFALSE 43212
// exit ;
43210: GO 43310
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43212: LD_ADDR_VAR 0 1
43216: PUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: LD_INT 50
43224: PUSH
43225: EMPTY
43226: LIST
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 92
43233: PUSH
43234: LD_VAR 0 2
43238: PUSH
43239: LD_INT 1
43241: ARRAY
43242: PUSH
43243: LD_VAR 0 2
43247: PUSH
43248: LD_INT 2
43250: ARRAY
43251: PUSH
43252: LD_INT 8
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PPUSH
43269: CALL_OW 72
43273: ST_TO_ADDR
// if not vehicles then
43274: LD_VAR 0 1
43278: NOT
43279: IFFALSE 43283
// exit ;
43281: GO 43310
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43283: LD_VAR 0 1
43287: PPUSH
43288: LD_VAR 0 2
43292: PUSH
43293: LD_INT 1
43295: ARRAY
43296: PPUSH
43297: LD_VAR 0 2
43301: PUSH
43302: LD_INT 2
43304: ARRAY
43305: PPUSH
43306: CALL_OW 111
// end ;
43310: LD_VAR 0 3
43314: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43315: LD_INT 0
43317: PPUSH
43318: PPUSH
43319: PPUSH
// if not side or not area then
43320: LD_VAR 0 1
43324: NOT
43325: IFTRUE 43334
43327: PUSH
43328: LD_VAR 0 2
43332: NOT
43333: OR
43334: IFFALSE 43338
// exit ;
43336: GO 43457
// tmp := AreaToList ( area , 0 ) ;
43338: LD_ADDR_VAR 0 5
43342: PUSH
43343: LD_VAR 0 2
43347: PPUSH
43348: LD_INT 0
43350: PPUSH
43351: CALL_OW 517
43355: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43356: LD_ADDR_VAR 0 4
43360: PUSH
43361: DOUBLE
43362: LD_INT 1
43364: DEC
43365: ST_TO_ADDR
43366: LD_VAR 0 5
43370: PUSH
43371: LD_INT 1
43373: ARRAY
43374: PUSH
43375: FOR_TO
43376: IFFALSE 43455
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43378: LD_VAR 0 5
43382: PUSH
43383: LD_INT 1
43385: ARRAY
43386: PUSH
43387: LD_VAR 0 4
43391: ARRAY
43392: PPUSH
43393: LD_VAR 0 5
43397: PUSH
43398: LD_INT 2
43400: ARRAY
43401: PUSH
43402: LD_VAR 0 4
43406: ARRAY
43407: PPUSH
43408: CALL_OW 351
43412: IFFALSE 43453
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43414: LD_VAR 0 5
43418: PUSH
43419: LD_INT 1
43421: ARRAY
43422: PUSH
43423: LD_VAR 0 4
43427: ARRAY
43428: PPUSH
43429: LD_VAR 0 5
43433: PUSH
43434: LD_INT 2
43436: ARRAY
43437: PUSH
43438: LD_VAR 0 4
43442: ARRAY
43443: PPUSH
43444: LD_VAR 0 1
43448: PPUSH
43449: CALL_OW 244
// end ;
43453: GO 43375
43455: POP
43456: POP
// end ;
43457: LD_VAR 0 3
43461: RET
// export function UniqueArray ( array ) ; var i ; begin
43462: LD_INT 0
43464: PPUSH
43465: PPUSH
// result := [ ] ;
43466: LD_ADDR_VAR 0 2
43470: PUSH
43471: EMPTY
43472: ST_TO_ADDR
// if not array then
43473: LD_VAR 0 1
43477: NOT
43478: IFFALSE 43482
// exit ;
43480: GO 43543
// for i := 1 to array do
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: DOUBLE
43488: LD_INT 1
43490: DEC
43491: ST_TO_ADDR
43492: LD_VAR 0 1
43496: PUSH
43497: FOR_TO
43498: IFFALSE 43541
// if not array [ i ] in result then
43500: LD_VAR 0 1
43504: PUSH
43505: LD_VAR 0 3
43509: ARRAY
43510: PUSH
43511: LD_VAR 0 2
43515: IN
43516: NOT
43517: IFFALSE 43539
// result := Join ( result , i ) ;
43519: LD_ADDR_VAR 0 2
43523: PUSH
43524: LD_VAR 0 2
43528: PPUSH
43529: LD_VAR 0 3
43533: PPUSH
43534: CALL 38194 0 2
43538: ST_TO_ADDR
43539: GO 43497
43541: POP
43542: POP
// end ;
43543: LD_VAR 0 2
43547: RET
