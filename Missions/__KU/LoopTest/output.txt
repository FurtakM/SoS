// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// function K ( x ) ; begin
   5: LD_INT 0
   7: PPUSH
// if x = 0 then
   8: LD_VAR 0 1
  12: PUSH
  13: LD_INT 0
  15: EQUAL
  16: IFFALSE 20
// exit ;
  18: GO 40
// result := K ( Dec ( x ) ) ;
  20: LD_ADDR_VAR 0 2
  24: PUSH
  25: LD_VAR 0 1
  29: PPUSH
  30: CALL 39657 0 1
  34: PPUSH
  35: CALL 5 0 1
  39: ST_TO_ADDR
// end ;
  40: LD_VAR 0 2
  44: RET
// every 0 0$1 do
  45: GO 47
  47: DISABLE
// display_strings := K ( 10 ) ; end_of_file
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_INT 10
  55: PPUSH
  56: CALL 5 0 1
  60: ST_TO_ADDR
  61: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  62: LD_INT 0
  64: PPUSH
  65: PPUSH
// if exist_mode then
  66: LD_VAR 0 2
  70: IFFALSE 116
// begin unit := CreateCharacter ( prefix & ident ) ;
  72: LD_ADDR_VAR 0 5
  76: PUSH
  77: LD_VAR 0 3
  81: PUSH
  82: LD_VAR 0 1
  86: STR
  87: PPUSH
  88: CALL_OW 34
  92: ST_TO_ADDR
// if unit then
  93: LD_VAR 0 5
  97: IFFALSE 114
// DeleteCharacters ( prefix & ident ) ;
  99: LD_VAR 0 3
 103: PUSH
 104: LD_VAR 0 1
 108: STR
 109: PPUSH
 110: CALL_OW 40
// end else
 114: GO 131
// unit := NewCharacter ( ident ) ;
 116: LD_ADDR_VAR 0 5
 120: PUSH
 121: LD_VAR 0 1
 125: PPUSH
 126: CALL_OW 25
 130: ST_TO_ADDR
// result := unit ;
 131: LD_ADDR_VAR 0 4
 135: PUSH
 136: LD_VAR 0 5
 140: ST_TO_ADDR
// end ;
 141: LD_VAR 0 4
 145: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 146: LD_INT 0
 148: PPUSH
 149: PPUSH
// if exist_mode then
 150: LD_VAR 0 2
 154: IFFALSE 179
// unit := CreateCharacter ( prefix & ident ) else
 156: LD_ADDR_VAR 0 5
 160: PUSH
 161: LD_VAR 0 3
 165: PUSH
 166: LD_VAR 0 1
 170: STR
 171: PPUSH
 172: CALL_OW 34
 176: ST_TO_ADDR
 177: GO 194
// unit := NewCharacter ( ident ) ;
 179: LD_ADDR_VAR 0 5
 183: PUSH
 184: LD_VAR 0 1
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// result := unit ;
 194: LD_ADDR_VAR 0 4
 198: PUSH
 199: LD_VAR 0 5
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 4
 208: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 209: LD_INT 0
 211: PPUSH
 212: PPUSH
// if not side or not nation then
 213: LD_VAR 0 1
 217: NOT
 218: IFTRUE 227
 220: PUSH
 221: LD_VAR 0 2
 225: NOT
 226: OR
 227: IFFALSE 231
// exit ;
 229: GO 1025
// case nation of nation_american :
 231: LD_VAR 0 2
 235: PUSH
 236: LD_INT 1
 238: DOUBLE
 239: EQUAL
 240: IFTRUE 244
 242: GO 466
 244: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_INT 35
 252: PUSH
 253: LD_INT 45
 255: PUSH
 256: LD_INT 46
 258: PUSH
 259: LD_INT 47
 261: PUSH
 262: LD_INT 82
 264: PUSH
 265: LD_INT 83
 267: PUSH
 268: LD_INT 84
 270: PUSH
 271: LD_INT 85
 273: PUSH
 274: LD_INT 86
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 6
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 16
 291: PUSH
 292: LD_INT 7
 294: PUSH
 295: LD_INT 12
 297: PUSH
 298: LD_INT 13
 300: PUSH
 301: LD_INT 10
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 20
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 22
 315: PUSH
 316: LD_INT 25
 318: PUSH
 319: LD_INT 32
 321: PUSH
 322: LD_INT 27
 324: PUSH
 325: LD_INT 36
 327: PUSH
 328: LD_INT 69
 330: PUSH
 331: LD_INT 39
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 40
 339: PUSH
 340: LD_INT 48
 342: PUSH
 343: LD_INT 49
 345: PUSH
 346: LD_INT 50
 348: PUSH
 349: LD_INT 51
 351: PUSH
 352: LD_INT 52
 354: PUSH
 355: LD_INT 53
 357: PUSH
 358: LD_INT 54
 360: PUSH
 361: LD_INT 55
 363: PUSH
 364: LD_INT 56
 366: PUSH
 367: LD_INT 57
 369: PUSH
 370: LD_INT 58
 372: PUSH
 373: LD_INT 59
 375: PUSH
 376: LD_INT 60
 378: PUSH
 379: LD_INT 61
 381: PUSH
 382: LD_INT 62
 384: PUSH
 385: LD_INT 80
 387: PUSH
 388: LD_INT 82
 390: PUSH
 391: LD_INT 83
 393: PUSH
 394: LD_INT 84
 396: PUSH
 397: LD_INT 85
 399: PUSH
 400: LD_INT 86
 402: PUSH
 403: LD_INT 90
 405: PUSH
 406: LD_INT 93
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: ST_TO_ADDR
 464: GO 947
 466: LD_INT 2
 468: DOUBLE
 469: EQUAL
 470: IFTRUE 474
 472: GO 708
 474: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_INT 35
 482: PUSH
 483: LD_INT 45
 485: PUSH
 486: LD_INT 46
 488: PUSH
 489: LD_INT 47
 491: PUSH
 492: LD_INT 82
 494: PUSH
 495: LD_INT 83
 497: PUSH
 498: LD_INT 84
 500: PUSH
 501: LD_INT 85
 503: PUSH
 504: LD_INT 87
 506: PUSH
 507: LD_INT 70
 509: PUSH
 510: LD_INT 1
 512: PUSH
 513: LD_INT 11
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 5
 524: PUSH
 525: LD_INT 6
 527: PUSH
 528: LD_INT 15
 530: PUSH
 531: LD_INT 18
 533: PUSH
 534: LD_INT 7
 536: PUSH
 537: LD_INT 17
 539: PUSH
 540: LD_INT 8
 542: PUSH
 543: LD_INT 20
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 72
 554: PUSH
 555: LD_INT 26
 557: PUSH
 558: LD_INT 69
 560: PUSH
 561: LD_INT 39
 563: PUSH
 564: LD_INT 40
 566: PUSH
 567: LD_INT 41
 569: PUSH
 570: LD_INT 42
 572: PUSH
 573: LD_INT 43
 575: PUSH
 576: LD_INT 48
 578: PUSH
 579: LD_INT 49
 581: PUSH
 582: LD_INT 50
 584: PUSH
 585: LD_INT 51
 587: PUSH
 588: LD_INT 52
 590: PUSH
 591: LD_INT 53
 593: PUSH
 594: LD_INT 54
 596: PUSH
 597: LD_INT 55
 599: PUSH
 600: LD_INT 56
 602: PUSH
 603: LD_INT 60
 605: PUSH
 606: LD_INT 61
 608: PUSH
 609: LD_INT 62
 611: PUSH
 612: LD_INT 66
 614: PUSH
 615: LD_INT 67
 617: PUSH
 618: LD_INT 68
 620: PUSH
 621: LD_INT 81
 623: PUSH
 624: LD_INT 82
 626: PUSH
 627: LD_INT 83
 629: PUSH
 630: LD_INT 84
 632: PUSH
 633: LD_INT 85
 635: PUSH
 636: LD_INT 87
 638: PUSH
 639: LD_INT 88
 641: PUSH
 642: LD_INT 92
 644: PUSH
 645: LD_INT 94
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: ST_TO_ADDR
 706: GO 947
 708: LD_INT 3
 710: DOUBLE
 711: EQUAL
 712: IFTRUE 716
 714: GO 946
 716: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
 717: LD_ADDR_VAR 0 4
 721: PUSH
 722: LD_INT 46
 724: PUSH
 725: LD_INT 47
 727: PUSH
 728: LD_INT 1
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 82
 736: PUSH
 737: LD_INT 83
 739: PUSH
 740: LD_INT 84
 742: PUSH
 743: LD_INT 85
 745: PUSH
 746: LD_INT 86
 748: PUSH
 749: LD_INT 11
 751: PUSH
 752: LD_INT 9
 754: PUSH
 755: LD_INT 20
 757: PUSH
 758: LD_INT 19
 760: PUSH
 761: LD_INT 21
 763: PUSH
 764: LD_INT 24
 766: PUSH
 767: LD_INT 22
 769: PUSH
 770: LD_INT 25
 772: PUSH
 773: LD_INT 28
 775: PUSH
 776: LD_INT 29
 778: PUSH
 779: LD_INT 30
 781: PUSH
 782: LD_INT 31
 784: PUSH
 785: LD_INT 37
 787: PUSH
 788: LD_INT 38
 790: PUSH
 791: LD_INT 32
 793: PUSH
 794: LD_INT 27
 796: PUSH
 797: LD_INT 33
 799: PUSH
 800: LD_INT 69
 802: PUSH
 803: LD_INT 39
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 40
 811: PUSH
 812: LD_INT 71
 814: PUSH
 815: LD_INT 23
 817: PUSH
 818: LD_INT 44
 820: PUSH
 821: LD_INT 48
 823: PUSH
 824: LD_INT 49
 826: PUSH
 827: LD_INT 50
 829: PUSH
 830: LD_INT 51
 832: PUSH
 833: LD_INT 52
 835: PUSH
 836: LD_INT 53
 838: PUSH
 839: LD_INT 54
 841: PUSH
 842: LD_INT 55
 844: PUSH
 845: LD_INT 56
 847: PUSH
 848: LD_INT 57
 850: PUSH
 851: LD_INT 58
 853: PUSH
 854: LD_INT 59
 856: PUSH
 857: LD_INT 63
 859: PUSH
 860: LD_INT 64
 862: PUSH
 863: LD_INT 65
 865: PUSH
 866: LD_INT 82
 868: PUSH
 869: LD_INT 83
 871: PUSH
 872: LD_INT 84
 874: PUSH
 875: LD_INT 85
 877: PUSH
 878: LD_INT 86
 880: PUSH
 881: LD_INT 89
 883: PUSH
 884: LD_INT 91
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
 944: GO 947
 946: POP
// if state > - 1 and state < 3 then
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: NEG
 955: GREATER
 956: IFFALSE 968
 958: PUSH
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 3
 966: LESS
 967: AND
 968: IFFALSE 1025
// for i in result do
 970: LD_ADDR_VAR 0 5
 974: PUSH
 975: LD_VAR 0 4
 979: PUSH
 980: FOR_IN
 981: IFFALSE 1023
// if GetTech ( i , side ) <> state then
 983: LD_VAR 0 5
 987: PPUSH
 988: LD_VAR 0 1
 992: PPUSH
 993: CALL_OW 321
 997: PUSH
 998: LD_VAR 0 3
1002: NONEQUAL
1003: IFFALSE 1021
// result := result diff i ;
1005: LD_ADDR_VAR 0 4
1009: PUSH
1010: LD_VAR 0 4
1014: PUSH
1015: LD_VAR 0 5
1019: DIFF
1020: ST_TO_ADDR
1021: GO 980
1023: POP
1024: POP
// end ;
1025: LD_VAR 0 4
1029: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1030: LD_INT 0
1032: PPUSH
1033: PPUSH
1034: PPUSH
// result := true ;
1035: LD_ADDR_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1043: LD_ADDR_VAR 0 5
1047: PUSH
1048: LD_VAR 0 2
1052: PPUSH
1053: CALL_OW 480
1057: ST_TO_ADDR
// if not tmp then
1058: LD_VAR 0 5
1062: NOT
1063: IFFALSE 1067
// exit ;
1065: GO 1116
// for i in tmp do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: LD_VAR 0 5
1076: PUSH
1077: FOR_IN
1078: IFFALSE 1114
// if GetTech ( i , side ) <> state_researched then
1080: LD_VAR 0 4
1084: PPUSH
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 321
1094: PUSH
1095: LD_INT 2
1097: NONEQUAL
1098: IFFALSE 1112
// begin result := false ;
1100: LD_ADDR_VAR 0 3
1104: PUSH
1105: LD_INT 0
1107: ST_TO_ADDR
// exit ;
1108: POP
1109: POP
1110: GO 1116
// end ;
1112: GO 1077
1114: POP
1115: POP
// end ;
1116: LD_VAR 0 3
1120: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1121: LD_INT 0
1123: PPUSH
1124: PPUSH
1125: PPUSH
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
1130: PPUSH
1131: PPUSH
1132: PPUSH
1133: PPUSH
1134: PPUSH
1135: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1136: LD_VAR 0 1
1140: NOT
1141: IFTRUE 1158
1143: PUSH
1144: LD_VAR 0 1
1148: PPUSH
1149: CALL_OW 257
1153: PUSH
1154: LD_INT 9
1156: NONEQUAL
1157: OR
1158: IFFALSE 1162
// exit ;
1160: GO 1741
// side := GetSide ( unit ) ;
1162: LD_ADDR_VAR 0 9
1166: PUSH
1167: LD_VAR 0 1
1171: PPUSH
1172: CALL_OW 255
1176: ST_TO_ADDR
// tech_space := tech_spacanom ;
1177: LD_ADDR_VAR 0 12
1181: PUSH
1182: LD_INT 29
1184: ST_TO_ADDR
// tech_time := tech_taurad ;
1185: LD_ADDR_VAR 0 13
1189: PUSH
1190: LD_INT 28
1192: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1193: LD_ADDR_VAR 0 11
1197: PUSH
1198: LD_VAR 0 1
1202: PPUSH
1203: CALL_OW 310
1207: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1208: LD_VAR 0 11
1212: PPUSH
1213: CALL_OW 247
1217: PUSH
1218: LD_INT 2
1220: EQUAL
1221: IFFALSE 1225
// exit ;
1223: GO 1741
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1225: LD_ADDR_VAR 0 8
1229: PUSH
1230: LD_INT 81
1232: PUSH
1233: LD_VAR 0 9
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 21
1247: PUSH
1248: LD_INT 3
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PPUSH
1263: CALL_OW 69
1267: ST_TO_ADDR
// if not tmp then
1268: LD_VAR 0 8
1272: NOT
1273: IFFALSE 1277
// exit ;
1275: GO 1741
// if in_unit then
1277: LD_VAR 0 11
1281: IFFALSE 1305
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1283: LD_ADDR_VAR 0 10
1287: PUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 11
1297: PPUSH
1298: CALL_OW 74
1302: ST_TO_ADDR
1303: GO 1325
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1305: LD_ADDR_VAR 0 10
1309: PUSH
1310: LD_VAR 0 8
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 74
1324: ST_TO_ADDR
// if not enemy then
1325: LD_VAR 0 10
1329: NOT
1330: IFFALSE 1334
// exit ;
1332: GO 1741
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1334: LD_VAR 0 11
1338: IFFALSE 1360
1340: PUSH
1341: LD_VAR 0 11
1345: PPUSH
1346: LD_VAR 0 10
1350: PPUSH
1351: CALL_OW 296
1355: PUSH
1356: LD_INT 13
1358: GREATER
1359: AND
1360: IFTRUE 1382
1362: PUSH
1363: LD_VAR 0 1
1367: PPUSH
1368: LD_VAR 0 10
1372: PPUSH
1373: CALL_OW 296
1377: PUSH
1378: LD_INT 12
1380: GREATER
1381: OR
1382: IFFALSE 1386
// exit ;
1384: GO 1741
// missile := [ 1 ] ;
1386: LD_ADDR_VAR 0 14
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1397: LD_VAR 0 9
1401: PPUSH
1402: LD_VAR 0 12
1406: PPUSH
1407: CALL_OW 325
1411: IFFALSE 1440
// missile := Replace ( missile , missile + 1 , 2 ) ;
1413: LD_ADDR_VAR 0 14
1417: PUSH
1418: LD_VAR 0 14
1422: PPUSH
1423: LD_VAR 0 14
1427: PUSH
1428: LD_INT 1
1430: PLUS
1431: PPUSH
1432: LD_INT 2
1434: PPUSH
1435: CALL_OW 1
1439: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1440: LD_VAR 0 9
1444: PPUSH
1445: LD_VAR 0 13
1449: PPUSH
1450: CALL_OW 325
1454: IFFALSE 1478
1456: PUSH
1457: LD_VAR 0 10
1461: PPUSH
1462: CALL_OW 255
1466: PPUSH
1467: LD_VAR 0 13
1471: PPUSH
1472: CALL_OW 325
1476: NOT
1477: AND
1478: IFFALSE 1507
// missile := Replace ( missile , missile + 1 , 3 ) ;
1480: LD_ADDR_VAR 0 14
1484: PUSH
1485: LD_VAR 0 14
1489: PPUSH
1490: LD_VAR 0 14
1494: PUSH
1495: LD_INT 1
1497: PLUS
1498: PPUSH
1499: LD_INT 3
1501: PPUSH
1502: CALL_OW 1
1506: ST_TO_ADDR
// if missile < 2 then
1507: LD_VAR 0 14
1511: PUSH
1512: LD_INT 2
1514: LESS
1515: IFFALSE 1519
// exit ;
1517: GO 1741
// x := GetX ( enemy ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_VAR 0 10
1528: PPUSH
1529: CALL_OW 250
1533: ST_TO_ADDR
// y := GetY ( enemy ) ;
1534: LD_ADDR_VAR 0 5
1538: PUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 251
1548: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1549: LD_ADDR_VAR 0 6
1553: PUSH
1554: LD_VAR 0 4
1558: PUSH
1559: LD_INT 1
1561: NEG
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 12
1570: PLUS
1571: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1572: LD_ADDR_VAR 0 7
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: NEG
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL_OW 12
1593: PLUS
1594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1595: LD_VAR 0 6
1599: PPUSH
1600: LD_VAR 0 7
1604: PPUSH
1605: CALL_OW 488
1609: NOT
1610: IFFALSE 1632
// begin _x := x ;
1612: LD_ADDR_VAR 0 6
1616: PUSH
1617: LD_VAR 0 4
1621: ST_TO_ADDR
// _y := y ;
1622: LD_ADDR_VAR 0 7
1626: PUSH
1627: LD_VAR 0 5
1631: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1632: LD_ADDR_VAR 0 3
1636: PUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_VAR 0 14
1644: PPUSH
1645: CALL_OW 12
1649: ST_TO_ADDR
// case i of 1 :
1650: LD_VAR 0 3
1654: PUSH
1655: LD_INT 1
1657: DOUBLE
1658: EQUAL
1659: IFTRUE 1663
1661: GO 1680
1663: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1664: LD_VAR 0 1
1668: PPUSH
1669: LD_VAR 0 10
1673: PPUSH
1674: CALL_OW 115
1678: GO 1741
1680: LD_INT 2
1682: DOUBLE
1683: EQUAL
1684: IFTRUE 1688
1686: GO 1710
1688: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1689: LD_VAR 0 1
1693: PPUSH
1694: LD_VAR 0 6
1698: PPUSH
1699: LD_VAR 0 7
1703: PPUSH
1704: CALL_OW 153
1708: GO 1741
1710: LD_INT 3
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1740
1718: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1719: LD_VAR 0 1
1723: PPUSH
1724: LD_VAR 0 6
1728: PPUSH
1729: LD_VAR 0 7
1733: PPUSH
1734: CALL_OW 154
1738: GO 1741
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
1753: PPUSH
// if not unit or not building then
1754: LD_VAR 0 1
1758: NOT
1759: IFTRUE 1768
1761: PUSH
1762: LD_VAR 0 2
1766: NOT
1767: OR
1768: IFFALSE 1772
// exit ;
1770: GO 1930
// x := GetX ( building ) ;
1772: LD_ADDR_VAR 0 5
1776: PUSH
1777: LD_VAR 0 2
1781: PPUSH
1782: CALL_OW 250
1786: ST_TO_ADDR
// y := GetY ( building ) ;
1787: LD_ADDR_VAR 0 6
1791: PUSH
1792: LD_VAR 0 2
1796: PPUSH
1797: CALL_OW 251
1801: ST_TO_ADDR
// for i := 0 to 5 do
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: DOUBLE
1808: LD_INT 0
1810: DEC
1811: ST_TO_ADDR
1812: LD_INT 5
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1928
// begin _x := ShiftX ( x , i , 3 ) ;
1818: LD_ADDR_VAR 0 7
1822: PUSH
1823: LD_VAR 0 5
1827: PPUSH
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 272
1840: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_VAR 0 6
1850: PPUSH
1851: LD_VAR 0 4
1855: PPUSH
1856: LD_INT 3
1858: PPUSH
1859: CALL_OW 273
1863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1864: LD_VAR 0 7
1868: PPUSH
1869: LD_VAR 0 8
1873: PPUSH
1874: CALL_OW 488
1878: NOT
1879: IFFALSE 1883
// continue ;
1881: GO 1815
// if HexInfo ( _x , _y ) = 0 then
1883: LD_VAR 0 7
1887: PPUSH
1888: LD_VAR 0 8
1892: PPUSH
1893: CALL_OW 428
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: IFFALSE 1926
// begin ComMoveXY ( unit , _x , _y ) ;
1903: LD_VAR 0 1
1907: PPUSH
1908: LD_VAR 0 7
1912: PPUSH
1913: LD_VAR 0 8
1917: PPUSH
1918: CALL_OW 111
// exit ;
1922: POP
1923: POP
1924: GO 1930
// end ; end ;
1926: GO 1815
1928: POP
1929: POP
// end ;
1930: LD_VAR 0 3
1934: RET
// export function ScanBase ( side , base_area ) ; begin
1935: LD_INT 0
1937: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1938: LD_ADDR_VAR 0 3
1942: PUSH
1943: LD_VAR 0 2
1947: PPUSH
1948: LD_INT 81
1950: PUSH
1951: LD_VAR 0 1
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PPUSH
1960: CALL_OW 70
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
1975: PPUSH
// result := false ;
1976: LD_ADDR_VAR 0 2
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// side := GetSide ( unit ) ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: LD_VAR 0 1
1993: PPUSH
1994: CALL_OW 255
1998: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1999: LD_ADDR_VAR 0 4
2003: PUSH
2004: LD_VAR 0 1
2008: PPUSH
2009: CALL_OW 248
2013: ST_TO_ADDR
// case nat of 1 :
2014: LD_VAR 0 4
2018: PUSH
2019: LD_INT 1
2021: DOUBLE
2022: EQUAL
2023: IFTRUE 2027
2025: GO 2038
2027: POP
// tech := tech_lassight ; 2 :
2028: LD_ADDR_VAR 0 5
2032: PUSH
2033: LD_INT 12
2035: ST_TO_ADDR
2036: GO 2077
2038: LD_INT 2
2040: DOUBLE
2041: EQUAL
2042: IFTRUE 2046
2044: GO 2057
2046: POP
// tech := tech_mortar ; 3 :
2047: LD_ADDR_VAR 0 5
2051: PUSH
2052: LD_INT 41
2054: ST_TO_ADDR
2055: GO 2077
2057: LD_INT 3
2059: DOUBLE
2060: EQUAL
2061: IFTRUE 2065
2063: GO 2076
2065: POP
// tech := tech_bazooka ; end ;
2066: LD_ADDR_VAR 0 5
2070: PUSH
2071: LD_INT 44
2073: ST_TO_ADDR
2074: GO 2077
2076: POP
// if Researched ( side , tech ) then
2077: LD_VAR 0 3
2081: PPUSH
2082: LD_VAR 0 5
2086: PPUSH
2087: CALL_OW 325
2091: IFFALSE 2118
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_INT 5
2100: PUSH
2101: LD_INT 8
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_VAR 0 4
2116: ARRAY
2117: ST_TO_ADDR
// end ;
2118: LD_VAR 0 2
2122: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2123: LD_INT 0
2125: PPUSH
2126: PPUSH
2127: PPUSH
// if not mines then
2128: LD_VAR 0 2
2132: NOT
2133: IFFALSE 2137
// exit ;
2135: GO 2281
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_INT 81
2144: PUSH
2145: LD_VAR 0 1
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 3
2156: PUSH
2157: LD_INT 21
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 69
2179: ST_TO_ADDR
// for i in mines do
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_VAR 0 2
2189: PUSH
2190: FOR_IN
2191: IFFALSE 2279
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2193: LD_VAR 0 4
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: PPUSH
2202: LD_VAR 0 4
2206: PUSH
2207: LD_INT 2
2209: ARRAY
2210: PPUSH
2211: CALL_OW 458
2215: NOT
2216: IFFALSE 2220
// continue ;
2218: GO 2190
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2220: LD_VAR 0 4
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PPUSH
2229: LD_VAR 0 4
2233: PUSH
2234: LD_INT 2
2236: ARRAY
2237: PPUSH
2238: CALL_OW 428
2242: PUSH
2243: LD_VAR 0 5
2247: IN
2248: IFFALSE 2277
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2250: LD_VAR 0 4
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: LD_VAR 0 4
2263: PUSH
2264: LD_INT 2
2266: ARRAY
2267: PPUSH
2268: LD_VAR 0 1
2272: PPUSH
2273: CALL_OW 456
// end ;
2277: GO 2190
2279: POP
2280: POP
// end ;
2281: LD_VAR 0 3
2285: RET
// export function Count ( array ) ; begin
2286: LD_INT 0
2288: PPUSH
// result := array + 0 ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_VAR 0 1
2298: PUSH
2299: LD_INT 0
2301: PLUS
2302: ST_TO_ADDR
// end ;
2303: LD_VAR 0 2
2307: RET
// export function IsEmpty ( building ) ; begin
2308: LD_INT 0
2310: PPUSH
// if not building then
2311: LD_VAR 0 1
2315: NOT
2316: IFFALSE 2320
// exit ;
2318: GO 2363
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 1
2329: PUSH
2330: LD_INT 22
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 255
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 58
2349: PUSH
2350: EMPTY
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PPUSH
2357: CALL_OW 69
2361: IN
2362: ST_TO_ADDR
// end ;
2363: LD_VAR 0 2
2367: RET
// export function IsNotFull ( building ) ; var places ; begin
2368: LD_INT 0
2370: PPUSH
2371: PPUSH
// if not building then
2372: LD_VAR 0 1
2376: NOT
2377: IFFALSE 2381
// exit ;
2379: GO 2409
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_VAR 0 1
2390: PPUSH
2391: LD_INT 3
2393: PUSH
2394: LD_INT 62
2396: PUSH
2397: EMPTY
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: CALL_OW 72
2408: ST_TO_ADDR
// end ;
2409: LD_VAR 0 2
2413: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2414: LD_INT 0
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// tmp := [ ] ;
2420: LD_ADDR_VAR 0 3
2424: PUSH
2425: EMPTY
2426: ST_TO_ADDR
// list := [ ] ;
2427: LD_ADDR_VAR 0 5
2431: PUSH
2432: EMPTY
2433: ST_TO_ADDR
// for i = 16 to 25 do
2434: LD_ADDR_VAR 0 4
2438: PUSH
2439: DOUBLE
2440: LD_INT 16
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 25
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2521
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2450: LD_ADDR_VAR 0 3
2454: PUSH
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 22
2462: PUSH
2463: LD_VAR 0 1
2467: PPUSH
2468: CALL_OW 255
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: LD_INT 91
2479: PUSH
2480: LD_VAR 0 1
2484: PUSH
2485: LD_INT 6
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_VAR 0 4
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: PPUSH
2513: CALL_OW 69
2517: ADD
2518: ST_TO_ADDR
2519: GO 2447
2521: POP
2522: POP
// for i = 1 to tmp do
2523: LD_ADDR_VAR 0 4
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_VAR 0 3
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2627
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 5
2550: PUSH
2551: LD_VAR 0 3
2555: PUSH
2556: LD_VAR 0 4
2560: ARRAY
2561: PPUSH
2562: CALL_OW 266
2566: PUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_VAR 0 4
2576: ARRAY
2577: PPUSH
2578: CALL_OW 250
2582: PUSH
2583: LD_VAR 0 3
2587: PUSH
2588: LD_VAR 0 4
2592: ARRAY
2593: PPUSH
2594: CALL_OW 251
2598: PUSH
2599: LD_VAR 0 3
2603: PUSH
2604: LD_VAR 0 4
2608: ARRAY
2609: PPUSH
2610: CALL_OW 254
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: EMPTY
2622: LIST
2623: ADD
2624: ST_TO_ADDR
2625: GO 2538
2627: POP
2628: POP
// result := list ;
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: LD_VAR 0 5
2638: ST_TO_ADDR
// end ;
2639: LD_VAR 0 2
2643: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2644: LD_INT 0
2646: PPUSH
2647: PPUSH
2648: PPUSH
2649: PPUSH
2650: PPUSH
2651: PPUSH
2652: PPUSH
// if not factory then
2653: LD_VAR 0 1
2657: NOT
2658: IFFALSE 2662
// exit ;
2660: GO 3265
// if control = control_apeman then
2662: LD_VAR 0 4
2666: PUSH
2667: LD_INT 5
2669: EQUAL
2670: IFFALSE 2779
// begin tmp := UnitsInside ( factory ) ;
2672: LD_ADDR_VAR 0 8
2676: PUSH
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 313
2686: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2687: LD_VAR 0 8
2691: PPUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 12
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 72
2706: NOT
2707: IFFALSE 2717
// control := control_manual ;
2709: LD_ADDR_VAR 0 4
2713: PUSH
2714: LD_INT 1
2716: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2717: LD_ADDR_VAR 0 8
2721: PUSH
2722: LD_VAR 0 1
2726: PPUSH
2727: CALL 2414 0 1
2731: ST_TO_ADDR
// if tmp then
2732: LD_VAR 0 8
2736: IFFALSE 2779
// begin for i in tmp do
2738: LD_ADDR_VAR 0 7
2742: PUSH
2743: LD_VAR 0 8
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2777
// if i [ 1 ] = b_ext_radio then
2751: LD_VAR 0 7
2755: PUSH
2756: LD_INT 1
2758: ARRAY
2759: PUSH
2760: LD_INT 22
2762: EQUAL
2763: IFFALSE 2775
// begin control := control_remote ;
2765: LD_ADDR_VAR 0 4
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// break ;
2773: GO 2777
// end ;
2775: GO 2748
2777: POP
2778: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2779: LD_VAR 0 1
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 5
2803: PPUSH
2804: CALL_OW 448
2808: IFFALSE 2843
// begin result := [ chassis , engine , control , weapon ] ;
2810: LD_ADDR_VAR 0 6
2814: PUSH
2815: LD_VAR 0 2
2819: PUSH
2820: LD_VAR 0 3
2824: PUSH
2825: LD_VAR 0 4
2829: PUSH
2830: LD_VAR 0 5
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: ST_TO_ADDR
// exit ;
2841: GO 3265
// end ; _chassis := AvailableChassisList ( factory ) ;
2843: LD_ADDR_VAR 0 9
2847: PUSH
2848: LD_VAR 0 1
2852: PPUSH
2853: CALL_OW 475
2857: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2858: LD_ADDR_VAR 0 11
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 476
2872: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2873: LD_ADDR_VAR 0 12
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 477
2887: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2888: LD_ADDR_VAR 0 10
2892: PUSH
2893: LD_VAR 0 1
2897: PPUSH
2898: CALL_OW 478
2902: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2903: LD_VAR 0 9
2907: NOT
2908: IFTRUE 2917
2910: PUSH
2911: LD_VAR 0 11
2915: NOT
2916: OR
2917: IFTRUE 2926
2919: PUSH
2920: LD_VAR 0 12
2924: NOT
2925: OR
2926: IFTRUE 2935
2928: PUSH
2929: LD_VAR 0 10
2933: NOT
2934: OR
2935: IFFALSE 2970
// begin result := [ chassis , engine , control , weapon ] ;
2937: LD_ADDR_VAR 0 6
2941: PUSH
2942: LD_VAR 0 2
2946: PUSH
2947: LD_VAR 0 3
2951: PUSH
2952: LD_VAR 0 4
2956: PUSH
2957: LD_VAR 0 5
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: ST_TO_ADDR
// exit ;
2968: GO 3265
// end ; if not chassis in _chassis then
2970: LD_VAR 0 2
2974: PUSH
2975: LD_VAR 0 9
2979: IN
2980: NOT
2981: IFFALSE 3007
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2983: LD_ADDR_VAR 0 2
2987: PUSH
2988: LD_VAR 0 9
2992: PUSH
2993: LD_INT 1
2995: PPUSH
2996: LD_VAR 0 9
3000: PPUSH
3001: CALL_OW 12
3005: ARRAY
3006: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3007: LD_VAR 0 2
3011: PPUSH
3012: LD_VAR 0 3
3016: PPUSH
3017: CALL 3270 0 2
3021: NOT
3022: IFFALSE 3083
// repeat engine := _engine [ 1 ] ;
3024: LD_ADDR_VAR 0 3
3028: PUSH
3029: LD_VAR 0 11
3033: PUSH
3034: LD_INT 1
3036: ARRAY
3037: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3038: LD_ADDR_VAR 0 11
3042: PUSH
3043: LD_VAR 0 11
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: CALL_OW 3
3055: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3056: LD_VAR 0 2
3060: PPUSH
3061: LD_VAR 0 3
3065: PPUSH
3066: CALL 3270 0 2
3070: IFTRUE 3081
3072: PUSH
3073: LD_VAR 0 11
3077: PUSH
3078: EMPTY
3079: EQUAL
3080: OR
3081: IFFALSE 3024
// if not control in _control then
3083: LD_VAR 0 4
3087: PUSH
3088: LD_VAR 0 12
3092: IN
3093: NOT
3094: IFFALSE 3120
// control := _control [ rand ( 1 , _control ) ] ;
3096: LD_ADDR_VAR 0 4
3100: PUSH
3101: LD_VAR 0 12
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_VAR 0 12
3113: PPUSH
3114: CALL_OW 12
3118: ARRAY
3119: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3120: LD_VAR 0 2
3124: PPUSH
3125: LD_VAR 0 5
3129: PPUSH
3130: CALL 3492 0 2
3134: NOT
3135: IFFALSE 3196
// repeat weapon := _weapon [ 1 ] ;
3137: LD_ADDR_VAR 0 5
3141: PUSH
3142: LD_VAR 0 10
3146: PUSH
3147: LD_INT 1
3149: ARRAY
3150: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3151: LD_ADDR_VAR 0 10
3155: PUSH
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: CALL_OW 3
3168: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3169: LD_VAR 0 2
3173: PPUSH
3174: LD_VAR 0 5
3178: PPUSH
3179: CALL 3492 0 2
3183: IFTRUE 3194
3185: PUSH
3186: LD_VAR 0 10
3190: PUSH
3191: EMPTY
3192: EQUAL
3193: OR
3194: IFFALSE 3137
// result := [ ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: EMPTY
3202: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_VAR 0 4
3222: PPUSH
3223: LD_VAR 0 5
3227: PPUSH
3228: CALL_OW 448
3232: IFFALSE 3265
// result := [ chassis , engine , control , weapon ] ;
3234: LD_ADDR_VAR 0 6
3238: PUSH
3239: LD_VAR 0 2
3243: PUSH
3244: LD_VAR 0 3
3248: PUSH
3249: LD_VAR 0 4
3253: PUSH
3254: LD_VAR 0 5
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: ST_TO_ADDR
// end ;
3265: LD_VAR 0 6
3269: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3270: LD_INT 0
3272: PPUSH
// if not chassis or not engine then
3273: LD_VAR 0 1
3277: NOT
3278: IFTRUE 3287
3280: PUSH
3281: LD_VAR 0 2
3285: NOT
3286: OR
3287: IFFALSE 3291
// exit ;
3289: GO 3487
// case engine of engine_solar :
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 2
3298: DOUBLE
3299: EQUAL
3300: IFTRUE 3304
3302: GO 3342
3304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: LD_INT 11
3312: PUSH
3313: LD_INT 12
3315: PUSH
3316: LD_INT 13
3318: PUSH
3319: LD_INT 14
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: LD_INT 2
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: ST_TO_ADDR
3340: GO 3471
3342: LD_INT 1
3344: DOUBLE
3345: EQUAL
3346: IFTRUE 3350
3348: GO 3412
3350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3351: LD_ADDR_VAR 0 3
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 13
3364: PUSH
3365: LD_INT 14
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: LD_INT 3
3376: PUSH
3377: LD_INT 4
3379: PUSH
3380: LD_INT 5
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 23
3388: PUSH
3389: LD_INT 22
3391: PUSH
3392: LD_INT 24
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: ST_TO_ADDR
3410: GO 3471
3412: LD_INT 3
3414: DOUBLE
3415: EQUAL
3416: IFTRUE 3420
3418: GO 3470
3420: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_INT 13
3428: PUSH
3429: LD_INT 14
3431: PUSH
3432: LD_INT 2
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 4
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 21
3446: PUSH
3447: LD_INT 22
3449: PUSH
3450: LD_INT 23
3452: PUSH
3453: LD_INT 24
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: ST_TO_ADDR
3468: GO 3471
3470: POP
// result := ( chassis in result ) ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_VAR 0 1
3480: PUSH
3481: LD_VAR 0 3
3485: IN
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 3
3491: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3492: LD_INT 0
3494: PPUSH
// if not chassis or not weapon then
3495: LD_VAR 0 1
3499: NOT
3500: IFTRUE 3509
3502: PUSH
3503: LD_VAR 0 2
3507: NOT
3508: OR
3509: IFFALSE 3513
// exit ;
3511: GO 4607
// case weapon of us_machine_gun :
3513: LD_VAR 0 2
3517: PUSH
3518: LD_INT 2
3520: DOUBLE
3521: EQUAL
3522: IFTRUE 3526
3524: GO 3556
3526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: LD_INT 1
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: ST_TO_ADDR
3554: GO 4591
3556: LD_INT 3
3558: DOUBLE
3559: EQUAL
3560: IFTRUE 3564
3562: GO 3594
3564: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: LD_INT 5
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: ST_TO_ADDR
3592: GO 4591
3594: LD_INT 11
3596: DOUBLE
3597: EQUAL
3598: IFTRUE 3602
3600: GO 3632
3602: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 2
3613: PUSH
3614: LD_INT 3
3616: PUSH
3617: LD_INT 4
3619: PUSH
3620: LD_INT 5
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: ST_TO_ADDR
3630: GO 4591
3632: LD_INT 4
3634: DOUBLE
3635: EQUAL
3636: IFTRUE 3640
3638: GO 3666
3640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 2
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: LD_INT 5
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: ST_TO_ADDR
3664: GO 4591
3666: LD_INT 5
3668: DOUBLE
3669: EQUAL
3670: IFTRUE 3674
3672: GO 3700
3674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3675: LD_ADDR_VAR 0 3
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 4
3688: PUSH
3689: LD_INT 5
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: ST_TO_ADDR
3698: GO 4591
3700: LD_INT 9
3702: DOUBLE
3703: EQUAL
3704: IFTRUE 3708
3706: GO 3734
3708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: LD_INT 4
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: ST_TO_ADDR
3732: GO 4591
3734: LD_INT 7
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3768
3742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 4
3756: PUSH
3757: LD_INT 5
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: ST_TO_ADDR
3766: GO 4591
3768: LD_INT 12
3770: DOUBLE
3771: EQUAL
3772: IFTRUE 3776
3774: GO 3802
3776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3777: LD_ADDR_VAR 0 3
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 3
3787: PUSH
3788: LD_INT 4
3790: PUSH
3791: LD_INT 5
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: ST_TO_ADDR
3800: GO 4591
3802: LD_INT 13
3804: DOUBLE
3805: EQUAL
3806: IFTRUE 3810
3808: GO 3836
3810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: LD_INT 3
3821: PUSH
3822: LD_INT 4
3824: PUSH
3825: LD_INT 5
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: ST_TO_ADDR
3834: GO 4591
3836: LD_INT 14
3838: DOUBLE
3839: EQUAL
3840: IFTRUE 3844
3842: GO 3862
3844: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: LD_INT 4
3852: PUSH
3853: LD_INT 5
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: ST_TO_ADDR
3860: GO 4591
3862: LD_INT 6
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 3888
3870: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_INT 4
3878: PUSH
3879: LD_INT 5
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 4591
3888: LD_INT 10
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 3914
3896: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3897: LD_ADDR_VAR 0 3
3901: PUSH
3902: LD_INT 4
3904: PUSH
3905: LD_INT 5
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: ST_TO_ADDR
3912: GO 4591
3914: LD_INT 22
3916: DOUBLE
3917: EQUAL
3918: IFTRUE 3922
3920: GO 3948
3922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_INT 11
3930: PUSH
3931: LD_INT 12
3933: PUSH
3934: LD_INT 13
3936: PUSH
3937: LD_INT 14
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: ST_TO_ADDR
3946: GO 4591
3948: LD_INT 23
3950: DOUBLE
3951: EQUAL
3952: IFTRUE 3956
3954: GO 3982
3956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: LD_INT 11
3964: PUSH
3965: LD_INT 12
3967: PUSH
3968: LD_INT 13
3970: PUSH
3971: LD_INT 14
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: ST_TO_ADDR
3980: GO 4591
3982: LD_INT 24
3984: DOUBLE
3985: EQUAL
3986: IFTRUE 3990
3988: GO 4016
3990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: LD_INT 11
3998: PUSH
3999: LD_INT 12
4001: PUSH
4002: LD_INT 13
4004: PUSH
4005: LD_INT 14
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: ST_TO_ADDR
4014: GO 4591
4016: LD_INT 30
4018: DOUBLE
4019: EQUAL
4020: IFTRUE 4024
4022: GO 4050
4024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 11
4032: PUSH
4033: LD_INT 12
4035: PUSH
4036: LD_INT 13
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: ST_TO_ADDR
4048: GO 4591
4050: LD_INT 25
4052: DOUBLE
4053: EQUAL
4054: IFTRUE 4058
4056: GO 4076
4058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 13
4066: PUSH
4067: LD_INT 14
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: ST_TO_ADDR
4074: GO 4591
4076: LD_INT 27
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4102
4084: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: LD_INT 13
4092: PUSH
4093: LD_INT 14
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: ST_TO_ADDR
4100: GO 4591
4102: LD_INT 92
4104: DOUBLE
4105: EQUAL
4106: IFTRUE 4110
4108: GO 4136
4110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: LD_INT 11
4118: PUSH
4119: LD_INT 12
4121: PUSH
4122: LD_INT 13
4124: PUSH
4125: LD_INT 14
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
4134: GO 4591
4136: LD_INT 28
4138: DOUBLE
4139: EQUAL
4140: IFTRUE 4144
4142: GO 4162
4144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_INT 13
4152: PUSH
4153: LD_INT 14
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: ST_TO_ADDR
4160: GO 4591
4162: LD_INT 29
4164: DOUBLE
4165: EQUAL
4166: IFTRUE 4170
4168: GO 4188
4170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4171: LD_ADDR_VAR 0 3
4175: PUSH
4176: LD_INT 13
4178: PUSH
4179: LD_INT 14
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
4186: GO 4591
4188: LD_INT 31
4190: DOUBLE
4191: EQUAL
4192: IFTRUE 4196
4194: GO 4214
4196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4197: LD_ADDR_VAR 0 3
4201: PUSH
4202: LD_INT 13
4204: PUSH
4205: LD_INT 14
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: ST_TO_ADDR
4212: GO 4591
4214: LD_INT 26
4216: DOUBLE
4217: EQUAL
4218: IFTRUE 4222
4220: GO 4240
4222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4223: LD_ADDR_VAR 0 3
4227: PUSH
4228: LD_INT 13
4230: PUSH
4231: LD_INT 14
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: ST_TO_ADDR
4238: GO 4591
4240: LD_INT 42
4242: DOUBLE
4243: EQUAL
4244: IFTRUE 4248
4246: GO 4274
4248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_INT 21
4256: PUSH
4257: LD_INT 22
4259: PUSH
4260: LD_INT 23
4262: PUSH
4263: LD_INT 24
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: ST_TO_ADDR
4272: GO 4591
4274: LD_INT 43
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4308
4282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: LD_INT 21
4290: PUSH
4291: LD_INT 22
4293: PUSH
4294: LD_INT 23
4296: PUSH
4297: LD_INT 24
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: ST_TO_ADDR
4306: GO 4591
4308: LD_INT 44
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4316
4314: GO 4342
4316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 21
4324: PUSH
4325: LD_INT 22
4327: PUSH
4328: LD_INT 23
4330: PUSH
4331: LD_INT 24
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: ST_TO_ADDR
4340: GO 4591
4342: LD_INT 45
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4376
4350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4351: LD_ADDR_VAR 0 3
4355: PUSH
4356: LD_INT 21
4358: PUSH
4359: LD_INT 22
4361: PUSH
4362: LD_INT 23
4364: PUSH
4365: LD_INT 24
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
4374: GO 4591
4376: LD_INT 49
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4410
4384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4385: LD_ADDR_VAR 0 3
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 23
4398: PUSH
4399: LD_INT 24
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: ST_TO_ADDR
4408: GO 4591
4410: LD_INT 51
4412: DOUBLE
4413: EQUAL
4414: IFTRUE 4418
4416: GO 4444
4418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4419: LD_ADDR_VAR 0 3
4423: PUSH
4424: LD_INT 21
4426: PUSH
4427: LD_INT 22
4429: PUSH
4430: LD_INT 23
4432: PUSH
4433: LD_INT 24
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: ST_TO_ADDR
4442: GO 4591
4444: LD_INT 52
4446: DOUBLE
4447: EQUAL
4448: IFTRUE 4452
4450: GO 4478
4452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: LD_INT 21
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 23
4466: PUSH
4467: LD_INT 24
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: ST_TO_ADDR
4476: GO 4591
4478: LD_INT 53
4480: DOUBLE
4481: EQUAL
4482: IFTRUE 4486
4484: GO 4504
4486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4487: LD_ADDR_VAR 0 3
4491: PUSH
4492: LD_INT 23
4494: PUSH
4495: LD_INT 24
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 4591
4504: LD_INT 46
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4530
4512: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_INT 23
4520: PUSH
4521: LD_INT 24
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: ST_TO_ADDR
4528: GO 4591
4530: LD_INT 47
4532: DOUBLE
4533: EQUAL
4534: IFTRUE 4538
4536: GO 4556
4538: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
4539: LD_ADDR_VAR 0 3
4543: PUSH
4544: LD_INT 23
4546: PUSH
4547: LD_INT 24
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: ST_TO_ADDR
4554: GO 4591
4556: LD_INT 98
4558: DOUBLE
4559: EQUAL
4560: IFTRUE 4564
4562: GO 4590
4564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4565: LD_ADDR_VAR 0 3
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 22
4575: PUSH
4576: LD_INT 23
4578: PUSH
4579: LD_INT 24
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// result := ( chassis in result ) ;
4591: LD_ADDR_VAR 0 3
4595: PUSH
4596: LD_VAR 0 1
4600: PUSH
4601: LD_VAR 0 3
4605: IN
4606: ST_TO_ADDR
// end ;
4607: LD_VAR 0 3
4611: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4612: LD_INT 0
4614: PPUSH
4615: PPUSH
4616: PPUSH
4617: PPUSH
4618: PPUSH
4619: PPUSH
4620: PPUSH
// result := array ;
4621: LD_ADDR_VAR 0 5
4625: PUSH
4626: LD_VAR 0 1
4630: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4631: LD_VAR 0 1
4635: NOT
4636: IFTRUE 4645
4638: PUSH
4639: LD_VAR 0 2
4643: NOT
4644: OR
4645: IFTRUE 4654
4647: PUSH
4648: LD_VAR 0 3
4652: NOT
4653: OR
4654: IFTRUE 4668
4656: PUSH
4657: LD_VAR 0 2
4661: PUSH
4662: LD_VAR 0 1
4666: GREATER
4667: OR
4668: IFTRUE 4682
4670: PUSH
4671: LD_VAR 0 3
4675: PUSH
4676: LD_VAR 0 1
4680: GREATER
4681: OR
4682: IFFALSE 4686
// exit ;
4684: GO 4982
// if direction then
4686: LD_VAR 0 4
4690: IFFALSE 4754
// begin d := 1 ;
4692: LD_ADDR_VAR 0 9
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// if i_from > i_to then
4700: LD_VAR 0 2
4704: PUSH
4705: LD_VAR 0 3
4709: GREATER
4710: IFFALSE 4736
// length := ( array - i_from ) + i_to else
4712: LD_ADDR_VAR 0 11
4716: PUSH
4717: LD_VAR 0 1
4721: PUSH
4722: LD_VAR 0 2
4726: MINUS
4727: PUSH
4728: LD_VAR 0 3
4732: PLUS
4733: ST_TO_ADDR
4734: GO 4752
// length := i_to - i_from ;
4736: LD_ADDR_VAR 0 11
4740: PUSH
4741: LD_VAR 0 3
4745: PUSH
4746: LD_VAR 0 2
4750: MINUS
4751: ST_TO_ADDR
// end else
4752: GO 4815
// begin d := - 1 ;
4754: LD_ADDR_VAR 0 9
4758: PUSH
4759: LD_INT 1
4761: NEG
4762: ST_TO_ADDR
// if i_from > i_to then
4763: LD_VAR 0 2
4767: PUSH
4768: LD_VAR 0 3
4772: GREATER
4773: IFFALSE 4793
// length := i_from - i_to else
4775: LD_ADDR_VAR 0 11
4779: PUSH
4780: LD_VAR 0 2
4784: PUSH
4785: LD_VAR 0 3
4789: MINUS
4790: ST_TO_ADDR
4791: GO 4815
// length := ( array - i_to ) + i_from ;
4793: LD_ADDR_VAR 0 11
4797: PUSH
4798: LD_VAR 0 1
4802: PUSH
4803: LD_VAR 0 3
4807: MINUS
4808: PUSH
4809: LD_VAR 0 2
4813: PLUS
4814: ST_TO_ADDR
// end ; if not length then
4815: LD_VAR 0 11
4819: NOT
4820: IFFALSE 4824
// exit ;
4822: GO 4982
// tmp := array ;
4824: LD_ADDR_VAR 0 10
4828: PUSH
4829: LD_VAR 0 1
4833: ST_TO_ADDR
// for i = 1 to length do
4834: LD_ADDR_VAR 0 6
4838: PUSH
4839: DOUBLE
4840: LD_INT 1
4842: DEC
4843: ST_TO_ADDR
4844: LD_VAR 0 11
4848: PUSH
4849: FOR_TO
4850: IFFALSE 4970
// begin for j = 1 to array do
4852: LD_ADDR_VAR 0 7
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_VAR 0 1
4866: PUSH
4867: FOR_TO
4868: IFFALSE 4956
// begin k := j + d ;
4870: LD_ADDR_VAR 0 8
4874: PUSH
4875: LD_VAR 0 7
4879: PUSH
4880: LD_VAR 0 9
4884: PLUS
4885: ST_TO_ADDR
// if k > array then
4886: LD_VAR 0 8
4890: PUSH
4891: LD_VAR 0 1
4895: GREATER
4896: IFFALSE 4906
// k := 1 ;
4898: LD_ADDR_VAR 0 8
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// if not k then
4906: LD_VAR 0 8
4910: NOT
4911: IFFALSE 4923
// k := array ;
4913: LD_ADDR_VAR 0 8
4917: PUSH
4918: LD_VAR 0 1
4922: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4923: LD_ADDR_VAR 0 10
4927: PUSH
4928: LD_VAR 0 10
4932: PPUSH
4933: LD_VAR 0 8
4937: PPUSH
4938: LD_VAR 0 1
4942: PUSH
4943: LD_VAR 0 7
4947: ARRAY
4948: PPUSH
4949: CALL_OW 1
4953: ST_TO_ADDR
// end ;
4954: GO 4867
4956: POP
4957: POP
// array := tmp ;
4958: LD_ADDR_VAR 0 1
4962: PUSH
4963: LD_VAR 0 10
4967: ST_TO_ADDR
// end ;
4968: GO 4849
4970: POP
4971: POP
// result := array ;
4972: LD_ADDR_VAR 0 5
4976: PUSH
4977: LD_VAR 0 1
4981: ST_TO_ADDR
// end ;
4982: LD_VAR 0 5
4986: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
// result := 0 ;
4991: LD_ADDR_VAR 0 3
4995: PUSH
4996: LD_INT 0
4998: ST_TO_ADDR
// if not array or not value in array then
4999: LD_VAR 0 1
5003: NOT
5004: IFTRUE 5019
5006: PUSH
5007: LD_VAR 0 2
5011: PUSH
5012: LD_VAR 0 1
5016: IN
5017: NOT
5018: OR
5019: IFFALSE 5023
// exit ;
5021: GO 5077
// for i = 1 to array do
5023: LD_ADDR_VAR 0 4
5027: PUSH
5028: DOUBLE
5029: LD_INT 1
5031: DEC
5032: ST_TO_ADDR
5033: LD_VAR 0 1
5037: PUSH
5038: FOR_TO
5039: IFFALSE 5075
// if value = array [ i ] then
5041: LD_VAR 0 2
5045: PUSH
5046: LD_VAR 0 1
5050: PUSH
5051: LD_VAR 0 4
5055: ARRAY
5056: EQUAL
5057: IFFALSE 5073
// begin result := i ;
5059: LD_ADDR_VAR 0 3
5063: PUSH
5064: LD_VAR 0 4
5068: ST_TO_ADDR
// exit ;
5069: POP
5070: POP
5071: GO 5077
// end ;
5073: GO 5038
5075: POP
5076: POP
// end ;
5077: LD_VAR 0 3
5081: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5082: LD_INT 0
5084: PPUSH
// vc_chassis := chassis ;
5085: LD_ADDR_OWVAR 37
5089: PUSH
5090: LD_VAR 0 1
5094: ST_TO_ADDR
// vc_engine := engine ;
5095: LD_ADDR_OWVAR 39
5099: PUSH
5100: LD_VAR 0 2
5104: ST_TO_ADDR
// vc_control := control ;
5105: LD_ADDR_OWVAR 38
5109: PUSH
5110: LD_VAR 0 3
5114: ST_TO_ADDR
// vc_weapon := weapon ;
5115: LD_ADDR_OWVAR 40
5119: PUSH
5120: LD_VAR 0 4
5124: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5125: LD_ADDR_OWVAR 41
5129: PUSH
5130: LD_VAR 0 5
5134: ST_TO_ADDR
// end ;
5135: LD_VAR 0 6
5139: RET
// export function WantPlant ( unit ) ; var task ; begin
5140: LD_INT 0
5142: PPUSH
5143: PPUSH
// result := false ;
5144: LD_ADDR_VAR 0 2
5148: PUSH
5149: LD_INT 0
5151: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5152: LD_ADDR_VAR 0 3
5156: PUSH
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL_OW 437
5166: ST_TO_ADDR
// if task then
5167: LD_VAR 0 3
5171: IFFALSE 5199
// if task [ 1 ] [ 1 ] = p then
5173: LD_VAR 0 3
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PUSH
5186: LD_STRING p
5188: EQUAL
5189: IFFALSE 5199
// result := true ;
5191: LD_ADDR_VAR 0 2
5195: PUSH
5196: LD_INT 1
5198: ST_TO_ADDR
// end ;
5199: LD_VAR 0 2
5203: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5204: LD_INT 0
5206: PPUSH
5207: PPUSH
5208: PPUSH
5209: PPUSH
// if pos < 1 then
5210: LD_VAR 0 2
5214: PUSH
5215: LD_INT 1
5217: LESS
5218: IFFALSE 5222
// exit ;
5220: GO 5525
// if pos = 1 then
5222: LD_VAR 0 2
5226: PUSH
5227: LD_INT 1
5229: EQUAL
5230: IFFALSE 5263
// result := Replace ( arr , pos [ 1 ] , value ) else
5232: LD_ADDR_VAR 0 4
5236: PUSH
5237: LD_VAR 0 1
5241: PPUSH
5242: LD_VAR 0 2
5246: PUSH
5247: LD_INT 1
5249: ARRAY
5250: PPUSH
5251: LD_VAR 0 3
5255: PPUSH
5256: CALL_OW 1
5260: ST_TO_ADDR
5261: GO 5525
// begin tmp := arr ;
5263: LD_ADDR_VAR 0 6
5267: PUSH
5268: LD_VAR 0 1
5272: ST_TO_ADDR
// s_arr := [ tmp ] ;
5273: LD_ADDR_VAR 0 7
5277: PUSH
5278: LD_VAR 0 6
5282: PUSH
5283: EMPTY
5284: LIST
5285: ST_TO_ADDR
// for i = 1 to pos - 1 do
5286: LD_ADDR_VAR 0 5
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 2
5300: PUSH
5301: LD_INT 1
5303: MINUS
5304: PUSH
5305: FOR_TO
5306: IFFALSE 5351
// begin tmp := tmp [ pos [ i ] ] ;
5308: LD_ADDR_VAR 0 6
5312: PUSH
5313: LD_VAR 0 6
5317: PUSH
5318: LD_VAR 0 2
5322: PUSH
5323: LD_VAR 0 5
5327: ARRAY
5328: ARRAY
5329: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5330: LD_ADDR_VAR 0 7
5334: PUSH
5335: LD_VAR 0 7
5339: PUSH
5340: LD_VAR 0 6
5344: PUSH
5345: EMPTY
5346: LIST
5347: ADD
5348: ST_TO_ADDR
// end ;
5349: GO 5305
5351: POP
5352: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5353: LD_ADDR_VAR 0 6
5357: PUSH
5358: LD_VAR 0 6
5362: PPUSH
5363: LD_VAR 0 2
5367: PUSH
5368: LD_VAR 0 2
5372: ARRAY
5373: PPUSH
5374: LD_VAR 0 3
5378: PPUSH
5379: CALL_OW 1
5383: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5384: LD_ADDR_VAR 0 7
5388: PUSH
5389: LD_VAR 0 7
5393: PPUSH
5394: LD_VAR 0 7
5398: PPUSH
5399: LD_VAR 0 6
5403: PPUSH
5404: CALL_OW 1
5408: ST_TO_ADDR
// for i = s_arr downto 2 do
5409: LD_ADDR_VAR 0 5
5413: PUSH
5414: DOUBLE
5415: LD_VAR 0 7
5419: INC
5420: ST_TO_ADDR
5421: LD_INT 2
5423: PUSH
5424: FOR_DOWNTO
5425: IFFALSE 5509
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5427: LD_ADDR_VAR 0 6
5431: PUSH
5432: LD_VAR 0 7
5436: PUSH
5437: LD_VAR 0 5
5441: PUSH
5442: LD_INT 1
5444: MINUS
5445: ARRAY
5446: PPUSH
5447: LD_VAR 0 2
5451: PUSH
5452: LD_VAR 0 5
5456: PUSH
5457: LD_INT 1
5459: MINUS
5460: ARRAY
5461: PPUSH
5462: LD_VAR 0 7
5466: PUSH
5467: LD_VAR 0 5
5471: ARRAY
5472: PPUSH
5473: CALL_OW 1
5477: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5478: LD_ADDR_VAR 0 7
5482: PUSH
5483: LD_VAR 0 7
5487: PPUSH
5488: LD_VAR 0 5
5492: PUSH
5493: LD_INT 1
5495: MINUS
5496: PPUSH
5497: LD_VAR 0 6
5501: PPUSH
5502: CALL_OW 1
5506: ST_TO_ADDR
// end ;
5507: GO 5424
5509: POP
5510: POP
// result := s_arr [ 1 ] ;
5511: LD_ADDR_VAR 0 4
5515: PUSH
5516: LD_VAR 0 7
5520: PUSH
5521: LD_INT 1
5523: ARRAY
5524: ST_TO_ADDR
// end ; end ;
5525: LD_VAR 0 4
5529: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5530: LD_INT 0
5532: PPUSH
5533: PPUSH
// if not list then
5534: LD_VAR 0 1
5538: NOT
5539: IFFALSE 5543
// exit ;
5541: GO 5634
// i := list [ pos1 ] ;
5543: LD_ADDR_VAR 0 5
5547: PUSH
5548: LD_VAR 0 1
5552: PUSH
5553: LD_VAR 0 2
5557: ARRAY
5558: ST_TO_ADDR
// if not i then
5559: LD_VAR 0 5
5563: NOT
5564: IFFALSE 5568
// exit ;
5566: GO 5634
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5568: LD_ADDR_VAR 0 1
5572: PUSH
5573: LD_VAR 0 1
5577: PPUSH
5578: LD_VAR 0 2
5582: PPUSH
5583: LD_VAR 0 1
5587: PUSH
5588: LD_VAR 0 3
5592: ARRAY
5593: PPUSH
5594: CALL_OW 1
5598: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5599: LD_ADDR_VAR 0 1
5603: PUSH
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_VAR 0 3
5613: PPUSH
5614: LD_VAR 0 5
5618: PPUSH
5619: CALL_OW 1
5623: ST_TO_ADDR
// result := list ;
5624: LD_ADDR_VAR 0 4
5628: PUSH
5629: LD_VAR 0 1
5633: ST_TO_ADDR
// end ;
5634: LD_VAR 0 4
5638: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5639: LD_INT 0
5641: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5642: LD_ADDR_VAR 0 5
5646: PUSH
5647: LD_VAR 0 1
5651: PPUSH
5652: CALL_OW 250
5656: PPUSH
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 251
5666: PPUSH
5667: LD_VAR 0 2
5671: PPUSH
5672: LD_VAR 0 3
5676: PPUSH
5677: LD_VAR 0 4
5681: PPUSH
5682: CALL 6064 0 5
5686: ST_TO_ADDR
// end ;
5687: LD_VAR 0 5
5691: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
5692: LD_INT 0
5694: PPUSH
5695: PPUSH
5696: PPUSH
5697: PPUSH
// if not list or not unit then
5698: LD_VAR 0 2
5702: NOT
5703: IFTRUE 5712
5705: PUSH
5706: LD_VAR 0 1
5710: NOT
5711: OR
5712: IFFALSE 5716
// exit ;
5714: GO 6059
// result := [ ] ;
5716: LD_ADDR_VAR 0 5
5720: PUSH
5721: EMPTY
5722: ST_TO_ADDR
// for i in list do
5723: LD_ADDR_VAR 0 6
5727: PUSH
5728: LD_VAR 0 2
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5952
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
5736: LD_ADDR_VAR 0 8
5740: PUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: LD_VAR 0 6
5750: PUSH
5751: LD_INT 1
5753: ARRAY
5754: PPUSH
5755: LD_VAR 0 6
5759: PUSH
5760: LD_INT 2
5762: ARRAY
5763: PPUSH
5764: CALL_OW 297
5768: ST_TO_ADDR
// if not Count ( result ) then
5769: LD_VAR 0 5
5773: PPUSH
5774: CALL 2286 0 1
5778: NOT
5779: IFFALSE 5812
// begin result := Join ( result , [ i , tmp ] ) ;
5781: LD_ADDR_VAR 0 5
5785: PUSH
5786: LD_VAR 0 5
5790: PPUSH
5791: LD_VAR 0 6
5795: PUSH
5796: LD_VAR 0 8
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PPUSH
5805: CALL 38262 0 2
5809: ST_TO_ADDR
// continue ;
5810: GO 5733
// end ; if result [ result ] [ 2 ] <= tmp then
5812: LD_VAR 0 5
5816: PUSH
5817: LD_VAR 0 5
5821: ARRAY
5822: PUSH
5823: LD_INT 2
5825: ARRAY
5826: PUSH
5827: LD_VAR 0 8
5831: LESSEQUAL
5832: IFFALSE 5865
// result := Join ( result , [ i , tmp ] ) else
5834: LD_ADDR_VAR 0 5
5838: PUSH
5839: LD_VAR 0 5
5843: PPUSH
5844: LD_VAR 0 6
5848: PUSH
5849: LD_VAR 0 8
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL 38262 0 2
5862: ST_TO_ADDR
5863: GO 5950
// begin for j := 1 to Count ( result ) do
5865: LD_ADDR_VAR 0 7
5869: PUSH
5870: DOUBLE
5871: LD_INT 1
5873: DEC
5874: ST_TO_ADDR
5875: LD_VAR 0 5
5879: PPUSH
5880: CALL 2286 0 1
5884: PUSH
5885: FOR_TO
5886: IFFALSE 5948
// begin if tmp < result [ j ] [ 2 ] then
5888: LD_VAR 0 8
5892: PUSH
5893: LD_VAR 0 5
5897: PUSH
5898: LD_VAR 0 7
5902: ARRAY
5903: PUSH
5904: LD_INT 2
5906: ARRAY
5907: LESS
5908: IFFALSE 5946
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5910: LD_ADDR_VAR 0 5
5914: PUSH
5915: LD_VAR 0 5
5919: PPUSH
5920: LD_VAR 0 7
5924: PPUSH
5925: LD_VAR 0 6
5929: PUSH
5930: LD_VAR 0 8
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PPUSH
5939: CALL_OW 2
5943: ST_TO_ADDR
// break ;
5944: GO 5948
// end ; end ;
5946: GO 5885
5948: POP
5949: POP
// end ; end ;
5950: GO 5733
5952: POP
5953: POP
// if result and not asc then
5954: LD_VAR 0 5
5958: IFFALSE 5967
5960: PUSH
5961: LD_VAR 0 3
5965: NOT
5966: AND
5967: IFFALSE 5984
// result := ReverseArray ( result ) ;
5969: LD_ADDR_VAR 0 5
5973: PUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL 33342 0 1
5983: ST_TO_ADDR
// tmp := [ ] ;
5984: LD_ADDR_VAR 0 8
5988: PUSH
5989: EMPTY
5990: ST_TO_ADDR
// if mode then
5991: LD_VAR 0 4
5995: IFFALSE 6059
// begin for i := 1 to result do
5997: LD_ADDR_VAR 0 6
6001: PUSH
6002: DOUBLE
6003: LD_INT 1
6005: DEC
6006: ST_TO_ADDR
6007: LD_VAR 0 5
6011: PUSH
6012: FOR_TO
6013: IFFALSE 6047
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6015: LD_ADDR_VAR 0 8
6019: PUSH
6020: LD_VAR 0 8
6024: PPUSH
6025: LD_VAR 0 5
6029: PUSH
6030: LD_VAR 0 6
6034: ARRAY
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL 38262 0 2
6044: ST_TO_ADDR
6045: GO 6012
6047: POP
6048: POP
// result := tmp ;
6049: LD_ADDR_VAR 0 5
6053: PUSH
6054: LD_VAR 0 8
6058: ST_TO_ADDR
// end ; end ;
6059: LD_VAR 0 5
6063: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6064: LD_INT 0
6066: PPUSH
6067: PPUSH
6068: PPUSH
6069: PPUSH
// if not list then
6070: LD_VAR 0 3
6074: NOT
6075: IFFALSE 6079
// exit ;
6077: GO 6469
// result := [ ] ;
6079: LD_ADDR_VAR 0 6
6083: PUSH
6084: EMPTY
6085: ST_TO_ADDR
// for i in list do
6086: LD_ADDR_VAR 0 7
6090: PUSH
6091: LD_VAR 0 3
6095: PUSH
6096: FOR_IN
6097: IFFALSE 6299
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6099: LD_ADDR_VAR 0 9
6103: PUSH
6104: LD_VAR 0 7
6108: PPUSH
6109: LD_VAR 0 1
6113: PPUSH
6114: LD_VAR 0 2
6118: PPUSH
6119: CALL_OW 297
6123: ST_TO_ADDR
// if not result then
6124: LD_VAR 0 6
6128: NOT
6129: IFFALSE 6155
// result := [ [ i , tmp ] ] else
6131: LD_ADDR_VAR 0 6
6135: PUSH
6136: LD_VAR 0 7
6140: PUSH
6141: LD_VAR 0 9
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: ST_TO_ADDR
6153: GO 6297
// begin if result [ result ] [ 2 ] <= tmp then
6155: LD_VAR 0 6
6159: PUSH
6160: LD_VAR 0 6
6164: ARRAY
6165: PUSH
6166: LD_INT 2
6168: ARRAY
6169: PUSH
6170: LD_VAR 0 9
6174: LESSEQUAL
6175: IFFALSE 6217
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_VAR 0 6
6186: PPUSH
6187: LD_VAR 0 6
6191: PUSH
6192: LD_INT 1
6194: PLUS
6195: PPUSH
6196: LD_VAR 0 7
6200: PUSH
6201: LD_VAR 0 9
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 2
6214: ST_TO_ADDR
6215: GO 6297
// for j := 1 to result do
6217: LD_ADDR_VAR 0 8
6221: PUSH
6222: DOUBLE
6223: LD_INT 1
6225: DEC
6226: ST_TO_ADDR
6227: LD_VAR 0 6
6231: PUSH
6232: FOR_TO
6233: IFFALSE 6295
// begin if tmp < result [ j ] [ 2 ] then
6235: LD_VAR 0 9
6239: PUSH
6240: LD_VAR 0 6
6244: PUSH
6245: LD_VAR 0 8
6249: ARRAY
6250: PUSH
6251: LD_INT 2
6253: ARRAY
6254: LESS
6255: IFFALSE 6293
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6257: LD_ADDR_VAR 0 6
6261: PUSH
6262: LD_VAR 0 6
6266: PPUSH
6267: LD_VAR 0 8
6271: PPUSH
6272: LD_VAR 0 7
6276: PUSH
6277: LD_VAR 0 9
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 2
6290: ST_TO_ADDR
// break ;
6291: GO 6295
// end ; end ;
6293: GO 6232
6295: POP
6296: POP
// end ; end ;
6297: GO 6096
6299: POP
6300: POP
// if result and not asc then
6301: LD_VAR 0 6
6305: IFFALSE 6314
6307: PUSH
6308: LD_VAR 0 4
6312: NOT
6313: AND
6314: IFFALSE 6389
// begin tmp := result ;
6316: LD_ADDR_VAR 0 9
6320: PUSH
6321: LD_VAR 0 6
6325: ST_TO_ADDR
// for i = tmp downto 1 do
6326: LD_ADDR_VAR 0 7
6330: PUSH
6331: DOUBLE
6332: LD_VAR 0 9
6336: INC
6337: ST_TO_ADDR
6338: LD_INT 1
6340: PUSH
6341: FOR_DOWNTO
6342: IFFALSE 6387
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6344: LD_ADDR_VAR 0 6
6348: PUSH
6349: LD_VAR 0 6
6353: PPUSH
6354: LD_VAR 0 9
6358: PUSH
6359: LD_VAR 0 7
6363: MINUS
6364: PUSH
6365: LD_INT 1
6367: PLUS
6368: PPUSH
6369: LD_VAR 0 9
6373: PUSH
6374: LD_VAR 0 7
6378: ARRAY
6379: PPUSH
6380: CALL_OW 1
6384: ST_TO_ADDR
6385: GO 6341
6387: POP
6388: POP
// end ; tmp := [ ] ;
6389: LD_ADDR_VAR 0 9
6393: PUSH
6394: EMPTY
6395: ST_TO_ADDR
// if mode then
6396: LD_VAR 0 5
6400: IFFALSE 6469
// begin for i = 1 to result do
6402: LD_ADDR_VAR 0 7
6406: PUSH
6407: DOUBLE
6408: LD_INT 1
6410: DEC
6411: ST_TO_ADDR
6412: LD_VAR 0 6
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6457
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6420: LD_ADDR_VAR 0 9
6424: PUSH
6425: LD_VAR 0 9
6429: PPUSH
6430: LD_VAR 0 7
6434: PPUSH
6435: LD_VAR 0 6
6439: PUSH
6440: LD_VAR 0 7
6444: ARRAY
6445: PUSH
6446: LD_INT 1
6448: ARRAY
6449: PPUSH
6450: CALL_OW 1
6454: ST_TO_ADDR
6455: GO 6417
6457: POP
6458: POP
// result := tmp ;
6459: LD_ADDR_VAR 0 6
6463: PUSH
6464: LD_VAR 0 9
6468: ST_TO_ADDR
// end ; end ;
6469: LD_VAR 0 6
6473: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6474: LD_INT 0
6476: PPUSH
6477: PPUSH
6478: PPUSH
6479: PPUSH
6480: PPUSH
6481: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6482: LD_ADDR_VAR 0 5
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: LD_INT 0
6495: PUSH
6496: EMPTY
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: ST_TO_ADDR
// if not x or not y then
6504: LD_VAR 0 2
6508: NOT
6509: IFTRUE 6518
6511: PUSH
6512: LD_VAR 0 3
6516: NOT
6517: OR
6518: IFFALSE 6522
// exit ;
6520: GO 8178
// if not range then
6522: LD_VAR 0 4
6526: NOT
6527: IFFALSE 6537
// range := 10 ;
6529: LD_ADDR_VAR 0 4
6533: PUSH
6534: LD_INT 10
6536: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6537: LD_ADDR_VAR 0 8
6541: PUSH
6542: LD_INT 81
6544: PUSH
6545: LD_VAR 0 1
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 92
6556: PUSH
6557: LD_VAR 0 2
6561: PUSH
6562: LD_VAR 0 3
6566: PUSH
6567: LD_VAR 0 4
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 3
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: PPUSH
6600: CALL_OW 69
6604: ST_TO_ADDR
// if not tmp then
6605: LD_VAR 0 8
6609: NOT
6610: IFFALSE 6614
// exit ;
6612: GO 8178
// for i in tmp do
6614: LD_ADDR_VAR 0 6
6618: PUSH
6619: LD_VAR 0 8
6623: PUSH
6624: FOR_IN
6625: IFFALSE 8153
// begin points := [ 0 , 0 , 0 ] ;
6627: LD_ADDR_VAR 0 9
6631: PUSH
6632: LD_INT 0
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: LD_INT 0
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: ST_TO_ADDR
// bpoints := 1 ;
6646: LD_ADDR_VAR 0 10
6650: PUSH
6651: LD_INT 1
6653: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6654: LD_VAR 0 6
6658: PPUSH
6659: CALL_OW 247
6663: PUSH
6664: LD_INT 1
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 7254
6672: POP
// begin if GetClass ( i ) = 1 then
6673: LD_VAR 0 6
6677: PPUSH
6678: CALL_OW 257
6682: PUSH
6683: LD_INT 1
6685: EQUAL
6686: IFFALSE 6707
// points := [ 10 , 5 , 3 ] ;
6688: LD_ADDR_VAR 0 9
6692: PUSH
6693: LD_INT 10
6695: PUSH
6696: LD_INT 5
6698: PUSH
6699: LD_INT 3
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6707: LD_VAR 0 6
6711: PPUSH
6712: CALL_OW 257
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: LD_INT 3
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: IN
6731: IFFALSE 6752
// points := [ 3 , 2 , 1 ] ;
6733: LD_ADDR_VAR 0 9
6737: PUSH
6738: LD_INT 3
6740: PUSH
6741: LD_INT 2
6743: PUSH
6744: LD_INT 1
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6752: LD_VAR 0 6
6756: PPUSH
6757: CALL_OW 257
6761: PUSH
6762: LD_INT 5
6764: EQUAL
6765: IFFALSE 6786
// points := [ 130 , 5 , 2 ] ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 130
6774: PUSH
6775: LD_INT 5
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6786: LD_VAR 0 6
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 8
6798: EQUAL
6799: IFFALSE 6820
// points := [ 35 , 35 , 30 ] ;
6801: LD_ADDR_VAR 0 9
6805: PUSH
6806: LD_INT 35
6808: PUSH
6809: LD_INT 35
6811: PUSH
6812: LD_INT 30
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6820: LD_VAR 0 6
6824: PPUSH
6825: CALL_OW 257
6829: PUSH
6830: LD_INT 9
6832: EQUAL
6833: IFFALSE 6854
// points := [ 20 , 55 , 40 ] ;
6835: LD_ADDR_VAR 0 9
6839: PUSH
6840: LD_INT 20
6842: PUSH
6843: LD_INT 55
6845: PUSH
6846: LD_INT 40
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6854: LD_VAR 0 6
6858: PPUSH
6859: CALL_OW 257
6863: PUSH
6864: LD_INT 12
6866: PUSH
6867: LD_INT 16
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: IN
6874: IFFALSE 6895
// points := [ 5 , 3 , 2 ] ;
6876: LD_ADDR_VAR 0 9
6880: PUSH
6881: LD_INT 5
6883: PUSH
6884: LD_INT 3
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6895: LD_VAR 0 6
6899: PPUSH
6900: CALL_OW 257
6904: PUSH
6905: LD_INT 17
6907: EQUAL
6908: IFFALSE 6929
// points := [ 100 , 50 , 75 ] ;
6910: LD_ADDR_VAR 0 9
6914: PUSH
6915: LD_INT 100
6917: PUSH
6918: LD_INT 50
6920: PUSH
6921: LD_INT 75
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6929: LD_VAR 0 6
6933: PPUSH
6934: CALL_OW 257
6938: PUSH
6939: LD_INT 15
6941: EQUAL
6942: IFFALSE 6963
// points := [ 10 , 5 , 3 ] ;
6944: LD_ADDR_VAR 0 9
6948: PUSH
6949: LD_INT 10
6951: PUSH
6952: LD_INT 5
6954: PUSH
6955: LD_INT 3
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6963: LD_VAR 0 6
6967: PPUSH
6968: CALL_OW 257
6972: PUSH
6973: LD_INT 14
6975: EQUAL
6976: IFFALSE 6997
// points := [ 10 , 0 , 0 ] ;
6978: LD_ADDR_VAR 0 9
6982: PUSH
6983: LD_INT 10
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: LD_INT 0
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6997: LD_VAR 0 6
7001: PPUSH
7002: CALL_OW 257
7006: PUSH
7007: LD_INT 11
7009: EQUAL
7010: IFFALSE 7031
// points := [ 30 , 10 , 5 ] ;
7012: LD_ADDR_VAR 0 9
7016: PUSH
7017: LD_INT 30
7019: PUSH
7020: LD_INT 10
7022: PUSH
7023: LD_INT 5
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 5
7038: PPUSH
7039: CALL_OW 321
7043: PUSH
7044: LD_INT 2
7046: EQUAL
7047: IFFALSE 7064
// bpoints := bpoints * 1.8 ;
7049: LD_ADDR_VAR 0 10
7053: PUSH
7054: LD_VAR 0 10
7058: PUSH
7059: LD_REAL  1.80000000000000E+0000
7062: MUL
7063: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7064: LD_VAR 0 6
7068: PPUSH
7069: CALL_OW 257
7073: PUSH
7074: LD_INT 1
7076: PUSH
7077: LD_INT 2
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 4
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: IN
7092: IFFALSE 7112
7094: PUSH
7095: LD_VAR 0 1
7099: PPUSH
7100: LD_INT 51
7102: PPUSH
7103: CALL_OW 321
7107: PUSH
7108: LD_INT 2
7110: EQUAL
7111: AND
7112: IFFALSE 7129
// bpoints := bpoints * 1.2 ;
7114: LD_ADDR_VAR 0 10
7118: PUSH
7119: LD_VAR 0 10
7123: PUSH
7124: LD_REAL  1.20000000000000E+0000
7127: MUL
7128: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7129: LD_VAR 0 6
7133: PPUSH
7134: CALL_OW 257
7138: PUSH
7139: LD_INT 5
7141: PUSH
7142: LD_INT 7
7144: PUSH
7145: LD_INT 9
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: IN
7153: IFFALSE 7173
7155: PUSH
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_INT 52
7163: PPUSH
7164: CALL_OW 321
7168: PUSH
7169: LD_INT 2
7171: EQUAL
7172: AND
7173: IFFALSE 7190
// bpoints := bpoints * 1.5 ;
7175: LD_ADDR_VAR 0 10
7179: PUSH
7180: LD_VAR 0 10
7184: PUSH
7185: LD_REAL  1.50000000000000E+0000
7188: MUL
7189: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7190: LD_VAR 0 1
7194: PPUSH
7195: LD_INT 66
7197: PPUSH
7198: CALL_OW 321
7202: PUSH
7203: LD_INT 2
7205: EQUAL
7206: IFFALSE 7223
// bpoints := bpoints * 1.1 ;
7208: LD_ADDR_VAR 0 10
7212: PUSH
7213: LD_VAR 0 10
7217: PUSH
7218: LD_REAL  1.10000000000000E+0000
7221: MUL
7222: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7223: LD_ADDR_VAR 0 10
7227: PUSH
7228: LD_VAR 0 10
7232: PUSH
7233: LD_VAR 0 6
7237: PPUSH
7238: LD_INT 1
7240: PPUSH
7241: CALL_OW 259
7245: PUSH
7246: LD_REAL  1.15000000000000E+0000
7249: MUL
7250: MUL
7251: ST_TO_ADDR
// end ; unit_vehicle :
7252: GO 8082
7254: LD_INT 2
7256: DOUBLE
7257: EQUAL
7258: IFTRUE 7262
7260: GO 8070
7262: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7263: LD_VAR 0 6
7267: PPUSH
7268: CALL_OW 264
7272: PUSH
7273: LD_INT 2
7275: PUSH
7276: LD_INT 42
7278: PUSH
7279: LD_INT 24
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: IN
7287: IFFALSE 7308
// points := [ 25 , 5 , 3 ] ;
7289: LD_ADDR_VAR 0 9
7293: PUSH
7294: LD_INT 25
7296: PUSH
7297: LD_INT 5
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7308: LD_VAR 0 6
7312: PPUSH
7313: CALL_OW 264
7317: PUSH
7318: LD_INT 4
7320: PUSH
7321: LD_INT 43
7323: PUSH
7324: LD_INT 25
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: IN
7332: IFFALSE 7353
// points := [ 40 , 15 , 5 ] ;
7334: LD_ADDR_VAR 0 9
7338: PUSH
7339: LD_INT 40
7341: PUSH
7342: LD_INT 15
7344: PUSH
7345: LD_INT 5
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7353: LD_VAR 0 6
7357: PPUSH
7358: CALL_OW 264
7362: PUSH
7363: LD_INT 3
7365: PUSH
7366: LD_INT 23
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: IN
7373: IFFALSE 7394
// points := [ 7 , 25 , 8 ] ;
7375: LD_ADDR_VAR 0 9
7379: PUSH
7380: LD_INT 7
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 8
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7394: LD_VAR 0 6
7398: PPUSH
7399: CALL_OW 264
7403: PUSH
7404: LD_INT 5
7406: PUSH
7407: LD_INT 27
7409: PUSH
7410: LD_INT 44
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: IN
7418: IFFALSE 7439
// points := [ 14 , 50 , 16 ] ;
7420: LD_ADDR_VAR 0 9
7424: PUSH
7425: LD_INT 14
7427: PUSH
7428: LD_INT 50
7430: PUSH
7431: LD_INT 16
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7439: LD_VAR 0 6
7443: PPUSH
7444: CALL_OW 264
7448: PUSH
7449: LD_INT 6
7451: PUSH
7452: LD_INT 46
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: IN
7459: IFFALSE 7480
// points := [ 32 , 120 , 70 ] ;
7461: LD_ADDR_VAR 0 9
7465: PUSH
7466: LD_INT 32
7468: PUSH
7469: LD_INT 120
7471: PUSH
7472: LD_INT 70
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7480: LD_VAR 0 6
7484: PPUSH
7485: CALL_OW 264
7489: PUSH
7490: LD_INT 7
7492: PUSH
7493: LD_INT 28
7495: PUSH
7496: LD_INT 45
7498: PUSH
7499: LD_INT 92
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: IN
7508: IFFALSE 7529
// points := [ 35 , 20 , 45 ] ;
7510: LD_ADDR_VAR 0 9
7514: PUSH
7515: LD_INT 35
7517: PUSH
7518: LD_INT 20
7520: PUSH
7521: LD_INT 45
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7529: LD_VAR 0 6
7533: PPUSH
7534: CALL_OW 264
7538: PUSH
7539: LD_INT 47
7541: PUSH
7542: EMPTY
7543: LIST
7544: IN
7545: IFFALSE 7566
// points := [ 67 , 45 , 75 ] ;
7547: LD_ADDR_VAR 0 9
7551: PUSH
7552: LD_INT 67
7554: PUSH
7555: LD_INT 45
7557: PUSH
7558: LD_INT 75
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7566: LD_VAR 0 6
7570: PPUSH
7571: CALL_OW 264
7575: PUSH
7576: LD_INT 26
7578: PUSH
7579: EMPTY
7580: LIST
7581: IN
7582: IFFALSE 7603
// points := [ 120 , 30 , 80 ] ;
7584: LD_ADDR_VAR 0 9
7588: PUSH
7589: LD_INT 120
7591: PUSH
7592: LD_INT 30
7594: PUSH
7595: LD_INT 80
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7603: LD_VAR 0 6
7607: PPUSH
7608: CALL_OW 264
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: EMPTY
7617: LIST
7618: IN
7619: IFFALSE 7640
// points := [ 40 , 1 , 1 ] ;
7621: LD_ADDR_VAR 0 9
7625: PUSH
7626: LD_INT 40
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: LD_INT 1
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7640: LD_VAR 0 6
7644: PPUSH
7645: CALL_OW 264
7649: PUSH
7650: LD_INT 29
7652: PUSH
7653: EMPTY
7654: LIST
7655: IN
7656: IFFALSE 7677
// points := [ 70 , 200 , 400 ] ;
7658: LD_ADDR_VAR 0 9
7662: PUSH
7663: LD_INT 70
7665: PUSH
7666: LD_INT 200
7668: PUSH
7669: LD_INT 400
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7677: LD_VAR 0 6
7681: PPUSH
7682: CALL_OW 264
7686: PUSH
7687: LD_INT 14
7689: PUSH
7690: LD_INT 53
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: IN
7697: IFFALSE 7718
// points := [ 40 , 10 , 20 ] ;
7699: LD_ADDR_VAR 0 9
7703: PUSH
7704: LD_INT 40
7706: PUSH
7707: LD_INT 10
7709: PUSH
7710: LD_INT 20
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7718: LD_VAR 0 6
7722: PPUSH
7723: CALL_OW 264
7727: PUSH
7728: LD_INT 9
7730: PUSH
7731: EMPTY
7732: LIST
7733: IN
7734: IFFALSE 7755
// points := [ 5 , 70 , 20 ] ;
7736: LD_ADDR_VAR 0 9
7740: PUSH
7741: LD_INT 5
7743: PUSH
7744: LD_INT 70
7746: PUSH
7747: LD_INT 20
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7755: LD_VAR 0 6
7759: PPUSH
7760: CALL_OW 264
7764: PUSH
7765: LD_INT 10
7767: PUSH
7768: EMPTY
7769: LIST
7770: IN
7771: IFFALSE 7792
// points := [ 35 , 110 , 70 ] ;
7773: LD_ADDR_VAR 0 9
7777: PUSH
7778: LD_INT 35
7780: PUSH
7781: LD_INT 110
7783: PUSH
7784: LD_INT 70
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7792: LD_VAR 0 6
7796: PPUSH
7797: CALL_OW 265
7801: PUSH
7802: LD_INT 25
7804: EQUAL
7805: IFFALSE 7826
// points := [ 80 , 65 , 100 ] ;
7807: LD_ADDR_VAR 0 9
7811: PUSH
7812: LD_INT 80
7814: PUSH
7815: LD_INT 65
7817: PUSH
7818: LD_INT 100
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7826: LD_VAR 0 6
7830: PPUSH
7831: CALL_OW 263
7835: PUSH
7836: LD_INT 1
7838: EQUAL
7839: IFFALSE 7874
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7841: LD_ADDR_VAR 0 10
7845: PUSH
7846: LD_VAR 0 10
7850: PUSH
7851: LD_VAR 0 6
7855: PPUSH
7856: CALL_OW 311
7860: PPUSH
7861: LD_INT 3
7863: PPUSH
7864: CALL_OW 259
7868: PUSH
7869: LD_INT 4
7871: MUL
7872: MUL
7873: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7874: LD_VAR 0 6
7878: PPUSH
7879: CALL_OW 263
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7938
// begin j := IsControledBy ( i ) ;
7889: LD_ADDR_VAR 0 7
7893: PUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 312
7903: ST_TO_ADDR
// if j then
7904: LD_VAR 0 7
7908: IFFALSE 7938
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7910: LD_ADDR_VAR 0 10
7914: PUSH
7915: LD_VAR 0 10
7919: PUSH
7920: LD_VAR 0 7
7924: PPUSH
7925: LD_INT 3
7927: PPUSH
7928: CALL_OW 259
7932: PUSH
7933: LD_INT 3
7935: MUL
7936: MUL
7937: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7938: LD_VAR 0 6
7942: PPUSH
7943: CALL_OW 264
7947: PUSH
7948: LD_INT 5
7950: PUSH
7951: LD_INT 6
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: LD_INT 44
7959: PUSH
7960: LD_INT 47
7962: PUSH
7963: LD_INT 45
7965: PUSH
7966: LD_INT 28
7968: PUSH
7969: LD_INT 7
7971: PUSH
7972: LD_INT 27
7974: PUSH
7975: LD_INT 29
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: IN
7990: IFFALSE 8010
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: LD_INT 52
8000: PPUSH
8001: CALL_OW 321
8005: PUSH
8006: LD_INT 2
8008: EQUAL
8009: AND
8010: IFFALSE 8027
// bpoints := bpoints * 1.2 ;
8012: LD_ADDR_VAR 0 10
8016: PUSH
8017: LD_VAR 0 10
8021: PUSH
8022: LD_REAL  1.20000000000000E+0000
8025: MUL
8026: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8027: LD_VAR 0 6
8031: PPUSH
8032: CALL_OW 264
8036: PUSH
8037: LD_INT 6
8039: PUSH
8040: LD_INT 46
8042: PUSH
8043: LD_INT 47
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: LIST
8050: IN
8051: IFFALSE 8068
// bpoints := bpoints * 1.2 ;
8053: LD_ADDR_VAR 0 10
8057: PUSH
8058: LD_VAR 0 10
8062: PUSH
8063: LD_REAL  1.20000000000000E+0000
8066: MUL
8067: ST_TO_ADDR
// end ; unit_building :
8068: GO 8082
8070: LD_INT 3
8072: DOUBLE
8073: EQUAL
8074: IFTRUE 8078
8076: GO 8081
8078: POP
// ; end ;
8079: GO 8082
8081: POP
// for j = 1 to 3 do
8082: LD_ADDR_VAR 0 7
8086: PUSH
8087: DOUBLE
8088: LD_INT 1
8090: DEC
8091: ST_TO_ADDR
8092: LD_INT 3
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8149
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: LD_VAR 0 5
8107: PPUSH
8108: LD_VAR 0 7
8112: PPUSH
8113: LD_VAR 0 5
8117: PUSH
8118: LD_VAR 0 7
8122: ARRAY
8123: PUSH
8124: LD_VAR 0 9
8128: PUSH
8129: LD_VAR 0 7
8133: ARRAY
8134: PUSH
8135: LD_VAR 0 10
8139: MUL
8140: PLUS
8141: PPUSH
8142: CALL_OW 1
8146: ST_TO_ADDR
8147: GO 8095
8149: POP
8150: POP
// end ;
8151: GO 6624
8153: POP
8154: POP
// result := Replace ( result , 4 , tmp ) ;
8155: LD_ADDR_VAR 0 5
8159: PUSH
8160: LD_VAR 0 5
8164: PPUSH
8165: LD_INT 4
8167: PPUSH
8168: LD_VAR 0 8
8172: PPUSH
8173: CALL_OW 1
8177: ST_TO_ADDR
// end ;
8178: LD_VAR 0 5
8182: RET
// export function DangerAtRange ( unit , range ) ; begin
8183: LD_INT 0
8185: PPUSH
// if not unit then
8186: LD_VAR 0 1
8190: NOT
8191: IFFALSE 8195
// exit ;
8193: GO 8240
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8195: LD_ADDR_VAR 0 3
8199: PUSH
8200: LD_VAR 0 1
8204: PPUSH
8205: CALL_OW 255
8209: PPUSH
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 250
8219: PPUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 251
8229: PPUSH
8230: LD_VAR 0 2
8234: PPUSH
8235: CALL 6474 0 4
8239: ST_TO_ADDR
// end ;
8240: LD_VAR 0 3
8244: RET
// export function DangerInArea ( side , area ) ; begin
8245: LD_INT 0
8247: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8248: LD_ADDR_VAR 0 3
8252: PUSH
8253: LD_VAR 0 2
8257: PPUSH
8258: LD_INT 81
8260: PUSH
8261: LD_VAR 0 1
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PPUSH
8270: CALL_OW 70
8274: ST_TO_ADDR
// end ;
8275: LD_VAR 0 3
8279: RET
// export function IsExtension ( b ) ; begin
8280: LD_INT 0
8282: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: LD_INT 23
8295: PUSH
8296: LD_INT 20
8298: PUSH
8299: LD_INT 22
8301: PUSH
8302: LD_INT 17
8304: PUSH
8305: LD_INT 24
8307: PUSH
8308: LD_INT 21
8310: PUSH
8311: LD_INT 19
8313: PUSH
8314: LD_INT 16
8316: PUSH
8317: LD_INT 25
8319: PUSH
8320: LD_INT 18
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: IN
8335: ST_TO_ADDR
// end ;
8336: LD_VAR 0 2
8340: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8341: LD_INT 0
8343: PPUSH
8344: PPUSH
8345: PPUSH
// result := [ ] ;
8346: LD_ADDR_VAR 0 4
8350: PUSH
8351: EMPTY
8352: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: LD_VAR 0 2
8362: PPUSH
8363: LD_INT 21
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 70
8377: ST_TO_ADDR
// if not tmp then
8378: LD_VAR 0 5
8382: NOT
8383: IFFALSE 8387
// exit ;
8385: GO 8451
// if checkLink then
8387: LD_VAR 0 3
8391: IFFALSE 8441
// begin for i in tmp do
8393: LD_ADDR_VAR 0 6
8397: PUSH
8398: LD_VAR 0 5
8402: PUSH
8403: FOR_IN
8404: IFFALSE 8439
// if GetBase ( i ) <> base then
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 274
8415: PUSH
8416: LD_VAR 0 1
8420: NONEQUAL
8421: IFFALSE 8437
// ComLinkToBase ( base , i ) ;
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_VAR 0 6
8432: PPUSH
8433: CALL_OW 169
8437: GO 8403
8439: POP
8440: POP
// end ; result := tmp ;
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_VAR 0 5
8450: ST_TO_ADDR
// end ;
8451: LD_VAR 0 4
8455: RET
// export function ComComplete ( units , b ) ; var i ; begin
8456: LD_INT 0
8458: PPUSH
8459: PPUSH
// if not units then
8460: LD_VAR 0 1
8464: NOT
8465: IFFALSE 8469
// exit ;
8467: GO 8559
// for i in units do
8469: LD_ADDR_VAR 0 4
8473: PUSH
8474: LD_VAR 0 1
8478: PUSH
8479: FOR_IN
8480: IFFALSE 8557
// if BuildingStatus ( b ) = bs_build then
8482: LD_VAR 0 2
8486: PPUSH
8487: CALL_OW 461
8491: PUSH
8492: LD_INT 1
8494: EQUAL
8495: IFFALSE 8555
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8497: LD_VAR 0 4
8501: PPUSH
8502: LD_STRING h
8504: PUSH
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 250
8514: PUSH
8515: LD_VAR 0 2
8519: PPUSH
8520: CALL_OW 251
8524: PUSH
8525: LD_VAR 0 2
8529: PUSH
8530: LD_INT 0
8532: PUSH
8533: LD_INT 0
8535: PUSH
8536: LD_INT 0
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: PPUSH
8551: CALL_OW 446
8555: GO 8479
8557: POP
8558: POP
// end ;
8559: LD_VAR 0 3
8563: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8564: LD_INT 0
8566: PPUSH
8567: PPUSH
8568: PPUSH
8569: PPUSH
8570: PPUSH
8571: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8572: LD_VAR 0 1
8576: NOT
8577: IFTRUE 8594
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 263
8589: PUSH
8590: LD_INT 2
8592: NONEQUAL
8593: OR
8594: IFFALSE 8598
// exit ;
8596: GO 8914
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8598: LD_ADDR_VAR 0 6
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 255
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 2
8622: PUSH
8623: LD_INT 30
8625: PUSH
8626: LD_INT 36
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: LD_INT 34
8635: PUSH
8636: LD_INT 31
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PPUSH
8652: CALL_OW 69
8656: ST_TO_ADDR
// if not tmp then
8657: LD_VAR 0 6
8661: NOT
8662: IFFALSE 8666
// exit ;
8664: GO 8914
// result := [ ] ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: EMPTY
8672: ST_TO_ADDR
// for i in tmp do
8673: LD_ADDR_VAR 0 3
8677: PUSH
8678: LD_VAR 0 6
8682: PUSH
8683: FOR_IN
8684: IFFALSE 8755
// begin t := UnitsInside ( i ) ;
8686: LD_ADDR_VAR 0 4
8690: PUSH
8691: LD_VAR 0 3
8695: PPUSH
8696: CALL_OW 313
8700: ST_TO_ADDR
// if t then
8701: LD_VAR 0 4
8705: IFFALSE 8753
// for j in t do
8707: LD_ADDR_VAR 0 7
8711: PUSH
8712: LD_VAR 0 4
8716: PUSH
8717: FOR_IN
8718: IFFALSE 8751
// result := Replace ( result , result + 1 , j ) ;
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_VAR 0 2
8729: PPUSH
8730: LD_VAR 0 2
8734: PUSH
8735: LD_INT 1
8737: PLUS
8738: PPUSH
8739: LD_VAR 0 7
8743: PPUSH
8744: CALL_OW 1
8748: ST_TO_ADDR
8749: GO 8717
8751: POP
8752: POP
// end ;
8753: GO 8683
8755: POP
8756: POP
// if not result then
8757: LD_VAR 0 2
8761: NOT
8762: IFFALSE 8766
// exit ;
8764: GO 8914
// mech := result [ 1 ] ;
8766: LD_ADDR_VAR 0 5
8770: PUSH
8771: LD_VAR 0 2
8775: PUSH
8776: LD_INT 1
8778: ARRAY
8779: ST_TO_ADDR
// if result > 1 then
8780: LD_VAR 0 2
8784: PUSH
8785: LD_INT 1
8787: GREATER
8788: IFFALSE 8900
// begin for i = 2 to result do
8790: LD_ADDR_VAR 0 3
8794: PUSH
8795: DOUBLE
8796: LD_INT 2
8798: DEC
8799: ST_TO_ADDR
8800: LD_VAR 0 2
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8898
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8808: LD_ADDR_VAR 0 4
8812: PUSH
8813: LD_VAR 0 2
8817: PUSH
8818: LD_VAR 0 3
8822: ARRAY
8823: PPUSH
8824: LD_INT 3
8826: PPUSH
8827: CALL_OW 259
8831: PUSH
8832: LD_VAR 0 2
8836: PUSH
8837: LD_VAR 0 3
8841: ARRAY
8842: PPUSH
8843: CALL_OW 432
8847: MINUS
8848: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8849: LD_VAR 0 4
8853: PUSH
8854: LD_VAR 0 5
8858: PPUSH
8859: LD_INT 3
8861: PPUSH
8862: CALL_OW 259
8866: PUSH
8867: LD_VAR 0 5
8871: PPUSH
8872: CALL_OW 432
8876: MINUS
8877: GREATEREQUAL
8878: IFFALSE 8896
// mech := result [ i ] ;
8880: LD_ADDR_VAR 0 5
8884: PUSH
8885: LD_VAR 0 2
8889: PUSH
8890: LD_VAR 0 3
8894: ARRAY
8895: ST_TO_ADDR
// end ;
8896: GO 8805
8898: POP
8899: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: LD_VAR 0 5
8909: PPUSH
8910: CALL_OW 135
// end ;
8914: LD_VAR 0 2
8918: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8919: LD_INT 0
8921: PPUSH
8922: PPUSH
8923: PPUSH
8924: PPUSH
8925: PPUSH
8926: PPUSH
8927: PPUSH
8928: PPUSH
8929: PPUSH
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
// result := [ ] ;
8934: LD_ADDR_VAR 0 7
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 266
8950: PUSH
8951: LD_INT 0
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: IN
8961: NOT
8962: IFFALSE 8966
// exit ;
8964: GO 10606
// if name then
8966: LD_VAR 0 3
8970: IFFALSE 8986
// SetBName ( base_dep , name ) ;
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_VAR 0 3
8981: PPUSH
8982: CALL_OW 500
// base := GetBase ( base_dep ) ;
8986: LD_ADDR_VAR 0 15
8990: PUSH
8991: LD_VAR 0 1
8995: PPUSH
8996: CALL_OW 274
9000: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9001: LD_ADDR_VAR 0 16
9005: PUSH
9006: LD_VAR 0 1
9010: PPUSH
9011: CALL_OW 255
9015: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9016: LD_ADDR_VAR 0 17
9020: PUSH
9021: LD_VAR 0 1
9025: PPUSH
9026: CALL_OW 248
9030: ST_TO_ADDR
// if sources then
9031: LD_VAR 0 5
9035: IFFALSE 9082
// for i = 1 to 3 do
9037: LD_ADDR_VAR 0 8
9041: PUSH
9042: DOUBLE
9043: LD_INT 1
9045: DEC
9046: ST_TO_ADDR
9047: LD_INT 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9080
// AddResourceType ( base , i , sources [ i ] ) ;
9053: LD_VAR 0 15
9057: PPUSH
9058: LD_VAR 0 8
9062: PPUSH
9063: LD_VAR 0 5
9067: PUSH
9068: LD_VAR 0 8
9072: ARRAY
9073: PPUSH
9074: CALL_OW 276
9078: GO 9050
9080: POP
9081: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9082: LD_ADDR_VAR 0 18
9086: PUSH
9087: LD_VAR 0 15
9091: PPUSH
9092: LD_VAR 0 2
9096: PPUSH
9097: LD_INT 1
9099: PPUSH
9100: CALL 8341 0 3
9104: ST_TO_ADDR
// InitHc ;
9105: CALL_OW 19
// InitUc ;
9109: CALL_OW 18
// uc_side := side ;
9113: LD_ADDR_OWVAR 20
9117: PUSH
9118: LD_VAR 0 16
9122: ST_TO_ADDR
// uc_nation := nation ;
9123: LD_ADDR_OWVAR 21
9127: PUSH
9128: LD_VAR 0 17
9132: ST_TO_ADDR
// if buildings then
9133: LD_VAR 0 18
9137: IFFALSE 10465
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9139: LD_ADDR_VAR 0 19
9143: PUSH
9144: LD_VAR 0 18
9148: PPUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 29
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 30
9164: PUSH
9165: LD_INT 30
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: PPUSH
9177: CALL_OW 72
9181: ST_TO_ADDR
// if tmp then
9182: LD_VAR 0 19
9186: IFFALSE 9234
// for i in tmp do
9188: LD_ADDR_VAR 0 8
9192: PUSH
9193: LD_VAR 0 19
9197: PUSH
9198: FOR_IN
9199: IFFALSE 9232
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9201: LD_VAR 0 8
9205: PPUSH
9206: CALL_OW 250
9210: PPUSH
9211: LD_VAR 0 8
9215: PPUSH
9216: CALL_OW 251
9220: PPUSH
9221: LD_VAR 0 16
9225: PPUSH
9226: CALL_OW 441
9230: GO 9198
9232: POP
9233: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9234: LD_VAR 0 18
9238: PPUSH
9239: LD_INT 2
9241: PUSH
9242: LD_INT 30
9244: PUSH
9245: LD_INT 32
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 30
9254: PUSH
9255: LD_INT 33
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: PPUSH
9267: CALL_OW 72
9271: IFFALSE 9359
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9273: LD_ADDR_VAR 0 8
9277: PUSH
9278: LD_VAR 0 18
9282: PPUSH
9283: LD_INT 2
9285: PUSH
9286: LD_INT 30
9288: PUSH
9289: LD_INT 32
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 33
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: PPUSH
9311: CALL_OW 72
9315: PUSH
9316: FOR_IN
9317: IFFALSE 9357
// begin if not GetBWeapon ( i ) then
9319: LD_VAR 0 8
9323: PPUSH
9324: CALL_OW 269
9328: NOT
9329: IFFALSE 9355
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9331: LD_VAR 0 8
9335: PPUSH
9336: LD_VAR 0 8
9340: PPUSH
9341: LD_VAR 0 2
9345: PPUSH
9346: CALL 10611 0 2
9350: PPUSH
9351: CALL_OW 431
// end ;
9355: GO 9316
9357: POP
9358: POP
// end ; for i = 1 to personel do
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: DOUBLE
9365: LD_INT 1
9367: DEC
9368: ST_TO_ADDR
9369: LD_VAR 0 6
9373: PUSH
9374: FOR_TO
9375: IFFALSE 10445
// begin if i > 4 then
9377: LD_VAR 0 8
9381: PUSH
9382: LD_INT 4
9384: GREATER
9385: IFFALSE 9389
// break ;
9387: GO 10445
// case i of 1 :
9389: LD_VAR 0 8
9393: PUSH
9394: LD_INT 1
9396: DOUBLE
9397: EQUAL
9398: IFTRUE 9402
9400: GO 9482
9402: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9403: LD_ADDR_VAR 0 12
9407: PUSH
9408: LD_VAR 0 18
9412: PPUSH
9413: LD_INT 22
9415: PUSH
9416: LD_VAR 0 16
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 58
9427: PUSH
9428: EMPTY
9429: LIST
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: LD_INT 30
9436: PUSH
9437: LD_INT 32
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 30
9446: PUSH
9447: LD_INT 4
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 30
9456: PUSH
9457: LD_INT 5
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 72
9479: ST_TO_ADDR
9480: GO 9704
9482: LD_INT 2
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9552
9490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9491: LD_ADDR_VAR 0 12
9495: PUSH
9496: LD_VAR 0 18
9500: PPUSH
9501: LD_INT 22
9503: PUSH
9504: LD_VAR 0 16
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 2
9515: PUSH
9516: LD_INT 30
9518: PUSH
9519: LD_INT 0
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 30
9528: PUSH
9529: LD_INT 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 72
9549: ST_TO_ADDR
9550: GO 9704
9552: LD_INT 3
9554: DOUBLE
9555: EQUAL
9556: IFTRUE 9560
9558: GO 9622
9560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9561: LD_ADDR_VAR 0 12
9565: PUSH
9566: LD_VAR 0 18
9570: PPUSH
9571: LD_INT 22
9573: PUSH
9574: LD_VAR 0 16
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 2
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 30
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 72
9619: ST_TO_ADDR
9620: GO 9704
9622: LD_INT 4
9624: DOUBLE
9625: EQUAL
9626: IFTRUE 9630
9628: GO 9703
9630: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9631: LD_ADDR_VAR 0 12
9635: PUSH
9636: LD_VAR 0 18
9640: PPUSH
9641: LD_INT 22
9643: PUSH
9644: LD_VAR 0 16
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 6
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 30
9668: PUSH
9669: LD_INT 7
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 30
9678: PUSH
9679: LD_INT 8
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 72
9700: ST_TO_ADDR
9701: GO 9704
9703: POP
// if i = 1 then
9704: LD_VAR 0 8
9708: PUSH
9709: LD_INT 1
9711: EQUAL
9712: IFFALSE 9823
// begin tmp := [ ] ;
9714: LD_ADDR_VAR 0 19
9718: PUSH
9719: EMPTY
9720: ST_TO_ADDR
// for j in f do
9721: LD_ADDR_VAR 0 9
9725: PUSH
9726: LD_VAR 0 12
9730: PUSH
9731: FOR_IN
9732: IFFALSE 9805
// if GetBType ( j ) = b_bunker then
9734: LD_VAR 0 9
9738: PPUSH
9739: CALL_OW 266
9743: PUSH
9744: LD_INT 32
9746: EQUAL
9747: IFFALSE 9774
// tmp := Insert ( tmp , 1 , j ) else
9749: LD_ADDR_VAR 0 19
9753: PUSH
9754: LD_VAR 0 19
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: LD_VAR 0 9
9766: PPUSH
9767: CALL_OW 2
9771: ST_TO_ADDR
9772: GO 9803
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9774: LD_ADDR_VAR 0 19
9778: PUSH
9779: LD_VAR 0 19
9783: PPUSH
9784: LD_VAR 0 19
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: PPUSH
9793: LD_VAR 0 9
9797: PPUSH
9798: CALL_OW 2
9802: ST_TO_ADDR
9803: GO 9731
9805: POP
9806: POP
// if tmp then
9807: LD_VAR 0 19
9811: IFFALSE 9823
// f := tmp ;
9813: LD_ADDR_VAR 0 12
9817: PUSH
9818: LD_VAR 0 19
9822: ST_TO_ADDR
// end ; x := personel [ i ] ;
9823: LD_ADDR_VAR 0 13
9827: PUSH
9828: LD_VAR 0 6
9832: PUSH
9833: LD_VAR 0 8
9837: ARRAY
9838: ST_TO_ADDR
// if x = - 1 then
9839: LD_VAR 0 13
9843: PUSH
9844: LD_INT 1
9846: NEG
9847: EQUAL
9848: IFFALSE 10059
// begin for j in f do
9850: LD_ADDR_VAR 0 9
9854: PUSH
9855: LD_VAR 0 12
9859: PUSH
9860: FOR_IN
9861: IFFALSE 10055
// repeat InitHc ;
9863: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9867: LD_VAR 0 9
9871: PPUSH
9872: CALL_OW 266
9876: PUSH
9877: LD_INT 5
9879: EQUAL
9880: IFFALSE 9950
// begin if UnitsInside ( j ) < 3 then
9882: LD_VAR 0 9
9886: PPUSH
9887: CALL_OW 313
9891: PUSH
9892: LD_INT 3
9894: LESS
9895: IFFALSE 9931
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9897: LD_INT 0
9899: PPUSH
9900: LD_INT 5
9902: PUSH
9903: LD_INT 8
9905: PUSH
9906: LD_INT 9
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: PUSH
9914: LD_VAR 0 17
9918: ARRAY
9919: PPUSH
9920: LD_VAR 0 4
9924: PPUSH
9925: CALL_OW 380
9929: GO 9948
// PrepareHuman ( false , i , skill ) ;
9931: LD_INT 0
9933: PPUSH
9934: LD_VAR 0 8
9938: PPUSH
9939: LD_VAR 0 4
9943: PPUSH
9944: CALL_OW 380
// end else
9948: GO 9967
// PrepareHuman ( false , i , skill ) ;
9950: LD_INT 0
9952: PPUSH
9953: LD_VAR 0 8
9957: PPUSH
9958: LD_VAR 0 4
9962: PPUSH
9963: CALL_OW 380
// un := CreateHuman ;
9967: LD_ADDR_VAR 0 14
9971: PUSH
9972: CALL_OW 44
9976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9977: LD_ADDR_VAR 0 7
9981: PUSH
9982: LD_VAR 0 7
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: LD_VAR 0 14
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10000: LD_VAR 0 14
10004: PPUSH
10005: LD_VAR 0 9
10009: PPUSH
10010: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10014: LD_VAR 0 9
10018: PPUSH
10019: CALL_OW 313
10023: PUSH
10024: LD_INT 6
10026: EQUAL
10027: IFTRUE 10051
10029: PUSH
10030: LD_VAR 0 9
10034: PPUSH
10035: CALL_OW 266
10039: PUSH
10040: LD_INT 32
10042: PUSH
10043: LD_INT 31
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: IN
10050: OR
10051: IFFALSE 9863
10053: GO 9860
10055: POP
10056: POP
// end else
10057: GO 10443
// for j = 1 to x do
10059: LD_ADDR_VAR 0 9
10063: PUSH
10064: DOUBLE
10065: LD_INT 1
10067: DEC
10068: ST_TO_ADDR
10069: LD_VAR 0 13
10073: PUSH
10074: FOR_TO
10075: IFFALSE 10441
// begin InitHc ;
10077: CALL_OW 19
// if not f then
10081: LD_VAR 0 12
10085: NOT
10086: IFFALSE 10175
// begin PrepareHuman ( false , i , skill ) ;
10088: LD_INT 0
10090: PPUSH
10091: LD_VAR 0 8
10095: PPUSH
10096: LD_VAR 0 4
10100: PPUSH
10101: CALL_OW 380
// un := CreateHuman ;
10105: LD_ADDR_VAR 0 14
10109: PUSH
10110: CALL_OW 44
10114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10115: LD_ADDR_VAR 0 7
10119: PUSH
10120: LD_VAR 0 7
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: LD_VAR 0 14
10132: PPUSH
10133: CALL_OW 2
10137: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10138: LD_VAR 0 14
10142: PPUSH
10143: LD_VAR 0 1
10147: PPUSH
10148: CALL_OW 250
10152: PPUSH
10153: LD_VAR 0 1
10157: PPUSH
10158: CALL_OW 251
10162: PPUSH
10163: LD_INT 10
10165: PPUSH
10166: LD_INT 0
10168: PPUSH
10169: CALL_OW 50
// continue ;
10173: GO 10074
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10175: LD_VAR 0 12
10179: PUSH
10180: LD_INT 1
10182: ARRAY
10183: PPUSH
10184: CALL_OW 313
10188: IFFALSE 10216
10190: PUSH
10191: LD_VAR 0 12
10195: PUSH
10196: LD_INT 1
10198: ARRAY
10199: PPUSH
10200: CALL_OW 266
10204: PUSH
10205: LD_INT 32
10207: PUSH
10208: LD_INT 31
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: IN
10215: AND
10216: IFTRUE 10237
10218: PUSH
10219: LD_VAR 0 12
10223: PUSH
10224: LD_INT 1
10226: ARRAY
10227: PPUSH
10228: CALL_OW 313
10232: PUSH
10233: LD_INT 6
10235: EQUAL
10236: OR
10237: IFFALSE 10257
// f := Delete ( f , 1 ) ;
10239: LD_ADDR_VAR 0 12
10243: PUSH
10244: LD_VAR 0 12
10248: PPUSH
10249: LD_INT 1
10251: PPUSH
10252: CALL_OW 3
10256: ST_TO_ADDR
// if not f then
10257: LD_VAR 0 12
10261: NOT
10262: IFFALSE 10280
// begin x := x + 2 ;
10264: LD_ADDR_VAR 0 13
10268: PUSH
10269: LD_VAR 0 13
10273: PUSH
10274: LD_INT 2
10276: PLUS
10277: ST_TO_ADDR
// continue ;
10278: GO 10074
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10280: LD_VAR 0 12
10284: PUSH
10285: LD_INT 1
10287: ARRAY
10288: PPUSH
10289: CALL_OW 266
10293: PUSH
10294: LD_INT 5
10296: EQUAL
10297: IFFALSE 10371
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10299: LD_VAR 0 12
10303: PUSH
10304: LD_INT 1
10306: ARRAY
10307: PPUSH
10308: CALL_OW 313
10312: PUSH
10313: LD_INT 3
10315: LESS
10316: IFFALSE 10352
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10318: LD_INT 0
10320: PPUSH
10321: LD_INT 5
10323: PUSH
10324: LD_INT 8
10326: PUSH
10327: LD_INT 9
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: LD_VAR 0 17
10339: ARRAY
10340: PPUSH
10341: LD_VAR 0 4
10345: PPUSH
10346: CALL_OW 380
10350: GO 10369
// PrepareHuman ( false , i , skill ) ;
10352: LD_INT 0
10354: PPUSH
10355: LD_VAR 0 8
10359: PPUSH
10360: LD_VAR 0 4
10364: PPUSH
10365: CALL_OW 380
// end else
10369: GO 10388
// PrepareHuman ( false , i , skill ) ;
10371: LD_INT 0
10373: PPUSH
10374: LD_VAR 0 8
10378: PPUSH
10379: LD_VAR 0 4
10383: PPUSH
10384: CALL_OW 380
// un := CreateHuman ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: CALL_OW 44
10397: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10398: LD_ADDR_VAR 0 7
10402: PUSH
10403: LD_VAR 0 7
10407: PPUSH
10408: LD_INT 1
10410: PPUSH
10411: LD_VAR 0 14
10415: PPUSH
10416: CALL_OW 2
10420: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10421: LD_VAR 0 14
10425: PPUSH
10426: LD_VAR 0 12
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PPUSH
10435: CALL_OW 52
// end ;
10439: GO 10074
10441: POP
10442: POP
// end ;
10443: GO 9374
10445: POP
10446: POP
// result := result ^ buildings ;
10447: LD_ADDR_VAR 0 7
10451: PUSH
10452: LD_VAR 0 7
10456: PUSH
10457: LD_VAR 0 18
10461: ADD
10462: ST_TO_ADDR
// end else
10463: GO 10606
// begin for i = 1 to personel do
10465: LD_ADDR_VAR 0 8
10469: PUSH
10470: DOUBLE
10471: LD_INT 1
10473: DEC
10474: ST_TO_ADDR
10475: LD_VAR 0 6
10479: PUSH
10480: FOR_TO
10481: IFFALSE 10604
// begin if i > 4 then
10483: LD_VAR 0 8
10487: PUSH
10488: LD_INT 4
10490: GREATER
10491: IFFALSE 10495
// break ;
10493: GO 10604
// x := personel [ i ] ;
10495: LD_ADDR_VAR 0 13
10499: PUSH
10500: LD_VAR 0 6
10504: PUSH
10505: LD_VAR 0 8
10509: ARRAY
10510: ST_TO_ADDR
// if x = - 1 then
10511: LD_VAR 0 13
10515: PUSH
10516: LD_INT 1
10518: NEG
10519: EQUAL
10520: IFFALSE 10524
// continue ;
10522: GO 10480
// PrepareHuman ( false , i , skill ) ;
10524: LD_INT 0
10526: PPUSH
10527: LD_VAR 0 8
10531: PPUSH
10532: LD_VAR 0 4
10536: PPUSH
10537: CALL_OW 380
// un := CreateHuman ;
10541: LD_ADDR_VAR 0 14
10545: PUSH
10546: CALL_OW 44
10550: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10551: LD_VAR 0 14
10555: PPUSH
10556: LD_VAR 0 1
10560: PPUSH
10561: CALL_OW 250
10565: PPUSH
10566: LD_VAR 0 1
10570: PPUSH
10571: CALL_OW 251
10575: PPUSH
10576: LD_INT 10
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL_OW 50
// result := result ^ un ;
10586: LD_ADDR_VAR 0 7
10590: PUSH
10591: LD_VAR 0 7
10595: PUSH
10596: LD_VAR 0 14
10600: ADD
10601: ST_TO_ADDR
// end ;
10602: GO 10480
10604: POP
10605: POP
// end ; end ;
10606: LD_VAR 0 7
10610: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10611: LD_INT 0
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
10622: PPUSH
10623: PPUSH
10624: PPUSH
10625: PPUSH
10626: PPUSH
10627: PPUSH
10628: PPUSH
// result := false ;
10629: LD_ADDR_VAR 0 3
10633: PUSH
10634: LD_INT 0
10636: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10637: LD_VAR 0 1
10641: NOT
10642: IFTRUE 10667
10644: PUSH
10645: LD_VAR 0 1
10649: PPUSH
10650: CALL_OW 266
10654: PUSH
10655: LD_INT 32
10657: PUSH
10658: LD_INT 33
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: IN
10665: NOT
10666: OR
10667: IFFALSE 10671
// exit ;
10669: GO 11806
// nat := GetNation ( tower ) ;
10671: LD_ADDR_VAR 0 12
10675: PUSH
10676: LD_VAR 0 1
10680: PPUSH
10681: CALL_OW 248
10685: ST_TO_ADDR
// side := GetSide ( tower ) ;
10686: LD_ADDR_VAR 0 16
10690: PUSH
10691: LD_VAR 0 1
10695: PPUSH
10696: CALL_OW 255
10700: ST_TO_ADDR
// x := GetX ( tower ) ;
10701: LD_ADDR_VAR 0 10
10705: PUSH
10706: LD_VAR 0 1
10710: PPUSH
10711: CALL_OW 250
10715: ST_TO_ADDR
// y := GetY ( tower ) ;
10716: LD_ADDR_VAR 0 11
10720: PUSH
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 251
10730: ST_TO_ADDR
// if not x or not y then
10731: LD_VAR 0 10
10735: NOT
10736: IFTRUE 10745
10738: PUSH
10739: LD_VAR 0 11
10743: NOT
10744: OR
10745: IFFALSE 10749
// exit ;
10747: GO 11806
// weapon := 0 ;
10749: LD_ADDR_VAR 0 18
10753: PUSH
10754: LD_INT 0
10756: ST_TO_ADDR
// fac_list := [ ] ;
10757: LD_ADDR_VAR 0 17
10761: PUSH
10762: EMPTY
10763: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10764: LD_ADDR_VAR 0 6
10768: PUSH
10769: LD_VAR 0 1
10773: PPUSH
10774: CALL_OW 274
10778: PPUSH
10779: LD_VAR 0 2
10783: PPUSH
10784: LD_INT 0
10786: PPUSH
10787: CALL 8341 0 3
10791: PPUSH
10792: LD_INT 30
10794: PUSH
10795: LD_INT 3
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 72
10806: ST_TO_ADDR
// if not factories then
10807: LD_VAR 0 6
10811: NOT
10812: IFFALSE 10816
// exit ;
10814: GO 11806
// for i in factories do
10816: LD_ADDR_VAR 0 8
10820: PUSH
10821: LD_VAR 0 6
10825: PUSH
10826: FOR_IN
10827: IFFALSE 10852
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10829: LD_ADDR_VAR 0 17
10833: PUSH
10834: LD_VAR 0 17
10838: PUSH
10839: LD_VAR 0 8
10843: PPUSH
10844: CALL_OW 478
10848: UNION
10849: ST_TO_ADDR
10850: GO 10826
10852: POP
10853: POP
// if not fac_list then
10854: LD_VAR 0 17
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 11806
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10863: LD_ADDR_VAR 0 5
10867: PUSH
10868: LD_INT 4
10870: PUSH
10871: LD_INT 5
10873: PUSH
10874: LD_INT 9
10876: PUSH
10877: LD_INT 10
10879: PUSH
10880: LD_INT 6
10882: PUSH
10883: LD_INT 7
10885: PUSH
10886: LD_INT 11
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 27
10900: PUSH
10901: LD_INT 28
10903: PUSH
10904: LD_INT 26
10906: PUSH
10907: LD_INT 30
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 43
10918: PUSH
10919: LD_INT 44
10921: PUSH
10922: LD_INT 46
10924: PUSH
10925: LD_INT 45
10927: PUSH
10928: LD_INT 47
10930: PUSH
10931: LD_INT 49
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: LD_VAR 0 12
10951: ARRAY
10952: ST_TO_ADDR
// list := list isect fac_list ;
10953: LD_ADDR_VAR 0 5
10957: PUSH
10958: LD_VAR 0 5
10962: PUSH
10963: LD_VAR 0 17
10967: ISECT
10968: ST_TO_ADDR
// if not list then
10969: LD_VAR 0 5
10973: NOT
10974: IFFALSE 10978
// exit ;
10976: GO 11806
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10978: LD_VAR 0 12
10982: PUSH
10983: LD_INT 3
10985: EQUAL
10986: IFFALSE 10998
10988: PUSH
10989: LD_INT 49
10991: PUSH
10992: LD_VAR 0 5
10996: IN
10997: AND
10998: IFFALSE 11018
11000: PUSH
11001: LD_INT 31
11003: PPUSH
11004: LD_VAR 0 16
11008: PPUSH
11009: CALL_OW 321
11013: PUSH
11014: LD_INT 2
11016: EQUAL
11017: AND
11018: IFFALSE 11078
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11020: LD_INT 22
11022: PUSH
11023: LD_VAR 0 16
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 35
11034: PUSH
11035: LD_INT 49
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 91
11044: PUSH
11045: LD_VAR 0 1
11049: PUSH
11050: LD_INT 10
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PPUSH
11063: CALL_OW 69
11067: NOT
11068: IFFALSE 11078
// weapon := ru_time_lapser ;
11070: LD_ADDR_VAR 0 18
11074: PUSH
11075: LD_INT 49
11077: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11078: LD_VAR 0 12
11082: PUSH
11083: LD_INT 1
11085: PUSH
11086: LD_INT 2
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: IN
11093: IFFALSE 11117
11095: PUSH
11096: LD_INT 11
11098: PUSH
11099: LD_VAR 0 5
11103: IN
11104: IFTRUE 11116
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_VAR 0 5
11114: IN
11115: OR
11116: AND
11117: IFFALSE 11137
11119: PUSH
11120: LD_INT 6
11122: PPUSH
11123: LD_VAR 0 16
11127: PPUSH
11128: CALL_OW 321
11132: PUSH
11133: LD_INT 2
11135: EQUAL
11136: AND
11137: IFFALSE 11304
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11139: LD_INT 22
11141: PUSH
11142: LD_VAR 0 16
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: LD_INT 35
11156: PUSH
11157: LD_INT 11
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 35
11166: PUSH
11167: LD_INT 30
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 91
11181: PUSH
11182: LD_VAR 0 1
11186: PUSH
11187: LD_INT 18
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: NOT
11205: IFFALSE 11281
11207: PUSH
11208: LD_INT 22
11210: PUSH
11211: LD_VAR 0 16
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 2
11222: PUSH
11223: LD_INT 30
11225: PUSH
11226: LD_INT 32
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: LD_INT 33
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 91
11250: PUSH
11251: LD_VAR 0 1
11255: PUSH
11256: LD_INT 12
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: EMPTY
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: PUSH
11277: LD_INT 2
11279: GREATER
11280: AND
11281: IFFALSE 11304
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11283: LD_ADDR_VAR 0 18
11287: PUSH
11288: LD_INT 11
11290: PUSH
11291: LD_INT 30
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_VAR 0 12
11302: ARRAY
11303: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11304: LD_VAR 0 18
11308: NOT
11309: IFFALSE 11329
11311: PUSH
11312: LD_INT 40
11314: PPUSH
11315: LD_VAR 0 16
11319: PPUSH
11320: CALL_OW 321
11324: PUSH
11325: LD_INT 2
11327: EQUAL
11328: AND
11329: IFFALSE 11365
11331: PUSH
11332: LD_INT 7
11334: PUSH
11335: LD_VAR 0 5
11339: IN
11340: IFTRUE 11352
11342: PUSH
11343: LD_INT 28
11345: PUSH
11346: LD_VAR 0 5
11350: IN
11351: OR
11352: IFTRUE 11364
11354: PUSH
11355: LD_INT 45
11357: PUSH
11358: LD_VAR 0 5
11362: IN
11363: OR
11364: AND
11365: IFFALSE 11619
// begin hex := GetHexInfo ( x , y ) ;
11367: LD_ADDR_VAR 0 4
11371: PUSH
11372: LD_VAR 0 10
11376: PPUSH
11377: LD_VAR 0 11
11381: PPUSH
11382: CALL_OW 546
11386: ST_TO_ADDR
// if hex [ 1 ] then
11387: LD_VAR 0 4
11391: PUSH
11392: LD_INT 1
11394: ARRAY
11395: IFFALSE 11399
// exit ;
11397: GO 11806
// height := hex [ 2 ] ;
11399: LD_ADDR_VAR 0 15
11403: PUSH
11404: LD_VAR 0 4
11408: PUSH
11409: LD_INT 2
11411: ARRAY
11412: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11413: LD_ADDR_VAR 0 14
11417: PUSH
11418: LD_INT 0
11420: PUSH
11421: LD_INT 2
11423: PUSH
11424: LD_INT 3
11426: PUSH
11427: LD_INT 5
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ST_TO_ADDR
// for i in tmp do
11436: LD_ADDR_VAR 0 8
11440: PUSH
11441: LD_VAR 0 14
11445: PUSH
11446: FOR_IN
11447: IFFALSE 11617
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11449: LD_ADDR_VAR 0 9
11453: PUSH
11454: LD_VAR 0 10
11458: PPUSH
11459: LD_VAR 0 8
11463: PPUSH
11464: LD_INT 5
11466: PPUSH
11467: CALL_OW 272
11471: PUSH
11472: LD_VAR 0 11
11476: PPUSH
11477: LD_VAR 0 8
11481: PPUSH
11482: LD_INT 5
11484: PPUSH
11485: CALL_OW 273
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11494: LD_VAR 0 9
11498: PUSH
11499: LD_INT 1
11501: ARRAY
11502: PPUSH
11503: LD_VAR 0 9
11507: PUSH
11508: LD_INT 2
11510: ARRAY
11511: PPUSH
11512: CALL_OW 488
11516: IFFALSE 11615
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11518: LD_ADDR_VAR 0 4
11522: PUSH
11523: LD_VAR 0 9
11527: PUSH
11528: LD_INT 1
11530: ARRAY
11531: PPUSH
11532: LD_VAR 0 9
11536: PUSH
11537: LD_INT 2
11539: ARRAY
11540: PPUSH
11541: CALL_OW 546
11545: ST_TO_ADDR
// if hex [ 1 ] then
11546: LD_VAR 0 4
11550: PUSH
11551: LD_INT 1
11553: ARRAY
11554: IFFALSE 11558
// continue ;
11556: GO 11446
// h := hex [ 2 ] ;
11558: LD_ADDR_VAR 0 13
11562: PUSH
11563: LD_VAR 0 4
11567: PUSH
11568: LD_INT 2
11570: ARRAY
11571: ST_TO_ADDR
// if h + 7 < height then
11572: LD_VAR 0 13
11576: PUSH
11577: LD_INT 7
11579: PLUS
11580: PUSH
11581: LD_VAR 0 15
11585: LESS
11586: IFFALSE 11615
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11588: LD_ADDR_VAR 0 18
11592: PUSH
11593: LD_INT 7
11595: PUSH
11596: LD_INT 28
11598: PUSH
11599: LD_INT 45
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_VAR 0 12
11611: ARRAY
11612: ST_TO_ADDR
// break ;
11613: GO 11617
// end ; end ; end ;
11615: GO 11446
11617: POP
11618: POP
// end ; if not weapon then
11619: LD_VAR 0 18
11623: NOT
11624: IFFALSE 11684
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11626: LD_ADDR_VAR 0 5
11630: PUSH
11631: LD_VAR 0 5
11635: PUSH
11636: LD_INT 11
11638: PUSH
11639: LD_INT 30
11641: PUSH
11642: LD_INT 49
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: DIFF
11650: ST_TO_ADDR
// if not list then
11651: LD_VAR 0 5
11655: NOT
11656: IFFALSE 11660
// exit ;
11658: GO 11806
// weapon := list [ rand ( 1 , list ) ] ;
11660: LD_ADDR_VAR 0 18
11664: PUSH
11665: LD_VAR 0 5
11669: PUSH
11670: LD_INT 1
11672: PPUSH
11673: LD_VAR 0 5
11677: PPUSH
11678: CALL_OW 12
11682: ARRAY
11683: ST_TO_ADDR
// end ; if weapon then
11684: LD_VAR 0 18
11688: IFFALSE 11806
// begin tmp := CostOfWeapon ( weapon ) ;
11690: LD_ADDR_VAR 0 14
11694: PUSH
11695: LD_VAR 0 18
11699: PPUSH
11700: CALL_OW 451
11704: ST_TO_ADDR
// j := GetBase ( tower ) ;
11705: LD_ADDR_VAR 0 9
11709: PUSH
11710: LD_VAR 0 1
11714: PPUSH
11715: CALL_OW 274
11719: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11720: LD_VAR 0 9
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 275
11732: PUSH
11733: LD_VAR 0 14
11737: PUSH
11738: LD_INT 1
11740: ARRAY
11741: GREATEREQUAL
11742: IFFALSE 11768
11744: PUSH
11745: LD_VAR 0 9
11749: PPUSH
11750: LD_INT 2
11752: PPUSH
11753: CALL_OW 275
11757: PUSH
11758: LD_VAR 0 14
11762: PUSH
11763: LD_INT 2
11765: ARRAY
11766: GREATEREQUAL
11767: AND
11768: IFFALSE 11794
11770: PUSH
11771: LD_VAR 0 9
11775: PPUSH
11776: LD_INT 3
11778: PPUSH
11779: CALL_OW 275
11783: PUSH
11784: LD_VAR 0 14
11788: PUSH
11789: LD_INT 3
11791: ARRAY
11792: GREATEREQUAL
11793: AND
11794: IFFALSE 11806
// result := weapon ;
11796: LD_ADDR_VAR 0 3
11800: PUSH
11801: LD_VAR 0 18
11805: ST_TO_ADDR
// end ; end ;
11806: LD_VAR 0 3
11810: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11811: LD_INT 0
11813: PPUSH
11814: PPUSH
// result := true ;
11815: LD_ADDR_VAR 0 3
11819: PUSH
11820: LD_INT 1
11822: ST_TO_ADDR
// if array1 = array2 then
11823: LD_VAR 0 1
11827: PUSH
11828: LD_VAR 0 2
11832: EQUAL
11833: IFFALSE 11893
// begin for i = 1 to array1 do
11835: LD_ADDR_VAR 0 4
11839: PUSH
11840: DOUBLE
11841: LD_INT 1
11843: DEC
11844: ST_TO_ADDR
11845: LD_VAR 0 1
11849: PUSH
11850: FOR_TO
11851: IFFALSE 11889
// if array1 [ i ] <> array2 [ i ] then
11853: LD_VAR 0 1
11857: PUSH
11858: LD_VAR 0 4
11862: ARRAY
11863: PUSH
11864: LD_VAR 0 2
11868: PUSH
11869: LD_VAR 0 4
11873: ARRAY
11874: NONEQUAL
11875: IFFALSE 11887
// begin result := false ;
11877: LD_ADDR_VAR 0 3
11881: PUSH
11882: LD_INT 0
11884: ST_TO_ADDR
// break ;
11885: GO 11889
// end ;
11887: GO 11850
11889: POP
11890: POP
// end else
11891: GO 11901
// result := false ;
11893: LD_ADDR_VAR 0 3
11897: PUSH
11898: LD_INT 0
11900: ST_TO_ADDR
// end ;
11901: LD_VAR 0 3
11905: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11906: LD_INT 0
11908: PPUSH
11909: PPUSH
// if not array1 or not array2 then
11910: LD_VAR 0 1
11914: NOT
11915: IFTRUE 11924
11917: PUSH
11918: LD_VAR 0 2
11922: NOT
11923: OR
11924: IFFALSE 11928
// exit ;
11926: GO 11992
// result := true ;
11928: LD_ADDR_VAR 0 3
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// for i = 1 to array1 do
11936: LD_ADDR_VAR 0 4
11940: PUSH
11941: DOUBLE
11942: LD_INT 1
11944: DEC
11945: ST_TO_ADDR
11946: LD_VAR 0 1
11950: PUSH
11951: FOR_TO
11952: IFFALSE 11990
// if array1 [ i ] <> array2 [ i ] then
11954: LD_VAR 0 1
11958: PUSH
11959: LD_VAR 0 4
11963: ARRAY
11964: PUSH
11965: LD_VAR 0 2
11969: PUSH
11970: LD_VAR 0 4
11974: ARRAY
11975: NONEQUAL
11976: IFFALSE 11988
// begin result := false ;
11978: LD_ADDR_VAR 0 3
11982: PUSH
11983: LD_INT 0
11985: ST_TO_ADDR
// break ;
11986: GO 11990
// end ;
11988: GO 11951
11990: POP
11991: POP
// end ;
11992: LD_VAR 0 3
11996: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11997: LD_INT 0
11999: PPUSH
12000: PPUSH
12001: PPUSH
// pom := GetBase ( fac ) ;
12002: LD_ADDR_VAR 0 5
12006: PUSH
12007: LD_VAR 0 1
12011: PPUSH
12012: CALL_OW 274
12016: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12017: LD_ADDR_VAR 0 4
12021: PUSH
12022: LD_VAR 0 2
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: LD_VAR 0 2
12035: PUSH
12036: LD_INT 2
12038: ARRAY
12039: PPUSH
12040: LD_VAR 0 2
12044: PUSH
12045: LD_INT 3
12047: ARRAY
12048: PPUSH
12049: LD_VAR 0 2
12053: PUSH
12054: LD_INT 4
12056: ARRAY
12057: PPUSH
12058: CALL_OW 449
12062: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12063: LD_ADDR_VAR 0 3
12067: PUSH
12068: LD_VAR 0 5
12072: PPUSH
12073: LD_INT 1
12075: PPUSH
12076: CALL_OW 275
12080: PUSH
12081: LD_VAR 0 4
12085: PUSH
12086: LD_INT 1
12088: ARRAY
12089: GREATEREQUAL
12090: IFFALSE 12116
12092: PUSH
12093: LD_VAR 0 5
12097: PPUSH
12098: LD_INT 2
12100: PPUSH
12101: CALL_OW 275
12105: PUSH
12106: LD_VAR 0 4
12110: PUSH
12111: LD_INT 2
12113: ARRAY
12114: GREATEREQUAL
12115: AND
12116: IFFALSE 12142
12118: PUSH
12119: LD_VAR 0 5
12123: PPUSH
12124: LD_INT 3
12126: PPUSH
12127: CALL_OW 275
12131: PUSH
12132: LD_VAR 0 4
12136: PUSH
12137: LD_INT 3
12139: ARRAY
12140: GREATEREQUAL
12141: AND
12142: ST_TO_ADDR
// end ;
12143: LD_VAR 0 3
12147: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
// pom := GetBase ( building ) ;
12154: LD_ADDR_VAR 0 3
12158: PUSH
12159: LD_VAR 0 1
12163: PPUSH
12164: CALL_OW 274
12168: ST_TO_ADDR
// if not pom then
12169: LD_VAR 0 3
12173: NOT
12174: IFFALSE 12178
// exit ;
12176: GO 12352
// btype := GetBType ( building ) ;
12178: LD_ADDR_VAR 0 5
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL_OW 266
12192: ST_TO_ADDR
// if btype = b_armoury then
12193: LD_VAR 0 5
12197: PUSH
12198: LD_INT 4
12200: EQUAL
12201: IFFALSE 12211
// btype := b_barracks ;
12203: LD_ADDR_VAR 0 5
12207: PUSH
12208: LD_INT 5
12210: ST_TO_ADDR
// if btype = b_depot then
12211: LD_VAR 0 5
12215: PUSH
12216: LD_INT 0
12218: EQUAL
12219: IFFALSE 12229
// btype := b_warehouse ;
12221: LD_ADDR_VAR 0 5
12225: PUSH
12226: LD_INT 1
12228: ST_TO_ADDR
// if btype = b_workshop then
12229: LD_VAR 0 5
12233: PUSH
12234: LD_INT 2
12236: EQUAL
12237: IFFALSE 12247
// btype := b_factory ;
12239: LD_ADDR_VAR 0 5
12243: PUSH
12244: LD_INT 3
12246: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12247: LD_ADDR_VAR 0 4
12251: PUSH
12252: LD_VAR 0 5
12256: PPUSH
12257: LD_VAR 0 1
12261: PPUSH
12262: CALL_OW 248
12266: PPUSH
12267: CALL_OW 450
12271: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 275
12289: PUSH
12290: LD_VAR 0 4
12294: PUSH
12295: LD_INT 1
12297: ARRAY
12298: GREATEREQUAL
12299: IFFALSE 12325
12301: PUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 2
12309: PPUSH
12310: CALL_OW 275
12314: PUSH
12315: LD_VAR 0 4
12319: PUSH
12320: LD_INT 2
12322: ARRAY
12323: GREATEREQUAL
12324: AND
12325: IFFALSE 12351
12327: PUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 3
12335: PPUSH
12336: CALL_OW 275
12340: PUSH
12341: LD_VAR 0 4
12345: PUSH
12346: LD_INT 3
12348: ARRAY
12349: GREATEREQUAL
12350: AND
12351: ST_TO_ADDR
// end ;
12352: LD_VAR 0 2
12356: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12357: LD_INT 0
12359: PPUSH
12360: PPUSH
12361: PPUSH
// pom := GetBase ( building ) ;
12362: LD_ADDR_VAR 0 4
12366: PUSH
12367: LD_VAR 0 1
12371: PPUSH
12372: CALL_OW 274
12376: ST_TO_ADDR
// if not pom then
12377: LD_VAR 0 4
12381: NOT
12382: IFFALSE 12386
// exit ;
12384: GO 12491
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12386: LD_ADDR_VAR 0 5
12390: PUSH
12391: LD_VAR 0 2
12395: PPUSH
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 248
12405: PPUSH
12406: CALL_OW 450
12410: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12411: LD_ADDR_VAR 0 3
12415: PUSH
12416: LD_VAR 0 4
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: CALL_OW 275
12428: PUSH
12429: LD_VAR 0 5
12433: PUSH
12434: LD_INT 1
12436: ARRAY
12437: GREATEREQUAL
12438: IFFALSE 12464
12440: PUSH
12441: LD_VAR 0 4
12445: PPUSH
12446: LD_INT 2
12448: PPUSH
12449: CALL_OW 275
12453: PUSH
12454: LD_VAR 0 5
12458: PUSH
12459: LD_INT 2
12461: ARRAY
12462: GREATEREQUAL
12463: AND
12464: IFFALSE 12490
12466: PUSH
12467: LD_VAR 0 4
12471: PPUSH
12472: LD_INT 3
12474: PPUSH
12475: CALL_OW 275
12479: PUSH
12480: LD_VAR 0 5
12484: PUSH
12485: LD_INT 3
12487: ARRAY
12488: GREATEREQUAL
12489: AND
12490: ST_TO_ADDR
// end ;
12491: LD_VAR 0 3
12495: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12496: LD_INT 0
12498: PPUSH
12499: PPUSH
12500: PPUSH
12501: PPUSH
12502: PPUSH
12503: PPUSH
12504: PPUSH
12505: PPUSH
12506: PPUSH
12507: PPUSH
12508: PPUSH
// result := false ;
12509: LD_ADDR_VAR 0 8
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12517: LD_VAR 0 5
12521: NOT
12522: IFTRUE 12531
12524: PUSH
12525: LD_VAR 0 1
12529: NOT
12530: OR
12531: IFTRUE 12540
12533: PUSH
12534: LD_VAR 0 2
12538: NOT
12539: OR
12540: IFTRUE 12549
12542: PUSH
12543: LD_VAR 0 3
12547: NOT
12548: OR
12549: IFFALSE 12553
// exit ;
12551: GO 13379
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12553: LD_ADDR_VAR 0 14
12557: PUSH
12558: LD_VAR 0 1
12562: PPUSH
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_VAR 0 4
12577: PPUSH
12578: LD_VAR 0 5
12582: PUSH
12583: LD_INT 1
12585: ARRAY
12586: PPUSH
12587: CALL_OW 248
12591: PPUSH
12592: LD_INT 0
12594: PPUSH
12595: CALL 14660 0 6
12599: ST_TO_ADDR
// if not hexes then
12600: LD_VAR 0 14
12604: NOT
12605: IFFALSE 12609
// exit ;
12607: GO 13379
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12609: LD_ADDR_VAR 0 17
12613: PUSH
12614: LD_VAR 0 5
12618: PPUSH
12619: LD_INT 22
12621: PUSH
12622: LD_VAR 0 13
12626: PPUSH
12627: CALL_OW 255
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: LD_INT 30
12641: PUSH
12642: LD_INT 0
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 30
12651: PUSH
12652: LD_INT 1
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: LIST
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PPUSH
12668: CALL_OW 72
12672: ST_TO_ADDR
// for i = 1 to hexes do
12673: LD_ADDR_VAR 0 9
12677: PUSH
12678: DOUBLE
12679: LD_INT 1
12681: DEC
12682: ST_TO_ADDR
12683: LD_VAR 0 14
12687: PUSH
12688: FOR_TO
12689: IFFALSE 13377
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12691: LD_ADDR_VAR 0 13
12695: PUSH
12696: LD_VAR 0 14
12700: PUSH
12701: LD_VAR 0 9
12705: ARRAY
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 14
12715: PUSH
12716: LD_VAR 0 9
12720: ARRAY
12721: PUSH
12722: LD_INT 2
12724: ARRAY
12725: PPUSH
12726: CALL_OW 428
12730: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12731: LD_VAR 0 14
12735: PUSH
12736: LD_VAR 0 9
12740: ARRAY
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: LD_VAR 0 14
12750: PUSH
12751: LD_VAR 0 9
12755: ARRAY
12756: PUSH
12757: LD_INT 2
12759: ARRAY
12760: PPUSH
12761: CALL_OW 351
12765: IFTRUE 12804
12767: PUSH
12768: LD_VAR 0 14
12772: PUSH
12773: LD_VAR 0 9
12777: ARRAY
12778: PUSH
12779: LD_INT 1
12781: ARRAY
12782: PPUSH
12783: LD_VAR 0 14
12787: PUSH
12788: LD_VAR 0 9
12792: ARRAY
12793: PUSH
12794: LD_INT 2
12796: ARRAY
12797: PPUSH
12798: CALL_OW 488
12802: NOT
12803: OR
12804: IFTRUE 12821
12806: PUSH
12807: LD_VAR 0 13
12811: PPUSH
12812: CALL_OW 247
12816: PUSH
12817: LD_INT 3
12819: EQUAL
12820: OR
12821: IFFALSE 12827
// exit ;
12823: POP
12824: POP
12825: GO 13379
// if not tmp then
12827: LD_VAR 0 13
12831: NOT
12832: IFFALSE 12836
// continue ;
12834: GO 12688
// result := true ;
12836: LD_ADDR_VAR 0 8
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12844: LD_VAR 0 6
12848: IFFALSE 12865
12850: PUSH
12851: LD_VAR 0 13
12855: PPUSH
12856: CALL_OW 247
12860: PUSH
12861: LD_INT 2
12863: EQUAL
12864: AND
12865: IFFALSE 12882
12867: PUSH
12868: LD_VAR 0 13
12872: PPUSH
12873: CALL_OW 263
12877: PUSH
12878: LD_INT 1
12880: EQUAL
12881: AND
12882: IFFALSE 13046
// begin if IsDrivenBy ( tmp ) then
12884: LD_VAR 0 13
12888: PPUSH
12889: CALL_OW 311
12893: IFFALSE 12897
// continue ;
12895: GO 12688
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12897: LD_VAR 0 6
12901: PPUSH
12902: LD_INT 3
12904: PUSH
12905: LD_INT 60
12907: PUSH
12908: EMPTY
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 3
12917: PUSH
12918: LD_INT 55
12920: PUSH
12921: EMPTY
12922: LIST
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PPUSH
12932: CALL_OW 72
12936: IFFALSE 13044
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12938: LD_ADDR_VAR 0 18
12942: PUSH
12943: LD_VAR 0 6
12947: PPUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 60
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 3
12963: PUSH
12964: LD_INT 55
12966: PUSH
12967: EMPTY
12968: LIST
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 72
12982: PUSH
12983: LD_INT 1
12985: ARRAY
12986: ST_TO_ADDR
// if IsInUnit ( driver ) then
12987: LD_VAR 0 18
12991: PPUSH
12992: CALL_OW 310
12996: IFFALSE 13007
// ComExit ( driver ) ;
12998: LD_VAR 0 18
13002: PPUSH
13003: CALL 38660 0 1
// AddComEnterUnit ( driver , tmp ) ;
13007: LD_VAR 0 18
13011: PPUSH
13012: LD_VAR 0 13
13016: PPUSH
13017: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13021: LD_VAR 0 18
13025: PPUSH
13026: LD_VAR 0 7
13030: PPUSH
13031: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13035: LD_VAR 0 18
13039: PPUSH
13040: CALL_OW 181
// end ; continue ;
13044: GO 12688
// end ; if not cleaners or not tmp in cleaners then
13046: LD_VAR 0 6
13050: NOT
13051: IFTRUE 13066
13053: PUSH
13054: LD_VAR 0 13
13058: PUSH
13059: LD_VAR 0 6
13063: IN
13064: NOT
13065: OR
13066: IFFALSE 13375
// begin if dep then
13068: LD_VAR 0 17
13072: IFFALSE 13208
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13074: LD_ADDR_VAR 0 16
13078: PUSH
13079: LD_VAR 0 17
13083: PUSH
13084: LD_INT 1
13086: ARRAY
13087: PPUSH
13088: CALL_OW 250
13092: PPUSH
13093: LD_VAR 0 17
13097: PUSH
13098: LD_INT 1
13100: ARRAY
13101: PPUSH
13102: CALL_OW 254
13106: PPUSH
13107: LD_INT 5
13109: PPUSH
13110: CALL_OW 272
13114: PUSH
13115: LD_VAR 0 17
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: CALL_OW 251
13128: PPUSH
13129: LD_VAR 0 17
13133: PUSH
13134: LD_INT 1
13136: ARRAY
13137: PPUSH
13138: CALL_OW 254
13142: PPUSH
13143: LD_INT 5
13145: PPUSH
13146: CALL_OW 273
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13155: LD_VAR 0 16
13159: PUSH
13160: LD_INT 1
13162: ARRAY
13163: PPUSH
13164: LD_VAR 0 16
13168: PUSH
13169: LD_INT 2
13171: ARRAY
13172: PPUSH
13173: CALL_OW 488
13177: IFFALSE 13208
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13179: LD_VAR 0 13
13183: PPUSH
13184: LD_VAR 0 16
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: PPUSH
13193: LD_VAR 0 16
13197: PUSH
13198: LD_INT 2
13200: ARRAY
13201: PPUSH
13202: CALL_OW 111
// continue ;
13206: GO 12688
// end ; end ; r := GetDir ( tmp ) ;
13208: LD_ADDR_VAR 0 15
13212: PUSH
13213: LD_VAR 0 13
13217: PPUSH
13218: CALL_OW 254
13222: ST_TO_ADDR
// if r = 5 then
13223: LD_VAR 0 15
13227: PUSH
13228: LD_INT 5
13230: EQUAL
13231: IFFALSE 13241
// r := 0 ;
13233: LD_ADDR_VAR 0 15
13237: PUSH
13238: LD_INT 0
13240: ST_TO_ADDR
// for j = r to 5 do
13241: LD_ADDR_VAR 0 10
13245: PUSH
13246: DOUBLE
13247: LD_VAR 0 15
13251: DEC
13252: ST_TO_ADDR
13253: LD_INT 5
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13373
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13259: LD_ADDR_VAR 0 11
13263: PUSH
13264: LD_VAR 0 13
13268: PPUSH
13269: CALL_OW 250
13273: PPUSH
13274: LD_VAR 0 10
13278: PPUSH
13279: LD_INT 2
13281: PPUSH
13282: CALL_OW 272
13286: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13287: LD_ADDR_VAR 0 12
13291: PUSH
13292: LD_VAR 0 13
13296: PPUSH
13297: CALL_OW 251
13301: PPUSH
13302: LD_VAR 0 10
13306: PPUSH
13307: LD_INT 2
13309: PPUSH
13310: CALL_OW 273
13314: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13315: LD_VAR 0 11
13319: PPUSH
13320: LD_VAR 0 12
13324: PPUSH
13325: CALL_OW 488
13329: IFFALSE 13348
13331: PUSH
13332: LD_VAR 0 11
13336: PPUSH
13337: LD_VAR 0 12
13341: PPUSH
13342: CALL_OW 428
13346: NOT
13347: AND
13348: IFFALSE 13371
// begin ComMoveXY ( tmp , _x , _y ) ;
13350: LD_VAR 0 13
13354: PPUSH
13355: LD_VAR 0 11
13359: PPUSH
13360: LD_VAR 0 12
13364: PPUSH
13365: CALL_OW 111
// break ;
13369: GO 13373
// end ; end ;
13371: GO 13256
13373: POP
13374: POP
// end ; end ;
13375: GO 12688
13377: POP
13378: POP
// end ;
13379: LD_VAR 0 8
13383: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13384: LD_INT 0
13386: PPUSH
// result := true ;
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: LD_INT 1
13394: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13395: LD_VAR 0 2
13399: PUSH
13400: LD_INT 24
13402: DOUBLE
13403: EQUAL
13404: IFTRUE 13414
13406: LD_INT 33
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13439
13414: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13415: LD_ADDR_VAR 0 3
13419: PUSH
13420: LD_INT 32
13422: PPUSH
13423: LD_VAR 0 1
13427: PPUSH
13428: CALL_OW 321
13432: PUSH
13433: LD_INT 2
13435: EQUAL
13436: ST_TO_ADDR
13437: GO 13755
13439: LD_INT 20
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 13472
13447: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13448: LD_ADDR_VAR 0 3
13452: PUSH
13453: LD_INT 6
13455: PPUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 321
13465: PUSH
13466: LD_INT 2
13468: EQUAL
13469: ST_TO_ADDR
13470: GO 13755
13472: LD_INT 22
13474: DOUBLE
13475: EQUAL
13476: IFTRUE 13486
13478: LD_INT 36
13480: DOUBLE
13481: EQUAL
13482: IFTRUE 13486
13484: GO 13511
13486: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_INT 15
13494: PPUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 321
13504: PUSH
13505: LD_INT 2
13507: EQUAL
13508: ST_TO_ADDR
13509: GO 13755
13511: LD_INT 30
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13544
13519: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13520: LD_ADDR_VAR 0 3
13524: PUSH
13525: LD_INT 20
13527: PPUSH
13528: LD_VAR 0 1
13532: PPUSH
13533: CALL_OW 321
13537: PUSH
13538: LD_INT 2
13540: EQUAL
13541: ST_TO_ADDR
13542: GO 13755
13544: LD_INT 28
13546: DOUBLE
13547: EQUAL
13548: IFTRUE 13558
13550: LD_INT 21
13552: DOUBLE
13553: EQUAL
13554: IFTRUE 13558
13556: GO 13583
13558: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13559: LD_ADDR_VAR 0 3
13563: PUSH
13564: LD_INT 21
13566: PPUSH
13567: LD_VAR 0 1
13571: PPUSH
13572: CALL_OW 321
13576: PUSH
13577: LD_INT 2
13579: EQUAL
13580: ST_TO_ADDR
13581: GO 13755
13583: LD_INT 16
13585: DOUBLE
13586: EQUAL
13587: IFTRUE 13591
13589: GO 13616
13591: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13592: LD_ADDR_VAR 0 3
13596: PUSH
13597: LD_INT 84
13599: PPUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 321
13609: PUSH
13610: LD_INT 2
13612: EQUAL
13613: ST_TO_ADDR
13614: GO 13755
13616: LD_INT 19
13618: DOUBLE
13619: EQUAL
13620: IFTRUE 13630
13622: LD_INT 23
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13655
13630: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 83
13638: PPUSH
13639: LD_VAR 0 1
13643: PPUSH
13644: CALL_OW 321
13648: PUSH
13649: LD_INT 2
13651: EQUAL
13652: ST_TO_ADDR
13653: GO 13755
13655: LD_INT 17
13657: DOUBLE
13658: EQUAL
13659: IFTRUE 13663
13661: GO 13688
13663: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_INT 39
13671: PPUSH
13672: LD_VAR 0 1
13676: PPUSH
13677: CALL_OW 321
13681: PUSH
13682: LD_INT 2
13684: EQUAL
13685: ST_TO_ADDR
13686: GO 13755
13688: LD_INT 18
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13721
13696: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13697: LD_ADDR_VAR 0 3
13701: PUSH
13702: LD_INT 40
13704: PPUSH
13705: LD_VAR 0 1
13709: PPUSH
13710: CALL_OW 321
13714: PUSH
13715: LD_INT 2
13717: EQUAL
13718: ST_TO_ADDR
13719: GO 13755
13721: LD_INT 27
13723: DOUBLE
13724: EQUAL
13725: IFTRUE 13729
13727: GO 13754
13729: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13730: LD_ADDR_VAR 0 3
13734: PUSH
13735: LD_INT 35
13737: PPUSH
13738: LD_VAR 0 1
13742: PPUSH
13743: CALL_OW 321
13747: PUSH
13748: LD_INT 2
13750: EQUAL
13751: ST_TO_ADDR
13752: GO 13755
13754: POP
// end ;
13755: LD_VAR 0 3
13759: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13760: LD_INT 0
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
13767: PPUSH
13768: PPUSH
13769: PPUSH
13770: PPUSH
13771: PPUSH
13772: PPUSH
// result := false ;
13773: LD_ADDR_VAR 0 6
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// if btype = b_depot then
13781: LD_VAR 0 2
13785: PUSH
13786: LD_INT 0
13788: EQUAL
13789: IFFALSE 13801
// begin result := true ;
13791: LD_ADDR_VAR 0 6
13795: PUSH
13796: LD_INT 1
13798: ST_TO_ADDR
// exit ;
13799: GO 14655
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13801: LD_VAR 0 1
13805: NOT
13806: IFTRUE 13831
13808: PUSH
13809: LD_VAR 0 1
13813: PPUSH
13814: CALL_OW 266
13818: PUSH
13819: LD_INT 0
13821: PUSH
13822: LD_INT 1
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: IN
13829: NOT
13830: OR
13831: IFTRUE 13840
13833: PUSH
13834: LD_VAR 0 2
13838: NOT
13839: OR
13840: IFTRUE 13876
13842: PUSH
13843: LD_VAR 0 5
13847: PUSH
13848: LD_INT 0
13850: PUSH
13851: LD_INT 1
13853: PUSH
13854: LD_INT 2
13856: PUSH
13857: LD_INT 3
13859: PUSH
13860: LD_INT 4
13862: PUSH
13863: LD_INT 5
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: IN
13874: NOT
13875: OR
13876: IFTRUE 13895
13878: PUSH
13879: LD_VAR 0 3
13883: PPUSH
13884: LD_VAR 0 4
13888: PPUSH
13889: CALL_OW 488
13893: NOT
13894: OR
13895: IFFALSE 13899
// exit ;
13897: GO 14655
// side := GetSide ( depot ) ;
13899: LD_ADDR_VAR 0 9
13903: PUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 255
13913: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13914: LD_VAR 0 9
13918: PPUSH
13919: LD_VAR 0 2
13923: PPUSH
13924: CALL 13384 0 2
13928: NOT
13929: IFFALSE 13933
// exit ;
13931: GO 14655
// pom := GetBase ( depot ) ;
13933: LD_ADDR_VAR 0 10
13937: PUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 274
13947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13948: LD_ADDR_VAR 0 11
13952: PUSH
13953: LD_VAR 0 2
13957: PPUSH
13958: LD_VAR 0 1
13962: PPUSH
13963: CALL_OW 248
13967: PPUSH
13968: CALL_OW 450
13972: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13973: LD_VAR 0 10
13977: PPUSH
13978: LD_INT 1
13980: PPUSH
13981: CALL_OW 275
13985: PUSH
13986: LD_VAR 0 11
13990: PUSH
13991: LD_INT 1
13993: ARRAY
13994: GREATEREQUAL
13995: IFFALSE 14021
13997: PUSH
13998: LD_VAR 0 10
14002: PPUSH
14003: LD_INT 2
14005: PPUSH
14006: CALL_OW 275
14010: PUSH
14011: LD_VAR 0 11
14015: PUSH
14016: LD_INT 2
14018: ARRAY
14019: GREATEREQUAL
14020: AND
14021: IFFALSE 14047
14023: PUSH
14024: LD_VAR 0 10
14028: PPUSH
14029: LD_INT 3
14031: PPUSH
14032: CALL_OW 275
14036: PUSH
14037: LD_VAR 0 11
14041: PUSH
14042: LD_INT 3
14044: ARRAY
14045: GREATEREQUAL
14046: AND
14047: NOT
14048: IFFALSE 14052
// exit ;
14050: GO 14655
// if GetBType ( depot ) = b_depot then
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 266
14061: PUSH
14062: LD_INT 0
14064: EQUAL
14065: IFFALSE 14077
// dist := 28 else
14067: LD_ADDR_VAR 0 14
14071: PUSH
14072: LD_INT 28
14074: ST_TO_ADDR
14075: GO 14085
// dist := 36 ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_INT 36
14084: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14085: LD_VAR 0 1
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_VAR 0 4
14099: PPUSH
14100: CALL_OW 297
14104: PUSH
14105: LD_VAR 0 14
14109: GREATER
14110: IFFALSE 14114
// exit ;
14112: GO 14655
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14114: LD_ADDR_VAR 0 12
14118: PUSH
14119: LD_VAR 0 2
14123: PPUSH
14124: LD_VAR 0 3
14128: PPUSH
14129: LD_VAR 0 4
14133: PPUSH
14134: LD_VAR 0 5
14138: PPUSH
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 248
14148: PPUSH
14149: LD_INT 0
14151: PPUSH
14152: CALL 14660 0 6
14156: ST_TO_ADDR
// if not hexes then
14157: LD_VAR 0 12
14161: NOT
14162: IFFALSE 14166
// exit ;
14164: GO 14655
// hex := GetHexInfo ( x , y ) ;
14166: LD_ADDR_VAR 0 15
14170: PUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: LD_VAR 0 4
14180: PPUSH
14181: CALL_OW 546
14185: ST_TO_ADDR
// if hex [ 1 ] then
14186: LD_VAR 0 15
14190: PUSH
14191: LD_INT 1
14193: ARRAY
14194: IFFALSE 14198
// exit ;
14196: GO 14655
// height := hex [ 2 ] ;
14198: LD_ADDR_VAR 0 13
14202: PUSH
14203: LD_VAR 0 15
14207: PUSH
14208: LD_INT 2
14210: ARRAY
14211: ST_TO_ADDR
// for i = 1 to hexes do
14212: LD_ADDR_VAR 0 7
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_VAR 0 12
14226: PUSH
14227: FOR_TO
14228: IFFALSE 14572
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14230: LD_VAR 0 12
14234: PUSH
14235: LD_VAR 0 7
14239: ARRAY
14240: PUSH
14241: LD_INT 1
14243: ARRAY
14244: PPUSH
14245: LD_VAR 0 12
14249: PUSH
14250: LD_VAR 0 7
14254: ARRAY
14255: PUSH
14256: LD_INT 2
14258: ARRAY
14259: PPUSH
14260: CALL_OW 488
14264: NOT
14265: IFTRUE 14307
14267: PUSH
14268: LD_VAR 0 12
14272: PUSH
14273: LD_VAR 0 7
14277: ARRAY
14278: PUSH
14279: LD_INT 1
14281: ARRAY
14282: PPUSH
14283: LD_VAR 0 12
14287: PUSH
14288: LD_VAR 0 7
14292: ARRAY
14293: PUSH
14294: LD_INT 2
14296: ARRAY
14297: PPUSH
14298: CALL_OW 428
14302: PUSH
14303: LD_INT 0
14305: GREATER
14306: OR
14307: IFTRUE 14345
14309: PUSH
14310: LD_VAR 0 12
14314: PUSH
14315: LD_VAR 0 7
14319: ARRAY
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: LD_VAR 0 12
14329: PUSH
14330: LD_VAR 0 7
14334: ARRAY
14335: PUSH
14336: LD_INT 2
14338: ARRAY
14339: PPUSH
14340: CALL_OW 351
14344: OR
14345: IFFALSE 14351
// exit ;
14347: POP
14348: POP
14349: GO 14655
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14351: LD_ADDR_VAR 0 8
14355: PUSH
14356: LD_VAR 0 12
14360: PUSH
14361: LD_VAR 0 7
14365: ARRAY
14366: PUSH
14367: LD_INT 1
14369: ARRAY
14370: PPUSH
14371: LD_VAR 0 12
14375: PUSH
14376: LD_VAR 0 7
14380: ARRAY
14381: PUSH
14382: LD_INT 2
14384: ARRAY
14385: PPUSH
14386: CALL_OW 546
14390: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14391: LD_VAR 0 8
14395: PUSH
14396: LD_INT 1
14398: ARRAY
14399: IFTRUE 14421
14401: PUSH
14402: LD_VAR 0 8
14406: PUSH
14407: LD_INT 2
14409: ARRAY
14410: PUSH
14411: LD_VAR 0 13
14415: PUSH
14416: LD_INT 2
14418: PLUS
14419: GREATER
14420: OR
14421: IFTRUE 14443
14423: PUSH
14424: LD_VAR 0 8
14428: PUSH
14429: LD_INT 2
14431: ARRAY
14432: PUSH
14433: LD_VAR 0 13
14437: PUSH
14438: LD_INT 2
14440: MINUS
14441: LESS
14442: OR
14443: IFTRUE 14511
14445: PUSH
14446: LD_VAR 0 8
14450: PUSH
14451: LD_INT 3
14453: ARRAY
14454: PUSH
14455: LD_INT 0
14457: PUSH
14458: LD_INT 8
14460: PUSH
14461: LD_INT 9
14463: PUSH
14464: LD_INT 10
14466: PUSH
14467: LD_INT 11
14469: PUSH
14470: LD_INT 12
14472: PUSH
14473: LD_INT 13
14475: PUSH
14476: LD_INT 16
14478: PUSH
14479: LD_INT 17
14481: PUSH
14482: LD_INT 18
14484: PUSH
14485: LD_INT 19
14487: PUSH
14488: LD_INT 20
14490: PUSH
14491: LD_INT 21
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: IN
14509: NOT
14510: OR
14511: IFTRUE 14524
14513: PUSH
14514: LD_VAR 0 8
14518: PUSH
14519: LD_INT 5
14521: ARRAY
14522: NOT
14523: OR
14524: IFTRUE 14564
14526: PUSH
14527: LD_VAR 0 8
14531: PUSH
14532: LD_INT 6
14534: ARRAY
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 7
14544: PUSH
14545: LD_INT 9
14547: PUSH
14548: LD_INT 10
14550: PUSH
14551: LD_INT 11
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: IN
14562: NOT
14563: OR
14564: IFFALSE 14570
// exit ;
14566: POP
14567: POP
14568: GO 14655
// end ;
14570: GO 14227
14572: POP
14573: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14574: LD_VAR 0 9
14578: PPUSH
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_VAR 0 4
14588: PPUSH
14589: LD_INT 20
14591: PPUSH
14592: CALL 6474 0 4
14596: PUSH
14597: LD_INT 4
14599: ARRAY
14600: IFFALSE 14604
// exit ;
14602: GO 14655
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14604: LD_VAR 0 2
14608: PUSH
14609: LD_INT 29
14611: PUSH
14612: LD_INT 30
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: IN
14619: IFFALSE 14643
14621: PUSH
14622: LD_VAR 0 3
14626: PPUSH
14627: LD_VAR 0 4
14631: PPUSH
14632: LD_VAR 0 9
14636: PPUSH
14637: CALL_OW 440
14641: NOT
14642: AND
14643: IFFALSE 14647
// exit ;
14645: GO 14655
// result := true ;
14647: LD_ADDR_VAR 0 6
14651: PUSH
14652: LD_INT 1
14654: ST_TO_ADDR
// end ;
14655: LD_VAR 0 6
14659: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
14668: PPUSH
14669: PPUSH
14670: PPUSH
14671: PPUSH
14672: PPUSH
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
14686: PPUSH
14687: PPUSH
14688: PPUSH
14689: PPUSH
14690: PPUSH
14691: PPUSH
14692: PPUSH
14693: PPUSH
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
14703: PPUSH
14704: PPUSH
14705: PPUSH
14706: PPUSH
14707: PPUSH
14708: PPUSH
14709: PPUSH
14710: PPUSH
14711: PPUSH
14712: PPUSH
14713: PPUSH
14714: PPUSH
14715: PPUSH
14716: PPUSH
14717: PPUSH
14718: PPUSH
14719: PPUSH
// result = [ ] ;
14720: LD_ADDR_VAR 0 7
14724: PUSH
14725: EMPTY
14726: ST_TO_ADDR
// temp_list = [ ] ;
14727: LD_ADDR_VAR 0 9
14731: PUSH
14732: EMPTY
14733: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14734: LD_VAR 0 4
14738: PUSH
14739: LD_INT 0
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 4
14753: PUSH
14754: LD_INT 5
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: IN
14765: NOT
14766: IFTRUE 14809
14768: PUSH
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 0
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: IN
14784: IFFALSE 14808
14786: PUSH
14787: LD_VAR 0 5
14791: PUSH
14792: LD_INT 1
14794: PUSH
14795: LD_INT 2
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: IN
14806: NOT
14807: AND
14808: OR
14809: IFFALSE 14813
// exit ;
14811: GO 33212
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14813: LD_VAR 0 1
14817: PUSH
14818: LD_INT 6
14820: PUSH
14821: LD_INT 7
14823: PUSH
14824: LD_INT 8
14826: PUSH
14827: LD_INT 13
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: LD_INT 15
14835: PUSH
14836: LD_INT 11
14838: PUSH
14839: LD_INT 14
14841: PUSH
14842: LD_INT 10
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: IN
14856: IFFALSE 14866
// btype = b_lab ;
14858: LD_ADDR_VAR 0 1
14862: PUSH
14863: LD_INT 6
14865: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14866: LD_VAR 0 6
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: LD_INT 2
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: IN
14885: NOT
14886: IFTRUE 14954
14888: PUSH
14889: LD_VAR 0 1
14893: PUSH
14894: LD_INT 0
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: LD_INT 2
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: LD_INT 6
14908: PUSH
14909: LD_INT 36
14911: PUSH
14912: LD_INT 4
14914: PUSH
14915: LD_INT 5
14917: PUSH
14918: LD_INT 31
14920: PUSH
14921: LD_INT 32
14923: PUSH
14924: LD_INT 33
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: IN
14940: NOT
14941: IFFALSE 14953
14943: PUSH
14944: LD_VAR 0 6
14948: PUSH
14949: LD_INT 1
14951: EQUAL
14952: AND
14953: OR
14954: IFTRUE 14986
14956: PUSH
14957: LD_VAR 0 1
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: LD_INT 3
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: IN
14972: NOT
14973: IFFALSE 14985
14975: PUSH
14976: LD_VAR 0 6
14980: PUSH
14981: LD_INT 2
14983: EQUAL
14984: AND
14985: OR
14986: IFFALSE 14996
// mode = 0 ;
14988: LD_ADDR_VAR 0 6
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// case mode of 0 :
14996: LD_VAR 0 6
15000: PUSH
15001: LD_INT 0
15003: DOUBLE
15004: EQUAL
15005: IFTRUE 15009
15007: GO 26462
15009: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15010: LD_ADDR_VAR 0 11
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: LD_INT 0
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 0
15027: PUSH
15028: LD_INT 1
15030: NEG
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: LD_INT 0
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 0
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 1
15068: NEG
15069: PUSH
15070: LD_INT 0
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 1
15079: NEG
15080: PUSH
15081: LD_INT 1
15083: NEG
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 1
15091: NEG
15092: PUSH
15093: LD_INT 2
15095: NEG
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 0
15103: PUSH
15104: LD_INT 2
15106: NEG
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: LD_INT 1
15117: NEG
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 1
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 0
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 1
15145: NEG
15146: PUSH
15147: LD_INT 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: LD_INT 3
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 0
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 1
15176: NEG
15177: PUSH
15178: LD_INT 2
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15203: LD_ADDR_VAR 0 12
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: LD_INT 1
15223: NEG
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: LD_INT 0
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 1
15241: PUSH
15242: LD_INT 1
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 0
15251: PUSH
15252: LD_INT 1
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 1
15261: NEG
15262: PUSH
15263: LD_INT 0
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 1
15272: NEG
15273: PUSH
15274: LD_INT 1
15276: NEG
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: LD_INT 1
15284: PUSH
15285: LD_INT 1
15287: NEG
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 0
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 1
15315: NEG
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 2
15326: NEG
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 2
15337: NEG
15338: PUSH
15339: LD_INT 1
15341: NEG
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 2
15349: NEG
15350: PUSH
15351: LD_INT 1
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 3
15360: NEG
15361: PUSH
15362: LD_INT 0
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: PUSH
15369: LD_INT 3
15371: NEG
15372: PUSH
15373: LD_INT 1
15375: NEG
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15399: LD_ADDR_VAR 0 13
15403: PUSH
15404: LD_INT 0
15406: PUSH
15407: LD_INT 0
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: LD_INT 0
15416: PUSH
15417: LD_INT 1
15419: NEG
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 1
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 1
15437: PUSH
15438: LD_INT 1
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: LD_INT 1
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 1
15457: NEG
15458: PUSH
15459: LD_INT 0
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 1
15468: NEG
15469: PUSH
15470: LD_INT 1
15472: NEG
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 1
15480: NEG
15481: PUSH
15482: LD_INT 2
15484: NEG
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 2
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: LD_INT 2
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 2
15522: NEG
15523: PUSH
15524: LD_INT 1
15526: NEG
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 2
15534: NEG
15535: PUSH
15536: LD_INT 2
15538: NEG
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: NEG
15547: PUSH
15548: LD_INT 3
15550: NEG
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PUSH
15556: LD_INT 3
15558: NEG
15559: PUSH
15560: LD_INT 2
15562: NEG
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 3
15570: NEG
15571: PUSH
15572: LD_INT 3
15574: NEG
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15598: LD_ADDR_VAR 0 14
15602: PUSH
15603: LD_INT 0
15605: PUSH
15606: LD_INT 0
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 0
15615: PUSH
15616: LD_INT 1
15618: NEG
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: LD_INT 0
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: LD_INT 1
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 0
15646: PUSH
15647: LD_INT 1
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 1
15656: NEG
15657: PUSH
15658: LD_INT 0
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 1
15667: NEG
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 1
15679: NEG
15680: PUSH
15681: LD_INT 2
15683: NEG
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 0
15691: PUSH
15692: LD_INT 2
15694: NEG
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 1
15702: PUSH
15703: LD_INT 1
15705: NEG
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: LD_INT 2
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 1
15733: NEG
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 1
15744: NEG
15745: PUSH
15746: LD_INT 3
15748: NEG
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: LD_INT 3
15759: NEG
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 1
15767: PUSH
15768: LD_INT 2
15770: NEG
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15794: LD_ADDR_VAR 0 15
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: LD_INT 0
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PUSH
15809: LD_INT 0
15811: PUSH
15812: LD_INT 1
15814: NEG
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 1
15822: PUSH
15823: LD_INT 0
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 1
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 0
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 1
15852: NEG
15853: PUSH
15854: LD_INT 0
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 1
15863: NEG
15864: PUSH
15865: LD_INT 1
15867: NEG
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: LD_INT 1
15878: NEG
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 2
15886: PUSH
15887: LD_INT 0
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: NEG
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 2
15917: NEG
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 2
15928: NEG
15929: PUSH
15930: LD_INT 1
15932: NEG
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 1
15943: NEG
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 3
15951: PUSH
15952: LD_INT 0
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15987: LD_ADDR_VAR 0 16
15991: PUSH
15992: LD_INT 0
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 0
16004: PUSH
16005: LD_INT 1
16007: NEG
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 1
16015: PUSH
16016: LD_INT 0
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: LD_INT 1
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: PUSH
16033: LD_INT 0
16035: PUSH
16036: LD_INT 1
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 1
16045: NEG
16046: PUSH
16047: LD_INT 0
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 1
16056: NEG
16057: PUSH
16058: LD_INT 1
16060: NEG
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: LD_INT 1
16068: NEG
16069: PUSH
16070: LD_INT 2
16072: NEG
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 2
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 2
16090: PUSH
16091: LD_INT 2
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 1
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 2
16110: NEG
16111: PUSH
16112: LD_INT 1
16114: NEG
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 2
16122: NEG
16123: PUSH
16124: LD_INT 2
16126: NEG
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 3
16134: PUSH
16135: LD_INT 2
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 3
16144: PUSH
16145: LD_INT 3
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 3
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16180: LD_ADDR_VAR 0 17
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: LD_INT 1
16200: NEG
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: PUSH
16209: LD_INT 0
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 1
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 0
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 1
16238: NEG
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 1
16249: NEG
16250: PUSH
16251: LD_INT 1
16253: NEG
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 1
16261: NEG
16262: PUSH
16263: LD_INT 2
16265: NEG
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 0
16273: PUSH
16274: LD_INT 2
16276: NEG
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 1
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 2
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 2
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 0
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 1
16345: NEG
16346: PUSH
16347: LD_INT 1
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 2
16356: NEG
16357: PUSH
16358: LD_INT 0
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 2
16367: NEG
16368: PUSH
16369: LD_INT 1
16371: NEG
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 2
16379: NEG
16380: PUSH
16381: LD_INT 2
16383: NEG
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16410: LD_ADDR_VAR 0 18
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: LD_INT 0
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: LD_INT 1
16430: NEG
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 1
16438: PUSH
16439: LD_INT 0
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 1
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 1
16468: NEG
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 1
16479: NEG
16480: PUSH
16481: LD_INT 1
16483: NEG
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: NEG
16492: PUSH
16493: LD_INT 2
16495: NEG
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: LD_INT 2
16506: NEG
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 2
16525: PUSH
16526: LD_INT 0
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: LD_INT 1
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 1
16555: PUSH
16556: LD_INT 2
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: NEG
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 2
16586: NEG
16587: PUSH
16588: LD_INT 0
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: NEG
16598: PUSH
16599: LD_INT 1
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: NEG
16610: PUSH
16611: LD_INT 2
16613: NEG
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16640: LD_ADDR_VAR 0 19
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: LD_INT 0
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 0
16657: PUSH
16658: LD_INT 1
16660: NEG
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: LD_INT 0
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: LD_INT 1
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 0
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 1
16698: NEG
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 1
16709: NEG
16710: PUSH
16711: LD_INT 1
16713: NEG
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 1
16721: NEG
16722: PUSH
16723: LD_INT 2
16725: NEG
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: LD_INT 2
16736: NEG
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 1
16747: NEG
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 2
16765: PUSH
16766: LD_INT 1
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 2
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 0
16795: PUSH
16796: LD_INT 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 1
16805: NEG
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 2
16816: NEG
16817: PUSH
16818: LD_INT 0
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 2
16827: NEG
16828: PUSH
16829: LD_INT 1
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 2
16839: NEG
16840: PUSH
16841: LD_INT 2
16843: NEG
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16870: LD_ADDR_VAR 0 20
16874: PUSH
16875: LD_INT 0
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 0
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 1
16898: PUSH
16899: LD_INT 0
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 1
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 0
16918: PUSH
16919: LD_INT 1
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 1
16928: NEG
16929: PUSH
16930: LD_INT 0
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 1
16951: NEG
16952: PUSH
16953: LD_INT 2
16955: NEG
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: LD_INT 2
16966: NEG
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 1
16974: PUSH
16975: LD_INT 1
16977: NEG
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 0
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 2
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 1
17015: PUSH
17016: LD_INT 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 1
17035: NEG
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 2
17046: NEG
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 2
17057: NEG
17058: PUSH
17059: LD_INT 1
17061: NEG
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 2
17069: NEG
17070: PUSH
17071: LD_INT 2
17073: NEG
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17100: LD_ADDR_VAR 0 21
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: LD_INT 0
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 0
17117: PUSH
17118: LD_INT 1
17120: NEG
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: LD_INT 0
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 1
17138: PUSH
17139: LD_INT 1
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 1
17158: NEG
17159: PUSH
17160: LD_INT 0
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 1
17169: NEG
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 1
17181: NEG
17182: PUSH
17183: LD_INT 2
17185: NEG
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 2
17196: NEG
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 2
17235: PUSH
17236: LD_INT 2
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 1
17245: PUSH
17246: LD_INT 2
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 1
17265: NEG
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 2
17276: NEG
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 2
17287: NEG
17288: PUSH
17289: LD_INT 1
17291: NEG
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 2
17299: NEG
17300: PUSH
17301: LD_INT 2
17303: NEG
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17330: LD_ADDR_VAR 0 22
17334: PUSH
17335: LD_INT 0
17337: PUSH
17338: LD_INT 0
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 0
17347: PUSH
17348: LD_INT 1
17350: NEG
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: LD_INT 0
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 0
17378: PUSH
17379: LD_INT 1
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 1
17388: NEG
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: NEG
17400: PUSH
17401: LD_INT 1
17403: NEG
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 1
17411: NEG
17412: PUSH
17413: LD_INT 2
17415: NEG
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 0
17423: PUSH
17424: LD_INT 2
17426: NEG
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 1
17434: PUSH
17435: LD_INT 1
17437: NEG
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: LD_INT 0
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 2
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 2
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 2
17506: NEG
17507: PUSH
17508: LD_INT 0
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 2
17517: NEG
17518: PUSH
17519: LD_INT 1
17521: NEG
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: NEG
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17560: LD_ADDR_VAR 0 23
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: LD_INT 0
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 0
17577: PUSH
17578: LD_INT 1
17580: NEG
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 1
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 0
17608: PUSH
17609: LD_INT 1
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: NEG
17619: PUSH
17620: LD_INT 0
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 1
17629: NEG
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 2
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 2
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 1
17664: PUSH
17665: LD_INT 1
17667: NEG
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 2
17675: PUSH
17676: LD_INT 0
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: LD_INT 2
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 2
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 1
17725: NEG
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 2
17736: NEG
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 2
17747: NEG
17748: PUSH
17749: LD_INT 1
17751: NEG
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 2
17759: NEG
17760: PUSH
17761: LD_INT 2
17763: NEG
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 2
17771: NEG
17772: PUSH
17773: LD_INT 3
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: LD_INT 3
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 2
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: LD_INT 1
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17840: LD_ADDR_VAR 0 24
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: LD_INT 1
17860: NEG
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: NEG
17922: PUSH
17923: LD_INT 2
17925: NEG
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 0
17933: PUSH
17934: LD_INT 2
17936: NEG
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: LD_INT 0
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 2
17975: PUSH
17976: LD_INT 2
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 1
18005: NEG
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: NEG
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 2
18027: NEG
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: NEG
18040: PUSH
18041: LD_INT 2
18043: NEG
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: LD_INT 2
18054: NEG
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 3
18083: PUSH
18084: LD_INT 2
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18116: LD_ADDR_VAR 0 25
18120: PUSH
18121: LD_INT 0
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 1
18174: NEG
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: NEG
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: LD_INT 2
18201: NEG
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: LD_INT 2
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: LD_INT 2
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: NEG
18293: PUSH
18294: LD_INT 0
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: NEG
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 2
18315: NEG
18316: PUSH
18317: LD_INT 2
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 3
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: LD_INT 3
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18390: LD_ADDR_VAR 0 26
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: LD_INT 0
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: LD_INT 1
18410: NEG
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: LD_INT 1
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: NEG
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: LD_INT 2
18475: NEG
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: LD_INT 2
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 2
18566: NEG
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: LD_INT 1
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 2
18589: NEG
18590: PUSH
18591: LD_INT 2
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 2
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: NEG
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 2
18632: NEG
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18666: LD_ADDR_VAR 0 27
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: NEG
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: LD_INT 2
18751: NEG
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 2
18801: PUSH
18802: LD_INT 2
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: LD_INT 2
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: NEG
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 2
18853: NEG
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 2
18865: NEG
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 1
18877: NEG
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 3
18899: NEG
18900: PUSH
18901: LD_INT 1
18903: NEG
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 3
18911: NEG
18912: PUSH
18913: LD_INT 2
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18946: LD_ADDR_VAR 0 28
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: LD_INT 1
18966: NEG
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: NEG
19005: PUSH
19006: LD_INT 0
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: LD_INT 2
19031: NEG
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: LD_INT 2
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: LD_INT 2
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: LD_INT 1
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: NEG
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 2
19133: NEG
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: NEG
19146: PUSH
19147: LD_INT 2
19149: NEG
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 2
19157: NEG
19158: PUSH
19159: LD_INT 3
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: NEG
19170: PUSH
19171: LD_INT 3
19173: NEG
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 3
19181: NEG
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 3
19193: NEG
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19228: LD_ADDR_VAR 0 29
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 0
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: NEG
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 2
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: LD_INT 2
19324: NEG
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 1
19383: NEG
19384: PUSH
19385: LD_INT 1
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 2
19406: NEG
19407: PUSH
19408: LD_INT 2
19410: NEG
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: LD_INT 3
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 3
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 1
19451: PUSH
19452: LD_INT 3
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 3
19472: NEG
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19507: LD_ADDR_VAR 0 30
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: LD_INT 1
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: LD_INT 2
19592: NEG
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 2
19603: NEG
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: LD_INT 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: NEG
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 2
19684: NEG
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: LD_INT 3
19700: NEG
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 2
19711: NEG
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 3
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: LD_INT 3
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 3
19750: NEG
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19785: LD_ADDR_VAR 0 31
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 0
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 1
19843: NEG
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: PUSH
19890: LD_INT 0
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 2
19909: PUSH
19910: LD_INT 2
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: LD_INT 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: NEG
19951: PUSH
19952: LD_INT 1
19954: NEG
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 2
19962: NEG
19963: PUSH
19964: LD_INT 2
19966: NEG
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: LD_INT 3
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: PUSH
20008: LD_INT 3
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: LD_INT 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 3
20028: NEG
20029: PUSH
20030: LD_INT 2
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20063: LD_ADDR_VAR 0 32
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 0
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: NEG
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: NEG
20145: PUSH
20146: LD_INT 2
20148: NEG
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: LD_INT 2
20159: NEG
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 1
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 2
20240: NEG
20241: PUSH
20242: LD_INT 1
20244: NEG
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: LD_INT 3
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 2
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 3
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 3
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 2
20295: NEG
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 3
20306: NEG
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20341: LD_ADDR_VAR 0 33
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 1
20379: PUSH
20380: LD_INT 1
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: LD_INT 0
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: LD_INT 2
20426: NEG
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: LD_INT 3
20535: NEG
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 2
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: LD_INT 3
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 3
20585: NEG
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20620: LD_ADDR_VAR 0 34
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 0
20637: PUSH
20638: LD_INT 1
20640: NEG
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: LD_INT 0
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: LD_INT 1
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: NEG
20702: PUSH
20703: LD_INT 2
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: LD_INT 2
20716: NEG
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 1
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 2
20776: NEG
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: NEG
20788: PUSH
20789: LD_INT 1
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: NEG
20800: PUSH
20801: LD_INT 2
20803: NEG
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: LD_INT 3
20815: NEG
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 2
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 3
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 3
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20900: LD_ADDR_VAR 0 35
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: LD_INT 1
20920: NEG
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: LD_INT 0
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 1
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: LD_INT 1
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 2
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: NEG
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21012: LD_ADDR_VAR 0 36
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: LD_INT 2
21097: NEG
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21124: LD_ADDR_VAR 0 37
21128: PUSH
21129: LD_INT 0
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21236: LD_ADDR_VAR 0 38
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: LD_INT 1
21256: NEG
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: LD_INT 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: NEG
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21348: LD_ADDR_VAR 0 39
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: NEG
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 2
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21460: LD_ADDR_VAR 0 40
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 0
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21572: LD_ADDR_VAR 0 41
21576: PUSH
21577: LD_INT 0
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 1
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: NEG
21642: PUSH
21643: LD_INT 1
21645: NEG
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: LD_INT 2
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 2
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 2
21727: NEG
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: NEG
21739: PUSH
21740: LD_INT 1
21742: NEG
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 2
21750: NEG
21751: PUSH
21752: LD_INT 2
21754: NEG
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: NEG
21763: PUSH
21764: LD_INT 3
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 3
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 3
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 3
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 3
21815: PUSH
21816: LD_INT 3
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 3
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: NEG
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 3
21846: NEG
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 3
21857: NEG
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 3
21869: NEG
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 3
21881: NEG
21882: PUSH
21883: LD_INT 3
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21922: LD_ADDR_VAR 0 42
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: PUSH
21951: LD_INT 0
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 0
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: NEG
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: NEG
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: NEG
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 2
22100: NEG
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 2
22112: NEG
22113: PUSH
22114: LD_INT 3
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: NEG
22125: PUSH
22126: LD_INT 3
22128: NEG
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 0
22136: PUSH
22137: LD_INT 3
22139: NEG
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: LD_INT 2
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: LD_INT 3
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: LD_INT 3
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 3
22219: NEG
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 3
22231: NEG
22232: PUSH
22233: LD_INT 3
22235: NEG
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22272: LD_ADDR_VAR 0 43
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: LD_INT 0
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 2
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 1
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 0
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 3
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 3
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: LD_INT 2
22487: NEG
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: LD_INT 1
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 3
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 3
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 0
22536: PUSH
22537: LD_INT 3
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 1
22546: NEG
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 3
22568: NEG
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 3
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22620: LD_ADDR_VAR 0 44
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 0
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 0
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 1
22678: NEG
22679: PUSH
22680: LD_INT 0
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 1
22689: NEG
22690: PUSH
22691: LD_INT 1
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: LD_INT 2
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: LD_INT 1
22716: NEG
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 2
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: NEG
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: NEG
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 2
22786: NEG
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: LD_INT 3
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: LD_INT 1
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 3
22833: PUSH
22834: LD_INT 0
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 3
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 3
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 3
22894: NEG
22895: PUSH
22896: LD_INT 0
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 3
22905: NEG
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 3
22917: NEG
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: LD_INT 3
22933: NEG
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22970: LD_ADDR_VAR 0 45
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 1
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 1
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: LD_INT 2
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 2
23160: NEG
23161: PUSH
23162: LD_INT 3
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 1
23172: NEG
23173: PUSH
23174: LD_INT 3
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: LD_INT 3
23187: NEG
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: LD_INT 2
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 3
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: LD_INT 3
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: LD_INT 3
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 3
23267: NEG
23268: PUSH
23269: LD_INT 2
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 3
23279: NEG
23280: PUSH
23281: LD_INT 3
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23320: LD_ADDR_VAR 0 46
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: LD_INT 1
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: LD_INT 0
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: LD_INT 2
23405: NEG
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 0
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 2
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: NEG
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: NEG
23510: PUSH
23511: LD_INT 3
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: LD_INT 3
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 1
23532: PUSH
23533: LD_INT 2
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 3
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 3
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: LD_INT 3
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: LD_INT 3
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 3
23616: NEG
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 3
23627: NEG
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23668: LD_ADDR_VAR 0 47
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 2
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 2
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: NEG
23784: PUSH
23785: LD_INT 1
23787: NEG
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: LD_INT 2
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23819: LD_ADDR_VAR 0 48
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 2
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 2
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: LD_INT 1
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23966: LD_ADDR_VAR 0 49
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 1
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 1
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 2
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24110: LD_ADDR_VAR 0 50
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 1
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24254: LD_ADDR_VAR 0 51
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 1
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 0
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 2
24366: NEG
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: NEG
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24401: LD_ADDR_VAR 0 52
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: NEG
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: NEG
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24552: LD_ADDR_VAR 0 53
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 1
24659: NEG
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 2
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: NEG
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: NEG
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: LD_INT 2
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24782: LD_ADDR_VAR 0 54
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 1
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 2
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 2
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 2
24958: NEG
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 2
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 2
24981: NEG
24982: PUSH
24983: LD_INT 2
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25012: LD_ADDR_VAR 0 55
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 2
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 1
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 2
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: LD_INT 2
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: NEG
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: NEG
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: NEG
25200: PUSH
25201: LD_INT 1
25203: NEG
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 2
25211: NEG
25212: PUSH
25213: LD_INT 2
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25242: LD_ADDR_VAR 0 56
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 0
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 2
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: LD_INT 2
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: NEG
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: NEG
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: NEG
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25472: LD_ADDR_VAR 0 57
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: LD_INT 0
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: LD_INT 0
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: LD_INT 2
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: LD_INT 1
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 2
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 2
25648: NEG
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: NEG
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25702: LD_ADDR_VAR 0 58
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 2
25889: NEG
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: NEG
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25932: LD_ADDR_VAR 0 59
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26020: LD_ADDR_VAR 0 60
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26108: LD_ADDR_VAR 0 61
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26196: LD_ADDR_VAR 0 62
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 1
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: NEG
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26284: LD_ADDR_VAR 0 63
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26372: LD_ADDR_VAR 0 64
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: ST_TO_ADDR
// end ; 1 :
26460: GO 32357
26462: LD_INT 1
26464: DOUBLE
26465: EQUAL
26466: IFTRUE 26470
26468: GO 29093
26470: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26471: LD_ADDR_VAR 0 11
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 3
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: LD_INT 3
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: LIST
26514: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26515: LD_ADDR_VAR 0 12
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 3
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: LIST
26555: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26556: LD_ADDR_VAR 0 13
26560: PUSH
26561: LD_INT 3
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26596: LD_ADDR_VAR 0 14
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 3
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 3
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: LIST
26636: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26637: LD_ADDR_VAR 0 15
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 3
26666: NEG
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26681: LD_ADDR_VAR 0 16
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: LD_INT 3
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 3
26700: NEG
26701: PUSH
26702: LD_INT 2
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 3
26712: NEG
26713: PUSH
26714: LD_INT 3
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26727: LD_ADDR_VAR 0 17
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: LD_INT 3
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: LD_INT 3
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26771: LD_ADDR_VAR 0 18
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 3
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26812: LD_ADDR_VAR 0 19
26816: PUSH
26817: LD_INT 3
26819: PUSH
26820: LD_INT 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 3
26829: PUSH
26830: LD_INT 3
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 3
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26852: LD_ADDR_VAR 0 20
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: LD_INT 3
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: LD_INT 3
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26893: LD_ADDR_VAR 0 21
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 3
26911: NEG
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 3
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26937: LD_ADDR_VAR 0 22
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: LD_INT 3
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 3
26956: NEG
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 3
26968: NEG
26969: PUSH
26970: LD_INT 3
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26983: LD_ADDR_VAR 0 23
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 3
26993: NEG
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 4
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 3
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27027: LD_ADDR_VAR 0 24
27031: PUSH
27032: LD_INT 3
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 4
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: LIST
27067: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27068: LD_ADDR_VAR 0 25
27072: PUSH
27073: LD_INT 3
27075: PUSH
27076: LD_INT 3
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 4
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 3
27095: PUSH
27096: LD_INT 4
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27108: LD_ADDR_VAR 0 26
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 3
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: LD_INT 4
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 3
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27149: LD_ADDR_VAR 0 27
27153: PUSH
27154: LD_INT 3
27156: NEG
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 3
27167: NEG
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 4
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27193: LD_ADDR_VAR 0 28
27197: PUSH
27198: LD_INT 3
27200: NEG
27201: PUSH
27202: LD_INT 3
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 3
27212: NEG
27213: PUSH
27214: LD_INT 4
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 4
27224: NEG
27225: PUSH
27226: LD_INT 3
27228: NEG
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27239: LD_ADDR_VAR 0 29
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 3
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 3
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 2
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 4
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 4
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 3
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: LD_INT 5
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 5
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 4
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 6
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 6
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 5
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27394: LD_ADDR_VAR 0 30
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 3
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 3
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 3
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 4
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 4
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 4
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 5
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 5
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 5
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 6
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 6
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27537: LD_ADDR_VAR 0 31
27541: PUSH
27542: LD_INT 3
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 3
27554: PUSH
27555: LD_INT 3
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 3
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 4
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 4
27584: PUSH
27585: LD_INT 4
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: LD_INT 4
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 5
27604: PUSH
27605: LD_INT 4
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 5
27614: PUSH
27615: LD_INT 5
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 4
27624: PUSH
27625: LD_INT 5
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 6
27634: PUSH
27635: LD_INT 5
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 6
27644: PUSH
27645: LD_INT 6
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 5
27654: PUSH
27655: LD_INT 6
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27676: LD_ADDR_VAR 0 32
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: LD_INT 3
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 3
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 4
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 4
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 3
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 5
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 5
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 4
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 6
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 6
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 5
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27819: LD_ADDR_VAR 0 33
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 3
27837: NEG
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 3
27848: NEG
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 3
27860: NEG
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 4
27871: NEG
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 4
27882: NEG
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 4
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 5
27905: NEG
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 5
27916: NEG
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 5
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 6
27939: NEG
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 6
27950: NEG
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27974: LD_ADDR_VAR 0 34
27978: PUSH
27979: LD_INT 2
27981: NEG
27982: PUSH
27983: LD_INT 3
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 3
27993: NEG
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 3
28005: NEG
28006: PUSH
28007: LD_INT 3
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 3
28017: NEG
28018: PUSH
28019: LD_INT 4
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 4
28029: NEG
28030: PUSH
28031: LD_INT 3
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 4
28041: NEG
28042: PUSH
28043: LD_INT 4
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 4
28053: NEG
28054: PUSH
28055: LD_INT 5
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 5
28065: NEG
28066: PUSH
28067: LD_INT 4
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 5
28077: NEG
28078: PUSH
28079: LD_INT 5
28081: NEG
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 5
28089: NEG
28090: PUSH
28091: LD_INT 6
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 6
28101: NEG
28102: PUSH
28103: LD_INT 5
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 6
28113: NEG
28114: PUSH
28115: LD_INT 6
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28137: LD_ADDR_VAR 0 41
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: LD_INT 3
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28181: LD_ADDR_VAR 0 42
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 3
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: LIST
28221: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28222: LD_ADDR_VAR 0 43
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28262: LD_ADDR_VAR 0 44
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 2
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 3
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28303: LD_ADDR_VAR 0 45
28307: PUSH
28308: LD_INT 2
28310: NEG
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28347: LD_ADDR_VAR 0 46
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 2
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 3
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 3
28378: NEG
28379: PUSH
28380: LD_INT 2
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28393: LD_ADDR_VAR 0 47
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: LD_INT 3
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: LD_INT 3
28416: NEG
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28426: LD_ADDR_VAR 0 48
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28457: LD_ADDR_VAR 0 49
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 3
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28486: LD_ADDR_VAR 0 50
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 3
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 3
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28515: LD_ADDR_VAR 0 51
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28546: LD_ADDR_VAR 0 52
28550: PUSH
28551: LD_INT 3
28553: NEG
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 3
28565: NEG
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28579: LD_ADDR_VAR 0 53
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 3
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: LD_INT 3
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 2
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28623: LD_ADDR_VAR 0 54
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 3
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 3
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28664: LD_ADDR_VAR 0 55
28668: PUSH
28669: LD_INT 3
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: PUSH
28692: LD_INT 3
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28704: LD_ADDR_VAR 0 56
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 3
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28745: LD_ADDR_VAR 0 57
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 3
28763: NEG
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 3
28774: NEG
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28789: LD_ADDR_VAR 0 58
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 3
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 3
28808: NEG
28809: PUSH
28810: LD_INT 2
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 3
28820: NEG
28821: PUSH
28822: LD_INT 3
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: LIST
28834: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28835: LD_ADDR_VAR 0 59
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: LD_INT 2
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28879: LD_ADDR_VAR 0 60
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28920: LD_ADDR_VAR 0 61
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 2
28937: PUSH
28938: LD_INT 2
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 2
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28960: LD_ADDR_VAR 0 62
28964: PUSH
28965: LD_INT 1
28967: PUSH
28968: LD_INT 2
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29001: LD_ADDR_VAR 0 63
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29045: LD_ADDR_VAR 0 64
29049: PUSH
29050: LD_INT 1
29052: NEG
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: LIST
29090: ST_TO_ADDR
// end ; 2 :
29091: GO 32357
29093: LD_INT 2
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 32356
29101: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29102: LD_ADDR_VAR 0 29
29106: PUSH
29107: LD_INT 4
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 4
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 5
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 5
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 4
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 3
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 3
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: LD_INT 2
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 5
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 3
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 3
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 4
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 4
29232: PUSH
29233: LD_INT 4
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 3
29242: PUSH
29243: LD_INT 4
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: LD_INT 3
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 4
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 4
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: LD_INT 4
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 3
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: PUSH
29313: LD_INT 4
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: LD_INT 5
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 5
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: LD_INT 4
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 5
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 3
29385: NEG
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: NEG
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 3
29430: NEG
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 4
29441: NEG
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 4
29452: NEG
29453: PUSH
29454: LD_INT 1
29456: NEG
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 4
29464: NEG
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 4
29487: NEG
29488: PUSH
29489: LD_INT 4
29491: NEG
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 4
29499: NEG
29500: PUSH
29501: LD_INT 5
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: LD_INT 4
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 3
29523: NEG
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 4
29535: NEG
29536: PUSH
29537: LD_INT 3
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 5
29547: NEG
29548: PUSH
29549: LD_INT 4
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 5
29559: NEG
29560: PUSH
29561: LD_INT 5
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: LD_INT 5
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 5
29583: NEG
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29640: LD_ADDR_VAR 0 30
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 4
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 4
29657: PUSH
29658: LD_INT 3
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 5
29667: PUSH
29668: LD_INT 4
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 5
29677: PUSH
29678: LD_INT 5
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 4
29687: PUSH
29688: LD_INT 5
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: LD_INT 4
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: LD_INT 3
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 5
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: LD_INT 5
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 3
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 4
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 4
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 4
29830: NEG
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 4
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 3
29853: NEG
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 4
29875: NEG
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 5
29886: NEG
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 5
29897: NEG
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 5
29909: NEG
29910: PUSH
29911: LD_INT 2
29913: NEG
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 3
29921: NEG
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: LD_INT 3
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: NEG
29945: PUSH
29946: LD_INT 4
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 2
29956: NEG
29957: PUSH
29958: LD_INT 3
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: LD_INT 2
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 4
29992: NEG
29993: PUSH
29994: LD_INT 3
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 4
30004: NEG
30005: PUSH
30006: LD_INT 4
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: LD_INT 4
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 4
30028: NEG
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 4
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 5
30054: NEG
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 4
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: LD_INT 3
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: LD_INT 3
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 4
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 5
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 3
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: LD_INT 5
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30187: LD_ADDR_VAR 0 31
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 4
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: LD_INT 4
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 5
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 5
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 4
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: LD_INT 5
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 2
30276: NEG
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: NEG
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: NEG
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 4
30343: NEG
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 4
30354: NEG
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 4
30366: NEG
30367: PUSH
30368: LD_INT 2
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 2
30378: NEG
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 4
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 4
30401: NEG
30402: PUSH
30403: LD_INT 5
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: NEG
30414: PUSH
30415: LD_INT 4
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 3
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 4
30437: NEG
30438: PUSH
30439: LD_INT 3
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 5
30449: NEG
30450: PUSH
30451: LD_INT 4
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 5
30461: NEG
30462: PUSH
30463: LD_INT 5
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 3
30473: NEG
30474: PUSH
30475: LD_INT 5
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 5
30485: NEG
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: LD_INT 4
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 3
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 4
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 4
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 4
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 5
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 3
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 5
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30737: LD_ADDR_VAR 0 32
30741: PUSH
30742: LD_INT 4
30744: NEG
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 4
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 4
30789: NEG
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 5
30800: NEG
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 5
30811: NEG
30812: PUSH
30813: LD_INT 1
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 5
30823: NEG
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: LD_INT 4
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 2
30870: NEG
30871: PUSH
30872: LD_INT 3
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 4
30906: NEG
30907: PUSH
30908: LD_INT 3
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 4
30918: NEG
30919: PUSH
30920: LD_INT 4
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 2
30930: NEG
30931: PUSH
30932: LD_INT 4
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 4
30942: NEG
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 4
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 5
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: LD_INT 4
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: LD_INT 3
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 3
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 4
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 5
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: LD_INT 3
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: LD_INT 5
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 4
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 4
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 4
31149: PUSH
31150: LD_INT 4
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 4
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 5
31169: PUSH
31170: LD_INT 4
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 5
31179: PUSH
31180: LD_INT 5
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 4
31189: PUSH
31190: LD_INT 5
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: LD_INT 4
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 5
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 5
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31284: LD_ADDR_VAR 0 33
31288: PUSH
31289: LD_INT 4
31291: NEG
31292: PUSH
31293: LD_INT 4
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: LD_INT 5
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: LD_INT 4
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: LD_INT 3
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 4
31339: NEG
31340: PUSH
31341: LD_INT 3
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 5
31351: NEG
31352: PUSH
31353: LD_INT 4
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 5
31363: NEG
31364: PUSH
31365: LD_INT 5
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: LD_INT 5
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 5
31387: NEG
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 4
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 3
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 3
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: LD_INT 4
31470: NEG
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: LD_INT 4
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 4
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 4
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 5
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 5
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 4
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 5
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 3
31594: PUSH
31595: LD_INT 3
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 3
31634: PUSH
31635: LD_INT 4
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 2
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: LD_INT 4
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: LD_INT 4
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 4
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: LD_INT 5
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: LD_INT 4
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 5
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31822: LD_ADDR_VAR 0 34
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 4
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: LD_INT 5
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 3
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 5
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 2
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: LD_INT 5
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 4
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 4
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 3
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 4
32024: PUSH
32025: LD_INT 4
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 4
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 5
32044: PUSH
32045: LD_INT 4
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 5
32054: PUSH
32055: LD_INT 5
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 4
32064: PUSH
32065: LD_INT 5
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: LD_INT 4
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 5
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 5
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 4
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 4
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 4
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 2
32196: NEG
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 4
32207: NEG
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: NEG
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: NEG
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 3
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 4
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 5
32263: NEG
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 5
32274: NEG
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 5
32286: NEG
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 3
32298: NEG
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// end ; end ;
32354: GO 32357
32356: POP
// case btype of b_depot , b_warehouse :
32357: LD_VAR 0 1
32361: PUSH
32362: LD_INT 0
32364: DOUBLE
32365: EQUAL
32366: IFTRUE 32376
32368: LD_INT 1
32370: DOUBLE
32371: EQUAL
32372: IFTRUE 32376
32374: GO 32577
32376: POP
// case nation of nation_american :
32377: LD_VAR 0 5
32381: PUSH
32382: LD_INT 1
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32446
32390: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32391: LD_ADDR_VAR 0 9
32395: PUSH
32396: LD_VAR 0 11
32400: PUSH
32401: LD_VAR 0 12
32405: PUSH
32406: LD_VAR 0 13
32410: PUSH
32411: LD_VAR 0 14
32415: PUSH
32416: LD_VAR 0 15
32420: PUSH
32421: LD_VAR 0 16
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: PUSH
32434: LD_VAR 0 4
32438: PUSH
32439: LD_INT 1
32441: PLUS
32442: ARRAY
32443: ST_TO_ADDR
32444: GO 32575
32446: LD_INT 2
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32510
32454: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32455: LD_ADDR_VAR 0 9
32459: PUSH
32460: LD_VAR 0 17
32464: PUSH
32465: LD_VAR 0 18
32469: PUSH
32470: LD_VAR 0 19
32474: PUSH
32475: LD_VAR 0 20
32479: PUSH
32480: LD_VAR 0 21
32484: PUSH
32485: LD_VAR 0 22
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: PUSH
32498: LD_VAR 0 4
32502: PUSH
32503: LD_INT 1
32505: PLUS
32506: ARRAY
32507: ST_TO_ADDR
32508: GO 32575
32510: LD_INT 3
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32574
32518: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32519: LD_ADDR_VAR 0 9
32523: PUSH
32524: LD_VAR 0 23
32528: PUSH
32529: LD_VAR 0 24
32533: PUSH
32534: LD_VAR 0 25
32538: PUSH
32539: LD_VAR 0 26
32543: PUSH
32544: LD_VAR 0 27
32548: PUSH
32549: LD_VAR 0 28
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: PUSH
32562: LD_VAR 0 4
32566: PUSH
32567: LD_INT 1
32569: PLUS
32570: ARRAY
32571: ST_TO_ADDR
32572: GO 32575
32574: POP
32575: GO 33130
32577: LD_INT 2
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32591
32583: LD_INT 3
32585: DOUBLE
32586: EQUAL
32587: IFTRUE 32591
32589: GO 32647
32591: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32592: LD_ADDR_VAR 0 9
32596: PUSH
32597: LD_VAR 0 29
32601: PUSH
32602: LD_VAR 0 30
32606: PUSH
32607: LD_VAR 0 31
32611: PUSH
32612: LD_VAR 0 32
32616: PUSH
32617: LD_VAR 0 33
32621: PUSH
32622: LD_VAR 0 34
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: PUSH
32635: LD_VAR 0 4
32639: PUSH
32640: LD_INT 1
32642: PLUS
32643: ARRAY
32644: ST_TO_ADDR
32645: GO 33130
32647: LD_INT 16
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32709
32653: LD_INT 17
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32709
32659: LD_INT 18
32661: DOUBLE
32662: EQUAL
32663: IFTRUE 32709
32665: LD_INT 19
32667: DOUBLE
32668: EQUAL
32669: IFTRUE 32709
32671: LD_INT 22
32673: DOUBLE
32674: EQUAL
32675: IFTRUE 32709
32677: LD_INT 20
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32709
32683: LD_INT 21
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32709
32689: LD_INT 23
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32709
32695: LD_INT 24
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32709
32701: LD_INT 25
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32709
32707: GO 32765
32709: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32710: LD_ADDR_VAR 0 9
32714: PUSH
32715: LD_VAR 0 35
32719: PUSH
32720: LD_VAR 0 36
32724: PUSH
32725: LD_VAR 0 37
32729: PUSH
32730: LD_VAR 0 38
32734: PUSH
32735: LD_VAR 0 39
32739: PUSH
32740: LD_VAR 0 40
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: PUSH
32753: LD_VAR 0 4
32757: PUSH
32758: LD_INT 1
32760: PLUS
32761: ARRAY
32762: ST_TO_ADDR
32763: GO 33130
32765: LD_INT 6
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32821
32771: LD_INT 7
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32821
32777: LD_INT 8
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32821
32783: LD_INT 13
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32821
32789: LD_INT 12
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32821
32795: LD_INT 15
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32821
32801: LD_INT 11
32803: DOUBLE
32804: EQUAL
32805: IFTRUE 32821
32807: LD_INT 14
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32821
32813: LD_INT 10
32815: DOUBLE
32816: EQUAL
32817: IFTRUE 32821
32819: GO 32877
32821: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32822: LD_ADDR_VAR 0 9
32826: PUSH
32827: LD_VAR 0 41
32831: PUSH
32832: LD_VAR 0 42
32836: PUSH
32837: LD_VAR 0 43
32841: PUSH
32842: LD_VAR 0 44
32846: PUSH
32847: LD_VAR 0 45
32851: PUSH
32852: LD_VAR 0 46
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: PUSH
32865: LD_VAR 0 4
32869: PUSH
32870: LD_INT 1
32872: PLUS
32873: ARRAY
32874: ST_TO_ADDR
32875: GO 33130
32877: LD_INT 36
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 32941
32885: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32886: LD_ADDR_VAR 0 9
32890: PUSH
32891: LD_VAR 0 47
32895: PUSH
32896: LD_VAR 0 48
32900: PUSH
32901: LD_VAR 0 49
32905: PUSH
32906: LD_VAR 0 50
32910: PUSH
32911: LD_VAR 0 51
32915: PUSH
32916: LD_VAR 0 52
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: PUSH
32929: LD_VAR 0 4
32933: PUSH
32934: LD_INT 1
32936: PLUS
32937: ARRAY
32938: ST_TO_ADDR
32939: GO 33130
32941: LD_INT 4
32943: DOUBLE
32944: EQUAL
32945: IFTRUE 32967
32947: LD_INT 5
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32967
32953: LD_INT 34
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32967
32959: LD_INT 37
32961: DOUBLE
32962: EQUAL
32963: IFTRUE 32967
32965: GO 33023
32967: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32968: LD_ADDR_VAR 0 9
32972: PUSH
32973: LD_VAR 0 53
32977: PUSH
32978: LD_VAR 0 54
32982: PUSH
32983: LD_VAR 0 55
32987: PUSH
32988: LD_VAR 0 56
32992: PUSH
32993: LD_VAR 0 57
32997: PUSH
32998: LD_VAR 0 58
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: PUSH
33011: LD_VAR 0 4
33015: PUSH
33016: LD_INT 1
33018: PLUS
33019: ARRAY
33020: ST_TO_ADDR
33021: GO 33130
33023: LD_INT 31
33025: DOUBLE
33026: EQUAL
33027: IFTRUE 33073
33029: LD_INT 32
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33073
33035: LD_INT 33
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33073
33041: LD_INT 27
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33073
33047: LD_INT 26
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33073
33053: LD_INT 28
33055: DOUBLE
33056: EQUAL
33057: IFTRUE 33073
33059: LD_INT 29
33061: DOUBLE
33062: EQUAL
33063: IFTRUE 33073
33065: LD_INT 30
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33129
33073: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33074: LD_ADDR_VAR 0 9
33078: PUSH
33079: LD_VAR 0 59
33083: PUSH
33084: LD_VAR 0 60
33088: PUSH
33089: LD_VAR 0 61
33093: PUSH
33094: LD_VAR 0 62
33098: PUSH
33099: LD_VAR 0 63
33103: PUSH
33104: LD_VAR 0 64
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: PUSH
33117: LD_VAR 0 4
33121: PUSH
33122: LD_INT 1
33124: PLUS
33125: ARRAY
33126: ST_TO_ADDR
33127: GO 33130
33129: POP
// temp_list2 = [ ] ;
33130: LD_ADDR_VAR 0 10
33134: PUSH
33135: EMPTY
33136: ST_TO_ADDR
// for i in temp_list do
33137: LD_ADDR_VAR 0 8
33141: PUSH
33142: LD_VAR 0 9
33146: PUSH
33147: FOR_IN
33148: IFFALSE 33200
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33150: LD_ADDR_VAR 0 10
33154: PUSH
33155: LD_VAR 0 10
33159: PUSH
33160: LD_VAR 0 8
33164: PUSH
33165: LD_INT 1
33167: ARRAY
33168: PUSH
33169: LD_VAR 0 2
33173: PLUS
33174: PUSH
33175: LD_VAR 0 8
33179: PUSH
33180: LD_INT 2
33182: ARRAY
33183: PUSH
33184: LD_VAR 0 3
33188: PLUS
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: ADD
33197: ST_TO_ADDR
33198: GO 33147
33200: POP
33201: POP
// result = temp_list2 ;
33202: LD_ADDR_VAR 0 7
33206: PUSH
33207: LD_VAR 0 10
33211: ST_TO_ADDR
// end ;
33212: LD_VAR 0 7
33216: RET
// export function EnemyInRange ( unit , dist ) ; begin
33217: LD_INT 0
33219: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_VAR 0 1
33229: PPUSH
33230: CALL_OW 255
33234: PPUSH
33235: LD_VAR 0 1
33239: PPUSH
33240: CALL_OW 250
33244: PPUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: CALL_OW 251
33254: PPUSH
33255: LD_VAR 0 2
33259: PPUSH
33260: CALL 6474 0 4
33264: PUSH
33265: LD_INT 4
33267: ARRAY
33268: ST_TO_ADDR
// end ;
33269: LD_VAR 0 3
33273: RET
// export function PlayerSeeMe ( unit ) ; begin
33274: LD_INT 0
33276: PPUSH
// result := See ( your_side , unit ) ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_OWVAR 2
33286: PPUSH
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 292
33296: ST_TO_ADDR
// end ;
33297: LD_VAR 0 2
33301: RET
// export function ReverseDir ( unit ) ; begin
33302: LD_INT 0
33304: PPUSH
// if not unit then
33305: LD_VAR 0 1
33309: NOT
33310: IFFALSE 33314
// exit ;
33312: GO 33337
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33314: LD_ADDR_VAR 0 2
33318: PUSH
33319: LD_VAR 0 1
33323: PPUSH
33324: CALL_OW 254
33328: PUSH
33329: LD_INT 3
33331: PLUS
33332: PUSH
33333: LD_INT 6
33335: MOD
33336: ST_TO_ADDR
// end ;
33337: LD_VAR 0 2
33341: RET
// export function ReverseArray ( array ) ; var i ; begin
33342: LD_INT 0
33344: PPUSH
33345: PPUSH
// if not array then
33346: LD_VAR 0 1
33350: NOT
33351: IFFALSE 33355
// exit ;
33353: GO 33410
// result := [ ] ;
33355: LD_ADDR_VAR 0 2
33359: PUSH
33360: EMPTY
33361: ST_TO_ADDR
// for i := array downto 1 do
33362: LD_ADDR_VAR 0 3
33366: PUSH
33367: DOUBLE
33368: LD_VAR 0 1
33372: INC
33373: ST_TO_ADDR
33374: LD_INT 1
33376: PUSH
33377: FOR_DOWNTO
33378: IFFALSE 33408
// result := Join ( result , array [ i ] ) ;
33380: LD_ADDR_VAR 0 2
33384: PUSH
33385: LD_VAR 0 2
33389: PPUSH
33390: LD_VAR 0 1
33394: PUSH
33395: LD_VAR 0 3
33399: ARRAY
33400: PPUSH
33401: CALL 38262 0 2
33405: ST_TO_ADDR
33406: GO 33377
33408: POP
33409: POP
// end ;
33410: LD_VAR 0 2
33414: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33415: LD_INT 0
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
33421: PPUSH
33422: PPUSH
// if not unit or not hexes then
33423: LD_VAR 0 1
33427: NOT
33428: IFTRUE 33437
33430: PUSH
33431: LD_VAR 0 2
33435: NOT
33436: OR
33437: IFFALSE 33441
// exit ;
33439: GO 33564
// dist := 9999 ;
33441: LD_ADDR_VAR 0 5
33445: PUSH
33446: LD_INT 9999
33448: ST_TO_ADDR
// for i = 1 to hexes do
33449: LD_ADDR_VAR 0 4
33453: PUSH
33454: DOUBLE
33455: LD_INT 1
33457: DEC
33458: ST_TO_ADDR
33459: LD_VAR 0 2
33463: PUSH
33464: FOR_TO
33465: IFFALSE 33552
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33467: LD_ADDR_VAR 0 6
33471: PUSH
33472: LD_VAR 0 1
33476: PPUSH
33477: LD_VAR 0 2
33481: PUSH
33482: LD_VAR 0 4
33486: ARRAY
33487: PUSH
33488: LD_INT 1
33490: ARRAY
33491: PPUSH
33492: LD_VAR 0 2
33496: PUSH
33497: LD_VAR 0 4
33501: ARRAY
33502: PUSH
33503: LD_INT 2
33505: ARRAY
33506: PPUSH
33507: CALL_OW 297
33511: ST_TO_ADDR
// if tdist < dist then
33512: LD_VAR 0 6
33516: PUSH
33517: LD_VAR 0 5
33521: LESS
33522: IFFALSE 33550
// begin hex := hexes [ i ] ;
33524: LD_ADDR_VAR 0 8
33528: PUSH
33529: LD_VAR 0 2
33533: PUSH
33534: LD_VAR 0 4
33538: ARRAY
33539: ST_TO_ADDR
// dist := tdist ;
33540: LD_ADDR_VAR 0 5
33544: PUSH
33545: LD_VAR 0 6
33549: ST_TO_ADDR
// end ; end ;
33550: GO 33464
33552: POP
33553: POP
// result := hex ;
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_VAR 0 8
33563: ST_TO_ADDR
// end ;
33564: LD_VAR 0 3
33568: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33569: LD_INT 0
33571: PPUSH
33572: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33573: LD_VAR 0 1
33577: NOT
33578: IFTRUE 33617
33580: PUSH
33581: LD_VAR 0 1
33585: PUSH
33586: LD_INT 21
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 23
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PPUSH
33610: CALL_OW 69
33614: IN
33615: NOT
33616: OR
33617: IFFALSE 33621
// exit ;
33619: GO 33668
// for i = 1 to 3 do
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: DOUBLE
33627: LD_INT 1
33629: DEC
33630: ST_TO_ADDR
33631: LD_INT 3
33633: PUSH
33634: FOR_TO
33635: IFFALSE 33666
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33637: LD_VAR 0 1
33641: PPUSH
33642: CALL_OW 250
33646: PPUSH
33647: LD_VAR 0 1
33651: PPUSH
33652: CALL_OW 251
33656: PPUSH
33657: LD_INT 1
33659: PPUSH
33660: CALL_OW 453
33664: GO 33634
33666: POP
33667: POP
// end ;
33668: LD_VAR 0 2
33672: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33673: LD_INT 0
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
// if not unit or not enemy_unit then
33681: LD_VAR 0 1
33685: NOT
33686: IFTRUE 33695
33688: PUSH
33689: LD_VAR 0 2
33693: NOT
33694: OR
33695: IFFALSE 33699
// exit ;
33697: GO 34180
// if GetLives ( i ) < 250 then
33699: LD_VAR 0 4
33703: PPUSH
33704: CALL_OW 256
33708: PUSH
33709: LD_INT 250
33711: LESS
33712: IFFALSE 33725
// begin ComAutodestruct ( i ) ;
33714: LD_VAR 0 4
33718: PPUSH
33719: CALL 33569 0 1
// exit ;
33723: GO 34180
// end ; x := GetX ( enemy_unit ) ;
33725: LD_ADDR_VAR 0 7
33729: PUSH
33730: LD_VAR 0 2
33734: PPUSH
33735: CALL_OW 250
33739: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33740: LD_ADDR_VAR 0 8
33744: PUSH
33745: LD_VAR 0 2
33749: PPUSH
33750: CALL_OW 251
33754: ST_TO_ADDR
// if not x or not y then
33755: LD_VAR 0 7
33759: NOT
33760: IFTRUE 33769
33762: PUSH
33763: LD_VAR 0 8
33767: NOT
33768: OR
33769: IFFALSE 33773
// exit ;
33771: GO 34180
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33773: LD_ADDR_VAR 0 6
33777: PUSH
33778: LD_VAR 0 7
33782: PPUSH
33783: LD_INT 0
33785: PPUSH
33786: LD_INT 4
33788: PPUSH
33789: CALL_OW 272
33793: PUSH
33794: LD_VAR 0 8
33798: PPUSH
33799: LD_INT 0
33801: PPUSH
33802: LD_INT 4
33804: PPUSH
33805: CALL_OW 273
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_VAR 0 7
33818: PPUSH
33819: LD_INT 1
33821: PPUSH
33822: LD_INT 4
33824: PPUSH
33825: CALL_OW 272
33829: PUSH
33830: LD_VAR 0 8
33834: PPUSH
33835: LD_INT 1
33837: PPUSH
33838: LD_INT 4
33840: PPUSH
33841: CALL_OW 273
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_VAR 0 7
33854: PPUSH
33855: LD_INT 2
33857: PPUSH
33858: LD_INT 4
33860: PPUSH
33861: CALL_OW 272
33865: PUSH
33866: LD_VAR 0 8
33870: PPUSH
33871: LD_INT 2
33873: PPUSH
33874: LD_INT 4
33876: PPUSH
33877: CALL_OW 273
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_VAR 0 7
33890: PPUSH
33891: LD_INT 3
33893: PPUSH
33894: LD_INT 4
33896: PPUSH
33897: CALL_OW 272
33901: PUSH
33902: LD_VAR 0 8
33906: PPUSH
33907: LD_INT 3
33909: PPUSH
33910: LD_INT 4
33912: PPUSH
33913: CALL_OW 273
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_VAR 0 7
33926: PPUSH
33927: LD_INT 4
33929: PPUSH
33930: LD_INT 4
33932: PPUSH
33933: CALL_OW 272
33937: PUSH
33938: LD_VAR 0 8
33942: PPUSH
33943: LD_INT 4
33945: PPUSH
33946: LD_INT 4
33948: PPUSH
33949: CALL_OW 273
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_VAR 0 7
33962: PPUSH
33963: LD_INT 5
33965: PPUSH
33966: LD_INT 4
33968: PPUSH
33969: CALL_OW 272
33973: PUSH
33974: LD_VAR 0 8
33978: PPUSH
33979: LD_INT 5
33981: PPUSH
33982: LD_INT 4
33984: PPUSH
33985: CALL_OW 273
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: ST_TO_ADDR
// for i = tmp downto 1 do
34002: LD_ADDR_VAR 0 4
34006: PUSH
34007: DOUBLE
34008: LD_VAR 0 6
34012: INC
34013: ST_TO_ADDR
34014: LD_INT 1
34016: PUSH
34017: FOR_DOWNTO
34018: IFFALSE 34121
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34020: LD_VAR 0 6
34024: PUSH
34025: LD_VAR 0 4
34029: ARRAY
34030: PUSH
34031: LD_INT 1
34033: ARRAY
34034: PPUSH
34035: LD_VAR 0 6
34039: PUSH
34040: LD_VAR 0 4
34044: ARRAY
34045: PUSH
34046: LD_INT 2
34048: ARRAY
34049: PPUSH
34050: CALL_OW 488
34054: NOT
34055: IFTRUE 34097
34057: PUSH
34058: LD_VAR 0 6
34062: PUSH
34063: LD_VAR 0 4
34067: ARRAY
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: PPUSH
34073: LD_VAR 0 6
34077: PUSH
34078: LD_VAR 0 4
34082: ARRAY
34083: PUSH
34084: LD_INT 2
34086: ARRAY
34087: PPUSH
34088: CALL_OW 428
34092: PUSH
34093: LD_INT 0
34095: NONEQUAL
34096: OR
34097: IFFALSE 34119
// tmp := Delete ( tmp , i ) ;
34099: LD_ADDR_VAR 0 6
34103: PUSH
34104: LD_VAR 0 6
34108: PPUSH
34109: LD_VAR 0 4
34113: PPUSH
34114: CALL_OW 3
34118: ST_TO_ADDR
34119: GO 34017
34121: POP
34122: POP
// j := GetClosestHex ( unit , tmp ) ;
34123: LD_ADDR_VAR 0 5
34127: PUSH
34128: LD_VAR 0 1
34132: PPUSH
34133: LD_VAR 0 6
34137: PPUSH
34138: CALL 33415 0 2
34142: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34143: LD_VAR 0 1
34147: PPUSH
34148: LD_VAR 0 5
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: PPUSH
34157: LD_VAR 0 5
34161: PUSH
34162: LD_INT 2
34164: ARRAY
34165: PPUSH
34166: CALL_OW 111
// result := j ;
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_VAR 0 5
34179: ST_TO_ADDR
// end ;
34180: LD_VAR 0 3
34184: RET
// export function PrepareApemanSoldier ( ) ; begin
34185: LD_INT 0
34187: PPUSH
// uc_nation := 0 ;
34188: LD_ADDR_OWVAR 21
34192: PUSH
34193: LD_INT 0
34195: ST_TO_ADDR
// hc_sex := sex_male ;
34196: LD_ADDR_OWVAR 27
34200: PUSH
34201: LD_INT 1
34203: ST_TO_ADDR
// hc_name :=  ;
34204: LD_ADDR_OWVAR 26
34208: PUSH
34209: LD_STRING 
34211: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34212: LD_ADDR_OWVAR 28
34216: PUSH
34217: LD_INT 15
34219: ST_TO_ADDR
// hc_gallery :=  ;
34220: LD_ADDR_OWVAR 33
34224: PUSH
34225: LD_STRING 
34227: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34228: LD_ADDR_OWVAR 31
34232: PUSH
34233: LD_INT 0
34235: PPUSH
34236: LD_INT 3
34238: PPUSH
34239: CALL_OW 12
34243: PUSH
34244: LD_INT 0
34246: PPUSH
34247: LD_INT 3
34249: PPUSH
34250: CALL_OW 12
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34267: LD_ADDR_OWVAR 29
34271: PUSH
34272: LD_INT 10
34274: PUSH
34275: LD_INT 12
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: ST_TO_ADDR
// end ;
34282: LD_VAR 0 1
34286: RET
// export function PrepareApemanEngineer ( ) ; begin
34287: LD_INT 0
34289: PPUSH
// uc_nation := 0 ;
34290: LD_ADDR_OWVAR 21
34294: PUSH
34295: LD_INT 0
34297: ST_TO_ADDR
// hc_sex := sex_male ;
34298: LD_ADDR_OWVAR 27
34302: PUSH
34303: LD_INT 1
34305: ST_TO_ADDR
// hc_name :=  ;
34306: LD_ADDR_OWVAR 26
34310: PUSH
34311: LD_STRING 
34313: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34314: LD_ADDR_OWVAR 28
34318: PUSH
34319: LD_INT 16
34321: ST_TO_ADDR
// hc_gallery :=  ;
34322: LD_ADDR_OWVAR 33
34326: PUSH
34327: LD_STRING 
34329: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34330: LD_ADDR_OWVAR 31
34334: PUSH
34335: LD_INT 0
34337: PPUSH
34338: LD_INT 3
34340: PPUSH
34341: CALL_OW 12
34345: PUSH
34346: LD_INT 0
34348: PPUSH
34349: LD_INT 3
34351: PPUSH
34352: CALL_OW 12
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34369: LD_ADDR_OWVAR 29
34373: PUSH
34374: LD_INT 10
34376: PUSH
34377: LD_INT 12
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: ST_TO_ADDR
// end ;
34384: LD_VAR 0 1
34388: RET
// export function PrepareApeman ( agressivity ) ; begin
34389: LD_INT 0
34391: PPUSH
// uc_side := 0 ;
34392: LD_ADDR_OWVAR 20
34396: PUSH
34397: LD_INT 0
34399: ST_TO_ADDR
// uc_nation := 0 ;
34400: LD_ADDR_OWVAR 21
34404: PUSH
34405: LD_INT 0
34407: ST_TO_ADDR
// hc_sex := sex_male ;
34408: LD_ADDR_OWVAR 27
34412: PUSH
34413: LD_INT 1
34415: ST_TO_ADDR
// hc_class := class_apeman ;
34416: LD_ADDR_OWVAR 28
34420: PUSH
34421: LD_INT 12
34423: ST_TO_ADDR
// hc_gallery :=  ;
34424: LD_ADDR_OWVAR 33
34428: PUSH
34429: LD_STRING 
34431: ST_TO_ADDR
// hc_name :=  ;
34432: LD_ADDR_OWVAR 26
34436: PUSH
34437: LD_STRING 
34439: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
34440: LD_ADDR_OWVAR 29
34444: PUSH
34445: LD_INT 10
34447: PUSH
34448: LD_INT 12
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: ST_TO_ADDR
// if agressivity = 0 then
34455: LD_VAR 0 1
34459: PUSH
34460: LD_INT 0
34462: EQUAL
34463: IFFALSE 34475
// hc_agressivity := 0 else
34465: LD_ADDR_OWVAR 35
34469: PUSH
34470: LD_INT 0
34472: ST_TO_ADDR
34473: GO 34496
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34475: LD_ADDR_OWVAR 35
34479: PUSH
34480: LD_VAR 0 1
34484: NEG
34485: PPUSH
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 12
34495: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34496: LD_ADDR_OWVAR 31
34500: PUSH
34501: LD_INT 0
34503: PPUSH
34504: LD_INT 3
34506: PPUSH
34507: CALL_OW 12
34511: PUSH
34512: LD_INT 0
34514: PPUSH
34515: LD_INT 3
34517: PPUSH
34518: CALL_OW 12
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: ST_TO_ADDR
// end ;
34535: LD_VAR 0 2
34539: RET
// export function PrepareTiger ( agressivity ) ; begin
34540: LD_INT 0
34542: PPUSH
// uc_side := 0 ;
34543: LD_ADDR_OWVAR 20
34547: PUSH
34548: LD_INT 0
34550: ST_TO_ADDR
// uc_nation := 0 ;
34551: LD_ADDR_OWVAR 21
34555: PUSH
34556: LD_INT 0
34558: ST_TO_ADDR
// InitHc ;
34559: CALL_OW 19
// hc_class := class_tiger ;
34563: LD_ADDR_OWVAR 28
34567: PUSH
34568: LD_INT 14
34570: ST_TO_ADDR
// hc_gallery :=  ;
34571: LD_ADDR_OWVAR 33
34575: PUSH
34576: LD_STRING 
34578: ST_TO_ADDR
// hc_name :=  ;
34579: LD_ADDR_OWVAR 26
34583: PUSH
34584: LD_STRING 
34586: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34587: LD_ADDR_OWVAR 35
34591: PUSH
34592: LD_VAR 0 1
34596: NEG
34597: PPUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 12
34607: ST_TO_ADDR
// end ;
34608: LD_VAR 0 2
34612: RET
// export function PrepareEnchidna ( ) ; begin
34613: LD_INT 0
34615: PPUSH
// uc_side := 0 ;
34616: LD_ADDR_OWVAR 20
34620: PUSH
34621: LD_INT 0
34623: ST_TO_ADDR
// uc_nation := 0 ;
34624: LD_ADDR_OWVAR 21
34628: PUSH
34629: LD_INT 0
34631: ST_TO_ADDR
// InitHc ;
34632: CALL_OW 19
// hc_class := class_baggie ;
34636: LD_ADDR_OWVAR 28
34640: PUSH
34641: LD_INT 13
34643: ST_TO_ADDR
// hc_gallery :=  ;
34644: LD_ADDR_OWVAR 33
34648: PUSH
34649: LD_STRING 
34651: ST_TO_ADDR
// hc_name :=  ;
34652: LD_ADDR_OWVAR 26
34656: PUSH
34657: LD_STRING 
34659: ST_TO_ADDR
// end ;
34660: LD_VAR 0 1
34664: RET
// export function PrepareFrog ( ) ; begin
34665: LD_INT 0
34667: PPUSH
// uc_side := 0 ;
34668: LD_ADDR_OWVAR 20
34672: PUSH
34673: LD_INT 0
34675: ST_TO_ADDR
// uc_nation := 0 ;
34676: LD_ADDR_OWVAR 21
34680: PUSH
34681: LD_INT 0
34683: ST_TO_ADDR
// InitHc ;
34684: CALL_OW 19
// hc_class := class_frog ;
34688: LD_ADDR_OWVAR 28
34692: PUSH
34693: LD_INT 19
34695: ST_TO_ADDR
// hc_gallery :=  ;
34696: LD_ADDR_OWVAR 33
34700: PUSH
34701: LD_STRING 
34703: ST_TO_ADDR
// hc_name :=  ;
34704: LD_ADDR_OWVAR 26
34708: PUSH
34709: LD_STRING 
34711: ST_TO_ADDR
// end ;
34712: LD_VAR 0 1
34716: RET
// export function PrepareFish ( ) ; begin
34717: LD_INT 0
34719: PPUSH
// uc_side := 0 ;
34720: LD_ADDR_OWVAR 20
34724: PUSH
34725: LD_INT 0
34727: ST_TO_ADDR
// uc_nation := 0 ;
34728: LD_ADDR_OWVAR 21
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
// InitHc ;
34736: CALL_OW 19
// hc_class := class_fish ;
34740: LD_ADDR_OWVAR 28
34744: PUSH
34745: LD_INT 20
34747: ST_TO_ADDR
// hc_gallery :=  ;
34748: LD_ADDR_OWVAR 33
34752: PUSH
34753: LD_STRING 
34755: ST_TO_ADDR
// hc_name :=  ;
34756: LD_ADDR_OWVAR 26
34760: PUSH
34761: LD_STRING 
34763: ST_TO_ADDR
// end ;
34764: LD_VAR 0 1
34768: RET
// export function PrepareBird ( ) ; begin
34769: LD_INT 0
34771: PPUSH
// uc_side := 0 ;
34772: LD_ADDR_OWVAR 20
34776: PUSH
34777: LD_INT 0
34779: ST_TO_ADDR
// uc_nation := 0 ;
34780: LD_ADDR_OWVAR 21
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// InitHc ;
34788: CALL_OW 19
// hc_class := class_phororhacos ;
34792: LD_ADDR_OWVAR 28
34796: PUSH
34797: LD_INT 18
34799: ST_TO_ADDR
// hc_gallery :=  ;
34800: LD_ADDR_OWVAR 33
34804: PUSH
34805: LD_STRING 
34807: ST_TO_ADDR
// hc_name :=  ;
34808: LD_ADDR_OWVAR 26
34812: PUSH
34813: LD_STRING 
34815: ST_TO_ADDR
// end ;
34816: LD_VAR 0 1
34820: RET
// export function PrepareHorse ( ) ; begin
34821: LD_INT 0
34823: PPUSH
// uc_side := 0 ;
34824: LD_ADDR_OWVAR 20
34828: PUSH
34829: LD_INT 0
34831: ST_TO_ADDR
// uc_nation := 0 ;
34832: LD_ADDR_OWVAR 21
34836: PUSH
34837: LD_INT 0
34839: ST_TO_ADDR
// InitHc ;
34840: CALL_OW 19
// hc_class := class_horse ;
34844: LD_ADDR_OWVAR 28
34848: PUSH
34849: LD_INT 21
34851: ST_TO_ADDR
// hc_gallery :=  ;
34852: LD_ADDR_OWVAR 33
34856: PUSH
34857: LD_STRING 
34859: ST_TO_ADDR
// hc_name :=  ;
34860: LD_ADDR_OWVAR 26
34864: PUSH
34865: LD_STRING 
34867: ST_TO_ADDR
// end ;
34868: LD_VAR 0 1
34872: RET
// export function PrepareMastodont ( ) ; begin
34873: LD_INT 0
34875: PPUSH
// uc_side := 0 ;
34876: LD_ADDR_OWVAR 20
34880: PUSH
34881: LD_INT 0
34883: ST_TO_ADDR
// uc_nation := 0 ;
34884: LD_ADDR_OWVAR 21
34888: PUSH
34889: LD_INT 0
34891: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34892: LD_ADDR_OWVAR 37
34896: PUSH
34897: LD_INT 31
34899: ST_TO_ADDR
// vc_control := control_rider ;
34900: LD_ADDR_OWVAR 38
34904: PUSH
34905: LD_INT 4
34907: ST_TO_ADDR
// end ;
34908: LD_VAR 0 1
34912: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34913: LD_INT 0
34915: PPUSH
34916: PPUSH
34917: PPUSH
// uc_side = 0 ;
34918: LD_ADDR_OWVAR 20
34922: PUSH
34923: LD_INT 0
34925: ST_TO_ADDR
// uc_nation = 0 ;
34926: LD_ADDR_OWVAR 21
34930: PUSH
34931: LD_INT 0
34933: ST_TO_ADDR
// InitHc_All ( ) ;
34934: CALL_OW 584
// InitVc ;
34938: CALL_OW 20
// if mastodonts then
34942: LD_VAR 0 6
34946: IFFALSE 35013
// for i = 1 to mastodonts do
34948: LD_ADDR_VAR 0 11
34952: PUSH
34953: DOUBLE
34954: LD_INT 1
34956: DEC
34957: ST_TO_ADDR
34958: LD_VAR 0 6
34962: PUSH
34963: FOR_TO
34964: IFFALSE 35011
// begin vc_chassis := 31 ;
34966: LD_ADDR_OWVAR 37
34970: PUSH
34971: LD_INT 31
34973: ST_TO_ADDR
// vc_control := control_rider ;
34974: LD_ADDR_OWVAR 38
34978: PUSH
34979: LD_INT 4
34981: ST_TO_ADDR
// animal := CreateVehicle ;
34982: LD_ADDR_VAR 0 12
34986: PUSH
34987: CALL_OW 45
34991: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34992: LD_VAR 0 12
34996: PPUSH
34997: LD_VAR 0 8
35001: PPUSH
35002: LD_INT 0
35004: PPUSH
35005: CALL 37155 0 3
// end ;
35009: GO 34963
35011: POP
35012: POP
// if horses then
35013: LD_VAR 0 5
35017: IFFALSE 35084
// for i = 1 to horses do
35019: LD_ADDR_VAR 0 11
35023: PUSH
35024: DOUBLE
35025: LD_INT 1
35027: DEC
35028: ST_TO_ADDR
35029: LD_VAR 0 5
35033: PUSH
35034: FOR_TO
35035: IFFALSE 35082
// begin hc_class := 21 ;
35037: LD_ADDR_OWVAR 28
35041: PUSH
35042: LD_INT 21
35044: ST_TO_ADDR
// hc_gallery :=  ;
35045: LD_ADDR_OWVAR 33
35049: PUSH
35050: LD_STRING 
35052: ST_TO_ADDR
// animal := CreateHuman ;
35053: LD_ADDR_VAR 0 12
35057: PUSH
35058: CALL_OW 44
35062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35063: LD_VAR 0 12
35067: PPUSH
35068: LD_VAR 0 8
35072: PPUSH
35073: LD_INT 0
35075: PPUSH
35076: CALL 37155 0 3
// end ;
35080: GO 35034
35082: POP
35083: POP
// if birds then
35084: LD_VAR 0 1
35088: IFFALSE 35155
// for i = 1 to birds do
35090: LD_ADDR_VAR 0 11
35094: PUSH
35095: DOUBLE
35096: LD_INT 1
35098: DEC
35099: ST_TO_ADDR
35100: LD_VAR 0 1
35104: PUSH
35105: FOR_TO
35106: IFFALSE 35153
// begin hc_class := 18 ;
35108: LD_ADDR_OWVAR 28
35112: PUSH
35113: LD_INT 18
35115: ST_TO_ADDR
// hc_gallery =  ;
35116: LD_ADDR_OWVAR 33
35120: PUSH
35121: LD_STRING 
35123: ST_TO_ADDR
// animal := CreateHuman ;
35124: LD_ADDR_VAR 0 12
35128: PUSH
35129: CALL_OW 44
35133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35134: LD_VAR 0 12
35138: PPUSH
35139: LD_VAR 0 8
35143: PPUSH
35144: LD_INT 0
35146: PPUSH
35147: CALL 37155 0 3
// end ;
35151: GO 35105
35153: POP
35154: POP
// if tigers then
35155: LD_VAR 0 2
35159: IFFALSE 35243
// for i = 1 to tigers do
35161: LD_ADDR_VAR 0 11
35165: PUSH
35166: DOUBLE
35167: LD_INT 1
35169: DEC
35170: ST_TO_ADDR
35171: LD_VAR 0 2
35175: PUSH
35176: FOR_TO
35177: IFFALSE 35241
// begin hc_class = class_tiger ;
35179: LD_ADDR_OWVAR 28
35183: PUSH
35184: LD_INT 14
35186: ST_TO_ADDR
// hc_gallery =  ;
35187: LD_ADDR_OWVAR 33
35191: PUSH
35192: LD_STRING 
35194: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35195: LD_ADDR_OWVAR 35
35199: PUSH
35200: LD_INT 7
35202: NEG
35203: PPUSH
35204: LD_INT 7
35206: PPUSH
35207: CALL_OW 12
35211: ST_TO_ADDR
// animal := CreateHuman ;
35212: LD_ADDR_VAR 0 12
35216: PUSH
35217: CALL_OW 44
35221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35222: LD_VAR 0 12
35226: PPUSH
35227: LD_VAR 0 8
35231: PPUSH
35232: LD_INT 0
35234: PPUSH
35235: CALL 37155 0 3
// end ;
35239: GO 35176
35241: POP
35242: POP
// if apemans then
35243: LD_VAR 0 3
35247: IFFALSE 35370
// for i = 1 to apemans do
35249: LD_ADDR_VAR 0 11
35253: PUSH
35254: DOUBLE
35255: LD_INT 1
35257: DEC
35258: ST_TO_ADDR
35259: LD_VAR 0 3
35263: PUSH
35264: FOR_TO
35265: IFFALSE 35368
// begin hc_class = class_apeman ;
35267: LD_ADDR_OWVAR 28
35271: PUSH
35272: LD_INT 12
35274: ST_TO_ADDR
// hc_gallery =  ;
35275: LD_ADDR_OWVAR 33
35279: PUSH
35280: LD_STRING 
35282: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35283: LD_ADDR_OWVAR 35
35287: PUSH
35288: LD_INT 2
35290: NEG
35291: PPUSH
35292: LD_INT 2
35294: PPUSH
35295: CALL_OW 12
35299: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35300: LD_ADDR_OWVAR 31
35304: PUSH
35305: LD_INT 1
35307: PPUSH
35308: LD_INT 3
35310: PPUSH
35311: CALL_OW 12
35315: PUSH
35316: LD_INT 1
35318: PPUSH
35319: LD_INT 3
35321: PPUSH
35322: CALL_OW 12
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: ST_TO_ADDR
// animal := CreateHuman ;
35339: LD_ADDR_VAR 0 12
35343: PUSH
35344: CALL_OW 44
35348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35349: LD_VAR 0 12
35353: PPUSH
35354: LD_VAR 0 8
35358: PPUSH
35359: LD_INT 0
35361: PPUSH
35362: CALL 37155 0 3
// end ;
35366: GO 35264
35368: POP
35369: POP
// if enchidnas then
35370: LD_VAR 0 4
35374: IFFALSE 35441
// for i = 1 to enchidnas do
35376: LD_ADDR_VAR 0 11
35380: PUSH
35381: DOUBLE
35382: LD_INT 1
35384: DEC
35385: ST_TO_ADDR
35386: LD_VAR 0 4
35390: PUSH
35391: FOR_TO
35392: IFFALSE 35439
// begin hc_class = 13 ;
35394: LD_ADDR_OWVAR 28
35398: PUSH
35399: LD_INT 13
35401: ST_TO_ADDR
// hc_gallery =  ;
35402: LD_ADDR_OWVAR 33
35406: PUSH
35407: LD_STRING 
35409: ST_TO_ADDR
// animal := CreateHuman ;
35410: LD_ADDR_VAR 0 12
35414: PUSH
35415: CALL_OW 44
35419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35420: LD_VAR 0 12
35424: PPUSH
35425: LD_VAR 0 8
35429: PPUSH
35430: LD_INT 0
35432: PPUSH
35433: CALL 37155 0 3
// end ;
35437: GO 35391
35439: POP
35440: POP
// if fishes then
35441: LD_VAR 0 7
35445: IFFALSE 35512
// for i = 1 to fishes do
35447: LD_ADDR_VAR 0 11
35451: PUSH
35452: DOUBLE
35453: LD_INT 1
35455: DEC
35456: ST_TO_ADDR
35457: LD_VAR 0 7
35461: PUSH
35462: FOR_TO
35463: IFFALSE 35510
// begin hc_class = 20 ;
35465: LD_ADDR_OWVAR 28
35469: PUSH
35470: LD_INT 20
35472: ST_TO_ADDR
// hc_gallery =  ;
35473: LD_ADDR_OWVAR 33
35477: PUSH
35478: LD_STRING 
35480: ST_TO_ADDR
// animal := CreateHuman ;
35481: LD_ADDR_VAR 0 12
35485: PUSH
35486: CALL_OW 44
35490: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35491: LD_VAR 0 12
35495: PPUSH
35496: LD_VAR 0 9
35500: PPUSH
35501: LD_INT 0
35503: PPUSH
35504: CALL 37155 0 3
// end ;
35508: GO 35462
35510: POP
35511: POP
// end ;
35512: LD_VAR 0 10
35516: RET
// export function WantHeal ( sci , unit ) ; begin
35517: LD_INT 0
35519: PPUSH
// if GetTaskList ( sci ) > 0 then
35520: LD_VAR 0 1
35524: PPUSH
35525: CALL_OW 437
35529: PUSH
35530: LD_INT 0
35532: GREATER
35533: IFFALSE 35605
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35535: LD_VAR 0 1
35539: PPUSH
35540: CALL_OW 437
35544: PUSH
35545: LD_INT 1
35547: ARRAY
35548: PUSH
35549: LD_INT 1
35551: ARRAY
35552: PUSH
35553: LD_STRING l
35555: EQUAL
35556: IFFALSE 35583
35558: PUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL_OW 437
35568: PUSH
35569: LD_INT 1
35571: ARRAY
35572: PUSH
35573: LD_INT 4
35575: ARRAY
35576: PUSH
35577: LD_VAR 0 2
35581: EQUAL
35582: AND
35583: IFFALSE 35595
// result := true else
35585: LD_ADDR_VAR 0 3
35589: PUSH
35590: LD_INT 1
35592: ST_TO_ADDR
35593: GO 35603
// result := false ;
35595: LD_ADDR_VAR 0 3
35599: PUSH
35600: LD_INT 0
35602: ST_TO_ADDR
// end else
35603: GO 35613
// result := false ;
35605: LD_ADDR_VAR 0 3
35609: PUSH
35610: LD_INT 0
35612: ST_TO_ADDR
// end ;
35613: LD_VAR 0 3
35617: RET
// export function HealTarget ( sci ) ; begin
35618: LD_INT 0
35620: PPUSH
// if not sci then
35621: LD_VAR 0 1
35625: NOT
35626: IFFALSE 35630
// exit ;
35628: GO 35695
// result := 0 ;
35630: LD_ADDR_VAR 0 2
35634: PUSH
35635: LD_INT 0
35637: ST_TO_ADDR
// if GetTaskList ( sci ) then
35638: LD_VAR 0 1
35642: PPUSH
35643: CALL_OW 437
35647: IFFALSE 35695
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35649: LD_VAR 0 1
35653: PPUSH
35654: CALL_OW 437
35658: PUSH
35659: LD_INT 1
35661: ARRAY
35662: PUSH
35663: LD_INT 1
35665: ARRAY
35666: PUSH
35667: LD_STRING l
35669: EQUAL
35670: IFFALSE 35695
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35672: LD_ADDR_VAR 0 2
35676: PUSH
35677: LD_VAR 0 1
35681: PPUSH
35682: CALL_OW 437
35686: PUSH
35687: LD_INT 1
35689: ARRAY
35690: PUSH
35691: LD_INT 4
35693: ARRAY
35694: ST_TO_ADDR
// end ;
35695: LD_VAR 0 2
35699: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
35704: PPUSH
35705: PPUSH
// if not base_units then
35706: LD_VAR 0 1
35710: NOT
35711: IFFALSE 35715
// exit ;
35713: GO 35802
// result := false ;
35715: LD_ADDR_VAR 0 2
35719: PUSH
35720: LD_INT 0
35722: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35723: LD_ADDR_VAR 0 5
35727: PUSH
35728: LD_VAR 0 1
35732: PPUSH
35733: LD_INT 21
35735: PUSH
35736: LD_INT 3
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PPUSH
35743: CALL_OW 72
35747: ST_TO_ADDR
// if not tmp then
35748: LD_VAR 0 5
35752: NOT
35753: IFFALSE 35757
// exit ;
35755: GO 35802
// for i in tmp do
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_VAR 0 5
35766: PUSH
35767: FOR_IN
35768: IFFALSE 35800
// begin result := EnemyInRange ( i , 22 ) ;
35770: LD_ADDR_VAR 0 2
35774: PUSH
35775: LD_VAR 0 3
35779: PPUSH
35780: LD_INT 22
35782: PPUSH
35783: CALL 33217 0 2
35787: ST_TO_ADDR
// if result then
35788: LD_VAR 0 2
35792: IFFALSE 35798
// exit ;
35794: POP
35795: POP
35796: GO 35802
// end ;
35798: GO 35767
35800: POP
35801: POP
// end ;
35802: LD_VAR 0 2
35806: RET
// export function FilterByTag ( units , tag ) ; begin
35807: LD_INT 0
35809: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35810: LD_ADDR_VAR 0 3
35814: PUSH
35815: LD_VAR 0 1
35819: PPUSH
35820: LD_INT 120
35822: PUSH
35823: LD_VAR 0 2
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PPUSH
35832: CALL_OW 72
35836: ST_TO_ADDR
// end ;
35837: LD_VAR 0 3
35841: RET
// export function IsDriver ( un ) ; begin
35842: LD_INT 0
35844: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35845: LD_ADDR_VAR 0 2
35849: PUSH
35850: LD_VAR 0 1
35854: PUSH
35855: LD_INT 55
35857: PUSH
35858: EMPTY
35859: LIST
35860: PPUSH
35861: CALL_OW 69
35865: IN
35866: ST_TO_ADDR
// end ;
35867: LD_VAR 0 2
35871: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35872: LD_INT 0
35874: PPUSH
35875: PPUSH
// list := [ ] ;
35876: LD_ADDR_VAR 0 5
35880: PUSH
35881: EMPTY
35882: ST_TO_ADDR
// case d of 0 :
35883: LD_VAR 0 3
35887: PUSH
35888: LD_INT 0
35890: DOUBLE
35891: EQUAL
35892: IFTRUE 35896
35894: GO 36029
35896: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35897: LD_ADDR_VAR 0 5
35901: PUSH
35902: LD_VAR 0 1
35906: PUSH
35907: LD_INT 4
35909: MINUS
35910: PUSH
35911: LD_VAR 0 2
35915: PUSH
35916: LD_INT 4
35918: MINUS
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: LD_VAR 0 1
35932: PUSH
35933: LD_INT 3
35935: MINUS
35936: PUSH
35937: LD_VAR 0 2
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: PUSH
35950: LD_VAR 0 1
35954: PUSH
35955: LD_INT 4
35957: PLUS
35958: PUSH
35959: LD_VAR 0 2
35963: PUSH
35964: LD_INT 4
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: PUSH
35972: LD_VAR 0 1
35976: PUSH
35977: LD_INT 3
35979: PLUS
35980: PUSH
35981: LD_VAR 0 2
35985: PUSH
35986: LD_INT 3
35988: PLUS
35989: PUSH
35990: LD_INT 5
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: PUSH
35998: LD_VAR 0 1
36002: PUSH
36003: LD_VAR 0 2
36007: PUSH
36008: LD_INT 4
36010: PLUS
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: ST_TO_ADDR
// end ; 1 :
36027: GO 36727
36029: LD_INT 1
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36170
36037: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36038: LD_ADDR_VAR 0 5
36042: PUSH
36043: LD_VAR 0 1
36047: PUSH
36048: LD_VAR 0 2
36052: PUSH
36053: LD_INT 4
36055: MINUS
36056: PUSH
36057: LD_INT 3
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PUSH
36065: LD_VAR 0 1
36069: PUSH
36070: LD_INT 3
36072: MINUS
36073: PUSH
36074: LD_VAR 0 2
36078: PUSH
36079: LD_INT 3
36081: MINUS
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: PUSH
36091: LD_VAR 0 1
36095: PUSH
36096: LD_INT 4
36098: MINUS
36099: PUSH
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: PUSH
36113: LD_VAR 0 1
36117: PUSH
36118: LD_VAR 0 2
36122: PUSH
36123: LD_INT 3
36125: PLUS
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: PUSH
36135: LD_VAR 0 1
36139: PUSH
36140: LD_INT 4
36142: PLUS
36143: PUSH
36144: LD_VAR 0 2
36148: PUSH
36149: LD_INT 4
36151: PLUS
36152: PUSH
36153: LD_INT 5
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
// end ; 2 :
36168: GO 36727
36170: LD_INT 2
36172: DOUBLE
36173: EQUAL
36174: IFTRUE 36178
36176: GO 36307
36178: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36179: LD_ADDR_VAR 0 5
36183: PUSH
36184: LD_VAR 0 1
36188: PUSH
36189: LD_VAR 0 2
36193: PUSH
36194: LD_INT 3
36196: MINUS
36197: PUSH
36198: LD_INT 3
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: PUSH
36206: LD_VAR 0 1
36210: PUSH
36211: LD_INT 4
36213: PLUS
36214: PUSH
36215: LD_VAR 0 2
36219: PUSH
36220: LD_INT 4
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: PUSH
36228: LD_VAR 0 1
36232: PUSH
36233: LD_VAR 0 2
36237: PUSH
36238: LD_INT 4
36240: PLUS
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: PUSH
36250: LD_VAR 0 1
36254: PUSH
36255: LD_INT 3
36257: MINUS
36258: PUSH
36259: LD_VAR 0 2
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: PUSH
36272: LD_VAR 0 1
36276: PUSH
36277: LD_INT 4
36279: MINUS
36280: PUSH
36281: LD_VAR 0 2
36285: PUSH
36286: LD_INT 4
36288: MINUS
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: ST_TO_ADDR
// end ; 3 :
36305: GO 36727
36307: LD_INT 3
36309: DOUBLE
36310: EQUAL
36311: IFTRUE 36315
36313: GO 36448
36315: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36316: LD_ADDR_VAR 0 5
36320: PUSH
36321: LD_VAR 0 1
36325: PUSH
36326: LD_INT 3
36328: PLUS
36329: PUSH
36330: LD_VAR 0 2
36334: PUSH
36335: LD_INT 4
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: LIST
36342: PUSH
36343: LD_VAR 0 1
36347: PUSH
36348: LD_INT 4
36350: PLUS
36351: PUSH
36352: LD_VAR 0 2
36356: PUSH
36357: LD_INT 4
36359: PLUS
36360: PUSH
36361: LD_INT 5
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: LD_VAR 0 1
36373: PUSH
36374: LD_INT 4
36376: MINUS
36377: PUSH
36378: LD_VAR 0 2
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: LIST
36390: PUSH
36391: LD_VAR 0 1
36395: PUSH
36396: LD_VAR 0 2
36400: PUSH
36401: LD_INT 4
36403: MINUS
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: LIST
36412: PUSH
36413: LD_VAR 0 1
36417: PUSH
36418: LD_INT 3
36420: MINUS
36421: PUSH
36422: LD_VAR 0 2
36426: PUSH
36427: LD_INT 3
36429: MINUS
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
// end ; 4 :
36446: GO 36727
36448: LD_INT 4
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36589
36456: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36457: LD_ADDR_VAR 0 5
36461: PUSH
36462: LD_VAR 0 1
36466: PUSH
36467: LD_VAR 0 2
36471: PUSH
36472: LD_INT 4
36474: PLUS
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: PUSH
36484: LD_VAR 0 1
36488: PUSH
36489: LD_INT 3
36491: PLUS
36492: PUSH
36493: LD_VAR 0 2
36497: PUSH
36498: LD_INT 3
36500: PLUS
36501: PUSH
36502: LD_INT 5
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: PUSH
36510: LD_VAR 0 1
36514: PUSH
36515: LD_INT 4
36517: PLUS
36518: PUSH
36519: LD_VAR 0 2
36523: PUSH
36524: LD_INT 4
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: PUSH
36532: LD_VAR 0 1
36536: PUSH
36537: LD_VAR 0 2
36541: PUSH
36542: LD_INT 3
36544: MINUS
36545: PUSH
36546: LD_INT 3
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: PUSH
36554: LD_VAR 0 1
36558: PUSH
36559: LD_INT 4
36561: MINUS
36562: PUSH
36563: LD_VAR 0 2
36567: PUSH
36568: LD_INT 4
36570: MINUS
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
// end ; 5 :
36587: GO 36727
36589: LD_INT 5
36591: DOUBLE
36592: EQUAL
36593: IFTRUE 36597
36595: GO 36726
36597: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36598: LD_ADDR_VAR 0 5
36602: PUSH
36603: LD_VAR 0 1
36607: PUSH
36608: LD_INT 4
36610: MINUS
36611: PUSH
36612: LD_VAR 0 2
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: PUSH
36625: LD_VAR 0 1
36629: PUSH
36630: LD_VAR 0 2
36634: PUSH
36635: LD_INT 4
36637: MINUS
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: PUSH
36647: LD_VAR 0 1
36651: PUSH
36652: LD_INT 4
36654: PLUS
36655: PUSH
36656: LD_VAR 0 2
36660: PUSH
36661: LD_INT 4
36663: PLUS
36664: PUSH
36665: LD_INT 5
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: LD_VAR 0 1
36677: PUSH
36678: LD_INT 3
36680: PLUS
36681: PUSH
36682: LD_VAR 0 2
36686: PUSH
36687: LD_INT 4
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: PUSH
36695: LD_VAR 0 1
36699: PUSH
36700: LD_VAR 0 2
36704: PUSH
36705: LD_INT 3
36707: PLUS
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: ST_TO_ADDR
// end ; end ;
36724: GO 36727
36726: POP
// result := list ;
36727: LD_ADDR_VAR 0 4
36731: PUSH
36732: LD_VAR 0 5
36736: ST_TO_ADDR
// end ;
36737: LD_VAR 0 4
36741: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36742: LD_INT 0
36744: PPUSH
36745: PPUSH
36746: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36747: LD_VAR 0 1
36751: NOT
36752: IFTRUE 36780
36754: PUSH
36755: LD_VAR 0 2
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 3
36768: PUSH
36769: LD_INT 4
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: IN
36778: NOT
36779: OR
36780: IFFALSE 36784
// exit ;
36782: GO 36867
// tmp := [ ] ;
36784: LD_ADDR_VAR 0 5
36788: PUSH
36789: EMPTY
36790: ST_TO_ADDR
// for i in units do
36791: LD_ADDR_VAR 0 4
36795: PUSH
36796: LD_VAR 0 1
36800: PUSH
36801: FOR_IN
36802: IFFALSE 36836
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: LD_VAR 0 5
36813: PPUSH
36814: LD_VAR 0 4
36818: PPUSH
36819: LD_VAR 0 2
36823: PPUSH
36824: CALL_OW 259
36828: PPUSH
36829: CALL 38262 0 2
36833: ST_TO_ADDR
36834: GO 36801
36836: POP
36837: POP
// if not tmp then
36838: LD_VAR 0 5
36842: NOT
36843: IFFALSE 36847
// exit ;
36845: GO 36867
// result := SortListByListDesc ( units , tmp ) ;
36847: LD_ADDR_VAR 0 3
36851: PUSH
36852: LD_VAR 0 1
36856: PPUSH
36857: LD_VAR 0 5
36861: PPUSH
36862: CALL_OW 77
36866: ST_TO_ADDR
// end ;
36867: LD_VAR 0 3
36871: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36872: LD_INT 0
36874: PPUSH
36875: PPUSH
36876: PPUSH
// result := false ;
36877: LD_ADDR_VAR 0 3
36881: PUSH
36882: LD_INT 0
36884: ST_TO_ADDR
// if not building then
36885: LD_VAR 0 2
36889: NOT
36890: IFFALSE 36894
// exit ;
36892: GO 37038
// x := GetX ( building ) ;
36894: LD_ADDR_VAR 0 4
36898: PUSH
36899: LD_VAR 0 2
36903: PPUSH
36904: CALL_OW 250
36908: ST_TO_ADDR
// y := GetY ( building ) ;
36909: LD_ADDR_VAR 0 5
36913: PUSH
36914: LD_VAR 0 2
36918: PPUSH
36919: CALL_OW 251
36923: ST_TO_ADDR
// if not x or not y then
36924: LD_VAR 0 4
36928: NOT
36929: IFTRUE 36938
36931: PUSH
36932: LD_VAR 0 5
36936: NOT
36937: OR
36938: IFFALSE 36942
// exit ;
36940: GO 37038
// if GetTaskList ( unit ) then
36942: LD_VAR 0 1
36946: PPUSH
36947: CALL_OW 437
36951: IFFALSE 37038
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36953: LD_STRING e
36955: PUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 437
36965: PUSH
36966: LD_INT 1
36968: ARRAY
36969: PUSH
36970: LD_INT 1
36972: ARRAY
36973: EQUAL
36974: IFFALSE 37001
36976: PUSH
36977: LD_VAR 0 4
36981: PUSH
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 437
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: PUSH
36996: LD_INT 2
36998: ARRAY
36999: EQUAL
37000: AND
37001: IFFALSE 37028
37003: PUSH
37004: LD_VAR 0 5
37008: PUSH
37009: LD_VAR 0 1
37013: PPUSH
37014: CALL_OW 437
37018: PUSH
37019: LD_INT 1
37021: ARRAY
37022: PUSH
37023: LD_INT 3
37025: ARRAY
37026: EQUAL
37027: AND
37028: IFFALSE 37038
// result := true end ;
37030: LD_ADDR_VAR 0 3
37034: PUSH
37035: LD_INT 1
37037: ST_TO_ADDR
// end ;
37038: LD_VAR 0 3
37042: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37043: LD_INT 0
37045: PPUSH
// result := false ;
37046: LD_ADDR_VAR 0 4
37050: PUSH
37051: LD_INT 0
37053: ST_TO_ADDR
// if GetTaskList ( unit ) then
37054: LD_VAR 0 1
37058: PPUSH
37059: CALL_OW 437
37063: IFFALSE 37150
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37065: LD_STRING M
37067: PUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: CALL_OW 437
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: PUSH
37082: LD_INT 1
37084: ARRAY
37085: EQUAL
37086: IFFALSE 37113
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 1
37098: PPUSH
37099: CALL_OW 437
37103: PUSH
37104: LD_INT 1
37106: ARRAY
37107: PUSH
37108: LD_INT 2
37110: ARRAY
37111: EQUAL
37112: AND
37113: IFFALSE 37140
37115: PUSH
37116: LD_VAR 0 3
37120: PUSH
37121: LD_VAR 0 1
37125: PPUSH
37126: CALL_OW 437
37130: PUSH
37131: LD_INT 1
37133: ARRAY
37134: PUSH
37135: LD_INT 3
37137: ARRAY
37138: EQUAL
37139: AND
37140: IFFALSE 37150
// result := true ;
37142: LD_ADDR_VAR 0 4
37146: PUSH
37147: LD_INT 1
37149: ST_TO_ADDR
// end ; end ;
37150: LD_VAR 0 4
37154: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37155: LD_INT 0
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
// if not unit or not area then
37161: LD_VAR 0 1
37165: NOT
37166: IFTRUE 37175
37168: PUSH
37169: LD_VAR 0 2
37173: NOT
37174: OR
37175: IFFALSE 37179
// exit ;
37177: GO 37355
// tmp := AreaToList ( area , i ) ;
37179: LD_ADDR_VAR 0 6
37183: PUSH
37184: LD_VAR 0 2
37188: PPUSH
37189: LD_VAR 0 5
37193: PPUSH
37194: CALL_OW 517
37198: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37199: LD_ADDR_VAR 0 5
37203: PUSH
37204: DOUBLE
37205: LD_INT 1
37207: DEC
37208: ST_TO_ADDR
37209: LD_VAR 0 6
37213: PUSH
37214: LD_INT 1
37216: ARRAY
37217: PUSH
37218: FOR_TO
37219: IFFALSE 37353
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37221: LD_ADDR_VAR 0 7
37225: PUSH
37226: LD_VAR 0 6
37230: PUSH
37231: LD_INT 1
37233: ARRAY
37234: PUSH
37235: LD_VAR 0 5
37239: ARRAY
37240: PUSH
37241: LD_VAR 0 6
37245: PUSH
37246: LD_INT 2
37248: ARRAY
37249: PUSH
37250: LD_VAR 0 5
37254: ARRAY
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37260: LD_INT 92
37262: PUSH
37263: LD_VAR 0 7
37267: PUSH
37268: LD_INT 1
37270: ARRAY
37271: PUSH
37272: LD_VAR 0 7
37276: PUSH
37277: LD_INT 2
37279: ARRAY
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 69
37294: PUSH
37295: LD_INT 0
37297: EQUAL
37298: IFFALSE 37351
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37300: LD_VAR 0 1
37304: PPUSH
37305: LD_VAR 0 7
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: PPUSH
37314: LD_VAR 0 7
37318: PUSH
37319: LD_INT 2
37321: ARRAY
37322: PPUSH
37323: LD_VAR 0 3
37327: PPUSH
37328: CALL_OW 48
// result := IsPlaced ( unit ) ;
37332: LD_ADDR_VAR 0 4
37336: PUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 305
37346: ST_TO_ADDR
// exit ;
37347: POP
37348: POP
37349: GO 37355
// end ; end ;
37351: GO 37218
37353: POP
37354: POP
// end ;
37355: LD_VAR 0 4
37359: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37360: LD_INT 0
37362: PPUSH
37363: PPUSH
37364: PPUSH
// if not side or side > 8 then
37365: LD_VAR 0 1
37369: NOT
37370: IFTRUE 37382
37372: PUSH
37373: LD_VAR 0 1
37377: PUSH
37378: LD_INT 8
37380: GREATER
37381: OR
37382: IFFALSE 37386
// exit ;
37384: GO 37573
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37386: LD_ADDR_VAR 0 4
37390: PUSH
37391: LD_INT 22
37393: PUSH
37394: LD_VAR 0 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 21
37405: PUSH
37406: LD_INT 3
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PPUSH
37417: CALL_OW 69
37421: ST_TO_ADDR
// if not tmp then
37422: LD_VAR 0 4
37426: NOT
37427: IFFALSE 37431
// exit ;
37429: GO 37573
// enable_addtolog := true ;
37431: LD_ADDR_OWVAR 81
37435: PUSH
37436: LD_INT 1
37438: ST_TO_ADDR
// AddToLog ( [ ) ;
37439: LD_STRING [
37441: PPUSH
37442: CALL_OW 561
// for i in tmp do
37446: LD_ADDR_VAR 0 3
37450: PUSH
37451: LD_VAR 0 4
37455: PUSH
37456: FOR_IN
37457: IFFALSE 37564
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37459: LD_STRING [
37461: PUSH
37462: LD_VAR 0 3
37466: PPUSH
37467: CALL_OW 266
37471: STR
37472: PUSH
37473: LD_STRING , 
37475: STR
37476: PUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 250
37486: STR
37487: PUSH
37488: LD_STRING , 
37490: STR
37491: PUSH
37492: LD_VAR 0 3
37496: PPUSH
37497: CALL_OW 251
37501: STR
37502: PUSH
37503: LD_STRING , 
37505: STR
37506: PUSH
37507: LD_VAR 0 3
37511: PPUSH
37512: CALL_OW 254
37516: STR
37517: PUSH
37518: LD_STRING , 
37520: STR
37521: PUSH
37522: LD_VAR 0 3
37526: PPUSH
37527: LD_INT 1
37529: PPUSH
37530: CALL_OW 268
37534: STR
37535: PUSH
37536: LD_STRING , 
37538: STR
37539: PUSH
37540: LD_VAR 0 3
37544: PPUSH
37545: LD_INT 2
37547: PPUSH
37548: CALL_OW 268
37552: STR
37553: PUSH
37554: LD_STRING ],
37556: STR
37557: PPUSH
37558: CALL_OW 561
// end ;
37562: GO 37456
37564: POP
37565: POP
// AddToLog ( ]; ) ;
37566: LD_STRING ];
37568: PPUSH
37569: CALL_OW 561
// end ;
37573: LD_VAR 0 2
37577: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37578: LD_INT 0
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
// if not area or not rate or not max then
37585: LD_VAR 0 1
37589: NOT
37590: IFTRUE 37599
37592: PUSH
37593: LD_VAR 0 2
37597: NOT
37598: OR
37599: IFTRUE 37608
37601: PUSH
37602: LD_VAR 0 4
37606: NOT
37607: OR
37608: IFFALSE 37612
// exit ;
37610: GO 37801
// while 1 do
37612: LD_INT 1
37614: IFFALSE 37801
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37616: LD_ADDR_VAR 0 9
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_INT 1
37628: PPUSH
37629: CALL_OW 287
37633: PUSH
37634: LD_INT 10
37636: MUL
37637: ST_TO_ADDR
// r := rate / 10 ;
37638: LD_ADDR_VAR 0 7
37642: PUSH
37643: LD_VAR 0 2
37647: PUSH
37648: LD_INT 10
37650: DIVREAL
37651: ST_TO_ADDR
// time := 1 1$00 ;
37652: LD_ADDR_VAR 0 8
37656: PUSH
37657: LD_INT 2100
37659: ST_TO_ADDR
// if amount < min then
37660: LD_VAR 0 9
37664: PUSH
37665: LD_VAR 0 3
37669: LESS
37670: IFFALSE 37688
// r := r * 2 else
37672: LD_ADDR_VAR 0 7
37676: PUSH
37677: LD_VAR 0 7
37681: PUSH
37682: LD_INT 2
37684: MUL
37685: ST_TO_ADDR
37686: GO 37714
// if amount > max then
37688: LD_VAR 0 9
37692: PUSH
37693: LD_VAR 0 4
37697: GREATER
37698: IFFALSE 37714
// r := r / 2 ;
37700: LD_ADDR_VAR 0 7
37704: PUSH
37705: LD_VAR 0 7
37709: PUSH
37710: LD_INT 2
37712: DIVREAL
37713: ST_TO_ADDR
// time := time / r ;
37714: LD_ADDR_VAR 0 8
37718: PUSH
37719: LD_VAR 0 8
37723: PUSH
37724: LD_VAR 0 7
37728: DIVREAL
37729: ST_TO_ADDR
// if time < 0 then
37730: LD_VAR 0 8
37734: PUSH
37735: LD_INT 0
37737: LESS
37738: IFFALSE 37755
// time := time * - 1 ;
37740: LD_ADDR_VAR 0 8
37744: PUSH
37745: LD_VAR 0 8
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: MUL
37754: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37755: LD_VAR 0 8
37759: PUSH
37760: LD_INT 35
37762: PPUSH
37763: LD_INT 875
37765: PPUSH
37766: CALL_OW 12
37770: PLUS
37771: PPUSH
37772: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37776: LD_INT 1
37778: PPUSH
37779: LD_INT 5
37781: PPUSH
37782: CALL_OW 12
37786: PPUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: LD_INT 1
37794: PPUSH
37795: CALL_OW 55
// end ;
37799: GO 37612
// end ;
37801: LD_VAR 0 5
37805: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37806: LD_INT 0
37808: PPUSH
37809: PPUSH
37810: PPUSH
37811: PPUSH
37812: PPUSH
37813: PPUSH
37814: PPUSH
37815: PPUSH
// if not turrets or not factories then
37816: LD_VAR 0 1
37820: NOT
37821: IFTRUE 37830
37823: PUSH
37824: LD_VAR 0 2
37828: NOT
37829: OR
37830: IFFALSE 37834
// exit ;
37832: GO 38141
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37834: LD_ADDR_VAR 0 10
37838: PUSH
37839: LD_INT 5
37841: PUSH
37842: LD_INT 6
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 4
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 3
37861: PUSH
37862: LD_INT 5
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 24
37876: PUSH
37877: LD_INT 25
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 23
37886: PUSH
37887: LD_INT 27
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 42
37900: PUSH
37901: LD_INT 43
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 44
37910: PUSH
37911: LD_INT 46
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 45
37920: PUSH
37921: LD_INT 47
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// result := [ ] ;
37938: LD_ADDR_VAR 0 3
37942: PUSH
37943: EMPTY
37944: ST_TO_ADDR
// for i in turrets do
37945: LD_ADDR_VAR 0 4
37949: PUSH
37950: LD_VAR 0 1
37954: PUSH
37955: FOR_IN
37956: IFFALSE 38139
// begin nat := GetNation ( i ) ;
37958: LD_ADDR_VAR 0 7
37962: PUSH
37963: LD_VAR 0 4
37967: PPUSH
37968: CALL_OW 248
37972: ST_TO_ADDR
// weapon := 0 ;
37973: LD_ADDR_VAR 0 8
37977: PUSH
37978: LD_INT 0
37980: ST_TO_ADDR
// if not nat then
37981: LD_VAR 0 7
37985: NOT
37986: IFFALSE 37990
// continue ;
37988: GO 37955
// for j in list [ nat ] do
37990: LD_ADDR_VAR 0 5
37994: PUSH
37995: LD_VAR 0 10
37999: PUSH
38000: LD_VAR 0 7
38004: ARRAY
38005: PUSH
38006: FOR_IN
38007: IFFALSE 38048
// if GetBWeapon ( i ) = j [ 1 ] then
38009: LD_VAR 0 4
38013: PPUSH
38014: CALL_OW 269
38018: PUSH
38019: LD_VAR 0 5
38023: PUSH
38024: LD_INT 1
38026: ARRAY
38027: EQUAL
38028: IFFALSE 38046
// begin weapon := j [ 2 ] ;
38030: LD_ADDR_VAR 0 8
38034: PUSH
38035: LD_VAR 0 5
38039: PUSH
38040: LD_INT 2
38042: ARRAY
38043: ST_TO_ADDR
// break ;
38044: GO 38048
// end ;
38046: GO 38006
38048: POP
38049: POP
// if not weapon then
38050: LD_VAR 0 8
38054: NOT
38055: IFFALSE 38059
// continue ;
38057: GO 37955
// for k in factories do
38059: LD_ADDR_VAR 0 6
38063: PUSH
38064: LD_VAR 0 2
38068: PUSH
38069: FOR_IN
38070: IFFALSE 38135
// begin weapons := AvailableWeaponList ( k ) ;
38072: LD_ADDR_VAR 0 9
38076: PUSH
38077: LD_VAR 0 6
38081: PPUSH
38082: CALL_OW 478
38086: ST_TO_ADDR
// if not weapons then
38087: LD_VAR 0 9
38091: NOT
38092: IFFALSE 38096
// continue ;
38094: GO 38069
// if weapon in weapons then
38096: LD_VAR 0 8
38100: PUSH
38101: LD_VAR 0 9
38105: IN
38106: IFFALSE 38133
// begin result := [ i , weapon ] ;
38108: LD_ADDR_VAR 0 3
38112: PUSH
38113: LD_VAR 0 4
38117: PUSH
38118: LD_VAR 0 8
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: ST_TO_ADDR
// exit ;
38127: POP
38128: POP
38129: POP
38130: POP
38131: GO 38141
// end ; end ;
38133: GO 38069
38135: POP
38136: POP
// end ;
38137: GO 37955
38139: POP
38140: POP
// end ;
38141: LD_VAR 0 3
38145: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38146: LD_INT 0
38148: PPUSH
// if not side or side > 8 then
38149: LD_VAR 0 3
38153: NOT
38154: IFTRUE 38166
38156: PUSH
38157: LD_VAR 0 3
38161: PUSH
38162: LD_INT 8
38164: GREATER
38165: OR
38166: IFFALSE 38170
// exit ;
38168: GO 38229
// if not range then
38170: LD_VAR 0 4
38174: NOT
38175: IFFALSE 38186
// range := - 12 ;
38177: LD_ADDR_VAR 0 4
38181: PUSH
38182: LD_INT 12
38184: NEG
38185: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38186: LD_VAR 0 1
38190: PPUSH
38191: LD_VAR 0 2
38195: PPUSH
38196: LD_VAR 0 3
38200: PPUSH
38201: LD_VAR 0 4
38205: PPUSH
38206: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38210: LD_VAR 0 1
38214: PPUSH
38215: LD_VAR 0 2
38219: PPUSH
38220: LD_VAR 0 3
38224: PPUSH
38225: CALL_OW 331
// end ;
38229: LD_VAR 0 5
38233: RET
// export function Video ( mode ) ; begin
38234: LD_INT 0
38236: PPUSH
// ingame_video = mode ;
38237: LD_ADDR_OWVAR 52
38241: PUSH
38242: LD_VAR 0 1
38246: ST_TO_ADDR
// interface_hidden = mode ;
38247: LD_ADDR_OWVAR 54
38251: PUSH
38252: LD_VAR 0 1
38256: ST_TO_ADDR
// end ;
38257: LD_VAR 0 2
38261: RET
// export function Join ( array , element ) ; begin
38262: LD_INT 0
38264: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38265: LD_ADDR_VAR 0 3
38269: PUSH
38270: LD_VAR 0 1
38274: PPUSH
38275: LD_VAR 0 1
38279: PUSH
38280: LD_INT 1
38282: PLUS
38283: PPUSH
38284: LD_VAR 0 2
38288: PPUSH
38289: CALL_OW 1
38293: ST_TO_ADDR
// end ;
38294: LD_VAR 0 3
38298: RET
// export function JoinUnion ( array , element ) ; begin
38299: LD_INT 0
38301: PPUSH
// result := array union element ;
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_VAR 0 1
38311: PUSH
38312: LD_VAR 0 2
38316: UNION
38317: ST_TO_ADDR
// end ;
38318: LD_VAR 0 3
38322: RET
// export function GetBehemoths ( side ) ; begin
38323: LD_INT 0
38325: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38326: LD_ADDR_VAR 0 2
38330: PUSH
38331: LD_INT 22
38333: PUSH
38334: LD_VAR 0 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 31
38345: PUSH
38346: LD_INT 25
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 69
38361: ST_TO_ADDR
// end ;
38362: LD_VAR 0 2
38366: RET
// export function Shuffle ( array ) ; var i , index ; begin
38367: LD_INT 0
38369: PPUSH
38370: PPUSH
38371: PPUSH
// result := [ ] ;
38372: LD_ADDR_VAR 0 2
38376: PUSH
38377: EMPTY
38378: ST_TO_ADDR
// if not array then
38379: LD_VAR 0 1
38383: NOT
38384: IFFALSE 38388
// exit ;
38386: GO 38487
// Randomize ;
38388: CALL_OW 10
// for i = array downto 1 do
38392: LD_ADDR_VAR 0 3
38396: PUSH
38397: DOUBLE
38398: LD_VAR 0 1
38402: INC
38403: ST_TO_ADDR
38404: LD_INT 1
38406: PUSH
38407: FOR_DOWNTO
38408: IFFALSE 38485
// begin index := rand ( 1 , array ) ;
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: LD_INT 1
38417: PPUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 12
38427: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38428: LD_ADDR_VAR 0 2
38432: PUSH
38433: LD_VAR 0 2
38437: PPUSH
38438: LD_VAR 0 2
38442: PUSH
38443: LD_INT 1
38445: PLUS
38446: PPUSH
38447: LD_VAR 0 1
38451: PUSH
38452: LD_VAR 0 4
38456: ARRAY
38457: PPUSH
38458: CALL_OW 2
38462: ST_TO_ADDR
// array := Delete ( array , index ) ;
38463: LD_ADDR_VAR 0 1
38467: PUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: LD_VAR 0 4
38477: PPUSH
38478: CALL_OW 3
38482: ST_TO_ADDR
// end ;
38483: GO 38407
38485: POP
38486: POP
// end ;
38487: LD_VAR 0 2
38491: RET
// export function GetBaseMaterials ( base ) ; begin
38492: LD_INT 0
38494: PPUSH
// result := [ 0 , 0 , 0 ] ;
38495: LD_ADDR_VAR 0 2
38499: PUSH
38500: LD_INT 0
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
// if not base then
38514: LD_VAR 0 1
38518: NOT
38519: IFFALSE 38523
// exit ;
38521: GO 38572
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38523: LD_ADDR_VAR 0 2
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: LD_INT 1
38535: PPUSH
38536: CALL_OW 275
38540: PUSH
38541: LD_VAR 0 1
38545: PPUSH
38546: LD_INT 2
38548: PPUSH
38549: CALL_OW 275
38553: PUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: LD_INT 3
38561: PPUSH
38562: CALL_OW 275
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: LIST
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 2
38576: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38577: LD_INT 0
38579: PPUSH
38580: PPUSH
// result := array ;
38581: LD_ADDR_VAR 0 3
38585: PUSH
38586: LD_VAR 0 1
38590: ST_TO_ADDR
// if size >= result then
38591: LD_VAR 0 2
38595: PUSH
38596: LD_VAR 0 3
38600: GREATEREQUAL
38601: IFFALSE 38605
// exit ;
38603: GO 38655
// if size then
38605: LD_VAR 0 2
38609: IFFALSE 38655
// for i := array downto size do
38611: LD_ADDR_VAR 0 4
38615: PUSH
38616: DOUBLE
38617: LD_VAR 0 1
38621: INC
38622: ST_TO_ADDR
38623: LD_VAR 0 2
38627: PUSH
38628: FOR_DOWNTO
38629: IFFALSE 38653
// result := Delete ( result , result ) ;
38631: LD_ADDR_VAR 0 3
38635: PUSH
38636: LD_VAR 0 3
38640: PPUSH
38641: LD_VAR 0 3
38645: PPUSH
38646: CALL_OW 3
38650: ST_TO_ADDR
38651: GO 38628
38653: POP
38654: POP
// end ;
38655: LD_VAR 0 3
38659: RET
// export function ComExit ( unit ) ; var tmp ; begin
38660: LD_INT 0
38662: PPUSH
38663: PPUSH
// if not IsInUnit ( unit ) then
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 310
38673: NOT
38674: IFFALSE 38678
// exit ;
38676: GO 38738
// tmp := IsInUnit ( unit ) ;
38678: LD_ADDR_VAR 0 3
38682: PUSH
38683: LD_VAR 0 1
38687: PPUSH
38688: CALL_OW 310
38692: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38693: LD_VAR 0 3
38697: PPUSH
38698: CALL_OW 247
38702: PUSH
38703: LD_INT 2
38705: EQUAL
38706: IFFALSE 38719
// ComExitVehicle ( unit ) else
38708: LD_VAR 0 1
38712: PPUSH
38713: CALL_OW 121
38717: GO 38728
// ComExitBuilding ( unit ) ;
38719: LD_VAR 0 1
38723: PPUSH
38724: CALL_OW 122
// result := tmp ;
38728: LD_ADDR_VAR 0 2
38732: PUSH
38733: LD_VAR 0 3
38737: ST_TO_ADDR
// end ;
38738: LD_VAR 0 2
38742: RET
// export function ComExitAll ( units ) ; var i ; begin
38743: LD_INT 0
38745: PPUSH
38746: PPUSH
// if not units then
38747: LD_VAR 0 1
38751: NOT
38752: IFFALSE 38756
// exit ;
38754: GO 38782
// for i in units do
38756: LD_ADDR_VAR 0 3
38760: PUSH
38761: LD_VAR 0 1
38765: PUSH
38766: FOR_IN
38767: IFFALSE 38780
// ComExit ( i ) ;
38769: LD_VAR 0 3
38773: PPUSH
38774: CALL 38660 0 1
38778: GO 38766
38780: POP
38781: POP
// end ;
38782: LD_VAR 0 2
38786: RET
// export function ResetHc ; begin
38787: LD_INT 0
38789: PPUSH
// InitHc ;
38790: CALL_OW 19
// hc_importance := 0 ;
38794: LD_ADDR_OWVAR 32
38798: PUSH
38799: LD_INT 0
38801: ST_TO_ADDR
// end ;
38802: LD_VAR 0 1
38806: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38807: LD_INT 0
38809: PPUSH
38810: PPUSH
38811: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38812: LD_ADDR_VAR 0 6
38816: PUSH
38817: LD_VAR 0 1
38821: PUSH
38822: LD_VAR 0 3
38826: PLUS
38827: PUSH
38828: LD_INT 2
38830: DIV
38831: ST_TO_ADDR
// if _x < 0 then
38832: LD_VAR 0 6
38836: PUSH
38837: LD_INT 0
38839: LESS
38840: IFFALSE 38857
// _x := _x * - 1 ;
38842: LD_ADDR_VAR 0 6
38846: PUSH
38847: LD_VAR 0 6
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: MUL
38856: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38857: LD_ADDR_VAR 0 7
38861: PUSH
38862: LD_VAR 0 2
38866: PUSH
38867: LD_VAR 0 4
38871: PLUS
38872: PUSH
38873: LD_INT 2
38875: DIV
38876: ST_TO_ADDR
// if _y < 0 then
38877: LD_VAR 0 7
38881: PUSH
38882: LD_INT 0
38884: LESS
38885: IFFALSE 38902
// _y := _y * - 1 ;
38887: LD_ADDR_VAR 0 7
38891: PUSH
38892: LD_VAR 0 7
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: MUL
38901: ST_TO_ADDR
// result := [ _x , _y ] ;
38902: LD_ADDR_VAR 0 5
38906: PUSH
38907: LD_VAR 0 6
38911: PUSH
38912: LD_VAR 0 7
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: ST_TO_ADDR
// end ;
38921: LD_VAR 0 5
38925: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38926: LD_INT 0
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
// task := GetTaskList ( unit ) ;
38932: LD_ADDR_VAR 0 7
38936: PUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 437
38946: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38947: LD_VAR 0 7
38951: NOT
38952: IFFALSE 38971
38954: PUSH
38955: LD_VAR 0 1
38959: PPUSH
38960: LD_VAR 0 2
38964: PPUSH
38965: CALL_OW 308
38969: NOT
38970: AND
38971: IFFALSE 38975
// exit ;
38973: GO 39093
// if IsInArea ( unit , area ) then
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_VAR 0 2
38984: PPUSH
38985: CALL_OW 308
38989: IFFALSE 39007
// begin ComMoveToArea ( unit , goAway ) ;
38991: LD_VAR 0 1
38995: PPUSH
38996: LD_VAR 0 3
39000: PPUSH
39001: CALL_OW 113
// exit ;
39005: GO 39093
// end ; if task [ 1 ] [ 1 ] <> M then
39007: LD_VAR 0 7
39011: PUSH
39012: LD_INT 1
39014: ARRAY
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: PUSH
39020: LD_STRING M
39022: NONEQUAL
39023: IFFALSE 39027
// exit ;
39025: GO 39093
// x := task [ 1 ] [ 2 ] ;
39027: LD_ADDR_VAR 0 5
39031: PUSH
39032: LD_VAR 0 7
39036: PUSH
39037: LD_INT 1
39039: ARRAY
39040: PUSH
39041: LD_INT 2
39043: ARRAY
39044: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39045: LD_ADDR_VAR 0 6
39049: PUSH
39050: LD_VAR 0 7
39054: PUSH
39055: LD_INT 1
39057: ARRAY
39058: PUSH
39059: LD_INT 3
39061: ARRAY
39062: ST_TO_ADDR
// if InArea ( x , y , area ) then
39063: LD_VAR 0 5
39067: PPUSH
39068: LD_VAR 0 6
39072: PPUSH
39073: LD_VAR 0 2
39077: PPUSH
39078: CALL_OW 309
39082: IFFALSE 39093
// ComStop ( unit ) ;
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL_OW 141
// end ;
39093: LD_VAR 0 4
39097: RET
// export function Abs ( value ) ; begin
39098: LD_INT 0
39100: PPUSH
// result := value ;
39101: LD_ADDR_VAR 0 2
39105: PUSH
39106: LD_VAR 0 1
39110: ST_TO_ADDR
// if value < 0 then
39111: LD_VAR 0 1
39115: PUSH
39116: LD_INT 0
39118: LESS
39119: IFFALSE 39136
// result := value * - 1 ;
39121: LD_ADDR_VAR 0 2
39125: PUSH
39126: LD_VAR 0 1
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: MUL
39135: ST_TO_ADDR
// end ;
39136: LD_VAR 0 2
39140: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39141: LD_INT 0
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
// if not unit or not building then
39151: LD_VAR 0 1
39155: NOT
39156: IFTRUE 39165
39158: PUSH
39159: LD_VAR 0 2
39163: NOT
39164: OR
39165: IFFALSE 39169
// exit ;
39167: GO 39397
// x := GetX ( building ) ;
39169: LD_ADDR_VAR 0 4
39173: PUSH
39174: LD_VAR 0 2
39178: PPUSH
39179: CALL_OW 250
39183: ST_TO_ADDR
// y := GetY ( building ) ;
39184: LD_ADDR_VAR 0 6
39188: PUSH
39189: LD_VAR 0 2
39193: PPUSH
39194: CALL_OW 251
39198: ST_TO_ADDR
// d := GetDir ( building ) ;
39199: LD_ADDR_VAR 0 8
39203: PUSH
39204: LD_VAR 0 2
39208: PPUSH
39209: CALL_OW 254
39213: ST_TO_ADDR
// r := 4 ;
39214: LD_ADDR_VAR 0 9
39218: PUSH
39219: LD_INT 4
39221: ST_TO_ADDR
// for i := 1 to 5 do
39222: LD_ADDR_VAR 0 10
39226: PUSH
39227: DOUBLE
39228: LD_INT 1
39230: DEC
39231: ST_TO_ADDR
39232: LD_INT 5
39234: PUSH
39235: FOR_TO
39236: IFFALSE 39395
// begin _x := ShiftX ( x , d , r + i ) ;
39238: LD_ADDR_VAR 0 5
39242: PUSH
39243: LD_VAR 0 4
39247: PPUSH
39248: LD_VAR 0 8
39252: PPUSH
39253: LD_VAR 0 9
39257: PUSH
39258: LD_VAR 0 10
39262: PLUS
39263: PPUSH
39264: CALL_OW 272
39268: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39269: LD_ADDR_VAR 0 7
39273: PUSH
39274: LD_VAR 0 6
39278: PPUSH
39279: LD_VAR 0 8
39283: PPUSH
39284: LD_VAR 0 9
39288: PUSH
39289: LD_VAR 0 10
39293: PLUS
39294: PPUSH
39295: CALL_OW 273
39299: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39300: LD_VAR 0 5
39304: PPUSH
39305: LD_VAR 0 7
39309: PPUSH
39310: CALL_OW 488
39314: IFFALSE 39349
39316: PUSH
39317: LD_VAR 0 5
39321: PPUSH
39322: LD_VAR 0 7
39326: PPUSH
39327: CALL_OW 428
39331: PPUSH
39332: CALL_OW 247
39336: PUSH
39337: LD_INT 3
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: IN
39347: NOT
39348: AND
39349: IFFALSE 39393
// begin ComMoveXY ( unit , _x , _y ) ;
39351: LD_VAR 0 1
39355: PPUSH
39356: LD_VAR 0 5
39360: PPUSH
39361: LD_VAR 0 7
39365: PPUSH
39366: CALL_OW 111
// result := [ _x , _y ] ;
39370: LD_ADDR_VAR 0 3
39374: PUSH
39375: LD_VAR 0 5
39379: PUSH
39380: LD_VAR 0 7
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: ST_TO_ADDR
// exit ;
39389: POP
39390: POP
39391: GO 39397
// end ; end ;
39393: GO 39235
39395: POP
39396: POP
// end ;
39397: LD_VAR 0 3
39401: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39402: LD_INT 0
39404: PPUSH
39405: PPUSH
39406: PPUSH
// result := 0 ;
39407: LD_ADDR_VAR 0 3
39411: PUSH
39412: LD_INT 0
39414: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39415: LD_VAR 0 1
39419: PUSH
39420: LD_INT 0
39422: LESS
39423: IFTRUE 39435
39425: PUSH
39426: LD_VAR 0 1
39430: PUSH
39431: LD_INT 8
39433: GREATER
39434: OR
39435: IFTRUE 39447
39437: PUSH
39438: LD_VAR 0 2
39442: PUSH
39443: LD_INT 0
39445: LESS
39446: OR
39447: IFTRUE 39459
39449: PUSH
39450: LD_VAR 0 2
39454: PUSH
39455: LD_INT 8
39457: GREATER
39458: OR
39459: IFFALSE 39463
// exit ;
39461: GO 39538
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39463: LD_ADDR_VAR 0 4
39467: PUSH
39468: LD_INT 22
39470: PUSH
39471: LD_VAR 0 2
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 69
39484: PUSH
39485: FOR_IN
39486: IFFALSE 39536
// begin un := UnitShoot ( i ) ;
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: LD_VAR 0 4
39497: PPUSH
39498: CALL_OW 504
39502: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39503: LD_VAR 0 5
39507: PPUSH
39508: CALL_OW 255
39512: PUSH
39513: LD_VAR 0 1
39517: EQUAL
39518: IFFALSE 39534
// begin result := un ;
39520: LD_ADDR_VAR 0 3
39524: PUSH
39525: LD_VAR 0 5
39529: ST_TO_ADDR
// exit ;
39530: POP
39531: POP
39532: GO 39538
// end ; end ;
39534: GO 39485
39536: POP
39537: POP
// end ;
39538: LD_VAR 0 3
39542: RET
// export function GetCargoBay ( units ) ; begin
39543: LD_INT 0
39545: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39546: LD_ADDR_VAR 0 2
39550: PUSH
39551: LD_VAR 0 1
39555: PPUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 34
39561: PUSH
39562: LD_INT 12
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 34
39571: PUSH
39572: LD_INT 51
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 34
39581: PUSH
39582: LD_INT 32
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 34
39591: PUSH
39592: LD_INT 89
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: PPUSH
39606: CALL_OW 72
39610: ST_TO_ADDR
// end ;
39611: LD_VAR 0 2
39615: RET
// export function Negate ( value ) ; begin
39616: LD_INT 0
39618: PPUSH
// result := not value ;
39619: LD_ADDR_VAR 0 2
39623: PUSH
39624: LD_VAR 0 1
39628: NOT
39629: ST_TO_ADDR
// end ;
39630: LD_VAR 0 2
39634: RET
// export function Inc ( value ) ; begin
39635: LD_INT 0
39637: PPUSH
// result := value + 1 ;
39638: LD_ADDR_VAR 0 2
39642: PUSH
39643: LD_VAR 0 1
39647: PUSH
39648: LD_INT 1
39650: PLUS
39651: ST_TO_ADDR
// end ;
39652: LD_VAR 0 2
39656: RET
// export function Dec ( value ) ; begin
39657: LD_INT 0
39659: PPUSH
// result := value - 1 ;
39660: LD_ADDR_VAR 0 2
39664: PUSH
39665: LD_VAR 0 1
39669: PUSH
39670: LD_INT 1
39672: MINUS
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 2
39678: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39689: LD_VAR 0 1
39693: PPUSH
39694: LD_VAR 0 2
39698: PPUSH
39699: CALL_OW 488
39703: NOT
39704: IFTRUE 39723
39706: PUSH
39707: LD_VAR 0 3
39711: PPUSH
39712: LD_VAR 0 4
39716: PPUSH
39717: CALL_OW 488
39721: NOT
39722: OR
39723: IFFALSE 39736
// begin result := - 1 ;
39725: LD_ADDR_VAR 0 5
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: ST_TO_ADDR
// exit ;
39734: GO 39971
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39736: LD_ADDR_VAR 0 12
39740: PUSH
39741: LD_VAR 0 1
39745: PPUSH
39746: LD_VAR 0 2
39750: PPUSH
39751: LD_VAR 0 3
39755: PPUSH
39756: LD_VAR 0 4
39760: PPUSH
39761: CALL 38807 0 4
39765: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39766: LD_ADDR_VAR 0 11
39770: PUSH
39771: LD_VAR 0 1
39775: PPUSH
39776: LD_VAR 0 2
39780: PPUSH
39781: LD_VAR 0 12
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_VAR 0 12
39794: PUSH
39795: LD_INT 2
39797: ARRAY
39798: PPUSH
39799: CALL_OW 298
39803: ST_TO_ADDR
// distance := 9999 ;
39804: LD_ADDR_VAR 0 10
39808: PUSH
39809: LD_INT 9999
39811: ST_TO_ADDR
// for i := 0 to 5 do
39812: LD_ADDR_VAR 0 6
39816: PUSH
39817: DOUBLE
39818: LD_INT 0
39820: DEC
39821: ST_TO_ADDR
39822: LD_INT 5
39824: PUSH
39825: FOR_TO
39826: IFFALSE 39969
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39828: LD_ADDR_VAR 0 7
39832: PUSH
39833: LD_VAR 0 1
39837: PPUSH
39838: LD_VAR 0 6
39842: PPUSH
39843: LD_VAR 0 11
39847: PPUSH
39848: CALL_OW 272
39852: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39853: LD_ADDR_VAR 0 8
39857: PUSH
39858: LD_VAR 0 2
39862: PPUSH
39863: LD_VAR 0 6
39867: PPUSH
39868: LD_VAR 0 11
39872: PPUSH
39873: CALL_OW 273
39877: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39878: LD_VAR 0 7
39882: PPUSH
39883: LD_VAR 0 8
39887: PPUSH
39888: CALL_OW 488
39892: NOT
39893: IFFALSE 39897
// continue ;
39895: GO 39825
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39897: LD_ADDR_VAR 0 9
39901: PUSH
39902: LD_VAR 0 12
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PPUSH
39911: LD_VAR 0 12
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: PPUSH
39920: LD_VAR 0 7
39924: PPUSH
39925: LD_VAR 0 8
39929: PPUSH
39930: CALL_OW 298
39934: ST_TO_ADDR
// if tmp < distance then
39935: LD_VAR 0 9
39939: PUSH
39940: LD_VAR 0 10
39944: LESS
39945: IFFALSE 39967
// begin result := i ;
39947: LD_ADDR_VAR 0 5
39951: PUSH
39952: LD_VAR 0 6
39956: ST_TO_ADDR
// distance := tmp ;
39957: LD_ADDR_VAR 0 10
39961: PUSH
39962: LD_VAR 0 9
39966: ST_TO_ADDR
// end ; end ;
39967: GO 39825
39969: POP
39970: POP
// end ;
39971: LD_VAR 0 5
39975: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39976: LD_INT 0
39978: PPUSH
39979: PPUSH
// if not driver or not IsInUnit ( driver ) then
39980: LD_VAR 0 1
39984: NOT
39985: IFTRUE 39999
39987: PUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 310
39997: NOT
39998: OR
39999: IFFALSE 40003
// exit ;
40001: GO 40093
// vehicle := IsInUnit ( driver ) ;
40003: LD_ADDR_VAR 0 3
40007: PUSH
40008: LD_VAR 0 1
40012: PPUSH
40013: CALL_OW 310
40017: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40018: LD_VAR 0 1
40022: PPUSH
40023: LD_STRING \
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: PUSH
40053: LD_STRING E
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_VAR 0 3
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PPUSH
40089: CALL_OW 446
// end ;
40093: LD_VAR 0 2
40097: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40098: LD_INT 0
40100: PPUSH
40101: PPUSH
// if not driver or not IsInUnit ( driver ) then
40102: LD_VAR 0 1
40106: NOT
40107: IFTRUE 40121
40109: PUSH
40110: LD_VAR 0 1
40114: PPUSH
40115: CALL_OW 310
40119: NOT
40120: OR
40121: IFFALSE 40125
// exit ;
40123: GO 40215
// vehicle := IsInUnit ( driver ) ;
40125: LD_ADDR_VAR 0 3
40129: PUSH
40130: LD_VAR 0 1
40134: PPUSH
40135: CALL_OW 310
40139: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40140: LD_VAR 0 1
40144: PPUSH
40145: LD_STRING \
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: PUSH
40175: LD_STRING E
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_VAR 0 3
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PPUSH
40211: CALL_OW 447
// end ;
40215: LD_VAR 0 2
40219: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40220: LD_INT 0
40222: PPUSH
40223: PPUSH
40224: PPUSH
// tmp := [ ] ;
40225: LD_ADDR_VAR 0 5
40229: PUSH
40230: EMPTY
40231: ST_TO_ADDR
// for i in units do
40232: LD_ADDR_VAR 0 4
40236: PUSH
40237: LD_VAR 0 1
40241: PUSH
40242: FOR_IN
40243: IFFALSE 40281
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40245: LD_ADDR_VAR 0 5
40249: PUSH
40250: LD_VAR 0 5
40254: PPUSH
40255: LD_VAR 0 5
40259: PUSH
40260: LD_INT 1
40262: PLUS
40263: PPUSH
40264: LD_VAR 0 4
40268: PPUSH
40269: CALL_OW 256
40273: PPUSH
40274: CALL_OW 2
40278: ST_TO_ADDR
40279: GO 40242
40281: POP
40282: POP
// if not tmp then
40283: LD_VAR 0 5
40287: NOT
40288: IFFALSE 40292
// exit ;
40290: GO 40340
// if asc then
40292: LD_VAR 0 2
40296: IFFALSE 40320
// result := SortListByListAsc ( units , tmp ) else
40298: LD_ADDR_VAR 0 3
40302: PUSH
40303: LD_VAR 0 1
40307: PPUSH
40308: LD_VAR 0 5
40312: PPUSH
40313: CALL_OW 76
40317: ST_TO_ADDR
40318: GO 40340
// result := SortListByListDesc ( units , tmp ) ;
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: LD_VAR 0 5
40334: PPUSH
40335: CALL_OW 77
40339: ST_TO_ADDR
// end ;
40340: LD_VAR 0 3
40344: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40345: LD_INT 0
40347: PPUSH
40348: PPUSH
// task := GetTaskList ( mech ) ;
40349: LD_ADDR_VAR 0 4
40353: PUSH
40354: LD_VAR 0 1
40358: PPUSH
40359: CALL_OW 437
40363: ST_TO_ADDR
// if not task then
40364: LD_VAR 0 4
40368: NOT
40369: IFFALSE 40373
// exit ;
40371: GO 40417
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40373: LD_ADDR_VAR 0 3
40377: PUSH
40378: LD_VAR 0 4
40382: PUSH
40383: LD_INT 1
40385: ARRAY
40386: PUSH
40387: LD_INT 1
40389: ARRAY
40390: PUSH
40391: LD_STRING r
40393: EQUAL
40394: IFFALSE 40416
40396: PUSH
40397: LD_VAR 0 4
40401: PUSH
40402: LD_INT 1
40404: ARRAY
40405: PUSH
40406: LD_INT 4
40408: ARRAY
40409: PUSH
40410: LD_VAR 0 2
40414: EQUAL
40415: AND
40416: ST_TO_ADDR
// end ;
40417: LD_VAR 0 3
40421: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40422: LD_INT 0
40424: PPUSH
// SetDir ( unit , d ) ;
40425: LD_VAR 0 1
40429: PPUSH
40430: LD_VAR 0 4
40434: PPUSH
40435: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40439: LD_ADDR_VAR 0 6
40443: PUSH
40444: LD_VAR 0 1
40448: PPUSH
40449: LD_VAR 0 2
40453: PPUSH
40454: LD_VAR 0 3
40458: PPUSH
40459: LD_VAR 0 5
40463: PPUSH
40464: CALL_OW 48
40468: ST_TO_ADDR
// end ;
40469: LD_VAR 0 6
40473: RET
// export function ToNaturalNumber ( number ) ; begin
40474: LD_INT 0
40476: PPUSH
// result := number div 1 ;
40477: LD_ADDR_VAR 0 2
40481: PUSH
40482: LD_VAR 0 1
40486: PUSH
40487: LD_INT 1
40489: DIV
40490: ST_TO_ADDR
// if number < 0 then
40491: LD_VAR 0 1
40495: PUSH
40496: LD_INT 0
40498: LESS
40499: IFFALSE 40509
// result := 0 ;
40501: LD_ADDR_VAR 0 2
40505: PUSH
40506: LD_INT 0
40508: ST_TO_ADDR
// end ;
40509: LD_VAR 0 2
40513: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40514: LD_INT 0
40516: PPUSH
40517: PPUSH
40518: PPUSH
// if not buildings then
40519: LD_VAR 0 1
40523: NOT
40524: IFFALSE 40528
// exit ;
40526: GO 40643
// tmp := [ ] ;
40528: LD_ADDR_VAR 0 5
40532: PUSH
40533: EMPTY
40534: ST_TO_ADDR
// for b in buildings do
40535: LD_ADDR_VAR 0 4
40539: PUSH
40540: LD_VAR 0 1
40544: PUSH
40545: FOR_IN
40546: IFFALSE 40584
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40548: LD_ADDR_VAR 0 5
40552: PUSH
40553: LD_VAR 0 5
40557: PPUSH
40558: LD_VAR 0 5
40562: PUSH
40563: LD_INT 1
40565: PLUS
40566: PPUSH
40567: LD_VAR 0 4
40571: PPUSH
40572: CALL_OW 266
40576: PPUSH
40577: CALL_OW 1
40581: ST_TO_ADDR
40582: GO 40545
40584: POP
40585: POP
// if not tmp then
40586: LD_VAR 0 5
40590: NOT
40591: IFFALSE 40595
// exit ;
40593: GO 40643
// if asc then
40595: LD_VAR 0 2
40599: IFFALSE 40623
// result := SortListByListAsc ( buildings , tmp ) else
40601: LD_ADDR_VAR 0 3
40605: PUSH
40606: LD_VAR 0 1
40610: PPUSH
40611: LD_VAR 0 5
40615: PPUSH
40616: CALL_OW 76
40620: ST_TO_ADDR
40621: GO 40643
// result := SortListByListDesc ( buildings , tmp ) ;
40623: LD_ADDR_VAR 0 3
40627: PUSH
40628: LD_VAR 0 1
40632: PPUSH
40633: LD_VAR 0 5
40637: PPUSH
40638: CALL_OW 77
40642: ST_TO_ADDR
// end ;
40643: LD_VAR 0 3
40647: RET
// export function SortByClass ( units , class ) ; var un ; begin
40648: LD_INT 0
40650: PPUSH
40651: PPUSH
// if not units or not class then
40652: LD_VAR 0 1
40656: NOT
40657: IFTRUE 40666
40659: PUSH
40660: LD_VAR 0 2
40664: NOT
40665: OR
40666: IFFALSE 40670
// exit ;
40668: GO 40765
// result := [ ] ;
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: EMPTY
40676: ST_TO_ADDR
// for un in units do
40677: LD_ADDR_VAR 0 4
40681: PUSH
40682: LD_VAR 0 1
40686: PUSH
40687: FOR_IN
40688: IFFALSE 40763
// if GetClass ( un ) = class then
40690: LD_VAR 0 4
40694: PPUSH
40695: CALL_OW 257
40699: PUSH
40700: LD_VAR 0 2
40704: EQUAL
40705: IFFALSE 40732
// result := Insert ( result , 1 , un ) else
40707: LD_ADDR_VAR 0 3
40711: PUSH
40712: LD_VAR 0 3
40716: PPUSH
40717: LD_INT 1
40719: PPUSH
40720: LD_VAR 0 4
40724: PPUSH
40725: CALL_OW 2
40729: ST_TO_ADDR
40730: GO 40761
// result := Replace ( result , result + 1 , un ) ;
40732: LD_ADDR_VAR 0 3
40736: PUSH
40737: LD_VAR 0 3
40741: PPUSH
40742: LD_VAR 0 3
40746: PUSH
40747: LD_INT 1
40749: PLUS
40750: PPUSH
40751: LD_VAR 0 4
40755: PPUSH
40756: CALL_OW 1
40760: ST_TO_ADDR
40761: GO 40687
40763: POP
40764: POP
// end ;
40765: LD_VAR 0 3
40769: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40770: LD_INT 0
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
// result := [ ] ;
40779: LD_ADDR_VAR 0 4
40783: PUSH
40784: EMPTY
40785: ST_TO_ADDR
// if x - r < 0 then
40786: LD_VAR 0 1
40790: PUSH
40791: LD_VAR 0 3
40795: MINUS
40796: PUSH
40797: LD_INT 0
40799: LESS
40800: IFFALSE 40812
// min_x := 0 else
40802: LD_ADDR_VAR 0 8
40806: PUSH
40807: LD_INT 0
40809: ST_TO_ADDR
40810: GO 40828
// min_x := x - r ;
40812: LD_ADDR_VAR 0 8
40816: PUSH
40817: LD_VAR 0 1
40821: PUSH
40822: LD_VAR 0 3
40826: MINUS
40827: ST_TO_ADDR
// if y - r < 0 then
40828: LD_VAR 0 2
40832: PUSH
40833: LD_VAR 0 3
40837: MINUS
40838: PUSH
40839: LD_INT 0
40841: LESS
40842: IFFALSE 40854
// min_y := 0 else
40844: LD_ADDR_VAR 0 7
40848: PUSH
40849: LD_INT 0
40851: ST_TO_ADDR
40852: GO 40870
// min_y := y - r ;
40854: LD_ADDR_VAR 0 7
40858: PUSH
40859: LD_VAR 0 2
40863: PUSH
40864: LD_VAR 0 3
40868: MINUS
40869: ST_TO_ADDR
// max_x := x + r ;
40870: LD_ADDR_VAR 0 9
40874: PUSH
40875: LD_VAR 0 1
40879: PUSH
40880: LD_VAR 0 3
40884: PLUS
40885: ST_TO_ADDR
// max_y := y + r ;
40886: LD_ADDR_VAR 0 10
40890: PUSH
40891: LD_VAR 0 2
40895: PUSH
40896: LD_VAR 0 3
40900: PLUS
40901: ST_TO_ADDR
// for _x = min_x to max_x do
40902: LD_ADDR_VAR 0 5
40906: PUSH
40907: DOUBLE
40908: LD_VAR 0 8
40912: DEC
40913: ST_TO_ADDR
40914: LD_VAR 0 9
40918: PUSH
40919: FOR_TO
40920: IFFALSE 41021
// for _y = min_y to max_y do
40922: LD_ADDR_VAR 0 6
40926: PUSH
40927: DOUBLE
40928: LD_VAR 0 7
40932: DEC
40933: ST_TO_ADDR
40934: LD_VAR 0 10
40938: PUSH
40939: FOR_TO
40940: IFFALSE 41017
// begin if not ValidHex ( _x , _y ) then
40942: LD_VAR 0 5
40946: PPUSH
40947: LD_VAR 0 6
40951: PPUSH
40952: CALL_OW 488
40956: NOT
40957: IFFALSE 40961
// continue ;
40959: GO 40939
// if GetResourceTypeXY ( _x , _y ) then
40961: LD_VAR 0 5
40965: PPUSH
40966: LD_VAR 0 6
40970: PPUSH
40971: CALL_OW 283
40975: IFFALSE 41015
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40977: LD_ADDR_VAR 0 4
40981: PUSH
40982: LD_VAR 0 4
40986: PPUSH
40987: LD_VAR 0 4
40991: PUSH
40992: LD_INT 1
40994: PLUS
40995: PPUSH
40996: LD_VAR 0 5
41000: PUSH
41001: LD_VAR 0 6
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PPUSH
41010: CALL_OW 1
41014: ST_TO_ADDR
// end ;
41015: GO 40939
41017: POP
41018: POP
41019: GO 40919
41021: POP
41022: POP
// end ;
41023: LD_VAR 0 4
41027: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41028: LD_INT 0
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
41034: PPUSH
41035: PPUSH
41036: PPUSH
41037: PPUSH
// if not units then
41038: LD_VAR 0 1
41042: NOT
41043: IFFALSE 41047
// exit ;
41045: GO 41579
// result := UnitFilter ( units , [ f_ok ] ) ;
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: LD_INT 50
41059: PUSH
41060: EMPTY
41061: LIST
41062: PPUSH
41063: CALL_OW 72
41067: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41068: LD_ADDR_VAR 0 8
41072: PUSH
41073: LD_VAR 0 1
41077: PUSH
41078: LD_INT 1
41080: ARRAY
41081: PPUSH
41082: CALL_OW 255
41086: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41087: LD_ADDR_VAR 0 10
41091: PUSH
41092: LD_INT 29
41094: PUSH
41095: LD_INT 91
41097: PUSH
41098: LD_INT 49
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: LIST
41105: ST_TO_ADDR
// if not result then
41106: LD_VAR 0 3
41110: NOT
41111: IFFALSE 41115
// exit ;
41113: GO 41579
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41115: LD_ADDR_VAR 0 5
41119: PUSH
41120: LD_INT 81
41122: PUSH
41123: LD_VAR 0 8
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PPUSH
41132: CALL_OW 69
41136: ST_TO_ADDR
// for i in result do
41137: LD_ADDR_VAR 0 4
41141: PUSH
41142: LD_VAR 0 3
41146: PUSH
41147: FOR_IN
41148: IFFALSE 41577
// begin tag := GetTag ( i ) + 1 ;
41150: LD_ADDR_VAR 0 9
41154: PUSH
41155: LD_VAR 0 4
41159: PPUSH
41160: CALL_OW 110
41164: PUSH
41165: LD_INT 1
41167: PLUS
41168: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41169: LD_ADDR_VAR 0 7
41173: PUSH
41174: LD_VAR 0 4
41178: PPUSH
41179: CALL_OW 250
41183: PPUSH
41184: LD_VAR 0 4
41188: PPUSH
41189: CALL_OW 251
41193: PPUSH
41194: LD_INT 4
41196: PPUSH
41197: CALL 40770 0 3
41201: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41202: LD_VAR 0 4
41206: PPUSH
41207: CALL_OW 247
41211: PUSH
41212: LD_INT 2
41214: EQUAL
41215: IFFALSE 41227
41217: PUSH
41218: LD_VAR 0 7
41222: PUSH
41223: LD_INT 2
41225: GREATER
41226: AND
41227: IFFALSE 41247
41229: PUSH
41230: LD_VAR 0 4
41234: PPUSH
41235: CALL_OW 264
41239: PUSH
41240: LD_VAR 0 10
41244: IN
41245: NOT
41246: AND
41247: IFFALSE 41286
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41249: LD_VAR 0 4
41253: PPUSH
41254: LD_VAR 0 7
41258: PUSH
41259: LD_INT 1
41261: ARRAY
41262: PUSH
41263: LD_INT 1
41265: ARRAY
41266: PPUSH
41267: LD_VAR 0 7
41271: PUSH
41272: LD_INT 1
41274: ARRAY
41275: PUSH
41276: LD_INT 2
41278: ARRAY
41279: PPUSH
41280: CALL_OW 116
41284: GO 41575
// if path > tag then
41286: LD_VAR 0 2
41290: PUSH
41291: LD_VAR 0 9
41295: GREATER
41296: IFFALSE 41504
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41298: LD_ADDR_VAR 0 6
41302: PUSH
41303: LD_VAR 0 5
41307: PPUSH
41308: LD_INT 91
41310: PUSH
41311: LD_VAR 0 4
41315: PUSH
41316: LD_INT 8
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: PPUSH
41324: CALL_OW 72
41328: ST_TO_ADDR
// if nearEnemy then
41329: LD_VAR 0 6
41333: IFFALSE 41402
// begin if GetWeapon ( i ) = ru_time_lapser then
41335: LD_VAR 0 4
41339: PPUSH
41340: CALL_OW 264
41344: PUSH
41345: LD_INT 49
41347: EQUAL
41348: IFFALSE 41376
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41350: LD_VAR 0 4
41354: PPUSH
41355: LD_VAR 0 6
41359: PPUSH
41360: LD_VAR 0 4
41364: PPUSH
41365: CALL_OW 74
41369: PPUSH
41370: CALL_OW 112
41374: GO 41400
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41376: LD_VAR 0 4
41380: PPUSH
41381: LD_VAR 0 6
41385: PPUSH
41386: LD_VAR 0 4
41390: PPUSH
41391: CALL_OW 74
41395: PPUSH
41396: CALL 42660 0 2
// end else
41400: GO 41502
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41402: LD_VAR 0 4
41406: PPUSH
41407: LD_VAR 0 2
41411: PUSH
41412: LD_VAR 0 9
41416: ARRAY
41417: PUSH
41418: LD_INT 1
41420: ARRAY
41421: PPUSH
41422: LD_VAR 0 2
41426: PUSH
41427: LD_VAR 0 9
41431: ARRAY
41432: PUSH
41433: LD_INT 2
41435: ARRAY
41436: PPUSH
41437: CALL_OW 297
41441: PUSH
41442: LD_INT 6
41444: GREATER
41445: IFFALSE 41488
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41447: LD_VAR 0 4
41451: PPUSH
41452: LD_VAR 0 2
41456: PUSH
41457: LD_VAR 0 9
41461: ARRAY
41462: PUSH
41463: LD_INT 1
41465: ARRAY
41466: PPUSH
41467: LD_VAR 0 2
41471: PUSH
41472: LD_VAR 0 9
41476: ARRAY
41477: PUSH
41478: LD_INT 2
41480: ARRAY
41481: PPUSH
41482: CALL_OW 114
41486: GO 41502
// SetTag ( i , tag ) ;
41488: LD_VAR 0 4
41492: PPUSH
41493: LD_VAR 0 9
41497: PPUSH
41498: CALL_OW 109
// end else
41502: GO 41575
// if enemy then
41504: LD_VAR 0 5
41508: IFFALSE 41575
// begin if GetWeapon ( i ) = ru_time_lapser then
41510: LD_VAR 0 4
41514: PPUSH
41515: CALL_OW 264
41519: PUSH
41520: LD_INT 49
41522: EQUAL
41523: IFFALSE 41551
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41525: LD_VAR 0 4
41529: PPUSH
41530: LD_VAR 0 5
41534: PPUSH
41535: LD_VAR 0 4
41539: PPUSH
41540: CALL_OW 74
41544: PPUSH
41545: CALL_OW 112
41549: GO 41575
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41551: LD_VAR 0 4
41555: PPUSH
41556: LD_VAR 0 5
41560: PPUSH
41561: LD_VAR 0 4
41565: PPUSH
41566: CALL_OW 74
41570: PPUSH
41571: CALL 42660 0 2
// end ; end ;
41575: GO 41147
41577: POP
41578: POP
// end ;
41579: LD_VAR 0 3
41583: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41584: LD_INT 0
41586: PPUSH
41587: PPUSH
41588: PPUSH
// if not unit or IsInUnit ( unit ) then
41589: LD_VAR 0 1
41593: NOT
41594: IFTRUE 41607
41596: PUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: CALL_OW 310
41606: OR
41607: IFFALSE 41611
// exit ;
41609: GO 41702
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41611: LD_ADDR_VAR 0 4
41615: PUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: CALL_OW 250
41625: PPUSH
41626: LD_VAR 0 2
41630: PPUSH
41631: LD_INT 1
41633: PPUSH
41634: CALL_OW 272
41638: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41639: LD_ADDR_VAR 0 5
41643: PUSH
41644: LD_VAR 0 1
41648: PPUSH
41649: CALL_OW 251
41653: PPUSH
41654: LD_VAR 0 2
41658: PPUSH
41659: LD_INT 1
41661: PPUSH
41662: CALL_OW 273
41666: ST_TO_ADDR
// if ValidHex ( x , y ) then
41667: LD_VAR 0 4
41671: PPUSH
41672: LD_VAR 0 5
41676: PPUSH
41677: CALL_OW 488
41681: IFFALSE 41702
// ComTurnXY ( unit , x , y ) ;
41683: LD_VAR 0 1
41687: PPUSH
41688: LD_VAR 0 4
41692: PPUSH
41693: LD_VAR 0 5
41697: PPUSH
41698: CALL_OW 118
// end ;
41702: LD_VAR 0 3
41706: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41707: LD_INT 0
41709: PPUSH
41710: PPUSH
// result := false ;
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: LD_INT 0
41718: ST_TO_ADDR
// if not units then
41719: LD_VAR 0 2
41723: NOT
41724: IFFALSE 41728
// exit ;
41726: GO 41773
// for i in units do
41728: LD_ADDR_VAR 0 4
41732: PUSH
41733: LD_VAR 0 2
41737: PUSH
41738: FOR_IN
41739: IFFALSE 41771
// if See ( side , i ) then
41741: LD_VAR 0 1
41745: PPUSH
41746: LD_VAR 0 4
41750: PPUSH
41751: CALL_OW 292
41755: IFFALSE 41769
// begin result := true ;
41757: LD_ADDR_VAR 0 3
41761: PUSH
41762: LD_INT 1
41764: ST_TO_ADDR
// exit ;
41765: POP
41766: POP
41767: GO 41773
// end ;
41769: GO 41738
41771: POP
41772: POP
// end ;
41773: LD_VAR 0 3
41777: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41778: LD_INT 0
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
// if not unit or not points then
41784: LD_VAR 0 1
41788: NOT
41789: IFTRUE 41798
41791: PUSH
41792: LD_VAR 0 2
41796: NOT
41797: OR
41798: IFFALSE 41802
// exit ;
41800: GO 41892
// dist := 99999 ;
41802: LD_ADDR_VAR 0 5
41806: PUSH
41807: LD_INT 99999
41809: ST_TO_ADDR
// for i in points do
41810: LD_ADDR_VAR 0 4
41814: PUSH
41815: LD_VAR 0 2
41819: PUSH
41820: FOR_IN
41821: IFFALSE 41890
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41823: LD_ADDR_VAR 0 6
41827: PUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: LD_VAR 0 4
41837: PUSH
41838: LD_INT 1
41840: ARRAY
41841: PPUSH
41842: LD_VAR 0 4
41846: PUSH
41847: LD_INT 2
41849: ARRAY
41850: PPUSH
41851: CALL_OW 297
41855: ST_TO_ADDR
// if tmpDist < dist then
41856: LD_VAR 0 6
41860: PUSH
41861: LD_VAR 0 5
41865: LESS
41866: IFFALSE 41888
// begin result := i ;
41868: LD_ADDR_VAR 0 3
41872: PUSH
41873: LD_VAR 0 4
41877: ST_TO_ADDR
// dist := tmpDist ;
41878: LD_ADDR_VAR 0 5
41882: PUSH
41883: LD_VAR 0 6
41887: ST_TO_ADDR
// end ; end ;
41888: GO 41820
41890: POP
41891: POP
// end ;
41892: LD_VAR 0 3
41896: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41897: LD_INT 0
41899: PPUSH
// uc_side := side ;
41900: LD_ADDR_OWVAR 20
41904: PUSH
41905: LD_VAR 0 1
41909: ST_TO_ADDR
// uc_nation := 3 ;
41910: LD_ADDR_OWVAR 21
41914: PUSH
41915: LD_INT 3
41917: ST_TO_ADDR
// vc_chassis := 25 ;
41918: LD_ADDR_OWVAR 37
41922: PUSH
41923: LD_INT 25
41925: ST_TO_ADDR
// vc_engine := engine_siberite ;
41926: LD_ADDR_OWVAR 39
41930: PUSH
41931: LD_INT 3
41933: ST_TO_ADDR
// vc_control := control_computer ;
41934: LD_ADDR_OWVAR 38
41938: PUSH
41939: LD_INT 3
41941: ST_TO_ADDR
// vc_weapon := 59 ;
41942: LD_ADDR_OWVAR 40
41946: PUSH
41947: LD_INT 59
41949: ST_TO_ADDR
// result := CreateVehicle ;
41950: LD_ADDR_VAR 0 5
41954: PUSH
41955: CALL_OW 45
41959: ST_TO_ADDR
// SetDir ( result , d ) ;
41960: LD_VAR 0 5
41964: PPUSH
41965: LD_VAR 0 4
41969: PPUSH
41970: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41974: LD_VAR 0 5
41978: PPUSH
41979: LD_VAR 0 2
41983: PPUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: LD_INT 0
41991: PPUSH
41992: CALL_OW 48
// end ;
41996: LD_VAR 0 5
42000: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42001: LD_INT 0
42003: PPUSH
42004: PPUSH
42005: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42006: LD_ADDR_VAR 0 2
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42029: LD_VAR 0 1
42033: NOT
42034: IFTRUE 42067
42036: PUSH
42037: LD_VAR 0 1
42041: PPUSH
42042: CALL_OW 264
42046: PUSH
42047: LD_INT 12
42049: PUSH
42050: LD_INT 51
42052: PUSH
42053: LD_INT 32
42055: PUSH
42056: LD_INT 89
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: IN
42065: NOT
42066: OR
42067: IFFALSE 42071
// exit ;
42069: GO 42169
// for i := 1 to 3 do
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: DOUBLE
42077: LD_INT 1
42079: DEC
42080: ST_TO_ADDR
42081: LD_INT 3
42083: PUSH
42084: FOR_TO
42085: IFFALSE 42167
// begin tmp := GetCargo ( cargo , i ) ;
42087: LD_ADDR_VAR 0 4
42091: PUSH
42092: LD_VAR 0 1
42096: PPUSH
42097: LD_VAR 0 3
42101: PPUSH
42102: CALL_OW 289
42106: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42107: LD_ADDR_VAR 0 2
42111: PUSH
42112: LD_VAR 0 2
42116: PPUSH
42117: LD_VAR 0 3
42121: PPUSH
42122: LD_VAR 0 4
42126: PPUSH
42127: CALL_OW 1
42131: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42132: LD_ADDR_VAR 0 2
42136: PUSH
42137: LD_VAR 0 2
42141: PPUSH
42142: LD_INT 4
42144: PPUSH
42145: LD_VAR 0 2
42149: PUSH
42150: LD_INT 4
42152: ARRAY
42153: PUSH
42154: LD_VAR 0 4
42158: PLUS
42159: PPUSH
42160: CALL_OW 1
42164: ST_TO_ADDR
// end ;
42165: GO 42084
42167: POP
42168: POP
// end ;
42169: LD_VAR 0 2
42173: RET
// export function Length ( array ) ; begin
42174: LD_INT 0
42176: PPUSH
// result := array + 0 ;
42177: LD_ADDR_VAR 0 2
42181: PUSH
42182: LD_VAR 0 1
42186: PUSH
42187: LD_INT 0
42189: PLUS
42190: ST_TO_ADDR
// end ;
42191: LD_VAR 0 2
42195: RET
// export function PrepareArray ( array ) ; begin
42196: LD_INT 0
42198: PPUSH
// result := array diff 0 ;
42199: LD_ADDR_VAR 0 2
42203: PUSH
42204: LD_VAR 0 1
42208: PUSH
42209: LD_INT 0
42211: DIFF
42212: ST_TO_ADDR
// if not result [ 1 ] then
42213: LD_VAR 0 2
42217: PUSH
42218: LD_INT 1
42220: ARRAY
42221: NOT
42222: IFFALSE 42242
// result := Delete ( result , 1 ) ;
42224: LD_ADDR_VAR 0 2
42228: PUSH
42229: LD_VAR 0 2
42233: PPUSH
42234: LD_INT 1
42236: PPUSH
42237: CALL_OW 3
42241: ST_TO_ADDR
// end ;
42242: LD_VAR 0 2
42246: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42247: LD_INT 0
42249: PPUSH
42250: PPUSH
42251: PPUSH
42252: PPUSH
// sibRocketRange := 25 ;
42253: LD_ADDR_VAR 0 6
42257: PUSH
42258: LD_INT 25
42260: ST_TO_ADDR
// result := false ;
42261: LD_ADDR_VAR 0 4
42265: PUSH
42266: LD_INT 0
42268: ST_TO_ADDR
// for i := 0 to 5 do
42269: LD_ADDR_VAR 0 5
42273: PUSH
42274: DOUBLE
42275: LD_INT 0
42277: DEC
42278: ST_TO_ADDR
42279: LD_INT 5
42281: PUSH
42282: FOR_TO
42283: IFFALSE 42350
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42285: LD_VAR 0 1
42289: PPUSH
42290: LD_VAR 0 5
42294: PPUSH
42295: LD_VAR 0 6
42299: PPUSH
42300: CALL_OW 272
42304: PPUSH
42305: LD_VAR 0 2
42309: PPUSH
42310: LD_VAR 0 5
42314: PPUSH
42315: LD_VAR 0 6
42319: PPUSH
42320: CALL_OW 273
42324: PPUSH
42325: LD_VAR 0 3
42329: PPUSH
42330: CALL_OW 309
42334: IFFALSE 42348
// begin result := true ;
42336: LD_ADDR_VAR 0 4
42340: PUSH
42341: LD_INT 1
42343: ST_TO_ADDR
// exit ;
42344: POP
42345: POP
42346: GO 42352
// end ;
42348: GO 42282
42350: POP
42351: POP
// end ;
42352: LD_VAR 0 4
42356: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42357: LD_INT 0
42359: PPUSH
42360: PPUSH
42361: PPUSH
// if btype = b_depot then
42362: LD_VAR 0 2
42366: PUSH
42367: LD_INT 0
42369: EQUAL
42370: IFFALSE 42382
// begin result := true ;
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: LD_INT 1
42379: ST_TO_ADDR
// exit ;
42380: GO 42502
// end ; pom := GetBase ( depot ) ;
42382: LD_ADDR_VAR 0 4
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 274
42396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_VAR 0 2
42406: PPUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: CALL_OW 248
42416: PPUSH
42417: CALL_OW 450
42421: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42422: LD_ADDR_VAR 0 3
42426: PUSH
42427: LD_VAR 0 4
42431: PPUSH
42432: LD_INT 1
42434: PPUSH
42435: CALL_OW 275
42439: PUSH
42440: LD_VAR 0 5
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: GREATEREQUAL
42449: IFFALSE 42475
42451: PUSH
42452: LD_VAR 0 4
42456: PPUSH
42457: LD_INT 2
42459: PPUSH
42460: CALL_OW 275
42464: PUSH
42465: LD_VAR 0 5
42469: PUSH
42470: LD_INT 2
42472: ARRAY
42473: GREATEREQUAL
42474: AND
42475: IFFALSE 42501
42477: PUSH
42478: LD_VAR 0 4
42482: PPUSH
42483: LD_INT 3
42485: PPUSH
42486: CALL_OW 275
42490: PUSH
42491: LD_VAR 0 5
42495: PUSH
42496: LD_INT 3
42498: ARRAY
42499: GREATEREQUAL
42500: AND
42501: ST_TO_ADDR
// end ;
42502: LD_VAR 0 3
42506: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42507: LD_INT 0
42509: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42510: LD_VAR 0 1
42514: PPUSH
42515: LD_VAR 0 2
42519: PPUSH
42520: LD_INT 0
42522: PPUSH
42523: LD_INT 0
42525: PPUSH
42526: LD_INT 1
42528: PPUSH
42529: LD_INT 0
42531: PPUSH
42532: CALL_OW 587
// end ;
42536: LD_VAR 0 3
42540: RET
// export function CenterOnNow ( unit ) ; begin
42541: LD_INT 0
42543: PPUSH
// result := IsInUnit ( unit ) ;
42544: LD_ADDR_VAR 0 2
42548: PUSH
42549: LD_VAR 0 1
42553: PPUSH
42554: CALL_OW 310
42558: ST_TO_ADDR
// if not result then
42559: LD_VAR 0 2
42563: NOT
42564: IFFALSE 42576
// result := unit ;
42566: LD_ADDR_VAR 0 2
42570: PUSH
42571: LD_VAR 0 1
42575: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42576: LD_VAR 0 1
42580: PPUSH
42581: CALL_OW 87
// end ;
42585: LD_VAR 0 2
42589: RET
// export function ComMoveHex ( unit , hex ) ; begin
42590: LD_INT 0
42592: PPUSH
// if not hex then
42593: LD_VAR 0 2
42597: NOT
42598: IFFALSE 42602
// exit ;
42600: GO 42655
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42602: LD_VAR 0 2
42606: PUSH
42607: LD_INT 1
42609: ARRAY
42610: PPUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_INT 2
42618: ARRAY
42619: PPUSH
42620: CALL_OW 428
42624: IFFALSE 42628
// exit ;
42626: GO 42655
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42628: LD_VAR 0 1
42632: PPUSH
42633: LD_VAR 0 2
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PPUSH
42642: LD_VAR 0 2
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: PPUSH
42651: CALL_OW 111
// end ;
42655: LD_VAR 0 3
42659: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42660: LD_INT 0
42662: PPUSH
42663: PPUSH
42664: PPUSH
// if not unit or not enemy then
42665: LD_VAR 0 1
42669: NOT
42670: IFTRUE 42679
42672: PUSH
42673: LD_VAR 0 2
42677: NOT
42678: OR
42679: IFFALSE 42683
// exit ;
42681: GO 42809
// x := GetX ( enemy ) ;
42683: LD_ADDR_VAR 0 4
42687: PUSH
42688: LD_VAR 0 2
42692: PPUSH
42693: CALL_OW 250
42697: ST_TO_ADDR
// y := GetY ( enemy ) ;
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_VAR 0 2
42707: PPUSH
42708: CALL_OW 251
42712: ST_TO_ADDR
// if ValidHex ( x , y ) then
42713: LD_VAR 0 4
42717: PPUSH
42718: LD_VAR 0 5
42722: PPUSH
42723: CALL_OW 488
42727: IFFALSE 42809
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42729: LD_VAR 0 2
42733: PPUSH
42734: CALL_OW 247
42738: PUSH
42739: LD_INT 3
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: IN
42749: IFTRUE 42772
42751: PUSH
42752: LD_VAR 0 1
42756: PPUSH
42757: CALL_OW 255
42761: PPUSH
42762: LD_VAR 0 2
42766: PPUSH
42767: CALL_OW 292
42771: OR
42772: IFFALSE 42790
// ComAttackUnit ( unit , enemy ) else
42774: LD_VAR 0 1
42778: PPUSH
42779: LD_VAR 0 2
42783: PPUSH
42784: CALL_OW 115
42788: GO 42809
// ComAgressiveMove ( unit , x , y ) ;
42790: LD_VAR 0 1
42794: PPUSH
42795: LD_VAR 0 4
42799: PPUSH
42800: LD_VAR 0 5
42804: PPUSH
42805: CALL_OW 114
// end ;
42809: LD_VAR 0 3
42813: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42814: LD_INT 0
42816: PPUSH
42817: PPUSH
42818: PPUSH
// list := AreaToList ( area , 0 ) ;
42819: LD_ADDR_VAR 0 5
42823: PUSH
42824: LD_VAR 0 1
42828: PPUSH
42829: LD_INT 0
42831: PPUSH
42832: CALL_OW 517
42836: ST_TO_ADDR
// if not list then
42837: LD_VAR 0 5
42841: NOT
42842: IFFALSE 42846
// exit ;
42844: GO 42976
// if all then
42846: LD_VAR 0 2
42850: IFFALSE 42938
// begin for i := 1 to list [ 1 ] do
42852: LD_ADDR_VAR 0 4
42856: PUSH
42857: DOUBLE
42858: LD_INT 1
42860: DEC
42861: ST_TO_ADDR
42862: LD_VAR 0 5
42866: PUSH
42867: LD_INT 1
42869: ARRAY
42870: PUSH
42871: FOR_TO
42872: IFFALSE 42934
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_VAR 0 3
42883: PPUSH
42884: LD_VAR 0 3
42888: PUSH
42889: LD_INT 1
42891: PLUS
42892: PPUSH
42893: LD_VAR 0 5
42897: PUSH
42898: LD_INT 1
42900: ARRAY
42901: PUSH
42902: LD_VAR 0 4
42906: ARRAY
42907: PUSH
42908: LD_VAR 0 5
42912: PUSH
42913: LD_INT 2
42915: ARRAY
42916: PUSH
42917: LD_VAR 0 4
42921: ARRAY
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PPUSH
42927: CALL_OW 1
42931: ST_TO_ADDR
42932: GO 42871
42934: POP
42935: POP
// exit ;
42936: GO 42976
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42938: LD_ADDR_VAR 0 3
42942: PUSH
42943: LD_VAR 0 5
42947: PUSH
42948: LD_INT 1
42950: ARRAY
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: PUSH
42956: LD_VAR 0 5
42960: PUSH
42961: LD_INT 2
42963: ARRAY
42964: PUSH
42965: LD_INT 1
42967: ARRAY
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: EMPTY
42974: LIST
42975: ST_TO_ADDR
// end ;
42976: LD_VAR 0 3
42980: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42981: LD_INT 0
42983: PPUSH
42984: PPUSH
// list := AreaToList ( area , 0 ) ;
42985: LD_ADDR_VAR 0 4
42989: PUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: LD_INT 0
42997: PPUSH
42998: CALL_OW 517
43002: ST_TO_ADDR
// if not list then
43003: LD_VAR 0 4
43007: NOT
43008: IFFALSE 43012
// exit ;
43010: GO 43053
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43012: LD_ADDR_VAR 0 3
43016: PUSH
43017: LD_VAR 0 4
43021: PUSH
43022: LD_INT 1
43024: ARRAY
43025: PUSH
43026: LD_INT 1
43028: ARRAY
43029: PUSH
43030: LD_VAR 0 4
43034: PUSH
43035: LD_INT 2
43037: ARRAY
43038: PUSH
43039: LD_INT 1
43041: ARRAY
43042: PUSH
43043: LD_VAR 0 2
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: ST_TO_ADDR
// end ;
43053: LD_VAR 0 3
43057: RET
// export function First ( array ) ; begin
43058: LD_INT 0
43060: PPUSH
// if not array then
43061: LD_VAR 0 1
43065: NOT
43066: IFFALSE 43070
// exit ;
43068: GO 43084
// result := array [ 1 ] ;
43070: LD_ADDR_VAR 0 2
43074: PUSH
43075: LD_VAR 0 1
43079: PUSH
43080: LD_INT 1
43082: ARRAY
43083: ST_TO_ADDR
// end ;
43084: LD_VAR 0 2
43088: RET
// export function Last ( array ) ; begin
43089: LD_INT 0
43091: PPUSH
// if not array then
43092: LD_VAR 0 1
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 43117
// result := array [ array ] ;
43101: LD_ADDR_VAR 0 2
43105: PUSH
43106: LD_VAR 0 1
43110: PUSH
43111: LD_VAR 0 1
43115: ARRAY
43116: ST_TO_ADDR
// end ;
43117: LD_VAR 0 2
43121: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43122: LD_INT 0
43124: PPUSH
43125: PPUSH
// result := [ ] ;
43126: LD_ADDR_VAR 0 5
43130: PUSH
43131: EMPTY
43132: ST_TO_ADDR
// if not array then
43133: LD_VAR 0 1
43137: NOT
43138: IFFALSE 43142
// exit ;
43140: GO 43254
// for i := 1 to array do
43142: LD_ADDR_VAR 0 6
43146: PUSH
43147: DOUBLE
43148: LD_INT 1
43150: DEC
43151: ST_TO_ADDR
43152: LD_VAR 0 1
43156: PUSH
43157: FOR_TO
43158: IFFALSE 43252
// if array [ i ] [ index ] = value then
43160: LD_VAR 0 1
43164: PUSH
43165: LD_VAR 0 6
43169: ARRAY
43170: PUSH
43171: LD_VAR 0 2
43175: ARRAY
43176: PUSH
43177: LD_VAR 0 3
43181: EQUAL
43182: IFFALSE 43250
// begin if indexColumn then
43184: LD_VAR 0 4
43188: IFFALSE 43224
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43190: LD_ADDR_VAR 0 5
43194: PUSH
43195: LD_VAR 0 5
43199: PPUSH
43200: LD_VAR 0 1
43204: PUSH
43205: LD_VAR 0 6
43209: ARRAY
43210: PUSH
43211: LD_VAR 0 4
43215: ARRAY
43216: PPUSH
43217: CALL 38262 0 2
43221: ST_TO_ADDR
43222: GO 43250
// result := Join ( result , array [ i ] ) ;
43224: LD_ADDR_VAR 0 5
43228: PUSH
43229: LD_VAR 0 5
43233: PPUSH
43234: LD_VAR 0 1
43238: PUSH
43239: LD_VAR 0 6
43243: ARRAY
43244: PPUSH
43245: CALL 38262 0 2
43249: ST_TO_ADDR
// end ;
43250: GO 43157
43252: POP
43253: POP
// end ;
43254: LD_VAR 0 5
43258: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43259: LD_INT 0
43261: PPUSH
// if not vehicles or not parkingPoint then
43262: LD_VAR 0 1
43266: NOT
43267: IFTRUE 43276
43269: PUSH
43270: LD_VAR 0 2
43274: NOT
43275: OR
43276: IFFALSE 43280
// exit ;
43278: GO 43378
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43280: LD_ADDR_VAR 0 1
43284: PUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: LD_INT 50
43292: PUSH
43293: EMPTY
43294: LIST
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: LD_INT 92
43301: PUSH
43302: LD_VAR 0 2
43306: PUSH
43307: LD_INT 1
43309: ARRAY
43310: PUSH
43311: LD_VAR 0 2
43315: PUSH
43316: LD_INT 2
43318: ARRAY
43319: PUSH
43320: LD_INT 8
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PPUSH
43337: CALL_OW 72
43341: ST_TO_ADDR
// if not vehicles then
43342: LD_VAR 0 1
43346: NOT
43347: IFFALSE 43351
// exit ;
43349: GO 43378
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43351: LD_VAR 0 1
43355: PPUSH
43356: LD_VAR 0 2
43360: PUSH
43361: LD_INT 1
43363: ARRAY
43364: PPUSH
43365: LD_VAR 0 2
43369: PUSH
43370: LD_INT 2
43372: ARRAY
43373: PPUSH
43374: CALL_OW 111
// end ;
43378: LD_VAR 0 3
43382: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43383: LD_INT 0
43385: PPUSH
43386: PPUSH
43387: PPUSH
// if not side or not area then
43388: LD_VAR 0 1
43392: NOT
43393: IFTRUE 43402
43395: PUSH
43396: LD_VAR 0 2
43400: NOT
43401: OR
43402: IFFALSE 43406
// exit ;
43404: GO 43525
// tmp := AreaToList ( area , 0 ) ;
43406: LD_ADDR_VAR 0 5
43410: PUSH
43411: LD_VAR 0 2
43415: PPUSH
43416: LD_INT 0
43418: PPUSH
43419: CALL_OW 517
43423: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43424: LD_ADDR_VAR 0 4
43428: PUSH
43429: DOUBLE
43430: LD_INT 1
43432: DEC
43433: ST_TO_ADDR
43434: LD_VAR 0 5
43438: PUSH
43439: LD_INT 1
43441: ARRAY
43442: PUSH
43443: FOR_TO
43444: IFFALSE 43523
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43446: LD_VAR 0 5
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: PUSH
43455: LD_VAR 0 4
43459: ARRAY
43460: PPUSH
43461: LD_VAR 0 5
43465: PUSH
43466: LD_INT 2
43468: ARRAY
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: PPUSH
43476: CALL_OW 351
43480: IFFALSE 43521
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43482: LD_VAR 0 5
43486: PUSH
43487: LD_INT 1
43489: ARRAY
43490: PUSH
43491: LD_VAR 0 4
43495: ARRAY
43496: PPUSH
43497: LD_VAR 0 5
43501: PUSH
43502: LD_INT 2
43504: ARRAY
43505: PUSH
43506: LD_VAR 0 4
43510: ARRAY
43511: PPUSH
43512: LD_VAR 0 1
43516: PPUSH
43517: CALL_OW 244
// end ;
43521: GO 43443
43523: POP
43524: POP
// end ;
43525: LD_VAR 0 3
43529: RET
// export function UniqueArray ( array ) ; var i ; begin
43530: LD_INT 0
43532: PPUSH
43533: PPUSH
// result := [ ] ;
43534: LD_ADDR_VAR 0 2
43538: PUSH
43539: EMPTY
43540: ST_TO_ADDR
// if not array then
43541: LD_VAR 0 1
43545: NOT
43546: IFFALSE 43550
// exit ;
43548: GO 43611
// for i := 1 to array do
43550: LD_ADDR_VAR 0 3
43554: PUSH
43555: DOUBLE
43556: LD_INT 1
43558: DEC
43559: ST_TO_ADDR
43560: LD_VAR 0 1
43564: PUSH
43565: FOR_TO
43566: IFFALSE 43609
// if not array [ i ] in result then
43568: LD_VAR 0 1
43572: PUSH
43573: LD_VAR 0 3
43577: ARRAY
43578: PUSH
43579: LD_VAR 0 2
43583: IN
43584: NOT
43585: IFFALSE 43607
// result := Join ( result , i ) ;
43587: LD_ADDR_VAR 0 2
43591: PUSH
43592: LD_VAR 0 2
43596: PPUSH
43597: LD_VAR 0 3
43601: PPUSH
43602: CALL 38262 0 2
43606: ST_TO_ADDR
43607: GO 43565
43609: POP
43610: POP
// end ;
43611: LD_VAR 0 2
43615: RET
