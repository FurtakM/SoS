// export function AddToBuildingsArray ( var x , unit ) ; var type ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// type := GetBType ( unit ) ;
   4: LD_ADDR_VAR 0 4
   8: PUSH
   9: LD_VAR 0 2
  13: PPUSH
  14: CALL_OW 266
  18: ST_TO_ADDR
// if type = b_barracks then
  19: LD_VAR 0 4
  23: PUSH
  24: LD_INT 5
  26: EQUAL
  27: IFFALSE 85
// begin x := Join ( x , [ b_armoury , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
  29: LD_VAR 0 1
  33: PUSH
  34: LD_FROM_VAR 0 1
  38: PPUSH
  39: LD_INT 4
  41: PUSH
  42: LD_VAR 0 2
  46: PPUSH
  47: CALL_OW 250
  51: PUSH
  52: LD_VAR 0 2
  56: PPUSH
  57: CALL_OW 251
  61: PUSH
  62: LD_VAR 0 2
  66: PPUSH
  67: CALL_OW 254
  71: PUSH
  72: EMPTY
  73: LIST
  74: LIST
  75: LIST
  76: LIST
  77: PPUSH
  78: CALL 38613 0 2
  82: ST_TO_ADDR
// exit ;
  83: GO 284
// end ; if type in [ b_lab , b_lab_half , b_lab_full ] then
  85: LD_VAR 0 4
  89: PUSH
  90: LD_INT 6
  92: PUSH
  93: LD_INT 7
  95: PUSH
  96: LD_INT 8
  98: PUSH
  99: EMPTY
 100: LIST
 101: LIST
 102: LIST
 103: IN
 104: IFFALSE 162
// begin x := Join ( x , [ b_lab , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
 106: LD_VAR 0 1
 110: PUSH
 111: LD_FROM_VAR 0 1
 115: PPUSH
 116: LD_INT 6
 118: PUSH
 119: LD_VAR 0 2
 123: PPUSH
 124: CALL_OW 250
 128: PUSH
 129: LD_VAR 0 2
 133: PPUSH
 134: CALL_OW 251
 138: PUSH
 139: LD_VAR 0 2
 143: PPUSH
 144: CALL_OW 254
 148: PUSH
 149: EMPTY
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: PPUSH
 155: CALL 38613 0 2
 159: ST_TO_ADDR
// exit ;
 160: GO 284
// end ; if type = b_factory then
 162: LD_VAR 0 4
 166: PUSH
 167: LD_INT 3
 169: EQUAL
 170: IFFALSE 228
// begin x := Join ( x , [ b_workshop , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
 172: LD_VAR 0 1
 176: PUSH
 177: LD_FROM_VAR 0 1
 181: PPUSH
 182: LD_INT 2
 184: PUSH
 185: LD_VAR 0 2
 189: PPUSH
 190: CALL_OW 250
 194: PUSH
 195: LD_VAR 0 2
 199: PPUSH
 200: CALL_OW 251
 204: PUSH
 205: LD_VAR 0 2
 209: PPUSH
 210: CALL_OW 254
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: PPUSH
 221: CALL 38613 0 2
 225: ST_TO_ADDR
// exit ;
 226: GO 284
// end ; x := Join ( x , [ type , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
 228: LD_VAR 0 1
 232: PUSH
 233: LD_FROM_VAR 0 1
 237: PPUSH
 238: LD_VAR 0 4
 242: PUSH
 243: LD_VAR 0 2
 247: PPUSH
 248: CALL_OW 250
 252: PUSH
 253: LD_VAR 0 2
 257: PPUSH
 258: CALL_OW 251
 262: PUSH
 263: LD_VAR 0 2
 267: PPUSH
 268: CALL_OW 254
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: PPUSH
 279: CALL 38613 0 2
 283: ST_TO_ADDR
// end ;
 284: LD_VAR 0 3
 288: RET
// export ruBuildings1 , ruBuildings2 , ruBuildings3 , ruBuildings4 ; export function Init ; begin
 289: LD_INT 0
 291: PPUSH
// ruBuildings1 := [ ] ;
 292: LD_ADDR_EXP 1
 296: PUSH
 297: EMPTY
 298: ST_TO_ADDR
// ruBuildings2 := [ ] ;
 299: LD_ADDR_EXP 2
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// ruBuildings3 := [ ] ;
 306: LD_ADDR_EXP 3
 310: PUSH
 311: EMPTY
 312: ST_TO_ADDR
// ruBuildings4 := [ ] ;
 313: LD_ADDR_EXP 4
 317: PUSH
 318: EMPTY
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 1
 324: RET
// starting begin ResetFog ;
 325: CALL_OW 335
// Init ;
 329: CALL 289 0 0
// end ;
 333: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
 334: LD_VAR 0 1
 338: PPUSH
 339: CALL_OW 255
 343: PUSH
 344: LD_INT 1
 346: EQUAL
 347: IFFALSE 364
 349: PUSH
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 247
 359: PUSH
 360: LD_INT 3
 362: EQUAL
 363: AND
 364: IFFALSE 478
// begin if IsInArea ( unit , RuBase1 ) then
 366: LD_VAR 0 1
 370: PPUSH
 371: LD_INT 1
 373: PPUSH
 374: CALL_OW 308
 378: IFFALSE 394
// AddToBuildingsArray ( RuBuildings1 , unit ) ;
 380: LD_ADDR_EXP 1
 384: PPUSH
 385: LD_VAR 0 1
 389: PPUSH
 390: CALL 0 0 2
// if IsInArea ( unit , RuBase2 ) then
 394: LD_VAR 0 1
 398: PPUSH
 399: LD_INT 2
 401: PPUSH
 402: CALL_OW 308
 406: IFFALSE 422
// AddToBuildingsArray ( RuBuildings2 , unit ) ;
 408: LD_ADDR_EXP 2
 412: PPUSH
 413: LD_VAR 0 1
 417: PPUSH
 418: CALL 0 0 2
// if IsInArea ( unit , RuBase3 ) then
 422: LD_VAR 0 1
 426: PPUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 308
 434: IFFALSE 450
// AddToBuildingsArray ( RuBuildings3 , unit ) ;
 436: LD_ADDR_EXP 3
 440: PPUSH
 441: LD_VAR 0 1
 445: PPUSH
 446: CALL 0 0 2
// if IsInArea ( unit , RuBase4 ) then
 450: LD_VAR 0 1
 454: PPUSH
 455: LD_INT 4
 457: PPUSH
 458: CALL_OW 308
 462: IFFALSE 478
// AddToBuildingsArray ( RuBuildings4 , unit ) ;
 464: LD_ADDR_EXP 4
 468: PPUSH
 469: LD_VAR 0 1
 473: PPUSH
 474: CALL 0 0 2
// end ; end ; end_of_file
 478: PPOPN 1
 480: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// if exist_mode then
 485: LD_VAR 0 2
 489: IFFALSE 535
// begin unit := CreateCharacter ( prefix & ident ) ;
 491: LD_ADDR_VAR 0 5
 495: PUSH
 496: LD_VAR 0 3
 500: PUSH
 501: LD_VAR 0 1
 505: STR
 506: PPUSH
 507: CALL_OW 34
 511: ST_TO_ADDR
// if unit then
 512: LD_VAR 0 5
 516: IFFALSE 533
// DeleteCharacters ( prefix & ident ) ;
 518: LD_VAR 0 3
 522: PUSH
 523: LD_VAR 0 1
 527: STR
 528: PPUSH
 529: CALL_OW 40
// end else
 533: GO 550
// unit := NewCharacter ( ident ) ;
 535: LD_ADDR_VAR 0 5
 539: PUSH
 540: LD_VAR 0 1
 544: PPUSH
 545: CALL_OW 25
 549: ST_TO_ADDR
// result := unit ;
 550: LD_ADDR_VAR 0 4
 554: PUSH
 555: LD_VAR 0 5
 559: ST_TO_ADDR
// end ;
 560: LD_VAR 0 4
 564: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 565: LD_INT 0
 567: PPUSH
 568: PPUSH
// if exist_mode then
 569: LD_VAR 0 2
 573: IFFALSE 598
// unit := CreateCharacter ( prefix & ident ) else
 575: LD_ADDR_VAR 0 5
 579: PUSH
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 1
 589: STR
 590: PPUSH
 591: CALL_OW 34
 595: ST_TO_ADDR
 596: GO 613
// unit := NewCharacter ( ident ) ;
 598: LD_ADDR_VAR 0 5
 602: PUSH
 603: LD_VAR 0 1
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// result := unit ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_VAR 0 5
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 4
 627: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 628: LD_INT 0
 630: PPUSH
 631: PPUSH
// if not side or not nation then
 632: LD_VAR 0 1
 636: NOT
 637: IFTRUE 646
 639: PUSH
 640: LD_VAR 0 2
 644: NOT
 645: OR
 646: IFFALSE 650
// exit ;
 648: GO 1420
// case nation of nation_american :
 650: LD_VAR 0 2
 654: PUSH
 655: LD_INT 1
 657: DOUBLE
 658: EQUAL
 659: IFTRUE 663
 661: GO 877
 663: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 664: LD_ADDR_VAR 0 4
 668: PUSH
 669: LD_INT 35
 671: PUSH
 672: LD_INT 45
 674: PUSH
 675: LD_INT 46
 677: PUSH
 678: LD_INT 47
 680: PUSH
 681: LD_INT 82
 683: PUSH
 684: LD_INT 83
 686: PUSH
 687: LD_INT 84
 689: PUSH
 690: LD_INT 85
 692: PUSH
 693: LD_INT 86
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 6
 704: PUSH
 705: LD_INT 15
 707: PUSH
 708: LD_INT 16
 710: PUSH
 711: LD_INT 7
 713: PUSH
 714: LD_INT 12
 716: PUSH
 717: LD_INT 13
 719: PUSH
 720: LD_INT 10
 722: PUSH
 723: LD_INT 14
 725: PUSH
 726: LD_INT 20
 728: PUSH
 729: LD_INT 21
 731: PUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 25
 737: PUSH
 738: LD_INT 32
 740: PUSH
 741: LD_INT 27
 743: PUSH
 744: LD_INT 36
 746: PUSH
 747: LD_INT 69
 749: PUSH
 750: LD_INT 39
 752: PUSH
 753: LD_INT 34
 755: PUSH
 756: LD_INT 40
 758: PUSH
 759: LD_INT 48
 761: PUSH
 762: LD_INT 49
 764: PUSH
 765: LD_INT 50
 767: PUSH
 768: LD_INT 51
 770: PUSH
 771: LD_INT 52
 773: PUSH
 774: LD_INT 53
 776: PUSH
 777: LD_INT 54
 779: PUSH
 780: LD_INT 55
 782: PUSH
 783: LD_INT 56
 785: PUSH
 786: LD_INT 57
 788: PUSH
 789: LD_INT 58
 791: PUSH
 792: LD_INT 59
 794: PUSH
 795: LD_INT 60
 797: PUSH
 798: LD_INT 61
 800: PUSH
 801: LD_INT 62
 803: PUSH
 804: LD_INT 80
 806: PUSH
 807: LD_INT 82
 809: PUSH
 810: LD_INT 83
 812: PUSH
 813: LD_INT 84
 815: PUSH
 816: LD_INT 85
 818: PUSH
 819: LD_INT 86
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: ST_TO_ADDR
 875: GO 1342
 877: LD_INT 2
 879: DOUBLE
 880: EQUAL
 881: IFTRUE 885
 883: GO 1111
 885: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
 886: LD_ADDR_VAR 0 4
 890: PUSH
 891: LD_INT 35
 893: PUSH
 894: LD_INT 45
 896: PUSH
 897: LD_INT 46
 899: PUSH
 900: LD_INT 47
 902: PUSH
 903: LD_INT 82
 905: PUSH
 906: LD_INT 83
 908: PUSH
 909: LD_INT 84
 911: PUSH
 912: LD_INT 85
 914: PUSH
 915: LD_INT 87
 917: PUSH
 918: LD_INT 70
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: LD_INT 11
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: LD_INT 4
 932: PUSH
 933: LD_INT 5
 935: PUSH
 936: LD_INT 6
 938: PUSH
 939: LD_INT 15
 941: PUSH
 942: LD_INT 18
 944: PUSH
 945: LD_INT 7
 947: PUSH
 948: LD_INT 17
 950: PUSH
 951: LD_INT 8
 953: PUSH
 954: LD_INT 20
 956: PUSH
 957: LD_INT 21
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_INT 72
 965: PUSH
 966: LD_INT 26
 968: PUSH
 969: LD_INT 69
 971: PUSH
 972: LD_INT 39
 974: PUSH
 975: LD_INT 40
 977: PUSH
 978: LD_INT 41
 980: PUSH
 981: LD_INT 42
 983: PUSH
 984: LD_INT 43
 986: PUSH
 987: LD_INT 48
 989: PUSH
 990: LD_INT 49
 992: PUSH
 993: LD_INT 50
 995: PUSH
 996: LD_INT 51
 998: PUSH
 999: LD_INT 52
1001: PUSH
1002: LD_INT 53
1004: PUSH
1005: LD_INT 54
1007: PUSH
1008: LD_INT 55
1010: PUSH
1011: LD_INT 56
1013: PUSH
1014: LD_INT 60
1016: PUSH
1017: LD_INT 61
1019: PUSH
1020: LD_INT 62
1022: PUSH
1023: LD_INT 66
1025: PUSH
1026: LD_INT 67
1028: PUSH
1029: LD_INT 68
1031: PUSH
1032: LD_INT 81
1034: PUSH
1035: LD_INT 82
1037: PUSH
1038: LD_INT 83
1040: PUSH
1041: LD_INT 84
1043: PUSH
1044: LD_INT 85
1046: PUSH
1047: LD_INT 87
1049: PUSH
1050: LD_INT 88
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: ST_TO_ADDR
1109: GO 1342
1111: LD_INT 3
1113: DOUBLE
1114: EQUAL
1115: IFTRUE 1119
1117: GO 1341
1119: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1120: LD_ADDR_VAR 0 4
1124: PUSH
1125: LD_INT 46
1127: PUSH
1128: LD_INT 47
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 2
1136: PUSH
1137: LD_INT 82
1139: PUSH
1140: LD_INT 83
1142: PUSH
1143: LD_INT 84
1145: PUSH
1146: LD_INT 85
1148: PUSH
1149: LD_INT 86
1151: PUSH
1152: LD_INT 11
1154: PUSH
1155: LD_INT 9
1157: PUSH
1158: LD_INT 20
1160: PUSH
1161: LD_INT 19
1163: PUSH
1164: LD_INT 21
1166: PUSH
1167: LD_INT 24
1169: PUSH
1170: LD_INT 22
1172: PUSH
1173: LD_INT 25
1175: PUSH
1176: LD_INT 28
1178: PUSH
1179: LD_INT 29
1181: PUSH
1182: LD_INT 30
1184: PUSH
1185: LD_INT 31
1187: PUSH
1188: LD_INT 37
1190: PUSH
1191: LD_INT 38
1193: PUSH
1194: LD_INT 32
1196: PUSH
1197: LD_INT 27
1199: PUSH
1200: LD_INT 33
1202: PUSH
1203: LD_INT 69
1205: PUSH
1206: LD_INT 39
1208: PUSH
1209: LD_INT 34
1211: PUSH
1212: LD_INT 40
1214: PUSH
1215: LD_INT 71
1217: PUSH
1218: LD_INT 23
1220: PUSH
1221: LD_INT 44
1223: PUSH
1224: LD_INT 48
1226: PUSH
1227: LD_INT 49
1229: PUSH
1230: LD_INT 50
1232: PUSH
1233: LD_INT 51
1235: PUSH
1236: LD_INT 52
1238: PUSH
1239: LD_INT 53
1241: PUSH
1242: LD_INT 54
1244: PUSH
1245: LD_INT 55
1247: PUSH
1248: LD_INT 56
1250: PUSH
1251: LD_INT 57
1253: PUSH
1254: LD_INT 58
1256: PUSH
1257: LD_INT 59
1259: PUSH
1260: LD_INT 63
1262: PUSH
1263: LD_INT 64
1265: PUSH
1266: LD_INT 65
1268: PUSH
1269: LD_INT 82
1271: PUSH
1272: LD_INT 83
1274: PUSH
1275: LD_INT 84
1277: PUSH
1278: LD_INT 85
1280: PUSH
1281: LD_INT 86
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: ST_TO_ADDR
1339: GO 1342
1341: POP
// if state > - 1 and state < 3 then
1342: LD_VAR 0 3
1346: PUSH
1347: LD_INT 1
1349: NEG
1350: GREATER
1351: IFFALSE 1363
1353: PUSH
1354: LD_VAR 0 3
1358: PUSH
1359: LD_INT 3
1361: LESS
1362: AND
1363: IFFALSE 1420
// for i in result do
1365: LD_ADDR_VAR 0 5
1369: PUSH
1370: LD_VAR 0 4
1374: PUSH
1375: FOR_IN
1376: IFFALSE 1418
// if GetTech ( i , side ) <> state then
1378: LD_VAR 0 5
1382: PPUSH
1383: LD_VAR 0 1
1387: PPUSH
1388: CALL_OW 321
1392: PUSH
1393: LD_VAR 0 3
1397: NONEQUAL
1398: IFFALSE 1416
// result := result diff i ;
1400: LD_ADDR_VAR 0 4
1404: PUSH
1405: LD_VAR 0 4
1409: PUSH
1410: LD_VAR 0 5
1414: DIFF
1415: ST_TO_ADDR
1416: GO 1375
1418: POP
1419: POP
// end ;
1420: LD_VAR 0 4
1424: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1425: LD_INT 0
1427: PPUSH
1428: PPUSH
1429: PPUSH
// result := true ;
1430: LD_ADDR_VAR 0 3
1434: PUSH
1435: LD_INT 1
1437: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_VAR 0 2
1447: PPUSH
1448: CALL_OW 480
1452: ST_TO_ADDR
// if not tmp then
1453: LD_VAR 0 5
1457: NOT
1458: IFFALSE 1462
// exit ;
1460: GO 1511
// for i in tmp do
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_VAR 0 5
1471: PUSH
1472: FOR_IN
1473: IFFALSE 1509
// if GetTech ( i , side ) <> state_researched then
1475: LD_VAR 0 4
1479: PPUSH
1480: LD_VAR 0 1
1484: PPUSH
1485: CALL_OW 321
1489: PUSH
1490: LD_INT 2
1492: NONEQUAL
1493: IFFALSE 1507
// begin result := false ;
1495: LD_ADDR_VAR 0 3
1499: PUSH
1500: LD_INT 0
1502: ST_TO_ADDR
// exit ;
1503: POP
1504: POP
1505: GO 1511
// end ;
1507: GO 1472
1509: POP
1510: POP
// end ;
1511: LD_VAR 0 3
1515: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1516: LD_INT 0
1518: PPUSH
1519: PPUSH
1520: PPUSH
1521: PPUSH
1522: PPUSH
1523: PPUSH
1524: PPUSH
1525: PPUSH
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1531: LD_VAR 0 1
1535: NOT
1536: IFTRUE 1553
1538: PUSH
1539: LD_VAR 0 1
1543: PPUSH
1544: CALL_OW 257
1548: PUSH
1549: LD_INT 9
1551: NONEQUAL
1552: OR
1553: IFFALSE 1557
// exit ;
1555: GO 2136
// side := GetSide ( unit ) ;
1557: LD_ADDR_VAR 0 9
1561: PUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: CALL_OW 255
1571: ST_TO_ADDR
// tech_space := tech_spacanom ;
1572: LD_ADDR_VAR 0 12
1576: PUSH
1577: LD_INT 29
1579: ST_TO_ADDR
// tech_time := tech_taurad ;
1580: LD_ADDR_VAR 0 13
1584: PUSH
1585: LD_INT 28
1587: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1588: LD_ADDR_VAR 0 11
1592: PUSH
1593: LD_VAR 0 1
1597: PPUSH
1598: CALL_OW 310
1602: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1603: LD_VAR 0 11
1607: PPUSH
1608: CALL_OW 247
1612: PUSH
1613: LD_INT 2
1615: EQUAL
1616: IFFALSE 1620
// exit ;
1618: GO 2136
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1620: LD_ADDR_VAR 0 8
1624: PUSH
1625: LD_INT 81
1627: PUSH
1628: LD_VAR 0 9
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 3
1639: PUSH
1640: LD_INT 21
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PPUSH
1658: CALL_OW 69
1662: ST_TO_ADDR
// if not tmp then
1663: LD_VAR 0 8
1667: NOT
1668: IFFALSE 1672
// exit ;
1670: GO 2136
// if in_unit then
1672: LD_VAR 0 11
1676: IFFALSE 1700
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1678: LD_ADDR_VAR 0 10
1682: PUSH
1683: LD_VAR 0 8
1687: PPUSH
1688: LD_VAR 0 11
1692: PPUSH
1693: CALL_OW 74
1697: ST_TO_ADDR
1698: GO 1720
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1700: LD_ADDR_VAR 0 10
1704: PUSH
1705: LD_VAR 0 8
1709: PPUSH
1710: LD_VAR 0 1
1714: PPUSH
1715: CALL_OW 74
1719: ST_TO_ADDR
// if not enemy then
1720: LD_VAR 0 10
1724: NOT
1725: IFFALSE 1729
// exit ;
1727: GO 2136
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1729: LD_VAR 0 11
1733: IFFALSE 1755
1735: PUSH
1736: LD_VAR 0 11
1740: PPUSH
1741: LD_VAR 0 10
1745: PPUSH
1746: CALL_OW 296
1750: PUSH
1751: LD_INT 13
1753: GREATER
1754: AND
1755: IFTRUE 1777
1757: PUSH
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_VAR 0 10
1767: PPUSH
1768: CALL_OW 296
1772: PUSH
1773: LD_INT 12
1775: GREATER
1776: OR
1777: IFFALSE 1781
// exit ;
1779: GO 2136
// missile := [ 1 ] ;
1781: LD_ADDR_VAR 0 14
1785: PUSH
1786: LD_INT 1
1788: PUSH
1789: EMPTY
1790: LIST
1791: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1792: LD_VAR 0 9
1796: PPUSH
1797: LD_VAR 0 12
1801: PPUSH
1802: CALL_OW 325
1806: IFFALSE 1835
// missile := Replace ( missile , missile + 1 , 2 ) ;
1808: LD_ADDR_VAR 0 14
1812: PUSH
1813: LD_VAR 0 14
1817: PPUSH
1818: LD_VAR 0 14
1822: PUSH
1823: LD_INT 1
1825: PLUS
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 1
1834: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1835: LD_VAR 0 9
1839: PPUSH
1840: LD_VAR 0 13
1844: PPUSH
1845: CALL_OW 325
1849: IFFALSE 1873
1851: PUSH
1852: LD_VAR 0 10
1856: PPUSH
1857: CALL_OW 255
1861: PPUSH
1862: LD_VAR 0 13
1866: PPUSH
1867: CALL_OW 325
1871: NOT
1872: AND
1873: IFFALSE 1902
// missile := Replace ( missile , missile + 1 , 3 ) ;
1875: LD_ADDR_VAR 0 14
1879: PUSH
1880: LD_VAR 0 14
1884: PPUSH
1885: LD_VAR 0 14
1889: PUSH
1890: LD_INT 1
1892: PLUS
1893: PPUSH
1894: LD_INT 3
1896: PPUSH
1897: CALL_OW 1
1901: ST_TO_ADDR
// if missile < 2 then
1902: LD_VAR 0 14
1906: PUSH
1907: LD_INT 2
1909: LESS
1910: IFFALSE 1914
// exit ;
1912: GO 2136
// x := GetX ( enemy ) ;
1914: LD_ADDR_VAR 0 4
1918: PUSH
1919: LD_VAR 0 10
1923: PPUSH
1924: CALL_OW 250
1928: ST_TO_ADDR
// y := GetY ( enemy ) ;
1929: LD_ADDR_VAR 0 5
1933: PUSH
1934: LD_VAR 0 10
1938: PPUSH
1939: CALL_OW 251
1943: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1944: LD_ADDR_VAR 0 6
1948: PUSH
1949: LD_VAR 0 4
1953: PUSH
1954: LD_INT 1
1956: NEG
1957: PPUSH
1958: LD_INT 1
1960: PPUSH
1961: CALL_OW 12
1965: PLUS
1966: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1967: LD_ADDR_VAR 0 7
1971: PUSH
1972: LD_VAR 0 5
1976: PUSH
1977: LD_INT 1
1979: NEG
1980: PPUSH
1981: LD_INT 1
1983: PPUSH
1984: CALL_OW 12
1988: PLUS
1989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1990: LD_VAR 0 6
1994: PPUSH
1995: LD_VAR 0 7
1999: PPUSH
2000: CALL_OW 488
2004: NOT
2005: IFFALSE 2027
// begin _x := x ;
2007: LD_ADDR_VAR 0 6
2011: PUSH
2012: LD_VAR 0 4
2016: ST_TO_ADDR
// _y := y ;
2017: LD_ADDR_VAR 0 7
2021: PUSH
2022: LD_VAR 0 5
2026: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_INT 1
2034: PPUSH
2035: LD_VAR 0 14
2039: PPUSH
2040: CALL_OW 12
2044: ST_TO_ADDR
// case i of 1 :
2045: LD_VAR 0 3
2049: PUSH
2050: LD_INT 1
2052: DOUBLE
2053: EQUAL
2054: IFTRUE 2058
2056: GO 2075
2058: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2059: LD_VAR 0 1
2063: PPUSH
2064: LD_VAR 0 10
2068: PPUSH
2069: CALL_OW 115
2073: GO 2136
2075: LD_INT 2
2077: DOUBLE
2078: EQUAL
2079: IFTRUE 2083
2081: GO 2105
2083: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_VAR 0 6
2093: PPUSH
2094: LD_VAR 0 7
2098: PPUSH
2099: CALL_OW 153
2103: GO 2136
2105: LD_INT 3
2107: DOUBLE
2108: EQUAL
2109: IFTRUE 2113
2111: GO 2135
2113: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2114: LD_VAR 0 1
2118: PPUSH
2119: LD_VAR 0 6
2123: PPUSH
2124: LD_VAR 0 7
2128: PPUSH
2129: CALL_OW 154
2133: GO 2136
2135: POP
// end ;
2136: LD_VAR 0 2
2140: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2141: LD_INT 0
2143: PPUSH
2144: PPUSH
2145: PPUSH
2146: PPUSH
2147: PPUSH
2148: PPUSH
// if not unit or not building then
2149: LD_VAR 0 1
2153: NOT
2154: IFTRUE 2163
2156: PUSH
2157: LD_VAR 0 2
2161: NOT
2162: OR
2163: IFFALSE 2167
// exit ;
2165: GO 2325
// x := GetX ( building ) ;
2167: LD_ADDR_VAR 0 5
2171: PUSH
2172: LD_VAR 0 2
2176: PPUSH
2177: CALL_OW 250
2181: ST_TO_ADDR
// y := GetY ( building ) ;
2182: LD_ADDR_VAR 0 6
2186: PUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 251
2196: ST_TO_ADDR
// for i := 0 to 5 do
2197: LD_ADDR_VAR 0 4
2201: PUSH
2202: DOUBLE
2203: LD_INT 0
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 5
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2323
// begin _x := ShiftX ( x , i , 3 ) ;
2213: LD_ADDR_VAR 0 7
2217: PUSH
2218: LD_VAR 0 5
2222: PPUSH
2223: LD_VAR 0 4
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: CALL_OW 272
2235: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_VAR 0 6
2245: PPUSH
2246: LD_VAR 0 4
2250: PPUSH
2251: LD_INT 3
2253: PPUSH
2254: CALL_OW 273
2258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2259: LD_VAR 0 7
2263: PPUSH
2264: LD_VAR 0 8
2268: PPUSH
2269: CALL_OW 488
2273: NOT
2274: IFFALSE 2278
// continue ;
2276: GO 2210
// if HexInfo ( _x , _y ) = 0 then
2278: LD_VAR 0 7
2282: PPUSH
2283: LD_VAR 0 8
2287: PPUSH
2288: CALL_OW 428
2292: PUSH
2293: LD_INT 0
2295: EQUAL
2296: IFFALSE 2321
// begin ComMoveXY ( unit , _x , _y ) ;
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_VAR 0 7
2307: PPUSH
2308: LD_VAR 0 8
2312: PPUSH
2313: CALL_OW 111
// exit ;
2317: POP
2318: POP
2319: GO 2325
// end ; end ;
2321: GO 2210
2323: POP
2324: POP
// end ;
2325: LD_VAR 0 3
2329: RET
// export function ScanBase ( side , base_area ) ; begin
2330: LD_INT 0
2332: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: LD_VAR 0 2
2342: PPUSH
2343: LD_INT 81
2345: PUSH
2346: LD_VAR 0 1
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PPUSH
2355: CALL_OW 70
2359: ST_TO_ADDR
// end ;
2360: LD_VAR 0 3
2364: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
// result := false ;
2371: LD_ADDR_VAR 0 2
2375: PUSH
2376: LD_INT 0
2378: ST_TO_ADDR
// side := GetSide ( unit ) ;
2379: LD_ADDR_VAR 0 3
2383: PUSH
2384: LD_VAR 0 1
2388: PPUSH
2389: CALL_OW 255
2393: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 248
2408: ST_TO_ADDR
// case nat of 1 :
2409: LD_VAR 0 4
2413: PUSH
2414: LD_INT 1
2416: DOUBLE
2417: EQUAL
2418: IFTRUE 2422
2420: GO 2433
2422: POP
// tech := tech_lassight ; 2 :
2423: LD_ADDR_VAR 0 5
2427: PUSH
2428: LD_INT 12
2430: ST_TO_ADDR
2431: GO 2472
2433: LD_INT 2
2435: DOUBLE
2436: EQUAL
2437: IFTRUE 2441
2439: GO 2452
2441: POP
// tech := tech_mortar ; 3 :
2442: LD_ADDR_VAR 0 5
2446: PUSH
2447: LD_INT 41
2449: ST_TO_ADDR
2450: GO 2472
2452: LD_INT 3
2454: DOUBLE
2455: EQUAL
2456: IFTRUE 2460
2458: GO 2471
2460: POP
// tech := tech_bazooka ; end ;
2461: LD_ADDR_VAR 0 5
2465: PUSH
2466: LD_INT 44
2468: ST_TO_ADDR
2469: GO 2472
2471: POP
// if Researched ( side , tech ) then
2472: LD_VAR 0 3
2476: PPUSH
2477: LD_VAR 0 5
2481: PPUSH
2482: CALL_OW 325
2486: IFFALSE 2513
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: LD_INT 5
2495: PUSH
2496: LD_INT 8
2498: PUSH
2499: LD_INT 9
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 4
2511: ARRAY
2512: ST_TO_ADDR
// end ;
2513: LD_VAR 0 2
2517: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2518: LD_INT 0
2520: PPUSH
2521: PPUSH
2522: PPUSH
// if not mines then
2523: LD_VAR 0 2
2527: NOT
2528: IFFALSE 2532
// exit ;
2530: GO 2676
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2532: LD_ADDR_VAR 0 5
2536: PUSH
2537: LD_INT 81
2539: PUSH
2540: LD_VAR 0 1
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 3
2551: PUSH
2552: LD_INT 21
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 69
2574: ST_TO_ADDR
// for i in mines do
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_VAR 0 2
2584: PUSH
2585: FOR_IN
2586: IFFALSE 2674
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2588: LD_VAR 0 4
2592: PUSH
2593: LD_INT 1
2595: ARRAY
2596: PPUSH
2597: LD_VAR 0 4
2601: PUSH
2602: LD_INT 2
2604: ARRAY
2605: PPUSH
2606: CALL_OW 458
2610: NOT
2611: IFFALSE 2615
// continue ;
2613: GO 2585
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: LD_VAR 0 4
2628: PUSH
2629: LD_INT 2
2631: ARRAY
2632: PPUSH
2633: CALL_OW 428
2637: PUSH
2638: LD_VAR 0 5
2642: IN
2643: IFFALSE 2672
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2645: LD_VAR 0 4
2649: PUSH
2650: LD_INT 1
2652: ARRAY
2653: PPUSH
2654: LD_VAR 0 4
2658: PUSH
2659: LD_INT 2
2661: ARRAY
2662: PPUSH
2663: LD_VAR 0 1
2667: PPUSH
2668: CALL_OW 456
// end ;
2672: GO 2585
2674: POP
2675: POP
// end ;
2676: LD_VAR 0 3
2680: RET
// export function Count ( array ) ; begin
2681: LD_INT 0
2683: PPUSH
// result := array + 0 ;
2684: LD_ADDR_VAR 0 2
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: LD_INT 0
2696: PLUS
2697: ST_TO_ADDR
// end ;
2698: LD_VAR 0 2
2702: RET
// export function IsEmpty ( building ) ; begin
2703: LD_INT 0
2705: PPUSH
// if not building then
2706: LD_VAR 0 1
2710: NOT
2711: IFFALSE 2715
// exit ;
2713: GO 2758
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: LD_VAR 0 1
2724: PUSH
2725: LD_INT 22
2727: PUSH
2728: LD_VAR 0 1
2732: PPUSH
2733: CALL_OW 255
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 58
2744: PUSH
2745: EMPTY
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 69
2756: IN
2757: ST_TO_ADDR
// end ;
2758: LD_VAR 0 2
2762: RET
// export function IsNotFull ( building ) ; var places ; begin
2763: LD_INT 0
2765: PPUSH
2766: PPUSH
// if not building then
2767: LD_VAR 0 1
2771: NOT
2772: IFFALSE 2776
// exit ;
2774: GO 2804
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2776: LD_ADDR_VAR 0 2
2780: PUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 3
2788: PUSH
2789: LD_INT 62
2791: PUSH
2792: EMPTY
2793: LIST
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: PPUSH
2799: CALL_OW 72
2803: ST_TO_ADDR
// end ;
2804: LD_VAR 0 2
2808: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
// tmp := [ ] ;
2815: LD_ADDR_VAR 0 3
2819: PUSH
2820: EMPTY
2821: ST_TO_ADDR
// list := [ ] ;
2822: LD_ADDR_VAR 0 5
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// for i = 16 to 25 do
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: DOUBLE
2835: LD_INT 16
2837: DEC
2838: ST_TO_ADDR
2839: LD_INT 25
2841: PUSH
2842: FOR_TO
2843: IFFALSE 2916
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2845: LD_ADDR_VAR 0 3
2849: PUSH
2850: LD_VAR 0 3
2854: PUSH
2855: LD_INT 22
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 255
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_INT 91
2874: PUSH
2875: LD_VAR 0 1
2879: PUSH
2880: LD_INT 6
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 30
2890: PUSH
2891: LD_VAR 0 4
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: LIST
2904: PUSH
2905: EMPTY
2906: LIST
2907: PPUSH
2908: CALL_OW 69
2912: ADD
2913: ST_TO_ADDR
2914: GO 2842
2916: POP
2917: POP
// for i = 1 to tmp do
2918: LD_ADDR_VAR 0 4
2922: PUSH
2923: DOUBLE
2924: LD_INT 1
2926: DEC
2927: ST_TO_ADDR
2928: LD_VAR 0 3
2932: PUSH
2933: FOR_TO
2934: IFFALSE 3022
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 5
2945: PUSH
2946: LD_VAR 0 3
2950: PUSH
2951: LD_VAR 0 4
2955: ARRAY
2956: PPUSH
2957: CALL_OW 266
2961: PUSH
2962: LD_VAR 0 3
2966: PUSH
2967: LD_VAR 0 4
2971: ARRAY
2972: PPUSH
2973: CALL_OW 250
2977: PUSH
2978: LD_VAR 0 3
2982: PUSH
2983: LD_VAR 0 4
2987: ARRAY
2988: PPUSH
2989: CALL_OW 251
2993: PUSH
2994: LD_VAR 0 3
2998: PUSH
2999: LD_VAR 0 4
3003: ARRAY
3004: PPUSH
3005: CALL_OW 254
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: ADD
3019: ST_TO_ADDR
3020: GO 2933
3022: POP
3023: POP
// result := list ;
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: LD_VAR 0 5
3033: ST_TO_ADDR
// end ;
3034: LD_VAR 0 2
3038: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
// if not factory then
3048: LD_VAR 0 1
3052: NOT
3053: IFFALSE 3057
// exit ;
3055: GO 3660
// if control = control_apeman then
3057: LD_VAR 0 4
3061: PUSH
3062: LD_INT 5
3064: EQUAL
3065: IFFALSE 3174
// begin tmp := UnitsInside ( factory ) ;
3067: LD_ADDR_VAR 0 8
3071: PUSH
3072: LD_VAR 0 1
3076: PPUSH
3077: CALL_OW 313
3081: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3082: LD_VAR 0 8
3086: PPUSH
3087: LD_INT 25
3089: PUSH
3090: LD_INT 12
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PPUSH
3097: CALL_OW 72
3101: NOT
3102: IFFALSE 3112
// control := control_manual ;
3104: LD_ADDR_VAR 0 4
3108: PUSH
3109: LD_INT 1
3111: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3112: LD_ADDR_VAR 0 8
3116: PUSH
3117: LD_VAR 0 1
3121: PPUSH
3122: CALL 2809 0 1
3126: ST_TO_ADDR
// if tmp then
3127: LD_VAR 0 8
3131: IFFALSE 3174
// begin for i in tmp do
3133: LD_ADDR_VAR 0 7
3137: PUSH
3138: LD_VAR 0 8
3142: PUSH
3143: FOR_IN
3144: IFFALSE 3172
// if i [ 1 ] = b_ext_radio then
3146: LD_VAR 0 7
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PUSH
3155: LD_INT 22
3157: EQUAL
3158: IFFALSE 3170
// begin control := control_remote ;
3160: LD_ADDR_VAR 0 4
3164: PUSH
3165: LD_INT 2
3167: ST_TO_ADDR
// break ;
3168: GO 3172
// end ;
3170: GO 3143
3172: POP
3173: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_VAR 0 2
3183: PPUSH
3184: LD_VAR 0 3
3188: PPUSH
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_VAR 0 5
3198: PPUSH
3199: CALL_OW 448
3203: IFFALSE 3238
// begin result := [ chassis , engine , control , weapon ] ;
3205: LD_ADDR_VAR 0 6
3209: PUSH
3210: LD_VAR 0 2
3214: PUSH
3215: LD_VAR 0 3
3219: PUSH
3220: LD_VAR 0 4
3224: PUSH
3225: LD_VAR 0 5
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: ST_TO_ADDR
// exit ;
3236: GO 3660
// end ; _chassis := AvailableChassisList ( factory ) ;
3238: LD_ADDR_VAR 0 9
3242: PUSH
3243: LD_VAR 0 1
3247: PPUSH
3248: CALL_OW 475
3252: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3253: LD_ADDR_VAR 0 11
3257: PUSH
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 476
3267: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3268: LD_ADDR_VAR 0 12
3272: PUSH
3273: LD_VAR 0 1
3277: PPUSH
3278: CALL_OW 477
3282: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3283: LD_ADDR_VAR 0 10
3287: PUSH
3288: LD_VAR 0 1
3292: PPUSH
3293: CALL_OW 478
3297: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3298: LD_VAR 0 9
3302: NOT
3303: IFTRUE 3312
3305: PUSH
3306: LD_VAR 0 11
3310: NOT
3311: OR
3312: IFTRUE 3321
3314: PUSH
3315: LD_VAR 0 12
3319: NOT
3320: OR
3321: IFTRUE 3330
3323: PUSH
3324: LD_VAR 0 10
3328: NOT
3329: OR
3330: IFFALSE 3365
// begin result := [ chassis , engine , control , weapon ] ;
3332: LD_ADDR_VAR 0 6
3336: PUSH
3337: LD_VAR 0 2
3341: PUSH
3342: LD_VAR 0 3
3346: PUSH
3347: LD_VAR 0 4
3351: PUSH
3352: LD_VAR 0 5
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: ST_TO_ADDR
// exit ;
3363: GO 3660
// end ; if not chassis in _chassis then
3365: LD_VAR 0 2
3369: PUSH
3370: LD_VAR 0 9
3374: IN
3375: NOT
3376: IFFALSE 3402
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: LD_VAR 0 9
3387: PUSH
3388: LD_INT 1
3390: PPUSH
3391: LD_VAR 0 9
3395: PPUSH
3396: CALL_OW 12
3400: ARRAY
3401: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3402: LD_VAR 0 2
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL 3665 0 2
3416: NOT
3417: IFFALSE 3478
// repeat engine := _engine [ 1 ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_VAR 0 11
3428: PUSH
3429: LD_INT 1
3431: ARRAY
3432: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3433: LD_ADDR_VAR 0 11
3437: PUSH
3438: LD_VAR 0 11
3442: PPUSH
3443: LD_INT 1
3445: PPUSH
3446: CALL_OW 3
3450: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3451: LD_VAR 0 2
3455: PPUSH
3456: LD_VAR 0 3
3460: PPUSH
3461: CALL 3665 0 2
3465: IFTRUE 3476
3467: PUSH
3468: LD_VAR 0 11
3472: PUSH
3473: EMPTY
3474: EQUAL
3475: OR
3476: IFFALSE 3419
// if not control in _control then
3478: LD_VAR 0 4
3482: PUSH
3483: LD_VAR 0 12
3487: IN
3488: NOT
3489: IFFALSE 3515
// control := _control [ rand ( 1 , _control ) ] ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_VAR 0 12
3500: PUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_VAR 0 12
3508: PPUSH
3509: CALL_OW 12
3513: ARRAY
3514: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: CALL 3887 0 2
3529: NOT
3530: IFFALSE 3591
// repeat weapon := _weapon [ 1 ] ;
3532: LD_ADDR_VAR 0 5
3536: PUSH
3537: LD_VAR 0 10
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3546: LD_ADDR_VAR 0 10
3550: PUSH
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_INT 1
3558: PPUSH
3559: CALL_OW 3
3563: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3564: LD_VAR 0 2
3568: PPUSH
3569: LD_VAR 0 5
3573: PPUSH
3574: CALL 3887 0 2
3578: IFTRUE 3589
3580: PUSH
3581: LD_VAR 0 10
3585: PUSH
3586: EMPTY
3587: EQUAL
3588: OR
3589: IFFALSE 3532
// result := [ ] ;
3591: LD_ADDR_VAR 0 6
3595: PUSH
3596: EMPTY
3597: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3598: LD_VAR 0 1
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: LD_VAR 0 3
3612: PPUSH
3613: LD_VAR 0 4
3617: PPUSH
3618: LD_VAR 0 5
3622: PPUSH
3623: CALL_OW 448
3627: IFFALSE 3660
// result := [ chassis , engine , control , weapon ] ;
3629: LD_ADDR_VAR 0 6
3633: PUSH
3634: LD_VAR 0 2
3638: PUSH
3639: LD_VAR 0 3
3643: PUSH
3644: LD_VAR 0 4
3648: PUSH
3649: LD_VAR 0 5
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// end ;
3660: LD_VAR 0 6
3664: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3665: LD_INT 0
3667: PPUSH
// if not chassis or not engine then
3668: LD_VAR 0 1
3672: NOT
3673: IFTRUE 3682
3675: PUSH
3676: LD_VAR 0 2
3680: NOT
3681: OR
3682: IFFALSE 3686
// exit ;
3684: GO 3882
// case engine of engine_solar :
3686: LD_VAR 0 2
3690: PUSH
3691: LD_INT 2
3693: DOUBLE
3694: EQUAL
3695: IFTRUE 3699
3697: GO 3737
3699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3700: LD_ADDR_VAR 0 3
3704: PUSH
3705: LD_INT 11
3707: PUSH
3708: LD_INT 12
3710: PUSH
3711: LD_INT 13
3713: PUSH
3714: LD_INT 14
3716: PUSH
3717: LD_INT 1
3719: PUSH
3720: LD_INT 2
3722: PUSH
3723: LD_INT 3
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: ST_TO_ADDR
3735: GO 3866
3737: LD_INT 1
3739: DOUBLE
3740: EQUAL
3741: IFTRUE 3745
3743: GO 3807
3745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3746: LD_ADDR_VAR 0 3
3750: PUSH
3751: LD_INT 11
3753: PUSH
3754: LD_INT 12
3756: PUSH
3757: LD_INT 13
3759: PUSH
3760: LD_INT 14
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: LD_INT 2
3768: PUSH
3769: LD_INT 3
3771: PUSH
3772: LD_INT 4
3774: PUSH
3775: LD_INT 5
3777: PUSH
3778: LD_INT 21
3780: PUSH
3781: LD_INT 23
3783: PUSH
3784: LD_INT 22
3786: PUSH
3787: LD_INT 24
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: ST_TO_ADDR
3805: GO 3866
3807: LD_INT 3
3809: DOUBLE
3810: EQUAL
3811: IFTRUE 3815
3813: GO 3865
3815: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_INT 13
3823: PUSH
3824: LD_INT 14
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 5
3838: PUSH
3839: LD_INT 21
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 23
3847: PUSH
3848: LD_INT 24
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: ST_TO_ADDR
3863: GO 3866
3865: POP
// result := ( chassis in result ) ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_VAR 0 1
3875: PUSH
3876: LD_VAR 0 3
3880: IN
3881: ST_TO_ADDR
// end ;
3882: LD_VAR 0 3
3886: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3887: LD_INT 0
3889: PPUSH
// if not chassis or not weapon then
3890: LD_VAR 0 1
3894: NOT
3895: IFTRUE 3904
3897: PUSH
3898: LD_VAR 0 2
3902: NOT
3903: OR
3904: IFFALSE 3908
// exit ;
3906: GO 4968
// case weapon of us_machine_gun :
3908: LD_VAR 0 2
3912: PUSH
3913: LD_INT 2
3915: DOUBLE
3916: EQUAL
3917: IFTRUE 3921
3919: GO 3951
3921: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: LD_INT 2
3932: PUSH
3933: LD_INT 3
3935: PUSH
3936: LD_INT 4
3938: PUSH
3939: LD_INT 5
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: ST_TO_ADDR
3949: GO 4952
3951: LD_INT 3
3953: DOUBLE
3954: EQUAL
3955: IFTRUE 3959
3957: GO 3989
3959: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 1
3967: PUSH
3968: LD_INT 2
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: LD_INT 4
3976: PUSH
3977: LD_INT 5
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: ST_TO_ADDR
3987: GO 4952
3989: LD_INT 11
3991: DOUBLE
3992: EQUAL
3993: IFTRUE 3997
3995: GO 4027
3997: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3998: LD_ADDR_VAR 0 3
4002: PUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 2
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: ST_TO_ADDR
4025: GO 4952
4027: LD_INT 4
4029: DOUBLE
4030: EQUAL
4031: IFTRUE 4035
4033: GO 4061
4035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: LD_INT 2
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: LD_INT 4
4049: PUSH
4050: LD_INT 5
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
4059: GO 4952
4061: LD_INT 5
4063: DOUBLE
4064: EQUAL
4065: IFTRUE 4069
4067: GO 4095
4069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: LD_INT 3
4080: PUSH
4081: LD_INT 4
4083: PUSH
4084: LD_INT 5
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: ST_TO_ADDR
4093: GO 4952
4095: LD_INT 9
4097: DOUBLE
4098: EQUAL
4099: IFTRUE 4103
4101: GO 4129
4103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4104: LD_ADDR_VAR 0 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 3
4114: PUSH
4115: LD_INT 4
4117: PUSH
4118: LD_INT 5
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: ST_TO_ADDR
4127: GO 4952
4129: LD_INT 7
4131: DOUBLE
4132: EQUAL
4133: IFTRUE 4137
4135: GO 4163
4137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4138: LD_ADDR_VAR 0 3
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 4
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: ST_TO_ADDR
4161: GO 4952
4163: LD_INT 12
4165: DOUBLE
4166: EQUAL
4167: IFTRUE 4171
4169: GO 4197
4171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_INT 2
4179: PUSH
4180: LD_INT 3
4182: PUSH
4183: LD_INT 4
4185: PUSH
4186: LD_INT 5
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: ST_TO_ADDR
4195: GO 4952
4197: LD_INT 13
4199: DOUBLE
4200: EQUAL
4201: IFTRUE 4205
4203: GO 4231
4205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4206: LD_ADDR_VAR 0 3
4210: PUSH
4211: LD_INT 2
4213: PUSH
4214: LD_INT 3
4216: PUSH
4217: LD_INT 4
4219: PUSH
4220: LD_INT 5
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: ST_TO_ADDR
4229: GO 4952
4231: LD_INT 14
4233: DOUBLE
4234: EQUAL
4235: IFTRUE 4239
4237: GO 4257
4239: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4240: LD_ADDR_VAR 0 3
4244: PUSH
4245: LD_INT 4
4247: PUSH
4248: LD_INT 5
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: ST_TO_ADDR
4255: GO 4952
4257: LD_INT 6
4259: DOUBLE
4260: EQUAL
4261: IFTRUE 4265
4263: GO 4283
4265: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4266: LD_ADDR_VAR 0 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: ST_TO_ADDR
4281: GO 4952
4283: LD_INT 10
4285: DOUBLE
4286: EQUAL
4287: IFTRUE 4291
4289: GO 4309
4291: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4292: LD_ADDR_VAR 0 3
4296: PUSH
4297: LD_INT 4
4299: PUSH
4300: LD_INT 5
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: ST_TO_ADDR
4307: GO 4952
4309: LD_INT 22
4311: DOUBLE
4312: EQUAL
4313: IFTRUE 4317
4315: GO 4343
4317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4318: LD_ADDR_VAR 0 3
4322: PUSH
4323: LD_INT 11
4325: PUSH
4326: LD_INT 12
4328: PUSH
4329: LD_INT 13
4331: PUSH
4332: LD_INT 14
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: ST_TO_ADDR
4341: GO 4952
4343: LD_INT 23
4345: DOUBLE
4346: EQUAL
4347: IFTRUE 4351
4349: GO 4377
4351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: LD_INT 11
4359: PUSH
4360: LD_INT 12
4362: PUSH
4363: LD_INT 13
4365: PUSH
4366: LD_INT 14
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: ST_TO_ADDR
4375: GO 4952
4377: LD_INT 24
4379: DOUBLE
4380: EQUAL
4381: IFTRUE 4385
4383: GO 4411
4385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4386: LD_ADDR_VAR 0 3
4390: PUSH
4391: LD_INT 11
4393: PUSH
4394: LD_INT 12
4396: PUSH
4397: LD_INT 13
4399: PUSH
4400: LD_INT 14
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: ST_TO_ADDR
4409: GO 4952
4411: LD_INT 30
4413: DOUBLE
4414: EQUAL
4415: IFTRUE 4419
4417: GO 4445
4419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_INT 11
4427: PUSH
4428: LD_INT 12
4430: PUSH
4431: LD_INT 13
4433: PUSH
4434: LD_INT 14
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: ST_TO_ADDR
4443: GO 4952
4445: LD_INT 25
4447: DOUBLE
4448: EQUAL
4449: IFTRUE 4453
4451: GO 4471
4453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 13
4461: PUSH
4462: LD_INT 14
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: ST_TO_ADDR
4469: GO 4952
4471: LD_INT 27
4473: DOUBLE
4474: EQUAL
4475: IFTRUE 4479
4477: GO 4497
4479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4480: LD_ADDR_VAR 0 3
4484: PUSH
4485: LD_INT 13
4487: PUSH
4488: LD_INT 14
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: ST_TO_ADDR
4495: GO 4952
4497: LD_INT 92
4499: DOUBLE
4500: EQUAL
4501: IFTRUE 4505
4503: GO 4531
4505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_INT 11
4513: PUSH
4514: LD_INT 12
4516: PUSH
4517: LD_INT 13
4519: PUSH
4520: LD_INT 14
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: ST_TO_ADDR
4529: GO 4952
4531: LD_INT 28
4533: DOUBLE
4534: EQUAL
4535: IFTRUE 4539
4537: GO 4557
4539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: LD_INT 13
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: ST_TO_ADDR
4555: GO 4952
4557: LD_INT 29
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4583
4565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: LD_INT 13
4573: PUSH
4574: LD_INT 14
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: ST_TO_ADDR
4581: GO 4952
4583: LD_INT 31
4585: DOUBLE
4586: EQUAL
4587: IFTRUE 4591
4589: GO 4609
4591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: LD_INT 13
4599: PUSH
4600: LD_INT 14
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: ST_TO_ADDR
4607: GO 4952
4609: LD_INT 26
4611: DOUBLE
4612: EQUAL
4613: IFTRUE 4617
4615: GO 4635
4617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: LD_INT 13
4625: PUSH
4626: LD_INT 14
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: ST_TO_ADDR
4633: GO 4952
4635: LD_INT 42
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4669
4643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 21
4651: PUSH
4652: LD_INT 22
4654: PUSH
4655: LD_INT 23
4657: PUSH
4658: LD_INT 24
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: ST_TO_ADDR
4667: GO 4952
4669: LD_INT 43
4671: DOUBLE
4672: EQUAL
4673: IFTRUE 4677
4675: GO 4703
4677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4678: LD_ADDR_VAR 0 3
4682: PUSH
4683: LD_INT 21
4685: PUSH
4686: LD_INT 22
4688: PUSH
4689: LD_INT 23
4691: PUSH
4692: LD_INT 24
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: ST_TO_ADDR
4701: GO 4952
4703: LD_INT 44
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4737
4711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: LD_INT 21
4719: PUSH
4720: LD_INT 22
4722: PUSH
4723: LD_INT 23
4725: PUSH
4726: LD_INT 24
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: ST_TO_ADDR
4735: GO 4952
4737: LD_INT 45
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4771
4745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4746: LD_ADDR_VAR 0 3
4750: PUSH
4751: LD_INT 21
4753: PUSH
4754: LD_INT 22
4756: PUSH
4757: LD_INT 23
4759: PUSH
4760: LD_INT 24
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
4769: GO 4952
4771: LD_INT 49
4773: DOUBLE
4774: EQUAL
4775: IFTRUE 4779
4777: GO 4805
4779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4780: LD_ADDR_VAR 0 3
4784: PUSH
4785: LD_INT 21
4787: PUSH
4788: LD_INT 22
4790: PUSH
4791: LD_INT 23
4793: PUSH
4794: LD_INT 24
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: ST_TO_ADDR
4803: GO 4952
4805: LD_INT 51
4807: DOUBLE
4808: EQUAL
4809: IFTRUE 4813
4811: GO 4839
4813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_INT 21
4821: PUSH
4822: LD_INT 22
4824: PUSH
4825: LD_INT 23
4827: PUSH
4828: LD_INT 24
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: ST_TO_ADDR
4837: GO 4952
4839: LD_INT 52
4841: DOUBLE
4842: EQUAL
4843: IFTRUE 4847
4845: GO 4873
4847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4848: LD_ADDR_VAR 0 3
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 23
4861: PUSH
4862: LD_INT 24
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
4871: GO 4952
4873: LD_INT 53
4875: DOUBLE
4876: EQUAL
4877: IFTRUE 4881
4879: GO 4899
4881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: LD_INT 23
4889: PUSH
4890: LD_INT 24
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: ST_TO_ADDR
4897: GO 4952
4899: LD_INT 46
4901: DOUBLE
4902: EQUAL
4903: IFTRUE 4907
4905: GO 4925
4907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4908: LD_ADDR_VAR 0 3
4912: PUSH
4913: LD_INT 23
4915: PUSH
4916: LD_INT 24
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: ST_TO_ADDR
4923: GO 4952
4925: LD_INT 47
4927: DOUBLE
4928: EQUAL
4929: IFTRUE 4933
4931: GO 4951
4933: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: LD_INT 23
4941: PUSH
4942: LD_INT 24
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: ST_TO_ADDR
4949: GO 4952
4951: POP
// result := ( chassis in result ) ;
4952: LD_ADDR_VAR 0 3
4956: PUSH
4957: LD_VAR 0 1
4961: PUSH
4962: LD_VAR 0 3
4966: IN
4967: ST_TO_ADDR
// end ;
4968: LD_VAR 0 3
4972: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
4978: PPUSH
4979: PPUSH
4980: PPUSH
4981: PPUSH
// result := array ;
4982: LD_ADDR_VAR 0 5
4986: PUSH
4987: LD_VAR 0 1
4991: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4992: LD_VAR 0 1
4996: NOT
4997: IFTRUE 5006
4999: PUSH
5000: LD_VAR 0 2
5004: NOT
5005: OR
5006: IFTRUE 5015
5008: PUSH
5009: LD_VAR 0 3
5013: NOT
5014: OR
5015: IFTRUE 5029
5017: PUSH
5018: LD_VAR 0 2
5022: PUSH
5023: LD_VAR 0 1
5027: GREATER
5028: OR
5029: IFTRUE 5043
5031: PUSH
5032: LD_VAR 0 3
5036: PUSH
5037: LD_VAR 0 1
5041: GREATER
5042: OR
5043: IFFALSE 5047
// exit ;
5045: GO 5343
// if direction then
5047: LD_VAR 0 4
5051: IFFALSE 5115
// begin d := 1 ;
5053: LD_ADDR_VAR 0 9
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// if i_from > i_to then
5061: LD_VAR 0 2
5065: PUSH
5066: LD_VAR 0 3
5070: GREATER
5071: IFFALSE 5097
// length := ( array - i_from ) + i_to else
5073: LD_ADDR_VAR 0 11
5077: PUSH
5078: LD_VAR 0 1
5082: PUSH
5083: LD_VAR 0 2
5087: MINUS
5088: PUSH
5089: LD_VAR 0 3
5093: PLUS
5094: ST_TO_ADDR
5095: GO 5113
// length := i_to - i_from ;
5097: LD_ADDR_VAR 0 11
5101: PUSH
5102: LD_VAR 0 3
5106: PUSH
5107: LD_VAR 0 2
5111: MINUS
5112: ST_TO_ADDR
// end else
5113: GO 5176
// begin d := - 1 ;
5115: LD_ADDR_VAR 0 9
5119: PUSH
5120: LD_INT 1
5122: NEG
5123: ST_TO_ADDR
// if i_from > i_to then
5124: LD_VAR 0 2
5128: PUSH
5129: LD_VAR 0 3
5133: GREATER
5134: IFFALSE 5154
// length := i_from - i_to else
5136: LD_ADDR_VAR 0 11
5140: PUSH
5141: LD_VAR 0 2
5145: PUSH
5146: LD_VAR 0 3
5150: MINUS
5151: ST_TO_ADDR
5152: GO 5176
// length := ( array - i_to ) + i_from ;
5154: LD_ADDR_VAR 0 11
5158: PUSH
5159: LD_VAR 0 1
5163: PUSH
5164: LD_VAR 0 3
5168: MINUS
5169: PUSH
5170: LD_VAR 0 2
5174: PLUS
5175: ST_TO_ADDR
// end ; if not length then
5176: LD_VAR 0 11
5180: NOT
5181: IFFALSE 5185
// exit ;
5183: GO 5343
// tmp := array ;
5185: LD_ADDR_VAR 0 10
5189: PUSH
5190: LD_VAR 0 1
5194: ST_TO_ADDR
// for i = 1 to length do
5195: LD_ADDR_VAR 0 6
5199: PUSH
5200: DOUBLE
5201: LD_INT 1
5203: DEC
5204: ST_TO_ADDR
5205: LD_VAR 0 11
5209: PUSH
5210: FOR_TO
5211: IFFALSE 5331
// begin for j = 1 to array do
5213: LD_ADDR_VAR 0 7
5217: PUSH
5218: DOUBLE
5219: LD_INT 1
5221: DEC
5222: ST_TO_ADDR
5223: LD_VAR 0 1
5227: PUSH
5228: FOR_TO
5229: IFFALSE 5317
// begin k := j + d ;
5231: LD_ADDR_VAR 0 8
5235: PUSH
5236: LD_VAR 0 7
5240: PUSH
5241: LD_VAR 0 9
5245: PLUS
5246: ST_TO_ADDR
// if k > array then
5247: LD_VAR 0 8
5251: PUSH
5252: LD_VAR 0 1
5256: GREATER
5257: IFFALSE 5267
// k := 1 ;
5259: LD_ADDR_VAR 0 8
5263: PUSH
5264: LD_INT 1
5266: ST_TO_ADDR
// if not k then
5267: LD_VAR 0 8
5271: NOT
5272: IFFALSE 5284
// k := array ;
5274: LD_ADDR_VAR 0 8
5278: PUSH
5279: LD_VAR 0 1
5283: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5284: LD_ADDR_VAR 0 10
5288: PUSH
5289: LD_VAR 0 10
5293: PPUSH
5294: LD_VAR 0 8
5298: PPUSH
5299: LD_VAR 0 1
5303: PUSH
5304: LD_VAR 0 7
5308: ARRAY
5309: PPUSH
5310: CALL_OW 1
5314: ST_TO_ADDR
// end ;
5315: GO 5228
5317: POP
5318: POP
// array := tmp ;
5319: LD_ADDR_VAR 0 1
5323: PUSH
5324: LD_VAR 0 10
5328: ST_TO_ADDR
// end ;
5329: GO 5210
5331: POP
5332: POP
// result := array ;
5333: LD_ADDR_VAR 0 5
5337: PUSH
5338: LD_VAR 0 1
5342: ST_TO_ADDR
// end ;
5343: LD_VAR 0 5
5347: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5348: LD_INT 0
5350: PPUSH
5351: PPUSH
// result := 0 ;
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_INT 0
5359: ST_TO_ADDR
// if not array or not value in array then
5360: LD_VAR 0 1
5364: NOT
5365: IFTRUE 5380
5367: PUSH
5368: LD_VAR 0 2
5372: PUSH
5373: LD_VAR 0 1
5377: IN
5378: NOT
5379: OR
5380: IFFALSE 5384
// exit ;
5382: GO 5438
// for i = 1 to array do
5384: LD_ADDR_VAR 0 4
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_VAR 0 1
5398: PUSH
5399: FOR_TO
5400: IFFALSE 5436
// if value = array [ i ] then
5402: LD_VAR 0 2
5406: PUSH
5407: LD_VAR 0 1
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: EQUAL
5418: IFFALSE 5434
// begin result := i ;
5420: LD_ADDR_VAR 0 3
5424: PUSH
5425: LD_VAR 0 4
5429: ST_TO_ADDR
// exit ;
5430: POP
5431: POP
5432: GO 5438
// end ;
5434: GO 5399
5436: POP
5437: POP
// end ;
5438: LD_VAR 0 3
5442: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5443: LD_INT 0
5445: PPUSH
// vc_chassis := chassis ;
5446: LD_ADDR_OWVAR 37
5450: PUSH
5451: LD_VAR 0 1
5455: ST_TO_ADDR
// vc_engine := engine ;
5456: LD_ADDR_OWVAR 39
5460: PUSH
5461: LD_VAR 0 2
5465: ST_TO_ADDR
// vc_control := control ;
5466: LD_ADDR_OWVAR 38
5470: PUSH
5471: LD_VAR 0 3
5475: ST_TO_ADDR
// vc_weapon := weapon ;
5476: LD_ADDR_OWVAR 40
5480: PUSH
5481: LD_VAR 0 4
5485: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5486: LD_ADDR_OWVAR 41
5490: PUSH
5491: LD_VAR 0 5
5495: ST_TO_ADDR
// end ;
5496: LD_VAR 0 6
5500: RET
// export function WantPlant ( unit ) ; var task ; begin
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
// result := false ;
5505: LD_ADDR_VAR 0 2
5509: PUSH
5510: LD_INT 0
5512: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5513: LD_ADDR_VAR 0 3
5517: PUSH
5518: LD_VAR 0 1
5522: PPUSH
5523: CALL_OW 437
5527: ST_TO_ADDR
// if task then
5528: LD_VAR 0 3
5532: IFFALSE 5560
// if task [ 1 ] [ 1 ] = p then
5534: LD_VAR 0 3
5538: PUSH
5539: LD_INT 1
5541: ARRAY
5542: PUSH
5543: LD_INT 1
5545: ARRAY
5546: PUSH
5547: LD_STRING p
5549: EQUAL
5550: IFFALSE 5560
// result := true ;
5552: LD_ADDR_VAR 0 2
5556: PUSH
5557: LD_INT 1
5559: ST_TO_ADDR
// end ;
5560: LD_VAR 0 2
5564: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5565: LD_INT 0
5567: PPUSH
5568: PPUSH
5569: PPUSH
5570: PPUSH
// if pos < 1 then
5571: LD_VAR 0 2
5575: PUSH
5576: LD_INT 1
5578: LESS
5579: IFFALSE 5583
// exit ;
5581: GO 5886
// if pos = 1 then
5583: LD_VAR 0 2
5587: PUSH
5588: LD_INT 1
5590: EQUAL
5591: IFFALSE 5624
// result := Replace ( arr , pos [ 1 ] , value ) else
5593: LD_ADDR_VAR 0 4
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: LD_VAR 0 2
5607: PUSH
5608: LD_INT 1
5610: ARRAY
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 1
5621: ST_TO_ADDR
5622: GO 5886
// begin tmp := arr ;
5624: LD_ADDR_VAR 0 6
5628: PUSH
5629: LD_VAR 0 1
5633: ST_TO_ADDR
// s_arr := [ tmp ] ;
5634: LD_ADDR_VAR 0 7
5638: PUSH
5639: LD_VAR 0 6
5643: PUSH
5644: EMPTY
5645: LIST
5646: ST_TO_ADDR
// for i = 1 to pos - 1 do
5647: LD_ADDR_VAR 0 5
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 2
5661: PUSH
5662: LD_INT 1
5664: MINUS
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5712
// begin tmp := tmp [ pos [ i ] ] ;
5669: LD_ADDR_VAR 0 6
5673: PUSH
5674: LD_VAR 0 6
5678: PUSH
5679: LD_VAR 0 2
5683: PUSH
5684: LD_VAR 0 5
5688: ARRAY
5689: ARRAY
5690: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5691: LD_ADDR_VAR 0 7
5695: PUSH
5696: LD_VAR 0 7
5700: PUSH
5701: LD_VAR 0 6
5705: PUSH
5706: EMPTY
5707: LIST
5708: ADD
5709: ST_TO_ADDR
// end ;
5710: GO 5666
5712: POP
5713: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5714: LD_ADDR_VAR 0 6
5718: PUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: LD_VAR 0 2
5728: PUSH
5729: LD_VAR 0 2
5733: ARRAY
5734: PPUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 1
5744: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5745: LD_ADDR_VAR 0 7
5749: PUSH
5750: LD_VAR 0 7
5754: PPUSH
5755: LD_VAR 0 7
5759: PPUSH
5760: LD_VAR 0 6
5764: PPUSH
5765: CALL_OW 1
5769: ST_TO_ADDR
// for i = s_arr downto 2 do
5770: LD_ADDR_VAR 0 5
5774: PUSH
5775: DOUBLE
5776: LD_VAR 0 7
5780: INC
5781: ST_TO_ADDR
5782: LD_INT 2
5784: PUSH
5785: FOR_DOWNTO
5786: IFFALSE 5870
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5788: LD_ADDR_VAR 0 6
5792: PUSH
5793: LD_VAR 0 7
5797: PUSH
5798: LD_VAR 0 5
5802: PUSH
5803: LD_INT 1
5805: MINUS
5806: ARRAY
5807: PPUSH
5808: LD_VAR 0 2
5812: PUSH
5813: LD_VAR 0 5
5817: PUSH
5818: LD_INT 1
5820: MINUS
5821: ARRAY
5822: PPUSH
5823: LD_VAR 0 7
5827: PUSH
5828: LD_VAR 0 5
5832: ARRAY
5833: PPUSH
5834: CALL_OW 1
5838: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5839: LD_ADDR_VAR 0 7
5843: PUSH
5844: LD_VAR 0 7
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: MINUS
5857: PPUSH
5858: LD_VAR 0 6
5862: PPUSH
5863: CALL_OW 1
5867: ST_TO_ADDR
// end ;
5868: GO 5785
5870: POP
5871: POP
// result := s_arr [ 1 ] ;
5872: LD_ADDR_VAR 0 4
5876: PUSH
5877: LD_VAR 0 7
5881: PUSH
5882: LD_INT 1
5884: ARRAY
5885: ST_TO_ADDR
// end ; end ;
5886: LD_VAR 0 4
5890: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
// if not list then
5895: LD_VAR 0 1
5899: NOT
5900: IFFALSE 5904
// exit ;
5902: GO 5995
// i := list [ pos1 ] ;
5904: LD_ADDR_VAR 0 5
5908: PUSH
5909: LD_VAR 0 1
5913: PUSH
5914: LD_VAR 0 2
5918: ARRAY
5919: ST_TO_ADDR
// if not i then
5920: LD_VAR 0 5
5924: NOT
5925: IFFALSE 5929
// exit ;
5927: GO 5995
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_VAR 0 1
5938: PPUSH
5939: LD_VAR 0 2
5943: PPUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_VAR 0 3
5953: ARRAY
5954: PPUSH
5955: CALL_OW 1
5959: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5960: LD_ADDR_VAR 0 1
5964: PUSH
5965: LD_VAR 0 1
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: LD_VAR 0 5
5979: PPUSH
5980: CALL_OW 1
5984: ST_TO_ADDR
// result := list ;
5985: LD_ADDR_VAR 0 4
5989: PUSH
5990: LD_VAR 0 1
5994: ST_TO_ADDR
// end ;
5995: LD_VAR 0 4
5999: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6000: LD_INT 0
6002: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6003: LD_ADDR_VAR 0 5
6007: PUSH
6008: LD_VAR 0 1
6012: PPUSH
6013: CALL_OW 250
6017: PPUSH
6018: LD_VAR 0 1
6022: PPUSH
6023: CALL_OW 251
6027: PPUSH
6028: LD_VAR 0 2
6032: PPUSH
6033: LD_VAR 0 3
6037: PPUSH
6038: LD_VAR 0 4
6042: PPUSH
6043: CALL 6425 0 5
6047: ST_TO_ADDR
// end ;
6048: LD_VAR 0 5
6052: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
6057: PPUSH
6058: PPUSH
// if not list or not unit then
6059: LD_VAR 0 2
6063: NOT
6064: IFTRUE 6073
6066: PUSH
6067: LD_VAR 0 1
6071: NOT
6072: OR
6073: IFFALSE 6077
// exit ;
6075: GO 6420
// result := [ ] ;
6077: LD_ADDR_VAR 0 5
6081: PUSH
6082: EMPTY
6083: ST_TO_ADDR
// for i in list do
6084: LD_ADDR_VAR 0 6
6088: PUSH
6089: LD_VAR 0 2
6093: PUSH
6094: FOR_IN
6095: IFFALSE 6313
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 1
6106: PPUSH
6107: LD_VAR 0 6
6111: PUSH
6112: LD_INT 1
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 6
6120: PUSH
6121: LD_INT 2
6123: ARRAY
6124: PPUSH
6125: CALL_OW 297
6129: ST_TO_ADDR
// if not Count ( result ) then
6130: LD_VAR 0 5
6134: PPUSH
6135: CALL 2681 0 1
6139: NOT
6140: IFFALSE 6173
// begin result := Join ( result , [ i , tmp ] ) ;
6142: LD_ADDR_VAR 0 5
6146: PUSH
6147: LD_VAR 0 5
6151: PPUSH
6152: LD_VAR 0 6
6156: PUSH
6157: LD_VAR 0 8
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PPUSH
6166: CALL 38613 0 2
6170: ST_TO_ADDR
// continue ;
6171: GO 6094
// end ; if result [ result ] [ 2 ] <= tmp then
6173: LD_VAR 0 5
6177: PUSH
6178: LD_VAR 0 5
6182: ARRAY
6183: PUSH
6184: LD_INT 2
6186: ARRAY
6187: PUSH
6188: LD_VAR 0 8
6192: LESSEQUAL
6193: IFFALSE 6226
// result := Join ( result , [ i , tmp ] ) else
6195: LD_ADDR_VAR 0 5
6199: PUSH
6200: LD_VAR 0 5
6204: PPUSH
6205: LD_VAR 0 6
6209: PUSH
6210: LD_VAR 0 8
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PPUSH
6219: CALL 38613 0 2
6223: ST_TO_ADDR
6224: GO 6311
// begin for j := 1 to Count ( result ) do
6226: LD_ADDR_VAR 0 7
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_VAR 0 5
6240: PPUSH
6241: CALL 2681 0 1
6245: PUSH
6246: FOR_TO
6247: IFFALSE 6309
// begin if tmp < result [ j ] [ 2 ] then
6249: LD_VAR 0 8
6253: PUSH
6254: LD_VAR 0 5
6258: PUSH
6259: LD_VAR 0 7
6263: ARRAY
6264: PUSH
6265: LD_INT 2
6267: ARRAY
6268: LESS
6269: IFFALSE 6307
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6271: LD_ADDR_VAR 0 5
6275: PUSH
6276: LD_VAR 0 5
6280: PPUSH
6281: LD_VAR 0 7
6285: PPUSH
6286: LD_VAR 0 6
6290: PUSH
6291: LD_VAR 0 8
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PPUSH
6300: CALL_OW 2
6304: ST_TO_ADDR
// break ;
6305: GO 6309
// end ; end ;
6307: GO 6246
6309: POP
6310: POP
// end ; end ;
6311: GO 6094
6313: POP
6314: POP
// if result and not asc then
6315: LD_VAR 0 5
6319: IFFALSE 6328
6321: PUSH
6322: LD_VAR 0 3
6326: NOT
6327: AND
6328: IFFALSE 6345
// result := ReverseArray ( result ) ;
6330: LD_ADDR_VAR 0 5
6334: PUSH
6335: LD_VAR 0 5
6339: PPUSH
6340: CALL 33703 0 1
6344: ST_TO_ADDR
// tmp := [ ] ;
6345: LD_ADDR_VAR 0 8
6349: PUSH
6350: EMPTY
6351: ST_TO_ADDR
// if mode then
6352: LD_VAR 0 4
6356: IFFALSE 6420
// begin for i := 1 to result do
6358: LD_ADDR_VAR 0 6
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_VAR 0 5
6372: PUSH
6373: FOR_TO
6374: IFFALSE 6408
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6376: LD_ADDR_VAR 0 8
6380: PUSH
6381: LD_VAR 0 8
6385: PPUSH
6386: LD_VAR 0 5
6390: PUSH
6391: LD_VAR 0 6
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: CALL 38613 0 2
6405: ST_TO_ADDR
6406: GO 6373
6408: POP
6409: POP
// result := tmp ;
6410: LD_ADDR_VAR 0 5
6414: PUSH
6415: LD_VAR 0 8
6419: ST_TO_ADDR
// end ; end ;
6420: LD_VAR 0 5
6424: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6425: LD_INT 0
6427: PPUSH
6428: PPUSH
6429: PPUSH
6430: PPUSH
// if not list then
6431: LD_VAR 0 3
6435: NOT
6436: IFFALSE 6440
// exit ;
6438: GO 6830
// result := [ ] ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: EMPTY
6446: ST_TO_ADDR
// for i in list do
6447: LD_ADDR_VAR 0 7
6451: PUSH
6452: LD_VAR 0 3
6456: PUSH
6457: FOR_IN
6458: IFFALSE 6660
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6460: LD_ADDR_VAR 0 9
6464: PUSH
6465: LD_VAR 0 7
6469: PPUSH
6470: LD_VAR 0 1
6474: PPUSH
6475: LD_VAR 0 2
6479: PPUSH
6480: CALL_OW 297
6484: ST_TO_ADDR
// if not result then
6485: LD_VAR 0 6
6489: NOT
6490: IFFALSE 6516
// result := [ [ i , tmp ] ] else
6492: LD_ADDR_VAR 0 6
6496: PUSH
6497: LD_VAR 0 7
6501: PUSH
6502: LD_VAR 0 9
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: ST_TO_ADDR
6514: GO 6658
// begin if result [ result ] [ 2 ] <= tmp then
6516: LD_VAR 0 6
6520: PUSH
6521: LD_VAR 0 6
6525: ARRAY
6526: PUSH
6527: LD_INT 2
6529: ARRAY
6530: PUSH
6531: LD_VAR 0 9
6535: LESSEQUAL
6536: IFFALSE 6578
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6538: LD_ADDR_VAR 0 6
6542: PUSH
6543: LD_VAR 0 6
6547: PPUSH
6548: LD_VAR 0 6
6552: PUSH
6553: LD_INT 1
6555: PLUS
6556: PPUSH
6557: LD_VAR 0 7
6561: PUSH
6562: LD_VAR 0 9
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 2
6575: ST_TO_ADDR
6576: GO 6658
// for j := 1 to result do
6578: LD_ADDR_VAR 0 8
6582: PUSH
6583: DOUBLE
6584: LD_INT 1
6586: DEC
6587: ST_TO_ADDR
6588: LD_VAR 0 6
6592: PUSH
6593: FOR_TO
6594: IFFALSE 6656
// begin if tmp < result [ j ] [ 2 ] then
6596: LD_VAR 0 9
6600: PUSH
6601: LD_VAR 0 6
6605: PUSH
6606: LD_VAR 0 8
6610: ARRAY
6611: PUSH
6612: LD_INT 2
6614: ARRAY
6615: LESS
6616: IFFALSE 6654
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_VAR 0 6
6627: PPUSH
6628: LD_VAR 0 8
6632: PPUSH
6633: LD_VAR 0 7
6637: PUSH
6638: LD_VAR 0 9
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 2
6651: ST_TO_ADDR
// break ;
6652: GO 6656
// end ; end ;
6654: GO 6593
6656: POP
6657: POP
// end ; end ;
6658: GO 6457
6660: POP
6661: POP
// if result and not asc then
6662: LD_VAR 0 6
6666: IFFALSE 6675
6668: PUSH
6669: LD_VAR 0 4
6673: NOT
6674: AND
6675: IFFALSE 6750
// begin tmp := result ;
6677: LD_ADDR_VAR 0 9
6681: PUSH
6682: LD_VAR 0 6
6686: ST_TO_ADDR
// for i = tmp downto 1 do
6687: LD_ADDR_VAR 0 7
6691: PUSH
6692: DOUBLE
6693: LD_VAR 0 9
6697: INC
6698: ST_TO_ADDR
6699: LD_INT 1
6701: PUSH
6702: FOR_DOWNTO
6703: IFFALSE 6748
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6705: LD_ADDR_VAR 0 6
6709: PUSH
6710: LD_VAR 0 6
6714: PPUSH
6715: LD_VAR 0 9
6719: PUSH
6720: LD_VAR 0 7
6724: MINUS
6725: PUSH
6726: LD_INT 1
6728: PLUS
6729: PPUSH
6730: LD_VAR 0 9
6734: PUSH
6735: LD_VAR 0 7
6739: ARRAY
6740: PPUSH
6741: CALL_OW 1
6745: ST_TO_ADDR
6746: GO 6702
6748: POP
6749: POP
// end ; tmp := [ ] ;
6750: LD_ADDR_VAR 0 9
6754: PUSH
6755: EMPTY
6756: ST_TO_ADDR
// if mode then
6757: LD_VAR 0 5
6761: IFFALSE 6830
// begin for i = 1 to result do
6763: LD_ADDR_VAR 0 7
6767: PUSH
6768: DOUBLE
6769: LD_INT 1
6771: DEC
6772: ST_TO_ADDR
6773: LD_VAR 0 6
6777: PUSH
6778: FOR_TO
6779: IFFALSE 6818
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6781: LD_ADDR_VAR 0 9
6785: PUSH
6786: LD_VAR 0 9
6790: PPUSH
6791: LD_VAR 0 7
6795: PPUSH
6796: LD_VAR 0 6
6800: PUSH
6801: LD_VAR 0 7
6805: ARRAY
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: PPUSH
6811: CALL_OW 1
6815: ST_TO_ADDR
6816: GO 6778
6818: POP
6819: POP
// result := tmp ;
6820: LD_ADDR_VAR 0 6
6824: PUSH
6825: LD_VAR 0 9
6829: ST_TO_ADDR
// end ; end ;
6830: LD_VAR 0 6
6834: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6835: LD_INT 0
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6843: LD_ADDR_VAR 0 5
6847: PUSH
6848: LD_INT 0
6850: PUSH
6851: LD_INT 0
6853: PUSH
6854: LD_INT 0
6856: PUSH
6857: EMPTY
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: ST_TO_ADDR
// if not x or not y then
6865: LD_VAR 0 2
6869: NOT
6870: IFTRUE 6879
6872: PUSH
6873: LD_VAR 0 3
6877: NOT
6878: OR
6879: IFFALSE 6883
// exit ;
6881: GO 8539
// if not range then
6883: LD_VAR 0 4
6887: NOT
6888: IFFALSE 6898
// range := 10 ;
6890: LD_ADDR_VAR 0 4
6894: PUSH
6895: LD_INT 10
6897: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6898: LD_ADDR_VAR 0 8
6902: PUSH
6903: LD_INT 81
6905: PUSH
6906: LD_VAR 0 1
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 92
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_VAR 0 3
6927: PUSH
6928: LD_VAR 0 4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 3
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 3
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: ST_TO_ADDR
// if not tmp then
6966: LD_VAR 0 8
6970: NOT
6971: IFFALSE 6975
// exit ;
6973: GO 8539
// for i in tmp do
6975: LD_ADDR_VAR 0 6
6979: PUSH
6980: LD_VAR 0 8
6984: PUSH
6985: FOR_IN
6986: IFFALSE 8514
// begin points := [ 0 , 0 , 0 ] ;
6988: LD_ADDR_VAR 0 9
6992: PUSH
6993: LD_INT 0
6995: PUSH
6996: LD_INT 0
6998: PUSH
6999: LD_INT 0
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: ST_TO_ADDR
// bpoints := 1 ;
7007: LD_ADDR_VAR 0 10
7011: PUSH
7012: LD_INT 1
7014: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7015: LD_VAR 0 6
7019: PPUSH
7020: CALL_OW 247
7024: PUSH
7025: LD_INT 1
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7615
7033: POP
// begin if GetClass ( i ) = 1 then
7034: LD_VAR 0 6
7038: PPUSH
7039: CALL_OW 257
7043: PUSH
7044: LD_INT 1
7046: EQUAL
7047: IFFALSE 7068
// points := [ 10 , 5 , 3 ] ;
7049: LD_ADDR_VAR 0 9
7053: PUSH
7054: LD_INT 10
7056: PUSH
7057: LD_INT 5
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7068: LD_VAR 0 6
7072: PPUSH
7073: CALL_OW 257
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: LD_INT 3
7083: PUSH
7084: LD_INT 4
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: IN
7092: IFFALSE 7113
// points := [ 3 , 2 , 1 ] ;
7094: LD_ADDR_VAR 0 9
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: LD_INT 2
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7113: LD_VAR 0 6
7117: PPUSH
7118: CALL_OW 257
7122: PUSH
7123: LD_INT 5
7125: EQUAL
7126: IFFALSE 7147
// points := [ 130 , 5 , 2 ] ;
7128: LD_ADDR_VAR 0 9
7132: PUSH
7133: LD_INT 130
7135: PUSH
7136: LD_INT 5
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7147: LD_VAR 0 6
7151: PPUSH
7152: CALL_OW 257
7156: PUSH
7157: LD_INT 8
7159: EQUAL
7160: IFFALSE 7181
// points := [ 35 , 35 , 30 ] ;
7162: LD_ADDR_VAR 0 9
7166: PUSH
7167: LD_INT 35
7169: PUSH
7170: LD_INT 35
7172: PUSH
7173: LD_INT 30
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7181: LD_VAR 0 6
7185: PPUSH
7186: CALL_OW 257
7190: PUSH
7191: LD_INT 9
7193: EQUAL
7194: IFFALSE 7215
// points := [ 20 , 55 , 40 ] ;
7196: LD_ADDR_VAR 0 9
7200: PUSH
7201: LD_INT 20
7203: PUSH
7204: LD_INT 55
7206: PUSH
7207: LD_INT 40
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7215: LD_VAR 0 6
7219: PPUSH
7220: CALL_OW 257
7224: PUSH
7225: LD_INT 12
7227: PUSH
7228: LD_INT 16
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: IN
7235: IFFALSE 7256
// points := [ 5 , 3 , 2 ] ;
7237: LD_ADDR_VAR 0 9
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7256: LD_VAR 0 6
7260: PPUSH
7261: CALL_OW 257
7265: PUSH
7266: LD_INT 17
7268: EQUAL
7269: IFFALSE 7290
// points := [ 100 , 50 , 75 ] ;
7271: LD_ADDR_VAR 0 9
7275: PUSH
7276: LD_INT 100
7278: PUSH
7279: LD_INT 50
7281: PUSH
7282: LD_INT 75
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7290: LD_VAR 0 6
7294: PPUSH
7295: CALL_OW 257
7299: PUSH
7300: LD_INT 15
7302: EQUAL
7303: IFFALSE 7324
// points := [ 10 , 5 , 3 ] ;
7305: LD_ADDR_VAR 0 9
7309: PUSH
7310: LD_INT 10
7312: PUSH
7313: LD_INT 5
7315: PUSH
7316: LD_INT 3
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7324: LD_VAR 0 6
7328: PPUSH
7329: CALL_OW 257
7333: PUSH
7334: LD_INT 14
7336: EQUAL
7337: IFFALSE 7358
// points := [ 10 , 0 , 0 ] ;
7339: LD_ADDR_VAR 0 9
7343: PUSH
7344: LD_INT 10
7346: PUSH
7347: LD_INT 0
7349: PUSH
7350: LD_INT 0
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7358: LD_VAR 0 6
7362: PPUSH
7363: CALL_OW 257
7367: PUSH
7368: LD_INT 11
7370: EQUAL
7371: IFFALSE 7392
// points := [ 30 , 10 , 5 ] ;
7373: LD_ADDR_VAR 0 9
7377: PUSH
7378: LD_INT 30
7380: PUSH
7381: LD_INT 10
7383: PUSH
7384: LD_INT 5
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7392: LD_VAR 0 1
7396: PPUSH
7397: LD_INT 5
7399: PPUSH
7400: CALL_OW 321
7404: PUSH
7405: LD_INT 2
7407: EQUAL
7408: IFFALSE 7425
// bpoints := bpoints * 1.8 ;
7410: LD_ADDR_VAR 0 10
7414: PUSH
7415: LD_VAR 0 10
7419: PUSH
7420: LD_REAL  1.80000000000000E+0000
7423: MUL
7424: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7425: LD_VAR 0 6
7429: PPUSH
7430: CALL_OW 257
7434: PUSH
7435: LD_INT 1
7437: PUSH
7438: LD_INT 2
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: LD_INT 4
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: IN
7453: IFFALSE 7473
7455: PUSH
7456: LD_VAR 0 1
7460: PPUSH
7461: LD_INT 51
7463: PPUSH
7464: CALL_OW 321
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: AND
7473: IFFALSE 7490
// bpoints := bpoints * 1.2 ;
7475: LD_ADDR_VAR 0 10
7479: PUSH
7480: LD_VAR 0 10
7484: PUSH
7485: LD_REAL  1.20000000000000E+0000
7488: MUL
7489: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7490: LD_VAR 0 6
7494: PPUSH
7495: CALL_OW 257
7499: PUSH
7500: LD_INT 5
7502: PUSH
7503: LD_INT 7
7505: PUSH
7506: LD_INT 9
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: IN
7514: IFFALSE 7534
7516: PUSH
7517: LD_VAR 0 1
7521: PPUSH
7522: LD_INT 52
7524: PPUSH
7525: CALL_OW 321
7529: PUSH
7530: LD_INT 2
7532: EQUAL
7533: AND
7534: IFFALSE 7551
// bpoints := bpoints * 1.5 ;
7536: LD_ADDR_VAR 0 10
7540: PUSH
7541: LD_VAR 0 10
7545: PUSH
7546: LD_REAL  1.50000000000000E+0000
7549: MUL
7550: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 66
7558: PPUSH
7559: CALL_OW 321
7563: PUSH
7564: LD_INT 2
7566: EQUAL
7567: IFFALSE 7584
// bpoints := bpoints * 1.1 ;
7569: LD_ADDR_VAR 0 10
7573: PUSH
7574: LD_VAR 0 10
7578: PUSH
7579: LD_REAL  1.10000000000000E+0000
7582: MUL
7583: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7584: LD_ADDR_VAR 0 10
7588: PUSH
7589: LD_VAR 0 10
7593: PUSH
7594: LD_VAR 0 6
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL_OW 259
7606: PUSH
7607: LD_REAL  1.15000000000000E+0000
7610: MUL
7611: MUL
7612: ST_TO_ADDR
// end ; unit_vehicle :
7613: GO 8443
7615: LD_INT 2
7617: DOUBLE
7618: EQUAL
7619: IFTRUE 7623
7621: GO 8431
7623: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7624: LD_VAR 0 6
7628: PPUSH
7629: CALL_OW 264
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: LD_INT 42
7639: PUSH
7640: LD_INT 24
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: IN
7648: IFFALSE 7669
// points := [ 25 , 5 , 3 ] ;
7650: LD_ADDR_VAR 0 9
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 5
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7669: LD_VAR 0 6
7673: PPUSH
7674: CALL_OW 264
7678: PUSH
7679: LD_INT 4
7681: PUSH
7682: LD_INT 43
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: IN
7693: IFFALSE 7714
// points := [ 40 , 15 , 5 ] ;
7695: LD_ADDR_VAR 0 9
7699: PUSH
7700: LD_INT 40
7702: PUSH
7703: LD_INT 15
7705: PUSH
7706: LD_INT 5
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7714: LD_VAR 0 6
7718: PPUSH
7719: CALL_OW 264
7723: PUSH
7724: LD_INT 3
7726: PUSH
7727: LD_INT 23
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: IN
7734: IFFALSE 7755
// points := [ 7 , 25 , 8 ] ;
7736: LD_ADDR_VAR 0 9
7740: PUSH
7741: LD_INT 7
7743: PUSH
7744: LD_INT 25
7746: PUSH
7747: LD_INT 8
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7755: LD_VAR 0 6
7759: PPUSH
7760: CALL_OW 264
7764: PUSH
7765: LD_INT 5
7767: PUSH
7768: LD_INT 27
7770: PUSH
7771: LD_INT 44
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: LIST
7778: IN
7779: IFFALSE 7800
// points := [ 14 , 50 , 16 ] ;
7781: LD_ADDR_VAR 0 9
7785: PUSH
7786: LD_INT 14
7788: PUSH
7789: LD_INT 50
7791: PUSH
7792: LD_INT 16
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7800: LD_VAR 0 6
7804: PPUSH
7805: CALL_OW 264
7809: PUSH
7810: LD_INT 6
7812: PUSH
7813: LD_INT 46
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: IN
7820: IFFALSE 7841
// points := [ 32 , 120 , 70 ] ;
7822: LD_ADDR_VAR 0 9
7826: PUSH
7827: LD_INT 32
7829: PUSH
7830: LD_INT 120
7832: PUSH
7833: LD_INT 70
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7841: LD_VAR 0 6
7845: PPUSH
7846: CALL_OW 264
7850: PUSH
7851: LD_INT 7
7853: PUSH
7854: LD_INT 28
7856: PUSH
7857: LD_INT 45
7859: PUSH
7860: LD_INT 92
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: IN
7869: IFFALSE 7890
// points := [ 35 , 20 , 45 ] ;
7871: LD_ADDR_VAR 0 9
7875: PUSH
7876: LD_INT 35
7878: PUSH
7879: LD_INT 20
7881: PUSH
7882: LD_INT 45
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7890: LD_VAR 0 6
7894: PPUSH
7895: CALL_OW 264
7899: PUSH
7900: LD_INT 47
7902: PUSH
7903: EMPTY
7904: LIST
7905: IN
7906: IFFALSE 7927
// points := [ 67 , 45 , 75 ] ;
7908: LD_ADDR_VAR 0 9
7912: PUSH
7913: LD_INT 67
7915: PUSH
7916: LD_INT 45
7918: PUSH
7919: LD_INT 75
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7927: LD_VAR 0 6
7931: PPUSH
7932: CALL_OW 264
7936: PUSH
7937: LD_INT 26
7939: PUSH
7940: EMPTY
7941: LIST
7942: IN
7943: IFFALSE 7964
// points := [ 120 , 30 , 80 ] ;
7945: LD_ADDR_VAR 0 9
7949: PUSH
7950: LD_INT 120
7952: PUSH
7953: LD_INT 30
7955: PUSH
7956: LD_INT 80
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7964: LD_VAR 0 6
7968: PPUSH
7969: CALL_OW 264
7973: PUSH
7974: LD_INT 22
7976: PUSH
7977: EMPTY
7978: LIST
7979: IN
7980: IFFALSE 8001
// points := [ 40 , 1 , 1 ] ;
7982: LD_ADDR_VAR 0 9
7986: PUSH
7987: LD_INT 40
7989: PUSH
7990: LD_INT 1
7992: PUSH
7993: LD_INT 1
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8001: LD_VAR 0 6
8005: PPUSH
8006: CALL_OW 264
8010: PUSH
8011: LD_INT 29
8013: PUSH
8014: EMPTY
8015: LIST
8016: IN
8017: IFFALSE 8038
// points := [ 70 , 200 , 400 ] ;
8019: LD_ADDR_VAR 0 9
8023: PUSH
8024: LD_INT 70
8026: PUSH
8027: LD_INT 200
8029: PUSH
8030: LD_INT 400
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8038: LD_VAR 0 6
8042: PPUSH
8043: CALL_OW 264
8047: PUSH
8048: LD_INT 14
8050: PUSH
8051: LD_INT 53
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: IN
8058: IFFALSE 8079
// points := [ 40 , 10 , 20 ] ;
8060: LD_ADDR_VAR 0 9
8064: PUSH
8065: LD_INT 40
8067: PUSH
8068: LD_INT 10
8070: PUSH
8071: LD_INT 20
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8079: LD_VAR 0 6
8083: PPUSH
8084: CALL_OW 264
8088: PUSH
8089: LD_INT 9
8091: PUSH
8092: EMPTY
8093: LIST
8094: IN
8095: IFFALSE 8116
// points := [ 5 , 70 , 20 ] ;
8097: LD_ADDR_VAR 0 9
8101: PUSH
8102: LD_INT 5
8104: PUSH
8105: LD_INT 70
8107: PUSH
8108: LD_INT 20
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8116: LD_VAR 0 6
8120: PPUSH
8121: CALL_OW 264
8125: PUSH
8126: LD_INT 10
8128: PUSH
8129: EMPTY
8130: LIST
8131: IN
8132: IFFALSE 8153
// points := [ 35 , 110 , 70 ] ;
8134: LD_ADDR_VAR 0 9
8138: PUSH
8139: LD_INT 35
8141: PUSH
8142: LD_INT 110
8144: PUSH
8145: LD_INT 70
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8153: LD_VAR 0 6
8157: PPUSH
8158: CALL_OW 265
8162: PUSH
8163: LD_INT 25
8165: EQUAL
8166: IFFALSE 8187
// points := [ 80 , 65 , 100 ] ;
8168: LD_ADDR_VAR 0 9
8172: PUSH
8173: LD_INT 80
8175: PUSH
8176: LD_INT 65
8178: PUSH
8179: LD_INT 100
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8187: LD_VAR 0 6
8191: PPUSH
8192: CALL_OW 263
8196: PUSH
8197: LD_INT 1
8199: EQUAL
8200: IFFALSE 8235
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8202: LD_ADDR_VAR 0 10
8206: PUSH
8207: LD_VAR 0 10
8211: PUSH
8212: LD_VAR 0 6
8216: PPUSH
8217: CALL_OW 311
8221: PPUSH
8222: LD_INT 3
8224: PPUSH
8225: CALL_OW 259
8229: PUSH
8230: LD_INT 4
8232: MUL
8233: MUL
8234: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8235: LD_VAR 0 6
8239: PPUSH
8240: CALL_OW 263
8244: PUSH
8245: LD_INT 2
8247: EQUAL
8248: IFFALSE 8299
// begin j := IsControledBy ( i ) ;
8250: LD_ADDR_VAR 0 7
8254: PUSH
8255: LD_VAR 0 6
8259: PPUSH
8260: CALL_OW 312
8264: ST_TO_ADDR
// if j then
8265: LD_VAR 0 7
8269: IFFALSE 8299
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8271: LD_ADDR_VAR 0 10
8275: PUSH
8276: LD_VAR 0 10
8280: PUSH
8281: LD_VAR 0 7
8285: PPUSH
8286: LD_INT 3
8288: PPUSH
8289: CALL_OW 259
8293: PUSH
8294: LD_INT 3
8296: MUL
8297: MUL
8298: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8299: LD_VAR 0 6
8303: PPUSH
8304: CALL_OW 264
8308: PUSH
8309: LD_INT 5
8311: PUSH
8312: LD_INT 6
8314: PUSH
8315: LD_INT 46
8317: PUSH
8318: LD_INT 44
8320: PUSH
8321: LD_INT 47
8323: PUSH
8324: LD_INT 45
8326: PUSH
8327: LD_INT 28
8329: PUSH
8330: LD_INT 7
8332: PUSH
8333: LD_INT 27
8335: PUSH
8336: LD_INT 29
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: IN
8351: IFFALSE 8371
8353: PUSH
8354: LD_VAR 0 1
8358: PPUSH
8359: LD_INT 52
8361: PPUSH
8362: CALL_OW 321
8366: PUSH
8367: LD_INT 2
8369: EQUAL
8370: AND
8371: IFFALSE 8388
// bpoints := bpoints * 1.2 ;
8373: LD_ADDR_VAR 0 10
8377: PUSH
8378: LD_VAR 0 10
8382: PUSH
8383: LD_REAL  1.20000000000000E+0000
8386: MUL
8387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8388: LD_VAR 0 6
8392: PPUSH
8393: CALL_OW 264
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: LD_INT 46
8403: PUSH
8404: LD_INT 47
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: LIST
8411: IN
8412: IFFALSE 8429
// bpoints := bpoints * 1.2 ;
8414: LD_ADDR_VAR 0 10
8418: PUSH
8419: LD_VAR 0 10
8423: PUSH
8424: LD_REAL  1.20000000000000E+0000
8427: MUL
8428: ST_TO_ADDR
// end ; unit_building :
8429: GO 8443
8431: LD_INT 3
8433: DOUBLE
8434: EQUAL
8435: IFTRUE 8439
8437: GO 8442
8439: POP
// ; end ;
8440: GO 8443
8442: POP
// for j = 1 to 3 do
8443: LD_ADDR_VAR 0 7
8447: PUSH
8448: DOUBLE
8449: LD_INT 1
8451: DEC
8452: ST_TO_ADDR
8453: LD_INT 3
8455: PUSH
8456: FOR_TO
8457: IFFALSE 8510
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8459: LD_ADDR_VAR 0 5
8463: PUSH
8464: LD_VAR 0 5
8468: PPUSH
8469: LD_VAR 0 7
8473: PPUSH
8474: LD_VAR 0 5
8478: PUSH
8479: LD_VAR 0 7
8483: ARRAY
8484: PUSH
8485: LD_VAR 0 9
8489: PUSH
8490: LD_VAR 0 7
8494: ARRAY
8495: PUSH
8496: LD_VAR 0 10
8500: MUL
8501: PLUS
8502: PPUSH
8503: CALL_OW 1
8507: ST_TO_ADDR
8508: GO 8456
8510: POP
8511: POP
// end ;
8512: GO 6985
8514: POP
8515: POP
// result := Replace ( result , 4 , tmp ) ;
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: LD_VAR 0 5
8525: PPUSH
8526: LD_INT 4
8528: PPUSH
8529: LD_VAR 0 8
8533: PPUSH
8534: CALL_OW 1
8538: ST_TO_ADDR
// end ;
8539: LD_VAR 0 5
8543: RET
// export function DangerAtRange ( unit , range ) ; begin
8544: LD_INT 0
8546: PPUSH
// if not unit then
8547: LD_VAR 0 1
8551: NOT
8552: IFFALSE 8556
// exit ;
8554: GO 8601
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8556: LD_ADDR_VAR 0 3
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 255
8570: PPUSH
8571: LD_VAR 0 1
8575: PPUSH
8576: CALL_OW 250
8580: PPUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 251
8590: PPUSH
8591: LD_VAR 0 2
8595: PPUSH
8596: CALL 6835 0 4
8600: ST_TO_ADDR
// end ;
8601: LD_VAR 0 3
8605: RET
// export function DangerInArea ( side , area ) ; begin
8606: LD_INT 0
8608: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8609: LD_ADDR_VAR 0 3
8613: PUSH
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_INT 81
8621: PUSH
8622: LD_VAR 0 1
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 70
8635: ST_TO_ADDR
// end ;
8636: LD_VAR 0 3
8640: RET
// export function IsExtension ( b ) ; begin
8641: LD_INT 0
8643: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8644: LD_ADDR_VAR 0 2
8648: PUSH
8649: LD_VAR 0 1
8653: PUSH
8654: LD_INT 23
8656: PUSH
8657: LD_INT 20
8659: PUSH
8660: LD_INT 22
8662: PUSH
8663: LD_INT 17
8665: PUSH
8666: LD_INT 24
8668: PUSH
8669: LD_INT 21
8671: PUSH
8672: LD_INT 19
8674: PUSH
8675: LD_INT 16
8677: PUSH
8678: LD_INT 25
8680: PUSH
8681: LD_INT 18
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: IN
8696: ST_TO_ADDR
// end ;
8697: LD_VAR 0 2
8701: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
// result := [ ] ;
8707: LD_ADDR_VAR 0 4
8711: PUSH
8712: EMPTY
8713: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8714: LD_ADDR_VAR 0 5
8718: PUSH
8719: LD_VAR 0 2
8723: PPUSH
8724: LD_INT 21
8726: PUSH
8727: LD_INT 3
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 70
8738: ST_TO_ADDR
// if not tmp then
8739: LD_VAR 0 5
8743: NOT
8744: IFFALSE 8748
// exit ;
8746: GO 8812
// if checkLink then
8748: LD_VAR 0 3
8752: IFFALSE 8802
// begin for i in tmp do
8754: LD_ADDR_VAR 0 6
8758: PUSH
8759: LD_VAR 0 5
8763: PUSH
8764: FOR_IN
8765: IFFALSE 8800
// if GetBase ( i ) <> base then
8767: LD_VAR 0 6
8771: PPUSH
8772: CALL_OW 274
8776: PUSH
8777: LD_VAR 0 1
8781: NONEQUAL
8782: IFFALSE 8798
// ComLinkToBase ( base , i ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_VAR 0 6
8793: PPUSH
8794: CALL_OW 169
8798: GO 8764
8800: POP
8801: POP
// end ; result := tmp ;
8802: LD_ADDR_VAR 0 4
8806: PUSH
8807: LD_VAR 0 5
8811: ST_TO_ADDR
// end ;
8812: LD_VAR 0 4
8816: RET
// export function ComComplete ( units , b ) ; var i ; begin
8817: LD_INT 0
8819: PPUSH
8820: PPUSH
// if not units then
8821: LD_VAR 0 1
8825: NOT
8826: IFFALSE 8830
// exit ;
8828: GO 8920
// for i in units do
8830: LD_ADDR_VAR 0 4
8834: PUSH
8835: LD_VAR 0 1
8839: PUSH
8840: FOR_IN
8841: IFFALSE 8918
// if BuildingStatus ( b ) = bs_build then
8843: LD_VAR 0 2
8847: PPUSH
8848: CALL_OW 461
8852: PUSH
8853: LD_INT 1
8855: EQUAL
8856: IFFALSE 8916
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8858: LD_VAR 0 4
8862: PPUSH
8863: LD_STRING h
8865: PUSH
8866: LD_VAR 0 2
8870: PPUSH
8871: CALL_OW 250
8875: PUSH
8876: LD_VAR 0 2
8880: PPUSH
8881: CALL_OW 251
8885: PUSH
8886: LD_VAR 0 2
8890: PUSH
8891: LD_INT 0
8893: PUSH
8894: LD_INT 0
8896: PUSH
8897: LD_INT 0
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: PPUSH
8912: CALL_OW 446
8916: GO 8840
8918: POP
8919: POP
// end ;
8920: LD_VAR 0 3
8924: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
8929: PPUSH
8930: PPUSH
8931: PPUSH
8932: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8933: LD_VAR 0 1
8937: NOT
8938: IFTRUE 8955
8940: PUSH
8941: LD_VAR 0 1
8945: PPUSH
8946: CALL_OW 263
8950: PUSH
8951: LD_INT 2
8953: NONEQUAL
8954: OR
8955: IFFALSE 8959
// exit ;
8957: GO 9275
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8959: LD_ADDR_VAR 0 6
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_VAR 0 1
8971: PPUSH
8972: CALL_OW 255
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 2
8983: PUSH
8984: LD_INT 30
8986: PUSH
8987: LD_INT 36
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: PUSH
8994: LD_INT 34
8996: PUSH
8997: LD_INT 31
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PPUSH
9013: CALL_OW 69
9017: ST_TO_ADDR
// if not tmp then
9018: LD_VAR 0 6
9022: NOT
9023: IFFALSE 9027
// exit ;
9025: GO 9275
// result := [ ] ;
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: EMPTY
9033: ST_TO_ADDR
// for i in tmp do
9034: LD_ADDR_VAR 0 3
9038: PUSH
9039: LD_VAR 0 6
9043: PUSH
9044: FOR_IN
9045: IFFALSE 9116
// begin t := UnitsInside ( i ) ;
9047: LD_ADDR_VAR 0 4
9051: PUSH
9052: LD_VAR 0 3
9056: PPUSH
9057: CALL_OW 313
9061: ST_TO_ADDR
// if t then
9062: LD_VAR 0 4
9066: IFFALSE 9114
// for j in t do
9068: LD_ADDR_VAR 0 7
9072: PUSH
9073: LD_VAR 0 4
9077: PUSH
9078: FOR_IN
9079: IFFALSE 9112
// result := Replace ( result , result + 1 , j ) ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_VAR 0 2
9090: PPUSH
9091: LD_VAR 0 2
9095: PUSH
9096: LD_INT 1
9098: PLUS
9099: PPUSH
9100: LD_VAR 0 7
9104: PPUSH
9105: CALL_OW 1
9109: ST_TO_ADDR
9110: GO 9078
9112: POP
9113: POP
// end ;
9114: GO 9044
9116: POP
9117: POP
// if not result then
9118: LD_VAR 0 2
9122: NOT
9123: IFFALSE 9127
// exit ;
9125: GO 9275
// mech := result [ 1 ] ;
9127: LD_ADDR_VAR 0 5
9131: PUSH
9132: LD_VAR 0 2
9136: PUSH
9137: LD_INT 1
9139: ARRAY
9140: ST_TO_ADDR
// if result > 1 then
9141: LD_VAR 0 2
9145: PUSH
9146: LD_INT 1
9148: GREATER
9149: IFFALSE 9261
// begin for i = 2 to result do
9151: LD_ADDR_VAR 0 3
9155: PUSH
9156: DOUBLE
9157: LD_INT 2
9159: DEC
9160: ST_TO_ADDR
9161: LD_VAR 0 2
9165: PUSH
9166: FOR_TO
9167: IFFALSE 9259
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9169: LD_ADDR_VAR 0 4
9173: PUSH
9174: LD_VAR 0 2
9178: PUSH
9179: LD_VAR 0 3
9183: ARRAY
9184: PPUSH
9185: LD_INT 3
9187: PPUSH
9188: CALL_OW 259
9192: PUSH
9193: LD_VAR 0 2
9197: PUSH
9198: LD_VAR 0 3
9202: ARRAY
9203: PPUSH
9204: CALL_OW 432
9208: MINUS
9209: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9210: LD_VAR 0 4
9214: PUSH
9215: LD_VAR 0 5
9219: PPUSH
9220: LD_INT 3
9222: PPUSH
9223: CALL_OW 259
9227: PUSH
9228: LD_VAR 0 5
9232: PPUSH
9233: CALL_OW 432
9237: MINUS
9238: GREATEREQUAL
9239: IFFALSE 9257
// mech := result [ i ] ;
9241: LD_ADDR_VAR 0 5
9245: PUSH
9246: LD_VAR 0 2
9250: PUSH
9251: LD_VAR 0 3
9255: ARRAY
9256: ST_TO_ADDR
// end ;
9257: GO 9166
9259: POP
9260: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_VAR 0 5
9270: PPUSH
9271: CALL_OW 135
// end ;
9275: LD_VAR 0 2
9279: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9280: LD_INT 0
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
9293: PPUSH
9294: PPUSH
// result := [ ] ;
9295: LD_ADDR_VAR 0 7
9299: PUSH
9300: EMPTY
9301: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9302: LD_VAR 0 1
9306: PPUSH
9307: CALL_OW 266
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: IN
9322: NOT
9323: IFFALSE 9327
// exit ;
9325: GO 10967
// if name then
9327: LD_VAR 0 3
9331: IFFALSE 9347
// SetBName ( base_dep , name ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_VAR 0 3
9342: PPUSH
9343: CALL_OW 500
// base := GetBase ( base_dep ) ;
9347: LD_ADDR_VAR 0 15
9351: PUSH
9352: LD_VAR 0 1
9356: PPUSH
9357: CALL_OW 274
9361: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9362: LD_ADDR_VAR 0 16
9366: PUSH
9367: LD_VAR 0 1
9371: PPUSH
9372: CALL_OW 255
9376: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9377: LD_ADDR_VAR 0 17
9381: PUSH
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 248
9391: ST_TO_ADDR
// if sources then
9392: LD_VAR 0 5
9396: IFFALSE 9443
// for i = 1 to 3 do
9398: LD_ADDR_VAR 0 8
9402: PUSH
9403: DOUBLE
9404: LD_INT 1
9406: DEC
9407: ST_TO_ADDR
9408: LD_INT 3
9410: PUSH
9411: FOR_TO
9412: IFFALSE 9441
// AddResourceType ( base , i , sources [ i ] ) ;
9414: LD_VAR 0 15
9418: PPUSH
9419: LD_VAR 0 8
9423: PPUSH
9424: LD_VAR 0 5
9428: PUSH
9429: LD_VAR 0 8
9433: ARRAY
9434: PPUSH
9435: CALL_OW 276
9439: GO 9411
9441: POP
9442: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9443: LD_ADDR_VAR 0 18
9447: PUSH
9448: LD_VAR 0 15
9452: PPUSH
9453: LD_VAR 0 2
9457: PPUSH
9458: LD_INT 1
9460: PPUSH
9461: CALL 8702 0 3
9465: ST_TO_ADDR
// InitHc ;
9466: CALL_OW 19
// InitUc ;
9470: CALL_OW 18
// uc_side := side ;
9474: LD_ADDR_OWVAR 20
9478: PUSH
9479: LD_VAR 0 16
9483: ST_TO_ADDR
// uc_nation := nation ;
9484: LD_ADDR_OWVAR 21
9488: PUSH
9489: LD_VAR 0 17
9493: ST_TO_ADDR
// if buildings then
9494: LD_VAR 0 18
9498: IFFALSE 10826
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9500: LD_ADDR_VAR 0 19
9504: PUSH
9505: LD_VAR 0 18
9509: PPUSH
9510: LD_INT 2
9512: PUSH
9513: LD_INT 30
9515: PUSH
9516: LD_INT 29
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 30
9525: PUSH
9526: LD_INT 30
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: PPUSH
9538: CALL_OW 72
9542: ST_TO_ADDR
// if tmp then
9543: LD_VAR 0 19
9547: IFFALSE 9595
// for i in tmp do
9549: LD_ADDR_VAR 0 8
9553: PUSH
9554: LD_VAR 0 19
9558: PUSH
9559: FOR_IN
9560: IFFALSE 9593
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9562: LD_VAR 0 8
9566: PPUSH
9567: CALL_OW 250
9571: PPUSH
9572: LD_VAR 0 8
9576: PPUSH
9577: CALL_OW 251
9581: PPUSH
9582: LD_VAR 0 16
9586: PPUSH
9587: CALL_OW 441
9591: GO 9559
9593: POP
9594: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9595: LD_VAR 0 18
9599: PPUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 30
9605: PUSH
9606: LD_INT 32
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 30
9615: PUSH
9616: LD_INT 33
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 72
9632: IFFALSE 9720
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9634: LD_ADDR_VAR 0 8
9638: PUSH
9639: LD_VAR 0 18
9643: PPUSH
9644: LD_INT 2
9646: PUSH
9647: LD_INT 30
9649: PUSH
9650: LD_INT 32
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 30
9659: PUSH
9660: LD_INT 33
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: PPUSH
9672: CALL_OW 72
9676: PUSH
9677: FOR_IN
9678: IFFALSE 9718
// begin if not GetBWeapon ( i ) then
9680: LD_VAR 0 8
9684: PPUSH
9685: CALL_OW 269
9689: NOT
9690: IFFALSE 9716
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9692: LD_VAR 0 8
9696: PPUSH
9697: LD_VAR 0 8
9701: PPUSH
9702: LD_VAR 0 2
9706: PPUSH
9707: CALL 10972 0 2
9711: PPUSH
9712: CALL_OW 431
// end ;
9716: GO 9677
9718: POP
9719: POP
// end ; for i = 1 to personel do
9720: LD_ADDR_VAR 0 8
9724: PUSH
9725: DOUBLE
9726: LD_INT 1
9728: DEC
9729: ST_TO_ADDR
9730: LD_VAR 0 6
9734: PUSH
9735: FOR_TO
9736: IFFALSE 10806
// begin if i > 4 then
9738: LD_VAR 0 8
9742: PUSH
9743: LD_INT 4
9745: GREATER
9746: IFFALSE 9750
// break ;
9748: GO 10806
// case i of 1 :
9750: LD_VAR 0 8
9754: PUSH
9755: LD_INT 1
9757: DOUBLE
9758: EQUAL
9759: IFTRUE 9763
9761: GO 9843
9763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9764: LD_ADDR_VAR 0 12
9768: PUSH
9769: LD_VAR 0 18
9773: PPUSH
9774: LD_INT 22
9776: PUSH
9777: LD_VAR 0 16
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 58
9788: PUSH
9789: EMPTY
9790: LIST
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 30
9797: PUSH
9798: LD_INT 32
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 30
9807: PUSH
9808: LD_INT 4
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 30
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: PPUSH
9836: CALL_OW 72
9840: ST_TO_ADDR
9841: GO 10065
9843: LD_INT 2
9845: DOUBLE
9846: EQUAL
9847: IFTRUE 9851
9849: GO 9913
9851: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9852: LD_ADDR_VAR 0 12
9856: PUSH
9857: LD_VAR 0 18
9861: PPUSH
9862: LD_INT 22
9864: PUSH
9865: LD_VAR 0 16
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 2
9876: PUSH
9877: LD_INT 30
9879: PUSH
9880: LD_INT 0
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 30
9889: PUSH
9890: LD_INT 1
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 72
9910: ST_TO_ADDR
9911: GO 10065
9913: LD_INT 3
9915: DOUBLE
9916: EQUAL
9917: IFTRUE 9921
9919: GO 9983
9921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9922: LD_ADDR_VAR 0 12
9926: PUSH
9927: LD_VAR 0 18
9931: PPUSH
9932: LD_INT 22
9934: PUSH
9935: LD_VAR 0 16
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: LD_INT 30
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 3
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PPUSH
9976: CALL_OW 72
9980: ST_TO_ADDR
9981: GO 10065
9983: LD_INT 4
9985: DOUBLE
9986: EQUAL
9987: IFTRUE 9991
9989: GO 10064
9991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9992: LD_ADDR_VAR 0 12
9996: PUSH
9997: LD_VAR 0 18
10001: PPUSH
10002: LD_INT 22
10004: PUSH
10005: LD_VAR 0 16
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: LD_INT 30
10019: PUSH
10020: LD_INT 6
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 7
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 8
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 72
10061: ST_TO_ADDR
10062: GO 10065
10064: POP
// if i = 1 then
10065: LD_VAR 0 8
10069: PUSH
10070: LD_INT 1
10072: EQUAL
10073: IFFALSE 10184
// begin tmp := [ ] ;
10075: LD_ADDR_VAR 0 19
10079: PUSH
10080: EMPTY
10081: ST_TO_ADDR
// for j in f do
10082: LD_ADDR_VAR 0 9
10086: PUSH
10087: LD_VAR 0 12
10091: PUSH
10092: FOR_IN
10093: IFFALSE 10166
// if GetBType ( j ) = b_bunker then
10095: LD_VAR 0 9
10099: PPUSH
10100: CALL_OW 266
10104: PUSH
10105: LD_INT 32
10107: EQUAL
10108: IFFALSE 10135
// tmp := Insert ( tmp , 1 , j ) else
10110: LD_ADDR_VAR 0 19
10114: PUSH
10115: LD_VAR 0 19
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: LD_VAR 0 9
10127: PPUSH
10128: CALL_OW 2
10132: ST_TO_ADDR
10133: GO 10164
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10135: LD_ADDR_VAR 0 19
10139: PUSH
10140: LD_VAR 0 19
10144: PPUSH
10145: LD_VAR 0 19
10149: PUSH
10150: LD_INT 1
10152: PLUS
10153: PPUSH
10154: LD_VAR 0 9
10158: PPUSH
10159: CALL_OW 2
10163: ST_TO_ADDR
10164: GO 10092
10166: POP
10167: POP
// if tmp then
10168: LD_VAR 0 19
10172: IFFALSE 10184
// f := tmp ;
10174: LD_ADDR_VAR 0 12
10178: PUSH
10179: LD_VAR 0 19
10183: ST_TO_ADDR
// end ; x := personel [ i ] ;
10184: LD_ADDR_VAR 0 13
10188: PUSH
10189: LD_VAR 0 6
10193: PUSH
10194: LD_VAR 0 8
10198: ARRAY
10199: ST_TO_ADDR
// if x = - 1 then
10200: LD_VAR 0 13
10204: PUSH
10205: LD_INT 1
10207: NEG
10208: EQUAL
10209: IFFALSE 10420
// begin for j in f do
10211: LD_ADDR_VAR 0 9
10215: PUSH
10216: LD_VAR 0 12
10220: PUSH
10221: FOR_IN
10222: IFFALSE 10416
// repeat InitHc ;
10224: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10228: LD_VAR 0 9
10232: PPUSH
10233: CALL_OW 266
10237: PUSH
10238: LD_INT 5
10240: EQUAL
10241: IFFALSE 10311
// begin if UnitsInside ( j ) < 3 then
10243: LD_VAR 0 9
10247: PPUSH
10248: CALL_OW 313
10252: PUSH
10253: LD_INT 3
10255: LESS
10256: IFFALSE 10292
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10258: LD_INT 0
10260: PPUSH
10261: LD_INT 5
10263: PUSH
10264: LD_INT 8
10266: PUSH
10267: LD_INT 9
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: PUSH
10275: LD_VAR 0 17
10279: ARRAY
10280: PPUSH
10281: LD_VAR 0 4
10285: PPUSH
10286: CALL_OW 380
10290: GO 10309
// PrepareHuman ( false , i , skill ) ;
10292: LD_INT 0
10294: PPUSH
10295: LD_VAR 0 8
10299: PPUSH
10300: LD_VAR 0 4
10304: PPUSH
10305: CALL_OW 380
// end else
10309: GO 10328
// PrepareHuman ( false , i , skill ) ;
10311: LD_INT 0
10313: PPUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: LD_VAR 0 4
10323: PPUSH
10324: CALL_OW 380
// un := CreateHuman ;
10328: LD_ADDR_VAR 0 14
10332: PUSH
10333: CALL_OW 44
10337: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10338: LD_ADDR_VAR 0 7
10342: PUSH
10343: LD_VAR 0 7
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: LD_VAR 0 14
10355: PPUSH
10356: CALL_OW 2
10360: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10361: LD_VAR 0 14
10365: PPUSH
10366: LD_VAR 0 9
10370: PPUSH
10371: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10375: LD_VAR 0 9
10379: PPUSH
10380: CALL_OW 313
10384: PUSH
10385: LD_INT 6
10387: EQUAL
10388: IFTRUE 10412
10390: PUSH
10391: LD_VAR 0 9
10395: PPUSH
10396: CALL_OW 266
10400: PUSH
10401: LD_INT 32
10403: PUSH
10404: LD_INT 31
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: IN
10411: OR
10412: IFFALSE 10224
10414: GO 10221
10416: POP
10417: POP
// end else
10418: GO 10804
// for j = 1 to x do
10420: LD_ADDR_VAR 0 9
10424: PUSH
10425: DOUBLE
10426: LD_INT 1
10428: DEC
10429: ST_TO_ADDR
10430: LD_VAR 0 13
10434: PUSH
10435: FOR_TO
10436: IFFALSE 10802
// begin InitHc ;
10438: CALL_OW 19
// if not f then
10442: LD_VAR 0 12
10446: NOT
10447: IFFALSE 10536
// begin PrepareHuman ( false , i , skill ) ;
10449: LD_INT 0
10451: PPUSH
10452: LD_VAR 0 8
10456: PPUSH
10457: LD_VAR 0 4
10461: PPUSH
10462: CALL_OW 380
// un := CreateHuman ;
10466: LD_ADDR_VAR 0 14
10470: PUSH
10471: CALL_OW 44
10475: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10476: LD_ADDR_VAR 0 7
10480: PUSH
10481: LD_VAR 0 7
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: LD_VAR 0 14
10493: PPUSH
10494: CALL_OW 2
10498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10499: LD_VAR 0 14
10503: PPUSH
10504: LD_VAR 0 1
10508: PPUSH
10509: CALL_OW 250
10513: PPUSH
10514: LD_VAR 0 1
10518: PPUSH
10519: CALL_OW 251
10523: PPUSH
10524: LD_INT 10
10526: PPUSH
10527: LD_INT 0
10529: PPUSH
10530: CALL_OW 50
// continue ;
10534: GO 10435
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10536: LD_VAR 0 12
10540: PUSH
10541: LD_INT 1
10543: ARRAY
10544: PPUSH
10545: CALL_OW 313
10549: IFFALSE 10577
10551: PUSH
10552: LD_VAR 0 12
10556: PUSH
10557: LD_INT 1
10559: ARRAY
10560: PPUSH
10561: CALL_OW 266
10565: PUSH
10566: LD_INT 32
10568: PUSH
10569: LD_INT 31
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: IN
10576: AND
10577: IFTRUE 10598
10579: PUSH
10580: LD_VAR 0 12
10584: PUSH
10585: LD_INT 1
10587: ARRAY
10588: PPUSH
10589: CALL_OW 313
10593: PUSH
10594: LD_INT 6
10596: EQUAL
10597: OR
10598: IFFALSE 10618
// f := Delete ( f , 1 ) ;
10600: LD_ADDR_VAR 0 12
10604: PUSH
10605: LD_VAR 0 12
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 3
10617: ST_TO_ADDR
// if not f then
10618: LD_VAR 0 12
10622: NOT
10623: IFFALSE 10641
// begin x := x + 2 ;
10625: LD_ADDR_VAR 0 13
10629: PUSH
10630: LD_VAR 0 13
10634: PUSH
10635: LD_INT 2
10637: PLUS
10638: ST_TO_ADDR
// continue ;
10639: GO 10435
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10641: LD_VAR 0 12
10645: PUSH
10646: LD_INT 1
10648: ARRAY
10649: PPUSH
10650: CALL_OW 266
10654: PUSH
10655: LD_INT 5
10657: EQUAL
10658: IFFALSE 10732
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10660: LD_VAR 0 12
10664: PUSH
10665: LD_INT 1
10667: ARRAY
10668: PPUSH
10669: CALL_OW 313
10673: PUSH
10674: LD_INT 3
10676: LESS
10677: IFFALSE 10713
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10679: LD_INT 0
10681: PPUSH
10682: LD_INT 5
10684: PUSH
10685: LD_INT 8
10687: PUSH
10688: LD_INT 9
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: LD_VAR 0 17
10700: ARRAY
10701: PPUSH
10702: LD_VAR 0 4
10706: PPUSH
10707: CALL_OW 380
10711: GO 10730
// PrepareHuman ( false , i , skill ) ;
10713: LD_INT 0
10715: PPUSH
10716: LD_VAR 0 8
10720: PPUSH
10721: LD_VAR 0 4
10725: PPUSH
10726: CALL_OW 380
// end else
10730: GO 10749
// PrepareHuman ( false , i , skill ) ;
10732: LD_INT 0
10734: PPUSH
10735: LD_VAR 0 8
10739: PPUSH
10740: LD_VAR 0 4
10744: PPUSH
10745: CALL_OW 380
// un := CreateHuman ;
10749: LD_ADDR_VAR 0 14
10753: PUSH
10754: CALL_OW 44
10758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10759: LD_ADDR_VAR 0 7
10763: PUSH
10764: LD_VAR 0 7
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: LD_VAR 0 14
10776: PPUSH
10777: CALL_OW 2
10781: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10782: LD_VAR 0 14
10786: PPUSH
10787: LD_VAR 0 12
10791: PUSH
10792: LD_INT 1
10794: ARRAY
10795: PPUSH
10796: CALL_OW 52
// end ;
10800: GO 10435
10802: POP
10803: POP
// end ;
10804: GO 9735
10806: POP
10807: POP
// result := result ^ buildings ;
10808: LD_ADDR_VAR 0 7
10812: PUSH
10813: LD_VAR 0 7
10817: PUSH
10818: LD_VAR 0 18
10822: ADD
10823: ST_TO_ADDR
// end else
10824: GO 10967
// begin for i = 1 to personel do
10826: LD_ADDR_VAR 0 8
10830: PUSH
10831: DOUBLE
10832: LD_INT 1
10834: DEC
10835: ST_TO_ADDR
10836: LD_VAR 0 6
10840: PUSH
10841: FOR_TO
10842: IFFALSE 10965
// begin if i > 4 then
10844: LD_VAR 0 8
10848: PUSH
10849: LD_INT 4
10851: GREATER
10852: IFFALSE 10856
// break ;
10854: GO 10965
// x := personel [ i ] ;
10856: LD_ADDR_VAR 0 13
10860: PUSH
10861: LD_VAR 0 6
10865: PUSH
10866: LD_VAR 0 8
10870: ARRAY
10871: ST_TO_ADDR
// if x = - 1 then
10872: LD_VAR 0 13
10876: PUSH
10877: LD_INT 1
10879: NEG
10880: EQUAL
10881: IFFALSE 10885
// continue ;
10883: GO 10841
// PrepareHuman ( false , i , skill ) ;
10885: LD_INT 0
10887: PPUSH
10888: LD_VAR 0 8
10892: PPUSH
10893: LD_VAR 0 4
10897: PPUSH
10898: CALL_OW 380
// un := CreateHuman ;
10902: LD_ADDR_VAR 0 14
10906: PUSH
10907: CALL_OW 44
10911: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10912: LD_VAR 0 14
10916: PPUSH
10917: LD_VAR 0 1
10921: PPUSH
10922: CALL_OW 250
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 251
10936: PPUSH
10937: LD_INT 10
10939: PPUSH
10940: LD_INT 0
10942: PPUSH
10943: CALL_OW 50
// result := result ^ un ;
10947: LD_ADDR_VAR 0 7
10951: PUSH
10952: LD_VAR 0 7
10956: PUSH
10957: LD_VAR 0 14
10961: ADD
10962: ST_TO_ADDR
// end ;
10963: GO 10841
10965: POP
10966: POP
// end ; end ;
10967: LD_VAR 0 7
10971: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
10986: PPUSH
10987: PPUSH
10988: PPUSH
10989: PPUSH
// result := false ;
10990: LD_ADDR_VAR 0 3
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10998: LD_VAR 0 1
11002: NOT
11003: IFTRUE 11028
11005: PUSH
11006: LD_VAR 0 1
11010: PPUSH
11011: CALL_OW 266
11015: PUSH
11016: LD_INT 32
11018: PUSH
11019: LD_INT 33
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: IN
11026: NOT
11027: OR
11028: IFFALSE 11032
// exit ;
11030: GO 12167
// nat := GetNation ( tower ) ;
11032: LD_ADDR_VAR 0 12
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 248
11046: ST_TO_ADDR
// side := GetSide ( tower ) ;
11047: LD_ADDR_VAR 0 16
11051: PUSH
11052: LD_VAR 0 1
11056: PPUSH
11057: CALL_OW 255
11061: ST_TO_ADDR
// x := GetX ( tower ) ;
11062: LD_ADDR_VAR 0 10
11066: PUSH
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 250
11076: ST_TO_ADDR
// y := GetY ( tower ) ;
11077: LD_ADDR_VAR 0 11
11081: PUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: CALL_OW 251
11091: ST_TO_ADDR
// if not x or not y then
11092: LD_VAR 0 10
11096: NOT
11097: IFTRUE 11106
11099: PUSH
11100: LD_VAR 0 11
11104: NOT
11105: OR
11106: IFFALSE 11110
// exit ;
11108: GO 12167
// weapon := 0 ;
11110: LD_ADDR_VAR 0 18
11114: PUSH
11115: LD_INT 0
11117: ST_TO_ADDR
// fac_list := [ ] ;
11118: LD_ADDR_VAR 0 17
11122: PUSH
11123: EMPTY
11124: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11125: LD_ADDR_VAR 0 6
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 274
11139: PPUSH
11140: LD_VAR 0 2
11144: PPUSH
11145: LD_INT 0
11147: PPUSH
11148: CALL 8702 0 3
11152: PPUSH
11153: LD_INT 30
11155: PUSH
11156: LD_INT 3
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 72
11167: ST_TO_ADDR
// if not factories then
11168: LD_VAR 0 6
11172: NOT
11173: IFFALSE 11177
// exit ;
11175: GO 12167
// for i in factories do
11177: LD_ADDR_VAR 0 8
11181: PUSH
11182: LD_VAR 0 6
11186: PUSH
11187: FOR_IN
11188: IFFALSE 11213
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11190: LD_ADDR_VAR 0 17
11194: PUSH
11195: LD_VAR 0 17
11199: PUSH
11200: LD_VAR 0 8
11204: PPUSH
11205: CALL_OW 478
11209: UNION
11210: ST_TO_ADDR
11211: GO 11187
11213: POP
11214: POP
// if not fac_list then
11215: LD_VAR 0 17
11219: NOT
11220: IFFALSE 11224
// exit ;
11222: GO 12167
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11224: LD_ADDR_VAR 0 5
11228: PUSH
11229: LD_INT 4
11231: PUSH
11232: LD_INT 5
11234: PUSH
11235: LD_INT 9
11237: PUSH
11238: LD_INT 10
11240: PUSH
11241: LD_INT 6
11243: PUSH
11244: LD_INT 7
11246: PUSH
11247: LD_INT 11
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 27
11261: PUSH
11262: LD_INT 28
11264: PUSH
11265: LD_INT 26
11267: PUSH
11268: LD_INT 30
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 43
11279: PUSH
11280: LD_INT 44
11282: PUSH
11283: LD_INT 46
11285: PUSH
11286: LD_INT 45
11288: PUSH
11289: LD_INT 47
11291: PUSH
11292: LD_INT 49
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: PUSH
11308: LD_VAR 0 12
11312: ARRAY
11313: ST_TO_ADDR
// list := list isect fac_list ;
11314: LD_ADDR_VAR 0 5
11318: PUSH
11319: LD_VAR 0 5
11323: PUSH
11324: LD_VAR 0 17
11328: ISECT
11329: ST_TO_ADDR
// if not list then
11330: LD_VAR 0 5
11334: NOT
11335: IFFALSE 11339
// exit ;
11337: GO 12167
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11339: LD_VAR 0 12
11343: PUSH
11344: LD_INT 3
11346: EQUAL
11347: IFFALSE 11359
11349: PUSH
11350: LD_INT 49
11352: PUSH
11353: LD_VAR 0 5
11357: IN
11358: AND
11359: IFFALSE 11379
11361: PUSH
11362: LD_INT 31
11364: PPUSH
11365: LD_VAR 0 16
11369: PPUSH
11370: CALL_OW 321
11374: PUSH
11375: LD_INT 2
11377: EQUAL
11378: AND
11379: IFFALSE 11439
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11381: LD_INT 22
11383: PUSH
11384: LD_VAR 0 16
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 35
11395: PUSH
11396: LD_INT 49
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 91
11405: PUSH
11406: LD_VAR 0 1
11410: PUSH
11411: LD_INT 10
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: NOT
11429: IFFALSE 11439
// weapon := ru_time_lapser ;
11431: LD_ADDR_VAR 0 18
11435: PUSH
11436: LD_INT 49
11438: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11439: LD_VAR 0 12
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: LD_INT 2
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: IN
11454: IFFALSE 11478
11456: PUSH
11457: LD_INT 11
11459: PUSH
11460: LD_VAR 0 5
11464: IN
11465: IFTRUE 11477
11467: PUSH
11468: LD_INT 30
11470: PUSH
11471: LD_VAR 0 5
11475: IN
11476: OR
11477: AND
11478: IFFALSE 11498
11480: PUSH
11481: LD_INT 6
11483: PPUSH
11484: LD_VAR 0 16
11488: PPUSH
11489: CALL_OW 321
11493: PUSH
11494: LD_INT 2
11496: EQUAL
11497: AND
11498: IFFALSE 11665
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11500: LD_INT 22
11502: PUSH
11503: LD_VAR 0 16
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: LD_INT 35
11517: PUSH
11518: LD_INT 11
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 35
11527: PUSH
11528: LD_INT 30
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 91
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: LD_INT 18
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: NOT
11566: IFFALSE 11642
11568: PUSH
11569: LD_INT 22
11571: PUSH
11572: LD_VAR 0 16
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 2
11583: PUSH
11584: LD_INT 30
11586: PUSH
11587: LD_INT 32
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 30
11596: PUSH
11597: LD_INT 33
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 91
11611: PUSH
11612: LD_VAR 0 1
11616: PUSH
11617: LD_INT 12
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: LIST
11629: PUSH
11630: EMPTY
11631: LIST
11632: PPUSH
11633: CALL_OW 69
11637: PUSH
11638: LD_INT 2
11640: GREATER
11641: AND
11642: IFFALSE 11665
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11644: LD_ADDR_VAR 0 18
11648: PUSH
11649: LD_INT 11
11651: PUSH
11652: LD_INT 30
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_VAR 0 12
11663: ARRAY
11664: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11665: LD_VAR 0 18
11669: NOT
11670: IFFALSE 11690
11672: PUSH
11673: LD_INT 40
11675: PPUSH
11676: LD_VAR 0 16
11680: PPUSH
11681: CALL_OW 321
11685: PUSH
11686: LD_INT 2
11688: EQUAL
11689: AND
11690: IFFALSE 11726
11692: PUSH
11693: LD_INT 7
11695: PUSH
11696: LD_VAR 0 5
11700: IN
11701: IFTRUE 11713
11703: PUSH
11704: LD_INT 28
11706: PUSH
11707: LD_VAR 0 5
11711: IN
11712: OR
11713: IFTRUE 11725
11715: PUSH
11716: LD_INT 45
11718: PUSH
11719: LD_VAR 0 5
11723: IN
11724: OR
11725: AND
11726: IFFALSE 11980
// begin hex := GetHexInfo ( x , y ) ;
11728: LD_ADDR_VAR 0 4
11732: PUSH
11733: LD_VAR 0 10
11737: PPUSH
11738: LD_VAR 0 11
11742: PPUSH
11743: CALL_OW 546
11747: ST_TO_ADDR
// if hex [ 1 ] then
11748: LD_VAR 0 4
11752: PUSH
11753: LD_INT 1
11755: ARRAY
11756: IFFALSE 11760
// exit ;
11758: GO 12167
// height := hex [ 2 ] ;
11760: LD_ADDR_VAR 0 15
11764: PUSH
11765: LD_VAR 0 4
11769: PUSH
11770: LD_INT 2
11772: ARRAY
11773: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11774: LD_ADDR_VAR 0 14
11778: PUSH
11779: LD_INT 0
11781: PUSH
11782: LD_INT 2
11784: PUSH
11785: LD_INT 3
11787: PUSH
11788: LD_INT 5
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: ST_TO_ADDR
// for i in tmp do
11797: LD_ADDR_VAR 0 8
11801: PUSH
11802: LD_VAR 0 14
11806: PUSH
11807: FOR_IN
11808: IFFALSE 11978
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11810: LD_ADDR_VAR 0 9
11814: PUSH
11815: LD_VAR 0 10
11819: PPUSH
11820: LD_VAR 0 8
11824: PPUSH
11825: LD_INT 5
11827: PPUSH
11828: CALL_OW 272
11832: PUSH
11833: LD_VAR 0 11
11837: PPUSH
11838: LD_VAR 0 8
11842: PPUSH
11843: LD_INT 5
11845: PPUSH
11846: CALL_OW 273
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11855: LD_VAR 0 9
11859: PUSH
11860: LD_INT 1
11862: ARRAY
11863: PPUSH
11864: LD_VAR 0 9
11868: PUSH
11869: LD_INT 2
11871: ARRAY
11872: PPUSH
11873: CALL_OW 488
11877: IFFALSE 11976
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11879: LD_ADDR_VAR 0 4
11883: PUSH
11884: LD_VAR 0 9
11888: PUSH
11889: LD_INT 1
11891: ARRAY
11892: PPUSH
11893: LD_VAR 0 9
11897: PUSH
11898: LD_INT 2
11900: ARRAY
11901: PPUSH
11902: CALL_OW 546
11906: ST_TO_ADDR
// if hex [ 1 ] then
11907: LD_VAR 0 4
11911: PUSH
11912: LD_INT 1
11914: ARRAY
11915: IFFALSE 11919
// continue ;
11917: GO 11807
// h := hex [ 2 ] ;
11919: LD_ADDR_VAR 0 13
11923: PUSH
11924: LD_VAR 0 4
11928: PUSH
11929: LD_INT 2
11931: ARRAY
11932: ST_TO_ADDR
// if h + 7 < height then
11933: LD_VAR 0 13
11937: PUSH
11938: LD_INT 7
11940: PLUS
11941: PUSH
11942: LD_VAR 0 15
11946: LESS
11947: IFFALSE 11976
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11949: LD_ADDR_VAR 0 18
11953: PUSH
11954: LD_INT 7
11956: PUSH
11957: LD_INT 28
11959: PUSH
11960: LD_INT 45
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: LD_VAR 0 12
11972: ARRAY
11973: ST_TO_ADDR
// break ;
11974: GO 11978
// end ; end ; end ;
11976: GO 11807
11978: POP
11979: POP
// end ; if not weapon then
11980: LD_VAR 0 18
11984: NOT
11985: IFFALSE 12045
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_VAR 0 5
11996: PUSH
11997: LD_INT 11
11999: PUSH
12000: LD_INT 30
12002: PUSH
12003: LD_INT 49
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: DIFF
12011: ST_TO_ADDR
// if not list then
12012: LD_VAR 0 5
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12167
// weapon := list [ rand ( 1 , list ) ] ;
12021: LD_ADDR_VAR 0 18
12025: PUSH
12026: LD_VAR 0 5
12030: PUSH
12031: LD_INT 1
12033: PPUSH
12034: LD_VAR 0 5
12038: PPUSH
12039: CALL_OW 12
12043: ARRAY
12044: ST_TO_ADDR
// end ; if weapon then
12045: LD_VAR 0 18
12049: IFFALSE 12167
// begin tmp := CostOfWeapon ( weapon ) ;
12051: LD_ADDR_VAR 0 14
12055: PUSH
12056: LD_VAR 0 18
12060: PPUSH
12061: CALL_OW 451
12065: ST_TO_ADDR
// j := GetBase ( tower ) ;
12066: LD_ADDR_VAR 0 9
12070: PUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 274
12080: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12081: LD_VAR 0 9
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 275
12093: PUSH
12094: LD_VAR 0 14
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: GREATEREQUAL
12103: IFFALSE 12129
12105: PUSH
12106: LD_VAR 0 9
12110: PPUSH
12111: LD_INT 2
12113: PPUSH
12114: CALL_OW 275
12118: PUSH
12119: LD_VAR 0 14
12123: PUSH
12124: LD_INT 2
12126: ARRAY
12127: GREATEREQUAL
12128: AND
12129: IFFALSE 12155
12131: PUSH
12132: LD_VAR 0 9
12136: PPUSH
12137: LD_INT 3
12139: PPUSH
12140: CALL_OW 275
12144: PUSH
12145: LD_VAR 0 14
12149: PUSH
12150: LD_INT 3
12152: ARRAY
12153: GREATEREQUAL
12154: AND
12155: IFFALSE 12167
// result := weapon ;
12157: LD_ADDR_VAR 0 3
12161: PUSH
12162: LD_VAR 0 18
12166: ST_TO_ADDR
// end ; end ;
12167: LD_VAR 0 3
12171: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// result := true ;
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: LD_INT 1
12183: ST_TO_ADDR
// if array1 = array2 then
12184: LD_VAR 0 1
12188: PUSH
12189: LD_VAR 0 2
12193: EQUAL
12194: IFFALSE 12254
// begin for i = 1 to array1 do
12196: LD_ADDR_VAR 0 4
12200: PUSH
12201: DOUBLE
12202: LD_INT 1
12204: DEC
12205: ST_TO_ADDR
12206: LD_VAR 0 1
12210: PUSH
12211: FOR_TO
12212: IFFALSE 12250
// if array1 [ i ] <> array2 [ i ] then
12214: LD_VAR 0 1
12218: PUSH
12219: LD_VAR 0 4
12223: ARRAY
12224: PUSH
12225: LD_VAR 0 2
12229: PUSH
12230: LD_VAR 0 4
12234: ARRAY
12235: NONEQUAL
12236: IFFALSE 12248
// begin result := false ;
12238: LD_ADDR_VAR 0 3
12242: PUSH
12243: LD_INT 0
12245: ST_TO_ADDR
// break ;
12246: GO 12250
// end ;
12248: GO 12211
12250: POP
12251: POP
// end else
12252: GO 12262
// result := false ;
12254: LD_ADDR_VAR 0 3
12258: PUSH
12259: LD_INT 0
12261: ST_TO_ADDR
// end ;
12262: LD_VAR 0 3
12266: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12267: LD_INT 0
12269: PPUSH
12270: PPUSH
// if not array1 or not array2 then
12271: LD_VAR 0 1
12275: NOT
12276: IFTRUE 12285
12278: PUSH
12279: LD_VAR 0 2
12283: NOT
12284: OR
12285: IFFALSE 12289
// exit ;
12287: GO 12353
// result := true ;
12289: LD_ADDR_VAR 0 3
12293: PUSH
12294: LD_INT 1
12296: ST_TO_ADDR
// for i = 1 to array1 do
12297: LD_ADDR_VAR 0 4
12301: PUSH
12302: DOUBLE
12303: LD_INT 1
12305: DEC
12306: ST_TO_ADDR
12307: LD_VAR 0 1
12311: PUSH
12312: FOR_TO
12313: IFFALSE 12351
// if array1 [ i ] <> array2 [ i ] then
12315: LD_VAR 0 1
12319: PUSH
12320: LD_VAR 0 4
12324: ARRAY
12325: PUSH
12326: LD_VAR 0 2
12330: PUSH
12331: LD_VAR 0 4
12335: ARRAY
12336: NONEQUAL
12337: IFFALSE 12349
// begin result := false ;
12339: LD_ADDR_VAR 0 3
12343: PUSH
12344: LD_INT 0
12346: ST_TO_ADDR
// break ;
12347: GO 12351
// end ;
12349: GO 12312
12351: POP
12352: POP
// end ;
12353: LD_VAR 0 3
12357: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12358: LD_INT 0
12360: PPUSH
12361: PPUSH
12362: PPUSH
// pom := GetBase ( fac ) ;
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_VAR 0 1
12372: PPUSH
12373: CALL_OW 274
12377: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12378: LD_ADDR_VAR 0 4
12382: PUSH
12383: LD_VAR 0 2
12387: PUSH
12388: LD_INT 1
12390: ARRAY
12391: PPUSH
12392: LD_VAR 0 2
12396: PUSH
12397: LD_INT 2
12399: ARRAY
12400: PPUSH
12401: LD_VAR 0 2
12405: PUSH
12406: LD_INT 3
12408: ARRAY
12409: PPUSH
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 4
12417: ARRAY
12418: PPUSH
12419: CALL_OW 449
12423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12424: LD_ADDR_VAR 0 3
12428: PUSH
12429: LD_VAR 0 5
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 275
12441: PUSH
12442: LD_VAR 0 4
12446: PUSH
12447: LD_INT 1
12449: ARRAY
12450: GREATEREQUAL
12451: IFFALSE 12477
12453: PUSH
12454: LD_VAR 0 5
12458: PPUSH
12459: LD_INT 2
12461: PPUSH
12462: CALL_OW 275
12466: PUSH
12467: LD_VAR 0 4
12471: PUSH
12472: LD_INT 2
12474: ARRAY
12475: GREATEREQUAL
12476: AND
12477: IFFALSE 12503
12479: PUSH
12480: LD_VAR 0 5
12484: PPUSH
12485: LD_INT 3
12487: PPUSH
12488: CALL_OW 275
12492: PUSH
12493: LD_VAR 0 4
12497: PUSH
12498: LD_INT 3
12500: ARRAY
12501: GREATEREQUAL
12502: AND
12503: ST_TO_ADDR
// end ;
12504: LD_VAR 0 3
12508: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12509: LD_INT 0
12511: PPUSH
12512: PPUSH
12513: PPUSH
12514: PPUSH
// pom := GetBase ( building ) ;
12515: LD_ADDR_VAR 0 3
12519: PUSH
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 274
12529: ST_TO_ADDR
// if not pom then
12530: LD_VAR 0 3
12534: NOT
12535: IFFALSE 12539
// exit ;
12537: GO 12713
// btype := GetBType ( building ) ;
12539: LD_ADDR_VAR 0 5
12543: PUSH
12544: LD_VAR 0 1
12548: PPUSH
12549: CALL_OW 266
12553: ST_TO_ADDR
// if btype = b_armoury then
12554: LD_VAR 0 5
12558: PUSH
12559: LD_INT 4
12561: EQUAL
12562: IFFALSE 12572
// btype := b_barracks ;
12564: LD_ADDR_VAR 0 5
12568: PUSH
12569: LD_INT 5
12571: ST_TO_ADDR
// if btype = b_depot then
12572: LD_VAR 0 5
12576: PUSH
12577: LD_INT 0
12579: EQUAL
12580: IFFALSE 12590
// btype := b_warehouse ;
12582: LD_ADDR_VAR 0 5
12586: PUSH
12587: LD_INT 1
12589: ST_TO_ADDR
// if btype = b_workshop then
12590: LD_VAR 0 5
12594: PUSH
12595: LD_INT 2
12597: EQUAL
12598: IFFALSE 12608
// btype := b_factory ;
12600: LD_ADDR_VAR 0 5
12604: PUSH
12605: LD_INT 3
12607: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12608: LD_ADDR_VAR 0 4
12612: PUSH
12613: LD_VAR 0 5
12617: PPUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 248
12627: PPUSH
12628: CALL_OW 450
12632: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12633: LD_ADDR_VAR 0 2
12637: PUSH
12638: LD_VAR 0 3
12642: PPUSH
12643: LD_INT 1
12645: PPUSH
12646: CALL_OW 275
12650: PUSH
12651: LD_VAR 0 4
12655: PUSH
12656: LD_INT 1
12658: ARRAY
12659: GREATEREQUAL
12660: IFFALSE 12686
12662: PUSH
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 2
12670: PPUSH
12671: CALL_OW 275
12675: PUSH
12676: LD_VAR 0 4
12680: PUSH
12681: LD_INT 2
12683: ARRAY
12684: GREATEREQUAL
12685: AND
12686: IFFALSE 12712
12688: PUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 3
12696: PPUSH
12697: CALL_OW 275
12701: PUSH
12702: LD_VAR 0 4
12706: PUSH
12707: LD_INT 3
12709: ARRAY
12710: GREATEREQUAL
12711: AND
12712: ST_TO_ADDR
// end ;
12713: LD_VAR 0 2
12717: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12718: LD_INT 0
12720: PPUSH
12721: PPUSH
12722: PPUSH
// pom := GetBase ( building ) ;
12723: LD_ADDR_VAR 0 4
12727: PUSH
12728: LD_VAR 0 1
12732: PPUSH
12733: CALL_OW 274
12737: ST_TO_ADDR
// if not pom then
12738: LD_VAR 0 4
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12852
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12747: LD_ADDR_VAR 0 5
12751: PUSH
12752: LD_VAR 0 2
12756: PPUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 248
12766: PPUSH
12767: CALL_OW 450
12771: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_VAR 0 4
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 275
12789: PUSH
12790: LD_VAR 0 5
12794: PUSH
12795: LD_INT 1
12797: ARRAY
12798: GREATEREQUAL
12799: IFFALSE 12825
12801: PUSH
12802: LD_VAR 0 4
12806: PPUSH
12807: LD_INT 2
12809: PPUSH
12810: CALL_OW 275
12814: PUSH
12815: LD_VAR 0 5
12819: PUSH
12820: LD_INT 2
12822: ARRAY
12823: GREATEREQUAL
12824: AND
12825: IFFALSE 12851
12827: PUSH
12828: LD_VAR 0 4
12832: PPUSH
12833: LD_INT 3
12835: PPUSH
12836: CALL_OW 275
12840: PUSH
12841: LD_VAR 0 5
12845: PUSH
12846: LD_INT 3
12848: ARRAY
12849: GREATEREQUAL
12850: AND
12851: ST_TO_ADDR
// end ;
12852: LD_VAR 0 3
12856: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12857: LD_INT 0
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
12863: PPUSH
12864: PPUSH
12865: PPUSH
12866: PPUSH
12867: PPUSH
12868: PPUSH
12869: PPUSH
// result := false ;
12870: LD_ADDR_VAR 0 8
12874: PUSH
12875: LD_INT 0
12877: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12878: LD_VAR 0 5
12882: NOT
12883: IFTRUE 12892
12885: PUSH
12886: LD_VAR 0 1
12890: NOT
12891: OR
12892: IFTRUE 12901
12894: PUSH
12895: LD_VAR 0 2
12899: NOT
12900: OR
12901: IFTRUE 12910
12903: PUSH
12904: LD_VAR 0 3
12908: NOT
12909: OR
12910: IFFALSE 12914
// exit ;
12912: GO 13740
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12914: LD_ADDR_VAR 0 14
12918: PUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_VAR 0 2
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_VAR 0 4
12938: PPUSH
12939: LD_VAR 0 5
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: PPUSH
12948: CALL_OW 248
12952: PPUSH
12953: LD_INT 0
12955: PPUSH
12956: CALL 15021 0 6
12960: ST_TO_ADDR
// if not hexes then
12961: LD_VAR 0 14
12965: NOT
12966: IFFALSE 12970
// exit ;
12968: GO 13740
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12970: LD_ADDR_VAR 0 17
12974: PUSH
12975: LD_VAR 0 5
12979: PPUSH
12980: LD_INT 22
12982: PUSH
12983: LD_VAR 0 13
12987: PPUSH
12988: CALL_OW 255
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 2
12999: PUSH
13000: LD_INT 30
13002: PUSH
13003: LD_INT 0
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 30
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 72
13033: ST_TO_ADDR
// for i = 1 to hexes do
13034: LD_ADDR_VAR 0 9
13038: PUSH
13039: DOUBLE
13040: LD_INT 1
13042: DEC
13043: ST_TO_ADDR
13044: LD_VAR 0 14
13048: PUSH
13049: FOR_TO
13050: IFFALSE 13738
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13052: LD_ADDR_VAR 0 13
13056: PUSH
13057: LD_VAR 0 14
13061: PUSH
13062: LD_VAR 0 9
13066: ARRAY
13067: PUSH
13068: LD_INT 1
13070: ARRAY
13071: PPUSH
13072: LD_VAR 0 14
13076: PUSH
13077: LD_VAR 0 9
13081: ARRAY
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: CALL_OW 428
13091: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13092: LD_VAR 0 14
13096: PUSH
13097: LD_VAR 0 9
13101: ARRAY
13102: PUSH
13103: LD_INT 1
13105: ARRAY
13106: PPUSH
13107: LD_VAR 0 14
13111: PUSH
13112: LD_VAR 0 9
13116: ARRAY
13117: PUSH
13118: LD_INT 2
13120: ARRAY
13121: PPUSH
13122: CALL_OW 351
13126: IFTRUE 13165
13128: PUSH
13129: LD_VAR 0 14
13133: PUSH
13134: LD_VAR 0 9
13138: ARRAY
13139: PUSH
13140: LD_INT 1
13142: ARRAY
13143: PPUSH
13144: LD_VAR 0 14
13148: PUSH
13149: LD_VAR 0 9
13153: ARRAY
13154: PUSH
13155: LD_INT 2
13157: ARRAY
13158: PPUSH
13159: CALL_OW 488
13163: NOT
13164: OR
13165: IFTRUE 13182
13167: PUSH
13168: LD_VAR 0 13
13172: PPUSH
13173: CALL_OW 247
13177: PUSH
13178: LD_INT 3
13180: EQUAL
13181: OR
13182: IFFALSE 13188
// exit ;
13184: POP
13185: POP
13186: GO 13740
// if not tmp then
13188: LD_VAR 0 13
13192: NOT
13193: IFFALSE 13197
// continue ;
13195: GO 13049
// result := true ;
13197: LD_ADDR_VAR 0 8
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13205: LD_VAR 0 6
13209: IFFALSE 13226
13211: PUSH
13212: LD_VAR 0 13
13216: PPUSH
13217: CALL_OW 247
13221: PUSH
13222: LD_INT 2
13224: EQUAL
13225: AND
13226: IFFALSE 13243
13228: PUSH
13229: LD_VAR 0 13
13233: PPUSH
13234: CALL_OW 263
13238: PUSH
13239: LD_INT 1
13241: EQUAL
13242: AND
13243: IFFALSE 13407
// begin if IsDrivenBy ( tmp ) then
13245: LD_VAR 0 13
13249: PPUSH
13250: CALL_OW 311
13254: IFFALSE 13258
// continue ;
13256: GO 13049
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13258: LD_VAR 0 6
13262: PPUSH
13263: LD_INT 3
13265: PUSH
13266: LD_INT 60
13268: PUSH
13269: EMPTY
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 3
13278: PUSH
13279: LD_INT 55
13281: PUSH
13282: EMPTY
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PPUSH
13293: CALL_OW 72
13297: IFFALSE 13405
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13299: LD_ADDR_VAR 0 18
13303: PUSH
13304: LD_VAR 0 6
13308: PPUSH
13309: LD_INT 3
13311: PUSH
13312: LD_INT 60
13314: PUSH
13315: EMPTY
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 3
13324: PUSH
13325: LD_INT 55
13327: PUSH
13328: EMPTY
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 72
13343: PUSH
13344: LD_INT 1
13346: ARRAY
13347: ST_TO_ADDR
// if IsInUnit ( driver ) then
13348: LD_VAR 0 18
13352: PPUSH
13353: CALL_OW 310
13357: IFFALSE 13368
// ComExit ( driver ) ;
13359: LD_VAR 0 18
13363: PPUSH
13364: CALL 39011 0 1
// AddComEnterUnit ( driver , tmp ) ;
13368: LD_VAR 0 18
13372: PPUSH
13373: LD_VAR 0 13
13377: PPUSH
13378: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13382: LD_VAR 0 18
13386: PPUSH
13387: LD_VAR 0 7
13391: PPUSH
13392: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13396: LD_VAR 0 18
13400: PPUSH
13401: CALL_OW 181
// end ; continue ;
13405: GO 13049
// end ; if not cleaners or not tmp in cleaners then
13407: LD_VAR 0 6
13411: NOT
13412: IFTRUE 13427
13414: PUSH
13415: LD_VAR 0 13
13419: PUSH
13420: LD_VAR 0 6
13424: IN
13425: NOT
13426: OR
13427: IFFALSE 13736
// begin if dep then
13429: LD_VAR 0 17
13433: IFFALSE 13569
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13435: LD_ADDR_VAR 0 16
13439: PUSH
13440: LD_VAR 0 17
13444: PUSH
13445: LD_INT 1
13447: ARRAY
13448: PPUSH
13449: CALL_OW 250
13453: PPUSH
13454: LD_VAR 0 17
13458: PUSH
13459: LD_INT 1
13461: ARRAY
13462: PPUSH
13463: CALL_OW 254
13467: PPUSH
13468: LD_INT 5
13470: PPUSH
13471: CALL_OW 272
13475: PUSH
13476: LD_VAR 0 17
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: CALL_OW 251
13489: PPUSH
13490: LD_VAR 0 17
13494: PUSH
13495: LD_INT 1
13497: ARRAY
13498: PPUSH
13499: CALL_OW 254
13503: PPUSH
13504: LD_INT 5
13506: PPUSH
13507: CALL_OW 273
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13516: LD_VAR 0 16
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 16
13529: PUSH
13530: LD_INT 2
13532: ARRAY
13533: PPUSH
13534: CALL_OW 488
13538: IFFALSE 13569
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13540: LD_VAR 0 13
13544: PPUSH
13545: LD_VAR 0 16
13549: PUSH
13550: LD_INT 1
13552: ARRAY
13553: PPUSH
13554: LD_VAR 0 16
13558: PUSH
13559: LD_INT 2
13561: ARRAY
13562: PPUSH
13563: CALL_OW 111
// continue ;
13567: GO 13049
// end ; end ; r := GetDir ( tmp ) ;
13569: LD_ADDR_VAR 0 15
13573: PUSH
13574: LD_VAR 0 13
13578: PPUSH
13579: CALL_OW 254
13583: ST_TO_ADDR
// if r = 5 then
13584: LD_VAR 0 15
13588: PUSH
13589: LD_INT 5
13591: EQUAL
13592: IFFALSE 13602
// r := 0 ;
13594: LD_ADDR_VAR 0 15
13598: PUSH
13599: LD_INT 0
13601: ST_TO_ADDR
// for j = r to 5 do
13602: LD_ADDR_VAR 0 10
13606: PUSH
13607: DOUBLE
13608: LD_VAR 0 15
13612: DEC
13613: ST_TO_ADDR
13614: LD_INT 5
13616: PUSH
13617: FOR_TO
13618: IFFALSE 13734
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13620: LD_ADDR_VAR 0 11
13624: PUSH
13625: LD_VAR 0 13
13629: PPUSH
13630: CALL_OW 250
13634: PPUSH
13635: LD_VAR 0 10
13639: PPUSH
13640: LD_INT 2
13642: PPUSH
13643: CALL_OW 272
13647: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13648: LD_ADDR_VAR 0 12
13652: PUSH
13653: LD_VAR 0 13
13657: PPUSH
13658: CALL_OW 251
13662: PPUSH
13663: LD_VAR 0 10
13667: PPUSH
13668: LD_INT 2
13670: PPUSH
13671: CALL_OW 273
13675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13676: LD_VAR 0 11
13680: PPUSH
13681: LD_VAR 0 12
13685: PPUSH
13686: CALL_OW 488
13690: IFFALSE 13709
13692: PUSH
13693: LD_VAR 0 11
13697: PPUSH
13698: LD_VAR 0 12
13702: PPUSH
13703: CALL_OW 428
13707: NOT
13708: AND
13709: IFFALSE 13732
// begin ComMoveXY ( tmp , _x , _y ) ;
13711: LD_VAR 0 13
13715: PPUSH
13716: LD_VAR 0 11
13720: PPUSH
13721: LD_VAR 0 12
13725: PPUSH
13726: CALL_OW 111
// break ;
13730: GO 13734
// end ; end ;
13732: GO 13617
13734: POP
13735: POP
// end ; end ;
13736: GO 13049
13738: POP
13739: POP
// end ;
13740: LD_VAR 0 8
13744: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13745: LD_INT 0
13747: PPUSH
// result := true ;
13748: LD_ADDR_VAR 0 3
13752: PUSH
13753: LD_INT 1
13755: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13756: LD_VAR 0 2
13760: PUSH
13761: LD_INT 24
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13775
13767: LD_INT 33
13769: DOUBLE
13770: EQUAL
13771: IFTRUE 13775
13773: GO 13800
13775: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13776: LD_ADDR_VAR 0 3
13780: PUSH
13781: LD_INT 32
13783: PPUSH
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 321
13793: PUSH
13794: LD_INT 2
13796: EQUAL
13797: ST_TO_ADDR
13798: GO 14116
13800: LD_INT 20
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13833
13808: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 6
13816: PPUSH
13817: LD_VAR 0 1
13821: PPUSH
13822: CALL_OW 321
13826: PUSH
13827: LD_INT 2
13829: EQUAL
13830: ST_TO_ADDR
13831: GO 14116
13833: LD_INT 22
13835: DOUBLE
13836: EQUAL
13837: IFTRUE 13847
13839: LD_INT 36
13841: DOUBLE
13842: EQUAL
13843: IFTRUE 13847
13845: GO 13872
13847: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13848: LD_ADDR_VAR 0 3
13852: PUSH
13853: LD_INT 15
13855: PPUSH
13856: LD_VAR 0 1
13860: PPUSH
13861: CALL_OW 321
13865: PUSH
13866: LD_INT 2
13868: EQUAL
13869: ST_TO_ADDR
13870: GO 14116
13872: LD_INT 30
13874: DOUBLE
13875: EQUAL
13876: IFTRUE 13880
13878: GO 13905
13880: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13881: LD_ADDR_VAR 0 3
13885: PUSH
13886: LD_INT 20
13888: PPUSH
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 321
13898: PUSH
13899: LD_INT 2
13901: EQUAL
13902: ST_TO_ADDR
13903: GO 14116
13905: LD_INT 28
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13919
13911: LD_INT 21
13913: DOUBLE
13914: EQUAL
13915: IFTRUE 13919
13917: GO 13944
13919: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13920: LD_ADDR_VAR 0 3
13924: PUSH
13925: LD_INT 21
13927: PPUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL_OW 321
13937: PUSH
13938: LD_INT 2
13940: EQUAL
13941: ST_TO_ADDR
13942: GO 14116
13944: LD_INT 16
13946: DOUBLE
13947: EQUAL
13948: IFTRUE 13952
13950: GO 13977
13952: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_INT 84
13960: PPUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 321
13970: PUSH
13971: LD_INT 2
13973: EQUAL
13974: ST_TO_ADDR
13975: GO 14116
13977: LD_INT 19
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13991
13983: LD_INT 23
13985: DOUBLE
13986: EQUAL
13987: IFTRUE 13991
13989: GO 14016
13991: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: LD_INT 83
13999: PPUSH
14000: LD_VAR 0 1
14004: PPUSH
14005: CALL_OW 321
14009: PUSH
14010: LD_INT 2
14012: EQUAL
14013: ST_TO_ADDR
14014: GO 14116
14016: LD_INT 17
14018: DOUBLE
14019: EQUAL
14020: IFTRUE 14024
14022: GO 14049
14024: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_INT 39
14032: PPUSH
14033: LD_VAR 0 1
14037: PPUSH
14038: CALL_OW 321
14042: PUSH
14043: LD_INT 2
14045: EQUAL
14046: ST_TO_ADDR
14047: GO 14116
14049: LD_INT 18
14051: DOUBLE
14052: EQUAL
14053: IFTRUE 14057
14055: GO 14082
14057: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14058: LD_ADDR_VAR 0 3
14062: PUSH
14063: LD_INT 40
14065: PPUSH
14066: LD_VAR 0 1
14070: PPUSH
14071: CALL_OW 321
14075: PUSH
14076: LD_INT 2
14078: EQUAL
14079: ST_TO_ADDR
14080: GO 14116
14082: LD_INT 27
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14115
14090: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_INT 35
14098: PPUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 321
14108: PUSH
14109: LD_INT 2
14111: EQUAL
14112: ST_TO_ADDR
14113: GO 14116
14115: POP
// end ;
14116: LD_VAR 0 3
14120: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14121: LD_INT 0
14123: PPUSH
14124: PPUSH
14125: PPUSH
14126: PPUSH
14127: PPUSH
14128: PPUSH
14129: PPUSH
14130: PPUSH
14131: PPUSH
14132: PPUSH
14133: PPUSH
// result := false ;
14134: LD_ADDR_VAR 0 6
14138: PUSH
14139: LD_INT 0
14141: ST_TO_ADDR
// if btype = b_depot then
14142: LD_VAR 0 2
14146: PUSH
14147: LD_INT 0
14149: EQUAL
14150: IFFALSE 14162
// begin result := true ;
14152: LD_ADDR_VAR 0 6
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
// exit ;
14160: GO 15016
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14162: LD_VAR 0 1
14166: NOT
14167: IFTRUE 14192
14169: PUSH
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 266
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: LD_INT 1
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: IN
14190: NOT
14191: OR
14192: IFTRUE 14201
14194: PUSH
14195: LD_VAR 0 2
14199: NOT
14200: OR
14201: IFTRUE 14237
14203: PUSH
14204: LD_VAR 0 5
14208: PUSH
14209: LD_INT 0
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: LD_INT 2
14217: PUSH
14218: LD_INT 3
14220: PUSH
14221: LD_INT 4
14223: PUSH
14224: LD_INT 5
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: IN
14235: NOT
14236: OR
14237: IFTRUE 14256
14239: PUSH
14240: LD_VAR 0 3
14244: PPUSH
14245: LD_VAR 0 4
14249: PPUSH
14250: CALL_OW 488
14254: NOT
14255: OR
14256: IFFALSE 14260
// exit ;
14258: GO 15016
// side := GetSide ( depot ) ;
14260: LD_ADDR_VAR 0 9
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 255
14274: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14275: LD_VAR 0 9
14279: PPUSH
14280: LD_VAR 0 2
14284: PPUSH
14285: CALL 13745 0 2
14289: NOT
14290: IFFALSE 14294
// exit ;
14292: GO 15016
// pom := GetBase ( depot ) ;
14294: LD_ADDR_VAR 0 10
14298: PUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 274
14308: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14309: LD_ADDR_VAR 0 11
14313: PUSH
14314: LD_VAR 0 2
14318: PPUSH
14319: LD_VAR 0 1
14323: PPUSH
14324: CALL_OW 248
14328: PPUSH
14329: CALL_OW 450
14333: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14334: LD_VAR 0 10
14338: PPUSH
14339: LD_INT 1
14341: PPUSH
14342: CALL_OW 275
14346: PUSH
14347: LD_VAR 0 11
14351: PUSH
14352: LD_INT 1
14354: ARRAY
14355: GREATEREQUAL
14356: IFFALSE 14382
14358: PUSH
14359: LD_VAR 0 10
14363: PPUSH
14364: LD_INT 2
14366: PPUSH
14367: CALL_OW 275
14371: PUSH
14372: LD_VAR 0 11
14376: PUSH
14377: LD_INT 2
14379: ARRAY
14380: GREATEREQUAL
14381: AND
14382: IFFALSE 14408
14384: PUSH
14385: LD_VAR 0 10
14389: PPUSH
14390: LD_INT 3
14392: PPUSH
14393: CALL_OW 275
14397: PUSH
14398: LD_VAR 0 11
14402: PUSH
14403: LD_INT 3
14405: ARRAY
14406: GREATEREQUAL
14407: AND
14408: NOT
14409: IFFALSE 14413
// exit ;
14411: GO 15016
// if GetBType ( depot ) = b_depot then
14413: LD_VAR 0 1
14417: PPUSH
14418: CALL_OW 266
14422: PUSH
14423: LD_INT 0
14425: EQUAL
14426: IFFALSE 14438
// dist := 28 else
14428: LD_ADDR_VAR 0 14
14432: PUSH
14433: LD_INT 28
14435: ST_TO_ADDR
14436: GO 14446
// dist := 36 ;
14438: LD_ADDR_VAR 0 14
14442: PUSH
14443: LD_INT 36
14445: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: LD_VAR 0 4
14460: PPUSH
14461: CALL_OW 297
14465: PUSH
14466: LD_VAR 0 14
14470: GREATER
14471: IFFALSE 14475
// exit ;
14473: GO 15016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14475: LD_ADDR_VAR 0 12
14479: PUSH
14480: LD_VAR 0 2
14484: PPUSH
14485: LD_VAR 0 3
14489: PPUSH
14490: LD_VAR 0 4
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: LD_VAR 0 1
14504: PPUSH
14505: CALL_OW 248
14509: PPUSH
14510: LD_INT 0
14512: PPUSH
14513: CALL 15021 0 6
14517: ST_TO_ADDR
// if not hexes then
14518: LD_VAR 0 12
14522: NOT
14523: IFFALSE 14527
// exit ;
14525: GO 15016
// hex := GetHexInfo ( x , y ) ;
14527: LD_ADDR_VAR 0 15
14531: PUSH
14532: LD_VAR 0 3
14536: PPUSH
14537: LD_VAR 0 4
14541: PPUSH
14542: CALL_OW 546
14546: ST_TO_ADDR
// if hex [ 1 ] then
14547: LD_VAR 0 15
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: IFFALSE 14559
// exit ;
14557: GO 15016
// height := hex [ 2 ] ;
14559: LD_ADDR_VAR 0 13
14563: PUSH
14564: LD_VAR 0 15
14568: PUSH
14569: LD_INT 2
14571: ARRAY
14572: ST_TO_ADDR
// for i = 1 to hexes do
14573: LD_ADDR_VAR 0 7
14577: PUSH
14578: DOUBLE
14579: LD_INT 1
14581: DEC
14582: ST_TO_ADDR
14583: LD_VAR 0 12
14587: PUSH
14588: FOR_TO
14589: IFFALSE 14933
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14591: LD_VAR 0 12
14595: PUSH
14596: LD_VAR 0 7
14600: ARRAY
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PPUSH
14606: LD_VAR 0 12
14610: PUSH
14611: LD_VAR 0 7
14615: ARRAY
14616: PUSH
14617: LD_INT 2
14619: ARRAY
14620: PPUSH
14621: CALL_OW 488
14625: NOT
14626: IFTRUE 14668
14628: PUSH
14629: LD_VAR 0 12
14633: PUSH
14634: LD_VAR 0 7
14638: ARRAY
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: PPUSH
14644: LD_VAR 0 12
14648: PUSH
14649: LD_VAR 0 7
14653: ARRAY
14654: PUSH
14655: LD_INT 2
14657: ARRAY
14658: PPUSH
14659: CALL_OW 428
14663: PUSH
14664: LD_INT 0
14666: GREATER
14667: OR
14668: IFTRUE 14706
14670: PUSH
14671: LD_VAR 0 12
14675: PUSH
14676: LD_VAR 0 7
14680: ARRAY
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: LD_VAR 0 12
14690: PUSH
14691: LD_VAR 0 7
14695: ARRAY
14696: PUSH
14697: LD_INT 2
14699: ARRAY
14700: PPUSH
14701: CALL_OW 351
14705: OR
14706: IFFALSE 14712
// exit ;
14708: POP
14709: POP
14710: GO 15016
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14712: LD_ADDR_VAR 0 8
14716: PUSH
14717: LD_VAR 0 12
14721: PUSH
14722: LD_VAR 0 7
14726: ARRAY
14727: PUSH
14728: LD_INT 1
14730: ARRAY
14731: PPUSH
14732: LD_VAR 0 12
14736: PUSH
14737: LD_VAR 0 7
14741: ARRAY
14742: PUSH
14743: LD_INT 2
14745: ARRAY
14746: PPUSH
14747: CALL_OW 546
14751: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14752: LD_VAR 0 8
14756: PUSH
14757: LD_INT 1
14759: ARRAY
14760: IFTRUE 14782
14762: PUSH
14763: LD_VAR 0 8
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: PUSH
14772: LD_VAR 0 13
14776: PUSH
14777: LD_INT 2
14779: PLUS
14780: GREATER
14781: OR
14782: IFTRUE 14804
14784: PUSH
14785: LD_VAR 0 8
14789: PUSH
14790: LD_INT 2
14792: ARRAY
14793: PUSH
14794: LD_VAR 0 13
14798: PUSH
14799: LD_INT 2
14801: MINUS
14802: LESS
14803: OR
14804: IFTRUE 14872
14806: PUSH
14807: LD_VAR 0 8
14811: PUSH
14812: LD_INT 3
14814: ARRAY
14815: PUSH
14816: LD_INT 0
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: LD_INT 9
14824: PUSH
14825: LD_INT 10
14827: PUSH
14828: LD_INT 11
14830: PUSH
14831: LD_INT 12
14833: PUSH
14834: LD_INT 13
14836: PUSH
14837: LD_INT 16
14839: PUSH
14840: LD_INT 17
14842: PUSH
14843: LD_INT 18
14845: PUSH
14846: LD_INT 19
14848: PUSH
14849: LD_INT 20
14851: PUSH
14852: LD_INT 21
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: IN
14870: NOT
14871: OR
14872: IFTRUE 14885
14874: PUSH
14875: LD_VAR 0 8
14879: PUSH
14880: LD_INT 5
14882: ARRAY
14883: NOT
14884: OR
14885: IFTRUE 14925
14887: PUSH
14888: LD_VAR 0 8
14892: PUSH
14893: LD_INT 6
14895: ARRAY
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: LD_INT 2
14902: PUSH
14903: LD_INT 7
14905: PUSH
14906: LD_INT 9
14908: PUSH
14909: LD_INT 10
14911: PUSH
14912: LD_INT 11
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: IN
14923: NOT
14924: OR
14925: IFFALSE 14931
// exit ;
14927: POP
14928: POP
14929: GO 15016
// end ;
14931: GO 14588
14933: POP
14934: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14935: LD_VAR 0 9
14939: PPUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: LD_VAR 0 4
14949: PPUSH
14950: LD_INT 20
14952: PPUSH
14953: CALL 6835 0 4
14957: PUSH
14958: LD_INT 4
14960: ARRAY
14961: IFFALSE 14965
// exit ;
14963: GO 15016
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14965: LD_VAR 0 2
14969: PUSH
14970: LD_INT 29
14972: PUSH
14973: LD_INT 30
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: IN
14980: IFFALSE 15004
14982: PUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_VAR 0 4
14992: PPUSH
14993: LD_VAR 0 9
14997: PPUSH
14998: CALL_OW 440
15002: NOT
15003: AND
15004: IFFALSE 15008
// exit ;
15006: GO 15016
// result := true ;
15008: LD_ADDR_VAR 0 6
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// end ;
15016: LD_VAR 0 6
15020: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
15035: PPUSH
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
15040: PPUSH
15041: PPUSH
15042: PPUSH
15043: PPUSH
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
15048: PPUSH
15049: PPUSH
15050: PPUSH
15051: PPUSH
15052: PPUSH
15053: PPUSH
15054: PPUSH
15055: PPUSH
15056: PPUSH
15057: PPUSH
15058: PPUSH
15059: PPUSH
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
15065: PPUSH
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
15073: PPUSH
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
// result = [ ] ;
15081: LD_ADDR_VAR 0 7
15085: PUSH
15086: EMPTY
15087: ST_TO_ADDR
// temp_list = [ ] ;
15088: LD_ADDR_VAR 0 9
15092: PUSH
15093: EMPTY
15094: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15095: LD_VAR 0 4
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: LD_INT 2
15108: PUSH
15109: LD_INT 3
15111: PUSH
15112: LD_INT 4
15114: PUSH
15115: LD_INT 5
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: IN
15126: NOT
15127: IFTRUE 15170
15129: PUSH
15130: LD_VAR 0 1
15134: PUSH
15135: LD_INT 0
15137: PUSH
15138: LD_INT 1
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: IN
15145: IFFALSE 15169
15147: PUSH
15148: LD_VAR 0 5
15152: PUSH
15153: LD_INT 1
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: LD_INT 3
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: IN
15167: NOT
15168: AND
15169: OR
15170: IFFALSE 15174
// exit ;
15172: GO 33573
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15174: LD_VAR 0 1
15178: PUSH
15179: LD_INT 6
15181: PUSH
15182: LD_INT 7
15184: PUSH
15185: LD_INT 8
15187: PUSH
15188: LD_INT 13
15190: PUSH
15191: LD_INT 12
15193: PUSH
15194: LD_INT 15
15196: PUSH
15197: LD_INT 11
15199: PUSH
15200: LD_INT 14
15202: PUSH
15203: LD_INT 10
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: IN
15217: IFFALSE 15227
// btype = b_lab ;
15219: LD_ADDR_VAR 0 1
15223: PUSH
15224: LD_INT 6
15226: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15227: LD_VAR 0 6
15231: PUSH
15232: LD_INT 0
15234: PUSH
15235: LD_INT 1
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: IN
15246: NOT
15247: IFTRUE 15315
15249: PUSH
15250: LD_VAR 0 1
15254: PUSH
15255: LD_INT 0
15257: PUSH
15258: LD_INT 1
15260: PUSH
15261: LD_INT 2
15263: PUSH
15264: LD_INT 3
15266: PUSH
15267: LD_INT 6
15269: PUSH
15270: LD_INT 36
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: LD_INT 5
15278: PUSH
15279: LD_INT 31
15281: PUSH
15282: LD_INT 32
15284: PUSH
15285: LD_INT 33
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: IN
15301: NOT
15302: IFFALSE 15314
15304: PUSH
15305: LD_VAR 0 6
15309: PUSH
15310: LD_INT 1
15312: EQUAL
15313: AND
15314: OR
15315: IFTRUE 15347
15317: PUSH
15318: LD_VAR 0 1
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: LD_INT 3
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: IN
15333: NOT
15334: IFFALSE 15346
15336: PUSH
15337: LD_VAR 0 6
15341: PUSH
15342: LD_INT 2
15344: EQUAL
15345: AND
15346: OR
15347: IFFALSE 15357
// mode = 0 ;
15349: LD_ADDR_VAR 0 6
15353: PUSH
15354: LD_INT 0
15356: ST_TO_ADDR
// case mode of 0 :
15357: LD_VAR 0 6
15361: PUSH
15362: LD_INT 0
15364: DOUBLE
15365: EQUAL
15366: IFTRUE 15370
15368: GO 26823
15370: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15371: LD_ADDR_VAR 0 11
15375: PUSH
15376: LD_INT 0
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: LD_INT 1
15391: NEG
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 1
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 0
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 1
15429: NEG
15430: PUSH
15431: LD_INT 0
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 1
15440: NEG
15441: PUSH
15442: LD_INT 1
15444: NEG
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 1
15452: NEG
15453: PUSH
15454: LD_INT 2
15456: NEG
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 0
15464: PUSH
15465: LD_INT 2
15467: NEG
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: LD_INT 1
15478: NEG
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 0
15496: PUSH
15497: LD_INT 2
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 1
15506: NEG
15507: PUSH
15508: LD_INT 1
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: LD_INT 3
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PUSH
15525: LD_INT 0
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 1
15537: NEG
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15564: LD_ADDR_VAR 0 12
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: LD_INT 1
15648: NEG
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: LD_INT 0
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 1
15676: NEG
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: LD_INT 2
15687: NEG
15688: PUSH
15689: LD_INT 0
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 2
15698: NEG
15699: PUSH
15700: LD_INT 1
15702: NEG
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 2
15710: NEG
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 3
15721: NEG
15722: PUSH
15723: LD_INT 0
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 3
15732: NEG
15733: PUSH
15734: LD_INT 1
15736: NEG
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15760: LD_ADDR_VAR 0 13
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: LD_INT 0
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: LD_INT 1
15780: NEG
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: LD_INT 0
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 1
15818: NEG
15819: PUSH
15820: LD_INT 0
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 1
15829: NEG
15830: PUSH
15831: LD_INT 1
15833: NEG
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 1
15841: NEG
15842: PUSH
15843: LD_INT 2
15845: NEG
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 2
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: LD_INT 2
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: NEG
15884: PUSH
15885: LD_INT 1
15887: NEG
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 2
15895: NEG
15896: PUSH
15897: LD_INT 2
15899: NEG
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 2
15907: NEG
15908: PUSH
15909: LD_INT 3
15911: NEG
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 3
15919: NEG
15920: PUSH
15921: LD_INT 2
15923: NEG
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 3
15931: NEG
15932: PUSH
15933: LD_INT 3
15935: NEG
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15959: LD_ADDR_VAR 0 14
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: LD_INT 0
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 0
15976: PUSH
15977: LD_INT 1
15979: NEG
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 1
16028: NEG
16029: PUSH
16030: LD_INT 1
16032: NEG
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: LD_INT 2
16044: NEG
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 0
16052: PUSH
16053: LD_INT 2
16055: NEG
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 1
16063: PUSH
16064: LD_INT 1
16066: NEG
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 0
16084: PUSH
16085: LD_INT 2
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 1
16094: NEG
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 1
16105: NEG
16106: PUSH
16107: LD_INT 3
16109: NEG
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 0
16117: PUSH
16118: LD_INT 3
16120: NEG
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: LD_INT 2
16131: NEG
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16155: LD_ADDR_VAR 0 15
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: LD_INT 1
16175: NEG
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: LD_INT 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 1
16213: NEG
16214: PUSH
16215: LD_INT 0
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 1
16224: NEG
16225: PUSH
16226: LD_INT 1
16228: NEG
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 1
16239: NEG
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: LD_INT 0
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 2
16257: PUSH
16258: LD_INT 1
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 1
16267: NEG
16268: PUSH
16269: LD_INT 1
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 2
16278: NEG
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 2
16289: NEG
16290: PUSH
16291: LD_INT 1
16293: NEG
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 2
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 3
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16348: LD_ADDR_VAR 0 16
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 0
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 1
16406: NEG
16407: PUSH
16408: LD_INT 0
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: LD_INT 1
16421: NEG
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 1
16429: NEG
16430: PUSH
16431: LD_INT 2
16433: NEG
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: LD_INT 1
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 2
16451: PUSH
16452: LD_INT 2
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 2
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 2
16471: NEG
16472: PUSH
16473: LD_INT 1
16475: NEG
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 2
16483: NEG
16484: PUSH
16485: LD_INT 2
16487: NEG
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 3
16505: PUSH
16506: LD_INT 3
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16541: LD_ADDR_VAR 0 17
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 1
16561: NEG
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 1
16599: NEG
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 1
16610: NEG
16611: PUSH
16612: LD_INT 1
16614: NEG
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: LD_INT 2
16626: NEG
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 0
16634: PUSH
16635: LD_INT 2
16637: NEG
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PUSH
16646: LD_INT 1
16648: NEG
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 2
16656: PUSH
16657: LD_INT 0
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 2
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 2
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 0
16696: PUSH
16697: LD_INT 2
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 1
16706: NEG
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: NEG
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 2
16728: NEG
16729: PUSH
16730: LD_INT 1
16732: NEG
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 2
16740: NEG
16741: PUSH
16742: LD_INT 2
16744: NEG
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16771: LD_ADDR_VAR 0 18
16775: PUSH
16776: LD_INT 0
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 0
16788: PUSH
16789: LD_INT 1
16791: NEG
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 1
16799: PUSH
16800: LD_INT 0
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: NEG
16830: PUSH
16831: LD_INT 0
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 1
16840: NEG
16841: PUSH
16842: LD_INT 1
16844: NEG
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 1
16852: NEG
16853: PUSH
16854: LD_INT 2
16856: NEG
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 0
16864: PUSH
16865: LD_INT 2
16867: NEG
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 1
16875: PUSH
16876: LD_INT 1
16878: NEG
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: LD_INT 0
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 2
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 0
16926: PUSH
16927: LD_INT 2
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 1
16936: NEG
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 2
16947: NEG
16948: PUSH
16949: LD_INT 0
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 2
16958: NEG
16959: PUSH
16960: LD_INT 1
16962: NEG
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 2
16970: NEG
16971: PUSH
16972: LD_INT 2
16974: NEG
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17001: LD_ADDR_VAR 0 19
17005: PUSH
17006: LD_INT 0
17008: PUSH
17009: LD_INT 0
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 0
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 1
17029: PUSH
17030: LD_INT 0
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 1
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 1
17059: NEG
17060: PUSH
17061: LD_INT 0
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: NEG
17071: PUSH
17072: LD_INT 1
17074: NEG
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: NEG
17083: PUSH
17084: LD_INT 2
17086: NEG
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 0
17094: PUSH
17095: LD_INT 2
17097: NEG
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 1
17105: PUSH
17106: LD_INT 1
17108: NEG
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: LD_INT 0
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 2
17126: PUSH
17127: LD_INT 1
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 2
17136: PUSH
17137: LD_INT 2
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: LD_INT 2
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 1
17166: NEG
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 2
17177: NEG
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: LD_INT 1
17192: NEG
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: LD_INT 2
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17231: LD_ADDR_VAR 0 20
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: LD_INT 1
17251: NEG
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 1
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 1
17289: NEG
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: LD_INT 1
17304: NEG
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 1
17312: NEG
17313: PUSH
17314: LD_INT 2
17316: NEG
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 0
17324: PUSH
17325: LD_INT 2
17327: NEG
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: LD_INT 1
17338: NEG
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: LD_INT 0
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 2
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 1
17396: NEG
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 2
17407: NEG
17408: PUSH
17409: LD_INT 0
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 2
17418: NEG
17419: PUSH
17420: LD_INT 1
17422: NEG
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: LD_INT 2
17434: NEG
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17461: LD_ADDR_VAR 0 21
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: LD_INT 0
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: LD_INT 1
17481: NEG
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 1
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 1
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: LD_INT 1
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 1
17519: NEG
17520: PUSH
17521: LD_INT 0
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 1
17534: NEG
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PUSH
17544: LD_INT 2
17546: NEG
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: LD_INT 2
17557: NEG
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: LD_INT 1
17568: NEG
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 2
17596: PUSH
17597: LD_INT 2
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: LD_INT 2
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 0
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 1
17626: NEG
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 2
17637: NEG
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 2
17648: NEG
17649: PUSH
17650: LD_INT 1
17652: NEG
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: LD_INT 2
17664: NEG
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17691: LD_ADDR_VAR 0 22
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: LD_INT 1
17711: NEG
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: NEG
17750: PUSH
17751: LD_INT 0
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 1
17760: NEG
17761: PUSH
17762: LD_INT 1
17764: NEG
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: NEG
17773: PUSH
17774: LD_INT 2
17776: NEG
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 0
17784: PUSH
17785: LD_INT 2
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 1
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: LD_INT 1
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 2
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: PUSH
17837: LD_INT 2
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 2
17878: NEG
17879: PUSH
17880: LD_INT 1
17882: NEG
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: LD_INT 2
17894: NEG
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17921: LD_ADDR_VAR 0 23
17925: PUSH
17926: LD_INT 0
17928: PUSH
17929: LD_INT 0
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: LD_INT 1
17941: NEG
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: LD_INT 0
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 1
17979: NEG
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 1
17990: NEG
17991: PUSH
17992: LD_INT 1
17994: NEG
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: LD_INT 2
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 2
18017: NEG
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: LD_INT 1
18028: NEG
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 2
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: LD_INT 2
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 2
18097: NEG
18098: PUSH
18099: LD_INT 0
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 2
18108: NEG
18109: PUSH
18110: LD_INT 1
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 2
18132: NEG
18133: PUSH
18134: LD_INT 3
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 1
18144: NEG
18145: PUSH
18146: LD_INT 3
18148: NEG
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18201: LD_ADDR_VAR 0 24
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 0
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 1
18221: NEG
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PUSH
18284: LD_INT 2
18286: NEG
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: LD_INT 2
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 1
18308: NEG
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 2
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 2
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: LD_INT 2
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 2
18377: NEG
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 2
18388: NEG
18389: PUSH
18390: LD_INT 1
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: LD_INT 2
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: LD_INT 2
18415: NEG
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 1
18426: NEG
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18477: LD_ADDR_VAR 0 25
18481: PUSH
18482: LD_INT 0
18484: PUSH
18485: LD_INT 0
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: LD_INT 2
18562: NEG
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 2
18573: NEG
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 0
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 2
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: PUSH
18620: LD_INT 1
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: NEG
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: NEG
18665: PUSH
18666: LD_INT 1
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 2
18676: NEG
18677: PUSH
18678: LD_INT 2
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 3
18688: PUSH
18689: LD_INT 1
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18751: LD_ADDR_VAR 0 26
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: LD_INT 1
18824: NEG
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 2
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: LD_INT 0
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: LD_INT 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 2
18927: NEG
18928: PUSH
18929: LD_INT 0
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: LD_INT 1
18942: NEG
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: LD_INT 2
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: LD_INT 3
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 3
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 1
18982: NEG
18983: PUSH
18984: LD_INT 2
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 2
18993: NEG
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19027: LD_ADDR_VAR 0 27
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: LD_INT 0
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 1
19108: NEG
19109: PUSH
19110: LD_INT 2
19112: NEG
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 1
19134: NEG
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 2
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: LD_INT 2
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 1
19192: NEG
19193: PUSH
19194: LD_INT 1
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: LD_INT 0
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: LD_INT 2
19230: NEG
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 3
19260: NEG
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 3
19272: NEG
19273: PUSH
19274: LD_INT 2
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19307: LD_ADDR_VAR 0 28
19311: PUSH
19312: LD_INT 0
19314: PUSH
19315: LD_INT 0
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 1
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: NEG
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: NEG
19377: PUSH
19378: LD_INT 1
19380: NEG
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: LD_INT 2
19392: NEG
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: LD_INT 2
19403: NEG
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: PUSH
19412: LD_INT 1
19414: NEG
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 2
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 2
19483: NEG
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 2
19494: NEG
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 2
19506: NEG
19507: PUSH
19508: LD_INT 2
19510: NEG
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 2
19518: NEG
19519: PUSH
19520: LD_INT 3
19522: NEG
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: LD_INT 3
19534: NEG
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 3
19542: NEG
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 3
19554: NEG
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19589: LD_ADDR_VAR 0 29
19593: PUSH
19594: LD_INT 0
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: LD_INT 2
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: LD_INT 2
19685: NEG
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 2
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: NEG
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: LD_INT 3
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 3
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 1
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 1
19822: NEG
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 3
19833: NEG
19834: PUSH
19835: LD_INT 2
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19868: LD_ADDR_VAR 0 30
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 0
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 1
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 1
19937: NEG
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 2
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: LD_INT 1
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 2
20034: NEG
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: NEG
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 3
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: LD_INT 2
20072: NEG
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 3
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 3
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 3
20111: NEG
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20146: LD_ADDR_VAR 0 31
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: NEG
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_INT 2
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 0
20290: PUSH
20291: LD_INT 2
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 1
20300: NEG
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: LD_INT 1
20315: NEG
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 2
20323: NEG
20324: PUSH
20325: LD_INT 2
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: LD_INT 3
20339: NEG
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 3
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: LD_INT 3
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 3
20389: NEG
20390: PUSH
20391: LD_INT 2
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20424: LD_ADDR_VAR 0 32
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: LD_INT 0
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 2
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: LD_INT 2
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 1
20579: NEG
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 2
20590: NEG
20591: PUSH
20592: LD_INT 0
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 3
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 2
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 3
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 2
20646: PUSH
20647: LD_INT 3
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 3
20667: NEG
20668: PUSH
20669: LD_INT 1
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20702: LD_ADDR_VAR 0 33
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 0
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 1
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: LD_INT 1
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 1
20771: NEG
20772: PUSH
20773: LD_INT 1
20775: NEG
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: LD_INT 2
20787: NEG
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 1
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 1
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 1
20846: NEG
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 2
20868: NEG
20869: PUSH
20870: LD_INT 1
20872: NEG
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 2
20880: NEG
20881: PUSH
20882: LD_INT 2
20884: NEG
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: LD_INT 3
20896: NEG
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 2
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 3
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 3
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: NEG
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 3
20946: NEG
20947: PUSH
20948: LD_INT 2
20950: NEG
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20981: LD_ADDR_VAR 0 34
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 0
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: NEG
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 2
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: LD_INT 1
21088: NEG
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 1
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: NEG
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: LD_INT 2
21164: NEG
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 1
21172: NEG
21173: PUSH
21174: LD_INT 3
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 2
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 3
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 3
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 3
21226: NEG
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21261: LD_ADDR_VAR 0 35
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 2
21352: NEG
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21373: LD_ADDR_VAR 0 36
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 2
21458: NEG
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21485: LD_ADDR_VAR 0 37
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: LD_INT 1
21505: NEG
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 0
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: LD_INT 0
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21597: LD_ADDR_VAR 0 38
21601: PUSH
21602: LD_INT 0
21604: PUSH
21605: LD_INT 0
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 1
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 1
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 1
21655: NEG
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 1
21666: NEG
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: NEG
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21709: LD_ADDR_VAR 0 39
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: LD_INT 0
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 0
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: NEG
21768: PUSH
21769: LD_INT 0
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 1
21790: NEG
21791: PUSH
21792: LD_INT 2
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 1
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21821: LD_ADDR_VAR 0 40
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 0
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 1
21879: NEG
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 1
21890: NEG
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21933: LD_ADDR_VAR 0 41
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: NEG
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: LD_INT 2
22018: NEG
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: LD_INT 1
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 2
22088: NEG
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 2
22111: NEG
22112: PUSH
22113: LD_INT 2
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 2
22123: NEG
22124: PUSH
22125: LD_INT 3
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 3
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 3
22176: PUSH
22177: LD_INT 3
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 3
22207: NEG
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 3
22218: NEG
22219: PUSH
22220: LD_INT 1
22222: NEG
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 3
22230: NEG
22231: PUSH
22232: LD_INT 2
22234: NEG
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 3
22242: NEG
22243: PUSH
22244: LD_INT 3
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22283: LD_ADDR_VAR 0 42
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: PUSH
22322: LD_INT 1
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: NEG
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: LD_INT 2
22368: NEG
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 0
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: LD_INT 2
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 1
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: NEG
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: NEG
22474: PUSH
22475: LD_INT 3
22477: NEG
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: NEG
22486: PUSH
22487: LD_INT 3
22489: NEG
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: LD_INT 3
22500: NEG
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: LD_INT 2
22511: NEG
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 3
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 3
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: LD_INT 2
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 3
22592: NEG
22593: PUSH
22594: LD_INT 3
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22633: LD_ADDR_VAR 0 43
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: LD_INT 0
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 1
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: LD_INT 0
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: LD_INT 0
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 1
22788: NEG
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 2
22799: NEG
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 3
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 3
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PUSH
22846: LD_INT 2
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 3
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 3
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 3
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: NEG
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: NEG
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22981: LD_ADDR_VAR 0 44
22985: PUSH
22986: LD_INT 0
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: LD_INT 1
23054: NEG
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 3
23175: NEG
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 3
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 3
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: PUSH
23222: LD_INT 3
23224: PUSH
23225: LD_INT 3
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: LD_INT 3
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: LD_INT 1
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 3
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 3
23278: NEG
23279: PUSH
23280: LD_INT 2
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 3
23290: NEG
23291: PUSH
23292: LD_INT 3
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23331: LD_ADDR_VAR 0 45
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: LD_INT 1
23351: NEG
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 0
23424: PUSH
23425: LD_INT 2
23427: NEG
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 2
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 2
23521: NEG
23522: PUSH
23523: LD_INT 3
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: LD_INT 3
23537: NEG
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 3
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 2
23559: NEG
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 3
23577: PUSH
23578: LD_INT 3
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 2
23587: PUSH
23588: LD_INT 3
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 3
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 3
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: LD_INT 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 3
23628: NEG
23629: PUSH
23630: LD_INT 2
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 3
23640: NEG
23641: PUSH
23642: LD_INT 3
23644: NEG
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23681: LD_ADDR_VAR 0 46
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: LD_INT 0
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: LD_INT 0
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 1
23739: NEG
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 2
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 2
23847: NEG
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: NEG
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: LD_INT 3
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 3
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: LD_INT 2
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 3
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 3
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 3
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 2
23966: NEG
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 3
23977: NEG
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 3
23988: NEG
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24029: LD_ADDR_VAR 0 47
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: LD_INT 1
24049: NEG
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 1
24098: NEG
24099: PUSH
24100: LD_INT 1
24102: NEG
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: NEG
24111: PUSH
24112: LD_INT 2
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: NEG
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24180: LD_ADDR_VAR 0 48
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: LD_INT 1
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 2
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 2
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24327: LD_ADDR_VAR 0 49
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 0
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: LD_INT 2
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24471: LD_ADDR_VAR 0 50
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24615: LD_ADDR_VAR 0 51
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 0
24632: PUSH
24633: LD_INT 1
24635: NEG
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: LD_INT 1
24688: NEG
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 2
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 2
24727: NEG
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: NEG
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24762: LD_ADDR_VAR 0 52
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 1
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: NEG
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: NEG
24844: PUSH
24845: LD_INT 2
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24913: LD_ADDR_VAR 0 53
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 2
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: LD_INT 2
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25143: LD_ADDR_VAR 0 54
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: LD_INT 2
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 2
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: LD_INT 2
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25373: LD_ADDR_VAR 0 55
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: NEG
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 2
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25603: LD_ADDR_VAR 0 56
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: NEG
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25833: LD_ADDR_VAR 0 57
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 1
25891: NEG
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 2
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 2
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26063: LD_ADDR_VAR 0 58
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 1
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: LD_INT 2
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 2
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: NEG
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 2
26250: NEG
26251: PUSH
26252: LD_INT 1
26254: NEG
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: LD_INT 2
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26293: LD_ADDR_VAR 0 59
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26381: LD_ADDR_VAR 0 60
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26469: LD_ADDR_VAR 0 61
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26557: LD_ADDR_VAR 0 62
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 1
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 1
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26645: LD_ADDR_VAR 0 63
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: LD_INT 1
26665: NEG
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26733: LD_ADDR_VAR 0 64
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: ST_TO_ADDR
// end ; 1 :
26821: GO 32718
26823: LD_INT 1
26825: DOUBLE
26826: EQUAL
26827: IFTRUE 26831
26829: GO 29454
26831: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26832: LD_ADDR_VAR 0 11
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: LD_INT 3
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 3
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: LD_INT 2
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26876: LD_ADDR_VAR 0 12
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 3
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 3
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26917: LD_ADDR_VAR 0 13
26921: PUSH
26922: LD_INT 3
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 3
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 3
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: LIST
26956: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26957: LD_ADDR_VAR 0 14
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 3
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 3
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26998: LD_ADDR_VAR 0 15
27002: PUSH
27003: LD_INT 2
27005: NEG
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 3
27016: NEG
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 3
27027: NEG
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: LIST
27041: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27042: LD_ADDR_VAR 0 16
27046: PUSH
27047: LD_INT 2
27049: NEG
27050: PUSH
27051: LD_INT 3
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 3
27061: NEG
27062: PUSH
27063: LD_INT 2
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 3
27073: NEG
27074: PUSH
27075: LD_INT 3
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27088: LD_ADDR_VAR 0 17
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 3
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 3
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27132: LD_ADDR_VAR 0 18
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27173: LD_ADDR_VAR 0 19
27177: PUSH
27178: LD_INT 3
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27213: LD_ADDR_VAR 0 20
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: LD_INT 3
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 3
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: LD_INT 2
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27254: LD_ADDR_VAR 0 21
27258: PUSH
27259: LD_INT 2
27261: NEG
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 3
27272: NEG
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 3
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27298: LD_ADDR_VAR 0 22
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: LD_INT 3
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 3
27317: NEG
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 3
27329: NEG
27330: PUSH
27331: LD_INT 3
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27344: LD_ADDR_VAR 0 23
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 3
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: LD_INT 4
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: LD_INT 3
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: LIST
27387: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27388: LD_ADDR_VAR 0 24
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 3
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 4
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: LIST
27428: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27429: LD_ADDR_VAR 0 25
27433: PUSH
27434: LD_INT 3
27436: PUSH
27437: LD_INT 3
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 4
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 3
27456: PUSH
27457: LD_INT 4
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27469: LD_ADDR_VAR 0 26
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: LD_INT 3
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 4
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27510: LD_ADDR_VAR 0 27
27514: PUSH
27515: LD_INT 3
27517: NEG
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 3
27528: NEG
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 4
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: LIST
27553: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27554: LD_ADDR_VAR 0 28
27558: PUSH
27559: LD_INT 3
27561: NEG
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 3
27573: NEG
27574: PUSH
27575: LD_INT 4
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 4
27585: NEG
27586: PUSH
27587: LD_INT 3
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27600: LD_ADDR_VAR 0 29
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: LD_INT 3
27611: NEG
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 3
27622: NEG
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 4
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: LD_INT 4
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: LD_INT 3
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 5
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 5
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 4
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 6
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 6
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 5
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27755: LD_ADDR_VAR 0 30
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 3
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 3
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 3
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 4
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 4
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 4
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 5
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 5
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 6
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 6
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27898: LD_ADDR_VAR 0 31
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 3
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 4
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 4
27945: PUSH
27946: LD_INT 4
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 3
27955: PUSH
27956: LD_INT 4
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 5
27965: PUSH
27966: LD_INT 4
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 5
27975: PUSH
27976: LD_INT 5
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 4
27985: PUSH
27986: LD_INT 5
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 6
27995: PUSH
27996: LD_INT 5
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 6
28005: PUSH
28006: LD_INT 6
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 5
28015: PUSH
28016: LD_INT 6
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28037: LD_ADDR_VAR 0 32
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 4
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: LD_INT 4
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: LD_INT 5
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: LD_INT 5
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: LD_INT 4
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 6
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 6
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 5
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28180: LD_ADDR_VAR 0 33
28184: PUSH
28185: LD_INT 2
28187: NEG
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 3
28198: NEG
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 3
28209: NEG
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 3
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 4
28232: NEG
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 4
28243: NEG
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 4
28255: NEG
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 5
28266: NEG
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 5
28277: NEG
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 5
28289: NEG
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 6
28300: NEG
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 6
28311: NEG
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28335: LD_ADDR_VAR 0 34
28339: PUSH
28340: LD_INT 2
28342: NEG
28343: PUSH
28344: LD_INT 3
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 3
28354: NEG
28355: PUSH
28356: LD_INT 2
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 3
28366: NEG
28367: PUSH
28368: LD_INT 3
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 3
28378: NEG
28379: PUSH
28380: LD_INT 4
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 4
28390: NEG
28391: PUSH
28392: LD_INT 3
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 4
28402: NEG
28403: PUSH
28404: LD_INT 4
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 4
28414: NEG
28415: PUSH
28416: LD_INT 5
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 5
28426: NEG
28427: PUSH
28428: LD_INT 4
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 5
28438: NEG
28439: PUSH
28440: LD_INT 5
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 5
28450: NEG
28451: PUSH
28452: LD_INT 6
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 6
28462: NEG
28463: PUSH
28464: LD_INT 5
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 6
28474: NEG
28475: PUSH
28476: LD_INT 6
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28498: LD_ADDR_VAR 0 41
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 2
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: LD_INT 3
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: LD_INT 2
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: LIST
28541: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28542: LD_ADDR_VAR 0 42
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28583: LD_ADDR_VAR 0 43
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28623: LD_ADDR_VAR 0 44
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 3
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28664: LD_ADDR_VAR 0 45
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 3
28693: NEG
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: LIST
28707: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28708: LD_ADDR_VAR 0 46
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: LD_INT 3
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28754: LD_ADDR_VAR 0 47
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: LD_INT 3
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: LD_INT 3
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28787: LD_ADDR_VAR 0 48
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28818: LD_ADDR_VAR 0 49
28822: PUSH
28823: LD_INT 3
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 3
28835: PUSH
28836: LD_INT 2
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28847: LD_ADDR_VAR 0 50
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: LD_INT 3
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 3
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28876: LD_ADDR_VAR 0 51
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: NEG
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28907: LD_ADDR_VAR 0 52
28911: PUSH
28912: LD_INT 3
28914: NEG
28915: PUSH
28916: LD_INT 1
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 3
28926: NEG
28927: PUSH
28928: LD_INT 2
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28940: LD_ADDR_VAR 0 53
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: LD_INT 3
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 3
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: LD_INT 2
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28984: LD_ADDR_VAR 0 54
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 3
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29025: LD_ADDR_VAR 0 55
29029: PUSH
29030: LD_INT 3
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 3
29042: PUSH
29043: LD_INT 3
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 3
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: LIST
29064: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29065: LD_ADDR_VAR 0 56
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: LD_INT 3
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29106: LD_ADDR_VAR 0 57
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 3
29124: NEG
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: NEG
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: LIST
29149: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29150: LD_ADDR_VAR 0 58
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: LD_INT 3
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 3
29169: NEG
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29196: LD_ADDR_VAR 0 59
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: LD_INT 2
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: LIST
29239: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29240: LD_ADDR_VAR 0 60
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: LD_INT 1
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29281: LD_ADDR_VAR 0 61
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 2
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29321: LD_ADDR_VAR 0 62
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: NEG
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29362: LD_ADDR_VAR 0 63
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 2
29380: NEG
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29406: LD_ADDR_VAR 0 64
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: NEG
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: ST_TO_ADDR
// end ; 2 :
29452: GO 32718
29454: LD_INT 2
29456: DOUBLE
29457: EQUAL
29458: IFTRUE 29462
29460: GO 32717
29462: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29463: LD_ADDR_VAR 0 29
29467: PUSH
29468: LD_INT 4
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 4
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 5
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 5
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 4
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 3
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 3
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: LD_INT 2
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 5
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 3
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 4
29583: PUSH
29584: LD_INT 3
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 4
29593: PUSH
29594: LD_INT 4
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 4
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 4
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: LD_INT 4
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: LD_INT 3
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: LD_INT 4
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: LD_INT 5
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 5
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: LD_INT 3
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 5
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: NEG
29736: PUSH
29737: LD_INT 3
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 3
29746: NEG
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 2
29769: NEG
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: NEG
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 4
29802: NEG
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 4
29813: NEG
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 4
29825: NEG
29826: PUSH
29827: LD_INT 2
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: NEG
29838: PUSH
29839: LD_INT 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 4
29848: NEG
29849: PUSH
29850: LD_INT 4
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 4
29860: NEG
29861: PUSH
29862: LD_INT 5
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: LD_INT 4
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 3
29884: NEG
29885: PUSH
29886: LD_INT 3
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 4
29896: NEG
29897: PUSH
29898: LD_INT 3
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 5
29908: NEG
29909: PUSH
29910: LD_INT 4
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 5
29920: NEG
29921: PUSH
29922: LD_INT 5
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: LD_INT 5
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 5
29944: NEG
29945: PUSH
29946: LD_INT 3
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30001: LD_ADDR_VAR 0 30
30005: PUSH
30006: LD_INT 4
30008: PUSH
30009: LD_INT 4
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 4
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 5
30028: PUSH
30029: LD_INT 4
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 5
30038: PUSH
30039: LD_INT 5
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 4
30048: PUSH
30049: LD_INT 5
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: LD_INT 4
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 3
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 5
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 5
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 4
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 4
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: NEG
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 4
30191: NEG
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 4
30202: NEG
30203: PUSH
30204: LD_INT 1
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: NEG
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: NEG
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 4
30236: NEG
30237: PUSH
30238: LD_INT 1
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 5
30247: NEG
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 5
30258: NEG
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 5
30270: NEG
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 3
30282: NEG
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: NEG
30294: PUSH
30295: LD_INT 3
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: LD_INT 4
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 2
30317: NEG
30318: PUSH
30319: LD_INT 3
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 4
30353: NEG
30354: PUSH
30355: LD_INT 3
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 4
30365: NEG
30366: PUSH
30367: LD_INT 4
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: LD_INT 4
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 4
30389: NEG
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 4
30404: NEG
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 5
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 4
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: LD_INT 3
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: LD_INT 3
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: LD_INT 4
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: LD_INT 5
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 5
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30548: LD_ADDR_VAR 0 31
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: LD_INT 4
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 5
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: LD_INT 5
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 4
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: LD_INT 3
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: NEG
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 3
30693: NEG
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 4
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 4
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 4
30750: NEG
30751: PUSH
30752: LD_INT 4
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 4
30762: NEG
30763: PUSH
30764: LD_INT 5
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: LD_INT 4
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 3
30786: NEG
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 4
30798: NEG
30799: PUSH
30800: LD_INT 3
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 5
30810: NEG
30811: PUSH
30812: LD_INT 4
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 5
30822: NEG
30823: PUSH
30824: LD_INT 5
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: NEG
30835: PUSH
30836: LD_INT 5
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 5
30846: NEG
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 3
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 4
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: LD_INT 3
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: LD_INT 4
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 2
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: LD_INT 4
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 4
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 4
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 5
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 5
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 4
31001: PUSH
31002: LD_INT 1
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 3
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 3
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 5
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31098: LD_ADDR_VAR 0 32
31102: PUSH
31103: LD_INT 4
31105: NEG
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 4
31116: NEG
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 3
31128: NEG
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 3
31139: NEG
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 4
31150: NEG
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 5
31161: NEG
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 5
31172: NEG
31173: PUSH
31174: LD_INT 1
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 5
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 3
31196: NEG
31197: PUSH
31198: LD_INT 2
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: LD_INT 3
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: LD_INT 4
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: LD_INT 3
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 3
31255: NEG
31256: PUSH
31257: LD_INT 2
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 4
31267: NEG
31268: PUSH
31269: LD_INT 3
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 4
31279: NEG
31280: PUSH
31281: LD_INT 4
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: LD_INT 4
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 4
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: LD_INT 5
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 4
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 4
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: LD_INT 5
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 5
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 3
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 3
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 4
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 4
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 1
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 4
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 4
31510: PUSH
31511: LD_INT 4
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 4
31520: PUSH
31521: LD_INT 3
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 5
31530: PUSH
31531: LD_INT 4
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 5
31540: PUSH
31541: LD_INT 5
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 4
31550: PUSH
31551: LD_INT 5
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 4
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 5
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: PUSH
31591: LD_INT 5
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31645: LD_ADDR_VAR 0 33
31649: PUSH
31650: LD_INT 4
31652: NEG
31653: PUSH
31654: LD_INT 4
31656: NEG
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: NEG
31665: PUSH
31666: LD_INT 5
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 3
31676: NEG
31677: PUSH
31678: LD_INT 4
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: NEG
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 4
31700: NEG
31701: PUSH
31702: LD_INT 3
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 5
31712: NEG
31713: PUSH
31714: LD_INT 4
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 5
31724: NEG
31725: PUSH
31726: LD_INT 5
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 3
31736: NEG
31737: PUSH
31738: LD_INT 5
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 5
31748: NEG
31749: PUSH
31750: LD_INT 3
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 3
31763: NEG
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 4
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 4
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: NEG
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 4
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 4
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 5
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 5
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 4
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 5
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 3
31955: PUSH
31956: LD_INT 3
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 3
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 4
31985: PUSH
31986: LD_INT 4
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: LD_INT 4
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: LD_INT 3
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 4
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: LD_INT 4
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 0
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: LD_INT 5
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 5
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32183: LD_ADDR_VAR 0 34
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 4
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 5
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 4
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 5
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: LD_INT 3
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: LD_INT 5
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 3
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 4
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 4
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 4
32385: PUSH
32386: LD_INT 4
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 5
32405: PUSH
32406: LD_INT 4
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 5
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 4
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: LD_INT 4
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 5
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: LD_INT 5
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 2
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: LD_INT 4
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 4
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 1
32525: NEG
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 4
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 4
32568: NEG
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 4
32579: NEG
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 3
32591: NEG
32592: PUSH
32593: LD_INT 0
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 3
32602: NEG
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 4
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 5
32624: NEG
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 5
32635: NEG
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 5
32647: NEG
32648: PUSH
32649: LD_INT 2
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
// end ; end ;
32715: GO 32718
32717: POP
// case btype of b_depot , b_warehouse :
32718: LD_VAR 0 1
32722: PUSH
32723: LD_INT 0
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32737
32729: LD_INT 1
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32737
32735: GO 32938
32737: POP
// case nation of nation_american :
32738: LD_VAR 0 5
32742: PUSH
32743: LD_INT 1
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32751
32749: GO 32807
32751: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32752: LD_ADDR_VAR 0 9
32756: PUSH
32757: LD_VAR 0 11
32761: PUSH
32762: LD_VAR 0 12
32766: PUSH
32767: LD_VAR 0 13
32771: PUSH
32772: LD_VAR 0 14
32776: PUSH
32777: LD_VAR 0 15
32781: PUSH
32782: LD_VAR 0 16
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: PUSH
32795: LD_VAR 0 4
32799: PUSH
32800: LD_INT 1
32802: PLUS
32803: ARRAY
32804: ST_TO_ADDR
32805: GO 32936
32807: LD_INT 2
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32871
32815: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32816: LD_ADDR_VAR 0 9
32820: PUSH
32821: LD_VAR 0 17
32825: PUSH
32826: LD_VAR 0 18
32830: PUSH
32831: LD_VAR 0 19
32835: PUSH
32836: LD_VAR 0 20
32840: PUSH
32841: LD_VAR 0 21
32845: PUSH
32846: LD_VAR 0 22
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: PUSH
32859: LD_VAR 0 4
32863: PUSH
32864: LD_INT 1
32866: PLUS
32867: ARRAY
32868: ST_TO_ADDR
32869: GO 32936
32871: LD_INT 3
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32935
32879: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32880: LD_ADDR_VAR 0 9
32884: PUSH
32885: LD_VAR 0 23
32889: PUSH
32890: LD_VAR 0 24
32894: PUSH
32895: LD_VAR 0 25
32899: PUSH
32900: LD_VAR 0 26
32904: PUSH
32905: LD_VAR 0 27
32909: PUSH
32910: LD_VAR 0 28
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: PUSH
32923: LD_VAR 0 4
32927: PUSH
32928: LD_INT 1
32930: PLUS
32931: ARRAY
32932: ST_TO_ADDR
32933: GO 32936
32935: POP
32936: GO 33491
32938: LD_INT 2
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32952
32944: LD_INT 3
32946: DOUBLE
32947: EQUAL
32948: IFTRUE 32952
32950: GO 33008
32952: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32953: LD_ADDR_VAR 0 9
32957: PUSH
32958: LD_VAR 0 29
32962: PUSH
32963: LD_VAR 0 30
32967: PUSH
32968: LD_VAR 0 31
32972: PUSH
32973: LD_VAR 0 32
32977: PUSH
32978: LD_VAR 0 33
32982: PUSH
32983: LD_VAR 0 34
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: PUSH
32996: LD_VAR 0 4
33000: PUSH
33001: LD_INT 1
33003: PLUS
33004: ARRAY
33005: ST_TO_ADDR
33006: GO 33491
33008: LD_INT 16
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33070
33014: LD_INT 17
33016: DOUBLE
33017: EQUAL
33018: IFTRUE 33070
33020: LD_INT 18
33022: DOUBLE
33023: EQUAL
33024: IFTRUE 33070
33026: LD_INT 19
33028: DOUBLE
33029: EQUAL
33030: IFTRUE 33070
33032: LD_INT 22
33034: DOUBLE
33035: EQUAL
33036: IFTRUE 33070
33038: LD_INT 20
33040: DOUBLE
33041: EQUAL
33042: IFTRUE 33070
33044: LD_INT 21
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33070
33050: LD_INT 23
33052: DOUBLE
33053: EQUAL
33054: IFTRUE 33070
33056: LD_INT 24
33058: DOUBLE
33059: EQUAL
33060: IFTRUE 33070
33062: LD_INT 25
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33126
33070: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33071: LD_ADDR_VAR 0 9
33075: PUSH
33076: LD_VAR 0 35
33080: PUSH
33081: LD_VAR 0 36
33085: PUSH
33086: LD_VAR 0 37
33090: PUSH
33091: LD_VAR 0 38
33095: PUSH
33096: LD_VAR 0 39
33100: PUSH
33101: LD_VAR 0 40
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: PUSH
33114: LD_VAR 0 4
33118: PUSH
33119: LD_INT 1
33121: PLUS
33122: ARRAY
33123: ST_TO_ADDR
33124: GO 33491
33126: LD_INT 6
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33182
33132: LD_INT 7
33134: DOUBLE
33135: EQUAL
33136: IFTRUE 33182
33138: LD_INT 8
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33182
33144: LD_INT 13
33146: DOUBLE
33147: EQUAL
33148: IFTRUE 33182
33150: LD_INT 12
33152: DOUBLE
33153: EQUAL
33154: IFTRUE 33182
33156: LD_INT 15
33158: DOUBLE
33159: EQUAL
33160: IFTRUE 33182
33162: LD_INT 11
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33182
33168: LD_INT 14
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33182
33174: LD_INT 10
33176: DOUBLE
33177: EQUAL
33178: IFTRUE 33182
33180: GO 33238
33182: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33183: LD_ADDR_VAR 0 9
33187: PUSH
33188: LD_VAR 0 41
33192: PUSH
33193: LD_VAR 0 42
33197: PUSH
33198: LD_VAR 0 43
33202: PUSH
33203: LD_VAR 0 44
33207: PUSH
33208: LD_VAR 0 45
33212: PUSH
33213: LD_VAR 0 46
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: PUSH
33226: LD_VAR 0 4
33230: PUSH
33231: LD_INT 1
33233: PLUS
33234: ARRAY
33235: ST_TO_ADDR
33236: GO 33491
33238: LD_INT 36
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33302
33246: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33247: LD_ADDR_VAR 0 9
33251: PUSH
33252: LD_VAR 0 47
33256: PUSH
33257: LD_VAR 0 48
33261: PUSH
33262: LD_VAR 0 49
33266: PUSH
33267: LD_VAR 0 50
33271: PUSH
33272: LD_VAR 0 51
33276: PUSH
33277: LD_VAR 0 52
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: PUSH
33290: LD_VAR 0 4
33294: PUSH
33295: LD_INT 1
33297: PLUS
33298: ARRAY
33299: ST_TO_ADDR
33300: GO 33491
33302: LD_INT 4
33304: DOUBLE
33305: EQUAL
33306: IFTRUE 33328
33308: LD_INT 5
33310: DOUBLE
33311: EQUAL
33312: IFTRUE 33328
33314: LD_INT 34
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33328
33320: LD_INT 37
33322: DOUBLE
33323: EQUAL
33324: IFTRUE 33328
33326: GO 33384
33328: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33329: LD_ADDR_VAR 0 9
33333: PUSH
33334: LD_VAR 0 53
33338: PUSH
33339: LD_VAR 0 54
33343: PUSH
33344: LD_VAR 0 55
33348: PUSH
33349: LD_VAR 0 56
33353: PUSH
33354: LD_VAR 0 57
33358: PUSH
33359: LD_VAR 0 58
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: PUSH
33372: LD_VAR 0 4
33376: PUSH
33377: LD_INT 1
33379: PLUS
33380: ARRAY
33381: ST_TO_ADDR
33382: GO 33491
33384: LD_INT 31
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33434
33390: LD_INT 32
33392: DOUBLE
33393: EQUAL
33394: IFTRUE 33434
33396: LD_INT 33
33398: DOUBLE
33399: EQUAL
33400: IFTRUE 33434
33402: LD_INT 27
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33434
33408: LD_INT 26
33410: DOUBLE
33411: EQUAL
33412: IFTRUE 33434
33414: LD_INT 28
33416: DOUBLE
33417: EQUAL
33418: IFTRUE 33434
33420: LD_INT 29
33422: DOUBLE
33423: EQUAL
33424: IFTRUE 33434
33426: LD_INT 30
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33434
33432: GO 33490
33434: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33435: LD_ADDR_VAR 0 9
33439: PUSH
33440: LD_VAR 0 59
33444: PUSH
33445: LD_VAR 0 60
33449: PUSH
33450: LD_VAR 0 61
33454: PUSH
33455: LD_VAR 0 62
33459: PUSH
33460: LD_VAR 0 63
33464: PUSH
33465: LD_VAR 0 64
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: PUSH
33478: LD_VAR 0 4
33482: PUSH
33483: LD_INT 1
33485: PLUS
33486: ARRAY
33487: ST_TO_ADDR
33488: GO 33491
33490: POP
// temp_list2 = [ ] ;
33491: LD_ADDR_VAR 0 10
33495: PUSH
33496: EMPTY
33497: ST_TO_ADDR
// for i in temp_list do
33498: LD_ADDR_VAR 0 8
33502: PUSH
33503: LD_VAR 0 9
33507: PUSH
33508: FOR_IN
33509: IFFALSE 33561
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33511: LD_ADDR_VAR 0 10
33515: PUSH
33516: LD_VAR 0 10
33520: PUSH
33521: LD_VAR 0 8
33525: PUSH
33526: LD_INT 1
33528: ARRAY
33529: PUSH
33530: LD_VAR 0 2
33534: PLUS
33535: PUSH
33536: LD_VAR 0 8
33540: PUSH
33541: LD_INT 2
33543: ARRAY
33544: PUSH
33545: LD_VAR 0 3
33549: PLUS
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: ADD
33558: ST_TO_ADDR
33559: GO 33508
33561: POP
33562: POP
// result = temp_list2 ;
33563: LD_ADDR_VAR 0 7
33567: PUSH
33568: LD_VAR 0 10
33572: ST_TO_ADDR
// end ;
33573: LD_VAR 0 7
33577: RET
// export function EnemyInRange ( unit , dist ) ; begin
33578: LD_INT 0
33580: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33581: LD_ADDR_VAR 0 3
33585: PUSH
33586: LD_VAR 0 1
33590: PPUSH
33591: CALL_OW 255
33595: PPUSH
33596: LD_VAR 0 1
33600: PPUSH
33601: CALL_OW 250
33605: PPUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: CALL_OW 251
33615: PPUSH
33616: LD_VAR 0 2
33620: PPUSH
33621: CALL 6835 0 4
33625: PUSH
33626: LD_INT 4
33628: ARRAY
33629: ST_TO_ADDR
// end ;
33630: LD_VAR 0 3
33634: RET
// export function PlayerSeeMe ( unit ) ; begin
33635: LD_INT 0
33637: PPUSH
// result := See ( your_side , unit ) ;
33638: LD_ADDR_VAR 0 2
33642: PUSH
33643: LD_OWVAR 2
33647: PPUSH
33648: LD_VAR 0 1
33652: PPUSH
33653: CALL_OW 292
33657: ST_TO_ADDR
// end ;
33658: LD_VAR 0 2
33662: RET
// export function ReverseDir ( unit ) ; begin
33663: LD_INT 0
33665: PPUSH
// if not unit then
33666: LD_VAR 0 1
33670: NOT
33671: IFFALSE 33675
// exit ;
33673: GO 33698
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33675: LD_ADDR_VAR 0 2
33679: PUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 254
33689: PUSH
33690: LD_INT 3
33692: PLUS
33693: PUSH
33694: LD_INT 6
33696: MOD
33697: ST_TO_ADDR
// end ;
33698: LD_VAR 0 2
33702: RET
// export function ReverseArray ( array ) ; var i ; begin
33703: LD_INT 0
33705: PPUSH
33706: PPUSH
// if not array then
33707: LD_VAR 0 1
33711: NOT
33712: IFFALSE 33716
// exit ;
33714: GO 33771
// result := [ ] ;
33716: LD_ADDR_VAR 0 2
33720: PUSH
33721: EMPTY
33722: ST_TO_ADDR
// for i := array downto 1 do
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: DOUBLE
33729: LD_VAR 0 1
33733: INC
33734: ST_TO_ADDR
33735: LD_INT 1
33737: PUSH
33738: FOR_DOWNTO
33739: IFFALSE 33769
// result := Join ( result , array [ i ] ) ;
33741: LD_ADDR_VAR 0 2
33745: PUSH
33746: LD_VAR 0 2
33750: PPUSH
33751: LD_VAR 0 1
33755: PUSH
33756: LD_VAR 0 3
33760: ARRAY
33761: PPUSH
33762: CALL 38613 0 2
33766: ST_TO_ADDR
33767: GO 33738
33769: POP
33770: POP
// end ;
33771: LD_VAR 0 2
33775: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33776: LD_INT 0
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
33783: PPUSH
// if not unit or not hexes then
33784: LD_VAR 0 1
33788: NOT
33789: IFTRUE 33798
33791: PUSH
33792: LD_VAR 0 2
33796: NOT
33797: OR
33798: IFFALSE 33802
// exit ;
33800: GO 33925
// dist := 9999 ;
33802: LD_ADDR_VAR 0 5
33806: PUSH
33807: LD_INT 9999
33809: ST_TO_ADDR
// for i = 1 to hexes do
33810: LD_ADDR_VAR 0 4
33814: PUSH
33815: DOUBLE
33816: LD_INT 1
33818: DEC
33819: ST_TO_ADDR
33820: LD_VAR 0 2
33824: PUSH
33825: FOR_TO
33826: IFFALSE 33913
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33828: LD_ADDR_VAR 0 6
33832: PUSH
33833: LD_VAR 0 1
33837: PPUSH
33838: LD_VAR 0 2
33842: PUSH
33843: LD_VAR 0 4
33847: ARRAY
33848: PUSH
33849: LD_INT 1
33851: ARRAY
33852: PPUSH
33853: LD_VAR 0 2
33857: PUSH
33858: LD_VAR 0 4
33862: ARRAY
33863: PUSH
33864: LD_INT 2
33866: ARRAY
33867: PPUSH
33868: CALL_OW 297
33872: ST_TO_ADDR
// if tdist < dist then
33873: LD_VAR 0 6
33877: PUSH
33878: LD_VAR 0 5
33882: LESS
33883: IFFALSE 33911
// begin hex := hexes [ i ] ;
33885: LD_ADDR_VAR 0 8
33889: PUSH
33890: LD_VAR 0 2
33894: PUSH
33895: LD_VAR 0 4
33899: ARRAY
33900: ST_TO_ADDR
// dist := tdist ;
33901: LD_ADDR_VAR 0 5
33905: PUSH
33906: LD_VAR 0 6
33910: ST_TO_ADDR
// end ; end ;
33911: GO 33825
33913: POP
33914: POP
// result := hex ;
33915: LD_ADDR_VAR 0 3
33919: PUSH
33920: LD_VAR 0 8
33924: ST_TO_ADDR
// end ;
33925: LD_VAR 0 3
33929: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33930: LD_INT 0
33932: PPUSH
33933: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33934: LD_VAR 0 1
33938: NOT
33939: IFTRUE 33978
33941: PUSH
33942: LD_VAR 0 1
33946: PUSH
33947: LD_INT 21
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 23
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PPUSH
33971: CALL_OW 69
33975: IN
33976: NOT
33977: OR
33978: IFFALSE 33982
// exit ;
33980: GO 34029
// for i = 1 to 3 do
33982: LD_ADDR_VAR 0 3
33986: PUSH
33987: DOUBLE
33988: LD_INT 1
33990: DEC
33991: ST_TO_ADDR
33992: LD_INT 3
33994: PUSH
33995: FOR_TO
33996: IFFALSE 34027
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 250
34007: PPUSH
34008: LD_VAR 0 1
34012: PPUSH
34013: CALL_OW 251
34017: PPUSH
34018: LD_INT 1
34020: PPUSH
34021: CALL_OW 453
34025: GO 33995
34027: POP
34028: POP
// end ;
34029: LD_VAR 0 2
34033: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34034: LD_INT 0
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
// if not unit or not enemy_unit then
34042: LD_VAR 0 1
34046: NOT
34047: IFTRUE 34056
34049: PUSH
34050: LD_VAR 0 2
34054: NOT
34055: OR
34056: IFFALSE 34060
// exit ;
34058: GO 34531
// if GetLives ( i ) < 250 then
34060: LD_VAR 0 4
34064: PPUSH
34065: CALL_OW 256
34069: PUSH
34070: LD_INT 250
34072: LESS
34073: IFFALSE 34086
// begin ComAutodestruct ( i ) ;
34075: LD_VAR 0 4
34079: PPUSH
34080: CALL 33930 0 1
// exit ;
34084: GO 34531
// end ; x := GetX ( enemy_unit ) ;
34086: LD_ADDR_VAR 0 7
34090: PUSH
34091: LD_VAR 0 2
34095: PPUSH
34096: CALL_OW 250
34100: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34101: LD_ADDR_VAR 0 8
34105: PUSH
34106: LD_VAR 0 2
34110: PPUSH
34111: CALL_OW 251
34115: ST_TO_ADDR
// if not x or not y then
34116: LD_VAR 0 7
34120: NOT
34121: IFTRUE 34130
34123: PUSH
34124: LD_VAR 0 8
34128: NOT
34129: OR
34130: IFFALSE 34134
// exit ;
34132: GO 34531
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34134: LD_ADDR_VAR 0 6
34138: PUSH
34139: LD_VAR 0 7
34143: PPUSH
34144: LD_INT 0
34146: PPUSH
34147: LD_INT 4
34149: PPUSH
34150: CALL_OW 272
34154: PUSH
34155: LD_VAR 0 8
34159: PPUSH
34160: LD_INT 0
34162: PPUSH
34163: LD_INT 4
34165: PPUSH
34166: CALL_OW 273
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_VAR 0 7
34179: PPUSH
34180: LD_INT 1
34182: PPUSH
34183: LD_INT 4
34185: PPUSH
34186: CALL_OW 272
34190: PUSH
34191: LD_VAR 0 8
34195: PPUSH
34196: LD_INT 1
34198: PPUSH
34199: LD_INT 4
34201: PPUSH
34202: CALL_OW 273
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_VAR 0 7
34215: PPUSH
34216: LD_INT 2
34218: PPUSH
34219: LD_INT 4
34221: PPUSH
34222: CALL_OW 272
34226: PUSH
34227: LD_VAR 0 8
34231: PPUSH
34232: LD_INT 2
34234: PPUSH
34235: LD_INT 4
34237: PPUSH
34238: CALL_OW 273
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_VAR 0 7
34251: PPUSH
34252: LD_INT 3
34254: PPUSH
34255: LD_INT 4
34257: PPUSH
34258: CALL_OW 272
34262: PUSH
34263: LD_VAR 0 8
34267: PPUSH
34268: LD_INT 3
34270: PPUSH
34271: LD_INT 4
34273: PPUSH
34274: CALL_OW 273
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_VAR 0 7
34287: PPUSH
34288: LD_INT 4
34290: PPUSH
34291: LD_INT 4
34293: PPUSH
34294: CALL_OW 272
34298: PUSH
34299: LD_VAR 0 8
34303: PPUSH
34304: LD_INT 4
34306: PPUSH
34307: LD_INT 4
34309: PPUSH
34310: CALL_OW 273
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_VAR 0 7
34323: PPUSH
34324: LD_INT 5
34326: PPUSH
34327: LD_INT 4
34329: PPUSH
34330: CALL_OW 272
34334: PUSH
34335: LD_VAR 0 8
34339: PPUSH
34340: LD_INT 5
34342: PPUSH
34343: LD_INT 4
34345: PPUSH
34346: CALL_OW 273
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
// for i = tmp downto 1 do
34363: LD_ADDR_VAR 0 4
34367: PUSH
34368: DOUBLE
34369: LD_VAR 0 6
34373: INC
34374: ST_TO_ADDR
34375: LD_INT 1
34377: PUSH
34378: FOR_DOWNTO
34379: IFFALSE 34482
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34381: LD_VAR 0 6
34385: PUSH
34386: LD_VAR 0 4
34390: ARRAY
34391: PUSH
34392: LD_INT 1
34394: ARRAY
34395: PPUSH
34396: LD_VAR 0 6
34400: PUSH
34401: LD_VAR 0 4
34405: ARRAY
34406: PUSH
34407: LD_INT 2
34409: ARRAY
34410: PPUSH
34411: CALL_OW 488
34415: NOT
34416: IFTRUE 34458
34418: PUSH
34419: LD_VAR 0 6
34423: PUSH
34424: LD_VAR 0 4
34428: ARRAY
34429: PUSH
34430: LD_INT 1
34432: ARRAY
34433: PPUSH
34434: LD_VAR 0 6
34438: PUSH
34439: LD_VAR 0 4
34443: ARRAY
34444: PUSH
34445: LD_INT 2
34447: ARRAY
34448: PPUSH
34449: CALL_OW 428
34453: PUSH
34454: LD_INT 0
34456: NONEQUAL
34457: OR
34458: IFFALSE 34480
// tmp := Delete ( tmp , i ) ;
34460: LD_ADDR_VAR 0 6
34464: PUSH
34465: LD_VAR 0 6
34469: PPUSH
34470: LD_VAR 0 4
34474: PPUSH
34475: CALL_OW 3
34479: ST_TO_ADDR
34480: GO 34378
34482: POP
34483: POP
// j := GetClosestHex ( unit , tmp ) ;
34484: LD_ADDR_VAR 0 5
34488: PUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: LD_VAR 0 6
34498: PPUSH
34499: CALL 33776 0 2
34503: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34504: LD_VAR 0 1
34508: PPUSH
34509: LD_VAR 0 5
34513: PUSH
34514: LD_INT 1
34516: ARRAY
34517: PPUSH
34518: LD_VAR 0 5
34522: PUSH
34523: LD_INT 2
34525: ARRAY
34526: PPUSH
34527: CALL_OW 111
// end ;
34531: LD_VAR 0 3
34535: RET
// export function PrepareApemanSoldier ( ) ; begin
34536: LD_INT 0
34538: PPUSH
// uc_nation := 0 ;
34539: LD_ADDR_OWVAR 21
34543: PUSH
34544: LD_INT 0
34546: ST_TO_ADDR
// hc_sex := sex_male ;
34547: LD_ADDR_OWVAR 27
34551: PUSH
34552: LD_INT 1
34554: ST_TO_ADDR
// hc_name :=  ;
34555: LD_ADDR_OWVAR 26
34559: PUSH
34560: LD_STRING 
34562: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34563: LD_ADDR_OWVAR 28
34567: PUSH
34568: LD_INT 15
34570: ST_TO_ADDR
// hc_gallery :=  ;
34571: LD_ADDR_OWVAR 33
34575: PUSH
34576: LD_STRING 
34578: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34579: LD_ADDR_OWVAR 31
34583: PUSH
34584: LD_INT 0
34586: PPUSH
34587: LD_INT 3
34589: PPUSH
34590: CALL_OW 12
34594: PUSH
34595: LD_INT 0
34597: PPUSH
34598: LD_INT 3
34600: PPUSH
34601: CALL_OW 12
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34618: LD_ADDR_OWVAR 29
34622: PUSH
34623: LD_INT 12
34625: PUSH
34626: LD_INT 12
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// end ;
34633: LD_VAR 0 1
34637: RET
// export function PrepareApemanEngineer ( ) ; begin
34638: LD_INT 0
34640: PPUSH
// uc_nation := 0 ;
34641: LD_ADDR_OWVAR 21
34645: PUSH
34646: LD_INT 0
34648: ST_TO_ADDR
// hc_sex := sex_male ;
34649: LD_ADDR_OWVAR 27
34653: PUSH
34654: LD_INT 1
34656: ST_TO_ADDR
// hc_name :=  ;
34657: LD_ADDR_OWVAR 26
34661: PUSH
34662: LD_STRING 
34664: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34665: LD_ADDR_OWVAR 28
34669: PUSH
34670: LD_INT 16
34672: ST_TO_ADDR
// hc_gallery :=  ;
34673: LD_ADDR_OWVAR 33
34677: PUSH
34678: LD_STRING 
34680: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34681: LD_ADDR_OWVAR 31
34685: PUSH
34686: LD_INT 0
34688: PPUSH
34689: LD_INT 3
34691: PPUSH
34692: CALL_OW 12
34696: PUSH
34697: LD_INT 0
34699: PPUSH
34700: LD_INT 3
34702: PPUSH
34703: CALL_OW 12
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 0
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34720: LD_ADDR_OWVAR 29
34724: PUSH
34725: LD_INT 12
34727: PUSH
34728: LD_INT 12
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: ST_TO_ADDR
// end ;
34735: LD_VAR 0 1
34739: RET
// export function PrepareApeman ( agressivity ) ; begin
34740: LD_INT 0
34742: PPUSH
// uc_side := 0 ;
34743: LD_ADDR_OWVAR 20
34747: PUSH
34748: LD_INT 0
34750: ST_TO_ADDR
// uc_nation := 0 ;
34751: LD_ADDR_OWVAR 21
34755: PUSH
34756: LD_INT 0
34758: ST_TO_ADDR
// hc_sex := sex_male ;
34759: LD_ADDR_OWVAR 27
34763: PUSH
34764: LD_INT 1
34766: ST_TO_ADDR
// hc_class := class_apeman ;
34767: LD_ADDR_OWVAR 28
34771: PUSH
34772: LD_INT 12
34774: ST_TO_ADDR
// hc_gallery :=  ;
34775: LD_ADDR_OWVAR 33
34779: PUSH
34780: LD_STRING 
34782: ST_TO_ADDR
// hc_name :=  ;
34783: LD_ADDR_OWVAR 26
34787: PUSH
34788: LD_STRING 
34790: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34791: LD_ADDR_OWVAR 29
34795: PUSH
34796: LD_INT 12
34798: PUSH
34799: LD_INT 12
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: ST_TO_ADDR
// if agressivity = 0 then
34806: LD_VAR 0 1
34810: PUSH
34811: LD_INT 0
34813: EQUAL
34814: IFFALSE 34826
// hc_agressivity := 0 else
34816: LD_ADDR_OWVAR 35
34820: PUSH
34821: LD_INT 0
34823: ST_TO_ADDR
34824: GO 34847
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34826: LD_ADDR_OWVAR 35
34830: PUSH
34831: LD_VAR 0 1
34835: NEG
34836: PPUSH
34837: LD_VAR 0 1
34841: PPUSH
34842: CALL_OW 12
34846: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34847: LD_ADDR_OWVAR 31
34851: PUSH
34852: LD_INT 0
34854: PPUSH
34855: LD_INT 3
34857: PPUSH
34858: CALL_OW 12
34862: PUSH
34863: LD_INT 0
34865: PPUSH
34866: LD_INT 3
34868: PPUSH
34869: CALL_OW 12
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// end ;
34886: LD_VAR 0 2
34890: RET
// export function PrepareTiger ( agressivity ) ; begin
34891: LD_INT 0
34893: PPUSH
// uc_side := 0 ;
34894: LD_ADDR_OWVAR 20
34898: PUSH
34899: LD_INT 0
34901: ST_TO_ADDR
// uc_nation := 0 ;
34902: LD_ADDR_OWVAR 21
34906: PUSH
34907: LD_INT 0
34909: ST_TO_ADDR
// InitHc ;
34910: CALL_OW 19
// hc_class := class_tiger ;
34914: LD_ADDR_OWVAR 28
34918: PUSH
34919: LD_INT 14
34921: ST_TO_ADDR
// hc_gallery :=  ;
34922: LD_ADDR_OWVAR 33
34926: PUSH
34927: LD_STRING 
34929: ST_TO_ADDR
// hc_name :=  ;
34930: LD_ADDR_OWVAR 26
34934: PUSH
34935: LD_STRING 
34937: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34938: LD_ADDR_OWVAR 35
34942: PUSH
34943: LD_VAR 0 1
34947: NEG
34948: PPUSH
34949: LD_VAR 0 1
34953: PPUSH
34954: CALL_OW 12
34958: ST_TO_ADDR
// end ;
34959: LD_VAR 0 2
34963: RET
// export function PrepareEnchidna ( ) ; begin
34964: LD_INT 0
34966: PPUSH
// uc_side := 0 ;
34967: LD_ADDR_OWVAR 20
34971: PUSH
34972: LD_INT 0
34974: ST_TO_ADDR
// uc_nation := 0 ;
34975: LD_ADDR_OWVAR 21
34979: PUSH
34980: LD_INT 0
34982: ST_TO_ADDR
// InitHc ;
34983: CALL_OW 19
// hc_class := class_baggie ;
34987: LD_ADDR_OWVAR 28
34991: PUSH
34992: LD_INT 13
34994: ST_TO_ADDR
// hc_gallery :=  ;
34995: LD_ADDR_OWVAR 33
34999: PUSH
35000: LD_STRING 
35002: ST_TO_ADDR
// hc_name :=  ;
35003: LD_ADDR_OWVAR 26
35007: PUSH
35008: LD_STRING 
35010: ST_TO_ADDR
// end ;
35011: LD_VAR 0 1
35015: RET
// export function PrepareFrog ( ) ; begin
35016: LD_INT 0
35018: PPUSH
// uc_side := 0 ;
35019: LD_ADDR_OWVAR 20
35023: PUSH
35024: LD_INT 0
35026: ST_TO_ADDR
// uc_nation := 0 ;
35027: LD_ADDR_OWVAR 21
35031: PUSH
35032: LD_INT 0
35034: ST_TO_ADDR
// InitHc ;
35035: CALL_OW 19
// hc_class := class_frog ;
35039: LD_ADDR_OWVAR 28
35043: PUSH
35044: LD_INT 19
35046: ST_TO_ADDR
// hc_gallery :=  ;
35047: LD_ADDR_OWVAR 33
35051: PUSH
35052: LD_STRING 
35054: ST_TO_ADDR
// hc_name :=  ;
35055: LD_ADDR_OWVAR 26
35059: PUSH
35060: LD_STRING 
35062: ST_TO_ADDR
// end ;
35063: LD_VAR 0 1
35067: RET
// export function PrepareFish ( ) ; begin
35068: LD_INT 0
35070: PPUSH
// uc_side := 0 ;
35071: LD_ADDR_OWVAR 20
35075: PUSH
35076: LD_INT 0
35078: ST_TO_ADDR
// uc_nation := 0 ;
35079: LD_ADDR_OWVAR 21
35083: PUSH
35084: LD_INT 0
35086: ST_TO_ADDR
// InitHc ;
35087: CALL_OW 19
// hc_class := class_fish ;
35091: LD_ADDR_OWVAR 28
35095: PUSH
35096: LD_INT 20
35098: ST_TO_ADDR
// hc_gallery :=  ;
35099: LD_ADDR_OWVAR 33
35103: PUSH
35104: LD_STRING 
35106: ST_TO_ADDR
// hc_name :=  ;
35107: LD_ADDR_OWVAR 26
35111: PUSH
35112: LD_STRING 
35114: ST_TO_ADDR
// end ;
35115: LD_VAR 0 1
35119: RET
// export function PrepareBird ( ) ; begin
35120: LD_INT 0
35122: PPUSH
// uc_side := 0 ;
35123: LD_ADDR_OWVAR 20
35127: PUSH
35128: LD_INT 0
35130: ST_TO_ADDR
// uc_nation := 0 ;
35131: LD_ADDR_OWVAR 21
35135: PUSH
35136: LD_INT 0
35138: ST_TO_ADDR
// InitHc ;
35139: CALL_OW 19
// hc_class := class_phororhacos ;
35143: LD_ADDR_OWVAR 28
35147: PUSH
35148: LD_INT 18
35150: ST_TO_ADDR
// hc_gallery :=  ;
35151: LD_ADDR_OWVAR 33
35155: PUSH
35156: LD_STRING 
35158: ST_TO_ADDR
// hc_name :=  ;
35159: LD_ADDR_OWVAR 26
35163: PUSH
35164: LD_STRING 
35166: ST_TO_ADDR
// end ;
35167: LD_VAR 0 1
35171: RET
// export function PrepareHorse ( ) ; begin
35172: LD_INT 0
35174: PPUSH
// uc_side := 0 ;
35175: LD_ADDR_OWVAR 20
35179: PUSH
35180: LD_INT 0
35182: ST_TO_ADDR
// uc_nation := 0 ;
35183: LD_ADDR_OWVAR 21
35187: PUSH
35188: LD_INT 0
35190: ST_TO_ADDR
// InitHc ;
35191: CALL_OW 19
// hc_class := class_horse ;
35195: LD_ADDR_OWVAR 28
35199: PUSH
35200: LD_INT 21
35202: ST_TO_ADDR
// hc_gallery :=  ;
35203: LD_ADDR_OWVAR 33
35207: PUSH
35208: LD_STRING 
35210: ST_TO_ADDR
// hc_name :=  ;
35211: LD_ADDR_OWVAR 26
35215: PUSH
35216: LD_STRING 
35218: ST_TO_ADDR
// end ;
35219: LD_VAR 0 1
35223: RET
// export function PrepareMastodont ( ) ; begin
35224: LD_INT 0
35226: PPUSH
// uc_side := 0 ;
35227: LD_ADDR_OWVAR 20
35231: PUSH
35232: LD_INT 0
35234: ST_TO_ADDR
// uc_nation := 0 ;
35235: LD_ADDR_OWVAR 21
35239: PUSH
35240: LD_INT 0
35242: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35243: LD_ADDR_OWVAR 37
35247: PUSH
35248: LD_INT 31
35250: ST_TO_ADDR
// vc_control := control_rider ;
35251: LD_ADDR_OWVAR 38
35255: PUSH
35256: LD_INT 4
35258: ST_TO_ADDR
// end ;
35259: LD_VAR 0 1
35263: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35264: LD_INT 0
35266: PPUSH
35267: PPUSH
35268: PPUSH
// uc_side = 0 ;
35269: LD_ADDR_OWVAR 20
35273: PUSH
35274: LD_INT 0
35276: ST_TO_ADDR
// uc_nation = 0 ;
35277: LD_ADDR_OWVAR 21
35281: PUSH
35282: LD_INT 0
35284: ST_TO_ADDR
// InitHc_All ( ) ;
35285: CALL_OW 584
// InitVc ;
35289: CALL_OW 20
// if mastodonts then
35293: LD_VAR 0 6
35297: IFFALSE 35364
// for i = 1 to mastodonts do
35299: LD_ADDR_VAR 0 11
35303: PUSH
35304: DOUBLE
35305: LD_INT 1
35307: DEC
35308: ST_TO_ADDR
35309: LD_VAR 0 6
35313: PUSH
35314: FOR_TO
35315: IFFALSE 35362
// begin vc_chassis := 31 ;
35317: LD_ADDR_OWVAR 37
35321: PUSH
35322: LD_INT 31
35324: ST_TO_ADDR
// vc_control := control_rider ;
35325: LD_ADDR_OWVAR 38
35329: PUSH
35330: LD_INT 4
35332: ST_TO_ADDR
// animal := CreateVehicle ;
35333: LD_ADDR_VAR 0 12
35337: PUSH
35338: CALL_OW 45
35342: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35343: LD_VAR 0 12
35347: PPUSH
35348: LD_VAR 0 8
35352: PPUSH
35353: LD_INT 0
35355: PPUSH
35356: CALL 37506 0 3
// end ;
35360: GO 35314
35362: POP
35363: POP
// if horses then
35364: LD_VAR 0 5
35368: IFFALSE 35435
// for i = 1 to horses do
35370: LD_ADDR_VAR 0 11
35374: PUSH
35375: DOUBLE
35376: LD_INT 1
35378: DEC
35379: ST_TO_ADDR
35380: LD_VAR 0 5
35384: PUSH
35385: FOR_TO
35386: IFFALSE 35433
// begin hc_class := 21 ;
35388: LD_ADDR_OWVAR 28
35392: PUSH
35393: LD_INT 21
35395: ST_TO_ADDR
// hc_gallery :=  ;
35396: LD_ADDR_OWVAR 33
35400: PUSH
35401: LD_STRING 
35403: ST_TO_ADDR
// animal := CreateHuman ;
35404: LD_ADDR_VAR 0 12
35408: PUSH
35409: CALL_OW 44
35413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35414: LD_VAR 0 12
35418: PPUSH
35419: LD_VAR 0 8
35423: PPUSH
35424: LD_INT 0
35426: PPUSH
35427: CALL 37506 0 3
// end ;
35431: GO 35385
35433: POP
35434: POP
// if birds then
35435: LD_VAR 0 1
35439: IFFALSE 35506
// for i = 1 to birds do
35441: LD_ADDR_VAR 0 11
35445: PUSH
35446: DOUBLE
35447: LD_INT 1
35449: DEC
35450: ST_TO_ADDR
35451: LD_VAR 0 1
35455: PUSH
35456: FOR_TO
35457: IFFALSE 35504
// begin hc_class := 18 ;
35459: LD_ADDR_OWVAR 28
35463: PUSH
35464: LD_INT 18
35466: ST_TO_ADDR
// hc_gallery =  ;
35467: LD_ADDR_OWVAR 33
35471: PUSH
35472: LD_STRING 
35474: ST_TO_ADDR
// animal := CreateHuman ;
35475: LD_ADDR_VAR 0 12
35479: PUSH
35480: CALL_OW 44
35484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35485: LD_VAR 0 12
35489: PPUSH
35490: LD_VAR 0 8
35494: PPUSH
35495: LD_INT 0
35497: PPUSH
35498: CALL 37506 0 3
// end ;
35502: GO 35456
35504: POP
35505: POP
// if tigers then
35506: LD_VAR 0 2
35510: IFFALSE 35594
// for i = 1 to tigers do
35512: LD_ADDR_VAR 0 11
35516: PUSH
35517: DOUBLE
35518: LD_INT 1
35520: DEC
35521: ST_TO_ADDR
35522: LD_VAR 0 2
35526: PUSH
35527: FOR_TO
35528: IFFALSE 35592
// begin hc_class = class_tiger ;
35530: LD_ADDR_OWVAR 28
35534: PUSH
35535: LD_INT 14
35537: ST_TO_ADDR
// hc_gallery =  ;
35538: LD_ADDR_OWVAR 33
35542: PUSH
35543: LD_STRING 
35545: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35546: LD_ADDR_OWVAR 35
35550: PUSH
35551: LD_INT 7
35553: NEG
35554: PPUSH
35555: LD_INT 7
35557: PPUSH
35558: CALL_OW 12
35562: ST_TO_ADDR
// animal := CreateHuman ;
35563: LD_ADDR_VAR 0 12
35567: PUSH
35568: CALL_OW 44
35572: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35573: LD_VAR 0 12
35577: PPUSH
35578: LD_VAR 0 8
35582: PPUSH
35583: LD_INT 0
35585: PPUSH
35586: CALL 37506 0 3
// end ;
35590: GO 35527
35592: POP
35593: POP
// if apemans then
35594: LD_VAR 0 3
35598: IFFALSE 35721
// for i = 1 to apemans do
35600: LD_ADDR_VAR 0 11
35604: PUSH
35605: DOUBLE
35606: LD_INT 1
35608: DEC
35609: ST_TO_ADDR
35610: LD_VAR 0 3
35614: PUSH
35615: FOR_TO
35616: IFFALSE 35719
// begin hc_class = class_apeman ;
35618: LD_ADDR_OWVAR 28
35622: PUSH
35623: LD_INT 12
35625: ST_TO_ADDR
// hc_gallery =  ;
35626: LD_ADDR_OWVAR 33
35630: PUSH
35631: LD_STRING 
35633: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35634: LD_ADDR_OWVAR 35
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PPUSH
35643: LD_INT 2
35645: PPUSH
35646: CALL_OW 12
35650: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35651: LD_ADDR_OWVAR 31
35655: PUSH
35656: LD_INT 1
35658: PPUSH
35659: LD_INT 3
35661: PPUSH
35662: CALL_OW 12
35666: PUSH
35667: LD_INT 1
35669: PPUSH
35670: LD_INT 3
35672: PPUSH
35673: CALL_OW 12
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// animal := CreateHuman ;
35690: LD_ADDR_VAR 0 12
35694: PUSH
35695: CALL_OW 44
35699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35700: LD_VAR 0 12
35704: PPUSH
35705: LD_VAR 0 8
35709: PPUSH
35710: LD_INT 0
35712: PPUSH
35713: CALL 37506 0 3
// end ;
35717: GO 35615
35719: POP
35720: POP
// if enchidnas then
35721: LD_VAR 0 4
35725: IFFALSE 35792
// for i = 1 to enchidnas do
35727: LD_ADDR_VAR 0 11
35731: PUSH
35732: DOUBLE
35733: LD_INT 1
35735: DEC
35736: ST_TO_ADDR
35737: LD_VAR 0 4
35741: PUSH
35742: FOR_TO
35743: IFFALSE 35790
// begin hc_class = 13 ;
35745: LD_ADDR_OWVAR 28
35749: PUSH
35750: LD_INT 13
35752: ST_TO_ADDR
// hc_gallery =  ;
35753: LD_ADDR_OWVAR 33
35757: PUSH
35758: LD_STRING 
35760: ST_TO_ADDR
// animal := CreateHuman ;
35761: LD_ADDR_VAR 0 12
35765: PUSH
35766: CALL_OW 44
35770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35771: LD_VAR 0 12
35775: PPUSH
35776: LD_VAR 0 8
35780: PPUSH
35781: LD_INT 0
35783: PPUSH
35784: CALL 37506 0 3
// end ;
35788: GO 35742
35790: POP
35791: POP
// if fishes then
35792: LD_VAR 0 7
35796: IFFALSE 35863
// for i = 1 to fishes do
35798: LD_ADDR_VAR 0 11
35802: PUSH
35803: DOUBLE
35804: LD_INT 1
35806: DEC
35807: ST_TO_ADDR
35808: LD_VAR 0 7
35812: PUSH
35813: FOR_TO
35814: IFFALSE 35861
// begin hc_class = 20 ;
35816: LD_ADDR_OWVAR 28
35820: PUSH
35821: LD_INT 20
35823: ST_TO_ADDR
// hc_gallery =  ;
35824: LD_ADDR_OWVAR 33
35828: PUSH
35829: LD_STRING 
35831: ST_TO_ADDR
// animal := CreateHuman ;
35832: LD_ADDR_VAR 0 12
35836: PUSH
35837: CALL_OW 44
35841: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35842: LD_VAR 0 12
35846: PPUSH
35847: LD_VAR 0 9
35851: PPUSH
35852: LD_INT 0
35854: PPUSH
35855: CALL 37506 0 3
// end ;
35859: GO 35813
35861: POP
35862: POP
// end ;
35863: LD_VAR 0 10
35867: RET
// export function WantHeal ( sci , unit ) ; begin
35868: LD_INT 0
35870: PPUSH
// if GetTaskList ( sci ) > 0 then
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 437
35880: PUSH
35881: LD_INT 0
35883: GREATER
35884: IFFALSE 35956
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35886: LD_VAR 0 1
35890: PPUSH
35891: CALL_OW 437
35895: PUSH
35896: LD_INT 1
35898: ARRAY
35899: PUSH
35900: LD_INT 1
35902: ARRAY
35903: PUSH
35904: LD_STRING l
35906: EQUAL
35907: IFFALSE 35934
35909: PUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 437
35919: PUSH
35920: LD_INT 1
35922: ARRAY
35923: PUSH
35924: LD_INT 4
35926: ARRAY
35927: PUSH
35928: LD_VAR 0 2
35932: EQUAL
35933: AND
35934: IFFALSE 35946
// result := true else
35936: LD_ADDR_VAR 0 3
35940: PUSH
35941: LD_INT 1
35943: ST_TO_ADDR
35944: GO 35954
// result := false ;
35946: LD_ADDR_VAR 0 3
35950: PUSH
35951: LD_INT 0
35953: ST_TO_ADDR
// end else
35954: GO 35964
// result := false ;
35956: LD_ADDR_VAR 0 3
35960: PUSH
35961: LD_INT 0
35963: ST_TO_ADDR
// end ;
35964: LD_VAR 0 3
35968: RET
// export function HealTarget ( sci ) ; begin
35969: LD_INT 0
35971: PPUSH
// if not sci then
35972: LD_VAR 0 1
35976: NOT
35977: IFFALSE 35981
// exit ;
35979: GO 36046
// result := 0 ;
35981: LD_ADDR_VAR 0 2
35985: PUSH
35986: LD_INT 0
35988: ST_TO_ADDR
// if GetTaskList ( sci ) then
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 437
35998: IFFALSE 36046
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36000: LD_VAR 0 1
36004: PPUSH
36005: CALL_OW 437
36009: PUSH
36010: LD_INT 1
36012: ARRAY
36013: PUSH
36014: LD_INT 1
36016: ARRAY
36017: PUSH
36018: LD_STRING l
36020: EQUAL
36021: IFFALSE 36046
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36023: LD_ADDR_VAR 0 2
36027: PUSH
36028: LD_VAR 0 1
36032: PPUSH
36033: CALL_OW 437
36037: PUSH
36038: LD_INT 1
36040: ARRAY
36041: PUSH
36042: LD_INT 4
36044: ARRAY
36045: ST_TO_ADDR
// end ;
36046: LD_VAR 0 2
36050: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36051: LD_INT 0
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
// if not base_units then
36057: LD_VAR 0 1
36061: NOT
36062: IFFALSE 36066
// exit ;
36064: GO 36153
// result := false ;
36066: LD_ADDR_VAR 0 2
36070: PUSH
36071: LD_INT 0
36073: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36074: LD_ADDR_VAR 0 5
36078: PUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: LD_INT 21
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PPUSH
36094: CALL_OW 72
36098: ST_TO_ADDR
// if not tmp then
36099: LD_VAR 0 5
36103: NOT
36104: IFFALSE 36108
// exit ;
36106: GO 36153
// for i in tmp do
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_VAR 0 5
36117: PUSH
36118: FOR_IN
36119: IFFALSE 36151
// begin result := EnemyInRange ( i , 22 ) ;
36121: LD_ADDR_VAR 0 2
36125: PUSH
36126: LD_VAR 0 3
36130: PPUSH
36131: LD_INT 22
36133: PPUSH
36134: CALL 33578 0 2
36138: ST_TO_ADDR
// if result then
36139: LD_VAR 0 2
36143: IFFALSE 36149
// exit ;
36145: POP
36146: POP
36147: GO 36153
// end ;
36149: GO 36118
36151: POP
36152: POP
// end ;
36153: LD_VAR 0 2
36157: RET
// export function FilterByTag ( units , tag ) ; begin
36158: LD_INT 0
36160: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36161: LD_ADDR_VAR 0 3
36165: PUSH
36166: LD_VAR 0 1
36170: PPUSH
36171: LD_INT 120
36173: PUSH
36174: LD_VAR 0 2
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PPUSH
36183: CALL_OW 72
36187: ST_TO_ADDR
// end ;
36188: LD_VAR 0 3
36192: RET
// export function IsDriver ( un ) ; begin
36193: LD_INT 0
36195: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36196: LD_ADDR_VAR 0 2
36200: PUSH
36201: LD_VAR 0 1
36205: PUSH
36206: LD_INT 55
36208: PUSH
36209: EMPTY
36210: LIST
36211: PPUSH
36212: CALL_OW 69
36216: IN
36217: ST_TO_ADDR
// end ;
36218: LD_VAR 0 2
36222: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36223: LD_INT 0
36225: PPUSH
36226: PPUSH
// list := [ ] ;
36227: LD_ADDR_VAR 0 5
36231: PUSH
36232: EMPTY
36233: ST_TO_ADDR
// case d of 0 :
36234: LD_VAR 0 3
36238: PUSH
36239: LD_INT 0
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36380
36247: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36248: LD_ADDR_VAR 0 5
36252: PUSH
36253: LD_VAR 0 1
36257: PUSH
36258: LD_INT 4
36260: MINUS
36261: PUSH
36262: LD_VAR 0 2
36266: PUSH
36267: LD_INT 4
36269: MINUS
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: PUSH
36279: LD_VAR 0 1
36283: PUSH
36284: LD_INT 3
36286: MINUS
36287: PUSH
36288: LD_VAR 0 2
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: PUSH
36301: LD_VAR 0 1
36305: PUSH
36306: LD_INT 4
36308: PLUS
36309: PUSH
36310: LD_VAR 0 2
36314: PUSH
36315: LD_INT 4
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: PUSH
36323: LD_VAR 0 1
36327: PUSH
36328: LD_INT 3
36330: PLUS
36331: PUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_INT 3
36339: PLUS
36340: PUSH
36341: LD_INT 5
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: PUSH
36349: LD_VAR 0 1
36353: PUSH
36354: LD_VAR 0 2
36358: PUSH
36359: LD_INT 4
36361: PLUS
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// end ; 1 :
36378: GO 37078
36380: LD_INT 1
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36521
36388: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36389: LD_ADDR_VAR 0 5
36393: PUSH
36394: LD_VAR 0 1
36398: PUSH
36399: LD_VAR 0 2
36403: PUSH
36404: LD_INT 4
36406: MINUS
36407: PUSH
36408: LD_INT 3
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: PUSH
36416: LD_VAR 0 1
36420: PUSH
36421: LD_INT 3
36423: MINUS
36424: PUSH
36425: LD_VAR 0 2
36429: PUSH
36430: LD_INT 3
36432: MINUS
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: PUSH
36442: LD_VAR 0 1
36446: PUSH
36447: LD_INT 4
36449: MINUS
36450: PUSH
36451: LD_VAR 0 2
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: LD_VAR 0 1
36468: PUSH
36469: LD_VAR 0 2
36473: PUSH
36474: LD_INT 3
36476: PLUS
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: PUSH
36486: LD_VAR 0 1
36490: PUSH
36491: LD_INT 4
36493: PLUS
36494: PUSH
36495: LD_VAR 0 2
36499: PUSH
36500: LD_INT 4
36502: PLUS
36503: PUSH
36504: LD_INT 5
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: ST_TO_ADDR
// end ; 2 :
36519: GO 37078
36521: LD_INT 2
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36658
36529: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_VAR 0 1
36539: PUSH
36540: LD_VAR 0 2
36544: PUSH
36545: LD_INT 3
36547: MINUS
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: PUSH
36557: LD_VAR 0 1
36561: PUSH
36562: LD_INT 4
36564: PLUS
36565: PUSH
36566: LD_VAR 0 2
36570: PUSH
36571: LD_INT 4
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: LIST
36578: PUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_VAR 0 2
36588: PUSH
36589: LD_INT 4
36591: PLUS
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: PUSH
36601: LD_VAR 0 1
36605: PUSH
36606: LD_INT 3
36608: MINUS
36609: PUSH
36610: LD_VAR 0 2
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: PUSH
36623: LD_VAR 0 1
36627: PUSH
36628: LD_INT 4
36630: MINUS
36631: PUSH
36632: LD_VAR 0 2
36636: PUSH
36637: LD_INT 4
36639: MINUS
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// end ; 3 :
36656: GO 37078
36658: LD_INT 3
36660: DOUBLE
36661: EQUAL
36662: IFTRUE 36666
36664: GO 36799
36666: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36667: LD_ADDR_VAR 0 5
36671: PUSH
36672: LD_VAR 0 1
36676: PUSH
36677: LD_INT 3
36679: PLUS
36680: PUSH
36681: LD_VAR 0 2
36685: PUSH
36686: LD_INT 4
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: PUSH
36694: LD_VAR 0 1
36698: PUSH
36699: LD_INT 4
36701: PLUS
36702: PUSH
36703: LD_VAR 0 2
36707: PUSH
36708: LD_INT 4
36710: PLUS
36711: PUSH
36712: LD_INT 5
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: PUSH
36720: LD_VAR 0 1
36724: PUSH
36725: LD_INT 4
36727: MINUS
36728: PUSH
36729: LD_VAR 0 2
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: PUSH
36742: LD_VAR 0 1
36746: PUSH
36747: LD_VAR 0 2
36751: PUSH
36752: LD_INT 4
36754: MINUS
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: PUSH
36764: LD_VAR 0 1
36768: PUSH
36769: LD_INT 3
36771: MINUS
36772: PUSH
36773: LD_VAR 0 2
36777: PUSH
36778: LD_INT 3
36780: MINUS
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// end ; 4 :
36797: GO 37078
36799: LD_INT 4
36801: DOUBLE
36802: EQUAL
36803: IFTRUE 36807
36805: GO 36940
36807: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36808: LD_ADDR_VAR 0 5
36812: PUSH
36813: LD_VAR 0 1
36817: PUSH
36818: LD_VAR 0 2
36822: PUSH
36823: LD_INT 4
36825: PLUS
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: PUSH
36835: LD_VAR 0 1
36839: PUSH
36840: LD_INT 3
36842: PLUS
36843: PUSH
36844: LD_VAR 0 2
36848: PUSH
36849: LD_INT 3
36851: PLUS
36852: PUSH
36853: LD_INT 5
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: PUSH
36861: LD_VAR 0 1
36865: PUSH
36866: LD_INT 4
36868: PLUS
36869: PUSH
36870: LD_VAR 0 2
36874: PUSH
36875: LD_INT 4
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: PUSH
36883: LD_VAR 0 1
36887: PUSH
36888: LD_VAR 0 2
36892: PUSH
36893: LD_INT 3
36895: MINUS
36896: PUSH
36897: LD_INT 3
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: PUSH
36905: LD_VAR 0 1
36909: PUSH
36910: LD_INT 4
36912: MINUS
36913: PUSH
36914: LD_VAR 0 2
36918: PUSH
36919: LD_INT 4
36921: MINUS
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: ST_TO_ADDR
// end ; 5 :
36938: GO 37078
36940: LD_INT 5
36942: DOUBLE
36943: EQUAL
36944: IFTRUE 36948
36946: GO 37077
36948: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36949: LD_ADDR_VAR 0 5
36953: PUSH
36954: LD_VAR 0 1
36958: PUSH
36959: LD_INT 4
36961: MINUS
36962: PUSH
36963: LD_VAR 0 2
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: PUSH
36976: LD_VAR 0 1
36980: PUSH
36981: LD_VAR 0 2
36985: PUSH
36986: LD_INT 4
36988: MINUS
36989: PUSH
36990: LD_INT 3
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: PUSH
36998: LD_VAR 0 1
37002: PUSH
37003: LD_INT 4
37005: PLUS
37006: PUSH
37007: LD_VAR 0 2
37011: PUSH
37012: LD_INT 4
37014: PLUS
37015: PUSH
37016: LD_INT 5
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: LIST
37023: PUSH
37024: LD_VAR 0 1
37028: PUSH
37029: LD_INT 3
37031: PLUS
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_INT 4
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: PUSH
37046: LD_VAR 0 1
37050: PUSH
37051: LD_VAR 0 2
37055: PUSH
37056: LD_INT 3
37058: PLUS
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: LIST
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
// end ; end ;
37075: GO 37078
37077: POP
// result := list ;
37078: LD_ADDR_VAR 0 4
37082: PUSH
37083: LD_VAR 0 5
37087: ST_TO_ADDR
// end ;
37088: LD_VAR 0 4
37092: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37093: LD_INT 0
37095: PPUSH
37096: PPUSH
37097: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37098: LD_VAR 0 1
37102: NOT
37103: IFTRUE 37131
37105: PUSH
37106: LD_VAR 0 2
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: LD_INT 4
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: IN
37129: NOT
37130: OR
37131: IFFALSE 37135
// exit ;
37133: GO 37218
// tmp := [ ] ;
37135: LD_ADDR_VAR 0 5
37139: PUSH
37140: EMPTY
37141: ST_TO_ADDR
// for i in units do
37142: LD_ADDR_VAR 0 4
37146: PUSH
37147: LD_VAR 0 1
37151: PUSH
37152: FOR_IN
37153: IFFALSE 37187
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37155: LD_ADDR_VAR 0 5
37159: PUSH
37160: LD_VAR 0 5
37164: PPUSH
37165: LD_VAR 0 4
37169: PPUSH
37170: LD_VAR 0 2
37174: PPUSH
37175: CALL_OW 259
37179: PPUSH
37180: CALL 38613 0 2
37184: ST_TO_ADDR
37185: GO 37152
37187: POP
37188: POP
// if not tmp then
37189: LD_VAR 0 5
37193: NOT
37194: IFFALSE 37198
// exit ;
37196: GO 37218
// result := SortListByListDesc ( units , tmp ) ;
37198: LD_ADDR_VAR 0 3
37202: PUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: LD_VAR 0 5
37212: PPUSH
37213: CALL_OW 77
37217: ST_TO_ADDR
// end ;
37218: LD_VAR 0 3
37222: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37223: LD_INT 0
37225: PPUSH
37226: PPUSH
37227: PPUSH
// result := false ;
37228: LD_ADDR_VAR 0 3
37232: PUSH
37233: LD_INT 0
37235: ST_TO_ADDR
// if not building then
37236: LD_VAR 0 2
37240: NOT
37241: IFFALSE 37245
// exit ;
37243: GO 37389
// x := GetX ( building ) ;
37245: LD_ADDR_VAR 0 4
37249: PUSH
37250: LD_VAR 0 2
37254: PPUSH
37255: CALL_OW 250
37259: ST_TO_ADDR
// y := GetY ( building ) ;
37260: LD_ADDR_VAR 0 5
37264: PUSH
37265: LD_VAR 0 2
37269: PPUSH
37270: CALL_OW 251
37274: ST_TO_ADDR
// if not x or not y then
37275: LD_VAR 0 4
37279: NOT
37280: IFTRUE 37289
37282: PUSH
37283: LD_VAR 0 5
37287: NOT
37288: OR
37289: IFFALSE 37293
// exit ;
37291: GO 37389
// if GetTaskList ( unit ) then
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 437
37302: IFFALSE 37389
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37304: LD_STRING e
37306: PUSH
37307: LD_VAR 0 1
37311: PPUSH
37312: CALL_OW 437
37316: PUSH
37317: LD_INT 1
37319: ARRAY
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: EQUAL
37325: IFFALSE 37352
37327: PUSH
37328: LD_VAR 0 4
37332: PUSH
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 437
37342: PUSH
37343: LD_INT 1
37345: ARRAY
37346: PUSH
37347: LD_INT 2
37349: ARRAY
37350: EQUAL
37351: AND
37352: IFFALSE 37379
37354: PUSH
37355: LD_VAR 0 5
37359: PUSH
37360: LD_VAR 0 1
37364: PPUSH
37365: CALL_OW 437
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PUSH
37374: LD_INT 3
37376: ARRAY
37377: EQUAL
37378: AND
37379: IFFALSE 37389
// result := true end ;
37381: LD_ADDR_VAR 0 3
37385: PUSH
37386: LD_INT 1
37388: ST_TO_ADDR
// end ;
37389: LD_VAR 0 3
37393: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37394: LD_INT 0
37396: PPUSH
// result := false ;
37397: LD_ADDR_VAR 0 4
37401: PUSH
37402: LD_INT 0
37404: ST_TO_ADDR
// if GetTaskList ( unit ) then
37405: LD_VAR 0 1
37409: PPUSH
37410: CALL_OW 437
37414: IFFALSE 37501
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37416: LD_STRING M
37418: PUSH
37419: LD_VAR 0 1
37423: PPUSH
37424: CALL_OW 437
37428: PUSH
37429: LD_INT 1
37431: ARRAY
37432: PUSH
37433: LD_INT 1
37435: ARRAY
37436: EQUAL
37437: IFFALSE 37464
37439: PUSH
37440: LD_VAR 0 2
37444: PUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 437
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: PUSH
37459: LD_INT 2
37461: ARRAY
37462: EQUAL
37463: AND
37464: IFFALSE 37491
37466: PUSH
37467: LD_VAR 0 3
37471: PUSH
37472: LD_VAR 0 1
37476: PPUSH
37477: CALL_OW 437
37481: PUSH
37482: LD_INT 1
37484: ARRAY
37485: PUSH
37486: LD_INT 3
37488: ARRAY
37489: EQUAL
37490: AND
37491: IFFALSE 37501
// result := true ;
37493: LD_ADDR_VAR 0 4
37497: PUSH
37498: LD_INT 1
37500: ST_TO_ADDR
// end ; end ;
37501: LD_VAR 0 4
37505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37506: LD_INT 0
37508: PPUSH
37509: PPUSH
37510: PPUSH
37511: PPUSH
// if not unit or not area then
37512: LD_VAR 0 1
37516: NOT
37517: IFTRUE 37526
37519: PUSH
37520: LD_VAR 0 2
37524: NOT
37525: OR
37526: IFFALSE 37530
// exit ;
37528: GO 37706
// tmp := AreaToList ( area , i ) ;
37530: LD_ADDR_VAR 0 6
37534: PUSH
37535: LD_VAR 0 2
37539: PPUSH
37540: LD_VAR 0 5
37544: PPUSH
37545: CALL_OW 517
37549: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37550: LD_ADDR_VAR 0 5
37554: PUSH
37555: DOUBLE
37556: LD_INT 1
37558: DEC
37559: ST_TO_ADDR
37560: LD_VAR 0 6
37564: PUSH
37565: LD_INT 1
37567: ARRAY
37568: PUSH
37569: FOR_TO
37570: IFFALSE 37704
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37572: LD_ADDR_VAR 0 7
37576: PUSH
37577: LD_VAR 0 6
37581: PUSH
37582: LD_INT 1
37584: ARRAY
37585: PUSH
37586: LD_VAR 0 5
37590: ARRAY
37591: PUSH
37592: LD_VAR 0 6
37596: PUSH
37597: LD_INT 2
37599: ARRAY
37600: PUSH
37601: LD_VAR 0 5
37605: ARRAY
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37611: LD_INT 92
37613: PUSH
37614: LD_VAR 0 7
37618: PUSH
37619: LD_INT 1
37621: ARRAY
37622: PUSH
37623: LD_VAR 0 7
37627: PUSH
37628: LD_INT 2
37630: ARRAY
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: PPUSH
37641: CALL_OW 69
37645: PUSH
37646: LD_INT 0
37648: EQUAL
37649: IFFALSE 37702
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37651: LD_VAR 0 1
37655: PPUSH
37656: LD_VAR 0 7
37660: PUSH
37661: LD_INT 1
37663: ARRAY
37664: PPUSH
37665: LD_VAR 0 7
37669: PUSH
37670: LD_INT 2
37672: ARRAY
37673: PPUSH
37674: LD_VAR 0 3
37678: PPUSH
37679: CALL_OW 48
// result := IsPlaced ( unit ) ;
37683: LD_ADDR_VAR 0 4
37687: PUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL_OW 305
37697: ST_TO_ADDR
// exit ;
37698: POP
37699: POP
37700: GO 37706
// end ; end ;
37702: GO 37569
37704: POP
37705: POP
// end ;
37706: LD_VAR 0 4
37710: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37711: LD_INT 0
37713: PPUSH
37714: PPUSH
37715: PPUSH
// if not side or side > 8 then
37716: LD_VAR 0 1
37720: NOT
37721: IFTRUE 37733
37723: PUSH
37724: LD_VAR 0 1
37728: PUSH
37729: LD_INT 8
37731: GREATER
37732: OR
37733: IFFALSE 37737
// exit ;
37735: GO 37924
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37737: LD_ADDR_VAR 0 4
37741: PUSH
37742: LD_INT 22
37744: PUSH
37745: LD_VAR 0 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 21
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PPUSH
37768: CALL_OW 69
37772: ST_TO_ADDR
// if not tmp then
37773: LD_VAR 0 4
37777: NOT
37778: IFFALSE 37782
// exit ;
37780: GO 37924
// enable_addtolog := true ;
37782: LD_ADDR_OWVAR 81
37786: PUSH
37787: LD_INT 1
37789: ST_TO_ADDR
// AddToLog ( [ ) ;
37790: LD_STRING [
37792: PPUSH
37793: CALL_OW 561
// for i in tmp do
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: LD_VAR 0 4
37806: PUSH
37807: FOR_IN
37808: IFFALSE 37915
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37810: LD_STRING [
37812: PUSH
37813: LD_VAR 0 3
37817: PPUSH
37818: CALL_OW 266
37822: STR
37823: PUSH
37824: LD_STRING , 
37826: STR
37827: PUSH
37828: LD_VAR 0 3
37832: PPUSH
37833: CALL_OW 250
37837: STR
37838: PUSH
37839: LD_STRING , 
37841: STR
37842: PUSH
37843: LD_VAR 0 3
37847: PPUSH
37848: CALL_OW 251
37852: STR
37853: PUSH
37854: LD_STRING , 
37856: STR
37857: PUSH
37858: LD_VAR 0 3
37862: PPUSH
37863: CALL_OW 254
37867: STR
37868: PUSH
37869: LD_STRING , 
37871: STR
37872: PUSH
37873: LD_VAR 0 3
37877: PPUSH
37878: LD_INT 1
37880: PPUSH
37881: CALL_OW 268
37885: STR
37886: PUSH
37887: LD_STRING , 
37889: STR
37890: PUSH
37891: LD_VAR 0 3
37895: PPUSH
37896: LD_INT 2
37898: PPUSH
37899: CALL_OW 268
37903: STR
37904: PUSH
37905: LD_STRING ],
37907: STR
37908: PPUSH
37909: CALL_OW 561
// end ;
37913: GO 37807
37915: POP
37916: POP
// AddToLog ( ]; ) ;
37917: LD_STRING ];
37919: PPUSH
37920: CALL_OW 561
// end ;
37924: LD_VAR 0 2
37928: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37929: LD_INT 0
37931: PPUSH
37932: PPUSH
37933: PPUSH
37934: PPUSH
37935: PPUSH
// if not area or not rate or not max then
37936: LD_VAR 0 1
37940: NOT
37941: IFTRUE 37950
37943: PUSH
37944: LD_VAR 0 2
37948: NOT
37949: OR
37950: IFTRUE 37959
37952: PUSH
37953: LD_VAR 0 4
37957: NOT
37958: OR
37959: IFFALSE 37963
// exit ;
37961: GO 38152
// while 1 do
37963: LD_INT 1
37965: IFFALSE 38152
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37967: LD_ADDR_VAR 0 9
37971: PUSH
37972: LD_VAR 0 1
37976: PPUSH
37977: LD_INT 1
37979: PPUSH
37980: CALL_OW 287
37984: PUSH
37985: LD_INT 10
37987: MUL
37988: ST_TO_ADDR
// r := rate / 10 ;
37989: LD_ADDR_VAR 0 7
37993: PUSH
37994: LD_VAR 0 2
37998: PUSH
37999: LD_INT 10
38001: DIVREAL
38002: ST_TO_ADDR
// time := 1 1$00 ;
38003: LD_ADDR_VAR 0 8
38007: PUSH
38008: LD_INT 2100
38010: ST_TO_ADDR
// if amount < min then
38011: LD_VAR 0 9
38015: PUSH
38016: LD_VAR 0 3
38020: LESS
38021: IFFALSE 38039
// r := r * 2 else
38023: LD_ADDR_VAR 0 7
38027: PUSH
38028: LD_VAR 0 7
38032: PUSH
38033: LD_INT 2
38035: MUL
38036: ST_TO_ADDR
38037: GO 38065
// if amount > max then
38039: LD_VAR 0 9
38043: PUSH
38044: LD_VAR 0 4
38048: GREATER
38049: IFFALSE 38065
// r := r / 2 ;
38051: LD_ADDR_VAR 0 7
38055: PUSH
38056: LD_VAR 0 7
38060: PUSH
38061: LD_INT 2
38063: DIVREAL
38064: ST_TO_ADDR
// time := time / r ;
38065: LD_ADDR_VAR 0 8
38069: PUSH
38070: LD_VAR 0 8
38074: PUSH
38075: LD_VAR 0 7
38079: DIVREAL
38080: ST_TO_ADDR
// if time < 0 then
38081: LD_VAR 0 8
38085: PUSH
38086: LD_INT 0
38088: LESS
38089: IFFALSE 38106
// time := time * - 1 ;
38091: LD_ADDR_VAR 0 8
38095: PUSH
38096: LD_VAR 0 8
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: MUL
38105: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38106: LD_VAR 0 8
38110: PUSH
38111: LD_INT 35
38113: PPUSH
38114: LD_INT 875
38116: PPUSH
38117: CALL_OW 12
38121: PLUS
38122: PPUSH
38123: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38127: LD_INT 1
38129: PPUSH
38130: LD_INT 5
38132: PPUSH
38133: CALL_OW 12
38137: PPUSH
38138: LD_VAR 0 1
38142: PPUSH
38143: LD_INT 1
38145: PPUSH
38146: CALL_OW 55
// end ;
38150: GO 37963
// end ;
38152: LD_VAR 0 5
38156: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38157: LD_INT 0
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
38166: PPUSH
// if not turrets or not factories then
38167: LD_VAR 0 1
38171: NOT
38172: IFTRUE 38181
38174: PUSH
38175: LD_VAR 0 2
38179: NOT
38180: OR
38181: IFFALSE 38185
// exit ;
38183: GO 38492
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38185: LD_ADDR_VAR 0 10
38189: PUSH
38190: LD_INT 5
38192: PUSH
38193: LD_INT 6
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 4
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 3
38212: PUSH
38213: LD_INT 5
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 24
38227: PUSH
38228: LD_INT 25
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 23
38237: PUSH
38238: LD_INT 27
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 42
38251: PUSH
38252: LD_INT 43
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 44
38261: PUSH
38262: LD_INT 46
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 45
38271: PUSH
38272: LD_INT 47
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
// result := [ ] ;
38289: LD_ADDR_VAR 0 3
38293: PUSH
38294: EMPTY
38295: ST_TO_ADDR
// for i in turrets do
38296: LD_ADDR_VAR 0 4
38300: PUSH
38301: LD_VAR 0 1
38305: PUSH
38306: FOR_IN
38307: IFFALSE 38490
// begin nat := GetNation ( i ) ;
38309: LD_ADDR_VAR 0 7
38313: PUSH
38314: LD_VAR 0 4
38318: PPUSH
38319: CALL_OW 248
38323: ST_TO_ADDR
// weapon := 0 ;
38324: LD_ADDR_VAR 0 8
38328: PUSH
38329: LD_INT 0
38331: ST_TO_ADDR
// if not nat then
38332: LD_VAR 0 7
38336: NOT
38337: IFFALSE 38341
// continue ;
38339: GO 38306
// for j in list [ nat ] do
38341: LD_ADDR_VAR 0 5
38345: PUSH
38346: LD_VAR 0 10
38350: PUSH
38351: LD_VAR 0 7
38355: ARRAY
38356: PUSH
38357: FOR_IN
38358: IFFALSE 38399
// if GetBWeapon ( i ) = j [ 1 ] then
38360: LD_VAR 0 4
38364: PPUSH
38365: CALL_OW 269
38369: PUSH
38370: LD_VAR 0 5
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: EQUAL
38379: IFFALSE 38397
// begin weapon := j [ 2 ] ;
38381: LD_ADDR_VAR 0 8
38385: PUSH
38386: LD_VAR 0 5
38390: PUSH
38391: LD_INT 2
38393: ARRAY
38394: ST_TO_ADDR
// break ;
38395: GO 38399
// end ;
38397: GO 38357
38399: POP
38400: POP
// if not weapon then
38401: LD_VAR 0 8
38405: NOT
38406: IFFALSE 38410
// continue ;
38408: GO 38306
// for k in factories do
38410: LD_ADDR_VAR 0 6
38414: PUSH
38415: LD_VAR 0 2
38419: PUSH
38420: FOR_IN
38421: IFFALSE 38486
// begin weapons := AvailableWeaponList ( k ) ;
38423: LD_ADDR_VAR 0 9
38427: PUSH
38428: LD_VAR 0 6
38432: PPUSH
38433: CALL_OW 478
38437: ST_TO_ADDR
// if not weapons then
38438: LD_VAR 0 9
38442: NOT
38443: IFFALSE 38447
// continue ;
38445: GO 38420
// if weapon in weapons then
38447: LD_VAR 0 8
38451: PUSH
38452: LD_VAR 0 9
38456: IN
38457: IFFALSE 38484
// begin result := [ i , weapon ] ;
38459: LD_ADDR_VAR 0 3
38463: PUSH
38464: LD_VAR 0 4
38468: PUSH
38469: LD_VAR 0 8
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// exit ;
38478: POP
38479: POP
38480: POP
38481: POP
38482: GO 38492
// end ; end ;
38484: GO 38420
38486: POP
38487: POP
// end ;
38488: GO 38306
38490: POP
38491: POP
// end ;
38492: LD_VAR 0 3
38496: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38497: LD_INT 0
38499: PPUSH
// if not side or side > 8 then
38500: LD_VAR 0 3
38504: NOT
38505: IFTRUE 38517
38507: PUSH
38508: LD_VAR 0 3
38512: PUSH
38513: LD_INT 8
38515: GREATER
38516: OR
38517: IFFALSE 38521
// exit ;
38519: GO 38580
// if not range then
38521: LD_VAR 0 4
38525: NOT
38526: IFFALSE 38537
// range := - 12 ;
38528: LD_ADDR_VAR 0 4
38532: PUSH
38533: LD_INT 12
38535: NEG
38536: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38537: LD_VAR 0 1
38541: PPUSH
38542: LD_VAR 0 2
38546: PPUSH
38547: LD_VAR 0 3
38551: PPUSH
38552: LD_VAR 0 4
38556: PPUSH
38557: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: LD_VAR 0 3
38575: PPUSH
38576: CALL_OW 331
// end ;
38580: LD_VAR 0 5
38584: RET
// export function Video ( mode ) ; begin
38585: LD_INT 0
38587: PPUSH
// ingame_video = mode ;
38588: LD_ADDR_OWVAR 52
38592: PUSH
38593: LD_VAR 0 1
38597: ST_TO_ADDR
// interface_hidden = mode ;
38598: LD_ADDR_OWVAR 54
38602: PUSH
38603: LD_VAR 0 1
38607: ST_TO_ADDR
// end ;
38608: LD_VAR 0 2
38612: RET
// export function Join ( array , element ) ; begin
38613: LD_INT 0
38615: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38616: LD_ADDR_VAR 0 3
38620: PUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: LD_VAR 0 1
38630: PUSH
38631: LD_INT 1
38633: PLUS
38634: PPUSH
38635: LD_VAR 0 2
38639: PPUSH
38640: CALL_OW 1
38644: ST_TO_ADDR
// end ;
38645: LD_VAR 0 3
38649: RET
// export function JoinUnion ( array , element ) ; begin
38650: LD_INT 0
38652: PPUSH
// result := array union element ;
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_VAR 0 1
38662: PUSH
38663: LD_VAR 0 2
38667: UNION
38668: ST_TO_ADDR
// end ;
38669: LD_VAR 0 3
38673: RET
// export function GetBehemoths ( side ) ; begin
38674: LD_INT 0
38676: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38677: LD_ADDR_VAR 0 2
38681: PUSH
38682: LD_INT 22
38684: PUSH
38685: LD_VAR 0 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 31
38696: PUSH
38697: LD_INT 25
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PPUSH
38708: CALL_OW 69
38712: ST_TO_ADDR
// end ;
38713: LD_VAR 0 2
38717: RET
// export function Shuffle ( array ) ; var i , index ; begin
38718: LD_INT 0
38720: PPUSH
38721: PPUSH
38722: PPUSH
// result := [ ] ;
38723: LD_ADDR_VAR 0 2
38727: PUSH
38728: EMPTY
38729: ST_TO_ADDR
// if not array then
38730: LD_VAR 0 1
38734: NOT
38735: IFFALSE 38739
// exit ;
38737: GO 38838
// Randomize ;
38739: CALL_OW 10
// for i = array downto 1 do
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: DOUBLE
38749: LD_VAR 0 1
38753: INC
38754: ST_TO_ADDR
38755: LD_INT 1
38757: PUSH
38758: FOR_DOWNTO
38759: IFFALSE 38836
// begin index := rand ( 1 , array ) ;
38761: LD_ADDR_VAR 0 4
38765: PUSH
38766: LD_INT 1
38768: PPUSH
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 12
38778: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38779: LD_ADDR_VAR 0 2
38783: PUSH
38784: LD_VAR 0 2
38788: PPUSH
38789: LD_VAR 0 2
38793: PUSH
38794: LD_INT 1
38796: PLUS
38797: PPUSH
38798: LD_VAR 0 1
38802: PUSH
38803: LD_VAR 0 4
38807: ARRAY
38808: PPUSH
38809: CALL_OW 2
38813: ST_TO_ADDR
// array := Delete ( array , index ) ;
38814: LD_ADDR_VAR 0 1
38818: PUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: LD_VAR 0 4
38828: PPUSH
38829: CALL_OW 3
38833: ST_TO_ADDR
// end ;
38834: GO 38758
38836: POP
38837: POP
// end ;
38838: LD_VAR 0 2
38842: RET
// export function GetBaseMaterials ( base ) ; begin
38843: LD_INT 0
38845: PPUSH
// result := [ 0 , 0 , 0 ] ;
38846: LD_ADDR_VAR 0 2
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// if not base then
38865: LD_VAR 0 1
38869: NOT
38870: IFFALSE 38874
// exit ;
38872: GO 38923
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38874: LD_ADDR_VAR 0 2
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: LD_INT 1
38886: PPUSH
38887: CALL_OW 275
38891: PUSH
38892: LD_VAR 0 1
38896: PPUSH
38897: LD_INT 2
38899: PPUSH
38900: CALL_OW 275
38904: PUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: LD_INT 3
38912: PPUSH
38913: CALL_OW 275
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// end ;
38923: LD_VAR 0 2
38927: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38928: LD_INT 0
38930: PPUSH
38931: PPUSH
// result := array ;
38932: LD_ADDR_VAR 0 3
38936: PUSH
38937: LD_VAR 0 1
38941: ST_TO_ADDR
// if size >= result then
38942: LD_VAR 0 2
38946: PUSH
38947: LD_VAR 0 3
38951: GREATEREQUAL
38952: IFFALSE 38956
// exit ;
38954: GO 39006
// if size then
38956: LD_VAR 0 2
38960: IFFALSE 39006
// for i := array downto size do
38962: LD_ADDR_VAR 0 4
38966: PUSH
38967: DOUBLE
38968: LD_VAR 0 1
38972: INC
38973: ST_TO_ADDR
38974: LD_VAR 0 2
38978: PUSH
38979: FOR_DOWNTO
38980: IFFALSE 39004
// result := Delete ( result , result ) ;
38982: LD_ADDR_VAR 0 3
38986: PUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: LD_VAR 0 3
38996: PPUSH
38997: CALL_OW 3
39001: ST_TO_ADDR
39002: GO 38979
39004: POP
39005: POP
// end ;
39006: LD_VAR 0 3
39010: RET
// export function ComExit ( unit ) ; var tmp ; begin
39011: LD_INT 0
39013: PPUSH
39014: PPUSH
// if not IsInUnit ( unit ) then
39015: LD_VAR 0 1
39019: PPUSH
39020: CALL_OW 310
39024: NOT
39025: IFFALSE 39029
// exit ;
39027: GO 39089
// tmp := IsInUnit ( unit ) ;
39029: LD_ADDR_VAR 0 3
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 310
39043: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39044: LD_VAR 0 3
39048: PPUSH
39049: CALL_OW 247
39053: PUSH
39054: LD_INT 2
39056: EQUAL
39057: IFFALSE 39070
// ComExitVehicle ( unit ) else
39059: LD_VAR 0 1
39063: PPUSH
39064: CALL_OW 121
39068: GO 39079
// ComExitBuilding ( unit ) ;
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL_OW 122
// result := tmp ;
39079: LD_ADDR_VAR 0 2
39083: PUSH
39084: LD_VAR 0 3
39088: ST_TO_ADDR
// end ;
39089: LD_VAR 0 2
39093: RET
// export function ComExitAll ( units ) ; var i ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
// if not units then
39098: LD_VAR 0 1
39102: NOT
39103: IFFALSE 39107
// exit ;
39105: GO 39133
// for i in units do
39107: LD_ADDR_VAR 0 3
39111: PUSH
39112: LD_VAR 0 1
39116: PUSH
39117: FOR_IN
39118: IFFALSE 39131
// ComExit ( i ) ;
39120: LD_VAR 0 3
39124: PPUSH
39125: CALL 39011 0 1
39129: GO 39117
39131: POP
39132: POP
// end ;
39133: LD_VAR 0 2
39137: RET
// export function ResetHc ; begin
39138: LD_INT 0
39140: PPUSH
// InitHc ;
39141: CALL_OW 19
// hc_importance := 0 ;
39145: LD_ADDR_OWVAR 32
39149: PUSH
39150: LD_INT 0
39152: ST_TO_ADDR
// end ;
39153: LD_VAR 0 1
39157: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39158: LD_INT 0
39160: PPUSH
39161: PPUSH
39162: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39163: LD_ADDR_VAR 0 6
39167: PUSH
39168: LD_VAR 0 1
39172: PUSH
39173: LD_VAR 0 3
39177: PLUS
39178: PUSH
39179: LD_INT 2
39181: DIV
39182: ST_TO_ADDR
// if _x < 0 then
39183: LD_VAR 0 6
39187: PUSH
39188: LD_INT 0
39190: LESS
39191: IFFALSE 39208
// _x := _x * - 1 ;
39193: LD_ADDR_VAR 0 6
39197: PUSH
39198: LD_VAR 0 6
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: MUL
39207: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39208: LD_ADDR_VAR 0 7
39212: PUSH
39213: LD_VAR 0 2
39217: PUSH
39218: LD_VAR 0 4
39222: PLUS
39223: PUSH
39224: LD_INT 2
39226: DIV
39227: ST_TO_ADDR
// if _y < 0 then
39228: LD_VAR 0 7
39232: PUSH
39233: LD_INT 0
39235: LESS
39236: IFFALSE 39253
// _y := _y * - 1 ;
39238: LD_ADDR_VAR 0 7
39242: PUSH
39243: LD_VAR 0 7
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: MUL
39252: ST_TO_ADDR
// result := [ _x , _y ] ;
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: LD_VAR 0 6
39262: PUSH
39263: LD_VAR 0 7
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: ST_TO_ADDR
// end ;
39272: LD_VAR 0 5
39276: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39277: LD_INT 0
39279: PPUSH
39280: PPUSH
39281: PPUSH
39282: PPUSH
// task := GetTaskList ( unit ) ;
39283: LD_ADDR_VAR 0 7
39287: PUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 437
39297: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39298: LD_VAR 0 7
39302: NOT
39303: IFFALSE 39322
39305: PUSH
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_VAR 0 2
39315: PPUSH
39316: CALL_OW 308
39320: NOT
39321: AND
39322: IFFALSE 39326
// exit ;
39324: GO 39444
// if IsInArea ( unit , area ) then
39326: LD_VAR 0 1
39330: PPUSH
39331: LD_VAR 0 2
39335: PPUSH
39336: CALL_OW 308
39340: IFFALSE 39358
// begin ComMoveToArea ( unit , goAway ) ;
39342: LD_VAR 0 1
39346: PPUSH
39347: LD_VAR 0 3
39351: PPUSH
39352: CALL_OW 113
// exit ;
39356: GO 39444
// end ; if task [ 1 ] [ 1 ] <> M then
39358: LD_VAR 0 7
39362: PUSH
39363: LD_INT 1
39365: ARRAY
39366: PUSH
39367: LD_INT 1
39369: ARRAY
39370: PUSH
39371: LD_STRING M
39373: NONEQUAL
39374: IFFALSE 39378
// exit ;
39376: GO 39444
// x := task [ 1 ] [ 2 ] ;
39378: LD_ADDR_VAR 0 5
39382: PUSH
39383: LD_VAR 0 7
39387: PUSH
39388: LD_INT 1
39390: ARRAY
39391: PUSH
39392: LD_INT 2
39394: ARRAY
39395: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39396: LD_ADDR_VAR 0 6
39400: PUSH
39401: LD_VAR 0 7
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: PUSH
39410: LD_INT 3
39412: ARRAY
39413: ST_TO_ADDR
// if InArea ( x , y , area ) then
39414: LD_VAR 0 5
39418: PPUSH
39419: LD_VAR 0 6
39423: PPUSH
39424: LD_VAR 0 2
39428: PPUSH
39429: CALL_OW 309
39433: IFFALSE 39444
// ComStop ( unit ) ;
39435: LD_VAR 0 1
39439: PPUSH
39440: CALL_OW 141
// end ;
39444: LD_VAR 0 4
39448: RET
// export function Abs ( value ) ; begin
39449: LD_INT 0
39451: PPUSH
// result := value ;
39452: LD_ADDR_VAR 0 2
39456: PUSH
39457: LD_VAR 0 1
39461: ST_TO_ADDR
// if value < 0 then
39462: LD_VAR 0 1
39466: PUSH
39467: LD_INT 0
39469: LESS
39470: IFFALSE 39487
// result := value * - 1 ;
39472: LD_ADDR_VAR 0 2
39476: PUSH
39477: LD_VAR 0 1
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: MUL
39486: ST_TO_ADDR
// end ;
39487: LD_VAR 0 2
39491: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39492: LD_INT 0
39494: PPUSH
39495: PPUSH
39496: PPUSH
39497: PPUSH
39498: PPUSH
39499: PPUSH
39500: PPUSH
39501: PPUSH
// if not unit or not building then
39502: LD_VAR 0 1
39506: NOT
39507: IFTRUE 39516
39509: PUSH
39510: LD_VAR 0 2
39514: NOT
39515: OR
39516: IFFALSE 39520
// exit ;
39518: GO 39748
// x := GetX ( building ) ;
39520: LD_ADDR_VAR 0 4
39524: PUSH
39525: LD_VAR 0 2
39529: PPUSH
39530: CALL_OW 250
39534: ST_TO_ADDR
// y := GetY ( building ) ;
39535: LD_ADDR_VAR 0 6
39539: PUSH
39540: LD_VAR 0 2
39544: PPUSH
39545: CALL_OW 251
39549: ST_TO_ADDR
// d := GetDir ( building ) ;
39550: LD_ADDR_VAR 0 8
39554: PUSH
39555: LD_VAR 0 2
39559: PPUSH
39560: CALL_OW 254
39564: ST_TO_ADDR
// r := 4 ;
39565: LD_ADDR_VAR 0 9
39569: PUSH
39570: LD_INT 4
39572: ST_TO_ADDR
// for i := 1 to 5 do
39573: LD_ADDR_VAR 0 10
39577: PUSH
39578: DOUBLE
39579: LD_INT 1
39581: DEC
39582: ST_TO_ADDR
39583: LD_INT 5
39585: PUSH
39586: FOR_TO
39587: IFFALSE 39746
// begin _x := ShiftX ( x , d , r + i ) ;
39589: LD_ADDR_VAR 0 5
39593: PUSH
39594: LD_VAR 0 4
39598: PPUSH
39599: LD_VAR 0 8
39603: PPUSH
39604: LD_VAR 0 9
39608: PUSH
39609: LD_VAR 0 10
39613: PLUS
39614: PPUSH
39615: CALL_OW 272
39619: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39620: LD_ADDR_VAR 0 7
39624: PUSH
39625: LD_VAR 0 6
39629: PPUSH
39630: LD_VAR 0 8
39634: PPUSH
39635: LD_VAR 0 9
39639: PUSH
39640: LD_VAR 0 10
39644: PLUS
39645: PPUSH
39646: CALL_OW 273
39650: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39651: LD_VAR 0 5
39655: PPUSH
39656: LD_VAR 0 7
39660: PPUSH
39661: CALL_OW 488
39665: IFFALSE 39700
39667: PUSH
39668: LD_VAR 0 5
39672: PPUSH
39673: LD_VAR 0 7
39677: PPUSH
39678: CALL_OW 428
39682: PPUSH
39683: CALL_OW 247
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: IN
39698: NOT
39699: AND
39700: IFFALSE 39744
// begin ComMoveXY ( unit , _x , _y ) ;
39702: LD_VAR 0 1
39706: PPUSH
39707: LD_VAR 0 5
39711: PPUSH
39712: LD_VAR 0 7
39716: PPUSH
39717: CALL_OW 111
// result := [ _x , _y ] ;
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_VAR 0 5
39730: PUSH
39731: LD_VAR 0 7
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: ST_TO_ADDR
// exit ;
39740: POP
39741: POP
39742: GO 39748
// end ; end ;
39744: GO 39586
39746: POP
39747: POP
// end ;
39748: LD_VAR 0 3
39752: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39753: LD_INT 0
39755: PPUSH
39756: PPUSH
39757: PPUSH
// result := 0 ;
39758: LD_ADDR_VAR 0 3
39762: PUSH
39763: LD_INT 0
39765: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39766: LD_VAR 0 1
39770: PUSH
39771: LD_INT 0
39773: LESS
39774: IFTRUE 39786
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: LD_INT 8
39784: GREATER
39785: OR
39786: IFTRUE 39798
39788: PUSH
39789: LD_VAR 0 2
39793: PUSH
39794: LD_INT 0
39796: LESS
39797: OR
39798: IFTRUE 39810
39800: PUSH
39801: LD_VAR 0 2
39805: PUSH
39806: LD_INT 8
39808: GREATER
39809: OR
39810: IFFALSE 39814
// exit ;
39812: GO 39889
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39814: LD_ADDR_VAR 0 4
39818: PUSH
39819: LD_INT 22
39821: PUSH
39822: LD_VAR 0 2
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PPUSH
39831: CALL_OW 69
39835: PUSH
39836: FOR_IN
39837: IFFALSE 39887
// begin un := UnitShoot ( i ) ;
39839: LD_ADDR_VAR 0 5
39843: PUSH
39844: LD_VAR 0 4
39848: PPUSH
39849: CALL_OW 504
39853: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39854: LD_VAR 0 5
39858: PPUSH
39859: CALL_OW 255
39863: PUSH
39864: LD_VAR 0 1
39868: EQUAL
39869: IFFALSE 39885
// begin result := un ;
39871: LD_ADDR_VAR 0 3
39875: PUSH
39876: LD_VAR 0 5
39880: ST_TO_ADDR
// exit ;
39881: POP
39882: POP
39883: GO 39889
// end ; end ;
39885: GO 39836
39887: POP
39888: POP
// end ;
39889: LD_VAR 0 3
39893: RET
// export function GetCargoBay ( units ) ; begin
39894: LD_INT 0
39896: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39897: LD_ADDR_VAR 0 2
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 34
39912: PUSH
39913: LD_INT 12
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 34
39922: PUSH
39923: LD_INT 51
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 34
39932: PUSH
39933: LD_INT 32
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 34
39942: PUSH
39943: LD_INT 89
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: PPUSH
39957: CALL_OW 72
39961: ST_TO_ADDR
// end ;
39962: LD_VAR 0 2
39966: RET
// export function Negate ( value ) ; begin
39967: LD_INT 0
39969: PPUSH
// result := not value ;
39970: LD_ADDR_VAR 0 2
39974: PUSH
39975: LD_VAR 0 1
39979: NOT
39980: ST_TO_ADDR
// end ;
39981: LD_VAR 0 2
39985: RET
// export function Inc ( value ) ; begin
39986: LD_INT 0
39988: PPUSH
// result := value + 1 ;
39989: LD_ADDR_VAR 0 2
39993: PUSH
39994: LD_VAR 0 1
39998: PUSH
39999: LD_INT 1
40001: PLUS
40002: ST_TO_ADDR
// end ;
40003: LD_VAR 0 2
40007: RET
// export function Dec ( value ) ; begin
40008: LD_INT 0
40010: PPUSH
// result := value - 1 ;
40011: LD_ADDR_VAR 0 2
40015: PUSH
40016: LD_VAR 0 1
40020: PUSH
40021: LD_INT 1
40023: MINUS
40024: ST_TO_ADDR
// end ;
40025: LD_VAR 0 2
40029: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40030: LD_INT 0
40032: PPUSH
40033: PPUSH
40034: PPUSH
40035: PPUSH
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40040: LD_VAR 0 1
40044: PPUSH
40045: LD_VAR 0 2
40049: PPUSH
40050: CALL_OW 488
40054: NOT
40055: IFTRUE 40074
40057: PUSH
40058: LD_VAR 0 3
40062: PPUSH
40063: LD_VAR 0 4
40067: PPUSH
40068: CALL_OW 488
40072: NOT
40073: OR
40074: IFFALSE 40087
// begin result := - 1 ;
40076: LD_ADDR_VAR 0 5
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: ST_TO_ADDR
// exit ;
40085: GO 40322
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40087: LD_ADDR_VAR 0 12
40091: PUSH
40092: LD_VAR 0 1
40096: PPUSH
40097: LD_VAR 0 2
40101: PPUSH
40102: LD_VAR 0 3
40106: PPUSH
40107: LD_VAR 0 4
40111: PPUSH
40112: CALL 39158 0 4
40116: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40117: LD_ADDR_VAR 0 11
40121: PUSH
40122: LD_VAR 0 1
40126: PPUSH
40127: LD_VAR 0 2
40131: PPUSH
40132: LD_VAR 0 12
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: PPUSH
40141: LD_VAR 0 12
40145: PUSH
40146: LD_INT 2
40148: ARRAY
40149: PPUSH
40150: CALL_OW 298
40154: ST_TO_ADDR
// distance := 9999 ;
40155: LD_ADDR_VAR 0 10
40159: PUSH
40160: LD_INT 9999
40162: ST_TO_ADDR
// for i := 0 to 5 do
40163: LD_ADDR_VAR 0 6
40167: PUSH
40168: DOUBLE
40169: LD_INT 0
40171: DEC
40172: ST_TO_ADDR
40173: LD_INT 5
40175: PUSH
40176: FOR_TO
40177: IFFALSE 40320
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40179: LD_ADDR_VAR 0 7
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: LD_VAR 0 6
40193: PPUSH
40194: LD_VAR 0 11
40198: PPUSH
40199: CALL_OW 272
40203: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40204: LD_ADDR_VAR 0 8
40208: PUSH
40209: LD_VAR 0 2
40213: PPUSH
40214: LD_VAR 0 6
40218: PPUSH
40219: LD_VAR 0 11
40223: PPUSH
40224: CALL_OW 273
40228: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40229: LD_VAR 0 7
40233: PPUSH
40234: LD_VAR 0 8
40238: PPUSH
40239: CALL_OW 488
40243: NOT
40244: IFFALSE 40248
// continue ;
40246: GO 40176
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40248: LD_ADDR_VAR 0 9
40252: PUSH
40253: LD_VAR 0 12
40257: PUSH
40258: LD_INT 1
40260: ARRAY
40261: PPUSH
40262: LD_VAR 0 12
40266: PUSH
40267: LD_INT 2
40269: ARRAY
40270: PPUSH
40271: LD_VAR 0 7
40275: PPUSH
40276: LD_VAR 0 8
40280: PPUSH
40281: CALL_OW 298
40285: ST_TO_ADDR
// if tmp < distance then
40286: LD_VAR 0 9
40290: PUSH
40291: LD_VAR 0 10
40295: LESS
40296: IFFALSE 40318
// begin result := i ;
40298: LD_ADDR_VAR 0 5
40302: PUSH
40303: LD_VAR 0 6
40307: ST_TO_ADDR
// distance := tmp ;
40308: LD_ADDR_VAR 0 10
40312: PUSH
40313: LD_VAR 0 9
40317: ST_TO_ADDR
// end ; end ;
40318: GO 40176
40320: POP
40321: POP
// end ;
40322: LD_VAR 0 5
40326: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40327: LD_INT 0
40329: PPUSH
40330: PPUSH
// if not driver or not IsInUnit ( driver ) then
40331: LD_VAR 0 1
40335: NOT
40336: IFTRUE 40350
40338: PUSH
40339: LD_VAR 0 1
40343: PPUSH
40344: CALL_OW 310
40348: NOT
40349: OR
40350: IFFALSE 40354
// exit ;
40352: GO 40444
// vehicle := IsInUnit ( driver ) ;
40354: LD_ADDR_VAR 0 3
40358: PUSH
40359: LD_VAR 0 1
40363: PPUSH
40364: CALL_OW 310
40368: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40369: LD_VAR 0 1
40373: PPUSH
40374: LD_STRING \
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: PUSH
40404: LD_STRING E
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_VAR 0 3
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PPUSH
40440: CALL_OW 446
// end ;
40444: LD_VAR 0 2
40448: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40449: LD_INT 0
40451: PPUSH
40452: PPUSH
// if not driver or not IsInUnit ( driver ) then
40453: LD_VAR 0 1
40457: NOT
40458: IFTRUE 40472
40460: PUSH
40461: LD_VAR 0 1
40465: PPUSH
40466: CALL_OW 310
40470: NOT
40471: OR
40472: IFFALSE 40476
// exit ;
40474: GO 40566
// vehicle := IsInUnit ( driver ) ;
40476: LD_ADDR_VAR 0 3
40480: PUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: CALL_OW 310
40490: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40491: LD_VAR 0 1
40495: PPUSH
40496: LD_STRING \
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: PUSH
40526: LD_STRING E
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: LD_VAR 0 3
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 0
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PPUSH
40562: CALL_OW 447
// end ;
40566: LD_VAR 0 2
40570: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40571: LD_INT 0
40573: PPUSH
40574: PPUSH
40575: PPUSH
// tmp := [ ] ;
40576: LD_ADDR_VAR 0 5
40580: PUSH
40581: EMPTY
40582: ST_TO_ADDR
// for i in units do
40583: LD_ADDR_VAR 0 4
40587: PUSH
40588: LD_VAR 0 1
40592: PUSH
40593: FOR_IN
40594: IFFALSE 40632
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40596: LD_ADDR_VAR 0 5
40600: PUSH
40601: LD_VAR 0 5
40605: PPUSH
40606: LD_VAR 0 5
40610: PUSH
40611: LD_INT 1
40613: PLUS
40614: PPUSH
40615: LD_VAR 0 4
40619: PPUSH
40620: CALL_OW 256
40624: PPUSH
40625: CALL_OW 2
40629: ST_TO_ADDR
40630: GO 40593
40632: POP
40633: POP
// if not tmp then
40634: LD_VAR 0 5
40638: NOT
40639: IFFALSE 40643
// exit ;
40641: GO 40691
// if asc then
40643: LD_VAR 0 2
40647: IFFALSE 40671
// result := SortListByListAsc ( units , tmp ) else
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: LD_VAR 0 5
40663: PPUSH
40664: CALL_OW 76
40668: ST_TO_ADDR
40669: GO 40691
// result := SortListByListDesc ( units , tmp ) ;
40671: LD_ADDR_VAR 0 3
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: LD_VAR 0 5
40685: PPUSH
40686: CALL_OW 77
40690: ST_TO_ADDR
// end ;
40691: LD_VAR 0 3
40695: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40696: LD_INT 0
40698: PPUSH
40699: PPUSH
// task := GetTaskList ( mech ) ;
40700: LD_ADDR_VAR 0 4
40704: PUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: CALL_OW 437
40714: ST_TO_ADDR
// if not task then
40715: LD_VAR 0 4
40719: NOT
40720: IFFALSE 40724
// exit ;
40722: GO 40768
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_VAR 0 4
40733: PUSH
40734: LD_INT 1
40736: ARRAY
40737: PUSH
40738: LD_INT 1
40740: ARRAY
40741: PUSH
40742: LD_STRING r
40744: EQUAL
40745: IFFALSE 40767
40747: PUSH
40748: LD_VAR 0 4
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: PUSH
40757: LD_INT 4
40759: ARRAY
40760: PUSH
40761: LD_VAR 0 2
40765: EQUAL
40766: AND
40767: ST_TO_ADDR
// end ;
40768: LD_VAR 0 3
40772: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40773: LD_INT 0
40775: PPUSH
// SetDir ( unit , d ) ;
40776: LD_VAR 0 1
40780: PPUSH
40781: LD_VAR 0 4
40785: PPUSH
40786: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40790: LD_ADDR_VAR 0 6
40794: PUSH
40795: LD_VAR 0 1
40799: PPUSH
40800: LD_VAR 0 2
40804: PPUSH
40805: LD_VAR 0 3
40809: PPUSH
40810: LD_VAR 0 5
40814: PPUSH
40815: CALL_OW 48
40819: ST_TO_ADDR
// end ;
40820: LD_VAR 0 6
40824: RET
// export function ToNaturalNumber ( number ) ; begin
40825: LD_INT 0
40827: PPUSH
// result := number div 1 ;
40828: LD_ADDR_VAR 0 2
40832: PUSH
40833: LD_VAR 0 1
40837: PUSH
40838: LD_INT 1
40840: DIV
40841: ST_TO_ADDR
// if number < 0 then
40842: LD_VAR 0 1
40846: PUSH
40847: LD_INT 0
40849: LESS
40850: IFFALSE 40860
// result := 0 ;
40852: LD_ADDR_VAR 0 2
40856: PUSH
40857: LD_INT 0
40859: ST_TO_ADDR
// end ;
40860: LD_VAR 0 2
40864: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40865: LD_INT 0
40867: PPUSH
40868: PPUSH
40869: PPUSH
// if not buildings then
40870: LD_VAR 0 1
40874: NOT
40875: IFFALSE 40879
// exit ;
40877: GO 40994
// tmp := [ ] ;
40879: LD_ADDR_VAR 0 5
40883: PUSH
40884: EMPTY
40885: ST_TO_ADDR
// for b in buildings do
40886: LD_ADDR_VAR 0 4
40890: PUSH
40891: LD_VAR 0 1
40895: PUSH
40896: FOR_IN
40897: IFFALSE 40935
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40899: LD_ADDR_VAR 0 5
40903: PUSH
40904: LD_VAR 0 5
40908: PPUSH
40909: LD_VAR 0 5
40913: PUSH
40914: LD_INT 1
40916: PLUS
40917: PPUSH
40918: LD_VAR 0 4
40922: PPUSH
40923: CALL_OW 266
40927: PPUSH
40928: CALL_OW 1
40932: ST_TO_ADDR
40933: GO 40896
40935: POP
40936: POP
// if not tmp then
40937: LD_VAR 0 5
40941: NOT
40942: IFFALSE 40946
// exit ;
40944: GO 40994
// if asc then
40946: LD_VAR 0 2
40950: IFFALSE 40974
// result := SortListByListAsc ( buildings , tmp ) else
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_VAR 0 1
40961: PPUSH
40962: LD_VAR 0 5
40966: PPUSH
40967: CALL_OW 76
40971: ST_TO_ADDR
40972: GO 40994
// result := SortListByListDesc ( buildings , tmp ) ;
40974: LD_ADDR_VAR 0 3
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: LD_VAR 0 5
40988: PPUSH
40989: CALL_OW 77
40993: ST_TO_ADDR
// end ;
40994: LD_VAR 0 3
40998: RET
// export function SortByClass ( units , class ) ; var un ; begin
40999: LD_INT 0
41001: PPUSH
41002: PPUSH
// if not units or not class then
41003: LD_VAR 0 1
41007: NOT
41008: IFTRUE 41017
41010: PUSH
41011: LD_VAR 0 2
41015: NOT
41016: OR
41017: IFFALSE 41021
// exit ;
41019: GO 41116
// result := [ ] ;
41021: LD_ADDR_VAR 0 3
41025: PUSH
41026: EMPTY
41027: ST_TO_ADDR
// for un in units do
41028: LD_ADDR_VAR 0 4
41032: PUSH
41033: LD_VAR 0 1
41037: PUSH
41038: FOR_IN
41039: IFFALSE 41114
// if GetClass ( un ) = class then
41041: LD_VAR 0 4
41045: PPUSH
41046: CALL_OW 257
41050: PUSH
41051: LD_VAR 0 2
41055: EQUAL
41056: IFFALSE 41083
// result := Insert ( result , 1 , un ) else
41058: LD_ADDR_VAR 0 3
41062: PUSH
41063: LD_VAR 0 3
41067: PPUSH
41068: LD_INT 1
41070: PPUSH
41071: LD_VAR 0 4
41075: PPUSH
41076: CALL_OW 2
41080: ST_TO_ADDR
41081: GO 41112
// result := Replace ( result , result + 1 , un ) ;
41083: LD_ADDR_VAR 0 3
41087: PUSH
41088: LD_VAR 0 3
41092: PPUSH
41093: LD_VAR 0 3
41097: PUSH
41098: LD_INT 1
41100: PLUS
41101: PPUSH
41102: LD_VAR 0 4
41106: PPUSH
41107: CALL_OW 1
41111: ST_TO_ADDR
41112: GO 41038
41114: POP
41115: POP
// end ;
41116: LD_VAR 0 3
41120: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41121: LD_INT 0
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
41128: PPUSH
41129: PPUSH
// result := [ ] ;
41130: LD_ADDR_VAR 0 4
41134: PUSH
41135: EMPTY
41136: ST_TO_ADDR
// if x - r < 0 then
41137: LD_VAR 0 1
41141: PUSH
41142: LD_VAR 0 3
41146: MINUS
41147: PUSH
41148: LD_INT 0
41150: LESS
41151: IFFALSE 41163
// min_x := 0 else
41153: LD_ADDR_VAR 0 8
41157: PUSH
41158: LD_INT 0
41160: ST_TO_ADDR
41161: GO 41179
// min_x := x - r ;
41163: LD_ADDR_VAR 0 8
41167: PUSH
41168: LD_VAR 0 1
41172: PUSH
41173: LD_VAR 0 3
41177: MINUS
41178: ST_TO_ADDR
// if y - r < 0 then
41179: LD_VAR 0 2
41183: PUSH
41184: LD_VAR 0 3
41188: MINUS
41189: PUSH
41190: LD_INT 0
41192: LESS
41193: IFFALSE 41205
// min_y := 0 else
41195: LD_ADDR_VAR 0 7
41199: PUSH
41200: LD_INT 0
41202: ST_TO_ADDR
41203: GO 41221
// min_y := y - r ;
41205: LD_ADDR_VAR 0 7
41209: PUSH
41210: LD_VAR 0 2
41214: PUSH
41215: LD_VAR 0 3
41219: MINUS
41220: ST_TO_ADDR
// max_x := x + r ;
41221: LD_ADDR_VAR 0 9
41225: PUSH
41226: LD_VAR 0 1
41230: PUSH
41231: LD_VAR 0 3
41235: PLUS
41236: ST_TO_ADDR
// max_y := y + r ;
41237: LD_ADDR_VAR 0 10
41241: PUSH
41242: LD_VAR 0 2
41246: PUSH
41247: LD_VAR 0 3
41251: PLUS
41252: ST_TO_ADDR
// for _x = min_x to max_x do
41253: LD_ADDR_VAR 0 5
41257: PUSH
41258: DOUBLE
41259: LD_VAR 0 8
41263: DEC
41264: ST_TO_ADDR
41265: LD_VAR 0 9
41269: PUSH
41270: FOR_TO
41271: IFFALSE 41372
// for _y = min_y to max_y do
41273: LD_ADDR_VAR 0 6
41277: PUSH
41278: DOUBLE
41279: LD_VAR 0 7
41283: DEC
41284: ST_TO_ADDR
41285: LD_VAR 0 10
41289: PUSH
41290: FOR_TO
41291: IFFALSE 41368
// begin if not ValidHex ( _x , _y ) then
41293: LD_VAR 0 5
41297: PPUSH
41298: LD_VAR 0 6
41302: PPUSH
41303: CALL_OW 488
41307: NOT
41308: IFFALSE 41312
// continue ;
41310: GO 41290
// if GetResourceTypeXY ( _x , _y ) then
41312: LD_VAR 0 5
41316: PPUSH
41317: LD_VAR 0 6
41321: PPUSH
41322: CALL_OW 283
41326: IFFALSE 41366
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41328: LD_ADDR_VAR 0 4
41332: PUSH
41333: LD_VAR 0 4
41337: PPUSH
41338: LD_VAR 0 4
41342: PUSH
41343: LD_INT 1
41345: PLUS
41346: PPUSH
41347: LD_VAR 0 5
41351: PUSH
41352: LD_VAR 0 6
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PPUSH
41361: CALL_OW 1
41365: ST_TO_ADDR
// end ;
41366: GO 41290
41368: POP
41369: POP
41370: GO 41270
41372: POP
41373: POP
// end ;
41374: LD_VAR 0 4
41378: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41379: LD_INT 0
41381: PPUSH
41382: PPUSH
41383: PPUSH
41384: PPUSH
41385: PPUSH
41386: PPUSH
41387: PPUSH
41388: PPUSH
// if not units then
41389: LD_VAR 0 1
41393: NOT
41394: IFFALSE 41398
// exit ;
41396: GO 41930
// result := UnitFilter ( units , [ f_ok ] ) ;
41398: LD_ADDR_VAR 0 3
41402: PUSH
41403: LD_VAR 0 1
41407: PPUSH
41408: LD_INT 50
41410: PUSH
41411: EMPTY
41412: LIST
41413: PPUSH
41414: CALL_OW 72
41418: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41419: LD_ADDR_VAR 0 8
41423: PUSH
41424: LD_VAR 0 1
41428: PUSH
41429: LD_INT 1
41431: ARRAY
41432: PPUSH
41433: CALL_OW 255
41437: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41438: LD_ADDR_VAR 0 10
41442: PUSH
41443: LD_INT 29
41445: PUSH
41446: LD_INT 91
41448: PUSH
41449: LD_INT 49
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: ST_TO_ADDR
// if not result then
41457: LD_VAR 0 3
41461: NOT
41462: IFFALSE 41466
// exit ;
41464: GO 41930
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41466: LD_ADDR_VAR 0 5
41470: PUSH
41471: LD_INT 81
41473: PUSH
41474: LD_VAR 0 8
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PPUSH
41483: CALL_OW 69
41487: ST_TO_ADDR
// for i in result do
41488: LD_ADDR_VAR 0 4
41492: PUSH
41493: LD_VAR 0 3
41497: PUSH
41498: FOR_IN
41499: IFFALSE 41928
// begin tag := GetTag ( i ) + 1 ;
41501: LD_ADDR_VAR 0 9
41505: PUSH
41506: LD_VAR 0 4
41510: PPUSH
41511: CALL_OW 110
41515: PUSH
41516: LD_INT 1
41518: PLUS
41519: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41520: LD_ADDR_VAR 0 7
41524: PUSH
41525: LD_VAR 0 4
41529: PPUSH
41530: CALL_OW 250
41534: PPUSH
41535: LD_VAR 0 4
41539: PPUSH
41540: CALL_OW 251
41544: PPUSH
41545: LD_INT 4
41547: PPUSH
41548: CALL 41121 0 3
41552: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41553: LD_VAR 0 4
41557: PPUSH
41558: CALL_OW 247
41562: PUSH
41563: LD_INT 2
41565: EQUAL
41566: IFFALSE 41578
41568: PUSH
41569: LD_VAR 0 7
41573: PUSH
41574: LD_INT 2
41576: GREATER
41577: AND
41578: IFFALSE 41598
41580: PUSH
41581: LD_VAR 0 4
41585: PPUSH
41586: CALL_OW 264
41590: PUSH
41591: LD_VAR 0 10
41595: IN
41596: NOT
41597: AND
41598: IFFALSE 41637
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41600: LD_VAR 0 4
41604: PPUSH
41605: LD_VAR 0 7
41609: PUSH
41610: LD_INT 1
41612: ARRAY
41613: PUSH
41614: LD_INT 1
41616: ARRAY
41617: PPUSH
41618: LD_VAR 0 7
41622: PUSH
41623: LD_INT 1
41625: ARRAY
41626: PUSH
41627: LD_INT 2
41629: ARRAY
41630: PPUSH
41631: CALL_OW 116
41635: GO 41926
// if path > tag then
41637: LD_VAR 0 2
41641: PUSH
41642: LD_VAR 0 9
41646: GREATER
41647: IFFALSE 41855
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41649: LD_ADDR_VAR 0 6
41653: PUSH
41654: LD_VAR 0 5
41658: PPUSH
41659: LD_INT 91
41661: PUSH
41662: LD_VAR 0 4
41666: PUSH
41667: LD_INT 8
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: PPUSH
41675: CALL_OW 72
41679: ST_TO_ADDR
// if nearEnemy then
41680: LD_VAR 0 6
41684: IFFALSE 41753
// begin if GetWeapon ( i ) = ru_time_lapser then
41686: LD_VAR 0 4
41690: PPUSH
41691: CALL_OW 264
41695: PUSH
41696: LD_INT 49
41698: EQUAL
41699: IFFALSE 41727
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41701: LD_VAR 0 4
41705: PPUSH
41706: LD_VAR 0 6
41710: PPUSH
41711: LD_VAR 0 4
41715: PPUSH
41716: CALL_OW 74
41720: PPUSH
41721: CALL_OW 112
41725: GO 41751
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_VAR 0 6
41736: PPUSH
41737: LD_VAR 0 4
41741: PPUSH
41742: CALL_OW 74
41746: PPUSH
41747: CALL 43011 0 2
// end else
41751: GO 41853
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41753: LD_VAR 0 4
41757: PPUSH
41758: LD_VAR 0 2
41762: PUSH
41763: LD_VAR 0 9
41767: ARRAY
41768: PUSH
41769: LD_INT 1
41771: ARRAY
41772: PPUSH
41773: LD_VAR 0 2
41777: PUSH
41778: LD_VAR 0 9
41782: ARRAY
41783: PUSH
41784: LD_INT 2
41786: ARRAY
41787: PPUSH
41788: CALL_OW 297
41792: PUSH
41793: LD_INT 6
41795: GREATER
41796: IFFALSE 41839
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41798: LD_VAR 0 4
41802: PPUSH
41803: LD_VAR 0 2
41807: PUSH
41808: LD_VAR 0 9
41812: ARRAY
41813: PUSH
41814: LD_INT 1
41816: ARRAY
41817: PPUSH
41818: LD_VAR 0 2
41822: PUSH
41823: LD_VAR 0 9
41827: ARRAY
41828: PUSH
41829: LD_INT 2
41831: ARRAY
41832: PPUSH
41833: CALL_OW 114
41837: GO 41853
// SetTag ( i , tag ) ;
41839: LD_VAR 0 4
41843: PPUSH
41844: LD_VAR 0 9
41848: PPUSH
41849: CALL_OW 109
// end else
41853: GO 41926
// if enemy then
41855: LD_VAR 0 5
41859: IFFALSE 41926
// begin if GetWeapon ( i ) = ru_time_lapser then
41861: LD_VAR 0 4
41865: PPUSH
41866: CALL_OW 264
41870: PUSH
41871: LD_INT 49
41873: EQUAL
41874: IFFALSE 41902
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41876: LD_VAR 0 4
41880: PPUSH
41881: LD_VAR 0 5
41885: PPUSH
41886: LD_VAR 0 4
41890: PPUSH
41891: CALL_OW 74
41895: PPUSH
41896: CALL_OW 112
41900: GO 41926
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41902: LD_VAR 0 4
41906: PPUSH
41907: LD_VAR 0 5
41911: PPUSH
41912: LD_VAR 0 4
41916: PPUSH
41917: CALL_OW 74
41921: PPUSH
41922: CALL 43011 0 2
// end ; end ;
41926: GO 41498
41928: POP
41929: POP
// end ;
41930: LD_VAR 0 3
41934: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41935: LD_INT 0
41937: PPUSH
41938: PPUSH
41939: PPUSH
// if not unit or IsInUnit ( unit ) then
41940: LD_VAR 0 1
41944: NOT
41945: IFTRUE 41958
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 310
41957: OR
41958: IFFALSE 41962
// exit ;
41960: GO 42053
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41962: LD_ADDR_VAR 0 4
41966: PUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: CALL_OW 250
41976: PPUSH
41977: LD_VAR 0 2
41981: PPUSH
41982: LD_INT 1
41984: PPUSH
41985: CALL_OW 272
41989: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41990: LD_ADDR_VAR 0 5
41994: PUSH
41995: LD_VAR 0 1
41999: PPUSH
42000: CALL_OW 251
42004: PPUSH
42005: LD_VAR 0 2
42009: PPUSH
42010: LD_INT 1
42012: PPUSH
42013: CALL_OW 273
42017: ST_TO_ADDR
// if ValidHex ( x , y ) then
42018: LD_VAR 0 4
42022: PPUSH
42023: LD_VAR 0 5
42027: PPUSH
42028: CALL_OW 488
42032: IFFALSE 42053
// ComTurnXY ( unit , x , y ) ;
42034: LD_VAR 0 1
42038: PPUSH
42039: LD_VAR 0 4
42043: PPUSH
42044: LD_VAR 0 5
42048: PPUSH
42049: CALL_OW 118
// end ;
42053: LD_VAR 0 3
42057: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42058: LD_INT 0
42060: PPUSH
42061: PPUSH
// result := false ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_INT 0
42069: ST_TO_ADDR
// if not units then
42070: LD_VAR 0 2
42074: NOT
42075: IFFALSE 42079
// exit ;
42077: GO 42124
// for i in units do
42079: LD_ADDR_VAR 0 4
42083: PUSH
42084: LD_VAR 0 2
42088: PUSH
42089: FOR_IN
42090: IFFALSE 42122
// if See ( side , i ) then
42092: LD_VAR 0 1
42096: PPUSH
42097: LD_VAR 0 4
42101: PPUSH
42102: CALL_OW 292
42106: IFFALSE 42120
// begin result := true ;
42108: LD_ADDR_VAR 0 3
42112: PUSH
42113: LD_INT 1
42115: ST_TO_ADDR
// exit ;
42116: POP
42117: POP
42118: GO 42124
// end ;
42120: GO 42089
42122: POP
42123: POP
// end ;
42124: LD_VAR 0 3
42128: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42129: LD_INT 0
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
// if not unit or not points then
42135: LD_VAR 0 1
42139: NOT
42140: IFTRUE 42149
42142: PUSH
42143: LD_VAR 0 2
42147: NOT
42148: OR
42149: IFFALSE 42153
// exit ;
42151: GO 42243
// dist := 99999 ;
42153: LD_ADDR_VAR 0 5
42157: PUSH
42158: LD_INT 99999
42160: ST_TO_ADDR
// for i in points do
42161: LD_ADDR_VAR 0 4
42165: PUSH
42166: LD_VAR 0 2
42170: PUSH
42171: FOR_IN
42172: IFFALSE 42241
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42174: LD_ADDR_VAR 0 6
42178: PUSH
42179: LD_VAR 0 1
42183: PPUSH
42184: LD_VAR 0 4
42188: PUSH
42189: LD_INT 1
42191: ARRAY
42192: PPUSH
42193: LD_VAR 0 4
42197: PUSH
42198: LD_INT 2
42200: ARRAY
42201: PPUSH
42202: CALL_OW 297
42206: ST_TO_ADDR
// if tmpDist < dist then
42207: LD_VAR 0 6
42211: PUSH
42212: LD_VAR 0 5
42216: LESS
42217: IFFALSE 42239
// begin result := i ;
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_VAR 0 4
42228: ST_TO_ADDR
// dist := tmpDist ;
42229: LD_ADDR_VAR 0 5
42233: PUSH
42234: LD_VAR 0 6
42238: ST_TO_ADDR
// end ; end ;
42239: GO 42171
42241: POP
42242: POP
// end ;
42243: LD_VAR 0 3
42247: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42248: LD_INT 0
42250: PPUSH
// uc_side := side ;
42251: LD_ADDR_OWVAR 20
42255: PUSH
42256: LD_VAR 0 1
42260: ST_TO_ADDR
// uc_nation := 3 ;
42261: LD_ADDR_OWVAR 21
42265: PUSH
42266: LD_INT 3
42268: ST_TO_ADDR
// vc_chassis := 25 ;
42269: LD_ADDR_OWVAR 37
42273: PUSH
42274: LD_INT 25
42276: ST_TO_ADDR
// vc_engine := engine_siberite ;
42277: LD_ADDR_OWVAR 39
42281: PUSH
42282: LD_INT 3
42284: ST_TO_ADDR
// vc_control := control_computer ;
42285: LD_ADDR_OWVAR 38
42289: PUSH
42290: LD_INT 3
42292: ST_TO_ADDR
// vc_weapon := 59 ;
42293: LD_ADDR_OWVAR 40
42297: PUSH
42298: LD_INT 59
42300: ST_TO_ADDR
// result := CreateVehicle ;
42301: LD_ADDR_VAR 0 5
42305: PUSH
42306: CALL_OW 45
42310: ST_TO_ADDR
// SetDir ( result , d ) ;
42311: LD_VAR 0 5
42315: PPUSH
42316: LD_VAR 0 4
42320: PPUSH
42321: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42325: LD_VAR 0 5
42329: PPUSH
42330: LD_VAR 0 2
42334: PPUSH
42335: LD_VAR 0 3
42339: PPUSH
42340: LD_INT 0
42342: PPUSH
42343: CALL_OW 48
// end ;
42347: LD_VAR 0 5
42351: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42352: LD_INT 0
42354: PPUSH
42355: PPUSH
42356: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42380: LD_VAR 0 1
42384: NOT
42385: IFTRUE 42418
42387: PUSH
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 264
42397: PUSH
42398: LD_INT 12
42400: PUSH
42401: LD_INT 51
42403: PUSH
42404: LD_INT 32
42406: PUSH
42407: LD_INT 89
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: IN
42416: NOT
42417: OR
42418: IFFALSE 42422
// exit ;
42420: GO 42520
// for i := 1 to 3 do
42422: LD_ADDR_VAR 0 3
42426: PUSH
42427: DOUBLE
42428: LD_INT 1
42430: DEC
42431: ST_TO_ADDR
42432: LD_INT 3
42434: PUSH
42435: FOR_TO
42436: IFFALSE 42518
// begin tmp := GetCargo ( cargo , i ) ;
42438: LD_ADDR_VAR 0 4
42442: PUSH
42443: LD_VAR 0 1
42447: PPUSH
42448: LD_VAR 0 3
42452: PPUSH
42453: CALL_OW 289
42457: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42458: LD_ADDR_VAR 0 2
42462: PUSH
42463: LD_VAR 0 2
42467: PPUSH
42468: LD_VAR 0 3
42472: PPUSH
42473: LD_VAR 0 4
42477: PPUSH
42478: CALL_OW 1
42482: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42483: LD_ADDR_VAR 0 2
42487: PUSH
42488: LD_VAR 0 2
42492: PPUSH
42493: LD_INT 4
42495: PPUSH
42496: LD_VAR 0 2
42500: PUSH
42501: LD_INT 4
42503: ARRAY
42504: PUSH
42505: LD_VAR 0 4
42509: PLUS
42510: PPUSH
42511: CALL_OW 1
42515: ST_TO_ADDR
// end ;
42516: GO 42435
42518: POP
42519: POP
// end ;
42520: LD_VAR 0 2
42524: RET
// export function Length ( array ) ; begin
42525: LD_INT 0
42527: PPUSH
// result := array + 0 ;
42528: LD_ADDR_VAR 0 2
42532: PUSH
42533: LD_VAR 0 1
42537: PUSH
42538: LD_INT 0
42540: PLUS
42541: ST_TO_ADDR
// end ;
42542: LD_VAR 0 2
42546: RET
// export function PrepareArray ( array ) ; begin
42547: LD_INT 0
42549: PPUSH
// result := array diff 0 ;
42550: LD_ADDR_VAR 0 2
42554: PUSH
42555: LD_VAR 0 1
42559: PUSH
42560: LD_INT 0
42562: DIFF
42563: ST_TO_ADDR
// if not result [ 1 ] then
42564: LD_VAR 0 2
42568: PUSH
42569: LD_INT 1
42571: ARRAY
42572: NOT
42573: IFFALSE 42593
// result := Delete ( result , 1 ) ;
42575: LD_ADDR_VAR 0 2
42579: PUSH
42580: LD_VAR 0 2
42584: PPUSH
42585: LD_INT 1
42587: PPUSH
42588: CALL_OW 3
42592: ST_TO_ADDR
// end ;
42593: LD_VAR 0 2
42597: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42598: LD_INT 0
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
// sibRocketRange := 25 ;
42604: LD_ADDR_VAR 0 6
42608: PUSH
42609: LD_INT 25
42611: ST_TO_ADDR
// result := false ;
42612: LD_ADDR_VAR 0 4
42616: PUSH
42617: LD_INT 0
42619: ST_TO_ADDR
// for i := 0 to 5 do
42620: LD_ADDR_VAR 0 5
42624: PUSH
42625: DOUBLE
42626: LD_INT 0
42628: DEC
42629: ST_TO_ADDR
42630: LD_INT 5
42632: PUSH
42633: FOR_TO
42634: IFFALSE 42701
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42636: LD_VAR 0 1
42640: PPUSH
42641: LD_VAR 0 5
42645: PPUSH
42646: LD_VAR 0 6
42650: PPUSH
42651: CALL_OW 272
42655: PPUSH
42656: LD_VAR 0 2
42660: PPUSH
42661: LD_VAR 0 5
42665: PPUSH
42666: LD_VAR 0 6
42670: PPUSH
42671: CALL_OW 273
42675: PPUSH
42676: LD_VAR 0 3
42680: PPUSH
42681: CALL_OW 309
42685: IFFALSE 42699
// begin result := true ;
42687: LD_ADDR_VAR 0 4
42691: PUSH
42692: LD_INT 1
42694: ST_TO_ADDR
// exit ;
42695: POP
42696: POP
42697: GO 42703
// end ;
42699: GO 42633
42701: POP
42702: POP
// end ;
42703: LD_VAR 0 4
42707: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42708: LD_INT 0
42710: PPUSH
42711: PPUSH
42712: PPUSH
// if btype = b_depot then
42713: LD_VAR 0 2
42717: PUSH
42718: LD_INT 0
42720: EQUAL
42721: IFFALSE 42733
// begin result := true ;
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 1
42730: ST_TO_ADDR
// exit ;
42731: GO 42853
// end ; pom := GetBase ( depot ) ;
42733: LD_ADDR_VAR 0 4
42737: PUSH
42738: LD_VAR 0 1
42742: PPUSH
42743: CALL_OW 274
42747: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42748: LD_ADDR_VAR 0 5
42752: PUSH
42753: LD_VAR 0 2
42757: PPUSH
42758: LD_VAR 0 1
42762: PPUSH
42763: CALL_OW 248
42767: PPUSH
42768: CALL_OW 450
42772: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_VAR 0 4
42782: PPUSH
42783: LD_INT 1
42785: PPUSH
42786: CALL_OW 275
42790: PUSH
42791: LD_VAR 0 5
42795: PUSH
42796: LD_INT 1
42798: ARRAY
42799: GREATEREQUAL
42800: IFFALSE 42826
42802: PUSH
42803: LD_VAR 0 4
42807: PPUSH
42808: LD_INT 2
42810: PPUSH
42811: CALL_OW 275
42815: PUSH
42816: LD_VAR 0 5
42820: PUSH
42821: LD_INT 2
42823: ARRAY
42824: GREATEREQUAL
42825: AND
42826: IFFALSE 42852
42828: PUSH
42829: LD_VAR 0 4
42833: PPUSH
42834: LD_INT 3
42836: PPUSH
42837: CALL_OW 275
42841: PUSH
42842: LD_VAR 0 5
42846: PUSH
42847: LD_INT 3
42849: ARRAY
42850: GREATEREQUAL
42851: AND
42852: ST_TO_ADDR
// end ;
42853: LD_VAR 0 3
42857: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42858: LD_INT 0
42860: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42861: LD_VAR 0 1
42865: PPUSH
42866: LD_VAR 0 2
42870: PPUSH
42871: LD_INT 0
42873: PPUSH
42874: LD_INT 0
42876: PPUSH
42877: LD_INT 1
42879: PPUSH
42880: LD_INT 0
42882: PPUSH
42883: CALL_OW 587
// end ;
42887: LD_VAR 0 3
42891: RET
// export function CenterOnNow ( unit ) ; begin
42892: LD_INT 0
42894: PPUSH
// result := IsInUnit ( unit ) ;
42895: LD_ADDR_VAR 0 2
42899: PUSH
42900: LD_VAR 0 1
42904: PPUSH
42905: CALL_OW 310
42909: ST_TO_ADDR
// if not result then
42910: LD_VAR 0 2
42914: NOT
42915: IFFALSE 42927
// result := unit ;
42917: LD_ADDR_VAR 0 2
42921: PUSH
42922: LD_VAR 0 1
42926: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42927: LD_VAR 0 1
42931: PPUSH
42932: CALL_OW 87
// end ;
42936: LD_VAR 0 2
42940: RET
// export function ComMoveHex ( unit , hex ) ; begin
42941: LD_INT 0
42943: PPUSH
// if not hex then
42944: LD_VAR 0 2
42948: NOT
42949: IFFALSE 42953
// exit ;
42951: GO 43006
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42953: LD_VAR 0 2
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PPUSH
42962: LD_VAR 0 2
42966: PUSH
42967: LD_INT 2
42969: ARRAY
42970: PPUSH
42971: CALL_OW 428
42975: IFFALSE 42979
// exit ;
42977: GO 43006
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42979: LD_VAR 0 1
42983: PPUSH
42984: LD_VAR 0 2
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: PPUSH
42993: LD_VAR 0 2
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: PPUSH
43002: CALL_OW 111
// end ;
43006: LD_VAR 0 3
43010: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43011: LD_INT 0
43013: PPUSH
43014: PPUSH
43015: PPUSH
// if not unit or not enemy then
43016: LD_VAR 0 1
43020: NOT
43021: IFTRUE 43030
43023: PUSH
43024: LD_VAR 0 2
43028: NOT
43029: OR
43030: IFFALSE 43034
// exit ;
43032: GO 43160
// x := GetX ( enemy ) ;
43034: LD_ADDR_VAR 0 4
43038: PUSH
43039: LD_VAR 0 2
43043: PPUSH
43044: CALL_OW 250
43048: ST_TO_ADDR
// y := GetY ( enemy ) ;
43049: LD_ADDR_VAR 0 5
43053: PUSH
43054: LD_VAR 0 2
43058: PPUSH
43059: CALL_OW 251
43063: ST_TO_ADDR
// if ValidHex ( x , y ) then
43064: LD_VAR 0 4
43068: PPUSH
43069: LD_VAR 0 5
43073: PPUSH
43074: CALL_OW 488
43078: IFFALSE 43160
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43080: LD_VAR 0 2
43084: PPUSH
43085: CALL_OW 247
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: IN
43100: IFTRUE 43123
43102: PUSH
43103: LD_VAR 0 1
43107: PPUSH
43108: CALL_OW 255
43112: PPUSH
43113: LD_VAR 0 2
43117: PPUSH
43118: CALL_OW 292
43122: OR
43123: IFFALSE 43141
// ComAttackUnit ( unit , enemy ) else
43125: LD_VAR 0 1
43129: PPUSH
43130: LD_VAR 0 2
43134: PPUSH
43135: CALL_OW 115
43139: GO 43160
// ComAgressiveMove ( unit , x , y ) ;
43141: LD_VAR 0 1
43145: PPUSH
43146: LD_VAR 0 4
43150: PPUSH
43151: LD_VAR 0 5
43155: PPUSH
43156: CALL_OW 114
// end ;
43160: LD_VAR 0 3
43164: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43165: LD_INT 0
43167: PPUSH
43168: PPUSH
43169: PPUSH
// list := AreaToList ( area , 0 ) ;
43170: LD_ADDR_VAR 0 5
43174: PUSH
43175: LD_VAR 0 1
43179: PPUSH
43180: LD_INT 0
43182: PPUSH
43183: CALL_OW 517
43187: ST_TO_ADDR
// if not list then
43188: LD_VAR 0 5
43192: NOT
43193: IFFALSE 43197
// exit ;
43195: GO 43327
// if all then
43197: LD_VAR 0 2
43201: IFFALSE 43289
// begin for i := 1 to list [ 1 ] do
43203: LD_ADDR_VAR 0 4
43207: PUSH
43208: DOUBLE
43209: LD_INT 1
43211: DEC
43212: ST_TO_ADDR
43213: LD_VAR 0 5
43217: PUSH
43218: LD_INT 1
43220: ARRAY
43221: PUSH
43222: FOR_TO
43223: IFFALSE 43285
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43225: LD_ADDR_VAR 0 3
43229: PUSH
43230: LD_VAR 0 3
43234: PPUSH
43235: LD_VAR 0 3
43239: PUSH
43240: LD_INT 1
43242: PLUS
43243: PPUSH
43244: LD_VAR 0 5
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: PUSH
43253: LD_VAR 0 4
43257: ARRAY
43258: PUSH
43259: LD_VAR 0 5
43263: PUSH
43264: LD_INT 2
43266: ARRAY
43267: PUSH
43268: LD_VAR 0 4
43272: ARRAY
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PPUSH
43278: CALL_OW 1
43282: ST_TO_ADDR
43283: GO 43222
43285: POP
43286: POP
// exit ;
43287: GO 43327
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43289: LD_ADDR_VAR 0 3
43293: PUSH
43294: LD_VAR 0 5
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: PUSH
43307: LD_VAR 0 5
43311: PUSH
43312: LD_INT 2
43314: ARRAY
43315: PUSH
43316: LD_INT 1
43318: ARRAY
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: ST_TO_ADDR
// end ;
43327: LD_VAR 0 3
43331: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43332: LD_INT 0
43334: PPUSH
43335: PPUSH
// list := AreaToList ( area , 0 ) ;
43336: LD_ADDR_VAR 0 4
43340: PUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: LD_INT 0
43348: PPUSH
43349: CALL_OW 517
43353: ST_TO_ADDR
// if not list then
43354: LD_VAR 0 4
43358: NOT
43359: IFFALSE 43363
// exit ;
43361: GO 43404
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_VAR 0 4
43372: PUSH
43373: LD_INT 1
43375: ARRAY
43376: PUSH
43377: LD_INT 1
43379: ARRAY
43380: PUSH
43381: LD_VAR 0 4
43385: PUSH
43386: LD_INT 2
43388: ARRAY
43389: PUSH
43390: LD_INT 1
43392: ARRAY
43393: PUSH
43394: LD_VAR 0 2
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// end ;
43404: LD_VAR 0 3
43408: RET
// export function First ( array ) ; begin
43409: LD_INT 0
43411: PPUSH
// if not array then
43412: LD_VAR 0 1
43416: NOT
43417: IFFALSE 43421
// exit ;
43419: GO 43435
// result := array [ 1 ] ;
43421: LD_ADDR_VAR 0 2
43425: PUSH
43426: LD_VAR 0 1
43430: PUSH
43431: LD_INT 1
43433: ARRAY
43434: ST_TO_ADDR
// end ;
43435: LD_VAR 0 2
43439: RET
// export function Last ( array ) ; begin
43440: LD_INT 0
43442: PPUSH
// if not array then
43443: LD_VAR 0 1
43447: NOT
43448: IFFALSE 43452
// exit ;
43450: GO 43468
// result := array [ array ] ;
43452: LD_ADDR_VAR 0 2
43456: PUSH
43457: LD_VAR 0 1
43461: PUSH
43462: LD_VAR 0 1
43466: ARRAY
43467: ST_TO_ADDR
// end ;
43468: LD_VAR 0 2
43472: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43473: LD_INT 0
43475: PPUSH
43476: PPUSH
// result := [ ] ;
43477: LD_ADDR_VAR 0 5
43481: PUSH
43482: EMPTY
43483: ST_TO_ADDR
// if not array then
43484: LD_VAR 0 1
43488: NOT
43489: IFFALSE 43493
// exit ;
43491: GO 43605
// for i := 1 to array do
43493: LD_ADDR_VAR 0 6
43497: PUSH
43498: DOUBLE
43499: LD_INT 1
43501: DEC
43502: ST_TO_ADDR
43503: LD_VAR 0 1
43507: PUSH
43508: FOR_TO
43509: IFFALSE 43603
// if array [ i ] [ index ] = value then
43511: LD_VAR 0 1
43515: PUSH
43516: LD_VAR 0 6
43520: ARRAY
43521: PUSH
43522: LD_VAR 0 2
43526: ARRAY
43527: PUSH
43528: LD_VAR 0 3
43532: EQUAL
43533: IFFALSE 43601
// begin if indexColumn then
43535: LD_VAR 0 4
43539: IFFALSE 43575
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43541: LD_ADDR_VAR 0 5
43545: PUSH
43546: LD_VAR 0 5
43550: PPUSH
43551: LD_VAR 0 1
43555: PUSH
43556: LD_VAR 0 6
43560: ARRAY
43561: PUSH
43562: LD_VAR 0 4
43566: ARRAY
43567: PPUSH
43568: CALL 38613 0 2
43572: ST_TO_ADDR
43573: GO 43601
// result := Join ( result , array [ i ] ) ;
43575: LD_ADDR_VAR 0 5
43579: PUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: LD_VAR 0 1
43589: PUSH
43590: LD_VAR 0 6
43594: ARRAY
43595: PPUSH
43596: CALL 38613 0 2
43600: ST_TO_ADDR
// end ;
43601: GO 43508
43603: POP
43604: POP
// end ;
43605: LD_VAR 0 5
43609: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43610: LD_INT 0
43612: PPUSH
// if not vehicles or not parkingPoint then
43613: LD_VAR 0 1
43617: NOT
43618: IFTRUE 43627
43620: PUSH
43621: LD_VAR 0 2
43625: NOT
43626: OR
43627: IFFALSE 43631
// exit ;
43629: GO 43729
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43631: LD_ADDR_VAR 0 1
43635: PUSH
43636: LD_VAR 0 1
43640: PPUSH
43641: LD_INT 50
43643: PUSH
43644: EMPTY
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: LD_INT 92
43652: PUSH
43653: LD_VAR 0 2
43657: PUSH
43658: LD_INT 1
43660: ARRAY
43661: PUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_INT 2
43669: ARRAY
43670: PUSH
43671: LD_INT 8
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 72
43692: ST_TO_ADDR
// if not vehicles then
43693: LD_VAR 0 1
43697: NOT
43698: IFFALSE 43702
// exit ;
43700: GO 43729
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43702: LD_VAR 0 1
43706: PPUSH
43707: LD_VAR 0 2
43711: PUSH
43712: LD_INT 1
43714: ARRAY
43715: PPUSH
43716: LD_VAR 0 2
43720: PUSH
43721: LD_INT 2
43723: ARRAY
43724: PPUSH
43725: CALL_OW 111
// end ;
43729: LD_VAR 0 3
43733: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43734: LD_INT 0
43736: PPUSH
43737: PPUSH
43738: PPUSH
// if not side or not area then
43739: LD_VAR 0 1
43743: NOT
43744: IFTRUE 43753
43746: PUSH
43747: LD_VAR 0 2
43751: NOT
43752: OR
43753: IFFALSE 43757
// exit ;
43755: GO 43876
// tmp := AreaToList ( area , 0 ) ;
43757: LD_ADDR_VAR 0 5
43761: PUSH
43762: LD_VAR 0 2
43766: PPUSH
43767: LD_INT 0
43769: PPUSH
43770: CALL_OW 517
43774: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43775: LD_ADDR_VAR 0 4
43779: PUSH
43780: DOUBLE
43781: LD_INT 1
43783: DEC
43784: ST_TO_ADDR
43785: LD_VAR 0 5
43789: PUSH
43790: LD_INT 1
43792: ARRAY
43793: PUSH
43794: FOR_TO
43795: IFFALSE 43874
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43797: LD_VAR 0 5
43801: PUSH
43802: LD_INT 1
43804: ARRAY
43805: PUSH
43806: LD_VAR 0 4
43810: ARRAY
43811: PPUSH
43812: LD_VAR 0 5
43816: PUSH
43817: LD_INT 2
43819: ARRAY
43820: PUSH
43821: LD_VAR 0 4
43825: ARRAY
43826: PPUSH
43827: CALL_OW 351
43831: IFFALSE 43872
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43833: LD_VAR 0 5
43837: PUSH
43838: LD_INT 1
43840: ARRAY
43841: PUSH
43842: LD_VAR 0 4
43846: ARRAY
43847: PPUSH
43848: LD_VAR 0 5
43852: PUSH
43853: LD_INT 2
43855: ARRAY
43856: PUSH
43857: LD_VAR 0 4
43861: ARRAY
43862: PPUSH
43863: LD_VAR 0 1
43867: PPUSH
43868: CALL_OW 244
// end ;
43872: GO 43794
43874: POP
43875: POP
// end ;
43876: LD_VAR 0 3
43880: RET
