// starting begin ResetFog ;
   0: CALL_OW 335
// end ;
   4: END
// function K ( x ) ; begin
   5: LD_INT 0
   7: PPUSH
// if x = 0 then
   8: LD_VAR 0 1
  12: PUSH
  13: LD_INT 0
  15: EQUAL
  16: IFFALSE 20
// exit ;
  18: GO 40
// result := K ( Dec ( x ) ) ;
  20: LD_ADDR_VAR 0 2
  24: PUSH
  25: LD_VAR 0 1
  29: PPUSH
  30: CALL 39613 0 1
  34: PPUSH
  35: CALL 5 0 1
  39: ST_TO_ADDR
// end ;
  40: LD_VAR 0 2
  44: RET
// every 0 0$1 do
  45: GO 47
  47: DISABLE
// display_strings := K ( 10 ) ; end_of_file
  48: LD_ADDR_OWVAR 47
  52: PUSH
  53: LD_INT 10
  55: PPUSH
  56: CALL 5 0 1
  60: ST_TO_ADDR
  61: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
  62: LD_INT 0
  64: PPUSH
  65: PPUSH
// if exist_mode then
  66: LD_VAR 0 2
  70: IFFALSE 116
// begin unit := CreateCharacter ( prefix & ident ) ;
  72: LD_ADDR_VAR 0 5
  76: PUSH
  77: LD_VAR 0 3
  81: PUSH
  82: LD_VAR 0 1
  86: STR
  87: PPUSH
  88: CALL_OW 34
  92: ST_TO_ADDR
// if unit then
  93: LD_VAR 0 5
  97: IFFALSE 114
// DeleteCharacters ( prefix & ident ) ;
  99: LD_VAR 0 3
 103: PUSH
 104: LD_VAR 0 1
 108: STR
 109: PPUSH
 110: CALL_OW 40
// end else
 114: GO 131
// unit := NewCharacter ( ident ) ;
 116: LD_ADDR_VAR 0 5
 120: PUSH
 121: LD_VAR 0 1
 125: PPUSH
 126: CALL_OW 25
 130: ST_TO_ADDR
// result := unit ;
 131: LD_ADDR_VAR 0 4
 135: PUSH
 136: LD_VAR 0 5
 140: ST_TO_ADDR
// end ;
 141: LD_VAR 0 4
 145: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 146: LD_INT 0
 148: PPUSH
 149: PPUSH
// if exist_mode then
 150: LD_VAR 0 2
 154: IFFALSE 179
// unit := CreateCharacter ( prefix & ident ) else
 156: LD_ADDR_VAR 0 5
 160: PUSH
 161: LD_VAR 0 3
 165: PUSH
 166: LD_VAR 0 1
 170: STR
 171: PPUSH
 172: CALL_OW 34
 176: ST_TO_ADDR
 177: GO 194
// unit := NewCharacter ( ident ) ;
 179: LD_ADDR_VAR 0 5
 183: PUSH
 184: LD_VAR 0 1
 188: PPUSH
 189: CALL_OW 25
 193: ST_TO_ADDR
// result := unit ;
 194: LD_ADDR_VAR 0 4
 198: PUSH
 199: LD_VAR 0 5
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 4
 208: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 209: LD_INT 0
 211: PPUSH
 212: PPUSH
// if not side or not nation then
 213: LD_VAR 0 1
 217: NOT
 218: IFTRUE 227
 220: PUSH
 221: LD_VAR 0 2
 225: NOT
 226: OR
 227: IFFALSE 231
// exit ;
 229: GO 1025
// case nation of nation_american :
 231: LD_VAR 0 2
 235: PUSH
 236: LD_INT 1
 238: DOUBLE
 239: EQUAL
 240: IFTRUE 244
 242: GO 466
 244: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
 245: LD_ADDR_VAR 0 4
 249: PUSH
 250: LD_INT 35
 252: PUSH
 253: LD_INT 45
 255: PUSH
 256: LD_INT 46
 258: PUSH
 259: LD_INT 47
 261: PUSH
 262: LD_INT 82
 264: PUSH
 265: LD_INT 83
 267: PUSH
 268: LD_INT 84
 270: PUSH
 271: LD_INT 85
 273: PUSH
 274: LD_INT 86
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 6
 285: PUSH
 286: LD_INT 15
 288: PUSH
 289: LD_INT 16
 291: PUSH
 292: LD_INT 7
 294: PUSH
 295: LD_INT 12
 297: PUSH
 298: LD_INT 13
 300: PUSH
 301: LD_INT 10
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 20
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 22
 315: PUSH
 316: LD_INT 25
 318: PUSH
 319: LD_INT 32
 321: PUSH
 322: LD_INT 27
 324: PUSH
 325: LD_INT 36
 327: PUSH
 328: LD_INT 69
 330: PUSH
 331: LD_INT 39
 333: PUSH
 334: LD_INT 34
 336: PUSH
 337: LD_INT 40
 339: PUSH
 340: LD_INT 48
 342: PUSH
 343: LD_INT 49
 345: PUSH
 346: LD_INT 50
 348: PUSH
 349: LD_INT 51
 351: PUSH
 352: LD_INT 52
 354: PUSH
 355: LD_INT 53
 357: PUSH
 358: LD_INT 54
 360: PUSH
 361: LD_INT 55
 363: PUSH
 364: LD_INT 56
 366: PUSH
 367: LD_INT 57
 369: PUSH
 370: LD_INT 58
 372: PUSH
 373: LD_INT 59
 375: PUSH
 376: LD_INT 60
 378: PUSH
 379: LD_INT 61
 381: PUSH
 382: LD_INT 62
 384: PUSH
 385: LD_INT 80
 387: PUSH
 388: LD_INT 82
 390: PUSH
 391: LD_INT 83
 393: PUSH
 394: LD_INT 84
 396: PUSH
 397: LD_INT 85
 399: PUSH
 400: LD_INT 86
 402: PUSH
 403: LD_INT 90
 405: PUSH
 406: LD_INT 93
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: ST_TO_ADDR
 464: GO 947
 466: LD_INT 2
 468: DOUBLE
 469: EQUAL
 470: IFTRUE 474
 472: GO 708
 474: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
 475: LD_ADDR_VAR 0 4
 479: PUSH
 480: LD_INT 35
 482: PUSH
 483: LD_INT 45
 485: PUSH
 486: LD_INT 46
 488: PUSH
 489: LD_INT 47
 491: PUSH
 492: LD_INT 82
 494: PUSH
 495: LD_INT 83
 497: PUSH
 498: LD_INT 84
 500: PUSH
 501: LD_INT 85
 503: PUSH
 504: LD_INT 87
 506: PUSH
 507: LD_INT 70
 509: PUSH
 510: LD_INT 1
 512: PUSH
 513: LD_INT 11
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 5
 524: PUSH
 525: LD_INT 6
 527: PUSH
 528: LD_INT 15
 530: PUSH
 531: LD_INT 18
 533: PUSH
 534: LD_INT 7
 536: PUSH
 537: LD_INT 17
 539: PUSH
 540: LD_INT 8
 542: PUSH
 543: LD_INT 20
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 72
 554: PUSH
 555: LD_INT 26
 557: PUSH
 558: LD_INT 69
 560: PUSH
 561: LD_INT 39
 563: PUSH
 564: LD_INT 40
 566: PUSH
 567: LD_INT 41
 569: PUSH
 570: LD_INT 42
 572: PUSH
 573: LD_INT 43
 575: PUSH
 576: LD_INT 48
 578: PUSH
 579: LD_INT 49
 581: PUSH
 582: LD_INT 50
 584: PUSH
 585: LD_INT 51
 587: PUSH
 588: LD_INT 52
 590: PUSH
 591: LD_INT 53
 593: PUSH
 594: LD_INT 54
 596: PUSH
 597: LD_INT 55
 599: PUSH
 600: LD_INT 56
 602: PUSH
 603: LD_INT 60
 605: PUSH
 606: LD_INT 61
 608: PUSH
 609: LD_INT 62
 611: PUSH
 612: LD_INT 66
 614: PUSH
 615: LD_INT 67
 617: PUSH
 618: LD_INT 68
 620: PUSH
 621: LD_INT 81
 623: PUSH
 624: LD_INT 82
 626: PUSH
 627: LD_INT 83
 629: PUSH
 630: LD_INT 84
 632: PUSH
 633: LD_INT 85
 635: PUSH
 636: LD_INT 87
 638: PUSH
 639: LD_INT 88
 641: PUSH
 642: LD_INT 92
 644: PUSH
 645: LD_INT 94
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: ST_TO_ADDR
 706: GO 947
 708: LD_INT 3
 710: DOUBLE
 711: EQUAL
 712: IFTRUE 716
 714: GO 946
 716: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
 717: LD_ADDR_VAR 0 4
 721: PUSH
 722: LD_INT 46
 724: PUSH
 725: LD_INT 47
 727: PUSH
 728: LD_INT 1
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 82
 736: PUSH
 737: LD_INT 83
 739: PUSH
 740: LD_INT 84
 742: PUSH
 743: LD_INT 85
 745: PUSH
 746: LD_INT 86
 748: PUSH
 749: LD_INT 11
 751: PUSH
 752: LD_INT 9
 754: PUSH
 755: LD_INT 20
 757: PUSH
 758: LD_INT 19
 760: PUSH
 761: LD_INT 21
 763: PUSH
 764: LD_INT 24
 766: PUSH
 767: LD_INT 22
 769: PUSH
 770: LD_INT 25
 772: PUSH
 773: LD_INT 28
 775: PUSH
 776: LD_INT 29
 778: PUSH
 779: LD_INT 30
 781: PUSH
 782: LD_INT 31
 784: PUSH
 785: LD_INT 37
 787: PUSH
 788: LD_INT 38
 790: PUSH
 791: LD_INT 32
 793: PUSH
 794: LD_INT 27
 796: PUSH
 797: LD_INT 33
 799: PUSH
 800: LD_INT 69
 802: PUSH
 803: LD_INT 39
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 40
 811: PUSH
 812: LD_INT 71
 814: PUSH
 815: LD_INT 23
 817: PUSH
 818: LD_INT 44
 820: PUSH
 821: LD_INT 48
 823: PUSH
 824: LD_INT 49
 826: PUSH
 827: LD_INT 50
 829: PUSH
 830: LD_INT 51
 832: PUSH
 833: LD_INT 52
 835: PUSH
 836: LD_INT 53
 838: PUSH
 839: LD_INT 54
 841: PUSH
 842: LD_INT 55
 844: PUSH
 845: LD_INT 56
 847: PUSH
 848: LD_INT 57
 850: PUSH
 851: LD_INT 58
 853: PUSH
 854: LD_INT 59
 856: PUSH
 857: LD_INT 63
 859: PUSH
 860: LD_INT 64
 862: PUSH
 863: LD_INT 65
 865: PUSH
 866: LD_INT 82
 868: PUSH
 869: LD_INT 83
 871: PUSH
 872: LD_INT 84
 874: PUSH
 875: LD_INT 85
 877: PUSH
 878: LD_INT 86
 880: PUSH
 881: LD_INT 89
 883: PUSH
 884: LD_INT 91
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: ST_TO_ADDR
 944: GO 947
 946: POP
// if state > - 1 and state < 3 then
 947: LD_VAR 0 3
 951: PUSH
 952: LD_INT 1
 954: NEG
 955: GREATER
 956: IFFALSE 968
 958: PUSH
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 3
 966: LESS
 967: AND
 968: IFFALSE 1025
// for i in result do
 970: LD_ADDR_VAR 0 5
 974: PUSH
 975: LD_VAR 0 4
 979: PUSH
 980: FOR_IN
 981: IFFALSE 1023
// if GetTech ( i , side ) <> state then
 983: LD_VAR 0 5
 987: PPUSH
 988: LD_VAR 0 1
 992: PPUSH
 993: CALL_OW 321
 997: PUSH
 998: LD_VAR 0 3
1002: NONEQUAL
1003: IFFALSE 1021
// result := result diff i ;
1005: LD_ADDR_VAR 0 4
1009: PUSH
1010: LD_VAR 0 4
1014: PUSH
1015: LD_VAR 0 5
1019: DIFF
1020: ST_TO_ADDR
1021: GO 980
1023: POP
1024: POP
// end ;
1025: LD_VAR 0 4
1029: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1030: LD_INT 0
1032: PPUSH
1033: PPUSH
1034: PPUSH
// result := true ;
1035: LD_ADDR_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1043: LD_ADDR_VAR 0 5
1047: PUSH
1048: LD_VAR 0 2
1052: PPUSH
1053: CALL_OW 480
1057: ST_TO_ADDR
// if not tmp then
1058: LD_VAR 0 5
1062: NOT
1063: IFFALSE 1067
// exit ;
1065: GO 1116
// for i in tmp do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: LD_VAR 0 5
1076: PUSH
1077: FOR_IN
1078: IFFALSE 1114
// if GetTech ( i , side ) <> state_researched then
1080: LD_VAR 0 4
1084: PPUSH
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 321
1094: PUSH
1095: LD_INT 2
1097: NONEQUAL
1098: IFFALSE 1112
// begin result := false ;
1100: LD_ADDR_VAR 0 3
1104: PUSH
1105: LD_INT 0
1107: ST_TO_ADDR
// exit ;
1108: POP
1109: POP
1110: GO 1116
// end ;
1112: GO 1077
1114: POP
1115: POP
// end ;
1116: LD_VAR 0 3
1120: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1121: LD_INT 0
1123: PPUSH
1124: PPUSH
1125: PPUSH
1126: PPUSH
1127: PPUSH
1128: PPUSH
1129: PPUSH
1130: PPUSH
1131: PPUSH
1132: PPUSH
1133: PPUSH
1134: PPUSH
1135: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1136: LD_VAR 0 1
1140: NOT
1141: IFTRUE 1158
1143: PUSH
1144: LD_VAR 0 1
1148: PPUSH
1149: CALL_OW 257
1153: PUSH
1154: LD_INT 9
1156: NONEQUAL
1157: OR
1158: IFFALSE 1162
// exit ;
1160: GO 1741
// side := GetSide ( unit ) ;
1162: LD_ADDR_VAR 0 9
1166: PUSH
1167: LD_VAR 0 1
1171: PPUSH
1172: CALL_OW 255
1176: ST_TO_ADDR
// tech_space := tech_spacanom ;
1177: LD_ADDR_VAR 0 12
1181: PUSH
1182: LD_INT 29
1184: ST_TO_ADDR
// tech_time := tech_taurad ;
1185: LD_ADDR_VAR 0 13
1189: PUSH
1190: LD_INT 28
1192: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1193: LD_ADDR_VAR 0 11
1197: PUSH
1198: LD_VAR 0 1
1202: PPUSH
1203: CALL_OW 310
1207: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1208: LD_VAR 0 11
1212: PPUSH
1213: CALL_OW 247
1217: PUSH
1218: LD_INT 2
1220: EQUAL
1221: IFFALSE 1225
// exit ;
1223: GO 1741
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1225: LD_ADDR_VAR 0 8
1229: PUSH
1230: LD_INT 81
1232: PUSH
1233: LD_VAR 0 9
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 3
1244: PUSH
1245: LD_INT 21
1247: PUSH
1248: LD_INT 3
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PPUSH
1263: CALL_OW 69
1267: ST_TO_ADDR
// if not tmp then
1268: LD_VAR 0 8
1272: NOT
1273: IFFALSE 1277
// exit ;
1275: GO 1741
// if in_unit then
1277: LD_VAR 0 11
1281: IFFALSE 1305
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1283: LD_ADDR_VAR 0 10
1287: PUSH
1288: LD_VAR 0 8
1292: PPUSH
1293: LD_VAR 0 11
1297: PPUSH
1298: CALL_OW 74
1302: ST_TO_ADDR
1303: GO 1325
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1305: LD_ADDR_VAR 0 10
1309: PUSH
1310: LD_VAR 0 8
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 74
1324: ST_TO_ADDR
// if not enemy then
1325: LD_VAR 0 10
1329: NOT
1330: IFFALSE 1334
// exit ;
1332: GO 1741
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1334: LD_VAR 0 11
1338: IFFALSE 1360
1340: PUSH
1341: LD_VAR 0 11
1345: PPUSH
1346: LD_VAR 0 10
1350: PPUSH
1351: CALL_OW 296
1355: PUSH
1356: LD_INT 13
1358: GREATER
1359: AND
1360: IFTRUE 1382
1362: PUSH
1363: LD_VAR 0 1
1367: PPUSH
1368: LD_VAR 0 10
1372: PPUSH
1373: CALL_OW 296
1377: PUSH
1378: LD_INT 12
1380: GREATER
1381: OR
1382: IFFALSE 1386
// exit ;
1384: GO 1741
// missile := [ 1 ] ;
1386: LD_ADDR_VAR 0 14
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: EMPTY
1395: LIST
1396: ST_TO_ADDR
// if Researched ( side , tech_space ) then
1397: LD_VAR 0 9
1401: PPUSH
1402: LD_VAR 0 12
1406: PPUSH
1407: CALL_OW 325
1411: IFFALSE 1440
// missile := Replace ( missile , missile + 1 , 2 ) ;
1413: LD_ADDR_VAR 0 14
1417: PUSH
1418: LD_VAR 0 14
1422: PPUSH
1423: LD_VAR 0 14
1427: PUSH
1428: LD_INT 1
1430: PLUS
1431: PPUSH
1432: LD_INT 2
1434: PPUSH
1435: CALL_OW 1
1439: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
1440: LD_VAR 0 9
1444: PPUSH
1445: LD_VAR 0 13
1449: PPUSH
1450: CALL_OW 325
1454: IFFALSE 1478
1456: PUSH
1457: LD_VAR 0 10
1461: PPUSH
1462: CALL_OW 255
1466: PPUSH
1467: LD_VAR 0 13
1471: PPUSH
1472: CALL_OW 325
1476: NOT
1477: AND
1478: IFFALSE 1507
// missile := Replace ( missile , missile + 1 , 3 ) ;
1480: LD_ADDR_VAR 0 14
1484: PUSH
1485: LD_VAR 0 14
1489: PPUSH
1490: LD_VAR 0 14
1494: PUSH
1495: LD_INT 1
1497: PLUS
1498: PPUSH
1499: LD_INT 3
1501: PPUSH
1502: CALL_OW 1
1506: ST_TO_ADDR
// if missile < 2 then
1507: LD_VAR 0 14
1511: PUSH
1512: LD_INT 2
1514: LESS
1515: IFFALSE 1519
// exit ;
1517: GO 1741
// x := GetX ( enemy ) ;
1519: LD_ADDR_VAR 0 4
1523: PUSH
1524: LD_VAR 0 10
1528: PPUSH
1529: CALL_OW 250
1533: ST_TO_ADDR
// y := GetY ( enemy ) ;
1534: LD_ADDR_VAR 0 5
1538: PUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 251
1548: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
1549: LD_ADDR_VAR 0 6
1553: PUSH
1554: LD_VAR 0 4
1558: PUSH
1559: LD_INT 1
1561: NEG
1562: PPUSH
1563: LD_INT 1
1565: PPUSH
1566: CALL_OW 12
1570: PLUS
1571: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
1572: LD_ADDR_VAR 0 7
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: NEG
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL_OW 12
1593: PLUS
1594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1595: LD_VAR 0 6
1599: PPUSH
1600: LD_VAR 0 7
1604: PPUSH
1605: CALL_OW 488
1609: NOT
1610: IFFALSE 1632
// begin _x := x ;
1612: LD_ADDR_VAR 0 6
1616: PUSH
1617: LD_VAR 0 4
1621: ST_TO_ADDR
// _y := y ;
1622: LD_ADDR_VAR 0 7
1626: PUSH
1627: LD_VAR 0 5
1631: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
1632: LD_ADDR_VAR 0 3
1636: PUSH
1637: LD_INT 1
1639: PPUSH
1640: LD_VAR 0 14
1644: PPUSH
1645: CALL_OW 12
1649: ST_TO_ADDR
// case i of 1 :
1650: LD_VAR 0 3
1654: PUSH
1655: LD_INT 1
1657: DOUBLE
1658: EQUAL
1659: IFTRUE 1663
1661: GO 1680
1663: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
1664: LD_VAR 0 1
1668: PPUSH
1669: LD_VAR 0 10
1673: PPUSH
1674: CALL_OW 115
1678: GO 1741
1680: LD_INT 2
1682: DOUBLE
1683: EQUAL
1684: IFTRUE 1688
1686: GO 1710
1688: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
1689: LD_VAR 0 1
1693: PPUSH
1694: LD_VAR 0 6
1698: PPUSH
1699: LD_VAR 0 7
1703: PPUSH
1704: CALL_OW 153
1708: GO 1741
1710: LD_INT 3
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1740
1718: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
1719: LD_VAR 0 1
1723: PPUSH
1724: LD_VAR 0 6
1728: PPUSH
1729: LD_VAR 0 7
1733: PPUSH
1734: CALL_OW 154
1738: GO 1741
1740: POP
// end ;
1741: LD_VAR 0 2
1745: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
1753: PPUSH
// if not unit or not building then
1754: LD_VAR 0 1
1758: NOT
1759: IFTRUE 1768
1761: PUSH
1762: LD_VAR 0 2
1766: NOT
1767: OR
1768: IFFALSE 1772
// exit ;
1770: GO 1930
// x := GetX ( building ) ;
1772: LD_ADDR_VAR 0 5
1776: PUSH
1777: LD_VAR 0 2
1781: PPUSH
1782: CALL_OW 250
1786: ST_TO_ADDR
// y := GetY ( building ) ;
1787: LD_ADDR_VAR 0 6
1791: PUSH
1792: LD_VAR 0 2
1796: PPUSH
1797: CALL_OW 251
1801: ST_TO_ADDR
// for i := 0 to 5 do
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: DOUBLE
1808: LD_INT 0
1810: DEC
1811: ST_TO_ADDR
1812: LD_INT 5
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1928
// begin _x := ShiftX ( x , i , 3 ) ;
1818: LD_ADDR_VAR 0 7
1822: PUSH
1823: LD_VAR 0 5
1827: PPUSH
1828: LD_VAR 0 4
1832: PPUSH
1833: LD_INT 3
1835: PPUSH
1836: CALL_OW 272
1840: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
1841: LD_ADDR_VAR 0 8
1845: PUSH
1846: LD_VAR 0 6
1850: PPUSH
1851: LD_VAR 0 4
1855: PPUSH
1856: LD_INT 3
1858: PPUSH
1859: CALL_OW 273
1863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
1864: LD_VAR 0 7
1868: PPUSH
1869: LD_VAR 0 8
1873: PPUSH
1874: CALL_OW 488
1878: NOT
1879: IFFALSE 1883
// continue ;
1881: GO 1815
// if HexInfo ( _x , _y ) = 0 then
1883: LD_VAR 0 7
1887: PPUSH
1888: LD_VAR 0 8
1892: PPUSH
1893: CALL_OW 428
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: IFFALSE 1926
// begin ComMoveXY ( unit , _x , _y ) ;
1903: LD_VAR 0 1
1907: PPUSH
1908: LD_VAR 0 7
1912: PPUSH
1913: LD_VAR 0 8
1917: PPUSH
1918: CALL_OW 111
// exit ;
1922: POP
1923: POP
1924: GO 1930
// end ; end ;
1926: GO 1815
1928: POP
1929: POP
// end ;
1930: LD_VAR 0 3
1934: RET
// export function ScanBase ( side , base_area ) ; begin
1935: LD_INT 0
1937: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
1938: LD_ADDR_VAR 0 3
1942: PUSH
1943: LD_VAR 0 2
1947: PPUSH
1948: LD_INT 81
1950: PUSH
1951: LD_VAR 0 1
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PPUSH
1960: CALL_OW 70
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
1975: PPUSH
// result := false ;
1976: LD_ADDR_VAR 0 2
1980: PUSH
1981: LD_INT 0
1983: ST_TO_ADDR
// side := GetSide ( unit ) ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: LD_VAR 0 1
1993: PPUSH
1994: CALL_OW 255
1998: ST_TO_ADDR
// nat := GetNation ( unit ) ;
1999: LD_ADDR_VAR 0 4
2003: PUSH
2004: LD_VAR 0 1
2008: PPUSH
2009: CALL_OW 248
2013: ST_TO_ADDR
// case nat of 1 :
2014: LD_VAR 0 4
2018: PUSH
2019: LD_INT 1
2021: DOUBLE
2022: EQUAL
2023: IFTRUE 2027
2025: GO 2038
2027: POP
// tech := tech_lassight ; 2 :
2028: LD_ADDR_VAR 0 5
2032: PUSH
2033: LD_INT 12
2035: ST_TO_ADDR
2036: GO 2077
2038: LD_INT 2
2040: DOUBLE
2041: EQUAL
2042: IFTRUE 2046
2044: GO 2057
2046: POP
// tech := tech_mortar ; 3 :
2047: LD_ADDR_VAR 0 5
2051: PUSH
2052: LD_INT 41
2054: ST_TO_ADDR
2055: GO 2077
2057: LD_INT 3
2059: DOUBLE
2060: EQUAL
2061: IFTRUE 2065
2063: GO 2076
2065: POP
// tech := tech_bazooka ; end ;
2066: LD_ADDR_VAR 0 5
2070: PUSH
2071: LD_INT 44
2073: ST_TO_ADDR
2074: GO 2077
2076: POP
// if Researched ( side , tech ) then
2077: LD_VAR 0 3
2081: PPUSH
2082: LD_VAR 0 5
2086: PPUSH
2087: CALL_OW 325
2091: IFFALSE 2118
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2093: LD_ADDR_VAR 0 2
2097: PUSH
2098: LD_INT 5
2100: PUSH
2101: LD_INT 8
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_VAR 0 4
2116: ARRAY
2117: ST_TO_ADDR
// end ;
2118: LD_VAR 0 2
2122: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2123: LD_INT 0
2125: PPUSH
2126: PPUSH
2127: PPUSH
// if not mines then
2128: LD_VAR 0 2
2132: NOT
2133: IFFALSE 2137
// exit ;
2135: GO 2281
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_INT 81
2144: PUSH
2145: LD_VAR 0 1
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 3
2156: PUSH
2157: LD_INT 21
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 69
2179: ST_TO_ADDR
// for i in mines do
2180: LD_ADDR_VAR 0 4
2184: PUSH
2185: LD_VAR 0 2
2189: PUSH
2190: FOR_IN
2191: IFFALSE 2279
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2193: LD_VAR 0 4
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: PPUSH
2202: LD_VAR 0 4
2206: PUSH
2207: LD_INT 2
2209: ARRAY
2210: PPUSH
2211: CALL_OW 458
2215: NOT
2216: IFFALSE 2220
// continue ;
2218: GO 2190
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2220: LD_VAR 0 4
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: PPUSH
2229: LD_VAR 0 4
2233: PUSH
2234: LD_INT 2
2236: ARRAY
2237: PPUSH
2238: CALL_OW 428
2242: PUSH
2243: LD_VAR 0 5
2247: IN
2248: IFFALSE 2277
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2250: LD_VAR 0 4
2254: PUSH
2255: LD_INT 1
2257: ARRAY
2258: PPUSH
2259: LD_VAR 0 4
2263: PUSH
2264: LD_INT 2
2266: ARRAY
2267: PPUSH
2268: LD_VAR 0 1
2272: PPUSH
2273: CALL_OW 456
// end ;
2277: GO 2190
2279: POP
2280: POP
// end ;
2281: LD_VAR 0 3
2285: RET
// export function Count ( array ) ; begin
2286: LD_INT 0
2288: PPUSH
// result := array + 0 ;
2289: LD_ADDR_VAR 0 2
2293: PUSH
2294: LD_VAR 0 1
2298: PUSH
2299: LD_INT 0
2301: PLUS
2302: ST_TO_ADDR
// end ;
2303: LD_VAR 0 2
2307: RET
// export function IsEmpty ( building ) ; begin
2308: LD_INT 0
2310: PPUSH
// if not building then
2311: LD_VAR 0 1
2315: NOT
2316: IFFALSE 2320
// exit ;
2318: GO 2363
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 1
2329: PUSH
2330: LD_INT 22
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 255
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 58
2349: PUSH
2350: EMPTY
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PPUSH
2357: CALL_OW 69
2361: IN
2362: ST_TO_ADDR
// end ;
2363: LD_VAR 0 2
2367: RET
// export function IsNotFull ( building ) ; var places ; begin
2368: LD_INT 0
2370: PPUSH
2371: PPUSH
// if not building then
2372: LD_VAR 0 1
2376: NOT
2377: IFFALSE 2381
// exit ;
2379: GO 2409
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: LD_VAR 0 1
2390: PPUSH
2391: LD_INT 3
2393: PUSH
2394: LD_INT 62
2396: PUSH
2397: EMPTY
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: CALL_OW 72
2408: ST_TO_ADDR
// end ;
2409: LD_VAR 0 2
2413: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
2414: LD_INT 0
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
// tmp := [ ] ;
2420: LD_ADDR_VAR 0 3
2424: PUSH
2425: EMPTY
2426: ST_TO_ADDR
// list := [ ] ;
2427: LD_ADDR_VAR 0 5
2431: PUSH
2432: EMPTY
2433: ST_TO_ADDR
// for i = 16 to 25 do
2434: LD_ADDR_VAR 0 4
2438: PUSH
2439: DOUBLE
2440: LD_INT 16
2442: DEC
2443: ST_TO_ADDR
2444: LD_INT 25
2446: PUSH
2447: FOR_TO
2448: IFFALSE 2521
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
2450: LD_ADDR_VAR 0 3
2454: PUSH
2455: LD_VAR 0 3
2459: PUSH
2460: LD_INT 22
2462: PUSH
2463: LD_VAR 0 1
2467: PPUSH
2468: CALL_OW 255
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: LD_INT 91
2479: PUSH
2480: LD_VAR 0 1
2484: PUSH
2485: LD_INT 6
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_VAR 0 4
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: PPUSH
2513: CALL_OW 69
2517: ADD
2518: ST_TO_ADDR
2519: GO 2447
2521: POP
2522: POP
// for i = 1 to tmp do
2523: LD_ADDR_VAR 0 4
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_VAR 0 3
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2627
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 5
2550: PUSH
2551: LD_VAR 0 3
2555: PUSH
2556: LD_VAR 0 4
2560: ARRAY
2561: PPUSH
2562: CALL_OW 266
2566: PUSH
2567: LD_VAR 0 3
2571: PUSH
2572: LD_VAR 0 4
2576: ARRAY
2577: PPUSH
2578: CALL_OW 250
2582: PUSH
2583: LD_VAR 0 3
2587: PUSH
2588: LD_VAR 0 4
2592: ARRAY
2593: PPUSH
2594: CALL_OW 251
2598: PUSH
2599: LD_VAR 0 3
2603: PUSH
2604: LD_VAR 0 4
2608: ARRAY
2609: PPUSH
2610: CALL_OW 254
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: PUSH
2621: EMPTY
2622: LIST
2623: ADD
2624: ST_TO_ADDR
2625: GO 2538
2627: POP
2628: POP
// result := list ;
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: LD_VAR 0 5
2638: ST_TO_ADDR
// end ;
2639: LD_VAR 0 2
2643: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
2644: LD_INT 0
2646: PPUSH
2647: PPUSH
2648: PPUSH
2649: PPUSH
2650: PPUSH
2651: PPUSH
2652: PPUSH
// if not factory then
2653: LD_VAR 0 1
2657: NOT
2658: IFFALSE 2662
// exit ;
2660: GO 3265
// if control = control_apeman then
2662: LD_VAR 0 4
2666: PUSH
2667: LD_INT 5
2669: EQUAL
2670: IFFALSE 2779
// begin tmp := UnitsInside ( factory ) ;
2672: LD_ADDR_VAR 0 8
2676: PUSH
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL_OW 313
2686: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
2687: LD_VAR 0 8
2691: PPUSH
2692: LD_INT 25
2694: PUSH
2695: LD_INT 12
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 72
2706: NOT
2707: IFFALSE 2717
// control := control_manual ;
2709: LD_ADDR_VAR 0 4
2713: PUSH
2714: LD_INT 1
2716: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
2717: LD_ADDR_VAR 0 8
2721: PUSH
2722: LD_VAR 0 1
2726: PPUSH
2727: CALL 2414 0 1
2731: ST_TO_ADDR
// if tmp then
2732: LD_VAR 0 8
2736: IFFALSE 2779
// begin for i in tmp do
2738: LD_ADDR_VAR 0 7
2742: PUSH
2743: LD_VAR 0 8
2747: PUSH
2748: FOR_IN
2749: IFFALSE 2777
// if i [ 1 ] = b_ext_radio then
2751: LD_VAR 0 7
2755: PUSH
2756: LD_INT 1
2758: ARRAY
2759: PUSH
2760: LD_INT 22
2762: EQUAL
2763: IFFALSE 2775
// begin control := control_remote ;
2765: LD_ADDR_VAR 0 4
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// break ;
2773: GO 2777
// end ;
2775: GO 2748
2777: POP
2778: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
2779: LD_VAR 0 1
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_VAR 0 5
2803: PPUSH
2804: CALL_OW 448
2808: IFFALSE 2843
// begin result := [ chassis , engine , control , weapon ] ;
2810: LD_ADDR_VAR 0 6
2814: PUSH
2815: LD_VAR 0 2
2819: PUSH
2820: LD_VAR 0 3
2824: PUSH
2825: LD_VAR 0 4
2829: PUSH
2830: LD_VAR 0 5
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: ST_TO_ADDR
// exit ;
2841: GO 3265
// end ; _chassis := AvailableChassisList ( factory ) ;
2843: LD_ADDR_VAR 0 9
2847: PUSH
2848: LD_VAR 0 1
2852: PPUSH
2853: CALL_OW 475
2857: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
2858: LD_ADDR_VAR 0 11
2862: PUSH
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL_OW 476
2872: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
2873: LD_ADDR_VAR 0 12
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 477
2887: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
2888: LD_ADDR_VAR 0 10
2892: PUSH
2893: LD_VAR 0 1
2897: PPUSH
2898: CALL_OW 478
2902: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
2903: LD_VAR 0 9
2907: NOT
2908: IFTRUE 2917
2910: PUSH
2911: LD_VAR 0 11
2915: NOT
2916: OR
2917: IFTRUE 2926
2919: PUSH
2920: LD_VAR 0 12
2924: NOT
2925: OR
2926: IFTRUE 2935
2928: PUSH
2929: LD_VAR 0 10
2933: NOT
2934: OR
2935: IFFALSE 2970
// begin result := [ chassis , engine , control , weapon ] ;
2937: LD_ADDR_VAR 0 6
2941: PUSH
2942: LD_VAR 0 2
2946: PUSH
2947: LD_VAR 0 3
2951: PUSH
2952: LD_VAR 0 4
2956: PUSH
2957: LD_VAR 0 5
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: ST_TO_ADDR
// exit ;
2968: GO 3265
// end ; if not chassis in _chassis then
2970: LD_VAR 0 2
2974: PUSH
2975: LD_VAR 0 9
2979: IN
2980: NOT
2981: IFFALSE 3007
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
2983: LD_ADDR_VAR 0 2
2987: PUSH
2988: LD_VAR 0 9
2992: PUSH
2993: LD_INT 1
2995: PPUSH
2996: LD_VAR 0 9
3000: PPUSH
3001: CALL_OW 12
3005: ARRAY
3006: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3007: LD_VAR 0 2
3011: PPUSH
3012: LD_VAR 0 3
3016: PPUSH
3017: CALL 3270 0 2
3021: NOT
3022: IFFALSE 3083
// repeat engine := _engine [ 1 ] ;
3024: LD_ADDR_VAR 0 3
3028: PUSH
3029: LD_VAR 0 11
3033: PUSH
3034: LD_INT 1
3036: ARRAY
3037: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3038: LD_ADDR_VAR 0 11
3042: PUSH
3043: LD_VAR 0 11
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: CALL_OW 3
3055: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3056: LD_VAR 0 2
3060: PPUSH
3061: LD_VAR 0 3
3065: PPUSH
3066: CALL 3270 0 2
3070: IFTRUE 3081
3072: PUSH
3073: LD_VAR 0 11
3077: PUSH
3078: EMPTY
3079: EQUAL
3080: OR
3081: IFFALSE 3024
// if not control in _control then
3083: LD_VAR 0 4
3087: PUSH
3088: LD_VAR 0 12
3092: IN
3093: NOT
3094: IFFALSE 3120
// control := _control [ rand ( 1 , _control ) ] ;
3096: LD_ADDR_VAR 0 4
3100: PUSH
3101: LD_VAR 0 12
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_VAR 0 12
3113: PPUSH
3114: CALL_OW 12
3118: ARRAY
3119: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3120: LD_VAR 0 2
3124: PPUSH
3125: LD_VAR 0 5
3129: PPUSH
3130: CALL 3492 0 2
3134: NOT
3135: IFFALSE 3196
// repeat weapon := _weapon [ 1 ] ;
3137: LD_ADDR_VAR 0 5
3141: PUSH
3142: LD_VAR 0 10
3146: PUSH
3147: LD_INT 1
3149: ARRAY
3150: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3151: LD_ADDR_VAR 0 10
3155: PUSH
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: CALL_OW 3
3168: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3169: LD_VAR 0 2
3173: PPUSH
3174: LD_VAR 0 5
3178: PPUSH
3179: CALL 3492 0 2
3183: IFTRUE 3194
3185: PUSH
3186: LD_VAR 0 10
3190: PUSH
3191: EMPTY
3192: EQUAL
3193: OR
3194: IFFALSE 3137
// result := [ ] ;
3196: LD_ADDR_VAR 0 6
3200: PUSH
3201: EMPTY
3202: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_VAR 0 4
3222: PPUSH
3223: LD_VAR 0 5
3227: PPUSH
3228: CALL_OW 448
3232: IFFALSE 3265
// result := [ chassis , engine , control , weapon ] ;
3234: LD_ADDR_VAR 0 6
3238: PUSH
3239: LD_VAR 0 2
3243: PUSH
3244: LD_VAR 0 3
3248: PUSH
3249: LD_VAR 0 4
3253: PUSH
3254: LD_VAR 0 5
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: ST_TO_ADDR
// end ;
3265: LD_VAR 0 6
3269: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3270: LD_INT 0
3272: PPUSH
// if not chassis or not engine then
3273: LD_VAR 0 1
3277: NOT
3278: IFTRUE 3287
3280: PUSH
3281: LD_VAR 0 2
3285: NOT
3286: OR
3287: IFFALSE 3291
// exit ;
3289: GO 3487
// case engine of engine_solar :
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 2
3298: DOUBLE
3299: EQUAL
3300: IFTRUE 3304
3302: GO 3342
3304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: LD_INT 11
3312: PUSH
3313: LD_INT 12
3315: PUSH
3316: LD_INT 13
3318: PUSH
3319: LD_INT 14
3321: PUSH
3322: LD_INT 1
3324: PUSH
3325: LD_INT 2
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: ST_TO_ADDR
3340: GO 3471
3342: LD_INT 1
3344: DOUBLE
3345: EQUAL
3346: IFTRUE 3350
3348: GO 3412
3350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3351: LD_ADDR_VAR 0 3
3355: PUSH
3356: LD_INT 11
3358: PUSH
3359: LD_INT 12
3361: PUSH
3362: LD_INT 13
3364: PUSH
3365: LD_INT 14
3367: PUSH
3368: LD_INT 1
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: LD_INT 3
3376: PUSH
3377: LD_INT 4
3379: PUSH
3380: LD_INT 5
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 23
3388: PUSH
3389: LD_INT 22
3391: PUSH
3392: LD_INT 24
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: ST_TO_ADDR
3410: GO 3471
3412: LD_INT 3
3414: DOUBLE
3415: EQUAL
3416: IFTRUE 3420
3418: GO 3470
3420: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_INT 13
3428: PUSH
3429: LD_INT 14
3431: PUSH
3432: LD_INT 2
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: LD_INT 4
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: LD_INT 21
3446: PUSH
3447: LD_INT 22
3449: PUSH
3450: LD_INT 23
3452: PUSH
3453: LD_INT 24
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: ST_TO_ADDR
3468: GO 3471
3470: POP
// result := ( chassis in result ) ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_VAR 0 1
3480: PUSH
3481: LD_VAR 0 3
3485: IN
3486: ST_TO_ADDR
// end ;
3487: LD_VAR 0 3
3491: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
3492: LD_INT 0
3494: PPUSH
// if not chassis or not weapon then
3495: LD_VAR 0 1
3499: NOT
3500: IFTRUE 3509
3502: PUSH
3503: LD_VAR 0 2
3507: NOT
3508: OR
3509: IFFALSE 3513
// exit ;
3511: GO 4573
// case weapon of us_machine_gun :
3513: LD_VAR 0 2
3517: PUSH
3518: LD_INT 2
3520: DOUBLE
3521: EQUAL
3522: IFTRUE 3526
3524: GO 3556
3526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: LD_INT 1
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 4
3543: PUSH
3544: LD_INT 5
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: ST_TO_ADDR
3554: GO 4557
3556: LD_INT 3
3558: DOUBLE
3559: EQUAL
3560: IFTRUE 3564
3562: GO 3594
3564: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 2
3575: PUSH
3576: LD_INT 3
3578: PUSH
3579: LD_INT 4
3581: PUSH
3582: LD_INT 5
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: ST_TO_ADDR
3592: GO 4557
3594: LD_INT 11
3596: DOUBLE
3597: EQUAL
3598: IFTRUE 3602
3600: GO 3632
3602: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 2
3613: PUSH
3614: LD_INT 3
3616: PUSH
3617: LD_INT 4
3619: PUSH
3620: LD_INT 5
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: ST_TO_ADDR
3630: GO 4557
3632: LD_INT 4
3634: DOUBLE
3635: EQUAL
3636: IFTRUE 3640
3638: GO 3666
3640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_INT 2
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: LD_INT 4
3654: PUSH
3655: LD_INT 5
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: ST_TO_ADDR
3664: GO 4557
3666: LD_INT 5
3668: DOUBLE
3669: EQUAL
3670: IFTRUE 3674
3672: GO 3700
3674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
3675: LD_ADDR_VAR 0 3
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 4
3688: PUSH
3689: LD_INT 5
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: ST_TO_ADDR
3698: GO 4557
3700: LD_INT 9
3702: DOUBLE
3703: EQUAL
3704: IFTRUE 3708
3706: GO 3734
3708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
3709: LD_ADDR_VAR 0 3
3713: PUSH
3714: LD_INT 2
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: LD_INT 4
3722: PUSH
3723: LD_INT 5
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: ST_TO_ADDR
3732: GO 4557
3734: LD_INT 7
3736: DOUBLE
3737: EQUAL
3738: IFTRUE 3742
3740: GO 3768
3742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: LD_INT 2
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 4
3756: PUSH
3757: LD_INT 5
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: ST_TO_ADDR
3766: GO 4557
3768: LD_INT 12
3770: DOUBLE
3771: EQUAL
3772: IFTRUE 3776
3774: GO 3802
3776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
3777: LD_ADDR_VAR 0 3
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: LD_INT 3
3787: PUSH
3788: LD_INT 4
3790: PUSH
3791: LD_INT 5
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: ST_TO_ADDR
3800: GO 4557
3802: LD_INT 13
3804: DOUBLE
3805: EQUAL
3806: IFTRUE 3810
3808: GO 3836
3810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: LD_INT 3
3821: PUSH
3822: LD_INT 4
3824: PUSH
3825: LD_INT 5
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: ST_TO_ADDR
3834: GO 4557
3836: LD_INT 14
3838: DOUBLE
3839: EQUAL
3840: IFTRUE 3844
3842: GO 3862
3844: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: LD_INT 4
3852: PUSH
3853: LD_INT 5
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: ST_TO_ADDR
3860: GO 4557
3862: LD_INT 6
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 3888
3870: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_INT 4
3878: PUSH
3879: LD_INT 5
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: ST_TO_ADDR
3886: GO 4557
3888: LD_INT 10
3890: DOUBLE
3891: EQUAL
3892: IFTRUE 3896
3894: GO 3914
3896: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
3897: LD_ADDR_VAR 0 3
3901: PUSH
3902: LD_INT 4
3904: PUSH
3905: LD_INT 5
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: ST_TO_ADDR
3912: GO 4557
3914: LD_INT 22
3916: DOUBLE
3917: EQUAL
3918: IFTRUE 3922
3920: GO 3948
3922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_INT 11
3930: PUSH
3931: LD_INT 12
3933: PUSH
3934: LD_INT 13
3936: PUSH
3937: LD_INT 14
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: ST_TO_ADDR
3946: GO 4557
3948: LD_INT 23
3950: DOUBLE
3951: EQUAL
3952: IFTRUE 3956
3954: GO 3982
3956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: LD_INT 11
3964: PUSH
3965: LD_INT 12
3967: PUSH
3968: LD_INT 13
3970: PUSH
3971: LD_INT 14
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: ST_TO_ADDR
3980: GO 4557
3982: LD_INT 24
3984: DOUBLE
3985: EQUAL
3986: IFTRUE 3990
3988: GO 4016
3990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: LD_INT 11
3998: PUSH
3999: LD_INT 12
4001: PUSH
4002: LD_INT 13
4004: PUSH
4005: LD_INT 14
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: ST_TO_ADDR
4014: GO 4557
4016: LD_INT 30
4018: DOUBLE
4019: EQUAL
4020: IFTRUE 4024
4022: GO 4050
4024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4025: LD_ADDR_VAR 0 3
4029: PUSH
4030: LD_INT 11
4032: PUSH
4033: LD_INT 12
4035: PUSH
4036: LD_INT 13
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: ST_TO_ADDR
4048: GO 4557
4050: LD_INT 25
4052: DOUBLE
4053: EQUAL
4054: IFTRUE 4058
4056: GO 4076
4058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4059: LD_ADDR_VAR 0 3
4063: PUSH
4064: LD_INT 13
4066: PUSH
4067: LD_INT 14
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: ST_TO_ADDR
4074: GO 4557
4076: LD_INT 27
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4102
4084: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: LD_INT 13
4092: PUSH
4093: LD_INT 14
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: ST_TO_ADDR
4100: GO 4557
4102: LD_INT 92
4104: DOUBLE
4105: EQUAL
4106: IFTRUE 4110
4108: GO 4136
4110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: LD_INT 11
4118: PUSH
4119: LD_INT 12
4121: PUSH
4122: LD_INT 13
4124: PUSH
4125: LD_INT 14
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
4134: GO 4557
4136: LD_INT 28
4138: DOUBLE
4139: EQUAL
4140: IFTRUE 4144
4142: GO 4162
4144: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_INT 13
4152: PUSH
4153: LD_INT 14
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: ST_TO_ADDR
4160: GO 4557
4162: LD_INT 29
4164: DOUBLE
4165: EQUAL
4166: IFTRUE 4170
4168: GO 4188
4170: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4171: LD_ADDR_VAR 0 3
4175: PUSH
4176: LD_INT 13
4178: PUSH
4179: LD_INT 14
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: ST_TO_ADDR
4186: GO 4557
4188: LD_INT 31
4190: DOUBLE
4191: EQUAL
4192: IFTRUE 4196
4194: GO 4214
4196: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4197: LD_ADDR_VAR 0 3
4201: PUSH
4202: LD_INT 13
4204: PUSH
4205: LD_INT 14
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: ST_TO_ADDR
4212: GO 4557
4214: LD_INT 26
4216: DOUBLE
4217: EQUAL
4218: IFTRUE 4222
4220: GO 4240
4222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4223: LD_ADDR_VAR 0 3
4227: PUSH
4228: LD_INT 13
4230: PUSH
4231: LD_INT 14
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: ST_TO_ADDR
4238: GO 4557
4240: LD_INT 42
4242: DOUBLE
4243: EQUAL
4244: IFTRUE 4248
4246: GO 4274
4248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4249: LD_ADDR_VAR 0 3
4253: PUSH
4254: LD_INT 21
4256: PUSH
4257: LD_INT 22
4259: PUSH
4260: LD_INT 23
4262: PUSH
4263: LD_INT 24
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: ST_TO_ADDR
4272: GO 4557
4274: LD_INT 43
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4308
4282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: LD_INT 21
4290: PUSH
4291: LD_INT 22
4293: PUSH
4294: LD_INT 23
4296: PUSH
4297: LD_INT 24
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: ST_TO_ADDR
4306: GO 4557
4308: LD_INT 44
4310: DOUBLE
4311: EQUAL
4312: IFTRUE 4316
4314: GO 4342
4316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4317: LD_ADDR_VAR 0 3
4321: PUSH
4322: LD_INT 21
4324: PUSH
4325: LD_INT 22
4327: PUSH
4328: LD_INT 23
4330: PUSH
4331: LD_INT 24
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: ST_TO_ADDR
4340: GO 4557
4342: LD_INT 45
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4376
4350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4351: LD_ADDR_VAR 0 3
4355: PUSH
4356: LD_INT 21
4358: PUSH
4359: LD_INT 22
4361: PUSH
4362: LD_INT 23
4364: PUSH
4365: LD_INT 24
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: ST_TO_ADDR
4374: GO 4557
4376: LD_INT 49
4378: DOUBLE
4379: EQUAL
4380: IFTRUE 4384
4382: GO 4410
4384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4385: LD_ADDR_VAR 0 3
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 22
4395: PUSH
4396: LD_INT 23
4398: PUSH
4399: LD_INT 24
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: ST_TO_ADDR
4408: GO 4557
4410: LD_INT 51
4412: DOUBLE
4413: EQUAL
4414: IFTRUE 4418
4416: GO 4444
4418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
4419: LD_ADDR_VAR 0 3
4423: PUSH
4424: LD_INT 21
4426: PUSH
4427: LD_INT 22
4429: PUSH
4430: LD_INT 23
4432: PUSH
4433: LD_INT 24
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: ST_TO_ADDR
4442: GO 4557
4444: LD_INT 52
4446: DOUBLE
4447: EQUAL
4448: IFTRUE 4452
4450: GO 4478
4452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: LD_INT 21
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 23
4466: PUSH
4467: LD_INT 24
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: ST_TO_ADDR
4476: GO 4557
4478: LD_INT 53
4480: DOUBLE
4481: EQUAL
4482: IFTRUE 4486
4484: GO 4504
4486: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
4487: LD_ADDR_VAR 0 3
4491: PUSH
4492: LD_INT 23
4494: PUSH
4495: LD_INT 24
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: ST_TO_ADDR
4502: GO 4557
4504: LD_INT 46
4506: DOUBLE
4507: EQUAL
4508: IFTRUE 4512
4510: GO 4530
4512: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: LD_INT 23
4520: PUSH
4521: LD_INT 24
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: ST_TO_ADDR
4528: GO 4557
4530: LD_INT 47
4532: DOUBLE
4533: EQUAL
4534: IFTRUE 4538
4536: GO 4556
4538: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4539: LD_ADDR_VAR 0 3
4543: PUSH
4544: LD_INT 23
4546: PUSH
4547: LD_INT 24
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: ST_TO_ADDR
4554: GO 4557
4556: POP
// result := ( chassis in result ) ;
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: LD_VAR 0 1
4566: PUSH
4567: LD_VAR 0 3
4571: IN
4572: ST_TO_ADDR
// end ;
4573: LD_VAR 0 3
4577: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
// result := array ;
4587: LD_ADDR_VAR 0 5
4591: PUSH
4592: LD_VAR 0 1
4596: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
4597: LD_VAR 0 1
4601: NOT
4602: IFTRUE 4611
4604: PUSH
4605: LD_VAR 0 2
4609: NOT
4610: OR
4611: IFTRUE 4620
4613: PUSH
4614: LD_VAR 0 3
4618: NOT
4619: OR
4620: IFTRUE 4634
4622: PUSH
4623: LD_VAR 0 2
4627: PUSH
4628: LD_VAR 0 1
4632: GREATER
4633: OR
4634: IFTRUE 4648
4636: PUSH
4637: LD_VAR 0 3
4641: PUSH
4642: LD_VAR 0 1
4646: GREATER
4647: OR
4648: IFFALSE 4652
// exit ;
4650: GO 4948
// if direction then
4652: LD_VAR 0 4
4656: IFFALSE 4720
// begin d := 1 ;
4658: LD_ADDR_VAR 0 9
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// if i_from > i_to then
4666: LD_VAR 0 2
4670: PUSH
4671: LD_VAR 0 3
4675: GREATER
4676: IFFALSE 4702
// length := ( array - i_from ) + i_to else
4678: LD_ADDR_VAR 0 11
4682: PUSH
4683: LD_VAR 0 1
4687: PUSH
4688: LD_VAR 0 2
4692: MINUS
4693: PUSH
4694: LD_VAR 0 3
4698: PLUS
4699: ST_TO_ADDR
4700: GO 4718
// length := i_to - i_from ;
4702: LD_ADDR_VAR 0 11
4706: PUSH
4707: LD_VAR 0 3
4711: PUSH
4712: LD_VAR 0 2
4716: MINUS
4717: ST_TO_ADDR
// end else
4718: GO 4781
// begin d := - 1 ;
4720: LD_ADDR_VAR 0 9
4724: PUSH
4725: LD_INT 1
4727: NEG
4728: ST_TO_ADDR
// if i_from > i_to then
4729: LD_VAR 0 2
4733: PUSH
4734: LD_VAR 0 3
4738: GREATER
4739: IFFALSE 4759
// length := i_from - i_to else
4741: LD_ADDR_VAR 0 11
4745: PUSH
4746: LD_VAR 0 2
4750: PUSH
4751: LD_VAR 0 3
4755: MINUS
4756: ST_TO_ADDR
4757: GO 4781
// length := ( array - i_to ) + i_from ;
4759: LD_ADDR_VAR 0 11
4763: PUSH
4764: LD_VAR 0 1
4768: PUSH
4769: LD_VAR 0 3
4773: MINUS
4774: PUSH
4775: LD_VAR 0 2
4779: PLUS
4780: ST_TO_ADDR
// end ; if not length then
4781: LD_VAR 0 11
4785: NOT
4786: IFFALSE 4790
// exit ;
4788: GO 4948
// tmp := array ;
4790: LD_ADDR_VAR 0 10
4794: PUSH
4795: LD_VAR 0 1
4799: ST_TO_ADDR
// for i = 1 to length do
4800: LD_ADDR_VAR 0 6
4804: PUSH
4805: DOUBLE
4806: LD_INT 1
4808: DEC
4809: ST_TO_ADDR
4810: LD_VAR 0 11
4814: PUSH
4815: FOR_TO
4816: IFFALSE 4936
// begin for j = 1 to array do
4818: LD_ADDR_VAR 0 7
4822: PUSH
4823: DOUBLE
4824: LD_INT 1
4826: DEC
4827: ST_TO_ADDR
4828: LD_VAR 0 1
4832: PUSH
4833: FOR_TO
4834: IFFALSE 4922
// begin k := j + d ;
4836: LD_ADDR_VAR 0 8
4840: PUSH
4841: LD_VAR 0 7
4845: PUSH
4846: LD_VAR 0 9
4850: PLUS
4851: ST_TO_ADDR
// if k > array then
4852: LD_VAR 0 8
4856: PUSH
4857: LD_VAR 0 1
4861: GREATER
4862: IFFALSE 4872
// k := 1 ;
4864: LD_ADDR_VAR 0 8
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// if not k then
4872: LD_VAR 0 8
4876: NOT
4877: IFFALSE 4889
// k := array ;
4879: LD_ADDR_VAR 0 8
4883: PUSH
4884: LD_VAR 0 1
4888: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
4889: LD_ADDR_VAR 0 10
4893: PUSH
4894: LD_VAR 0 10
4898: PPUSH
4899: LD_VAR 0 8
4903: PPUSH
4904: LD_VAR 0 1
4908: PUSH
4909: LD_VAR 0 7
4913: ARRAY
4914: PPUSH
4915: CALL_OW 1
4919: ST_TO_ADDR
// end ;
4920: GO 4833
4922: POP
4923: POP
// array := tmp ;
4924: LD_ADDR_VAR 0 1
4928: PUSH
4929: LD_VAR 0 10
4933: ST_TO_ADDR
// end ;
4934: GO 4815
4936: POP
4937: POP
// result := array ;
4938: LD_ADDR_VAR 0 5
4942: PUSH
4943: LD_VAR 0 1
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 5
4952: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
4953: LD_INT 0
4955: PPUSH
4956: PPUSH
// result := 0 ;
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// if not array or not value in array then
4965: LD_VAR 0 1
4969: NOT
4970: IFTRUE 4985
4972: PUSH
4973: LD_VAR 0 2
4977: PUSH
4978: LD_VAR 0 1
4982: IN
4983: NOT
4984: OR
4985: IFFALSE 4989
// exit ;
4987: GO 5043
// for i = 1 to array do
4989: LD_ADDR_VAR 0 4
4993: PUSH
4994: DOUBLE
4995: LD_INT 1
4997: DEC
4998: ST_TO_ADDR
4999: LD_VAR 0 1
5003: PUSH
5004: FOR_TO
5005: IFFALSE 5041
// if value = array [ i ] then
5007: LD_VAR 0 2
5011: PUSH
5012: LD_VAR 0 1
5016: PUSH
5017: LD_VAR 0 4
5021: ARRAY
5022: EQUAL
5023: IFFALSE 5039
// begin result := i ;
5025: LD_ADDR_VAR 0 3
5029: PUSH
5030: LD_VAR 0 4
5034: ST_TO_ADDR
// exit ;
5035: POP
5036: POP
5037: GO 5043
// end ;
5039: GO 5004
5041: POP
5042: POP
// end ;
5043: LD_VAR 0 3
5047: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5048: LD_INT 0
5050: PPUSH
// vc_chassis := chassis ;
5051: LD_ADDR_OWVAR 37
5055: PUSH
5056: LD_VAR 0 1
5060: ST_TO_ADDR
// vc_engine := engine ;
5061: LD_ADDR_OWVAR 39
5065: PUSH
5066: LD_VAR 0 2
5070: ST_TO_ADDR
// vc_control := control ;
5071: LD_ADDR_OWVAR 38
5075: PUSH
5076: LD_VAR 0 3
5080: ST_TO_ADDR
// vc_weapon := weapon ;
5081: LD_ADDR_OWVAR 40
5085: PUSH
5086: LD_VAR 0 4
5090: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5091: LD_ADDR_OWVAR 41
5095: PUSH
5096: LD_VAR 0 5
5100: ST_TO_ADDR
// end ;
5101: LD_VAR 0 6
5105: RET
// export function WantPlant ( unit ) ; var task ; begin
5106: LD_INT 0
5108: PPUSH
5109: PPUSH
// result := false ;
5110: LD_ADDR_VAR 0 2
5114: PUSH
5115: LD_INT 0
5117: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5118: LD_ADDR_VAR 0 3
5122: PUSH
5123: LD_VAR 0 1
5127: PPUSH
5128: CALL_OW 437
5132: ST_TO_ADDR
// if task then
5133: LD_VAR 0 3
5137: IFFALSE 5165
// if task [ 1 ] [ 1 ] = p then
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 1
5146: ARRAY
5147: PUSH
5148: LD_INT 1
5150: ARRAY
5151: PUSH
5152: LD_STRING p
5154: EQUAL
5155: IFFALSE 5165
// result := true ;
5157: LD_ADDR_VAR 0 2
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// end ;
5165: LD_VAR 0 2
5169: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
// if pos < 1 then
5176: LD_VAR 0 2
5180: PUSH
5181: LD_INT 1
5183: LESS
5184: IFFALSE 5188
// exit ;
5186: GO 5491
// if pos = 1 then
5188: LD_VAR 0 2
5192: PUSH
5193: LD_INT 1
5195: EQUAL
5196: IFFALSE 5229
// result := Replace ( arr , pos [ 1 ] , value ) else
5198: LD_ADDR_VAR 0 4
5202: PUSH
5203: LD_VAR 0 1
5207: PPUSH
5208: LD_VAR 0 2
5212: PUSH
5213: LD_INT 1
5215: ARRAY
5216: PPUSH
5217: LD_VAR 0 3
5221: PPUSH
5222: CALL_OW 1
5226: ST_TO_ADDR
5227: GO 5491
// begin tmp := arr ;
5229: LD_ADDR_VAR 0 6
5233: PUSH
5234: LD_VAR 0 1
5238: ST_TO_ADDR
// s_arr := [ tmp ] ;
5239: LD_ADDR_VAR 0 7
5243: PUSH
5244: LD_VAR 0 6
5248: PUSH
5249: EMPTY
5250: LIST
5251: ST_TO_ADDR
// for i = 1 to pos - 1 do
5252: LD_ADDR_VAR 0 5
5256: PUSH
5257: DOUBLE
5258: LD_INT 1
5260: DEC
5261: ST_TO_ADDR
5262: LD_VAR 0 2
5266: PUSH
5267: LD_INT 1
5269: MINUS
5270: PUSH
5271: FOR_TO
5272: IFFALSE 5317
// begin tmp := tmp [ pos [ i ] ] ;
5274: LD_ADDR_VAR 0 6
5278: PUSH
5279: LD_VAR 0 6
5283: PUSH
5284: LD_VAR 0 2
5288: PUSH
5289: LD_VAR 0 5
5293: ARRAY
5294: ARRAY
5295: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5296: LD_ADDR_VAR 0 7
5300: PUSH
5301: LD_VAR 0 7
5305: PUSH
5306: LD_VAR 0 6
5310: PUSH
5311: EMPTY
5312: LIST
5313: ADD
5314: ST_TO_ADDR
// end ;
5315: GO 5271
5317: POP
5318: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5319: LD_ADDR_VAR 0 6
5323: PUSH
5324: LD_VAR 0 6
5328: PPUSH
5329: LD_VAR 0 2
5333: PUSH
5334: LD_VAR 0 2
5338: ARRAY
5339: PPUSH
5340: LD_VAR 0 3
5344: PPUSH
5345: CALL_OW 1
5349: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5350: LD_ADDR_VAR 0 7
5354: PUSH
5355: LD_VAR 0 7
5359: PPUSH
5360: LD_VAR 0 7
5364: PPUSH
5365: LD_VAR 0 6
5369: PPUSH
5370: CALL_OW 1
5374: ST_TO_ADDR
// for i = s_arr downto 2 do
5375: LD_ADDR_VAR 0 5
5379: PUSH
5380: DOUBLE
5381: LD_VAR 0 7
5385: INC
5386: ST_TO_ADDR
5387: LD_INT 2
5389: PUSH
5390: FOR_DOWNTO
5391: IFFALSE 5475
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5393: LD_ADDR_VAR 0 6
5397: PUSH
5398: LD_VAR 0 7
5402: PUSH
5403: LD_VAR 0 5
5407: PUSH
5408: LD_INT 1
5410: MINUS
5411: ARRAY
5412: PPUSH
5413: LD_VAR 0 2
5417: PUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: MINUS
5426: ARRAY
5427: PPUSH
5428: LD_VAR 0 7
5432: PUSH
5433: LD_VAR 0 5
5437: ARRAY
5438: PPUSH
5439: CALL_OW 1
5443: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
5444: LD_ADDR_VAR 0 7
5448: PUSH
5449: LD_VAR 0 7
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_INT 1
5461: MINUS
5462: PPUSH
5463: LD_VAR 0 6
5467: PPUSH
5468: CALL_OW 1
5472: ST_TO_ADDR
// end ;
5473: GO 5390
5475: POP
5476: POP
// result := s_arr [ 1 ] ;
5477: LD_ADDR_VAR 0 4
5481: PUSH
5482: LD_VAR 0 7
5486: PUSH
5487: LD_INT 1
5489: ARRAY
5490: ST_TO_ADDR
// end ; end ;
5491: LD_VAR 0 4
5495: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
5496: LD_INT 0
5498: PPUSH
5499: PPUSH
// if not list then
5500: LD_VAR 0 1
5504: NOT
5505: IFFALSE 5509
// exit ;
5507: GO 5600
// i := list [ pos1 ] ;
5509: LD_ADDR_VAR 0 5
5513: PUSH
5514: LD_VAR 0 1
5518: PUSH
5519: LD_VAR 0 2
5523: ARRAY
5524: ST_TO_ADDR
// if not i then
5525: LD_VAR 0 5
5529: NOT
5530: IFFALSE 5534
// exit ;
5532: GO 5600
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
5534: LD_ADDR_VAR 0 1
5538: PUSH
5539: LD_VAR 0 1
5543: PPUSH
5544: LD_VAR 0 2
5548: PPUSH
5549: LD_VAR 0 1
5553: PUSH
5554: LD_VAR 0 3
5558: ARRAY
5559: PPUSH
5560: CALL_OW 1
5564: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
5565: LD_ADDR_VAR 0 1
5569: PUSH
5570: LD_VAR 0 1
5574: PPUSH
5575: LD_VAR 0 3
5579: PPUSH
5580: LD_VAR 0 5
5584: PPUSH
5585: CALL_OW 1
5589: ST_TO_ADDR
// result := list ;
5590: LD_ADDR_VAR 0 4
5594: PUSH
5595: LD_VAR 0 1
5599: ST_TO_ADDR
// end ;
5600: LD_VAR 0 4
5604: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
5605: LD_INT 0
5607: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
5608: LD_ADDR_VAR 0 5
5612: PUSH
5613: LD_VAR 0 1
5617: PPUSH
5618: CALL_OW 250
5622: PPUSH
5623: LD_VAR 0 1
5627: PPUSH
5628: CALL_OW 251
5632: PPUSH
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_VAR 0 4
5647: PPUSH
5648: CALL 6030 0 5
5652: ST_TO_ADDR
// end ;
5653: LD_VAR 0 5
5657: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
5658: LD_INT 0
5660: PPUSH
5661: PPUSH
5662: PPUSH
5663: PPUSH
// if not list or not unit then
5664: LD_VAR 0 2
5668: NOT
5669: IFTRUE 5678
5671: PUSH
5672: LD_VAR 0 1
5676: NOT
5677: OR
5678: IFFALSE 5682
// exit ;
5680: GO 6025
// result := [ ] ;
5682: LD_ADDR_VAR 0 5
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// for i in list do
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: FOR_IN
5700: IFFALSE 5918
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
5702: LD_ADDR_VAR 0 8
5706: PUSH
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_VAR 0 6
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 6
5725: PUSH
5726: LD_INT 2
5728: ARRAY
5729: PPUSH
5730: CALL_OW 297
5734: ST_TO_ADDR
// if not Count ( result ) then
5735: LD_VAR 0 5
5739: PPUSH
5740: CALL 2286 0 1
5744: NOT
5745: IFFALSE 5778
// begin result := Join ( result , [ i , tmp ] ) ;
5747: LD_ADDR_VAR 0 5
5751: PUSH
5752: LD_VAR 0 5
5756: PPUSH
5757: LD_VAR 0 6
5761: PUSH
5762: LD_VAR 0 8
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PPUSH
5771: CALL 38218 0 2
5775: ST_TO_ADDR
// continue ;
5776: GO 5699
// end ; if result [ result ] [ 2 ] <= tmp then
5778: LD_VAR 0 5
5782: PUSH
5783: LD_VAR 0 5
5787: ARRAY
5788: PUSH
5789: LD_INT 2
5791: ARRAY
5792: PUSH
5793: LD_VAR 0 8
5797: LESSEQUAL
5798: IFFALSE 5831
// result := Join ( result , [ i , tmp ] ) else
5800: LD_ADDR_VAR 0 5
5804: PUSH
5805: LD_VAR 0 5
5809: PPUSH
5810: LD_VAR 0 6
5814: PUSH
5815: LD_VAR 0 8
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL 38218 0 2
5828: ST_TO_ADDR
5829: GO 5916
// begin for j := 1 to Count ( result ) do
5831: LD_ADDR_VAR 0 7
5835: PUSH
5836: DOUBLE
5837: LD_INT 1
5839: DEC
5840: ST_TO_ADDR
5841: LD_VAR 0 5
5845: PPUSH
5846: CALL 2286 0 1
5850: PUSH
5851: FOR_TO
5852: IFFALSE 5914
// begin if tmp < result [ j ] [ 2 ] then
5854: LD_VAR 0 8
5858: PUSH
5859: LD_VAR 0 5
5863: PUSH
5864: LD_VAR 0 7
5868: ARRAY
5869: PUSH
5870: LD_INT 2
5872: ARRAY
5873: LESS
5874: IFFALSE 5912
// begin result := Insert ( result , j , [ i , tmp ] ) ;
5876: LD_ADDR_VAR 0 5
5880: PUSH
5881: LD_VAR 0 5
5885: PPUSH
5886: LD_VAR 0 7
5890: PPUSH
5891: LD_VAR 0 6
5895: PUSH
5896: LD_VAR 0 8
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PPUSH
5905: CALL_OW 2
5909: ST_TO_ADDR
// break ;
5910: GO 5914
// end ; end ;
5912: GO 5851
5914: POP
5915: POP
// end ; end ;
5916: GO 5699
5918: POP
5919: POP
// if result and not asc then
5920: LD_VAR 0 5
5924: IFFALSE 5933
5926: PUSH
5927: LD_VAR 0 3
5931: NOT
5932: AND
5933: IFFALSE 5950
// result := ReverseArray ( result ) ;
5935: LD_ADDR_VAR 0 5
5939: PUSH
5940: LD_VAR 0 5
5944: PPUSH
5945: CALL 33308 0 1
5949: ST_TO_ADDR
// tmp := [ ] ;
5950: LD_ADDR_VAR 0 8
5954: PUSH
5955: EMPTY
5956: ST_TO_ADDR
// if mode then
5957: LD_VAR 0 4
5961: IFFALSE 6025
// begin for i := 1 to result do
5963: LD_ADDR_VAR 0 6
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 5
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6013
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
5981: LD_ADDR_VAR 0 8
5985: PUSH
5986: LD_VAR 0 8
5990: PPUSH
5991: LD_VAR 0 5
5995: PUSH
5996: LD_VAR 0 6
6000: ARRAY
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: CALL 38218 0 2
6010: ST_TO_ADDR
6011: GO 5978
6013: POP
6014: POP
// result := tmp ;
6015: LD_ADDR_VAR 0 5
6019: PUSH
6020: LD_VAR 0 8
6024: ST_TO_ADDR
// end ; end ;
6025: LD_VAR 0 5
6029: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
// if not list then
6036: LD_VAR 0 3
6040: NOT
6041: IFFALSE 6045
// exit ;
6043: GO 6435
// result := [ ] ;
6045: LD_ADDR_VAR 0 6
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// for i in list do
6052: LD_ADDR_VAR 0 7
6056: PUSH
6057: LD_VAR 0 3
6061: PUSH
6062: FOR_IN
6063: IFFALSE 6265
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6065: LD_ADDR_VAR 0 9
6069: PUSH
6070: LD_VAR 0 7
6074: PPUSH
6075: LD_VAR 0 1
6079: PPUSH
6080: LD_VAR 0 2
6084: PPUSH
6085: CALL_OW 297
6089: ST_TO_ADDR
// if not result then
6090: LD_VAR 0 6
6094: NOT
6095: IFFALSE 6121
// result := [ [ i , tmp ] ] else
6097: LD_ADDR_VAR 0 6
6101: PUSH
6102: LD_VAR 0 7
6106: PUSH
6107: LD_VAR 0 9
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: ST_TO_ADDR
6119: GO 6263
// begin if result [ result ] [ 2 ] <= tmp then
6121: LD_VAR 0 6
6125: PUSH
6126: LD_VAR 0 6
6130: ARRAY
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PUSH
6136: LD_VAR 0 9
6140: LESSEQUAL
6141: IFFALSE 6183
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6143: LD_ADDR_VAR 0 6
6147: PUSH
6148: LD_VAR 0 6
6152: PPUSH
6153: LD_VAR 0 6
6157: PUSH
6158: LD_INT 1
6160: PLUS
6161: PPUSH
6162: LD_VAR 0 7
6166: PUSH
6167: LD_VAR 0 9
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PPUSH
6176: CALL_OW 2
6180: ST_TO_ADDR
6181: GO 6263
// for j := 1 to result do
6183: LD_ADDR_VAR 0 8
6187: PUSH
6188: DOUBLE
6189: LD_INT 1
6191: DEC
6192: ST_TO_ADDR
6193: LD_VAR 0 6
6197: PUSH
6198: FOR_TO
6199: IFFALSE 6261
// begin if tmp < result [ j ] [ 2 ] then
6201: LD_VAR 0 9
6205: PUSH
6206: LD_VAR 0 6
6210: PUSH
6211: LD_VAR 0 8
6215: ARRAY
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: LESS
6221: IFFALSE 6259
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6223: LD_ADDR_VAR 0 6
6227: PUSH
6228: LD_VAR 0 6
6232: PPUSH
6233: LD_VAR 0 8
6237: PPUSH
6238: LD_VAR 0 7
6242: PUSH
6243: LD_VAR 0 9
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 2
6256: ST_TO_ADDR
// break ;
6257: GO 6261
// end ; end ;
6259: GO 6198
6261: POP
6262: POP
// end ; end ;
6263: GO 6062
6265: POP
6266: POP
// if result and not asc then
6267: LD_VAR 0 6
6271: IFFALSE 6280
6273: PUSH
6274: LD_VAR 0 4
6278: NOT
6279: AND
6280: IFFALSE 6355
// begin tmp := result ;
6282: LD_ADDR_VAR 0 9
6286: PUSH
6287: LD_VAR 0 6
6291: ST_TO_ADDR
// for i = tmp downto 1 do
6292: LD_ADDR_VAR 0 7
6296: PUSH
6297: DOUBLE
6298: LD_VAR 0 9
6302: INC
6303: ST_TO_ADDR
6304: LD_INT 1
6306: PUSH
6307: FOR_DOWNTO
6308: IFFALSE 6353
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6310: LD_ADDR_VAR 0 6
6314: PUSH
6315: LD_VAR 0 6
6319: PPUSH
6320: LD_VAR 0 9
6324: PUSH
6325: LD_VAR 0 7
6329: MINUS
6330: PUSH
6331: LD_INT 1
6333: PLUS
6334: PPUSH
6335: LD_VAR 0 9
6339: PUSH
6340: LD_VAR 0 7
6344: ARRAY
6345: PPUSH
6346: CALL_OW 1
6350: ST_TO_ADDR
6351: GO 6307
6353: POP
6354: POP
// end ; tmp := [ ] ;
6355: LD_ADDR_VAR 0 9
6359: PUSH
6360: EMPTY
6361: ST_TO_ADDR
// if mode then
6362: LD_VAR 0 5
6366: IFFALSE 6435
// begin for i = 1 to result do
6368: LD_ADDR_VAR 0 7
6372: PUSH
6373: DOUBLE
6374: LD_INT 1
6376: DEC
6377: ST_TO_ADDR
6378: LD_VAR 0 6
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6423
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6386: LD_ADDR_VAR 0 9
6390: PUSH
6391: LD_VAR 0 9
6395: PPUSH
6396: LD_VAR 0 7
6400: PPUSH
6401: LD_VAR 0 6
6405: PUSH
6406: LD_VAR 0 7
6410: ARRAY
6411: PUSH
6412: LD_INT 1
6414: ARRAY
6415: PPUSH
6416: CALL_OW 1
6420: ST_TO_ADDR
6421: GO 6383
6423: POP
6424: POP
// result := tmp ;
6425: LD_ADDR_VAR 0 6
6429: PUSH
6430: LD_VAR 0 9
6434: ST_TO_ADDR
// end ; end ;
6435: LD_VAR 0 6
6439: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6440: LD_INT 0
6442: PPUSH
6443: PPUSH
6444: PPUSH
6445: PPUSH
6446: PPUSH
6447: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6448: LD_ADDR_VAR 0 5
6452: PUSH
6453: LD_INT 0
6455: PUSH
6456: LD_INT 0
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: EMPTY
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: ST_TO_ADDR
// if not x or not y then
6470: LD_VAR 0 2
6474: NOT
6475: IFTRUE 6484
6477: PUSH
6478: LD_VAR 0 3
6482: NOT
6483: OR
6484: IFFALSE 6488
// exit ;
6486: GO 8144
// if not range then
6488: LD_VAR 0 4
6492: NOT
6493: IFFALSE 6503
// range := 10 ;
6495: LD_ADDR_VAR 0 4
6499: PUSH
6500: LD_INT 10
6502: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6503: LD_ADDR_VAR 0 8
6507: PUSH
6508: LD_INT 81
6510: PUSH
6511: LD_VAR 0 1
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 92
6522: PUSH
6523: LD_VAR 0 2
6527: PUSH
6528: LD_VAR 0 3
6532: PUSH
6533: LD_VAR 0 4
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 21
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 69
6570: ST_TO_ADDR
// if not tmp then
6571: LD_VAR 0 8
6575: NOT
6576: IFFALSE 6580
// exit ;
6578: GO 8144
// for i in tmp do
6580: LD_ADDR_VAR 0 6
6584: PUSH
6585: LD_VAR 0 8
6589: PUSH
6590: FOR_IN
6591: IFFALSE 8119
// begin points := [ 0 , 0 , 0 ] ;
6593: LD_ADDR_VAR 0 9
6597: PUSH
6598: LD_INT 0
6600: PUSH
6601: LD_INT 0
6603: PUSH
6604: LD_INT 0
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: ST_TO_ADDR
// bpoints := 1 ;
6612: LD_ADDR_VAR 0 10
6616: PUSH
6617: LD_INT 1
6619: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6620: LD_VAR 0 6
6624: PPUSH
6625: CALL_OW 247
6629: PUSH
6630: LD_INT 1
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 7220
6638: POP
// begin if GetClass ( i ) = 1 then
6639: LD_VAR 0 6
6643: PPUSH
6644: CALL_OW 257
6648: PUSH
6649: LD_INT 1
6651: EQUAL
6652: IFFALSE 6673
// points := [ 10 , 5 , 3 ] ;
6654: LD_ADDR_VAR 0 9
6658: PUSH
6659: LD_INT 10
6661: PUSH
6662: LD_INT 5
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6673: LD_VAR 0 6
6677: PPUSH
6678: CALL_OW 257
6682: PUSH
6683: LD_INT 2
6685: PUSH
6686: LD_INT 3
6688: PUSH
6689: LD_INT 4
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: IN
6697: IFFALSE 6718
// points := [ 3 , 2 , 1 ] ;
6699: LD_ADDR_VAR 0 9
6703: PUSH
6704: LD_INT 3
6706: PUSH
6707: LD_INT 2
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6718: LD_VAR 0 6
6722: PPUSH
6723: CALL_OW 257
6727: PUSH
6728: LD_INT 5
6730: EQUAL
6731: IFFALSE 6752
// points := [ 130 , 5 , 2 ] ;
6733: LD_ADDR_VAR 0 9
6737: PUSH
6738: LD_INT 130
6740: PUSH
6741: LD_INT 5
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6752: LD_VAR 0 6
6756: PPUSH
6757: CALL_OW 257
6761: PUSH
6762: LD_INT 8
6764: EQUAL
6765: IFFALSE 6786
// points := [ 35 , 35 , 30 ] ;
6767: LD_ADDR_VAR 0 9
6771: PUSH
6772: LD_INT 35
6774: PUSH
6775: LD_INT 35
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: ST_TO_ADDR
// if GetClass ( i ) = 9 then
6786: LD_VAR 0 6
6790: PPUSH
6791: CALL_OW 257
6795: PUSH
6796: LD_INT 9
6798: EQUAL
6799: IFFALSE 6820
// points := [ 20 , 55 , 40 ] ;
6801: LD_ADDR_VAR 0 9
6805: PUSH
6806: LD_INT 20
6808: PUSH
6809: LD_INT 55
6811: PUSH
6812: LD_INT 40
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: LIST
6819: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
6820: LD_VAR 0 6
6824: PPUSH
6825: CALL_OW 257
6829: PUSH
6830: LD_INT 12
6832: PUSH
6833: LD_INT 16
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: IN
6840: IFFALSE 6861
// points := [ 5 , 3 , 2 ] ;
6842: LD_ADDR_VAR 0 9
6846: PUSH
6847: LD_INT 5
6849: PUSH
6850: LD_INT 3
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: ST_TO_ADDR
// if GetClass ( i ) = 17 then
6861: LD_VAR 0 6
6865: PPUSH
6866: CALL_OW 257
6870: PUSH
6871: LD_INT 17
6873: EQUAL
6874: IFFALSE 6895
// points := [ 100 , 50 , 75 ] ;
6876: LD_ADDR_VAR 0 9
6880: PUSH
6881: LD_INT 100
6883: PUSH
6884: LD_INT 50
6886: PUSH
6887: LD_INT 75
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: ST_TO_ADDR
// if GetClass ( i ) = 15 then
6895: LD_VAR 0 6
6899: PPUSH
6900: CALL_OW 257
6904: PUSH
6905: LD_INT 15
6907: EQUAL
6908: IFFALSE 6929
// points := [ 10 , 5 , 3 ] ;
6910: LD_ADDR_VAR 0 9
6914: PUSH
6915: LD_INT 10
6917: PUSH
6918: LD_INT 5
6920: PUSH
6921: LD_INT 3
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: ST_TO_ADDR
// if GetClass ( i ) = 14 then
6929: LD_VAR 0 6
6933: PPUSH
6934: CALL_OW 257
6938: PUSH
6939: LD_INT 14
6941: EQUAL
6942: IFFALSE 6963
// points := [ 10 , 0 , 0 ] ;
6944: LD_ADDR_VAR 0 9
6948: PUSH
6949: LD_INT 10
6951: PUSH
6952: LD_INT 0
6954: PUSH
6955: LD_INT 0
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// if GetClass ( i ) = 11 then
6963: LD_VAR 0 6
6967: PPUSH
6968: CALL_OW 257
6972: PUSH
6973: LD_INT 11
6975: EQUAL
6976: IFFALSE 6997
// points := [ 30 , 10 , 5 ] ;
6978: LD_ADDR_VAR 0 9
6982: PUSH
6983: LD_INT 30
6985: PUSH
6986: LD_INT 10
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
6997: LD_VAR 0 1
7001: PPUSH
7002: LD_INT 5
7004: PPUSH
7005: CALL_OW 321
7009: PUSH
7010: LD_INT 2
7012: EQUAL
7013: IFFALSE 7030
// bpoints := bpoints * 1.8 ;
7015: LD_ADDR_VAR 0 10
7019: PUSH
7020: LD_VAR 0 10
7024: PUSH
7025: LD_REAL  1.80000000000000E+0000
7028: MUL
7029: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 257
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: LD_INT 2
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 4
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: IN
7058: IFFALSE 7078
7060: PUSH
7061: LD_VAR 0 1
7065: PPUSH
7066: LD_INT 51
7068: PPUSH
7069: CALL_OW 321
7073: PUSH
7074: LD_INT 2
7076: EQUAL
7077: AND
7078: IFFALSE 7095
// bpoints := bpoints * 1.2 ;
7080: LD_ADDR_VAR 0 10
7084: PUSH
7085: LD_VAR 0 10
7089: PUSH
7090: LD_REAL  1.20000000000000E+0000
7093: MUL
7094: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7095: LD_VAR 0 6
7099: PPUSH
7100: CALL_OW 257
7104: PUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 7
7110: PUSH
7111: LD_INT 9
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: IN
7119: IFFALSE 7139
7121: PUSH
7122: LD_VAR 0 1
7126: PPUSH
7127: LD_INT 52
7129: PPUSH
7130: CALL_OW 321
7134: PUSH
7135: LD_INT 2
7137: EQUAL
7138: AND
7139: IFFALSE 7156
// bpoints := bpoints * 1.5 ;
7141: LD_ADDR_VAR 0 10
7145: PUSH
7146: LD_VAR 0 10
7150: PUSH
7151: LD_REAL  1.50000000000000E+0000
7154: MUL
7155: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7156: LD_VAR 0 1
7160: PPUSH
7161: LD_INT 66
7163: PPUSH
7164: CALL_OW 321
7168: PUSH
7169: LD_INT 2
7171: EQUAL
7172: IFFALSE 7189
// bpoints := bpoints * 1.1 ;
7174: LD_ADDR_VAR 0 10
7178: PUSH
7179: LD_VAR 0 10
7183: PUSH
7184: LD_REAL  1.10000000000000E+0000
7187: MUL
7188: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7189: LD_ADDR_VAR 0 10
7193: PUSH
7194: LD_VAR 0 10
7198: PUSH
7199: LD_VAR 0 6
7203: PPUSH
7204: LD_INT 1
7206: PPUSH
7207: CALL_OW 259
7211: PUSH
7212: LD_REAL  1.15000000000000E+0000
7215: MUL
7216: MUL
7217: ST_TO_ADDR
// end ; unit_vehicle :
7218: GO 8048
7220: LD_INT 2
7222: DOUBLE
7223: EQUAL
7224: IFTRUE 7228
7226: GO 8036
7228: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL_OW 264
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: LD_INT 42
7244: PUSH
7245: LD_INT 24
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: IN
7253: IFFALSE 7274
// points := [ 25 , 5 , 3 ] ;
7255: LD_ADDR_VAR 0 9
7259: PUSH
7260: LD_INT 25
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7274: LD_VAR 0 6
7278: PPUSH
7279: CALL_OW 264
7283: PUSH
7284: LD_INT 4
7286: PUSH
7287: LD_INT 43
7289: PUSH
7290: LD_INT 25
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: IN
7298: IFFALSE 7319
// points := [ 40 , 15 , 5 ] ;
7300: LD_ADDR_VAR 0 9
7304: PUSH
7305: LD_INT 40
7307: PUSH
7308: LD_INT 15
7310: PUSH
7311: LD_INT 5
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7319: LD_VAR 0 6
7323: PPUSH
7324: CALL_OW 264
7328: PUSH
7329: LD_INT 3
7331: PUSH
7332: LD_INT 23
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: IN
7339: IFFALSE 7360
// points := [ 7 , 25 , 8 ] ;
7341: LD_ADDR_VAR 0 9
7345: PUSH
7346: LD_INT 7
7348: PUSH
7349: LD_INT 25
7351: PUSH
7352: LD_INT 8
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 264
7369: PUSH
7370: LD_INT 5
7372: PUSH
7373: LD_INT 27
7375: PUSH
7376: LD_INT 44
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: IN
7384: IFFALSE 7405
// points := [ 14 , 50 , 16 ] ;
7386: LD_ADDR_VAR 0 9
7390: PUSH
7391: LD_INT 14
7393: PUSH
7394: LD_INT 50
7396: PUSH
7397: LD_INT 16
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7405: LD_VAR 0 6
7409: PPUSH
7410: CALL_OW 264
7414: PUSH
7415: LD_INT 6
7417: PUSH
7418: LD_INT 46
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: IN
7425: IFFALSE 7446
// points := [ 32 , 120 , 70 ] ;
7427: LD_ADDR_VAR 0 9
7431: PUSH
7432: LD_INT 32
7434: PUSH
7435: LD_INT 120
7437: PUSH
7438: LD_INT 70
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7446: LD_VAR 0 6
7450: PPUSH
7451: CALL_OW 264
7455: PUSH
7456: LD_INT 7
7458: PUSH
7459: LD_INT 28
7461: PUSH
7462: LD_INT 45
7464: PUSH
7465: LD_INT 92
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: IN
7474: IFFALSE 7495
// points := [ 35 , 20 , 45 ] ;
7476: LD_ADDR_VAR 0 9
7480: PUSH
7481: LD_INT 35
7483: PUSH
7484: LD_INT 20
7486: PUSH
7487: LD_INT 45
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7495: LD_VAR 0 6
7499: PPUSH
7500: CALL_OW 264
7504: PUSH
7505: LD_INT 47
7507: PUSH
7508: EMPTY
7509: LIST
7510: IN
7511: IFFALSE 7532
// points := [ 67 , 45 , 75 ] ;
7513: LD_ADDR_VAR 0 9
7517: PUSH
7518: LD_INT 67
7520: PUSH
7521: LD_INT 45
7523: PUSH
7524: LD_INT 75
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7532: LD_VAR 0 6
7536: PPUSH
7537: CALL_OW 264
7541: PUSH
7542: LD_INT 26
7544: PUSH
7545: EMPTY
7546: LIST
7547: IN
7548: IFFALSE 7569
// points := [ 120 , 30 , 80 ] ;
7550: LD_ADDR_VAR 0 9
7554: PUSH
7555: LD_INT 120
7557: PUSH
7558: LD_INT 30
7560: PUSH
7561: LD_INT 80
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7569: LD_VAR 0 6
7573: PPUSH
7574: CALL_OW 264
7578: PUSH
7579: LD_INT 22
7581: PUSH
7582: EMPTY
7583: LIST
7584: IN
7585: IFFALSE 7606
// points := [ 40 , 1 , 1 ] ;
7587: LD_ADDR_VAR 0 9
7591: PUSH
7592: LD_INT 40
7594: PUSH
7595: LD_INT 1
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7606: LD_VAR 0 6
7610: PPUSH
7611: CALL_OW 264
7615: PUSH
7616: LD_INT 29
7618: PUSH
7619: EMPTY
7620: LIST
7621: IN
7622: IFFALSE 7643
// points := [ 70 , 200 , 400 ] ;
7624: LD_ADDR_VAR 0 9
7628: PUSH
7629: LD_INT 70
7631: PUSH
7632: LD_INT 200
7634: PUSH
7635: LD_INT 400
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7643: LD_VAR 0 6
7647: PPUSH
7648: CALL_OW 264
7652: PUSH
7653: LD_INT 14
7655: PUSH
7656: LD_INT 53
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: IN
7663: IFFALSE 7684
// points := [ 40 , 10 , 20 ] ;
7665: LD_ADDR_VAR 0 9
7669: PUSH
7670: LD_INT 40
7672: PUSH
7673: LD_INT 10
7675: PUSH
7676: LD_INT 20
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7684: LD_VAR 0 6
7688: PPUSH
7689: CALL_OW 264
7693: PUSH
7694: LD_INT 9
7696: PUSH
7697: EMPTY
7698: LIST
7699: IN
7700: IFFALSE 7721
// points := [ 5 , 70 , 20 ] ;
7702: LD_ADDR_VAR 0 9
7706: PUSH
7707: LD_INT 5
7709: PUSH
7710: LD_INT 70
7712: PUSH
7713: LD_INT 20
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7721: LD_VAR 0 6
7725: PPUSH
7726: CALL_OW 264
7730: PUSH
7731: LD_INT 10
7733: PUSH
7734: EMPTY
7735: LIST
7736: IN
7737: IFFALSE 7758
// points := [ 35 , 110 , 70 ] ;
7739: LD_ADDR_VAR 0 9
7743: PUSH
7744: LD_INT 35
7746: PUSH
7747: LD_INT 110
7749: PUSH
7750: LD_INT 70
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7758: LD_VAR 0 6
7762: PPUSH
7763: CALL_OW 265
7767: PUSH
7768: LD_INT 25
7770: EQUAL
7771: IFFALSE 7792
// points := [ 80 , 65 , 100 ] ;
7773: LD_ADDR_VAR 0 9
7777: PUSH
7778: LD_INT 80
7780: PUSH
7781: LD_INT 65
7783: PUSH
7784: LD_INT 100
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
7792: LD_VAR 0 6
7796: PPUSH
7797: CALL_OW 263
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: IFFALSE 7840
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
7807: LD_ADDR_VAR 0 10
7811: PUSH
7812: LD_VAR 0 10
7816: PUSH
7817: LD_VAR 0 6
7821: PPUSH
7822: CALL_OW 311
7826: PPUSH
7827: LD_INT 3
7829: PPUSH
7830: CALL_OW 259
7834: PUSH
7835: LD_INT 4
7837: MUL
7838: MUL
7839: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
7840: LD_VAR 0 6
7844: PPUSH
7845: CALL_OW 263
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7904
// begin j := IsControledBy ( i ) ;
7855: LD_ADDR_VAR 0 7
7859: PUSH
7860: LD_VAR 0 6
7864: PPUSH
7865: CALL_OW 312
7869: ST_TO_ADDR
// if j then
7870: LD_VAR 0 7
7874: IFFALSE 7904
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
7876: LD_ADDR_VAR 0 10
7880: PUSH
7881: LD_VAR 0 10
7885: PUSH
7886: LD_VAR 0 7
7890: PPUSH
7891: LD_INT 3
7893: PPUSH
7894: CALL_OW 259
7898: PUSH
7899: LD_INT 3
7901: MUL
7902: MUL
7903: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
7904: LD_VAR 0 6
7908: PPUSH
7909: CALL_OW 264
7913: PUSH
7914: LD_INT 5
7916: PUSH
7917: LD_INT 6
7919: PUSH
7920: LD_INT 46
7922: PUSH
7923: LD_INT 44
7925: PUSH
7926: LD_INT 47
7928: PUSH
7929: LD_INT 45
7931: PUSH
7932: LD_INT 28
7934: PUSH
7935: LD_INT 7
7937: PUSH
7938: LD_INT 27
7940: PUSH
7941: LD_INT 29
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: IN
7956: IFFALSE 7976
7958: PUSH
7959: LD_VAR 0 1
7963: PPUSH
7964: LD_INT 52
7966: PPUSH
7967: CALL_OW 321
7971: PUSH
7972: LD_INT 2
7974: EQUAL
7975: AND
7976: IFFALSE 7993
// bpoints := bpoints * 1.2 ;
7978: LD_ADDR_VAR 0 10
7982: PUSH
7983: LD_VAR 0 10
7987: PUSH
7988: LD_REAL  1.20000000000000E+0000
7991: MUL
7992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
7993: LD_VAR 0 6
7997: PPUSH
7998: CALL_OW 264
8002: PUSH
8003: LD_INT 6
8005: PUSH
8006: LD_INT 46
8008: PUSH
8009: LD_INT 47
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: IN
8017: IFFALSE 8034
// bpoints := bpoints * 1.2 ;
8019: LD_ADDR_VAR 0 10
8023: PUSH
8024: LD_VAR 0 10
8028: PUSH
8029: LD_REAL  1.20000000000000E+0000
8032: MUL
8033: ST_TO_ADDR
// end ; unit_building :
8034: GO 8048
8036: LD_INT 3
8038: DOUBLE
8039: EQUAL
8040: IFTRUE 8044
8042: GO 8047
8044: POP
// ; end ;
8045: GO 8048
8047: POP
// for j = 1 to 3 do
8048: LD_ADDR_VAR 0 7
8052: PUSH
8053: DOUBLE
8054: LD_INT 1
8056: DEC
8057: ST_TO_ADDR
8058: LD_INT 3
8060: PUSH
8061: FOR_TO
8062: IFFALSE 8115
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 7
8078: PPUSH
8079: LD_VAR 0 5
8083: PUSH
8084: LD_VAR 0 7
8088: ARRAY
8089: PUSH
8090: LD_VAR 0 9
8094: PUSH
8095: LD_VAR 0 7
8099: ARRAY
8100: PUSH
8101: LD_VAR 0 10
8105: MUL
8106: PLUS
8107: PPUSH
8108: CALL_OW 1
8112: ST_TO_ADDR
8113: GO 8061
8115: POP
8116: POP
// end ;
8117: GO 6590
8119: POP
8120: POP
// result := Replace ( result , 4 , tmp ) ;
8121: LD_ADDR_VAR 0 5
8125: PUSH
8126: LD_VAR 0 5
8130: PPUSH
8131: LD_INT 4
8133: PPUSH
8134: LD_VAR 0 8
8138: PPUSH
8139: CALL_OW 1
8143: ST_TO_ADDR
// end ;
8144: LD_VAR 0 5
8148: RET
// export function DangerAtRange ( unit , range ) ; begin
8149: LD_INT 0
8151: PPUSH
// if not unit then
8152: LD_VAR 0 1
8156: NOT
8157: IFFALSE 8161
// exit ;
8159: GO 8206
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8161: LD_ADDR_VAR 0 3
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 255
8175: PPUSH
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 250
8185: PPUSH
8186: LD_VAR 0 1
8190: PPUSH
8191: CALL_OW 251
8195: PPUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: CALL 6440 0 4
8205: ST_TO_ADDR
// end ;
8206: LD_VAR 0 3
8210: RET
// export function DangerInArea ( side , area ) ; begin
8211: LD_INT 0
8213: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8214: LD_ADDR_VAR 0 3
8218: PUSH
8219: LD_VAR 0 2
8223: PPUSH
8224: LD_INT 81
8226: PUSH
8227: LD_VAR 0 1
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 70
8240: ST_TO_ADDR
// end ;
8241: LD_VAR 0 3
8245: RET
// export function IsExtension ( b ) ; begin
8246: LD_INT 0
8248: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8249: LD_ADDR_VAR 0 2
8253: PUSH
8254: LD_VAR 0 1
8258: PUSH
8259: LD_INT 23
8261: PUSH
8262: LD_INT 20
8264: PUSH
8265: LD_INT 22
8267: PUSH
8268: LD_INT 17
8270: PUSH
8271: LD_INT 24
8273: PUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 19
8279: PUSH
8280: LD_INT 16
8282: PUSH
8283: LD_INT 25
8285: PUSH
8286: LD_INT 18
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: IN
8301: ST_TO_ADDR
// end ;
8302: LD_VAR 0 2
8306: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8307: LD_INT 0
8309: PPUSH
8310: PPUSH
8311: PPUSH
// result := [ ] ;
8312: LD_ADDR_VAR 0 4
8316: PUSH
8317: EMPTY
8318: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8319: LD_ADDR_VAR 0 5
8323: PUSH
8324: LD_VAR 0 2
8328: PPUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 70
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 5
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8417
// if checkLink then
8353: LD_VAR 0 3
8357: IFFALSE 8407
// begin for i in tmp do
8359: LD_ADDR_VAR 0 6
8363: PUSH
8364: LD_VAR 0 5
8368: PUSH
8369: FOR_IN
8370: IFFALSE 8405
// if GetBase ( i ) <> base then
8372: LD_VAR 0 6
8376: PPUSH
8377: CALL_OW 274
8381: PUSH
8382: LD_VAR 0 1
8386: NONEQUAL
8387: IFFALSE 8403
// ComLinkToBase ( base , i ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_VAR 0 6
8398: PPUSH
8399: CALL_OW 169
8403: GO 8369
8405: POP
8406: POP
// end ; result := tmp ;
8407: LD_ADDR_VAR 0 4
8411: PUSH
8412: LD_VAR 0 5
8416: ST_TO_ADDR
// end ;
8417: LD_VAR 0 4
8421: RET
// export function ComComplete ( units , b ) ; var i ; begin
8422: LD_INT 0
8424: PPUSH
8425: PPUSH
// if not units then
8426: LD_VAR 0 1
8430: NOT
8431: IFFALSE 8435
// exit ;
8433: GO 8525
// for i in units do
8435: LD_ADDR_VAR 0 4
8439: PUSH
8440: LD_VAR 0 1
8444: PUSH
8445: FOR_IN
8446: IFFALSE 8523
// if BuildingStatus ( b ) = bs_build then
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 461
8457: PUSH
8458: LD_INT 1
8460: EQUAL
8461: IFFALSE 8521
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8463: LD_VAR 0 4
8467: PPUSH
8468: LD_STRING h
8470: PUSH
8471: LD_VAR 0 2
8475: PPUSH
8476: CALL_OW 250
8480: PUSH
8481: LD_VAR 0 2
8485: PPUSH
8486: CALL_OW 251
8490: PUSH
8491: LD_VAR 0 2
8495: PUSH
8496: LD_INT 0
8498: PUSH
8499: LD_INT 0
8501: PUSH
8502: LD_INT 0
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: PPUSH
8517: CALL_OW 446
8521: GO 8445
8523: POP
8524: POP
// end ;
8525: LD_VAR 0 3
8529: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8530: LD_INT 0
8532: PPUSH
8533: PPUSH
8534: PPUSH
8535: PPUSH
8536: PPUSH
8537: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8538: LD_VAR 0 1
8542: NOT
8543: IFTRUE 8560
8545: PUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 263
8555: PUSH
8556: LD_INT 2
8558: NONEQUAL
8559: OR
8560: IFFALSE 8564
// exit ;
8562: GO 8880
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8564: LD_ADDR_VAR 0 6
8568: PUSH
8569: LD_INT 22
8571: PUSH
8572: LD_VAR 0 1
8576: PPUSH
8577: CALL_OW 255
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 2
8588: PUSH
8589: LD_INT 30
8591: PUSH
8592: LD_INT 36
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: LD_INT 34
8601: PUSH
8602: LD_INT 31
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL_OW 69
8622: ST_TO_ADDR
// if not tmp then
8623: LD_VAR 0 6
8627: NOT
8628: IFFALSE 8632
// exit ;
8630: GO 8880
// result := [ ] ;
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: EMPTY
8638: ST_TO_ADDR
// for i in tmp do
8639: LD_ADDR_VAR 0 3
8643: PUSH
8644: LD_VAR 0 6
8648: PUSH
8649: FOR_IN
8650: IFFALSE 8721
// begin t := UnitsInside ( i ) ;
8652: LD_ADDR_VAR 0 4
8656: PUSH
8657: LD_VAR 0 3
8661: PPUSH
8662: CALL_OW 313
8666: ST_TO_ADDR
// if t then
8667: LD_VAR 0 4
8671: IFFALSE 8719
// for j in t do
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 4
8682: PUSH
8683: FOR_IN
8684: IFFALSE 8717
// result := Replace ( result , result + 1 , j ) ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_VAR 0 2
8700: PUSH
8701: LD_INT 1
8703: PLUS
8704: PPUSH
8705: LD_VAR 0 7
8709: PPUSH
8710: CALL_OW 1
8714: ST_TO_ADDR
8715: GO 8683
8717: POP
8718: POP
// end ;
8719: GO 8649
8721: POP
8722: POP
// if not result then
8723: LD_VAR 0 2
8727: NOT
8728: IFFALSE 8732
// exit ;
8730: GO 8880
// mech := result [ 1 ] ;
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_VAR 0 2
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: ST_TO_ADDR
// if result > 1 then
8746: LD_VAR 0 2
8750: PUSH
8751: LD_INT 1
8753: GREATER
8754: IFFALSE 8866
// begin for i = 2 to result do
8756: LD_ADDR_VAR 0 3
8760: PUSH
8761: DOUBLE
8762: LD_INT 2
8764: DEC
8765: ST_TO_ADDR
8766: LD_VAR 0 2
8770: PUSH
8771: FOR_TO
8772: IFFALSE 8864
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8774: LD_ADDR_VAR 0 4
8778: PUSH
8779: LD_VAR 0 2
8783: PUSH
8784: LD_VAR 0 3
8788: ARRAY
8789: PPUSH
8790: LD_INT 3
8792: PPUSH
8793: CALL_OW 259
8797: PUSH
8798: LD_VAR 0 2
8802: PUSH
8803: LD_VAR 0 3
8807: ARRAY
8808: PPUSH
8809: CALL_OW 432
8813: MINUS
8814: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
8815: LD_VAR 0 4
8819: PUSH
8820: LD_VAR 0 5
8824: PPUSH
8825: LD_INT 3
8827: PPUSH
8828: CALL_OW 259
8832: PUSH
8833: LD_VAR 0 5
8837: PPUSH
8838: CALL_OW 432
8842: MINUS
8843: GREATEREQUAL
8844: IFFALSE 8862
// mech := result [ i ] ;
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: LD_VAR 0 2
8855: PUSH
8856: LD_VAR 0 3
8860: ARRAY
8861: ST_TO_ADDR
// end ;
8862: GO 8771
8864: POP
8865: POP
// end ; ComLinkTo ( vehicle , mech ) ;
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_VAR 0 5
8875: PPUSH
8876: CALL_OW 135
// end ;
8880: LD_VAR 0 2
8884: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
// result := [ ] ;
8900: LD_ADDR_VAR 0 7
8904: PUSH
8905: EMPTY
8906: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
8907: LD_VAR 0 1
8911: PPUSH
8912: CALL_OW 266
8916: PUSH
8917: LD_INT 0
8919: PUSH
8920: LD_INT 1
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: IN
8927: NOT
8928: IFFALSE 8932
// exit ;
8930: GO 10572
// if name then
8932: LD_VAR 0 3
8936: IFFALSE 8952
// SetBName ( base_dep , name ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: LD_VAR 0 3
8947: PPUSH
8948: CALL_OW 500
// base := GetBase ( base_dep ) ;
8952: LD_ADDR_VAR 0 15
8956: PUSH
8957: LD_VAR 0 1
8961: PPUSH
8962: CALL_OW 274
8966: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
8967: LD_ADDR_VAR 0 16
8971: PUSH
8972: LD_VAR 0 1
8976: PPUSH
8977: CALL_OW 255
8981: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
8982: LD_ADDR_VAR 0 17
8986: PUSH
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 248
8996: ST_TO_ADDR
// if sources then
8997: LD_VAR 0 5
9001: IFFALSE 9048
// for i = 1 to 3 do
9003: LD_ADDR_VAR 0 8
9007: PUSH
9008: DOUBLE
9009: LD_INT 1
9011: DEC
9012: ST_TO_ADDR
9013: LD_INT 3
9015: PUSH
9016: FOR_TO
9017: IFFALSE 9046
// AddResourceType ( base , i , sources [ i ] ) ;
9019: LD_VAR 0 15
9023: PPUSH
9024: LD_VAR 0 8
9028: PPUSH
9029: LD_VAR 0 5
9033: PUSH
9034: LD_VAR 0 8
9038: ARRAY
9039: PPUSH
9040: CALL_OW 276
9044: GO 9016
9046: POP
9047: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9048: LD_ADDR_VAR 0 18
9052: PUSH
9053: LD_VAR 0 15
9057: PPUSH
9058: LD_VAR 0 2
9062: PPUSH
9063: LD_INT 1
9065: PPUSH
9066: CALL 8307 0 3
9070: ST_TO_ADDR
// InitHc ;
9071: CALL_OW 19
// InitUc ;
9075: CALL_OW 18
// uc_side := side ;
9079: LD_ADDR_OWVAR 20
9083: PUSH
9084: LD_VAR 0 16
9088: ST_TO_ADDR
// uc_nation := nation ;
9089: LD_ADDR_OWVAR 21
9093: PUSH
9094: LD_VAR 0 17
9098: ST_TO_ADDR
// if buildings then
9099: LD_VAR 0 18
9103: IFFALSE 10431
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9105: LD_ADDR_VAR 0 19
9109: PUSH
9110: LD_VAR 0 18
9114: PPUSH
9115: LD_INT 2
9117: PUSH
9118: LD_INT 30
9120: PUSH
9121: LD_INT 29
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 30
9130: PUSH
9131: LD_INT 30
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 72
9147: ST_TO_ADDR
// if tmp then
9148: LD_VAR 0 19
9152: IFFALSE 9200
// for i in tmp do
9154: LD_ADDR_VAR 0 8
9158: PUSH
9159: LD_VAR 0 19
9163: PUSH
9164: FOR_IN
9165: IFFALSE 9198
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9167: LD_VAR 0 8
9171: PPUSH
9172: CALL_OW 250
9176: PPUSH
9177: LD_VAR 0 8
9181: PPUSH
9182: CALL_OW 251
9186: PPUSH
9187: LD_VAR 0 16
9191: PPUSH
9192: CALL_OW 441
9196: GO 9164
9198: POP
9199: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9200: LD_VAR 0 18
9204: PPUSH
9205: LD_INT 2
9207: PUSH
9208: LD_INT 30
9210: PUSH
9211: LD_INT 32
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 30
9220: PUSH
9221: LD_INT 33
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 72
9237: IFFALSE 9325
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9239: LD_ADDR_VAR 0 8
9243: PUSH
9244: LD_VAR 0 18
9248: PPUSH
9249: LD_INT 2
9251: PUSH
9252: LD_INT 30
9254: PUSH
9255: LD_INT 32
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 30
9264: PUSH
9265: LD_INT 33
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: PPUSH
9277: CALL_OW 72
9281: PUSH
9282: FOR_IN
9283: IFFALSE 9323
// begin if not GetBWeapon ( i ) then
9285: LD_VAR 0 8
9289: PPUSH
9290: CALL_OW 269
9294: NOT
9295: IFFALSE 9321
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9297: LD_VAR 0 8
9301: PPUSH
9302: LD_VAR 0 8
9306: PPUSH
9307: LD_VAR 0 2
9311: PPUSH
9312: CALL 10577 0 2
9316: PPUSH
9317: CALL_OW 431
// end ;
9321: GO 9282
9323: POP
9324: POP
// end ; for i = 1 to personel do
9325: LD_ADDR_VAR 0 8
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_VAR 0 6
9339: PUSH
9340: FOR_TO
9341: IFFALSE 10411
// begin if i > 4 then
9343: LD_VAR 0 8
9347: PUSH
9348: LD_INT 4
9350: GREATER
9351: IFFALSE 9355
// break ;
9353: GO 10411
// case i of 1 :
9355: LD_VAR 0 8
9359: PUSH
9360: LD_INT 1
9362: DOUBLE
9363: EQUAL
9364: IFTRUE 9368
9366: GO 9448
9368: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9369: LD_ADDR_VAR 0 12
9373: PUSH
9374: LD_VAR 0 18
9378: PPUSH
9379: LD_INT 22
9381: PUSH
9382: LD_VAR 0 16
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 58
9393: PUSH
9394: EMPTY
9395: LIST
9396: PUSH
9397: LD_INT 2
9399: PUSH
9400: LD_INT 30
9402: PUSH
9403: LD_INT 32
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 30
9412: PUSH
9413: LD_INT 4
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 30
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: PPUSH
9441: CALL_OW 72
9445: ST_TO_ADDR
9446: GO 9670
9448: LD_INT 2
9450: DOUBLE
9451: EQUAL
9452: IFTRUE 9456
9454: GO 9518
9456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9457: LD_ADDR_VAR 0 12
9461: PUSH
9462: LD_VAR 0 18
9466: PPUSH
9467: LD_INT 22
9469: PUSH
9470: LD_VAR 0 16
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: LD_INT 30
9484: PUSH
9485: LD_INT 0
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: LD_INT 30
9494: PUSH
9495: LD_INT 1
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PPUSH
9511: CALL_OW 72
9515: ST_TO_ADDR
9516: GO 9670
9518: LD_INT 3
9520: DOUBLE
9521: EQUAL
9522: IFTRUE 9526
9524: GO 9588
9526: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9527: LD_ADDR_VAR 0 12
9531: PUSH
9532: LD_VAR 0 18
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_VAR 0 16
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: LD_INT 30
9554: PUSH
9555: LD_INT 2
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: CALL_OW 72
9585: ST_TO_ADDR
9586: GO 9670
9588: LD_INT 4
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9669
9596: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9597: LD_ADDR_VAR 0 12
9601: PUSH
9602: LD_VAR 0 18
9606: PPUSH
9607: LD_INT 22
9609: PUSH
9610: LD_VAR 0 16
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 30
9624: PUSH
9625: LD_INT 6
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 30
9634: PUSH
9635: LD_INT 7
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 30
9644: PUSH
9645: LD_INT 8
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 72
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
// if i = 1 then
9670: LD_VAR 0 8
9674: PUSH
9675: LD_INT 1
9677: EQUAL
9678: IFFALSE 9789
// begin tmp := [ ] ;
9680: LD_ADDR_VAR 0 19
9684: PUSH
9685: EMPTY
9686: ST_TO_ADDR
// for j in f do
9687: LD_ADDR_VAR 0 9
9691: PUSH
9692: LD_VAR 0 12
9696: PUSH
9697: FOR_IN
9698: IFFALSE 9771
// if GetBType ( j ) = b_bunker then
9700: LD_VAR 0 9
9704: PPUSH
9705: CALL_OW 266
9709: PUSH
9710: LD_INT 32
9712: EQUAL
9713: IFFALSE 9740
// tmp := Insert ( tmp , 1 , j ) else
9715: LD_ADDR_VAR 0 19
9719: PUSH
9720: LD_VAR 0 19
9724: PPUSH
9725: LD_INT 1
9727: PPUSH
9728: LD_VAR 0 9
9732: PPUSH
9733: CALL_OW 2
9737: ST_TO_ADDR
9738: GO 9769
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9740: LD_ADDR_VAR 0 19
9744: PUSH
9745: LD_VAR 0 19
9749: PPUSH
9750: LD_VAR 0 19
9754: PUSH
9755: LD_INT 1
9757: PLUS
9758: PPUSH
9759: LD_VAR 0 9
9763: PPUSH
9764: CALL_OW 2
9768: ST_TO_ADDR
9769: GO 9697
9771: POP
9772: POP
// if tmp then
9773: LD_VAR 0 19
9777: IFFALSE 9789
// f := tmp ;
9779: LD_ADDR_VAR 0 12
9783: PUSH
9784: LD_VAR 0 19
9788: ST_TO_ADDR
// end ; x := personel [ i ] ;
9789: LD_ADDR_VAR 0 13
9793: PUSH
9794: LD_VAR 0 6
9798: PUSH
9799: LD_VAR 0 8
9803: ARRAY
9804: ST_TO_ADDR
// if x = - 1 then
9805: LD_VAR 0 13
9809: PUSH
9810: LD_INT 1
9812: NEG
9813: EQUAL
9814: IFFALSE 10025
// begin for j in f do
9816: LD_ADDR_VAR 0 9
9820: PUSH
9821: LD_VAR 0 12
9825: PUSH
9826: FOR_IN
9827: IFFALSE 10021
// repeat InitHc ;
9829: CALL_OW 19
// if GetBType ( j ) = b_barracks then
9833: LD_VAR 0 9
9837: PPUSH
9838: CALL_OW 266
9842: PUSH
9843: LD_INT 5
9845: EQUAL
9846: IFFALSE 9916
// begin if UnitsInside ( j ) < 3 then
9848: LD_VAR 0 9
9852: PPUSH
9853: CALL_OW 313
9857: PUSH
9858: LD_INT 3
9860: LESS
9861: IFFALSE 9897
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
9863: LD_INT 0
9865: PPUSH
9866: LD_INT 5
9868: PUSH
9869: LD_INT 8
9871: PUSH
9872: LD_INT 9
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: PUSH
9880: LD_VAR 0 17
9884: ARRAY
9885: PPUSH
9886: LD_VAR 0 4
9890: PPUSH
9891: CALL_OW 380
9895: GO 9914
// PrepareHuman ( false , i , skill ) ;
9897: LD_INT 0
9899: PPUSH
9900: LD_VAR 0 8
9904: PPUSH
9905: LD_VAR 0 4
9909: PPUSH
9910: CALL_OW 380
// end else
9914: GO 9933
// PrepareHuman ( false , i , skill ) ;
9916: LD_INT 0
9918: PPUSH
9919: LD_VAR 0 8
9923: PPUSH
9924: LD_VAR 0 4
9928: PPUSH
9929: CALL_OW 380
// un := CreateHuman ;
9933: LD_ADDR_VAR 0 14
9937: PUSH
9938: CALL_OW 44
9942: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
9943: LD_ADDR_VAR 0 7
9947: PUSH
9948: LD_VAR 0 7
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: LD_VAR 0 14
9960: PPUSH
9961: CALL_OW 2
9965: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
9966: LD_VAR 0 14
9970: PPUSH
9971: LD_VAR 0 9
9975: PPUSH
9976: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
9980: LD_VAR 0 9
9984: PPUSH
9985: CALL_OW 313
9989: PUSH
9990: LD_INT 6
9992: EQUAL
9993: IFTRUE 10017
9995: PUSH
9996: LD_VAR 0 9
10000: PPUSH
10001: CALL_OW 266
10005: PUSH
10006: LD_INT 32
10008: PUSH
10009: LD_INT 31
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: IN
10016: OR
10017: IFFALSE 9829
10019: GO 9826
10021: POP
10022: POP
// end else
10023: GO 10409
// for j = 1 to x do
10025: LD_ADDR_VAR 0 9
10029: PUSH
10030: DOUBLE
10031: LD_INT 1
10033: DEC
10034: ST_TO_ADDR
10035: LD_VAR 0 13
10039: PUSH
10040: FOR_TO
10041: IFFALSE 10407
// begin InitHc ;
10043: CALL_OW 19
// if not f then
10047: LD_VAR 0 12
10051: NOT
10052: IFFALSE 10141
// begin PrepareHuman ( false , i , skill ) ;
10054: LD_INT 0
10056: PPUSH
10057: LD_VAR 0 8
10061: PPUSH
10062: LD_VAR 0 4
10066: PPUSH
10067: CALL_OW 380
// un := CreateHuman ;
10071: LD_ADDR_VAR 0 14
10075: PUSH
10076: CALL_OW 44
10080: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10081: LD_ADDR_VAR 0 7
10085: PUSH
10086: LD_VAR 0 7
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: LD_VAR 0 14
10098: PPUSH
10099: CALL_OW 2
10103: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10104: LD_VAR 0 14
10108: PPUSH
10109: LD_VAR 0 1
10113: PPUSH
10114: CALL_OW 250
10118: PPUSH
10119: LD_VAR 0 1
10123: PPUSH
10124: CALL_OW 251
10128: PPUSH
10129: LD_INT 10
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL_OW 50
// continue ;
10139: GO 10040
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10141: LD_VAR 0 12
10145: PUSH
10146: LD_INT 1
10148: ARRAY
10149: PPUSH
10150: CALL_OW 313
10154: IFFALSE 10182
10156: PUSH
10157: LD_VAR 0 12
10161: PUSH
10162: LD_INT 1
10164: ARRAY
10165: PPUSH
10166: CALL_OW 266
10170: PUSH
10171: LD_INT 32
10173: PUSH
10174: LD_INT 31
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: IN
10181: AND
10182: IFTRUE 10203
10184: PUSH
10185: LD_VAR 0 12
10189: PUSH
10190: LD_INT 1
10192: ARRAY
10193: PPUSH
10194: CALL_OW 313
10198: PUSH
10199: LD_INT 6
10201: EQUAL
10202: OR
10203: IFFALSE 10223
// f := Delete ( f , 1 ) ;
10205: LD_ADDR_VAR 0 12
10209: PUSH
10210: LD_VAR 0 12
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 3
10222: ST_TO_ADDR
// if not f then
10223: LD_VAR 0 12
10227: NOT
10228: IFFALSE 10246
// begin x := x + 2 ;
10230: LD_ADDR_VAR 0 13
10234: PUSH
10235: LD_VAR 0 13
10239: PUSH
10240: LD_INT 2
10242: PLUS
10243: ST_TO_ADDR
// continue ;
10244: GO 10040
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10246: LD_VAR 0 12
10250: PUSH
10251: LD_INT 1
10253: ARRAY
10254: PPUSH
10255: CALL_OW 266
10259: PUSH
10260: LD_INT 5
10262: EQUAL
10263: IFFALSE 10337
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10265: LD_VAR 0 12
10269: PUSH
10270: LD_INT 1
10272: ARRAY
10273: PPUSH
10274: CALL_OW 313
10278: PUSH
10279: LD_INT 3
10281: LESS
10282: IFFALSE 10318
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10284: LD_INT 0
10286: PPUSH
10287: LD_INT 5
10289: PUSH
10290: LD_INT 8
10292: PUSH
10293: LD_INT 9
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: LD_VAR 0 17
10305: ARRAY
10306: PPUSH
10307: LD_VAR 0 4
10311: PPUSH
10312: CALL_OW 380
10316: GO 10335
// PrepareHuman ( false , i , skill ) ;
10318: LD_INT 0
10320: PPUSH
10321: LD_VAR 0 8
10325: PPUSH
10326: LD_VAR 0 4
10330: PPUSH
10331: CALL_OW 380
// end else
10335: GO 10354
// PrepareHuman ( false , i , skill ) ;
10337: LD_INT 0
10339: PPUSH
10340: LD_VAR 0 8
10344: PPUSH
10345: LD_VAR 0 4
10349: PPUSH
10350: CALL_OW 380
// un := CreateHuman ;
10354: LD_ADDR_VAR 0 14
10358: PUSH
10359: CALL_OW 44
10363: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10364: LD_ADDR_VAR 0 7
10368: PUSH
10369: LD_VAR 0 7
10373: PPUSH
10374: LD_INT 1
10376: PPUSH
10377: LD_VAR 0 14
10381: PPUSH
10382: CALL_OW 2
10386: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10387: LD_VAR 0 14
10391: PPUSH
10392: LD_VAR 0 12
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: CALL_OW 52
// end ;
10405: GO 10040
10407: POP
10408: POP
// end ;
10409: GO 9340
10411: POP
10412: POP
// result := result ^ buildings ;
10413: LD_ADDR_VAR 0 7
10417: PUSH
10418: LD_VAR 0 7
10422: PUSH
10423: LD_VAR 0 18
10427: ADD
10428: ST_TO_ADDR
// end else
10429: GO 10572
// begin for i = 1 to personel do
10431: LD_ADDR_VAR 0 8
10435: PUSH
10436: DOUBLE
10437: LD_INT 1
10439: DEC
10440: ST_TO_ADDR
10441: LD_VAR 0 6
10445: PUSH
10446: FOR_TO
10447: IFFALSE 10570
// begin if i > 4 then
10449: LD_VAR 0 8
10453: PUSH
10454: LD_INT 4
10456: GREATER
10457: IFFALSE 10461
// break ;
10459: GO 10570
// x := personel [ i ] ;
10461: LD_ADDR_VAR 0 13
10465: PUSH
10466: LD_VAR 0 6
10470: PUSH
10471: LD_VAR 0 8
10475: ARRAY
10476: ST_TO_ADDR
// if x = - 1 then
10477: LD_VAR 0 13
10481: PUSH
10482: LD_INT 1
10484: NEG
10485: EQUAL
10486: IFFALSE 10490
// continue ;
10488: GO 10446
// PrepareHuman ( false , i , skill ) ;
10490: LD_INT 0
10492: PPUSH
10493: LD_VAR 0 8
10497: PPUSH
10498: LD_VAR 0 4
10502: PPUSH
10503: CALL_OW 380
// un := CreateHuman ;
10507: LD_ADDR_VAR 0 14
10511: PUSH
10512: CALL_OW 44
10516: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10517: LD_VAR 0 14
10521: PPUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 250
10531: PPUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 251
10541: PPUSH
10542: LD_INT 10
10544: PPUSH
10545: LD_INT 0
10547: PPUSH
10548: CALL_OW 50
// result := result ^ un ;
10552: LD_ADDR_VAR 0 7
10556: PUSH
10557: LD_VAR 0 7
10561: PUSH
10562: LD_VAR 0 14
10566: ADD
10567: ST_TO_ADDR
// end ;
10568: GO 10446
10570: POP
10571: POP
// end ; end ;
10572: LD_VAR 0 7
10576: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10577: LD_INT 0
10579: PPUSH
10580: PPUSH
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
10585: PPUSH
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
10590: PPUSH
10591: PPUSH
10592: PPUSH
10593: PPUSH
10594: PPUSH
// result := false ;
10595: LD_ADDR_VAR 0 3
10599: PUSH
10600: LD_INT 0
10602: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10603: LD_VAR 0 1
10607: NOT
10608: IFTRUE 10633
10610: PUSH
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 266
10620: PUSH
10621: LD_INT 32
10623: PUSH
10624: LD_INT 33
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: IN
10631: NOT
10632: OR
10633: IFFALSE 10637
// exit ;
10635: GO 11772
// nat := GetNation ( tower ) ;
10637: LD_ADDR_VAR 0 12
10641: PUSH
10642: LD_VAR 0 1
10646: PPUSH
10647: CALL_OW 248
10651: ST_TO_ADDR
// side := GetSide ( tower ) ;
10652: LD_ADDR_VAR 0 16
10656: PUSH
10657: LD_VAR 0 1
10661: PPUSH
10662: CALL_OW 255
10666: ST_TO_ADDR
// x := GetX ( tower ) ;
10667: LD_ADDR_VAR 0 10
10671: PUSH
10672: LD_VAR 0 1
10676: PPUSH
10677: CALL_OW 250
10681: ST_TO_ADDR
// y := GetY ( tower ) ;
10682: LD_ADDR_VAR 0 11
10686: PUSH
10687: LD_VAR 0 1
10691: PPUSH
10692: CALL_OW 251
10696: ST_TO_ADDR
// if not x or not y then
10697: LD_VAR 0 10
10701: NOT
10702: IFTRUE 10711
10704: PUSH
10705: LD_VAR 0 11
10709: NOT
10710: OR
10711: IFFALSE 10715
// exit ;
10713: GO 11772
// weapon := 0 ;
10715: LD_ADDR_VAR 0 18
10719: PUSH
10720: LD_INT 0
10722: ST_TO_ADDR
// fac_list := [ ] ;
10723: LD_ADDR_VAR 0 17
10727: PUSH
10728: EMPTY
10729: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 274
10744: PPUSH
10745: LD_VAR 0 2
10749: PPUSH
10750: LD_INT 0
10752: PPUSH
10753: CALL 8307 0 3
10757: PPUSH
10758: LD_INT 30
10760: PUSH
10761: LD_INT 3
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PPUSH
10768: CALL_OW 72
10772: ST_TO_ADDR
// if not factories then
10773: LD_VAR 0 6
10777: NOT
10778: IFFALSE 10782
// exit ;
10780: GO 11772
// for i in factories do
10782: LD_ADDR_VAR 0 8
10786: PUSH
10787: LD_VAR 0 6
10791: PUSH
10792: FOR_IN
10793: IFFALSE 10818
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10795: LD_ADDR_VAR 0 17
10799: PUSH
10800: LD_VAR 0 17
10804: PUSH
10805: LD_VAR 0 8
10809: PPUSH
10810: CALL_OW 478
10814: UNION
10815: ST_TO_ADDR
10816: GO 10792
10818: POP
10819: POP
// if not fac_list then
10820: LD_VAR 0 17
10824: NOT
10825: IFFALSE 10829
// exit ;
10827: GO 11772
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_INT 4
10836: PUSH
10837: LD_INT 5
10839: PUSH
10840: LD_INT 9
10842: PUSH
10843: LD_INT 10
10845: PUSH
10846: LD_INT 6
10848: PUSH
10849: LD_INT 7
10851: PUSH
10852: LD_INT 11
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 27
10866: PUSH
10867: LD_INT 28
10869: PUSH
10870: LD_INT 26
10872: PUSH
10873: LD_INT 30
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 43
10884: PUSH
10885: LD_INT 44
10887: PUSH
10888: LD_INT 46
10890: PUSH
10891: LD_INT 45
10893: PUSH
10894: LD_INT 47
10896: PUSH
10897: LD_INT 49
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: LD_VAR 0 12
10917: ARRAY
10918: ST_TO_ADDR
// list := list isect fac_list ;
10919: LD_ADDR_VAR 0 5
10923: PUSH
10924: LD_VAR 0 5
10928: PUSH
10929: LD_VAR 0 17
10933: ISECT
10934: ST_TO_ADDR
// if not list then
10935: LD_VAR 0 5
10939: NOT
10940: IFFALSE 10944
// exit ;
10942: GO 11772
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
10944: LD_VAR 0 12
10948: PUSH
10949: LD_INT 3
10951: EQUAL
10952: IFFALSE 10964
10954: PUSH
10955: LD_INT 49
10957: PUSH
10958: LD_VAR 0 5
10962: IN
10963: AND
10964: IFFALSE 10984
10966: PUSH
10967: LD_INT 31
10969: PPUSH
10970: LD_VAR 0 16
10974: PPUSH
10975: CALL_OW 321
10979: PUSH
10980: LD_INT 2
10982: EQUAL
10983: AND
10984: IFFALSE 11044
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
10986: LD_INT 22
10988: PUSH
10989: LD_VAR 0 16
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 35
11000: PUSH
11001: LD_INT 49
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 91
11010: PUSH
11011: LD_VAR 0 1
11015: PUSH
11016: LD_INT 10
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: NOT
11034: IFFALSE 11044
// weapon := ru_time_lapser ;
11036: LD_ADDR_VAR 0 18
11040: PUSH
11041: LD_INT 49
11043: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11044: LD_VAR 0 12
11048: PUSH
11049: LD_INT 1
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: IN
11059: IFFALSE 11083
11061: PUSH
11062: LD_INT 11
11064: PUSH
11065: LD_VAR 0 5
11069: IN
11070: IFTRUE 11082
11072: PUSH
11073: LD_INT 30
11075: PUSH
11076: LD_VAR 0 5
11080: IN
11081: OR
11082: AND
11083: IFFALSE 11103
11085: PUSH
11086: LD_INT 6
11088: PPUSH
11089: LD_VAR 0 16
11093: PPUSH
11094: CALL_OW 321
11098: PUSH
11099: LD_INT 2
11101: EQUAL
11102: AND
11103: IFFALSE 11270
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11105: LD_INT 22
11107: PUSH
11108: LD_VAR 0 16
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: LD_INT 35
11122: PUSH
11123: LD_INT 11
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 35
11132: PUSH
11133: LD_INT 30
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 91
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: LD_INT 18
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: PPUSH
11166: CALL_OW 69
11170: NOT
11171: IFFALSE 11247
11173: PUSH
11174: LD_INT 22
11176: PUSH
11177: LD_VAR 0 16
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: LD_INT 30
11191: PUSH
11192: LD_INT 32
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 30
11201: PUSH
11202: LD_INT 33
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 91
11216: PUSH
11217: LD_VAR 0 1
11221: PUSH
11222: LD_INT 12
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: PUSH
11235: EMPTY
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 2
11245: GREATER
11246: AND
11247: IFFALSE 11270
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11249: LD_ADDR_VAR 0 18
11253: PUSH
11254: LD_INT 11
11256: PUSH
11257: LD_INT 30
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_VAR 0 12
11268: ARRAY
11269: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11270: LD_VAR 0 18
11274: NOT
11275: IFFALSE 11295
11277: PUSH
11278: LD_INT 40
11280: PPUSH
11281: LD_VAR 0 16
11285: PPUSH
11286: CALL_OW 321
11290: PUSH
11291: LD_INT 2
11293: EQUAL
11294: AND
11295: IFFALSE 11331
11297: PUSH
11298: LD_INT 7
11300: PUSH
11301: LD_VAR 0 5
11305: IN
11306: IFTRUE 11318
11308: PUSH
11309: LD_INT 28
11311: PUSH
11312: LD_VAR 0 5
11316: IN
11317: OR
11318: IFTRUE 11330
11320: PUSH
11321: LD_INT 45
11323: PUSH
11324: LD_VAR 0 5
11328: IN
11329: OR
11330: AND
11331: IFFALSE 11585
// begin hex := GetHexInfo ( x , y ) ;
11333: LD_ADDR_VAR 0 4
11337: PUSH
11338: LD_VAR 0 10
11342: PPUSH
11343: LD_VAR 0 11
11347: PPUSH
11348: CALL_OW 546
11352: ST_TO_ADDR
// if hex [ 1 ] then
11353: LD_VAR 0 4
11357: PUSH
11358: LD_INT 1
11360: ARRAY
11361: IFFALSE 11365
// exit ;
11363: GO 11772
// height := hex [ 2 ] ;
11365: LD_ADDR_VAR 0 15
11369: PUSH
11370: LD_VAR 0 4
11374: PUSH
11375: LD_INT 2
11377: ARRAY
11378: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11379: LD_ADDR_VAR 0 14
11383: PUSH
11384: LD_INT 0
11386: PUSH
11387: LD_INT 2
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: LD_INT 5
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: ST_TO_ADDR
// for i in tmp do
11402: LD_ADDR_VAR 0 8
11406: PUSH
11407: LD_VAR 0 14
11411: PUSH
11412: FOR_IN
11413: IFFALSE 11583
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11415: LD_ADDR_VAR 0 9
11419: PUSH
11420: LD_VAR 0 10
11424: PPUSH
11425: LD_VAR 0 8
11429: PPUSH
11430: LD_INT 5
11432: PPUSH
11433: CALL_OW 272
11437: PUSH
11438: LD_VAR 0 11
11442: PPUSH
11443: LD_VAR 0 8
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: CALL_OW 273
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11460: LD_VAR 0 9
11464: PUSH
11465: LD_INT 1
11467: ARRAY
11468: PPUSH
11469: LD_VAR 0 9
11473: PUSH
11474: LD_INT 2
11476: ARRAY
11477: PPUSH
11478: CALL_OW 488
11482: IFFALSE 11581
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11484: LD_ADDR_VAR 0 4
11488: PUSH
11489: LD_VAR 0 9
11493: PUSH
11494: LD_INT 1
11496: ARRAY
11497: PPUSH
11498: LD_VAR 0 9
11502: PUSH
11503: LD_INT 2
11505: ARRAY
11506: PPUSH
11507: CALL_OW 546
11511: ST_TO_ADDR
// if hex [ 1 ] then
11512: LD_VAR 0 4
11516: PUSH
11517: LD_INT 1
11519: ARRAY
11520: IFFALSE 11524
// continue ;
11522: GO 11412
// h := hex [ 2 ] ;
11524: LD_ADDR_VAR 0 13
11528: PUSH
11529: LD_VAR 0 4
11533: PUSH
11534: LD_INT 2
11536: ARRAY
11537: ST_TO_ADDR
// if h + 7 < height then
11538: LD_VAR 0 13
11542: PUSH
11543: LD_INT 7
11545: PLUS
11546: PUSH
11547: LD_VAR 0 15
11551: LESS
11552: IFFALSE 11581
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11554: LD_ADDR_VAR 0 18
11558: PUSH
11559: LD_INT 7
11561: PUSH
11562: LD_INT 28
11564: PUSH
11565: LD_INT 45
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_VAR 0 12
11577: ARRAY
11578: ST_TO_ADDR
// break ;
11579: GO 11583
// end ; end ; end ;
11581: GO 11412
11583: POP
11584: POP
// end ; if not weapon then
11585: LD_VAR 0 18
11589: NOT
11590: IFFALSE 11650
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11592: LD_ADDR_VAR 0 5
11596: PUSH
11597: LD_VAR 0 5
11601: PUSH
11602: LD_INT 11
11604: PUSH
11605: LD_INT 30
11607: PUSH
11608: LD_INT 49
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: DIFF
11616: ST_TO_ADDR
// if not list then
11617: LD_VAR 0 5
11621: NOT
11622: IFFALSE 11626
// exit ;
11624: GO 11772
// weapon := list [ rand ( 1 , list ) ] ;
11626: LD_ADDR_VAR 0 18
11630: PUSH
11631: LD_VAR 0 5
11635: PUSH
11636: LD_INT 1
11638: PPUSH
11639: LD_VAR 0 5
11643: PPUSH
11644: CALL_OW 12
11648: ARRAY
11649: ST_TO_ADDR
// end ; if weapon then
11650: LD_VAR 0 18
11654: IFFALSE 11772
// begin tmp := CostOfWeapon ( weapon ) ;
11656: LD_ADDR_VAR 0 14
11660: PUSH
11661: LD_VAR 0 18
11665: PPUSH
11666: CALL_OW 451
11670: ST_TO_ADDR
// j := GetBase ( tower ) ;
11671: LD_ADDR_VAR 0 9
11675: PUSH
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 274
11685: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11686: LD_VAR 0 9
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 275
11698: PUSH
11699: LD_VAR 0 14
11703: PUSH
11704: LD_INT 1
11706: ARRAY
11707: GREATEREQUAL
11708: IFFALSE 11734
11710: PUSH
11711: LD_VAR 0 9
11715: PPUSH
11716: LD_INT 2
11718: PPUSH
11719: CALL_OW 275
11723: PUSH
11724: LD_VAR 0 14
11728: PUSH
11729: LD_INT 2
11731: ARRAY
11732: GREATEREQUAL
11733: AND
11734: IFFALSE 11760
11736: PUSH
11737: LD_VAR 0 9
11741: PPUSH
11742: LD_INT 3
11744: PPUSH
11745: CALL_OW 275
11749: PUSH
11750: LD_VAR 0 14
11754: PUSH
11755: LD_INT 3
11757: ARRAY
11758: GREATEREQUAL
11759: AND
11760: IFFALSE 11772
// result := weapon ;
11762: LD_ADDR_VAR 0 3
11766: PUSH
11767: LD_VAR 0 18
11771: ST_TO_ADDR
// end ; end ;
11772: LD_VAR 0 3
11776: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11777: LD_INT 0
11779: PPUSH
11780: PPUSH
// result := true ;
11781: LD_ADDR_VAR 0 3
11785: PUSH
11786: LD_INT 1
11788: ST_TO_ADDR
// if array1 = array2 then
11789: LD_VAR 0 1
11793: PUSH
11794: LD_VAR 0 2
11798: EQUAL
11799: IFFALSE 11859
// begin for i = 1 to array1 do
11801: LD_ADDR_VAR 0 4
11805: PUSH
11806: DOUBLE
11807: LD_INT 1
11809: DEC
11810: ST_TO_ADDR
11811: LD_VAR 0 1
11815: PUSH
11816: FOR_TO
11817: IFFALSE 11855
// if array1 [ i ] <> array2 [ i ] then
11819: LD_VAR 0 1
11823: PUSH
11824: LD_VAR 0 4
11828: ARRAY
11829: PUSH
11830: LD_VAR 0 2
11834: PUSH
11835: LD_VAR 0 4
11839: ARRAY
11840: NONEQUAL
11841: IFFALSE 11853
// begin result := false ;
11843: LD_ADDR_VAR 0 3
11847: PUSH
11848: LD_INT 0
11850: ST_TO_ADDR
// break ;
11851: GO 11855
// end ;
11853: GO 11816
11855: POP
11856: POP
// end else
11857: GO 11867
// result := false ;
11859: LD_ADDR_VAR 0 3
11863: PUSH
11864: LD_INT 0
11866: ST_TO_ADDR
// end ;
11867: LD_VAR 0 3
11871: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
11872: LD_INT 0
11874: PPUSH
11875: PPUSH
// if not array1 or not array2 then
11876: LD_VAR 0 1
11880: NOT
11881: IFTRUE 11890
11883: PUSH
11884: LD_VAR 0 2
11888: NOT
11889: OR
11890: IFFALSE 11894
// exit ;
11892: GO 11958
// result := true ;
11894: LD_ADDR_VAR 0 3
11898: PUSH
11899: LD_INT 1
11901: ST_TO_ADDR
// for i = 1 to array1 do
11902: LD_ADDR_VAR 0 4
11906: PUSH
11907: DOUBLE
11908: LD_INT 1
11910: DEC
11911: ST_TO_ADDR
11912: LD_VAR 0 1
11916: PUSH
11917: FOR_TO
11918: IFFALSE 11956
// if array1 [ i ] <> array2 [ i ] then
11920: LD_VAR 0 1
11924: PUSH
11925: LD_VAR 0 4
11929: ARRAY
11930: PUSH
11931: LD_VAR 0 2
11935: PUSH
11936: LD_VAR 0 4
11940: ARRAY
11941: NONEQUAL
11942: IFFALSE 11954
// begin result := false ;
11944: LD_ADDR_VAR 0 3
11948: PUSH
11949: LD_INT 0
11951: ST_TO_ADDR
// break ;
11952: GO 11956
// end ;
11954: GO 11917
11956: POP
11957: POP
// end ;
11958: LD_VAR 0 3
11962: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
11967: PPUSH
// pom := GetBase ( fac ) ;
11968: LD_ADDR_VAR 0 5
11972: PUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 274
11982: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
11983: LD_ADDR_VAR 0 4
11987: PUSH
11988: LD_VAR 0 2
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: LD_VAR 0 2
12001: PUSH
12002: LD_INT 2
12004: ARRAY
12005: PPUSH
12006: LD_VAR 0 2
12010: PUSH
12011: LD_INT 3
12013: ARRAY
12014: PPUSH
12015: LD_VAR 0 2
12019: PUSH
12020: LD_INT 4
12022: ARRAY
12023: PPUSH
12024: CALL_OW 449
12028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12029: LD_ADDR_VAR 0 3
12033: PUSH
12034: LD_VAR 0 5
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 275
12046: PUSH
12047: LD_VAR 0 4
12051: PUSH
12052: LD_INT 1
12054: ARRAY
12055: GREATEREQUAL
12056: IFFALSE 12082
12058: PUSH
12059: LD_VAR 0 5
12063: PPUSH
12064: LD_INT 2
12066: PPUSH
12067: CALL_OW 275
12071: PUSH
12072: LD_VAR 0 4
12076: PUSH
12077: LD_INT 2
12079: ARRAY
12080: GREATEREQUAL
12081: AND
12082: IFFALSE 12108
12084: PUSH
12085: LD_VAR 0 5
12089: PPUSH
12090: LD_INT 3
12092: PPUSH
12093: CALL_OW 275
12097: PUSH
12098: LD_VAR 0 4
12102: PUSH
12103: LD_INT 3
12105: ARRAY
12106: GREATEREQUAL
12107: AND
12108: ST_TO_ADDR
// end ;
12109: LD_VAR 0 3
12113: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12114: LD_INT 0
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
// pom := GetBase ( building ) ;
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_VAR 0 1
12129: PPUSH
12130: CALL_OW 274
12134: ST_TO_ADDR
// if not pom then
12135: LD_VAR 0 3
12139: NOT
12140: IFFALSE 12144
// exit ;
12142: GO 12318
// btype := GetBType ( building ) ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 266
12158: ST_TO_ADDR
// if btype = b_armoury then
12159: LD_VAR 0 5
12163: PUSH
12164: LD_INT 4
12166: EQUAL
12167: IFFALSE 12177
// btype := b_barracks ;
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: LD_INT 5
12176: ST_TO_ADDR
// if btype = b_depot then
12177: LD_VAR 0 5
12181: PUSH
12182: LD_INT 0
12184: EQUAL
12185: IFFALSE 12195
// btype := b_warehouse ;
12187: LD_ADDR_VAR 0 5
12191: PUSH
12192: LD_INT 1
12194: ST_TO_ADDR
// if btype = b_workshop then
12195: LD_VAR 0 5
12199: PUSH
12200: LD_INT 2
12202: EQUAL
12203: IFFALSE 12213
// btype := b_factory ;
12205: LD_ADDR_VAR 0 5
12209: PUSH
12210: LD_INT 3
12212: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12213: LD_ADDR_VAR 0 4
12217: PUSH
12218: LD_VAR 0 5
12222: PPUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 248
12232: PPUSH
12233: CALL_OW 450
12237: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12238: LD_ADDR_VAR 0 2
12242: PUSH
12243: LD_VAR 0 3
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 275
12255: PUSH
12256: LD_VAR 0 4
12260: PUSH
12261: LD_INT 1
12263: ARRAY
12264: GREATEREQUAL
12265: IFFALSE 12291
12267: PUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 2
12275: PPUSH
12276: CALL_OW 275
12280: PUSH
12281: LD_VAR 0 4
12285: PUSH
12286: LD_INT 2
12288: ARRAY
12289: GREATEREQUAL
12290: AND
12291: IFFALSE 12317
12293: PUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 3
12301: PPUSH
12302: CALL_OW 275
12306: PUSH
12307: LD_VAR 0 4
12311: PUSH
12312: LD_INT 3
12314: ARRAY
12315: GREATEREQUAL
12316: AND
12317: ST_TO_ADDR
// end ;
12318: LD_VAR 0 2
12322: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12323: LD_INT 0
12325: PPUSH
12326: PPUSH
12327: PPUSH
// pom := GetBase ( building ) ;
12328: LD_ADDR_VAR 0 4
12332: PUSH
12333: LD_VAR 0 1
12337: PPUSH
12338: CALL_OW 274
12342: ST_TO_ADDR
// if not pom then
12343: LD_VAR 0 4
12347: NOT
12348: IFFALSE 12352
// exit ;
12350: GO 12457
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12352: LD_ADDR_VAR 0 5
12356: PUSH
12357: LD_VAR 0 2
12361: PPUSH
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL_OW 248
12371: PPUSH
12372: CALL_OW 450
12376: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12377: LD_ADDR_VAR 0 3
12381: PUSH
12382: LD_VAR 0 4
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 275
12394: PUSH
12395: LD_VAR 0 5
12399: PUSH
12400: LD_INT 1
12402: ARRAY
12403: GREATEREQUAL
12404: IFFALSE 12430
12406: PUSH
12407: LD_VAR 0 4
12411: PPUSH
12412: LD_INT 2
12414: PPUSH
12415: CALL_OW 275
12419: PUSH
12420: LD_VAR 0 5
12424: PUSH
12425: LD_INT 2
12427: ARRAY
12428: GREATEREQUAL
12429: AND
12430: IFFALSE 12456
12432: PUSH
12433: LD_VAR 0 4
12437: PPUSH
12438: LD_INT 3
12440: PPUSH
12441: CALL_OW 275
12445: PUSH
12446: LD_VAR 0 5
12450: PUSH
12451: LD_INT 3
12453: ARRAY
12454: GREATEREQUAL
12455: AND
12456: ST_TO_ADDR
// end ;
12457: LD_VAR 0 3
12461: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12462: LD_INT 0
12464: PPUSH
12465: PPUSH
12466: PPUSH
12467: PPUSH
12468: PPUSH
12469: PPUSH
12470: PPUSH
12471: PPUSH
12472: PPUSH
12473: PPUSH
12474: PPUSH
// result := false ;
12475: LD_ADDR_VAR 0 8
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12483: LD_VAR 0 5
12487: NOT
12488: IFTRUE 12497
12490: PUSH
12491: LD_VAR 0 1
12495: NOT
12496: OR
12497: IFTRUE 12506
12499: PUSH
12500: LD_VAR 0 2
12504: NOT
12505: OR
12506: IFTRUE 12515
12508: PUSH
12509: LD_VAR 0 3
12513: NOT
12514: OR
12515: IFFALSE 12519
// exit ;
12517: GO 13345
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12519: LD_ADDR_VAR 0 14
12523: PUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: LD_VAR 0 2
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_VAR 0 4
12543: PPUSH
12544: LD_VAR 0 5
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: PPUSH
12553: CALL_OW 248
12557: PPUSH
12558: LD_INT 0
12560: PPUSH
12561: CALL 14626 0 6
12565: ST_TO_ADDR
// if not hexes then
12566: LD_VAR 0 14
12570: NOT
12571: IFFALSE 12575
// exit ;
12573: GO 13345
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12575: LD_ADDR_VAR 0 17
12579: PUSH
12580: LD_VAR 0 5
12584: PPUSH
12585: LD_INT 22
12587: PUSH
12588: LD_VAR 0 13
12592: PPUSH
12593: CALL_OW 255
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 30
12607: PUSH
12608: LD_INT 0
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 30
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PPUSH
12634: CALL_OW 72
12638: ST_TO_ADDR
// for i = 1 to hexes do
12639: LD_ADDR_VAR 0 9
12643: PUSH
12644: DOUBLE
12645: LD_INT 1
12647: DEC
12648: ST_TO_ADDR
12649: LD_VAR 0 14
12653: PUSH
12654: FOR_TO
12655: IFFALSE 13343
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12657: LD_ADDR_VAR 0 13
12661: PUSH
12662: LD_VAR 0 14
12666: PUSH
12667: LD_VAR 0 9
12671: ARRAY
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_VAR 0 14
12681: PUSH
12682: LD_VAR 0 9
12686: ARRAY
12687: PUSH
12688: LD_INT 2
12690: ARRAY
12691: PPUSH
12692: CALL_OW 428
12696: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12697: LD_VAR 0 14
12701: PUSH
12702: LD_VAR 0 9
12706: ARRAY
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: PPUSH
12712: LD_VAR 0 14
12716: PUSH
12717: LD_VAR 0 9
12721: ARRAY
12722: PUSH
12723: LD_INT 2
12725: ARRAY
12726: PPUSH
12727: CALL_OW 351
12731: IFTRUE 12770
12733: PUSH
12734: LD_VAR 0 14
12738: PUSH
12739: LD_VAR 0 9
12743: ARRAY
12744: PUSH
12745: LD_INT 1
12747: ARRAY
12748: PPUSH
12749: LD_VAR 0 14
12753: PUSH
12754: LD_VAR 0 9
12758: ARRAY
12759: PUSH
12760: LD_INT 2
12762: ARRAY
12763: PPUSH
12764: CALL_OW 488
12768: NOT
12769: OR
12770: IFTRUE 12787
12772: PUSH
12773: LD_VAR 0 13
12777: PPUSH
12778: CALL_OW 247
12782: PUSH
12783: LD_INT 3
12785: EQUAL
12786: OR
12787: IFFALSE 12793
// exit ;
12789: POP
12790: POP
12791: GO 13345
// if not tmp then
12793: LD_VAR 0 13
12797: NOT
12798: IFFALSE 12802
// continue ;
12800: GO 12654
// result := true ;
12802: LD_ADDR_VAR 0 8
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12810: LD_VAR 0 6
12814: IFFALSE 12831
12816: PUSH
12817: LD_VAR 0 13
12821: PPUSH
12822: CALL_OW 247
12826: PUSH
12827: LD_INT 2
12829: EQUAL
12830: AND
12831: IFFALSE 12848
12833: PUSH
12834: LD_VAR 0 13
12838: PPUSH
12839: CALL_OW 263
12843: PUSH
12844: LD_INT 1
12846: EQUAL
12847: AND
12848: IFFALSE 13012
// begin if IsDrivenBy ( tmp ) then
12850: LD_VAR 0 13
12854: PPUSH
12855: CALL_OW 311
12859: IFFALSE 12863
// continue ;
12861: GO 12654
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
12863: LD_VAR 0 6
12867: PPUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 60
12873: PUSH
12874: EMPTY
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: LD_INT 55
12886: PUSH
12887: EMPTY
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 72
12902: IFFALSE 13010
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
12904: LD_ADDR_VAR 0 18
12908: PUSH
12909: LD_VAR 0 6
12913: PPUSH
12914: LD_INT 3
12916: PUSH
12917: LD_INT 60
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 55
12932: PUSH
12933: EMPTY
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 72
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: ST_TO_ADDR
// if IsInUnit ( driver ) then
12953: LD_VAR 0 18
12957: PPUSH
12958: CALL_OW 310
12962: IFFALSE 12973
// ComExit ( driver ) ;
12964: LD_VAR 0 18
12968: PPUSH
12969: CALL 38616 0 1
// AddComEnterUnit ( driver , tmp ) ;
12973: LD_VAR 0 18
12977: PPUSH
12978: LD_VAR 0 13
12982: PPUSH
12983: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
12987: LD_VAR 0 18
12991: PPUSH
12992: LD_VAR 0 7
12996: PPUSH
12997: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13001: LD_VAR 0 18
13005: PPUSH
13006: CALL_OW 181
// end ; continue ;
13010: GO 12654
// end ; if not cleaners or not tmp in cleaners then
13012: LD_VAR 0 6
13016: NOT
13017: IFTRUE 13032
13019: PUSH
13020: LD_VAR 0 13
13024: PUSH
13025: LD_VAR 0 6
13029: IN
13030: NOT
13031: OR
13032: IFFALSE 13341
// begin if dep then
13034: LD_VAR 0 17
13038: IFFALSE 13174
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13040: LD_ADDR_VAR 0 16
13044: PUSH
13045: LD_VAR 0 17
13049: PUSH
13050: LD_INT 1
13052: ARRAY
13053: PPUSH
13054: CALL_OW 250
13058: PPUSH
13059: LD_VAR 0 17
13063: PUSH
13064: LD_INT 1
13066: ARRAY
13067: PPUSH
13068: CALL_OW 254
13072: PPUSH
13073: LD_INT 5
13075: PPUSH
13076: CALL_OW 272
13080: PUSH
13081: LD_VAR 0 17
13085: PUSH
13086: LD_INT 1
13088: ARRAY
13089: PPUSH
13090: CALL_OW 251
13094: PPUSH
13095: LD_VAR 0 17
13099: PUSH
13100: LD_INT 1
13102: ARRAY
13103: PPUSH
13104: CALL_OW 254
13108: PPUSH
13109: LD_INT 5
13111: PPUSH
13112: CALL_OW 273
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13121: LD_VAR 0 16
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: LD_VAR 0 16
13134: PUSH
13135: LD_INT 2
13137: ARRAY
13138: PPUSH
13139: CALL_OW 488
13143: IFFALSE 13174
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13145: LD_VAR 0 13
13149: PPUSH
13150: LD_VAR 0 16
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: PPUSH
13159: LD_VAR 0 16
13163: PUSH
13164: LD_INT 2
13166: ARRAY
13167: PPUSH
13168: CALL_OW 111
// continue ;
13172: GO 12654
// end ; end ; r := GetDir ( tmp ) ;
13174: LD_ADDR_VAR 0 15
13178: PUSH
13179: LD_VAR 0 13
13183: PPUSH
13184: CALL_OW 254
13188: ST_TO_ADDR
// if r = 5 then
13189: LD_VAR 0 15
13193: PUSH
13194: LD_INT 5
13196: EQUAL
13197: IFFALSE 13207
// r := 0 ;
13199: LD_ADDR_VAR 0 15
13203: PUSH
13204: LD_INT 0
13206: ST_TO_ADDR
// for j = r to 5 do
13207: LD_ADDR_VAR 0 10
13211: PUSH
13212: DOUBLE
13213: LD_VAR 0 15
13217: DEC
13218: ST_TO_ADDR
13219: LD_INT 5
13221: PUSH
13222: FOR_TO
13223: IFFALSE 13339
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13225: LD_ADDR_VAR 0 11
13229: PUSH
13230: LD_VAR 0 13
13234: PPUSH
13235: CALL_OW 250
13239: PPUSH
13240: LD_VAR 0 10
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 272
13252: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13253: LD_ADDR_VAR 0 12
13257: PUSH
13258: LD_VAR 0 13
13262: PPUSH
13263: CALL_OW 251
13267: PPUSH
13268: LD_VAR 0 10
13272: PPUSH
13273: LD_INT 2
13275: PPUSH
13276: CALL_OW 273
13280: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13281: LD_VAR 0 11
13285: PPUSH
13286: LD_VAR 0 12
13290: PPUSH
13291: CALL_OW 488
13295: IFFALSE 13314
13297: PUSH
13298: LD_VAR 0 11
13302: PPUSH
13303: LD_VAR 0 12
13307: PPUSH
13308: CALL_OW 428
13312: NOT
13313: AND
13314: IFFALSE 13337
// begin ComMoveXY ( tmp , _x , _y ) ;
13316: LD_VAR 0 13
13320: PPUSH
13321: LD_VAR 0 11
13325: PPUSH
13326: LD_VAR 0 12
13330: PPUSH
13331: CALL_OW 111
// break ;
13335: GO 13339
// end ; end ;
13337: GO 13222
13339: POP
13340: POP
// end ; end ;
13341: GO 12654
13343: POP
13344: POP
// end ;
13345: LD_VAR 0 8
13349: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13350: LD_INT 0
13352: PPUSH
// result := true ;
13353: LD_ADDR_VAR 0 3
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13361: LD_VAR 0 2
13365: PUSH
13366: LD_INT 24
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13380
13372: LD_INT 33
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13405
13380: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13381: LD_ADDR_VAR 0 3
13385: PUSH
13386: LD_INT 32
13388: PPUSH
13389: LD_VAR 0 1
13393: PPUSH
13394: CALL_OW 321
13398: PUSH
13399: LD_INT 2
13401: EQUAL
13402: ST_TO_ADDR
13403: GO 13721
13405: LD_INT 20
13407: DOUBLE
13408: EQUAL
13409: IFTRUE 13413
13411: GO 13438
13413: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: LD_INT 6
13421: PPUSH
13422: LD_VAR 0 1
13426: PPUSH
13427: CALL_OW 321
13431: PUSH
13432: LD_INT 2
13434: EQUAL
13435: ST_TO_ADDR
13436: GO 13721
13438: LD_INT 22
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13452
13444: LD_INT 36
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13477
13452: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13453: LD_ADDR_VAR 0 3
13457: PUSH
13458: LD_INT 15
13460: PPUSH
13461: LD_VAR 0 1
13465: PPUSH
13466: CALL_OW 321
13470: PUSH
13471: LD_INT 2
13473: EQUAL
13474: ST_TO_ADDR
13475: GO 13721
13477: LD_INT 30
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13510
13485: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 20
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 321
13503: PUSH
13504: LD_INT 2
13506: EQUAL
13507: ST_TO_ADDR
13508: GO 13721
13510: LD_INT 28
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13524
13516: LD_INT 21
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13549
13524: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 21
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 321
13542: PUSH
13543: LD_INT 2
13545: EQUAL
13546: ST_TO_ADDR
13547: GO 13721
13549: LD_INT 16
13551: DOUBLE
13552: EQUAL
13553: IFTRUE 13557
13555: GO 13582
13557: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13558: LD_ADDR_VAR 0 3
13562: PUSH
13563: LD_INT 84
13565: PPUSH
13566: LD_VAR 0 1
13570: PPUSH
13571: CALL_OW 321
13575: PUSH
13576: LD_INT 2
13578: EQUAL
13579: ST_TO_ADDR
13580: GO 13721
13582: LD_INT 19
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13596
13588: LD_INT 23
13590: DOUBLE
13591: EQUAL
13592: IFTRUE 13596
13594: GO 13621
13596: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13597: LD_ADDR_VAR 0 3
13601: PUSH
13602: LD_INT 83
13604: PPUSH
13605: LD_VAR 0 1
13609: PPUSH
13610: CALL_OW 321
13614: PUSH
13615: LD_INT 2
13617: EQUAL
13618: ST_TO_ADDR
13619: GO 13721
13621: LD_INT 17
13623: DOUBLE
13624: EQUAL
13625: IFTRUE 13629
13627: GO 13654
13629: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: LD_INT 39
13637: PPUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 321
13647: PUSH
13648: LD_INT 2
13650: EQUAL
13651: ST_TO_ADDR
13652: GO 13721
13654: LD_INT 18
13656: DOUBLE
13657: EQUAL
13658: IFTRUE 13662
13660: GO 13687
13662: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_INT 40
13670: PPUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 321
13680: PUSH
13681: LD_INT 2
13683: EQUAL
13684: ST_TO_ADDR
13685: GO 13721
13687: LD_INT 27
13689: DOUBLE
13690: EQUAL
13691: IFTRUE 13695
13693: GO 13720
13695: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13696: LD_ADDR_VAR 0 3
13700: PUSH
13701: LD_INT 35
13703: PPUSH
13704: LD_VAR 0 1
13708: PPUSH
13709: CALL_OW 321
13713: PUSH
13714: LD_INT 2
13716: EQUAL
13717: ST_TO_ADDR
13718: GO 13721
13720: POP
// end ;
13721: LD_VAR 0 3
13725: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13726: LD_INT 0
13728: PPUSH
13729: PPUSH
13730: PPUSH
13731: PPUSH
13732: PPUSH
13733: PPUSH
13734: PPUSH
13735: PPUSH
13736: PPUSH
13737: PPUSH
13738: PPUSH
// result := false ;
13739: LD_ADDR_VAR 0 6
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// if btype = b_depot then
13747: LD_VAR 0 2
13751: PUSH
13752: LD_INT 0
13754: EQUAL
13755: IFFALSE 13767
// begin result := true ;
13757: LD_ADDR_VAR 0 6
13761: PUSH
13762: LD_INT 1
13764: ST_TO_ADDR
// exit ;
13765: GO 14621
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13767: LD_VAR 0 1
13771: NOT
13772: IFTRUE 13797
13774: PUSH
13775: LD_VAR 0 1
13779: PPUSH
13780: CALL_OW 266
13784: PUSH
13785: LD_INT 0
13787: PUSH
13788: LD_INT 1
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: IN
13795: NOT
13796: OR
13797: IFTRUE 13806
13799: PUSH
13800: LD_VAR 0 2
13804: NOT
13805: OR
13806: IFTRUE 13842
13808: PUSH
13809: LD_VAR 0 5
13813: PUSH
13814: LD_INT 0
13816: PUSH
13817: LD_INT 1
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: LD_INT 4
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: IN
13840: NOT
13841: OR
13842: IFTRUE 13861
13844: PUSH
13845: LD_VAR 0 3
13849: PPUSH
13850: LD_VAR 0 4
13854: PPUSH
13855: CALL_OW 488
13859: NOT
13860: OR
13861: IFFALSE 13865
// exit ;
13863: GO 14621
// side := GetSide ( depot ) ;
13865: LD_ADDR_VAR 0 9
13869: PUSH
13870: LD_VAR 0 1
13874: PPUSH
13875: CALL_OW 255
13879: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
13880: LD_VAR 0 9
13884: PPUSH
13885: LD_VAR 0 2
13889: PPUSH
13890: CALL 13350 0 2
13894: NOT
13895: IFFALSE 13899
// exit ;
13897: GO 14621
// pom := GetBase ( depot ) ;
13899: LD_ADDR_VAR 0 10
13903: PUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 274
13913: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
13914: LD_ADDR_VAR 0 11
13918: PUSH
13919: LD_VAR 0 2
13923: PPUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: CALL_OW 248
13933: PPUSH
13934: CALL_OW 450
13938: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
13939: LD_VAR 0 10
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 275
13951: PUSH
13952: LD_VAR 0 11
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: GREATEREQUAL
13961: IFFALSE 13987
13963: PUSH
13964: LD_VAR 0 10
13968: PPUSH
13969: LD_INT 2
13971: PPUSH
13972: CALL_OW 275
13976: PUSH
13977: LD_VAR 0 11
13981: PUSH
13982: LD_INT 2
13984: ARRAY
13985: GREATEREQUAL
13986: AND
13987: IFFALSE 14013
13989: PUSH
13990: LD_VAR 0 10
13994: PPUSH
13995: LD_INT 3
13997: PPUSH
13998: CALL_OW 275
14002: PUSH
14003: LD_VAR 0 11
14007: PUSH
14008: LD_INT 3
14010: ARRAY
14011: GREATEREQUAL
14012: AND
14013: NOT
14014: IFFALSE 14018
// exit ;
14016: GO 14621
// if GetBType ( depot ) = b_depot then
14018: LD_VAR 0 1
14022: PPUSH
14023: CALL_OW 266
14027: PUSH
14028: LD_INT 0
14030: EQUAL
14031: IFFALSE 14043
// dist := 28 else
14033: LD_ADDR_VAR 0 14
14037: PUSH
14038: LD_INT 28
14040: ST_TO_ADDR
14041: GO 14051
// dist := 36 ;
14043: LD_ADDR_VAR 0 14
14047: PUSH
14048: LD_INT 36
14050: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14051: LD_VAR 0 1
14055: PPUSH
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_VAR 0 4
14065: PPUSH
14066: CALL_OW 297
14070: PUSH
14071: LD_VAR 0 14
14075: GREATER
14076: IFFALSE 14080
// exit ;
14078: GO 14621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14080: LD_ADDR_VAR 0 12
14084: PUSH
14085: LD_VAR 0 2
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_VAR 0 4
14099: PPUSH
14100: LD_VAR 0 5
14104: PPUSH
14105: LD_VAR 0 1
14109: PPUSH
14110: CALL_OW 248
14114: PPUSH
14115: LD_INT 0
14117: PPUSH
14118: CALL 14626 0 6
14122: ST_TO_ADDR
// if not hexes then
14123: LD_VAR 0 12
14127: NOT
14128: IFFALSE 14132
// exit ;
14130: GO 14621
// hex := GetHexInfo ( x , y ) ;
14132: LD_ADDR_VAR 0 15
14136: PUSH
14137: LD_VAR 0 3
14141: PPUSH
14142: LD_VAR 0 4
14146: PPUSH
14147: CALL_OW 546
14151: ST_TO_ADDR
// if hex [ 1 ] then
14152: LD_VAR 0 15
14156: PUSH
14157: LD_INT 1
14159: ARRAY
14160: IFFALSE 14164
// exit ;
14162: GO 14621
// height := hex [ 2 ] ;
14164: LD_ADDR_VAR 0 13
14168: PUSH
14169: LD_VAR 0 15
14173: PUSH
14174: LD_INT 2
14176: ARRAY
14177: ST_TO_ADDR
// for i = 1 to hexes do
14178: LD_ADDR_VAR 0 7
14182: PUSH
14183: DOUBLE
14184: LD_INT 1
14186: DEC
14187: ST_TO_ADDR
14188: LD_VAR 0 12
14192: PUSH
14193: FOR_TO
14194: IFFALSE 14538
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14196: LD_VAR 0 12
14200: PUSH
14201: LD_VAR 0 7
14205: ARRAY
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: LD_VAR 0 12
14215: PUSH
14216: LD_VAR 0 7
14220: ARRAY
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: PPUSH
14226: CALL_OW 488
14230: NOT
14231: IFTRUE 14273
14233: PUSH
14234: LD_VAR 0 12
14238: PUSH
14239: LD_VAR 0 7
14243: ARRAY
14244: PUSH
14245: LD_INT 1
14247: ARRAY
14248: PPUSH
14249: LD_VAR 0 12
14253: PUSH
14254: LD_VAR 0 7
14258: ARRAY
14259: PUSH
14260: LD_INT 2
14262: ARRAY
14263: PPUSH
14264: CALL_OW 428
14268: PUSH
14269: LD_INT 0
14271: GREATER
14272: OR
14273: IFTRUE 14311
14275: PUSH
14276: LD_VAR 0 12
14280: PUSH
14281: LD_VAR 0 7
14285: ARRAY
14286: PUSH
14287: LD_INT 1
14289: ARRAY
14290: PPUSH
14291: LD_VAR 0 12
14295: PUSH
14296: LD_VAR 0 7
14300: ARRAY
14301: PUSH
14302: LD_INT 2
14304: ARRAY
14305: PPUSH
14306: CALL_OW 351
14310: OR
14311: IFFALSE 14317
// exit ;
14313: POP
14314: POP
14315: GO 14621
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14317: LD_ADDR_VAR 0 8
14321: PUSH
14322: LD_VAR 0 12
14326: PUSH
14327: LD_VAR 0 7
14331: ARRAY
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: LD_VAR 0 12
14341: PUSH
14342: LD_VAR 0 7
14346: ARRAY
14347: PUSH
14348: LD_INT 2
14350: ARRAY
14351: PPUSH
14352: CALL_OW 546
14356: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14357: LD_VAR 0 8
14361: PUSH
14362: LD_INT 1
14364: ARRAY
14365: IFTRUE 14387
14367: PUSH
14368: LD_VAR 0 8
14372: PUSH
14373: LD_INT 2
14375: ARRAY
14376: PUSH
14377: LD_VAR 0 13
14381: PUSH
14382: LD_INT 2
14384: PLUS
14385: GREATER
14386: OR
14387: IFTRUE 14409
14389: PUSH
14390: LD_VAR 0 8
14394: PUSH
14395: LD_INT 2
14397: ARRAY
14398: PUSH
14399: LD_VAR 0 13
14403: PUSH
14404: LD_INT 2
14406: MINUS
14407: LESS
14408: OR
14409: IFTRUE 14477
14411: PUSH
14412: LD_VAR 0 8
14416: PUSH
14417: LD_INT 3
14419: ARRAY
14420: PUSH
14421: LD_INT 0
14423: PUSH
14424: LD_INT 8
14426: PUSH
14427: LD_INT 9
14429: PUSH
14430: LD_INT 10
14432: PUSH
14433: LD_INT 11
14435: PUSH
14436: LD_INT 12
14438: PUSH
14439: LD_INT 13
14441: PUSH
14442: LD_INT 16
14444: PUSH
14445: LD_INT 17
14447: PUSH
14448: LD_INT 18
14450: PUSH
14451: LD_INT 19
14453: PUSH
14454: LD_INT 20
14456: PUSH
14457: LD_INT 21
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: IN
14475: NOT
14476: OR
14477: IFTRUE 14490
14479: PUSH
14480: LD_VAR 0 8
14484: PUSH
14485: LD_INT 5
14487: ARRAY
14488: NOT
14489: OR
14490: IFTRUE 14530
14492: PUSH
14493: LD_VAR 0 8
14497: PUSH
14498: LD_INT 6
14500: ARRAY
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: LD_INT 2
14507: PUSH
14508: LD_INT 7
14510: PUSH
14511: LD_INT 9
14513: PUSH
14514: LD_INT 10
14516: PUSH
14517: LD_INT 11
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: IN
14528: NOT
14529: OR
14530: IFFALSE 14536
// exit ;
14532: POP
14533: POP
14534: GO 14621
// end ;
14536: GO 14193
14538: POP
14539: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14540: LD_VAR 0 9
14544: PPUSH
14545: LD_VAR 0 3
14549: PPUSH
14550: LD_VAR 0 4
14554: PPUSH
14555: LD_INT 20
14557: PPUSH
14558: CALL 6440 0 4
14562: PUSH
14563: LD_INT 4
14565: ARRAY
14566: IFFALSE 14570
// exit ;
14568: GO 14621
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14570: LD_VAR 0 2
14574: PUSH
14575: LD_INT 29
14577: PUSH
14578: LD_INT 30
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: IN
14585: IFFALSE 14609
14587: PUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: LD_VAR 0 9
14602: PPUSH
14603: CALL_OW 440
14607: NOT
14608: AND
14609: IFFALSE 14613
// exit ;
14611: GO 14621
// result := true ;
14613: LD_ADDR_VAR 0 6
14617: PUSH
14618: LD_INT 1
14620: ST_TO_ADDR
// end ;
14621: LD_VAR 0 6
14625: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14626: LD_INT 0
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
14633: PPUSH
14634: PPUSH
14635: PPUSH
14636: PPUSH
14637: PPUSH
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
14648: PPUSH
14649: PPUSH
14650: PPUSH
14651: PPUSH
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
14666: PPUSH
14667: PPUSH
14668: PPUSH
14669: PPUSH
14670: PPUSH
14671: PPUSH
14672: PPUSH
14673: PPUSH
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
14680: PPUSH
14681: PPUSH
14682: PPUSH
14683: PPUSH
14684: PPUSH
14685: PPUSH
// result = [ ] ;
14686: LD_ADDR_VAR 0 7
14690: PUSH
14691: EMPTY
14692: ST_TO_ADDR
// temp_list = [ ] ;
14693: LD_ADDR_VAR 0 9
14697: PUSH
14698: EMPTY
14699: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14700: LD_VAR 0 4
14704: PUSH
14705: LD_INT 0
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 4
14719: PUSH
14720: LD_INT 5
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: IN
14731: NOT
14732: IFTRUE 14775
14734: PUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 0
14742: PUSH
14743: LD_INT 1
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: IN
14750: IFFALSE 14774
14752: PUSH
14753: LD_VAR 0 5
14757: PUSH
14758: LD_INT 1
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: LD_INT 3
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: IN
14772: NOT
14773: AND
14774: OR
14775: IFFALSE 14779
// exit ;
14777: GO 33178
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14779: LD_VAR 0 1
14783: PUSH
14784: LD_INT 6
14786: PUSH
14787: LD_INT 7
14789: PUSH
14790: LD_INT 8
14792: PUSH
14793: LD_INT 13
14795: PUSH
14796: LD_INT 12
14798: PUSH
14799: LD_INT 15
14801: PUSH
14802: LD_INT 11
14804: PUSH
14805: LD_INT 14
14807: PUSH
14808: LD_INT 10
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: IN
14822: IFFALSE 14832
// btype = b_lab ;
14824: LD_ADDR_VAR 0 1
14828: PUSH
14829: LD_INT 6
14831: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14832: LD_VAR 0 6
14836: PUSH
14837: LD_INT 0
14839: PUSH
14840: LD_INT 1
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: LIST
14850: IN
14851: NOT
14852: IFTRUE 14920
14854: PUSH
14855: LD_VAR 0 1
14859: PUSH
14860: LD_INT 0
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: LD_INT 3
14871: PUSH
14872: LD_INT 6
14874: PUSH
14875: LD_INT 36
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: LD_INT 31
14886: PUSH
14887: LD_INT 32
14889: PUSH
14890: LD_INT 33
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: IN
14906: NOT
14907: IFFALSE 14919
14909: PUSH
14910: LD_VAR 0 6
14914: PUSH
14915: LD_INT 1
14917: EQUAL
14918: AND
14919: OR
14920: IFTRUE 14952
14922: PUSH
14923: LD_VAR 0 1
14927: PUSH
14928: LD_INT 2
14930: PUSH
14931: LD_INT 3
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: IN
14938: NOT
14939: IFFALSE 14951
14941: PUSH
14942: LD_VAR 0 6
14946: PUSH
14947: LD_INT 2
14949: EQUAL
14950: AND
14951: OR
14952: IFFALSE 14962
// mode = 0 ;
14954: LD_ADDR_VAR 0 6
14958: PUSH
14959: LD_INT 0
14961: ST_TO_ADDR
// case mode of 0 :
14962: LD_VAR 0 6
14966: PUSH
14967: LD_INT 0
14969: DOUBLE
14970: EQUAL
14971: IFTRUE 14975
14973: GO 26428
14975: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
14976: LD_ADDR_VAR 0 11
14980: PUSH
14981: LD_INT 0
14983: PUSH
14984: LD_INT 0
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: LD_INT 0
14993: PUSH
14994: LD_INT 1
14996: NEG
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: LD_INT 0
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 1
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 0
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 1
15034: NEG
15035: PUSH
15036: LD_INT 0
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: NEG
15046: PUSH
15047: LD_INT 1
15049: NEG
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 1
15057: NEG
15058: PUSH
15059: LD_INT 2
15061: NEG
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 0
15069: PUSH
15070: LD_INT 2
15072: NEG
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: LD_INT 1
15083: NEG
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: LD_INT 2
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 0
15101: PUSH
15102: LD_INT 2
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 1
15111: NEG
15112: PUSH
15113: LD_INT 1
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 1
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 0
15132: PUSH
15133: LD_INT 3
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 1
15142: NEG
15143: PUSH
15144: LD_INT 2
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15169: LD_ADDR_VAR 0 12
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 0
15186: PUSH
15187: LD_INT 1
15189: NEG
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: LD_INT 1
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 1
15227: NEG
15228: PUSH
15229: LD_INT 0
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 1
15238: NEG
15239: PUSH
15240: LD_INT 1
15242: NEG
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 1
15250: PUSH
15251: LD_INT 1
15253: NEG
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: LD_INT 0
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 2
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 1
15281: NEG
15282: PUSH
15283: LD_INT 1
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 2
15292: NEG
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 2
15303: NEG
15304: PUSH
15305: LD_INT 1
15307: NEG
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 2
15315: NEG
15316: PUSH
15317: LD_INT 1
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 3
15326: NEG
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 3
15337: NEG
15338: PUSH
15339: LD_INT 1
15341: NEG
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15365: LD_ADDR_VAR 0 13
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: LD_INT 0
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 0
15382: PUSH
15383: LD_INT 1
15385: NEG
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 1
15393: PUSH
15394: LD_INT 0
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 0
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 1
15423: NEG
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 1
15434: NEG
15435: PUSH
15436: LD_INT 1
15438: NEG
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 1
15446: NEG
15447: PUSH
15448: LD_INT 2
15450: NEG
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 2
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 2
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: LD_INT 2
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 2
15488: NEG
15489: PUSH
15490: LD_INT 1
15492: NEG
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 2
15500: NEG
15501: PUSH
15502: LD_INT 2
15504: NEG
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 2
15512: NEG
15513: PUSH
15514: LD_INT 3
15516: NEG
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 3
15524: NEG
15525: PUSH
15526: LD_INT 2
15528: NEG
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 3
15536: NEG
15537: PUSH
15538: LD_INT 3
15540: NEG
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15564: LD_ADDR_VAR 0 14
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 1
15645: NEG
15646: PUSH
15647: LD_INT 2
15649: NEG
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: LD_INT 0
15657: PUSH
15658: LD_INT 2
15660: NEG
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: LD_INT 1
15671: NEG
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 1
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: LD_INT 1
15699: NEG
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: NEG
15711: PUSH
15712: LD_INT 3
15714: NEG
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: LD_INT 3
15725: NEG
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 1
15733: PUSH
15734: LD_INT 2
15736: NEG
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15760: LD_ADDR_VAR 0 15
15764: PUSH
15765: LD_INT 0
15767: PUSH
15768: LD_INT 0
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: LD_INT 1
15780: NEG
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: LD_INT 0
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 1
15818: NEG
15819: PUSH
15820: LD_INT 0
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PUSH
15827: LD_INT 1
15829: NEG
15830: PUSH
15831: LD_INT 1
15833: NEG
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: LD_INT 1
15844: NEG
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 2
15852: PUSH
15853: LD_INT 0
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 1
15872: NEG
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: NEG
15884: PUSH
15885: LD_INT 0
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 2
15894: NEG
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: LD_INT 1
15909: NEG
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 3
15917: PUSH
15918: LD_INT 0
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 3
15927: PUSH
15928: LD_INT 1
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
15953: LD_ADDR_VAR 0 16
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 0
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: LD_INT 1
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 0
16001: PUSH
16002: LD_INT 1
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 1
16011: NEG
16012: PUSH
16013: LD_INT 0
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 1
16022: NEG
16023: PUSH
16024: LD_INT 1
16026: NEG
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: PUSH
16036: LD_INT 2
16038: NEG
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 2
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: LD_INT 2
16076: NEG
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 2
16088: NEG
16089: PUSH
16090: LD_INT 2
16092: NEG
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 3
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 3
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: LD_INT 3
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16146: LD_ADDR_VAR 0 17
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 0
16163: PUSH
16164: LD_INT 1
16166: NEG
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: LD_INT 1
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 1
16204: NEG
16205: PUSH
16206: LD_INT 0
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 1
16215: NEG
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 1
16227: NEG
16228: PUSH
16229: LD_INT 2
16231: NEG
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 0
16239: PUSH
16240: LD_INT 2
16242: NEG
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 1
16253: NEG
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 2
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 0
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 1
16311: NEG
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 2
16322: NEG
16323: PUSH
16324: LD_INT 0
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: PUSH
16331: LD_INT 2
16333: NEG
16334: PUSH
16335: LD_INT 1
16337: NEG
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 2
16345: NEG
16346: PUSH
16347: LD_INT 2
16349: NEG
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16376: LD_ADDR_VAR 0 18
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 0
16393: PUSH
16394: LD_INT 1
16396: NEG
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: LD_INT 1
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 0
16424: PUSH
16425: LD_INT 1
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: NEG
16435: PUSH
16436: LD_INT 0
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 1
16445: NEG
16446: PUSH
16447: LD_INT 1
16449: NEG
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 1
16457: NEG
16458: PUSH
16459: LD_INT 2
16461: NEG
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: LD_INT 2
16472: NEG
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 1
16480: PUSH
16481: LD_INT 1
16483: NEG
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 0
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 2
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: LD_INT 2
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 0
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: LD_INT 1
16541: NEG
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: NEG
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 2
16563: NEG
16564: PUSH
16565: LD_INT 1
16567: NEG
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 2
16575: NEG
16576: PUSH
16577: LD_INT 2
16579: NEG
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16606: LD_ADDR_VAR 0 19
16610: PUSH
16611: LD_INT 0
16613: PUSH
16614: LD_INT 0
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: LD_INT 1
16626: NEG
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: LD_INT 0
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 1
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 0
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 1
16664: NEG
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 1
16675: NEG
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: LD_INT 1
16687: NEG
16688: PUSH
16689: LD_INT 2
16691: NEG
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 2
16702: NEG
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: LD_INT 1
16713: NEG
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: LD_INT 2
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: LD_INT 2
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: LD_INT 2
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 1
16771: NEG
16772: PUSH
16773: LD_INT 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 2
16782: NEG
16783: PUSH
16784: LD_INT 0
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 2
16793: NEG
16794: PUSH
16795: LD_INT 1
16797: NEG
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 2
16805: NEG
16806: PUSH
16807: LD_INT 2
16809: NEG
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16836: LD_ADDR_VAR 0 20
16840: PUSH
16841: LD_INT 0
16843: PUSH
16844: LD_INT 0
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 0
16853: PUSH
16854: LD_INT 1
16856: NEG
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: LD_INT 0
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 0
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: NEG
16895: PUSH
16896: LD_INT 0
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 1
16905: NEG
16906: PUSH
16907: LD_INT 1
16909: NEG
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 1
16917: NEG
16918: PUSH
16919: LD_INT 2
16921: NEG
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 0
16929: PUSH
16930: LD_INT 2
16932: NEG
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 2
16951: PUSH
16952: LD_INT 0
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 0
16991: PUSH
16992: LD_INT 2
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: NEG
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 2
17012: NEG
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 2
17023: NEG
17024: PUSH
17025: LD_INT 1
17027: NEG
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: NEG
17036: PUSH
17037: LD_INT 2
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17066: LD_ADDR_VAR 0 21
17070: PUSH
17071: LD_INT 0
17073: PUSH
17074: LD_INT 0
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 0
17083: PUSH
17084: LD_INT 1
17086: NEG
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: LD_INT 0
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: LD_INT 1
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: LD_INT 1
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: LD_INT 0
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 1
17147: NEG
17148: PUSH
17149: LD_INT 2
17151: NEG
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 0
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 2
17181: PUSH
17182: LD_INT 0
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 2
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 1
17231: NEG
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 2
17242: NEG
17243: PUSH
17244: LD_INT 0
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 2
17253: NEG
17254: PUSH
17255: LD_INT 1
17257: NEG
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 2
17265: NEG
17266: PUSH
17267: LD_INT 2
17269: NEG
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17296: LD_ADDR_VAR 0 22
17300: PUSH
17301: LD_INT 0
17303: PUSH
17304: LD_INT 0
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: LD_INT 1
17316: NEG
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 1
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: LD_INT 1
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: PUSH
17356: LD_INT 0
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: LD_INT 1
17369: NEG
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 1
17377: NEG
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 0
17389: PUSH
17390: LD_INT 2
17392: NEG
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 1
17400: PUSH
17401: LD_INT 1
17403: NEG
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 2
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 2
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 1
17441: PUSH
17442: LD_INT 2
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 0
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 1
17461: NEG
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 2
17472: NEG
17473: PUSH
17474: LD_INT 0
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 2
17483: NEG
17484: PUSH
17485: LD_INT 1
17487: NEG
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 2
17495: NEG
17496: PUSH
17497: LD_INT 2
17499: NEG
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17526: LD_ADDR_VAR 0 23
17530: PUSH
17531: LD_INT 0
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: LD_INT 1
17599: NEG
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 2
17702: NEG
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: NEG
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 2
17725: NEG
17726: PUSH
17727: LD_INT 2
17729: NEG
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 2
17737: NEG
17738: PUSH
17739: LD_INT 3
17741: NEG
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 1
17749: NEG
17750: PUSH
17751: LD_INT 3
17753: NEG
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 1
17761: PUSH
17762: LD_INT 2
17764: NEG
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 2
17772: PUSH
17773: LD_INT 1
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17806: LD_ADDR_VAR 0 24
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 0
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: LD_INT 0
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 1
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: NEG
17888: PUSH
17889: LD_INT 2
17891: NEG
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 0
17899: PUSH
17900: LD_INT 2
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 0
17961: PUSH
17962: LD_INT 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 1
17971: NEG
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 2
17982: NEG
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: NEG
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 2
18005: NEG
18006: PUSH
18007: LD_INT 2
18009: NEG
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: LD_INT 2
18020: NEG
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 2
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 3
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 3
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18082: LD_ADDR_VAR 0 25
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: NEG
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 1
18163: NEG
18164: PUSH
18165: LD_INT 2
18167: NEG
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: LD_INT 2
18178: NEG
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 1
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 2
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: LD_INT 2
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: LD_INT 2
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 1
18247: NEG
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 2
18258: NEG
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 2
18269: NEG
18270: PUSH
18271: LD_INT 1
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: NEG
18282: PUSH
18283: LD_INT 2
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 3
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: LD_INT 2
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 3
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18356: LD_ADDR_VAR 0 26
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: NEG
18438: PUSH
18439: LD_INT 2
18441: NEG
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 1
18463: NEG
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: LD_INT 2
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: LD_INT 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: LD_INT 2
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: NEG
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: LD_INT 1
18547: NEG
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 2
18555: NEG
18556: PUSH
18557: LD_INT 2
18559: NEG
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 3
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: NEG
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18632: LD_ADDR_VAR 0 27
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: LD_INT 0
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 0
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: NEG
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: NEG
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 0
18725: PUSH
18726: LD_INT 2
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 2
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 2
18808: NEG
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 2
18819: NEG
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 2
18831: NEG
18832: PUSH
18833: LD_INT 2
18835: NEG
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 1
18843: NEG
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: NEG
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 3
18865: NEG
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 3
18877: NEG
18878: PUSH
18879: LD_INT 2
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18912: LD_ADDR_VAR 0 28
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: LD_INT 2
18997: NEG
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 2
19008: NEG
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: LD_INT 1
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 0
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 1
19077: NEG
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 2
19088: NEG
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: LD_INT 1
19103: NEG
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: NEG
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: LD_INT 3
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: NEG
19136: PUSH
19137: LD_INT 3
19139: NEG
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 3
19147: NEG
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 3
19159: NEG
19160: PUSH
19161: LD_INT 2
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19194: LD_ADDR_VAR 0 29
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 0
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: NEG
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 2
19279: NEG
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 2
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 1
19349: NEG
19350: PUSH
19351: LD_INT 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: NEG
19361: PUSH
19362: LD_INT 1
19364: NEG
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: LD_INT 2
19376: NEG
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_INT 2
19384: NEG
19385: PUSH
19386: LD_INT 3
19388: NEG
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: LD_INT 1
19399: NEG
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: NEG
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 3
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19473: LD_ADDR_VAR 0 30
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 1
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: NEG
19543: PUSH
19544: LD_INT 1
19546: NEG
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 1
19554: NEG
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 0
19566: PUSH
19567: LD_INT 2
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: LD_INT 1
19580: NEG
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: PUSH
19609: LD_INT 2
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 2
19639: NEG
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 2
19650: NEG
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: LD_INT 3
19666: NEG
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: LD_INT 2
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 3
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 3
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 3
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19751: LD_ADDR_VAR 0 31
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: LD_INT 0
19799: PUSH
19800: LD_INT 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: NEG
19810: PUSH
19811: LD_INT 0
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: LD_INT 1
19824: NEG
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: LD_INT 2
19836: NEG
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: LD_INT 1
19847: NEG
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: LD_INT 2
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: NEG
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 2
19940: NEG
19941: PUSH
19942: LD_INT 3
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: LD_INT 1
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 3
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: NEG
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 3
19994: NEG
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20029: LD_ADDR_VAR 0 32
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: LD_INT 1
20049: NEG
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: PUSH
20058: LD_INT 0
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 0
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: LD_INT 2
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 0
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: LD_INT 1
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 2
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 2
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 1
20184: NEG
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 2
20195: NEG
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 3
20222: NEG
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 3
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 3
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 1
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 3
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20307: LD_ADDR_VAR 0 33
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: LD_INT 0
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: LD_INT 1
20380: NEG
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: NEG
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 2
20485: NEG
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: NEG
20498: PUSH
20499: LD_INT 3
20501: NEG
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 1
20512: NEG
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: LD_INT 3
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: LD_INT 2
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 3
20551: NEG
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20586: LD_ADDR_VAR 0 34
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: LD_INT 1
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 1
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: LD_INT 1
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: LD_INT 1
20644: NEG
20645: PUSH
20646: LD_INT 0
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 1
20659: NEG
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: LD_INT 2
20671: NEG
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: LD_INT 2
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: LD_INT 2
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: LD_INT 2
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: LD_INT 3
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: LD_INT 2
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 2
20810: PUSH
20811: LD_INT 3
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 2
20820: NEG
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 3
20831: NEG
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20866: LD_ADDR_VAR 0 35
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 0
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: LD_INT 1
20886: NEG
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: LD_INT 1
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: NEG
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: NEG
20936: PUSH
20937: LD_INT 1
20939: NEG
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 2
20957: NEG
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
20978: LD_ADDR_VAR 0 36
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: LD_INT 0
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: LD_INT 1
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: LD_INT 2
21063: NEG
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21090: LD_ADDR_VAR 0 37
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: NEG
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21202: LD_ADDR_VAR 0 38
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 0
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 1
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: NEG
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: LD_INT 1
21275: NEG
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21314: LD_ADDR_VAR 0 39
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: LD_INT 1
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 1
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 1
21383: NEG
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21426: LD_ADDR_VAR 0 40
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 0
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21538: LD_ADDR_VAR 0 41
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: LD_INT 0
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 0
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: LD_INT 0
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: LD_INT 0
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 1
21607: NEG
21608: PUSH
21609: LD_INT 1
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: LD_INT 2
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: LD_INT 2
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 2
21693: NEG
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 2
21704: NEG
21705: PUSH
21706: LD_INT 1
21708: NEG
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: NEG
21717: PUSH
21718: LD_INT 2
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: LD_INT 3
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: LD_INT 0
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 3
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 3
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 3
21781: PUSH
21782: LD_INT 3
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 3
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: LD_INT 1
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 3
21812: NEG
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 3
21823: NEG
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 3
21835: NEG
21836: PUSH
21837: LD_INT 2
21839: NEG
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 3
21847: NEG
21848: PUSH
21849: LD_INT 3
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21888: LD_ADDR_VAR 0 42
21892: PUSH
21893: LD_INT 0
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: NEG
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: NEG
21970: PUSH
21971: LD_INT 2
21973: NEG
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: LD_INT 2
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: LD_INT 2
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: LD_INT 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 2
22054: NEG
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 2
22066: NEG
22067: PUSH
22068: LD_INT 2
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 2
22078: NEG
22079: PUSH
22080: LD_INT 3
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: NEG
22091: PUSH
22092: LD_INT 3
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 3
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 2
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 3
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 3
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: LD_INT 3
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 3
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 3
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 1
22174: NEG
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 3
22185: NEG
22186: PUSH
22187: LD_INT 2
22189: NEG
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 3
22197: NEG
22198: PUSH
22199: LD_INT 3
22201: NEG
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22238: LD_ADDR_VAR 0 43
22242: PUSH
22243: LD_INT 0
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: LD_INT 1
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: LD_INT 1
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: NEG
22320: PUSH
22321: LD_INT 2
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: LD_INT 2
22334: NEG
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 1
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 2
22404: NEG
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 2
22415: NEG
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 3
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 3
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 2
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 3
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 3
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: LD_INT 3
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: LD_INT 3
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 2
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 3
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 3
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22586: LD_ADDR_VAR 0 44
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: LD_INT 1
22606: NEG
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: LD_INT 1
22659: NEG
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 2
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: LD_INT 1
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 2
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 1
22730: NEG
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 2
22741: NEG
22742: PUSH
22743: LD_INT 0
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 2
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 2
22776: NEG
22777: PUSH
22778: LD_INT 3
22780: NEG
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 3
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: LD_INT 3
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: LD_INT 1
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PUSH
22858: LD_INT 3
22860: NEG
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 3
22871: NEG
22872: PUSH
22873: LD_INT 1
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 3
22883: NEG
22884: PUSH
22885: LD_INT 2
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 3
22895: NEG
22896: PUSH
22897: LD_INT 3
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22936: LD_ADDR_VAR 0 45
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: LD_INT 0
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: NEG
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: LD_INT 2
23021: NEG
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: PUSH
23072: LD_INT 2
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 2
23126: NEG
23127: PUSH
23128: LD_INT 3
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: NEG
23139: PUSH
23140: LD_INT 3
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 0
23150: PUSH
23151: LD_INT 3
23153: NEG
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: LD_INT 2
23164: NEG
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 3
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 3
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 3
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: LD_INT 3
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: NEG
23223: PUSH
23224: LD_INT 2
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 3
23233: NEG
23234: PUSH
23235: LD_INT 2
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 3
23245: NEG
23246: PUSH
23247: LD_INT 3
23249: NEG
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23286: LD_ADDR_VAR 0 46
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 0
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: LD_INT 2
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: LD_INT 2
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 2
23452: NEG
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: LD_INT 3
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 3
23490: NEG
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 2
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 3
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: LD_INT 3
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 2
23571: NEG
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 3
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 3
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23634: LD_ADDR_VAR 0 47
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: NEG
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 2
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: NEG
23762: PUSH
23763: LD_INT 2
23765: NEG
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23785: LD_ADDR_VAR 0 48
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 1
23805: NEG
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: LD_INT 2
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 0
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23932: LD_ADDR_VAR 0 49
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: NEG
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 2
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24076: LD_ADDR_VAR 0 50
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 0
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: NEG
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 2
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24220: LD_ADDR_VAR 0 51
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 2
24343: NEG
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24367: LD_ADDR_VAR 0 52
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 1
24440: NEG
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 2
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: NEG
24472: PUSH
24473: LD_INT 0
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24518: LD_ADDR_VAR 0 53
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 1
24587: NEG
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: LD_INT 2
24603: NEG
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 2
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 2
24694: NEG
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 2
24705: NEG
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 2
24717: NEG
24718: PUSH
24719: LD_INT 2
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24748: LD_ADDR_VAR 0 54
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 2
24947: NEG
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24978: LD_ADDR_VAR 0 55
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 1
25059: NEG
25060: PUSH
25061: LD_INT 2
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 2
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 2
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 2
25154: NEG
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 2
25165: NEG
25166: PUSH
25167: LD_INT 1
25169: NEG
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 2
25177: NEG
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25208: LD_ADDR_VAR 0 56
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 0
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 0
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 0
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 0
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 2
25407: NEG
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25438: LD_ADDR_VAR 0 57
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: LD_INT 1
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 2
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 2
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 2
25614: NEG
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: LD_INT 2
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25668: LD_ADDR_VAR 0 58
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 0
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: LD_INT 1
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 1
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: PUSH
25814: LD_INT 2
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: LD_INT 2
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 2
25867: NEG
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25898: LD_ADDR_VAR 0 59
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25986: LD_ADDR_VAR 0 60
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26074: LD_ADDR_VAR 0 61
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26162: LD_ADDR_VAR 0 62
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26250: LD_ADDR_VAR 0 63
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26338: LD_ADDR_VAR 0 64
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: ST_TO_ADDR
// end ; 1 :
26426: GO 32323
26428: LD_INT 1
26430: DOUBLE
26431: EQUAL
26432: IFTRUE 26436
26434: GO 29059
26436: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26437: LD_ADDR_VAR 0 11
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: LD_INT 3
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: LD_INT 3
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: LIST
26480: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26481: LD_ADDR_VAR 0 12
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 3
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: LIST
26521: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26522: LD_ADDR_VAR 0 13
26526: PUSH
26527: LD_INT 3
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 3
26539: PUSH
26540: LD_INT 3
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: LD_INT 3
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26562: LD_ADDR_VAR 0 14
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: LD_INT 3
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 3
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: LIST
26602: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26603: LD_ADDR_VAR 0 15
26607: PUSH
26608: LD_INT 2
26610: NEG
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 3
26621: NEG
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 3
26632: NEG
26633: PUSH
26634: LD_INT 1
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26647: LD_ADDR_VAR 0 16
26651: PUSH
26652: LD_INT 2
26654: NEG
26655: PUSH
26656: LD_INT 3
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 3
26666: NEG
26667: PUSH
26668: LD_INT 2
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 3
26678: NEG
26679: PUSH
26680: LD_INT 3
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26693: LD_ADDR_VAR 0 17
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: LD_INT 3
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: LD_INT 3
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26737: LD_ADDR_VAR 0 18
26741: PUSH
26742: LD_INT 2
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 3
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26778: LD_ADDR_VAR 0 19
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 3
26795: PUSH
26796: LD_INT 3
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 3
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26818: LD_ADDR_VAR 0 20
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 3
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 2
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26859: LD_ADDR_VAR 0 21
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 3
26877: NEG
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 3
26888: NEG
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26903: LD_ADDR_VAR 0 22
26907: PUSH
26908: LD_INT 2
26910: NEG
26911: PUSH
26912: LD_INT 3
26914: NEG
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 3
26922: NEG
26923: PUSH
26924: LD_INT 2
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 3
26934: NEG
26935: PUSH
26936: LD_INT 3
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
26949: LD_ADDR_VAR 0 23
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 3
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: NEG
26968: PUSH
26969: LD_INT 4
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: LD_INT 3
26982: NEG
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
26993: LD_ADDR_VAR 0 24
26997: PUSH
26998: LD_INT 3
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 4
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27034: LD_ADDR_VAR 0 25
27038: PUSH
27039: LD_INT 3
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 4
27051: PUSH
27052: LD_INT 3
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: LD_INT 4
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27074: LD_ADDR_VAR 0 26
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: LD_INT 4
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27115: LD_ADDR_VAR 0 27
27119: PUSH
27120: LD_INT 3
27122: NEG
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 3
27133: NEG
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 4
27144: NEG
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27159: LD_ADDR_VAR 0 28
27163: PUSH
27164: LD_INT 3
27166: NEG
27167: PUSH
27168: LD_INT 3
27170: NEG
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 3
27178: NEG
27179: PUSH
27180: LD_INT 4
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 4
27190: NEG
27191: PUSH
27192: LD_INT 3
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27205: LD_ADDR_VAR 0 29
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: LD_INT 3
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 3
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 2
27238: NEG
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 4
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 4
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 3
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 5
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 5
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: LD_INT 4
27306: NEG
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: LD_INT 6
27318: NEG
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 6
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 5
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27360: LD_ADDR_VAR 0 30
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 3
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 3
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 4
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 4
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 4
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 5
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 5
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 5
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 6
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 6
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27503: LD_ADDR_VAR 0 31
27507: PUSH
27508: LD_INT 3
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 3
27520: PUSH
27521: LD_INT 3
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: LD_INT 3
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 4
27540: PUSH
27541: LD_INT 3
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 4
27550: PUSH
27551: LD_INT 4
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 3
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 5
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 5
27580: PUSH
27581: LD_INT 5
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 4
27590: PUSH
27591: LD_INT 5
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 6
27600: PUSH
27601: LD_INT 5
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 6
27610: PUSH
27611: LD_INT 6
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 5
27620: PUSH
27621: LD_INT 6
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27642: LD_ADDR_VAR 0 32
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: LD_INT 3
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: PUSH
27681: LD_INT 4
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 4
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: LD_INT 3
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 5
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 5
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 4
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 6
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 6
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 5
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27785: LD_ADDR_VAR 0 33
27789: PUSH
27790: LD_INT 2
27792: NEG
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 3
27803: NEG
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 3
27814: NEG
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 3
27826: NEG
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 4
27837: NEG
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 4
27848: NEG
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 4
27860: NEG
27861: PUSH
27862: LD_INT 1
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 5
27871: NEG
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 5
27882: NEG
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 5
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 6
27905: NEG
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 6
27916: NEG
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
27940: LD_ADDR_VAR 0 34
27944: PUSH
27945: LD_INT 2
27947: NEG
27948: PUSH
27949: LD_INT 3
27951: NEG
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 3
27959: NEG
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: LD_INT 3
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: LD_INT 4
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 4
27995: NEG
27996: PUSH
27997: LD_INT 3
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 4
28007: NEG
28008: PUSH
28009: LD_INT 4
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 4
28019: NEG
28020: PUSH
28021: LD_INT 5
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 5
28031: NEG
28032: PUSH
28033: LD_INT 4
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 5
28043: NEG
28044: PUSH
28045: LD_INT 5
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 5
28055: NEG
28056: PUSH
28057: LD_INT 6
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 6
28067: NEG
28068: PUSH
28069: LD_INT 5
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 6
28079: NEG
28080: PUSH
28081: LD_INT 6
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28103: LD_ADDR_VAR 0 41
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: LD_INT 3
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28147: LD_ADDR_VAR 0 42
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 3
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28188: LD_ADDR_VAR 0 43
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: LD_INT 3
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28228: LD_ADDR_VAR 0 44
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: LD_INT 3
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28269: LD_ADDR_VAR 0 45
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: LD_INT 1
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 3
28298: NEG
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: LIST
28312: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28313: LD_ADDR_VAR 0 46
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: LD_INT 3
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 3
28344: NEG
28345: PUSH
28346: LD_INT 2
28348: NEG
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28359: LD_ADDR_VAR 0 47
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 3
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: LD_INT 3
28382: NEG
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28392: LD_ADDR_VAR 0 48
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: LD_INT 2
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28423: LD_ADDR_VAR 0 49
28427: PUSH
28428: LD_INT 3
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 3
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28452: LD_ADDR_VAR 0 50
28456: PUSH
28457: LD_INT 2
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: LD_INT 3
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28481: LD_ADDR_VAR 0 51
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28512: LD_ADDR_VAR 0 52
28516: PUSH
28517: LD_INT 3
28519: NEG
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 3
28531: NEG
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28545: LD_ADDR_VAR 0 53
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 3
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 3
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28589: LD_ADDR_VAR 0 54
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 3
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28630: LD_ADDR_VAR 0 55
28634: PUSH
28635: LD_INT 3
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: LD_INT 3
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 3
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: LIST
28669: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28670: LD_ADDR_VAR 0 56
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 3
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 3
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28711: LD_ADDR_VAR 0 57
28715: PUSH
28716: LD_INT 2
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 3
28729: NEG
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 3
28740: NEG
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28755: LD_ADDR_VAR 0 58
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: LD_INT 3
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 3
28774: NEG
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 3
28786: NEG
28787: PUSH
28788: LD_INT 3
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28801: LD_ADDR_VAR 0 59
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: LD_INT 2
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: PUSH
28832: LD_INT 1
28834: NEG
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: LIST
28844: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28845: LD_ADDR_VAR 0 60
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28886: LD_ADDR_VAR 0 61
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 2
28903: PUSH
28904: LD_INT 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: LD_INT 2
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
28926: LD_ADDR_VAR 0 62
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: LIST
28966: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
28967: LD_ADDR_VAR 0 63
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 2
28985: NEG
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 2
28996: NEG
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29011: LD_ADDR_VAR 0 64
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: ST_TO_ADDR
// end ; 2 :
29057: GO 32323
29059: LD_INT 2
29061: DOUBLE
29062: EQUAL
29063: IFTRUE 29067
29065: GO 32322
29067: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29068: LD_ADDR_VAR 0 29
29072: PUSH
29073: LD_INT 4
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 4
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 5
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 5
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 4
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 3
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 3
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 5
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 4
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 4
29198: PUSH
29199: LD_INT 4
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 3
29208: PUSH
29209: LD_INT 4
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 3
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 4
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 4
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 4
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 4
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 5
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 5
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 4
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 3
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: PUSH
29331: LD_INT 5
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: LD_INT 3
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: NEG
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 3
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 2
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 4
29407: NEG
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 4
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 4
29430: NEG
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 4
29453: NEG
29454: PUSH
29455: LD_INT 4
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 4
29465: NEG
29466: PUSH
29467: LD_INT 5
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 3
29477: NEG
29478: PUSH
29479: LD_INT 4
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: LD_INT 3
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 4
29501: NEG
29502: PUSH
29503: LD_INT 3
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 5
29513: NEG
29514: PUSH
29515: LD_INT 4
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 5
29525: NEG
29526: PUSH
29527: LD_INT 5
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: NEG
29538: PUSH
29539: LD_INT 5
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 5
29549: NEG
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29606: LD_ADDR_VAR 0 30
29610: PUSH
29611: LD_INT 4
29613: PUSH
29614: LD_INT 4
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 4
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 5
29633: PUSH
29634: LD_INT 4
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 5
29643: PUSH
29644: LD_INT 5
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 4
29653: PUSH
29654: LD_INT 5
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 3
29663: PUSH
29664: LD_INT 4
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 3
29673: PUSH
29674: LD_INT 3
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 5
29683: PUSH
29684: LD_INT 3
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 3
29693: PUSH
29694: LD_INT 5
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: LD_INT 3
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 3
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: LD_INT 4
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 4
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 3
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: LD_INT 4
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 4
29796: NEG
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 4
29807: NEG
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 3
29819: NEG
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 4
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 5
29852: NEG
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 5
29863: NEG
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 5
29875: NEG
29876: PUSH
29877: LD_INT 2
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 3
29887: NEG
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 3
29910: NEG
29911: PUSH
29912: LD_INT 4
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 3
29946: NEG
29947: PUSH
29948: LD_INT 2
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 4
29958: NEG
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 4
29970: NEG
29971: PUSH
29972: LD_INT 4
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: LD_INT 4
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 4
29994: NEG
29995: PUSH
29996: LD_INT 2
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 4
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 0
30017: PUSH
30018: LD_INT 5
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: LD_INT 4
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 3
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 3
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 4
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 5
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: LD_INT 5
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30153: LD_ADDR_VAR 0 31
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 3
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 4
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 5
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: LD_INT 5
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 4
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: LD_INT 5
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: LD_INT 3
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 3
30264: NEG
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 2
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 4
30309: NEG
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 4
30320: NEG
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 4
30332: NEG
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: NEG
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 4
30355: NEG
30356: PUSH
30357: LD_INT 4
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 4
30367: NEG
30368: PUSH
30369: LD_INT 5
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 3
30379: NEG
30380: PUSH
30381: LD_INT 4
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 3
30391: NEG
30392: PUSH
30393: LD_INT 3
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 4
30403: NEG
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 5
30415: NEG
30416: PUSH
30417: LD_INT 4
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 5
30427: NEG
30428: PUSH
30429: LD_INT 5
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: NEG
30440: PUSH
30441: LD_INT 5
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 5
30451: NEG
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 4
30477: NEG
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 3
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 1
30518: NEG
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 4
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 2
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: LD_INT 4
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 4
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 5
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 5
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 4
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 3
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 5
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30703: LD_ADDR_VAR 0 32
30707: PUSH
30708: LD_INT 4
30710: NEG
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 4
30721: NEG
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 3
30733: NEG
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 3
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 4
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 5
30766: NEG
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 5
30777: NEG
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 5
30789: NEG
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: NEG
30813: PUSH
30814: LD_INT 3
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 3
30824: NEG
30825: PUSH
30826: LD_INT 4
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: LD_INT 3
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 4
30872: NEG
30873: PUSH
30874: LD_INT 3
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 4
30884: NEG
30885: PUSH
30886: LD_INT 4
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: LD_INT 4
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 0
30920: PUSH
30921: LD_INT 4
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 5
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 4
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 1
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 4
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 5
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: LD_INT 3
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: NEG
31011: PUSH
31012: LD_INT 5
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 4
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 4
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: LD_INT 2
31097: NEG
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 4
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 4
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: LD_INT 3
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 5
31135: PUSH
31136: LD_INT 4
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 5
31145: PUSH
31146: LD_INT 5
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 4
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 4
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 3
31175: PUSH
31176: LD_INT 3
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 5
31185: PUSH
31186: LD_INT 3
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: LD_INT 5
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31250: LD_ADDR_VAR 0 33
31254: PUSH
31255: LD_INT 4
31257: NEG
31258: PUSH
31259: LD_INT 4
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 4
31269: NEG
31270: PUSH
31271: LD_INT 5
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: NEG
31282: PUSH
31283: LD_INT 4
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: LD_INT 3
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 4
31305: NEG
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 5
31317: NEG
31318: PUSH
31319: LD_INT 4
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 5
31329: NEG
31330: PUSH
31331: LD_INT 5
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: LD_INT 5
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 5
31353: NEG
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 4
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: LD_INT 3
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 2
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: LD_INT 3
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: NEG
31433: PUSH
31434: LD_INT 4
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: LD_INT 4
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 4
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 4
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 4
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 3
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: PUSH
31561: LD_INT 3
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 4
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 4
31590: PUSH
31591: LD_INT 4
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: PUSH
31601: LD_INT 4
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: PUSH
31611: LD_INT 3
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: PUSH
31621: LD_INT 2
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 4
31630: PUSH
31631: LD_INT 2
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: LD_INT 4
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: LD_INT 4
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 3
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 4
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 5
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 5
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 4
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 3
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 5
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: LD_INT 3
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31788: LD_ADDR_VAR 0 34
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 4
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: LD_INT 5
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 4
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: LD_INT 4
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 5
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 3
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: LD_INT 5
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 3
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 4
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 4
31990: PUSH
31991: LD_INT 4
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 4
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 5
32010: PUSH
32011: LD_INT 4
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 5
32020: PUSH
32021: LD_INT 5
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 4
32030: PUSH
32031: LD_INT 5
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 4
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 3
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 5
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: LD_INT 5
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 4
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 4
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 2
32162: NEG
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 4
32173: NEG
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 4
32184: NEG
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 3
32196: NEG
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 4
32218: NEG
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 5
32229: NEG
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 5
32240: NEG
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 5
32252: NEG
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: ST_TO_ADDR
// end ; end ;
32320: GO 32323
32322: POP
// case btype of b_depot , b_warehouse :
32323: LD_VAR 0 1
32327: PUSH
32328: LD_INT 0
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32342
32334: LD_INT 1
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32543
32342: POP
// case nation of nation_american :
32343: LD_VAR 0 5
32347: PUSH
32348: LD_INT 1
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32412
32356: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32357: LD_ADDR_VAR 0 9
32361: PUSH
32362: LD_VAR 0 11
32366: PUSH
32367: LD_VAR 0 12
32371: PUSH
32372: LD_VAR 0 13
32376: PUSH
32377: LD_VAR 0 14
32381: PUSH
32382: LD_VAR 0 15
32386: PUSH
32387: LD_VAR 0 16
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: PUSH
32400: LD_VAR 0 4
32404: PUSH
32405: LD_INT 1
32407: PLUS
32408: ARRAY
32409: ST_TO_ADDR
32410: GO 32541
32412: LD_INT 2
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32476
32420: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32421: LD_ADDR_VAR 0 9
32425: PUSH
32426: LD_VAR 0 17
32430: PUSH
32431: LD_VAR 0 18
32435: PUSH
32436: LD_VAR 0 19
32440: PUSH
32441: LD_VAR 0 20
32445: PUSH
32446: LD_VAR 0 21
32450: PUSH
32451: LD_VAR 0 22
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: PUSH
32464: LD_VAR 0 4
32468: PUSH
32469: LD_INT 1
32471: PLUS
32472: ARRAY
32473: ST_TO_ADDR
32474: GO 32541
32476: LD_INT 3
32478: DOUBLE
32479: EQUAL
32480: IFTRUE 32484
32482: GO 32540
32484: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32485: LD_ADDR_VAR 0 9
32489: PUSH
32490: LD_VAR 0 23
32494: PUSH
32495: LD_VAR 0 24
32499: PUSH
32500: LD_VAR 0 25
32504: PUSH
32505: LD_VAR 0 26
32509: PUSH
32510: LD_VAR 0 27
32514: PUSH
32515: LD_VAR 0 28
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: PUSH
32528: LD_VAR 0 4
32532: PUSH
32533: LD_INT 1
32535: PLUS
32536: ARRAY
32537: ST_TO_ADDR
32538: GO 32541
32540: POP
32541: GO 33096
32543: LD_INT 2
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32557
32549: LD_INT 3
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 32613
32557: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32558: LD_ADDR_VAR 0 9
32562: PUSH
32563: LD_VAR 0 29
32567: PUSH
32568: LD_VAR 0 30
32572: PUSH
32573: LD_VAR 0 31
32577: PUSH
32578: LD_VAR 0 32
32582: PUSH
32583: LD_VAR 0 33
32587: PUSH
32588: LD_VAR 0 34
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: PUSH
32601: LD_VAR 0 4
32605: PUSH
32606: LD_INT 1
32608: PLUS
32609: ARRAY
32610: ST_TO_ADDR
32611: GO 33096
32613: LD_INT 16
32615: DOUBLE
32616: EQUAL
32617: IFTRUE 32675
32619: LD_INT 17
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32675
32625: LD_INT 18
32627: DOUBLE
32628: EQUAL
32629: IFTRUE 32675
32631: LD_INT 19
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32675
32637: LD_INT 22
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32675
32643: LD_INT 20
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32675
32649: LD_INT 21
32651: DOUBLE
32652: EQUAL
32653: IFTRUE 32675
32655: LD_INT 23
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32675
32661: LD_INT 24
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32675
32667: LD_INT 25
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32731
32675: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32676: LD_ADDR_VAR 0 9
32680: PUSH
32681: LD_VAR 0 35
32685: PUSH
32686: LD_VAR 0 36
32690: PUSH
32691: LD_VAR 0 37
32695: PUSH
32696: LD_VAR 0 38
32700: PUSH
32701: LD_VAR 0 39
32705: PUSH
32706: LD_VAR 0 40
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: PUSH
32719: LD_VAR 0 4
32723: PUSH
32724: LD_INT 1
32726: PLUS
32727: ARRAY
32728: ST_TO_ADDR
32729: GO 33096
32731: LD_INT 6
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32787
32737: LD_INT 7
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32787
32743: LD_INT 8
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32787
32749: LD_INT 13
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32787
32755: LD_INT 12
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32787
32761: LD_INT 15
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32787
32767: LD_INT 11
32769: DOUBLE
32770: EQUAL
32771: IFTRUE 32787
32773: LD_INT 14
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32787
32779: LD_INT 10
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32843
32787: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32788: LD_ADDR_VAR 0 9
32792: PUSH
32793: LD_VAR 0 41
32797: PUSH
32798: LD_VAR 0 42
32802: PUSH
32803: LD_VAR 0 43
32807: PUSH
32808: LD_VAR 0 44
32812: PUSH
32813: LD_VAR 0 45
32817: PUSH
32818: LD_VAR 0 46
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: PUSH
32831: LD_VAR 0 4
32835: PUSH
32836: LD_INT 1
32838: PLUS
32839: ARRAY
32840: ST_TO_ADDR
32841: GO 33096
32843: LD_INT 36
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32907
32851: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32852: LD_ADDR_VAR 0 9
32856: PUSH
32857: LD_VAR 0 47
32861: PUSH
32862: LD_VAR 0 48
32866: PUSH
32867: LD_VAR 0 49
32871: PUSH
32872: LD_VAR 0 50
32876: PUSH
32877: LD_VAR 0 51
32881: PUSH
32882: LD_VAR 0 52
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: PUSH
32895: LD_VAR 0 4
32899: PUSH
32900: LD_INT 1
32902: PLUS
32903: ARRAY
32904: ST_TO_ADDR
32905: GO 33096
32907: LD_INT 4
32909: DOUBLE
32910: EQUAL
32911: IFTRUE 32933
32913: LD_INT 5
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32933
32919: LD_INT 34
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32933
32925: LD_INT 37
32927: DOUBLE
32928: EQUAL
32929: IFTRUE 32933
32931: GO 32989
32933: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
32934: LD_ADDR_VAR 0 9
32938: PUSH
32939: LD_VAR 0 53
32943: PUSH
32944: LD_VAR 0 54
32948: PUSH
32949: LD_VAR 0 55
32953: PUSH
32954: LD_VAR 0 56
32958: PUSH
32959: LD_VAR 0 57
32963: PUSH
32964: LD_VAR 0 58
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: PUSH
32977: LD_VAR 0 4
32981: PUSH
32982: LD_INT 1
32984: PLUS
32985: ARRAY
32986: ST_TO_ADDR
32987: GO 33096
32989: LD_INT 31
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 33039
32995: LD_INT 32
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33039
33001: LD_INT 33
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33039
33007: LD_INT 27
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33039
33013: LD_INT 26
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33039
33019: LD_INT 28
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33039
33025: LD_INT 29
33027: DOUBLE
33028: EQUAL
33029: IFTRUE 33039
33031: LD_INT 30
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33095
33039: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33040: LD_ADDR_VAR 0 9
33044: PUSH
33045: LD_VAR 0 59
33049: PUSH
33050: LD_VAR 0 60
33054: PUSH
33055: LD_VAR 0 61
33059: PUSH
33060: LD_VAR 0 62
33064: PUSH
33065: LD_VAR 0 63
33069: PUSH
33070: LD_VAR 0 64
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: PUSH
33083: LD_VAR 0 4
33087: PUSH
33088: LD_INT 1
33090: PLUS
33091: ARRAY
33092: ST_TO_ADDR
33093: GO 33096
33095: POP
// temp_list2 = [ ] ;
33096: LD_ADDR_VAR 0 10
33100: PUSH
33101: EMPTY
33102: ST_TO_ADDR
// for i in temp_list do
33103: LD_ADDR_VAR 0 8
33107: PUSH
33108: LD_VAR 0 9
33112: PUSH
33113: FOR_IN
33114: IFFALSE 33166
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33116: LD_ADDR_VAR 0 10
33120: PUSH
33121: LD_VAR 0 10
33125: PUSH
33126: LD_VAR 0 8
33130: PUSH
33131: LD_INT 1
33133: ARRAY
33134: PUSH
33135: LD_VAR 0 2
33139: PLUS
33140: PUSH
33141: LD_VAR 0 8
33145: PUSH
33146: LD_INT 2
33148: ARRAY
33149: PUSH
33150: LD_VAR 0 3
33154: PLUS
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: EMPTY
33161: LIST
33162: ADD
33163: ST_TO_ADDR
33164: GO 33113
33166: POP
33167: POP
// result = temp_list2 ;
33168: LD_ADDR_VAR 0 7
33172: PUSH
33173: LD_VAR 0 10
33177: ST_TO_ADDR
// end ;
33178: LD_VAR 0 7
33182: RET
// export function EnemyInRange ( unit , dist ) ; begin
33183: LD_INT 0
33185: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_VAR 0 1
33195: PPUSH
33196: CALL_OW 255
33200: PPUSH
33201: LD_VAR 0 1
33205: PPUSH
33206: CALL_OW 250
33210: PPUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: CALL_OW 251
33220: PPUSH
33221: LD_VAR 0 2
33225: PPUSH
33226: CALL 6440 0 4
33230: PUSH
33231: LD_INT 4
33233: ARRAY
33234: ST_TO_ADDR
// end ;
33235: LD_VAR 0 3
33239: RET
// export function PlayerSeeMe ( unit ) ; begin
33240: LD_INT 0
33242: PPUSH
// result := See ( your_side , unit ) ;
33243: LD_ADDR_VAR 0 2
33247: PUSH
33248: LD_OWVAR 2
33252: PPUSH
33253: LD_VAR 0 1
33257: PPUSH
33258: CALL_OW 292
33262: ST_TO_ADDR
// end ;
33263: LD_VAR 0 2
33267: RET
// export function ReverseDir ( unit ) ; begin
33268: LD_INT 0
33270: PPUSH
// if not unit then
33271: LD_VAR 0 1
33275: NOT
33276: IFFALSE 33280
// exit ;
33278: GO 33303
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33280: LD_ADDR_VAR 0 2
33284: PUSH
33285: LD_VAR 0 1
33289: PPUSH
33290: CALL_OW 254
33294: PUSH
33295: LD_INT 3
33297: PLUS
33298: PUSH
33299: LD_INT 6
33301: MOD
33302: ST_TO_ADDR
// end ;
33303: LD_VAR 0 2
33307: RET
// export function ReverseArray ( array ) ; var i ; begin
33308: LD_INT 0
33310: PPUSH
33311: PPUSH
// if not array then
33312: LD_VAR 0 1
33316: NOT
33317: IFFALSE 33321
// exit ;
33319: GO 33376
// result := [ ] ;
33321: LD_ADDR_VAR 0 2
33325: PUSH
33326: EMPTY
33327: ST_TO_ADDR
// for i := array downto 1 do
33328: LD_ADDR_VAR 0 3
33332: PUSH
33333: DOUBLE
33334: LD_VAR 0 1
33338: INC
33339: ST_TO_ADDR
33340: LD_INT 1
33342: PUSH
33343: FOR_DOWNTO
33344: IFFALSE 33374
// result := Join ( result , array [ i ] ) ;
33346: LD_ADDR_VAR 0 2
33350: PUSH
33351: LD_VAR 0 2
33355: PPUSH
33356: LD_VAR 0 1
33360: PUSH
33361: LD_VAR 0 3
33365: ARRAY
33366: PPUSH
33367: CALL 38218 0 2
33371: ST_TO_ADDR
33372: GO 33343
33374: POP
33375: POP
// end ;
33376: LD_VAR 0 2
33380: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
33381: LD_INT 0
33383: PPUSH
33384: PPUSH
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
// if not unit or not hexes then
33389: LD_VAR 0 1
33393: NOT
33394: IFTRUE 33403
33396: PUSH
33397: LD_VAR 0 2
33401: NOT
33402: OR
33403: IFFALSE 33407
// exit ;
33405: GO 33530
// dist := 9999 ;
33407: LD_ADDR_VAR 0 5
33411: PUSH
33412: LD_INT 9999
33414: ST_TO_ADDR
// for i = 1 to hexes do
33415: LD_ADDR_VAR 0 4
33419: PUSH
33420: DOUBLE
33421: LD_INT 1
33423: DEC
33424: ST_TO_ADDR
33425: LD_VAR 0 2
33429: PUSH
33430: FOR_TO
33431: IFFALSE 33518
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33433: LD_ADDR_VAR 0 6
33437: PUSH
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 2
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: PPUSH
33458: LD_VAR 0 2
33462: PUSH
33463: LD_VAR 0 4
33467: ARRAY
33468: PUSH
33469: LD_INT 2
33471: ARRAY
33472: PPUSH
33473: CALL_OW 297
33477: ST_TO_ADDR
// if tdist < dist then
33478: LD_VAR 0 6
33482: PUSH
33483: LD_VAR 0 5
33487: LESS
33488: IFFALSE 33516
// begin hex := hexes [ i ] ;
33490: LD_ADDR_VAR 0 8
33494: PUSH
33495: LD_VAR 0 2
33499: PUSH
33500: LD_VAR 0 4
33504: ARRAY
33505: ST_TO_ADDR
// dist := tdist ;
33506: LD_ADDR_VAR 0 5
33510: PUSH
33511: LD_VAR 0 6
33515: ST_TO_ADDR
// end ; end ;
33516: GO 33430
33518: POP
33519: POP
// result := hex ;
33520: LD_ADDR_VAR 0 3
33524: PUSH
33525: LD_VAR 0 8
33529: ST_TO_ADDR
// end ;
33530: LD_VAR 0 3
33534: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33535: LD_INT 0
33537: PPUSH
33538: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33539: LD_VAR 0 1
33543: NOT
33544: IFTRUE 33583
33546: PUSH
33547: LD_VAR 0 1
33551: PUSH
33552: LD_INT 21
33554: PUSH
33555: LD_INT 2
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 23
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL_OW 69
33580: IN
33581: NOT
33582: OR
33583: IFFALSE 33587
// exit ;
33585: GO 33634
// for i = 1 to 3 do
33587: LD_ADDR_VAR 0 3
33591: PUSH
33592: DOUBLE
33593: LD_INT 1
33595: DEC
33596: ST_TO_ADDR
33597: LD_INT 3
33599: PUSH
33600: FOR_TO
33601: IFFALSE 33632
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33603: LD_VAR 0 1
33607: PPUSH
33608: CALL_OW 250
33612: PPUSH
33613: LD_VAR 0 1
33617: PPUSH
33618: CALL_OW 251
33622: PPUSH
33623: LD_INT 1
33625: PPUSH
33626: CALL_OW 453
33630: GO 33600
33632: POP
33633: POP
// end ;
33634: LD_VAR 0 2
33638: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33639: LD_INT 0
33641: PPUSH
33642: PPUSH
33643: PPUSH
33644: PPUSH
33645: PPUSH
33646: PPUSH
// if not unit or not enemy_unit then
33647: LD_VAR 0 1
33651: NOT
33652: IFTRUE 33661
33654: PUSH
33655: LD_VAR 0 2
33659: NOT
33660: OR
33661: IFFALSE 33665
// exit ;
33663: GO 34136
// if GetLives ( i ) < 250 then
33665: LD_VAR 0 4
33669: PPUSH
33670: CALL_OW 256
33674: PUSH
33675: LD_INT 250
33677: LESS
33678: IFFALSE 33691
// begin ComAutodestruct ( i ) ;
33680: LD_VAR 0 4
33684: PPUSH
33685: CALL 33535 0 1
// exit ;
33689: GO 34136
// end ; x := GetX ( enemy_unit ) ;
33691: LD_ADDR_VAR 0 7
33695: PUSH
33696: LD_VAR 0 2
33700: PPUSH
33701: CALL_OW 250
33705: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33706: LD_ADDR_VAR 0 8
33710: PUSH
33711: LD_VAR 0 2
33715: PPUSH
33716: CALL_OW 251
33720: ST_TO_ADDR
// if not x or not y then
33721: LD_VAR 0 7
33725: NOT
33726: IFTRUE 33735
33728: PUSH
33729: LD_VAR 0 8
33733: NOT
33734: OR
33735: IFFALSE 33739
// exit ;
33737: GO 34136
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33739: LD_ADDR_VAR 0 6
33743: PUSH
33744: LD_VAR 0 7
33748: PPUSH
33749: LD_INT 0
33751: PPUSH
33752: LD_INT 4
33754: PPUSH
33755: CALL_OW 272
33759: PUSH
33760: LD_VAR 0 8
33764: PPUSH
33765: LD_INT 0
33767: PPUSH
33768: LD_INT 4
33770: PPUSH
33771: CALL_OW 273
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_VAR 0 7
33784: PPUSH
33785: LD_INT 1
33787: PPUSH
33788: LD_INT 4
33790: PPUSH
33791: CALL_OW 272
33795: PUSH
33796: LD_VAR 0 8
33800: PPUSH
33801: LD_INT 1
33803: PPUSH
33804: LD_INT 4
33806: PPUSH
33807: CALL_OW 273
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_VAR 0 7
33820: PPUSH
33821: LD_INT 2
33823: PPUSH
33824: LD_INT 4
33826: PPUSH
33827: CALL_OW 272
33831: PUSH
33832: LD_VAR 0 8
33836: PPUSH
33837: LD_INT 2
33839: PPUSH
33840: LD_INT 4
33842: PPUSH
33843: CALL_OW 273
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_VAR 0 7
33856: PPUSH
33857: LD_INT 3
33859: PPUSH
33860: LD_INT 4
33862: PPUSH
33863: CALL_OW 272
33867: PUSH
33868: LD_VAR 0 8
33872: PPUSH
33873: LD_INT 3
33875: PPUSH
33876: LD_INT 4
33878: PPUSH
33879: CALL_OW 273
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_VAR 0 7
33892: PPUSH
33893: LD_INT 4
33895: PPUSH
33896: LD_INT 4
33898: PPUSH
33899: CALL_OW 272
33903: PUSH
33904: LD_VAR 0 8
33908: PPUSH
33909: LD_INT 4
33911: PPUSH
33912: LD_INT 4
33914: PPUSH
33915: CALL_OW 273
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_VAR 0 7
33928: PPUSH
33929: LD_INT 5
33931: PPUSH
33932: LD_INT 4
33934: PPUSH
33935: CALL_OW 272
33939: PUSH
33940: LD_VAR 0 8
33944: PPUSH
33945: LD_INT 5
33947: PPUSH
33948: LD_INT 4
33950: PPUSH
33951: CALL_OW 273
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// for i = tmp downto 1 do
33968: LD_ADDR_VAR 0 4
33972: PUSH
33973: DOUBLE
33974: LD_VAR 0 6
33978: INC
33979: ST_TO_ADDR
33980: LD_INT 1
33982: PUSH
33983: FOR_DOWNTO
33984: IFFALSE 34087
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33986: LD_VAR 0 6
33990: PUSH
33991: LD_VAR 0 4
33995: ARRAY
33996: PUSH
33997: LD_INT 1
33999: ARRAY
34000: PPUSH
34001: LD_VAR 0 6
34005: PUSH
34006: LD_VAR 0 4
34010: ARRAY
34011: PUSH
34012: LD_INT 2
34014: ARRAY
34015: PPUSH
34016: CALL_OW 488
34020: NOT
34021: IFTRUE 34063
34023: PUSH
34024: LD_VAR 0 6
34028: PUSH
34029: LD_VAR 0 4
34033: ARRAY
34034: PUSH
34035: LD_INT 1
34037: ARRAY
34038: PPUSH
34039: LD_VAR 0 6
34043: PUSH
34044: LD_VAR 0 4
34048: ARRAY
34049: PUSH
34050: LD_INT 2
34052: ARRAY
34053: PPUSH
34054: CALL_OW 428
34058: PUSH
34059: LD_INT 0
34061: NONEQUAL
34062: OR
34063: IFFALSE 34085
// tmp := Delete ( tmp , i ) ;
34065: LD_ADDR_VAR 0 6
34069: PUSH
34070: LD_VAR 0 6
34074: PPUSH
34075: LD_VAR 0 4
34079: PPUSH
34080: CALL_OW 3
34084: ST_TO_ADDR
34085: GO 33983
34087: POP
34088: POP
// j := GetClosestHex ( unit , tmp ) ;
34089: LD_ADDR_VAR 0 5
34093: PUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: LD_VAR 0 6
34103: PPUSH
34104: CALL 33381 0 2
34108: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34109: LD_VAR 0 1
34113: PPUSH
34114: LD_VAR 0 5
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: PPUSH
34123: LD_VAR 0 5
34127: PUSH
34128: LD_INT 2
34130: ARRAY
34131: PPUSH
34132: CALL_OW 111
// end ;
34136: LD_VAR 0 3
34140: RET
// export function PrepareApemanSoldier ( ) ; begin
34141: LD_INT 0
34143: PPUSH
// uc_nation := 0 ;
34144: LD_ADDR_OWVAR 21
34148: PUSH
34149: LD_INT 0
34151: ST_TO_ADDR
// hc_sex := sex_male ;
34152: LD_ADDR_OWVAR 27
34156: PUSH
34157: LD_INT 1
34159: ST_TO_ADDR
// hc_name :=  ;
34160: LD_ADDR_OWVAR 26
34164: PUSH
34165: LD_STRING 
34167: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34168: LD_ADDR_OWVAR 28
34172: PUSH
34173: LD_INT 15
34175: ST_TO_ADDR
// hc_gallery :=  ;
34176: LD_ADDR_OWVAR 33
34180: PUSH
34181: LD_STRING 
34183: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34184: LD_ADDR_OWVAR 31
34188: PUSH
34189: LD_INT 0
34191: PPUSH
34192: LD_INT 3
34194: PPUSH
34195: CALL_OW 12
34199: PUSH
34200: LD_INT 0
34202: PPUSH
34203: LD_INT 3
34205: PPUSH
34206: CALL_OW 12
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34223: LD_ADDR_OWVAR 29
34227: PUSH
34228: LD_INT 12
34230: PUSH
34231: LD_INT 12
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: ST_TO_ADDR
// end ;
34238: LD_VAR 0 1
34242: RET
// export function PrepareApemanEngineer ( ) ; begin
34243: LD_INT 0
34245: PPUSH
// uc_nation := 0 ;
34246: LD_ADDR_OWVAR 21
34250: PUSH
34251: LD_INT 0
34253: ST_TO_ADDR
// hc_sex := sex_male ;
34254: LD_ADDR_OWVAR 27
34258: PUSH
34259: LD_INT 1
34261: ST_TO_ADDR
// hc_name :=  ;
34262: LD_ADDR_OWVAR 26
34266: PUSH
34267: LD_STRING 
34269: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34270: LD_ADDR_OWVAR 28
34274: PUSH
34275: LD_INT 16
34277: ST_TO_ADDR
// hc_gallery :=  ;
34278: LD_ADDR_OWVAR 33
34282: PUSH
34283: LD_STRING 
34285: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34286: LD_ADDR_OWVAR 31
34290: PUSH
34291: LD_INT 0
34293: PPUSH
34294: LD_INT 3
34296: PPUSH
34297: CALL_OW 12
34301: PUSH
34302: LD_INT 0
34304: PPUSH
34305: LD_INT 3
34307: PPUSH
34308: CALL_OW 12
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34325: LD_ADDR_OWVAR 29
34329: PUSH
34330: LD_INT 12
34332: PUSH
34333: LD_INT 12
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: ST_TO_ADDR
// end ;
34340: LD_VAR 0 1
34344: RET
// export function PrepareApeman ( agressivity ) ; begin
34345: LD_INT 0
34347: PPUSH
// uc_side := 0 ;
34348: LD_ADDR_OWVAR 20
34352: PUSH
34353: LD_INT 0
34355: ST_TO_ADDR
// uc_nation := 0 ;
34356: LD_ADDR_OWVAR 21
34360: PUSH
34361: LD_INT 0
34363: ST_TO_ADDR
// hc_sex := sex_male ;
34364: LD_ADDR_OWVAR 27
34368: PUSH
34369: LD_INT 1
34371: ST_TO_ADDR
// hc_class := class_apeman ;
34372: LD_ADDR_OWVAR 28
34376: PUSH
34377: LD_INT 12
34379: ST_TO_ADDR
// hc_gallery :=  ;
34380: LD_ADDR_OWVAR 33
34384: PUSH
34385: LD_STRING 
34387: ST_TO_ADDR
// hc_name :=  ;
34388: LD_ADDR_OWVAR 26
34392: PUSH
34393: LD_STRING 
34395: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34396: LD_ADDR_OWVAR 29
34400: PUSH
34401: LD_INT 12
34403: PUSH
34404: LD_INT 12
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: ST_TO_ADDR
// if agressivity = 0 then
34411: LD_VAR 0 1
34415: PUSH
34416: LD_INT 0
34418: EQUAL
34419: IFFALSE 34431
// hc_agressivity := 0 else
34421: LD_ADDR_OWVAR 35
34425: PUSH
34426: LD_INT 0
34428: ST_TO_ADDR
34429: GO 34452
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34431: LD_ADDR_OWVAR 35
34435: PUSH
34436: LD_VAR 0 1
34440: NEG
34441: PPUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 12
34451: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34452: LD_ADDR_OWVAR 31
34456: PUSH
34457: LD_INT 0
34459: PPUSH
34460: LD_INT 3
34462: PPUSH
34463: CALL_OW 12
34467: PUSH
34468: LD_INT 0
34470: PPUSH
34471: LD_INT 3
34473: PPUSH
34474: CALL_OW 12
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// end ;
34491: LD_VAR 0 2
34495: RET
// export function PrepareTiger ( agressivity ) ; begin
34496: LD_INT 0
34498: PPUSH
// uc_side := 0 ;
34499: LD_ADDR_OWVAR 20
34503: PUSH
34504: LD_INT 0
34506: ST_TO_ADDR
// uc_nation := 0 ;
34507: LD_ADDR_OWVAR 21
34511: PUSH
34512: LD_INT 0
34514: ST_TO_ADDR
// InitHc ;
34515: CALL_OW 19
// hc_class := class_tiger ;
34519: LD_ADDR_OWVAR 28
34523: PUSH
34524: LD_INT 14
34526: ST_TO_ADDR
// hc_gallery :=  ;
34527: LD_ADDR_OWVAR 33
34531: PUSH
34532: LD_STRING 
34534: ST_TO_ADDR
// hc_name :=  ;
34535: LD_ADDR_OWVAR 26
34539: PUSH
34540: LD_STRING 
34542: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34543: LD_ADDR_OWVAR 35
34547: PUSH
34548: LD_VAR 0 1
34552: NEG
34553: PPUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 12
34563: ST_TO_ADDR
// end ;
34564: LD_VAR 0 2
34568: RET
// export function PrepareEnchidna ( ) ; begin
34569: LD_INT 0
34571: PPUSH
// uc_side := 0 ;
34572: LD_ADDR_OWVAR 20
34576: PUSH
34577: LD_INT 0
34579: ST_TO_ADDR
// uc_nation := 0 ;
34580: LD_ADDR_OWVAR 21
34584: PUSH
34585: LD_INT 0
34587: ST_TO_ADDR
// InitHc ;
34588: CALL_OW 19
// hc_class := class_baggie ;
34592: LD_ADDR_OWVAR 28
34596: PUSH
34597: LD_INT 13
34599: ST_TO_ADDR
// hc_gallery :=  ;
34600: LD_ADDR_OWVAR 33
34604: PUSH
34605: LD_STRING 
34607: ST_TO_ADDR
// hc_name :=  ;
34608: LD_ADDR_OWVAR 26
34612: PUSH
34613: LD_STRING 
34615: ST_TO_ADDR
// end ;
34616: LD_VAR 0 1
34620: RET
// export function PrepareFrog ( ) ; begin
34621: LD_INT 0
34623: PPUSH
// uc_side := 0 ;
34624: LD_ADDR_OWVAR 20
34628: PUSH
34629: LD_INT 0
34631: ST_TO_ADDR
// uc_nation := 0 ;
34632: LD_ADDR_OWVAR 21
34636: PUSH
34637: LD_INT 0
34639: ST_TO_ADDR
// InitHc ;
34640: CALL_OW 19
// hc_class := class_frog ;
34644: LD_ADDR_OWVAR 28
34648: PUSH
34649: LD_INT 19
34651: ST_TO_ADDR
// hc_gallery :=  ;
34652: LD_ADDR_OWVAR 33
34656: PUSH
34657: LD_STRING 
34659: ST_TO_ADDR
// hc_name :=  ;
34660: LD_ADDR_OWVAR 26
34664: PUSH
34665: LD_STRING 
34667: ST_TO_ADDR
// end ;
34668: LD_VAR 0 1
34672: RET
// export function PrepareFish ( ) ; begin
34673: LD_INT 0
34675: PPUSH
// uc_side := 0 ;
34676: LD_ADDR_OWVAR 20
34680: PUSH
34681: LD_INT 0
34683: ST_TO_ADDR
// uc_nation := 0 ;
34684: LD_ADDR_OWVAR 21
34688: PUSH
34689: LD_INT 0
34691: ST_TO_ADDR
// InitHc ;
34692: CALL_OW 19
// hc_class := class_fish ;
34696: LD_ADDR_OWVAR 28
34700: PUSH
34701: LD_INT 20
34703: ST_TO_ADDR
// hc_gallery :=  ;
34704: LD_ADDR_OWVAR 33
34708: PUSH
34709: LD_STRING 
34711: ST_TO_ADDR
// hc_name :=  ;
34712: LD_ADDR_OWVAR 26
34716: PUSH
34717: LD_STRING 
34719: ST_TO_ADDR
// end ;
34720: LD_VAR 0 1
34724: RET
// export function PrepareBird ( ) ; begin
34725: LD_INT 0
34727: PPUSH
// uc_side := 0 ;
34728: LD_ADDR_OWVAR 20
34732: PUSH
34733: LD_INT 0
34735: ST_TO_ADDR
// uc_nation := 0 ;
34736: LD_ADDR_OWVAR 21
34740: PUSH
34741: LD_INT 0
34743: ST_TO_ADDR
// InitHc ;
34744: CALL_OW 19
// hc_class := class_phororhacos ;
34748: LD_ADDR_OWVAR 28
34752: PUSH
34753: LD_INT 18
34755: ST_TO_ADDR
// hc_gallery :=  ;
34756: LD_ADDR_OWVAR 33
34760: PUSH
34761: LD_STRING 
34763: ST_TO_ADDR
// hc_name :=  ;
34764: LD_ADDR_OWVAR 26
34768: PUSH
34769: LD_STRING 
34771: ST_TO_ADDR
// end ;
34772: LD_VAR 0 1
34776: RET
// export function PrepareHorse ( ) ; begin
34777: LD_INT 0
34779: PPUSH
// uc_side := 0 ;
34780: LD_ADDR_OWVAR 20
34784: PUSH
34785: LD_INT 0
34787: ST_TO_ADDR
// uc_nation := 0 ;
34788: LD_ADDR_OWVAR 21
34792: PUSH
34793: LD_INT 0
34795: ST_TO_ADDR
// InitHc ;
34796: CALL_OW 19
// hc_class := class_horse ;
34800: LD_ADDR_OWVAR 28
34804: PUSH
34805: LD_INT 21
34807: ST_TO_ADDR
// hc_gallery :=  ;
34808: LD_ADDR_OWVAR 33
34812: PUSH
34813: LD_STRING 
34815: ST_TO_ADDR
// hc_name :=  ;
34816: LD_ADDR_OWVAR 26
34820: PUSH
34821: LD_STRING 
34823: ST_TO_ADDR
// end ;
34824: LD_VAR 0 1
34828: RET
// export function PrepareMastodont ( ) ; begin
34829: LD_INT 0
34831: PPUSH
// uc_side := 0 ;
34832: LD_ADDR_OWVAR 20
34836: PUSH
34837: LD_INT 0
34839: ST_TO_ADDR
// uc_nation := 0 ;
34840: LD_ADDR_OWVAR 21
34844: PUSH
34845: LD_INT 0
34847: ST_TO_ADDR
// vc_chassis := class_mastodont ;
34848: LD_ADDR_OWVAR 37
34852: PUSH
34853: LD_INT 31
34855: ST_TO_ADDR
// vc_control := control_rider ;
34856: LD_ADDR_OWVAR 38
34860: PUSH
34861: LD_INT 4
34863: ST_TO_ADDR
// end ;
34864: LD_VAR 0 1
34868: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34869: LD_INT 0
34871: PPUSH
34872: PPUSH
34873: PPUSH
// uc_side = 0 ;
34874: LD_ADDR_OWVAR 20
34878: PUSH
34879: LD_INT 0
34881: ST_TO_ADDR
// uc_nation = 0 ;
34882: LD_ADDR_OWVAR 21
34886: PUSH
34887: LD_INT 0
34889: ST_TO_ADDR
// InitHc_All ( ) ;
34890: CALL_OW 584
// InitVc ;
34894: CALL_OW 20
// if mastodonts then
34898: LD_VAR 0 6
34902: IFFALSE 34969
// for i = 1 to mastodonts do
34904: LD_ADDR_VAR 0 11
34908: PUSH
34909: DOUBLE
34910: LD_INT 1
34912: DEC
34913: ST_TO_ADDR
34914: LD_VAR 0 6
34918: PUSH
34919: FOR_TO
34920: IFFALSE 34967
// begin vc_chassis := 31 ;
34922: LD_ADDR_OWVAR 37
34926: PUSH
34927: LD_INT 31
34929: ST_TO_ADDR
// vc_control := control_rider ;
34930: LD_ADDR_OWVAR 38
34934: PUSH
34935: LD_INT 4
34937: ST_TO_ADDR
// animal := CreateVehicle ;
34938: LD_ADDR_VAR 0 12
34942: PUSH
34943: CALL_OW 45
34947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34948: LD_VAR 0 12
34952: PPUSH
34953: LD_VAR 0 8
34957: PPUSH
34958: LD_INT 0
34960: PPUSH
34961: CALL 37111 0 3
// end ;
34965: GO 34919
34967: POP
34968: POP
// if horses then
34969: LD_VAR 0 5
34973: IFFALSE 35040
// for i = 1 to horses do
34975: LD_ADDR_VAR 0 11
34979: PUSH
34980: DOUBLE
34981: LD_INT 1
34983: DEC
34984: ST_TO_ADDR
34985: LD_VAR 0 5
34989: PUSH
34990: FOR_TO
34991: IFFALSE 35038
// begin hc_class := 21 ;
34993: LD_ADDR_OWVAR 28
34997: PUSH
34998: LD_INT 21
35000: ST_TO_ADDR
// hc_gallery :=  ;
35001: LD_ADDR_OWVAR 33
35005: PUSH
35006: LD_STRING 
35008: ST_TO_ADDR
// animal := CreateHuman ;
35009: LD_ADDR_VAR 0 12
35013: PUSH
35014: CALL_OW 44
35018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35019: LD_VAR 0 12
35023: PPUSH
35024: LD_VAR 0 8
35028: PPUSH
35029: LD_INT 0
35031: PPUSH
35032: CALL 37111 0 3
// end ;
35036: GO 34990
35038: POP
35039: POP
// if birds then
35040: LD_VAR 0 1
35044: IFFALSE 35111
// for i = 1 to birds do
35046: LD_ADDR_VAR 0 11
35050: PUSH
35051: DOUBLE
35052: LD_INT 1
35054: DEC
35055: ST_TO_ADDR
35056: LD_VAR 0 1
35060: PUSH
35061: FOR_TO
35062: IFFALSE 35109
// begin hc_class := 18 ;
35064: LD_ADDR_OWVAR 28
35068: PUSH
35069: LD_INT 18
35071: ST_TO_ADDR
// hc_gallery =  ;
35072: LD_ADDR_OWVAR 33
35076: PUSH
35077: LD_STRING 
35079: ST_TO_ADDR
// animal := CreateHuman ;
35080: LD_ADDR_VAR 0 12
35084: PUSH
35085: CALL_OW 44
35089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35090: LD_VAR 0 12
35094: PPUSH
35095: LD_VAR 0 8
35099: PPUSH
35100: LD_INT 0
35102: PPUSH
35103: CALL 37111 0 3
// end ;
35107: GO 35061
35109: POP
35110: POP
// if tigers then
35111: LD_VAR 0 2
35115: IFFALSE 35199
// for i = 1 to tigers do
35117: LD_ADDR_VAR 0 11
35121: PUSH
35122: DOUBLE
35123: LD_INT 1
35125: DEC
35126: ST_TO_ADDR
35127: LD_VAR 0 2
35131: PUSH
35132: FOR_TO
35133: IFFALSE 35197
// begin hc_class = class_tiger ;
35135: LD_ADDR_OWVAR 28
35139: PUSH
35140: LD_INT 14
35142: ST_TO_ADDR
// hc_gallery =  ;
35143: LD_ADDR_OWVAR 33
35147: PUSH
35148: LD_STRING 
35150: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35151: LD_ADDR_OWVAR 35
35155: PUSH
35156: LD_INT 7
35158: NEG
35159: PPUSH
35160: LD_INT 7
35162: PPUSH
35163: CALL_OW 12
35167: ST_TO_ADDR
// animal := CreateHuman ;
35168: LD_ADDR_VAR 0 12
35172: PUSH
35173: CALL_OW 44
35177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35178: LD_VAR 0 12
35182: PPUSH
35183: LD_VAR 0 8
35187: PPUSH
35188: LD_INT 0
35190: PPUSH
35191: CALL 37111 0 3
// end ;
35195: GO 35132
35197: POP
35198: POP
// if apemans then
35199: LD_VAR 0 3
35203: IFFALSE 35326
// for i = 1 to apemans do
35205: LD_ADDR_VAR 0 11
35209: PUSH
35210: DOUBLE
35211: LD_INT 1
35213: DEC
35214: ST_TO_ADDR
35215: LD_VAR 0 3
35219: PUSH
35220: FOR_TO
35221: IFFALSE 35324
// begin hc_class = class_apeman ;
35223: LD_ADDR_OWVAR 28
35227: PUSH
35228: LD_INT 12
35230: ST_TO_ADDR
// hc_gallery =  ;
35231: LD_ADDR_OWVAR 33
35235: PUSH
35236: LD_STRING 
35238: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35239: LD_ADDR_OWVAR 35
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PPUSH
35248: LD_INT 2
35250: PPUSH
35251: CALL_OW 12
35255: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35256: LD_ADDR_OWVAR 31
35260: PUSH
35261: LD_INT 1
35263: PPUSH
35264: LD_INT 3
35266: PPUSH
35267: CALL_OW 12
35271: PUSH
35272: LD_INT 1
35274: PPUSH
35275: LD_INT 3
35277: PPUSH
35278: CALL_OW 12
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: ST_TO_ADDR
// animal := CreateHuman ;
35295: LD_ADDR_VAR 0 12
35299: PUSH
35300: CALL_OW 44
35304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35305: LD_VAR 0 12
35309: PPUSH
35310: LD_VAR 0 8
35314: PPUSH
35315: LD_INT 0
35317: PPUSH
35318: CALL 37111 0 3
// end ;
35322: GO 35220
35324: POP
35325: POP
// if enchidnas then
35326: LD_VAR 0 4
35330: IFFALSE 35397
// for i = 1 to enchidnas do
35332: LD_ADDR_VAR 0 11
35336: PUSH
35337: DOUBLE
35338: LD_INT 1
35340: DEC
35341: ST_TO_ADDR
35342: LD_VAR 0 4
35346: PUSH
35347: FOR_TO
35348: IFFALSE 35395
// begin hc_class = 13 ;
35350: LD_ADDR_OWVAR 28
35354: PUSH
35355: LD_INT 13
35357: ST_TO_ADDR
// hc_gallery =  ;
35358: LD_ADDR_OWVAR 33
35362: PUSH
35363: LD_STRING 
35365: ST_TO_ADDR
// animal := CreateHuman ;
35366: LD_ADDR_VAR 0 12
35370: PUSH
35371: CALL_OW 44
35375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35376: LD_VAR 0 12
35380: PPUSH
35381: LD_VAR 0 8
35385: PPUSH
35386: LD_INT 0
35388: PPUSH
35389: CALL 37111 0 3
// end ;
35393: GO 35347
35395: POP
35396: POP
// if fishes then
35397: LD_VAR 0 7
35401: IFFALSE 35468
// for i = 1 to fishes do
35403: LD_ADDR_VAR 0 11
35407: PUSH
35408: DOUBLE
35409: LD_INT 1
35411: DEC
35412: ST_TO_ADDR
35413: LD_VAR 0 7
35417: PUSH
35418: FOR_TO
35419: IFFALSE 35466
// begin hc_class = 20 ;
35421: LD_ADDR_OWVAR 28
35425: PUSH
35426: LD_INT 20
35428: ST_TO_ADDR
// hc_gallery =  ;
35429: LD_ADDR_OWVAR 33
35433: PUSH
35434: LD_STRING 
35436: ST_TO_ADDR
// animal := CreateHuman ;
35437: LD_ADDR_VAR 0 12
35441: PUSH
35442: CALL_OW 44
35446: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35447: LD_VAR 0 12
35451: PPUSH
35452: LD_VAR 0 9
35456: PPUSH
35457: LD_INT 0
35459: PPUSH
35460: CALL 37111 0 3
// end ;
35464: GO 35418
35466: POP
35467: POP
// end ;
35468: LD_VAR 0 10
35472: RET
// export function WantHeal ( sci , unit ) ; begin
35473: LD_INT 0
35475: PPUSH
// if GetTaskList ( sci ) > 0 then
35476: LD_VAR 0 1
35480: PPUSH
35481: CALL_OW 437
35485: PUSH
35486: LD_INT 0
35488: GREATER
35489: IFFALSE 35561
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35491: LD_VAR 0 1
35495: PPUSH
35496: CALL_OW 437
35500: PUSH
35501: LD_INT 1
35503: ARRAY
35504: PUSH
35505: LD_INT 1
35507: ARRAY
35508: PUSH
35509: LD_STRING l
35511: EQUAL
35512: IFFALSE 35539
35514: PUSH
35515: LD_VAR 0 1
35519: PPUSH
35520: CALL_OW 437
35524: PUSH
35525: LD_INT 1
35527: ARRAY
35528: PUSH
35529: LD_INT 4
35531: ARRAY
35532: PUSH
35533: LD_VAR 0 2
35537: EQUAL
35538: AND
35539: IFFALSE 35551
// result := true else
35541: LD_ADDR_VAR 0 3
35545: PUSH
35546: LD_INT 1
35548: ST_TO_ADDR
35549: GO 35559
// result := false ;
35551: LD_ADDR_VAR 0 3
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// end else
35559: GO 35569
// result := false ;
35561: LD_ADDR_VAR 0 3
35565: PUSH
35566: LD_INT 0
35568: ST_TO_ADDR
// end ;
35569: LD_VAR 0 3
35573: RET
// export function HealTarget ( sci ) ; begin
35574: LD_INT 0
35576: PPUSH
// if not sci then
35577: LD_VAR 0 1
35581: NOT
35582: IFFALSE 35586
// exit ;
35584: GO 35651
// result := 0 ;
35586: LD_ADDR_VAR 0 2
35590: PUSH
35591: LD_INT 0
35593: ST_TO_ADDR
// if GetTaskList ( sci ) then
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL_OW 437
35603: IFFALSE 35651
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 437
35614: PUSH
35615: LD_INT 1
35617: ARRAY
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PUSH
35623: LD_STRING l
35625: EQUAL
35626: IFFALSE 35651
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35628: LD_ADDR_VAR 0 2
35632: PUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: CALL_OW 437
35642: PUSH
35643: LD_INT 1
35645: ARRAY
35646: PUSH
35647: LD_INT 4
35649: ARRAY
35650: ST_TO_ADDR
// end ;
35651: LD_VAR 0 2
35655: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35656: LD_INT 0
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
// if not base_units then
35662: LD_VAR 0 1
35666: NOT
35667: IFFALSE 35671
// exit ;
35669: GO 35758
// result := false ;
35671: LD_ADDR_VAR 0 2
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35679: LD_ADDR_VAR 0 5
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: LD_INT 21
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PPUSH
35699: CALL_OW 72
35703: ST_TO_ADDR
// if not tmp then
35704: LD_VAR 0 5
35708: NOT
35709: IFFALSE 35713
// exit ;
35711: GO 35758
// for i in tmp do
35713: LD_ADDR_VAR 0 3
35717: PUSH
35718: LD_VAR 0 5
35722: PUSH
35723: FOR_IN
35724: IFFALSE 35756
// begin result := EnemyInRange ( i , 22 ) ;
35726: LD_ADDR_VAR 0 2
35730: PUSH
35731: LD_VAR 0 3
35735: PPUSH
35736: LD_INT 22
35738: PPUSH
35739: CALL 33183 0 2
35743: ST_TO_ADDR
// if result then
35744: LD_VAR 0 2
35748: IFFALSE 35754
// exit ;
35750: POP
35751: POP
35752: GO 35758
// end ;
35754: GO 35723
35756: POP
35757: POP
// end ;
35758: LD_VAR 0 2
35762: RET
// export function FilterByTag ( units , tag ) ; begin
35763: LD_INT 0
35765: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35766: LD_ADDR_VAR 0 3
35770: PUSH
35771: LD_VAR 0 1
35775: PPUSH
35776: LD_INT 120
35778: PUSH
35779: LD_VAR 0 2
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PPUSH
35788: CALL_OW 72
35792: ST_TO_ADDR
// end ;
35793: LD_VAR 0 3
35797: RET
// export function IsDriver ( un ) ; begin
35798: LD_INT 0
35800: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35801: LD_ADDR_VAR 0 2
35805: PUSH
35806: LD_VAR 0 1
35810: PUSH
35811: LD_INT 55
35813: PUSH
35814: EMPTY
35815: LIST
35816: PPUSH
35817: CALL_OW 69
35821: IN
35822: ST_TO_ADDR
// end ;
35823: LD_VAR 0 2
35827: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35828: LD_INT 0
35830: PPUSH
35831: PPUSH
// list := [ ] ;
35832: LD_ADDR_VAR 0 5
35836: PUSH
35837: EMPTY
35838: ST_TO_ADDR
// case d of 0 :
35839: LD_VAR 0 3
35843: PUSH
35844: LD_INT 0
35846: DOUBLE
35847: EQUAL
35848: IFTRUE 35852
35850: GO 35985
35852: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35853: LD_ADDR_VAR 0 5
35857: PUSH
35858: LD_VAR 0 1
35862: PUSH
35863: LD_INT 4
35865: MINUS
35866: PUSH
35867: LD_VAR 0 2
35871: PUSH
35872: LD_INT 4
35874: MINUS
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: PUSH
35884: LD_VAR 0 1
35888: PUSH
35889: LD_INT 3
35891: MINUS
35892: PUSH
35893: LD_VAR 0 2
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: PUSH
35906: LD_VAR 0 1
35910: PUSH
35911: LD_INT 4
35913: PLUS
35914: PUSH
35915: LD_VAR 0 2
35919: PUSH
35920: LD_INT 4
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: LD_VAR 0 1
35932: PUSH
35933: LD_INT 3
35935: PLUS
35936: PUSH
35937: LD_VAR 0 2
35941: PUSH
35942: LD_INT 3
35944: PLUS
35945: PUSH
35946: LD_INT 5
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: PUSH
35954: LD_VAR 0 1
35958: PUSH
35959: LD_VAR 0 2
35963: PUSH
35964: LD_INT 4
35966: PLUS
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
// end ; 1 :
35983: GO 36683
35985: LD_INT 1
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 35993
35991: GO 36126
35993: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35994: LD_ADDR_VAR 0 5
35998: PUSH
35999: LD_VAR 0 1
36003: PUSH
36004: LD_VAR 0 2
36008: PUSH
36009: LD_INT 4
36011: MINUS
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: PUSH
36021: LD_VAR 0 1
36025: PUSH
36026: LD_INT 3
36028: MINUS
36029: PUSH
36030: LD_VAR 0 2
36034: PUSH
36035: LD_INT 3
36037: MINUS
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_INT 4
36054: MINUS
36055: PUSH
36056: LD_VAR 0 2
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: PUSH
36069: LD_VAR 0 1
36073: PUSH
36074: LD_VAR 0 2
36078: PUSH
36079: LD_INT 3
36081: PLUS
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: LIST
36090: PUSH
36091: LD_VAR 0 1
36095: PUSH
36096: LD_INT 4
36098: PLUS
36099: PUSH
36100: LD_VAR 0 2
36104: PUSH
36105: LD_INT 4
36107: PLUS
36108: PUSH
36109: LD_INT 5
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: ST_TO_ADDR
// end ; 2 :
36124: GO 36683
36126: LD_INT 2
36128: DOUBLE
36129: EQUAL
36130: IFTRUE 36134
36132: GO 36263
36134: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36135: LD_ADDR_VAR 0 5
36139: PUSH
36140: LD_VAR 0 1
36144: PUSH
36145: LD_VAR 0 2
36149: PUSH
36150: LD_INT 3
36152: MINUS
36153: PUSH
36154: LD_INT 3
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: PUSH
36162: LD_VAR 0 1
36166: PUSH
36167: LD_INT 4
36169: PLUS
36170: PUSH
36171: LD_VAR 0 2
36175: PUSH
36176: LD_INT 4
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: PUSH
36184: LD_VAR 0 1
36188: PUSH
36189: LD_VAR 0 2
36193: PUSH
36194: LD_INT 4
36196: PLUS
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: PUSH
36206: LD_VAR 0 1
36210: PUSH
36211: LD_INT 3
36213: MINUS
36214: PUSH
36215: LD_VAR 0 2
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: PUSH
36228: LD_VAR 0 1
36232: PUSH
36233: LD_INT 4
36235: MINUS
36236: PUSH
36237: LD_VAR 0 2
36241: PUSH
36242: LD_INT 4
36244: MINUS
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: ST_TO_ADDR
// end ; 3 :
36261: GO 36683
36263: LD_INT 3
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36404
36271: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36272: LD_ADDR_VAR 0 5
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: LD_INT 3
36284: PLUS
36285: PUSH
36286: LD_VAR 0 2
36290: PUSH
36291: LD_INT 4
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: PUSH
36299: LD_VAR 0 1
36303: PUSH
36304: LD_INT 4
36306: PLUS
36307: PUSH
36308: LD_VAR 0 2
36312: PUSH
36313: LD_INT 4
36315: PLUS
36316: PUSH
36317: LD_INT 5
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: PUSH
36325: LD_VAR 0 1
36329: PUSH
36330: LD_INT 4
36332: MINUS
36333: PUSH
36334: LD_VAR 0 2
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: PUSH
36347: LD_VAR 0 1
36351: PUSH
36352: LD_VAR 0 2
36356: PUSH
36357: LD_INT 4
36359: MINUS
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: PUSH
36369: LD_VAR 0 1
36373: PUSH
36374: LD_INT 3
36376: MINUS
36377: PUSH
36378: LD_VAR 0 2
36382: PUSH
36383: LD_INT 3
36385: MINUS
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// end ; 4 :
36402: GO 36683
36404: LD_INT 4
36406: DOUBLE
36407: EQUAL
36408: IFTRUE 36412
36410: GO 36545
36412: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36413: LD_ADDR_VAR 0 5
36417: PUSH
36418: LD_VAR 0 1
36422: PUSH
36423: LD_VAR 0 2
36427: PUSH
36428: LD_INT 4
36430: PLUS
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: PUSH
36440: LD_VAR 0 1
36444: PUSH
36445: LD_INT 3
36447: PLUS
36448: PUSH
36449: LD_VAR 0 2
36453: PUSH
36454: LD_INT 3
36456: PLUS
36457: PUSH
36458: LD_INT 5
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: PUSH
36466: LD_VAR 0 1
36470: PUSH
36471: LD_INT 4
36473: PLUS
36474: PUSH
36475: LD_VAR 0 2
36479: PUSH
36480: LD_INT 4
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: PUSH
36488: LD_VAR 0 1
36492: PUSH
36493: LD_VAR 0 2
36497: PUSH
36498: LD_INT 3
36500: MINUS
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: PUSH
36510: LD_VAR 0 1
36514: PUSH
36515: LD_INT 4
36517: MINUS
36518: PUSH
36519: LD_VAR 0 2
36523: PUSH
36524: LD_INT 4
36526: MINUS
36527: PUSH
36528: LD_INT 2
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// end ; 5 :
36543: GO 36683
36545: LD_INT 5
36547: DOUBLE
36548: EQUAL
36549: IFTRUE 36553
36551: GO 36682
36553: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36554: LD_ADDR_VAR 0 5
36558: PUSH
36559: LD_VAR 0 1
36563: PUSH
36564: LD_INT 4
36566: MINUS
36567: PUSH
36568: LD_VAR 0 2
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: LD_VAR 0 1
36585: PUSH
36586: LD_VAR 0 2
36590: PUSH
36591: LD_INT 4
36593: MINUS
36594: PUSH
36595: LD_INT 3
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: PUSH
36603: LD_VAR 0 1
36607: PUSH
36608: LD_INT 4
36610: PLUS
36611: PUSH
36612: LD_VAR 0 2
36616: PUSH
36617: LD_INT 4
36619: PLUS
36620: PUSH
36621: LD_INT 5
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: LIST
36628: PUSH
36629: LD_VAR 0 1
36633: PUSH
36634: LD_INT 3
36636: PLUS
36637: PUSH
36638: LD_VAR 0 2
36642: PUSH
36643: LD_INT 4
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: PUSH
36651: LD_VAR 0 1
36655: PUSH
36656: LD_VAR 0 2
36660: PUSH
36661: LD_INT 3
36663: PLUS
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// end ; end ;
36680: GO 36683
36682: POP
// result := list ;
36683: LD_ADDR_VAR 0 4
36687: PUSH
36688: LD_VAR 0 5
36692: ST_TO_ADDR
// end ;
36693: LD_VAR 0 4
36697: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36698: LD_INT 0
36700: PPUSH
36701: PPUSH
36702: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36703: LD_VAR 0 1
36707: NOT
36708: IFTRUE 36736
36710: PUSH
36711: LD_VAR 0 2
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 2
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: LD_INT 4
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: IN
36734: NOT
36735: OR
36736: IFFALSE 36740
// exit ;
36738: GO 36823
// tmp := [ ] ;
36740: LD_ADDR_VAR 0 5
36744: PUSH
36745: EMPTY
36746: ST_TO_ADDR
// for i in units do
36747: LD_ADDR_VAR 0 4
36751: PUSH
36752: LD_VAR 0 1
36756: PUSH
36757: FOR_IN
36758: IFFALSE 36792
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
36760: LD_ADDR_VAR 0 5
36764: PUSH
36765: LD_VAR 0 5
36769: PPUSH
36770: LD_VAR 0 4
36774: PPUSH
36775: LD_VAR 0 2
36779: PPUSH
36780: CALL_OW 259
36784: PPUSH
36785: CALL 38218 0 2
36789: ST_TO_ADDR
36790: GO 36757
36792: POP
36793: POP
// if not tmp then
36794: LD_VAR 0 5
36798: NOT
36799: IFFALSE 36803
// exit ;
36801: GO 36823
// result := SortListByListDesc ( units , tmp ) ;
36803: LD_ADDR_VAR 0 3
36807: PUSH
36808: LD_VAR 0 1
36812: PPUSH
36813: LD_VAR 0 5
36817: PPUSH
36818: CALL_OW 77
36822: ST_TO_ADDR
// end ;
36823: LD_VAR 0 3
36827: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36828: LD_INT 0
36830: PPUSH
36831: PPUSH
36832: PPUSH
// result := false ;
36833: LD_ADDR_VAR 0 3
36837: PUSH
36838: LD_INT 0
36840: ST_TO_ADDR
// if not building then
36841: LD_VAR 0 2
36845: NOT
36846: IFFALSE 36850
// exit ;
36848: GO 36994
// x := GetX ( building ) ;
36850: LD_ADDR_VAR 0 4
36854: PUSH
36855: LD_VAR 0 2
36859: PPUSH
36860: CALL_OW 250
36864: ST_TO_ADDR
// y := GetY ( building ) ;
36865: LD_ADDR_VAR 0 5
36869: PUSH
36870: LD_VAR 0 2
36874: PPUSH
36875: CALL_OW 251
36879: ST_TO_ADDR
// if not x or not y then
36880: LD_VAR 0 4
36884: NOT
36885: IFTRUE 36894
36887: PUSH
36888: LD_VAR 0 5
36892: NOT
36893: OR
36894: IFFALSE 36898
// exit ;
36896: GO 36994
// if GetTaskList ( unit ) then
36898: LD_VAR 0 1
36902: PPUSH
36903: CALL_OW 437
36907: IFFALSE 36994
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36909: LD_STRING e
36911: PUSH
36912: LD_VAR 0 1
36916: PPUSH
36917: CALL_OW 437
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PUSH
36926: LD_INT 1
36928: ARRAY
36929: EQUAL
36930: IFFALSE 36957
36932: PUSH
36933: LD_VAR 0 4
36937: PUSH
36938: LD_VAR 0 1
36942: PPUSH
36943: CALL_OW 437
36947: PUSH
36948: LD_INT 1
36950: ARRAY
36951: PUSH
36952: LD_INT 2
36954: ARRAY
36955: EQUAL
36956: AND
36957: IFFALSE 36984
36959: PUSH
36960: LD_VAR 0 5
36964: PUSH
36965: LD_VAR 0 1
36969: PPUSH
36970: CALL_OW 437
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PUSH
36979: LD_INT 3
36981: ARRAY
36982: EQUAL
36983: AND
36984: IFFALSE 36994
// result := true end ;
36986: LD_ADDR_VAR 0 3
36990: PUSH
36991: LD_INT 1
36993: ST_TO_ADDR
// end ;
36994: LD_VAR 0 3
36998: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36999: LD_INT 0
37001: PPUSH
// result := false ;
37002: LD_ADDR_VAR 0 4
37006: PUSH
37007: LD_INT 0
37009: ST_TO_ADDR
// if GetTaskList ( unit ) then
37010: LD_VAR 0 1
37014: PPUSH
37015: CALL_OW 437
37019: IFFALSE 37106
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37021: LD_STRING M
37023: PUSH
37024: LD_VAR 0 1
37028: PPUSH
37029: CALL_OW 437
37033: PUSH
37034: LD_INT 1
37036: ARRAY
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: EQUAL
37042: IFFALSE 37069
37044: PUSH
37045: LD_VAR 0 2
37049: PUSH
37050: LD_VAR 0 1
37054: PPUSH
37055: CALL_OW 437
37059: PUSH
37060: LD_INT 1
37062: ARRAY
37063: PUSH
37064: LD_INT 2
37066: ARRAY
37067: EQUAL
37068: AND
37069: IFFALSE 37096
37071: PUSH
37072: LD_VAR 0 3
37076: PUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 437
37086: PUSH
37087: LD_INT 1
37089: ARRAY
37090: PUSH
37091: LD_INT 3
37093: ARRAY
37094: EQUAL
37095: AND
37096: IFFALSE 37106
// result := true ;
37098: LD_ADDR_VAR 0 4
37102: PUSH
37103: LD_INT 1
37105: ST_TO_ADDR
// end ; end ;
37106: LD_VAR 0 4
37110: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37111: LD_INT 0
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
// if not unit or not area then
37117: LD_VAR 0 1
37121: NOT
37122: IFTRUE 37131
37124: PUSH
37125: LD_VAR 0 2
37129: NOT
37130: OR
37131: IFFALSE 37135
// exit ;
37133: GO 37311
// tmp := AreaToList ( area , i ) ;
37135: LD_ADDR_VAR 0 6
37139: PUSH
37140: LD_VAR 0 2
37144: PPUSH
37145: LD_VAR 0 5
37149: PPUSH
37150: CALL_OW 517
37154: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37155: LD_ADDR_VAR 0 5
37159: PUSH
37160: DOUBLE
37161: LD_INT 1
37163: DEC
37164: ST_TO_ADDR
37165: LD_VAR 0 6
37169: PUSH
37170: LD_INT 1
37172: ARRAY
37173: PUSH
37174: FOR_TO
37175: IFFALSE 37309
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37177: LD_ADDR_VAR 0 7
37181: PUSH
37182: LD_VAR 0 6
37186: PUSH
37187: LD_INT 1
37189: ARRAY
37190: PUSH
37191: LD_VAR 0 5
37195: ARRAY
37196: PUSH
37197: LD_VAR 0 6
37201: PUSH
37202: LD_INT 2
37204: ARRAY
37205: PUSH
37206: LD_VAR 0 5
37210: ARRAY
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
37216: LD_INT 92
37218: PUSH
37219: LD_VAR 0 7
37223: PUSH
37224: LD_INT 1
37226: ARRAY
37227: PUSH
37228: LD_VAR 0 7
37232: PUSH
37233: LD_INT 2
37235: ARRAY
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: PPUSH
37246: CALL_OW 69
37250: PUSH
37251: LD_INT 0
37253: EQUAL
37254: IFFALSE 37307
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37256: LD_VAR 0 1
37260: PPUSH
37261: LD_VAR 0 7
37265: PUSH
37266: LD_INT 1
37268: ARRAY
37269: PPUSH
37270: LD_VAR 0 7
37274: PUSH
37275: LD_INT 2
37277: ARRAY
37278: PPUSH
37279: LD_VAR 0 3
37283: PPUSH
37284: CALL_OW 48
// result := IsPlaced ( unit ) ;
37288: LD_ADDR_VAR 0 4
37292: PUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 305
37302: ST_TO_ADDR
// exit ;
37303: POP
37304: POP
37305: GO 37311
// end ; end ;
37307: GO 37174
37309: POP
37310: POP
// end ;
37311: LD_VAR 0 4
37315: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37316: LD_INT 0
37318: PPUSH
37319: PPUSH
37320: PPUSH
// if not side or side > 8 then
37321: LD_VAR 0 1
37325: NOT
37326: IFTRUE 37338
37328: PUSH
37329: LD_VAR 0 1
37333: PUSH
37334: LD_INT 8
37336: GREATER
37337: OR
37338: IFFALSE 37342
// exit ;
37340: GO 37529
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37342: LD_ADDR_VAR 0 4
37346: PUSH
37347: LD_INT 22
37349: PUSH
37350: LD_VAR 0 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 21
37361: PUSH
37362: LD_INT 3
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PPUSH
37373: CALL_OW 69
37377: ST_TO_ADDR
// if not tmp then
37378: LD_VAR 0 4
37382: NOT
37383: IFFALSE 37387
// exit ;
37385: GO 37529
// enable_addtolog := true ;
37387: LD_ADDR_OWVAR 81
37391: PUSH
37392: LD_INT 1
37394: ST_TO_ADDR
// AddToLog ( [ ) ;
37395: LD_STRING [
37397: PPUSH
37398: CALL_OW 561
// for i in tmp do
37402: LD_ADDR_VAR 0 3
37406: PUSH
37407: LD_VAR 0 4
37411: PUSH
37412: FOR_IN
37413: IFFALSE 37520
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37415: LD_STRING [
37417: PUSH
37418: LD_VAR 0 3
37422: PPUSH
37423: CALL_OW 266
37427: STR
37428: PUSH
37429: LD_STRING , 
37431: STR
37432: PUSH
37433: LD_VAR 0 3
37437: PPUSH
37438: CALL_OW 250
37442: STR
37443: PUSH
37444: LD_STRING , 
37446: STR
37447: PUSH
37448: LD_VAR 0 3
37452: PPUSH
37453: CALL_OW 251
37457: STR
37458: PUSH
37459: LD_STRING , 
37461: STR
37462: PUSH
37463: LD_VAR 0 3
37467: PPUSH
37468: CALL_OW 254
37472: STR
37473: PUSH
37474: LD_STRING , 
37476: STR
37477: PUSH
37478: LD_VAR 0 3
37482: PPUSH
37483: LD_INT 1
37485: PPUSH
37486: CALL_OW 268
37490: STR
37491: PUSH
37492: LD_STRING , 
37494: STR
37495: PUSH
37496: LD_VAR 0 3
37500: PPUSH
37501: LD_INT 2
37503: PPUSH
37504: CALL_OW 268
37508: STR
37509: PUSH
37510: LD_STRING ],
37512: STR
37513: PPUSH
37514: CALL_OW 561
// end ;
37518: GO 37412
37520: POP
37521: POP
// AddToLog ( ]; ) ;
37522: LD_STRING ];
37524: PPUSH
37525: CALL_OW 561
// end ;
37529: LD_VAR 0 2
37533: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37534: LD_INT 0
37536: PPUSH
37537: PPUSH
37538: PPUSH
37539: PPUSH
37540: PPUSH
// if not area or not rate or not max then
37541: LD_VAR 0 1
37545: NOT
37546: IFTRUE 37555
37548: PUSH
37549: LD_VAR 0 2
37553: NOT
37554: OR
37555: IFTRUE 37564
37557: PUSH
37558: LD_VAR 0 4
37562: NOT
37563: OR
37564: IFFALSE 37568
// exit ;
37566: GO 37757
// while 1 do
37568: LD_INT 1
37570: IFFALSE 37757
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37572: LD_ADDR_VAR 0 9
37576: PUSH
37577: LD_VAR 0 1
37581: PPUSH
37582: LD_INT 1
37584: PPUSH
37585: CALL_OW 287
37589: PUSH
37590: LD_INT 10
37592: MUL
37593: ST_TO_ADDR
// r := rate / 10 ;
37594: LD_ADDR_VAR 0 7
37598: PUSH
37599: LD_VAR 0 2
37603: PUSH
37604: LD_INT 10
37606: DIVREAL
37607: ST_TO_ADDR
// time := 1 1$00 ;
37608: LD_ADDR_VAR 0 8
37612: PUSH
37613: LD_INT 2100
37615: ST_TO_ADDR
// if amount < min then
37616: LD_VAR 0 9
37620: PUSH
37621: LD_VAR 0 3
37625: LESS
37626: IFFALSE 37644
// r := r * 2 else
37628: LD_ADDR_VAR 0 7
37632: PUSH
37633: LD_VAR 0 7
37637: PUSH
37638: LD_INT 2
37640: MUL
37641: ST_TO_ADDR
37642: GO 37670
// if amount > max then
37644: LD_VAR 0 9
37648: PUSH
37649: LD_VAR 0 4
37653: GREATER
37654: IFFALSE 37670
// r := r / 2 ;
37656: LD_ADDR_VAR 0 7
37660: PUSH
37661: LD_VAR 0 7
37665: PUSH
37666: LD_INT 2
37668: DIVREAL
37669: ST_TO_ADDR
// time := time / r ;
37670: LD_ADDR_VAR 0 8
37674: PUSH
37675: LD_VAR 0 8
37679: PUSH
37680: LD_VAR 0 7
37684: DIVREAL
37685: ST_TO_ADDR
// if time < 0 then
37686: LD_VAR 0 8
37690: PUSH
37691: LD_INT 0
37693: LESS
37694: IFFALSE 37711
// time := time * - 1 ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_VAR 0 8
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: MUL
37710: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37711: LD_VAR 0 8
37715: PUSH
37716: LD_INT 35
37718: PPUSH
37719: LD_INT 875
37721: PPUSH
37722: CALL_OW 12
37726: PLUS
37727: PPUSH
37728: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37732: LD_INT 1
37734: PPUSH
37735: LD_INT 5
37737: PPUSH
37738: CALL_OW 12
37742: PPUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: LD_INT 1
37750: PPUSH
37751: CALL_OW 55
// end ;
37755: GO 37568
// end ;
37757: LD_VAR 0 5
37761: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37762: LD_INT 0
37764: PPUSH
37765: PPUSH
37766: PPUSH
37767: PPUSH
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
// if not turrets or not factories then
37772: LD_VAR 0 1
37776: NOT
37777: IFTRUE 37786
37779: PUSH
37780: LD_VAR 0 2
37784: NOT
37785: OR
37786: IFFALSE 37790
// exit ;
37788: GO 38097
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37790: LD_ADDR_VAR 0 10
37794: PUSH
37795: LD_INT 5
37797: PUSH
37798: LD_INT 6
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 4
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 5
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 24
37832: PUSH
37833: LD_INT 25
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 23
37842: PUSH
37843: LD_INT 27
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 42
37856: PUSH
37857: LD_INT 43
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 44
37866: PUSH
37867: LD_INT 46
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 45
37876: PUSH
37877: LD_INT 47
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: ST_TO_ADDR
// result := [ ] ;
37894: LD_ADDR_VAR 0 3
37898: PUSH
37899: EMPTY
37900: ST_TO_ADDR
// for i in turrets do
37901: LD_ADDR_VAR 0 4
37905: PUSH
37906: LD_VAR 0 1
37910: PUSH
37911: FOR_IN
37912: IFFALSE 38095
// begin nat := GetNation ( i ) ;
37914: LD_ADDR_VAR 0 7
37918: PUSH
37919: LD_VAR 0 4
37923: PPUSH
37924: CALL_OW 248
37928: ST_TO_ADDR
// weapon := 0 ;
37929: LD_ADDR_VAR 0 8
37933: PUSH
37934: LD_INT 0
37936: ST_TO_ADDR
// if not nat then
37937: LD_VAR 0 7
37941: NOT
37942: IFFALSE 37946
// continue ;
37944: GO 37911
// for j in list [ nat ] do
37946: LD_ADDR_VAR 0 5
37950: PUSH
37951: LD_VAR 0 10
37955: PUSH
37956: LD_VAR 0 7
37960: ARRAY
37961: PUSH
37962: FOR_IN
37963: IFFALSE 38004
// if GetBWeapon ( i ) = j [ 1 ] then
37965: LD_VAR 0 4
37969: PPUSH
37970: CALL_OW 269
37974: PUSH
37975: LD_VAR 0 5
37979: PUSH
37980: LD_INT 1
37982: ARRAY
37983: EQUAL
37984: IFFALSE 38002
// begin weapon := j [ 2 ] ;
37986: LD_ADDR_VAR 0 8
37990: PUSH
37991: LD_VAR 0 5
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: ST_TO_ADDR
// break ;
38000: GO 38004
// end ;
38002: GO 37962
38004: POP
38005: POP
// if not weapon then
38006: LD_VAR 0 8
38010: NOT
38011: IFFALSE 38015
// continue ;
38013: GO 37911
// for k in factories do
38015: LD_ADDR_VAR 0 6
38019: PUSH
38020: LD_VAR 0 2
38024: PUSH
38025: FOR_IN
38026: IFFALSE 38091
// begin weapons := AvailableWeaponList ( k ) ;
38028: LD_ADDR_VAR 0 9
38032: PUSH
38033: LD_VAR 0 6
38037: PPUSH
38038: CALL_OW 478
38042: ST_TO_ADDR
// if not weapons then
38043: LD_VAR 0 9
38047: NOT
38048: IFFALSE 38052
// continue ;
38050: GO 38025
// if weapon in weapons then
38052: LD_VAR 0 8
38056: PUSH
38057: LD_VAR 0 9
38061: IN
38062: IFFALSE 38089
// begin result := [ i , weapon ] ;
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_VAR 0 4
38073: PUSH
38074: LD_VAR 0 8
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: ST_TO_ADDR
// exit ;
38083: POP
38084: POP
38085: POP
38086: POP
38087: GO 38097
// end ; end ;
38089: GO 38025
38091: POP
38092: POP
// end ;
38093: GO 37911
38095: POP
38096: POP
// end ;
38097: LD_VAR 0 3
38101: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38102: LD_INT 0
38104: PPUSH
// if not side or side > 8 then
38105: LD_VAR 0 3
38109: NOT
38110: IFTRUE 38122
38112: PUSH
38113: LD_VAR 0 3
38117: PUSH
38118: LD_INT 8
38120: GREATER
38121: OR
38122: IFFALSE 38126
// exit ;
38124: GO 38185
// if not range then
38126: LD_VAR 0 4
38130: NOT
38131: IFFALSE 38142
// range := - 12 ;
38133: LD_ADDR_VAR 0 4
38137: PUSH
38138: LD_INT 12
38140: NEG
38141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38142: LD_VAR 0 1
38146: PPUSH
38147: LD_VAR 0 2
38151: PPUSH
38152: LD_VAR 0 3
38156: PPUSH
38157: LD_VAR 0 4
38161: PPUSH
38162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38166: LD_VAR 0 1
38170: PPUSH
38171: LD_VAR 0 2
38175: PPUSH
38176: LD_VAR 0 3
38180: PPUSH
38181: CALL_OW 331
// end ;
38185: LD_VAR 0 5
38189: RET
// export function Video ( mode ) ; begin
38190: LD_INT 0
38192: PPUSH
// ingame_video = mode ;
38193: LD_ADDR_OWVAR 52
38197: PUSH
38198: LD_VAR 0 1
38202: ST_TO_ADDR
// interface_hidden = mode ;
38203: LD_ADDR_OWVAR 54
38207: PUSH
38208: LD_VAR 0 1
38212: ST_TO_ADDR
// end ;
38213: LD_VAR 0 2
38217: RET
// export function Join ( array , element ) ; begin
38218: LD_INT 0
38220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_VAR 0 1
38230: PPUSH
38231: LD_VAR 0 1
38235: PUSH
38236: LD_INT 1
38238: PLUS
38239: PPUSH
38240: LD_VAR 0 2
38244: PPUSH
38245: CALL_OW 1
38249: ST_TO_ADDR
// end ;
38250: LD_VAR 0 3
38254: RET
// export function JoinUnion ( array , element ) ; begin
38255: LD_INT 0
38257: PPUSH
// result := array union element ;
38258: LD_ADDR_VAR 0 3
38262: PUSH
38263: LD_VAR 0 1
38267: PUSH
38268: LD_VAR 0 2
38272: UNION
38273: ST_TO_ADDR
// end ;
38274: LD_VAR 0 3
38278: RET
// export function GetBehemoths ( side ) ; begin
38279: LD_INT 0
38281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38282: LD_ADDR_VAR 0 2
38286: PUSH
38287: LD_INT 22
38289: PUSH
38290: LD_VAR 0 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 31
38301: PUSH
38302: LD_INT 25
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PPUSH
38313: CALL_OW 69
38317: ST_TO_ADDR
// end ;
38318: LD_VAR 0 2
38322: RET
// export function Shuffle ( array ) ; var i , index ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
38327: PPUSH
// result := [ ] ;
38328: LD_ADDR_VAR 0 2
38332: PUSH
38333: EMPTY
38334: ST_TO_ADDR
// if not array then
38335: LD_VAR 0 1
38339: NOT
38340: IFFALSE 38344
// exit ;
38342: GO 38443
// Randomize ;
38344: CALL_OW 10
// for i = array downto 1 do
38348: LD_ADDR_VAR 0 3
38352: PUSH
38353: DOUBLE
38354: LD_VAR 0 1
38358: INC
38359: ST_TO_ADDR
38360: LD_INT 1
38362: PUSH
38363: FOR_DOWNTO
38364: IFFALSE 38441
// begin index := rand ( 1 , array ) ;
38366: LD_ADDR_VAR 0 4
38370: PUSH
38371: LD_INT 1
38373: PPUSH
38374: LD_VAR 0 1
38378: PPUSH
38379: CALL_OW 12
38383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38384: LD_ADDR_VAR 0 2
38388: PUSH
38389: LD_VAR 0 2
38393: PPUSH
38394: LD_VAR 0 2
38398: PUSH
38399: LD_INT 1
38401: PLUS
38402: PPUSH
38403: LD_VAR 0 1
38407: PUSH
38408: LD_VAR 0 4
38412: ARRAY
38413: PPUSH
38414: CALL_OW 2
38418: ST_TO_ADDR
// array := Delete ( array , index ) ;
38419: LD_ADDR_VAR 0 1
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: LD_VAR 0 4
38433: PPUSH
38434: CALL_OW 3
38438: ST_TO_ADDR
// end ;
38439: GO 38363
38441: POP
38442: POP
// end ;
38443: LD_VAR 0 2
38447: RET
// export function GetBaseMaterials ( base ) ; begin
38448: LD_INT 0
38450: PPUSH
// result := [ 0 , 0 , 0 ] ;
38451: LD_ADDR_VAR 0 2
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
// if not base then
38470: LD_VAR 0 1
38474: NOT
38475: IFFALSE 38479
// exit ;
38477: GO 38528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38479: LD_ADDR_VAR 0 2
38483: PUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: LD_INT 1
38491: PPUSH
38492: CALL_OW 275
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: LD_INT 2
38504: PPUSH
38505: CALL_OW 275
38509: PUSH
38510: LD_VAR 0 1
38514: PPUSH
38515: LD_INT 3
38517: PPUSH
38518: CALL_OW 275
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// end ;
38528: LD_VAR 0 2
38532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38533: LD_INT 0
38535: PPUSH
38536: PPUSH
// result := array ;
38537: LD_ADDR_VAR 0 3
38541: PUSH
38542: LD_VAR 0 1
38546: ST_TO_ADDR
// if size >= result then
38547: LD_VAR 0 2
38551: PUSH
38552: LD_VAR 0 3
38556: GREATEREQUAL
38557: IFFALSE 38561
// exit ;
38559: GO 38611
// if size then
38561: LD_VAR 0 2
38565: IFFALSE 38611
// for i := array downto size do
38567: LD_ADDR_VAR 0 4
38571: PUSH
38572: DOUBLE
38573: LD_VAR 0 1
38577: INC
38578: ST_TO_ADDR
38579: LD_VAR 0 2
38583: PUSH
38584: FOR_DOWNTO
38585: IFFALSE 38609
// result := Delete ( result , result ) ;
38587: LD_ADDR_VAR 0 3
38591: PUSH
38592: LD_VAR 0 3
38596: PPUSH
38597: LD_VAR 0 3
38601: PPUSH
38602: CALL_OW 3
38606: ST_TO_ADDR
38607: GO 38584
38609: POP
38610: POP
// end ;
38611: LD_VAR 0 3
38615: RET
// export function ComExit ( unit ) ; var tmp ; begin
38616: LD_INT 0
38618: PPUSH
38619: PPUSH
// if not IsInUnit ( unit ) then
38620: LD_VAR 0 1
38624: PPUSH
38625: CALL_OW 310
38629: NOT
38630: IFFALSE 38634
// exit ;
38632: GO 38694
// tmp := IsInUnit ( unit ) ;
38634: LD_ADDR_VAR 0 3
38638: PUSH
38639: LD_VAR 0 1
38643: PPUSH
38644: CALL_OW 310
38648: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38649: LD_VAR 0 3
38653: PPUSH
38654: CALL_OW 247
38658: PUSH
38659: LD_INT 2
38661: EQUAL
38662: IFFALSE 38675
// ComExitVehicle ( unit ) else
38664: LD_VAR 0 1
38668: PPUSH
38669: CALL_OW 121
38673: GO 38684
// ComExitBuilding ( unit ) ;
38675: LD_VAR 0 1
38679: PPUSH
38680: CALL_OW 122
// result := tmp ;
38684: LD_ADDR_VAR 0 2
38688: PUSH
38689: LD_VAR 0 3
38693: ST_TO_ADDR
// end ;
38694: LD_VAR 0 2
38698: RET
// export function ComExitAll ( units ) ; var i ; begin
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
// if not units then
38703: LD_VAR 0 1
38707: NOT
38708: IFFALSE 38712
// exit ;
38710: GO 38738
// for i in units do
38712: LD_ADDR_VAR 0 3
38716: PUSH
38717: LD_VAR 0 1
38721: PUSH
38722: FOR_IN
38723: IFFALSE 38736
// ComExit ( i ) ;
38725: LD_VAR 0 3
38729: PPUSH
38730: CALL 38616 0 1
38734: GO 38722
38736: POP
38737: POP
// end ;
38738: LD_VAR 0 2
38742: RET
// export function ResetHc ; begin
38743: LD_INT 0
38745: PPUSH
// InitHc ;
38746: CALL_OW 19
// hc_importance := 0 ;
38750: LD_ADDR_OWVAR 32
38754: PUSH
38755: LD_INT 0
38757: ST_TO_ADDR
// end ;
38758: LD_VAR 0 1
38762: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38763: LD_INT 0
38765: PPUSH
38766: PPUSH
38767: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38768: LD_ADDR_VAR 0 6
38772: PUSH
38773: LD_VAR 0 1
38777: PUSH
38778: LD_VAR 0 3
38782: PLUS
38783: PUSH
38784: LD_INT 2
38786: DIV
38787: ST_TO_ADDR
// if _x < 0 then
38788: LD_VAR 0 6
38792: PUSH
38793: LD_INT 0
38795: LESS
38796: IFFALSE 38813
// _x := _x * - 1 ;
38798: LD_ADDR_VAR 0 6
38802: PUSH
38803: LD_VAR 0 6
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: MUL
38812: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38813: LD_ADDR_VAR 0 7
38817: PUSH
38818: LD_VAR 0 2
38822: PUSH
38823: LD_VAR 0 4
38827: PLUS
38828: PUSH
38829: LD_INT 2
38831: DIV
38832: ST_TO_ADDR
// if _y < 0 then
38833: LD_VAR 0 7
38837: PUSH
38838: LD_INT 0
38840: LESS
38841: IFFALSE 38858
// _y := _y * - 1 ;
38843: LD_ADDR_VAR 0 7
38847: PUSH
38848: LD_VAR 0 7
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: MUL
38857: ST_TO_ADDR
// result := [ _x , _y ] ;
38858: LD_ADDR_VAR 0 5
38862: PUSH
38863: LD_VAR 0 6
38867: PUSH
38868: LD_VAR 0 7
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// end ;
38877: LD_VAR 0 5
38881: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38882: LD_INT 0
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
// task := GetTaskList ( unit ) ;
38888: LD_ADDR_VAR 0 7
38892: PUSH
38893: LD_VAR 0 1
38897: PPUSH
38898: CALL_OW 437
38902: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38903: LD_VAR 0 7
38907: NOT
38908: IFFALSE 38927
38910: PUSH
38911: LD_VAR 0 1
38915: PPUSH
38916: LD_VAR 0 2
38920: PPUSH
38921: CALL_OW 308
38925: NOT
38926: AND
38927: IFFALSE 38931
// exit ;
38929: GO 39049
// if IsInArea ( unit , area ) then
38931: LD_VAR 0 1
38935: PPUSH
38936: LD_VAR 0 2
38940: PPUSH
38941: CALL_OW 308
38945: IFFALSE 38963
// begin ComMoveToArea ( unit , goAway ) ;
38947: LD_VAR 0 1
38951: PPUSH
38952: LD_VAR 0 3
38956: PPUSH
38957: CALL_OW 113
// exit ;
38961: GO 39049
// end ; if task [ 1 ] [ 1 ] <> M then
38963: LD_VAR 0 7
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: PUSH
38976: LD_STRING M
38978: NONEQUAL
38979: IFFALSE 38983
// exit ;
38981: GO 39049
// x := task [ 1 ] [ 2 ] ;
38983: LD_ADDR_VAR 0 5
38987: PUSH
38988: LD_VAR 0 7
38992: PUSH
38993: LD_INT 1
38995: ARRAY
38996: PUSH
38997: LD_INT 2
38999: ARRAY
39000: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39001: LD_ADDR_VAR 0 6
39005: PUSH
39006: LD_VAR 0 7
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: PUSH
39015: LD_INT 3
39017: ARRAY
39018: ST_TO_ADDR
// if InArea ( x , y , area ) then
39019: LD_VAR 0 5
39023: PPUSH
39024: LD_VAR 0 6
39028: PPUSH
39029: LD_VAR 0 2
39033: PPUSH
39034: CALL_OW 309
39038: IFFALSE 39049
// ComStop ( unit ) ;
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 141
// end ;
39049: LD_VAR 0 4
39053: RET
// export function Abs ( value ) ; begin
39054: LD_INT 0
39056: PPUSH
// result := value ;
39057: LD_ADDR_VAR 0 2
39061: PUSH
39062: LD_VAR 0 1
39066: ST_TO_ADDR
// if value < 0 then
39067: LD_VAR 0 1
39071: PUSH
39072: LD_INT 0
39074: LESS
39075: IFFALSE 39092
// result := value * - 1 ;
39077: LD_ADDR_VAR 0 2
39081: PUSH
39082: LD_VAR 0 1
39086: PUSH
39087: LD_INT 1
39089: NEG
39090: MUL
39091: ST_TO_ADDR
// end ;
39092: LD_VAR 0 2
39096: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39097: LD_INT 0
39099: PPUSH
39100: PPUSH
39101: PPUSH
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
// if not unit or not building then
39107: LD_VAR 0 1
39111: NOT
39112: IFTRUE 39121
39114: PUSH
39115: LD_VAR 0 2
39119: NOT
39120: OR
39121: IFFALSE 39125
// exit ;
39123: GO 39353
// x := GetX ( building ) ;
39125: LD_ADDR_VAR 0 4
39129: PUSH
39130: LD_VAR 0 2
39134: PPUSH
39135: CALL_OW 250
39139: ST_TO_ADDR
// y := GetY ( building ) ;
39140: LD_ADDR_VAR 0 6
39144: PUSH
39145: LD_VAR 0 2
39149: PPUSH
39150: CALL_OW 251
39154: ST_TO_ADDR
// d := GetDir ( building ) ;
39155: LD_ADDR_VAR 0 8
39159: PUSH
39160: LD_VAR 0 2
39164: PPUSH
39165: CALL_OW 254
39169: ST_TO_ADDR
// r := 4 ;
39170: LD_ADDR_VAR 0 9
39174: PUSH
39175: LD_INT 4
39177: ST_TO_ADDR
// for i := 1 to 5 do
39178: LD_ADDR_VAR 0 10
39182: PUSH
39183: DOUBLE
39184: LD_INT 1
39186: DEC
39187: ST_TO_ADDR
39188: LD_INT 5
39190: PUSH
39191: FOR_TO
39192: IFFALSE 39351
// begin _x := ShiftX ( x , d , r + i ) ;
39194: LD_ADDR_VAR 0 5
39198: PUSH
39199: LD_VAR 0 4
39203: PPUSH
39204: LD_VAR 0 8
39208: PPUSH
39209: LD_VAR 0 9
39213: PUSH
39214: LD_VAR 0 10
39218: PLUS
39219: PPUSH
39220: CALL_OW 272
39224: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39225: LD_ADDR_VAR 0 7
39229: PUSH
39230: LD_VAR 0 6
39234: PPUSH
39235: LD_VAR 0 8
39239: PPUSH
39240: LD_VAR 0 9
39244: PUSH
39245: LD_VAR 0 10
39249: PLUS
39250: PPUSH
39251: CALL_OW 273
39255: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39256: LD_VAR 0 5
39260: PPUSH
39261: LD_VAR 0 7
39265: PPUSH
39266: CALL_OW 488
39270: IFFALSE 39305
39272: PUSH
39273: LD_VAR 0 5
39277: PPUSH
39278: LD_VAR 0 7
39282: PPUSH
39283: CALL_OW 428
39287: PPUSH
39288: CALL_OW 247
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: IN
39303: NOT
39304: AND
39305: IFFALSE 39349
// begin ComMoveXY ( unit , _x , _y ) ;
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_VAR 0 5
39316: PPUSH
39317: LD_VAR 0 7
39321: PPUSH
39322: CALL_OW 111
// result := [ _x , _y ] ;
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_VAR 0 5
39335: PUSH
39336: LD_VAR 0 7
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: ST_TO_ADDR
// exit ;
39345: POP
39346: POP
39347: GO 39353
// end ; end ;
39349: GO 39191
39351: POP
39352: POP
// end ;
39353: LD_VAR 0 3
39357: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39358: LD_INT 0
39360: PPUSH
39361: PPUSH
39362: PPUSH
// result := 0 ;
39363: LD_ADDR_VAR 0 3
39367: PUSH
39368: LD_INT 0
39370: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39371: LD_VAR 0 1
39375: PUSH
39376: LD_INT 0
39378: LESS
39379: IFTRUE 39391
39381: PUSH
39382: LD_VAR 0 1
39386: PUSH
39387: LD_INT 8
39389: GREATER
39390: OR
39391: IFTRUE 39403
39393: PUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_INT 0
39401: LESS
39402: OR
39403: IFTRUE 39415
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: LD_INT 8
39413: GREATER
39414: OR
39415: IFFALSE 39419
// exit ;
39417: GO 39494
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39419: LD_ADDR_VAR 0 4
39423: PUSH
39424: LD_INT 22
39426: PUSH
39427: LD_VAR 0 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PPUSH
39436: CALL_OW 69
39440: PUSH
39441: FOR_IN
39442: IFFALSE 39492
// begin un := UnitShoot ( i ) ;
39444: LD_ADDR_VAR 0 5
39448: PUSH
39449: LD_VAR 0 4
39453: PPUSH
39454: CALL_OW 504
39458: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39459: LD_VAR 0 5
39463: PPUSH
39464: CALL_OW 255
39468: PUSH
39469: LD_VAR 0 1
39473: EQUAL
39474: IFFALSE 39490
// begin result := un ;
39476: LD_ADDR_VAR 0 3
39480: PUSH
39481: LD_VAR 0 5
39485: ST_TO_ADDR
// exit ;
39486: POP
39487: POP
39488: GO 39494
// end ; end ;
39490: GO 39441
39492: POP
39493: POP
// end ;
39494: LD_VAR 0 3
39498: RET
// export function GetCargoBay ( units ) ; begin
39499: LD_INT 0
39501: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39502: LD_ADDR_VAR 0 2
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 34
39517: PUSH
39518: LD_INT 12
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 34
39527: PUSH
39528: LD_INT 51
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 34
39537: PUSH
39538: LD_INT 32
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 34
39547: PUSH
39548: LD_INT 89
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: PPUSH
39562: CALL_OW 72
39566: ST_TO_ADDR
// end ;
39567: LD_VAR 0 2
39571: RET
// export function Negate ( value ) ; begin
39572: LD_INT 0
39574: PPUSH
// result := not value ;
39575: LD_ADDR_VAR 0 2
39579: PUSH
39580: LD_VAR 0 1
39584: NOT
39585: ST_TO_ADDR
// end ;
39586: LD_VAR 0 2
39590: RET
// export function Inc ( value ) ; begin
39591: LD_INT 0
39593: PPUSH
// result := value + 1 ;
39594: LD_ADDR_VAR 0 2
39598: PUSH
39599: LD_VAR 0 1
39603: PUSH
39604: LD_INT 1
39606: PLUS
39607: ST_TO_ADDR
// end ;
39608: LD_VAR 0 2
39612: RET
// export function Dec ( value ) ; begin
39613: LD_INT 0
39615: PPUSH
// result := value - 1 ;
39616: LD_ADDR_VAR 0 2
39620: PUSH
39621: LD_VAR 0 1
39625: PUSH
39626: LD_INT 1
39628: MINUS
39629: ST_TO_ADDR
// end ;
39630: LD_VAR 0 2
39634: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39635: LD_INT 0
39637: PPUSH
39638: PPUSH
39639: PPUSH
39640: PPUSH
39641: PPUSH
39642: PPUSH
39643: PPUSH
39644: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39645: LD_VAR 0 1
39649: PPUSH
39650: LD_VAR 0 2
39654: PPUSH
39655: CALL_OW 488
39659: NOT
39660: IFTRUE 39679
39662: PUSH
39663: LD_VAR 0 3
39667: PPUSH
39668: LD_VAR 0 4
39672: PPUSH
39673: CALL_OW 488
39677: NOT
39678: OR
39679: IFFALSE 39692
// begin result := - 1 ;
39681: LD_ADDR_VAR 0 5
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: ST_TO_ADDR
// exit ;
39690: GO 39927
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39692: LD_ADDR_VAR 0 12
39696: PUSH
39697: LD_VAR 0 1
39701: PPUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: LD_VAR 0 3
39711: PPUSH
39712: LD_VAR 0 4
39716: PPUSH
39717: CALL 38763 0 4
39721: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39722: LD_ADDR_VAR 0 11
39726: PUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: LD_VAR 0 2
39736: PPUSH
39737: LD_VAR 0 12
39741: PUSH
39742: LD_INT 1
39744: ARRAY
39745: PPUSH
39746: LD_VAR 0 12
39750: PUSH
39751: LD_INT 2
39753: ARRAY
39754: PPUSH
39755: CALL_OW 298
39759: ST_TO_ADDR
// distance := 9999 ;
39760: LD_ADDR_VAR 0 10
39764: PUSH
39765: LD_INT 9999
39767: ST_TO_ADDR
// for i := 0 to 5 do
39768: LD_ADDR_VAR 0 6
39772: PUSH
39773: DOUBLE
39774: LD_INT 0
39776: DEC
39777: ST_TO_ADDR
39778: LD_INT 5
39780: PUSH
39781: FOR_TO
39782: IFFALSE 39925
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39784: LD_ADDR_VAR 0 7
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: LD_VAR 0 6
39798: PPUSH
39799: LD_VAR 0 11
39803: PPUSH
39804: CALL_OW 272
39808: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39809: LD_ADDR_VAR 0 8
39813: PUSH
39814: LD_VAR 0 2
39818: PPUSH
39819: LD_VAR 0 6
39823: PPUSH
39824: LD_VAR 0 11
39828: PPUSH
39829: CALL_OW 273
39833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39834: LD_VAR 0 7
39838: PPUSH
39839: LD_VAR 0 8
39843: PPUSH
39844: CALL_OW 488
39848: NOT
39849: IFFALSE 39853
// continue ;
39851: GO 39781
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39853: LD_ADDR_VAR 0 9
39857: PUSH
39858: LD_VAR 0 12
39862: PUSH
39863: LD_INT 1
39865: ARRAY
39866: PPUSH
39867: LD_VAR 0 12
39871: PUSH
39872: LD_INT 2
39874: ARRAY
39875: PPUSH
39876: LD_VAR 0 7
39880: PPUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: CALL_OW 298
39890: ST_TO_ADDR
// if tmp < distance then
39891: LD_VAR 0 9
39895: PUSH
39896: LD_VAR 0 10
39900: LESS
39901: IFFALSE 39923
// begin result := i ;
39903: LD_ADDR_VAR 0 5
39907: PUSH
39908: LD_VAR 0 6
39912: ST_TO_ADDR
// distance := tmp ;
39913: LD_ADDR_VAR 0 10
39917: PUSH
39918: LD_VAR 0 9
39922: ST_TO_ADDR
// end ; end ;
39923: GO 39781
39925: POP
39926: POP
// end ;
39927: LD_VAR 0 5
39931: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39932: LD_INT 0
39934: PPUSH
39935: PPUSH
// if not driver or not IsInUnit ( driver ) then
39936: LD_VAR 0 1
39940: NOT
39941: IFTRUE 39955
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 310
39953: NOT
39954: OR
39955: IFFALSE 39959
// exit ;
39957: GO 40049
// vehicle := IsInUnit ( driver ) ;
39959: LD_ADDR_VAR 0 3
39963: PUSH
39964: LD_VAR 0 1
39968: PPUSH
39969: CALL_OW 310
39973: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39974: LD_VAR 0 1
39978: PPUSH
39979: LD_STRING \
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: PUSH
40009: LD_STRING E
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_VAR 0 3
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PPUSH
40045: CALL_OW 446
// end ;
40049: LD_VAR 0 2
40053: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40054: LD_INT 0
40056: PPUSH
40057: PPUSH
// if not driver or not IsInUnit ( driver ) then
40058: LD_VAR 0 1
40062: NOT
40063: IFTRUE 40077
40065: PUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: CALL_OW 310
40075: NOT
40076: OR
40077: IFFALSE 40081
// exit ;
40079: GO 40171
// vehicle := IsInUnit ( driver ) ;
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 310
40095: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40096: LD_VAR 0 1
40100: PPUSH
40101: LD_STRING \
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: PUSH
40131: LD_STRING E
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_VAR 0 3
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PPUSH
40167: CALL_OW 447
// end ;
40171: LD_VAR 0 2
40175: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40176: LD_INT 0
40178: PPUSH
40179: PPUSH
40180: PPUSH
// tmp := [ ] ;
40181: LD_ADDR_VAR 0 5
40185: PUSH
40186: EMPTY
40187: ST_TO_ADDR
// for i in units do
40188: LD_ADDR_VAR 0 4
40192: PUSH
40193: LD_VAR 0 1
40197: PUSH
40198: FOR_IN
40199: IFFALSE 40237
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_VAR 0 5
40210: PPUSH
40211: LD_VAR 0 5
40215: PUSH
40216: LD_INT 1
40218: PLUS
40219: PPUSH
40220: LD_VAR 0 4
40224: PPUSH
40225: CALL_OW 256
40229: PPUSH
40230: CALL_OW 2
40234: ST_TO_ADDR
40235: GO 40198
40237: POP
40238: POP
// if not tmp then
40239: LD_VAR 0 5
40243: NOT
40244: IFFALSE 40248
// exit ;
40246: GO 40296
// if asc then
40248: LD_VAR 0 2
40252: IFFALSE 40276
// result := SortListByListAsc ( units , tmp ) else
40254: LD_ADDR_VAR 0 3
40258: PUSH
40259: LD_VAR 0 1
40263: PPUSH
40264: LD_VAR 0 5
40268: PPUSH
40269: CALL_OW 76
40273: ST_TO_ADDR
40274: GO 40296
// result := SortListByListDesc ( units , tmp ) ;
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: LD_VAR 0 5
40290: PPUSH
40291: CALL_OW 77
40295: ST_TO_ADDR
// end ;
40296: LD_VAR 0 3
40300: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40301: LD_INT 0
40303: PPUSH
40304: PPUSH
// task := GetTaskList ( mech ) ;
40305: LD_ADDR_VAR 0 4
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 437
40319: ST_TO_ADDR
// if not task then
40320: LD_VAR 0 4
40324: NOT
40325: IFFALSE 40329
// exit ;
40327: GO 40373
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40329: LD_ADDR_VAR 0 3
40333: PUSH
40334: LD_VAR 0 4
40338: PUSH
40339: LD_INT 1
40341: ARRAY
40342: PUSH
40343: LD_INT 1
40345: ARRAY
40346: PUSH
40347: LD_STRING r
40349: EQUAL
40350: IFFALSE 40372
40352: PUSH
40353: LD_VAR 0 4
40357: PUSH
40358: LD_INT 1
40360: ARRAY
40361: PUSH
40362: LD_INT 4
40364: ARRAY
40365: PUSH
40366: LD_VAR 0 2
40370: EQUAL
40371: AND
40372: ST_TO_ADDR
// end ;
40373: LD_VAR 0 3
40377: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40378: LD_INT 0
40380: PPUSH
// SetDir ( unit , d ) ;
40381: LD_VAR 0 1
40385: PPUSH
40386: LD_VAR 0 4
40390: PPUSH
40391: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
40395: LD_ADDR_VAR 0 6
40399: PUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: LD_VAR 0 2
40409: PPUSH
40410: LD_VAR 0 3
40414: PPUSH
40415: LD_VAR 0 5
40419: PPUSH
40420: CALL_OW 48
40424: ST_TO_ADDR
// end ;
40425: LD_VAR 0 6
40429: RET
// export function ToNaturalNumber ( number ) ; begin
40430: LD_INT 0
40432: PPUSH
// result := number div 1 ;
40433: LD_ADDR_VAR 0 2
40437: PUSH
40438: LD_VAR 0 1
40442: PUSH
40443: LD_INT 1
40445: DIV
40446: ST_TO_ADDR
// if number < 0 then
40447: LD_VAR 0 1
40451: PUSH
40452: LD_INT 0
40454: LESS
40455: IFFALSE 40465
// result := 0 ;
40457: LD_ADDR_VAR 0 2
40461: PUSH
40462: LD_INT 0
40464: ST_TO_ADDR
// end ;
40465: LD_VAR 0 2
40469: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
40470: LD_INT 0
40472: PPUSH
40473: PPUSH
40474: PPUSH
// if not buildings then
40475: LD_VAR 0 1
40479: NOT
40480: IFFALSE 40484
// exit ;
40482: GO 40599
// tmp := [ ] ;
40484: LD_ADDR_VAR 0 5
40488: PUSH
40489: EMPTY
40490: ST_TO_ADDR
// for b in buildings do
40491: LD_ADDR_VAR 0 4
40495: PUSH
40496: LD_VAR 0 1
40500: PUSH
40501: FOR_IN
40502: IFFALSE 40540
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
40504: LD_ADDR_VAR 0 5
40508: PUSH
40509: LD_VAR 0 5
40513: PPUSH
40514: LD_VAR 0 5
40518: PUSH
40519: LD_INT 1
40521: PLUS
40522: PPUSH
40523: LD_VAR 0 4
40527: PPUSH
40528: CALL_OW 266
40532: PPUSH
40533: CALL_OW 1
40537: ST_TO_ADDR
40538: GO 40501
40540: POP
40541: POP
// if not tmp then
40542: LD_VAR 0 5
40546: NOT
40547: IFFALSE 40551
// exit ;
40549: GO 40599
// if asc then
40551: LD_VAR 0 2
40555: IFFALSE 40579
// result := SortListByListAsc ( buildings , tmp ) else
40557: LD_ADDR_VAR 0 3
40561: PUSH
40562: LD_VAR 0 1
40566: PPUSH
40567: LD_VAR 0 5
40571: PPUSH
40572: CALL_OW 76
40576: ST_TO_ADDR
40577: GO 40599
// result := SortListByListDesc ( buildings , tmp ) ;
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_VAR 0 1
40588: PPUSH
40589: LD_VAR 0 5
40593: PPUSH
40594: CALL_OW 77
40598: ST_TO_ADDR
// end ;
40599: LD_VAR 0 3
40603: RET
// export function SortByClass ( units , class ) ; var un ; begin
40604: LD_INT 0
40606: PPUSH
40607: PPUSH
// if not units or not class then
40608: LD_VAR 0 1
40612: NOT
40613: IFTRUE 40622
40615: PUSH
40616: LD_VAR 0 2
40620: NOT
40621: OR
40622: IFFALSE 40626
// exit ;
40624: GO 40721
// result := [ ] ;
40626: LD_ADDR_VAR 0 3
40630: PUSH
40631: EMPTY
40632: ST_TO_ADDR
// for un in units do
40633: LD_ADDR_VAR 0 4
40637: PUSH
40638: LD_VAR 0 1
40642: PUSH
40643: FOR_IN
40644: IFFALSE 40719
// if GetClass ( un ) = class then
40646: LD_VAR 0 4
40650: PPUSH
40651: CALL_OW 257
40655: PUSH
40656: LD_VAR 0 2
40660: EQUAL
40661: IFFALSE 40688
// result := Insert ( result , 1 , un ) else
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_VAR 0 3
40672: PPUSH
40673: LD_INT 1
40675: PPUSH
40676: LD_VAR 0 4
40680: PPUSH
40681: CALL_OW 2
40685: ST_TO_ADDR
40686: GO 40717
// result := Replace ( result , result + 1 , un ) ;
40688: LD_ADDR_VAR 0 3
40692: PUSH
40693: LD_VAR 0 3
40697: PPUSH
40698: LD_VAR 0 3
40702: PUSH
40703: LD_INT 1
40705: PLUS
40706: PPUSH
40707: LD_VAR 0 4
40711: PPUSH
40712: CALL_OW 1
40716: ST_TO_ADDR
40717: GO 40643
40719: POP
40720: POP
// end ;
40721: LD_VAR 0 3
40725: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40726: LD_INT 0
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
// result := [ ] ;
40735: LD_ADDR_VAR 0 4
40739: PUSH
40740: EMPTY
40741: ST_TO_ADDR
// if x - r < 0 then
40742: LD_VAR 0 1
40746: PUSH
40747: LD_VAR 0 3
40751: MINUS
40752: PUSH
40753: LD_INT 0
40755: LESS
40756: IFFALSE 40768
// min_x := 0 else
40758: LD_ADDR_VAR 0 8
40762: PUSH
40763: LD_INT 0
40765: ST_TO_ADDR
40766: GO 40784
// min_x := x - r ;
40768: LD_ADDR_VAR 0 8
40772: PUSH
40773: LD_VAR 0 1
40777: PUSH
40778: LD_VAR 0 3
40782: MINUS
40783: ST_TO_ADDR
// if y - r < 0 then
40784: LD_VAR 0 2
40788: PUSH
40789: LD_VAR 0 3
40793: MINUS
40794: PUSH
40795: LD_INT 0
40797: LESS
40798: IFFALSE 40810
// min_y := 0 else
40800: LD_ADDR_VAR 0 7
40804: PUSH
40805: LD_INT 0
40807: ST_TO_ADDR
40808: GO 40826
// min_y := y - r ;
40810: LD_ADDR_VAR 0 7
40814: PUSH
40815: LD_VAR 0 2
40819: PUSH
40820: LD_VAR 0 3
40824: MINUS
40825: ST_TO_ADDR
// max_x := x + r ;
40826: LD_ADDR_VAR 0 9
40830: PUSH
40831: LD_VAR 0 1
40835: PUSH
40836: LD_VAR 0 3
40840: PLUS
40841: ST_TO_ADDR
// max_y := y + r ;
40842: LD_ADDR_VAR 0 10
40846: PUSH
40847: LD_VAR 0 2
40851: PUSH
40852: LD_VAR 0 3
40856: PLUS
40857: ST_TO_ADDR
// for _x = min_x to max_x do
40858: LD_ADDR_VAR 0 5
40862: PUSH
40863: DOUBLE
40864: LD_VAR 0 8
40868: DEC
40869: ST_TO_ADDR
40870: LD_VAR 0 9
40874: PUSH
40875: FOR_TO
40876: IFFALSE 40977
// for _y = min_y to max_y do
40878: LD_ADDR_VAR 0 6
40882: PUSH
40883: DOUBLE
40884: LD_VAR 0 7
40888: DEC
40889: ST_TO_ADDR
40890: LD_VAR 0 10
40894: PUSH
40895: FOR_TO
40896: IFFALSE 40973
// begin if not ValidHex ( _x , _y ) then
40898: LD_VAR 0 5
40902: PPUSH
40903: LD_VAR 0 6
40907: PPUSH
40908: CALL_OW 488
40912: NOT
40913: IFFALSE 40917
// continue ;
40915: GO 40895
// if GetResourceTypeXY ( _x , _y ) then
40917: LD_VAR 0 5
40921: PPUSH
40922: LD_VAR 0 6
40926: PPUSH
40927: CALL_OW 283
40931: IFFALSE 40971
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40933: LD_ADDR_VAR 0 4
40937: PUSH
40938: LD_VAR 0 4
40942: PPUSH
40943: LD_VAR 0 4
40947: PUSH
40948: LD_INT 1
40950: PLUS
40951: PPUSH
40952: LD_VAR 0 5
40956: PUSH
40957: LD_VAR 0 6
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PPUSH
40966: CALL_OW 1
40970: ST_TO_ADDR
// end ;
40971: GO 40895
40973: POP
40974: POP
40975: GO 40875
40977: POP
40978: POP
// end ;
40979: LD_VAR 0 4
40983: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40984: LD_INT 0
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
// if not units then
40994: LD_VAR 0 1
40998: NOT
40999: IFFALSE 41003
// exit ;
41001: GO 41535
// result := UnitFilter ( units , [ f_ok ] ) ;
41003: LD_ADDR_VAR 0 3
41007: PUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_INT 50
41015: PUSH
41016: EMPTY
41017: LIST
41018: PPUSH
41019: CALL_OW 72
41023: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41024: LD_ADDR_VAR 0 8
41028: PUSH
41029: LD_VAR 0 1
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: PPUSH
41038: CALL_OW 255
41042: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41043: LD_ADDR_VAR 0 10
41047: PUSH
41048: LD_INT 29
41050: PUSH
41051: LD_INT 91
41053: PUSH
41054: LD_INT 49
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: ST_TO_ADDR
// if not result then
41062: LD_VAR 0 3
41066: NOT
41067: IFFALSE 41071
// exit ;
41069: GO 41535
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41071: LD_ADDR_VAR 0 5
41075: PUSH
41076: LD_INT 81
41078: PUSH
41079: LD_VAR 0 8
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PPUSH
41088: CALL_OW 69
41092: ST_TO_ADDR
// for i in result do
41093: LD_ADDR_VAR 0 4
41097: PUSH
41098: LD_VAR 0 3
41102: PUSH
41103: FOR_IN
41104: IFFALSE 41533
// begin tag := GetTag ( i ) + 1 ;
41106: LD_ADDR_VAR 0 9
41110: PUSH
41111: LD_VAR 0 4
41115: PPUSH
41116: CALL_OW 110
41120: PUSH
41121: LD_INT 1
41123: PLUS
41124: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41125: LD_ADDR_VAR 0 7
41129: PUSH
41130: LD_VAR 0 4
41134: PPUSH
41135: CALL_OW 250
41139: PPUSH
41140: LD_VAR 0 4
41144: PPUSH
41145: CALL_OW 251
41149: PPUSH
41150: LD_INT 4
41152: PPUSH
41153: CALL 40726 0 3
41157: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41158: LD_VAR 0 4
41162: PPUSH
41163: CALL_OW 247
41167: PUSH
41168: LD_INT 2
41170: EQUAL
41171: IFFALSE 41183
41173: PUSH
41174: LD_VAR 0 7
41178: PUSH
41179: LD_INT 2
41181: GREATER
41182: AND
41183: IFFALSE 41203
41185: PUSH
41186: LD_VAR 0 4
41190: PPUSH
41191: CALL_OW 264
41195: PUSH
41196: LD_VAR 0 10
41200: IN
41201: NOT
41202: AND
41203: IFFALSE 41242
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41205: LD_VAR 0 4
41209: PPUSH
41210: LD_VAR 0 7
41214: PUSH
41215: LD_INT 1
41217: ARRAY
41218: PUSH
41219: LD_INT 1
41221: ARRAY
41222: PPUSH
41223: LD_VAR 0 7
41227: PUSH
41228: LD_INT 1
41230: ARRAY
41231: PUSH
41232: LD_INT 2
41234: ARRAY
41235: PPUSH
41236: CALL_OW 116
41240: GO 41531
// if path > tag then
41242: LD_VAR 0 2
41246: PUSH
41247: LD_VAR 0 9
41251: GREATER
41252: IFFALSE 41460
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41254: LD_ADDR_VAR 0 6
41258: PUSH
41259: LD_VAR 0 5
41263: PPUSH
41264: LD_INT 91
41266: PUSH
41267: LD_VAR 0 4
41271: PUSH
41272: LD_INT 8
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: PPUSH
41280: CALL_OW 72
41284: ST_TO_ADDR
// if nearEnemy then
41285: LD_VAR 0 6
41289: IFFALSE 41358
// begin if GetWeapon ( i ) = ru_time_lapser then
41291: LD_VAR 0 4
41295: PPUSH
41296: CALL_OW 264
41300: PUSH
41301: LD_INT 49
41303: EQUAL
41304: IFFALSE 41332
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41306: LD_VAR 0 4
41310: PPUSH
41311: LD_VAR 0 6
41315: PPUSH
41316: LD_VAR 0 4
41320: PPUSH
41321: CALL_OW 74
41325: PPUSH
41326: CALL_OW 112
41330: GO 41356
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41332: LD_VAR 0 4
41336: PPUSH
41337: LD_VAR 0 6
41341: PPUSH
41342: LD_VAR 0 4
41346: PPUSH
41347: CALL_OW 74
41351: PPUSH
41352: CALL 42616 0 2
// end else
41356: GO 41458
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41358: LD_VAR 0 4
41362: PPUSH
41363: LD_VAR 0 2
41367: PUSH
41368: LD_VAR 0 9
41372: ARRAY
41373: PUSH
41374: LD_INT 1
41376: ARRAY
41377: PPUSH
41378: LD_VAR 0 2
41382: PUSH
41383: LD_VAR 0 9
41387: ARRAY
41388: PUSH
41389: LD_INT 2
41391: ARRAY
41392: PPUSH
41393: CALL_OW 297
41397: PUSH
41398: LD_INT 6
41400: GREATER
41401: IFFALSE 41444
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41403: LD_VAR 0 4
41407: PPUSH
41408: LD_VAR 0 2
41412: PUSH
41413: LD_VAR 0 9
41417: ARRAY
41418: PUSH
41419: LD_INT 1
41421: ARRAY
41422: PPUSH
41423: LD_VAR 0 2
41427: PUSH
41428: LD_VAR 0 9
41432: ARRAY
41433: PUSH
41434: LD_INT 2
41436: ARRAY
41437: PPUSH
41438: CALL_OW 114
41442: GO 41458
// SetTag ( i , tag ) ;
41444: LD_VAR 0 4
41448: PPUSH
41449: LD_VAR 0 9
41453: PPUSH
41454: CALL_OW 109
// end else
41458: GO 41531
// if enemy then
41460: LD_VAR 0 5
41464: IFFALSE 41531
// begin if GetWeapon ( i ) = ru_time_lapser then
41466: LD_VAR 0 4
41470: PPUSH
41471: CALL_OW 264
41475: PUSH
41476: LD_INT 49
41478: EQUAL
41479: IFFALSE 41507
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41481: LD_VAR 0 4
41485: PPUSH
41486: LD_VAR 0 5
41490: PPUSH
41491: LD_VAR 0 4
41495: PPUSH
41496: CALL_OW 74
41500: PPUSH
41501: CALL_OW 112
41505: GO 41531
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41507: LD_VAR 0 4
41511: PPUSH
41512: LD_VAR 0 5
41516: PPUSH
41517: LD_VAR 0 4
41521: PPUSH
41522: CALL_OW 74
41526: PPUSH
41527: CALL 42616 0 2
// end ; end ;
41531: GO 41103
41533: POP
41534: POP
// end ;
41535: LD_VAR 0 3
41539: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41540: LD_INT 0
41542: PPUSH
41543: PPUSH
41544: PPUSH
// if not unit or IsInUnit ( unit ) then
41545: LD_VAR 0 1
41549: NOT
41550: IFTRUE 41563
41552: PUSH
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 310
41562: OR
41563: IFFALSE 41567
// exit ;
41565: GO 41658
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41567: LD_ADDR_VAR 0 4
41571: PUSH
41572: LD_VAR 0 1
41576: PPUSH
41577: CALL_OW 250
41581: PPUSH
41582: LD_VAR 0 2
41586: PPUSH
41587: LD_INT 1
41589: PPUSH
41590: CALL_OW 272
41594: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_VAR 0 1
41604: PPUSH
41605: CALL_OW 251
41609: PPUSH
41610: LD_VAR 0 2
41614: PPUSH
41615: LD_INT 1
41617: PPUSH
41618: CALL_OW 273
41622: ST_TO_ADDR
// if ValidHex ( x , y ) then
41623: LD_VAR 0 4
41627: PPUSH
41628: LD_VAR 0 5
41632: PPUSH
41633: CALL_OW 488
41637: IFFALSE 41658
// ComTurnXY ( unit , x , y ) ;
41639: LD_VAR 0 1
41643: PPUSH
41644: LD_VAR 0 4
41648: PPUSH
41649: LD_VAR 0 5
41653: PPUSH
41654: CALL_OW 118
// end ;
41658: LD_VAR 0 3
41662: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41663: LD_INT 0
41665: PPUSH
41666: PPUSH
// result := false ;
41667: LD_ADDR_VAR 0 3
41671: PUSH
41672: LD_INT 0
41674: ST_TO_ADDR
// if not units then
41675: LD_VAR 0 2
41679: NOT
41680: IFFALSE 41684
// exit ;
41682: GO 41729
// for i in units do
41684: LD_ADDR_VAR 0 4
41688: PUSH
41689: LD_VAR 0 2
41693: PUSH
41694: FOR_IN
41695: IFFALSE 41727
// if See ( side , i ) then
41697: LD_VAR 0 1
41701: PPUSH
41702: LD_VAR 0 4
41706: PPUSH
41707: CALL_OW 292
41711: IFFALSE 41725
// begin result := true ;
41713: LD_ADDR_VAR 0 3
41717: PUSH
41718: LD_INT 1
41720: ST_TO_ADDR
// exit ;
41721: POP
41722: POP
41723: GO 41729
// end ;
41725: GO 41694
41727: POP
41728: POP
// end ;
41729: LD_VAR 0 3
41733: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41734: LD_INT 0
41736: PPUSH
41737: PPUSH
41738: PPUSH
41739: PPUSH
// if not unit or not points then
41740: LD_VAR 0 1
41744: NOT
41745: IFTRUE 41754
41747: PUSH
41748: LD_VAR 0 2
41752: NOT
41753: OR
41754: IFFALSE 41758
// exit ;
41756: GO 41848
// dist := 99999 ;
41758: LD_ADDR_VAR 0 5
41762: PUSH
41763: LD_INT 99999
41765: ST_TO_ADDR
// for i in points do
41766: LD_ADDR_VAR 0 4
41770: PUSH
41771: LD_VAR 0 2
41775: PUSH
41776: FOR_IN
41777: IFFALSE 41846
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_VAR 0 1
41788: PPUSH
41789: LD_VAR 0 4
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: LD_VAR 0 4
41802: PUSH
41803: LD_INT 2
41805: ARRAY
41806: PPUSH
41807: CALL_OW 297
41811: ST_TO_ADDR
// if tmpDist < dist then
41812: LD_VAR 0 6
41816: PUSH
41817: LD_VAR 0 5
41821: LESS
41822: IFFALSE 41844
// begin result := i ;
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_VAR 0 4
41833: ST_TO_ADDR
// dist := tmpDist ;
41834: LD_ADDR_VAR 0 5
41838: PUSH
41839: LD_VAR 0 6
41843: ST_TO_ADDR
// end ; end ;
41844: GO 41776
41846: POP
41847: POP
// end ;
41848: LD_VAR 0 3
41852: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41853: LD_INT 0
41855: PPUSH
// uc_side := side ;
41856: LD_ADDR_OWVAR 20
41860: PUSH
41861: LD_VAR 0 1
41865: ST_TO_ADDR
// uc_nation := 3 ;
41866: LD_ADDR_OWVAR 21
41870: PUSH
41871: LD_INT 3
41873: ST_TO_ADDR
// vc_chassis := 25 ;
41874: LD_ADDR_OWVAR 37
41878: PUSH
41879: LD_INT 25
41881: ST_TO_ADDR
// vc_engine := engine_siberite ;
41882: LD_ADDR_OWVAR 39
41886: PUSH
41887: LD_INT 3
41889: ST_TO_ADDR
// vc_control := control_computer ;
41890: LD_ADDR_OWVAR 38
41894: PUSH
41895: LD_INT 3
41897: ST_TO_ADDR
// vc_weapon := 59 ;
41898: LD_ADDR_OWVAR 40
41902: PUSH
41903: LD_INT 59
41905: ST_TO_ADDR
// result := CreateVehicle ;
41906: LD_ADDR_VAR 0 5
41910: PUSH
41911: CALL_OW 45
41915: ST_TO_ADDR
// SetDir ( result , d ) ;
41916: LD_VAR 0 5
41920: PPUSH
41921: LD_VAR 0 4
41925: PPUSH
41926: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41930: LD_VAR 0 5
41934: PPUSH
41935: LD_VAR 0 2
41939: PPUSH
41940: LD_VAR 0 3
41944: PPUSH
41945: LD_INT 0
41947: PPUSH
41948: CALL_OW 48
// end ;
41952: LD_VAR 0 5
41956: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
41957: LD_INT 0
41959: PPUSH
41960: PPUSH
41961: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
41962: LD_ADDR_VAR 0 2
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
41985: LD_VAR 0 1
41989: NOT
41990: IFTRUE 42023
41992: PUSH
41993: LD_VAR 0 1
41997: PPUSH
41998: CALL_OW 264
42002: PUSH
42003: LD_INT 12
42005: PUSH
42006: LD_INT 51
42008: PUSH
42009: LD_INT 32
42011: PUSH
42012: LD_INT 89
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: IN
42021: NOT
42022: OR
42023: IFFALSE 42027
// exit ;
42025: GO 42125
// for i := 1 to 3 do
42027: LD_ADDR_VAR 0 3
42031: PUSH
42032: DOUBLE
42033: LD_INT 1
42035: DEC
42036: ST_TO_ADDR
42037: LD_INT 3
42039: PUSH
42040: FOR_TO
42041: IFFALSE 42123
// begin tmp := GetCargo ( cargo , i ) ;
42043: LD_ADDR_VAR 0 4
42047: PUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: LD_VAR 0 3
42057: PPUSH
42058: CALL_OW 289
42062: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42063: LD_ADDR_VAR 0 2
42067: PUSH
42068: LD_VAR 0 2
42072: PPUSH
42073: LD_VAR 0 3
42077: PPUSH
42078: LD_VAR 0 4
42082: PPUSH
42083: CALL_OW 1
42087: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42088: LD_ADDR_VAR 0 2
42092: PUSH
42093: LD_VAR 0 2
42097: PPUSH
42098: LD_INT 4
42100: PPUSH
42101: LD_VAR 0 2
42105: PUSH
42106: LD_INT 4
42108: ARRAY
42109: PUSH
42110: LD_VAR 0 4
42114: PLUS
42115: PPUSH
42116: CALL_OW 1
42120: ST_TO_ADDR
// end ;
42121: GO 42040
42123: POP
42124: POP
// end ;
42125: LD_VAR 0 2
42129: RET
// export function Length ( array ) ; begin
42130: LD_INT 0
42132: PPUSH
// result := array + 0 ;
42133: LD_ADDR_VAR 0 2
42137: PUSH
42138: LD_VAR 0 1
42142: PUSH
42143: LD_INT 0
42145: PLUS
42146: ST_TO_ADDR
// end ;
42147: LD_VAR 0 2
42151: RET
// export function PrepareArray ( array ) ; begin
42152: LD_INT 0
42154: PPUSH
// result := array diff 0 ;
42155: LD_ADDR_VAR 0 2
42159: PUSH
42160: LD_VAR 0 1
42164: PUSH
42165: LD_INT 0
42167: DIFF
42168: ST_TO_ADDR
// if not result [ 1 ] then
42169: LD_VAR 0 2
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: NOT
42178: IFFALSE 42198
// result := Delete ( result , 1 ) ;
42180: LD_ADDR_VAR 0 2
42184: PUSH
42185: LD_VAR 0 2
42189: PPUSH
42190: LD_INT 1
42192: PPUSH
42193: CALL_OW 3
42197: ST_TO_ADDR
// end ;
42198: LD_VAR 0 2
42202: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
42203: LD_INT 0
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
// sibRocketRange := 25 ;
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_INT 25
42216: ST_TO_ADDR
// result := false ;
42217: LD_ADDR_VAR 0 4
42221: PUSH
42222: LD_INT 0
42224: ST_TO_ADDR
// for i := 0 to 5 do
42225: LD_ADDR_VAR 0 5
42229: PUSH
42230: DOUBLE
42231: LD_INT 0
42233: DEC
42234: ST_TO_ADDR
42235: LD_INT 5
42237: PUSH
42238: FOR_TO
42239: IFFALSE 42306
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
42241: LD_VAR 0 1
42245: PPUSH
42246: LD_VAR 0 5
42250: PPUSH
42251: LD_VAR 0 6
42255: PPUSH
42256: CALL_OW 272
42260: PPUSH
42261: LD_VAR 0 2
42265: PPUSH
42266: LD_VAR 0 5
42270: PPUSH
42271: LD_VAR 0 6
42275: PPUSH
42276: CALL_OW 273
42280: PPUSH
42281: LD_VAR 0 3
42285: PPUSH
42286: CALL_OW 309
42290: IFFALSE 42304
// begin result := true ;
42292: LD_ADDR_VAR 0 4
42296: PUSH
42297: LD_INT 1
42299: ST_TO_ADDR
// exit ;
42300: POP
42301: POP
42302: GO 42308
// end ;
42304: GO 42238
42306: POP
42307: POP
// end ;
42308: LD_VAR 0 4
42312: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
42313: LD_INT 0
42315: PPUSH
42316: PPUSH
42317: PPUSH
// if btype = b_depot then
42318: LD_VAR 0 2
42322: PUSH
42323: LD_INT 0
42325: EQUAL
42326: IFFALSE 42338
// begin result := true ;
42328: LD_ADDR_VAR 0 3
42332: PUSH
42333: LD_INT 1
42335: ST_TO_ADDR
// exit ;
42336: GO 42458
// end ; pom := GetBase ( depot ) ;
42338: LD_ADDR_VAR 0 4
42342: PUSH
42343: LD_VAR 0 1
42347: PPUSH
42348: CALL_OW 274
42352: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42353: LD_ADDR_VAR 0 5
42357: PUSH
42358: LD_VAR 0 2
42362: PPUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: CALL_OW 248
42372: PPUSH
42373: CALL_OW 450
42377: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
42378: LD_ADDR_VAR 0 3
42382: PUSH
42383: LD_VAR 0 4
42387: PPUSH
42388: LD_INT 1
42390: PPUSH
42391: CALL_OW 275
42395: PUSH
42396: LD_VAR 0 5
42400: PUSH
42401: LD_INT 1
42403: ARRAY
42404: GREATEREQUAL
42405: IFFALSE 42431
42407: PUSH
42408: LD_VAR 0 4
42412: PPUSH
42413: LD_INT 2
42415: PPUSH
42416: CALL_OW 275
42420: PUSH
42421: LD_VAR 0 5
42425: PUSH
42426: LD_INT 2
42428: ARRAY
42429: GREATEREQUAL
42430: AND
42431: IFFALSE 42457
42433: PUSH
42434: LD_VAR 0 4
42438: PPUSH
42439: LD_INT 3
42441: PPUSH
42442: CALL_OW 275
42446: PUSH
42447: LD_VAR 0 5
42451: PUSH
42452: LD_INT 3
42454: ARRAY
42455: GREATEREQUAL
42456: AND
42457: ST_TO_ADDR
// end ;
42458: LD_VAR 0 3
42462: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
42463: LD_INT 0
42465: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
42466: LD_VAR 0 1
42470: PPUSH
42471: LD_VAR 0 2
42475: PPUSH
42476: LD_INT 0
42478: PPUSH
42479: LD_INT 0
42481: PPUSH
42482: LD_INT 1
42484: PPUSH
42485: LD_INT 0
42487: PPUSH
42488: CALL_OW 587
// end ;
42492: LD_VAR 0 3
42496: RET
// export function CenterOnNow ( unit ) ; begin
42497: LD_INT 0
42499: PPUSH
// result := IsInUnit ( unit ) ;
42500: LD_ADDR_VAR 0 2
42504: PUSH
42505: LD_VAR 0 1
42509: PPUSH
42510: CALL_OW 310
42514: ST_TO_ADDR
// if not result then
42515: LD_VAR 0 2
42519: NOT
42520: IFFALSE 42532
// result := unit ;
42522: LD_ADDR_VAR 0 2
42526: PUSH
42527: LD_VAR 0 1
42531: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
42532: LD_VAR 0 1
42536: PPUSH
42537: CALL_OW 87
// end ;
42541: LD_VAR 0 2
42545: RET
// export function ComMoveHex ( unit , hex ) ; begin
42546: LD_INT 0
42548: PPUSH
// if not hex then
42549: LD_VAR 0 2
42553: NOT
42554: IFFALSE 42558
// exit ;
42556: GO 42611
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
42558: LD_VAR 0 2
42562: PUSH
42563: LD_INT 1
42565: ARRAY
42566: PPUSH
42567: LD_VAR 0 2
42571: PUSH
42572: LD_INT 2
42574: ARRAY
42575: PPUSH
42576: CALL_OW 428
42580: IFFALSE 42584
// exit ;
42582: GO 42611
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
42584: LD_VAR 0 1
42588: PPUSH
42589: LD_VAR 0 2
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: PPUSH
42598: LD_VAR 0 2
42602: PUSH
42603: LD_INT 2
42605: ARRAY
42606: PPUSH
42607: CALL_OW 111
// end ;
42611: LD_VAR 0 3
42615: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
42616: LD_INT 0
42618: PPUSH
42619: PPUSH
42620: PPUSH
// if not unit or not enemy then
42621: LD_VAR 0 1
42625: NOT
42626: IFTRUE 42635
42628: PUSH
42629: LD_VAR 0 2
42633: NOT
42634: OR
42635: IFFALSE 42639
// exit ;
42637: GO 42765
// x := GetX ( enemy ) ;
42639: LD_ADDR_VAR 0 4
42643: PUSH
42644: LD_VAR 0 2
42648: PPUSH
42649: CALL_OW 250
42653: ST_TO_ADDR
// y := GetY ( enemy ) ;
42654: LD_ADDR_VAR 0 5
42658: PUSH
42659: LD_VAR 0 2
42663: PPUSH
42664: CALL_OW 251
42668: ST_TO_ADDR
// if ValidHex ( x , y ) then
42669: LD_VAR 0 4
42673: PPUSH
42674: LD_VAR 0 5
42678: PPUSH
42679: CALL_OW 488
42683: IFFALSE 42765
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
42685: LD_VAR 0 2
42689: PPUSH
42690: CALL_OW 247
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 2
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: IN
42705: IFTRUE 42728
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: CALL_OW 255
42717: PPUSH
42718: LD_VAR 0 2
42722: PPUSH
42723: CALL_OW 292
42727: OR
42728: IFFALSE 42746
// ComAttackUnit ( unit , enemy ) else
42730: LD_VAR 0 1
42734: PPUSH
42735: LD_VAR 0 2
42739: PPUSH
42740: CALL_OW 115
42744: GO 42765
// ComAgressiveMove ( unit , x , y ) ;
42746: LD_VAR 0 1
42750: PPUSH
42751: LD_VAR 0 4
42755: PPUSH
42756: LD_VAR 0 5
42760: PPUSH
42761: CALL_OW 114
// end ;
42765: LD_VAR 0 3
42769: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
42770: LD_INT 0
42772: PPUSH
42773: PPUSH
42774: PPUSH
// list := AreaToList ( area , 0 ) ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_VAR 0 1
42784: PPUSH
42785: LD_INT 0
42787: PPUSH
42788: CALL_OW 517
42792: ST_TO_ADDR
// if not list then
42793: LD_VAR 0 5
42797: NOT
42798: IFFALSE 42802
// exit ;
42800: GO 42932
// if all then
42802: LD_VAR 0 2
42806: IFFALSE 42894
// begin for i := 1 to list [ 1 ] do
42808: LD_ADDR_VAR 0 4
42812: PUSH
42813: DOUBLE
42814: LD_INT 1
42816: DEC
42817: ST_TO_ADDR
42818: LD_VAR 0 5
42822: PUSH
42823: LD_INT 1
42825: ARRAY
42826: PUSH
42827: FOR_TO
42828: IFFALSE 42890
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_VAR 0 3
42839: PPUSH
42840: LD_VAR 0 3
42844: PUSH
42845: LD_INT 1
42847: PLUS
42848: PPUSH
42849: LD_VAR 0 5
42853: PUSH
42854: LD_INT 1
42856: ARRAY
42857: PUSH
42858: LD_VAR 0 4
42862: ARRAY
42863: PUSH
42864: LD_VAR 0 5
42868: PUSH
42869: LD_INT 2
42871: ARRAY
42872: PUSH
42873: LD_VAR 0 4
42877: ARRAY
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PPUSH
42883: CALL_OW 1
42887: ST_TO_ADDR
42888: GO 42827
42890: POP
42891: POP
// exit ;
42892: GO 42932
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
42894: LD_ADDR_VAR 0 3
42898: PUSH
42899: LD_VAR 0 5
42903: PUSH
42904: LD_INT 1
42906: ARRAY
42907: PUSH
42908: LD_INT 1
42910: ARRAY
42911: PUSH
42912: LD_VAR 0 5
42916: PUSH
42917: LD_INT 2
42919: ARRAY
42920: PUSH
42921: LD_INT 1
42923: ARRAY
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: EMPTY
42930: LIST
42931: ST_TO_ADDR
// end ;
42932: LD_VAR 0 3
42936: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
42937: LD_INT 0
42939: PPUSH
42940: PPUSH
// list := AreaToList ( area , 0 ) ;
42941: LD_ADDR_VAR 0 4
42945: PUSH
42946: LD_VAR 0 1
42950: PPUSH
42951: LD_INT 0
42953: PPUSH
42954: CALL_OW 517
42958: ST_TO_ADDR
// if not list then
42959: LD_VAR 0 4
42963: NOT
42964: IFFALSE 42968
// exit ;
42966: GO 43009
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
42968: LD_ADDR_VAR 0 3
42972: PUSH
42973: LD_VAR 0 4
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: PUSH
42982: LD_INT 1
42984: ARRAY
42985: PUSH
42986: LD_VAR 0 4
42990: PUSH
42991: LD_INT 2
42993: ARRAY
42994: PUSH
42995: LD_INT 1
42997: ARRAY
42998: PUSH
42999: LD_VAR 0 2
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// end ;
43009: LD_VAR 0 3
43013: RET
// export function First ( array ) ; begin
43014: LD_INT 0
43016: PPUSH
// if not array then
43017: LD_VAR 0 1
43021: NOT
43022: IFFALSE 43026
// exit ;
43024: GO 43040
// result := array [ 1 ] ;
43026: LD_ADDR_VAR 0 2
43030: PUSH
43031: LD_VAR 0 1
43035: PUSH
43036: LD_INT 1
43038: ARRAY
43039: ST_TO_ADDR
// end ;
43040: LD_VAR 0 2
43044: RET
// export function Last ( array ) ; begin
43045: LD_INT 0
43047: PPUSH
// if not array then
43048: LD_VAR 0 1
43052: NOT
43053: IFFALSE 43057
// exit ;
43055: GO 43073
// result := array [ array ] ;
43057: LD_ADDR_VAR 0 2
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_VAR 0 1
43071: ARRAY
43072: ST_TO_ADDR
// end ;
43073: LD_VAR 0 2
43077: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43078: LD_INT 0
43080: PPUSH
43081: PPUSH
// result := [ ] ;
43082: LD_ADDR_VAR 0 5
43086: PUSH
43087: EMPTY
43088: ST_TO_ADDR
// if not array then
43089: LD_VAR 0 1
43093: NOT
43094: IFFALSE 43098
// exit ;
43096: GO 43210
// for i := 1 to array do
43098: LD_ADDR_VAR 0 6
43102: PUSH
43103: DOUBLE
43104: LD_INT 1
43106: DEC
43107: ST_TO_ADDR
43108: LD_VAR 0 1
43112: PUSH
43113: FOR_TO
43114: IFFALSE 43208
// if array [ i ] [ index ] = value then
43116: LD_VAR 0 1
43120: PUSH
43121: LD_VAR 0 6
43125: ARRAY
43126: PUSH
43127: LD_VAR 0 2
43131: ARRAY
43132: PUSH
43133: LD_VAR 0 3
43137: EQUAL
43138: IFFALSE 43206
// begin if indexColumn then
43140: LD_VAR 0 4
43144: IFFALSE 43180
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43146: LD_ADDR_VAR 0 5
43150: PUSH
43151: LD_VAR 0 5
43155: PPUSH
43156: LD_VAR 0 1
43160: PUSH
43161: LD_VAR 0 6
43165: ARRAY
43166: PUSH
43167: LD_VAR 0 4
43171: ARRAY
43172: PPUSH
43173: CALL 38218 0 2
43177: ST_TO_ADDR
43178: GO 43206
// result := Join ( result , array [ i ] ) ;
43180: LD_ADDR_VAR 0 5
43184: PUSH
43185: LD_VAR 0 5
43189: PPUSH
43190: LD_VAR 0 1
43194: PUSH
43195: LD_VAR 0 6
43199: ARRAY
43200: PPUSH
43201: CALL 38218 0 2
43205: ST_TO_ADDR
// end ;
43206: GO 43113
43208: POP
43209: POP
// end ;
43210: LD_VAR 0 5
43214: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
43215: LD_INT 0
43217: PPUSH
// if not vehicles or not parkingPoint then
43218: LD_VAR 0 1
43222: NOT
43223: IFTRUE 43232
43225: PUSH
43226: LD_VAR 0 2
43230: NOT
43231: OR
43232: IFFALSE 43236
// exit ;
43234: GO 43334
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
43236: LD_ADDR_VAR 0 1
43240: PUSH
43241: LD_VAR 0 1
43245: PPUSH
43246: LD_INT 50
43248: PUSH
43249: EMPTY
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: LD_INT 92
43257: PUSH
43258: LD_VAR 0 2
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: PUSH
43267: LD_VAR 0 2
43271: PUSH
43272: LD_INT 2
43274: ARRAY
43275: PUSH
43276: LD_INT 8
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PPUSH
43293: CALL_OW 72
43297: ST_TO_ADDR
// if not vehicles then
43298: LD_VAR 0 1
43302: NOT
43303: IFFALSE 43307
// exit ;
43305: GO 43334
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
43307: LD_VAR 0 1
43311: PPUSH
43312: LD_VAR 0 2
43316: PUSH
43317: LD_INT 1
43319: ARRAY
43320: PPUSH
43321: LD_VAR 0 2
43325: PUSH
43326: LD_INT 2
43328: ARRAY
43329: PPUSH
43330: CALL_OW 111
// end ;
43334: LD_VAR 0 3
43338: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
43339: LD_INT 0
43341: PPUSH
43342: PPUSH
43343: PPUSH
// if not side or not area then
43344: LD_VAR 0 1
43348: NOT
43349: IFTRUE 43358
43351: PUSH
43352: LD_VAR 0 2
43356: NOT
43357: OR
43358: IFFALSE 43362
// exit ;
43360: GO 43481
// tmp := AreaToList ( area , 0 ) ;
43362: LD_ADDR_VAR 0 5
43366: PUSH
43367: LD_VAR 0 2
43371: PPUSH
43372: LD_INT 0
43374: PPUSH
43375: CALL_OW 517
43379: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
43380: LD_ADDR_VAR 0 4
43384: PUSH
43385: DOUBLE
43386: LD_INT 1
43388: DEC
43389: ST_TO_ADDR
43390: LD_VAR 0 5
43394: PUSH
43395: LD_INT 1
43397: ARRAY
43398: PUSH
43399: FOR_TO
43400: IFFALSE 43479
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
43402: LD_VAR 0 5
43406: PUSH
43407: LD_INT 1
43409: ARRAY
43410: PUSH
43411: LD_VAR 0 4
43415: ARRAY
43416: PPUSH
43417: LD_VAR 0 5
43421: PUSH
43422: LD_INT 2
43424: ARRAY
43425: PUSH
43426: LD_VAR 0 4
43430: ARRAY
43431: PPUSH
43432: CALL_OW 351
43436: IFFALSE 43477
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
43438: LD_VAR 0 5
43442: PUSH
43443: LD_INT 1
43445: ARRAY
43446: PUSH
43447: LD_VAR 0 4
43451: ARRAY
43452: PPUSH
43453: LD_VAR 0 5
43457: PUSH
43458: LD_INT 2
43460: ARRAY
43461: PUSH
43462: LD_VAR 0 4
43466: ARRAY
43467: PPUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 244
// end ;
43477: GO 43399
43479: POP
43480: POP
// end ;
43481: LD_VAR 0 3
43485: RET
// export function UniqueArray ( array ) ; var i ; begin
43486: LD_INT 0
43488: PPUSH
43489: PPUSH
// result := [ ] ;
43490: LD_ADDR_VAR 0 2
43494: PUSH
43495: EMPTY
43496: ST_TO_ADDR
// if not array then
43497: LD_VAR 0 1
43501: NOT
43502: IFFALSE 43506
// exit ;
43504: GO 43567
// for i := 1 to array do
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: DOUBLE
43512: LD_INT 1
43514: DEC
43515: ST_TO_ADDR
43516: LD_VAR 0 1
43520: PUSH
43521: FOR_TO
43522: IFFALSE 43565
// if not array [ i ] in result then
43524: LD_VAR 0 1
43528: PUSH
43529: LD_VAR 0 3
43533: ARRAY
43534: PUSH
43535: LD_VAR 0 2
43539: IN
43540: NOT
43541: IFFALSE 43563
// result := Join ( result , i ) ;
43543: LD_ADDR_VAR 0 2
43547: PUSH
43548: LD_VAR 0 2
43552: PPUSH
43553: LD_VAR 0 3
43557: PPUSH
43558: CALL 38218 0 2
43562: ST_TO_ADDR
43563: GO 43521
43565: POP
43566: POP
// end ;
43567: LD_VAR 0 2
43571: RET
