// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// uc_side := 3 ;
   9: LD_ADDR_OWVAR 20
  13: PUSH
  14: LD_INT 3
  16: ST_TO_ADDR
// uc_nation := nation_russian ;
  17: LD_ADDR_OWVAR 21
  21: PUSH
  22: LD_INT 3
  24: ST_TO_ADDR
// ruForces := [ ] ;
  25: LD_ADDR_EXP 1
  29: PUSH
  30: EMPTY
  31: ST_TO_ADDR
// ruForces2 := [ ] ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// ruMech := [ ] ;
  39: LD_ADDR_EXP 5
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// ruMech2 := [ ] ;
  46: LD_ADDR_EXP 6
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
  53: LD_ADDR_EXP 7
  57: PUSH
  58: LD_INT 37
  60: PUSH
  61: LD_INT 63
  63: PUSH
  64: LD_INT 52
  66: PUSH
  67: LD_INT 54
  69: PUSH
  70: EMPTY
  71: LIST
  72: LIST
  73: LIST
  74: LIST
  75: ST_TO_ADDR
// ruBaseArea := 0 ;
  76: LD_ADDR_EXP 8
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// ruBaseArea2 := 0 ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// ruBase := 0 ;
  92: LD_ADDR_EXP 10
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// ruBase2 := 0 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// ruConstructList := [ ] ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: EMPTY
 114: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
 115: LD_ADDR_EXP 13
 119: PUSH
 120: LD_INT 22
 122: PUSH
 123: LD_INT 3
 125: PUSH
 126: LD_INT 1
 128: PUSH
 129: LD_INT 43
 131: PUSH
 132: LD_INT 44
 134: PUSH
 135: LD_INT 45
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: PUSH
 143: LD_INT 1
 145: PPUSH
 146: LD_INT 3
 148: PPUSH
 149: CALL_OW 12
 153: ARRAY
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: LIST
 160: PUSH
 161: LD_INT 22
 163: PUSH
 164: LD_INT 3
 166: PUSH
 167: LD_INT 1
 169: PUSH
 170: LD_INT 43
 172: PUSH
 173: LD_INT 44
 175: PUSH
 176: LD_INT 45
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: PUSH
 184: LD_INT 1
 186: PPUSH
 187: LD_INT 3
 189: PPUSH
 190: CALL_OW 12
 194: ARRAY
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 43
 213: PUSH
 214: LD_INT 44
 216: PUSH
 217: LD_INT 45
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 1
 227: PPUSH
 228: LD_INT 3
 230: PPUSH
 231: CALL_OW 12
 235: ARRAY
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// ruCratesArea := 0 ;
 248: LD_ADDR_EXP 14
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// ruCratesArea2 := 0 ;
 256: LD_ADDR_EXP 15
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// ruHealPoint := [ ] ;
 264: LD_ADDR_EXP 16
 268: PUSH
 269: EMPTY
 270: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
 271: LD_ADDR_EXP 17
 275: PUSH
 276: EMPTY
 277: ST_TO_ADDR
// ruBuildings := [ ] ;
 278: LD_ADDR_EXP 18
 282: PUSH
 283: EMPTY
 284: ST_TO_ADDR
// ruBuildings2 := [ ] ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: EMPTY
 291: ST_TO_ADDR
// ruTanks := [ ] ;
 292: LD_ADDR_EXP 21
 296: PUSH
 297: EMPTY
 298: ST_TO_ADDR
// ruTanks2 := [ ] ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// ruParkingArea := 0 ;
 306: LD_ADDR_EXP 24
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruParkingArea2 := 0 ;
 314: LD_ADDR_EXP 25
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_INT 2
 334: PUSH
 335: LD_INT 3
 337: PUSH
 338: LD_INT 4
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: LIST
 349: PUSH
 350: LD_OWVAR 67
 354: ARRAY
 355: PUSH
 356: FOR_TO
 357: IFFALSE 417
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
 359: LD_ADDR_EXP 12
 363: PUSH
 364: LD_EXP 12
 368: PPUSH
 369: LD_INT 22
 371: PUSH
 372: LD_INT 3
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: LD_INT 43
 380: PUSH
 381: LD_INT 44
 383: PUSH
 384: LD_INT 45
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 1
 394: PPUSH
 395: LD_INT 3
 397: PPUSH
 398: CALL_OW 12
 402: ARRAY
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL 39031 0 2
 414: ST_TO_ADDR
 415: GO 356
 417: POP
 418: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
 419: LD_ADDR_VAR 0 7
 423: PUSH
 424: LD_INT 43
 426: PUSH
 427: LD_INT 68
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 43
 436: PUSH
 437: LD_INT 79
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: LD_INT 99
 446: PUSH
 447: LD_INT 114
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 103
 456: PUSH
 457: LD_INT 114
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 156
 466: PUSH
 467: LD_INT 92
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 152
 476: PUSH
 477: LD_INT 85
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: EMPTY
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: ST_TO_ADDR
// for i in sources do
 492: LD_ADDR_VAR 0 2
 496: PUSH
 497: LD_VAR 0 7
 501: PUSH
 502: FOR_IN
 503: IFFALSE 532
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
 505: LD_VAR 0 2
 509: PUSH
 510: LD_INT 1
 512: ARRAY
 513: PPUSH
 514: LD_VAR 0 2
 518: PUSH
 519: LD_INT 2
 521: ARRAY
 522: PPUSH
 523: LD_INT 3
 525: PPUSH
 526: CALL_OW 441
 530: GO 502
 532: POP
 533: POP
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
 534: LD_ADDR_VAR 0 6
 538: PUSH
 539: LD_INT 5
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: LD_INT 8
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
 563: LD_ADDR_EXP 3
 567: PUSH
 568: LD_STRING Tsaritsyn
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_STRING 
 576: PPUSH
 577: CALL 875 0 3
 581: ST_TO_ADDR
// c := 0 ;
 582: LD_ADDR_VAR 0 5
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// for i := 1 to 4 do
 590: LD_ADDR_VAR 0 2
 594: PUSH
 595: DOUBLE
 596: LD_INT 1
 598: DEC
 599: ST_TO_ADDR
 600: LD_INT 4
 602: PUSH
 603: FOR_TO
 604: IFFALSE 851
// begin debug_strings := i ;
 606: LD_ADDR_OWVAR 48
 610: PUSH
 611: LD_VAR 0 2
 615: ST_TO_ADDR
// exit ;
 616: POP
 617: POP
 618: GO 853
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: DOUBLE
 626: LD_INT 1
 628: DEC
 629: ST_TO_ADDR
 630: LD_INT 5
 632: PUSH
 633: LD_INT 6
 635: PUSH
 636: LD_INT 8
 638: PUSH
 639: LD_INT 9
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 4
 659: PUSH
 660: LD_INT 5
 662: PUSH
 663: LD_INT 6
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: LIST
 670: LIST
 671: PUSH
 672: LD_OWVAR 67
 676: ARRAY
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 4
 683: PUSH
 684: LD_INT 5
 686: PUSH
 687: LD_INT 6
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: PUSH
 696: LD_OWVAR 67
 700: ARRAY
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 3
 707: PUSH
 708: LD_INT 3
 710: PUSH
 711: LD_INT 3
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_OWVAR 67
 724: ARRAY
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_VAR 0 2
 736: ARRAY
 737: PUSH
 738: FOR_TO
 739: IFFALSE 847
// begin c := Inc ( c ) ;
 741: LD_ADDR_VAR 0 5
 745: PUSH
 746: LD_VAR 0 5
 750: PPUSH
 751: CALL 40404 0 1
 755: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
 756: LD_INT 0
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_VAR 0 6
 768: PPUSH
 769: CALL_OW 380
// un := CreateHuman ;
 773: LD_ADDR_VAR 0 4
 777: PUSH
 778: CALL_OW 44
 782: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
 783: LD_ADDR_EXP 1
 787: PUSH
 788: LD_EXP 1
 792: PPUSH
 793: LD_VAR 0 4
 797: PPUSH
 798: CALL 39031 0 2
 802: ST_TO_ADDR
// if i = 3 then
 803: LD_VAR 0 2
 807: PUSH
 808: LD_INT 3
 810: EQUAL
 811: IFFALSE 845
// begin ruMech := Join ( ruMech , un ) ;
 813: LD_ADDR_EXP 5
 817: PUSH
 818: LD_EXP 5
 822: PPUSH
 823: LD_VAR 0 4
 827: PPUSH
 828: CALL 39031 0 2
 832: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
 833: LD_VAR 0 4
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL_OW 336
// end ; end ;
 845: GO 738
 847: POP
 848: POP
// end ;
 849: GO 603
 851: POP
 852: POP
// end ;
 853: LD_VAR 0 1
 857: RET
// starting begin ResetFog ;
 858: CALL_OW 335
// Difficulty := 3 ;
 862: LD_ADDR_OWVAR 67
 866: PUSH
 867: LD_INT 3
 869: ST_TO_ADDR
// PrepareRussian ;
 870: CALL 0 0 0
// end ; end_of_file
 874: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 875: LD_INT 0
 877: PPUSH
 878: PPUSH
// if exist_mode then
 879: LD_VAR 0 2
 883: IFFALSE 929
// begin unit := CreateCharacter ( prefix & ident ) ;
 885: LD_ADDR_VAR 0 5
 889: PUSH
 890: LD_VAR 0 3
 894: PUSH
 895: LD_VAR 0 1
 899: STR
 900: PPUSH
 901: CALL_OW 34
 905: ST_TO_ADDR
// if unit then
 906: LD_VAR 0 5
 910: IFFALSE 927
// DeleteCharacters ( prefix & ident ) ;
 912: LD_VAR 0 3
 916: PUSH
 917: LD_VAR 0 1
 921: STR
 922: PPUSH
 923: CALL_OW 40
// end else
 927: GO 944
// unit := NewCharacter ( ident ) ;
 929: LD_ADDR_VAR 0 5
 933: PUSH
 934: LD_VAR 0 1
 938: PPUSH
 939: CALL_OW 25
 943: ST_TO_ADDR
// result := unit ;
 944: LD_ADDR_VAR 0 4
 948: PUSH
 949: LD_VAR 0 5
 953: ST_TO_ADDR
// end ;
 954: LD_VAR 0 4
 958: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
 959: LD_INT 0
 961: PPUSH
 962: PPUSH
// if exist_mode then
 963: LD_VAR 0 2
 967: IFFALSE 992
// unit := CreateCharacter ( prefix & ident ) else
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_VAR 0 3
 978: PUSH
 979: LD_VAR 0 1
 983: STR
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
 990: GO 1007
// unit := NewCharacter ( ident ) ;
 992: LD_ADDR_VAR 0 5
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 25
1006: ST_TO_ADDR
// result := unit ;
1007: LD_ADDR_VAR 0 4
1011: PUSH
1012: LD_VAR 0 5
1016: ST_TO_ADDR
// end ;
1017: LD_VAR 0 4
1021: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1022: LD_INT 0
1024: PPUSH
1025: PPUSH
// if not side or not nation then
1026: LD_VAR 0 1
1030: NOT
1031: IFTRUE 1040
1033: PUSH
1034: LD_VAR 0 2
1038: NOT
1039: OR
1040: IFFALSE 1044
// exit ;
1042: GO 1838
// case nation of nation_american :
1044: LD_VAR 0 2
1048: PUSH
1049: LD_INT 1
1051: DOUBLE
1052: EQUAL
1053: IFTRUE 1057
1055: GO 1279
1057: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
1058: LD_ADDR_VAR 0 4
1062: PUSH
1063: LD_INT 35
1065: PUSH
1066: LD_INT 45
1068: PUSH
1069: LD_INT 46
1071: PUSH
1072: LD_INT 47
1074: PUSH
1075: LD_INT 82
1077: PUSH
1078: LD_INT 83
1080: PUSH
1081: LD_INT 84
1083: PUSH
1084: LD_INT 85
1086: PUSH
1087: LD_INT 86
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 2
1095: PUSH
1096: LD_INT 6
1098: PUSH
1099: LD_INT 15
1101: PUSH
1102: LD_INT 16
1104: PUSH
1105: LD_INT 7
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 13
1113: PUSH
1114: LD_INT 10
1116: PUSH
1117: LD_INT 14
1119: PUSH
1120: LD_INT 20
1122: PUSH
1123: LD_INT 21
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 25
1131: PUSH
1132: LD_INT 32
1134: PUSH
1135: LD_INT 27
1137: PUSH
1138: LD_INT 36
1140: PUSH
1141: LD_INT 69
1143: PUSH
1144: LD_INT 39
1146: PUSH
1147: LD_INT 34
1149: PUSH
1150: LD_INT 40
1152: PUSH
1153: LD_INT 48
1155: PUSH
1156: LD_INT 49
1158: PUSH
1159: LD_INT 50
1161: PUSH
1162: LD_INT 51
1164: PUSH
1165: LD_INT 52
1167: PUSH
1168: LD_INT 53
1170: PUSH
1171: LD_INT 54
1173: PUSH
1174: LD_INT 55
1176: PUSH
1177: LD_INT 56
1179: PUSH
1180: LD_INT 57
1182: PUSH
1183: LD_INT 58
1185: PUSH
1186: LD_INT 59
1188: PUSH
1189: LD_INT 60
1191: PUSH
1192: LD_INT 61
1194: PUSH
1195: LD_INT 62
1197: PUSH
1198: LD_INT 80
1200: PUSH
1201: LD_INT 82
1203: PUSH
1204: LD_INT 83
1206: PUSH
1207: LD_INT 84
1209: PUSH
1210: LD_INT 85
1212: PUSH
1213: LD_INT 86
1215: PUSH
1216: LD_INT 90
1218: PUSH
1219: LD_INT 93
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: ST_TO_ADDR
1277: GO 1760
1279: LD_INT 2
1281: DOUBLE
1282: EQUAL
1283: IFTRUE 1287
1285: GO 1521
1287: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: LD_INT 35
1295: PUSH
1296: LD_INT 45
1298: PUSH
1299: LD_INT 46
1301: PUSH
1302: LD_INT 47
1304: PUSH
1305: LD_INT 82
1307: PUSH
1308: LD_INT 83
1310: PUSH
1311: LD_INT 84
1313: PUSH
1314: LD_INT 85
1316: PUSH
1317: LD_INT 87
1319: PUSH
1320: LD_INT 70
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: LD_INT 11
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: LD_INT 4
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: LD_INT 6
1340: PUSH
1341: LD_INT 15
1343: PUSH
1344: LD_INT 18
1346: PUSH
1347: LD_INT 7
1349: PUSH
1350: LD_INT 17
1352: PUSH
1353: LD_INT 8
1355: PUSH
1356: LD_INT 20
1358: PUSH
1359: LD_INT 21
1361: PUSH
1362: LD_INT 22
1364: PUSH
1365: LD_INT 72
1367: PUSH
1368: LD_INT 26
1370: PUSH
1371: LD_INT 69
1373: PUSH
1374: LD_INT 39
1376: PUSH
1377: LD_INT 40
1379: PUSH
1380: LD_INT 41
1382: PUSH
1383: LD_INT 42
1385: PUSH
1386: LD_INT 43
1388: PUSH
1389: LD_INT 48
1391: PUSH
1392: LD_INT 49
1394: PUSH
1395: LD_INT 50
1397: PUSH
1398: LD_INT 51
1400: PUSH
1401: LD_INT 52
1403: PUSH
1404: LD_INT 53
1406: PUSH
1407: LD_INT 54
1409: PUSH
1410: LD_INT 55
1412: PUSH
1413: LD_INT 56
1415: PUSH
1416: LD_INT 60
1418: PUSH
1419: LD_INT 61
1421: PUSH
1422: LD_INT 62
1424: PUSH
1425: LD_INT 66
1427: PUSH
1428: LD_INT 67
1430: PUSH
1431: LD_INT 68
1433: PUSH
1434: LD_INT 81
1436: PUSH
1437: LD_INT 82
1439: PUSH
1440: LD_INT 83
1442: PUSH
1443: LD_INT 84
1445: PUSH
1446: LD_INT 85
1448: PUSH
1449: LD_INT 87
1451: PUSH
1452: LD_INT 88
1454: PUSH
1455: LD_INT 92
1457: PUSH
1458: LD_INT 94
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: ST_TO_ADDR
1519: GO 1760
1521: LD_INT 3
1523: DOUBLE
1524: EQUAL
1525: IFTRUE 1529
1527: GO 1759
1529: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
1530: LD_ADDR_VAR 0 4
1534: PUSH
1535: LD_INT 46
1537: PUSH
1538: LD_INT 47
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 2
1546: PUSH
1547: LD_INT 82
1549: PUSH
1550: LD_INT 83
1552: PUSH
1553: LD_INT 84
1555: PUSH
1556: LD_INT 85
1558: PUSH
1559: LD_INT 86
1561: PUSH
1562: LD_INT 11
1564: PUSH
1565: LD_INT 9
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: LD_INT 19
1573: PUSH
1574: LD_INT 21
1576: PUSH
1577: LD_INT 24
1579: PUSH
1580: LD_INT 22
1582: PUSH
1583: LD_INT 25
1585: PUSH
1586: LD_INT 28
1588: PUSH
1589: LD_INT 29
1591: PUSH
1592: LD_INT 30
1594: PUSH
1595: LD_INT 31
1597: PUSH
1598: LD_INT 37
1600: PUSH
1601: LD_INT 38
1603: PUSH
1604: LD_INT 32
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 33
1612: PUSH
1613: LD_INT 69
1615: PUSH
1616: LD_INT 39
1618: PUSH
1619: LD_INT 34
1621: PUSH
1622: LD_INT 40
1624: PUSH
1625: LD_INT 71
1627: PUSH
1628: LD_INT 23
1630: PUSH
1631: LD_INT 44
1633: PUSH
1634: LD_INT 48
1636: PUSH
1637: LD_INT 49
1639: PUSH
1640: LD_INT 50
1642: PUSH
1643: LD_INT 51
1645: PUSH
1646: LD_INT 52
1648: PUSH
1649: LD_INT 53
1651: PUSH
1652: LD_INT 54
1654: PUSH
1655: LD_INT 55
1657: PUSH
1658: LD_INT 56
1660: PUSH
1661: LD_INT 57
1663: PUSH
1664: LD_INT 58
1666: PUSH
1667: LD_INT 59
1669: PUSH
1670: LD_INT 63
1672: PUSH
1673: LD_INT 64
1675: PUSH
1676: LD_INT 65
1678: PUSH
1679: LD_INT 82
1681: PUSH
1682: LD_INT 83
1684: PUSH
1685: LD_INT 84
1687: PUSH
1688: LD_INT 85
1690: PUSH
1691: LD_INT 86
1693: PUSH
1694: LD_INT 89
1696: PUSH
1697: LD_INT 91
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: ST_TO_ADDR
1757: GO 1760
1759: POP
// if state > - 1 and state < 3 then
1760: LD_VAR 0 3
1764: PUSH
1765: LD_INT 1
1767: NEG
1768: GREATER
1769: IFFALSE 1781
1771: PUSH
1772: LD_VAR 0 3
1776: PUSH
1777: LD_INT 3
1779: LESS
1780: AND
1781: IFFALSE 1838
// for i in result do
1783: LD_ADDR_VAR 0 5
1787: PUSH
1788: LD_VAR 0 4
1792: PUSH
1793: FOR_IN
1794: IFFALSE 1836
// if GetTech ( i , side ) <> state then
1796: LD_VAR 0 5
1800: PPUSH
1801: LD_VAR 0 1
1805: PPUSH
1806: CALL_OW 321
1810: PUSH
1811: LD_VAR 0 3
1815: NONEQUAL
1816: IFFALSE 1834
// result := result diff i ;
1818: LD_ADDR_VAR 0 4
1822: PUSH
1823: LD_VAR 0 4
1827: PUSH
1828: LD_VAR 0 5
1832: DIFF
1833: ST_TO_ADDR
1834: GO 1793
1836: POP
1837: POP
// end ;
1838: LD_VAR 0 4
1842: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1843: LD_INT 0
1845: PPUSH
1846: PPUSH
1847: PPUSH
// result := true ;
1848: LD_ADDR_VAR 0 3
1852: PUSH
1853: LD_INT 1
1855: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1856: LD_ADDR_VAR 0 5
1860: PUSH
1861: LD_VAR 0 2
1865: PPUSH
1866: CALL_OW 480
1870: ST_TO_ADDR
// if not tmp then
1871: LD_VAR 0 5
1875: NOT
1876: IFFALSE 1880
// exit ;
1878: GO 1929
// for i in tmp do
1880: LD_ADDR_VAR 0 4
1884: PUSH
1885: LD_VAR 0 5
1889: PUSH
1890: FOR_IN
1891: IFFALSE 1927
// if GetTech ( i , side ) <> state_researched then
1893: LD_VAR 0 4
1897: PPUSH
1898: LD_VAR 0 1
1902: PPUSH
1903: CALL_OW 321
1907: PUSH
1908: LD_INT 2
1910: NONEQUAL
1911: IFFALSE 1925
// begin result := false ;
1913: LD_ADDR_VAR 0 3
1917: PUSH
1918: LD_INT 0
1920: ST_TO_ADDR
// exit ;
1921: POP
1922: POP
1923: GO 1929
// end ;
1925: GO 1890
1927: POP
1928: POP
// end ;
1929: LD_VAR 0 3
1933: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1934: LD_INT 0
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
1947: PPUSH
1948: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1949: LD_VAR 0 1
1953: NOT
1954: IFTRUE 1971
1956: PUSH
1957: LD_VAR 0 1
1961: PPUSH
1962: CALL_OW 257
1966: PUSH
1967: LD_INT 9
1969: NONEQUAL
1970: OR
1971: IFFALSE 1975
// exit ;
1973: GO 2554
// side := GetSide ( unit ) ;
1975: LD_ADDR_VAR 0 9
1979: PUSH
1980: LD_VAR 0 1
1984: PPUSH
1985: CALL_OW 255
1989: ST_TO_ADDR
// tech_space := tech_spacanom ;
1990: LD_ADDR_VAR 0 12
1994: PUSH
1995: LD_INT 29
1997: ST_TO_ADDR
// tech_time := tech_taurad ;
1998: LD_ADDR_VAR 0 13
2002: PUSH
2003: LD_INT 28
2005: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2006: LD_ADDR_VAR 0 11
2010: PUSH
2011: LD_VAR 0 1
2015: PPUSH
2016: CALL_OW 310
2020: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2021: LD_VAR 0 11
2025: PPUSH
2026: CALL_OW 247
2030: PUSH
2031: LD_INT 2
2033: EQUAL
2034: IFFALSE 2038
// exit ;
2036: GO 2554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2038: LD_ADDR_VAR 0 8
2042: PUSH
2043: LD_INT 81
2045: PUSH
2046: LD_VAR 0 9
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 3
2057: PUSH
2058: LD_INT 21
2060: PUSH
2061: LD_INT 3
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PPUSH
2076: CALL_OW 69
2080: ST_TO_ADDR
// if not tmp then
2081: LD_VAR 0 8
2085: NOT
2086: IFFALSE 2090
// exit ;
2088: GO 2554
// if in_unit then
2090: LD_VAR 0 11
2094: IFFALSE 2118
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2096: LD_ADDR_VAR 0 10
2100: PUSH
2101: LD_VAR 0 8
2105: PPUSH
2106: LD_VAR 0 11
2110: PPUSH
2111: CALL_OW 74
2115: ST_TO_ADDR
2116: GO 2138
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2118: LD_ADDR_VAR 0 10
2122: PUSH
2123: LD_VAR 0 8
2127: PPUSH
2128: LD_VAR 0 1
2132: PPUSH
2133: CALL_OW 74
2137: ST_TO_ADDR
// if not enemy then
2138: LD_VAR 0 10
2142: NOT
2143: IFFALSE 2147
// exit ;
2145: GO 2554
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2147: LD_VAR 0 11
2151: IFFALSE 2173
2153: PUSH
2154: LD_VAR 0 11
2158: PPUSH
2159: LD_VAR 0 10
2163: PPUSH
2164: CALL_OW 296
2168: PUSH
2169: LD_INT 13
2171: GREATER
2172: AND
2173: IFTRUE 2195
2175: PUSH
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_VAR 0 10
2185: PPUSH
2186: CALL_OW 296
2190: PUSH
2191: LD_INT 12
2193: GREATER
2194: OR
2195: IFFALSE 2199
// exit ;
2197: GO 2554
// missile := [ 1 ] ;
2199: LD_ADDR_VAR 0 14
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2210: LD_VAR 0 9
2214: PPUSH
2215: LD_VAR 0 12
2219: PPUSH
2220: CALL_OW 325
2224: IFFALSE 2253
// missile := Replace ( missile , missile + 1 , 2 ) ;
2226: LD_ADDR_VAR 0 14
2230: PUSH
2231: LD_VAR 0 14
2235: PPUSH
2236: LD_VAR 0 14
2240: PUSH
2241: LD_INT 1
2243: PLUS
2244: PPUSH
2245: LD_INT 2
2247: PPUSH
2248: CALL_OW 1
2252: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2253: LD_VAR 0 9
2257: PPUSH
2258: LD_VAR 0 13
2262: PPUSH
2263: CALL_OW 325
2267: IFFALSE 2291
2269: PUSH
2270: LD_VAR 0 10
2274: PPUSH
2275: CALL_OW 255
2279: PPUSH
2280: LD_VAR 0 13
2284: PPUSH
2285: CALL_OW 325
2289: NOT
2290: AND
2291: IFFALSE 2320
// missile := Replace ( missile , missile + 1 , 3 ) ;
2293: LD_ADDR_VAR 0 14
2297: PUSH
2298: LD_VAR 0 14
2302: PPUSH
2303: LD_VAR 0 14
2307: PUSH
2308: LD_INT 1
2310: PLUS
2311: PPUSH
2312: LD_INT 3
2314: PPUSH
2315: CALL_OW 1
2319: ST_TO_ADDR
// if missile < 2 then
2320: LD_VAR 0 14
2324: PUSH
2325: LD_INT 2
2327: LESS
2328: IFFALSE 2332
// exit ;
2330: GO 2554
// x := GetX ( enemy ) ;
2332: LD_ADDR_VAR 0 4
2336: PUSH
2337: LD_VAR 0 10
2341: PPUSH
2342: CALL_OW 250
2346: ST_TO_ADDR
// y := GetY ( enemy ) ;
2347: LD_ADDR_VAR 0 5
2351: PUSH
2352: LD_VAR 0 10
2356: PPUSH
2357: CALL_OW 251
2361: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2362: LD_ADDR_VAR 0 6
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: NEG
2375: PPUSH
2376: LD_INT 1
2378: PPUSH
2379: CALL_OW 12
2383: PLUS
2384: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2385: LD_ADDR_VAR 0 7
2389: PUSH
2390: LD_VAR 0 5
2394: PUSH
2395: LD_INT 1
2397: NEG
2398: PPUSH
2399: LD_INT 1
2401: PPUSH
2402: CALL_OW 12
2406: PLUS
2407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2408: LD_VAR 0 6
2412: PPUSH
2413: LD_VAR 0 7
2417: PPUSH
2418: CALL_OW 488
2422: NOT
2423: IFFALSE 2445
// begin _x := x ;
2425: LD_ADDR_VAR 0 6
2429: PUSH
2430: LD_VAR 0 4
2434: ST_TO_ADDR
// _y := y ;
2435: LD_ADDR_VAR 0 7
2439: PUSH
2440: LD_VAR 0 5
2444: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2445: LD_ADDR_VAR 0 3
2449: PUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_VAR 0 14
2457: PPUSH
2458: CALL_OW 12
2462: ST_TO_ADDR
// case i of 1 :
2463: LD_VAR 0 3
2467: PUSH
2468: LD_INT 1
2470: DOUBLE
2471: EQUAL
2472: IFTRUE 2476
2474: GO 2493
2476: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2477: LD_VAR 0 1
2481: PPUSH
2482: LD_VAR 0 10
2486: PPUSH
2487: CALL_OW 115
2491: GO 2554
2493: LD_INT 2
2495: DOUBLE
2496: EQUAL
2497: IFTRUE 2501
2499: GO 2523
2501: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2502: LD_VAR 0 1
2506: PPUSH
2507: LD_VAR 0 6
2511: PPUSH
2512: LD_VAR 0 7
2516: PPUSH
2517: CALL_OW 153
2521: GO 2554
2523: LD_INT 3
2525: DOUBLE
2526: EQUAL
2527: IFTRUE 2531
2529: GO 2553
2531: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2532: LD_VAR 0 1
2536: PPUSH
2537: LD_VAR 0 6
2541: PPUSH
2542: LD_VAR 0 7
2546: PPUSH
2547: CALL_OW 154
2551: GO 2554
2553: POP
// end ;
2554: LD_VAR 0 2
2558: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2559: LD_INT 0
2561: PPUSH
2562: PPUSH
2563: PPUSH
2564: PPUSH
2565: PPUSH
2566: PPUSH
// if not unit or not building then
2567: LD_VAR 0 1
2571: NOT
2572: IFTRUE 2581
2574: PUSH
2575: LD_VAR 0 2
2579: NOT
2580: OR
2581: IFFALSE 2585
// exit ;
2583: GO 2743
// x := GetX ( building ) ;
2585: LD_ADDR_VAR 0 5
2589: PUSH
2590: LD_VAR 0 2
2594: PPUSH
2595: CALL_OW 250
2599: ST_TO_ADDR
// y := GetY ( building ) ;
2600: LD_ADDR_VAR 0 6
2604: PUSH
2605: LD_VAR 0 2
2609: PPUSH
2610: CALL_OW 251
2614: ST_TO_ADDR
// for i := 0 to 5 do
2615: LD_ADDR_VAR 0 4
2619: PUSH
2620: DOUBLE
2621: LD_INT 0
2623: DEC
2624: ST_TO_ADDR
2625: LD_INT 5
2627: PUSH
2628: FOR_TO
2629: IFFALSE 2741
// begin _x := ShiftX ( x , i , 3 ) ;
2631: LD_ADDR_VAR 0 7
2635: PUSH
2636: LD_VAR 0 5
2640: PPUSH
2641: LD_VAR 0 4
2645: PPUSH
2646: LD_INT 3
2648: PPUSH
2649: CALL_OW 272
2653: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2654: LD_ADDR_VAR 0 8
2658: PUSH
2659: LD_VAR 0 6
2663: PPUSH
2664: LD_VAR 0 4
2668: PPUSH
2669: LD_INT 3
2671: PPUSH
2672: CALL_OW 273
2676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2677: LD_VAR 0 7
2681: PPUSH
2682: LD_VAR 0 8
2686: PPUSH
2687: CALL_OW 488
2691: NOT
2692: IFFALSE 2696
// continue ;
2694: GO 2628
// if HexInfo ( _x , _y ) = 0 then
2696: LD_VAR 0 7
2700: PPUSH
2701: LD_VAR 0 8
2705: PPUSH
2706: CALL_OW 428
2710: PUSH
2711: LD_INT 0
2713: EQUAL
2714: IFFALSE 2739
// begin ComMoveXY ( unit , _x , _y ) ;
2716: LD_VAR 0 1
2720: PPUSH
2721: LD_VAR 0 7
2725: PPUSH
2726: LD_VAR 0 8
2730: PPUSH
2731: CALL_OW 111
// exit ;
2735: POP
2736: POP
2737: GO 2743
// end ; end ;
2739: GO 2628
2741: POP
2742: POP
// end ;
2743: LD_VAR 0 3
2747: RET
// export function ScanBase ( side , base_area ) ; begin
2748: LD_INT 0
2750: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2751: LD_ADDR_VAR 0 3
2755: PUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: LD_INT 81
2763: PUSH
2764: LD_VAR 0 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PPUSH
2773: CALL_OW 70
2777: ST_TO_ADDR
// end ;
2778: LD_VAR 0 3
2782: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2783: LD_INT 0
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
// result := false ;
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: LD_INT 0
2796: ST_TO_ADDR
// side := GetSide ( unit ) ;
2797: LD_ADDR_VAR 0 3
2801: PUSH
2802: LD_VAR 0 1
2806: PPUSH
2807: CALL_OW 255
2811: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2812: LD_ADDR_VAR 0 4
2816: PUSH
2817: LD_VAR 0 1
2821: PPUSH
2822: CALL_OW 248
2826: ST_TO_ADDR
// case nat of 1 :
2827: LD_VAR 0 4
2831: PUSH
2832: LD_INT 1
2834: DOUBLE
2835: EQUAL
2836: IFTRUE 2840
2838: GO 2851
2840: POP
// tech := tech_lassight ; 2 :
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_INT 12
2848: ST_TO_ADDR
2849: GO 2890
2851: LD_INT 2
2853: DOUBLE
2854: EQUAL
2855: IFTRUE 2859
2857: GO 2870
2859: POP
// tech := tech_mortar ; 3 :
2860: LD_ADDR_VAR 0 5
2864: PUSH
2865: LD_INT 41
2867: ST_TO_ADDR
2868: GO 2890
2870: LD_INT 3
2872: DOUBLE
2873: EQUAL
2874: IFTRUE 2878
2876: GO 2889
2878: POP
// tech := tech_bazooka ; end ;
2879: LD_ADDR_VAR 0 5
2883: PUSH
2884: LD_INT 44
2886: ST_TO_ADDR
2887: GO 2890
2889: POP
// if Researched ( side , tech ) then
2890: LD_VAR 0 3
2894: PPUSH
2895: LD_VAR 0 5
2899: PPUSH
2900: CALL_OW 325
2904: IFFALSE 2931
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2906: LD_ADDR_VAR 0 2
2910: PUSH
2911: LD_INT 5
2913: PUSH
2914: LD_INT 8
2916: PUSH
2917: LD_INT 9
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_VAR 0 4
2929: ARRAY
2930: ST_TO_ADDR
// end ;
2931: LD_VAR 0 2
2935: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2936: LD_INT 0
2938: PPUSH
2939: PPUSH
2940: PPUSH
// if not mines then
2941: LD_VAR 0 2
2945: NOT
2946: IFFALSE 2950
// exit ;
2948: GO 3094
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2950: LD_ADDR_VAR 0 5
2954: PUSH
2955: LD_INT 81
2957: PUSH
2958: LD_VAR 0 1
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 3
2969: PUSH
2970: LD_INT 21
2972: PUSH
2973: LD_INT 3
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PPUSH
2988: CALL_OW 69
2992: ST_TO_ADDR
// for i in mines do
2993: LD_ADDR_VAR 0 4
2997: PUSH
2998: LD_VAR 0 2
3002: PUSH
3003: FOR_IN
3004: IFFALSE 3092
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3006: LD_VAR 0 4
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PPUSH
3024: CALL_OW 458
3028: NOT
3029: IFFALSE 3033
// continue ;
3031: GO 3003
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3033: LD_VAR 0 4
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: PPUSH
3042: LD_VAR 0 4
3046: PUSH
3047: LD_INT 2
3049: ARRAY
3050: PPUSH
3051: CALL_OW 428
3055: PUSH
3056: LD_VAR 0 5
3060: IN
3061: IFFALSE 3090
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3063: LD_VAR 0 4
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: LD_VAR 0 4
3076: PUSH
3077: LD_INT 2
3079: ARRAY
3080: PPUSH
3081: LD_VAR 0 1
3085: PPUSH
3086: CALL_OW 456
// end ;
3090: GO 3003
3092: POP
3093: POP
// end ;
3094: LD_VAR 0 3
3098: RET
// export function Count ( array ) ; begin
3099: LD_INT 0
3101: PPUSH
// result := array + 0 ;
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: LD_VAR 0 1
3111: PUSH
3112: LD_INT 0
3114: PLUS
3115: ST_TO_ADDR
// end ;
3116: LD_VAR 0 2
3120: RET
// export function IsEmpty ( building ) ; begin
3121: LD_INT 0
3123: PPUSH
// if not building then
3124: LD_VAR 0 1
3128: NOT
3129: IFFALSE 3133
// exit ;
3131: GO 3176
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3133: LD_ADDR_VAR 0 2
3137: PUSH
3138: LD_VAR 0 1
3142: PUSH
3143: LD_INT 22
3145: PUSH
3146: LD_VAR 0 1
3150: PPUSH
3151: CALL_OW 255
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: PUSH
3160: LD_INT 58
3162: PUSH
3163: EMPTY
3164: LIST
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PPUSH
3170: CALL_OW 69
3174: IN
3175: ST_TO_ADDR
// end ;
3176: LD_VAR 0 2
3180: RET
// export function IsNotFull ( building ) ; var places ; begin
3181: LD_INT 0
3183: PPUSH
3184: PPUSH
// if not building then
3185: LD_VAR 0 1
3189: NOT
3190: IFFALSE 3194
// exit ;
3192: GO 3222
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
3194: LD_ADDR_VAR 0 2
3198: PUSH
3199: LD_VAR 0 1
3203: PPUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 62
3209: PUSH
3210: EMPTY
3211: LIST
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PPUSH
3217: CALL_OW 72
3221: ST_TO_ADDR
// end ;
3222: LD_VAR 0 2
3226: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3227: LD_INT 0
3229: PPUSH
3230: PPUSH
3231: PPUSH
3232: PPUSH
// tmp := [ ] ;
3233: LD_ADDR_VAR 0 3
3237: PUSH
3238: EMPTY
3239: ST_TO_ADDR
// list := [ ] ;
3240: LD_ADDR_VAR 0 5
3244: PUSH
3245: EMPTY
3246: ST_TO_ADDR
// for i = 16 to 25 do
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: DOUBLE
3253: LD_INT 16
3255: DEC
3256: ST_TO_ADDR
3257: LD_INT 25
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3334
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3263: LD_ADDR_VAR 0 3
3267: PUSH
3268: LD_VAR 0 3
3272: PUSH
3273: LD_INT 22
3275: PUSH
3276: LD_VAR 0 1
3280: PPUSH
3281: CALL_OW 255
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 91
3292: PUSH
3293: LD_VAR 0 1
3297: PUSH
3298: LD_INT 6
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: LIST
3305: PUSH
3306: LD_INT 30
3308: PUSH
3309: LD_VAR 0 4
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: PPUSH
3326: CALL_OW 69
3330: ADD
3331: ST_TO_ADDR
3332: GO 3260
3334: POP
3335: POP
// for i = 1 to tmp do
3336: LD_ADDR_VAR 0 4
3340: PUSH
3341: DOUBLE
3342: LD_INT 1
3344: DEC
3345: ST_TO_ADDR
3346: LD_VAR 0 3
3350: PUSH
3351: FOR_TO
3352: IFFALSE 3440
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3354: LD_ADDR_VAR 0 5
3358: PUSH
3359: LD_VAR 0 5
3363: PUSH
3364: LD_VAR 0 3
3368: PUSH
3369: LD_VAR 0 4
3373: ARRAY
3374: PPUSH
3375: CALL_OW 266
3379: PUSH
3380: LD_VAR 0 3
3384: PUSH
3385: LD_VAR 0 4
3389: ARRAY
3390: PPUSH
3391: CALL_OW 250
3395: PUSH
3396: LD_VAR 0 3
3400: PUSH
3401: LD_VAR 0 4
3405: ARRAY
3406: PPUSH
3407: CALL_OW 251
3411: PUSH
3412: LD_VAR 0 3
3416: PUSH
3417: LD_VAR 0 4
3421: ARRAY
3422: PPUSH
3423: CALL_OW 254
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: EMPTY
3435: LIST
3436: ADD
3437: ST_TO_ADDR
3438: GO 3351
3440: POP
3441: POP
// result := list ;
3442: LD_ADDR_VAR 0 2
3446: PUSH
3447: LD_VAR 0 5
3451: ST_TO_ADDR
// end ;
3452: LD_VAR 0 2
3456: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3457: LD_INT 0
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
// if not factory then
3466: LD_VAR 0 1
3470: NOT
3471: IFFALSE 3475
// exit ;
3473: GO 4078
// if control = control_apeman then
3475: LD_VAR 0 4
3479: PUSH
3480: LD_INT 5
3482: EQUAL
3483: IFFALSE 3592
// begin tmp := UnitsInside ( factory ) ;
3485: LD_ADDR_VAR 0 8
3489: PUSH
3490: LD_VAR 0 1
3494: PPUSH
3495: CALL_OW 313
3499: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3500: LD_VAR 0 8
3504: PPUSH
3505: LD_INT 25
3507: PUSH
3508: LD_INT 12
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PPUSH
3515: CALL_OW 72
3519: NOT
3520: IFFALSE 3530
// control := control_manual ;
3522: LD_ADDR_VAR 0 4
3526: PUSH
3527: LD_INT 1
3529: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3530: LD_ADDR_VAR 0 8
3534: PUSH
3535: LD_VAR 0 1
3539: PPUSH
3540: CALL 3227 0 1
3544: ST_TO_ADDR
// if tmp then
3545: LD_VAR 0 8
3549: IFFALSE 3592
// begin for i in tmp do
3551: LD_ADDR_VAR 0 7
3555: PUSH
3556: LD_VAR 0 8
3560: PUSH
3561: FOR_IN
3562: IFFALSE 3590
// if i [ 1 ] = b_ext_radio then
3564: LD_VAR 0 7
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PUSH
3573: LD_INT 22
3575: EQUAL
3576: IFFALSE 3588
// begin control := control_remote ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 2
3585: ST_TO_ADDR
// break ;
3586: GO 3590
// end ;
3588: GO 3561
3590: POP
3591: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3592: LD_VAR 0 1
3596: PPUSH
3597: LD_VAR 0 2
3601: PPUSH
3602: LD_VAR 0 3
3606: PPUSH
3607: LD_VAR 0 4
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: CALL_OW 448
3621: IFFALSE 3656
// begin result := [ chassis , engine , control , weapon ] ;
3623: LD_ADDR_VAR 0 6
3627: PUSH
3628: LD_VAR 0 2
3632: PUSH
3633: LD_VAR 0 3
3637: PUSH
3638: LD_VAR 0 4
3642: PUSH
3643: LD_VAR 0 5
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: ST_TO_ADDR
// exit ;
3654: GO 4078
// end ; _chassis := AvailableChassisList ( factory ) ;
3656: LD_ADDR_VAR 0 9
3660: PUSH
3661: LD_VAR 0 1
3665: PPUSH
3666: CALL_OW 475
3670: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3671: LD_ADDR_VAR 0 11
3675: PUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: CALL_OW 476
3685: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3686: LD_ADDR_VAR 0 12
3690: PUSH
3691: LD_VAR 0 1
3695: PPUSH
3696: CALL_OW 477
3700: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3701: LD_ADDR_VAR 0 10
3705: PUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 478
3715: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3716: LD_VAR 0 9
3720: NOT
3721: IFTRUE 3730
3723: PUSH
3724: LD_VAR 0 11
3728: NOT
3729: OR
3730: IFTRUE 3739
3732: PUSH
3733: LD_VAR 0 12
3737: NOT
3738: OR
3739: IFTRUE 3748
3741: PUSH
3742: LD_VAR 0 10
3746: NOT
3747: OR
3748: IFFALSE 3783
// begin result := [ chassis , engine , control , weapon ] ;
3750: LD_ADDR_VAR 0 6
3754: PUSH
3755: LD_VAR 0 2
3759: PUSH
3760: LD_VAR 0 3
3764: PUSH
3765: LD_VAR 0 4
3769: PUSH
3770: LD_VAR 0 5
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: ST_TO_ADDR
// exit ;
3781: GO 4078
// end ; if not chassis in _chassis then
3783: LD_VAR 0 2
3787: PUSH
3788: LD_VAR 0 9
3792: IN
3793: NOT
3794: IFFALSE 3820
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_VAR 0 9
3805: PUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_VAR 0 9
3813: PPUSH
3814: CALL_OW 12
3818: ARRAY
3819: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3820: LD_VAR 0 2
3824: PPUSH
3825: LD_VAR 0 3
3829: PPUSH
3830: CALL 4083 0 2
3834: NOT
3835: IFFALSE 3896
// repeat engine := _engine [ 1 ] ;
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: LD_VAR 0 11
3846: PUSH
3847: LD_INT 1
3849: ARRAY
3850: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3851: LD_ADDR_VAR 0 11
3855: PUSH
3856: LD_VAR 0 11
3860: PPUSH
3861: LD_INT 1
3863: PPUSH
3864: CALL_OW 3
3868: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3869: LD_VAR 0 2
3873: PPUSH
3874: LD_VAR 0 3
3878: PPUSH
3879: CALL 4083 0 2
3883: IFTRUE 3894
3885: PUSH
3886: LD_VAR 0 11
3890: PUSH
3891: EMPTY
3892: EQUAL
3893: OR
3894: IFFALSE 3837
// if not control in _control then
3896: LD_VAR 0 4
3900: PUSH
3901: LD_VAR 0 12
3905: IN
3906: NOT
3907: IFFALSE 3933
// control := _control [ rand ( 1 , _control ) ] ;
3909: LD_ADDR_VAR 0 4
3913: PUSH
3914: LD_VAR 0 12
3918: PUSH
3919: LD_INT 1
3921: PPUSH
3922: LD_VAR 0 12
3926: PPUSH
3927: CALL_OW 12
3931: ARRAY
3932: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3933: LD_VAR 0 2
3937: PPUSH
3938: LD_VAR 0 5
3942: PPUSH
3943: CALL 4305 0 2
3947: NOT
3948: IFFALSE 4009
// repeat weapon := _weapon [ 1 ] ;
3950: LD_ADDR_VAR 0 5
3954: PUSH
3955: LD_VAR 0 10
3959: PUSH
3960: LD_INT 1
3962: ARRAY
3963: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3964: LD_ADDR_VAR 0 10
3968: PUSH
3969: LD_VAR 0 10
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 3
3981: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3982: LD_VAR 0 2
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: CALL 4305 0 2
3996: IFTRUE 4007
3998: PUSH
3999: LD_VAR 0 10
4003: PUSH
4004: EMPTY
4005: EQUAL
4006: OR
4007: IFFALSE 3950
// result := [ ] ;
4009: LD_ADDR_VAR 0 6
4013: PUSH
4014: EMPTY
4015: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4016: LD_VAR 0 1
4020: PPUSH
4021: LD_VAR 0 2
4025: PPUSH
4026: LD_VAR 0 3
4030: PPUSH
4031: LD_VAR 0 4
4035: PPUSH
4036: LD_VAR 0 5
4040: PPUSH
4041: CALL_OW 448
4045: IFFALSE 4078
// result := [ chassis , engine , control , weapon ] ;
4047: LD_ADDR_VAR 0 6
4051: PUSH
4052: LD_VAR 0 2
4056: PUSH
4057: LD_VAR 0 3
4061: PUSH
4062: LD_VAR 0 4
4066: PUSH
4067: LD_VAR 0 5
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: ST_TO_ADDR
// end ;
4078: LD_VAR 0 6
4082: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4083: LD_INT 0
4085: PPUSH
// if not chassis or not engine then
4086: LD_VAR 0 1
4090: NOT
4091: IFTRUE 4100
4093: PUSH
4094: LD_VAR 0 2
4098: NOT
4099: OR
4100: IFFALSE 4104
// exit ;
4102: GO 4300
// case engine of engine_solar :
4104: LD_VAR 0 2
4108: PUSH
4109: LD_INT 2
4111: DOUBLE
4112: EQUAL
4113: IFTRUE 4117
4115: GO 4155
4117: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4118: LD_ADDR_VAR 0 3
4122: PUSH
4123: LD_INT 11
4125: PUSH
4126: LD_INT 12
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: LD_INT 14
4134: PUSH
4135: LD_INT 1
4137: PUSH
4138: LD_INT 2
4140: PUSH
4141: LD_INT 3
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: ST_TO_ADDR
4153: GO 4284
4155: LD_INT 1
4157: DOUBLE
4158: EQUAL
4159: IFTRUE 4163
4161: GO 4225
4163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4164: LD_ADDR_VAR 0 3
4168: PUSH
4169: LD_INT 11
4171: PUSH
4172: LD_INT 12
4174: PUSH
4175: LD_INT 13
4177: PUSH
4178: LD_INT 14
4180: PUSH
4181: LD_INT 1
4183: PUSH
4184: LD_INT 2
4186: PUSH
4187: LD_INT 3
4189: PUSH
4190: LD_INT 4
4192: PUSH
4193: LD_INT 5
4195: PUSH
4196: LD_INT 21
4198: PUSH
4199: LD_INT 23
4201: PUSH
4202: LD_INT 22
4204: PUSH
4205: LD_INT 24
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: ST_TO_ADDR
4223: GO 4284
4225: LD_INT 3
4227: DOUBLE
4228: EQUAL
4229: IFTRUE 4233
4231: GO 4283
4233: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4234: LD_ADDR_VAR 0 3
4238: PUSH
4239: LD_INT 13
4241: PUSH
4242: LD_INT 14
4244: PUSH
4245: LD_INT 2
4247: PUSH
4248: LD_INT 3
4250: PUSH
4251: LD_INT 4
4253: PUSH
4254: LD_INT 5
4256: PUSH
4257: LD_INT 21
4259: PUSH
4260: LD_INT 22
4262: PUSH
4263: LD_INT 23
4265: PUSH
4266: LD_INT 24
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: ST_TO_ADDR
4281: GO 4284
4283: POP
// result := ( chassis in result ) ;
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_VAR 0 1
4293: PUSH
4294: LD_VAR 0 3
4298: IN
4299: ST_TO_ADDR
// end ;
4300: LD_VAR 0 3
4304: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4305: LD_INT 0
4307: PPUSH
// if not chassis or not weapon then
4308: LD_VAR 0 1
4312: NOT
4313: IFTRUE 4322
4315: PUSH
4316: LD_VAR 0 2
4320: NOT
4321: OR
4322: IFFALSE 4326
// exit ;
4324: GO 5386
// case weapon of us_machine_gun :
4326: LD_VAR 0 2
4330: PUSH
4331: LD_INT 2
4333: DOUBLE
4334: EQUAL
4335: IFTRUE 4339
4337: GO 4369
4339: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4340: LD_ADDR_VAR 0 3
4344: PUSH
4345: LD_INT 1
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: LD_INT 3
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: ST_TO_ADDR
4367: GO 5370
4369: LD_INT 3
4371: DOUBLE
4372: EQUAL
4373: IFTRUE 4377
4375: GO 4407
4377: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4378: LD_ADDR_VAR 0 3
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 3
4391: PUSH
4392: LD_INT 4
4394: PUSH
4395: LD_INT 5
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: ST_TO_ADDR
4405: GO 5370
4407: LD_INT 11
4409: DOUBLE
4410: EQUAL
4411: IFTRUE 4415
4413: GO 4445
4415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4416: LD_ADDR_VAR 0 3
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: LD_INT 2
4426: PUSH
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 5
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: ST_TO_ADDR
4443: GO 5370
4445: LD_INT 4
4447: DOUBLE
4448: EQUAL
4449: IFTRUE 4453
4451: GO 4479
4453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 2
4461: PUSH
4462: LD_INT 3
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: LD_INT 5
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: ST_TO_ADDR
4477: GO 5370
4479: LD_INT 5
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4513
4487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4488: LD_ADDR_VAR 0 3
4492: PUSH
4493: LD_INT 2
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: LD_INT 4
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: ST_TO_ADDR
4511: GO 5370
4513: LD_INT 9
4515: DOUBLE
4516: EQUAL
4517: IFTRUE 4521
4519: GO 4547
4521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4522: LD_ADDR_VAR 0 3
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 3
4532: PUSH
4533: LD_INT 4
4535: PUSH
4536: LD_INT 5
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
4545: GO 5370
4547: LD_INT 7
4549: DOUBLE
4550: EQUAL
4551: IFTRUE 4555
4553: GO 4581
4555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4556: LD_ADDR_VAR 0 3
4560: PUSH
4561: LD_INT 2
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 5
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: ST_TO_ADDR
4579: GO 5370
4581: LD_INT 12
4583: DOUBLE
4584: EQUAL
4585: IFTRUE 4589
4587: GO 4615
4589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_INT 2
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 4
4603: PUSH
4604: LD_INT 5
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: ST_TO_ADDR
4613: GO 5370
4615: LD_INT 13
4617: DOUBLE
4618: EQUAL
4619: IFTRUE 4623
4621: GO 4649
4623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4624: LD_ADDR_VAR 0 3
4628: PUSH
4629: LD_INT 2
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: LD_INT 4
4637: PUSH
4638: LD_INT 5
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: ST_TO_ADDR
4647: GO 5370
4649: LD_INT 14
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4675
4657: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: LD_INT 4
4665: PUSH
4666: LD_INT 5
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: ST_TO_ADDR
4673: GO 5370
4675: LD_INT 6
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4701
4683: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4684: LD_ADDR_VAR 0 3
4688: PUSH
4689: LD_INT 4
4691: PUSH
4692: LD_INT 5
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: ST_TO_ADDR
4699: GO 5370
4701: LD_INT 10
4703: DOUBLE
4704: EQUAL
4705: IFTRUE 4709
4707: GO 4727
4709: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: LD_INT 4
4717: PUSH
4718: LD_INT 5
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: ST_TO_ADDR
4725: GO 5370
4727: LD_INT 22
4729: DOUBLE
4730: EQUAL
4731: IFTRUE 4735
4733: GO 4761
4735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4736: LD_ADDR_VAR 0 3
4740: PUSH
4741: LD_INT 11
4743: PUSH
4744: LD_INT 12
4746: PUSH
4747: LD_INT 13
4749: PUSH
4750: LD_INT 14
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: ST_TO_ADDR
4759: GO 5370
4761: LD_INT 23
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4795
4769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4770: LD_ADDR_VAR 0 3
4774: PUSH
4775: LD_INT 11
4777: PUSH
4778: LD_INT 12
4780: PUSH
4781: LD_INT 13
4783: PUSH
4784: LD_INT 14
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: ST_TO_ADDR
4793: GO 5370
4795: LD_INT 24
4797: DOUBLE
4798: EQUAL
4799: IFTRUE 4803
4801: GO 4829
4803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_INT 11
4811: PUSH
4812: LD_INT 12
4814: PUSH
4815: LD_INT 13
4817: PUSH
4818: LD_INT 14
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: ST_TO_ADDR
4827: GO 5370
4829: LD_INT 30
4831: DOUBLE
4832: EQUAL
4833: IFTRUE 4837
4835: GO 4863
4837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: LD_INT 11
4845: PUSH
4846: LD_INT 12
4848: PUSH
4849: LD_INT 13
4851: PUSH
4852: LD_INT 14
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: ST_TO_ADDR
4861: GO 5370
4863: LD_INT 25
4865: DOUBLE
4866: EQUAL
4867: IFTRUE 4871
4869: GO 4889
4871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 13
4879: PUSH
4880: LD_INT 14
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: ST_TO_ADDR
4887: GO 5370
4889: LD_INT 27
4891: DOUBLE
4892: EQUAL
4893: IFTRUE 4897
4895: GO 4915
4897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4898: LD_ADDR_VAR 0 3
4902: PUSH
4903: LD_INT 13
4905: PUSH
4906: LD_INT 14
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: ST_TO_ADDR
4913: GO 5370
4915: LD_INT 92
4917: DOUBLE
4918: EQUAL
4919: IFTRUE 4923
4921: GO 4949
4923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: LD_INT 11
4931: PUSH
4932: LD_INT 12
4934: PUSH
4935: LD_INT 13
4937: PUSH
4938: LD_INT 14
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: ST_TO_ADDR
4947: GO 5370
4949: LD_INT 28
4951: DOUBLE
4952: EQUAL
4953: IFTRUE 4957
4955: GO 4975
4957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4958: LD_ADDR_VAR 0 3
4962: PUSH
4963: LD_INT 13
4965: PUSH
4966: LD_INT 14
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: ST_TO_ADDR
4973: GO 5370
4975: LD_INT 29
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 5001
4983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4984: LD_ADDR_VAR 0 3
4988: PUSH
4989: LD_INT 13
4991: PUSH
4992: LD_INT 14
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: ST_TO_ADDR
4999: GO 5370
5001: LD_INT 31
5003: DOUBLE
5004: EQUAL
5005: IFTRUE 5009
5007: GO 5027
5009: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5010: LD_ADDR_VAR 0 3
5014: PUSH
5015: LD_INT 13
5017: PUSH
5018: LD_INT 14
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: ST_TO_ADDR
5025: GO 5370
5027: LD_INT 26
5029: DOUBLE
5030: EQUAL
5031: IFTRUE 5035
5033: GO 5053
5035: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: LD_INT 13
5043: PUSH
5044: LD_INT 14
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: ST_TO_ADDR
5051: GO 5370
5053: LD_INT 42
5055: DOUBLE
5056: EQUAL
5057: IFTRUE 5061
5059: GO 5087
5061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_INT 21
5069: PUSH
5070: LD_INT 22
5072: PUSH
5073: LD_INT 23
5075: PUSH
5076: LD_INT 24
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: ST_TO_ADDR
5085: GO 5370
5087: LD_INT 43
5089: DOUBLE
5090: EQUAL
5091: IFTRUE 5095
5093: GO 5121
5095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5096: LD_ADDR_VAR 0 3
5100: PUSH
5101: LD_INT 21
5103: PUSH
5104: LD_INT 22
5106: PUSH
5107: LD_INT 23
5109: PUSH
5110: LD_INT 24
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
5119: GO 5370
5121: LD_INT 44
5123: DOUBLE
5124: EQUAL
5125: IFTRUE 5129
5127: GO 5155
5129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5130: LD_ADDR_VAR 0 3
5134: PUSH
5135: LD_INT 21
5137: PUSH
5138: LD_INT 22
5140: PUSH
5141: LD_INT 23
5143: PUSH
5144: LD_INT 24
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: ST_TO_ADDR
5153: GO 5370
5155: LD_INT 45
5157: DOUBLE
5158: EQUAL
5159: IFTRUE 5163
5161: GO 5189
5163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5164: LD_ADDR_VAR 0 3
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 23
5177: PUSH
5178: LD_INT 24
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: ST_TO_ADDR
5187: GO 5370
5189: LD_INT 49
5191: DOUBLE
5192: EQUAL
5193: IFTRUE 5197
5195: GO 5223
5197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5198: LD_ADDR_VAR 0 3
5202: PUSH
5203: LD_INT 21
5205: PUSH
5206: LD_INT 22
5208: PUSH
5209: LD_INT 23
5211: PUSH
5212: LD_INT 24
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: ST_TO_ADDR
5221: GO 5370
5223: LD_INT 51
5225: DOUBLE
5226: EQUAL
5227: IFTRUE 5231
5229: GO 5257
5231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5232: LD_ADDR_VAR 0 3
5236: PUSH
5237: LD_INT 21
5239: PUSH
5240: LD_INT 22
5242: PUSH
5243: LD_INT 23
5245: PUSH
5246: LD_INT 24
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: ST_TO_ADDR
5255: GO 5370
5257: LD_INT 52
5259: DOUBLE
5260: EQUAL
5261: IFTRUE 5265
5263: GO 5291
5265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_INT 21
5273: PUSH
5274: LD_INT 22
5276: PUSH
5277: LD_INT 23
5279: PUSH
5280: LD_INT 24
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: ST_TO_ADDR
5289: GO 5370
5291: LD_INT 53
5293: DOUBLE
5294: EQUAL
5295: IFTRUE 5299
5297: GO 5317
5299: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5300: LD_ADDR_VAR 0 3
5304: PUSH
5305: LD_INT 23
5307: PUSH
5308: LD_INT 24
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: ST_TO_ADDR
5315: GO 5370
5317: LD_INT 46
5319: DOUBLE
5320: EQUAL
5321: IFTRUE 5325
5323: GO 5343
5325: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_INT 23
5333: PUSH
5334: LD_INT 24
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: ST_TO_ADDR
5341: GO 5370
5343: LD_INT 47
5345: DOUBLE
5346: EQUAL
5347: IFTRUE 5351
5349: GO 5369
5351: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5352: LD_ADDR_VAR 0 3
5356: PUSH
5357: LD_INT 23
5359: PUSH
5360: LD_INT 24
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: ST_TO_ADDR
5367: GO 5370
5369: POP
// result := ( chassis in result ) ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_VAR 0 1
5379: PUSH
5380: LD_VAR 0 3
5384: IN
5385: ST_TO_ADDR
// end ;
5386: LD_VAR 0 3
5390: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5391: LD_INT 0
5393: PPUSH
5394: PPUSH
5395: PPUSH
5396: PPUSH
5397: PPUSH
5398: PPUSH
5399: PPUSH
// result := array ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_VAR 0 1
5409: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5410: LD_VAR 0 1
5414: NOT
5415: IFTRUE 5424
5417: PUSH
5418: LD_VAR 0 2
5422: NOT
5423: OR
5424: IFTRUE 5433
5426: PUSH
5427: LD_VAR 0 3
5431: NOT
5432: OR
5433: IFTRUE 5447
5435: PUSH
5436: LD_VAR 0 2
5440: PUSH
5441: LD_VAR 0 1
5445: GREATER
5446: OR
5447: IFTRUE 5461
5449: PUSH
5450: LD_VAR 0 3
5454: PUSH
5455: LD_VAR 0 1
5459: GREATER
5460: OR
5461: IFFALSE 5465
// exit ;
5463: GO 5761
// if direction then
5465: LD_VAR 0 4
5469: IFFALSE 5533
// begin d := 1 ;
5471: LD_ADDR_VAR 0 9
5475: PUSH
5476: LD_INT 1
5478: ST_TO_ADDR
// if i_from > i_to then
5479: LD_VAR 0 2
5483: PUSH
5484: LD_VAR 0 3
5488: GREATER
5489: IFFALSE 5515
// length := ( array - i_from ) + i_to else
5491: LD_ADDR_VAR 0 11
5495: PUSH
5496: LD_VAR 0 1
5500: PUSH
5501: LD_VAR 0 2
5505: MINUS
5506: PUSH
5507: LD_VAR 0 3
5511: PLUS
5512: ST_TO_ADDR
5513: GO 5531
// length := i_to - i_from ;
5515: LD_ADDR_VAR 0 11
5519: PUSH
5520: LD_VAR 0 3
5524: PUSH
5525: LD_VAR 0 2
5529: MINUS
5530: ST_TO_ADDR
// end else
5531: GO 5594
// begin d := - 1 ;
5533: LD_ADDR_VAR 0 9
5537: PUSH
5538: LD_INT 1
5540: NEG
5541: ST_TO_ADDR
// if i_from > i_to then
5542: LD_VAR 0 2
5546: PUSH
5547: LD_VAR 0 3
5551: GREATER
5552: IFFALSE 5572
// length := i_from - i_to else
5554: LD_ADDR_VAR 0 11
5558: PUSH
5559: LD_VAR 0 2
5563: PUSH
5564: LD_VAR 0 3
5568: MINUS
5569: ST_TO_ADDR
5570: GO 5594
// length := ( array - i_to ) + i_from ;
5572: LD_ADDR_VAR 0 11
5576: PUSH
5577: LD_VAR 0 1
5581: PUSH
5582: LD_VAR 0 3
5586: MINUS
5587: PUSH
5588: LD_VAR 0 2
5592: PLUS
5593: ST_TO_ADDR
// end ; if not length then
5594: LD_VAR 0 11
5598: NOT
5599: IFFALSE 5603
// exit ;
5601: GO 5761
// tmp := array ;
5603: LD_ADDR_VAR 0 10
5607: PUSH
5608: LD_VAR 0 1
5612: ST_TO_ADDR
// for i = 1 to length do
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: DOUBLE
5619: LD_INT 1
5621: DEC
5622: ST_TO_ADDR
5623: LD_VAR 0 11
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5749
// begin for j = 1 to array do
5631: LD_ADDR_VAR 0 7
5635: PUSH
5636: DOUBLE
5637: LD_INT 1
5639: DEC
5640: ST_TO_ADDR
5641: LD_VAR 0 1
5645: PUSH
5646: FOR_TO
5647: IFFALSE 5735
// begin k := j + d ;
5649: LD_ADDR_VAR 0 8
5653: PUSH
5654: LD_VAR 0 7
5658: PUSH
5659: LD_VAR 0 9
5663: PLUS
5664: ST_TO_ADDR
// if k > array then
5665: LD_VAR 0 8
5669: PUSH
5670: LD_VAR 0 1
5674: GREATER
5675: IFFALSE 5685
// k := 1 ;
5677: LD_ADDR_VAR 0 8
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// if not k then
5685: LD_VAR 0 8
5689: NOT
5690: IFFALSE 5702
// k := array ;
5692: LD_ADDR_VAR 0 8
5696: PUSH
5697: LD_VAR 0 1
5701: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5702: LD_ADDR_VAR 0 10
5706: PUSH
5707: LD_VAR 0 10
5711: PPUSH
5712: LD_VAR 0 8
5716: PPUSH
5717: LD_VAR 0 1
5721: PUSH
5722: LD_VAR 0 7
5726: ARRAY
5727: PPUSH
5728: CALL_OW 1
5732: ST_TO_ADDR
// end ;
5733: GO 5646
5735: POP
5736: POP
// array := tmp ;
5737: LD_ADDR_VAR 0 1
5741: PUSH
5742: LD_VAR 0 10
5746: ST_TO_ADDR
// end ;
5747: GO 5628
5749: POP
5750: POP
// result := array ;
5751: LD_ADDR_VAR 0 5
5755: PUSH
5756: LD_VAR 0 1
5760: ST_TO_ADDR
// end ;
5761: LD_VAR 0 5
5765: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5766: LD_INT 0
5768: PPUSH
5769: PPUSH
// result := 0 ;
5770: LD_ADDR_VAR 0 3
5774: PUSH
5775: LD_INT 0
5777: ST_TO_ADDR
// if not array or not value in array then
5778: LD_VAR 0 1
5782: NOT
5783: IFTRUE 5798
5785: PUSH
5786: LD_VAR 0 2
5790: PUSH
5791: LD_VAR 0 1
5795: IN
5796: NOT
5797: OR
5798: IFFALSE 5802
// exit ;
5800: GO 5856
// for i = 1 to array do
5802: LD_ADDR_VAR 0 4
5806: PUSH
5807: DOUBLE
5808: LD_INT 1
5810: DEC
5811: ST_TO_ADDR
5812: LD_VAR 0 1
5816: PUSH
5817: FOR_TO
5818: IFFALSE 5854
// if value = array [ i ] then
5820: LD_VAR 0 2
5824: PUSH
5825: LD_VAR 0 1
5829: PUSH
5830: LD_VAR 0 4
5834: ARRAY
5835: EQUAL
5836: IFFALSE 5852
// begin result := i ;
5838: LD_ADDR_VAR 0 3
5842: PUSH
5843: LD_VAR 0 4
5847: ST_TO_ADDR
// exit ;
5848: POP
5849: POP
5850: GO 5856
// end ;
5852: GO 5817
5854: POP
5855: POP
// end ;
5856: LD_VAR 0 3
5860: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5861: LD_INT 0
5863: PPUSH
// vc_chassis := chassis ;
5864: LD_ADDR_OWVAR 37
5868: PUSH
5869: LD_VAR 0 1
5873: ST_TO_ADDR
// vc_engine := engine ;
5874: LD_ADDR_OWVAR 39
5878: PUSH
5879: LD_VAR 0 2
5883: ST_TO_ADDR
// vc_control := control ;
5884: LD_ADDR_OWVAR 38
5888: PUSH
5889: LD_VAR 0 3
5893: ST_TO_ADDR
// vc_weapon := weapon ;
5894: LD_ADDR_OWVAR 40
5898: PUSH
5899: LD_VAR 0 4
5903: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5904: LD_ADDR_OWVAR 41
5908: PUSH
5909: LD_VAR 0 5
5913: ST_TO_ADDR
// end ;
5914: LD_VAR 0 6
5918: RET
// export function WantPlant ( unit ) ; var task ; begin
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
// result := false ;
5923: LD_ADDR_VAR 0 2
5927: PUSH
5928: LD_INT 0
5930: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5931: LD_ADDR_VAR 0 3
5935: PUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: CALL_OW 437
5945: ST_TO_ADDR
// if task then
5946: LD_VAR 0 3
5950: IFFALSE 5978
// if task [ 1 ] [ 1 ] = p then
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: PUSH
5961: LD_INT 1
5963: ARRAY
5964: PUSH
5965: LD_STRING p
5967: EQUAL
5968: IFFALSE 5978
// result := true ;
5970: LD_ADDR_VAR 0 2
5974: PUSH
5975: LD_INT 1
5977: ST_TO_ADDR
// end ;
5978: LD_VAR 0 2
5982: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5983: LD_INT 0
5985: PPUSH
5986: PPUSH
5987: PPUSH
5988: PPUSH
// if pos < 1 then
5989: LD_VAR 0 2
5993: PUSH
5994: LD_INT 1
5996: LESS
5997: IFFALSE 6001
// exit ;
5999: GO 6304
// if pos = 1 then
6001: LD_VAR 0 2
6005: PUSH
6006: LD_INT 1
6008: EQUAL
6009: IFFALSE 6042
// result := Replace ( arr , pos [ 1 ] , value ) else
6011: LD_ADDR_VAR 0 4
6015: PUSH
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PPUSH
6030: LD_VAR 0 3
6034: PPUSH
6035: CALL_OW 1
6039: ST_TO_ADDR
6040: GO 6304
// begin tmp := arr ;
6042: LD_ADDR_VAR 0 6
6046: PUSH
6047: LD_VAR 0 1
6051: ST_TO_ADDR
// s_arr := [ tmp ] ;
6052: LD_ADDR_VAR 0 7
6056: PUSH
6057: LD_VAR 0 6
6061: PUSH
6062: EMPTY
6063: LIST
6064: ST_TO_ADDR
// for i = 1 to pos - 1 do
6065: LD_ADDR_VAR 0 5
6069: PUSH
6070: DOUBLE
6071: LD_INT 1
6073: DEC
6074: ST_TO_ADDR
6075: LD_VAR 0 2
6079: PUSH
6080: LD_INT 1
6082: MINUS
6083: PUSH
6084: FOR_TO
6085: IFFALSE 6130
// begin tmp := tmp [ pos [ i ] ] ;
6087: LD_ADDR_VAR 0 6
6091: PUSH
6092: LD_VAR 0 6
6096: PUSH
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 5
6106: ARRAY
6107: ARRAY
6108: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6109: LD_ADDR_VAR 0 7
6113: PUSH
6114: LD_VAR 0 7
6118: PUSH
6119: LD_VAR 0 6
6123: PUSH
6124: EMPTY
6125: LIST
6126: ADD
6127: ST_TO_ADDR
// end ;
6128: GO 6084
6130: POP
6131: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6132: LD_ADDR_VAR 0 6
6136: PUSH
6137: LD_VAR 0 6
6141: PPUSH
6142: LD_VAR 0 2
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 3
6157: PPUSH
6158: CALL_OW 1
6162: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6163: LD_ADDR_VAR 0 7
6167: PUSH
6168: LD_VAR 0 7
6172: PPUSH
6173: LD_VAR 0 7
6177: PPUSH
6178: LD_VAR 0 6
6182: PPUSH
6183: CALL_OW 1
6187: ST_TO_ADDR
// for i = s_arr downto 2 do
6188: LD_ADDR_VAR 0 5
6192: PUSH
6193: DOUBLE
6194: LD_VAR 0 7
6198: INC
6199: ST_TO_ADDR
6200: LD_INT 2
6202: PUSH
6203: FOR_DOWNTO
6204: IFFALSE 6288
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6206: LD_ADDR_VAR 0 6
6210: PUSH
6211: LD_VAR 0 7
6215: PUSH
6216: LD_VAR 0 5
6220: PUSH
6221: LD_INT 1
6223: MINUS
6224: ARRAY
6225: PPUSH
6226: LD_VAR 0 2
6230: PUSH
6231: LD_VAR 0 5
6235: PUSH
6236: LD_INT 1
6238: MINUS
6239: ARRAY
6240: PPUSH
6241: LD_VAR 0 7
6245: PUSH
6246: LD_VAR 0 5
6250: ARRAY
6251: PPUSH
6252: CALL_OW 1
6256: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6257: LD_ADDR_VAR 0 7
6261: PUSH
6262: LD_VAR 0 7
6266: PPUSH
6267: LD_VAR 0 5
6271: PUSH
6272: LD_INT 1
6274: MINUS
6275: PPUSH
6276: LD_VAR 0 6
6280: PPUSH
6281: CALL_OW 1
6285: ST_TO_ADDR
// end ;
6286: GO 6203
6288: POP
6289: POP
// result := s_arr [ 1 ] ;
6290: LD_ADDR_VAR 0 4
6294: PUSH
6295: LD_VAR 0 7
6299: PUSH
6300: LD_INT 1
6302: ARRAY
6303: ST_TO_ADDR
// end ; end ;
6304: LD_VAR 0 4
6308: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6309: LD_INT 0
6311: PPUSH
6312: PPUSH
// if not list then
6313: LD_VAR 0 1
6317: NOT
6318: IFFALSE 6322
// exit ;
6320: GO 6413
// i := list [ pos1 ] ;
6322: LD_ADDR_VAR 0 5
6326: PUSH
6327: LD_VAR 0 1
6331: PUSH
6332: LD_VAR 0 2
6336: ARRAY
6337: ST_TO_ADDR
// if not i then
6338: LD_VAR 0 5
6342: NOT
6343: IFFALSE 6347
// exit ;
6345: GO 6413
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6347: LD_ADDR_VAR 0 1
6351: PUSH
6352: LD_VAR 0 1
6356: PPUSH
6357: LD_VAR 0 2
6361: PPUSH
6362: LD_VAR 0 1
6366: PUSH
6367: LD_VAR 0 3
6371: ARRAY
6372: PPUSH
6373: CALL_OW 1
6377: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: LD_VAR 0 1
6387: PPUSH
6388: LD_VAR 0 3
6392: PPUSH
6393: LD_VAR 0 5
6397: PPUSH
6398: CALL_OW 1
6402: ST_TO_ADDR
// result := list ;
6403: LD_ADDR_VAR 0 4
6407: PUSH
6408: LD_VAR 0 1
6412: ST_TO_ADDR
// end ;
6413: LD_VAR 0 4
6417: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6418: LD_INT 0
6420: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6421: LD_ADDR_VAR 0 5
6425: PUSH
6426: LD_VAR 0 1
6430: PPUSH
6431: CALL_OW 250
6435: PPUSH
6436: LD_VAR 0 1
6440: PPUSH
6441: CALL_OW 251
6445: PPUSH
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_VAR 0 3
6455: PPUSH
6456: LD_VAR 0 4
6460: PPUSH
6461: CALL 6843 0 5
6465: ST_TO_ADDR
// end ;
6466: LD_VAR 0 5
6470: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
6475: PPUSH
6476: PPUSH
// if not list or not unit then
6477: LD_VAR 0 2
6481: NOT
6482: IFTRUE 6491
6484: PUSH
6485: LD_VAR 0 1
6489: NOT
6490: OR
6491: IFFALSE 6495
// exit ;
6493: GO 6838
// result := [ ] ;
6495: LD_ADDR_VAR 0 5
6499: PUSH
6500: EMPTY
6501: ST_TO_ADDR
// for i in list do
6502: LD_ADDR_VAR 0 6
6506: PUSH
6507: LD_VAR 0 2
6511: PUSH
6512: FOR_IN
6513: IFFALSE 6731
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
6515: LD_ADDR_VAR 0 8
6519: PUSH
6520: LD_VAR 0 1
6524: PPUSH
6525: LD_VAR 0 6
6529: PUSH
6530: LD_INT 1
6532: ARRAY
6533: PPUSH
6534: LD_VAR 0 6
6538: PUSH
6539: LD_INT 2
6541: ARRAY
6542: PPUSH
6543: CALL_OW 297
6547: ST_TO_ADDR
// if not Count ( result ) then
6548: LD_VAR 0 5
6552: PPUSH
6553: CALL 3099 0 1
6557: NOT
6558: IFFALSE 6591
// begin result := Join ( result , [ i , tmp ] ) ;
6560: LD_ADDR_VAR 0 5
6564: PUSH
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_VAR 0 6
6574: PUSH
6575: LD_VAR 0 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PPUSH
6584: CALL 39031 0 2
6588: ST_TO_ADDR
// continue ;
6589: GO 6512
// end ; if result [ result ] [ 2 ] <= tmp then
6591: LD_VAR 0 5
6595: PUSH
6596: LD_VAR 0 5
6600: ARRAY
6601: PUSH
6602: LD_INT 2
6604: ARRAY
6605: PUSH
6606: LD_VAR 0 8
6610: LESSEQUAL
6611: IFFALSE 6644
// result := Join ( result , [ i , tmp ] ) else
6613: LD_ADDR_VAR 0 5
6617: PUSH
6618: LD_VAR 0 5
6622: PPUSH
6623: LD_VAR 0 6
6627: PUSH
6628: LD_VAR 0 8
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PPUSH
6637: CALL 39031 0 2
6641: ST_TO_ADDR
6642: GO 6729
// begin for j := 1 to Count ( result ) do
6644: LD_ADDR_VAR 0 7
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_VAR 0 5
6658: PPUSH
6659: CALL 3099 0 1
6663: PUSH
6664: FOR_TO
6665: IFFALSE 6727
// begin if tmp < result [ j ] [ 2 ] then
6667: LD_VAR 0 8
6671: PUSH
6672: LD_VAR 0 5
6676: PUSH
6677: LD_VAR 0 7
6681: ARRAY
6682: PUSH
6683: LD_INT 2
6685: ARRAY
6686: LESS
6687: IFFALSE 6725
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6689: LD_ADDR_VAR 0 5
6693: PUSH
6694: LD_VAR 0 5
6698: PPUSH
6699: LD_VAR 0 7
6703: PPUSH
6704: LD_VAR 0 6
6708: PUSH
6709: LD_VAR 0 8
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PPUSH
6718: CALL_OW 2
6722: ST_TO_ADDR
// break ;
6723: GO 6727
// end ; end ;
6725: GO 6664
6727: POP
6728: POP
// end ; end ;
6729: GO 6512
6731: POP
6732: POP
// if result and not asc then
6733: LD_VAR 0 5
6737: IFFALSE 6746
6739: PUSH
6740: LD_VAR 0 3
6744: NOT
6745: AND
6746: IFFALSE 6763
// result := ReverseArray ( result ) ;
6748: LD_ADDR_VAR 0 5
6752: PUSH
6753: LD_VAR 0 5
6757: PPUSH
6758: CALL 34121 0 1
6762: ST_TO_ADDR
// tmp := [ ] ;
6763: LD_ADDR_VAR 0 8
6767: PUSH
6768: EMPTY
6769: ST_TO_ADDR
// if mode then
6770: LD_VAR 0 4
6774: IFFALSE 6838
// begin for i := 1 to result do
6776: LD_ADDR_VAR 0 6
6780: PUSH
6781: DOUBLE
6782: LD_INT 1
6784: DEC
6785: ST_TO_ADDR
6786: LD_VAR 0 5
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6826
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
6794: LD_ADDR_VAR 0 8
6798: PUSH
6799: LD_VAR 0 8
6803: PPUSH
6804: LD_VAR 0 5
6808: PUSH
6809: LD_VAR 0 6
6813: ARRAY
6814: PUSH
6815: LD_INT 1
6817: ARRAY
6818: PPUSH
6819: CALL 39031 0 2
6823: ST_TO_ADDR
6824: GO 6791
6826: POP
6827: POP
// result := tmp ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_VAR 0 8
6837: ST_TO_ADDR
// end ; end ;
6838: LD_VAR 0 5
6842: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6843: LD_INT 0
6845: PPUSH
6846: PPUSH
6847: PPUSH
6848: PPUSH
// if not list then
6849: LD_VAR 0 3
6853: NOT
6854: IFFALSE 6858
// exit ;
6856: GO 7248
// result := [ ] ;
6858: LD_ADDR_VAR 0 6
6862: PUSH
6863: EMPTY
6864: ST_TO_ADDR
// for i in list do
6865: LD_ADDR_VAR 0 7
6869: PUSH
6870: LD_VAR 0 3
6874: PUSH
6875: FOR_IN
6876: IFFALSE 7078
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6878: LD_ADDR_VAR 0 9
6882: PUSH
6883: LD_VAR 0 7
6887: PPUSH
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_VAR 0 2
6897: PPUSH
6898: CALL_OW 297
6902: ST_TO_ADDR
// if not result then
6903: LD_VAR 0 6
6907: NOT
6908: IFFALSE 6934
// result := [ [ i , tmp ] ] else
6910: LD_ADDR_VAR 0 6
6914: PUSH
6915: LD_VAR 0 7
6919: PUSH
6920: LD_VAR 0 9
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: ST_TO_ADDR
6932: GO 7076
// begin if result [ result ] [ 2 ] <= tmp then
6934: LD_VAR 0 6
6938: PUSH
6939: LD_VAR 0 6
6943: ARRAY
6944: PUSH
6945: LD_INT 2
6947: ARRAY
6948: PUSH
6949: LD_VAR 0 9
6953: LESSEQUAL
6954: IFFALSE 6996
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6956: LD_ADDR_VAR 0 6
6960: PUSH
6961: LD_VAR 0 6
6965: PPUSH
6966: LD_VAR 0 6
6970: PUSH
6971: LD_INT 1
6973: PLUS
6974: PPUSH
6975: LD_VAR 0 7
6979: PUSH
6980: LD_VAR 0 9
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PPUSH
6989: CALL_OW 2
6993: ST_TO_ADDR
6994: GO 7076
// for j := 1 to result do
6996: LD_ADDR_VAR 0 8
7000: PUSH
7001: DOUBLE
7002: LD_INT 1
7004: DEC
7005: ST_TO_ADDR
7006: LD_VAR 0 6
7010: PUSH
7011: FOR_TO
7012: IFFALSE 7074
// begin if tmp < result [ j ] [ 2 ] then
7014: LD_VAR 0 9
7018: PUSH
7019: LD_VAR 0 6
7023: PUSH
7024: LD_VAR 0 8
7028: ARRAY
7029: PUSH
7030: LD_INT 2
7032: ARRAY
7033: LESS
7034: IFFALSE 7072
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7036: LD_ADDR_VAR 0 6
7040: PUSH
7041: LD_VAR 0 6
7045: PPUSH
7046: LD_VAR 0 8
7050: PPUSH
7051: LD_VAR 0 7
7055: PUSH
7056: LD_VAR 0 9
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PPUSH
7065: CALL_OW 2
7069: ST_TO_ADDR
// break ;
7070: GO 7074
// end ; end ;
7072: GO 7011
7074: POP
7075: POP
// end ; end ;
7076: GO 6875
7078: POP
7079: POP
// if result and not asc then
7080: LD_VAR 0 6
7084: IFFALSE 7093
7086: PUSH
7087: LD_VAR 0 4
7091: NOT
7092: AND
7093: IFFALSE 7168
// begin tmp := result ;
7095: LD_ADDR_VAR 0 9
7099: PUSH
7100: LD_VAR 0 6
7104: ST_TO_ADDR
// for i = tmp downto 1 do
7105: LD_ADDR_VAR 0 7
7109: PUSH
7110: DOUBLE
7111: LD_VAR 0 9
7115: INC
7116: ST_TO_ADDR
7117: LD_INT 1
7119: PUSH
7120: FOR_DOWNTO
7121: IFFALSE 7166
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
7123: LD_ADDR_VAR 0 6
7127: PUSH
7128: LD_VAR 0 6
7132: PPUSH
7133: LD_VAR 0 9
7137: PUSH
7138: LD_VAR 0 7
7142: MINUS
7143: PUSH
7144: LD_INT 1
7146: PLUS
7147: PPUSH
7148: LD_VAR 0 9
7152: PUSH
7153: LD_VAR 0 7
7157: ARRAY
7158: PPUSH
7159: CALL_OW 1
7163: ST_TO_ADDR
7164: GO 7120
7166: POP
7167: POP
// end ; tmp := [ ] ;
7168: LD_ADDR_VAR 0 9
7172: PUSH
7173: EMPTY
7174: ST_TO_ADDR
// if mode then
7175: LD_VAR 0 5
7179: IFFALSE 7248
// begin for i = 1 to result do
7181: LD_ADDR_VAR 0 7
7185: PUSH
7186: DOUBLE
7187: LD_INT 1
7189: DEC
7190: ST_TO_ADDR
7191: LD_VAR 0 6
7195: PUSH
7196: FOR_TO
7197: IFFALSE 7236
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7199: LD_ADDR_VAR 0 9
7203: PUSH
7204: LD_VAR 0 9
7208: PPUSH
7209: LD_VAR 0 7
7213: PPUSH
7214: LD_VAR 0 6
7218: PUSH
7219: LD_VAR 0 7
7223: ARRAY
7224: PUSH
7225: LD_INT 1
7227: ARRAY
7228: PPUSH
7229: CALL_OW 1
7233: ST_TO_ADDR
7234: GO 7196
7236: POP
7237: POP
// result := tmp ;
7238: LD_ADDR_VAR 0 6
7242: PUSH
7243: LD_VAR 0 9
7247: ST_TO_ADDR
// end ; end ;
7248: LD_VAR 0 6
7252: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7253: LD_INT 0
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
7260: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7261: LD_ADDR_VAR 0 5
7265: PUSH
7266: LD_INT 0
7268: PUSH
7269: LD_INT 0
7271: PUSH
7272: LD_INT 0
7274: PUSH
7275: EMPTY
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: ST_TO_ADDR
// if not x or not y then
7283: LD_VAR 0 2
7287: NOT
7288: IFTRUE 7297
7290: PUSH
7291: LD_VAR 0 3
7295: NOT
7296: OR
7297: IFFALSE 7301
// exit ;
7299: GO 8957
// if not range then
7301: LD_VAR 0 4
7305: NOT
7306: IFFALSE 7316
// range := 10 ;
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: LD_INT 10
7315: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7316: LD_ADDR_VAR 0 8
7320: PUSH
7321: LD_INT 81
7323: PUSH
7324: LD_VAR 0 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 92
7335: PUSH
7336: LD_VAR 0 2
7340: PUSH
7341: LD_VAR 0 3
7345: PUSH
7346: LD_VAR 0 4
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 3
7359: PUSH
7360: LD_INT 21
7362: PUSH
7363: LD_INT 3
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: ST_TO_ADDR
// if not tmp then
7384: LD_VAR 0 8
7388: NOT
7389: IFFALSE 7393
// exit ;
7391: GO 8957
// for i in tmp do
7393: LD_ADDR_VAR 0 6
7397: PUSH
7398: LD_VAR 0 8
7402: PUSH
7403: FOR_IN
7404: IFFALSE 8932
// begin points := [ 0 , 0 , 0 ] ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: ST_TO_ADDR
// bpoints := 1 ;
7425: LD_ADDR_VAR 0 10
7429: PUSH
7430: LD_INT 1
7432: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7433: LD_VAR 0 6
7437: PPUSH
7438: CALL_OW 247
7442: PUSH
7443: LD_INT 1
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7451
7449: GO 8033
7451: POP
// begin if GetClass ( i ) = 1 then
7452: LD_VAR 0 6
7456: PPUSH
7457: CALL_OW 257
7461: PUSH
7462: LD_INT 1
7464: EQUAL
7465: IFFALSE 7486
// points := [ 10 , 5 , 3 ] ;
7467: LD_ADDR_VAR 0 9
7471: PUSH
7472: LD_INT 10
7474: PUSH
7475: LD_INT 5
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7486: LD_VAR 0 6
7490: PPUSH
7491: CALL_OW 257
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 4
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: IN
7510: IFFALSE 7531
// points := [ 3 , 2 , 1 ] ;
7512: LD_ADDR_VAR 0 9
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: LD_INT 2
7522: PUSH
7523: LD_INT 1
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7531: LD_VAR 0 6
7535: PPUSH
7536: CALL_OW 257
7540: PUSH
7541: LD_INT 5
7543: EQUAL
7544: IFFALSE 7565
// points := [ 130 , 5 , 2 ] ;
7546: LD_ADDR_VAR 0 9
7550: PUSH
7551: LD_INT 130
7553: PUSH
7554: LD_INT 5
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7565: LD_VAR 0 6
7569: PPUSH
7570: CALL_OW 257
7574: PUSH
7575: LD_INT 8
7577: EQUAL
7578: IFFALSE 7599
// points := [ 35 , 35 , 30 ] ;
7580: LD_ADDR_VAR 0 9
7584: PUSH
7585: LD_INT 35
7587: PUSH
7588: LD_INT 35
7590: PUSH
7591: LD_INT 30
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7599: LD_VAR 0 6
7603: PPUSH
7604: CALL_OW 257
7608: PUSH
7609: LD_INT 9
7611: EQUAL
7612: IFFALSE 7633
// points := [ 20 , 55 , 40 ] ;
7614: LD_ADDR_VAR 0 9
7618: PUSH
7619: LD_INT 20
7621: PUSH
7622: LD_INT 55
7624: PUSH
7625: LD_INT 40
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: LIST
7632: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7633: LD_VAR 0 6
7637: PPUSH
7638: CALL_OW 257
7642: PUSH
7643: LD_INT 12
7645: PUSH
7646: LD_INT 16
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: IN
7653: IFFALSE 7674
// points := [ 5 , 3 , 2 ] ;
7655: LD_ADDR_VAR 0 9
7659: PUSH
7660: LD_INT 5
7662: PUSH
7663: LD_INT 3
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7674: LD_VAR 0 6
7678: PPUSH
7679: CALL_OW 257
7683: PUSH
7684: LD_INT 17
7686: EQUAL
7687: IFFALSE 7708
// points := [ 100 , 50 , 75 ] ;
7689: LD_ADDR_VAR 0 9
7693: PUSH
7694: LD_INT 100
7696: PUSH
7697: LD_INT 50
7699: PUSH
7700: LD_INT 75
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7708: LD_VAR 0 6
7712: PPUSH
7713: CALL_OW 257
7717: PUSH
7718: LD_INT 15
7720: EQUAL
7721: IFFALSE 7742
// points := [ 10 , 5 , 3 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_INT 10
7730: PUSH
7731: LD_INT 5
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7742: LD_VAR 0 6
7746: PPUSH
7747: CALL_OW 257
7751: PUSH
7752: LD_INT 14
7754: EQUAL
7755: IFFALSE 7776
// points := [ 10 , 0 , 0 ] ;
7757: LD_ADDR_VAR 0 9
7761: PUSH
7762: LD_INT 10
7764: PUSH
7765: LD_INT 0
7767: PUSH
7768: LD_INT 0
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7776: LD_VAR 0 6
7780: PPUSH
7781: CALL_OW 257
7785: PUSH
7786: LD_INT 11
7788: EQUAL
7789: IFFALSE 7810
// points := [ 30 , 10 , 5 ] ;
7791: LD_ADDR_VAR 0 9
7795: PUSH
7796: LD_INT 30
7798: PUSH
7799: LD_INT 10
7801: PUSH
7802: LD_INT 5
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7810: LD_VAR 0 1
7814: PPUSH
7815: LD_INT 5
7817: PPUSH
7818: CALL_OW 321
7822: PUSH
7823: LD_INT 2
7825: EQUAL
7826: IFFALSE 7843
// bpoints := bpoints * 1.8 ;
7828: LD_ADDR_VAR 0 10
7832: PUSH
7833: LD_VAR 0 10
7837: PUSH
7838: LD_REAL  1.80000000000000E+0000
7841: MUL
7842: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7843: LD_VAR 0 6
7847: PPUSH
7848: CALL_OW 257
7852: PUSH
7853: LD_INT 1
7855: PUSH
7856: LD_INT 2
7858: PUSH
7859: LD_INT 3
7861: PUSH
7862: LD_INT 4
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: IN
7871: IFFALSE 7891
7873: PUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: LD_INT 51
7881: PPUSH
7882: CALL_OW 321
7886: PUSH
7887: LD_INT 2
7889: EQUAL
7890: AND
7891: IFFALSE 7908
// bpoints := bpoints * 1.2 ;
7893: LD_ADDR_VAR 0 10
7897: PUSH
7898: LD_VAR 0 10
7902: PUSH
7903: LD_REAL  1.20000000000000E+0000
7906: MUL
7907: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7908: LD_VAR 0 6
7912: PPUSH
7913: CALL_OW 257
7917: PUSH
7918: LD_INT 5
7920: PUSH
7921: LD_INT 7
7923: PUSH
7924: LD_INT 9
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: IN
7932: IFFALSE 7952
7934: PUSH
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_INT 52
7942: PPUSH
7943: CALL_OW 321
7947: PUSH
7948: LD_INT 2
7950: EQUAL
7951: AND
7952: IFFALSE 7969
// bpoints := bpoints * 1.5 ;
7954: LD_ADDR_VAR 0 10
7958: PUSH
7959: LD_VAR 0 10
7963: PUSH
7964: LD_REAL  1.50000000000000E+0000
7967: MUL
7968: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7969: LD_VAR 0 1
7973: PPUSH
7974: LD_INT 66
7976: PPUSH
7977: CALL_OW 321
7981: PUSH
7982: LD_INT 2
7984: EQUAL
7985: IFFALSE 8002
// bpoints := bpoints * 1.1 ;
7987: LD_ADDR_VAR 0 10
7991: PUSH
7992: LD_VAR 0 10
7996: PUSH
7997: LD_REAL  1.10000000000000E+0000
8000: MUL
8001: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8002: LD_ADDR_VAR 0 10
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_VAR 0 6
8016: PPUSH
8017: LD_INT 1
8019: PPUSH
8020: CALL_OW 259
8024: PUSH
8025: LD_REAL  1.15000000000000E+0000
8028: MUL
8029: MUL
8030: ST_TO_ADDR
// end ; unit_vehicle :
8031: GO 8861
8033: LD_INT 2
8035: DOUBLE
8036: EQUAL
8037: IFTRUE 8041
8039: GO 8849
8041: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8042: LD_VAR 0 6
8046: PPUSH
8047: CALL_OW 264
8051: PUSH
8052: LD_INT 2
8054: PUSH
8055: LD_INT 42
8057: PUSH
8058: LD_INT 24
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: IN
8066: IFFALSE 8087
// points := [ 25 , 5 , 3 ] ;
8068: LD_ADDR_VAR 0 9
8072: PUSH
8073: LD_INT 25
8075: PUSH
8076: LD_INT 5
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 264
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: LD_INT 43
8102: PUSH
8103: LD_INT 25
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: IN
8111: IFFALSE 8132
// points := [ 40 , 15 , 5 ] ;
8113: LD_ADDR_VAR 0 9
8117: PUSH
8118: LD_INT 40
8120: PUSH
8121: LD_INT 15
8123: PUSH
8124: LD_INT 5
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
8132: LD_VAR 0 6
8136: PPUSH
8137: CALL_OW 264
8141: PUSH
8142: LD_INT 3
8144: PUSH
8145: LD_INT 23
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: IN
8152: IFFALSE 8173
// points := [ 7 , 25 , 8 ] ;
8154: LD_ADDR_VAR 0 9
8158: PUSH
8159: LD_INT 7
8161: PUSH
8162: LD_INT 25
8164: PUSH
8165: LD_INT 8
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8173: LD_VAR 0 6
8177: PPUSH
8178: CALL_OW 264
8182: PUSH
8183: LD_INT 5
8185: PUSH
8186: LD_INT 27
8188: PUSH
8189: LD_INT 44
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: LIST
8196: IN
8197: IFFALSE 8218
// points := [ 14 , 50 , 16 ] ;
8199: LD_ADDR_VAR 0 9
8203: PUSH
8204: LD_INT 14
8206: PUSH
8207: LD_INT 50
8209: PUSH
8210: LD_INT 16
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8218: LD_VAR 0 6
8222: PPUSH
8223: CALL_OW 264
8227: PUSH
8228: LD_INT 6
8230: PUSH
8231: LD_INT 46
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: IN
8238: IFFALSE 8259
// points := [ 32 , 120 , 70 ] ;
8240: LD_ADDR_VAR 0 9
8244: PUSH
8245: LD_INT 32
8247: PUSH
8248: LD_INT 120
8250: PUSH
8251: LD_INT 70
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8259: LD_VAR 0 6
8263: PPUSH
8264: CALL_OW 264
8268: PUSH
8269: LD_INT 7
8271: PUSH
8272: LD_INT 28
8274: PUSH
8275: LD_INT 45
8277: PUSH
8278: LD_INT 92
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: IN
8287: IFFALSE 8308
// points := [ 35 , 20 , 45 ] ;
8289: LD_ADDR_VAR 0 9
8293: PUSH
8294: LD_INT 35
8296: PUSH
8297: LD_INT 20
8299: PUSH
8300: LD_INT 45
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: LIST
8307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8308: LD_VAR 0 6
8312: PPUSH
8313: CALL_OW 264
8317: PUSH
8318: LD_INT 47
8320: PUSH
8321: EMPTY
8322: LIST
8323: IN
8324: IFFALSE 8345
// points := [ 67 , 45 , 75 ] ;
8326: LD_ADDR_VAR 0 9
8330: PUSH
8331: LD_INT 67
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: LD_INT 75
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8345: LD_VAR 0 6
8349: PPUSH
8350: CALL_OW 264
8354: PUSH
8355: LD_INT 26
8357: PUSH
8358: EMPTY
8359: LIST
8360: IN
8361: IFFALSE 8382
// points := [ 120 , 30 , 80 ] ;
8363: LD_ADDR_VAR 0 9
8367: PUSH
8368: LD_INT 120
8370: PUSH
8371: LD_INT 30
8373: PUSH
8374: LD_INT 80
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8382: LD_VAR 0 6
8386: PPUSH
8387: CALL_OW 264
8391: PUSH
8392: LD_INT 22
8394: PUSH
8395: EMPTY
8396: LIST
8397: IN
8398: IFFALSE 8419
// points := [ 40 , 1 , 1 ] ;
8400: LD_ADDR_VAR 0 9
8404: PUSH
8405: LD_INT 40
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8419: LD_VAR 0 6
8423: PPUSH
8424: CALL_OW 264
8428: PUSH
8429: LD_INT 29
8431: PUSH
8432: EMPTY
8433: LIST
8434: IN
8435: IFFALSE 8456
// points := [ 70 , 200 , 400 ] ;
8437: LD_ADDR_VAR 0 9
8441: PUSH
8442: LD_INT 70
8444: PUSH
8445: LD_INT 200
8447: PUSH
8448: LD_INT 400
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8456: LD_VAR 0 6
8460: PPUSH
8461: CALL_OW 264
8465: PUSH
8466: LD_INT 14
8468: PUSH
8469: LD_INT 53
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: IN
8476: IFFALSE 8497
// points := [ 40 , 10 , 20 ] ;
8478: LD_ADDR_VAR 0 9
8482: PUSH
8483: LD_INT 40
8485: PUSH
8486: LD_INT 10
8488: PUSH
8489: LD_INT 20
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8497: LD_VAR 0 6
8501: PPUSH
8502: CALL_OW 264
8506: PUSH
8507: LD_INT 9
8509: PUSH
8510: EMPTY
8511: LIST
8512: IN
8513: IFFALSE 8534
// points := [ 5 , 70 , 20 ] ;
8515: LD_ADDR_VAR 0 9
8519: PUSH
8520: LD_INT 5
8522: PUSH
8523: LD_INT 70
8525: PUSH
8526: LD_INT 20
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 264
8543: PUSH
8544: LD_INT 10
8546: PUSH
8547: EMPTY
8548: LIST
8549: IN
8550: IFFALSE 8571
// points := [ 35 , 110 , 70 ] ;
8552: LD_ADDR_VAR 0 9
8556: PUSH
8557: LD_INT 35
8559: PUSH
8560: LD_INT 110
8562: PUSH
8563: LD_INT 70
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8571: LD_VAR 0 6
8575: PPUSH
8576: CALL_OW 265
8580: PUSH
8581: LD_INT 25
8583: EQUAL
8584: IFFALSE 8605
// points := [ 80 , 65 , 100 ] ;
8586: LD_ADDR_VAR 0 9
8590: PUSH
8591: LD_INT 80
8593: PUSH
8594: LD_INT 65
8596: PUSH
8597: LD_INT 100
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8605: LD_VAR 0 6
8609: PPUSH
8610: CALL_OW 263
8614: PUSH
8615: LD_INT 1
8617: EQUAL
8618: IFFALSE 8653
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8620: LD_ADDR_VAR 0 10
8624: PUSH
8625: LD_VAR 0 10
8629: PUSH
8630: LD_VAR 0 6
8634: PPUSH
8635: CALL_OW 311
8639: PPUSH
8640: LD_INT 3
8642: PPUSH
8643: CALL_OW 259
8647: PUSH
8648: LD_INT 4
8650: MUL
8651: MUL
8652: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8653: LD_VAR 0 6
8657: PPUSH
8658: CALL_OW 263
8662: PUSH
8663: LD_INT 2
8665: EQUAL
8666: IFFALSE 8717
// begin j := IsControledBy ( i ) ;
8668: LD_ADDR_VAR 0 7
8672: PUSH
8673: LD_VAR 0 6
8677: PPUSH
8678: CALL_OW 312
8682: ST_TO_ADDR
// if j then
8683: LD_VAR 0 7
8687: IFFALSE 8717
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8689: LD_ADDR_VAR 0 10
8693: PUSH
8694: LD_VAR 0 10
8698: PUSH
8699: LD_VAR 0 7
8703: PPUSH
8704: LD_INT 3
8706: PPUSH
8707: CALL_OW 259
8711: PUSH
8712: LD_INT 3
8714: MUL
8715: MUL
8716: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8717: LD_VAR 0 6
8721: PPUSH
8722: CALL_OW 264
8726: PUSH
8727: LD_INT 5
8729: PUSH
8730: LD_INT 6
8732: PUSH
8733: LD_INT 46
8735: PUSH
8736: LD_INT 44
8738: PUSH
8739: LD_INT 47
8741: PUSH
8742: LD_INT 45
8744: PUSH
8745: LD_INT 28
8747: PUSH
8748: LD_INT 7
8750: PUSH
8751: LD_INT 27
8753: PUSH
8754: LD_INT 29
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: IN
8769: IFFALSE 8789
8771: PUSH
8772: LD_VAR 0 1
8776: PPUSH
8777: LD_INT 52
8779: PPUSH
8780: CALL_OW 321
8784: PUSH
8785: LD_INT 2
8787: EQUAL
8788: AND
8789: IFFALSE 8806
// bpoints := bpoints * 1.2 ;
8791: LD_ADDR_VAR 0 10
8795: PUSH
8796: LD_VAR 0 10
8800: PUSH
8801: LD_REAL  1.20000000000000E+0000
8804: MUL
8805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8806: LD_VAR 0 6
8810: PPUSH
8811: CALL_OW 264
8815: PUSH
8816: LD_INT 6
8818: PUSH
8819: LD_INT 46
8821: PUSH
8822: LD_INT 47
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: IN
8830: IFFALSE 8847
// bpoints := bpoints * 1.2 ;
8832: LD_ADDR_VAR 0 10
8836: PUSH
8837: LD_VAR 0 10
8841: PUSH
8842: LD_REAL  1.20000000000000E+0000
8845: MUL
8846: ST_TO_ADDR
// end ; unit_building :
8847: GO 8861
8849: LD_INT 3
8851: DOUBLE
8852: EQUAL
8853: IFTRUE 8857
8855: GO 8860
8857: POP
// ; end ;
8858: GO 8861
8860: POP
// for j = 1 to 3 do
8861: LD_ADDR_VAR 0 7
8865: PUSH
8866: DOUBLE
8867: LD_INT 1
8869: DEC
8870: ST_TO_ADDR
8871: LD_INT 3
8873: PUSH
8874: FOR_TO
8875: IFFALSE 8928
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8877: LD_ADDR_VAR 0 5
8881: PUSH
8882: LD_VAR 0 5
8886: PPUSH
8887: LD_VAR 0 7
8891: PPUSH
8892: LD_VAR 0 5
8896: PUSH
8897: LD_VAR 0 7
8901: ARRAY
8902: PUSH
8903: LD_VAR 0 9
8907: PUSH
8908: LD_VAR 0 7
8912: ARRAY
8913: PUSH
8914: LD_VAR 0 10
8918: MUL
8919: PLUS
8920: PPUSH
8921: CALL_OW 1
8925: ST_TO_ADDR
8926: GO 8874
8928: POP
8929: POP
// end ;
8930: GO 7403
8932: POP
8933: POP
// result := Replace ( result , 4 , tmp ) ;
8934: LD_ADDR_VAR 0 5
8938: PUSH
8939: LD_VAR 0 5
8943: PPUSH
8944: LD_INT 4
8946: PPUSH
8947: LD_VAR 0 8
8951: PPUSH
8952: CALL_OW 1
8956: ST_TO_ADDR
// end ;
8957: LD_VAR 0 5
8961: RET
// export function DangerAtRange ( unit , range ) ; begin
8962: LD_INT 0
8964: PPUSH
// if not unit then
8965: LD_VAR 0 1
8969: NOT
8970: IFFALSE 8974
// exit ;
8972: GO 9019
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8974: LD_ADDR_VAR 0 3
8978: PUSH
8979: LD_VAR 0 1
8983: PPUSH
8984: CALL_OW 255
8988: PPUSH
8989: LD_VAR 0 1
8993: PPUSH
8994: CALL_OW 250
8998: PPUSH
8999: LD_VAR 0 1
9003: PPUSH
9004: CALL_OW 251
9008: PPUSH
9009: LD_VAR 0 2
9013: PPUSH
9014: CALL 7253 0 4
9018: ST_TO_ADDR
// end ;
9019: LD_VAR 0 3
9023: RET
// export function DangerInArea ( side , area ) ; begin
9024: LD_INT 0
9026: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9027: LD_ADDR_VAR 0 3
9031: PUSH
9032: LD_VAR 0 2
9036: PPUSH
9037: LD_INT 81
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 70
9053: ST_TO_ADDR
// end ;
9054: LD_VAR 0 3
9058: RET
// export function IsExtension ( b ) ; begin
9059: LD_INT 0
9061: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_VAR 0 1
9071: PUSH
9072: LD_INT 23
9074: PUSH
9075: LD_INT 20
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 17
9083: PUSH
9084: LD_INT 24
9086: PUSH
9087: LD_INT 21
9089: PUSH
9090: LD_INT 19
9092: PUSH
9093: LD_INT 16
9095: PUSH
9096: LD_INT 25
9098: PUSH
9099: LD_INT 18
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: IN
9114: ST_TO_ADDR
// end ;
9115: LD_VAR 0 2
9119: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
9120: LD_INT 0
9122: PPUSH
9123: PPUSH
9124: PPUSH
// result := [ ] ;
9125: LD_ADDR_VAR 0 4
9129: PUSH
9130: EMPTY
9131: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
9132: LD_ADDR_VAR 0 5
9136: PUSH
9137: LD_VAR 0 2
9141: PPUSH
9142: LD_INT 21
9144: PUSH
9145: LD_INT 3
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 70
9156: ST_TO_ADDR
// if not tmp then
9157: LD_VAR 0 5
9161: NOT
9162: IFFALSE 9166
// exit ;
9164: GO 9230
// if checkLink then
9166: LD_VAR 0 3
9170: IFFALSE 9220
// begin for i in tmp do
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 5
9181: PUSH
9182: FOR_IN
9183: IFFALSE 9218
// if GetBase ( i ) <> base then
9185: LD_VAR 0 6
9189: PPUSH
9190: CALL_OW 274
9194: PUSH
9195: LD_VAR 0 1
9199: NONEQUAL
9200: IFFALSE 9216
// ComLinkToBase ( base , i ) ;
9202: LD_VAR 0 1
9206: PPUSH
9207: LD_VAR 0 6
9211: PPUSH
9212: CALL_OW 169
9216: GO 9182
9218: POP
9219: POP
// end ; result := tmp ;
9220: LD_ADDR_VAR 0 4
9224: PUSH
9225: LD_VAR 0 5
9229: ST_TO_ADDR
// end ;
9230: LD_VAR 0 4
9234: RET
// export function ComComplete ( units , b ) ; var i ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
// if not units then
9239: LD_VAR 0 1
9243: NOT
9244: IFFALSE 9248
// exit ;
9246: GO 9338
// for i in units do
9248: LD_ADDR_VAR 0 4
9252: PUSH
9253: LD_VAR 0 1
9257: PUSH
9258: FOR_IN
9259: IFFALSE 9336
// if BuildingStatus ( b ) = bs_build then
9261: LD_VAR 0 2
9265: PPUSH
9266: CALL_OW 461
9270: PUSH
9271: LD_INT 1
9273: EQUAL
9274: IFFALSE 9334
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9276: LD_VAR 0 4
9280: PPUSH
9281: LD_STRING h
9283: PUSH
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 250
9293: PUSH
9294: LD_VAR 0 2
9298: PPUSH
9299: CALL_OW 251
9303: PUSH
9304: LD_VAR 0 2
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 0
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: PPUSH
9330: CALL_OW 446
9334: GO 9258
9336: POP
9337: POP
// end ;
9338: LD_VAR 0 3
9342: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9343: LD_INT 0
9345: PPUSH
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
9350: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9351: LD_VAR 0 1
9355: NOT
9356: IFTRUE 9373
9358: PUSH
9359: LD_VAR 0 1
9363: PPUSH
9364: CALL_OW 263
9368: PUSH
9369: LD_INT 2
9371: NONEQUAL
9372: OR
9373: IFFALSE 9377
// exit ;
9375: GO 9693
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9377: LD_ADDR_VAR 0 6
9381: PUSH
9382: LD_INT 22
9384: PUSH
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 255
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: LD_INT 2
9401: PUSH
9402: LD_INT 30
9404: PUSH
9405: LD_INT 36
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 34
9414: PUSH
9415: LD_INT 31
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PPUSH
9431: CALL_OW 69
9435: ST_TO_ADDR
// if not tmp then
9436: LD_VAR 0 6
9440: NOT
9441: IFFALSE 9445
// exit ;
9443: GO 9693
// result := [ ] ;
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: EMPTY
9451: ST_TO_ADDR
// for i in tmp do
9452: LD_ADDR_VAR 0 3
9456: PUSH
9457: LD_VAR 0 6
9461: PUSH
9462: FOR_IN
9463: IFFALSE 9534
// begin t := UnitsInside ( i ) ;
9465: LD_ADDR_VAR 0 4
9469: PUSH
9470: LD_VAR 0 3
9474: PPUSH
9475: CALL_OW 313
9479: ST_TO_ADDR
// if t then
9480: LD_VAR 0 4
9484: IFFALSE 9532
// for j in t do
9486: LD_ADDR_VAR 0 7
9490: PUSH
9491: LD_VAR 0 4
9495: PUSH
9496: FOR_IN
9497: IFFALSE 9530
// result := Replace ( result , result + 1 , j ) ;
9499: LD_ADDR_VAR 0 2
9503: PUSH
9504: LD_VAR 0 2
9508: PPUSH
9509: LD_VAR 0 2
9513: PUSH
9514: LD_INT 1
9516: PLUS
9517: PPUSH
9518: LD_VAR 0 7
9522: PPUSH
9523: CALL_OW 1
9527: ST_TO_ADDR
9528: GO 9496
9530: POP
9531: POP
// end ;
9532: GO 9462
9534: POP
9535: POP
// if not result then
9536: LD_VAR 0 2
9540: NOT
9541: IFFALSE 9545
// exit ;
9543: GO 9693
// mech := result [ 1 ] ;
9545: LD_ADDR_VAR 0 5
9549: PUSH
9550: LD_VAR 0 2
9554: PUSH
9555: LD_INT 1
9557: ARRAY
9558: ST_TO_ADDR
// if result > 1 then
9559: LD_VAR 0 2
9563: PUSH
9564: LD_INT 1
9566: GREATER
9567: IFFALSE 9679
// begin for i = 2 to result do
9569: LD_ADDR_VAR 0 3
9573: PUSH
9574: DOUBLE
9575: LD_INT 2
9577: DEC
9578: ST_TO_ADDR
9579: LD_VAR 0 2
9583: PUSH
9584: FOR_TO
9585: IFFALSE 9677
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9587: LD_ADDR_VAR 0 4
9591: PUSH
9592: LD_VAR 0 2
9596: PUSH
9597: LD_VAR 0 3
9601: ARRAY
9602: PPUSH
9603: LD_INT 3
9605: PPUSH
9606: CALL_OW 259
9610: PUSH
9611: LD_VAR 0 2
9615: PUSH
9616: LD_VAR 0 3
9620: ARRAY
9621: PPUSH
9622: CALL_OW 432
9626: MINUS
9627: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9628: LD_VAR 0 4
9632: PUSH
9633: LD_VAR 0 5
9637: PPUSH
9638: LD_INT 3
9640: PPUSH
9641: CALL_OW 259
9645: PUSH
9646: LD_VAR 0 5
9650: PPUSH
9651: CALL_OW 432
9655: MINUS
9656: GREATEREQUAL
9657: IFFALSE 9675
// mech := result [ i ] ;
9659: LD_ADDR_VAR 0 5
9663: PUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_VAR 0 3
9673: ARRAY
9674: ST_TO_ADDR
// end ;
9675: GO 9584
9677: POP
9678: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9679: LD_VAR 0 1
9683: PPUSH
9684: LD_VAR 0 5
9688: PPUSH
9689: CALL_OW 135
// end ;
9693: LD_VAR 0 2
9697: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9698: LD_INT 0
9700: PPUSH
9701: PPUSH
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
9706: PPUSH
9707: PPUSH
9708: PPUSH
9709: PPUSH
9710: PPUSH
9711: PPUSH
9712: PPUSH
// result := [ ] ;
9713: LD_ADDR_VAR 0 7
9717: PUSH
9718: EMPTY
9719: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9720: LD_VAR 0 1
9724: PPUSH
9725: CALL_OW 266
9729: PUSH
9730: LD_INT 0
9732: PUSH
9733: LD_INT 1
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: IN
9740: NOT
9741: IFFALSE 9745
// exit ;
9743: GO 11385
// if name then
9745: LD_VAR 0 3
9749: IFFALSE 9765
// SetBName ( base_dep , name ) ;
9751: LD_VAR 0 1
9755: PPUSH
9756: LD_VAR 0 3
9760: PPUSH
9761: CALL_OW 500
// base := GetBase ( base_dep ) ;
9765: LD_ADDR_VAR 0 15
9769: PUSH
9770: LD_VAR 0 1
9774: PPUSH
9775: CALL_OW 274
9779: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9780: LD_ADDR_VAR 0 16
9784: PUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 255
9794: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9795: LD_ADDR_VAR 0 17
9799: PUSH
9800: LD_VAR 0 1
9804: PPUSH
9805: CALL_OW 248
9809: ST_TO_ADDR
// if sources then
9810: LD_VAR 0 5
9814: IFFALSE 9861
// for i = 1 to 3 do
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: DOUBLE
9822: LD_INT 1
9824: DEC
9825: ST_TO_ADDR
9826: LD_INT 3
9828: PUSH
9829: FOR_TO
9830: IFFALSE 9859
// AddResourceType ( base , i , sources [ i ] ) ;
9832: LD_VAR 0 15
9836: PPUSH
9837: LD_VAR 0 8
9841: PPUSH
9842: LD_VAR 0 5
9846: PUSH
9847: LD_VAR 0 8
9851: ARRAY
9852: PPUSH
9853: CALL_OW 276
9857: GO 9829
9859: POP
9860: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9861: LD_ADDR_VAR 0 18
9865: PUSH
9866: LD_VAR 0 15
9870: PPUSH
9871: LD_VAR 0 2
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL 9120 0 3
9883: ST_TO_ADDR
// InitHc ;
9884: CALL_OW 19
// InitUc ;
9888: CALL_OW 18
// uc_side := side ;
9892: LD_ADDR_OWVAR 20
9896: PUSH
9897: LD_VAR 0 16
9901: ST_TO_ADDR
// uc_nation := nation ;
9902: LD_ADDR_OWVAR 21
9906: PUSH
9907: LD_VAR 0 17
9911: ST_TO_ADDR
// if buildings then
9912: LD_VAR 0 18
9916: IFFALSE 11244
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9918: LD_ADDR_VAR 0 19
9922: PUSH
9923: LD_VAR 0 18
9927: PPUSH
9928: LD_INT 2
9930: PUSH
9931: LD_INT 30
9933: PUSH
9934: LD_INT 29
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 30
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 72
9960: ST_TO_ADDR
// if tmp then
9961: LD_VAR 0 19
9965: IFFALSE 10013
// for i in tmp do
9967: LD_ADDR_VAR 0 8
9971: PUSH
9972: LD_VAR 0 19
9976: PUSH
9977: FOR_IN
9978: IFFALSE 10011
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9980: LD_VAR 0 8
9984: PPUSH
9985: CALL_OW 250
9989: PPUSH
9990: LD_VAR 0 8
9994: PPUSH
9995: CALL_OW 251
9999: PPUSH
10000: LD_VAR 0 16
10004: PPUSH
10005: CALL_OW 441
10009: GO 9977
10011: POP
10012: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10013: LD_VAR 0 18
10017: PPUSH
10018: LD_INT 2
10020: PUSH
10021: LD_INT 30
10023: PUSH
10024: LD_INT 32
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 30
10033: PUSH
10034: LD_INT 33
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 72
10050: IFFALSE 10138
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10052: LD_ADDR_VAR 0 8
10056: PUSH
10057: LD_VAR 0 18
10061: PPUSH
10062: LD_INT 2
10064: PUSH
10065: LD_INT 30
10067: PUSH
10068: LD_INT 32
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 30
10077: PUSH
10078: LD_INT 33
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: PPUSH
10090: CALL_OW 72
10094: PUSH
10095: FOR_IN
10096: IFFALSE 10136
// begin if not GetBWeapon ( i ) then
10098: LD_VAR 0 8
10102: PPUSH
10103: CALL_OW 269
10107: NOT
10108: IFFALSE 10134
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
10110: LD_VAR 0 8
10114: PPUSH
10115: LD_VAR 0 8
10119: PPUSH
10120: LD_VAR 0 2
10124: PPUSH
10125: CALL 11390 0 2
10129: PPUSH
10130: CALL_OW 431
// end ;
10134: GO 10095
10136: POP
10137: POP
// end ; for i = 1 to personel do
10138: LD_ADDR_VAR 0 8
10142: PUSH
10143: DOUBLE
10144: LD_INT 1
10146: DEC
10147: ST_TO_ADDR
10148: LD_VAR 0 6
10152: PUSH
10153: FOR_TO
10154: IFFALSE 11224
// begin if i > 4 then
10156: LD_VAR 0 8
10160: PUSH
10161: LD_INT 4
10163: GREATER
10164: IFFALSE 10168
// break ;
10166: GO 11224
// case i of 1 :
10168: LD_VAR 0 8
10172: PUSH
10173: LD_INT 1
10175: DOUBLE
10176: EQUAL
10177: IFTRUE 10181
10179: GO 10261
10181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10182: LD_ADDR_VAR 0 12
10186: PUSH
10187: LD_VAR 0 18
10191: PPUSH
10192: LD_INT 22
10194: PUSH
10195: LD_VAR 0 16
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 58
10206: PUSH
10207: EMPTY
10208: LIST
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: LD_INT 30
10215: PUSH
10216: LD_INT 32
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 30
10225: PUSH
10226: LD_INT 4
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 30
10235: PUSH
10236: LD_INT 5
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: PPUSH
10254: CALL_OW 72
10258: ST_TO_ADDR
10259: GO 10483
10261: LD_INT 2
10263: DOUBLE
10264: EQUAL
10265: IFTRUE 10269
10267: GO 10331
10269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10270: LD_ADDR_VAR 0 12
10274: PUSH
10275: LD_VAR 0 18
10279: PPUSH
10280: LD_INT 22
10282: PUSH
10283: LD_VAR 0 16
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: LD_INT 30
10297: PUSH
10298: LD_INT 0
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 30
10307: PUSH
10308: LD_INT 1
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PPUSH
10324: CALL_OW 72
10328: ST_TO_ADDR
10329: GO 10483
10331: LD_INT 3
10333: DOUBLE
10334: EQUAL
10335: IFTRUE 10339
10337: GO 10401
10339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10340: LD_ADDR_VAR 0 12
10344: PUSH
10345: LD_VAR 0 18
10349: PPUSH
10350: LD_INT 22
10352: PUSH
10353: LD_VAR 0 16
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 2
10364: PUSH
10365: LD_INT 30
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 3
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 72
10398: ST_TO_ADDR
10399: GO 10483
10401: LD_INT 4
10403: DOUBLE
10404: EQUAL
10405: IFTRUE 10409
10407: GO 10482
10409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10410: LD_ADDR_VAR 0 12
10414: PUSH
10415: LD_VAR 0 18
10419: PPUSH
10420: LD_INT 22
10422: PUSH
10423: LD_VAR 0 16
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 2
10434: PUSH
10435: LD_INT 30
10437: PUSH
10438: LD_INT 6
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 30
10447: PUSH
10448: LD_INT 7
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 30
10457: PUSH
10458: LD_INT 8
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 72
10479: ST_TO_ADDR
10480: GO 10483
10482: POP
// if i = 1 then
10483: LD_VAR 0 8
10487: PUSH
10488: LD_INT 1
10490: EQUAL
10491: IFFALSE 10602
// begin tmp := [ ] ;
10493: LD_ADDR_VAR 0 19
10497: PUSH
10498: EMPTY
10499: ST_TO_ADDR
// for j in f do
10500: LD_ADDR_VAR 0 9
10504: PUSH
10505: LD_VAR 0 12
10509: PUSH
10510: FOR_IN
10511: IFFALSE 10584
// if GetBType ( j ) = b_bunker then
10513: LD_VAR 0 9
10517: PPUSH
10518: CALL_OW 266
10522: PUSH
10523: LD_INT 32
10525: EQUAL
10526: IFFALSE 10553
// tmp := Insert ( tmp , 1 , j ) else
10528: LD_ADDR_VAR 0 19
10532: PUSH
10533: LD_VAR 0 19
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_VAR 0 9
10545: PPUSH
10546: CALL_OW 2
10550: ST_TO_ADDR
10551: GO 10582
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10553: LD_ADDR_VAR 0 19
10557: PUSH
10558: LD_VAR 0 19
10562: PPUSH
10563: LD_VAR 0 19
10567: PUSH
10568: LD_INT 1
10570: PLUS
10571: PPUSH
10572: LD_VAR 0 9
10576: PPUSH
10577: CALL_OW 2
10581: ST_TO_ADDR
10582: GO 10510
10584: POP
10585: POP
// if tmp then
10586: LD_VAR 0 19
10590: IFFALSE 10602
// f := tmp ;
10592: LD_ADDR_VAR 0 12
10596: PUSH
10597: LD_VAR 0 19
10601: ST_TO_ADDR
// end ; x := personel [ i ] ;
10602: LD_ADDR_VAR 0 13
10606: PUSH
10607: LD_VAR 0 6
10611: PUSH
10612: LD_VAR 0 8
10616: ARRAY
10617: ST_TO_ADDR
// if x = - 1 then
10618: LD_VAR 0 13
10622: PUSH
10623: LD_INT 1
10625: NEG
10626: EQUAL
10627: IFFALSE 10838
// begin for j in f do
10629: LD_ADDR_VAR 0 9
10633: PUSH
10634: LD_VAR 0 12
10638: PUSH
10639: FOR_IN
10640: IFFALSE 10834
// repeat InitHc ;
10642: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10646: LD_VAR 0 9
10650: PPUSH
10651: CALL_OW 266
10655: PUSH
10656: LD_INT 5
10658: EQUAL
10659: IFFALSE 10729
// begin if UnitsInside ( j ) < 3 then
10661: LD_VAR 0 9
10665: PPUSH
10666: CALL_OW 313
10670: PUSH
10671: LD_INT 3
10673: LESS
10674: IFFALSE 10710
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10676: LD_INT 0
10678: PPUSH
10679: LD_INT 5
10681: PUSH
10682: LD_INT 8
10684: PUSH
10685: LD_INT 9
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: PUSH
10693: LD_VAR 0 17
10697: ARRAY
10698: PPUSH
10699: LD_VAR 0 4
10703: PPUSH
10704: CALL_OW 380
10708: GO 10727
// PrepareHuman ( false , i , skill ) ;
10710: LD_INT 0
10712: PPUSH
10713: LD_VAR 0 8
10717: PPUSH
10718: LD_VAR 0 4
10722: PPUSH
10723: CALL_OW 380
// end else
10727: GO 10746
// PrepareHuman ( false , i , skill ) ;
10729: LD_INT 0
10731: PPUSH
10732: LD_VAR 0 8
10736: PPUSH
10737: LD_VAR 0 4
10741: PPUSH
10742: CALL_OW 380
// un := CreateHuman ;
10746: LD_ADDR_VAR 0 14
10750: PUSH
10751: CALL_OW 44
10755: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10756: LD_ADDR_VAR 0 7
10760: PUSH
10761: LD_VAR 0 7
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: LD_VAR 0 14
10773: PPUSH
10774: CALL_OW 2
10778: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10779: LD_VAR 0 14
10783: PPUSH
10784: LD_VAR 0 9
10788: PPUSH
10789: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10793: LD_VAR 0 9
10797: PPUSH
10798: CALL_OW 313
10802: PUSH
10803: LD_INT 6
10805: EQUAL
10806: IFTRUE 10830
10808: PUSH
10809: LD_VAR 0 9
10813: PPUSH
10814: CALL_OW 266
10818: PUSH
10819: LD_INT 32
10821: PUSH
10822: LD_INT 31
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: IN
10829: OR
10830: IFFALSE 10642
10832: GO 10639
10834: POP
10835: POP
// end else
10836: GO 11222
// for j = 1 to x do
10838: LD_ADDR_VAR 0 9
10842: PUSH
10843: DOUBLE
10844: LD_INT 1
10846: DEC
10847: ST_TO_ADDR
10848: LD_VAR 0 13
10852: PUSH
10853: FOR_TO
10854: IFFALSE 11220
// begin InitHc ;
10856: CALL_OW 19
// if not f then
10860: LD_VAR 0 12
10864: NOT
10865: IFFALSE 10954
// begin PrepareHuman ( false , i , skill ) ;
10867: LD_INT 0
10869: PPUSH
10870: LD_VAR 0 8
10874: PPUSH
10875: LD_VAR 0 4
10879: PPUSH
10880: CALL_OW 380
// un := CreateHuman ;
10884: LD_ADDR_VAR 0 14
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10894: LD_ADDR_VAR 0 7
10898: PUSH
10899: LD_VAR 0 7
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: LD_VAR 0 14
10911: PPUSH
10912: CALL_OW 2
10916: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10917: LD_VAR 0 14
10921: PPUSH
10922: LD_VAR 0 1
10926: PPUSH
10927: CALL_OW 250
10931: PPUSH
10932: LD_VAR 0 1
10936: PPUSH
10937: CALL_OW 251
10941: PPUSH
10942: LD_INT 10
10944: PPUSH
10945: LD_INT 0
10947: PPUSH
10948: CALL_OW 50
// continue ;
10952: GO 10853
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10954: LD_VAR 0 12
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PPUSH
10963: CALL_OW 313
10967: IFFALSE 10995
10969: PUSH
10970: LD_VAR 0 12
10974: PUSH
10975: LD_INT 1
10977: ARRAY
10978: PPUSH
10979: CALL_OW 266
10983: PUSH
10984: LD_INT 32
10986: PUSH
10987: LD_INT 31
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: IN
10994: AND
10995: IFTRUE 11016
10997: PUSH
10998: LD_VAR 0 12
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PPUSH
11007: CALL_OW 313
11011: PUSH
11012: LD_INT 6
11014: EQUAL
11015: OR
11016: IFFALSE 11036
// f := Delete ( f , 1 ) ;
11018: LD_ADDR_VAR 0 12
11022: PUSH
11023: LD_VAR 0 12
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: CALL_OW 3
11035: ST_TO_ADDR
// if not f then
11036: LD_VAR 0 12
11040: NOT
11041: IFFALSE 11059
// begin x := x + 2 ;
11043: LD_ADDR_VAR 0 13
11047: PUSH
11048: LD_VAR 0 13
11052: PUSH
11053: LD_INT 2
11055: PLUS
11056: ST_TO_ADDR
// continue ;
11057: GO 10853
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11059: LD_VAR 0 12
11063: PUSH
11064: LD_INT 1
11066: ARRAY
11067: PPUSH
11068: CALL_OW 266
11072: PUSH
11073: LD_INT 5
11075: EQUAL
11076: IFFALSE 11150
// begin if UnitsInside ( f [ 1 ] ) < 3 then
11078: LD_VAR 0 12
11082: PUSH
11083: LD_INT 1
11085: ARRAY
11086: PPUSH
11087: CALL_OW 313
11091: PUSH
11092: LD_INT 3
11094: LESS
11095: IFFALSE 11131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11097: LD_INT 0
11099: PPUSH
11100: LD_INT 5
11102: PUSH
11103: LD_INT 8
11105: PUSH
11106: LD_INT 9
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: LD_VAR 0 17
11118: ARRAY
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: CALL_OW 380
11129: GO 11148
// PrepareHuman ( false , i , skill ) ;
11131: LD_INT 0
11133: PPUSH
11134: LD_VAR 0 8
11138: PPUSH
11139: LD_VAR 0 4
11143: PPUSH
11144: CALL_OW 380
// end else
11148: GO 11167
// PrepareHuman ( false , i , skill ) ;
11150: LD_INT 0
11152: PPUSH
11153: LD_VAR 0 8
11157: PPUSH
11158: LD_VAR 0 4
11162: PPUSH
11163: CALL_OW 380
// un := CreateHuman ;
11167: LD_ADDR_VAR 0 14
11171: PUSH
11172: CALL_OW 44
11176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11177: LD_ADDR_VAR 0 7
11181: PUSH
11182: LD_VAR 0 7
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: LD_VAR 0 14
11194: PPUSH
11195: CALL_OW 2
11199: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11200: LD_VAR 0 14
11204: PPUSH
11205: LD_VAR 0 12
11209: PUSH
11210: LD_INT 1
11212: ARRAY
11213: PPUSH
11214: CALL_OW 52
// end ;
11218: GO 10853
11220: POP
11221: POP
// end ;
11222: GO 10153
11224: POP
11225: POP
// result := result ^ buildings ;
11226: LD_ADDR_VAR 0 7
11230: PUSH
11231: LD_VAR 0 7
11235: PUSH
11236: LD_VAR 0 18
11240: ADD
11241: ST_TO_ADDR
// end else
11242: GO 11385
// begin for i = 1 to personel do
11244: LD_ADDR_VAR 0 8
11248: PUSH
11249: DOUBLE
11250: LD_INT 1
11252: DEC
11253: ST_TO_ADDR
11254: LD_VAR 0 6
11258: PUSH
11259: FOR_TO
11260: IFFALSE 11383
// begin if i > 4 then
11262: LD_VAR 0 8
11266: PUSH
11267: LD_INT 4
11269: GREATER
11270: IFFALSE 11274
// break ;
11272: GO 11383
// x := personel [ i ] ;
11274: LD_ADDR_VAR 0 13
11278: PUSH
11279: LD_VAR 0 6
11283: PUSH
11284: LD_VAR 0 8
11288: ARRAY
11289: ST_TO_ADDR
// if x = - 1 then
11290: LD_VAR 0 13
11294: PUSH
11295: LD_INT 1
11297: NEG
11298: EQUAL
11299: IFFALSE 11303
// continue ;
11301: GO 11259
// PrepareHuman ( false , i , skill ) ;
11303: LD_INT 0
11305: PPUSH
11306: LD_VAR 0 8
11310: PPUSH
11311: LD_VAR 0 4
11315: PPUSH
11316: CALL_OW 380
// un := CreateHuman ;
11320: LD_ADDR_VAR 0 14
11324: PUSH
11325: CALL_OW 44
11329: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11330: LD_VAR 0 14
11334: PPUSH
11335: LD_VAR 0 1
11339: PPUSH
11340: CALL_OW 250
11344: PPUSH
11345: LD_VAR 0 1
11349: PPUSH
11350: CALL_OW 251
11354: PPUSH
11355: LD_INT 10
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 50
// result := result ^ un ;
11365: LD_ADDR_VAR 0 7
11369: PUSH
11370: LD_VAR 0 7
11374: PUSH
11375: LD_VAR 0 14
11379: ADD
11380: ST_TO_ADDR
// end ;
11381: GO 11259
11383: POP
11384: POP
// end ; end ;
11385: LD_VAR 0 7
11389: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11390: LD_INT 0
11392: PPUSH
11393: PPUSH
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
11403: PPUSH
11404: PPUSH
11405: PPUSH
11406: PPUSH
11407: PPUSH
// result := false ;
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11416: LD_VAR 0 1
11420: NOT
11421: IFTRUE 11446
11423: PUSH
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 266
11433: PUSH
11434: LD_INT 32
11436: PUSH
11437: LD_INT 33
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: IN
11444: NOT
11445: OR
11446: IFFALSE 11450
// exit ;
11448: GO 12585
// nat := GetNation ( tower ) ;
11450: LD_ADDR_VAR 0 12
11454: PUSH
11455: LD_VAR 0 1
11459: PPUSH
11460: CALL_OW 248
11464: ST_TO_ADDR
// side := GetSide ( tower ) ;
11465: LD_ADDR_VAR 0 16
11469: PUSH
11470: LD_VAR 0 1
11474: PPUSH
11475: CALL_OW 255
11479: ST_TO_ADDR
// x := GetX ( tower ) ;
11480: LD_ADDR_VAR 0 10
11484: PUSH
11485: LD_VAR 0 1
11489: PPUSH
11490: CALL_OW 250
11494: ST_TO_ADDR
// y := GetY ( tower ) ;
11495: LD_ADDR_VAR 0 11
11499: PUSH
11500: LD_VAR 0 1
11504: PPUSH
11505: CALL_OW 251
11509: ST_TO_ADDR
// if not x or not y then
11510: LD_VAR 0 10
11514: NOT
11515: IFTRUE 11524
11517: PUSH
11518: LD_VAR 0 11
11522: NOT
11523: OR
11524: IFFALSE 11528
// exit ;
11526: GO 12585
// weapon := 0 ;
11528: LD_ADDR_VAR 0 18
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// fac_list := [ ] ;
11536: LD_ADDR_VAR 0 17
11540: PUSH
11541: EMPTY
11542: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11543: LD_ADDR_VAR 0 6
11547: PUSH
11548: LD_VAR 0 1
11552: PPUSH
11553: CALL_OW 274
11557: PPUSH
11558: LD_VAR 0 2
11562: PPUSH
11563: LD_INT 0
11565: PPUSH
11566: CALL 9120 0 3
11570: PPUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 3
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 72
11585: ST_TO_ADDR
// if not factories then
11586: LD_VAR 0 6
11590: NOT
11591: IFFALSE 11595
// exit ;
11593: GO 12585
// for i in factories do
11595: LD_ADDR_VAR 0 8
11599: PUSH
11600: LD_VAR 0 6
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11631
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11608: LD_ADDR_VAR 0 17
11612: PUSH
11613: LD_VAR 0 17
11617: PUSH
11618: LD_VAR 0 8
11622: PPUSH
11623: CALL_OW 478
11627: UNION
11628: ST_TO_ADDR
11629: GO 11605
11631: POP
11632: POP
// if not fac_list then
11633: LD_VAR 0 17
11637: NOT
11638: IFFALSE 11642
// exit ;
11640: GO 12585
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11642: LD_ADDR_VAR 0 5
11646: PUSH
11647: LD_INT 4
11649: PUSH
11650: LD_INT 5
11652: PUSH
11653: LD_INT 9
11655: PUSH
11656: LD_INT 10
11658: PUSH
11659: LD_INT 6
11661: PUSH
11662: LD_INT 7
11664: PUSH
11665: LD_INT 11
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 27
11679: PUSH
11680: LD_INT 28
11682: PUSH
11683: LD_INT 26
11685: PUSH
11686: LD_INT 30
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 43
11697: PUSH
11698: LD_INT 44
11700: PUSH
11701: LD_INT 46
11703: PUSH
11704: LD_INT 45
11706: PUSH
11707: LD_INT 47
11709: PUSH
11710: LD_INT 49
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_VAR 0 12
11730: ARRAY
11731: ST_TO_ADDR
// list := list isect fac_list ;
11732: LD_ADDR_VAR 0 5
11736: PUSH
11737: LD_VAR 0 5
11741: PUSH
11742: LD_VAR 0 17
11746: ISECT
11747: ST_TO_ADDR
// if not list then
11748: LD_VAR 0 5
11752: NOT
11753: IFFALSE 11757
// exit ;
11755: GO 12585
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11757: LD_VAR 0 12
11761: PUSH
11762: LD_INT 3
11764: EQUAL
11765: IFFALSE 11777
11767: PUSH
11768: LD_INT 49
11770: PUSH
11771: LD_VAR 0 5
11775: IN
11776: AND
11777: IFFALSE 11797
11779: PUSH
11780: LD_INT 31
11782: PPUSH
11783: LD_VAR 0 16
11787: PPUSH
11788: CALL_OW 321
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: AND
11797: IFFALSE 11857
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11799: LD_INT 22
11801: PUSH
11802: LD_VAR 0 16
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 35
11813: PUSH
11814: LD_INT 49
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 91
11823: PUSH
11824: LD_VAR 0 1
11828: PUSH
11829: LD_INT 10
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: LIST
11841: PPUSH
11842: CALL_OW 69
11846: NOT
11847: IFFALSE 11857
// weapon := ru_time_lapser ;
11849: LD_ADDR_VAR 0 18
11853: PUSH
11854: LD_INT 49
11856: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11857: LD_VAR 0 12
11861: PUSH
11862: LD_INT 1
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: IN
11872: IFFALSE 11896
11874: PUSH
11875: LD_INT 11
11877: PUSH
11878: LD_VAR 0 5
11882: IN
11883: IFTRUE 11895
11885: PUSH
11886: LD_INT 30
11888: PUSH
11889: LD_VAR 0 5
11893: IN
11894: OR
11895: AND
11896: IFFALSE 11916
11898: PUSH
11899: LD_INT 6
11901: PPUSH
11902: LD_VAR 0 16
11906: PPUSH
11907: CALL_OW 321
11911: PUSH
11912: LD_INT 2
11914: EQUAL
11915: AND
11916: IFFALSE 12083
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11918: LD_INT 22
11920: PUSH
11921: LD_VAR 0 16
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 35
11935: PUSH
11936: LD_INT 11
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 35
11945: PUSH
11946: LD_INT 30
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 91
11960: PUSH
11961: LD_VAR 0 1
11965: PUSH
11966: LD_INT 18
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 69
11983: NOT
11984: IFFALSE 12060
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_VAR 0 16
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 30
12004: PUSH
12005: LD_INT 32
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 30
12014: PUSH
12015: LD_INT 33
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 91
12029: PUSH
12030: LD_VAR 0 1
12034: PUSH
12035: LD_INT 12
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: PUSH
12056: LD_INT 2
12058: GREATER
12059: AND
12060: IFFALSE 12083
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12062: LD_ADDR_VAR 0 18
12066: PUSH
12067: LD_INT 11
12069: PUSH
12070: LD_INT 30
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_VAR 0 12
12081: ARRAY
12082: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
12083: LD_VAR 0 18
12087: NOT
12088: IFFALSE 12108
12090: PUSH
12091: LD_INT 40
12093: PPUSH
12094: LD_VAR 0 16
12098: PPUSH
12099: CALL_OW 321
12103: PUSH
12104: LD_INT 2
12106: EQUAL
12107: AND
12108: IFFALSE 12144
12110: PUSH
12111: LD_INT 7
12113: PUSH
12114: LD_VAR 0 5
12118: IN
12119: IFTRUE 12131
12121: PUSH
12122: LD_INT 28
12124: PUSH
12125: LD_VAR 0 5
12129: IN
12130: OR
12131: IFTRUE 12143
12133: PUSH
12134: LD_INT 45
12136: PUSH
12137: LD_VAR 0 5
12141: IN
12142: OR
12143: AND
12144: IFFALSE 12398
// begin hex := GetHexInfo ( x , y ) ;
12146: LD_ADDR_VAR 0 4
12150: PUSH
12151: LD_VAR 0 10
12155: PPUSH
12156: LD_VAR 0 11
12160: PPUSH
12161: CALL_OW 546
12165: ST_TO_ADDR
// if hex [ 1 ] then
12166: LD_VAR 0 4
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: IFFALSE 12178
// exit ;
12176: GO 12585
// height := hex [ 2 ] ;
12178: LD_ADDR_VAR 0 15
12182: PUSH
12183: LD_VAR 0 4
12187: PUSH
12188: LD_INT 2
12190: ARRAY
12191: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
12192: LD_ADDR_VAR 0 14
12196: PUSH
12197: LD_INT 0
12199: PUSH
12200: LD_INT 2
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: LD_INT 5
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: ST_TO_ADDR
// for i in tmp do
12215: LD_ADDR_VAR 0 8
12219: PUSH
12220: LD_VAR 0 14
12224: PUSH
12225: FOR_IN
12226: IFFALSE 12396
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12228: LD_ADDR_VAR 0 9
12232: PUSH
12233: LD_VAR 0 10
12237: PPUSH
12238: LD_VAR 0 8
12242: PPUSH
12243: LD_INT 5
12245: PPUSH
12246: CALL_OW 272
12250: PUSH
12251: LD_VAR 0 11
12255: PPUSH
12256: LD_VAR 0 8
12260: PPUSH
12261: LD_INT 5
12263: PPUSH
12264: CALL_OW 273
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12273: LD_VAR 0 9
12277: PUSH
12278: LD_INT 1
12280: ARRAY
12281: PPUSH
12282: LD_VAR 0 9
12286: PUSH
12287: LD_INT 2
12289: ARRAY
12290: PPUSH
12291: CALL_OW 488
12295: IFFALSE 12394
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12297: LD_ADDR_VAR 0 4
12301: PUSH
12302: LD_VAR 0 9
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_VAR 0 9
12315: PUSH
12316: LD_INT 2
12318: ARRAY
12319: PPUSH
12320: CALL_OW 546
12324: ST_TO_ADDR
// if hex [ 1 ] then
12325: LD_VAR 0 4
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: IFFALSE 12337
// continue ;
12335: GO 12225
// h := hex [ 2 ] ;
12337: LD_ADDR_VAR 0 13
12341: PUSH
12342: LD_VAR 0 4
12346: PUSH
12347: LD_INT 2
12349: ARRAY
12350: ST_TO_ADDR
// if h + 7 < height then
12351: LD_VAR 0 13
12355: PUSH
12356: LD_INT 7
12358: PLUS
12359: PUSH
12360: LD_VAR 0 15
12364: LESS
12365: IFFALSE 12394
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12367: LD_ADDR_VAR 0 18
12371: PUSH
12372: LD_INT 7
12374: PUSH
12375: LD_INT 28
12377: PUSH
12378: LD_INT 45
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_VAR 0 12
12390: ARRAY
12391: ST_TO_ADDR
// break ;
12392: GO 12396
// end ; end ; end ;
12394: GO 12225
12396: POP
12397: POP
// end ; if not weapon then
12398: LD_VAR 0 18
12402: NOT
12403: IFFALSE 12463
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12405: LD_ADDR_VAR 0 5
12409: PUSH
12410: LD_VAR 0 5
12414: PUSH
12415: LD_INT 11
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 49
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: DIFF
12429: ST_TO_ADDR
// if not list then
12430: LD_VAR 0 5
12434: NOT
12435: IFFALSE 12439
// exit ;
12437: GO 12585
// weapon := list [ rand ( 1 , list ) ] ;
12439: LD_ADDR_VAR 0 18
12443: PUSH
12444: LD_VAR 0 5
12448: PUSH
12449: LD_INT 1
12451: PPUSH
12452: LD_VAR 0 5
12456: PPUSH
12457: CALL_OW 12
12461: ARRAY
12462: ST_TO_ADDR
// end ; if weapon then
12463: LD_VAR 0 18
12467: IFFALSE 12585
// begin tmp := CostOfWeapon ( weapon ) ;
12469: LD_ADDR_VAR 0 14
12473: PUSH
12474: LD_VAR 0 18
12478: PPUSH
12479: CALL_OW 451
12483: ST_TO_ADDR
// j := GetBase ( tower ) ;
12484: LD_ADDR_VAR 0 9
12488: PUSH
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 274
12498: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12499: LD_VAR 0 9
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: CALL_OW 275
12511: PUSH
12512: LD_VAR 0 14
12516: PUSH
12517: LD_INT 1
12519: ARRAY
12520: GREATEREQUAL
12521: IFFALSE 12547
12523: PUSH
12524: LD_VAR 0 9
12528: PPUSH
12529: LD_INT 2
12531: PPUSH
12532: CALL_OW 275
12536: PUSH
12537: LD_VAR 0 14
12541: PUSH
12542: LD_INT 2
12544: ARRAY
12545: GREATEREQUAL
12546: AND
12547: IFFALSE 12573
12549: PUSH
12550: LD_VAR 0 9
12554: PPUSH
12555: LD_INT 3
12557: PPUSH
12558: CALL_OW 275
12562: PUSH
12563: LD_VAR 0 14
12567: PUSH
12568: LD_INT 3
12570: ARRAY
12571: GREATEREQUAL
12572: AND
12573: IFFALSE 12585
// result := weapon ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_VAR 0 18
12584: ST_TO_ADDR
// end ; end ;
12585: LD_VAR 0 3
12589: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
// result := true ;
12594: LD_ADDR_VAR 0 3
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if array1 = array2 then
12602: LD_VAR 0 1
12606: PUSH
12607: LD_VAR 0 2
12611: EQUAL
12612: IFFALSE 12672
// begin for i = 1 to array1 do
12614: LD_ADDR_VAR 0 4
12618: PUSH
12619: DOUBLE
12620: LD_INT 1
12622: DEC
12623: ST_TO_ADDR
12624: LD_VAR 0 1
12628: PUSH
12629: FOR_TO
12630: IFFALSE 12668
// if array1 [ i ] <> array2 [ i ] then
12632: LD_VAR 0 1
12636: PUSH
12637: LD_VAR 0 4
12641: ARRAY
12642: PUSH
12643: LD_VAR 0 2
12647: PUSH
12648: LD_VAR 0 4
12652: ARRAY
12653: NONEQUAL
12654: IFFALSE 12666
// begin result := false ;
12656: LD_ADDR_VAR 0 3
12660: PUSH
12661: LD_INT 0
12663: ST_TO_ADDR
// break ;
12664: GO 12668
// end ;
12666: GO 12629
12668: POP
12669: POP
// end else
12670: GO 12680
// result := false ;
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_INT 0
12679: ST_TO_ADDR
// end ;
12680: LD_VAR 0 3
12684: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12685: LD_INT 0
12687: PPUSH
12688: PPUSH
// if not array1 or not array2 then
12689: LD_VAR 0 1
12693: NOT
12694: IFTRUE 12703
12696: PUSH
12697: LD_VAR 0 2
12701: NOT
12702: OR
12703: IFFALSE 12707
// exit ;
12705: GO 12771
// result := true ;
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_INT 1
12714: ST_TO_ADDR
// for i = 1 to array1 do
12715: LD_ADDR_VAR 0 4
12719: PUSH
12720: DOUBLE
12721: LD_INT 1
12723: DEC
12724: ST_TO_ADDR
12725: LD_VAR 0 1
12729: PUSH
12730: FOR_TO
12731: IFFALSE 12769
// if array1 [ i ] <> array2 [ i ] then
12733: LD_VAR 0 1
12737: PUSH
12738: LD_VAR 0 4
12742: ARRAY
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: LD_VAR 0 4
12753: ARRAY
12754: NONEQUAL
12755: IFFALSE 12767
// begin result := false ;
12757: LD_ADDR_VAR 0 3
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// break ;
12765: GO 12769
// end ;
12767: GO 12730
12769: POP
12770: POP
// end ;
12771: LD_VAR 0 3
12775: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
12780: PPUSH
// pom := GetBase ( fac ) ;
12781: LD_ADDR_VAR 0 5
12785: PUSH
12786: LD_VAR 0 1
12790: PPUSH
12791: CALL_OW 274
12795: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_VAR 0 2
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: LD_VAR 0 2
12814: PUSH
12815: LD_INT 2
12817: ARRAY
12818: PPUSH
12819: LD_VAR 0 2
12823: PUSH
12824: LD_INT 3
12826: ARRAY
12827: PPUSH
12828: LD_VAR 0 2
12832: PUSH
12833: LD_INT 4
12835: ARRAY
12836: PPUSH
12837: CALL_OW 449
12841: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12842: LD_ADDR_VAR 0 3
12846: PUSH
12847: LD_VAR 0 5
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 275
12859: PUSH
12860: LD_VAR 0 4
12864: PUSH
12865: LD_INT 1
12867: ARRAY
12868: GREATEREQUAL
12869: IFFALSE 12895
12871: PUSH
12872: LD_VAR 0 5
12876: PPUSH
12877: LD_INT 2
12879: PPUSH
12880: CALL_OW 275
12884: PUSH
12885: LD_VAR 0 4
12889: PUSH
12890: LD_INT 2
12892: ARRAY
12893: GREATEREQUAL
12894: AND
12895: IFFALSE 12921
12897: PUSH
12898: LD_VAR 0 5
12902: PPUSH
12903: LD_INT 3
12905: PPUSH
12906: CALL_OW 275
12910: PUSH
12911: LD_VAR 0 4
12915: PUSH
12916: LD_INT 3
12918: ARRAY
12919: GREATEREQUAL
12920: AND
12921: ST_TO_ADDR
// end ;
12922: LD_VAR 0 3
12926: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12927: LD_INT 0
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
// pom := GetBase ( building ) ;
12933: LD_ADDR_VAR 0 3
12937: PUSH
12938: LD_VAR 0 1
12942: PPUSH
12943: CALL_OW 274
12947: ST_TO_ADDR
// if not pom then
12948: LD_VAR 0 3
12952: NOT
12953: IFFALSE 12957
// exit ;
12955: GO 13131
// btype := GetBType ( building ) ;
12957: LD_ADDR_VAR 0 5
12961: PUSH
12962: LD_VAR 0 1
12966: PPUSH
12967: CALL_OW 266
12971: ST_TO_ADDR
// if btype = b_armoury then
12972: LD_VAR 0 5
12976: PUSH
12977: LD_INT 4
12979: EQUAL
12980: IFFALSE 12990
// btype := b_barracks ;
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: LD_INT 5
12989: ST_TO_ADDR
// if btype = b_depot then
12990: LD_VAR 0 5
12994: PUSH
12995: LD_INT 0
12997: EQUAL
12998: IFFALSE 13008
// btype := b_warehouse ;
13000: LD_ADDR_VAR 0 5
13004: PUSH
13005: LD_INT 1
13007: ST_TO_ADDR
// if btype = b_workshop then
13008: LD_VAR 0 5
13012: PUSH
13013: LD_INT 2
13015: EQUAL
13016: IFFALSE 13026
// btype := b_factory ;
13018: LD_ADDR_VAR 0 5
13022: PUSH
13023: LD_INT 3
13025: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: LD_VAR 0 5
13035: PPUSH
13036: LD_VAR 0 1
13040: PPUSH
13041: CALL_OW 248
13045: PPUSH
13046: CALL_OW 450
13050: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 275
13068: PUSH
13069: LD_VAR 0 4
13073: PUSH
13074: LD_INT 1
13076: ARRAY
13077: GREATEREQUAL
13078: IFFALSE 13104
13080: PUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 2
13088: PPUSH
13089: CALL_OW 275
13093: PUSH
13094: LD_VAR 0 4
13098: PUSH
13099: LD_INT 2
13101: ARRAY
13102: GREATEREQUAL
13103: AND
13104: IFFALSE 13130
13106: PUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 3
13114: PPUSH
13115: CALL_OW 275
13119: PUSH
13120: LD_VAR 0 4
13124: PUSH
13125: LD_INT 3
13127: ARRAY
13128: GREATEREQUAL
13129: AND
13130: ST_TO_ADDR
// end ;
13131: LD_VAR 0 2
13135: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
13136: LD_INT 0
13138: PPUSH
13139: PPUSH
13140: PPUSH
// pom := GetBase ( building ) ;
13141: LD_ADDR_VAR 0 4
13145: PUSH
13146: LD_VAR 0 1
13150: PPUSH
13151: CALL_OW 274
13155: ST_TO_ADDR
// if not pom then
13156: LD_VAR 0 4
13160: NOT
13161: IFFALSE 13165
// exit ;
13163: GO 13270
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13165: LD_ADDR_VAR 0 5
13169: PUSH
13170: LD_VAR 0 2
13174: PPUSH
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 248
13184: PPUSH
13185: CALL_OW 450
13189: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13190: LD_ADDR_VAR 0 3
13194: PUSH
13195: LD_VAR 0 4
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 275
13207: PUSH
13208: LD_VAR 0 5
13212: PUSH
13213: LD_INT 1
13215: ARRAY
13216: GREATEREQUAL
13217: IFFALSE 13243
13219: PUSH
13220: LD_VAR 0 4
13224: PPUSH
13225: LD_INT 2
13227: PPUSH
13228: CALL_OW 275
13232: PUSH
13233: LD_VAR 0 5
13237: PUSH
13238: LD_INT 2
13240: ARRAY
13241: GREATEREQUAL
13242: AND
13243: IFFALSE 13269
13245: PUSH
13246: LD_VAR 0 4
13250: PPUSH
13251: LD_INT 3
13253: PPUSH
13254: CALL_OW 275
13258: PUSH
13259: LD_VAR 0 5
13263: PUSH
13264: LD_INT 3
13266: ARRAY
13267: GREATEREQUAL
13268: AND
13269: ST_TO_ADDR
// end ;
13270: LD_VAR 0 3
13274: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13275: LD_INT 0
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
13283: PPUSH
13284: PPUSH
13285: PPUSH
13286: PPUSH
13287: PPUSH
// result := false ;
13288: LD_ADDR_VAR 0 8
13292: PUSH
13293: LD_INT 0
13295: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13296: LD_VAR 0 5
13300: NOT
13301: IFTRUE 13310
13303: PUSH
13304: LD_VAR 0 1
13308: NOT
13309: OR
13310: IFTRUE 13319
13312: PUSH
13313: LD_VAR 0 2
13317: NOT
13318: OR
13319: IFTRUE 13328
13321: PUSH
13322: LD_VAR 0 3
13326: NOT
13327: OR
13328: IFFALSE 13332
// exit ;
13330: GO 14158
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13332: LD_ADDR_VAR 0 14
13336: PUSH
13337: LD_VAR 0 1
13341: PPUSH
13342: LD_VAR 0 2
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_VAR 0 4
13356: PPUSH
13357: LD_VAR 0 5
13361: PUSH
13362: LD_INT 1
13364: ARRAY
13365: PPUSH
13366: CALL_OW 248
13370: PPUSH
13371: LD_INT 0
13373: PPUSH
13374: CALL 15439 0 6
13378: ST_TO_ADDR
// if not hexes then
13379: LD_VAR 0 14
13383: NOT
13384: IFFALSE 13388
// exit ;
13386: GO 14158
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13388: LD_ADDR_VAR 0 17
13392: PUSH
13393: LD_VAR 0 5
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_VAR 0 13
13405: PPUSH
13406: CALL_OW 255
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 30
13420: PUSH
13421: LD_INT 0
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 72
13451: ST_TO_ADDR
// for i = 1 to hexes do
13452: LD_ADDR_VAR 0 9
13456: PUSH
13457: DOUBLE
13458: LD_INT 1
13460: DEC
13461: ST_TO_ADDR
13462: LD_VAR 0 14
13466: PUSH
13467: FOR_TO
13468: IFFALSE 14156
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13470: LD_ADDR_VAR 0 13
13474: PUSH
13475: LD_VAR 0 14
13479: PUSH
13480: LD_VAR 0 9
13484: ARRAY
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: LD_VAR 0 14
13494: PUSH
13495: LD_VAR 0 9
13499: ARRAY
13500: PUSH
13501: LD_INT 2
13503: ARRAY
13504: PPUSH
13505: CALL_OW 428
13509: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13510: LD_VAR 0 14
13514: PUSH
13515: LD_VAR 0 9
13519: ARRAY
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 14
13529: PUSH
13530: LD_VAR 0 9
13534: ARRAY
13535: PUSH
13536: LD_INT 2
13538: ARRAY
13539: PPUSH
13540: CALL_OW 351
13544: IFTRUE 13583
13546: PUSH
13547: LD_VAR 0 14
13551: PUSH
13552: LD_VAR 0 9
13556: ARRAY
13557: PUSH
13558: LD_INT 1
13560: ARRAY
13561: PPUSH
13562: LD_VAR 0 14
13566: PUSH
13567: LD_VAR 0 9
13571: ARRAY
13572: PUSH
13573: LD_INT 2
13575: ARRAY
13576: PPUSH
13577: CALL_OW 488
13581: NOT
13582: OR
13583: IFTRUE 13600
13585: PUSH
13586: LD_VAR 0 13
13590: PPUSH
13591: CALL_OW 247
13595: PUSH
13596: LD_INT 3
13598: EQUAL
13599: OR
13600: IFFALSE 13606
// exit ;
13602: POP
13603: POP
13604: GO 14158
// if not tmp then
13606: LD_VAR 0 13
13610: NOT
13611: IFFALSE 13615
// continue ;
13613: GO 13467
// result := true ;
13615: LD_ADDR_VAR 0 8
13619: PUSH
13620: LD_INT 1
13622: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13623: LD_VAR 0 6
13627: IFFALSE 13644
13629: PUSH
13630: LD_VAR 0 13
13634: PPUSH
13635: CALL_OW 247
13639: PUSH
13640: LD_INT 2
13642: EQUAL
13643: AND
13644: IFFALSE 13661
13646: PUSH
13647: LD_VAR 0 13
13651: PPUSH
13652: CALL_OW 263
13656: PUSH
13657: LD_INT 1
13659: EQUAL
13660: AND
13661: IFFALSE 13825
// begin if IsDrivenBy ( tmp ) then
13663: LD_VAR 0 13
13667: PPUSH
13668: CALL_OW 311
13672: IFFALSE 13676
// continue ;
13674: GO 13467
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13676: LD_VAR 0 6
13680: PPUSH
13681: LD_INT 3
13683: PUSH
13684: LD_INT 60
13686: PUSH
13687: EMPTY
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: LD_INT 55
13699: PUSH
13700: EMPTY
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PPUSH
13711: CALL_OW 72
13715: IFFALSE 13823
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13717: LD_ADDR_VAR 0 18
13721: PUSH
13722: LD_VAR 0 6
13726: PPUSH
13727: LD_INT 3
13729: PUSH
13730: LD_INT 60
13732: PUSH
13733: EMPTY
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 3
13742: PUSH
13743: LD_INT 55
13745: PUSH
13746: EMPTY
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 72
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: ST_TO_ADDR
// if IsInUnit ( driver ) then
13766: LD_VAR 0 18
13770: PPUSH
13771: CALL_OW 310
13775: IFFALSE 13786
// ComExit ( driver ) ;
13777: LD_VAR 0 18
13781: PPUSH
13782: CALL 39429 0 1
// AddComEnterUnit ( driver , tmp ) ;
13786: LD_VAR 0 18
13790: PPUSH
13791: LD_VAR 0 13
13795: PPUSH
13796: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13800: LD_VAR 0 18
13804: PPUSH
13805: LD_VAR 0 7
13809: PPUSH
13810: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13814: LD_VAR 0 18
13818: PPUSH
13819: CALL_OW 181
// end ; continue ;
13823: GO 13467
// end ; if not cleaners or not tmp in cleaners then
13825: LD_VAR 0 6
13829: NOT
13830: IFTRUE 13845
13832: PUSH
13833: LD_VAR 0 13
13837: PUSH
13838: LD_VAR 0 6
13842: IN
13843: NOT
13844: OR
13845: IFFALSE 14154
// begin if dep then
13847: LD_VAR 0 17
13851: IFFALSE 13987
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13853: LD_ADDR_VAR 0 16
13857: PUSH
13858: LD_VAR 0 17
13862: PUSH
13863: LD_INT 1
13865: ARRAY
13866: PPUSH
13867: CALL_OW 250
13871: PPUSH
13872: LD_VAR 0 17
13876: PUSH
13877: LD_INT 1
13879: ARRAY
13880: PPUSH
13881: CALL_OW 254
13885: PPUSH
13886: LD_INT 5
13888: PPUSH
13889: CALL_OW 272
13893: PUSH
13894: LD_VAR 0 17
13898: PUSH
13899: LD_INT 1
13901: ARRAY
13902: PPUSH
13903: CALL_OW 251
13907: PPUSH
13908: LD_VAR 0 17
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: CALL_OW 254
13921: PPUSH
13922: LD_INT 5
13924: PPUSH
13925: CALL_OW 273
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13934: LD_VAR 0 16
13938: PUSH
13939: LD_INT 1
13941: ARRAY
13942: PPUSH
13943: LD_VAR 0 16
13947: PUSH
13948: LD_INT 2
13950: ARRAY
13951: PPUSH
13952: CALL_OW 488
13956: IFFALSE 13987
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13958: LD_VAR 0 13
13962: PPUSH
13963: LD_VAR 0 16
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PPUSH
13972: LD_VAR 0 16
13976: PUSH
13977: LD_INT 2
13979: ARRAY
13980: PPUSH
13981: CALL_OW 111
// continue ;
13985: GO 13467
// end ; end ; r := GetDir ( tmp ) ;
13987: LD_ADDR_VAR 0 15
13991: PUSH
13992: LD_VAR 0 13
13996: PPUSH
13997: CALL_OW 254
14001: ST_TO_ADDR
// if r = 5 then
14002: LD_VAR 0 15
14006: PUSH
14007: LD_INT 5
14009: EQUAL
14010: IFFALSE 14020
// r := 0 ;
14012: LD_ADDR_VAR 0 15
14016: PUSH
14017: LD_INT 0
14019: ST_TO_ADDR
// for j = r to 5 do
14020: LD_ADDR_VAR 0 10
14024: PUSH
14025: DOUBLE
14026: LD_VAR 0 15
14030: DEC
14031: ST_TO_ADDR
14032: LD_INT 5
14034: PUSH
14035: FOR_TO
14036: IFFALSE 14152
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14038: LD_ADDR_VAR 0 11
14042: PUSH
14043: LD_VAR 0 13
14047: PPUSH
14048: CALL_OW 250
14052: PPUSH
14053: LD_VAR 0 10
14057: PPUSH
14058: LD_INT 2
14060: PPUSH
14061: CALL_OW 272
14065: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14066: LD_ADDR_VAR 0 12
14070: PUSH
14071: LD_VAR 0 13
14075: PPUSH
14076: CALL_OW 251
14080: PPUSH
14081: LD_VAR 0 10
14085: PPUSH
14086: LD_INT 2
14088: PPUSH
14089: CALL_OW 273
14093: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14094: LD_VAR 0 11
14098: PPUSH
14099: LD_VAR 0 12
14103: PPUSH
14104: CALL_OW 488
14108: IFFALSE 14127
14110: PUSH
14111: LD_VAR 0 11
14115: PPUSH
14116: LD_VAR 0 12
14120: PPUSH
14121: CALL_OW 428
14125: NOT
14126: AND
14127: IFFALSE 14150
// begin ComMoveXY ( tmp , _x , _y ) ;
14129: LD_VAR 0 13
14133: PPUSH
14134: LD_VAR 0 11
14138: PPUSH
14139: LD_VAR 0 12
14143: PPUSH
14144: CALL_OW 111
// break ;
14148: GO 14152
// end ; end ;
14150: GO 14035
14152: POP
14153: POP
// end ; end ;
14154: GO 13467
14156: POP
14157: POP
// end ;
14158: LD_VAR 0 8
14162: RET
// export function BuildingTechInvented ( side , btype ) ; begin
14163: LD_INT 0
14165: PPUSH
// result := true ;
14166: LD_ADDR_VAR 0 3
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
14174: LD_VAR 0 2
14178: PUSH
14179: LD_INT 24
14181: DOUBLE
14182: EQUAL
14183: IFTRUE 14193
14185: LD_INT 33
14187: DOUBLE
14188: EQUAL
14189: IFTRUE 14193
14191: GO 14218
14193: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
14194: LD_ADDR_VAR 0 3
14198: PUSH
14199: LD_INT 32
14201: PPUSH
14202: LD_VAR 0 1
14206: PPUSH
14207: CALL_OW 321
14211: PUSH
14212: LD_INT 2
14214: EQUAL
14215: ST_TO_ADDR
14216: GO 14534
14218: LD_INT 20
14220: DOUBLE
14221: EQUAL
14222: IFTRUE 14226
14224: GO 14251
14226: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
14227: LD_ADDR_VAR 0 3
14231: PUSH
14232: LD_INT 6
14234: PPUSH
14235: LD_VAR 0 1
14239: PPUSH
14240: CALL_OW 321
14244: PUSH
14245: LD_INT 2
14247: EQUAL
14248: ST_TO_ADDR
14249: GO 14534
14251: LD_INT 22
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14265
14257: LD_INT 36
14259: DOUBLE
14260: EQUAL
14261: IFTRUE 14265
14263: GO 14290
14265: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14266: LD_ADDR_VAR 0 3
14270: PUSH
14271: LD_INT 15
14273: PPUSH
14274: LD_VAR 0 1
14278: PPUSH
14279: CALL_OW 321
14283: PUSH
14284: LD_INT 2
14286: EQUAL
14287: ST_TO_ADDR
14288: GO 14534
14290: LD_INT 30
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14323
14298: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14299: LD_ADDR_VAR 0 3
14303: PUSH
14304: LD_INT 20
14306: PPUSH
14307: LD_VAR 0 1
14311: PPUSH
14312: CALL_OW 321
14316: PUSH
14317: LD_INT 2
14319: EQUAL
14320: ST_TO_ADDR
14321: GO 14534
14323: LD_INT 28
14325: DOUBLE
14326: EQUAL
14327: IFTRUE 14337
14329: LD_INT 21
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14362
14337: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14338: LD_ADDR_VAR 0 3
14342: PUSH
14343: LD_INT 21
14345: PPUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 321
14355: PUSH
14356: LD_INT 2
14358: EQUAL
14359: ST_TO_ADDR
14360: GO 14534
14362: LD_INT 16
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14395
14370: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: LD_INT 84
14378: PPUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 321
14388: PUSH
14389: LD_INT 2
14391: EQUAL
14392: ST_TO_ADDR
14393: GO 14534
14395: LD_INT 19
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14409
14401: LD_INT 23
14403: DOUBLE
14404: EQUAL
14405: IFTRUE 14409
14407: GO 14434
14409: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14410: LD_ADDR_VAR 0 3
14414: PUSH
14415: LD_INT 83
14417: PPUSH
14418: LD_VAR 0 1
14422: PPUSH
14423: CALL_OW 321
14427: PUSH
14428: LD_INT 2
14430: EQUAL
14431: ST_TO_ADDR
14432: GO 14534
14434: LD_INT 17
14436: DOUBLE
14437: EQUAL
14438: IFTRUE 14442
14440: GO 14467
14442: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14443: LD_ADDR_VAR 0 3
14447: PUSH
14448: LD_INT 39
14450: PPUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 321
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: ST_TO_ADDR
14465: GO 14534
14467: LD_INT 18
14469: DOUBLE
14470: EQUAL
14471: IFTRUE 14475
14473: GO 14500
14475: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14476: LD_ADDR_VAR 0 3
14480: PUSH
14481: LD_INT 40
14483: PPUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 321
14493: PUSH
14494: LD_INT 2
14496: EQUAL
14497: ST_TO_ADDR
14498: GO 14534
14500: LD_INT 27
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 14533
14508: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_INT 35
14516: PPUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 321
14526: PUSH
14527: LD_INT 2
14529: EQUAL
14530: ST_TO_ADDR
14531: GO 14534
14533: POP
// end ;
14534: LD_VAR 0 3
14538: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
// result := false ;
14552: LD_ADDR_VAR 0 6
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// if btype = b_depot then
14560: LD_VAR 0 2
14564: PUSH
14565: LD_INT 0
14567: EQUAL
14568: IFFALSE 14580
// begin result := true ;
14570: LD_ADDR_VAR 0 6
14574: PUSH
14575: LD_INT 1
14577: ST_TO_ADDR
// exit ;
14578: GO 15434
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14580: LD_VAR 0 1
14584: NOT
14585: IFTRUE 14610
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 266
14597: PUSH
14598: LD_INT 0
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: IN
14608: NOT
14609: OR
14610: IFTRUE 14619
14612: PUSH
14613: LD_VAR 0 2
14617: NOT
14618: OR
14619: IFTRUE 14655
14621: PUSH
14622: LD_VAR 0 5
14626: PUSH
14627: LD_INT 0
14629: PUSH
14630: LD_INT 1
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: LD_INT 3
14638: PUSH
14639: LD_INT 4
14641: PUSH
14642: LD_INT 5
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: IN
14653: NOT
14654: OR
14655: IFTRUE 14674
14657: PUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_VAR 0 4
14667: PPUSH
14668: CALL_OW 488
14672: NOT
14673: OR
14674: IFFALSE 14678
// exit ;
14676: GO 15434
// side := GetSide ( depot ) ;
14678: LD_ADDR_VAR 0 9
14682: PUSH
14683: LD_VAR 0 1
14687: PPUSH
14688: CALL_OW 255
14692: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14693: LD_VAR 0 9
14697: PPUSH
14698: LD_VAR 0 2
14702: PPUSH
14703: CALL 14163 0 2
14707: NOT
14708: IFFALSE 14712
// exit ;
14710: GO 15434
// pom := GetBase ( depot ) ;
14712: LD_ADDR_VAR 0 10
14716: PUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 274
14726: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14727: LD_ADDR_VAR 0 11
14731: PUSH
14732: LD_VAR 0 2
14736: PPUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 248
14746: PPUSH
14747: CALL_OW 450
14751: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14752: LD_VAR 0 10
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 275
14764: PUSH
14765: LD_VAR 0 11
14769: PUSH
14770: LD_INT 1
14772: ARRAY
14773: GREATEREQUAL
14774: IFFALSE 14800
14776: PUSH
14777: LD_VAR 0 10
14781: PPUSH
14782: LD_INT 2
14784: PPUSH
14785: CALL_OW 275
14789: PUSH
14790: LD_VAR 0 11
14794: PUSH
14795: LD_INT 2
14797: ARRAY
14798: GREATEREQUAL
14799: AND
14800: IFFALSE 14826
14802: PUSH
14803: LD_VAR 0 10
14807: PPUSH
14808: LD_INT 3
14810: PPUSH
14811: CALL_OW 275
14815: PUSH
14816: LD_VAR 0 11
14820: PUSH
14821: LD_INT 3
14823: ARRAY
14824: GREATEREQUAL
14825: AND
14826: NOT
14827: IFFALSE 14831
// exit ;
14829: GO 15434
// if GetBType ( depot ) = b_depot then
14831: LD_VAR 0 1
14835: PPUSH
14836: CALL_OW 266
14840: PUSH
14841: LD_INT 0
14843: EQUAL
14844: IFFALSE 14856
// dist := 28 else
14846: LD_ADDR_VAR 0 14
14850: PUSH
14851: LD_INT 28
14853: ST_TO_ADDR
14854: GO 14864
// dist := 36 ;
14856: LD_ADDR_VAR 0 14
14860: PUSH
14861: LD_INT 36
14863: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14864: LD_VAR 0 1
14868: PPUSH
14869: LD_VAR 0 3
14873: PPUSH
14874: LD_VAR 0 4
14878: PPUSH
14879: CALL_OW 297
14883: PUSH
14884: LD_VAR 0 14
14888: GREATER
14889: IFFALSE 14893
// exit ;
14891: GO 15434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14893: LD_ADDR_VAR 0 12
14897: PUSH
14898: LD_VAR 0 2
14902: PPUSH
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_VAR 0 4
14912: PPUSH
14913: LD_VAR 0 5
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 248
14927: PPUSH
14928: LD_INT 0
14930: PPUSH
14931: CALL 15439 0 6
14935: ST_TO_ADDR
// if not hexes then
14936: LD_VAR 0 12
14940: NOT
14941: IFFALSE 14945
// exit ;
14943: GO 15434
// hex := GetHexInfo ( x , y ) ;
14945: LD_ADDR_VAR 0 15
14949: PUSH
14950: LD_VAR 0 3
14954: PPUSH
14955: LD_VAR 0 4
14959: PPUSH
14960: CALL_OW 546
14964: ST_TO_ADDR
// if hex [ 1 ] then
14965: LD_VAR 0 15
14969: PUSH
14970: LD_INT 1
14972: ARRAY
14973: IFFALSE 14977
// exit ;
14975: GO 15434
// height := hex [ 2 ] ;
14977: LD_ADDR_VAR 0 13
14981: PUSH
14982: LD_VAR 0 15
14986: PUSH
14987: LD_INT 2
14989: ARRAY
14990: ST_TO_ADDR
// for i = 1 to hexes do
14991: LD_ADDR_VAR 0 7
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_VAR 0 12
15005: PUSH
15006: FOR_TO
15007: IFFALSE 15351
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15009: LD_VAR 0 12
15013: PUSH
15014: LD_VAR 0 7
15018: ARRAY
15019: PUSH
15020: LD_INT 1
15022: ARRAY
15023: PPUSH
15024: LD_VAR 0 12
15028: PUSH
15029: LD_VAR 0 7
15033: ARRAY
15034: PUSH
15035: LD_INT 2
15037: ARRAY
15038: PPUSH
15039: CALL_OW 488
15043: NOT
15044: IFTRUE 15086
15046: PUSH
15047: LD_VAR 0 12
15051: PUSH
15052: LD_VAR 0 7
15056: ARRAY
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: PPUSH
15062: LD_VAR 0 12
15066: PUSH
15067: LD_VAR 0 7
15071: ARRAY
15072: PUSH
15073: LD_INT 2
15075: ARRAY
15076: PPUSH
15077: CALL_OW 428
15081: PUSH
15082: LD_INT 0
15084: GREATER
15085: OR
15086: IFTRUE 15124
15088: PUSH
15089: LD_VAR 0 12
15093: PUSH
15094: LD_VAR 0 7
15098: ARRAY
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: PPUSH
15104: LD_VAR 0 12
15108: PUSH
15109: LD_VAR 0 7
15113: ARRAY
15114: PUSH
15115: LD_INT 2
15117: ARRAY
15118: PPUSH
15119: CALL_OW 351
15123: OR
15124: IFFALSE 15130
// exit ;
15126: POP
15127: POP
15128: GO 15434
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15130: LD_ADDR_VAR 0 8
15134: PUSH
15135: LD_VAR 0 12
15139: PUSH
15140: LD_VAR 0 7
15144: ARRAY
15145: PUSH
15146: LD_INT 1
15148: ARRAY
15149: PPUSH
15150: LD_VAR 0 12
15154: PUSH
15155: LD_VAR 0 7
15159: ARRAY
15160: PUSH
15161: LD_INT 2
15163: ARRAY
15164: PPUSH
15165: CALL_OW 546
15169: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
15170: LD_VAR 0 8
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: IFTRUE 15200
15180: PUSH
15181: LD_VAR 0 8
15185: PUSH
15186: LD_INT 2
15188: ARRAY
15189: PUSH
15190: LD_VAR 0 13
15194: PUSH
15195: LD_INT 2
15197: PLUS
15198: GREATER
15199: OR
15200: IFTRUE 15222
15202: PUSH
15203: LD_VAR 0 8
15207: PUSH
15208: LD_INT 2
15210: ARRAY
15211: PUSH
15212: LD_VAR 0 13
15216: PUSH
15217: LD_INT 2
15219: MINUS
15220: LESS
15221: OR
15222: IFTRUE 15290
15224: PUSH
15225: LD_VAR 0 8
15229: PUSH
15230: LD_INT 3
15232: ARRAY
15233: PUSH
15234: LD_INT 0
15236: PUSH
15237: LD_INT 8
15239: PUSH
15240: LD_INT 9
15242: PUSH
15243: LD_INT 10
15245: PUSH
15246: LD_INT 11
15248: PUSH
15249: LD_INT 12
15251: PUSH
15252: LD_INT 13
15254: PUSH
15255: LD_INT 16
15257: PUSH
15258: LD_INT 17
15260: PUSH
15261: LD_INT 18
15263: PUSH
15264: LD_INT 19
15266: PUSH
15267: LD_INT 20
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: IN
15288: NOT
15289: OR
15290: IFTRUE 15303
15292: PUSH
15293: LD_VAR 0 8
15297: PUSH
15298: LD_INT 5
15300: ARRAY
15301: NOT
15302: OR
15303: IFTRUE 15343
15305: PUSH
15306: LD_VAR 0 8
15310: PUSH
15311: LD_INT 6
15313: ARRAY
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: LD_INT 2
15320: PUSH
15321: LD_INT 7
15323: PUSH
15324: LD_INT 9
15326: PUSH
15327: LD_INT 10
15329: PUSH
15330: LD_INT 11
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: IN
15341: NOT
15342: OR
15343: IFFALSE 15349
// exit ;
15345: POP
15346: POP
15347: GO 15434
// end ;
15349: GO 15006
15351: POP
15352: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15353: LD_VAR 0 9
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 20
15370: PPUSH
15371: CALL 7253 0 4
15375: PUSH
15376: LD_INT 4
15378: ARRAY
15379: IFFALSE 15383
// exit ;
15381: GO 15434
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15383: LD_VAR 0 2
15387: PUSH
15388: LD_INT 29
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: IN
15398: IFFALSE 15422
15400: PUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_VAR 0 4
15410: PPUSH
15411: LD_VAR 0 9
15415: PPUSH
15416: CALL_OW 440
15420: NOT
15421: AND
15422: IFFALSE 15426
// exit ;
15424: GO 15434
// result := true ;
15426: LD_ADDR_VAR 0 6
15430: PUSH
15431: LD_INT 1
15433: ST_TO_ADDR
// end ;
15434: LD_VAR 0 6
15438: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15439: LD_INT 0
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
15473: PPUSH
15474: PPUSH
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
15481: PPUSH
15482: PPUSH
15483: PPUSH
15484: PPUSH
15485: PPUSH
15486: PPUSH
15487: PPUSH
15488: PPUSH
15489: PPUSH
15490: PPUSH
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
15495: PPUSH
15496: PPUSH
15497: PPUSH
15498: PPUSH
// result = [ ] ;
15499: LD_ADDR_VAR 0 7
15503: PUSH
15504: EMPTY
15505: ST_TO_ADDR
// temp_list = [ ] ;
15506: LD_ADDR_VAR 0 9
15510: PUSH
15511: EMPTY
15512: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15513: LD_VAR 0 4
15517: PUSH
15518: LD_INT 0
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: LD_INT 2
15526: PUSH
15527: LD_INT 3
15529: PUSH
15530: LD_INT 4
15532: PUSH
15533: LD_INT 5
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: IN
15544: NOT
15545: IFTRUE 15588
15547: PUSH
15548: LD_VAR 0 1
15552: PUSH
15553: LD_INT 0
15555: PUSH
15556: LD_INT 1
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: IN
15563: IFFALSE 15587
15565: PUSH
15566: LD_VAR 0 5
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: IN
15585: NOT
15586: AND
15587: OR
15588: IFFALSE 15592
// exit ;
15590: GO 33991
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_INT 6
15599: PUSH
15600: LD_INT 7
15602: PUSH
15603: LD_INT 8
15605: PUSH
15606: LD_INT 13
15608: PUSH
15609: LD_INT 12
15611: PUSH
15612: LD_INT 15
15614: PUSH
15615: LD_INT 11
15617: PUSH
15618: LD_INT 14
15620: PUSH
15621: LD_INT 10
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: IN
15635: IFFALSE 15645
// btype = b_lab ;
15637: LD_ADDR_VAR 0 1
15641: PUSH
15642: LD_INT 6
15644: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15645: LD_VAR 0 6
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: LD_INT 1
15655: PUSH
15656: LD_INT 2
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: IN
15664: NOT
15665: IFTRUE 15733
15667: PUSH
15668: LD_VAR 0 1
15672: PUSH
15673: LD_INT 0
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 6
15687: PUSH
15688: LD_INT 36
15690: PUSH
15691: LD_INT 4
15693: PUSH
15694: LD_INT 5
15696: PUSH
15697: LD_INT 31
15699: PUSH
15700: LD_INT 32
15702: PUSH
15703: LD_INT 33
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: IN
15719: NOT
15720: IFFALSE 15732
15722: PUSH
15723: LD_VAR 0 6
15727: PUSH
15728: LD_INT 1
15730: EQUAL
15731: AND
15732: OR
15733: IFTRUE 15765
15735: PUSH
15736: LD_VAR 0 1
15740: PUSH
15741: LD_INT 2
15743: PUSH
15744: LD_INT 3
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: IN
15751: NOT
15752: IFFALSE 15764
15754: PUSH
15755: LD_VAR 0 6
15759: PUSH
15760: LD_INT 2
15762: EQUAL
15763: AND
15764: OR
15765: IFFALSE 15775
// mode = 0 ;
15767: LD_ADDR_VAR 0 6
15771: PUSH
15772: LD_INT 0
15774: ST_TO_ADDR
// case mode of 0 :
15775: LD_VAR 0 6
15779: PUSH
15780: LD_INT 0
15782: DOUBLE
15783: EQUAL
15784: IFTRUE 15788
15786: GO 27241
15788: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15789: LD_ADDR_VAR 0 11
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: LD_INT 0
15806: PUSH
15807: LD_INT 1
15809: NEG
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 0
15837: PUSH
15838: LD_INT 1
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 1
15847: NEG
15848: PUSH
15849: LD_INT 0
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 1
15858: NEG
15859: PUSH
15860: LD_INT 1
15862: NEG
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 1
15870: NEG
15871: PUSH
15872: LD_INT 2
15874: NEG
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 0
15882: PUSH
15883: LD_INT 2
15885: NEG
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: LD_INT 1
15896: NEG
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 1
15904: PUSH
15905: LD_INT 2
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: LD_INT 0
15914: PUSH
15915: LD_INT 2
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: LD_INT 1
15935: PUSH
15936: LD_INT 3
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 0
15945: PUSH
15946: LD_INT 3
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: NEG
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15982: LD_ADDR_VAR 0 12
15986: PUSH
15987: LD_INT 0
15989: PUSH
15990: LD_INT 0
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 0
15999: PUSH
16000: LD_INT 1
16002: NEG
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: LD_INT 0
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: LD_INT 1
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 0
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: LD_INT 0
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 1
16051: NEG
16052: PUSH
16053: LD_INT 1
16055: NEG
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 1
16063: PUSH
16064: LD_INT 1
16066: NEG
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 2
16074: PUSH
16075: LD_INT 0
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 1
16094: NEG
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: LD_INT 2
16105: NEG
16106: PUSH
16107: LD_INT 0
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 2
16116: NEG
16117: PUSH
16118: LD_INT 1
16120: NEG
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 2
16128: NEG
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 3
16139: NEG
16140: PUSH
16141: LD_INT 0
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 3
16150: NEG
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16178: LD_ADDR_VAR 0 13
16182: PUSH
16183: LD_INT 0
16185: PUSH
16186: LD_INT 0
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 0
16195: PUSH
16196: LD_INT 1
16198: NEG
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: LD_INT 1
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 1
16236: NEG
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 1
16247: NEG
16248: PUSH
16249: LD_INT 1
16251: NEG
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 1
16259: NEG
16260: PUSH
16261: LD_INT 2
16263: NEG
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 2
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 2
16301: NEG
16302: PUSH
16303: LD_INT 1
16305: NEG
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 2
16313: NEG
16314: PUSH
16315: LD_INT 2
16317: NEG
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 2
16325: NEG
16326: PUSH
16327: LD_INT 3
16329: NEG
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 3
16337: NEG
16338: PUSH
16339: LD_INT 2
16341: NEG
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 3
16349: NEG
16350: PUSH
16351: LD_INT 3
16353: NEG
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16377: LD_ADDR_VAR 0 14
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: LD_INT 0
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 0
16394: PUSH
16395: LD_INT 1
16397: NEG
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 0
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: LD_INT 1
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 1
16435: NEG
16436: PUSH
16437: LD_INT 0
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: LD_INT 1
16450: NEG
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: LD_INT 2
16462: NEG
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: LD_INT 2
16473: NEG
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: LD_INT 1
16484: NEG
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 1
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 0
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 1
16512: NEG
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 1
16523: NEG
16524: PUSH
16525: LD_INT 3
16527: NEG
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 0
16535: PUSH
16536: LD_INT 3
16538: NEG
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: LD_INT 2
16549: NEG
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16573: LD_ADDR_VAR 0 15
16577: PUSH
16578: LD_INT 0
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 0
16590: PUSH
16591: LD_INT 1
16593: NEG
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 1
16601: PUSH
16602: LD_INT 0
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: LD_INT 1
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 0
16621: PUSH
16622: LD_INT 1
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PUSH
16629: LD_INT 1
16631: NEG
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 1
16642: NEG
16643: PUSH
16644: LD_INT 1
16646: NEG
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: LD_INT 1
16657: NEG
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 2
16665: PUSH
16666: LD_INT 0
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 2
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: NEG
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 2
16696: NEG
16697: PUSH
16698: LD_INT 0
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 2
16707: NEG
16708: PUSH
16709: LD_INT 1
16711: NEG
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: LD_INT 1
16722: NEG
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 3
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 3
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16766: LD_ADDR_VAR 0 16
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 0
16783: PUSH
16784: LD_INT 1
16786: NEG
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: LD_INT 0
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 1
16804: PUSH
16805: LD_INT 1
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: LD_INT 1
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 1
16824: NEG
16825: PUSH
16826: LD_INT 0
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 1
16835: NEG
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PUSH
16845: LD_INT 1
16847: NEG
16848: PUSH
16849: LD_INT 2
16851: NEG
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 2
16889: NEG
16890: PUSH
16891: LD_INT 1
16893: NEG
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 2
16901: NEG
16902: PUSH
16903: LD_INT 2
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 3
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 3
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: LD_INT 3
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16959: LD_ADDR_VAR 0 17
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 0
16976: PUSH
16977: LD_INT 1
16979: NEG
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: LD_INT 0
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: LD_INT 1
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 1
17017: NEG
17018: PUSH
17019: LD_INT 0
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 1
17028: NEG
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: NEG
17041: PUSH
17042: LD_INT 2
17044: NEG
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: LD_INT 2
17055: NEG
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: LD_INT 1
17066: NEG
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: PUSH
17085: LD_INT 1
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 2
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: LD_INT 2
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 0
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 2
17135: NEG
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PUSH
17144: LD_INT 2
17146: NEG
17147: PUSH
17148: LD_INT 1
17150: NEG
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: LD_INT 2
17158: NEG
17159: PUSH
17160: LD_INT 2
17162: NEG
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17189: LD_ADDR_VAR 0 18
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 0
17206: PUSH
17207: LD_INT 1
17209: NEG
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 0
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 1
17247: NEG
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: LD_INT 1
17262: NEG
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 2
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 0
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 2
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 0
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 1
17354: NEG
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 2
17365: NEG
17366: PUSH
17367: LD_INT 0
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 2
17376: NEG
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 2
17388: NEG
17389: PUSH
17390: LD_INT 2
17392: NEG
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17419: LD_ADDR_VAR 0 19
17423: PUSH
17424: LD_INT 0
17426: PUSH
17427: LD_INT 0
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: LD_INT 0
17436: PUSH
17437: LD_INT 1
17439: NEG
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: LD_INT 0
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 0
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: NEG
17478: PUSH
17479: LD_INT 0
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 1
17488: NEG
17489: PUSH
17490: LD_INT 1
17492: NEG
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: NEG
17501: PUSH
17502: LD_INT 2
17504: NEG
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 2
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 1
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 1
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 2
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 1
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 2
17595: NEG
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 2
17606: NEG
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 2
17618: NEG
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17649: LD_ADDR_VAR 0 20
17653: PUSH
17654: LD_INT 0
17656: PUSH
17657: LD_INT 0
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 0
17666: PUSH
17667: LD_INT 1
17669: NEG
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: LD_INT 0
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 1
17707: NEG
17708: PUSH
17709: LD_INT 0
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: NEG
17719: PUSH
17720: LD_INT 1
17722: NEG
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 1
17730: NEG
17731: PUSH
17732: LD_INT 2
17734: NEG
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 0
17742: PUSH
17743: LD_INT 2
17745: NEG
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: PUSH
17775: LD_INT 1
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 2
17784: PUSH
17785: LD_INT 2
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: LD_INT 2
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 2
17825: NEG
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 2
17836: NEG
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 2
17848: NEG
17849: PUSH
17850: LD_INT 2
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17879: LD_ADDR_VAR 0 21
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: LD_INT 0
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 0
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 0
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: NEG
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: LD_INT 2
17964: NEG
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 2
17975: NEG
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 2
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 0
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 2
18055: NEG
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 2
18066: NEG
18067: PUSH
18068: LD_INT 1
18070: NEG
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 2
18078: NEG
18079: PUSH
18080: LD_INT 2
18082: NEG
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18109: LD_ADDR_VAR 0 22
18113: PUSH
18114: LD_INT 0
18116: PUSH
18117: LD_INT 0
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 0
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: LD_INT 1
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 1
18167: NEG
18168: PUSH
18169: LD_INT 0
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 1
18182: NEG
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: LD_INT 2
18194: NEG
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: LD_INT 2
18205: NEG
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 1
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: NEG
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: NEG
18309: PUSH
18310: LD_INT 2
18312: NEG
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18339: LD_ADDR_VAR 0 23
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 1
18420: NEG
18421: PUSH
18422: LD_INT 2
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: LD_INT 2
18435: NEG
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 1
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PUSH
18492: LD_INT 0
18494: PUSH
18495: LD_INT 2
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 1
18504: NEG
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 2
18515: NEG
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: LD_INT 1
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 2
18538: NEG
18539: PUSH
18540: LD_INT 2
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 2
18550: NEG
18551: PUSH
18552: LD_INT 3
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 1
18562: NEG
18563: PUSH
18564: LD_INT 3
18566: NEG
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18619: LD_ADDR_VAR 0 24
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 1
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 0
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: NEG
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: NEG
18689: PUSH
18690: LD_INT 1
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 2
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 1
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 2
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 2
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: NEG
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: NEG
18796: PUSH
18797: LD_INT 0
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: NEG
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: NEG
18819: PUSH
18820: LD_INT 2
18822: NEG
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 1
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 3
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 3
18862: PUSH
18863: LD_INT 2
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18895: LD_ADDR_VAR 0 25
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: LD_INT 2
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: LD_INT 2
18991: NEG
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: LD_INT 1
19086: NEG
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: NEG
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 3
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 3
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: LD_INT 3
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 3
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19169: LD_ADDR_VAR 0 26
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 2
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: NEG
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: LD_INT 3
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: PUSH
19391: LD_INT 3
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 2
19411: NEG
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19445: LD_ADDR_VAR 0 27
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: LD_INT 0
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 0
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 1
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 0
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: NEG
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 0
19600: PUSH
19601: LD_INT 2
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 1
19610: NEG
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 2
19644: NEG
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 2
19667: NEG
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 3
19678: NEG
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 3
19690: NEG
19691: PUSH
19692: LD_INT 2
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19725: LD_ADDR_VAR 0 28
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: LD_INT 0
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 1
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 0
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 1
19798: NEG
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 2
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 1
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 1
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 1
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: NEG
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: LD_INT 2
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 2
19936: NEG
19937: PUSH
19938: LD_INT 3
19940: NEG
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: LD_INT 3
19952: NEG
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 3
19960: NEG
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 3
19972: NEG
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20007: LD_ADDR_VAR 0 29
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 1
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: LD_INT 1
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 2
20092: NEG
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: LD_INT 2
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: LD_INT 1
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 2
20173: NEG
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 2
20185: NEG
20186: PUSH
20187: LD_INT 2
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: LD_INT 3
20201: NEG
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 3
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 3
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 1
20240: NEG
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 3
20251: NEG
20252: PUSH
20253: LD_INT 2
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20286: LD_ADDR_VAR 0 30
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: LD_INT 2
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 2
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: NEG
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: NEG
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: NEG
20464: PUSH
20465: LD_INT 1
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: LD_INT 3
20479: NEG
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 2
20490: NEG
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 3
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 3
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: NEG
20519: PUSH
20520: LD_INT 1
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 3
20529: NEG
20530: PUSH
20531: LD_INT 1
20533: NEG
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20564: LD_ADDR_VAR 0 31
20568: PUSH
20569: LD_INT 0
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: LD_INT 1
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 0
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: LD_INT 2
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: LD_INT 3
20757: NEG
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 3
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: NEG
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 3
20807: NEG
20808: PUSH
20809: LD_INT 2
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20842: LD_ADDR_VAR 0 32
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 0
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: LD_INT 1
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 2
21008: NEG
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 2
21019: NEG
21020: PUSH
21021: LD_INT 1
21023: NEG
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: LD_INT 3
21035: NEG
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 2
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 3
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: LD_INT 3
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 2
21074: NEG
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 3
21085: NEG
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21120: LD_ADDR_VAR 0 33
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 0
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: NEG
21202: PUSH
21203: LD_INT 2
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 2
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: NEG
21265: PUSH
21266: LD_INT 1
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 2
21275: NEG
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 2
21298: NEG
21299: PUSH
21300: LD_INT 2
21302: NEG
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 2
21310: NEG
21311: PUSH
21312: LD_INT 3
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 3
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 3
21364: NEG
21365: PUSH
21366: LD_INT 2
21368: NEG
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21399: LD_ADDR_VAR 0 34
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: LD_INT 0
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: LD_INT 1
21472: NEG
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: LD_INT 2
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 2
21495: NEG
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 1
21503: PUSH
21504: LD_INT 1
21506: NEG
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PUSH
21512: LD_INT 2
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 2
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: LD_INT 2
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: LD_INT 0
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: LD_INT 3
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 2
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: LD_INT 2
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 3
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: NEG
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 3
21644: NEG
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21679: LD_ADDR_VAR 0 35
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: LD_INT 0
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 1
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_INT 1
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 2
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: NEG
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21791: LD_ADDR_VAR 0 36
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 0
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: LD_INT 0
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: LD_INT 0
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: NEG
21861: PUSH
21862: LD_INT 1
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: NEG
21873: PUSH
21874: LD_INT 2
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 1
21884: PUSH
21885: LD_INT 2
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21903: LD_ADDR_VAR 0 37
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22015: LD_ADDR_VAR 0 38
22019: PUSH
22020: LD_INT 0
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 0
22032: PUSH
22033: LD_INT 1
22035: NEG
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: LD_INT 0
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 1
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 1
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: NEG
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 2
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 2
22106: NEG
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22127: LD_ADDR_VAR 0 39
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: LD_INT 1
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: NEG
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: NEG
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22239: LD_ADDR_VAR 0 40
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: LD_INT 1
22259: NEG
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22351: LD_ADDR_VAR 0 41
22355: PUSH
22356: LD_INT 0
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: NEG
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: LD_INT 1
22424: NEG
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: LD_INT 2
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: LD_INT 1
22447: NEG
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 2
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: LD_INT 2
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: NEG
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: NEG
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: LD_INT 3
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 3
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 3
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: NEG
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 3
22625: NEG
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 3
22636: NEG
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 3
22648: NEG
22649: PUSH
22650: LD_INT 2
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: NEG
22661: PUSH
22662: LD_INT 3
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22701: LD_ADDR_VAR 0 42
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 2
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 2
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: NEG
22892: PUSH
22893: LD_INT 3
22895: NEG
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: NEG
22904: PUSH
22905: LD_INT 3
22907: NEG
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 0
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 3
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 3
22998: NEG
22999: PUSH
23000: LD_INT 2
23002: NEG
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 3
23010: NEG
23011: PUSH
23012: LD_INT 3
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23051: LD_ADDR_VAR 0 43
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 0
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 1
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 1
23206: NEG
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 2
23228: NEG
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 3
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 3
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 3
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: LD_INT 3
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 3
23347: NEG
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 3
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23399: LD_ADDR_VAR 0 44
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: LD_INT 2
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: LD_INT 0
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 2
23554: NEG
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: LD_INT 2
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 3
23593: NEG
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 3
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 3
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 3
23632: PUSH
23633: LD_INT 2
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 3
23642: PUSH
23643: LD_INT 3
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: LD_INT 3
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 2
23662: NEG
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 3
23673: NEG
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 3
23684: NEG
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 3
23696: NEG
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 3
23708: NEG
23709: PUSH
23710: LD_INT 3
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23749: LD_ADDR_VAR 0 45
23753: PUSH
23754: LD_INT 0
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 0
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: LD_INT 1
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 2
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 2
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: NEG
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: LD_INT 2
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: NEG
23940: PUSH
23941: LD_INT 3
23943: NEG
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: LD_INT 3
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 3
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 2
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 3
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: LD_INT 3
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 3
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: LD_INT 3
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 3
24046: NEG
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 3
24058: NEG
24059: PUSH
24060: LD_INT 3
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24099: LD_ADDR_VAR 0 46
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 1
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: NEG
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 2
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: LD_INT 2
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: LD_INT 1
24206: NEG
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 0
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 2
24265: NEG
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: NEG
24289: PUSH
24290: LD_INT 3
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: LD_INT 3
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 2
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 3
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: NEG
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 3
24395: NEG
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 3
24406: NEG
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24447: LD_ADDR_VAR 0 47
24451: PUSH
24452: LD_INT 0
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 2
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 2
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 1
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 2
24562: NEG
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 2
24574: NEG
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24598: LD_ADDR_VAR 0 48
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 0
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: LD_INT 0
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: LD_INT 2
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24745: LD_ADDR_VAR 0 49
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: LD_INT 1
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 2
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24889: LD_ADDR_VAR 0 50
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: LD_INT 1
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25033: LD_ADDR_VAR 0 51
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 2
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 2
25145: NEG
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 2
25156: NEG
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25180: LD_ADDR_VAR 0 52
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 0
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 0
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: NEG
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: NEG
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: NEG
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25331: LD_ADDR_VAR 0 53
25335: PUSH
25336: LD_INT 0
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 1
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 1
25412: NEG
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 0
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: LD_INT 2
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 2
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: LD_INT 2
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 1
25496: NEG
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: NEG
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25561: LD_ADDR_VAR 0 54
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 0
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 2
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: NEG
25749: PUSH
25750: LD_INT 1
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25791: LD_ADDR_VAR 0 55
25795: PUSH
25796: LD_INT 0
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: PUSH
25874: LD_INT 2
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 2
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 2
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: LD_INT 2
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: LD_INT 2
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26021: LD_ADDR_VAR 0 56
26025: PUSH
26026: LD_INT 0
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: LD_INT 2
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 2
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 2
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: NEG
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: LD_INT 2
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26251: LD_ADDR_VAR 0 57
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26481: LD_ADDR_VAR 0 58
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 2
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 2
26657: NEG
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 2
26680: NEG
26681: PUSH
26682: LD_INT 2
26684: NEG
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26711: LD_ADDR_VAR 0 59
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26799: LD_ADDR_VAR 0 60
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26887: LD_ADDR_VAR 0 61
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26975: LD_ADDR_VAR 0 62
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27063: LD_ADDR_VAR 0 63
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27151: LD_ADDR_VAR 0 64
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 1
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
// end ; 1 :
27239: GO 33136
27241: LD_INT 1
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 29872
27249: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27250: LD_ADDR_VAR 0 11
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: LD_INT 3
27261: NEG
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 3
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27294: LD_ADDR_VAR 0 12
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: LIST
27334: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27335: LD_ADDR_VAR 0 13
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: LD_INT 2
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 3
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 3
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27375: LD_ADDR_VAR 0 14
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 3
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27416: LD_ADDR_VAR 0 15
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 3
27434: NEG
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 3
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27460: LD_ADDR_VAR 0 16
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 3
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 3
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 3
27491: NEG
27492: PUSH
27493: LD_INT 3
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27506: LD_ADDR_VAR 0 17
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 3
27517: NEG
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 3
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27550: LD_ADDR_VAR 0 18
27554: PUSH
27555: LD_INT 2
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 3
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 3
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27591: LD_ADDR_VAR 0 19
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 3
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27631: LD_ADDR_VAR 0 20
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 3
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: LD_INT 2
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27672: LD_ADDR_VAR 0 21
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 3
27690: NEG
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 3
27701: NEG
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27716: LD_ADDR_VAR 0 22
27720: PUSH
27721: LD_INT 2
27723: NEG
27724: PUSH
27725: LD_INT 3
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 3
27747: NEG
27748: PUSH
27749: LD_INT 3
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27762: LD_ADDR_VAR 0 23
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 3
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 4
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: LD_INT 3
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: LIST
27805: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27806: LD_ADDR_VAR 0 24
27810: PUSH
27811: LD_INT 3
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 3
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 4
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27847: LD_ADDR_VAR 0 25
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: LD_INT 3
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 4
27864: PUSH
27865: LD_INT 3
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 3
27874: PUSH
27875: LD_INT 4
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27887: LD_ADDR_VAR 0 26
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: LD_INT 4
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27928: LD_ADDR_VAR 0 27
27932: PUSH
27933: LD_INT 3
27935: NEG
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 3
27946: NEG
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 4
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27972: LD_ADDR_VAR 0 28
27976: PUSH
27977: LD_INT 3
27979: NEG
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 3
27991: NEG
27992: PUSH
27993: LD_INT 4
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 4
28003: NEG
28004: PUSH
28005: LD_INT 3
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28018: LD_ADDR_VAR 0 29
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 3
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 3
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 2
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 4
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 4
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 3
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 5
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 5
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: LD_INT 4
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 6
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: LD_INT 6
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 5
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28173: LD_ADDR_VAR 0 30
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 3
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: LD_INT 1
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 4
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 4
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 4
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 5
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 5
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 5
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 6
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 6
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28316: LD_ADDR_VAR 0 31
28320: PUSH
28321: LD_INT 3
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 3
28333: PUSH
28334: LD_INT 3
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: LD_INT 3
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 4
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 4
28363: PUSH
28364: LD_INT 4
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 3
28373: PUSH
28374: LD_INT 4
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 5
28383: PUSH
28384: LD_INT 4
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 5
28393: PUSH
28394: LD_INT 5
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 4
28403: PUSH
28404: LD_INT 5
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 6
28413: PUSH
28414: LD_INT 5
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 6
28423: PUSH
28424: LD_INT 6
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 5
28433: PUSH
28434: LD_INT 6
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28455: LD_ADDR_VAR 0 32
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 3
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 3
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: PUSH
28494: LD_INT 4
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: LD_INT 4
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 1
28513: NEG
28514: PUSH
28515: LD_INT 3
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 5
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 5
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: LD_INT 4
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 6
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 6
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 5
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28598: LD_ADDR_VAR 0 33
28602: PUSH
28603: LD_INT 2
28605: NEG
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 3
28616: NEG
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 3
28627: NEG
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 3
28639: NEG
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 4
28650: NEG
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 4
28661: NEG
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 4
28673: NEG
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 5
28684: NEG
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 5
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 5
28707: NEG
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 6
28718: NEG
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 6
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28753: LD_ADDR_VAR 0 34
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: LD_INT 3
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 3
28772: NEG
28773: PUSH
28774: LD_INT 2
28776: NEG
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 3
28784: NEG
28785: PUSH
28786: LD_INT 3
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 3
28796: NEG
28797: PUSH
28798: LD_INT 4
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 4
28808: NEG
28809: PUSH
28810: LD_INT 3
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 4
28820: NEG
28821: PUSH
28822: LD_INT 4
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 4
28832: NEG
28833: PUSH
28834: LD_INT 5
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 5
28844: NEG
28845: PUSH
28846: LD_INT 4
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 5
28856: NEG
28857: PUSH
28858: LD_INT 5
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 5
28868: NEG
28869: PUSH
28870: LD_INT 6
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 6
28880: NEG
28881: PUSH
28882: LD_INT 5
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 6
28892: NEG
28893: PUSH
28894: LD_INT 6
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28916: LD_ADDR_VAR 0 41
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: LD_INT 2
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 3
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 2
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28960: LD_ADDR_VAR 0 42
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29001: LD_ADDR_VAR 0 43
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 2
29028: PUSH
29029: LD_INT 3
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29041: LD_ADDR_VAR 0 44
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: LIST
29081: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29082: LD_ADDR_VAR 0 45
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 2
29100: NEG
29101: PUSH
29102: LD_INT 1
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29126: LD_ADDR_VAR 0 46
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 3
29157: NEG
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29172: LD_ADDR_VAR 0 47
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: LD_INT 3
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 3
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29205: LD_ADDR_VAR 0 48
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
29236: LD_ADDR_VAR 0 49
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
29265: LD_ADDR_VAR 0 50
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 3
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: LD_INT 3
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29294: LD_ADDR_VAR 0 51
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29325: LD_ADDR_VAR 0 52
29329: PUSH
29330: LD_INT 3
29332: NEG
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: LD_INT 2
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29358: LD_ADDR_VAR 0 53
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 3
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: LD_INT 3
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29402: LD_ADDR_VAR 0 54
29406: PUSH
29407: LD_INT 2
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 3
29420: PUSH
29421: LD_INT 0
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29443: LD_ADDR_VAR 0 55
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29483: LD_ADDR_VAR 0 56
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 3
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29524: LD_ADDR_VAR 0 57
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 3
29542: NEG
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29568: LD_ADDR_VAR 0 58
29572: PUSH
29573: LD_INT 2
29575: NEG
29576: PUSH
29577: LD_INT 3
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 3
29599: NEG
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29614: LD_ADDR_VAR 0 59
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: LD_INT 2
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29658: LD_ADDR_VAR 0 60
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29699: LD_ADDR_VAR 0 61
29703: PUSH
29704: LD_INT 2
29706: PUSH
29707: LD_INT 1
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29739: LD_ADDR_VAR 0 62
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29780: LD_ADDR_VAR 0 63
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 2
29798: NEG
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: NEG
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29824: LD_ADDR_VAR 0 64
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// end ; 2 :
29870: GO 33136
29872: LD_INT 2
29874: DOUBLE
29875: EQUAL
29876: IFTRUE 29880
29878: GO 33135
29880: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29881: LD_ADDR_VAR 0 29
29885: PUSH
29886: LD_INT 4
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 1
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 5
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 5
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 4
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 3
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: LD_INT 2
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 5
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 4
30001: PUSH
30002: LD_INT 3
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 4
30011: PUSH
30012: LD_INT 4
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 3
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 4
30051: PUSH
30052: LD_INT 2
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 4
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: LD_INT 4
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: LD_INT 3
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 4
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: LD_INT 5
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: LD_INT 5
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: LD_INT 3
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: LD_INT 5
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: LD_INT 3
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 3
30164: NEG
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 2
30198: NEG
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 4
30220: NEG
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 4
30231: NEG
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 4
30243: NEG
30244: PUSH
30245: LD_INT 2
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: NEG
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: NEG
30267: PUSH
30268: LD_INT 4
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 4
30278: NEG
30279: PUSH
30280: LD_INT 5
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 3
30290: NEG
30291: PUSH
30292: LD_INT 4
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 3
30302: NEG
30303: PUSH
30304: LD_INT 3
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 4
30314: NEG
30315: PUSH
30316: LD_INT 3
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 5
30326: NEG
30327: PUSH
30328: LD_INT 4
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 5
30338: NEG
30339: PUSH
30340: LD_INT 5
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 3
30350: NEG
30351: PUSH
30352: LD_INT 5
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 5
30362: NEG
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30419: LD_ADDR_VAR 0 30
30423: PUSH
30424: LD_INT 4
30426: PUSH
30427: LD_INT 4
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 4
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 5
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 5
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 4
30466: PUSH
30467: LD_INT 5
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: LD_INT 4
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: LD_INT 3
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 5
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: PUSH
30507: LD_INT 5
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 3
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 4
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: LD_INT 4
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: LD_INT 3
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 4
30609: NEG
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 4
30620: NEG
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 3
30632: NEG
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 3
30643: NEG
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 4
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 5
30665: NEG
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 5
30676: NEG
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: LD_INT 2
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: NEG
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 3
30711: NEG
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 3
30723: NEG
30724: PUSH
30725: LD_INT 4
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 2
30747: NEG
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 3
30759: NEG
30760: PUSH
30761: LD_INT 2
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 4
30771: NEG
30772: PUSH
30773: LD_INT 3
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 4
30783: NEG
30784: PUSH
30785: LD_INT 4
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 2
30795: NEG
30796: PUSH
30797: LD_INT 4
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 4
30807: NEG
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 4
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: LD_INT 5
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 4
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: LD_INT 3
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 4
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: LD_INT 5
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: LD_INT 5
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30966: LD_ADDR_VAR 0 31
30970: PUSH
30971: LD_INT 0
30973: PUSH
30974: LD_INT 4
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 3
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: LD_INT 4
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: LD_INT 5
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: LD_INT 5
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: LD_INT 4
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: LD_INT 5
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 4
31122: NEG
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 4
31133: NEG
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 4
31145: NEG
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 2
31157: NEG
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 4
31168: NEG
31169: PUSH
31170: LD_INT 4
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 4
31180: NEG
31181: PUSH
31182: LD_INT 5
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: LD_INT 4
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 3
31204: NEG
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 4
31216: NEG
31217: PUSH
31218: LD_INT 3
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 5
31228: NEG
31229: PUSH
31230: LD_INT 4
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 5
31240: NEG
31241: PUSH
31242: LD_INT 5
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: LD_INT 5
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 5
31264: NEG
31265: PUSH
31266: LD_INT 3
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 3
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: LD_INT 4
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: LD_INT 4
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: LD_INT 4
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 4
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 4
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 5
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 5
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 3
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 5
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31516: LD_ADDR_VAR 0 32
31520: PUSH
31521: LD_INT 4
31523: NEG
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 4
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 4
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 5
31579: NEG
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 5
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 5
31602: NEG
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 3
31625: NEG
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: LD_INT 4
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 3
31673: NEG
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 4
31685: NEG
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 4
31697: NEG
31698: PUSH
31699: LD_INT 4
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: LD_INT 4
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 4
31721: NEG
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 4
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: LD_INT 5
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: LD_INT 4
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 3
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 4
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 5
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 3
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: LD_INT 5
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 4
31866: PUSH
31867: LD_INT 1
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 4
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 4
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 4
31938: PUSH
31939: LD_INT 3
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 5
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 5
31958: PUSH
31959: LD_INT 5
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 4
31968: PUSH
31969: LD_INT 5
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: LD_INT 4
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 3
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: LD_INT 3
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 3
32008: PUSH
32009: LD_INT 5
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32063: LD_ADDR_VAR 0 33
32067: PUSH
32068: LD_INT 4
32070: NEG
32071: PUSH
32072: LD_INT 4
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: LD_INT 5
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: NEG
32095: PUSH
32096: LD_INT 4
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 4
32118: NEG
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 5
32130: NEG
32131: PUSH
32132: LD_INT 4
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 5
32142: NEG
32143: PUSH
32144: LD_INT 5
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 3
32154: NEG
32155: PUSH
32156: LD_INT 5
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 5
32166: NEG
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: LD_INT 4
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 3
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 4
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 2
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: LD_INT 4
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 4
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 4
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 5
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 3
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 5
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: LD_INT 3
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 3
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 4
32393: PUSH
32394: LD_INT 3
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: LD_INT 4
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 4
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 4
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: LD_INT 4
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 3
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: LD_INT 4
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: LD_INT 5
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: LD_INT 5
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: LD_INT 4
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 3
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 2
32535: PUSH
32536: LD_INT 5
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32601: LD_ADDR_VAR 0 34
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 4
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: LD_INT 5
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 4
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: LD_INT 3
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: LD_INT 3
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: LD_INT 4
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: LD_INT 5
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: LD_INT 3
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 5
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 3
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 4
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 4
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 4
32803: PUSH
32804: LD_INT 4
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 4
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 5
32823: PUSH
32824: LD_INT 4
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 5
32833: PUSH
32834: LD_INT 5
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: LD_INT 5
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: LD_INT 4
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 3
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 5
32873: PUSH
32874: LD_INT 3
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: LD_INT 5
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 3
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 4
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 4
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 3
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: LD_INT 4
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 4
32986: NEG
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 4
32997: NEG
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 4
33031: NEG
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 5
33042: NEG
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 5
33053: NEG
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 5
33065: NEG
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: ST_TO_ADDR
// end ; end ;
33133: GO 33136
33135: POP
// case btype of b_depot , b_warehouse :
33136: LD_VAR 0 1
33140: PUSH
33141: LD_INT 0
33143: DOUBLE
33144: EQUAL
33145: IFTRUE 33155
33147: LD_INT 1
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33356
33155: POP
// case nation of nation_american :
33156: LD_VAR 0 5
33160: PUSH
33161: LD_INT 1
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33169
33167: GO 33225
33169: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33170: LD_ADDR_VAR 0 9
33174: PUSH
33175: LD_VAR 0 11
33179: PUSH
33180: LD_VAR 0 12
33184: PUSH
33185: LD_VAR 0 13
33189: PUSH
33190: LD_VAR 0 14
33194: PUSH
33195: LD_VAR 0 15
33199: PUSH
33200: LD_VAR 0 16
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: PUSH
33213: LD_VAR 0 4
33217: PUSH
33218: LD_INT 1
33220: PLUS
33221: ARRAY
33222: ST_TO_ADDR
33223: GO 33354
33225: LD_INT 2
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33233
33231: GO 33289
33233: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
33234: LD_ADDR_VAR 0 9
33238: PUSH
33239: LD_VAR 0 17
33243: PUSH
33244: LD_VAR 0 18
33248: PUSH
33249: LD_VAR 0 19
33253: PUSH
33254: LD_VAR 0 20
33258: PUSH
33259: LD_VAR 0 21
33263: PUSH
33264: LD_VAR 0 22
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: PUSH
33277: LD_VAR 0 4
33281: PUSH
33282: LD_INT 1
33284: PLUS
33285: ARRAY
33286: ST_TO_ADDR
33287: GO 33354
33289: LD_INT 3
33291: DOUBLE
33292: EQUAL
33293: IFTRUE 33297
33295: GO 33353
33297: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
33298: LD_ADDR_VAR 0 9
33302: PUSH
33303: LD_VAR 0 23
33307: PUSH
33308: LD_VAR 0 24
33312: PUSH
33313: LD_VAR 0 25
33317: PUSH
33318: LD_VAR 0 26
33322: PUSH
33323: LD_VAR 0 27
33327: PUSH
33328: LD_VAR 0 28
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: PUSH
33341: LD_VAR 0 4
33345: PUSH
33346: LD_INT 1
33348: PLUS
33349: ARRAY
33350: ST_TO_ADDR
33351: GO 33354
33353: POP
33354: GO 33909
33356: LD_INT 2
33358: DOUBLE
33359: EQUAL
33360: IFTRUE 33370
33362: LD_INT 3
33364: DOUBLE
33365: EQUAL
33366: IFTRUE 33370
33368: GO 33426
33370: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33371: LD_ADDR_VAR 0 9
33375: PUSH
33376: LD_VAR 0 29
33380: PUSH
33381: LD_VAR 0 30
33385: PUSH
33386: LD_VAR 0 31
33390: PUSH
33391: LD_VAR 0 32
33395: PUSH
33396: LD_VAR 0 33
33400: PUSH
33401: LD_VAR 0 34
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: PUSH
33414: LD_VAR 0 4
33418: PUSH
33419: LD_INT 1
33421: PLUS
33422: ARRAY
33423: ST_TO_ADDR
33424: GO 33909
33426: LD_INT 16
33428: DOUBLE
33429: EQUAL
33430: IFTRUE 33488
33432: LD_INT 17
33434: DOUBLE
33435: EQUAL
33436: IFTRUE 33488
33438: LD_INT 18
33440: DOUBLE
33441: EQUAL
33442: IFTRUE 33488
33444: LD_INT 19
33446: DOUBLE
33447: EQUAL
33448: IFTRUE 33488
33450: LD_INT 22
33452: DOUBLE
33453: EQUAL
33454: IFTRUE 33488
33456: LD_INT 20
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33488
33462: LD_INT 21
33464: DOUBLE
33465: EQUAL
33466: IFTRUE 33488
33468: LD_INT 23
33470: DOUBLE
33471: EQUAL
33472: IFTRUE 33488
33474: LD_INT 24
33476: DOUBLE
33477: EQUAL
33478: IFTRUE 33488
33480: LD_INT 25
33482: DOUBLE
33483: EQUAL
33484: IFTRUE 33488
33486: GO 33544
33488: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33489: LD_ADDR_VAR 0 9
33493: PUSH
33494: LD_VAR 0 35
33498: PUSH
33499: LD_VAR 0 36
33503: PUSH
33504: LD_VAR 0 37
33508: PUSH
33509: LD_VAR 0 38
33513: PUSH
33514: LD_VAR 0 39
33518: PUSH
33519: LD_VAR 0 40
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: PUSH
33532: LD_VAR 0 4
33536: PUSH
33537: LD_INT 1
33539: PLUS
33540: ARRAY
33541: ST_TO_ADDR
33542: GO 33909
33544: LD_INT 6
33546: DOUBLE
33547: EQUAL
33548: IFTRUE 33600
33550: LD_INT 7
33552: DOUBLE
33553: EQUAL
33554: IFTRUE 33600
33556: LD_INT 8
33558: DOUBLE
33559: EQUAL
33560: IFTRUE 33600
33562: LD_INT 13
33564: DOUBLE
33565: EQUAL
33566: IFTRUE 33600
33568: LD_INT 12
33570: DOUBLE
33571: EQUAL
33572: IFTRUE 33600
33574: LD_INT 15
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33600
33580: LD_INT 11
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33600
33586: LD_INT 14
33588: DOUBLE
33589: EQUAL
33590: IFTRUE 33600
33592: LD_INT 10
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33600
33598: GO 33656
33600: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33601: LD_ADDR_VAR 0 9
33605: PUSH
33606: LD_VAR 0 41
33610: PUSH
33611: LD_VAR 0 42
33615: PUSH
33616: LD_VAR 0 43
33620: PUSH
33621: LD_VAR 0 44
33625: PUSH
33626: LD_VAR 0 45
33630: PUSH
33631: LD_VAR 0 46
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: PUSH
33644: LD_VAR 0 4
33648: PUSH
33649: LD_INT 1
33651: PLUS
33652: ARRAY
33653: ST_TO_ADDR
33654: GO 33909
33656: LD_INT 36
33658: DOUBLE
33659: EQUAL
33660: IFTRUE 33664
33662: GO 33720
33664: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33665: LD_ADDR_VAR 0 9
33669: PUSH
33670: LD_VAR 0 47
33674: PUSH
33675: LD_VAR 0 48
33679: PUSH
33680: LD_VAR 0 49
33684: PUSH
33685: LD_VAR 0 50
33689: PUSH
33690: LD_VAR 0 51
33694: PUSH
33695: LD_VAR 0 52
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: PUSH
33708: LD_VAR 0 4
33712: PUSH
33713: LD_INT 1
33715: PLUS
33716: ARRAY
33717: ST_TO_ADDR
33718: GO 33909
33720: LD_INT 4
33722: DOUBLE
33723: EQUAL
33724: IFTRUE 33746
33726: LD_INT 5
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33746
33732: LD_INT 34
33734: DOUBLE
33735: EQUAL
33736: IFTRUE 33746
33738: LD_INT 37
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33802
33746: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33747: LD_ADDR_VAR 0 9
33751: PUSH
33752: LD_VAR 0 53
33756: PUSH
33757: LD_VAR 0 54
33761: PUSH
33762: LD_VAR 0 55
33766: PUSH
33767: LD_VAR 0 56
33771: PUSH
33772: LD_VAR 0 57
33776: PUSH
33777: LD_VAR 0 58
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: PUSH
33790: LD_VAR 0 4
33794: PUSH
33795: LD_INT 1
33797: PLUS
33798: ARRAY
33799: ST_TO_ADDR
33800: GO 33909
33802: LD_INT 31
33804: DOUBLE
33805: EQUAL
33806: IFTRUE 33852
33808: LD_INT 32
33810: DOUBLE
33811: EQUAL
33812: IFTRUE 33852
33814: LD_INT 33
33816: DOUBLE
33817: EQUAL
33818: IFTRUE 33852
33820: LD_INT 27
33822: DOUBLE
33823: EQUAL
33824: IFTRUE 33852
33826: LD_INT 26
33828: DOUBLE
33829: EQUAL
33830: IFTRUE 33852
33832: LD_INT 28
33834: DOUBLE
33835: EQUAL
33836: IFTRUE 33852
33838: LD_INT 29
33840: DOUBLE
33841: EQUAL
33842: IFTRUE 33852
33844: LD_INT 30
33846: DOUBLE
33847: EQUAL
33848: IFTRUE 33852
33850: GO 33908
33852: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33853: LD_ADDR_VAR 0 9
33857: PUSH
33858: LD_VAR 0 59
33862: PUSH
33863: LD_VAR 0 60
33867: PUSH
33868: LD_VAR 0 61
33872: PUSH
33873: LD_VAR 0 62
33877: PUSH
33878: LD_VAR 0 63
33882: PUSH
33883: LD_VAR 0 64
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: PUSH
33896: LD_VAR 0 4
33900: PUSH
33901: LD_INT 1
33903: PLUS
33904: ARRAY
33905: ST_TO_ADDR
33906: GO 33909
33908: POP
// temp_list2 = [ ] ;
33909: LD_ADDR_VAR 0 10
33913: PUSH
33914: EMPTY
33915: ST_TO_ADDR
// for i in temp_list do
33916: LD_ADDR_VAR 0 8
33920: PUSH
33921: LD_VAR 0 9
33925: PUSH
33926: FOR_IN
33927: IFFALSE 33979
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33929: LD_ADDR_VAR 0 10
33933: PUSH
33934: LD_VAR 0 10
33938: PUSH
33939: LD_VAR 0 8
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PUSH
33948: LD_VAR 0 2
33952: PLUS
33953: PUSH
33954: LD_VAR 0 8
33958: PUSH
33959: LD_INT 2
33961: ARRAY
33962: PUSH
33963: LD_VAR 0 3
33967: PLUS
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: ADD
33976: ST_TO_ADDR
33977: GO 33926
33979: POP
33980: POP
// result = temp_list2 ;
33981: LD_ADDR_VAR 0 7
33985: PUSH
33986: LD_VAR 0 10
33990: ST_TO_ADDR
// end ;
33991: LD_VAR 0 7
33995: RET
// export function EnemyInRange ( unit , dist ) ; begin
33996: LD_INT 0
33998: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33999: LD_ADDR_VAR 0 3
34003: PUSH
34004: LD_VAR 0 1
34008: PPUSH
34009: CALL_OW 255
34013: PPUSH
34014: LD_VAR 0 1
34018: PPUSH
34019: CALL_OW 250
34023: PPUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 251
34033: PPUSH
34034: LD_VAR 0 2
34038: PPUSH
34039: CALL 7253 0 4
34043: PUSH
34044: LD_INT 4
34046: ARRAY
34047: ST_TO_ADDR
// end ;
34048: LD_VAR 0 3
34052: RET
// export function PlayerSeeMe ( unit ) ; begin
34053: LD_INT 0
34055: PPUSH
// result := See ( your_side , unit ) ;
34056: LD_ADDR_VAR 0 2
34060: PUSH
34061: LD_OWVAR 2
34065: PPUSH
34066: LD_VAR 0 1
34070: PPUSH
34071: CALL_OW 292
34075: ST_TO_ADDR
// end ;
34076: LD_VAR 0 2
34080: RET
// export function ReverseDir ( unit ) ; begin
34081: LD_INT 0
34083: PPUSH
// if not unit then
34084: LD_VAR 0 1
34088: NOT
34089: IFFALSE 34093
// exit ;
34091: GO 34116
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34093: LD_ADDR_VAR 0 2
34097: PUSH
34098: LD_VAR 0 1
34102: PPUSH
34103: CALL_OW 254
34107: PUSH
34108: LD_INT 3
34110: PLUS
34111: PUSH
34112: LD_INT 6
34114: MOD
34115: ST_TO_ADDR
// end ;
34116: LD_VAR 0 2
34120: RET
// export function ReverseArray ( array ) ; var i ; begin
34121: LD_INT 0
34123: PPUSH
34124: PPUSH
// if not array then
34125: LD_VAR 0 1
34129: NOT
34130: IFFALSE 34134
// exit ;
34132: GO 34189
// result := [ ] ;
34134: LD_ADDR_VAR 0 2
34138: PUSH
34139: EMPTY
34140: ST_TO_ADDR
// for i := array downto 1 do
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: DOUBLE
34147: LD_VAR 0 1
34151: INC
34152: ST_TO_ADDR
34153: LD_INT 1
34155: PUSH
34156: FOR_DOWNTO
34157: IFFALSE 34187
// result := Join ( result , array [ i ] ) ;
34159: LD_ADDR_VAR 0 2
34163: PUSH
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_VAR 0 1
34173: PUSH
34174: LD_VAR 0 3
34178: ARRAY
34179: PPUSH
34180: CALL 39031 0 2
34184: ST_TO_ADDR
34185: GO 34156
34187: POP
34188: POP
// end ;
34189: LD_VAR 0 2
34193: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
34194: LD_INT 0
34196: PPUSH
34197: PPUSH
34198: PPUSH
34199: PPUSH
34200: PPUSH
34201: PPUSH
// if not unit or not hexes then
34202: LD_VAR 0 1
34206: NOT
34207: IFTRUE 34216
34209: PUSH
34210: LD_VAR 0 2
34214: NOT
34215: OR
34216: IFFALSE 34220
// exit ;
34218: GO 34343
// dist := 9999 ;
34220: LD_ADDR_VAR 0 5
34224: PUSH
34225: LD_INT 9999
34227: ST_TO_ADDR
// for i = 1 to hexes do
34228: LD_ADDR_VAR 0 4
34232: PUSH
34233: DOUBLE
34234: LD_INT 1
34236: DEC
34237: ST_TO_ADDR
34238: LD_VAR 0 2
34242: PUSH
34243: FOR_TO
34244: IFFALSE 34331
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34246: LD_ADDR_VAR 0 6
34250: PUSH
34251: LD_VAR 0 1
34255: PPUSH
34256: LD_VAR 0 2
34260: PUSH
34261: LD_VAR 0 4
34265: ARRAY
34266: PUSH
34267: LD_INT 1
34269: ARRAY
34270: PPUSH
34271: LD_VAR 0 2
34275: PUSH
34276: LD_VAR 0 4
34280: ARRAY
34281: PUSH
34282: LD_INT 2
34284: ARRAY
34285: PPUSH
34286: CALL_OW 297
34290: ST_TO_ADDR
// if tdist < dist then
34291: LD_VAR 0 6
34295: PUSH
34296: LD_VAR 0 5
34300: LESS
34301: IFFALSE 34329
// begin hex := hexes [ i ] ;
34303: LD_ADDR_VAR 0 8
34307: PUSH
34308: LD_VAR 0 2
34312: PUSH
34313: LD_VAR 0 4
34317: ARRAY
34318: ST_TO_ADDR
// dist := tdist ;
34319: LD_ADDR_VAR 0 5
34323: PUSH
34324: LD_VAR 0 6
34328: ST_TO_ADDR
// end ; end ;
34329: GO 34243
34331: POP
34332: POP
// result := hex ;
34333: LD_ADDR_VAR 0 3
34337: PUSH
34338: LD_VAR 0 8
34342: ST_TO_ADDR
// end ;
34343: LD_VAR 0 3
34347: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
34348: LD_INT 0
34350: PPUSH
34351: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
34352: LD_VAR 0 1
34356: NOT
34357: IFTRUE 34396
34359: PUSH
34360: LD_VAR 0 1
34364: PUSH
34365: LD_INT 21
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 23
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PPUSH
34389: CALL_OW 69
34393: IN
34394: NOT
34395: OR
34396: IFFALSE 34400
// exit ;
34398: GO 34447
// for i = 1 to 3 do
34400: LD_ADDR_VAR 0 3
34404: PUSH
34405: DOUBLE
34406: LD_INT 1
34408: DEC
34409: ST_TO_ADDR
34410: LD_INT 3
34412: PUSH
34413: FOR_TO
34414: IFFALSE 34445
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34416: LD_VAR 0 1
34420: PPUSH
34421: CALL_OW 250
34425: PPUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 251
34435: PPUSH
34436: LD_INT 1
34438: PPUSH
34439: CALL_OW 453
34443: GO 34413
34445: POP
34446: POP
// end ;
34447: LD_VAR 0 2
34451: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34452: LD_INT 0
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
// if not unit or not enemy_unit then
34460: LD_VAR 0 1
34464: NOT
34465: IFTRUE 34474
34467: PUSH
34468: LD_VAR 0 2
34472: NOT
34473: OR
34474: IFFALSE 34478
// exit ;
34476: GO 34949
// if GetLives ( i ) < 250 then
34478: LD_VAR 0 4
34482: PPUSH
34483: CALL_OW 256
34487: PUSH
34488: LD_INT 250
34490: LESS
34491: IFFALSE 34504
// begin ComAutodestruct ( i ) ;
34493: LD_VAR 0 4
34497: PPUSH
34498: CALL 34348 0 1
// exit ;
34502: GO 34949
// end ; x := GetX ( enemy_unit ) ;
34504: LD_ADDR_VAR 0 7
34508: PUSH
34509: LD_VAR 0 2
34513: PPUSH
34514: CALL_OW 250
34518: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34519: LD_ADDR_VAR 0 8
34523: PUSH
34524: LD_VAR 0 2
34528: PPUSH
34529: CALL_OW 251
34533: ST_TO_ADDR
// if not x or not y then
34534: LD_VAR 0 7
34538: NOT
34539: IFTRUE 34548
34541: PUSH
34542: LD_VAR 0 8
34546: NOT
34547: OR
34548: IFFALSE 34552
// exit ;
34550: GO 34949
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_VAR 0 7
34561: PPUSH
34562: LD_INT 0
34564: PPUSH
34565: LD_INT 4
34567: PPUSH
34568: CALL_OW 272
34572: PUSH
34573: LD_VAR 0 8
34577: PPUSH
34578: LD_INT 0
34580: PPUSH
34581: LD_INT 4
34583: PPUSH
34584: CALL_OW 273
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_VAR 0 7
34597: PPUSH
34598: LD_INT 1
34600: PPUSH
34601: LD_INT 4
34603: PPUSH
34604: CALL_OW 272
34608: PUSH
34609: LD_VAR 0 8
34613: PPUSH
34614: LD_INT 1
34616: PPUSH
34617: LD_INT 4
34619: PPUSH
34620: CALL_OW 273
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_VAR 0 7
34633: PPUSH
34634: LD_INT 2
34636: PPUSH
34637: LD_INT 4
34639: PPUSH
34640: CALL_OW 272
34644: PUSH
34645: LD_VAR 0 8
34649: PPUSH
34650: LD_INT 2
34652: PPUSH
34653: LD_INT 4
34655: PPUSH
34656: CALL_OW 273
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_VAR 0 7
34669: PPUSH
34670: LD_INT 3
34672: PPUSH
34673: LD_INT 4
34675: PPUSH
34676: CALL_OW 272
34680: PUSH
34681: LD_VAR 0 8
34685: PPUSH
34686: LD_INT 3
34688: PPUSH
34689: LD_INT 4
34691: PPUSH
34692: CALL_OW 273
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_VAR 0 7
34705: PPUSH
34706: LD_INT 4
34708: PPUSH
34709: LD_INT 4
34711: PPUSH
34712: CALL_OW 272
34716: PUSH
34717: LD_VAR 0 8
34721: PPUSH
34722: LD_INT 4
34724: PPUSH
34725: LD_INT 4
34727: PPUSH
34728: CALL_OW 273
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_VAR 0 7
34741: PPUSH
34742: LD_INT 5
34744: PPUSH
34745: LD_INT 4
34747: PPUSH
34748: CALL_OW 272
34752: PUSH
34753: LD_VAR 0 8
34757: PPUSH
34758: LD_INT 5
34760: PPUSH
34761: LD_INT 4
34763: PPUSH
34764: CALL_OW 273
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// for i = tmp downto 1 do
34781: LD_ADDR_VAR 0 4
34785: PUSH
34786: DOUBLE
34787: LD_VAR 0 6
34791: INC
34792: ST_TO_ADDR
34793: LD_INT 1
34795: PUSH
34796: FOR_DOWNTO
34797: IFFALSE 34900
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34799: LD_VAR 0 6
34803: PUSH
34804: LD_VAR 0 4
34808: ARRAY
34809: PUSH
34810: LD_INT 1
34812: ARRAY
34813: PPUSH
34814: LD_VAR 0 6
34818: PUSH
34819: LD_VAR 0 4
34823: ARRAY
34824: PUSH
34825: LD_INT 2
34827: ARRAY
34828: PPUSH
34829: CALL_OW 488
34833: NOT
34834: IFTRUE 34876
34836: PUSH
34837: LD_VAR 0 6
34841: PUSH
34842: LD_VAR 0 4
34846: ARRAY
34847: PUSH
34848: LD_INT 1
34850: ARRAY
34851: PPUSH
34852: LD_VAR 0 6
34856: PUSH
34857: LD_VAR 0 4
34861: ARRAY
34862: PUSH
34863: LD_INT 2
34865: ARRAY
34866: PPUSH
34867: CALL_OW 428
34871: PUSH
34872: LD_INT 0
34874: NONEQUAL
34875: OR
34876: IFFALSE 34898
// tmp := Delete ( tmp , i ) ;
34878: LD_ADDR_VAR 0 6
34882: PUSH
34883: LD_VAR 0 6
34887: PPUSH
34888: LD_VAR 0 4
34892: PPUSH
34893: CALL_OW 3
34897: ST_TO_ADDR
34898: GO 34796
34900: POP
34901: POP
// j := GetClosestHex ( unit , tmp ) ;
34902: LD_ADDR_VAR 0 5
34906: PUSH
34907: LD_VAR 0 1
34911: PPUSH
34912: LD_VAR 0 6
34916: PPUSH
34917: CALL 34194 0 2
34921: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_VAR 0 5
34931: PUSH
34932: LD_INT 1
34934: ARRAY
34935: PPUSH
34936: LD_VAR 0 5
34940: PUSH
34941: LD_INT 2
34943: ARRAY
34944: PPUSH
34945: CALL_OW 111
// end ;
34949: LD_VAR 0 3
34953: RET
// export function PrepareApemanSoldier ( ) ; begin
34954: LD_INT 0
34956: PPUSH
// uc_nation := 0 ;
34957: LD_ADDR_OWVAR 21
34961: PUSH
34962: LD_INT 0
34964: ST_TO_ADDR
// hc_sex := sex_male ;
34965: LD_ADDR_OWVAR 27
34969: PUSH
34970: LD_INT 1
34972: ST_TO_ADDR
// hc_name :=  ;
34973: LD_ADDR_OWVAR 26
34977: PUSH
34978: LD_STRING 
34980: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34981: LD_ADDR_OWVAR 28
34985: PUSH
34986: LD_INT 15
34988: ST_TO_ADDR
// hc_gallery :=  ;
34989: LD_ADDR_OWVAR 33
34993: PUSH
34994: LD_STRING 
34996: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34997: LD_ADDR_OWVAR 31
35001: PUSH
35002: LD_INT 0
35004: PPUSH
35005: LD_INT 3
35007: PPUSH
35008: CALL_OW 12
35012: PUSH
35013: LD_INT 0
35015: PPUSH
35016: LD_INT 3
35018: PPUSH
35019: CALL_OW 12
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35036: LD_ADDR_OWVAR 29
35040: PUSH
35041: LD_INT 12
35043: PUSH
35044: LD_INT 12
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: ST_TO_ADDR
// end ;
35051: LD_VAR 0 1
35055: RET
// export function PrepareApemanEngineer ( ) ; begin
35056: LD_INT 0
35058: PPUSH
// uc_nation := 0 ;
35059: LD_ADDR_OWVAR 21
35063: PUSH
35064: LD_INT 0
35066: ST_TO_ADDR
// hc_sex := sex_male ;
35067: LD_ADDR_OWVAR 27
35071: PUSH
35072: LD_INT 1
35074: ST_TO_ADDR
// hc_name :=  ;
35075: LD_ADDR_OWVAR 26
35079: PUSH
35080: LD_STRING 
35082: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
35083: LD_ADDR_OWVAR 28
35087: PUSH
35088: LD_INT 16
35090: ST_TO_ADDR
// hc_gallery :=  ;
35091: LD_ADDR_OWVAR 33
35095: PUSH
35096: LD_STRING 
35098: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35099: LD_ADDR_OWVAR 31
35103: PUSH
35104: LD_INT 0
35106: PPUSH
35107: LD_INT 3
35109: PPUSH
35110: CALL_OW 12
35114: PUSH
35115: LD_INT 0
35117: PPUSH
35118: LD_INT 3
35120: PPUSH
35121: CALL_OW 12
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35138: LD_ADDR_OWVAR 29
35142: PUSH
35143: LD_INT 12
35145: PUSH
35146: LD_INT 12
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: ST_TO_ADDR
// end ;
35153: LD_VAR 0 1
35157: RET
// export function PrepareApeman ( agressivity ) ; begin
35158: LD_INT 0
35160: PPUSH
// uc_side := 0 ;
35161: LD_ADDR_OWVAR 20
35165: PUSH
35166: LD_INT 0
35168: ST_TO_ADDR
// uc_nation := 0 ;
35169: LD_ADDR_OWVAR 21
35173: PUSH
35174: LD_INT 0
35176: ST_TO_ADDR
// hc_sex := sex_male ;
35177: LD_ADDR_OWVAR 27
35181: PUSH
35182: LD_INT 1
35184: ST_TO_ADDR
// hc_class := class_apeman ;
35185: LD_ADDR_OWVAR 28
35189: PUSH
35190: LD_INT 12
35192: ST_TO_ADDR
// hc_gallery :=  ;
35193: LD_ADDR_OWVAR 33
35197: PUSH
35198: LD_STRING 
35200: ST_TO_ADDR
// hc_name :=  ;
35201: LD_ADDR_OWVAR 26
35205: PUSH
35206: LD_STRING 
35208: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35209: LD_ADDR_OWVAR 29
35213: PUSH
35214: LD_INT 12
35216: PUSH
35217: LD_INT 12
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// if agressivity = 0 then
35224: LD_VAR 0 1
35228: PUSH
35229: LD_INT 0
35231: EQUAL
35232: IFFALSE 35244
// hc_agressivity := 0 else
35234: LD_ADDR_OWVAR 35
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
35242: GO 35265
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35244: LD_ADDR_OWVAR 35
35248: PUSH
35249: LD_VAR 0 1
35253: NEG
35254: PPUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: CALL_OW 12
35264: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
35265: LD_ADDR_OWVAR 31
35269: PUSH
35270: LD_INT 0
35272: PPUSH
35273: LD_INT 3
35275: PPUSH
35276: CALL_OW 12
35280: PUSH
35281: LD_INT 0
35283: PPUSH
35284: LD_INT 3
35286: PPUSH
35287: CALL_OW 12
35291: PUSH
35292: LD_INT 0
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: ST_TO_ADDR
// end ;
35304: LD_VAR 0 2
35308: RET
// export function PrepareTiger ( agressivity ) ; begin
35309: LD_INT 0
35311: PPUSH
// uc_side := 0 ;
35312: LD_ADDR_OWVAR 20
35316: PUSH
35317: LD_INT 0
35319: ST_TO_ADDR
// uc_nation := 0 ;
35320: LD_ADDR_OWVAR 21
35324: PUSH
35325: LD_INT 0
35327: ST_TO_ADDR
// InitHc ;
35328: CALL_OW 19
// hc_class := class_tiger ;
35332: LD_ADDR_OWVAR 28
35336: PUSH
35337: LD_INT 14
35339: ST_TO_ADDR
// hc_gallery :=  ;
35340: LD_ADDR_OWVAR 33
35344: PUSH
35345: LD_STRING 
35347: ST_TO_ADDR
// hc_name :=  ;
35348: LD_ADDR_OWVAR 26
35352: PUSH
35353: LD_STRING 
35355: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
35356: LD_ADDR_OWVAR 35
35360: PUSH
35361: LD_VAR 0 1
35365: NEG
35366: PPUSH
35367: LD_VAR 0 1
35371: PPUSH
35372: CALL_OW 12
35376: ST_TO_ADDR
// end ;
35377: LD_VAR 0 2
35381: RET
// export function PrepareEnchidna ( ) ; begin
35382: LD_INT 0
35384: PPUSH
// uc_side := 0 ;
35385: LD_ADDR_OWVAR 20
35389: PUSH
35390: LD_INT 0
35392: ST_TO_ADDR
// uc_nation := 0 ;
35393: LD_ADDR_OWVAR 21
35397: PUSH
35398: LD_INT 0
35400: ST_TO_ADDR
// InitHc ;
35401: CALL_OW 19
// hc_class := class_baggie ;
35405: LD_ADDR_OWVAR 28
35409: PUSH
35410: LD_INT 13
35412: ST_TO_ADDR
// hc_gallery :=  ;
35413: LD_ADDR_OWVAR 33
35417: PUSH
35418: LD_STRING 
35420: ST_TO_ADDR
// hc_name :=  ;
35421: LD_ADDR_OWVAR 26
35425: PUSH
35426: LD_STRING 
35428: ST_TO_ADDR
// end ;
35429: LD_VAR 0 1
35433: RET
// export function PrepareFrog ( ) ; begin
35434: LD_INT 0
35436: PPUSH
// uc_side := 0 ;
35437: LD_ADDR_OWVAR 20
35441: PUSH
35442: LD_INT 0
35444: ST_TO_ADDR
// uc_nation := 0 ;
35445: LD_ADDR_OWVAR 21
35449: PUSH
35450: LD_INT 0
35452: ST_TO_ADDR
// InitHc ;
35453: CALL_OW 19
// hc_class := class_frog ;
35457: LD_ADDR_OWVAR 28
35461: PUSH
35462: LD_INT 19
35464: ST_TO_ADDR
// hc_gallery :=  ;
35465: LD_ADDR_OWVAR 33
35469: PUSH
35470: LD_STRING 
35472: ST_TO_ADDR
// hc_name :=  ;
35473: LD_ADDR_OWVAR 26
35477: PUSH
35478: LD_STRING 
35480: ST_TO_ADDR
// end ;
35481: LD_VAR 0 1
35485: RET
// export function PrepareFish ( ) ; begin
35486: LD_INT 0
35488: PPUSH
// uc_side := 0 ;
35489: LD_ADDR_OWVAR 20
35493: PUSH
35494: LD_INT 0
35496: ST_TO_ADDR
// uc_nation := 0 ;
35497: LD_ADDR_OWVAR 21
35501: PUSH
35502: LD_INT 0
35504: ST_TO_ADDR
// InitHc ;
35505: CALL_OW 19
// hc_class := class_fish ;
35509: LD_ADDR_OWVAR 28
35513: PUSH
35514: LD_INT 20
35516: ST_TO_ADDR
// hc_gallery :=  ;
35517: LD_ADDR_OWVAR 33
35521: PUSH
35522: LD_STRING 
35524: ST_TO_ADDR
// hc_name :=  ;
35525: LD_ADDR_OWVAR 26
35529: PUSH
35530: LD_STRING 
35532: ST_TO_ADDR
// end ;
35533: LD_VAR 0 1
35537: RET
// export function PrepareBird ( ) ; begin
35538: LD_INT 0
35540: PPUSH
// uc_side := 0 ;
35541: LD_ADDR_OWVAR 20
35545: PUSH
35546: LD_INT 0
35548: ST_TO_ADDR
// uc_nation := 0 ;
35549: LD_ADDR_OWVAR 21
35553: PUSH
35554: LD_INT 0
35556: ST_TO_ADDR
// InitHc ;
35557: CALL_OW 19
// hc_class := class_phororhacos ;
35561: LD_ADDR_OWVAR 28
35565: PUSH
35566: LD_INT 18
35568: ST_TO_ADDR
// hc_gallery :=  ;
35569: LD_ADDR_OWVAR 33
35573: PUSH
35574: LD_STRING 
35576: ST_TO_ADDR
// hc_name :=  ;
35577: LD_ADDR_OWVAR 26
35581: PUSH
35582: LD_STRING 
35584: ST_TO_ADDR
// end ;
35585: LD_VAR 0 1
35589: RET
// export function PrepareHorse ( ) ; begin
35590: LD_INT 0
35592: PPUSH
// uc_side := 0 ;
35593: LD_ADDR_OWVAR 20
35597: PUSH
35598: LD_INT 0
35600: ST_TO_ADDR
// uc_nation := 0 ;
35601: LD_ADDR_OWVAR 21
35605: PUSH
35606: LD_INT 0
35608: ST_TO_ADDR
// InitHc ;
35609: CALL_OW 19
// hc_class := class_horse ;
35613: LD_ADDR_OWVAR 28
35617: PUSH
35618: LD_INT 21
35620: ST_TO_ADDR
// hc_gallery :=  ;
35621: LD_ADDR_OWVAR 33
35625: PUSH
35626: LD_STRING 
35628: ST_TO_ADDR
// hc_name :=  ;
35629: LD_ADDR_OWVAR 26
35633: PUSH
35634: LD_STRING 
35636: ST_TO_ADDR
// end ;
35637: LD_VAR 0 1
35641: RET
// export function PrepareMastodont ( ) ; begin
35642: LD_INT 0
35644: PPUSH
// uc_side := 0 ;
35645: LD_ADDR_OWVAR 20
35649: PUSH
35650: LD_INT 0
35652: ST_TO_ADDR
// uc_nation := 0 ;
35653: LD_ADDR_OWVAR 21
35657: PUSH
35658: LD_INT 0
35660: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35661: LD_ADDR_OWVAR 37
35665: PUSH
35666: LD_INT 31
35668: ST_TO_ADDR
// vc_control := control_rider ;
35669: LD_ADDR_OWVAR 38
35673: PUSH
35674: LD_INT 4
35676: ST_TO_ADDR
// end ;
35677: LD_VAR 0 1
35681: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35682: LD_INT 0
35684: PPUSH
35685: PPUSH
35686: PPUSH
// uc_side = 0 ;
35687: LD_ADDR_OWVAR 20
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// uc_nation = 0 ;
35695: LD_ADDR_OWVAR 21
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// InitHc_All ( ) ;
35703: CALL_OW 584
// InitVc ;
35707: CALL_OW 20
// if mastodonts then
35711: LD_VAR 0 6
35715: IFFALSE 35782
// for i = 1 to mastodonts do
35717: LD_ADDR_VAR 0 11
35721: PUSH
35722: DOUBLE
35723: LD_INT 1
35725: DEC
35726: ST_TO_ADDR
35727: LD_VAR 0 6
35731: PUSH
35732: FOR_TO
35733: IFFALSE 35780
// begin vc_chassis := 31 ;
35735: LD_ADDR_OWVAR 37
35739: PUSH
35740: LD_INT 31
35742: ST_TO_ADDR
// vc_control := control_rider ;
35743: LD_ADDR_OWVAR 38
35747: PUSH
35748: LD_INT 4
35750: ST_TO_ADDR
// animal := CreateVehicle ;
35751: LD_ADDR_VAR 0 12
35755: PUSH
35756: CALL_OW 45
35760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35761: LD_VAR 0 12
35765: PPUSH
35766: LD_VAR 0 8
35770: PPUSH
35771: LD_INT 0
35773: PPUSH
35774: CALL 37924 0 3
// end ;
35778: GO 35732
35780: POP
35781: POP
// if horses then
35782: LD_VAR 0 5
35786: IFFALSE 35853
// for i = 1 to horses do
35788: LD_ADDR_VAR 0 11
35792: PUSH
35793: DOUBLE
35794: LD_INT 1
35796: DEC
35797: ST_TO_ADDR
35798: LD_VAR 0 5
35802: PUSH
35803: FOR_TO
35804: IFFALSE 35851
// begin hc_class := 21 ;
35806: LD_ADDR_OWVAR 28
35810: PUSH
35811: LD_INT 21
35813: ST_TO_ADDR
// hc_gallery :=  ;
35814: LD_ADDR_OWVAR 33
35818: PUSH
35819: LD_STRING 
35821: ST_TO_ADDR
// animal := CreateHuman ;
35822: LD_ADDR_VAR 0 12
35826: PUSH
35827: CALL_OW 44
35831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35832: LD_VAR 0 12
35836: PPUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: LD_INT 0
35844: PPUSH
35845: CALL 37924 0 3
// end ;
35849: GO 35803
35851: POP
35852: POP
// if birds then
35853: LD_VAR 0 1
35857: IFFALSE 35924
// for i = 1 to birds do
35859: LD_ADDR_VAR 0 11
35863: PUSH
35864: DOUBLE
35865: LD_INT 1
35867: DEC
35868: ST_TO_ADDR
35869: LD_VAR 0 1
35873: PUSH
35874: FOR_TO
35875: IFFALSE 35922
// begin hc_class := 18 ;
35877: LD_ADDR_OWVAR 28
35881: PUSH
35882: LD_INT 18
35884: ST_TO_ADDR
// hc_gallery =  ;
35885: LD_ADDR_OWVAR 33
35889: PUSH
35890: LD_STRING 
35892: ST_TO_ADDR
// animal := CreateHuman ;
35893: LD_ADDR_VAR 0 12
35897: PUSH
35898: CALL_OW 44
35902: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35903: LD_VAR 0 12
35907: PPUSH
35908: LD_VAR 0 8
35912: PPUSH
35913: LD_INT 0
35915: PPUSH
35916: CALL 37924 0 3
// end ;
35920: GO 35874
35922: POP
35923: POP
// if tigers then
35924: LD_VAR 0 2
35928: IFFALSE 36012
// for i = 1 to tigers do
35930: LD_ADDR_VAR 0 11
35934: PUSH
35935: DOUBLE
35936: LD_INT 1
35938: DEC
35939: ST_TO_ADDR
35940: LD_VAR 0 2
35944: PUSH
35945: FOR_TO
35946: IFFALSE 36010
// begin hc_class = class_tiger ;
35948: LD_ADDR_OWVAR 28
35952: PUSH
35953: LD_INT 14
35955: ST_TO_ADDR
// hc_gallery =  ;
35956: LD_ADDR_OWVAR 33
35960: PUSH
35961: LD_STRING 
35963: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35964: LD_ADDR_OWVAR 35
35968: PUSH
35969: LD_INT 7
35971: NEG
35972: PPUSH
35973: LD_INT 7
35975: PPUSH
35976: CALL_OW 12
35980: ST_TO_ADDR
// animal := CreateHuman ;
35981: LD_ADDR_VAR 0 12
35985: PUSH
35986: CALL_OW 44
35990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35991: LD_VAR 0 12
35995: PPUSH
35996: LD_VAR 0 8
36000: PPUSH
36001: LD_INT 0
36003: PPUSH
36004: CALL 37924 0 3
// end ;
36008: GO 35945
36010: POP
36011: POP
// if apemans then
36012: LD_VAR 0 3
36016: IFFALSE 36139
// for i = 1 to apemans do
36018: LD_ADDR_VAR 0 11
36022: PUSH
36023: DOUBLE
36024: LD_INT 1
36026: DEC
36027: ST_TO_ADDR
36028: LD_VAR 0 3
36032: PUSH
36033: FOR_TO
36034: IFFALSE 36137
// begin hc_class = class_apeman ;
36036: LD_ADDR_OWVAR 28
36040: PUSH
36041: LD_INT 12
36043: ST_TO_ADDR
// hc_gallery =  ;
36044: LD_ADDR_OWVAR 33
36048: PUSH
36049: LD_STRING 
36051: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36052: LD_ADDR_OWVAR 35
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PPUSH
36061: LD_INT 2
36063: PPUSH
36064: CALL_OW 12
36068: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36069: LD_ADDR_OWVAR 31
36073: PUSH
36074: LD_INT 1
36076: PPUSH
36077: LD_INT 3
36079: PPUSH
36080: CALL_OW 12
36084: PUSH
36085: LD_INT 1
36087: PPUSH
36088: LD_INT 3
36090: PPUSH
36091: CALL_OW 12
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// animal := CreateHuman ;
36108: LD_ADDR_VAR 0 12
36112: PUSH
36113: CALL_OW 44
36117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36118: LD_VAR 0 12
36122: PPUSH
36123: LD_VAR 0 8
36127: PPUSH
36128: LD_INT 0
36130: PPUSH
36131: CALL 37924 0 3
// end ;
36135: GO 36033
36137: POP
36138: POP
// if enchidnas then
36139: LD_VAR 0 4
36143: IFFALSE 36210
// for i = 1 to enchidnas do
36145: LD_ADDR_VAR 0 11
36149: PUSH
36150: DOUBLE
36151: LD_INT 1
36153: DEC
36154: ST_TO_ADDR
36155: LD_VAR 0 4
36159: PUSH
36160: FOR_TO
36161: IFFALSE 36208
// begin hc_class = 13 ;
36163: LD_ADDR_OWVAR 28
36167: PUSH
36168: LD_INT 13
36170: ST_TO_ADDR
// hc_gallery =  ;
36171: LD_ADDR_OWVAR 33
36175: PUSH
36176: LD_STRING 
36178: ST_TO_ADDR
// animal := CreateHuman ;
36179: LD_ADDR_VAR 0 12
36183: PUSH
36184: CALL_OW 44
36188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36189: LD_VAR 0 12
36193: PPUSH
36194: LD_VAR 0 8
36198: PPUSH
36199: LD_INT 0
36201: PPUSH
36202: CALL 37924 0 3
// end ;
36206: GO 36160
36208: POP
36209: POP
// if fishes then
36210: LD_VAR 0 7
36214: IFFALSE 36281
// for i = 1 to fishes do
36216: LD_ADDR_VAR 0 11
36220: PUSH
36221: DOUBLE
36222: LD_INT 1
36224: DEC
36225: ST_TO_ADDR
36226: LD_VAR 0 7
36230: PUSH
36231: FOR_TO
36232: IFFALSE 36279
// begin hc_class = 20 ;
36234: LD_ADDR_OWVAR 28
36238: PUSH
36239: LD_INT 20
36241: ST_TO_ADDR
// hc_gallery =  ;
36242: LD_ADDR_OWVAR 33
36246: PUSH
36247: LD_STRING 
36249: ST_TO_ADDR
// animal := CreateHuman ;
36250: LD_ADDR_VAR 0 12
36254: PUSH
36255: CALL_OW 44
36259: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36260: LD_VAR 0 12
36264: PPUSH
36265: LD_VAR 0 9
36269: PPUSH
36270: LD_INT 0
36272: PPUSH
36273: CALL 37924 0 3
// end ;
36277: GO 36231
36279: POP
36280: POP
// end ;
36281: LD_VAR 0 10
36285: RET
// export function WantHeal ( sci , unit ) ; begin
36286: LD_INT 0
36288: PPUSH
// if GetTaskList ( sci ) > 0 then
36289: LD_VAR 0 1
36293: PPUSH
36294: CALL_OW 437
36298: PUSH
36299: LD_INT 0
36301: GREATER
36302: IFFALSE 36374
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 437
36313: PUSH
36314: LD_INT 1
36316: ARRAY
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PUSH
36322: LD_STRING l
36324: EQUAL
36325: IFFALSE 36352
36327: PUSH
36328: LD_VAR 0 1
36332: PPUSH
36333: CALL_OW 437
36337: PUSH
36338: LD_INT 1
36340: ARRAY
36341: PUSH
36342: LD_INT 4
36344: ARRAY
36345: PUSH
36346: LD_VAR 0 2
36350: EQUAL
36351: AND
36352: IFFALSE 36364
// result := true else
36354: LD_ADDR_VAR 0 3
36358: PUSH
36359: LD_INT 1
36361: ST_TO_ADDR
36362: GO 36372
// result := false ;
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_INT 0
36371: ST_TO_ADDR
// end else
36372: GO 36382
// result := false ;
36374: LD_ADDR_VAR 0 3
36378: PUSH
36379: LD_INT 0
36381: ST_TO_ADDR
// end ;
36382: LD_VAR 0 3
36386: RET
// export function HealTarget ( sci ) ; begin
36387: LD_INT 0
36389: PPUSH
// if not sci then
36390: LD_VAR 0 1
36394: NOT
36395: IFFALSE 36399
// exit ;
36397: GO 36464
// result := 0 ;
36399: LD_ADDR_VAR 0 2
36403: PUSH
36404: LD_INT 0
36406: ST_TO_ADDR
// if GetTaskList ( sci ) then
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 437
36416: IFFALSE 36464
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36418: LD_VAR 0 1
36422: PPUSH
36423: CALL_OW 437
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PUSH
36432: LD_INT 1
36434: ARRAY
36435: PUSH
36436: LD_STRING l
36438: EQUAL
36439: IFFALSE 36464
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36441: LD_ADDR_VAR 0 2
36445: PUSH
36446: LD_VAR 0 1
36450: PPUSH
36451: CALL_OW 437
36455: PUSH
36456: LD_INT 1
36458: ARRAY
36459: PUSH
36460: LD_INT 4
36462: ARRAY
36463: ST_TO_ADDR
// end ;
36464: LD_VAR 0 2
36468: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36469: LD_INT 0
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
// if not base_units then
36475: LD_VAR 0 1
36479: NOT
36480: IFFALSE 36484
// exit ;
36482: GO 36571
// result := false ;
36484: LD_ADDR_VAR 0 2
36488: PUSH
36489: LD_INT 0
36491: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_VAR 0 1
36501: PPUSH
36502: LD_INT 21
36504: PUSH
36505: LD_INT 3
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PPUSH
36512: CALL_OW 72
36516: ST_TO_ADDR
// if not tmp then
36517: LD_VAR 0 5
36521: NOT
36522: IFFALSE 36526
// exit ;
36524: GO 36571
// for i in tmp do
36526: LD_ADDR_VAR 0 3
36530: PUSH
36531: LD_VAR 0 5
36535: PUSH
36536: FOR_IN
36537: IFFALSE 36569
// begin result := EnemyInRange ( i , 22 ) ;
36539: LD_ADDR_VAR 0 2
36543: PUSH
36544: LD_VAR 0 3
36548: PPUSH
36549: LD_INT 22
36551: PPUSH
36552: CALL 33996 0 2
36556: ST_TO_ADDR
// if result then
36557: LD_VAR 0 2
36561: IFFALSE 36567
// exit ;
36563: POP
36564: POP
36565: GO 36571
// end ;
36567: GO 36536
36569: POP
36570: POP
// end ;
36571: LD_VAR 0 2
36575: RET
// export function FilterByTag ( units , tag ) ; begin
36576: LD_INT 0
36578: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36579: LD_ADDR_VAR 0 3
36583: PUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: LD_INT 120
36591: PUSH
36592: LD_VAR 0 2
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PPUSH
36601: CALL_OW 72
36605: ST_TO_ADDR
// end ;
36606: LD_VAR 0 3
36610: RET
// export function IsDriver ( un ) ; begin
36611: LD_INT 0
36613: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36614: LD_ADDR_VAR 0 2
36618: PUSH
36619: LD_VAR 0 1
36623: PUSH
36624: LD_INT 55
36626: PUSH
36627: EMPTY
36628: LIST
36629: PPUSH
36630: CALL_OW 69
36634: IN
36635: ST_TO_ADDR
// end ;
36636: LD_VAR 0 2
36640: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36641: LD_INT 0
36643: PPUSH
36644: PPUSH
// list := [ ] ;
36645: LD_ADDR_VAR 0 5
36649: PUSH
36650: EMPTY
36651: ST_TO_ADDR
// case d of 0 :
36652: LD_VAR 0 3
36656: PUSH
36657: LD_INT 0
36659: DOUBLE
36660: EQUAL
36661: IFTRUE 36665
36663: GO 36798
36665: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36666: LD_ADDR_VAR 0 5
36670: PUSH
36671: LD_VAR 0 1
36675: PUSH
36676: LD_INT 4
36678: MINUS
36679: PUSH
36680: LD_VAR 0 2
36684: PUSH
36685: LD_INT 4
36687: MINUS
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: PUSH
36697: LD_VAR 0 1
36701: PUSH
36702: LD_INT 3
36704: MINUS
36705: PUSH
36706: LD_VAR 0 2
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: PUSH
36719: LD_VAR 0 1
36723: PUSH
36724: LD_INT 4
36726: PLUS
36727: PUSH
36728: LD_VAR 0 2
36732: PUSH
36733: LD_INT 4
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: LIST
36740: PUSH
36741: LD_VAR 0 1
36745: PUSH
36746: LD_INT 3
36748: PLUS
36749: PUSH
36750: LD_VAR 0 2
36754: PUSH
36755: LD_INT 3
36757: PLUS
36758: PUSH
36759: LD_INT 5
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PUSH
36767: LD_VAR 0 1
36771: PUSH
36772: LD_VAR 0 2
36776: PUSH
36777: LD_INT 4
36779: PLUS
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// end ; 1 :
36796: GO 37496
36798: LD_INT 1
36800: DOUBLE
36801: EQUAL
36802: IFTRUE 36806
36804: GO 36939
36806: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36807: LD_ADDR_VAR 0 5
36811: PUSH
36812: LD_VAR 0 1
36816: PUSH
36817: LD_VAR 0 2
36821: PUSH
36822: LD_INT 4
36824: MINUS
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: PUSH
36834: LD_VAR 0 1
36838: PUSH
36839: LD_INT 3
36841: MINUS
36842: PUSH
36843: LD_VAR 0 2
36847: PUSH
36848: LD_INT 3
36850: MINUS
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: PUSH
36860: LD_VAR 0 1
36864: PUSH
36865: LD_INT 4
36867: MINUS
36868: PUSH
36869: LD_VAR 0 2
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: PUSH
36882: LD_VAR 0 1
36886: PUSH
36887: LD_VAR 0 2
36891: PUSH
36892: LD_INT 3
36894: PLUS
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: PUSH
36904: LD_VAR 0 1
36908: PUSH
36909: LD_INT 4
36911: PLUS
36912: PUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_INT 4
36920: PLUS
36921: PUSH
36922: LD_INT 5
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// end ; 2 :
36937: GO 37496
36939: LD_INT 2
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 37076
36947: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36948: LD_ADDR_VAR 0 5
36952: PUSH
36953: LD_VAR 0 1
36957: PUSH
36958: LD_VAR 0 2
36962: PUSH
36963: LD_INT 3
36965: MINUS
36966: PUSH
36967: LD_INT 3
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: PUSH
36975: LD_VAR 0 1
36979: PUSH
36980: LD_INT 4
36982: PLUS
36983: PUSH
36984: LD_VAR 0 2
36988: PUSH
36989: LD_INT 4
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: LD_VAR 0 1
37001: PUSH
37002: LD_VAR 0 2
37006: PUSH
37007: LD_INT 4
37009: PLUS
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: PUSH
37019: LD_VAR 0 1
37023: PUSH
37024: LD_INT 3
37026: MINUS
37027: PUSH
37028: LD_VAR 0 2
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: PUSH
37041: LD_VAR 0 1
37045: PUSH
37046: LD_INT 4
37048: MINUS
37049: PUSH
37050: LD_VAR 0 2
37054: PUSH
37055: LD_INT 4
37057: MINUS
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: ST_TO_ADDR
// end ; 3 :
37074: GO 37496
37076: LD_INT 3
37078: DOUBLE
37079: EQUAL
37080: IFTRUE 37084
37082: GO 37217
37084: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37085: LD_ADDR_VAR 0 5
37089: PUSH
37090: LD_VAR 0 1
37094: PUSH
37095: LD_INT 3
37097: PLUS
37098: PUSH
37099: LD_VAR 0 2
37103: PUSH
37104: LD_INT 4
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PUSH
37112: LD_VAR 0 1
37116: PUSH
37117: LD_INT 4
37119: PLUS
37120: PUSH
37121: LD_VAR 0 2
37125: PUSH
37126: LD_INT 4
37128: PLUS
37129: PUSH
37130: LD_INT 5
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: PUSH
37138: LD_VAR 0 1
37142: PUSH
37143: LD_INT 4
37145: MINUS
37146: PUSH
37147: LD_VAR 0 2
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: LIST
37159: PUSH
37160: LD_VAR 0 1
37164: PUSH
37165: LD_VAR 0 2
37169: PUSH
37170: LD_INT 4
37172: MINUS
37173: PUSH
37174: LD_INT 3
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: PUSH
37182: LD_VAR 0 1
37186: PUSH
37187: LD_INT 3
37189: MINUS
37190: PUSH
37191: LD_VAR 0 2
37195: PUSH
37196: LD_INT 3
37198: MINUS
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: ST_TO_ADDR
// end ; 4 :
37215: GO 37496
37217: LD_INT 4
37219: DOUBLE
37220: EQUAL
37221: IFTRUE 37225
37223: GO 37358
37225: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37226: LD_ADDR_VAR 0 5
37230: PUSH
37231: LD_VAR 0 1
37235: PUSH
37236: LD_VAR 0 2
37240: PUSH
37241: LD_INT 4
37243: PLUS
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: PUSH
37253: LD_VAR 0 1
37257: PUSH
37258: LD_INT 3
37260: PLUS
37261: PUSH
37262: LD_VAR 0 2
37266: PUSH
37267: LD_INT 3
37269: PLUS
37270: PUSH
37271: LD_INT 5
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: PUSH
37279: LD_VAR 0 1
37283: PUSH
37284: LD_INT 4
37286: PLUS
37287: PUSH
37288: LD_VAR 0 2
37292: PUSH
37293: LD_INT 4
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: PUSH
37301: LD_VAR 0 1
37305: PUSH
37306: LD_VAR 0 2
37310: PUSH
37311: LD_INT 3
37313: MINUS
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: PUSH
37323: LD_VAR 0 1
37327: PUSH
37328: LD_INT 4
37330: MINUS
37331: PUSH
37332: LD_VAR 0 2
37336: PUSH
37337: LD_INT 4
37339: MINUS
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// end ; 5 :
37356: GO 37496
37358: LD_INT 5
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 37495
37366: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37367: LD_ADDR_VAR 0 5
37371: PUSH
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 4
37379: MINUS
37380: PUSH
37381: LD_VAR 0 2
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: PUSH
37394: LD_VAR 0 1
37398: PUSH
37399: LD_VAR 0 2
37403: PUSH
37404: LD_INT 4
37406: MINUS
37407: PUSH
37408: LD_INT 3
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: PUSH
37416: LD_VAR 0 1
37420: PUSH
37421: LD_INT 4
37423: PLUS
37424: PUSH
37425: LD_VAR 0 2
37429: PUSH
37430: LD_INT 4
37432: PLUS
37433: PUSH
37434: LD_INT 5
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: PUSH
37442: LD_VAR 0 1
37446: PUSH
37447: LD_INT 3
37449: PLUS
37450: PUSH
37451: LD_VAR 0 2
37455: PUSH
37456: LD_INT 4
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: PUSH
37464: LD_VAR 0 1
37468: PUSH
37469: LD_VAR 0 2
37473: PUSH
37474: LD_INT 3
37476: PLUS
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// end ; end ;
37493: GO 37496
37495: POP
// result := list ;
37496: LD_ADDR_VAR 0 4
37500: PUSH
37501: LD_VAR 0 5
37505: ST_TO_ADDR
// end ;
37506: LD_VAR 0 4
37510: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37511: LD_INT 0
37513: PPUSH
37514: PPUSH
37515: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37516: LD_VAR 0 1
37520: NOT
37521: IFTRUE 37549
37523: PUSH
37524: LD_VAR 0 2
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: LD_INT 3
37537: PUSH
37538: LD_INT 4
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: IN
37547: NOT
37548: OR
37549: IFFALSE 37553
// exit ;
37551: GO 37636
// tmp := [ ] ;
37553: LD_ADDR_VAR 0 5
37557: PUSH
37558: EMPTY
37559: ST_TO_ADDR
// for i in units do
37560: LD_ADDR_VAR 0 4
37564: PUSH
37565: LD_VAR 0 1
37569: PUSH
37570: FOR_IN
37571: IFFALSE 37605
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
37573: LD_ADDR_VAR 0 5
37577: PUSH
37578: LD_VAR 0 5
37582: PPUSH
37583: LD_VAR 0 4
37587: PPUSH
37588: LD_VAR 0 2
37592: PPUSH
37593: CALL_OW 259
37597: PPUSH
37598: CALL 39031 0 2
37602: ST_TO_ADDR
37603: GO 37570
37605: POP
37606: POP
// if not tmp then
37607: LD_VAR 0 5
37611: NOT
37612: IFFALSE 37616
// exit ;
37614: GO 37636
// result := SortListByListDesc ( units , tmp ) ;
37616: LD_ADDR_VAR 0 3
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: LD_VAR 0 5
37630: PPUSH
37631: CALL_OW 77
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 3
37640: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
37645: PPUSH
// result := false ;
37646: LD_ADDR_VAR 0 3
37650: PUSH
37651: LD_INT 0
37653: ST_TO_ADDR
// if not building then
37654: LD_VAR 0 2
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37807
// x := GetX ( building ) ;
37663: LD_ADDR_VAR 0 4
37667: PUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: CALL_OW 250
37677: ST_TO_ADDR
// y := GetY ( building ) ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: LD_VAR 0 2
37687: PPUSH
37688: CALL_OW 251
37692: ST_TO_ADDR
// if not x or not y then
37693: LD_VAR 0 4
37697: NOT
37698: IFTRUE 37707
37700: PUSH
37701: LD_VAR 0 5
37705: NOT
37706: OR
37707: IFFALSE 37711
// exit ;
37709: GO 37807
// if GetTaskList ( unit ) then
37711: LD_VAR 0 1
37715: PPUSH
37716: CALL_OW 437
37720: IFFALSE 37807
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37722: LD_STRING e
37724: PUSH
37725: LD_VAR 0 1
37729: PPUSH
37730: CALL_OW 437
37734: PUSH
37735: LD_INT 1
37737: ARRAY
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: EQUAL
37743: IFFALSE 37770
37745: PUSH
37746: LD_VAR 0 4
37750: PUSH
37751: LD_VAR 0 1
37755: PPUSH
37756: CALL_OW 437
37760: PUSH
37761: LD_INT 1
37763: ARRAY
37764: PUSH
37765: LD_INT 2
37767: ARRAY
37768: EQUAL
37769: AND
37770: IFFALSE 37797
37772: PUSH
37773: LD_VAR 0 5
37777: PUSH
37778: LD_VAR 0 1
37782: PPUSH
37783: CALL_OW 437
37787: PUSH
37788: LD_INT 1
37790: ARRAY
37791: PUSH
37792: LD_INT 3
37794: ARRAY
37795: EQUAL
37796: AND
37797: IFFALSE 37807
// result := true end ;
37799: LD_ADDR_VAR 0 3
37803: PUSH
37804: LD_INT 1
37806: ST_TO_ADDR
// end ;
37807: LD_VAR 0 3
37811: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37812: LD_INT 0
37814: PPUSH
// result := false ;
37815: LD_ADDR_VAR 0 4
37819: PUSH
37820: LD_INT 0
37822: ST_TO_ADDR
// if GetTaskList ( unit ) then
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 437
37832: IFFALSE 37919
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37834: LD_STRING M
37836: PUSH
37837: LD_VAR 0 1
37841: PPUSH
37842: CALL_OW 437
37846: PUSH
37847: LD_INT 1
37849: ARRAY
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: EQUAL
37855: IFFALSE 37882
37857: PUSH
37858: LD_VAR 0 2
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 437
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: PUSH
37877: LD_INT 2
37879: ARRAY
37880: EQUAL
37881: AND
37882: IFFALSE 37909
37884: PUSH
37885: LD_VAR 0 3
37889: PUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 437
37899: PUSH
37900: LD_INT 1
37902: ARRAY
37903: PUSH
37904: LD_INT 3
37906: ARRAY
37907: EQUAL
37908: AND
37909: IFFALSE 37919
// result := true ;
37911: LD_ADDR_VAR 0 4
37915: PUSH
37916: LD_INT 1
37918: ST_TO_ADDR
// end ; end ;
37919: LD_VAR 0 4
37923: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37924: LD_INT 0
37926: PPUSH
37927: PPUSH
37928: PPUSH
37929: PPUSH
// if not unit or not area then
37930: LD_VAR 0 1
37934: NOT
37935: IFTRUE 37944
37937: PUSH
37938: LD_VAR 0 2
37942: NOT
37943: OR
37944: IFFALSE 37948
// exit ;
37946: GO 38124
// tmp := AreaToList ( area , i ) ;
37948: LD_ADDR_VAR 0 6
37952: PUSH
37953: LD_VAR 0 2
37957: PPUSH
37958: LD_VAR 0 5
37962: PPUSH
37963: CALL_OW 517
37967: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37968: LD_ADDR_VAR 0 5
37972: PUSH
37973: DOUBLE
37974: LD_INT 1
37976: DEC
37977: ST_TO_ADDR
37978: LD_VAR 0 6
37982: PUSH
37983: LD_INT 1
37985: ARRAY
37986: PUSH
37987: FOR_TO
37988: IFFALSE 38122
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37990: LD_ADDR_VAR 0 7
37994: PUSH
37995: LD_VAR 0 6
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PUSH
38004: LD_VAR 0 5
38008: ARRAY
38009: PUSH
38010: LD_VAR 0 6
38014: PUSH
38015: LD_INT 2
38017: ARRAY
38018: PUSH
38019: LD_VAR 0 5
38023: ARRAY
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38029: LD_INT 92
38031: PUSH
38032: LD_VAR 0 7
38036: PUSH
38037: LD_INT 1
38039: ARRAY
38040: PUSH
38041: LD_VAR 0 7
38045: PUSH
38046: LD_INT 2
38048: ARRAY
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: PPUSH
38059: CALL_OW 69
38063: PUSH
38064: LD_INT 0
38066: EQUAL
38067: IFFALSE 38120
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38069: LD_VAR 0 1
38073: PPUSH
38074: LD_VAR 0 7
38078: PUSH
38079: LD_INT 1
38081: ARRAY
38082: PPUSH
38083: LD_VAR 0 7
38087: PUSH
38088: LD_INT 2
38090: ARRAY
38091: PPUSH
38092: LD_VAR 0 3
38096: PPUSH
38097: CALL_OW 48
// result := IsPlaced ( unit ) ;
38101: LD_ADDR_VAR 0 4
38105: PUSH
38106: LD_VAR 0 1
38110: PPUSH
38111: CALL_OW 305
38115: ST_TO_ADDR
// exit ;
38116: POP
38117: POP
38118: GO 38124
// end ; end ;
38120: GO 37987
38122: POP
38123: POP
// end ;
38124: LD_VAR 0 4
38128: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38129: LD_INT 0
38131: PPUSH
38132: PPUSH
38133: PPUSH
// if not side or side > 8 then
38134: LD_VAR 0 1
38138: NOT
38139: IFTRUE 38151
38141: PUSH
38142: LD_VAR 0 1
38146: PUSH
38147: LD_INT 8
38149: GREATER
38150: OR
38151: IFFALSE 38155
// exit ;
38153: GO 38342
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38155: LD_ADDR_VAR 0 4
38159: PUSH
38160: LD_INT 22
38162: PUSH
38163: LD_VAR 0 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 21
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PPUSH
38186: CALL_OW 69
38190: ST_TO_ADDR
// if not tmp then
38191: LD_VAR 0 4
38195: NOT
38196: IFFALSE 38200
// exit ;
38198: GO 38342
// enable_addtolog := true ;
38200: LD_ADDR_OWVAR 81
38204: PUSH
38205: LD_INT 1
38207: ST_TO_ADDR
// AddToLog ( [ ) ;
38208: LD_STRING [
38210: PPUSH
38211: CALL_OW 561
// for i in tmp do
38215: LD_ADDR_VAR 0 3
38219: PUSH
38220: LD_VAR 0 4
38224: PUSH
38225: FOR_IN
38226: IFFALSE 38333
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38228: LD_STRING [
38230: PUSH
38231: LD_VAR 0 3
38235: PPUSH
38236: CALL_OW 266
38240: STR
38241: PUSH
38242: LD_STRING , 
38244: STR
38245: PUSH
38246: LD_VAR 0 3
38250: PPUSH
38251: CALL_OW 250
38255: STR
38256: PUSH
38257: LD_STRING , 
38259: STR
38260: PUSH
38261: LD_VAR 0 3
38265: PPUSH
38266: CALL_OW 251
38270: STR
38271: PUSH
38272: LD_STRING , 
38274: STR
38275: PUSH
38276: LD_VAR 0 3
38280: PPUSH
38281: CALL_OW 254
38285: STR
38286: PUSH
38287: LD_STRING , 
38289: STR
38290: PUSH
38291: LD_VAR 0 3
38295: PPUSH
38296: LD_INT 1
38298: PPUSH
38299: CALL_OW 268
38303: STR
38304: PUSH
38305: LD_STRING , 
38307: STR
38308: PUSH
38309: LD_VAR 0 3
38313: PPUSH
38314: LD_INT 2
38316: PPUSH
38317: CALL_OW 268
38321: STR
38322: PUSH
38323: LD_STRING ],
38325: STR
38326: PPUSH
38327: CALL_OW 561
// end ;
38331: GO 38225
38333: POP
38334: POP
// AddToLog ( ]; ) ;
38335: LD_STRING ];
38337: PPUSH
38338: CALL_OW 561
// end ;
38342: LD_VAR 0 2
38346: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38347: LD_INT 0
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
38353: PPUSH
// if not area or not rate or not max then
38354: LD_VAR 0 1
38358: NOT
38359: IFTRUE 38368
38361: PUSH
38362: LD_VAR 0 2
38366: NOT
38367: OR
38368: IFTRUE 38377
38370: PUSH
38371: LD_VAR 0 4
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 38570
// while 1 do
38381: LD_INT 1
38383: IFFALSE 38570
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38385: LD_ADDR_VAR 0 9
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: LD_INT 1
38397: PPUSH
38398: CALL_OW 287
38402: PUSH
38403: LD_INT 10
38405: MUL
38406: ST_TO_ADDR
// r := rate / 10 ;
38407: LD_ADDR_VAR 0 7
38411: PUSH
38412: LD_VAR 0 2
38416: PUSH
38417: LD_INT 10
38419: DIVREAL
38420: ST_TO_ADDR
// time := 1 1$00 ;
38421: LD_ADDR_VAR 0 8
38425: PUSH
38426: LD_INT 2100
38428: ST_TO_ADDR
// if amount < min then
38429: LD_VAR 0 9
38433: PUSH
38434: LD_VAR 0 3
38438: LESS
38439: IFFALSE 38457
// r := r * 2 else
38441: LD_ADDR_VAR 0 7
38445: PUSH
38446: LD_VAR 0 7
38450: PUSH
38451: LD_INT 2
38453: MUL
38454: ST_TO_ADDR
38455: GO 38483
// if amount > max then
38457: LD_VAR 0 9
38461: PUSH
38462: LD_VAR 0 4
38466: GREATER
38467: IFFALSE 38483
// r := r / 2 ;
38469: LD_ADDR_VAR 0 7
38473: PUSH
38474: LD_VAR 0 7
38478: PUSH
38479: LD_INT 2
38481: DIVREAL
38482: ST_TO_ADDR
// time := time / r ;
38483: LD_ADDR_VAR 0 8
38487: PUSH
38488: LD_VAR 0 8
38492: PUSH
38493: LD_VAR 0 7
38497: DIVREAL
38498: ST_TO_ADDR
// if time < 0 then
38499: LD_VAR 0 8
38503: PUSH
38504: LD_INT 0
38506: LESS
38507: IFFALSE 38524
// time := time * - 1 ;
38509: LD_ADDR_VAR 0 8
38513: PUSH
38514: LD_VAR 0 8
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: MUL
38523: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38524: LD_VAR 0 8
38528: PUSH
38529: LD_INT 35
38531: PPUSH
38532: LD_INT 875
38534: PPUSH
38535: CALL_OW 12
38539: PLUS
38540: PPUSH
38541: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38545: LD_INT 1
38547: PPUSH
38548: LD_INT 5
38550: PPUSH
38551: CALL_OW 12
38555: PPUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_INT 1
38563: PPUSH
38564: CALL_OW 55
// end ;
38568: GO 38381
// end ;
38570: LD_VAR 0 5
38574: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38575: LD_INT 0
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
38581: PPUSH
38582: PPUSH
38583: PPUSH
38584: PPUSH
// if not turrets or not factories then
38585: LD_VAR 0 1
38589: NOT
38590: IFTRUE 38599
38592: PUSH
38593: LD_VAR 0 2
38597: NOT
38598: OR
38599: IFFALSE 38603
// exit ;
38601: GO 38910
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38603: LD_ADDR_VAR 0 10
38607: PUSH
38608: LD_INT 5
38610: PUSH
38611: LD_INT 6
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: LD_INT 4
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: LD_INT 5
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 24
38645: PUSH
38646: LD_INT 25
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 23
38655: PUSH
38656: LD_INT 27
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 42
38669: PUSH
38670: LD_INT 43
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 44
38679: PUSH
38680: LD_INT 46
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 45
38689: PUSH
38690: LD_INT 47
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// result := [ ] ;
38707: LD_ADDR_VAR 0 3
38711: PUSH
38712: EMPTY
38713: ST_TO_ADDR
// for i in turrets do
38714: LD_ADDR_VAR 0 4
38718: PUSH
38719: LD_VAR 0 1
38723: PUSH
38724: FOR_IN
38725: IFFALSE 38908
// begin nat := GetNation ( i ) ;
38727: LD_ADDR_VAR 0 7
38731: PUSH
38732: LD_VAR 0 4
38736: PPUSH
38737: CALL_OW 248
38741: ST_TO_ADDR
// weapon := 0 ;
38742: LD_ADDR_VAR 0 8
38746: PUSH
38747: LD_INT 0
38749: ST_TO_ADDR
// if not nat then
38750: LD_VAR 0 7
38754: NOT
38755: IFFALSE 38759
// continue ;
38757: GO 38724
// for j in list [ nat ] do
38759: LD_ADDR_VAR 0 5
38763: PUSH
38764: LD_VAR 0 10
38768: PUSH
38769: LD_VAR 0 7
38773: ARRAY
38774: PUSH
38775: FOR_IN
38776: IFFALSE 38817
// if GetBWeapon ( i ) = j [ 1 ] then
38778: LD_VAR 0 4
38782: PPUSH
38783: CALL_OW 269
38787: PUSH
38788: LD_VAR 0 5
38792: PUSH
38793: LD_INT 1
38795: ARRAY
38796: EQUAL
38797: IFFALSE 38815
// begin weapon := j [ 2 ] ;
38799: LD_ADDR_VAR 0 8
38803: PUSH
38804: LD_VAR 0 5
38808: PUSH
38809: LD_INT 2
38811: ARRAY
38812: ST_TO_ADDR
// break ;
38813: GO 38817
// end ;
38815: GO 38775
38817: POP
38818: POP
// if not weapon then
38819: LD_VAR 0 8
38823: NOT
38824: IFFALSE 38828
// continue ;
38826: GO 38724
// for k in factories do
38828: LD_ADDR_VAR 0 6
38832: PUSH
38833: LD_VAR 0 2
38837: PUSH
38838: FOR_IN
38839: IFFALSE 38904
// begin weapons := AvailableWeaponList ( k ) ;
38841: LD_ADDR_VAR 0 9
38845: PUSH
38846: LD_VAR 0 6
38850: PPUSH
38851: CALL_OW 478
38855: ST_TO_ADDR
// if not weapons then
38856: LD_VAR 0 9
38860: NOT
38861: IFFALSE 38865
// continue ;
38863: GO 38838
// if weapon in weapons then
38865: LD_VAR 0 8
38869: PUSH
38870: LD_VAR 0 9
38874: IN
38875: IFFALSE 38902
// begin result := [ i , weapon ] ;
38877: LD_ADDR_VAR 0 3
38881: PUSH
38882: LD_VAR 0 4
38886: PUSH
38887: LD_VAR 0 8
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// exit ;
38896: POP
38897: POP
38898: POP
38899: POP
38900: GO 38910
// end ; end ;
38902: GO 38838
38904: POP
38905: POP
// end ;
38906: GO 38724
38908: POP
38909: POP
// end ;
38910: LD_VAR 0 3
38914: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38915: LD_INT 0
38917: PPUSH
// if not side or side > 8 then
38918: LD_VAR 0 3
38922: NOT
38923: IFTRUE 38935
38925: PUSH
38926: LD_VAR 0 3
38930: PUSH
38931: LD_INT 8
38933: GREATER
38934: OR
38935: IFFALSE 38939
// exit ;
38937: GO 38998
// if not range then
38939: LD_VAR 0 4
38943: NOT
38944: IFFALSE 38955
// range := - 12 ;
38946: LD_ADDR_VAR 0 4
38950: PUSH
38951: LD_INT 12
38953: NEG
38954: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38955: LD_VAR 0 1
38959: PPUSH
38960: LD_VAR 0 2
38964: PPUSH
38965: LD_VAR 0 3
38969: PPUSH
38970: LD_VAR 0 4
38974: PPUSH
38975: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 2
38988: PPUSH
38989: LD_VAR 0 3
38993: PPUSH
38994: CALL_OW 331
// end ;
38998: LD_VAR 0 5
39002: RET
// export function Video ( mode ) ; begin
39003: LD_INT 0
39005: PPUSH
// ingame_video = mode ;
39006: LD_ADDR_OWVAR 52
39010: PUSH
39011: LD_VAR 0 1
39015: ST_TO_ADDR
// interface_hidden = mode ;
39016: LD_ADDR_OWVAR 54
39020: PUSH
39021: LD_VAR 0 1
39025: ST_TO_ADDR
// end ;
39026: LD_VAR 0 2
39030: RET
// export function Join ( array , element ) ; begin
39031: LD_INT 0
39033: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39034: LD_ADDR_VAR 0 3
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: LD_VAR 0 1
39048: PUSH
39049: LD_INT 1
39051: PLUS
39052: PPUSH
39053: LD_VAR 0 2
39057: PPUSH
39058: CALL_OW 1
39062: ST_TO_ADDR
// end ;
39063: LD_VAR 0 3
39067: RET
// export function JoinUnion ( array , element ) ; begin
39068: LD_INT 0
39070: PPUSH
// result := array union element ;
39071: LD_ADDR_VAR 0 3
39075: PUSH
39076: LD_VAR 0 1
39080: PUSH
39081: LD_VAR 0 2
39085: UNION
39086: ST_TO_ADDR
// end ;
39087: LD_VAR 0 3
39091: RET
// export function GetBehemoths ( side ) ; begin
39092: LD_INT 0
39094: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39095: LD_ADDR_VAR 0 2
39099: PUSH
39100: LD_INT 22
39102: PUSH
39103: LD_VAR 0 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 31
39114: PUSH
39115: LD_INT 25
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PPUSH
39126: CALL_OW 69
39130: ST_TO_ADDR
// end ;
39131: LD_VAR 0 2
39135: RET
// export function Shuffle ( array ) ; var i , index ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
39140: PPUSH
// result := [ ] ;
39141: LD_ADDR_VAR 0 2
39145: PUSH
39146: EMPTY
39147: ST_TO_ADDR
// if not array then
39148: LD_VAR 0 1
39152: NOT
39153: IFFALSE 39157
// exit ;
39155: GO 39256
// Randomize ;
39157: CALL_OW 10
// for i = array downto 1 do
39161: LD_ADDR_VAR 0 3
39165: PUSH
39166: DOUBLE
39167: LD_VAR 0 1
39171: INC
39172: ST_TO_ADDR
39173: LD_INT 1
39175: PUSH
39176: FOR_DOWNTO
39177: IFFALSE 39254
// begin index := rand ( 1 , array ) ;
39179: LD_ADDR_VAR 0 4
39183: PUSH
39184: LD_INT 1
39186: PPUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: CALL_OW 12
39196: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39197: LD_ADDR_VAR 0 2
39201: PUSH
39202: LD_VAR 0 2
39206: PPUSH
39207: LD_VAR 0 2
39211: PUSH
39212: LD_INT 1
39214: PLUS
39215: PPUSH
39216: LD_VAR 0 1
39220: PUSH
39221: LD_VAR 0 4
39225: ARRAY
39226: PPUSH
39227: CALL_OW 2
39231: ST_TO_ADDR
// array := Delete ( array , index ) ;
39232: LD_ADDR_VAR 0 1
39236: PUSH
39237: LD_VAR 0 1
39241: PPUSH
39242: LD_VAR 0 4
39246: PPUSH
39247: CALL_OW 3
39251: ST_TO_ADDR
// end ;
39252: GO 39176
39254: POP
39255: POP
// end ;
39256: LD_VAR 0 2
39260: RET
// export function GetBaseMaterials ( base ) ; begin
39261: LD_INT 0
39263: PPUSH
// result := [ 0 , 0 , 0 ] ;
39264: LD_ADDR_VAR 0 2
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// if not base then
39283: LD_VAR 0 1
39287: NOT
39288: IFFALSE 39292
// exit ;
39290: GO 39341
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39292: LD_ADDR_VAR 0 2
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: LD_INT 1
39304: PPUSH
39305: CALL_OW 275
39309: PUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: LD_INT 2
39317: PPUSH
39318: CALL_OW 275
39322: PUSH
39323: LD_VAR 0 1
39327: PPUSH
39328: LD_INT 3
39330: PPUSH
39331: CALL_OW 275
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// end ;
39341: LD_VAR 0 2
39345: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39346: LD_INT 0
39348: PPUSH
39349: PPUSH
// result := array ;
39350: LD_ADDR_VAR 0 3
39354: PUSH
39355: LD_VAR 0 1
39359: ST_TO_ADDR
// if size >= result then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_VAR 0 3
39369: GREATEREQUAL
39370: IFFALSE 39374
// exit ;
39372: GO 39424
// if size then
39374: LD_VAR 0 2
39378: IFFALSE 39424
// for i := array downto size do
39380: LD_ADDR_VAR 0 4
39384: PUSH
39385: DOUBLE
39386: LD_VAR 0 1
39390: INC
39391: ST_TO_ADDR
39392: LD_VAR 0 2
39396: PUSH
39397: FOR_DOWNTO
39398: IFFALSE 39422
// result := Delete ( result , result ) ;
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_VAR 0 3
39409: PPUSH
39410: LD_VAR 0 3
39414: PPUSH
39415: CALL_OW 3
39419: ST_TO_ADDR
39420: GO 39397
39422: POP
39423: POP
// end ;
39424: LD_VAR 0 3
39428: RET
// export function ComExit ( unit ) ; var tmp ; begin
39429: LD_INT 0
39431: PPUSH
39432: PPUSH
// if not IsInUnit ( unit ) then
39433: LD_VAR 0 1
39437: PPUSH
39438: CALL_OW 310
39442: NOT
39443: IFFALSE 39447
// exit ;
39445: GO 39507
// tmp := IsInUnit ( unit ) ;
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 310
39461: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39462: LD_VAR 0 3
39466: PPUSH
39467: CALL_OW 247
39471: PUSH
39472: LD_INT 2
39474: EQUAL
39475: IFFALSE 39488
// ComExitVehicle ( unit ) else
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 121
39486: GO 39497
// ComExitBuilding ( unit ) ;
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 122
// result := tmp ;
39497: LD_ADDR_VAR 0 2
39501: PUSH
39502: LD_VAR 0 3
39506: ST_TO_ADDR
// end ;
39507: LD_VAR 0 2
39511: RET
// export function ComExitAll ( units ) ; var i ; begin
39512: LD_INT 0
39514: PPUSH
39515: PPUSH
// if not units then
39516: LD_VAR 0 1
39520: NOT
39521: IFFALSE 39525
// exit ;
39523: GO 39551
// for i in units do
39525: LD_ADDR_VAR 0 3
39529: PUSH
39530: LD_VAR 0 1
39534: PUSH
39535: FOR_IN
39536: IFFALSE 39549
// ComExit ( i ) ;
39538: LD_VAR 0 3
39542: PPUSH
39543: CALL 39429 0 1
39547: GO 39535
39549: POP
39550: POP
// end ;
39551: LD_VAR 0 2
39555: RET
// export function ResetHc ; begin
39556: LD_INT 0
39558: PPUSH
// InitHc ;
39559: CALL_OW 19
// hc_importance := 0 ;
39563: LD_ADDR_OWVAR 32
39567: PUSH
39568: LD_INT 0
39570: ST_TO_ADDR
// end ;
39571: LD_VAR 0 1
39575: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39576: LD_INT 0
39578: PPUSH
39579: PPUSH
39580: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39581: LD_ADDR_VAR 0 6
39585: PUSH
39586: LD_VAR 0 1
39590: PUSH
39591: LD_VAR 0 3
39595: PLUS
39596: PUSH
39597: LD_INT 2
39599: DIV
39600: ST_TO_ADDR
// if _x < 0 then
39601: LD_VAR 0 6
39605: PUSH
39606: LD_INT 0
39608: LESS
39609: IFFALSE 39626
// _x := _x * - 1 ;
39611: LD_ADDR_VAR 0 6
39615: PUSH
39616: LD_VAR 0 6
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: MUL
39625: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39626: LD_ADDR_VAR 0 7
39630: PUSH
39631: LD_VAR 0 2
39635: PUSH
39636: LD_VAR 0 4
39640: PLUS
39641: PUSH
39642: LD_INT 2
39644: DIV
39645: ST_TO_ADDR
// if _y < 0 then
39646: LD_VAR 0 7
39650: PUSH
39651: LD_INT 0
39653: LESS
39654: IFFALSE 39671
// _y := _y * - 1 ;
39656: LD_ADDR_VAR 0 7
39660: PUSH
39661: LD_VAR 0 7
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: MUL
39670: ST_TO_ADDR
// result := [ _x , _y ] ;
39671: LD_ADDR_VAR 0 5
39675: PUSH
39676: LD_VAR 0 6
39680: PUSH
39681: LD_VAR 0 7
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// end ;
39690: LD_VAR 0 5
39694: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39695: LD_INT 0
39697: PPUSH
39698: PPUSH
39699: PPUSH
39700: PPUSH
// task := GetTaskList ( unit ) ;
39701: LD_ADDR_VAR 0 7
39705: PUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: CALL_OW 437
39715: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39716: LD_VAR 0 7
39720: NOT
39721: IFFALSE 39740
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: LD_VAR 0 2
39733: PPUSH
39734: CALL_OW 308
39738: NOT
39739: AND
39740: IFFALSE 39744
// exit ;
39742: GO 39862
// if IsInArea ( unit , area ) then
39744: LD_VAR 0 1
39748: PPUSH
39749: LD_VAR 0 2
39753: PPUSH
39754: CALL_OW 308
39758: IFFALSE 39776
// begin ComMoveToArea ( unit , goAway ) ;
39760: LD_VAR 0 1
39764: PPUSH
39765: LD_VAR 0 3
39769: PPUSH
39770: CALL_OW 113
// exit ;
39774: GO 39862
// end ; if task [ 1 ] [ 1 ] <> M then
39776: LD_VAR 0 7
39780: PUSH
39781: LD_INT 1
39783: ARRAY
39784: PUSH
39785: LD_INT 1
39787: ARRAY
39788: PUSH
39789: LD_STRING M
39791: NONEQUAL
39792: IFFALSE 39796
// exit ;
39794: GO 39862
// x := task [ 1 ] [ 2 ] ;
39796: LD_ADDR_VAR 0 5
39800: PUSH
39801: LD_VAR 0 7
39805: PUSH
39806: LD_INT 1
39808: ARRAY
39809: PUSH
39810: LD_INT 2
39812: ARRAY
39813: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39814: LD_ADDR_VAR 0 6
39818: PUSH
39819: LD_VAR 0 7
39823: PUSH
39824: LD_INT 1
39826: ARRAY
39827: PUSH
39828: LD_INT 3
39830: ARRAY
39831: ST_TO_ADDR
// if InArea ( x , y , area ) then
39832: LD_VAR 0 5
39836: PPUSH
39837: LD_VAR 0 6
39841: PPUSH
39842: LD_VAR 0 2
39846: PPUSH
39847: CALL_OW 309
39851: IFFALSE 39862
// ComStop ( unit ) ;
39853: LD_VAR 0 1
39857: PPUSH
39858: CALL_OW 141
// end ;
39862: LD_VAR 0 4
39866: RET
// export function Abs ( value ) ; begin
39867: LD_INT 0
39869: PPUSH
// result := value ;
39870: LD_ADDR_VAR 0 2
39874: PUSH
39875: LD_VAR 0 1
39879: ST_TO_ADDR
// if value < 0 then
39880: LD_VAR 0 1
39884: PUSH
39885: LD_INT 0
39887: LESS
39888: IFFALSE 39905
// result := value * - 1 ;
39890: LD_ADDR_VAR 0 2
39894: PUSH
39895: LD_VAR 0 1
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: MUL
39904: ST_TO_ADDR
// end ;
39905: LD_VAR 0 2
39909: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39910: LD_INT 0
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
// if not unit or not building then
39920: LD_VAR 0 1
39924: NOT
39925: IFTRUE 39934
39927: PUSH
39928: LD_VAR 0 2
39932: NOT
39933: OR
39934: IFFALSE 39938
// exit ;
39936: GO 40166
// x := GetX ( building ) ;
39938: LD_ADDR_VAR 0 4
39942: PUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: CALL_OW 250
39952: ST_TO_ADDR
// y := GetY ( building ) ;
39953: LD_ADDR_VAR 0 6
39957: PUSH
39958: LD_VAR 0 2
39962: PPUSH
39963: CALL_OW 251
39967: ST_TO_ADDR
// d := GetDir ( building ) ;
39968: LD_ADDR_VAR 0 8
39972: PUSH
39973: LD_VAR 0 2
39977: PPUSH
39978: CALL_OW 254
39982: ST_TO_ADDR
// r := 4 ;
39983: LD_ADDR_VAR 0 9
39987: PUSH
39988: LD_INT 4
39990: ST_TO_ADDR
// for i := 1 to 5 do
39991: LD_ADDR_VAR 0 10
39995: PUSH
39996: DOUBLE
39997: LD_INT 1
39999: DEC
40000: ST_TO_ADDR
40001: LD_INT 5
40003: PUSH
40004: FOR_TO
40005: IFFALSE 40164
// begin _x := ShiftX ( x , d , r + i ) ;
40007: LD_ADDR_VAR 0 5
40011: PUSH
40012: LD_VAR 0 4
40016: PPUSH
40017: LD_VAR 0 8
40021: PPUSH
40022: LD_VAR 0 9
40026: PUSH
40027: LD_VAR 0 10
40031: PLUS
40032: PPUSH
40033: CALL_OW 272
40037: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40038: LD_ADDR_VAR 0 7
40042: PUSH
40043: LD_VAR 0 6
40047: PPUSH
40048: LD_VAR 0 8
40052: PPUSH
40053: LD_VAR 0 9
40057: PUSH
40058: LD_VAR 0 10
40062: PLUS
40063: PPUSH
40064: CALL_OW 273
40068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40069: LD_VAR 0 5
40073: PPUSH
40074: LD_VAR 0 7
40078: PPUSH
40079: CALL_OW 488
40083: IFFALSE 40118
40085: PUSH
40086: LD_VAR 0 5
40090: PPUSH
40091: LD_VAR 0 7
40095: PPUSH
40096: CALL_OW 428
40100: PPUSH
40101: CALL_OW 247
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: IN
40116: NOT
40117: AND
40118: IFFALSE 40162
// begin ComMoveXY ( unit , _x , _y ) ;
40120: LD_VAR 0 1
40124: PPUSH
40125: LD_VAR 0 5
40129: PPUSH
40130: LD_VAR 0 7
40134: PPUSH
40135: CALL_OW 111
// result := [ _x , _y ] ;
40139: LD_ADDR_VAR 0 3
40143: PUSH
40144: LD_VAR 0 5
40148: PUSH
40149: LD_VAR 0 7
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: ST_TO_ADDR
// exit ;
40158: POP
40159: POP
40160: GO 40166
// end ; end ;
40162: GO 40004
40164: POP
40165: POP
// end ;
40166: LD_VAR 0 3
40170: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40171: LD_INT 0
40173: PPUSH
40174: PPUSH
40175: PPUSH
// result := 0 ;
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_INT 0
40183: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40184: LD_VAR 0 1
40188: PUSH
40189: LD_INT 0
40191: LESS
40192: IFTRUE 40204
40194: PUSH
40195: LD_VAR 0 1
40199: PUSH
40200: LD_INT 8
40202: GREATER
40203: OR
40204: IFTRUE 40216
40206: PUSH
40207: LD_VAR 0 2
40211: PUSH
40212: LD_INT 0
40214: LESS
40215: OR
40216: IFTRUE 40228
40218: PUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_INT 8
40226: GREATER
40227: OR
40228: IFFALSE 40232
// exit ;
40230: GO 40307
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40232: LD_ADDR_VAR 0 4
40236: PUSH
40237: LD_INT 22
40239: PUSH
40240: LD_VAR 0 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PPUSH
40249: CALL_OW 69
40253: PUSH
40254: FOR_IN
40255: IFFALSE 40305
// begin un := UnitShoot ( i ) ;
40257: LD_ADDR_VAR 0 5
40261: PUSH
40262: LD_VAR 0 4
40266: PPUSH
40267: CALL_OW 504
40271: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40272: LD_VAR 0 5
40276: PPUSH
40277: CALL_OW 255
40281: PUSH
40282: LD_VAR 0 1
40286: EQUAL
40287: IFFALSE 40303
// begin result := un ;
40289: LD_ADDR_VAR 0 3
40293: PUSH
40294: LD_VAR 0 5
40298: ST_TO_ADDR
// exit ;
40299: POP
40300: POP
40301: GO 40307
// end ; end ;
40303: GO 40254
40305: POP
40306: POP
// end ;
40307: LD_VAR 0 3
40311: RET
// export function GetCargoBay ( units ) ; begin
40312: LD_INT 0
40314: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40315: LD_ADDR_VAR 0 2
40319: PUSH
40320: LD_VAR 0 1
40324: PPUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 34
40330: PUSH
40331: LD_INT 12
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 34
40340: PUSH
40341: LD_INT 51
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 34
40350: PUSH
40351: LD_INT 32
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 34
40360: PUSH
40361: LD_INT 89
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 72
40379: ST_TO_ADDR
// end ;
40380: LD_VAR 0 2
40384: RET
// export function Negate ( value ) ; begin
40385: LD_INT 0
40387: PPUSH
// result := not value ;
40388: LD_ADDR_VAR 0 2
40392: PUSH
40393: LD_VAR 0 1
40397: NOT
40398: ST_TO_ADDR
// end ;
40399: LD_VAR 0 2
40403: RET
// export function Inc ( value ) ; begin
40404: LD_INT 0
40406: PPUSH
// result := value + 1 ;
40407: LD_ADDR_VAR 0 2
40411: PUSH
40412: LD_VAR 0 1
40416: PUSH
40417: LD_INT 1
40419: PLUS
40420: ST_TO_ADDR
// end ;
40421: LD_VAR 0 2
40425: RET
// export function Dec ( value ) ; begin
40426: LD_INT 0
40428: PPUSH
// result := value - 1 ;
40429: LD_ADDR_VAR 0 2
40433: PUSH
40434: LD_VAR 0 1
40438: PUSH
40439: LD_INT 1
40441: MINUS
40442: ST_TO_ADDR
// end ;
40443: LD_VAR 0 2
40447: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40448: LD_INT 0
40450: PPUSH
40451: PPUSH
40452: PPUSH
40453: PPUSH
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_VAR 0 2
40467: PPUSH
40468: CALL_OW 488
40472: NOT
40473: IFTRUE 40492
40475: PUSH
40476: LD_VAR 0 3
40480: PPUSH
40481: LD_VAR 0 4
40485: PPUSH
40486: CALL_OW 488
40490: NOT
40491: OR
40492: IFFALSE 40505
// begin result := - 1 ;
40494: LD_ADDR_VAR 0 5
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: ST_TO_ADDR
// exit ;
40503: GO 40740
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40505: LD_ADDR_VAR 0 12
40509: PUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: LD_VAR 0 2
40519: PPUSH
40520: LD_VAR 0 3
40524: PPUSH
40525: LD_VAR 0 4
40529: PPUSH
40530: CALL 39576 0 4
40534: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40535: LD_ADDR_VAR 0 11
40539: PUSH
40540: LD_VAR 0 1
40544: PPUSH
40545: LD_VAR 0 2
40549: PPUSH
40550: LD_VAR 0 12
40554: PUSH
40555: LD_INT 1
40557: ARRAY
40558: PPUSH
40559: LD_VAR 0 12
40563: PUSH
40564: LD_INT 2
40566: ARRAY
40567: PPUSH
40568: CALL_OW 298
40572: ST_TO_ADDR
// distance := 9999 ;
40573: LD_ADDR_VAR 0 10
40577: PUSH
40578: LD_INT 9999
40580: ST_TO_ADDR
// for i := 0 to 5 do
40581: LD_ADDR_VAR 0 6
40585: PUSH
40586: DOUBLE
40587: LD_INT 0
40589: DEC
40590: ST_TO_ADDR
40591: LD_INT 5
40593: PUSH
40594: FOR_TO
40595: IFFALSE 40738
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40597: LD_ADDR_VAR 0 7
40601: PUSH
40602: LD_VAR 0 1
40606: PPUSH
40607: LD_VAR 0 6
40611: PPUSH
40612: LD_VAR 0 11
40616: PPUSH
40617: CALL_OW 272
40621: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40622: LD_ADDR_VAR 0 8
40626: PUSH
40627: LD_VAR 0 2
40631: PPUSH
40632: LD_VAR 0 6
40636: PPUSH
40637: LD_VAR 0 11
40641: PPUSH
40642: CALL_OW 273
40646: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40647: LD_VAR 0 7
40651: PPUSH
40652: LD_VAR 0 8
40656: PPUSH
40657: CALL_OW 488
40661: NOT
40662: IFFALSE 40666
// continue ;
40664: GO 40594
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40666: LD_ADDR_VAR 0 9
40670: PUSH
40671: LD_VAR 0 12
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: PPUSH
40680: LD_VAR 0 12
40684: PUSH
40685: LD_INT 2
40687: ARRAY
40688: PPUSH
40689: LD_VAR 0 7
40693: PPUSH
40694: LD_VAR 0 8
40698: PPUSH
40699: CALL_OW 298
40703: ST_TO_ADDR
// if tmp < distance then
40704: LD_VAR 0 9
40708: PUSH
40709: LD_VAR 0 10
40713: LESS
40714: IFFALSE 40736
// begin result := i ;
40716: LD_ADDR_VAR 0 5
40720: PUSH
40721: LD_VAR 0 6
40725: ST_TO_ADDR
// distance := tmp ;
40726: LD_ADDR_VAR 0 10
40730: PUSH
40731: LD_VAR 0 9
40735: ST_TO_ADDR
// end ; end ;
40736: GO 40594
40738: POP
40739: POP
// end ;
40740: LD_VAR 0 5
40744: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40745: LD_INT 0
40747: PPUSH
40748: PPUSH
// if not driver or not IsInUnit ( driver ) then
40749: LD_VAR 0 1
40753: NOT
40754: IFTRUE 40768
40756: PUSH
40757: LD_VAR 0 1
40761: PPUSH
40762: CALL_OW 310
40766: NOT
40767: OR
40768: IFFALSE 40772
// exit ;
40770: GO 40862
// vehicle := IsInUnit ( driver ) ;
40772: LD_ADDR_VAR 0 3
40776: PUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: CALL_OW 310
40786: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40787: LD_VAR 0 1
40791: PPUSH
40792: LD_STRING \
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: PUSH
40822: LD_STRING E
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_VAR 0 3
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PPUSH
40858: CALL_OW 446
// end ;
40862: LD_VAR 0 2
40866: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40867: LD_INT 0
40869: PPUSH
40870: PPUSH
// if not driver or not IsInUnit ( driver ) then
40871: LD_VAR 0 1
40875: NOT
40876: IFTRUE 40890
40878: PUSH
40879: LD_VAR 0 1
40883: PPUSH
40884: CALL_OW 310
40888: NOT
40889: OR
40890: IFFALSE 40894
// exit ;
40892: GO 40984
// vehicle := IsInUnit ( driver ) ;
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: CALL_OW 310
40908: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40909: LD_VAR 0 1
40913: PPUSH
40914: LD_STRING \
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: PUSH
40944: LD_STRING E
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_VAR 0 3
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PPUSH
40980: CALL_OW 447
// end ;
40984: LD_VAR 0 2
40988: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40989: LD_INT 0
40991: PPUSH
40992: PPUSH
40993: PPUSH
// tmp := [ ] ;
40994: LD_ADDR_VAR 0 5
40998: PUSH
40999: EMPTY
41000: ST_TO_ADDR
// for i in units do
41001: LD_ADDR_VAR 0 4
41005: PUSH
41006: LD_VAR 0 1
41010: PUSH
41011: FOR_IN
41012: IFFALSE 41050
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41014: LD_ADDR_VAR 0 5
41018: PUSH
41019: LD_VAR 0 5
41023: PPUSH
41024: LD_VAR 0 5
41028: PUSH
41029: LD_INT 1
41031: PLUS
41032: PPUSH
41033: LD_VAR 0 4
41037: PPUSH
41038: CALL_OW 256
41042: PPUSH
41043: CALL_OW 2
41047: ST_TO_ADDR
41048: GO 41011
41050: POP
41051: POP
// if not tmp then
41052: LD_VAR 0 5
41056: NOT
41057: IFFALSE 41061
// exit ;
41059: GO 41109
// if asc then
41061: LD_VAR 0 2
41065: IFFALSE 41089
// result := SortListByListAsc ( units , tmp ) else
41067: LD_ADDR_VAR 0 3
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: LD_VAR 0 5
41081: PPUSH
41082: CALL_OW 76
41086: ST_TO_ADDR
41087: GO 41109
// result := SortListByListDesc ( units , tmp ) ;
41089: LD_ADDR_VAR 0 3
41093: PUSH
41094: LD_VAR 0 1
41098: PPUSH
41099: LD_VAR 0 5
41103: PPUSH
41104: CALL_OW 77
41108: ST_TO_ADDR
// end ;
41109: LD_VAR 0 3
41113: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
// task := GetTaskList ( mech ) ;
41118: LD_ADDR_VAR 0 4
41122: PUSH
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 437
41132: ST_TO_ADDR
// if not task then
41133: LD_VAR 0 4
41137: NOT
41138: IFFALSE 41142
// exit ;
41140: GO 41186
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41142: LD_ADDR_VAR 0 3
41146: PUSH
41147: LD_VAR 0 4
41151: PUSH
41152: LD_INT 1
41154: ARRAY
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: PUSH
41160: LD_STRING r
41162: EQUAL
41163: IFFALSE 41185
41165: PUSH
41166: LD_VAR 0 4
41170: PUSH
41171: LD_INT 1
41173: ARRAY
41174: PUSH
41175: LD_INT 4
41177: ARRAY
41178: PUSH
41179: LD_VAR 0 2
41183: EQUAL
41184: AND
41185: ST_TO_ADDR
// end ;
41186: LD_VAR 0 3
41190: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41191: LD_INT 0
41193: PPUSH
// SetDir ( unit , d ) ;
41194: LD_VAR 0 1
41198: PPUSH
41199: LD_VAR 0 4
41203: PPUSH
41204: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
41208: LD_ADDR_VAR 0 6
41212: PUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: LD_VAR 0 2
41222: PPUSH
41223: LD_VAR 0 3
41227: PPUSH
41228: LD_VAR 0 5
41232: PPUSH
41233: CALL_OW 48
41237: ST_TO_ADDR
// end ;
41238: LD_VAR 0 6
41242: RET
// export function ToNaturalNumber ( number ) ; begin
41243: LD_INT 0
41245: PPUSH
// result := number div 1 ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_VAR 0 1
41255: PUSH
41256: LD_INT 1
41258: DIV
41259: ST_TO_ADDR
// if number < 0 then
41260: LD_VAR 0 1
41264: PUSH
41265: LD_INT 0
41267: LESS
41268: IFFALSE 41278
// result := 0 ;
41270: LD_ADDR_VAR 0 2
41274: PUSH
41275: LD_INT 0
41277: ST_TO_ADDR
// end ;
41278: LD_VAR 0 2
41282: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
// if not buildings then
41288: LD_VAR 0 1
41292: NOT
41293: IFFALSE 41297
// exit ;
41295: GO 41412
// tmp := [ ] ;
41297: LD_ADDR_VAR 0 5
41301: PUSH
41302: EMPTY
41303: ST_TO_ADDR
// for b in buildings do
41304: LD_ADDR_VAR 0 4
41308: PUSH
41309: LD_VAR 0 1
41313: PUSH
41314: FOR_IN
41315: IFFALSE 41353
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
41317: LD_ADDR_VAR 0 5
41321: PUSH
41322: LD_VAR 0 5
41326: PPUSH
41327: LD_VAR 0 5
41331: PUSH
41332: LD_INT 1
41334: PLUS
41335: PPUSH
41336: LD_VAR 0 4
41340: PPUSH
41341: CALL_OW 266
41345: PPUSH
41346: CALL_OW 1
41350: ST_TO_ADDR
41351: GO 41314
41353: POP
41354: POP
// if not tmp then
41355: LD_VAR 0 5
41359: NOT
41360: IFFALSE 41364
// exit ;
41362: GO 41412
// if asc then
41364: LD_VAR 0 2
41368: IFFALSE 41392
// result := SortListByListAsc ( buildings , tmp ) else
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: CALL_OW 76
41389: ST_TO_ADDR
41390: GO 41412
// result := SortListByListDesc ( buildings , tmp ) ;
41392: LD_ADDR_VAR 0 3
41396: PUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: LD_VAR 0 5
41406: PPUSH
41407: CALL_OW 77
41411: ST_TO_ADDR
// end ;
41412: LD_VAR 0 3
41416: RET
// export function SortByClass ( units , class ) ; var un ; begin
41417: LD_INT 0
41419: PPUSH
41420: PPUSH
// if not units or not class then
41421: LD_VAR 0 1
41425: NOT
41426: IFTRUE 41435
41428: PUSH
41429: LD_VAR 0 2
41433: NOT
41434: OR
41435: IFFALSE 41439
// exit ;
41437: GO 41534
// result := [ ] ;
41439: LD_ADDR_VAR 0 3
41443: PUSH
41444: EMPTY
41445: ST_TO_ADDR
// for un in units do
41446: LD_ADDR_VAR 0 4
41450: PUSH
41451: LD_VAR 0 1
41455: PUSH
41456: FOR_IN
41457: IFFALSE 41532
// if GetClass ( un ) = class then
41459: LD_VAR 0 4
41463: PPUSH
41464: CALL_OW 257
41468: PUSH
41469: LD_VAR 0 2
41473: EQUAL
41474: IFFALSE 41501
// result := Insert ( result , 1 , un ) else
41476: LD_ADDR_VAR 0 3
41480: PUSH
41481: LD_VAR 0 3
41485: PPUSH
41486: LD_INT 1
41488: PPUSH
41489: LD_VAR 0 4
41493: PPUSH
41494: CALL_OW 2
41498: ST_TO_ADDR
41499: GO 41530
// result := Replace ( result , result + 1 , un ) ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 3
41510: PPUSH
41511: LD_VAR 0 3
41515: PUSH
41516: LD_INT 1
41518: PLUS
41519: PPUSH
41520: LD_VAR 0 4
41524: PPUSH
41525: CALL_OW 1
41529: ST_TO_ADDR
41530: GO 41456
41532: POP
41533: POP
// end ;
41534: LD_VAR 0 3
41538: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41539: LD_INT 0
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
41546: PPUSH
41547: PPUSH
// result := [ ] ;
41548: LD_ADDR_VAR 0 4
41552: PUSH
41553: EMPTY
41554: ST_TO_ADDR
// if x - r < 0 then
41555: LD_VAR 0 1
41559: PUSH
41560: LD_VAR 0 3
41564: MINUS
41565: PUSH
41566: LD_INT 0
41568: LESS
41569: IFFALSE 41581
// min_x := 0 else
41571: LD_ADDR_VAR 0 8
41575: PUSH
41576: LD_INT 0
41578: ST_TO_ADDR
41579: GO 41597
// min_x := x - r ;
41581: LD_ADDR_VAR 0 8
41585: PUSH
41586: LD_VAR 0 1
41590: PUSH
41591: LD_VAR 0 3
41595: MINUS
41596: ST_TO_ADDR
// if y - r < 0 then
41597: LD_VAR 0 2
41601: PUSH
41602: LD_VAR 0 3
41606: MINUS
41607: PUSH
41608: LD_INT 0
41610: LESS
41611: IFFALSE 41623
// min_y := 0 else
41613: LD_ADDR_VAR 0 7
41617: PUSH
41618: LD_INT 0
41620: ST_TO_ADDR
41621: GO 41639
// min_y := y - r ;
41623: LD_ADDR_VAR 0 7
41627: PUSH
41628: LD_VAR 0 2
41632: PUSH
41633: LD_VAR 0 3
41637: MINUS
41638: ST_TO_ADDR
// max_x := x + r ;
41639: LD_ADDR_VAR 0 9
41643: PUSH
41644: LD_VAR 0 1
41648: PUSH
41649: LD_VAR 0 3
41653: PLUS
41654: ST_TO_ADDR
// max_y := y + r ;
41655: LD_ADDR_VAR 0 10
41659: PUSH
41660: LD_VAR 0 2
41664: PUSH
41665: LD_VAR 0 3
41669: PLUS
41670: ST_TO_ADDR
// for _x = min_x to max_x do
41671: LD_ADDR_VAR 0 5
41675: PUSH
41676: DOUBLE
41677: LD_VAR 0 8
41681: DEC
41682: ST_TO_ADDR
41683: LD_VAR 0 9
41687: PUSH
41688: FOR_TO
41689: IFFALSE 41790
// for _y = min_y to max_y do
41691: LD_ADDR_VAR 0 6
41695: PUSH
41696: DOUBLE
41697: LD_VAR 0 7
41701: DEC
41702: ST_TO_ADDR
41703: LD_VAR 0 10
41707: PUSH
41708: FOR_TO
41709: IFFALSE 41786
// begin if not ValidHex ( _x , _y ) then
41711: LD_VAR 0 5
41715: PPUSH
41716: LD_VAR 0 6
41720: PPUSH
41721: CALL_OW 488
41725: NOT
41726: IFFALSE 41730
// continue ;
41728: GO 41708
// if GetResourceTypeXY ( _x , _y ) then
41730: LD_VAR 0 5
41734: PPUSH
41735: LD_VAR 0 6
41739: PPUSH
41740: CALL_OW 283
41744: IFFALSE 41784
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41746: LD_ADDR_VAR 0 4
41750: PUSH
41751: LD_VAR 0 4
41755: PPUSH
41756: LD_VAR 0 4
41760: PUSH
41761: LD_INT 1
41763: PLUS
41764: PPUSH
41765: LD_VAR 0 5
41769: PUSH
41770: LD_VAR 0 6
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PPUSH
41779: CALL_OW 1
41783: ST_TO_ADDR
// end ;
41784: GO 41708
41786: POP
41787: POP
41788: GO 41688
41790: POP
41791: POP
// end ;
41792: LD_VAR 0 4
41796: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41797: LD_INT 0
41799: PPUSH
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
41804: PPUSH
41805: PPUSH
41806: PPUSH
// if not units then
41807: LD_VAR 0 1
41811: NOT
41812: IFFALSE 41816
// exit ;
41814: GO 42348
// result := UnitFilter ( units , [ f_ok ] ) ;
41816: LD_ADDR_VAR 0 3
41820: PUSH
41821: LD_VAR 0 1
41825: PPUSH
41826: LD_INT 50
41828: PUSH
41829: EMPTY
41830: LIST
41831: PPUSH
41832: CALL_OW 72
41836: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41837: LD_ADDR_VAR 0 8
41841: PUSH
41842: LD_VAR 0 1
41846: PUSH
41847: LD_INT 1
41849: ARRAY
41850: PPUSH
41851: CALL_OW 255
41855: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41856: LD_ADDR_VAR 0 10
41860: PUSH
41861: LD_INT 29
41863: PUSH
41864: LD_INT 91
41866: PUSH
41867: LD_INT 49
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: ST_TO_ADDR
// if not result then
41875: LD_VAR 0 3
41879: NOT
41880: IFFALSE 41884
// exit ;
41882: GO 42348
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41884: LD_ADDR_VAR 0 5
41888: PUSH
41889: LD_INT 81
41891: PUSH
41892: LD_VAR 0 8
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PPUSH
41901: CALL_OW 69
41905: ST_TO_ADDR
// for i in result do
41906: LD_ADDR_VAR 0 4
41910: PUSH
41911: LD_VAR 0 3
41915: PUSH
41916: FOR_IN
41917: IFFALSE 42346
// begin tag := GetTag ( i ) + 1 ;
41919: LD_ADDR_VAR 0 9
41923: PUSH
41924: LD_VAR 0 4
41928: PPUSH
41929: CALL_OW 110
41933: PUSH
41934: LD_INT 1
41936: PLUS
41937: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
41938: LD_ADDR_VAR 0 7
41942: PUSH
41943: LD_VAR 0 4
41947: PPUSH
41948: CALL_OW 250
41952: PPUSH
41953: LD_VAR 0 4
41957: PPUSH
41958: CALL_OW 251
41962: PPUSH
41963: LD_INT 4
41965: PPUSH
41966: CALL 41539 0 3
41970: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
41971: LD_VAR 0 4
41975: PPUSH
41976: CALL_OW 247
41980: PUSH
41981: LD_INT 2
41983: EQUAL
41984: IFFALSE 41996
41986: PUSH
41987: LD_VAR 0 7
41991: PUSH
41992: LD_INT 2
41994: GREATER
41995: AND
41996: IFFALSE 42016
41998: PUSH
41999: LD_VAR 0 4
42003: PPUSH
42004: CALL_OW 264
42008: PUSH
42009: LD_VAR 0 10
42013: IN
42014: NOT
42015: AND
42016: IFFALSE 42055
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42018: LD_VAR 0 4
42022: PPUSH
42023: LD_VAR 0 7
42027: PUSH
42028: LD_INT 1
42030: ARRAY
42031: PUSH
42032: LD_INT 1
42034: ARRAY
42035: PPUSH
42036: LD_VAR 0 7
42040: PUSH
42041: LD_INT 1
42043: ARRAY
42044: PUSH
42045: LD_INT 2
42047: ARRAY
42048: PPUSH
42049: CALL_OW 116
42053: GO 42344
// if path > tag then
42055: LD_VAR 0 2
42059: PUSH
42060: LD_VAR 0 9
42064: GREATER
42065: IFFALSE 42273
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42067: LD_ADDR_VAR 0 6
42071: PUSH
42072: LD_VAR 0 5
42076: PPUSH
42077: LD_INT 91
42079: PUSH
42080: LD_VAR 0 4
42084: PUSH
42085: LD_INT 8
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: PPUSH
42093: CALL_OW 72
42097: ST_TO_ADDR
// if nearEnemy then
42098: LD_VAR 0 6
42102: IFFALSE 42171
// begin if GetWeapon ( i ) = ru_time_lapser then
42104: LD_VAR 0 4
42108: PPUSH
42109: CALL_OW 264
42113: PUSH
42114: LD_INT 49
42116: EQUAL
42117: IFFALSE 42145
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42119: LD_VAR 0 4
42123: PPUSH
42124: LD_VAR 0 6
42128: PPUSH
42129: LD_VAR 0 4
42133: PPUSH
42134: CALL_OW 74
42138: PPUSH
42139: CALL_OW 112
42143: GO 42169
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42145: LD_VAR 0 4
42149: PPUSH
42150: LD_VAR 0 6
42154: PPUSH
42155: LD_VAR 0 4
42159: PPUSH
42160: CALL_OW 74
42164: PPUSH
42165: CALL 43429 0 2
// end else
42169: GO 42271
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42171: LD_VAR 0 4
42175: PPUSH
42176: LD_VAR 0 2
42180: PUSH
42181: LD_VAR 0 9
42185: ARRAY
42186: PUSH
42187: LD_INT 1
42189: ARRAY
42190: PPUSH
42191: LD_VAR 0 2
42195: PUSH
42196: LD_VAR 0 9
42200: ARRAY
42201: PUSH
42202: LD_INT 2
42204: ARRAY
42205: PPUSH
42206: CALL_OW 297
42210: PUSH
42211: LD_INT 6
42213: GREATER
42214: IFFALSE 42257
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42216: LD_VAR 0 4
42220: PPUSH
42221: LD_VAR 0 2
42225: PUSH
42226: LD_VAR 0 9
42230: ARRAY
42231: PUSH
42232: LD_INT 1
42234: ARRAY
42235: PPUSH
42236: LD_VAR 0 2
42240: PUSH
42241: LD_VAR 0 9
42245: ARRAY
42246: PUSH
42247: LD_INT 2
42249: ARRAY
42250: PPUSH
42251: CALL_OW 114
42255: GO 42271
// SetTag ( i , tag ) ;
42257: LD_VAR 0 4
42261: PPUSH
42262: LD_VAR 0 9
42266: PPUSH
42267: CALL_OW 109
// end else
42271: GO 42344
// if enemy then
42273: LD_VAR 0 5
42277: IFFALSE 42344
// begin if GetWeapon ( i ) = ru_time_lapser then
42279: LD_VAR 0 4
42283: PPUSH
42284: CALL_OW 264
42288: PUSH
42289: LD_INT 49
42291: EQUAL
42292: IFFALSE 42320
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42294: LD_VAR 0 4
42298: PPUSH
42299: LD_VAR 0 5
42303: PPUSH
42304: LD_VAR 0 4
42308: PPUSH
42309: CALL_OW 74
42313: PPUSH
42314: CALL_OW 112
42318: GO 42344
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42320: LD_VAR 0 4
42324: PPUSH
42325: LD_VAR 0 5
42329: PPUSH
42330: LD_VAR 0 4
42334: PPUSH
42335: CALL_OW 74
42339: PPUSH
42340: CALL 43429 0 2
// end ; end ;
42344: GO 41916
42346: POP
42347: POP
// end ;
42348: LD_VAR 0 3
42352: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42353: LD_INT 0
42355: PPUSH
42356: PPUSH
42357: PPUSH
// if not unit or IsInUnit ( unit ) then
42358: LD_VAR 0 1
42362: NOT
42363: IFTRUE 42376
42365: PUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 310
42375: OR
42376: IFFALSE 42380
// exit ;
42378: GO 42471
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42380: LD_ADDR_VAR 0 4
42384: PUSH
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 250
42394: PPUSH
42395: LD_VAR 0 2
42399: PPUSH
42400: LD_INT 1
42402: PPUSH
42403: CALL_OW 272
42407: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42408: LD_ADDR_VAR 0 5
42412: PUSH
42413: LD_VAR 0 1
42417: PPUSH
42418: CALL_OW 251
42422: PPUSH
42423: LD_VAR 0 2
42427: PPUSH
42428: LD_INT 1
42430: PPUSH
42431: CALL_OW 273
42435: ST_TO_ADDR
// if ValidHex ( x , y ) then
42436: LD_VAR 0 4
42440: PPUSH
42441: LD_VAR 0 5
42445: PPUSH
42446: CALL_OW 488
42450: IFFALSE 42471
// ComTurnXY ( unit , x , y ) ;
42452: LD_VAR 0 1
42456: PPUSH
42457: LD_VAR 0 4
42461: PPUSH
42462: LD_VAR 0 5
42466: PPUSH
42467: CALL_OW 118
// end ;
42471: LD_VAR 0 3
42475: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42476: LD_INT 0
42478: PPUSH
42479: PPUSH
// result := false ;
42480: LD_ADDR_VAR 0 3
42484: PUSH
42485: LD_INT 0
42487: ST_TO_ADDR
// if not units then
42488: LD_VAR 0 2
42492: NOT
42493: IFFALSE 42497
// exit ;
42495: GO 42542
// for i in units do
42497: LD_ADDR_VAR 0 4
42501: PUSH
42502: LD_VAR 0 2
42506: PUSH
42507: FOR_IN
42508: IFFALSE 42540
// if See ( side , i ) then
42510: LD_VAR 0 1
42514: PPUSH
42515: LD_VAR 0 4
42519: PPUSH
42520: CALL_OW 292
42524: IFFALSE 42538
// begin result := true ;
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_INT 1
42533: ST_TO_ADDR
// exit ;
42534: POP
42535: POP
42536: GO 42542
// end ;
42538: GO 42507
42540: POP
42541: POP
// end ;
42542: LD_VAR 0 3
42546: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42547: LD_INT 0
42549: PPUSH
42550: PPUSH
42551: PPUSH
42552: PPUSH
// if not unit or not points then
42553: LD_VAR 0 1
42557: NOT
42558: IFTRUE 42567
42560: PUSH
42561: LD_VAR 0 2
42565: NOT
42566: OR
42567: IFFALSE 42571
// exit ;
42569: GO 42661
// dist := 99999 ;
42571: LD_ADDR_VAR 0 5
42575: PUSH
42576: LD_INT 99999
42578: ST_TO_ADDR
// for i in points do
42579: LD_ADDR_VAR 0 4
42583: PUSH
42584: LD_VAR 0 2
42588: PUSH
42589: FOR_IN
42590: IFFALSE 42659
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42592: LD_ADDR_VAR 0 6
42596: PUSH
42597: LD_VAR 0 1
42601: PPUSH
42602: LD_VAR 0 4
42606: PUSH
42607: LD_INT 1
42609: ARRAY
42610: PPUSH
42611: LD_VAR 0 4
42615: PUSH
42616: LD_INT 2
42618: ARRAY
42619: PPUSH
42620: CALL_OW 297
42624: ST_TO_ADDR
// if tmpDist < dist then
42625: LD_VAR 0 6
42629: PUSH
42630: LD_VAR 0 5
42634: LESS
42635: IFFALSE 42657
// begin result := i ;
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_VAR 0 4
42646: ST_TO_ADDR
// dist := tmpDist ;
42647: LD_ADDR_VAR 0 5
42651: PUSH
42652: LD_VAR 0 6
42656: ST_TO_ADDR
// end ; end ;
42657: GO 42589
42659: POP
42660: POP
// end ;
42661: LD_VAR 0 3
42665: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42666: LD_INT 0
42668: PPUSH
// uc_side := side ;
42669: LD_ADDR_OWVAR 20
42673: PUSH
42674: LD_VAR 0 1
42678: ST_TO_ADDR
// uc_nation := 3 ;
42679: LD_ADDR_OWVAR 21
42683: PUSH
42684: LD_INT 3
42686: ST_TO_ADDR
// vc_chassis := 25 ;
42687: LD_ADDR_OWVAR 37
42691: PUSH
42692: LD_INT 25
42694: ST_TO_ADDR
// vc_engine := engine_siberite ;
42695: LD_ADDR_OWVAR 39
42699: PUSH
42700: LD_INT 3
42702: ST_TO_ADDR
// vc_control := control_computer ;
42703: LD_ADDR_OWVAR 38
42707: PUSH
42708: LD_INT 3
42710: ST_TO_ADDR
// vc_weapon := 59 ;
42711: LD_ADDR_OWVAR 40
42715: PUSH
42716: LD_INT 59
42718: ST_TO_ADDR
// result := CreateVehicle ;
42719: LD_ADDR_VAR 0 5
42723: PUSH
42724: CALL_OW 45
42728: ST_TO_ADDR
// SetDir ( result , d ) ;
42729: LD_VAR 0 5
42733: PPUSH
42734: LD_VAR 0 4
42738: PPUSH
42739: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42743: LD_VAR 0 5
42747: PPUSH
42748: LD_VAR 0 2
42752: PPUSH
42753: LD_VAR 0 3
42757: PPUSH
42758: LD_INT 0
42760: PPUSH
42761: CALL_OW 48
// end ;
42765: LD_VAR 0 5
42769: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42770: LD_INT 0
42772: PPUSH
42773: PPUSH
42774: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42775: LD_ADDR_VAR 0 2
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42798: LD_VAR 0 1
42802: NOT
42803: IFTRUE 42836
42805: PUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 264
42815: PUSH
42816: LD_INT 12
42818: PUSH
42819: LD_INT 51
42821: PUSH
42822: LD_INT 32
42824: PUSH
42825: LD_INT 89
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: IN
42834: NOT
42835: OR
42836: IFFALSE 42840
// exit ;
42838: GO 42938
// for i := 1 to 3 do
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: DOUBLE
42846: LD_INT 1
42848: DEC
42849: ST_TO_ADDR
42850: LD_INT 3
42852: PUSH
42853: FOR_TO
42854: IFFALSE 42936
// begin tmp := GetCargo ( cargo , i ) ;
42856: LD_ADDR_VAR 0 4
42860: PUSH
42861: LD_VAR 0 1
42865: PPUSH
42866: LD_VAR 0 3
42870: PPUSH
42871: CALL_OW 289
42875: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42876: LD_ADDR_VAR 0 2
42880: PUSH
42881: LD_VAR 0 2
42885: PPUSH
42886: LD_VAR 0 3
42890: PPUSH
42891: LD_VAR 0 4
42895: PPUSH
42896: CALL_OW 1
42900: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42901: LD_ADDR_VAR 0 2
42905: PUSH
42906: LD_VAR 0 2
42910: PPUSH
42911: LD_INT 4
42913: PPUSH
42914: LD_VAR 0 2
42918: PUSH
42919: LD_INT 4
42921: ARRAY
42922: PUSH
42923: LD_VAR 0 4
42927: PLUS
42928: PPUSH
42929: CALL_OW 1
42933: ST_TO_ADDR
// end ;
42934: GO 42853
42936: POP
42937: POP
// end ;
42938: LD_VAR 0 2
42942: RET
// export function Length ( array ) ; begin
42943: LD_INT 0
42945: PPUSH
// result := array + 0 ;
42946: LD_ADDR_VAR 0 2
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: LD_INT 0
42958: PLUS
42959: ST_TO_ADDR
// end ;
42960: LD_VAR 0 2
42964: RET
// export function PrepareArray ( array ) ; begin
42965: LD_INT 0
42967: PPUSH
// result := array diff 0 ;
42968: LD_ADDR_VAR 0 2
42972: PUSH
42973: LD_VAR 0 1
42977: PUSH
42978: LD_INT 0
42980: DIFF
42981: ST_TO_ADDR
// if not result [ 1 ] then
42982: LD_VAR 0 2
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: NOT
42991: IFFALSE 43011
// result := Delete ( result , 1 ) ;
42993: LD_ADDR_VAR 0 2
42997: PUSH
42998: LD_VAR 0 2
43002: PPUSH
43003: LD_INT 1
43005: PPUSH
43006: CALL_OW 3
43010: ST_TO_ADDR
// end ;
43011: LD_VAR 0 2
43015: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43016: LD_INT 0
43018: PPUSH
43019: PPUSH
43020: PPUSH
43021: PPUSH
// sibRocketRange := 25 ;
43022: LD_ADDR_VAR 0 6
43026: PUSH
43027: LD_INT 25
43029: ST_TO_ADDR
// result := false ;
43030: LD_ADDR_VAR 0 4
43034: PUSH
43035: LD_INT 0
43037: ST_TO_ADDR
// for i := 0 to 5 do
43038: LD_ADDR_VAR 0 5
43042: PUSH
43043: DOUBLE
43044: LD_INT 0
43046: DEC
43047: ST_TO_ADDR
43048: LD_INT 5
43050: PUSH
43051: FOR_TO
43052: IFFALSE 43119
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43054: LD_VAR 0 1
43058: PPUSH
43059: LD_VAR 0 5
43063: PPUSH
43064: LD_VAR 0 6
43068: PPUSH
43069: CALL_OW 272
43073: PPUSH
43074: LD_VAR 0 2
43078: PPUSH
43079: LD_VAR 0 5
43083: PPUSH
43084: LD_VAR 0 6
43088: PPUSH
43089: CALL_OW 273
43093: PPUSH
43094: LD_VAR 0 3
43098: PPUSH
43099: CALL_OW 309
43103: IFFALSE 43117
// begin result := true ;
43105: LD_ADDR_VAR 0 4
43109: PUSH
43110: LD_INT 1
43112: ST_TO_ADDR
// exit ;
43113: POP
43114: POP
43115: GO 43121
// end ;
43117: GO 43051
43119: POP
43120: POP
// end ;
43121: LD_VAR 0 4
43125: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
43126: LD_INT 0
43128: PPUSH
43129: PPUSH
43130: PPUSH
// if btype = b_depot then
43131: LD_VAR 0 2
43135: PUSH
43136: LD_INT 0
43138: EQUAL
43139: IFFALSE 43151
// begin result := true ;
43141: LD_ADDR_VAR 0 3
43145: PUSH
43146: LD_INT 1
43148: ST_TO_ADDR
// exit ;
43149: GO 43271
// end ; pom := GetBase ( depot ) ;
43151: LD_ADDR_VAR 0 4
43155: PUSH
43156: LD_VAR 0 1
43160: PPUSH
43161: CALL_OW 274
43165: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43166: LD_ADDR_VAR 0 5
43170: PUSH
43171: LD_VAR 0 2
43175: PPUSH
43176: LD_VAR 0 1
43180: PPUSH
43181: CALL_OW 248
43185: PPUSH
43186: CALL_OW 450
43190: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
43191: LD_ADDR_VAR 0 3
43195: PUSH
43196: LD_VAR 0 4
43200: PPUSH
43201: LD_INT 1
43203: PPUSH
43204: CALL_OW 275
43208: PUSH
43209: LD_VAR 0 5
43213: PUSH
43214: LD_INT 1
43216: ARRAY
43217: GREATEREQUAL
43218: IFFALSE 43244
43220: PUSH
43221: LD_VAR 0 4
43225: PPUSH
43226: LD_INT 2
43228: PPUSH
43229: CALL_OW 275
43233: PUSH
43234: LD_VAR 0 5
43238: PUSH
43239: LD_INT 2
43241: ARRAY
43242: GREATEREQUAL
43243: AND
43244: IFFALSE 43270
43246: PUSH
43247: LD_VAR 0 4
43251: PPUSH
43252: LD_INT 3
43254: PPUSH
43255: CALL_OW 275
43259: PUSH
43260: LD_VAR 0 5
43264: PUSH
43265: LD_INT 3
43267: ARRAY
43268: GREATEREQUAL
43269: AND
43270: ST_TO_ADDR
// end ;
43271: LD_VAR 0 3
43275: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43276: LD_INT 0
43278: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43279: LD_VAR 0 1
43283: PPUSH
43284: LD_VAR 0 2
43288: PPUSH
43289: LD_INT 0
43291: PPUSH
43292: LD_INT 0
43294: PPUSH
43295: LD_INT 1
43297: PPUSH
43298: LD_INT 0
43300: PPUSH
43301: CALL_OW 587
// end ;
43305: LD_VAR 0 3
43309: RET
// export function CenterOnNow ( unit ) ; begin
43310: LD_INT 0
43312: PPUSH
// result := IsInUnit ( unit ) ;
43313: LD_ADDR_VAR 0 2
43317: PUSH
43318: LD_VAR 0 1
43322: PPUSH
43323: CALL_OW 310
43327: ST_TO_ADDR
// if not result then
43328: LD_VAR 0 2
43332: NOT
43333: IFFALSE 43345
// result := unit ;
43335: LD_ADDR_VAR 0 2
43339: PUSH
43340: LD_VAR 0 1
43344: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43345: LD_VAR 0 1
43349: PPUSH
43350: CALL_OW 87
// end ;
43354: LD_VAR 0 2
43358: RET
// export function ComMoveHex ( unit , hex ) ; begin
43359: LD_INT 0
43361: PPUSH
// if not hex then
43362: LD_VAR 0 2
43366: NOT
43367: IFFALSE 43371
// exit ;
43369: GO 43424
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43371: LD_VAR 0 2
43375: PUSH
43376: LD_INT 1
43378: ARRAY
43379: PPUSH
43380: LD_VAR 0 2
43384: PUSH
43385: LD_INT 2
43387: ARRAY
43388: PPUSH
43389: CALL_OW 428
43393: IFFALSE 43397
// exit ;
43395: GO 43424
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43397: LD_VAR 0 1
43401: PPUSH
43402: LD_VAR 0 2
43406: PUSH
43407: LD_INT 1
43409: ARRAY
43410: PPUSH
43411: LD_VAR 0 2
43415: PUSH
43416: LD_INT 2
43418: ARRAY
43419: PPUSH
43420: CALL_OW 111
// end ;
43424: LD_VAR 0 3
43428: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43429: LD_INT 0
43431: PPUSH
43432: PPUSH
43433: PPUSH
// if not unit or not enemy then
43434: LD_VAR 0 1
43438: NOT
43439: IFTRUE 43448
43441: PUSH
43442: LD_VAR 0 2
43446: NOT
43447: OR
43448: IFFALSE 43452
// exit ;
43450: GO 43578
// x := GetX ( enemy ) ;
43452: LD_ADDR_VAR 0 4
43456: PUSH
43457: LD_VAR 0 2
43461: PPUSH
43462: CALL_OW 250
43466: ST_TO_ADDR
// y := GetY ( enemy ) ;
43467: LD_ADDR_VAR 0 5
43471: PUSH
43472: LD_VAR 0 2
43476: PPUSH
43477: CALL_OW 251
43481: ST_TO_ADDR
// if ValidHex ( x , y ) then
43482: LD_VAR 0 4
43486: PPUSH
43487: LD_VAR 0 5
43491: PPUSH
43492: CALL_OW 488
43496: IFFALSE 43578
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
43498: LD_VAR 0 2
43502: PPUSH
43503: CALL_OW 247
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: IN
43518: IFTRUE 43541
43520: PUSH
43521: LD_VAR 0 1
43525: PPUSH
43526: CALL_OW 255
43530: PPUSH
43531: LD_VAR 0 2
43535: PPUSH
43536: CALL_OW 292
43540: OR
43541: IFFALSE 43559
// ComAttackUnit ( unit , enemy ) else
43543: LD_VAR 0 1
43547: PPUSH
43548: LD_VAR 0 2
43552: PPUSH
43553: CALL_OW 115
43557: GO 43578
// ComAgressiveMove ( unit , x , y ) ;
43559: LD_VAR 0 1
43563: PPUSH
43564: LD_VAR 0 4
43568: PPUSH
43569: LD_VAR 0 5
43573: PPUSH
43574: CALL_OW 114
// end ;
43578: LD_VAR 0 3
43582: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
43583: LD_INT 0
43585: PPUSH
43586: PPUSH
43587: PPUSH
// list := AreaToList ( area , 0 ) ;
43588: LD_ADDR_VAR 0 5
43592: PUSH
43593: LD_VAR 0 1
43597: PPUSH
43598: LD_INT 0
43600: PPUSH
43601: CALL_OW 517
43605: ST_TO_ADDR
// if not list then
43606: LD_VAR 0 5
43610: NOT
43611: IFFALSE 43615
// exit ;
43613: GO 43745
// if all then
43615: LD_VAR 0 2
43619: IFFALSE 43707
// begin for i := 1 to list [ 1 ] do
43621: LD_ADDR_VAR 0 4
43625: PUSH
43626: DOUBLE
43627: LD_INT 1
43629: DEC
43630: ST_TO_ADDR
43631: LD_VAR 0 5
43635: PUSH
43636: LD_INT 1
43638: ARRAY
43639: PUSH
43640: FOR_TO
43641: IFFALSE 43703
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_VAR 0 3
43652: PPUSH
43653: LD_VAR 0 3
43657: PUSH
43658: LD_INT 1
43660: PLUS
43661: PPUSH
43662: LD_VAR 0 5
43666: PUSH
43667: LD_INT 1
43669: ARRAY
43670: PUSH
43671: LD_VAR 0 4
43675: ARRAY
43676: PUSH
43677: LD_VAR 0 5
43681: PUSH
43682: LD_INT 2
43684: ARRAY
43685: PUSH
43686: LD_VAR 0 4
43690: ARRAY
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PPUSH
43696: CALL_OW 1
43700: ST_TO_ADDR
43701: GO 43640
43703: POP
43704: POP
// exit ;
43705: GO 43745
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
43707: LD_ADDR_VAR 0 3
43711: PUSH
43712: LD_VAR 0 5
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: PUSH
43721: LD_INT 1
43723: ARRAY
43724: PUSH
43725: LD_VAR 0 5
43729: PUSH
43730: LD_INT 2
43732: ARRAY
43733: PUSH
43734: LD_INT 1
43736: ARRAY
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: ST_TO_ADDR
// end ;
43745: LD_VAR 0 3
43749: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
43750: LD_INT 0
43752: PPUSH
43753: PPUSH
// list := AreaToList ( area , 0 ) ;
43754: LD_ADDR_VAR 0 4
43758: PUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: LD_INT 0
43766: PPUSH
43767: CALL_OW 517
43771: ST_TO_ADDR
// if not list then
43772: LD_VAR 0 4
43776: NOT
43777: IFFALSE 43781
// exit ;
43779: GO 43822
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
43781: LD_ADDR_VAR 0 3
43785: PUSH
43786: LD_VAR 0 4
43790: PUSH
43791: LD_INT 1
43793: ARRAY
43794: PUSH
43795: LD_INT 1
43797: ARRAY
43798: PUSH
43799: LD_VAR 0 4
43803: PUSH
43804: LD_INT 2
43806: ARRAY
43807: PUSH
43808: LD_INT 1
43810: ARRAY
43811: PUSH
43812: LD_VAR 0 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// end ;
43822: LD_VAR 0 3
43826: RET
// export function First ( array ) ; begin
43827: LD_INT 0
43829: PPUSH
// if not array then
43830: LD_VAR 0 1
43834: NOT
43835: IFFALSE 43839
// exit ;
43837: GO 43853
// result := array [ 1 ] ;
43839: LD_ADDR_VAR 0 2
43843: PUSH
43844: LD_VAR 0 1
43848: PUSH
43849: LD_INT 1
43851: ARRAY
43852: ST_TO_ADDR
// end ;
43853: LD_VAR 0 2
43857: RET
// export function Last ( array ) ; begin
43858: LD_INT 0
43860: PPUSH
// if not array then
43861: LD_VAR 0 1
43865: NOT
43866: IFFALSE 43870
// exit ;
43868: GO 43886
// result := array [ array ] ;
43870: LD_ADDR_VAR 0 2
43874: PUSH
43875: LD_VAR 0 1
43879: PUSH
43880: LD_VAR 0 1
43884: ARRAY
43885: ST_TO_ADDR
// end ;
43886: LD_VAR 0 2
43890: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
43891: LD_INT 0
43893: PPUSH
43894: PPUSH
// result := [ ] ;
43895: LD_ADDR_VAR 0 5
43899: PUSH
43900: EMPTY
43901: ST_TO_ADDR
// if not array then
43902: LD_VAR 0 1
43906: NOT
43907: IFFALSE 43911
// exit ;
43909: GO 44023
// for i := 1 to array do
43911: LD_ADDR_VAR 0 6
43915: PUSH
43916: DOUBLE
43917: LD_INT 1
43919: DEC
43920: ST_TO_ADDR
43921: LD_VAR 0 1
43925: PUSH
43926: FOR_TO
43927: IFFALSE 44021
// if array [ i ] [ index ] = value then
43929: LD_VAR 0 1
43933: PUSH
43934: LD_VAR 0 6
43938: ARRAY
43939: PUSH
43940: LD_VAR 0 2
43944: ARRAY
43945: PUSH
43946: LD_VAR 0 3
43950: EQUAL
43951: IFFALSE 44019
// begin if indexColumn then
43953: LD_VAR 0 4
43957: IFFALSE 43993
// result := Join ( result , array [ i ] [ indexColumn ] ) else
43959: LD_ADDR_VAR 0 5
43963: PUSH
43964: LD_VAR 0 5
43968: PPUSH
43969: LD_VAR 0 1
43973: PUSH
43974: LD_VAR 0 6
43978: ARRAY
43979: PUSH
43980: LD_VAR 0 4
43984: ARRAY
43985: PPUSH
43986: CALL 39031 0 2
43990: ST_TO_ADDR
43991: GO 44019
// result := Join ( result , array [ i ] ) ;
43993: LD_ADDR_VAR 0 5
43997: PUSH
43998: LD_VAR 0 5
44002: PPUSH
44003: LD_VAR 0 1
44007: PUSH
44008: LD_VAR 0 6
44012: ARRAY
44013: PPUSH
44014: CALL 39031 0 2
44018: ST_TO_ADDR
// end ;
44019: GO 43926
44021: POP
44022: POP
// end ;
44023: LD_VAR 0 5
44027: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
44028: LD_INT 0
44030: PPUSH
// if not vehicles or not parkingPoint then
44031: LD_VAR 0 1
44035: NOT
44036: IFTRUE 44045
44038: PUSH
44039: LD_VAR 0 2
44043: NOT
44044: OR
44045: IFFALSE 44049
// exit ;
44047: GO 44147
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
44049: LD_ADDR_VAR 0 1
44053: PUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: LD_INT 50
44061: PUSH
44062: EMPTY
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 92
44070: PUSH
44071: LD_VAR 0 2
44075: PUSH
44076: LD_INT 1
44078: ARRAY
44079: PUSH
44080: LD_VAR 0 2
44084: PUSH
44085: LD_INT 2
44087: ARRAY
44088: PUSH
44089: LD_INT 8
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PPUSH
44106: CALL_OW 72
44110: ST_TO_ADDR
// if not vehicles then
44111: LD_VAR 0 1
44115: NOT
44116: IFFALSE 44120
// exit ;
44118: GO 44147
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
44120: LD_VAR 0 1
44124: PPUSH
44125: LD_VAR 0 2
44129: PUSH
44130: LD_INT 1
44132: ARRAY
44133: PPUSH
44134: LD_VAR 0 2
44138: PUSH
44139: LD_INT 2
44141: ARRAY
44142: PPUSH
44143: CALL_OW 111
// end ;
44147: LD_VAR 0 3
44151: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
44152: LD_INT 0
44154: PPUSH
44155: PPUSH
44156: PPUSH
// if not side or not area then
44157: LD_VAR 0 1
44161: NOT
44162: IFTRUE 44171
44164: PUSH
44165: LD_VAR 0 2
44169: NOT
44170: OR
44171: IFFALSE 44175
// exit ;
44173: GO 44294
// tmp := AreaToList ( area , 0 ) ;
44175: LD_ADDR_VAR 0 5
44179: PUSH
44180: LD_VAR 0 2
44184: PPUSH
44185: LD_INT 0
44187: PPUSH
44188: CALL_OW 517
44192: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
44193: LD_ADDR_VAR 0 4
44197: PUSH
44198: DOUBLE
44199: LD_INT 1
44201: DEC
44202: ST_TO_ADDR
44203: LD_VAR 0 5
44207: PUSH
44208: LD_INT 1
44210: ARRAY
44211: PUSH
44212: FOR_TO
44213: IFFALSE 44292
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
44215: LD_VAR 0 5
44219: PUSH
44220: LD_INT 1
44222: ARRAY
44223: PUSH
44224: LD_VAR 0 4
44228: ARRAY
44229: PPUSH
44230: LD_VAR 0 5
44234: PUSH
44235: LD_INT 2
44237: ARRAY
44238: PUSH
44239: LD_VAR 0 4
44243: ARRAY
44244: PPUSH
44245: CALL_OW 351
44249: IFFALSE 44290
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
44251: LD_VAR 0 5
44255: PUSH
44256: LD_INT 1
44258: ARRAY
44259: PUSH
44260: LD_VAR 0 4
44264: ARRAY
44265: PPUSH
44266: LD_VAR 0 5
44270: PUSH
44271: LD_INT 2
44273: ARRAY
44274: PUSH
44275: LD_VAR 0 4
44279: ARRAY
44280: PPUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: CALL_OW 244
// end ;
44290: GO 44212
44292: POP
44293: POP
// end ;
44294: LD_VAR 0 3
44298: RET
// export function UniqueArray ( array ) ; var i ; begin
44299: LD_INT 0
44301: PPUSH
44302: PPUSH
// result := [ ] ;
44303: LD_ADDR_VAR 0 2
44307: PUSH
44308: EMPTY
44309: ST_TO_ADDR
// if not array then
44310: LD_VAR 0 1
44314: NOT
44315: IFFALSE 44319
// exit ;
44317: GO 44380
// for i := 1 to array do
44319: LD_ADDR_VAR 0 3
44323: PUSH
44324: DOUBLE
44325: LD_INT 1
44327: DEC
44328: ST_TO_ADDR
44329: LD_VAR 0 1
44333: PUSH
44334: FOR_TO
44335: IFFALSE 44378
// if not array [ i ] in result then
44337: LD_VAR 0 1
44341: PUSH
44342: LD_VAR 0 3
44346: ARRAY
44347: PUSH
44348: LD_VAR 0 2
44352: IN
44353: NOT
44354: IFFALSE 44376
// result := Join ( result , i ) ;
44356: LD_ADDR_VAR 0 2
44360: PUSH
44361: LD_VAR 0 2
44365: PPUSH
44366: LD_VAR 0 3
44370: PPUSH
44371: CALL 39031 0 2
44375: ST_TO_ADDR
44376: GO 44334
44378: POP
44379: POP
// end ;
44380: LD_VAR 0 2
44384: RET
